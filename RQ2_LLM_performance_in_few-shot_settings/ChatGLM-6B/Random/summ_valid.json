[{"ID": 1, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function indexOfKey($key) { if($this->isKeycacheInvalid()) { $this->regenerateKeyCache(); } if(isset($this->__keycache[$key])) { return $this->__keycache[$key]; } return -1; }. \n### Response: Index of key\n@param mixed $key\n@return int.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected final void fastPathOrderedEmit(U value, boolean delayError, Disposable disposable) { final Observer<? super V> observer = downstream; final SimplePlainQueue<U> q = queue; if (wip.get() == 0 && wip.compareAndSet(0, 1)) { if (q.isEmpty()) { accept(observer, value); if (leave(-1) == 0) { return; } } else { q.offer(value); } } else { q.offer(value); if (!enter()) { return; } } QueueDrainHelper.drainLoop(q, observer, delayError, disposable, this); } \n### Response:", "ground_truth": "Makes sure the fast-path emits in order.\n@param value the value to emit or queue up\n@param delayError if true, errors are delayed until the source has terminated\n@param disposable the resource to dispose if the drain terminates", "predict": "Fast path ordered emit method.\n\n@param U value\n@param boolean delayError\n@param Disposable disposable\n@return void."}, {"ID": 2, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def execute(self, conn, migration_url=\"\", migration_input=\"\", create_by=\"\", migration_request_id=\"\", transaction=False): \"\"\" Lists the oldest request queued \"\"\" binds = {} result = self.dbi.processData(self.sql, binds, conn, transaction) result = self.formatDict(result) if len(result) == 0 : return [] if result[0][\"migration_request_id\"] in ('', None) : return [] return result. \n### Response: Lists the oldest request queued.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @CheckReturnValue @SchedulerSupport(SchedulerSupport.NONE) public static <T> Observable<T> wrap(ObservableSource<T> source) { ObjectHelper.requireNonNull(source, \"source is null\"); if (source instanceof Observable) { return RxJavaPlugins.onAssembly((Observable<T>)source); } return RxJavaPlugins.onAssembly(new ObservableFromUnsafeSource<T>(source)); } \n### Response:", "ground_truth": "Wraps an ObservableSource into an Observable if not already an Observable.\n\n\nScheduler:\n{@code wrap} does not operate by default on a particular {@link Scheduler}.\n\n\n@param  the value type\n@param source the source ObservableSource instance\n@return the new Observable instance or the same as the source\n@throws NullPointerException if source is null", "predict": "Wraps an ObservableSource<T> in an Observable. If the source is null, returns an ObservableFromUnsafeSource<T>."}, {"ID": 3, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def save_embed_js(target=\"\", version=wembed.__html_manager_version__): \"\"\"Download and save the ipywidgets embedding javascript to a local file. :type target: str :type version: str \"\"\" url = u'https://unpkg.com/@jupyter-widgets/html-manager@{0:s}/dist/embed-amd.js'.format(version) if version.startswith('^'): version = version[1:] filename = \"embed-amd_v{0:s}.js\".format(version) filepath = os.path.join(target, filename) download_to_file(url, filepath) return filename. \n### Response: Download and save the ipywidgets embedding javascript to a local file.\n\n    :type target: str\n    :type version: str.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @CheckReturnValue @SchedulerSupport(SchedulerSupport.NONE) public final Observable<T> sorted(Comparator<? super T> sortFunction) { ObjectHelper.requireNonNull(sortFunction, \"sortFunction is null\"); return toList().toObservable().map(Functions.listSorter(sortFunction)).flatMapIterable(Functions.<List<T>>identity()); } \n### Response:", "ground_truth": "Returns an Observable that emits the events emitted by source ObservableSource, in a\nsorted order based on a specified comparison function.\n\nNote that calling {@code sorted} with long, non-terminating or infinite sources\nmight cause {@link OutOfMemoryError}\n\n\nScheduler:\n{@code sorted} does not operate by default on a particular {@link Scheduler}.\n\n\n@param sortFunction\na function that compares two items emitted by the source ObservableSource and returns an Integer\nthat indicates their sort order\n@return an Observable that emits the items emitted by the source ObservableSource in sorted order", "predict": "Returns an Observable that emits a list of the sorted items.\n\n    :param sortFunction: Comparator that will be used to sort the items.\n    :type sortFunction: Comparator<? super T>.\n\n    :return: Observable that emits a list of the sorted items.\n    :rtype: Observable<List<T>>."}, {"ID": 4, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def optimize_no(self): ''' all options set to default ''' self.optimization = 0 self.relax = False self.gc_sections = False self.ffunction_sections = False self.fdata_sections = False self.fno_inline_small_functions = False. \n### Response: all options set to default.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static <T> ConnectableObservable<T> observeOn(final ConnectableObservable<T> co, final Scheduler scheduler) { final Observable<T> observable = co.observeOn(scheduler); return RxJavaPlugins.onAssembly(new Replay<T>(co, observable)); } \n### Response:", "ground_truth": "Child Observers will observe the events of the ConnectableObservable on the\nspecified scheduler.\n@param  the value type\n@param co the connectable observable instance\n@param scheduler the target scheduler\n@return the new ConnectableObservable instance", "predict": "This method observes the input ConnectableObservable on the specified Scheduler. It returns an observable that is replayed."}, {"ID": 5, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def on_batch_end(self, iteration:int, smooth_loss:TensorOrNumber, **kwargs:Any)->None: \"Determine if loss has runaway and we should stop.\" if iteration==0 or smooth_loss < self.best_loss: self.best_loss = smooth_loss self.opt.lr = self.sched.step() if self.sched.is_done or (self.stop_div and (smooth_loss > 4*self.best_loss or torch.isnan(smooth_loss))): #We use the smoothed loss to decide on the stopping since it's less shaky. return {'stop_epoch': True, 'stop_training': True}. \n### Response: Determine if loss has runaway and we should stop..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @CheckReturnValue @NonNull public static <T> UnicastProcessor<T> create(int capacityHint) { return new UnicastProcessor<T>(capacityHint); } \n### Response:", "ground_truth": "Creates an UnicastProcessor with the given internal buffer capacity hint.\n@param  the value type\n@param capacityHint the hint to size the internal unbounded buffer\n@return an UnicastProcessor instance", "predict": "Returns a new instance of the UnicastProcessor class with the given capacityHint."}, {"ID": 6, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function() { if (this.hsl !== null) { if (this.alpha < 1.0) { if (this.perceptual) { return 'rgba(' + hsluv.hsluvToRgb([this.hsl[0], this.hsl[1] * 100, this.hsl[2] * 100]).map(function(c) { return Math.round(c * 255); }).concat(this.round(this.alpha, 2)).join(', ') + ')'; } else { return 'rgba(' + chroma.hsl(this.hsl[0], this.hsl[1], this.hsl[2]).rgb().map(function(c) { return Math.round(c); }).concat(this.round(this.alpha, 2)).join(', ') + ')'; } } else { if (this.perceptual) { return hsluv.hsluvToHex([this.hsl[0], this.hsl[1] * 100, this.hsl[2] * 100]); } else { return chroma.hsl(this.hsl[0], this.hsl[1], this.hsl[2]).hex(); } } } return ''; }. \n### Response: If we have some transparency, the only way to represent it is via `rgba`. Otherwise, we use the hex representation, which has better compatibility with older browsers..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @CheckReturnValue @NonNull public static <T> UnicastProcessor<T> create(int capacityHint, Runnable onCancelled) { ObjectHelper.requireNonNull(onCancelled, \"onTerminate\"); return new UnicastProcessor<T>(capacityHint, onCancelled); } \n### Response:", "ground_truth": "Creates an UnicastProcessor with the given internal buffer capacity hint and a callback for\nthe case when the single Subscriber cancels its subscription.\n\nThe callback, if not null, is called exactly once and\nnon-overlapped with any active replay.\n\n@param  the value type\n@param capacityHint the hint to size the internal unbounded buffer\n@param onCancelled the non null callback\n@return an UnicastProcessor instance", "predict": "This method creates a new instance of the UnicastProcessor class and returns it with a capacityHint and a callback function for onTerminate. The onCancelled callback function is required to beNonNull because it may be null and can cause a null reference exception if it is not properly checked.\n\nThis method is useful for creating a new instance of a UnicastProcessor and passing it to a service or thread that requires it. It is also useful for debugging purposes, as it provides a way to check if the onCancelled callback function is being called before the processor is terminated."}, {"ID": 7, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def _recursive_overwrite(self, src, dest): \"\"\" Copy src to dest, recursively and with file overwrite. \"\"\" if os.path.isdir(src): if not os.path.isdir(dest): os.makedirs(dest) files = os.listdir(src) for f in files: self._recursive_overwrite(os.path.join(src, f), os.path.join(dest, f)) else: shutil.copyfile(src, dest, follow_symlinks=False). \n### Response: Copy src to dest, recursively and with file overwrite..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @SuppressWarnings(\"unchecked\") public static <T, R> boolean tryScalarXMapSubscribe(Publisher<T> source, Subscriber<? super R> subscriber, Function<? super T, ? extends Publisher<? extends R>> mapper) { if (source instanceof Callable) { T t; try { t = ((Callable<T>)source).call(); } catch (Throwable ex) { Exceptions.throwIfFatal(ex); EmptySubscription.error(ex, subscriber); return true; } if (t == null) { EmptySubscription.complete(subscriber); return true; } Publisher<? extends R> r; try { r = ObjectHelper.requireNonNull(mapper.apply(t), \"The mapper returned a null Publisher\"); } catch (Throwable ex) { Exceptions.throwIfFatal(ex); EmptySubscription.error(ex, subscriber); return true; } if (r instanceof Callable) { R u; try { u = ((Callable<R>)r).call(); } catch (Throwable ex) { Exceptions.throwIfFatal(ex); EmptySubscription.error(ex, subscriber); return true; } if (u == null) { EmptySubscription.complete(subscriber); return true; } subscriber.onSubscribe(new ScalarSubscription<R>(subscriber, u)); } else { r.subscribe(subscriber); } return true; } return false; } \n### Response:", "ground_truth": "Tries to subscribe to a possibly Callable source's mapped Publisher.\n@param  the input value type\n@param  the output value type\n@param source the source Publisher\n@param subscriber the subscriber\n@param mapper the function mapping a scalar value into a Publisher\n@return true if successful, false if the caller should continue with the regular path.", "predict": "ScalarXMapSubscribe is a utility method that attempts to subscribe to a ScalarX library's data source. It takes in three parameters: a source, a subscriber, and a mapper function that maps from the source to the desired output.\n\nThe method checks if the input source is a callable, and if so, it calls the callable with the input data and any errors that may occur. If the callable is not a callable, it returns true. If the input data is null, it returns true. If the input data is not a callable, it returns true. If the input data is a callable and it is not a callable that returns a Publisher, it returns true. If the input data is a callable and it is a callable that returns a Publisher, it returns true. If the input data is a Callable and it is not a callable that returns a Publisher, it returns true. If the input data is a Callable and it is a callable that returns a Publisher, it returns true. If the input data is a Callable and it is a callable that returns an R, it returns true. If the input data is a Callable and it is not a Publisher, it returns true. If the input data is a Callable and it is not a Publisher that returns an R, it returns true. If the input data is a Callable and it is a Publisher that returns an R, it returns true. If the input data is a Callable and it is not a Publisher, it returns false. If the input data is a Callable and it is not a Publisher that returns an R, it returns false. If the input data is a Callable and it is not a Publisher, it returns false. If the input data is a Callable and it is not a Publisher, it returns false. If the input data is a Callable and it is not a Publisher that returns an R, it returns false. If the input data is a Callable and it is not a Publisher, it returns false. If the input data is a Callable and it is not a Publisher, it returns false. If the input data is a Callable and it is not a Publisher, it returns false. If the input data is a Callable and it is not a Publisher that returns an R, it returns false. If the input data is a Callable and it is not a Publisher, it returns false. If the input data is a Callable and it is not a Publisher, it returns false. If the input data is a Callable and it is not a Publisher, it returns false. If the input data is a Callable and it is not a Publisher, it returns false. If the input data is a Callable and it is not a Publisher, it returns false. If the input data is a Callable and it is not a Publisher, it returns false. If the input data is a Callable and it is not a Publisher, it returns false. If the input data is a Callable and it is not a Publisher, it returns false. If the input data is a Callable and it is not a Publisher, it returns false. If the input data is a Callable and it is not a Publisher, it returns false. If the input data is a Callable and it is not a Publisher, it returns false. If the input data is a Callable and it is not a Publisher, it returns false. If the input data is a Callable and it is not a Publisher, it returns false. If the input data is a Callable and it is not a Publisher, it returns false. If the input data is a Callable and it is not a Publisher, it returns false. If the input data is a Callable and it is not a Publisher, it returns false. If the input data is a Callable and it is not a Publisher, it returns false. If the input data is a Callable and it is not a Publisher, it returns false. If the input data is a Callable and it is not a Publisher, it returns false. If the input data is a Callable and it is not a Publisher, it returns false. If the input data is a Callable and it is not a Publisher, it returns false. If the input data is a Callable and it is not a Publisher, it returns false. If the input data is a Callable and it is not a Publisher, it returns false. If the input data is a Callable and it is not a Publisher, it returns false. If the input data is a Callable and it is not a Publisher, it returns false. If the input data is a Callable and it is not a Publisher, it returns false. If the input data is a Callable and it is not a Publisher, it returns false. If the input data is a Callable and it is not a Publisher, it returns false. If the input data is a Callable and it is not a Publisher, it returns false. If the input data is a Callable and it is not a Publisher, it returns false. If the input data is a Callable and it is not a Publisher, it returns false. If the input data is a Callable and it is not a Publisher, it returns false. If the input data is a Callable and it is not a Publisher, it returns false. If the input data is a Callable and it is not a Publisher, it returns false. If the input data is a Callable and it is not a Publisher, it returns false. If the input data is a Callable and it is not a Publisher, it returns false. If the input data is a Callable and it is not a Publisher, it returns false. If the input data is a Callable and it is not a Publisher, it returns false. If the input data is a Callable and it is not a Publisher, it returns false. If the input data is a Callable and it is not a Publisher, it returns false. If the input data is a Callable and it is not a Publisher, it returns false. If the input data is a Callable and it is not a Publisher, it returns false. If the input data is a Callable and it is not a Publisher, it returns false. If the input data is a Callable and it is not a Publisher, it returns false. If the input data is a Callable and it is not a Publisher, it returns false. If the input data is a Callable and it is not a Publisher, it returns false. If the input data is a Callable and it is not a Publisher, it returns false. If the input data is a Callable and it is not a Publisher, it returns false. If the input data is a Callable and it is not a Publisher, it returns false. If the input data is a Callable and it is not a Publisher, it returns false. If the input data is a Callable and it is not a Publisher, it returns false. If the input data is a Callable and it is not a Publisher, it returns false. If the input data is a Callable and it is not a Publisher, it returns false. If the input data is a Callable and it"}, {"ID": 8, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func OpenRelative(path string, root *os.File, accessMask uint32, shareFlags uint32, createDisposition uint32, flags uint32) (*os.File, error) { f, err := openRelativeInternal(path, root, accessMask, shareFlags, createDisposition, flags) if err != nil { err = &os.PathError{Op: \"open\", Path: filepath.Join(root.Name(), path), Err: err} } return f, err }. \n### Response: // OpenRelative opens a relative path from the given root, failing if\n// any of the intermediate path components are reparse points..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static <T, U> Flowable<U> scalarXMap(final T value, final Function<? super T, ? extends Publisher<? extends U>> mapper) { return RxJavaPlugins.onAssembly(new ScalarXMapFlowable<T, U>(value, mapper)); } \n### Response:", "ground_truth": "Maps a scalar value into a Publisher and emits its values.\n\n@param  the scalar value type\n@param  the output value type\n@param value the scalar value to map\n@param mapper the function that gets the scalar value and should return\na Publisher that gets streamed\n@return the new Flowable instance", "predict": "// ScalarXMap returns a flowable that maps the given value to\n// a specific type U, using the provided mapper function.\n// This flowable is emitted onAssembly() event."}, {"ID": 9, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def diff_bearing(b1, b2): ''' Compute difference between two bearings ''' d = abs(b2 - b1) d = 360 - d if d > 180 else d return d. \n### Response: Compute difference between two bearings.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void reset() { setErrorHandler(null); setScheduleHandler(null); setComputationSchedulerHandler(null); setInitComputationSchedulerHandler(null); setIoSchedulerHandler(null); setInitIoSchedulerHandler(null); setSingleSchedulerHandler(null); setInitSingleSchedulerHandler(null); setNewThreadSchedulerHandler(null); setInitNewThreadSchedulerHandler(null); setOnFlowableAssembly(null); setOnFlowableSubscribe(null); setOnObservableAssembly(null); setOnObservableSubscribe(null); setOnSingleAssembly(null); setOnSingleSubscribe(null); setOnCompletableAssembly(null); setOnCompletableSubscribe(null); setOnConnectableFlowableAssembly(null); setOnConnectableObservableAssembly(null); setOnMaybeAssembly(null); setOnMaybeSubscribe(null); setOnParallelAssembly(null); setFailOnNonBlockingScheduler(false); setOnBeforeBlocking(null); } \n### Response:", "ground_truth": "Removes all handlers and resets to default behavior.", "predict": "Reset the scheduler."}, {"ID": 10, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function dump($values) : string { if (! is_array($values)) throw new DumpException($this, $values, self::ERROR); $items = []; $index = 0; try { foreach ($values as $key => $value) { $index = $key; $items[] = $this->syntax->dump($value); } } catch (DumpException $e) { throw new DumpException($this, $values, \"Unable to dump item at key {$index}\", [], $e); } return Text::join($items, $this->separator); }. \n### Response: Converts the given array to a string based\non the syntax or throws a DumpException.\n\n@param  array $values the data to encode\n@return string\n\n@throws Tarsana\\Syntax\\Exceptions\\DumpException.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @CheckReturnValue @NonNull @SchedulerSupport(SchedulerSupport.NONE) public static <T> Maybe<T> fromCompletable(CompletableSource completableSource) { ObjectHelper.requireNonNull(completableSource, \"completableSource is null\"); return RxJavaPlugins.onAssembly(new MaybeFromCompletable<T>(completableSource)); } \n### Response:", "ground_truth": "Wraps a CompletableSource into a Maybe.\n\n\nScheduler:\n{@code fromCompletable} does not operate by default on a particular {@link Scheduler}.\n\n@param  the target type\n@param completableSource the CompletableSource to convert from\n@return the new Maybe instance\n@throws NullPointerException if completable is null", "predict": "Provides a way to convert a CompletableSource to a Maybe<T> using the RxJava library.\n\n@param  CompletableSource completableSource the CompletableSource to convert\n@return Maybe<T>\n\n@throws Tarsana\\Syntax\\Exceptions\\CompletableSourceException.\n\n"}, {"ID": 11, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private function _translateRoleInstances($instancesInfo) { $roleInstanceMap = []; $instances = Utilities::tryGetKeysChainValue( $instancesInfo, 'Instances', 'Instance' ); if (!is_null($instances)) { if (array_key_exists('@attributes', $instances)) { $instances = [0 => $instances]; } foreach ($instances as $instanceInfo) { $endpoints = $this->_translateRoleInstanceEndpoints( $instanceInfo['Endpoints']['Endpoint'] ); $roleInstance = new RoleInstance( $instanceInfo['@attributes']['id'], $instanceInfo['@attributes']['faultDomain'], $instanceInfo['@attributes']['updateDomain'], $endpoints ); $roleInstanceMap [$instanceInfo['@attributes']['id']] = $roleInstance; } } return $roleInstanceMap; }. \n### Response: Translates the role instances.\n\n@param string $instancesInfo The instance info\n\n@return RoleInstance[].\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @CheckReturnValue @NonNull @SchedulerSupport(SchedulerSupport.NONE) public static <T> Maybe<T> fromSingle(SingleSource<T> singleSource) { ObjectHelper.requireNonNull(singleSource, \"singleSource is null\"); return RxJavaPlugins.onAssembly(new MaybeFromSingle<T>(singleSource)); } \n### Response:", "ground_truth": "Wraps a SingleSource into a Maybe.\n\n\nScheduler:\n{@code fromSingle} does not operate by default on a particular {@link Scheduler}.\n\n@param  the target type\n@param singleSource the SingleSource to convert from\n@return the new Maybe instance\n@throws NullPointerException if single is null", "predict": "Retrieves a single value from a single source.\n\n@param SingleSource<T> singleSource The single source\n\n@return Maybe<T>.\n\n"}, {"ID": 12, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected function getCurrentSite() { if (!isset($this->data['site']) || $this->data['site'] === null) { return null; } return $this->siteRepository->findByIdentifier($this->data['site']); }. \n### Response: Prevents invalid calls to the site repository in case the site data property is not available.\n\n@return null|object.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @CheckReturnValue @SchedulerSupport(SchedulerSupport.NONE) public final Maybe<T> retry(long times, Predicate<? super Throwable> predicate) { return toFlowable().retry(times, predicate).singleElement(); } \n### Response:", "ground_truth": "Retries at most times or until the predicate returns false, whichever happens first.\n\n\nScheduler:\n{@code retry} does not operate by default on a particular {@link Scheduler}.\n\n@param times the number of times to resubscribe if the current Maybe fails\n@param predicate the predicate called with the failure Throwable and should return true to trigger a retry.\n@return the new Maybe instance", "predict": "This method retryes a maximum of `times` number of times a failed operation (in this case, finding a site by identifier) using a `Maybe<T>` object. It returns the single element that was found or an empty `Maybe<T>` if no site was found. The method uses the `toFlowable()` method to convert the `Maybe<T>` object to a stream and the `retry()` method from the `Maybe` class to retry the operation. The `@CheckReturnValue` annotation ensures that the returned value is properly sanitized and validated, and the `@SchedulerSupport(SchedulerSupport.NONE)` annotation specifies that no scheduling is performed."}, {"ID": 13, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func internalEval(root ast.Node, config *EvalConfig) (interface{}, ast.Type, error) { // Copy the scope so we can add our builtins if config == nil { config = new(EvalConfig) } scope := registerBuiltins(config.GlobalScope) implicitMap := map[ast.Type]map[ast.Type]string{ ast.TypeFloat: { ast.TypeInt: \"__builtin_FloatToInt\", ast.TypeString: \"__builtin_FloatToString\", }, ast.TypeInt: { ast.TypeFloat: \"__builtin_IntToFloat\", ast.TypeString: \"__builtin_IntToString\", }, ast.TypeString: { ast.TypeInt: \"__builtin_StringToInt\", ast.TypeFloat: \"__builtin_StringToFloat\", ast.TypeBool: \"__builtin_StringToBool\", }, ast.TypeBool: { ast.TypeString: \"__builtin_BoolToString\", }, } // Build our own semantic checks that we always run tv := &TypeCheck{Scope: scope, Implicit: implicitMap} ic := &IdentifierCheck{Scope: scope} // Build up the semantic checks for execution checks := make( []SemanticChecker, len(config.SemanticChecks), len(config.SemanticChecks)+2) copy(checks, config.SemanticChecks) checks = append(checks, ic.Visit) checks = append(checks, tv.Visit) // Run the semantic checks for _, check := range checks { if err := check(root); err != nil { return nil, ast.TypeInvalid, err } } // Execute v := &evalVisitor{Scope: scope} return v.Visit(root) }. \n### Response: // Eval evaluates the given AST tree and returns its output value, the type\n// of the output, and any error that occurred..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static <T> T requireNonNull(T object, String message) { if (object == null) { throw new NullPointerException(message); } return object; } \n### Response:", "ground_truth": "Verifies if the object is not null and returns it or throws a NullPointerException\nwith the given message.\n@param  the value type\n@param object the object to verify\n@param message the message to use with the NullPointerException\n@return the object itself\n@throws NullPointerException if object is null", "predict": "// Require that the given object is not null and return it if it is."}, {"ID": 14, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void unregister(FileSubscriber fileSubscriber) { for (IdentificationSet<FileSubscriber> subList : fileSubscribers.values()) { subList.remove(fileSubscriber); } defaultFileSubscribers.remove(fileSubscriber); }. \n### Response: Unregisters all instances of fileSubscriber found.\n\n@param fileSubscriber the fileSubscriber to unregister.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @SuppressWarnings(\"unchecked\") public static <T> Function<T, T> identity() { return (Function<T, T>)IDENTITY; } \n### Response:", "ground_truth": "Returns an identity function that simply returns its argument.\n@param  the input and output value type\n@return the identity function", "predict": "This method returns a function that takes any type T and returns T. It is marked with the @SuppressWarnings(\"unchecked\") annotation to indicate that any unchecked types may be present in the returned function."}, {"ID": 15, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def a_unexpected_prompt(ctx): \"\"\"Provide message when received humphost prompt.\"\"\" prompt = ctx.ctrl.match.group(0) ctx.msg = \"Received the jump host prompt: '{}'\".format(prompt) ctx.device.connected = False ctx.finished = True raise ConnectionError(\"Unable to connect to the device.\", ctx.ctrl.hostname). \n### Response: Provide message when received humphost prompt..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static <T> Callable<T> justCallable(T value) { return new JustValue<Object, T>(value); } \n### Response:", "ground_truth": "Returns a Callable that returns the given value.\n@param  the value type\n@param value the value to return\n@return the new Callable instance", "predict": "Method-level comment for `justCallable`:\n```\n/**\n * Returns a callable object that returns the given value.\n * \n * @param value the value to return\n * @return a callable object that returns the given value\n */\n```"}, {"ID": 16, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function addNext($text, $template = null) { if(!empty($text)) { $this->callToActions = ['message' => ['text' => $text]]; } if(!empty($template)) { if($template instanceof StructuredMessage) { $this->callToActions = ['message' => [$template->getDataForCall(FALSE)]]; } else { throw new MessengerPlatformException('Template for welcome message is not StructuredMessage.', 4); } } }. \n### Response: You can set the welcome message to be text or Structured Message.\n\n@param string $text\n@param StructuredMessage $template Structured Message.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static <T, U> Function<T, U> justFunction(U value) { return new JustValue<T, U>(value); } \n### Response:", "ground_truth": "Returns a Function that ignores its parameter and returns the given value.\n@param  the function's input type\n@param  the value and return type of the function\n@param value the value to return\n@return the new Function instance", "predict": "This method returns a new instance of the `JustValue` class with the given `value`."}, {"ID": 17, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void storeKey(SecretKey key) { final String keyStoreFile = getMain().getFileSystemManager().getSystemLocation() + File.separator + \"izou.keystore\"; KeyStore keyStore = createKeyStore(keyStoreFile, \"4b[X:+H4CS&avY<)\"); try { KeyStore.SecretKeyEntry keyStoreEntry = new KeyStore.SecretKeyEntry(key); KeyStore.PasswordProtection keyPassword = new KeyStore.PasswordProtection(\"Ev45j>eP}QTR?K9_\".toCharArray()); keyStore.setEntry(\"izou_key\", keyStoreEntry, keyPassword); keyStore.store(new FileOutputStream(keyStoreFile), \"4b[X:+H4CS&avY<)\".toCharArray()); } catch (NoSuchAlgorithmException | KeyStoreException | CertificateException | IOException e) { logger.error(\"Unable to store key\", e); } }. \n### Response: Stores the izou aes key in a keystore\n\n@param key the key to store.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static <T, U> Function<T, U> castFunction(Class<U> target) { return new CastToClass<T, U>(target); } \n### Response:", "ground_truth": "Returns a function that cast the incoming values via a Class object.\n@param  the input value type\n@param  the output and target type\n@param target the target class\n@return the new Function instance", "predict": "Returns a function that casts a T to U.\n\n@param target the class to cast."}, {"ID": 18, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public String getHtmlCode() { Object[] _params = { SgmlUtils.generateAttribute(HtmlUtils.AttributeNames.VALUE, getValue()) }; MessageFormat _format = (isSelected()) ? FORMAT__SELECTED : FORMAT__NOT_SELECTED; return _format.format(_params); }. \n### Response: Generate the html code for the option.\n\n@return the HTML code of the option..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @CheckReturnValue @NonNull public static <T> UnicastSubject<T> create() { return new UnicastSubject<T>(bufferSize(), true); } \n### Response:", "ground_truth": "Creates an UnicastSubject with an internal buffer capacity hint 16.\n@param  the value type\n@return an UnicastSubject instance", "predict": "Create a new UnicastSubject with the specified buffer size and true.\n\n@return a new UnicastSubject with the specified buffer size and true.\n\n"}, {"ID": 19, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function validateUri($uri) { $query = http_build_query(array_merge( $this->getOptions()->buildOptions(), array('uri' => $uri) )); $context = stream_context_create(array( 'http' => array( 'method' => 'GET', 'header' => 'User-Agent: HTMLValidator', ) )); $data = $this->sendRequest($this->validatorUri . '?' . $query, $context); return $this->parseSOAP12Response($data); }. \n### Response: Validates a given URI\n\nExecutes the validator using the current parameters and returns a Response\nobject on success.\n\n@param string $uri The address to the page to validate ex: http://example.com/\n\n@return Response object HTMLValidator\\Response.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @CheckReturnValue @NonNull public static <T> UnicastSubject<T> create(int capacityHint) { return new UnicastSubject<T>(capacityHint, true); } \n### Response:", "ground_truth": "Creates an UnicastSubject with the given internal buffer capacity hint.\n@param  the value type\n@param capacityHint the hint to size the internal unbounded buffer\n@return an UnicastSubject instance", "predict": "Creates a new instance of the UnicastSubject class with the given capacityHint and a boolean value of true.\n\n@param int $capacityHint The maximum number of elements to be added to the subject\n\n@return UnicastSubject<T> object.\n\nNote: The return type is defined as UnicastSubject<T>, which is a generic type that can represent any type of data that can be added to the subject. The capacityHint parameter is also defined as an int, which indicates the maximum number of elements that can be added to the subject. The boolean value of true is used to indicate that the subject should be a unicast subject, which means that it will only be sent to one destination at a time."}, {"ID": 20, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function useDefaultLogger (opts) { const { infoFile, errFile, append = true, timestamp = true, // string for a date format or pass true to use default format } = opts // The value of `logToConsole` default to true in dev mode let logToConsole = opts.logToConsole if (isDev() && !isDefined(logToConsole)) { debug('In dev mode and `logToConsole` is set to true.') logToConsole = true } const flag = append ? 'a' : 'w' const infoStream = infoFile && fs.createWriteStream(infoFile, { flags: flag }) const errStream = errFile && fs.createWriteStream(errFile, { flags: flag }) const infoRecorder = streamRecorder() const errRecorder = streamRecorder() return { verbose () { let stream = infoRecorder(infoFile, name => fs.createWriteStream(name, { flags: flag })) if (logToConsole) stream = [ process.stdout, stream ] createLogger(stream, 'Verbose', timestamp).apply(this, arguments) }, info () { let stream = infoRecorder(infoFile, name => fs.createWriteStream(name, { flags: flag })) if (logToConsole) stream = [ process.stdout, stream ] createLogger(stream, 'Info', timestamp).apply(this, arguments) }, warning () { let stream = errRecorder(errFile, name => fs.createWriteStream(name, { flags: flag })) if (logToConsole) stream = [ process.stderr, stream ] createLogger(stream, 'Warning', timestamp).apply(this, arguments) }, error () { let stream = errRecorder(errFile, name => fs.createWriteStream(name, { flags: flag })) if (logToConsole) stream = [ process.stderr, stream ] createLogger(stream, 'Error', timestamp).apply(this, arguments) } } }. \n### Response: Construct a default logger, it can record the verbose, info , warning, error message and\nwrite it to the file you specified.\n\nOptions:\ninfoFile: Path of the file for recording verbose and info message.\nerrFile: Path of the file for recording warning and error message.\nappend: Decide append or truncate the file if it exists. Default to be true.\ntimestamp: Represents the date format or pass true to use default format.\n\n@param {object} opts - options\n@returns {object} The logger.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @CheckReturnValue @NonNull public static <T> UnicastSubject<T> create(int capacityHint, Runnable onTerminate) { return new UnicastSubject<T>(capacityHint, onTerminate, true); } \n### Response:", "ground_truth": "Creates an UnicastSubject with the given internal buffer capacity hint and a callback for\nthe case when the single Subscriber cancels its subscription.\n\nThe callback, if not null, is called exactly once and\nnon-overlapped with any active replay.\n\n@param  the value type\n@param capacityHint the hint to size the internal unbounded buffer\n@param onTerminate the callback to run when the Subject is terminated or cancelled, null not allowed\n@return an UnicastSubject instance", "predict": "Creates a new UnicastSubject with the given capacityHint, onTerminate, and a true value for the \"next\" parameter.\n\nOptions:\ncapacityHint: The maximum number of elements to be added to the subject.\nonTerminate: A callback function to be called when the subject is terminated.\n\n@param {int} capacityHint - The maximum number of elements to be added to the subject.\n@param {Runnable} onTerminate - A callback function to be called when the subject is terminated.\n@return {UnicastSubject<T>} The created subject."}, {"ID": 21, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private function checkRestoreVersion(EnvironmentInterface $environment, ModelId $modelId) { $inputProvider = $environment->getInputProvider(); $dataProviderDefinition = $environment->getDataDefinition()->getDataProviderDefinition(); $dataProvider = $environment->getDataProvider($modelId->getDataProviderName()); if (!((null !== ($modelVersion = $inputProvider->getValue('version'))) && ('tl_version' === $inputProvider->getValue('FORM_SUBMIT')) && $dataProviderDefinition->getInformation($modelId->getDataProviderName())->isVersioningEnabled()) ) { return; } if (null === ($model = $dataProvider->getVersion($modelId->getId(), $modelVersion))) { $message = \\sprintf( 'Could not load version %s of record ID %s from %s', $modelVersion, $modelId->getId(), $modelId->getDataProviderName() ); $environment->getEventDispatcher()->dispatch( ContaoEvents::SYSTEM_LOG, new LogEvent($message, TL_ERROR, 'DC_General - checkRestoreVersion()') ); throw new DcGeneralRuntimeException($message); } $dataProvider->save($model); $dataProvider->setVersionActive($modelId->getId(), $modelVersion); $environment->getEventDispatcher()->dispatch(ContaoEvents::CONTROLLER_RELOAD, new ReloadEvent()); }. \n### Response: Check the submitted data if we want to restore a previous version of a model.\n\nIf so, the model will get loaded and marked as active version in the data provider and the client will perform a\nreload of the page.\n\n@param EnvironmentInterface $environment The environment.\n@param ModelId              $modelId     The model id.\n\n@return void\n\n@throws DcGeneralRuntimeException When the requested version could not be located in the database.\n\n@SuppressWarnings(PHPMD.LongVariable).\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @CheckReturnValue @NonNull public static <T> UnicastSubject<T> create(boolean delayError) { return new UnicastSubject<T>(bufferSize(), delayError); } \n### Response:", "ground_truth": "Creates an UnicastSubject with an internal buffer capacity hint 16 and given delay error flag.\n\nThe callback, if not null, is called exactly once and\nnon-overlapped with any active replay.\nHistory: 2.0.8 - experimental\n@param  the value type\n@param delayError deliver pending onNext events before onError\n@return an UnicastSubject instance\n@since 2.2", "predict": "This method creates a new UnicastSubject<T> object and returns it.\n\nIt is marked with the @CheckReturnValue and @NonNull annotations, indicating that it should return a valid object or null if the method returns null.\n\nThe method takes a boolean argument called delayError, which determines whether to delay the creation of the subject until the specified error occurs or not.\n\nThe return type of the method is <T>, indicating that the method returns a T object.\n\nThe bufferSize() method is used to specify the size of the buffer to be used to store the data returned by the create() method.\n\nThis method is not marked with any other comments, but it is a public static method that creates a new UnicastSubject<T> object and returns it."}, {"ID": 22, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def sub_working_days(self, day, delta, extra_working_days=None, extra_holidays=None, keep_datetime=False): \"\"\" Substract `delta` working days to the date. This method is a shortcut / helper. Users may want to use either:: cal.add_working_days(my_date, -7) cal.sub_working_days(my_date, 7) The other parameters are to be used exactly as in the ``add_working_days`` method. A negative ``delta`` argument will be converted into its absolute value. Hence, the two following calls are equivalent:: cal.sub_working_days(my_date, -7) cal.sub_working_days(my_date, 7) As in ``add_working_days()`` you can set the parameter ``keep_datetime`` to ``True`` to make sure that if your ``day`` argument is a ``datetime``, the returned date will also be a ``datetime`` object. \"\"\" delta = abs(delta) return self.add_working_days( day, -delta, extra_working_days, extra_holidays, keep_datetime=keep_datetime). \n### Response: Substract `delta` working days to the date.\n\n        This method is a shortcut / helper. Users may want to use either::\n\n            cal.add_working_days(my_date, -7)\n            cal.sub_working_days(my_date, 7)\n\n        The other parameters are to be used exactly as in the\n        ``add_working_days`` method.\n\n        A negative ``delta`` argument will be converted into its absolute\n        value. Hence, the two following calls are equivalent::\n\n            cal.sub_working_days(my_date, -7)\n            cal.sub_working_days(my_date, 7)\n\n        As in ``add_working_days()`` you can set the parameter\n        ``keep_datetime`` to ``True`` to make sure that if your ``day``\n        argument is a ``datetime``, the returned date will also be a\n        ``datetime`` object..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public Throwable blockingGetError() { if (getCount() != 0) { try { BlockingHelper.verifyNonBlocking(); await(); } catch (InterruptedException ex) { dispose(); return ex; } } return error; } \n### Response:", "ground_truth": "Block until the latch is counted down and return the error received or null if no\nerror happened.\n@return the error received or null", "predict": "BlockingGetError():\n\n        This method returns the error object if the count is not zero.\n\n        If the count is zero, this method does not throw an exception and\n        the returned error object will simply be null.\n\n        If the count is non-zero, the method attempts to verify that the\n        BlockingHelper is not blocking. This can be done by calling\n        BlockingHelper.verifyNonBlocking() and then await(). If this method\n         throws an exception, it is caught by the catch block and the\n        InterruptedException is also caught and disposed of.\n\n        If the verifyNonBlocking() method throws an exception, the method\n        will return the exception as the error object.\n\n        If the await() method throws an exception, the exception is also\n        returned as the error object.\n\n        If the count is zero and the verifyNonBlocking() method does not\n        throw an exception, the returned error object will simply be null.\n\n        If the count is non-zero and the verifyNonBlocking() method does\n        throw an exception, the exception is caught and disposed of, and\n        the returned error object will be null.\n\n        If the count is non-zero and the verifyNonBlocking() method does\n        not throw an exception, the returned error object will be the\n        current error object."}, {"ID": 23, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def _getEventsByWeek(self, request, year, month): \"\"\"Return my child events for the given month grouped by week.\"\"\" return getAllEventsByWeek(request, year, month, home=self). \n### Response: Return my child events for the given month grouped by week..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public Throwable blockingGetError(long timeout, TimeUnit unit) { if (getCount() != 0) { try { BlockingHelper.verifyNonBlocking(); if (!await(timeout, unit)) { dispose(); throw ExceptionHelper.wrapOrThrow(new TimeoutException(timeoutMessage(timeout, unit))); } } catch (InterruptedException ex) { dispose(); throw ExceptionHelper.wrapOrThrow(ex); } } return error; } \n### Response:", "ground_truth": "Block until the latch is counted down and return the error received or\nwhen the wait is interrupted or times out, null otherwise.\n@param timeout the timeout value\n@param unit the time unit\n@return the error received or null", "predict": "This method is used to block until a specific timeout is reached and an error is returned if one is encountered. It checks if there are any events to retrieve and if not, it throws a TimeoutException. It also checks if the method is being called as a blocking method and if not, it throws an InterruptedException."}, {"ID": 24, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def find_single(decl_matcher, decls, recursive=True): \"\"\" Returns a reference to the declaration, that match `decl_matcher` defined criteria. if a unique declaration could not be found the method will return None. :param decl_matcher: Python callable object, that takes one argument - reference to a declaration :param decls: the search scope, :class:declaration_t object or :class:declaration_t objects list t :param recursive: boolean, if True, the method will run `decl_matcher` on the internal declarations too \"\"\" answer = matcher.find(decl_matcher, decls, recursive) if len(answer) == 1: return answer[0]. \n### Response: Returns a reference to the declaration, that match `decl_matcher`\n        defined criteria.\n\n        if a unique declaration could not be found the method will return None.\n\n        :param decl_matcher: Python callable object, that takes one argument -\n            reference to a declaration\n        :param decls: the search scope, :class:declaration_t object or\n            :class:declaration_t objects list t\n        :param recursive: boolean, if True, the method will run `decl_matcher`\n            on the internal declarations too.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public boolean blockingAwait(long timeout, TimeUnit unit) { if (getCount() != 0) { try { BlockingHelper.verifyNonBlocking(); if (!await(timeout, unit)) { dispose(); return false; } } catch (InterruptedException ex) { dispose(); throw ExceptionHelper.wrapOrThrow(ex); } } Throwable ex = error; if (ex != null) { throw ExceptionHelper.wrapOrThrow(ex); } return true; } \n### Response:", "ground_truth": "Block until the observer terminates and return true; return false if\nthe wait times out.\n@param timeout the timeout value\n@param unit the time unit\n@return true if the observer terminated in time, false otherwise", "predict": "blocks the current thread until a non-blocking `await` call returns, or a `InterruptedException` is thrown.\n\n        if (getCount()!= 0) {\n            try {\n                BlockingHelper.verifyNonBlocking();\n                if (!await(timeout, unit)) {\n                     dispose();\n                    return false;\n                }\n            } catch (InterruptedException ex) {\n                 dispose();\n                throw ExceptionHelper.wrapOrThrow(ex);\n            }\n        }\n        Throwable ex = error;\n        if (ex!= null) {\n            throw ExceptionHelper.wrapOrThrow(ex);\n        }\n        return true;\n    }"}, {"ID": 25, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def _call_middlewares(self): ''' Execute the middleware stack ''' for middleware in self.middlewares: if self._check_condition(middleware['when']): self._call_one_middleware(middleware). \n### Response: Execute the middleware stack.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static <T, U> void drainMaxLoop(SimplePlainQueue<T> q, Subscriber<? super U> a, boolean delayError, Disposable dispose, QueueDrain<T, U> qd) { int missed = 1; for (;;) { for (;;) { boolean d = qd.done(); T v = q.poll(); boolean empty = v == null; if (checkTerminated(d, empty, a, delayError, q, qd)) { if (dispose != null) { dispose.dispose(); } return; } if (empty) { break; } long r = qd.requested(); if (r != 0L) { if (qd.accept(a, v)) { if (r != Long.MAX_VALUE) { qd.produced(1); } } } else { q.clear(); if (dispose != null) { dispose.dispose(); } a.onError(new MissingBackpressureException(\"Could not emit value due to lack of requests.\")); return; } } missed = qd.leave(-missed); if (missed == 0) { break; } } } \n### Response:", "ground_truth": "Drain the queue but give up with an error if there aren't enough requests.\n@param  the queue value type\n@param  the emission value type\n@param q the queue\n@param a the subscriber\n@param delayError true if errors should be delayed after all normal items\n@param dispose the disposable to call when termination happens and cleanup is necessary\n@param qd the QueueDrain instance that gives status information to the drain logic", "predict": "This method is responsible for draining the maximum number of elements from the SimplePlainQueue<T> `q`, the Subscriber<? super U> `a`, the boolean `delayError`, the Disposable `dispose`, and the QueueDrain<T, U> `qd`. It starts by initializing an integer variable `missed` to 1.\n\nThe method enters a nested loop where it repeatedly checks if the queue is empty. If it is, the method breaks out of the loop. Otherwise, itpolls an element from the queue and checks if it is empty. If it is, the method breaks out of the loop. If the queue is not empty, it calls the `checkTerminated` method to determine if the loop has reached its maximum number of iterations. If it has, the method returns immediately and disposes of the Disposable object `dispose`. If the queue is empty, the method clears the queue and calls the `accept` method on the Subscriber to emit a value. If the maximum number of iterations has not been reached, the method calls the `produce` method on the Subscriber to emit a value.\n\nThe method then sets the integer variable `missed` to the number of elements that have been missed from the queue. If the number of missed elements is equal to 0, the method breaks out of the loop. The method returns immediately."}, {"ID": 26, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def retry(exception_processor=generic_exception_processor, max_retries=100): \"\"\" Generic retry decorator Tries to call the decorated function. Should no exception be raised, the value is simply returned, otherwise, call an exception_processor function with the exception (type, value, traceback) tuple (with the intention that it could raise the exception without losing the traceback) and the exception processor's optionally usable context value (exc_processor_cxt). It's recommended to delete all references to the traceback passed to the exception_processor to speed up garbage collector via the 'del' operator. This context value is passed to and returned from every invocation of the exception processor. This can be used to more conveniently (vs. an object with __call__ defined) implement exception processors that have some state, such as the 'number of attempts'. The first invocation will pass None. :param f: A function to be retried. :type f: function :param exception_processor: A function to process raised exceptions. :type exception_processor: function :param max_retries: An integer representing the maximum number of retry attempts. :type max_retries: integer \"\"\" max_retries = int(os.getenv('WALE_RETRIES', max_retries)) def yield_new_function_from(f): def shim(*args, **kwargs): exc_processor_cxt = None retries = 0 while True: # Avoid livelocks while spinning on retry by yielding. gevent.sleep(0.1) try: return f(*args, **kwargs) except KeyboardInterrupt: raise except Exception: exception_info_tuple = None retries += 1 if max_retries >= 1 and retries >= max_retries: raise try: exception_info_tuple = sys.exc_info() exc_processor_cxt = exception_processor( exception_info_tuple, exc_processor_cxt=exc_processor_cxt) finally: # Although cycles are harmless long-term, help the # garbage collector. del exception_info_tuple # Exponential backoff with jitter capped at 2 minutes. duration = min(120, (2 ** retries)) / 2 gevent.sleep(duration + random.randint(0, duration)) return functools.wraps(f)(shim) return yield_new_function_from. \n### Response: Generic retry decorator\n\n    Tries to call the decorated function.  Should no exception be\n    raised, the value is simply returned, otherwise, call an\n    exception_processor function with the exception (type, value,\n    traceback) tuple (with the intention that it could raise the\n    exception without losing the traceback) and the exception\n    processor's optionally usable context value (exc_processor_cxt).\n\n    It's recommended to delete all references to the traceback passed\n    to the exception_processor to speed up garbage collector via the\n    'del' operator.\n\n    This context value is passed to and returned from every invocation\n    of the exception processor.  This can be used to more conveniently\n    (vs. an object with __call__ defined) implement exception\n    processors that have some state, such as the 'number of attempts'.\n    The first invocation will pass None.\n\n    :param f: A function to be retried.\n    :type f: function\n\n    :param exception_processor: A function to process raised\n                                exceptions.\n    :type exception_processor: function\n\n    :param max_retries: An integer representing the maximum\n                        number of retry attempts.\n    :type max_retries: integer.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void request(Subscription s, int prefetch) { s.request(prefetch < 0 ? Long.MAX_VALUE : prefetch); } \n### Response:", "ground_truth": "Requests Long.MAX_VALUE if prefetch is negative or the exact\namount if prefetch is positive.\n@param s the Subscription to request from\n@param prefetch the prefetch value", "predict": "Subscription.request\n\n    Requests the specified prefetch of data from the specified\n    Subscription.  If the prefetch is less than 0, it requests the\n    max value allowed by the subscription's prefetch limit.  If the\n    prefetch is greater than or equal to the maximum value, it\n    requests the maximum value allowed by the subscription's\n    prefetch limit, and then falls back to requesting data at a\n     slower rate.  This method is typically used in conjunction\n    with other methods for managing subscription resources, such\n    as prefetch limits and rate limits.\n\n    :param s: The Subscription to request data from.\n    :type s: Subscription\n\n    :param prefetch: The prefetch of data to request.\n    :type prefetch: int."}, {"ID": 27, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function isContentEmpty($isFirst = false, $isMiddle = false, $isLast = false) { return !( $this->isHeaderShown($isFirst, $isMiddle, $isLast) || $this->isDetailsShown($isFirst, $isMiddle, $isLast) || $this->isSummaryShown($isFirst, $isMiddle, $isLast) || $this->isContentShown($isFirst, $isMiddle, $isLast) || $this->isFooterShown($isFirst, $isMiddle, $isLast) ); }. \n### Response: Answers true if the content section is empty for the current list item.\n\n@param boolean $isFirst Item is first in the list.\n@param boolean $isMiddle Item is in the middle of the list.\n@param boolean $isLast Item is last in the list.\n\n@return boolean.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static <T> void postComplete(Subscriber<? super T> actual, Queue<T> queue, AtomicLong state, BooleanSupplier isCancelled) { if (queue.isEmpty()) { actual.onComplete(); return; } if (postCompleteDrain(state.get(), actual, queue, state, isCancelled)) { return; } for (; ; ) { long r = state.get(); if ((r & COMPLETED_MASK) != 0L) { return; } long u = r | COMPLETED_MASK; // (active, r) -> (complete, r) transition if (state.compareAndSet(r, u)) { // if the requested amount was non-zero, drain the queue if (r != 0L) { postCompleteDrain(u, actual, queue, state, isCancelled); } return; } } } \n### Response:", "ground_truth": "Signals the completion of the main sequence and switches to post-completion replay mode.\n\n\nDon't modify the queue after calling this method!\n\n\nPost-completion backpressure handles the case when a source produces values based on\nrequests when it is active but more values are available even after its completion.\nIn this case, the onComplete() can't just emit the contents of the queue but has to\ncoordinate with the requested amounts. This requires two distinct modes: active and\ncompleted. In active mode, requests flow through and the queue is not accessed but\nin completed mode, requests no-longer reach the upstream but help in draining the queue.\n\nThe algorithm utilizes the most significant bit (bit 63) of a long value (AtomicLong) since\nrequest amount only goes up to Long.MAX_VALUE (bits 0-62) and negative values aren't\nallowed.\n\n@param  the value type emitted\n@param actual the target Subscriber to send events to\n@param queue the queue to drain if in the post-complete state\n@param state holds the request amount and the post-completed flag\n@param isCancelled a supplier that returns true if the drain has been cancelled", "predict": "Answers true if the post complete operation was successfully executed and all subscribers have completed their tasks.\n\n@paramSubscriber<? super T> actual subscriber object.\n@paramQueue<T> queue object for storing the subscribers.\n@paramAtomicLong state object for tracking the state of the subscribers.\n@paramBooleanSupplier isCancelled\u5e03\u5c14Supplier for indicating if the operation should be cancelled.\n\n@return boolean indicating if the post complete operation was successfully executed.\n\n@Note This method is used to post complete all subscribers in the queue, if the queue is empty it will return true immediately. If any subscriber is still in the process of completing their task, it will return false after the loop is finished."}, {"ID": 28, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func SetSysctl(key string, value string) ([]byte, error) { command := []string{\"/sbin/sysctl\", \"-w\", fmt.Sprintf(\"%s=%s\", key, value)} thecmd := exec.Command(command[0], command[1:]...) output, err := thecmd.CombinedOutput() if err != nil { glog.Errorf(\"Error running command:'%s' output: %s error: %s\\n\", command, output, err) return output, err } if strings.HasPrefix(string(output), \"sysctl: \") { glog.Errorf(\"Error running command:'%s' output: %s\\n\", command, output) return output, fmt.Errorf(string(output)) } glog.V(1).Infof(\"Successfully ran command:'%s' output: %s\\n\", command, output) return output, nil }. \n### Response: // SetSysctl tries to set sysctl settings.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected final void complete(R n) { long p = produced; if (p != 0) { BackpressureHelper.produced(this, p); } for (;;) { long r = get(); if ((r & COMPLETE_MASK) != 0) { onDrop(n); return; } if ((r & REQUEST_MASK) != 0) { lazySet(COMPLETE_MASK + 1); downstream.onNext(n); downstream.onComplete(); return; } value = n; if (compareAndSet(0, COMPLETE_MASK)) { return; } value = null; } } \n### Response:", "ground_truth": "Signals the given value and an onComplete if the downstream is ready to receive the final value.\n@param n the value to emit", "predict": "// Complete method handles backpressure and ensures that the producer is not dropped until all requests have been processed."}, {"ID": 29, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function createUrl( $route, $params = [ ], $absolute = FALSE ) { return $this[ 'request' ]->createUrl( $route, $params, $absolute ); }. \n### Response: Creates a new url.\n\n@param string $route    controller/method route\n@param array  $params   list of parameters\n@param bool   $absolute whether it should be an absolute url\n\n@return string the url.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @SuppressWarnings(\"unchecked\") @Nullable public T getValue() { Object o = value; if (o != null && !NotificationLite.isError(o)) { return (T)value; } return null; } \n### Response:", "ground_truth": "Returns the contained value if this notification is an onNext\nsignal, null otherwise.\n@return the value contained or null\n@see #isOnNext()", "predict": "This method returns a value, but it uses a type cast to null to avoid a runtime error.\n\n@param object $value the value to be returned\n\n@return the value"}, {"ID": 30, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (c *Config) Int(key string) (int, error) { return strconv.Atoi(c.get(key)) }. \n### Response: // Int lookups up the value using the provided key and converts the value to a int.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @Nullable public Throwable getError() { Object o = value; if (NotificationLite.isError(o)) { return NotificationLite.getError(o); } return null; } \n### Response:", "ground_truth": "Returns the container Throwable error if this notification is an onError\nsignal, null otherwise.\n@return the Throwable error contained or null\n@see #isOnError()", "predict": "// Returns the error object if it is present, or null otherwise."}, {"ID": 31, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def from_pickle(cls, filename): \"\"\"Loads and Returns a Mesh from a pickle file, given a filename.\"\"\" with open(filename, 'rb') as f: mesh = pickle.load(f).copy() return mesh. \n### Response: Loads and Returns a Mesh from a pickle file, given a filename..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static boolean validate(Disposable upstream, Disposable next, Class<?> observer) { ObjectHelper.requireNonNull(next, \"next is null\"); if (upstream != null) { next.dispose(); if (upstream != DisposableHelper.DISPOSED) { reportDoubleSubscription(observer); } return false; } return true; } \n### Response:", "ground_truth": "Ensures that the upstream Disposable is null and returns true, otherwise\ndisposes the next Disposable and if the upstream is not the shared\ndisposed instance, reports a ProtocolViolationException due to\nmultiple subscribe attempts.\n@param upstream the upstream current value\n@param next the Disposable to check for nullness and dispose if necessary\n@param observer the class of the consumer to have a personalized\nerror message if the upstream already contains a non-cancelled Disposable.\n@return true if successful, false if the upstream was non null", "predict": "Validates a connection between the upstream and downstream Disposable objects, and reports any double subscriptions if necessary."}, {"ID": 32, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def _drain(self, cycles=None): \"\"\"Activate the pump and let the flow go. This will call the process() method on each attached module until a StopIteration is raised, usually by a pump when it reached the EOF. A StopIteration is also raised when self.cycles was set and the number of cycles has reached that limit. \"\"\" log.info(\"Now draining...\") if not cycles: log.info(\"No cycle count, the pipeline may be drained forever.\") if self.calibration: log.info(\"Setting up the detector calibration.\") for module in self.modules: module.detector = self.calibration.get_detector() try: while not self._stop: cycle_start = timer() cycle_start_cpu = process_time() log.debug(\"Pumping blob #{0}\".format(self._cycle_count)) self.blob = Blob() for module in self.modules: if self.blob is None: log.debug( \"Skipping {0}, due to empty blob.\".format( module.name ) ) continue if module.only_if and not module.only_if.issubset(set( self.blob.keys())): log.debug( \"Skipping {0}, due to missing required key\" \"'{1}'.\".format(module.name, module.only_if) ) continue if (self._cycle_count + 1) % module.every != 0: log.debug( \"Skipping {0} (every {1} iterations).\".format( module.name, module.every ) ) continue if module.blob_keys is not None: blob_to_send = Blob({ k: self.blob[k] for k in module.blob_keys if k in self.blob }) else: blob_to_send = self.blob log.debug(\"Processing {0} \".format(module.name)) start = timer() start_cpu = process_time() new_blob = module(blob_to_send) if self.timeit or module.timeit: self._timeit[module]['process'] \\ .append(timer() - start) self._timeit[module]['process_cpu'] \\ .append(process_time() - start_cpu) if module.blob_keys is not None: if new_blob is not None: for key in new_blob.keys(): self.blob[key] = new_blob[key] else: self.blob = new_blob self._timeit['cycles'].append(timer() - cycle_start) self._timeit['cycles_cpu'].append( process_time() - cycle_start_cpu ) self._cycle_count += 1 if cycles and self._cycle_count >= cycles: raise StopIteration except StopIteration: log.info(\"Nothing left to pump through.\") return self.finish(). \n### Response: Activate the pump and let the flow go.\n\n        This will call the process() method on each attached module until\n        a StopIteration is raised, usually by a pump when it reached the EOF.\n\n        A StopIteration is also raised when self.cycles was set and the\n        number of cycles has reached that limit..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static boolean setOnce(AtomicReference<Disposable> upstream, Disposable next, Class<?> observer) { ObjectHelper.requireNonNull(next, \"next is null\"); if (!upstream.compareAndSet(null, next)) { next.dispose(); if (upstream.get() != DisposableHelper.DISPOSED) { reportDoubleSubscription(observer); } return false; } return true; } \n### Response:", "ground_truth": "Atomically updates the target upstream AtomicReference from null to the non-null\nnext Disposable, otherwise disposes next and reports a ProtocolViolationException\nif the AtomicReference doesn't contain the shared disposed indicator.\n@param upstream the target AtomicReference to update\n@param next the Disposable to set on it atomically\n@param observer the class of the consumer to have a personalized\nerror message if the upstream already contains a non-cancelled Disposable.\n@return true if successful, false if the content of the AtomicReference was non null", "predict": "Set once for the given upstream reference, next, and observer.\n\n        This method sets the next disposable object to be disposed of\n        when the upstream reference is set to null, ensuring that\n        no double-subscription occurs.\n\n        If the compareAndSet() method returns false, the next object is not\n        set to null and a double-subscription is reported.\n\n        return true to indicate that the object was successfully set.\n\n        return false to indicate that a double-subscription occurred."}, {"ID": 33, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def description(text): \"\"\" Decorator used to specify a short description of the console script. This can be used to override the default, which is derived from the docstring of the function. :param text: The text to use for the description. \"\"\" def decorator(func): adaptor = ScriptAdaptor._get_adaptor(func) adaptor.description = text return func return decorator. \n### Response: Decorator used to specify a short description of the console\n    script.  This can be used to override the default, which is\n    derived from the docstring of the function.\n\n    :param text: The text to use for the description..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static boolean validate(Subscription upstream, Subscription next, Class<?> subscriber) { ObjectHelper.requireNonNull(next, \"next is null\"); if (upstream != null) { next.cancel(); if (upstream != SubscriptionHelper.CANCELLED) { reportDoubleSubscription(subscriber); } return false; } return true; } \n### Response:", "ground_truth": "Ensures that the upstream Subscription is null and returns true, otherwise\ncancels the next Subscription and if the upstream is not the shared\ncancelled instance, reports a ProtocolViolationException due to\nmultiple subscribe attempts.\n@param upstream the upstream current value\n@param next the Subscription to check for nullness and cancel if necessary\n@param subscriber the class of the consumer to have a personalized\nerror message if the upstream already contains a non-cancelled Subscription.\n@return true if successful, false if the upstream was non null", "predict": "Method for validating a subscription.\n\nThis method takes a Subscription, next Subscription, and a Class<?> as input and returns a boolean value.\n\nThe method first requiresNonNull(next, \"next is null\") and cancels the next Subscription if not null. If the upstream Subscription is not null, it cancels the next Subscription and reports double Subscription if the upstream Subscription is CANCELLED. Finally, it returns false if all conditions are met, otherwise true.\n\nNote: This method is part of the SubscriptionHelper class and is used to validate and cancel subscriptions.\n\nNote 2: This method is used to validate a subscription and if the subscription is not valid, it will cancel it and report the double subscription. This is useful for preventing double-subscription and ensuring that the script runs only once."}, {"ID": 34, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def connect(self, callback: Callable[[T_Event], Any]) -> Callable[[T_Event], Any]: \"\"\" Connect a callback to this signal. Each callable can only be connected once. Duplicate registrations are ignored. If you need to pass extra arguments to the callback, you can use :func:`functools.partial` to wrap the callable. :param callback: a callable that will receive an event object as its only argument. :return: the value of ``callback`` argument \"\"\" assert check_argument_types() if self.listeners is None: self.listeners = [] if callback not in self.listeners: self.listeners.append(callback) return callback. \n### Response: Connect a callback to this signal.\n\n        Each callable can only be connected once. Duplicate registrations are ignored.\n\n        If you need to pass extra arguments to the callback, you can use :func:`functools.partial`\n        to wrap the callable.\n\n        :param callback: a callable that will receive an event object as its only argument.\n        :return: the value of ``callback`` argument.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static boolean setOnce(AtomicReference<Subscription> upstream, Subscription next, Class<?> subscriber) { ObjectHelper.requireNonNull(next, \"next is null\"); if (!upstream.compareAndSet(null, next)) { next.cancel(); if (upstream.get() != SubscriptionHelper.CANCELLED) { reportDoubleSubscription(subscriber); } return false; } return true; } \n### Response:", "ground_truth": "Atomically updates the target upstream AtomicReference from null to the non-null\nnext Subscription, otherwise cancels next and reports a ProtocolViolationException\nif the AtomicReference doesn't contain the shared cancelled indicator.\n@param upstream the target AtomicReference to update\n@param next the Subscription to set on it atomically\n@param subscriber the class of the consumer to have a personalized\nerror message if the upstream already contains a non-cancelled Subscription.\n@return true if successful, false if the content of the AtomicReference was non null", "predict": "Set once subscription for the given upstream and subscriber.\n\n        This method sets the subscription for the given upstream and subscriber to be\n        set to null, effectively canceling the subscription. If the subscription was already\n        cancelled, this method will not change anything. If the subscriber is not a class\n        defined in the provided class path, a reportDoubleSubscription() method will be\n        called to report a double subscription.\n\n        :param upstream: an AtomicReference<Subscription> representing the upstream\n            subscription.\n        :param next: a Subscription object representing the next event in the\n            subscription chain.\n        :param subscriber: the class of the subscriber.\n        :return: true if the subscription was set to null successfully, false otherwise.\n\n"}, {"ID": 35, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected function generateToken() { if ($this->token === null) { $secret = array( 'install' => __DIR__, 'name' => $this->name, ); if (isset($_SESSION)) { $key = sha1(__DIR__ . '/' . 'formidable_secret'); if (isset($_SESSION[$key])) { $secret['csrf'] = $_SESSION[$key]; } else { $csrf = sha1(uniqid(mt_rand(), true).'|'.gettimeofday(true)); $_SESSION[$key] = $csrf; $secret['csrf'] = $csrf; } } $this->token = sha1(serialize($secret)); } }. \n### Response: Generate the token or get it from the session.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static long addCap(long a, long b) { long u = a + b; if (u < 0L) { return Long.MAX_VALUE; } return u; } \n### Response:", "ground_truth": "Adds two long values and caps the sum at Long.MAX_VALUE.\n@param a the first value\n@param b the second value\n@return the sum capped at Long.MAX_VALUE", "predict": "Add two long values."}, {"ID": 36, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public Observable<DatabaseAutomaticTuningInner> getAsync(String resourceGroupName, String serverName, String databaseName) { return getWithServiceResponseAsync(resourceGroupName, serverName, databaseName).map(new Func1<ServiceResponse<DatabaseAutomaticTuningInner>, DatabaseAutomaticTuningInner>() { @Override public DatabaseAutomaticTuningInner call(ServiceResponse<DatabaseAutomaticTuningInner> response) { return response.body(); } }); }. \n### Response: Gets a database's automatic tuning.\n\n@param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.\n@param serverName The name of the server.\n@param databaseName The name of the database.\n@throws IllegalArgumentException thrown if parameters fail the validation\n@return the observable to the DatabaseAutomaticTuningInner object.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static long multiplyCap(long a, long b) { long u = a * b; if (((a | b) >>> 31) != 0) { if (u / a != b) { return Long.MAX_VALUE; } } return u; } \n### Response:", "ground_truth": "Multiplies two long values and caps the product at Long.MAX_VALUE.\n@param a the first value\n@param b the second value\n@return the product capped at Long.MAX_VALUE", "predict": "Multiply two long values.\n\n@param a The first long value.\n@param b The second long value.\n@return The product of the two long values.\n\nNote: This method is only available in Java 8 and above.\nNote2: The if statement checks if the bitwise OR of the two long values is 0, which means that either one of the values is 0, and in this case, the result of the multiplication is undefined. This is because long.MAX_VALUE is a maximum value that can be represented by a long, and if the bitwise OR of two long values is 0, it means that the result of the multiplication is greater than or equal to Long.MAX_VALUE, which is undefined."}, {"ID": 37, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def solar_zenith_analytical(latitude, hourangle, declination): \"\"\" Analytical expression of solar zenith angle based on spherical trigonometry. .. warning:: The analytic form neglects the effect of atmospheric refraction. Parameters ---------- latitude : numeric Latitude of location in radians. hourangle : numeric Hour angle in the local solar time in radians. declination : numeric Declination of the sun in radians. Returns ------- zenith : numeric Solar zenith angle in radians. References ---------- [1] J. A. Duffie and W. A. Beckman, \"Solar Engineering of Thermal Processes, 3rd Edition\" pp. 14, J. Wiley and Sons, New York (2006) [2] J. H. Seinfeld and S. N. Pandis, \"Atmospheric Chemistry and Physics\" p. 132, J. Wiley (1998) [3] Daryl R. Myers, \"Solar Radiation: Practical Modeling for Renewable Energy Applications\", p. 5 CRC Press (2013) `Wikipedia: Solar Zenith Angle <https://en.wikipedia.org/wiki/Solar_zenith_angle>`_ `PVCDROM: Sun's Position <http://www.pveducation.org/pvcdrom/2-properties-sunlight/suns-position>`_ See Also -------- declination_spencer71 declination_cooper69 hour_angle \"\"\" return np.arccos( np.cos(declination) * np.cos(latitude) * np.cos(hourangle) + np.sin(declination) * np.sin(latitude) ). \n### Response: Analytical expression of solar zenith angle based on spherical\n    trigonometry.\n\n    .. warning:: The analytic form neglects the effect of atmospheric\n        refraction.\n\n    Parameters\n    ----------\n    latitude : numeric\n        Latitude of location in radians.\n    hourangle : numeric\n        Hour angle in the local solar time in radians.\n    declination : numeric\n        Declination of the sun in radians.\n\n    Returns\n    -------\n    zenith : numeric\n        Solar zenith angle in radians.\n\n    References\n    ----------\n    [1] J. A. Duffie and W. A. Beckman,  \"Solar Engineering of Thermal\n    Processes, 3rd Edition\" pp. 14, J. Wiley and Sons, New York (2006)\n\n    [2] J. H. Seinfeld and S. N. Pandis, \"Atmospheric Chemistry and\n    Physics\" p. 132, J. Wiley (1998)\n\n    [3] Daryl R. Myers, \"Solar Radiation: Practical Modeling for\n    Renewable Energy Applications\", p. 5 CRC Press (2013)\n\n    `Wikipedia: Solar Zenith Angle\n    `_\n\n    `PVCDROM: Sun's Position\n    `_\n\n    See Also\n    --------\n    declination_spencer71\n    declination_cooper69\n    hour_angle.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static long add(AtomicLong requested, long n) { for (;;) { long r = requested.get(); if (r == Long.MAX_VALUE) { return Long.MAX_VALUE; } long u = addCap(r, n); if (requested.compareAndSet(r, u)) { return r; } } } \n### Response:", "ground_truth": "Atomically adds the positive value n to the requested value in the AtomicLong and\ncaps the result at Long.MAX_VALUE and returns the previous value.\n@param requested the AtomicLong holding the current requested value\n@param n the value to add, must be positive (not verified)\n@return the original value before the add", "predict": "This method adds the value of the requested long to the value of the provided long. It iterates through the loop for a specified amount of time, and if the current value of the requested long is equal to or greater than the maximum value, it returns the maximum value. If the current value is less than the maximum value, it calls the addCap method to add the value of the provided long to the value of the requested long, and then compares the new value to the current value. If the new value is equal to or greater than the current value, it returns the new value. If the new value is less than the current value, it continues to the next iteration of the loop."}, {"ID": 38, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (s *session) removePartyMember(party *party) { s.Lock() defer s.Unlock() delete(s.parties, party.id) }. \n### Response: // removePartyMember removes participant from in-memory representation of\n// party members. Occurs under a lock..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private static NullPointerException toNpe(Throwable ex) { NullPointerException npe = new NullPointerException(\"Actually not, but can't pass out an exception otherwise...\"); npe.initCause(ex); return npe; } \n### Response:", "ground_truth": "Creates a NullPointerException instance and sets the given Throwable as its initial cause.\n@param ex the Throwable instance to use as cause, not null (not verified)\n@return the created NullPointerException", "predict": "// returns a NullPointerException if the given parameter is null.\n// This method is used to handle null values in a safe way."}, {"ID": 39, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @ExperimentalApi(\"https://github.com/grpc/grpc-java/issues/2563\") public CallOptions withMaxOutboundMessageSize(int maxSize) { checkArgument(maxSize >= 0, \"invalid maxsize %s\", maxSize); CallOptions newOptions = new CallOptions(this); newOptions.maxOutboundMessageSize = maxSize; return newOptions; }. \n### Response: Sets the maximum allowed message size acceptable sent to the remote peer..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void add(Object o) { // if no value yet, create the first array if (size == 0) { head = new Object[capacityHint + 1]; tail = head; head[0] = o; indexInTail = 1; size = 1; } else // if the tail is full, create a new tail and link if (indexInTail == capacityHint) { Object[] t = new Object[capacityHint + 1]; t[0] = o; tail[capacityHint] = t; tail = t; indexInTail = 1; size++; } else { tail[indexInTail] = o; indexInTail++; size++; } } \n### Response:", "ground_truth": "Adds a new element to this list.\n@param o the object to add, nulls are accepted", "predict": "This method adds an object `o` to the end of an array `tail`. It first checks if the array is empty, and if so, it creates the first array and sets its size to 1. If the array is not empty, it checks if the array's index in the tail is equal to the capacityHint, and if so, it creates a new array and links it to the tail. Finally, it adds the object `o` to the end of the array and increments the index in the tail."}, {"ID": 40, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func NewTagger(backend ImageComponent, stdout io.Writer, names []string) (*Tagger, error) { reposAndTags, err := sanitizeRepoAndTags(names) if err != nil { return nil, err } return &Tagger{ imageComponent: backend, stdout: stdout, repoAndTags: reposAndTags, }, nil }. \n### Response: // NewTagger returns a new Tagger for tagging the images of a build.\n// If any of the names are invalid tags an error is returned..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void shutdown() { ScheduledExecutorService exec = PURGE_THREAD.getAndSet(null); if (exec != null) { exec.shutdownNow(); } POOLS.clear(); } \n### Response:", "ground_truth": "Stops the purge thread.", "predict": "// shutdown() is called to stop the build process.\n// It schedules the shutdownNow() method of the ScheduledExecutorService to run.\n// It also clears the pool of ExecutorServices by calling the clear() method."}, {"ID": 41, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def _load_start_paths(self): \" Start the Read-Eval-Print Loop. \" if self._startup_paths: for path in self._startup_paths: if os.path.exists(path): with open(path, 'rb') as f: code = compile(f.read(), path, 'exec') six.exec_(code, self.get_globals(), self.get_locals()) else: output = self.app.output output.write('WARNING | File not found: {}\\n\\n'.format(path)). \n### Response: Start the Read-Eval-Print Loop..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static ScheduledExecutorService create(ThreadFactory factory) { final ScheduledExecutorService exec = Executors.newScheduledThreadPool(1, factory); tryPutIntoPool(PURGE_ENABLED, exec); return exec; } \n### Response:", "ground_truth": "Creates a ScheduledExecutorService with the given factory.\n@param factory the thread factory\n@return the ScheduledExecutorService", "predict": "Create a new ScheduledExecutorService using the provided thread factory."}, {"ID": 42, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected <T> T fromJsonString(String json, Class<T> clazz) { return _gsonParser.fromJson(json, clazz); }. \n### Response: Convert JsonString to Object of Clazz\n\n@param json\n@param clazz\n@return Object of Clazz.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public final void setSubscription(Subscription s) { if (cancelled) { s.cancel(); return; } ObjectHelper.requireNonNull(s, \"s is null\"); if (get() == 0 && compareAndSet(0, 1)) { Subscription a = actual; if (a != null && cancelOnReplace) { a.cancel(); } actual = s; long r = requested; if (decrementAndGet() != 0) { drainLoop(); } if (r != 0L) { s.request(r); } return; } Subscription a = missedSubscription.getAndSet(s); if (a != null && cancelOnReplace) { a.cancel(); } drain(); } \n### Response:", "ground_truth": "Atomically sets a new subscription.\n@param s the subscription to set, not null (verified)", "predict": "Set Subscription\n\nThis method sets the current subscription to the given Subscription object. If the subscription has already been cancelled, it cancels it immediately. If the method is called after the subscription has been cancelled, it will return immediately.\n\n@param s\n@return void.\n\nThis method sets the current subscription to the given Subscription object. It does not check if the subscription has already been cancelled. If the method is called after the subscription has been cancelled, it will return immediately.\n\n@param cancelOnReplace\n@return boolean.\n\nThis parameter specifies whether the subscription should be cancelled if it is being replaced. If this parameter is true, the method will cancel the subscription immediately. If this parameter is false, the method will check if the subscription is still in use and if so, it will cancel it after drainLoop() has been called.\n\n@param drainLoop\n@return void.\n\nThis parameter specifies whether to drain the subscription after it has been set. If this parameter is true, the method will drain the subscription and cancel it after drainLoop() has been called. If this parameter is false, the method will not drain the subscription and it will not be cancelled.\n\n@return void.\n\nThis method sets the current subscription to the given Subscription object. It does not check if the subscription has already been cancelled. If the method is called after the subscription has been cancelled, it will return immediately. It also does not check if the missedSubscription is still in use.\n\n@return void.\n\nThis method sets the current subscription to the given Subscription object. It does not check if the subscription has already been cancelled. If the method is called after the subscription has been cancelled, it will return immediately. It also does not check if the missedSubscription is still in use. It also does not drain the subscription."}, {"ID": 43, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func CopyTo(ctx context.Context, name string, content []byte) error { if clipboard.Unsupported { out.Yellow(ctx, \"%s\", ErrNotSupported) return nil } if err := clipboard.WriteAll(string(content)); err != nil { return errors.Wrapf(err, \"failed to write to clipboard\") } if err := clear(ctx, content, ctxutil.GetClipTimeout(ctx)); err != nil { return errors.Wrapf(err, \"failed to clear clipboard\") } out.Print(ctx, \"\u2714 Copied %s to clipboard. Will clear in %d seconds.\", color.YellowString(name), ctxutil.GetClipTimeout(ctx)) return nil }. \n### Response: // CopyTo copies the given data to the clipboard and enqueues automatic\n// clearing of the clipboard.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: void emitLoop() { for (;;) { AppendOnlyLinkedArrayList<Object> q; synchronized (this) { q = queue; if (q == null) { emitting = false; return; } queue = null; } q.forEachWhile(this); } } \n### Response:", "ground_truth": "Loops until all notifications in the queue has been processed.", "predict": "// emitLoop iterates through the queue and performs a forEachWhile loop\n// within a synchronized block to prevent concurrent access to the queue."}, {"ID": 44, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def intersect(self, other): \"\"\"Find the mutual tensor factors of two Hilbert spaces.\"\"\" if other is FullSpace: return self if other is TrivialSpace: return TrivialSpace if isinstance(other, ProductSpace): other_ops = set(other.operands) else: other_ops = {other} return ProductSpace.create( *sorted(set(self.operands).intersection(other_ops))). \n### Response: Find the mutual tensor factors of two Hilbert spaces..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static RuntimeException wrapOrThrow(Throwable error) { if (error instanceof Error) { throw (Error)error; } if (error instanceof RuntimeException) { return (RuntimeException)error; } return new RuntimeException(error); } \n### Response:", "ground_truth": "If the provided Throwable is an Error this method\nthrows it, otherwise returns a RuntimeException wrapping the error\nif that error is a checked exception.\n@param error the error to wrap or throw\n@return the (wrapped) error", "predict": "Wraps or throws a given error."}, {"ID": 45, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def clean_data(input_value): ''' a function to transform a value into a json or yaml valid datatype :param input_value: object of any datatype :return: object with json valid datatype ''' # pass normal json/yaml datatypes if input_value.__class__.__name__ in ['bool', 'str', 'float', 'int', 'NoneType']: pass # transform byte data to base64 encoded string elif isinstance(input_value, bytes): from base64 import b64encode input_value = b64encode(input_value).decode() # convert tuples and sets into lists elif isinstance(input_value, tuple) or isinstance(input_value, set): new_list = [] new_list.extend(input_value) input_value = transform_data(clean_data, new_list) # recurse through dictionaries and lists elif isinstance(input_value, dict) or isinstance(input_value, list): input_value = transform_data(clean_data, input_value) # convert to string all python objects and callables else: input_value = str(input_value) return input_value. \n### Response: a function to transform a value into a json or yaml valid datatype\n\n    :param input_value: object of any datatype\n    :return: object with json valid datatype.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static List<Throwable> flatten(Throwable t) { List<Throwable> list = new ArrayList<Throwable>(); ArrayDeque<Throwable> deque = new ArrayDeque<Throwable>(); deque.offer(t); while (!deque.isEmpty()) { Throwable e = deque.removeFirst(); if (e instanceof CompositeException) { CompositeException ce = (CompositeException) e; List<Throwable> exceptions = ce.getExceptions(); for (int i = exceptions.size() - 1; i >= 0; i--) { deque.offerFirst(exceptions.get(i)); } } else { list.add(e); } } return list; } \n### Response:", "ground_truth": "Returns a flattened list of Throwables from tree-like CompositeException chain.\n@param t the starting throwable\n@return the list of Throwables flattened in a depth-first manner", "predict": "This method flattens a list of Throwable objects.\n\n    :param t: Throwable object\n    :return: a list of Throwable objects with the same structure as the input list.\n\nNote: The method uses an ArrayDeque to store the Throwable objects, which is a more efficient data structure than an ArrayList for large lists. Also, the method uses the CompositeException class to represent composite exceptions and their exception objects."}, {"ID": 46, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private B newProcessBuilder(Class[] param_types, Object[] params) { if (process_builder_class != null) { try { Constructor<B> constructor = process_builder_class.getDeclaredConstructor(param_types); return constructor.newInstance(params); } catch (Exception e) { throw new QueujException(e); } } if (parent_queue != null) return (B)parent_queue.newProcessBuilder(param_types, params); // else throw new QueujException(\"No ProcessBuilder exists for Queue\"); }. \n### Response: Private method to instantiate the Queues ProcessBuilder. Will ask the parent Queue\nto instantiate its ProcessBuilder if this Queue doesn't have one..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @SuppressWarnings(\"unchecked\") public static <E extends Throwable> Exception throwIfThrowable(Throwable e) throws E { if (e instanceof Exception) { return (Exception)e; } throw (E)e; } \n### Response:", "ground_truth": "Workaround for Java 6 not supporting throwing a final Throwable from a catch block.\n@param  the generic exception type\n@param e the Throwable error to return or throw\n@return the Throwable e if it is a subclass of Exception\n@throws E the generic exception thrown", "predict": "This method is used to throw an exception if the given Throwable is an exception, otherwise it returns the original exception. This is useful for catching exceptions in a more specific way."}, {"ID": 47, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def _module_to_base_modules(s): \"\"\"return all module names that would be imported due to this import-import \"\"\" parts = s.split('.') for i in range(1, len(parts)): yield '.'.join(parts[:i]). \n### Response: return all module names that would be imported due to this\n    import-import.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void clear() { if (disposed) { return; } OpenHashSet<Disposable> set; synchronized (this) { if (disposed) { return; } set = resources; resources = null; } dispose(set); } \n### Response:", "ground_truth": "Atomically clears the container, then disposes all the previously contained Disposables.", "predict": "This method clears the resources associated with the object, but it does not release any memory or resources that may be required for the object to continue functioning properly. It is important to properly release any resources that are associated with the object before calling this method.\n\nThe method uses a OpenHashSet to store the resources, which is a non-reentrant collection class that is not designed to be used in a thread-safe manner. It is important to use a thread-safe alternative to store the resources, such as a ConcurrentHashMap, to avoid any potential data race issues. Additionally, it is important to properly synchronize access to the set to ensure that only one thread can access it at a time, and to release the set when it is no longer needed to avoid any memory leaks."}, {"ID": 48, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: static Codec<NamingMessage> createRegistryCodec(final IdentifierFactory factory) { final Map<Class<? extends NamingMessage>, Codec<? extends NamingMessage>> clazzToCodecMap = new HashMap<>(); clazzToCodecMap.put(NamingRegisterRequest.class, new NamingRegisterRequestCodec(factory)); clazzToCodecMap.put(NamingRegisterResponse.class, new NamingRegisterResponseCodec(new NamingRegisterRequestCodec(factory))); clazzToCodecMap.put(NamingUnregisterRequest.class, new NamingUnregisterRequestCodec(factory)); final Codec<NamingMessage> codec = new MultiCodec<>(clazzToCodecMap); return codec; }. \n### Response: Creates a codec only for registration.\n\n@param factory an identifier factory\n@return a codec.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public int size() { if (disposed) { return 0; } synchronized (this) { if (disposed) { return 0; } OpenHashSet<Disposable> set = resources; return set != null ? set.size() : 0; } } \n### Response:", "ground_truth": "Returns the number of currently held Disposables.\n@return the number of currently held Disposables", "predict": "This method is used to determine the size of the ` resources` HashSet, which is used to store disposable objects. It first checks if the ` resources` HashSet is already set to null, and if so, returns 0. If the ` resources` HashSet is not null, it then synchronizes access to the method to prevent any potential race conditions. Finally, it returns the size of the ` resources` HashSet, which may not be 0 if it contains objects that are not disposable.\n\n@param resources an OpenHashSet<Disposable> of disposable objects.\n@return the size of the resources HashSet.\n\nNote that this method does not handle objects that are already disposed, and it does not check if the ` resources` HashSet is thread-safe. If you need to ensure thread-safe access to the ` resources` HashSet, you may need to use a different approach, such as using a concurrent hash set or a thread-safe collection."}, {"ID": 49, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function matchPath($pattern, $str, $isCaseSensitive = true) { return SelectorUtils::matchPath($pattern, $str, $isCaseSensitive); }. \n### Response: Matches a path against a pattern.\n\n@param string $pattern the (non-null) pattern to match against\n@param string $str the (non-null) string (path) to match\n@param bool $isCaseSensitive must a case sensitive match be done?\n\n@return bool true when the pattern matches against the string.\nfalse otherwise..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @SuppressWarnings(\"unchecked\") public static <T, R> boolean tryScalarXMapSubscribe(ObservableSource<T> source, Observer<? super R> observer, Function<? super T, ? extends ObservableSource<? extends R>> mapper) { if (source instanceof Callable) { T t; try { t = ((Callable<T>)source).call(); } catch (Throwable ex) { Exceptions.throwIfFatal(ex); EmptyDisposable.error(ex, observer); return true; } if (t == null) { EmptyDisposable.complete(observer); return true; } ObservableSource<? extends R> r; try { r = ObjectHelper.requireNonNull(mapper.apply(t), \"The mapper returned a null ObservableSource\"); } catch (Throwable ex) { Exceptions.throwIfFatal(ex); EmptyDisposable.error(ex, observer); return true; } if (r instanceof Callable) { R u; try { u = ((Callable<R>)r).call(); } catch (Throwable ex) { Exceptions.throwIfFatal(ex); EmptyDisposable.error(ex, observer); return true; } if (u == null) { EmptyDisposable.complete(observer); return true; } ScalarDisposable<R> sd = new ScalarDisposable<R>(observer, u); observer.onSubscribe(sd); sd.run(); } else { r.subscribe(observer); } return true; } return false; } \n### Response:", "ground_truth": "Tries to subscribe to a possibly Callable source's mapped ObservableSource.\n@param  the input value type\n@param  the output value type\n@param source the source ObservableSource\n@param observer the subscriber\n@param mapper the function mapping a scalar value into an ObservableSource\n@return true if successful, false if the caller should continue with the regular path.", "predict": "Matches an Observable source that maps to a scalar value.\n\n@param ObservableSource<T> $source the Observable source to subscribe to\n@param Observer<? super R> $observer the Observer to use for the subscription\n@param Function<? super T,? extends ObservableSource<? extends R>> $mapper the function to use for mapping the Observable source to a scalar value\n\n@return boolean true if the Observable source is successfully subscribed and mapped to a scalar value, false otherwise.\n\n@SuppressWarnings(\"unchecked\")"}, {"ID": 50, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (b *BulkAction) BindForAction(flags *pflag.FlagSet) { flags.StringVarP(&b.Output, \"output\", \"o\", \"\", \"Output mode. Use \\\"-o name\\\" for shorter output (resource/name).\") flags.BoolVar(&b.DryRun, \"dry-run\", false, \"If true, show the result of the operation without performing it.\") }. \n### Response: // BindForAction sets flags on this action for when setting -o should only change how the operation results are displayed.\n// Passing -o is changing the default output format..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static <T, U> Observable<U> scalarXMap(T value, Function<? super T, ? extends ObservableSource<? extends U>> mapper) { return RxJavaPlugins.onAssembly(new ScalarXMapObservable<T, U>(value, mapper)); } \n### Response:", "ground_truth": "Maps a scalar value into an Observable and emits its values.\n\n@param  the scalar value type\n@param  the output value type\n@param value the scalar value to map\n@param mapper the function that gets the scalar value and should return\nan ObservableSource that gets streamed\n@return the new Observable instance", "predict": "// This method creates an Observable from a ScalarXMap observable and passes in the value and mapper function.\n// It returns the Observable."}, {"ID": 51, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func NewMockPinner(ctrl *gomock.Controller) *MockPinner { mock := &MockPinner{ctrl: ctrl} mock.recorder = &MockPinnerMockRecorder{mock} return mock }. \n### Response: // NewMockPinner creates a new mock instance.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public <U> boolean accept(Subscriber<? super U> subscriber) { Object[] a = head; final int c = capacity; while (a != null) { for (int i = 0; i < c; i++) { Object o = a[i]; if (o == null) { break; } if (NotificationLite.acceptFull(o, subscriber)) { return true; } } a = (Object[])a[c]; } return false; } \n### Response:", "ground_truth": "Interprets the contents as NotificationLite objects and calls\nthe appropriate Subscriber method.\n\n@param  the target type\n@param subscriber the subscriber to emit the events to\n@return true if a terminal event has been reached", "predict": "// Accepts a subscriber and returns whether it has been fully accepted."}, {"ID": 52, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static boolean storeOnApplicationPrivateDir(Context context, Bitmap bitmap, String filename, Bitmap.CompressFormat format, int quality) { OutputStream out = null; try { out = new BufferedOutputStream(context.openFileOutput(filename, Context.MODE_PRIVATE)); return bitmap.compress(format, quality, out); } catch (FileNotFoundException e) { Log.e(TAG, \"no such file for saving bitmap: \", e); return false; } finally { CloseableUtils.close(out); } }. \n### Response: Store the bitmap on the application private directory path.\n@param context the context.\n@param bitmap to store.\n@param filename file name.\n@param format bitmap format.\n@param quality the quality of the compressed bitmap.\n@return the compressed bitmap file..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public <U> boolean accept(Observer<? super U> observer) { Object[] a = head; final int c = capacity; while (a != null) { for (int i = 0; i < c; i++) { Object o = a[i]; if (o == null) { break; } if (NotificationLite.acceptFull(o, observer)) { return true; } } a = (Object[])a[c]; } return false; } \n### Response:", "ground_truth": "Interprets the contents as NotificationLite objects and calls\nthe appropriate Observer method.\n\n@param  the target type\n@param observer the observer to emit the events to\n@return true if a terminal event has been reached", "predict": "Accept an observer for the given super class U.\n@param observer the observer.\n@return true if the observer was accepted, false otherwise.."}, {"ID": 53, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (db *database) generateThreatsForUpdate() { if db.tfu == nil { db.tfu = make(threatsForUpdate) } db.ml.RLock() for td, hs := range db.tfl { phs := db.tfu[td] phs.Hashes = hs.Export() db.tfu[td] = phs } db.ml.RUnlock() }. \n### Response: // generateThreatsForUpdate regenerates the threatsForUpdate hashes from\n// the threatsForLookup. We do this to avoid holding onto the hash lists for\n// a long time, needlessly occupying lots of memory.\n//\n// This assumes that the db.mu lock is already held..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void start() { if (SubscriptionHelper.setOnce(upstream, EmptySubscription.INSTANCE)) { queue = new SpscArrayQueue<T>(bufferSize); } } \n### Response:", "ground_truth": "Initializes this Processor by setting an upstream Subscription that\nignores request amounts, uses a fixed buffer\nand allows using the onXXX and offer methods\nafterwards.", "predict": "// Start the subscription.\n//\n// This assumes that the upstream object is already created and has been set up to handle the SubscriptionHelper.setOnce() method.\n//\n// This method also creates a new SpscArrayQueue<T> object to hold the data received from the stream.\n//\n// This method does not perform any other actions in the main part of the program.\n```csharp\n// Method-level comment for the start() method\n```"}, {"ID": 54, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def get_xml_type(val): \"\"\"Returns the data type for the xml type attribute\"\"\" if type(val).__name__ in ('str', 'unicode'): return 'str' if type(val).__name__ in ('int', 'long'): return 'int' if type(val).__name__ == 'float': return 'float' if type(val).__name__ == 'bool': return 'bool' if isinstance(val, numbers.Number): return 'number' if type(val).__name__ == 'NoneType': return 'null' if isinstance(val, dict): return 'dict' if isinstance(val, collections.Iterable): return 'list' return type(val).__name__. \n### Response: Returns the data type for the xml type attribute.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void startUnbounded() { if (SubscriptionHelper.setOnce(upstream, EmptySubscription.INSTANCE)) { queue = new SpscLinkedArrayQueue<T>(bufferSize); } } \n### Response:", "ground_truth": "Initializes this Processor by setting an upstream Subscription that\nignores request amounts, uses an unbounded buffer\nand allows using the onXXX and offer methods\nafterwards.", "predict": "This method starts a unbounded subscription to the stream. It checks if the subscription has been set to only be active once, and if so, it creates a new SpscLinkedArrayQueue<T> with the specified buffer size."}, {"ID": 55, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func loadConfig() (*Config, error) { cfg, err := client.GetConfig() if err != nil { return nil, err } if cfg.Server == \"\" { cfg.Server = \"https://textsecure-service.whispersystems.org:443\" } if cfg.VerificationType == \"\" { cfg.VerificationType = \"sms\" } if cfg.StorageDir == \"\" { cfg.StorageDir = \".storage\" } return cfg, nil }. \n### Response: // loadConfig gets the config via the client and makes sure\n// that for unset values sane defaults are used.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public boolean offer(T t) { if (once.get()) { return false; } ObjectHelper.requireNonNull(t, \"offer called with null. Null values are generally not allowed in 2.x operators and sources.\"); if (fusionMode == QueueSubscription.NONE) { if (queue.offer(t)) { drain(); return true; } } return false; } \n### Response:", "ground_truth": "Tries to offer an item into the internal queue and returns false\nif the queue is full.\n@param t the item to offer, not null\n@return true if successful, false if the queue is full", "predict": "// offer called with a null value, which is not allowed\n// and returns false to prevent the queue from being drained.\n// If fusionMode is NONE, the queue is not used and the return value\n// is simply false.\n\n// Load the config function and comment out the // once.get() line as it is not needed.\n// This function gets the config from the client and makes sure\n// that for unset values sane defaults are used."}, {"ID": 56, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected function processExportImages(AbstractExport $export, ArchiverInterface $archiver) { foreach ($export->getImagesPaths() as $imagePath) { $archiver->add($imagePath); } }. \n### Response: Add images to archive\n\n@param \\Thelia\\ImportExport\\Export\\AbstractExport $export   An export instance\n@param \\Thelia\\Core\\Archiver\\ArchiverInterface    $archiver.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @Nullable public Disposable get() { Disposable d = resource.get(); if (d == DisposableHelper.DISPOSED) { return Disposables.disposed(); } return d; } \n### Response:", "ground_truth": "Returns the currently contained Disposable or null if this container is empty.\n@return the current Disposable, may be null", "predict": "Get the resource and check if it is disposed, if it is, return disposed().\n\n@return A disposable object.\n\nNote: This method is used to get a resource that is associated with a Disposable object. It first checks if the resource is already disposed by calling get() on the resource object. If it is, it returns disposed(). If the resource is not disposed, it returns the resource object itself. This method is useful for avoiding memory leaks by ensuring that the resource is properly disposed of before it is dropped."}, {"ID": 57, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected function findCommandsIn($path, $recursive = false) { $classes = []; foreach ($this->findCommandsFiles($path) as $filePath) { //$class = $classFinder->findClass($filePath); $class = Util::getClassNameFromFile($filePath); if ($class !== null) { $namespace = Util::getNamespaceFromFile($filePath); if ($namespace !== null) { $class = \"$namespace\\\\$class\"; } $class = Str::removeLeft($class, '\\\\'); $parents = class_parents($class); if ($this->findCommandsExtending !== null && in_array($this->findCommandsExtending, $parents, true) === false) { continue; } $ref = new \\ReflectionClass($class); if ($ref->isAbstract()) { continue; } $classes[] = Str::removeLeft($class, '\\\\'); } } return $classes; }. \n### Response: findCommandsIn method.\n\n@param      $path\n@param bool $recursive\n\n@return array.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public final void complete(T value) { int state = get(); if ((state & (FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED)) != 0) { return; } Observer<? super T> a = downstream; if (state == FUSED_EMPTY) { this.value = value; lazySet(FUSED_READY); a.onNext(null); } else { lazySet(TERMINATED); a.onNext(value); } if (get() != DISPOSED) { a.onComplete(); } } \n### Response:", "ground_truth": "Complete the target with a single value or indicate there is a value available in\nfusion mode.\n@param value the value to signal, not null (not verified)", "predict": "complete method.\n\n@param      $value\n\n@return void."}, {"ID": 58, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function noFollowHref($input) { return preg_replace_callback( '/(?:<a(.*?href.*?)>)/i', function ($matches) { if (strpos($matches[1], 'rel=\"nofollow\"') === false) { //if there is no nofollow add it return '<a' . $matches[1] . ' rel=\"nofollow\">'; } else { //if there is already a nofollow take no action return $matches[0]; } }, $input ); }. \n### Response: Takes in a string, and adds rel=\"nofollow\" to any a tags that contain an href attribute.\n\n@param string $input\n\n@return string.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public final void error(Throwable t) { int state = get(); if ((state & (FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED)) != 0) { RxJavaPlugins.onError(t); return; } lazySet(TERMINATED); downstream.onError(t); } \n### Response:", "ground_truth": "Complete the target with an error signal.\n@param t the Throwable to signal, not null (not verified)", "predict": "This method is used to handle errors that occur in the RxJava Plugins framework. It checks the current state of the application and, if it is in the TERMINATED state, it calls the downstream method onError(t) to signal an error to the subscribers. If the state is not TERMINATED, it sets the state to TERMINATED and calls the downstream method onError(t) to signal an error to the subscribers.\n\n@param Throwable $t\n\n@return void."}, {"ID": 59, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function destroy() { $_SESSION = []; if (ini_get(\"session.use_cookies\")) { $params = session_get_cookie_params(); $time = time() - 42000; $path = $params['path']; $domain = $params['domain']; $secure = $params['secure']; $http = $params['httponly']; setcookie(session_name(), '', $time, $path, $domain, $secure, $http); } $this->container->remove('Session'); session_destroy(); }. \n### Response: destroys a session and related cookies.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public final void complete() { int state = get(); if ((state & (FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED)) != 0) { return; } lazySet(TERMINATED); downstream.onComplete(); } \n### Response:", "ground_truth": "Complete the target without any value.", "predict": "This method is called when the downstream process is complete. It checks the current state of the process and sets any necessary flags if the state is not TERMINATED. It then calls the ` downstream.onComplete()` method to signal the end of the process."}, {"ID": 60, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func extractBoundary(contentType string) string { _, params, err := mime.ParseMediaType(contentType) if err == nil { return params[\"boundary\"] } return \"\" }. \n### Response: // extractBoundary extract boundary string in contentType.\n// It returns empty string if no valid boundary found.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @CheckReturnValue @BackpressureSupport(BackpressureKind.FULL) @SchedulerSupport(SchedulerSupport.NONE) public final <R> Flowable<R> concatMapDelayError(Function<? super T, ? extends Publisher<? extends R>> mapper) { return concatMapDelayError(mapper, 2, true); } \n### Response:", "ground_truth": "Maps each of the items into a Publisher, subscribes to them one after the other,\none at a time and emits their values in order\nwhile delaying any error from either this or any of the inner Publishers\ntill all of them terminate.\n\n\nBackpressure:\nThe operator honors backpressure from downstream. Both this and the inner {@code Publisher}s are\nexpected to honor backpressure as well. If the source {@code Publisher} violates the rule, the operator will\nsignal a {@code MissingBackpressureException}. If any of the inner {@code Publisher}s doesn't honor\nbackpressure, that may throw an {@code IllegalStateException} when that\n{@code Publisher} completes.\nScheduler:\n{@code concatMapDelayError} does not operate by default on a particular {@link Scheduler}.\n\n\n@param  the result value type\n@param mapper the function that maps the items of this Publisher into the inner Publishers.\n@return the new Publisher instance with the concatenation behavior", "predict": "// concatMapDelayError concatenate delay error and return flowable.\n// It returns a flowable with 2 subscribers and delay error.\n\nNote: The above comment is for the method concatMapDelayError in the given Java code. It provides information about the method's return type, decorators, and the parameters it takes. The decorators @CheckReturnValue, @BackpressureSupport(BackpressureKind.FULL), @SchedulerSupport(SchedulerSupport.NONE) are used to indicate the method's return type, backpressure support, and scheduler support, respectively. The @CheckReturnValue decorator ensures that the method returns a value that can be checked by the caller, while the @BackpressureSupport and @SchedulerSupport decorators indicate that the method may handle backpressure and scheduling issues, respectively."}, {"ID": 61, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function flattenList(list) { // Make a copy, so the original tensor is not modified. list = [].concat(list); // Note that i must be checked against the length of the list each time through the loop, as the // list is modified within the iterations. for (let i = 0; i < list.length; i++) { if (Array.isArray(list[i])) { // Replace the item with the flattened version of the item (using the ... operator). // Replace with the items and backtrack 1 position list.splice(i, 1, ...list[i]); // Decrement i to look at the element again; we'll keep looking at this i index, until // the most deeply nested item has been flattened. i--; } } return list; }. \n### Response: Flatten the list. This is only relevant for multi-dimensional tensors..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @CheckReturnValue @BackpressureSupport(BackpressureKind.FULL) @SchedulerSupport(SchedulerSupport.NONE) public final <U> Flowable<U> concatMapIterable(Function<? super T, ? extends Iterable<? extends U>> mapper) { return concatMapIterable(mapper, 2); } \n### Response:", "ground_truth": "Returns a Flowable that concatenate each item emitted by the source Publisher with the values in an\nIterable corresponding to that item that is generated by a selector.\n\n\nBackpressure:\nThe operator honors backpressure from downstream. The source {@code Publisher}s is\nexpected to honor backpressure as well. If the source {@code Publisher} violates the rule, the operator will\nsignal a {@code MissingBackpressureException}.\nScheduler:\n{@code concatMapIterable} does not operate by default on a particular {@link Scheduler}.\n\n\n@param \nthe type of item emitted by the resulting Publisher\n@param mapper\na function that returns an Iterable sequence of values for when given an item emitted by the\nsource Publisher\n@return a Flowable that emits the results of concatenating the items emitted by the source Publisher with\nthe values in the Iterables corresponding to those items, as generated by {@code collectionSelector}\n@see ReactiveX operators documentation: FlatMap", "predict": "Concatenate multiple iterables using the mapper function. This method is suitable for use in a backpressure-enabled environment and can handle a maximum of two iterables. The method returns a Flowable<U> object, which can be used to perform further operations such as adding a limit or handling errors."}, {"ID": 62, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Nonnull public EChange clearCache () { return m_aRWLock.writeLocked ( () -> { if (m_aImageData.isEmpty () && m_aNonExistingResources.isEmpty ()) return EChange.UNCHANGED; m_aImageData.clear (); m_aNonExistingResources.clear (); if (LOGGER.isDebugEnabled ()) LOGGER.debug (\"Cache was cleared: \" + ImageDataManager.class.getName ()); return EChange.CHANGED; }); }. \n### Response: Remove all cached elements\n\n@return {@link EChange} - never null.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @CheckReturnValue @NonNull @BackpressureSupport(BackpressureKind.FULL) @SchedulerSupport(SchedulerSupport.NONE) public final Flowable<T> sorted(Comparator<? super T> sortFunction) { ObjectHelper.requireNonNull(sortFunction, \"sortFunction\"); return toList().toFlowable().map(Functions.listSorter(sortFunction)).flatMapIterable(Functions.<List<T>>identity()); } \n### Response:", "ground_truth": "Returns a Flowable that emits the events emitted by source Publisher, in a\nsorted order based on a specified comparison function.\n\nNote that calling {@code sorted} with long, non-terminating or infinite sources\nmight cause {@link OutOfMemoryError}\n\n\nBackpressure:\nThe operator honors backpressure from downstream and consumes the source {@code Publisher} in an\nunbounded manner (i.e., without applying backpressure to it).\nScheduler:\n{@code sorted} does not operate by default on a particular {@link Scheduler}.\n\n\n@param sortFunction\na function that compares two items emitted by the source Publisher and returns an Integer\nthat indicates their sort order\n@return a Flowable that emits the items emitted by the source Publisher in sorted order", "predict": "Sort a list of elements using a custom sort function.\n\n@return Flowable<T> - never null.\n\n@param sortFunction Comparator to use for sorting.\n\n@param BackpressureSupport Backpressure support for the flowable.\n@param SchedulerSupport Scheduler support for the flowable.\n@param <T> Type parameter for the elements being sorted.\n\n@param <T> Type parameter for the elements being sorted.\n\n@param <T> Type parameter for the elements being sorted."}, {"ID": 63, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def _iter_templates(): \"\"\" uses reflection to yield the Cheetah templates under this module \"\"\" # pylint: disable=W0406 # needed for introspection import javatools.cheetah from Cheetah.Template import Template for _, name, _ in iter_modules(__path__): __import__(\"javatools.cheetah.\" + name) found = getattr(getattr(javatools.cheetah, name), name) if issubclass(found, Template): yield found. \n### Response: uses reflection to yield the Cheetah templates under this module.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public PerfAsyncConsumer await(int count) { if (count <= 1000) { while (getCount() != 0) { } } else { try { await(); } catch (InterruptedException ex) { throw new RuntimeException(ex); } } return this; } \n### Response:", "ground_truth": "Wait for the terminal signal.\n@param count if less than 1001, a spin-wait is used\n@return this", "predict": "public PerfAsyncConsumer await(int count) {\nif (count <= 1000) {\nwhile (getCount()!= 0) {\n}\n} else {\ntry {\nawait();\n} catch (InterruptedException ex) {\nthrow new RuntimeException(ex);\n}\n}\nreturn this;\n}"}, {"ID": 64, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def _cleanup(self, status, expires_multiplier=1): u\"\"\" Clean up expired records. Will remove all entries for any ChordData whose callback result is in state <status> that was marked completed more than (self.expires * <expires_multipler>) ago. \"\"\" # self.expires is inherited, and defaults to 1 day (or setting CELERY_TASK_RESULT_EXPIRES) expires = self.expires if isinstance(self.expires, timedelta) else timedelta(seconds=self.expires) expires = expires * expires_multiplier chords_to_delete = ChordData.objects.filter( callback_result__date_done__lte=datetime.now() - expires, callback_result__status=status ).iterator() for _chord in chords_to_delete: subtask_ids = [subtask.task_id for subtask in _chord.completed_results.all()] _chord.completed_results.clear() TaskMeta.objects.filter(task_id__in=subtask_ids).delete() _chord.callback_result.delete() _chord.delete(). \n### Response: u\"\"\"\n        Clean up expired records.\n\n        Will remove all entries for any ChordData whose callback result is in\n        state  that was marked completed more than\n        (self.expires * ) ago..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected final void request(long n) { Subscription s = this.upstream; if (s != null) { s.request(n); } } \n### Response:", "ground_truth": "Requests from the upstream Subscription.\n@param n the request amount, positive", "predict": "\"\"\"Request a subscription.\n\n        Will call the request method on the upstream Subscription object if one is\n        available, and block until a response is received. If no response is\n        received, the method will return immediately.\"\"\""}, {"ID": 65, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private static OkHttpClient getUnsafeOkHttpClient() { try { // Create a trust manager that does not validate certificate chains final TrustManager[] trustAllCerts = new TrustManager[] { new X509TrustManager() { @Override public void checkClientTrusted(java.security.cert.X509Certificate[] chain, String authType) throws CertificateException { } @Override public void checkServerTrusted(java.security.cert.X509Certificate[] chain, String authType) throws CertificateException { } @Override public java.security.cert.X509Certificate[] getAcceptedIssuers() { return null; } } }; // Install the all-trusting trust manager final SSLContext sslContext = SSLContext.getInstance(\"SSL\"); sslContext.init(null, trustAllCerts, new java.security.SecureRandom()); // Create an ssl socket factory with our all-trusting manager final SSLSocketFactory sslSocketFactory = sslContext.getSocketFactory(); OkHttpClient okHttpClient = new OkHttpClient(); okHttpClient.setSslSocketFactory(sslSocketFactory); okHttpClient.setHostnameVerifier(new HostnameVerifier() { @Override public boolean verify(String hostname, SSLSession session) { return true; } }); return okHttpClient; } catch (Exception e) { throw new RuntimeException(e); } }. \n### Response: Returns a OkHttpClient that ignores SSL cert errors\n@return.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: boolean add(PublishDisposable<T> ps) { for (;;) { PublishDisposable<T>[] a = subscribers.get(); if (a == TERMINATED) { return false; } int n = a.length; @SuppressWarnings(\"unchecked\") PublishDisposable<T>[] b = new PublishDisposable[n + 1]; System.arraycopy(a, 0, b, 0, n); b[n] = ps; if (subscribers.compareAndSet(a, b)) { return true; } } } \n### Response:", "ground_truth": "Tries to add the given subscriber to the subscribers array atomically\nor returns false if the subject has terminated.\n@param ps the subscriber to add\n@return true if successful, false if the subject has terminated", "predict": "Adds a new subscriber to the list of subscribers\n@param ps.\n\n"}, {"ID": 66, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public Attachment attachUrl(long sheetId, Attachment attachment) throws SmartsheetException { return this.createResource(\"sheets/\" + sheetId + \"/attachments\", Attachment.class, attachment); }. \n### Response: Attach a URL to a sheet.\n\nThe URL can be a normal URL (attachmentType \"URL\"), a Google Drive URL (attachmentType \"GOOGLE_DRIVE\") or a\nBox.com URL (attachmentType \"BOX_COM\").\n\nIt mirrors to the following Smartsheet REST API method: POST /sheets/{sheetId}/attachments\n\n@param sheetId the sheet id\n@param attachment the attachment object\n@return the attachment object\n@throws IllegalArgumentException if any argument is null or empty string\n@throws InvalidRequestException if there is any problem with the REST API request\n@throws AuthorizationException if there is any problem with  the REST API authorization (access token)\n@throws ResourceNotFoundException if the resource cannot be found\n@throws ServiceUnavailableException if the REST API service is not available (possibly due to rate limiting)\n@throws SmartsheetException if there is any other error during the operation.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @SuppressWarnings(\"unchecked\") void remove(PublishDisposable<T> ps) { for (;;) { PublishDisposable<T>[] a = subscribers.get(); if (a == TERMINATED || a == EMPTY) { return; } int n = a.length; int j = -1; for (int i = 0; i < n; i++) { if (a[i] == ps) { j = i; break; } } if (j < 0) { return; } PublishDisposable<T>[] b; if (n == 1) { b = EMPTY; } else { b = new PublishDisposable[n - 1]; System.arraycopy(a, 0, b, 0, j); System.arraycopy(a, j + 1, b, j, n - j - 1); } if (subscribers.compareAndSet(a, b)) { return; } } } \n### Response:", "ground_truth": "Atomically removes the given subscriber if it is subscribed to the subject.\n@param ps the subject to remove", "predict": "This method removes a subscription from a PublishDisposable<T> array.\n\nIt iterates through the array of subscribers and for each subscriber, it checks if the subscription is to the specified PublishDisposable<T> object ps. If the subscription is found, it copies the current subscription object to a new empty array and then copies the next element of the original array to the new array. Finally, it compares the new array with the original array and returns if the new array contains the same elements as the original array.\n\nIt is marked with @SuppressWarnings(\"unchecked\") to indicate that the method may use unchecked operations, but it is expected to be safe in most cases."}, {"ID": 67, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func NewGaugeVec(opts GaugeOpts, labelNames []string) *GaugeVec { desc := NewDesc( BuildFQName(opts.Namespace, opts.Subsystem, opts.Name), opts.Help, labelNames, opts.ConstLabels, ) return &GaugeVec{ metricVec: newMetricVec(desc, func(lvs ...string) Metric { if len(lvs) != len(desc.variableLabels) { panic(makeInconsistentCardinalityError(desc.fqName, desc.variableLabels, lvs)) } result := &gauge{desc: desc, labelPairs: makeLabelPairs(desc, lvs)} result.init(result) // Init self-collection. return result }), } }. \n### Response: // NewGaugeVec creates a new GaugeVec based on the provided GaugeOpts and\n// partitioned by the given label names..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static <T> ConnectableFlowable<T> observeOn(final ConnectableFlowable<T> cf, final Scheduler scheduler) { final Flowable<T> flowable = cf.observeOn(scheduler); return RxJavaPlugins.onAssembly(new ConnectableFlowableReplay<T>(cf, flowable)); } \n### Response:", "ground_truth": "Child Subscribers will observe the events of the ConnectableObservable on the\nspecified scheduler.\n@param  the value type\n@param cf the ConnectableFlowable to wrap\n@param scheduler the target scheduler\n@return the new ConnectableObservable instance", "predict": "// observeOn observes the given ConnectableFlowable<T> on the given Scheduler.\n// returns an RxJavaPlugins.onAssembly<T> object that can be used to perform\n// further processing or aggregation.."}, {"ID": 68, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (t transitionTrigger) String() string { switch t { case chainTrigger: return \"chainTrigger\" case remoteCloseTrigger: return \"remoteCloseTrigger\" case userTrigger: return \"userTrigger\" case localCloseTrigger: return \"localCloseTrigger\" case coopCloseTrigger: return \"coopCloseTrigger\" default: return \"unknown trigger\" } }. \n### Response: // String returns a human readable string describing the passed\n// transitionTrigger..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: static <ResponseT, ReturnT> HttpServiceMethod<ResponseT, ReturnT> parseAnnotations( Retrofit retrofit, Method method, RequestFactory requestFactory) { boolean isKotlinSuspendFunction = requestFactory.isKotlinSuspendFunction; boolean continuationWantsResponse = false; boolean continuationBodyNullable = false; Annotation[] annotations = method.getAnnotations(); Type adapterType; if (isKotlinSuspendFunction) { Type[] parameterTypes = method.getGenericParameterTypes(); Type responseType = Utils.getParameterLowerBound(0, (ParameterizedType) parameterTypes[parameterTypes.length - 1]); if (getRawType(responseType) == Response.class && responseType instanceof ParameterizedType) { // Unwrap the actual body type from Response<T>. responseType = Utils.getParameterUpperBound(0, (ParameterizedType) responseType); continuationWantsResponse = true; } else { // TODO figure out if type is nullable or not // Metadata metadata = method.getDeclaringClass().getAnnotation(Metadata.class) // Find the entry for method // Determine if return type is nullable or not } adapterType = new Utils.ParameterizedTypeImpl(null, Call.class, responseType); annotations = SkipCallbackExecutorImpl.ensurePresent(annotations); } else { adapterType = method.getGenericReturnType(); } CallAdapter<ResponseT, ReturnT> callAdapter = createCallAdapter(retrofit, method, adapterType, annotations); Type responseType = callAdapter.responseType(); if (responseType == okhttp3.Response.class) { throw methodError(method, \"'\" + getRawType(responseType).getName() + \"' is not a valid response body type. Did you mean ResponseBody?\"); } if (responseType == Response.class) { throw methodError(method, \"Response must include generic type (e.g., Response<String>)\"); } // TODO support Unit for Kotlin? if (requestFactory.httpMethod.equals(\"HEAD\") && !Void.class.equals(responseType)) { throw methodError(method, \"HEAD method must use Void as response type.\"); } Converter<ResponseBody, ResponseT> responseConverter = createResponseConverter(retrofit, method, responseType); okhttp3.Call.Factory callFactory = retrofit.callFactory; if (!isKotlinSuspendFunction) { return new CallAdapted<>(requestFactory, callFactory, responseConverter, callAdapter); } else if (continuationWantsResponse) { //noinspection unchecked Kotlin compiler guarantees ReturnT to be Object. return (HttpServiceMethod<ResponseT, ReturnT>) new SuspendForResponse<>(requestFactory, callFactory, responseConverter, (CallAdapter<ResponseT, Call<ResponseT>>) callAdapter); } else { //noinspection unchecked Kotlin compiler guarantees ReturnT to be Object. return (HttpServiceMethod<ResponseT, ReturnT>) new SuspendForBody<>(requestFactory, callFactory, responseConverter, (CallAdapter<ResponseT, Call<ResponseT>>) callAdapter, continuationBodyNullable); } } \n### Response:", "ground_truth": "Inspects the annotations on an interface method to construct a reusable service method that\nspeaks HTTP. This requires potentially-expensive reflection so it is best to build each service\nmethod only once and reuse it.", "predict": "// Parse annotations for a given method and return a HttpServiceMethod<ResponseT, ReturnT> object.\n// This method takes in Retrofit, method, and RequestFactory as parameters.\n// It checks if the method is a KotlinSuspendFunction, if so, it gets the generic parameter types,\n// if not, it gets the raw type of the response type and checks if it is a valid response body type.\n// If it is, it wraps the actual body type in a Response<T> and sets the continuation wants to be response.\n// If not, it checks if the type is nullable or not, if not, it sets the continuationBodyNullable to true.\n// It then creates an adapter type, creates a call adapter, and returns a new Call adapted object.\n// If the method is a KotlinSuspendFunction, it returns a CallAdapted object.\n// If the continuation wants to be response, it returns a SuspendForResponse object.\n// If the method is not a KotlinSuspendFunction and the response type is not Void, it returns a SuspendForBody object.\n// This method is useful for parsing response bodies with annotations, such as ResponseBody or Response<T>.\n// It is also useful for supporting Kotlin in the Retrofit API."}, {"ID": 69, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected function _relative_path_to_url( $path, $content ) { if ( wp_http_validate_url( $path ) ) { return $path; } $permalink = $this->get_permalink(); if ( ! $permalink ) { $permalink = $this->_get_permalink( $content ); } preg_match( '/(https?:\\/\\/[^\\/]+)/', $permalink, $reg ); if ( empty( $reg[0] ) ) { return false; } return trailingslashit( $reg[0] ) . $path; }. \n### Response: Return url that converted from relative path\n\n@param string $path\n@param string $content\n@return string.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void setDelay(long amount, TimeUnit unit) { if (amount < 0) { throw new IllegalArgumentException(\"Amount must be positive value.\"); } this.delayMs = unit.toMillis(amount); } \n### Response:", "ground_truth": "Set the network round trip delay.", "predict": "Set delay in milliseconds\n\n@param long $amount\n@param TimeUnit $unit\n@return void."}, {"ID": 70, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public byte readByte() throws JMSException { if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled()) SibTr.entry(this, tc, \"readByte\"); try { // Check that we are in read mode checkBodyReadable(\"readByte\"); if (requiresInit) lazyInitForReading(); // Read the byte from the input stream byte byteRead = readStream.readByte(); // read the byte if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled()) SibTr.exit(this, tc, \"readByte\", byteRead); return byteRead; } catch (IOException e) { JMSException jmse = (JMSException) JmsErrorUtils.newThrowable( MessageEOFException.class, \"END_BYTESMESSAGE_CWSIA0183\", null, tc); jmse.initCause(e); throw jmse; } }. \n### Response: Read a signed 8-bit value from the stream message.\n\n@return the next byte from the stream message as a signed 8-bit\nbyte.\n\n@exception MessageNotReadableException if message in write-only mode.\n@exception MessageEOFException if end of message stream\n@exception JMSException if JMS fails to read message due to\nsome internal JMS error..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public Response<?> createErrorResponse() { Response<?> call; try { call = errorFactory.call(); } catch (Exception e) { throw new IllegalStateException(\"Error factory threw an exception.\", e); } if (call == null) { throw new IllegalStateException(\"Error factory returned null.\"); } if (call.isSuccessful()) { throw new IllegalStateException(\"Error factory returned successful response.\"); } return call; } \n### Response:", "ground_truth": "The HTTP error to be used when an error is triggered.", "predict": "Create an error response using the error factory.\n\n@return the error response as a Response<?> object.\n\n@exception Exception if the error factory throws an exception.\n@exception IllegalStateException if the error factory returns null or is successful."}, {"ID": 71, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def create_activity!(*args) return unless self.public_activity_enabled? options = prepare_settings(*args) if call_hook_safe(options[:key].split('.').last) reset_activity_instance_options return PublicActivity::Adapter.create_activity!(self, options) end end. \n### Response: Directly saves activity to database. Works the same as create_activity\n but throws validation error for each supported ORM.\n\n @see #create_activity.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public long calculateDelay(TimeUnit unit) { float delta = variancePercent / 100f; // e.g., 20 / 100f == 0.2f float lowerBound = 1f - delta; // 0.2f --> 0.8f float upperBound = 1f + delta; // 0.2f --> 1.2f float bound = upperBound - lowerBound; // 1.2f - 0.8f == 0.4f float delayPercent = lowerBound + (random.nextFloat() * bound); // 0.8 + (rnd * 0.4) long callDelayMs = (long) (delayMs * delayPercent); return MILLISECONDS.convert(callDelayMs, unit); } \n### Response:", "ground_truth": "Get the delay that should be used for delaying a response in accordance with configured\nbehavior.", "predict": "This method calculates the delay between two points in time using the specified TimeUnit. It uses a random number generator to determine the lower and upper bounds of the delay, and then calculates the actual delay by multiplying the lower bound by a percentage of the upper bound. The delay is returned as a long in Milliseconds.\n\n @param unit The TimeUnit to use for the delay calculation.\n @return The calculated delay in Milliseconds.\n @see #calculateDelay(TimeUnit)\n @example\n long delay = calculateDelay(TimeUnit.SECONDS); // Calculates the delay in seconds\n long delay = calculateDelay(TimeUnit.DAYS); // Calculates the delay in days\n @end"}, {"ID": 72, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private static boolean isRemovableWhite(AnalyzedTokenReadings token) { return (token.isWhitespace() || StringTools.isNonBreakingWhitespace(token.getToken())) && !token.isLinebreak() && !token.getToken().equals(\"\\t\") && !token.getToken().equals(\"\\u200B\"); }. \n### Response: Removable white space are not linebreaks, tabs, functions or footnotes.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private void createSampleData(String username, String password) { Assert.notNull(documentDao, \"DocumentDao required\"); Assert.hasText(username, \"Username required\"); Authentication auth = new UsernamePasswordAuthenticationToken(username, password); try { // Set the SecurityContextHolder ThreadLocal so any subclasses // automatically know which user is operating SecurityContextHolder.getContext().setAuthentication(auth); // Create the home directory first Directory home = new Directory(username, Directory.ROOT_DIRECTORY); documentDao.create(home); addPermission(documentDao, home, username, LEVEL_GRANT_ADMIN); addPermission(documentDao, home, \"ROLE_USER\", LEVEL_GRANT_READ); createFiles(documentDao, home); // Now create the confidential directory Directory confid = new Directory(\"confidential\", home); documentDao.create(confid); addPermission(documentDao, confid, \"ROLE_USER\", LEVEL_NEGATE_READ); createFiles(documentDao, confid); // Now create the shared directory Directory shared = new Directory(\"shared\", home); documentDao.create(shared); addPermission(documentDao, shared, \"ROLE_USER\", LEVEL_GRANT_READ); addPermission(documentDao, shared, \"ROLE_USER\", LEVEL_GRANT_WRITE); createFiles(documentDao, shared); } finally { // Clear the SecurityContextHolder ThreadLocal so future calls are // guaranteed to be clean SecurityContextHolder.clearContext(); } } \n### Response:", "ground_truth": "Creates a directory for the user, and a series of sub-directories. The root\ndirectory is the parent for the user directory. The sub-directories are\n\"confidential\" and \"shared\". The ROLE_USER will be given read and write access to\n\"shared\".", "predict": "This method is responsible for creating sample data for a user. It checks if the user is authenticated and if so, sets the SecurityContextHolder to know which user is operating. It then creates the home directory, adds permissions to it, creates confidential and shared directories, and finally creates files in each of them. Finally, it clears the SecurityContextHolder."}, {"ID": 73, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def fetch(self): \"\"\" just pull files from PG \"\"\" if not self.local_path: self.make_local_path() fetcher = BookFetcher(self) fetcher.fetch(). \n### Response: just pull files from PG.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private static HttpMethod valueOf(String method) { try { return HttpMethod.valueOf(method); } catch (IllegalArgumentException e) { } return null; } \n### Response:", "ground_truth": "Provides a save way of obtaining the HttpMethod from a String. If the method is\ninvalid, returns null.\n\n@param method the HTTP method to use.\n\n@return the HttpMethod or null if method is invalid.", "predict": "This method returns the HTTP method associated with the given method string. It does not have any comments."}, {"ID": 74, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public PathMatcher excludeRegex(final String regex) { CommonHelper.assertNotBlank(\"regex\", regex); logger.warn(\"Excluding paths with regexes is an advanced feature: be careful when defining your regular expression \" + \"to avoid any security issues!\"); if (!regex.startsWith(\"^\") || !regex.endsWith(\"$\")) { throw new TechnicalException(\"Your regular expression: '\" + regex + \"' must start with a ^ and end with a $ \" + \"to define a full path matching\"); } excludedPatterns.add(Pattern.compile(regex)); return this; }. \n### Response: Any path matching this regex will be excluded.\n\n@param regex the regular expression matching the paths to be excluded\n@return this path matcher.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public DirContextOperations searchForUser(String username) { if (logger.isDebugEnabled()) { logger.debug(\"Searching for user '\" + username + \"', with user search \" + this); } SpringSecurityLdapTemplate template = new SpringSecurityLdapTemplate( contextSource); template.setSearchControls(searchControls); try { return template.searchForSingleEntry(searchBase, searchFilter, new String[] { username }); } catch (IncorrectResultSizeDataAccessException notFound) { if (notFound.getActualSize() == 0) { throw new UsernameNotFoundException(\"User \" + username + \" not found in directory.\"); } // Search should never return multiple results if properly configured, so just // rethrow throw notFound; } } \n### Response:", "ground_truth": "Return the LdapUserDetails containing the user's information\n\n@param username the username to search for.\n\n@return An LdapUserDetails object containing the details of the located user's\ndirectory entry\n\n@throws UsernameNotFoundException if no matching entry is found.", "predict": "This method searches for a user by specifying a username in the directory context. It uses the Spring Security LdapTemplate to perform the search and sets various search controls. If the search is successful, it returns the single entry found in the directory. If not, it throws an IncorrectResultSizeDataAccessException with a message indicating that the user was not found. The method also checks if the search should only return a single result and if not, it rethrow the exception."}, {"ID": 75, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def get_query_trace(self, max_wait=None, query_cl=ConsistencyLevel.LOCAL_ONE): \"\"\" Fetches and returns the query trace of the last response, or `None` if tracing was not enabled. Note that this may raise an exception if there are problems retrieving the trace details from Cassandra. If the trace is not available after `max_wait`, :exc:`cassandra.query.TraceUnavailable` will be raised. If the ResponseFuture is not done (async execution) and you try to retrieve the trace, :exc:`cassandra.query.TraceUnavailable` will be raised. `query_cl` is the consistency level used to poll the trace tables. \"\"\" if self._final_result is _NOT_SET and self._final_exception is None: raise TraceUnavailable( \"Trace information was not available. The ResponseFuture is not done.\") if self._query_traces: return self._get_query_trace(len(self._query_traces) - 1, max_wait, query_cl). \n### Response: Fetches and returns the query trace of the last response, or `None` if tracing was\n        not enabled.\n\n        Note that this may raise an exception if there are problems retrieving the trace\n        details from Cassandra. If the trace is not available after `max_wait`,\n        :exc:`cassandra.query.TraceUnavailable` will be raised.\n\n        If the ResponseFuture is not done (async execution) and you try to retrieve the trace,\n        :exc:`cassandra.query.TraceUnavailable` will be raised.\n\n        `query_cl` is the consistency level used to poll the trace tables..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public String encode(CharSequence rawPassword) { String salt = PREFIX + this.saltGenerator.generateKey() + SUFFIX; return digest(salt, rawPassword); } \n### Response:", "ground_truth": "Encodes the rawPass using a MessageDigest. If a salt is specified it will be merged\nwith the password before encoding.\n\n@param rawPassword The plain text password\n@return Hex string of password digest (or base64 encoded string if\nencodeHashAsBase64 is enabled.", "predict": "This method encodes a password using the `digest` function and returns the resulting string."}, {"ID": 76, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected int countAncestors(ElemTemplateElement elem) { int count = 0; while(null != elem) { count++; elem = elem.getParentElem(); } return count; }. \n### Response: Count the number of ancestors that a ElemTemplateElement has.\n\n@param elem An representation of an element in an XSLT stylesheet.\n@return The number of ancestors of elem (including the element itself)..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public boolean matches(CharSequence rawPassword, String encodedPassword) { String salt = extractSalt(encodedPassword); String rawPasswordEncoded = digest(salt, rawPassword); return PasswordEncoderUtils.equals(encodedPassword.toString(), rawPasswordEncoded); } \n### Response:", "ground_truth": "Takes a previously encoded password and compares it with a rawpassword after mixing\nin the salt and encoding that value\n\n@param rawPassword plain text password\n@param encodedPassword previously encoded password\n@return true or false", "predict": "This method matches a password using the specified encoded password and a salt extracted from the raw password. It then digests the raw passwordEncoded using the PasswordEncoderUtils class. The method returns a boolean indicating whether the passwords match.\n\n@param rawPassword The raw password for the password comparison.\n@param encodedPassword The encoded password for the password comparison.\n@return A boolean indicating whether the passwords match or not.\n\nNote: This method is part of the PasswordEncoderUtils class, which is used to encode passwords. It is important to use this method carefully, as it can be used to verify the integrity of passwords. It is recommended to use this method only for trusted purposes and to never share the raw password or encoded password with anyone."}, {"ID": 77, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function checkIfBuildSettingsNeedUpdatedForLaunchStoryboard(platformConfig, infoPlist) { var hasLaunchStoryboardImages = platformHasLaunchStoryboardImages(platformConfig); var hasLegacyLaunchImages = platformHasLegacyLaunchImages(platformConfig); var currentLaunchStoryboard = infoPlist[UI_LAUNCH_STORYBOARD_NAME]; if (hasLaunchStoryboardImages && currentLaunchStoryboard == CDV_LAUNCH_STORYBOARD_NAME && !hasLegacyLaunchImages) { // don't need legacy launch images if we are using our launch storyboard // so we do need to update the project file events.emit('verbose', 'Need to update build settings because project is using our launch storyboard.'); return true; } else if (hasLegacyLaunchImages && !currentLaunchStoryboard) { // we do need to ensure legacy launch images are used if there's no launch storyboard present // so we do need to update the project file events.emit('verbose', 'Need to update build settings because project is using legacy launch images and no storyboard.'); return true; } events.emit('verbose', 'No need to update build settings for launch storyboard support.'); return false; }. \n### Response: Determines if the project's build settings may need to be updated for launch storyboard support.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private static void performVersionChecks(String minSpringVersion) { if (minSpringVersion == null) { return; } // Check Spring Compatibility String springVersion = SpringVersion.getVersion(); String version = getVersion(); if (disableChecks(springVersion, version)) { return; } logger.info(\"You are running with Spring Security Core \" + version); if (new ComparableVersion(springVersion) .compareTo(new ComparableVersion(minSpringVersion)) < 0) { logger.warn(\"**** You are advised to use Spring \" + minSpringVersion + \" or later with this version. You are running: \" + springVersion); } } \n### Response:", "ground_truth": "Perform version checks with specific min Spring Version\n\n@param minSpringVersion", "predict": "Performs version checks for Spring Security Core compatibility."}, {"ID": 78, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def PDC(self): \"\"\"Partial directed coherence. .. math:: \\mathrm{PDC}_{ij}(f) = \\\\frac{A_{ij}(f)} {\\sqrt{A_{:j}'(f) A_{:j}(f)}} References ---------- L. A. Baccal\u00e1, K. Sameshima. Partial directed coherence: a new concept in neural structure determination. Biol. Cybernetics 84(6): 463-474, 2001. \"\"\" A = self.A() return np.abs(A / np.sqrt(np.sum(A.conj() * A, axis=0, keepdims=True))). \n### Response: Partial directed coherence.\n\n        .. math:: \\mathrm{PDC}_{ij}(f) = \\\\frac{A_{ij}(f)}\n                                               {\\sqrt{A_{:j}'(f) A_{:j}(f)}}\n\n        References\n        ----------\n        L. A. Baccal\u00e1, K. Sameshima. Partial directed coherence: a new concept\n        in neural structure determination. Biol. Cybernetics 84(6): 463-474,\n        2001..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private static boolean disableChecks(String springVersion, String springSecurityVersion) { if (springVersion == null || springVersion.equals(springSecurityVersion)) { return true; } return Boolean.getBoolean(DISABLE_CHECKS); } \n### Response:", "ground_truth": "Disable if springVersion and springSecurityVersion are the same to allow working\nwith Uber Jars.\n\n@param springVersion\n@param springSecurityVersion\n@return", "predict": "Disable checks.\n\n        This method determines whether to disable checks for the specified\n        springVersion and springSecurityVersion. If both strings are null or\n        equal to each other, it returns true. Otherwise, it returns the value\n        of the constant DISABLE_CHECKS, which is a boolean.\n\n        References\n        ----------\n        See constant DISABLE_CHECKS for more information."}, {"ID": 79, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def chi_eff(mass1, mass2, spin1z, spin2z): \"\"\"Returns the effective spin from mass1, mass2, spin1z, and spin2z.\"\"\" return (spin1z * mass1 + spin2z * mass2) / (mass1 + mass2). \n### Response: Returns the effective spin from mass1, mass2, spin1z, and spin2z..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private static String getSpringVersion() { Properties properties = new Properties(); try { properties.load(SpringSecurityCoreVersion.class.getClassLoader().getResourceAsStream(\"META-INF/spring-security.versions\")); } catch (IOException | NullPointerException e) { return null; } return properties.getProperty(\"org.springframework:spring-core\"); } \n### Response:", "ground_truth": "Loads the spring version or null if it cannot be found.\n@return", "predict": "Returns the Spring version as a string.."}, {"ID": 80, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func formatVirtualDiskUUID(uuid string) string { uuidwithNoSpace := strings.Replace(uuid, \" \", \"\", -1) uuidWithNoHypens := strings.Replace(uuidwithNoSpace, \"-\", \"\", -1) return strings.ToLower(uuidWithNoHypens) }. \n### Response: // formatVirtualDiskUUID removes any spaces and hyphens in UUID\n// Example UUID input is 42375390-71f9-43a3-a770-56803bcd7baa and output after format is 4237539071f943a3a77056803bcd7baa.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public AttributeExchangeConfigurer attributeExchange(String identifierPattern) { AttributeExchangeConfigurer attributeExchangeConfigurer = new AttributeExchangeConfigurer( identifierPattern); this.attributeExchangeConfigurers.add(attributeExchangeConfigurer); return attributeExchangeConfigurer; } \n### Response:", "ground_truth": "", "predict": "// This method creates a new AttributeExchangeConfigurer instance and adds it to the list of attributeExchangeConfigurers\n// The identifierPattern parameter is used to specify the pattern for the identifier values in the configuration file\n// This method is typically used in a configuration class to configure the attributes and behaviors for an application."}, {"ID": 81, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function sendSuccessfulLoginEmailMessage(UserInterface $user) { /** @var \\Ekyna\\Bundle\\UserBundle\\Model\\UserInterface $user */ $siteName = $this->settingsManager->getParameter('general.site_name'); $userName = sprintf('%s %s', $user->getFirstName(), $user->getLastName()); $rendered = $this->templating->render( 'EkynaUserBundle:Security:login_success_email.html.twig', [ 'username' => $userName, 'sitename' => $siteName, 'date' => new \\DateTime() ] ); $subject = $this->translator->trans( 'ekyna_user.email.login_success.subject', ['%sitename%' => $siteName] ); $this->sendEmail($rendered, $user->getEmail(), $userName, $subject); }. \n### Response: Sends an email to the user to warn about successful login.\n\n@param UserInterface $user.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public OAuth2ClientConfigurer<HttpSecurity> oauth2Client() throws Exception { OAuth2ClientConfigurer<HttpSecurity> configurer = getOrApply(new OAuth2ClientConfigurer<>()); this.postProcess(configurer); return configurer; } \n### Response:", "ground_truth": "Configures OAuth 2.0 Client support.\n\n@since 5.1\n@see OAuth 2.0 Authorization Framework\n@return the {@link OAuth2ClientConfigurer} for further customizations\n@throws Exception", "predict": "This method is responsible for configuring the OAuth2 client. It uses the `getOrApply()` method to either create a new instance of the `OAuth2ClientConfigurer<HttpSecurity>` class or apply the configuration to an existing one. The `postProcess()` method is then used to apply any additional configuration or validation to the OAuth2 client. Finally, the method returns the configured OAuth2 client.\n\nNote: The `OAuth2ClientConfigurer<HttpSecurity>` class is not provided in the code snippet provided."}, {"ID": 82, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (lx *lexer) skip(pred func(rune) bool) { for { r := lx.next() if pred(r) { continue } lx.backup() lx.ignore() return } }. \n### Response: // skip ignores all input that matches the given predicate..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public OAuth2ResourceServerConfigurer<HttpSecurity> oauth2ResourceServer() throws Exception { OAuth2ResourceServerConfigurer<HttpSecurity> configurer = getOrApply(new OAuth2ResourceServerConfigurer<>(getContext())); this.postProcess(configurer); return configurer; } \n### Response:", "ground_truth": "Configures OAuth 2.0 Resource Server support.\n\n@since 5.1\n@see OAuth 2.0 Authorization Framework\n@return the {@link OAuth2ResourceServerConfigurer} for further customizations\n@throws Exception", "predict": "// This method returns the OAuth2ResourceServerConfigurer<HttpSecurity> object for the given getContext().\n// It uses the getOrApply() method to either create a new instance of the OAuth2ResourceServerConfigurer<HttpSecurity> object or reuse the existing one.\n// It then uses the postProcess() method to apply any configuration changes made by the configurer object.\n// Finally, it returns the configured OAuth2ResourceServerConfigurer<HttpSecurity> object."}, {"ID": 83, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def next(self): \"\"\"Returns next error checking strategy.\"\"\" # Where this link is in the chain: location = self.chain.index(self) if not self.end(): return self.chain[location + 1]. \n### Response: Returns next error checking strategy..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public ChannelSecurityConfigurer<HttpSecurity>.ChannelRequestMatcherRegistry requiresChannel() throws Exception { ApplicationContext context = getContext(); return getOrApply(new ChannelSecurityConfigurer<>(context)) .getRegistry(); } \n### Response:", "ground_truth": "Configures channel security. In order for this configuration to be useful at least\none mapping to a required channel must be provided.\n\nExample Configuration\n\nThe example below demonstrates how to require HTTPs for every request. Only\nrequiring HTTPS for some requests is supported, but not recommended since an\napplication that allows for HTTP introduces many security vulnerabilities. For one\nsuch example, read about Firesheep.\n\n\n\n\n@return the {@link ChannelSecurityConfigurer} for further customizations\n@throws Exception", "predict": "This method returns the `ChannelRequestMatcherRegistry` for the `ChannelSecurityConfigurer<HttpSecurity>` class, which is used to configure security for a web application's channels (e.g., HTTP and HTTPS). The method uses the `getRegistry()` method of the `getOrApply()` method to retrieve the registry for the specified `ChannelSecurityConfigurer<HttpSecurity>` instance. The method throws an exception if the specified `HttpSecurity` instance is not found in the registry."}, {"ID": 84, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def encode(self, o): \"\"\" Return a JSON string representation of a Python data structure. >>> JSONEncoder().encode({\"foo\": [\"bar\", \"baz\"]}) '{\"foo\":[\"bar\", \"baz\"]}' \"\"\" # This doesn't pass the iterator directly to ''.join() because it # sucks at reporting exceptions. It's going to do this internally # anyway because it uses PySequence_Fast or similar. chunks = list(self.iterencode(o)) return ''.join(chunks). \n### Response: Return a JSON string representation of a Python data structure.\n\n        >>> JSONEncoder().encode({\"foo\": [\"bar\", \"baz\"]})\n        '{\"foo\":[\"bar\", \"baz\"]}'.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public boolean compare(final String dn, final String attributeName, final Object value) { final String comparisonFilter = \"(\" + attributeName + \"={0})\"; class LdapCompareCallback implements ContextExecutor { public Object executeWithContext(DirContext ctx) throws NamingException { SearchControls ctls = new SearchControls(); ctls.setReturningAttributes(NO_ATTRS); ctls.setSearchScope(SearchControls.OBJECT_SCOPE); NamingEnumeration<SearchResult> results = ctx.search(dn, comparisonFilter, new Object[] { value }, ctls); Boolean match = Boolean.valueOf(results.hasMore()); LdapUtils.closeEnumeration(results); return match; } } Boolean matches = (Boolean) executeReadOnly(new LdapCompareCallback()); return matches.booleanValue(); } \n### Response:", "ground_truth": "Performs an LDAP compare operation of the value of an attribute for a particular\ndirectory entry.\n\n@param dn the entry who's attribute is to be used\n@param attributeName the attribute who's value we want to compare\n@param value the value to be checked against the directory value\n\n@return true if the supplied value matches that in the directory", "predict": "Compares the specified dn, attributeName, and value in the object.\n\n        >>> Boolean matches = (Boolean) executeReadOnly(new LdapCompareCallback());\n        'False'.\n\n"}, {"ID": 85, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def install(): ''' Install weboob system-wide ''' tmp_weboob_dir = '/tmp/weboob' # Check that the directory does not already exists while (os.path.exists(tmp_weboob_dir)): tmp_weboob_dir += '1' # Clone the repository print 'Fetching sources in temporary dir {}'.format(tmp_weboob_dir) result = cmd_exec('git clone {} {}'.format(WEBOOB_REPO, tmp_weboob_dir)) if (result['error']): print result['stderr'] print 'Weboob installation failed: could not clone repository' exit() print 'Sources fetched, will now process to installation' # Launch the installation result = cmd_exec('cd {} && ./setup.py install'.format(tmp_weboob_dir)) # Remove the weboob directory shutil.rmtree(tmp_weboob_dir) if (result['error']): print result['stderr'] print 'Weboob installation failed: setup failed' exit() print result['stdout'] # Check weboob version weboob_version = get_weboob_version() if (not weboob_version): print 'Weboob installation failed: version not detected' exit() print 'Weboob (version: {}) installation succeeded'.format(weboob_version) update(). \n### Response: Install weboob system-wide.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public DirContextOperations retrieveEntry(final String dn, final String[] attributesToRetrieve) { return (DirContextOperations) executeReadOnly(new ContextExecutor() { public Object executeWithContext(DirContext ctx) throws NamingException { Attributes attrs = ctx.getAttributes(dn, attributesToRetrieve); // Object object = ctx.lookup(LdapUtils.getRelativeName(dn, ctx)); return new DirContextAdapter(attrs, new DistinguishedName(dn), new DistinguishedName(ctx.getNameInNamespace())); } }); } \n### Response:", "ground_truth": "Composes an object from the attributes of the given DN.\n\n@param dn the directory entry which will be read\n@param attributesToRetrieve the named attributes which will be retrieved from the\ndirectory entry.\n\n@return the object created by the mapper", "predict": "Retrieves an entry in the DirContext for the specified dn and array of attributes to retrieve."}, {"ID": 86, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def run_latex(self, cmd_wo_infile, path_outfile): '''Main runner for latex build Should compile the object's Latex template using a list of latex shell commands, along with an output file location. Runs the latex shell command until the process's .aux file remains unchanged. :return: STR template text that is ultimately rendered :param cmd_wo_infile: a list of subprocess commands omitting the input file (example: ['pdflatex']) :param path_outfile: the full path to the desired final output file Must contain the same file extension as files generated by cmd_wo_infile, otherwise the process will fail ''' # Generate path variables text_template = self.get_text_template() path_template_random = random_name_filepath(self.path_template) path_template_dir = os.path.dirname(path_template_random) path_template_random_no_ext = os.path.splitext(path_template_random)[0] path_template_random_aux = path_template_random_no_ext + \".aux\" ext_outfile = os.path.splitext(path_outfile)[-1] path_outfile_initial = \"{}{}\".format( path_template_random_no_ext, ext_outfile) # Handle special case of MS Word if cmd_wo_infile[0] == 'latex2rtf' and len(cmd_wo_infile) == 1: cmd_docx = cmd_wo_infile + ['-o', path_outfile_initial] # Need to run pdf2latex to generate aux file cmd_wo_infile = ['pdflatex'] else: cmd_docx = None try: # Write template variable to a temporary file with open(path_template_random, 'w') as temp_file: temp_file.write(text_template) cmd = cmd_wo_infile + [path_template_random] old_aux, new_aux = random_str_uuid(1), random_str_uuid(2) while old_aux != new_aux: # Run the relevant Latex command until old aux != new aux stdout = check_output_cwd(cmd, path_template_dir) LOGGER.debug('\\n'.join(stdout)) old_aux, new_aux = new_aux, read_file(path_template_random_aux) # Handle special case of MS Word if cmd_docx: cmd_word = cmd_docx + [path_template_random] stdout = check_output_cwd(cmd_word, path_template_dir) LOGGER.debug('\\n'.join(stdout)) shutil.move(path_outfile_initial, path_outfile) LOGGER.info(\"Built {} from {}\".format( path_outfile, self.path_template)) except Exception: LOGGER.exception(\"Failed during latex build\") finally: # Clean up all temporary files associated with the # random file identifier for the process files path_gen = list_filepathes_with_predicate( path_template_dir, path_template_random_no_ext) for path_gen_file in path_gen: os.remove(path_gen_file) return text_template. \n### Response: Main runner for latex build\n\n        Should compile the object's Latex template using a list of latex\n        shell commands, along with an output file location. Runs the latex\n        shell command until the process's .aux file remains unchanged.\n\n        :return: STR template text that is ultimately rendered\n\n        :param cmd_wo_infile: a list of subprocess commands omitting the\n            input file (example: ['pdflatex'])\n        :param path_outfile: the full path to the desired final output file\n            Must contain the same file extension as files generated by\n            cmd_wo_infile, otherwise the process will fail.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public Set<String> searchForSingleAttributeValues(final String base, final String filter, final Object[] params, final String attributeName) { String[] attributeNames = new String[] { attributeName }; Set<Map<String, List<String>>> multipleAttributeValues = searchForMultipleAttributeValues( base, filter, params, attributeNames); Set<String> result = new HashSet<>(); for (Map<String, List<String>> map : multipleAttributeValues) { List<String> values = map.get(attributeName); if (values != null) { result.addAll(values); } } return result; } \n### Response:", "ground_truth": "Performs a search using the supplied filter and returns the union of the values of\nthe named attribute found in all entries matched by the search. Note that one\ndirectory entry may have several values for the attribute. Intended for role\nsearches and similar scenarios.\n\n@param base the DN to search in\n@param filter search filter to use\n@param params the parameters to substitute in the search filter\n@param attributeName the attribute who's values are to be retrieved.\n\n@return the set of String values for the attribute as a union of the values found\nin all the matching entries.", "predict": "Searches for a single attribute value in a list of attributes based on a specified base URL, filter, and params.\n\n:param base: base URL for search\n:param filter: filter string for search\n:param params: parameters for search\n:return: Set of attribute names that match the search criteria\n\n:Note: This method will search for all attributes that match the specified filter and params, and return a Set of those attributes. If a single attribute value matches the search criteria, it will return a single value in the result set. If multiple attribute values match the search criteria, they will be added to the result set as separate values."}, {"ID": 87, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function addTwigFilter($name, callable $filter, array $options = []) { $twigFilter = new \\Twig_SimpleFilter($name, $filter, $options); $this->twig->addFilter($twigFilter); }. \n### Response: Adds a new Twig filter.\n\n@see http://twig.sensiolabs.org/doc/advanced.html#filters Twig documentation\n\n@param string   $name    Name of filter\n@param callable $filter  Filter implementation\n@param array    $options.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public Set<Map<String, List<String>>> searchForMultipleAttributeValues( final String base, final String filter, final Object[] params, final String[] attributeNames) { // Escape the params acording to RFC2254 Object[] encodedParams = new String[params.length]; for (int i = 0; i < params.length; i++) { encodedParams[i] = LdapEncoder.filterEncode(params[i].toString()); } String formattedFilter = MessageFormat.format(filter, encodedParams); logger.debug(\"Using filter: \" + formattedFilter); final HashSet<Map<String, List<String>>> set = new HashSet<Map<String, List<String>>>(); ContextMapper roleMapper = new ContextMapper() { public Object mapFromContext(Object ctx) { DirContextAdapter adapter = (DirContextAdapter) ctx; Map<String, List<String>> record = new HashMap<String, List<String>>(); if (attributeNames == null || attributeNames.length == 0) { try { for (NamingEnumeration ae = adapter.getAttributes().getAll(); ae .hasMore();) { Attribute attr = (Attribute) ae.next(); extractStringAttributeValues(adapter, record, attr.getID()); } } catch (NamingException x) { org.springframework.ldap.support.LdapUtils .convertLdapException(x); } } else { for (String attributeName : attributeNames) { extractStringAttributeValues(adapter, record, attributeName); } } record.put(DN_KEY, Arrays.asList(getAdapterDN(adapter))); set.add(record); return null; } }; SearchControls ctls = new SearchControls(); ctls.setSearchScope(searchControls.getSearchScope()); ctls.setReturningAttributes(attributeNames != null && attributeNames.length > 0 ? attributeNames : null); search(base, formattedFilter, ctls, roleMapper); return set; } \n### Response:", "ground_truth": "Performs a search using the supplied filter and returns the values of each named\nattribute found in all entries matched by the search. Note that one directory entry\nmay have several values for the attribute. Intended for role searches and similar\nscenarios.\n\n@param base the DN to search in\n@param filter search filter to use\n@param params the parameters to substitute in the search filter\n@param attributeNames the attributes' values that are to be retrieved.\n\n@return the set of String values for each attribute found in all the matching\nentries. The attribute name is the key for each set of values. In addition each map\ncontains the DN as a String with the key predefined key {@link #DN_KEY}.", "predict": "This method is part of a class that implements the `SearchControls` interface. It performs a search on the specified base directory and filter, and returns a set of maps representing the search results.\n\nThe method first escapes the parameters according to RFC2254 and formats the filter string using MessageFormat. It then creates a HashSet of maps representing the search results, using the `mapFromContext` method of the `ContextMapper` class.\n\nThe `ContextMapper` class is responsible for mapping the search parameters to the appropriate LDAP attributes. It extracts the required attributes from the LDAP context and maps them to the appropriate values in the search results.\n\nFinally, the method calls the `search` method with the formatted filter string and the `SearchControls` instance, and returns the set of search results.\n\n@see <a href=\"http://docs.spring.io/spring-ldap/docs/current/reference/html/ldap.search.html\">LDAP Search</a>\n@param base   the base directory to search\n@param filter the filter string to use for the search\n@param params the search parameters\n@param attributeNames the names of the attributes to search for\n@return the set of search results\n@see ContextMapper\n@see <a href=\"http://docs.spring.io/spring-ldap/docs/current/reference/html/ldap.search.html\">LDAP Search</a>"}, {"ID": 88, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def drop(self, force=False): \"\"\" Drop the associated schema if it exists \"\"\" if not self.exists: logger.info(\"Schema named `{database}` does not exist. Doing nothing.\".format(database=self.database)) elif (not config['safemode'] or force or user_choice(\"Proceed to delete entire schema `%s`?\" % self.database, default='no') == 'yes'): logger.info(\"Dropping `{database}`.\".format(database=self.database)) try: self.connection.query(\"DROP DATABASE `{database}`\".format(database=self.database)) logger.info(\"Schema `{database}` was dropped successfully.\".format(database=self.database)) except pymysql.OperationalError: raise DataJointError(\"An attempt to drop schema `{database}` \" \"has failed. Check permissions.\".format(database=self.database)). \n### Response: Drop the associated schema if it exists.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static DirContextOperations searchForSingleEntryInternal(DirContext ctx, SearchControls searchControls, String base, String filter, Object[] params) throws NamingException { final DistinguishedName ctxBaseDn = new DistinguishedName( ctx.getNameInNamespace()); final DistinguishedName searchBaseDn = new DistinguishedName(base); final NamingEnumeration<SearchResult> resultsEnum = ctx.search(searchBaseDn, filter, params, buildControls(searchControls)); if (logger.isDebugEnabled()) { logger.debug(\"Searching for entry under DN '\" + ctxBaseDn + \"', base = '\" + searchBaseDn + \"', filter = '\" + filter + \"'\"); } Set<DirContextOperations> results = new HashSet<>(); try { while (resultsEnum.hasMore()) { SearchResult searchResult = resultsEnum.next(); DirContextAdapter dca = (DirContextAdapter) searchResult.getObject(); Assert.notNull(dca, \"No object returned by search, DirContext is not correctly configured\"); if (logger.isDebugEnabled()) { logger.debug(\"Found DN: \" + dca.getDn()); } results.add(dca); } } catch (PartialResultException e) { LdapUtils.closeEnumeration(resultsEnum); logger.info(\"Ignoring PartialResultException\"); } if (results.size() == 0) { throw new IncorrectResultSizeDataAccessException(1, 0); } if (results.size() > 1) { throw new IncorrectResultSizeDataAccessException(1, results.size()); } return results.iterator().next(); } \n### Response:", "ground_truth": "Internal method extracted to avoid code duplication in AD search.", "predict": "SearchForSingleEntryInternal():\nThis method is responsible for searching for a single entry in the DirContext using the specified base and filter. It checks for debug logging and returns the found entry if it is found. If no entry is found, it throws a PartialResultException. If multiple entries are found, it throws an IncorrectResultSizeDataAccessException.\n\nNote: This method is internal and not intended for use by external code. It is only used by the DirContextOperations class."}, {"ID": 89, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def _violinplot(val, shade, bw, ax, **kwargs_shade): \"\"\"Auxiliary function to plot violinplots.\"\"\" density, low_b, up_b = _fast_kde(val, bw=bw) x = np.linspace(low_b, up_b, len(density)) x = np.concatenate([x, x[::-1]]) density = np.concatenate([-density, density[::-1]]) ax.fill_betweenx(x, density, alpha=shade, lw=0, **kwargs_shade). \n### Response: Auxiliary function to plot violinplots..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private static SearchControls buildControls(SearchControls originalControls) { return new SearchControls(originalControls.getSearchScope(), originalControls.getCountLimit(), originalControls.getTimeLimit(), originalControls.getReturningAttributes(), RETURN_OBJECT, originalControls.getDerefLinkFlag()); } \n### Response:", "ground_truth": "We need to make sure the search controls has the return object flag set to true, in\norder for the search to return DirContextAdapter instances.\n@param originalControls\n@return", "predict": "Method to build SearchControls object."}, {"ID": 90, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function subgen (key, ...params) { return random(createSeed([...seed, keygen(key), ...params], seed.length)) }. \n### Response: Creates a subgenerator from the current one\n\n@param {string} key Key of the subgenerator\n@param  {...number} params Parameters affecting the subgenerator's seed.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private void lookupPrimaryKeys(final Map<Serializable, Acl> acls, final Set<Long> findNow, final List<Sid> sids) { Assert.notNull(acls, \"ACLs are required\"); Assert.notEmpty(findNow, \"Items to find now required\"); String sql = computeRepeatingSql(lookupPrimaryKeysWhereClause, findNow.size()); Set<Long> parentsToLookup = jdbcTemplate.query(sql, new PreparedStatementSetter() { public void setValues(PreparedStatement ps) throws SQLException { int i = 0; for (Long toFind : findNow) { i++; ps.setLong(i, toFind); } } }, new ProcessResultSet(acls, sids)); // Lookup the parents, now that our JdbcTemplate has released the database // connection (SEC-547) if (parentsToLookup.size() > 0) { lookupPrimaryKeys(acls, parentsToLookup, sids); } } \n### Response:", "ground_truth": "Locates the primary key IDs specified in \"findNow\", adding AclImpl instances with\nStubAclParents to the \"acls\" Map.\n\n@param acls the AclImpls (with StubAclParents)\n@param findNow Long-based primary keys to retrieve\n@param sids", "predict": "This method lookupPrimaryKeys retrieves the primary keys from the specified maps and sets them as the values in the PreparedStatementSetter object. It then queries the JdbcTemplate to retrieve the parents of the primary keys, which are then used to lookup the primary keys in the specified maps. This method is used in a secure way by releasing the database connection after the JdbcTemplate has finished executing the query.SEC-547 is a security feature that prevents the database connection from being reused after the query has finished executing."}, {"ID": 91, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def define(spec, **opts, &block) name, parent = spec.is_a?(Hash) ? spec.flatten(1) : spec if registry.key?(name) raise ArgumentError, \"#{name.inspect} factory has been already defined\" end builder = if parent extend_builder(name, registry[parent], &block) else relation_name = opts.fetch(:relation) { infer_relation(name) } relation = rom.relations[relation_name] DSL.new(name, relation: relation.struct_namespace(struct_namespace), factories: self, &block).call end registry[name] = builder end. \n### Response: Define a new builder\n\n @example a simple builder\n   MyFactory.define(:user) do |f|\n     f.name \"Jane\"\n     f.email \"jane@doe.org\"\n   end\n\n @example a builder using auto-generated fake values\n   MyFactory.define(:user) do |f|\n     f.name { fake(:name) }\n     f.email { fake(:internet, :email) }\n   end\n\n @example a builder using sequenced values\n   MyFactory.define(:user) do |f|\n     f.sequence(:name) { |n| \"user-#{n}\" }\n   end\n\n @example a builder using values from other attribute(s)\n   MyFactory.define(:user) do |f|\n     f.name \"Jane\"\n     f.email { |name| \"#{name.downcase}@rom-rb.org\" }\n   end\n\n @example a builder with \"belongs-to\" association\n   MyFactory.define(:group) do |f|\n     f.name \"Admins\"\n   end\n\n   MyFactory.define(:user) do |f|\n     f.name \"Jane\"\n     f.association(:group)\n   end\n\n @example a builder with \"has-many\" association\n   MyFactory.define(:group) do |f|\n     f.name \"Admins\"\n     f.association(:users, count: 2)\n   end\n\n   MyFactory.define(:user) do |f|\n     f.sequence(:name) { |n| \"user-#{n}\" }\n   end\n\n @example a builder which extends another builder\n   MyFactory.define(:user) do |f|\n     f.name \"Jane\"\n     f.admin false\n   end\n\n   MyFactory.define(admin: :user) do |f|\n     f.admin true\n   end\n\n @param [Symbol, HashSymbol>] spec Builder identifier, can point to a parent builder too\n @param [Hash] opts Additional options\n @option opts [Symbol] relation An optional relation name (defaults to pluralized builder name)\n\n @return [ROM::Factory::Builder]\n\n @api public.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails buildDetails( HttpServletRequest context) { Collection<String> j2eeUserRoles = getUserRoles(context); Collection<? extends GrantedAuthority> userGas = j2eeUserRoles2GrantedAuthoritiesMapper .getGrantedAuthorities(j2eeUserRoles); if (logger.isDebugEnabled()) { logger.debug(\"J2EE roles [\" + j2eeUserRoles + \"] mapped to Granted Authorities: [\" + userGas + \"]\"); } PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails result = new PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails( context, userGas); return result; } \n### Response:", "ground_truth": "Builds the authentication details object.\n\n@see org.springframework.security.authentication.AuthenticationDetailsSource#buildDetails(Object)", "predict": "Implement a PreAuthenticatedGranted AuthoritiesWebAuthenticationDetails class\n\nThis class represents a user authentication details in a web application. It has a buildDetails method that maps J2EE roles to Granted Authorities.\n\n @param [HttpServletRequest] context The request object\n @return [PreAuthenticatedGranted AuthoritiesWebAuthenticationDetails] The authenticated user details\n @api public."}, {"ID": 92, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public String getName(String languageId, boolean useDefault) { return _commerceTaxMethod.getName(languageId, useDefault); }. \n### Response: Returns the localized name of this commerce tax method in the language, optionally using the default language if no localization exists for the requested language.\n\n@param languageId the ID of the language\n@param useDefault whether to use the default language if no localization exists for the requested language\n@return the localized name of this commerce tax method.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private RootBeanDefinition createEmbeddedServer(Element element, ParserContext parserContext) { Object source = parserContext.extractSource(element); String suffix = element.getAttribute(ATT_ROOT_SUFFIX); if (!StringUtils.hasText(suffix)) { suffix = OPT_DEFAULT_ROOT_SUFFIX; } String port = element.getAttribute(ATT_PORT); if (!StringUtils.hasText(port)) { port = getDefaultPort(); if (logger.isDebugEnabled()) { logger.debug(\"Using default port of \" + port); } } String url = \"ldap://127.0.0.1:\" + port + \"/\" + suffix; BeanDefinitionBuilder contextSource = BeanDefinitionBuilder .rootBeanDefinition(CONTEXT_SOURCE_CLASS); contextSource.addConstructorArgValue(url); contextSource.addPropertyValue(\"userDn\", \"uid=admin,ou=system\"); contextSource.addPropertyValue(\"password\", \"secret\"); RootBeanDefinition apacheContainer = new RootBeanDefinition( \"org.springframework.security.ldap.server.ApacheDSContainer\", null, null); apacheContainer.setSource(source); apacheContainer.getConstructorArgumentValues().addGenericArgumentValue(suffix); String ldifs = element.getAttribute(ATT_LDIF_FILE); if (!StringUtils.hasText(ldifs)) { ldifs = OPT_DEFAULT_LDIF_FILE; } apacheContainer.getConstructorArgumentValues().addGenericArgumentValue(ldifs); apacheContainer.getPropertyValues().addPropertyValue(\"port\", port); logger.info(\"Embedded LDAP server bean definition created for URL: \" + url); if (parserContext.getRegistry() .containsBeanDefinition(BeanIds.EMBEDDED_APACHE_DS)) { parserContext.getReaderContext().error( \"Only one embedded server bean is allowed per application context\", element); } parserContext.getRegistry().registerBeanDefinition(BeanIds.EMBEDDED_APACHE_DS, apacheContainer); return (RootBeanDefinition) contextSource.getBeanDefinition(); } \n### Response:", "ground_truth": "Will be called if no url attribute is supplied.\n\nRegisters beans to create an embedded apache directory server.\n\n@return the BeanDefinition for the ContextSource for the embedded server.\n\n@see ApacheDSContainer", "predict": "This method creates an embedded LDAP server bean definition for the specified URL, using the Spring Security ApacheDS container. It first extracts the source element, which contains the LDAP URL and userDN. It then sets the default port if none is specified. It then creates a new RootBeanDefinition with the specified name and constructor arguments. Finally, it registers the bean definition with the application context and returns it. This method is used in the application context to create the embedded LDAP server bean."}, {"ID": 93, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void setSslManualOverride(com.google.api.ads.admanager.axis.v201805.SslManualOverride sslManualOverride) { this.sslManualOverride = sslManualOverride; }. \n### Response: Sets the sslManualOverride value for this BaseFlashCreative.\n\n@param sslManualOverride   * The manual override for the SSL compatibility of this creative.\n\nThis attribute is optional and defaults to\n{@link SslManualOverride#NO_OVERRIDE}..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private void createServletApiFilter(BeanReference authenticationManager) { final String ATT_SERVLET_API_PROVISION = \"servlet-api-provision\"; final String DEF_SERVLET_API_PROVISION = \"true\"; String provideServletApi = httpElt.getAttribute(ATT_SERVLET_API_PROVISION); if (!StringUtils.hasText(provideServletApi)) { provideServletApi = DEF_SERVLET_API_PROVISION; } if (\"true\".equals(provideServletApi)) { servApiFilter = GrantedAuthorityDefaultsParserUtils.registerWithDefaultRolePrefix(pc, SecurityContextHolderAwareRequestFilterBeanFactory.class); servApiFilter.getPropertyValues().add(\"authenticationManager\", authenticationManager); } } \n### Response:", "ground_truth": "Adds the servlet-api integration filter if required", "predict": "Creates a Servlet API filter and sets its provideServletApi attribute to the value of ATT_SERVLET_API_PROVISION. If the attribute is not present, it sets the value of DEF_SERVLET_API_PROVISION. The servApiFilter is then registered with the default role prefix using Granted AuthorityDefaultsParserUtils."}, {"ID": 94, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public RemoveAlbumsForCurrentUserRequest.Builder removeAlbumsForCurrentUser(String... ids) { return new RemoveAlbumsForCurrentUserRequest.Builder(accessToken) .setDefaults(httpManager, scheme, host, port) .ids(concat(ids, ',')); }. \n### Response: Remove one or more albums from the current users \"Your Music\" library.\n\n@param ids A list of the Spotify IDs. Maximum: 50 IDs.\n@return A {@link RemoveAlbumsForCurrentUserRequest.Builder}.\n@see Spotify: URLs &amp; IDs.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private void createJaasApiFilter() { final String ATT_JAAS_API_PROVISION = \"jaas-api-provision\"; final String DEF_JAAS_API_PROVISION = \"false\"; String provideJaasApi = httpElt.getAttribute(ATT_JAAS_API_PROVISION); if (!StringUtils.hasText(provideJaasApi)) { provideJaasApi = DEF_JAAS_API_PROVISION; } if (\"true\".equals(provideJaasApi)) { jaasApiFilter = new RootBeanDefinition(JaasApiIntegrationFilter.class); } } \n### Response:", "ground_truth": "Adds the jaas-api integration filter if required", "predict": "Create a filter that integrates with the Jaas API for Spotify.\n\n@param provideJaasApi A string representing theJaasApiProvision attribute of the httpElt object. If this attribute is not set or is set to \"false\", the filter will not integrate with theJaasAPI.\n@return A newRootBeanDefinition object that represents theJaasApiIntegrationFilter class.\n@see Spotify: Jaas API integration."}, {"ID": 95, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function setMessages($var) { $arr = GPBUtil::checkRepeatedField($var, \\Google\\Protobuf\\Internal\\GPBType::MESSAGE, \\Google\\Cloud\\PubSub\\V1\\PubsubMessage::class); $this->messages = $arr; return $this; }. \n### Response: The messages to publish.\n\nGenerated from protobuf field repeated .google.pubsub.v1.PubsubMessage messages = 2;\n@param \\Google\\Cloud\\PubSub\\V1\\PubsubMessage[]|\\Google\\Protobuf\\Internal\\RepeatedField $var\n@return $this.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private static TypeResolverBuilder<? extends TypeResolverBuilder> createWhitelistedDefaultTyping() { TypeResolverBuilder<? extends TypeResolverBuilder> result = new WhitelistTypeResolverBuilder(ObjectMapper.DefaultTyping.NON_FINAL); result = result.init(JsonTypeInfo.Id.CLASS, null); result = result.inclusion(JsonTypeInfo.As.PROPERTY); return result; } \n### Response:", "ground_truth": "Creates a TypeResolverBuilder that performs whitelisting.\n@return a TypeResolverBuilder that performs whitelisting.", "predict": "This method creates a whitelist type resolver for ObjectMapper, which allows only certain classes to be resolved as fields or properties.\n\n@param ObjectMapper.DefaultTyping.NON_FINAL $var\n@return $result.\n\n"}, {"ID": 96, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def long_press_keycode(self, keycode, metastate=None): \"\"\"Sends a long press of keycode to the device. Android only. See `press keycode` for more details. \"\"\" driver = self._current_application() driver.long_press_keycode(int(keycode), metastate). \n### Response: Sends a long press of keycode to the device.\n\n        Android only.\n\n        See `press keycode` for more details..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private void insertSpringSecurityFilterChain(ServletContext servletContext) { String filterName = DEFAULT_FILTER_NAME; DelegatingFilterProxy springSecurityFilterChain = new DelegatingFilterProxy( filterName); String contextAttribute = getWebApplicationContextAttribute(); if (contextAttribute != null) { springSecurityFilterChain.setContextAttribute(contextAttribute); } registerFilter(servletContext, true, filterName, springSecurityFilterChain); } \n### Response:", "ground_truth": "Registers the springSecurityFilterChain\n@param servletContext the {@link ServletContext}", "predict": "Inserts the specified Spring Security filter into the web application.\n\n        This method is called by the web application's container to register the Spring Security filter.\n\n        The filterName, contextAttribute, and registerFilter() methods are used to register the filter.\n\n        See the Spring Security documentation for more information on how to use the filter.."}, {"ID": 97, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function performTransition(WorkflowTransition $transition) { // first make sure that the transition is valid to execute! $action = $this->CurrentAction(); $allTransitions = $action->BaseAction()->Transitions(); $valid = $allTransitions->find('ID', $transition->ID); if (!$valid) { throw new Exception( sprintf(_t( 'WorkflowInstance.WORKFLOW_TRANSITION_EXCEPTION', 'Invalid transition state for action #%s' ), $action->ID) ); } $action->actionComplete($transition); $definition = DataObject::get_by_id(WorkflowAction::class, $transition->NextActionID); $action = $definition->getInstanceForWorkflow(); $action->WorkflowID = $this->ID; $action->write(); $this->CurrentActionID = $action->ID; $this->write(); $this->components = array(); // manually clear the has_one cache $action->actionStart($transition); $transition->extend('onTransition'); $this->execute(); }. \n### Response: Transitions a workflow to the next step defined by the given transition.\n\nAfter transitioning, the action is 'executed', and next steps\ndetermined.\n\n@param WorkflowTransition $transition.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public PersistentRememberMeToken getTokenForSeries(String seriesId) { try { return getJdbcTemplate().queryForObject(tokensBySeriesSql, new RowMapper<PersistentRememberMeToken>() { public PersistentRememberMeToken mapRow(ResultSet rs, int rowNum) throws SQLException { return new PersistentRememberMeToken(rs.getString(1), rs .getString(2), rs.getString(3), rs.getTimestamp(4)); } }, seriesId); } catch (EmptyResultDataAccessException zeroResults) { if (logger.isDebugEnabled()) { logger.debug(\"Querying token for series '\" + seriesId + \"' returned no results.\", zeroResults); } } catch (IncorrectResultSizeDataAccessException moreThanOne) { logger.error(\"Querying token for series '\" + seriesId + \"' returned more than one value. Series\" + \" should be unique\"); } catch (DataAccessException e) { logger.error(\"Failed to load token for series \" + seriesId, e); } return null; } \n### Response:", "ground_truth": "Loads the token data for the supplied series identifier.\n\nIf an error occurs, it will be reported and null will be returned (since the result\nshould just be a failed persistent login).\n\n@param seriesId\n@return the token matching the series, or null if no match found or an exception\noccurred.", "predict": "Returns the token for the specified series.\n\nThis method uses the JdbcTemplate to execute a SQL query to retrieve the token for the specified series. It first checks if there are any results returned by the query, and if not, it logs a debug message. If there are results, it checks for any errors and logs additional debug messages. If the query returns more than one value, it logs an error message. Finally, it returns null if the query fails to retrieve the token.\n\n@param String seriesId."}, {"ID": 98, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def get_renderers(self): \"\"\" Instantiates and returns the list of renderers that this view can use. \"\"\" try: source = self.get_object() except (ImproperlyConfigured, APIException): self.renderer_classes = [RENDERER_MAPPING[i] for i in self.__class__.renderers] return [RENDERER_MAPPING[i]() for i in self.__class__.renderers] else: self.renderer_classes = [RENDERER_MAPPING[i] for i in source.__class__.renderers] return [RENDERER_MAPPING[i]() for i in source.__class__.renderers]. \n### Response: Instantiates and returns the list of renderers that this view can use..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public List<GrantedAuthority> getGrantedAuthorities(Collection<String> attributes) { List<GrantedAuthority> result = new ArrayList<>(attributes.size()); for (String attribute : attributes) { result.add(getGrantedAuthority(attribute)); } return result; } \n### Response:", "ground_truth": "Map the given list of string attributes one-to-one to Spring Security\nGrantedAuthorities.", "predict": "This method retrieves a list of granted authorities for a given set of attributes. It does this by iterating over the attributes and adding each attribute to a result list. The method returns the result list."}, {"ID": 99, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def user_info(self, kv): \"\"\"Sets user_info dict entry through a tuple.\"\"\" key, value = kv self.__user_info[key] = value. \n### Response: Sets user_info dict entry through a tuple..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static Cipher newCipher(String algorithm) { try { return Cipher.getInstance(algorithm); } catch (NoSuchAlgorithmException e) { throw new IllegalArgumentException(\"Not a valid encryption algorithm\", e); } catch (NoSuchPaddingException e) { throw new IllegalStateException(\"Should not happen\", e); } } \n### Response:", "ground_truth": "Constructs a new Cipher.", "predict": "Provides a method for creating a new Cipher object using a specified algorithm. It uses a try-catch block to handle any exceptions that may occur, such as not being able to find a valid algorithm or not having the appropriate padding specified."}, {"ID": 100, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected function createSwooleServer(array $config) { return new SwooleServer( $this->serverSocket->getHost(), $this->serverSocket->getPort(), $this->parseServerMode($config), $this->serverSocket->getSocketType() ); }. \n### Response: Create the Swoole server instance.\n\n@param array $config\n\n@return \\Swoole\\Server.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public void afterPropertiesSet() { try { super.afterPropertiesSet(); } catch (ServletException e) { // convert to RuntimeException for passivity on afterPropertiesSet signature throw new RuntimeException(e); } Assert.notNull(authenticationManager, \"An AuthenticationManager must be set\"); } \n### Response:", "ground_truth": "Check whether all required properties have been set.", "predict": "Implement the afterPropertiesSet method.\n\n@Override\npublic void afterPropertiesSet()\n{\ntry\n{\nsuper.afterPropertiesSet();\n}\ncatch (ServletException e)\n{\n// convert to RuntimeException for passivity on afterPropertiesSet signature\nthrow new RuntimeException(e);\n}\n}\n\n Assert.notNull(authenticationManager, \"An AuthenticationManager must be set\");"}, {"ID": 101, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def is_dependant(package, project_name): \"\"\"Determine whether `package` is a dependant of `project_name`.\"\"\" for requirement in package.requires(): # perform case-insensitive matching if requirement.project_name.lower() == project_name.lower(): return True return False. \n### Response: Determine whether `package` is a dependant of `project_name`..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException { if (logger.isDebugEnabled()) { logger.debug(\"Checking secure context token: \" + SecurityContextHolder.getContext().getAuthentication()); } if (requiresAuthentication((HttpServletRequest) request)) { doAuthenticate((HttpServletRequest) request, (HttpServletResponse) response); } chain.doFilter(request, response); } \n### Response:", "ground_truth": "Try to authenticate a pre-authenticated user with Spring Security if the user has\nnot yet been authenticated.", "predict": "This method is responsible for handling HTTP requests and responses within a web application. It is used to perform security checks and authenticate requests.\n\nThe method first checks if a secure context token is available by logging a debug message and checking the Authentication context. If a secure context token is required, it then calls the `doAuthenticate` method to authenticate the request and response.\n\nThe `chain.doFilter` method is called for each request and response in the application. This method allows the method to perform any additional processing required for the request and response, such as parsing request and response bodies, or handling cookies and other web application features.\n\nOverall, this method is responsible for performing security checks and authentication for the web application, making it easier to protect sensitive information and ensure the security of the web application."}, {"ID": 102, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def counter_multi(self, kvs, initial=None, delta=1, ttl=0): \"\"\"Perform counter operations on multiple items :param kvs: Keys to operate on. See below for more options :param initial: Initial value to use for all keys. :param delta: Delta value for all keys. :param ttl: Expiration value to use for all keys :return: A :class:`~.MultiResult` containing :class:`~.ValueResult` values The `kvs` can be a: - Iterable of keys .. code-block:: python cb.counter_multi((k1, k2)) - A dictionary mapping a key to its delta .. code-block:: python cb.counter_multi({ k1: 42, k2: 99 }) - A dictionary mapping a key to its additional options .. code-block:: python cb.counter_multi({ k1: {'delta': 42, 'initial': 9, 'ttl': 300}, k2: {'delta': 99, 'initial': 4, 'ttl': 700} }) When using a dictionary, you can override settings for each key on a per-key basis (for example, the initial value). Global settings (global here means something passed as a parameter to the method) will take effect for those values which do not have a given option specified. \"\"\" return _Base.counter_multi(self, kvs, initial=initial, delta=delta, ttl=ttl). \n### Response: Perform counter operations on multiple items\n\n        :param kvs: Keys to operate on. See below for more options\n        :param initial: Initial value to use for all keys.\n        :param delta: Delta value for all keys.\n        :param ttl: Expiration value to use for all keys\n\n        :return: A :class:`~.MultiResult` containing :class:`~.ValueResult`\n            values\n\n\n        The `kvs` can be a:\n\n        - Iterable of keys\n            .. code-block:: python\n\n                cb.counter_multi((k1, k2))\n\n        - A dictionary mapping a key to its delta\n            .. code-block:: python\n\n                cb.counter_multi({\n                    k1: 42,\n                    k2: 99\n                })\n\n        - A dictionary mapping a key to its additional options\n            .. code-block:: python\n\n                cb.counter_multi({\n                    k1: {'delta': 42, 'initial': 9, 'ttl': 300},\n                    k2: {'delta': 99, 'initial': 4, 'ttl': 700}\n                })\n\n\n        When using a dictionary, you can override settings for each key on\n        a per-key basis (for example, the initial value). Global settings\n        (global here means something passed as a parameter to the method)\n        will take effect for those values which do not have a given option\n        specified..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected boolean principalChanged(HttpServletRequest request, Authentication currentAuthentication) { Object principal = getPreAuthenticatedPrincipal(request); if ((principal instanceof String) && currentAuthentication.getName().equals(principal)) { return false; } if (principal != null && principal.equals(currentAuthentication.getPrincipal())) { return false; } if (logger.isDebugEnabled()) { logger.debug(\"Pre-authenticated principal has changed to \" + principal + \" and will be reauthenticated\"); } return true; } \n### Response:", "ground_truth": "Determines if the current principal has changed. The default implementation tries\n\n\nIf the {@link #getPreAuthenticatedPrincipal(HttpServletRequest)} is a String, the {@link Authentication#getName()} is compared against the pre authenticated principal\nOtherwise, the {@link #getPreAuthenticatedPrincipal(HttpServletRequest)} is compared against the {@link Authentication#getPrincipal()}\n\n\nSubclasses can override this method to determine when a principal has changed.\n\n\n@param request\n@param currentAuthentication\n@return true if the principal has changed, else false", "predict": "Implement a method named `principalChanged` in a Java class that takes an `HttpServletRequest` object and an `Authentication` object as parameters.\n\nThe method should return `true` if the pre-authenticated principal has changed, and `false` otherwise.\n\nThe method should check if the current principal and the pre-authenticated principal are the same. If they are, the method should return `false` to indicate that the principal has changed. If they are not the same, the method should check if the current principal is null or not. If it is, the method should return `false` to indicate that the principal has changed. If the principal is not null, the method should check if the principal is the same as the pre-authenticated principal. If they are, the method should return `false` to indicate that the principal has changed. If the principal is not the same as the pre-authenticated principal, the method should check if the logger is enabled and if it is, it should log a message indicating that the principal has changed and will be reauthenticated. Finally, the method should return `true` to indicate that the principal has not changed."}, {"ID": 103, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def setsockopt name, value, length = nil if 1 == @option_lookup[name] length = 8 pointer = LibC.malloc length pointer.write_long_long value elsif 0 == @option_lookup[name] length = 4 pointer = LibC.malloc length pointer.write_int value elsif 2 == @option_lookup[name] length ||= value.size # note: not checking errno for failed memory allocations :( pointer = LibC.malloc length pointer.write_string value end rc = LibXS.xs_setsockopt @socket, name, pointer, length LibC.free(pointer) unless pointer.nil? || pointer.null? rc end. \n### Response: Allocates a socket of type +type+ for sending and receiving data.\n\n To avoid rescuing exceptions, use the factory method #create for\n all socket creation.\n\n By default, this class uses XS::Message for manual\n memory management. For automatic garbage collection of received messages,\n it is possible to override the :receiver_class to use XS::ManagedMessage.\n\n @example Socket creation\n   sock = Socket.new(Context.new, XS::REQ, :receiver_class => XS::ManagedMessage)\n\n Advanced users may want to replace the receiver class with their\n own custom class. The custom class must conform to the same public API\n as XS::Message.\n\n Creation of a new Socket object can raise an exception. This occurs when the\n +context_ptr+ is null or when the allocation of the Crossroads socket within the\n context fails.\n\n @example\n   begin\n     socket = Socket.new(context.pointer, XS::REQ)\n   rescue ContextError => e\n     # error handling\n   end\n\n @param pointer\n @param [Constant] type\n   One of @XS::REQ@, @XS::REP@, @XS::PUB@, @XS::SUB@, @XS::PAIR@,\n          @XS::PULL@, @XS::PUSH@, @XS::XREQ@, @XS::REP@,\n          @XS::DEALER@ or @XS::ROUTER@\n @param [Hash] options\n\n @return [Socket] when successful\n @return nil when unsuccessful\n Set the queue options on this socket\n\n @param [Constant] name numeric values\n   One of @XS::AFFINITY@, @XS::RATE@, @XS::RECOVERY_IVL@,\n          @XS::LINGER@, @XS::RECONNECT_IVL@, @XS::BACKLOG@,\n          @XS::RECONNECT_IVL_MAX@, @XS::MAXMSGSIZE@, @XS::SNDHWM@,\n          @XS::RCVHWM@, @XS::MULTICAST_HOPS@, @XS::RCVTIMEO@,\n          @XS::SNDTIMEO@, @XS::IPV4ONLY@, @XS::KEEPALIVE@,\n          @XS::SUBSCRIBE@, @XS::UNSUBSCRIBE@, @XS::IDENTITY@,\n          @XS::SNDBUF@, @XS::RCVBUF@\n @param [Constant] name string values\n   One of @XS::IDENTITY@, @XS::SUBSCRIBE@ or @XS::UNSUBSCRIBE@\n @param value\n\n @return 0 when the operation completed successfully\n @return -1 when this operation fails\n\n With a -1 return code, the user must check XS.errno to determine the\n cause.\n\n @example\n   rc = socket.setsockopt(XS::LINGER, 1_000)\n   XS::Util.resultcode_ok?(rc) ? puts(\"succeeded\") : puts(\"failed\").\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private void doAuthenticate(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException { Authentication authResult; Object principal = getPreAuthenticatedPrincipal(request); Object credentials = getPreAuthenticatedCredentials(request); if (principal == null) { if (logger.isDebugEnabled()) { logger.debug(\"No pre-authenticated principal found in request\"); } return; } if (logger.isDebugEnabled()) { logger.debug(\"preAuthenticatedPrincipal = \" + principal + \", trying to authenticate\"); } try { PreAuthenticatedAuthenticationToken authRequest = new PreAuthenticatedAuthenticationToken( principal, credentials); authRequest.setDetails(authenticationDetailsSource.buildDetails(request)); authResult = authenticationManager.authenticate(authRequest); successfulAuthentication(request, response, authResult); } catch (AuthenticationException failed) { unsuccessfulAuthentication(request, response, failed); if (!continueFilterChainOnUnsuccessfulAuthentication) { throw failed; } } } \n### Response:", "ground_truth": "Do the actual authentication for a pre-authenticated user.", "predict": "Allocates a new socket for authentication purposes.\n\n @param request\n @param response\n\n @return [Object] when successful\n @return null when unsuccessful\n Allocates a new authentication socket\n\n @param principal\n @param credentials\n\n @return [Object] when successful\n @return null when unsuccessful\n Retrieves the pre-authenticated principal and credentials from the request.\n\n @param [Constant] type\n   One of @XS::REQ@, @XS::REP@, @XS::PUB@, @XS::SUB@, @XS::PAIR@,\n          @XS::PULL@, @XS::PUSH@, @XS::XREQ@, @XS::REP@,\n          @XS::DEALER@ or @XS::ROUTER@\n\n @return [Socket] when successful\n @return nil when unsuccessful\n Allocates a new socket for authentication\n\n @param [Hash] options\n\n @return [Socket] when successful\n @return nil when unsuccessful\n Set the authentication options on this socket\n\n @param [Constant] name numeric values\n   One of @XS::AFFINITY@, @XS::RATE@, @XS::RECOVERY_IVL@,\n          @XS::LINGER@, @XS::RECONNECT_IVL@, @XS::BACKLOG@,\n          @XS::RECONNECT_IVL_MAX@, @XS::MAXMSGSIZE@, @XS::SNDHWM@,\n          @XS::RCVHWM@, @XS::MULTICAST_HOPS@, @XS::RCVTIMEO@,\n          @XS::SNDTIMEO@, @XS::IPV4ONLY@, @XS::keepALIVE@,\n          @XS::SUBSCRIBE@, @XS::UNSUBSCRIBE@, @XS::IDENTITY@,\n          @XS::SNDBUF@, @XS::RCVBUF@\n @param [Constant] name string values\n   One of @XS::IDENTITY@, @XS::SUBSCRIBE@ or @XS::UNSUBSCRIBE@\n @param value\n\n @return 0 when the operation completed successfully\n @return -1 when this operation failed\n With a -1 return code, the user must check XS.errno to determine the cause.\n\n @example\n   rc = socket.setsockopt(XS::LINGER, 1_000)\n   XS::Util.resultcode_ok?(rc)? puts(\"succeeded\") : puts(\"failed\").\n\n @example\n   authRequest = PreAuthenticatedAuthenticationToken.new( principal, credentials)\n   authResult = authenticationManager.authenticate(authRequest)\n    successfulAuthentication(request, response, authResult)\n   if (!continueFilterChainOnUnsuccessfulAuthentication) { throw failed }"}, {"ID": 104, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def log_method(log, level=logging.DEBUG): \"\"\"Logs a method and its arguments when entered.\"\"\" def decorator(func): func_name = func.__name__ @six.wraps(func) def wrapper(self, *args, **kwargs): if log.isEnabledFor(level): pretty_args = [] if args: pretty_args.extend(str(a) for a in args) if kwargs: pretty_args.extend( \"%s=%s\" % (k, v) for k, v in six.iteritems(kwargs)) log.log(level, \"%s(%s)\", func_name, \", \".join(pretty_args)) return func(self, *args, **kwargs) return wrapper return decorator. \n### Response: Logs a method and its arguments when entered..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private void checkContentLength(long contentLengthToWrite) { this.contentWritten += contentLengthToWrite; boolean isBodyFullyWritten = this.contentLength > 0 && this.contentWritten >= this.contentLength; int bufferSize = getBufferSize(); boolean requiresFlush = bufferSize > 0 && this.contentWritten >= bufferSize; if (isBodyFullyWritten || requiresFlush) { doOnResponseCommitted(); } } \n### Response:", "ground_truth": "Adds the contentLengthToWrite to the total contentWritten size and checks to see if\nthe response should be written.\n\n@param contentLengthToWrite the size of the content that is about to be written.", "predict": "Checks if the content length to write is greater than 0 and if the content has been fully written to the response body. If either condition is true, calls doOnResponseCommitted()."}, {"ID": 105, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function onNotify(NotificationEvent $event) { if (true === ($this->getSession() instanceof Session)) { $this->getSession()->getFlashBag()->add($event->getNotification()->getType(), $event->getNotification()->getContent()); } return $event; }. \n### Response: On notify.\n\n@param NotificationEvent $event The event.\n@return NotificationEvent Returns the event..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public Set<GrantedAuthority> mapAuthorities( Collection<? extends GrantedAuthority> authorities) { HashSet<GrantedAuthority> mapped = new HashSet<>( authorities.size()); for (GrantedAuthority authority : authorities) { mapped.add(mapAuthority(authority.getAuthority())); } if (defaultAuthority != null) { mapped.add(defaultAuthority); } return mapped; } \n### Response:", "ground_truth": "Creates a mapping of the supplied authorities based on the case-conversion and\nprefix settings. The mapping will be one-to-one unless duplicates are produced\nduring the conversion. If a default authority has been set, this will also be\nassigned to each mapping.\n\n@param authorities the original authorities\n\n@return the converted set of authorities", "predict": "Map authorities.\n\n@param Collection<? extends GrantedAuthority> authorities The authorities.\n@return Set<GrantedAuthority> Returns a set of mapped authorities.."}, {"ID": 106, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private function unDoubling() { if ($this->search(array('kk', 'dd', 'tt')) !== false) { $this->word = Utf8::substr($this->word, 0, -1); } }. \n### Response: Define undoubling the ending as removing the last letter if the word ends kk, dd or tt..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public T loginProcessingUrl(String loginProcessingUrl) { this.loginProcessingUrl = loginProcessingUrl; authFilter .setRequiresAuthenticationRequestMatcher(createLoginProcessingUrlMatcher(loginProcessingUrl)); return getSelf(); } \n### Response:", "ground_truth": "Specifies the URL to validate the credentials.\n\n@param loginProcessingUrl the URL to validate username and password\n@return the {@link FormLoginConfigurer} for additional customization", "predict": "This method loginProcessingUrl(String loginProcessingUrl) is responsible for setting the loginProcessingUrl property of the T object and setting the authFilter RequiresAuthenticationRequestMatcher to createLoginProcessingUrlMatcher(loginProcessingUrl). It then returns the T object self."}, {"ID": 107, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def _scale_coords(self, x, y, extent, xo, yo): \"\"\"Convert from tile coordinates to \"pixels\" - i.e. text characters.\"\"\" return xo + (x * self._size * 2 / extent), yo + ((extent - y) * self._size / extent). \n### Response: Convert from tile coordinates to \"pixels\" - i.e. text characters..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected final void updateAuthenticationDefaults() { if (loginProcessingUrl == null) { loginProcessingUrl(loginPage); } if (failureHandler == null) { failureUrl(loginPage + \"?error\"); } final LogoutConfigurer<B> logoutConfigurer = getBuilder().getConfigurer( LogoutConfigurer.class); if (logoutConfigurer != null && !logoutConfigurer.isCustomLogoutSuccess()) { logoutConfigurer.logoutSuccessUrl(loginPage + \"?logout\"); } } \n### Response:", "ground_truth": "Updates the default values for authentication.\n\n@throws Exception", "predict": "Update authentication defaults.\n\n protected final void updateAuthenticationDefaults() {"}, {"ID": 108, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function convertTime(string $unit, float $value) { if ($unit === 'seconds') { return $value; } if ($unit === 'minutes') { return $value * (60); } if ($unit === 'hours') { return $value * (3600); } if ($unit === 'days') { return $value * (86400); } if ($unit === 'weeks') { return $value * (7 * 86400); } if ($unit === 'months') { return $value * (30 * 86400); } if ($unit === 'years') { return $value * (365 * 86400); } throw new \\Exception('Wrong frequencies'); }. \n### Response: Converts to seconds.\n\n@param string $unit\n@param float  $value\n\n@return float.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected final void updateAccessDefaults(B http) { if (permitAll) { PermitAllSupport.permitAll(http, loginPage, loginProcessingUrl, failureUrl); } } \n### Response:", "ground_truth": "Updates the default values for access.", "predict": "Adjusts access defaults based on permitAll.\n\n@param B http\n\n@return void."}, {"ID": 109, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (user *User) WhitelistUser(other *User) error { if other == nil { return errors.New(\"Other user should be a vaid user\") } return Db().Create(&Whitelist{From: user.ID(), To: other.ID()}) }. \n### Response: // WhitelistUser add other user to the user whitelist.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected String mapPassword(Object passwordValue) { if (!(passwordValue instanceof String)) { // Assume it's binary passwordValue = new String((byte[]) passwordValue); } return (String) passwordValue; } \n### Response:", "ground_truth": "Extension point to allow customized creation of the user's password from the\nattribute stored in the directory.\n\n@param passwordValue the value of the password attribute\n@return a String representation of the password.", "predict": "// MapPassword convert the password value to a string."}, {"ID": 110, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public DeleteApnsVoipChannelResult deleteApnsVoipChannel(DeleteApnsVoipChannelRequest request) { request = beforeClientExecution(request); return executeDeleteApnsVoipChannel(request); }. \n### Response: Delete an APNS VoIP channel\n\n@param deleteApnsVoipChannelRequest\n@return Result of the DeleteApnsVoipChannel operation returned by the service.\n@throws BadRequestException\n400 response\n@throws InternalServerErrorException\n500 response\n@throws ForbiddenException\n403 response\n@throws NotFoundException\n404 response\n@throws MethodNotAllowedException\n405 response\n@throws TooManyRequestsException\n429 response\n@sample AmazonPinpoint.DeleteApnsVoipChannel\n@see AWS\nAPI Documentation.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected String extractRememberMeCookie(HttpServletRequest request) { Cookie[] cookies = request.getCookies(); if ((cookies == null) || (cookies.length == 0)) { return null; } for (Cookie cookie : cookies) { if (cookieName.equals(cookie.getName())) { return cookie.getValue(); } } return null; } \n### Response:", "ground_truth": "Locates the Spring Security remember me cookie in the request and returns its\nvalue. The cookie is searched for by name and also by matching the context path to\nthe cookie path.\n\n@param request the submitted request which is to be authenticated\n@return the cookie value (if present), null otherwise.", "predict": "Extracts the value of a remembered cookie from the HttpServletRequest.\n\n@param request\n@return The value of a remembered cookie, or null if the cookie is not found.\n@throws ServletException\n400 response\n@throws IOException\n500 response\n@sample AmazonPinpoint.extractRememberMeCookie\n@see AWS\nAPI Documentation."}, {"ID": 111, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected function addRedirectUrlField() { $previous = URL::previous(); if (!$previous || $previous == URL::current()) { return; } if (Str::contains($previous, url($this->getResource()))) { $this->addHiddenField((new Form\\Field\\Hidden(static::PREVIOUS_URL_KEY))->value($previous)); } }. \n### Response: Add field for store redirect url after update or store.\n\n@return void.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected String encodeCookie(String[] cookieTokens) { StringBuilder sb = new StringBuilder(); for (int i = 0; i < cookieTokens.length; i++) { try { sb.append(URLEncoder.encode(cookieTokens[i], StandardCharsets.UTF_8.toString())); } catch (UnsupportedEncodingException e) { logger.error(e.getMessage(), e); } if (i < cookieTokens.length - 1) { sb.append(DELIMITER); } } String value = sb.toString(); sb = new StringBuilder(new String(Base64.getEncoder().encode(value.getBytes()))); while (sb.charAt(sb.length() - 1) == '=') { sb.deleteCharAt(sb.length() - 1); } return sb.toString(); } \n### Response:", "ground_truth": "Inverse operation of decodeCookie.\n\n@param cookieTokens the tokens to be encoded.\n@return base64 encoding of the tokens concatenated with the \":\" delimiter.", "predict": "Encodes cookies using the URLEncoder class and Base64 encoding to ensure secure and readable format.\n\n@return the encoded cookie string."}, {"ID": 112, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def delete_operation(self, name, options=None): \"\"\" Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns ``google.rpc.Code.UNIMPLEMENTED``. Example: >>> from google.gapic.longrunning import operations_client >>> api = operations_client.OperationsClient() >>> name = '' >>> api.delete_operation(name) Args: name (string): The name of the operation resource to be deleted. options (:class:`google.gax.CallOptions`): Overrides the default settings for this call, e.g, timeout, retries etc. Raises: :exc:`google.gax.errors.GaxError` if the RPC is aborted. :exc:`ValueError` if the parameters are invalid. \"\"\" # Create the request object. request = operations_pb2.DeleteOperationRequest(name=name) self._delete_operation(request, options). \n### Response: Deletes a long-running operation. This method indicates that the client is\n        no longer interested in the operation result. It does not cancel the\n        operation. If the server doesn't support this method, it returns\n        ``google.rpc.Code.UNIMPLEMENTED``.\n\n        Example:\n          >>> from google.gapic.longrunning import operations_client\n          >>> api = operations_client.OperationsClient()\n          >>> name = ''\n          >>> api.delete_operation(name)\n\n        Args:\n          name (string): The name of the operation resource to be deleted.\n          options (:class:`google.gax.CallOptions`): Overrides the default\n            settings for this call, e.g, timeout, retries etc.\n\n        Raises:\n          :exc:`google.gax.errors.GaxError` if the RPC is aborted.\n          :exc:`ValueError` if the parameters are invalid..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void setCookie(String[] tokens, int maxAge, HttpServletRequest request, HttpServletResponse response) { String cookieValue = encodeCookie(tokens); Cookie cookie = new Cookie(cookieName, cookieValue); cookie.setMaxAge(maxAge); cookie.setPath(getCookiePath(request)); if (cookieDomain != null) { cookie.setDomain(cookieDomain); } if (maxAge < 1) { cookie.setVersion(1); } if (useSecureCookie == null) { cookie.setSecure(request.isSecure()); } else { cookie.setSecure(useSecureCookie); } cookie.setHttpOnly(true); response.addCookie(cookie); } \n### Response:", "ground_truth": "Sets the cookie on the response.\n\nBy default a secure cookie will be used if the connection is secure. You can set\nthe {@code useSecureCookie} property to {@code false} to override this. If you set\nit to {@code true}, the cookie will always be flagged as secure. By default the cookie\nwill be marked as HttpOnly.\n\n@param tokens the tokens which will be encoded to make the cookie value.\n@param maxAge the value passed to {@link Cookie#setMaxAge(int)}\n@param request the request\n@param response the response to add the cookie to.", "predict": "Set a cookie using the specified tokens, max age, request and response objects. Encodes the cookie value using the `encodeCookie` function. Sets the cookie's name, value, max age, path, domain, version, secure flag and HttpOnly flag. Adds the cookie to the response using the `addCookie` method."}, {"ID": 113, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private function cron_action_profile() { if ( ! defined( 'DOING_CRON' ) || ! DOING_CRON ) { return; } $hook = current_filter(); if ( ! isset( $this->done[ $hook ] ) ) { $this->done[ $hook ][ 'start' ] = microtime( TRUE ); return; } if ( ! isset( $this->done[ $hook ][ 'duration' ] ) ) { $duration = number_format( microtime( TRUE ) - $this->done[ $hook ][ 'start' ], 2 ); $this->done[ $hook ][ 'duration' ] = $duration . ' s'; // Log the cron action performed. do_action( \\Inpsyde\\Wonolog\\LOG, new Info( \"Cron action \\\"{$hook}\\\" performed.\", Channels::DEBUG, $this->done[ $hook ] ) ); } }. \n### Response: Run before and after that any cron action ran, logging it and its performance..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public Mono<Object> resolveArgument(MethodParameter parameter, BindingContext bindingContext, ServerWebExchange exchange) { ReactiveAdapter adapter = getAdapterRegistry().getAdapter(parameter.getParameterType()); Mono<SecurityContext> reactiveSecurityContext = ReactiveSecurityContextHolder.getContext(); if (reactiveSecurityContext == null) { return null; } return reactiveSecurityContext.flatMap( a -> { Object p = resolveSecurityContext(parameter, a); Mono<Object> o = Mono.justOrEmpty(p); return adapter == null ? o : Mono.just(adapter.fromPublisher(o)); }); } \n### Response:", "ground_truth": "resolve the argument to inject into the controller parameter.\n@param parameter the method parameter.\n@param bindingContext the binding context.\n@param exchange the server web exchange.\n@return the reactive mono object result.", "predict": "Method that resolves an argument and returns a Mono<Object>. Retrieves the ReactiveAdapter for the given argument type and returns a Mono<SecurityContext> if one is available. If no ReactiveAdapter is available, returns a Mono<Object> containing the original value. Uses the flatMap method to flatten the Mono<SecurityContext> into a Mono<Object> containing the resolved SecurityContext."}, {"ID": 114, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def trim_wav_ms(in_path: Path, out_path: Path, start_time: int, end_time: int) -> None: \"\"\" Extracts part of a WAV File. First attempts to call sox. If sox is unavailable, it backs off to pydub+ffmpeg. Args: in_path: A path to the source file to extract a portion of out_path: A path describing the to-be-created WAV file. start_time: The point in the source WAV file at which to begin extraction. end_time: The point in the source WAV file at which to end extraction. \"\"\" try: trim_wav_sox(in_path, out_path, start_time, end_time) except FileNotFoundError: # Then sox isn't installed, so use pydub/ffmpeg trim_wav_pydub(in_path, out_path, start_time, end_time) except subprocess.CalledProcessError: # Then there is an issue calling sox. Perhaps the input file is an mp4 # or some other filetype not supported out-of-the-box by sox. So we try # using pydub/ffmpeg. trim_wav_pydub(in_path, out_path, start_time, end_time). \n### Response: Extracts part of a WAV File.\n\n    First attempts to call sox. If sox is unavailable, it backs off to\n    pydub+ffmpeg.\n\n    Args:\n        in_path: A path to the source file to extract a portion of\n        out_path: A path describing the to-be-created WAV file.\n        start_time: The point in the source WAV file at which to begin\n            extraction.\n        end_time: The point in the source WAV file at which to end extraction..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private String getQueryString(final HttpServletRequest request, final Pattern artifactPattern) { final String query = request.getQueryString(); if (query == null) { return null; } final String result = artifactPattern.matcher(query).replaceFirst(\"\"); if (result.length() == 0) { return null; } // strip off the trailing & only if the artifact was the first query param return result.startsWith(\"&\") ? result.substring(1) : result; } \n### Response:", "ground_truth": "If present, removes the artifactParameterName and the corresponding value from the\nquery String.\n@param request\n@return the query String minus the artifactParameterName and the corresponding\nvalue.", "predict": "Provides a method to retrieve the query string of a given HttpServletRequest and pattern, and return the first query parameter that matches the artifact pattern.\n\nArgs:\n- request: The HttpServletRequest object to access the query string.\n- artifactPattern: A pattern that defines the artifact to match (e.g. \"audio/mp3\").\n\nReturns:\n- The first query parameter that matches the artifact pattern (if any).\n- If no matching query parameter is found, null is returned.\n\nNote: This method is only available in the context of a HttpServletRequest and may not be accessible in other contexts."}, {"ID": 115, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func MustProcess(v interface{}) { _, err := NewEnv(v) if err != nil { panic(err) } }. \n### Response: // MustProcess maps environment variables to the fields of struct v.\n// If any errors are returned, this function will panic..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private static int getServicePort(URL casServiceUrl) { int port = casServiceUrl.getPort(); if (port == -1) { port = casServiceUrl.getDefaultPort(); } return port; } \n### Response:", "ground_truth": "", "predict": "// GetServicePort retrieves the service port from the URL casServiceUrl.\n// It first retrieves the port by calling getPort() and, if it returns -1,\n// it retrieves the default port by calling getDefaultPort().\n// Finally, it returns the retrieved port."}, {"ID": 116, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def run_script(config, output_dir, accounts, tags, region, echo, serial, script_args): \"\"\"run an aws script across accounts\"\"\" # TODO count up on success / error / error list by account accounts_config, custodian_config, executor = init( config, None, serial, True, accounts, tags, (), ()) if echo: print(\"command to run: `%s`\" % (\" \".join(script_args))) return # Support fully quoted scripts, which are common to avoid parameter # overlap with c7n-org run-script. if len(script_args) == 1 and \" \" in script_args[0]: script_args = script_args[0].split() with executor(max_workers=WORKER_COUNT) as w: futures = {} for a in accounts_config.get('accounts', ()): for r in resolve_regions(region or a.get('regions', ())): futures[ w.submit(run_account_script, a, r, output_dir, serial, script_args)] = (a, r) for f in as_completed(futures): a, r = futures[f] if f.exception(): if serial: raise log.warning( \"Error running script in %s @ %s exception: %s\", a['name'], r, f.exception()) exit_code = f.result() if exit_code == 0: log.info( \"ran script on account:%s region:%s script: `%s`\", a['name'], r, \" \".join(script_args)) else: log.info( \"error running script on account:%s region:%s script: `%s`\", a['name'], r, \" \".join(script_args)). \n### Response: run an aws script across accounts.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public String getPrincipal() { Authentication authentication = SecurityContextHolder.getContext() .getAuthentication(); if (authentication == null) { log.warn(\"No Authentication object set in SecurityContext - returning empty String as Principal\"); return \"\"; } Object principal = authentication.getPrincipal(); if (principal instanceof LdapUserDetails) { LdapUserDetails details = (LdapUserDetails) principal; return details.getDn(); } else if (authentication instanceof AnonymousAuthenticationToken) { if (log.isDebugEnabled()) { log.debug(\"Anonymous Authentication, returning empty String as Principal\"); } return \"\"; } else { throw new IllegalArgumentException( \"The principal property of the authentication object\" + \"needs to be an LdapUserDetails.\"); } } \n### Response:", "ground_truth": "Get the principals of the logged in user, in this case the distinguished name.\n\n@return the distinguished name of the logged in user.", "predict": "getPrincipal():\nReturns the principal of the authentication object, if one is set. If no authentication object is set, returns an empty string as the principal. \n\nNote: This method is used to retrieve the user'sDN (UserPrincipalName) from the LdapUserDetails object. \n\nNote 2: This method is used in an anonymous authentication scenario, where the principal is not set. In this case, the method returns an empty string as the principal."}, {"ID": 117, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def pif_to_mdf_record(pif_obj, dataset_hit, mdf_acl): \"\"\"Convert a PIF into partial MDF record\"\"\" res = {} res[\"mdf\"] = _to_meta_data(pif_obj, dataset_hit, mdf_acl) res[res[\"mdf\"][\"source_name\"]] = _to_user_defined(pif_obj) return dumps(res). \n### Response: Convert a PIF into partial MDF record.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void logout(HttpServletRequest request, HttpServletResponse response, Authentication authentication) { Assert.notNull(request, \"HttpServletRequest required\"); if (invalidateHttpSession) { HttpSession session = request.getSession(false); if (session != null) { logger.debug(\"Invalidating session: \" + session.getId()); session.invalidate(); } } if (clearAuthentication) { SecurityContext context = SecurityContextHolder.getContext(); context.setAuthentication(null); } SecurityContextHolder.clearContext(); } \n### Response:", "ground_truth": "Requires the request to be passed in.\n\n@param request from which to obtain a HTTP session (cannot be null)\n@param response not used (can be null)\n@param authentication not used (can be null)", "predict": "This method is responsible for logging out the user. It first checks if aHttpSession is present in the request. If it is not present, it creates one and invalidates it. Then it checks if the authentication is null. If it is, it clears the authentication context. Finally, it clears the security context holder."}, {"ID": 118, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public DescriptorValue calculate(IAtomContainer container) { IAtomContainer local = AtomContainerManipulator.removeHydrogens(container); int natom = local.getAtomCount(); int[][] admat = AdjacencyMatrix.getMatrix(local); int[][] distmat = PathTools.computeFloydAPSP(admat); int eccenindex = 0; for (int i = 0; i < natom; i++) { int max = -1; for (int j = 0; j < natom; j++) { if (distmat[i][j] > max) max = distmat[i][j]; } int degree = local.getConnectedBondsCount(i); eccenindex += max * degree; } IntegerResult retval = new IntegerResult(eccenindex); return new DescriptorValue(getSpecification(), getParameterNames(), getParameters(), retval, getDescriptorNames(), null); }. \n### Response: Calculates the eccentric connectivity\n\n@param  container  Parameter is the atom container.\n@return            An IntegerResult value representing the eccentric connectivity index.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public Authentication authenticate(Authentication auth) throws AuthenticationException { if (!(auth instanceof UsernamePasswordAuthenticationToken)) { return null; } UsernamePasswordAuthenticationToken request = (UsernamePasswordAuthenticationToken) auth; Set<GrantedAuthority> authorities; try { // Create the LoginContext object, and pass our InternallCallbackHandler LoginContext loginContext = createLoginContext( new InternalCallbackHandler(auth)); // Attempt to login the user, the LoginContext will call our // InternalCallbackHandler at this point. loginContext.login(); // Create a set to hold the authorities, and add any that have already been // applied. authorities = new HashSet<>(); // Get the subject principals and pass them to each of the AuthorityGranters Set<Principal> principals = loginContext.getSubject().getPrincipals(); for (Principal principal : principals) { for (AuthorityGranter granter : this.authorityGranters) { Set<String> roles = granter.grant(principal); // If the granter doesn't wish to grant any authorities, it should // return null. if ((roles != null) && !roles.isEmpty()) { for (String role : roles) { authorities.add(new JaasGrantedAuthority(role, principal)); } } } } // Convert the authorities set back to an array and apply it to the token. JaasAuthenticationToken result = new JaasAuthenticationToken( request.getPrincipal(), request.getCredentials(), new ArrayList<>(authorities), loginContext); // Publish the success event publishSuccessEvent(result); // we're done, return the token. return result; } catch (LoginException loginException) { AuthenticationException ase = this.loginExceptionResolver .resolveException(loginException); publishFailureEvent(request, ase); throw ase; } } \n### Response:", "ground_truth": "Attempts to login the user given the Authentication objects principal and\ncredential\n\n@param auth The Authentication object to be authenticated.\n\n@return The authenticated Authentication object, with it's grantedAuthorities set.\n\n@throws AuthenticationException This implementation does not handle 'locked' or\n'disabled' accounts. This method only throws a AuthenticationServiceException, with\nthe message of the LoginException that will be thrown, should the\nloginContext.login() method fail.", "predict": "Authenticates the user and returns an authentication token.\n\n@param  auth   Parameter is the authentication token.\n@return            An AuthenticationToken object representing the authentication result.\n\nNote: This method is used to authenticate a user using the Jaas authentication framework. It creates a login context, attempts to login the user, and returns an authentication token. If the login fails, it throws an AuthenticationException. The method also publishes a success event and a failure event."}, {"ID": 119, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func RegisterDriver(driver Driver) error { if _, exists := drivers[driver.DbType]; exists { return ErrDbTypeRegistered } drivers[driver.DbType] = &driver return nil }. \n### Response: // RegisterDriver adds a backend database driver to available interfaces.\n// ErrDbTypeRegistered will be retruned if the database type for the driver has\n// already been registered..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private static String buildProviderUrl(List<String> urls, String baseDn) { Assert.notNull(baseDn, \"The Base DN for the LDAP server must not be null.\"); Assert.notEmpty(urls, \"At least one LDAP server URL must be provided.\"); String trimmedBaseDn = baseDn.trim(); StringBuilder providerUrl = new StringBuilder(); for (String serverUrl : urls) { String trimmedUrl = serverUrl.trim(); if (\"\".equals(trimmedUrl)) { continue; } providerUrl.append(trimmedUrl); if (!trimmedUrl.endsWith(\"/\")) { providerUrl.append(\"/\"); } providerUrl.append(trimmedBaseDn); providerUrl.append(\" \"); } return providerUrl.toString(); } \n### Response:", "ground_truth": "Builds a Spring LDAP-compliant Provider URL string, i.e. a space-separated list of\nLDAP servers with their base DNs. As the base DN must be identical for all servers,\nit needs to be supplied only once.\n\n@param urls A list of string values which are LDAP server URLs. An example would be\n\n\nldap://ldap.company.com:389\n\n\n. LDAPS URLs may be used as well, given that Spring Security is able to connect to\nthe server.\n@param baseDn The common Base DN for all provided servers, e.g.\n\n\ndc=company,dc=com\n\n\n.\n@return A Spring Security/Spring LDAP-compliant Provider URL string.", "predict": "// BuildProviderUrl builds an LDAP provider URL by appending each LDAP server URL to aStringBuilder.\n// The base DN for the LDAP server is trimmed and then the providerUrl is constructed byappending the base DN, a separator and the trimmed LDAP server URL.\n// If no LDAP server URL is provided, a null value is returned."}, {"ID": 120, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function postTransformComponent ( el, options ) { // $flow-disable-line (we know isReservedTag is there) if (!options.isReservedTag(el.tag) && el.tag !== 'cell-slot') { addAttr(el, RECYCLE_LIST_MARKER, 'true'); } }. \n### Response: mark components as inside recycle-list so that we know we need to invoke their special @render function instead of render in create-component.js.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void setContextEnvironmentProperties(Map<String, Object> environment) { Assert.notEmpty(environment, \"environment must not be empty\"); this.contextEnvironmentProperties = new Hashtable<>(environment); } \n### Response:", "ground_truth": "Allows a custom environment properties to be used to create initial LDAP context.\n\n@param environment the additional environment parameters to use when creating the LDAP Context", "predict": "Set the context environment properties using the provided environment map."}, {"ID": 121, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def get_grade_system_mdata(): \"\"\"Return default mdata map for GradeSystem\"\"\" return { 'numeric_score_increment': { 'element_label': { 'text': 'numeric score increment', 'languageTypeId': str(DEFAULT_LANGUAGE_TYPE), 'scriptTypeId': str(DEFAULT_SCRIPT_TYPE), 'formatTypeId': str(DEFAULT_FORMAT_TYPE), }, 'instructions': { 'text': 'enter a decimal value.', 'languageTypeId': str(DEFAULT_LANGUAGE_TYPE), 'scriptTypeId': str(DEFAULT_SCRIPT_TYPE), 'formatTypeId': str(DEFAULT_FORMAT_TYPE), }, 'required': False, 'read_only': False, 'linked': False, 'array': False, 'default_decimal_values': [None], 'syntax': 'DECIMAL', 'decimal_scale': None, 'minimum_decimal': None, 'maximum_decimal': None, 'decimal_set': [], }, 'lowest_numeric_score': { 'element_label': { 'text': 'lowest numeric score', 'languageTypeId': str(DEFAULT_LANGUAGE_TYPE), 'scriptTypeId': str(DEFAULT_SCRIPT_TYPE), 'formatTypeId': str(DEFAULT_FORMAT_TYPE), }, 'instructions': { 'text': 'enter a decimal value.', 'languageTypeId': str(DEFAULT_LANGUAGE_TYPE), 'scriptTypeId': str(DEFAULT_SCRIPT_TYPE), 'formatTypeId': str(DEFAULT_FORMAT_TYPE), }, 'required': False, 'read_only': False, 'linked': False, 'array': False, 'default_decimal_values': [None], 'syntax': 'DECIMAL', 'decimal_scale': None, 'minimum_decimal': None, 'maximum_decimal': None, 'decimal_set': [], }, 'based_on_grades': { 'element_label': { 'text': 'based on grades', 'languageTypeId': str(DEFAULT_LANGUAGE_TYPE), 'scriptTypeId': str(DEFAULT_SCRIPT_TYPE), 'formatTypeId': str(DEFAULT_FORMAT_TYPE), }, 'instructions': { 'text': 'enter either true or false.', 'languageTypeId': str(DEFAULT_LANGUAGE_TYPE), 'scriptTypeId': str(DEFAULT_SCRIPT_TYPE), 'formatTypeId': str(DEFAULT_FORMAT_TYPE), }, 'required': False, 'read_only': False, 'linked': False, 'array': False, 'default_boolean_values': [None], 'syntax': 'BOOLEAN', }, 'highest_numeric_score': { 'element_label': { 'text': 'highest numeric score', 'languageTypeId': str(DEFAULT_LANGUAGE_TYPE), 'scriptTypeId': str(DEFAULT_SCRIPT_TYPE), 'formatTypeId': str(DEFAULT_FORMAT_TYPE), }, 'instructions': { 'text': 'enter a decimal value.', 'languageTypeId': str(DEFAULT_LANGUAGE_TYPE), 'scriptTypeId': str(DEFAULT_SCRIPT_TYPE), 'formatTypeId': str(DEFAULT_FORMAT_TYPE), }, 'required': False, 'read_only': False, 'linked': False, 'array': False, 'default_decimal_values': [None], 'syntax': 'DECIMAL', 'decimal_scale': None, 'minimum_decimal': None, 'maximum_decimal': None, 'decimal_set': [], }, }. \n### Response: Return default mdata map for GradeSystem.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public String getRedirectUrl() { return UrlUtils.buildFullRequestUrl(scheme, serverName, serverPort, requestURI, queryString); } \n### Response:", "ground_truth": "Indicates the URL that the user agent used for this request.\n\n@return the full URL of this request", "predict": "Return the full URL for the redirect."}, {"ID": 122, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func appendResourceDestroyReferences(refs []*addrs.Reference) []*addrs.Reference { given := refs for _, ref := range given { switch tr := ref.Subject.(type) { case addrs.Resource: newRef := *ref // shallow copy newRef.Subject = tr.Phase(addrs.ResourceInstancePhaseDestroy) refs = append(refs, &newRef) case addrs.ResourceInstance: newRef := *ref // shallow copy newRef.Subject = tr.Phase(addrs.ResourceInstancePhaseDestroy) refs = append(refs, &newRef) } } return refs }. \n### Response: // appendResourceDestroyReferences identifies resource and resource instance\n// references in the given slice and appends to it the \"destroy-phase\"\n// equivalents of those references, returning the result.\n//\n// This can be used in the References implementation for a node which must also\n// depend on the destruction of anything it references..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public int doEndTag() throws JspException { try { if (!authorized && TagLibConfig.isUiSecurityDisabled()) { pageContext.getOut().write(TagLibConfig.getSecuredUiSuffix()); } } catch (IOException e) { throw new JspException(e); } return EVAL_PAGE; } \n### Response:", "ground_truth": "Default processing of the end tag returning EVAL_PAGE.\n\n@return EVAL_PAGE\n@see Tag#doEndTag()", "predict": "// doEndTag(): This method is responsible for ending the tag section of a web page.\n// It first checks if the user is not authorized to perform this action,\n// and if so, it writes the SecuredUiSuffix to the page context output.\n// This is necessary because the tag section may contain sensitive information,\n// such as login credentials, which should not be displayed to unauthorized users.\n//\n// If the user is authorized, the method simply returns the value of EVAL_PAGE,\n// which is the return value of the main JspMain function.\n//\n// This method is typically used in conjunction with the JspSecurityPolicy.addAccessControl()\n// method to add access control to the tag section of a web page.\n//\n// @throws JspException: This annotation indicates that any exception thrown by this method\n// may be handled by the caller and will be logged.\n//\n// @return: This annotation indicates the return value of this method.\n// It is typically used to indicate the result of this method."}, {"ID": 123, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function(sId) { //Match camelCase - case sensitive var idRegEx = /^[a-z][a-zA-Z]+$/; if ( !sId || typeof sId !== 'string') { return false; } if (sId.match(idRegEx) && this.validateStringLength(sId, 6, 50)) { return true; } return false; }. \n### Response: Validates the id of a rule each id. The Id has to be of type string, and needs to be camelCase.\n\nPositive cases :\n- \"validId\"\n\n@private\n@param {string} sId Id in string format.\n@returns {boolean} Boolean response if the provided id is valid..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override protected void initUserDetailsService() throws Exception { for (UserDetailsBuilder userBuilder : userBuilders) { getUserDetailsService().createUser(userBuilder.build()); } for (UserDetails userDetails : this.users) { getUserDetailsService().createUser(userDetails); } } \n### Response:", "ground_truth": "Populates the users that have been added.\n\n@throws Exception", "predict": "Initializes the userDetails service and creates users in the specified userBuilders.\n\nPositive cases :\n- all userDetails are created successfully\n\n@private\n@param {UserDetailsBuilder} userBuilder UserDetails builder for creating a new user.\n@param {UserDetails} userDetails User details to be created.\n@returns {void} void response to indicate success..\n\n@Override protected void onboarding() { } \n### Resp Onboarding method is called when the user is about to be signed in.\n\n@Override\nprotected void onboarding() { } \n### Resp Onboarding method is called when the user is about to be signed in.\n\n@Override protected void onboarding() { } \n### Resp Onboarding method is called when the user is about to be signed in.\n\n@Override protected void onboarding() { } \n### Resp Onboarding method is called when the user is about to be signed in.\n\n@Override protected void onboarding() { } \n### Resp Onboarding method is called when the user is about to be signed in.\n\n@Override protected void onboarding() { } \n### Resp Onboarding method is called when the user is about to be signed in.\n\n@Override protected void onboarding() { } \n### Resp Onboarding method is called when the user is about to be signed in.\n\n@Override protected void onboarding() { } \n### Resp Onboarding method is called when the user is about to be signed in.\n\n@Override protected void onboarding() { } \n### Resp Onboarding method is called when the user is about to be signed in.\n\n@Override protected void onboarding() { } \n### Resp Onboarding method is called when the user is about to be signed in.\n\n@Override protected void onboarding() { } \n### Resp Onboarding method is called when the user is about to be signed in.\n\n@Override protected void onboarding() { } \n### Resp Onboarding method is called when the user is about to be signed in.\n\n@Override protected void onboarding() { } \n### Resp Onboarding method is called when the user is about to be signed in.\n\n@Override protected void onboarding() { } \n### Resp Onboarding method is called when the user is about to be signed in.\n\n@Override protected void onboarding() { } \n### Resp Onboarding method is called when the user is about to be signed in.\n\n@Override protected void onboarding() { } \n### Resp Onboarding method is called when the user is about to be signed in.\n\n@Override protected void onboarding() { } \n### Resp Onboarding method is called when the user is about to be signed in.\n\n@Override protected void onboarding() { } \n### Resp Onboarding method is called when the user is about to be signed in.\n\n@Override protected void onboarding() { } \n### Resp Onboarding method is called when the user is about to be signed in.\n\n@Override protected void onboarding() { } \n### Resp Onboarding method is called when the user is about to be signed in.\n\n@Override protected void onboarding() { } \n### Resp Onboarding method is called when the user is about to be signed in.\n\n@Override protected void onboarding() { } \n### Resp Onboarding method is called when the user is about to be signed in.\n\n@Override protected void onboarding() { } \n### Resp Onboarding method is called when the user is about to be signed in.\n\n@Override protected void onboarding() { } \n### Resp Onboarding method is called when the user is about to be signed in.\n\n@Override protected void onboarding() { } \n### Resp Onboarding method is called when the user is about to be signed in.\n\n@Override protected void onboarding() { } \n### Resp Onboarding method is called when the user is about to be signed in.\n\n@Override protected void onboarding() { } \n### Resp Onboarding method is called when the user is about to be signed in.\n\n@Override protected void onboarding() { } \n### Resp Onboarding method is called when the user is about to be signed in.\n\n@Override protected void onboarding() { } \n### Resp Onboarding method is called when the user is about to be signed in.\n\n@Override protected void onboarding() { } \n### Resp Onboarding method is called when the user is about to be signed in.\n\n@Override protected void onboarding() { } \n### Resp Onboarding method is called when the user is about to be signed in.\n\n@Override protected void onboarding() { } \n### Resp Onboarding method is called when the user is about to be signed in.\n\n@Override protected void onboarding() { } \n### Resp Onboarding method is called when the user is about to be signed in.\n\n@Override protected void onboarding() { } \n### Resp Onboarding method is called when the user is about to be signed in.\n\n@Override protected void onboarding() { } \n### Resp Onboarding method is called when the user is about to be signed in.\n\n@Override protected void onboarding() { } \n### Resp Onboarding method is called when the user is about to be signed in.\n\n@Override protected void onboarding() { } \n### Resp Onboarding method is called when the user is about to be signed in.\n\n@Override protected void onboarding() { } \n### Resp Onboarding method is called when the user is about to be signed in.\n\n@Override protected void onboarding() { } \n### Resp Onboarding method is called when the user is about to be signed in.\n\n@Override protected void onboarding() { } \n### Resp Onboarding method is called when the user is about to be signed in.\n\n@Override protected void onboarding() { } \n### Resp Onboarding method is called when the user is about to be signed in.\n\n@Override protected void onboarding() { } \n### Resp Onboarding method is called when the user is about to be signed in.\n\n@Override protected void onboarding() { } \n### Resp Onboarding method is called when the user is about to be signed in.\n\n@Override protected void onboarding() { } \n### Resp Onboarding method is called when the user is about to be signed in.\n\n@Override protected void onboarding() { } \n### Resp Onboarding method is called when the user is about to be signed in.\n\n@Override protected void onboarding() { } \n### Resp Onboarding method is called when the user is about to be signed in."}, {"ID": 124, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function Sign(&$Request, $Modify = FALSE) { // Fail if no ID is present $VanillaID = GetValue('VanillaID', $Request, FALSE); if (empty($VanillaID)) return FALSE; if ($VanillaID != Gdn::InstallationID()) return FALSE; // We're going to work on a copy for now $SignatureArray = $Request; // Build the request time $RequestTime = Gdn_Statistics::Time(); // Get the secret key $RequestSecret = Gdn::InstallationSecret(); // Remove the hash from the request data before checking or building the signature unset($SignatureArray['SecurityHash']); // Add the real secret and request time $SignatureArray['Secret'] = $RequestSecret; $SignatureArray['RequestTime'] = $RequestTime; $SignData = array_intersect_key($SignatureArray, array_fill_keys(array( 'VanillaID', 'Secret', 'RequestTime', 'TimeSlot' ), NULL)); // ksort the array to preserve a known order $SignData = array_change_key_case($SignData, CASE_LOWER); ksort($SignData); // Calculate the hash $RealHash = sha1(http_build_query($SignData)); if ($Modify) { $Request['RequestTime'] = $RequestTime; $Request['SecurityHash'] = $RealHash; ksort($Request); } return $RealHash; }. \n### Response: Sign a request or response\n\nUses the known site secret to sign the given request or response. The\nrequest/response is passed in by reference so that it can be augmented\nwith the signature.\n\n@param array $Request The request array to be signed\n@param boolean $Modify Optional whether or not to modify the request in place (default false).\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private UserDetailsService getUserDetailsService() { Map<String, ?> beans = getBeansOfType(CachingUserDetailsService.class); if (beans.size() == 0) { beans = getBeansOfType(UserDetailsService.class); } if (beans.size() == 0) { throw new ApplicationContextException(\"No UserDetailsService registered.\"); } else if (beans.size() > 1) { throw new ApplicationContextException( \"More than one UserDetailsService registered. Please \" + \"use a specific Id reference in <remember-me/> <openid-login/> or <x509 /> elements.\"); } return (UserDetailsService) beans.values().toArray()[0]; } \n### Response:", "ground_truth": "Obtains a user details service for use in RememberMeServices etc. Will return a\ncaching version if available so should not be used for beans which need to separate\nthe two.", "predict": "Retrieves the UserDetailsService instance for the current application context.\n\n@return the UserDetailsService instance for the current application context\n\nNote: This method is used to retrieve the registered UserDetailsService instances for the application context. If no UserDetailsService is registered, an exception is thrown. If multiple UserDetailsService instances are registered, an exception is thrown with a message indicating which one should be used."}, {"ID": 125, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def enabled_scanner_ids(self): \"\"\"Retrieves a list of currently enabled scanners.\"\"\" enabled_scanners = [] scanners = self.zap.ascan.scanners() for scanner in scanners: if scanner['enabled'] == 'true': enabled_scanners.append(scanner['id']) return enabled_scanners. \n### Response: Retrieves a list of currently enabled scanners..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private void addPkceParameters(Map<String, Object> attributes, Map<String, Object> additionalParameters) { String codeVerifier = this.codeVerifierGenerator.generateKey(); attributes.put(PkceParameterNames.CODE_VERIFIER, codeVerifier); try { String codeChallenge = createCodeChallenge(codeVerifier); additionalParameters.put(PkceParameterNames.CODE_CHALLENGE, codeChallenge); additionalParameters.put(PkceParameterNames.CODE_CHALLENGE_METHOD, \"S256\"); } catch (NoSuchAlgorithmException e) { additionalParameters.put(PkceParameterNames.CODE_CHALLENGE, codeVerifier); } } \n### Response:", "ground_truth": "Creates and adds additional PKCE parameters for use in the OAuth 2.0 Authorization and Access Token Requests\n\n@param attributes where {@link PkceParameterNames#CODE_VERIFIER} is stored for the token request\n@param additionalParameters where {@link PkceParameterNames#CODE_CHALLENGE} and, usually,\n{@link PkceParameterNames#CODE_CHALLENGE_METHOD} are added to be used in the authorization request.\n\n@since 5.2\n@see 1.1.  Protocol Flow\n@see 4.1.  Client Creates a Code Verifier\n@see 4.2.  Client Creates the Code Challenge", "predict": "Adds Pkce parameters to the attributes and additionalParameters maps.."}, {"ID": 126, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def dot(A, B): \"\"\"Matrix multiplication between A and B This function is equivalent to ``A @ B``, which is unfortunately not possible under python 2.x. Args: A (sequence): B (sequence): Returns: sequence: \"\"\" try: result = A.__matmul__(B) if result is NotImplemented: result = B.__rmatmul__(A) except AttributeError: result = B.__rmatmul__(A) return result. \n### Response: Matrix multiplication between A and B\n\n    This function is equivalent to ``A @ B``, which is unfortunately\n    not possible under python 2.x.\n\n    Args:\n        A (sequence):\n        B (sequence):\n\n    Returns:\n        sequence:.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected boolean requiresAuthentication(final HttpServletRequest request, final HttpServletResponse response) { final boolean serviceTicketRequest = serviceTicketRequest(request, response); final boolean result = serviceTicketRequest || proxyReceptorRequest(request) || (proxyTicketRequest(serviceTicketRequest, request)); if (logger.isDebugEnabled()) { logger.debug(\"requiresAuthentication = \" + result); } return result; } \n### Response:", "ground_truth": "Overridden to provide proxying capabilities.", "predict": "Method-level comment for the `requiresAuthentication` method:\n\nThis method determines whether the user is required to authenticate to access the provided request and response objects. It first checks if the service ticket request is true, if so, it checks if the proxyceptor request is true, and if so, it checks if the proxy ticket request is true. If all three conditions are true, the method returns `true`, indicating that the user is required to authenticate. If any of the conditions are false, the method returns `false`, indicating that the user is not required to authenticate.\n\nNote: The `logger` object is used to log the result of the authentication check. The `isDebugEnabled` method is used to determine whether to log the result in debug mode."}, {"ID": 127, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (c *Context) Mkdir(path string) error { if ae != nil { return ae.Mkdir(c.ae, path) } return c.mkdir(path) }. \n### Response: // Mkdir creates a directory with the given path.\n// If the path already exists and is a directory, Mkdir returns no error..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private boolean serviceTicketRequest(final HttpServletRequest request, final HttpServletResponse response) { boolean result = super.requiresAuthentication(request, response); if (logger.isDebugEnabled()) { logger.debug(\"serviceTicketRequest = \" + result); } return result; } \n### Response:", "ground_truth": "Indicates if the request is elgible to process a service ticket. This method exists\nfor readability.\n@param request\n@param response\n@return", "predict": "// This method performs the service ticket request and returns the result.\n// It first calls the super method requiringAuthentication(request, response) to ensure that the request is authenticated.\n// If the request is not authenticated, it returns false.\n// If the logger is enabled and isDebugEnabled() is true, it logs a debug message indicating the result of the service ticket request.\n// This method is a private implementation detail and should not be accessed directly."}, {"ID": 128, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def set_filetype(self, filetype, bufnr=None): \"\"\"Set filetype for a buffer. Note: it's a quirk of Vim's Python API that using the buffer.options dictionary to set filetype does not trigger ``FileType`` autocommands, hence this implementation executes as a command instead. Args: filetype (str): The filetype to set. bufnr (Optional[int]): A Vim buffer number, current if ``None``. \"\"\" if bufnr: self._vim.command(str(bufnr) + 'bufdo set filetype=' + filetype) else: self._vim.command('set filetype=' + filetype). \n### Response: Set filetype for a buffer.\n\n        Note: it's a quirk of Vim's Python API that using the buffer.options\n        dictionary to set filetype does not trigger ``FileType`` autocommands,\n        hence this implementation executes as a command instead.\n\n        Args:\n            filetype (str): The filetype to set.\n            bufnr (Optional[int]): A Vim buffer number, current if ``None``..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private boolean proxyTicketRequest(final boolean serviceTicketRequest, final HttpServletRequest request) { if (serviceTicketRequest) { return false; } final boolean result = authenticateAllArtifacts && obtainArtifact(request) != null && !authenticated(); if (logger.isDebugEnabled()) { logger.debug(\"proxyTicketRequest = \" + result); } return result; } \n### Response:", "ground_truth": "Indicates if the request is elgible to process a proxy ticket.\n@param request\n@return", "predict": "proxyTicketRequest method that takes a boolean argument \"serviceTicketRequest\" and a HttpServletRequest object \"request\".\n\n        This method returns the result of the proxyTicketRequest operation.\n\n        If \"serviceTicketRequest\" is true, the method returns false.\n        If \"request\" is not null and \"authenticated\" is true, the method returns the result of \"authenticateAllArtifacts\" and \" obtainArtifact(request)\" and does not perform any further operation.\n        If \"serviceTicketRequest\" is false and \"request\" is not null, the method returns the result of \" obtainArtifact(request)\" and does not perform any further operation.\n        If \"logger.isDebugEnabled()\" is true, the method logs a debug message with the result of the operation.\n\n        This method is useful for debugging purposes."}, {"ID": 129, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected function randomCssColor() { if ($this->ismono) { $alpha = 1 - $this->rand(0, 96) / 100; return \"rgba({$this->monocolor[0]}, {$this->monocolor[1]}, {$this->monocolor[2]}, $alpha)\"; } $r = $this->rand(0, 255); $g = $this->rand(0, 255); $b = $this->rand(0, 255); return \"rgb($r, $g, $b)\"; }. \n### Response: Create a random valid css color value\n\n@return string.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private boolean authenticated() { Authentication authentication = SecurityContextHolder.getContext() .getAuthentication(); return authentication != null && authentication.isAuthenticated() && !(authentication instanceof AnonymousAuthenticationToken); } \n### Response:", "ground_truth": "Determines if a user is already authenticated.\n@return", "predict": "Returns a boolean indicating whether the current user is authenticated.\n\n@return boolean."}, {"ID": 130, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def to_json(self, *, indent=None, sort_keys = False): \"\"\"Gets the object's JSON representation. Parameters ---------- indent: :class:`int`, optional Number of spaces used as indentation, ``None`` will return the shortest possible string. sort_keys: :class:`bool`, optional Whether keys should be sorted alphabetically or preserve the order defined by the object. Returns ------- :class:`str` JSON representation of the object. \"\"\" return json.dumps({k: v for k, v in dict(self).items() if v is not None}, indent=indent, sort_keys=sort_keys, default=self._try_dict). \n### Response: Gets the object's JSON representation.\n\n        Parameters\n        ----------\n        indent: :class:`int`, optional\n            Number of spaces used as indentation, ``None`` will return the shortest possible string.\n        sort_keys: :class:`bool`, optional\n            Whether keys should be sorted alphabetically or preserve the order defined by the object.\n\n        Returns\n        -------\n        :class:`str`\n            JSON representation of the object..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private boolean proxyReceptorRequest(final HttpServletRequest request) { final boolean result = proxyReceptorConfigured() && proxyReceptorMatcher.matches(request); if (logger.isDebugEnabled()) { logger.debug(\"proxyReceptorRequest = \" + result); } return result; } \n### Response:", "ground_truth": "Indicates if the request is elgible to be processed as the proxy receptor.\n@param request\n@return", "predict": "Provides a method to check if a request is a valid proxy request.\n\n        Returns\n        -------\n        :class:`boolean`\n            True if the request is a valid proxy request, False otherwise.\n\n        Parameters\n        ----------\n        request: :class:`HttpServletRequest`\n            The request object.\n\n        Returns\n        -------\n        :class:`boolean`\n            True if the request is a valid proxy request, False otherwise.."}, {"ID": 131, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (w *worker) getFirstDDLJob(t *meta.Meta) (*model.Job, error) { job, err := t.GetDDLJobByIdx(0) return job, errors.Trace(err) }. \n### Response: // getFirstDDLJob gets the first DDL job form DDL queue..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected MethodSecurityExpressionOperations createSecurityExpressionRoot( Authentication authentication, MethodInvocation invocation) { MethodSecurityExpressionRoot root = new MethodSecurityExpressionRoot( authentication); root.setThis(invocation.getThis()); root.setPermissionEvaluator(getPermissionEvaluator()); root.setTrustResolver(getTrustResolver()); root.setRoleHierarchy(getRoleHierarchy()); root.setDefaultRolePrefix(getDefaultRolePrefix()); return root; } \n### Response:", "ground_truth": "Creates the root object for expression evaluation.", "predict": "// createSecurityExpressionRoot creates a MethodSecurityExpressionRoot object for the given authentication and invocation.."}, {"ID": 132, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def _check_file_field(self, field): \"\"\"Check that field exists and is a file field\"\"\" is_field = field in self.field_names is_file = self.__meta_metadata(field, 'field_type') == 'file' if not (is_field and is_file): msg = \"'%s' is not a field or not a 'file' field\" % field raise ValueError(msg) else: return True. \n### Response: Check that field exists and is a file field.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private Mono<JWKSet> getJWKSet() { return this.webClient.get() .uri(this.jwkSetURL) .retrieve() .bodyToMono(String.class) .map(this::parse) .doOnNext(jwkSet -> this.cachedJWKSet.set(Mono.just(jwkSet))) .cache(); } \n### Response:", "ground_truth": "Updates the cached JWK set from the configured URL.\n\n@return The updated JWK set.\n\n@throws RemoteKeySourceException If JWK retrieval failed.", "predict": "This method retrieves the JWKSet from the specified URL and parses it using the `parse` method. It then sets the cached JWKSet using the `cachedJWKSet` field and caches the result."}, {"ID": 133, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public String[] columnNames() { return getInputSchema().getColumnNames().toArray(new String[getInputSchema().getColumnNames().size()]); }. \n### Response: Returns column names\nthis op is meant to run on\n\n@return.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private String utf8UrlEncode(String value) { try { return URLEncoder.encode(value, \"UTF-8\"); } catch (UnsupportedEncodingException e) { Error err = new AssertionError( \"The Java platform guarantees UTF-8 support, but it seemingly is not present.\"); err.initCause(e); throw err; } } \n### Response:", "ground_truth": "Performs URL encoding with UTF-8\n\n@param value the value to URL encode\n@return the encoded value", "predict": "This method encodes a given string using UTF-8. It does so by using a try-catch block to handle the UnsupportedEncodingException that may be thrown. If the exception is caught, an Error object is created with the message \"The Java platform guarantees UTF-8 support, but it seemingly is not present.\" and is then thrown."}, {"ID": 134, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (id *DeviceIdTuple) Matches(other *DeviceIdTuple) bool { if other == nil { return false } if other.Name != \"\" && other.Name != id.Name { return false } if other.Vendor != \"\" && other.Vendor != id.Vendor { return false } if other.Type != \"\" && other.Type != id.Type { return false } return true }. \n### Response: // Matches returns if this Device ID is a superset of the passed ID..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private Collection<? extends GrantedAuthority> getWebSphereGroupsBasedGrantedAuthorities() { List<String> webSphereGroups = wasHelper.getGroupsForCurrentUser(); Collection<? extends GrantedAuthority> userGas = webSphereGroups2GrantedAuthoritiesMapper .getGrantedAuthorities(webSphereGroups); if (logger.isDebugEnabled()) { logger.debug(\"WebSphere groups: \" + webSphereGroups + \" mapped to Granted Authorities: \" + userGas); } return userGas; } \n### Response:", "ground_truth": "Get a list of Granted Authorities based on the current user's WebSphere groups.\n\n@return authorities mapped from the user's WebSphere groups.", "predict": "// Get the webSphere groups based on the current user and return a collection of Granted Authorities."}, {"ID": 135, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def has_function(function_name, libraries=None): \"\"\"Checks if a given functions exists in the current platform.\"\"\" compiler = distutils.ccompiler.new_compiler() with muted(sys.stdout, sys.stderr): result = compiler.has_function( function_name, libraries=libraries) if os.path.exists('a.out'): os.remove('a.out') return result. \n### Response: Checks if a given functions exists in the current platform..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected UserDetails loadUserByAssertion(final Assertion assertion) { final CasAssertionAuthenticationToken token = new CasAssertionAuthenticationToken( assertion, \"\"); return this.authenticationUserDetailsService.loadUserDetails(token); } \n### Response:", "ground_truth": "Template method for retrieving the UserDetails based on the assertion. Default is\nto call configured userDetailsService and pass the username. Deployers can override\nthis method and retrieve the user based on any criteria they desire.\n\n@param assertion The CAS Assertion.\n@return the UserDetails.", "predict": "This method loads a userDetails object by using an assertion object."}, {"ID": 136, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def absent(name, driver=None): ''' Ensure that a volume is absent. .. versionadded:: 2015.8.4 .. versionchanged:: 2017.7.0 This state was renamed from **docker.volume_absent** to **docker_volume.absent** name Name of the volume Usage Examples: .. code-block:: yaml volume_foo: docker_volume.absent ''' ret = {'name': name, 'changes': {}, 'result': False, 'comment': ''} volume = _find_volume(name) if not volume: ret['result'] = True ret['comment'] = 'Volume \\'{0}\\' already absent'.format(name) return ret try: ret['changes']['removed'] = __salt__['docker.remove_volume'](name) ret['result'] = True except Exception as exc: ret['comment'] = ('Failed to remove volume \\'{0}\\': {1}' .format(name, exc)) return ret. \n### Response: Ensure that a volume is absent.\n\n    .. versionadded:: 2015.8.4\n    .. versionchanged:: 2017.7.0\n        This state was renamed from **docker.volume_absent** to **docker_volume.absent**\n\n    name\n        Name of the volume\n\n    Usage Examples:\n\n    .. code-block:: yaml\n\n        volume_foo:\n          docker_volume.absent.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected Object getPreAuthenticatedPrincipal(HttpServletRequest httpRequest) { Object principal = wasHelper.getCurrentUserName(); if (logger.isDebugEnabled()) { logger.debug(\"PreAuthenticated WebSphere principal: \" + principal); } return principal; } \n### Response:", "ground_truth": "Return the WebSphere user name.", "predict": "```\n   .. versionadded:: 1.5\n   .. versionchanged:: 1.5.0\n        This method was added in WebSphere Application Server 1.5.0.\n\n    Object getPreAuthenticatedPrincipal(HttpServletRequest httpRequest) returns the preAuthenticated principal of the current user.\n\n    logger.debug(\"PreAuthenticated WebSphere principal: \" + principal);\n    return principal;\n    ```"}, {"ID": 137, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def LoadFile(f, table_name, conn): \"\"\"Import lines from f as new table in db with cursor c.\"\"\" reader = csv.reader(f) header = next(reader) columns = [] for n in header: n = n.replace(' ', '') n = n.replace('-', '_') columns.append(n) create_columns = [] column_types = {} for n in columns: if n in column_types: create_columns.append(\"%s %s\" % (n, column_types[n])) else: create_columns.append(\"%s INTEGER\" % (n)) c = conn.cursor() try: c.execute(\"CREATE TABLE %s (%s)\" % (table_name, \",\".join(create_columns))) except sqlite.OperationalError: # Likely table exists print(\"table %s already exists?\" % (table_name)) for create_column in create_columns: try: c.execute(\"ALTER TABLE %s ADD COLUMN %s\" % (table_name, create_column)) except sqlite.OperationalError: # Likely it already exists print(\"column %s already exists in %s?\" % (create_column, table_name)) placeholders = \",\".join([\"?\"] * len(columns)) insert_values = \"INSERT INTO %s (%s) VALUES (%s)\" % (table_name, \",\".join(columns), placeholders) #c.execute(\"BEGIN TRANSACTION;\") for row in reader: if row: if len(row) < len(columns): row.extend([None] * (len(columns) - len(row))) c.execute(insert_values, row) #c.execute(\"END TRANSACTION;\") conn.commit(). \n### Response: Import lines from f as new table in db with cursor c..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static byte[] concatenate(byte[]... arrays) { int length = 0; for (byte[] array : arrays) { length += array.length; } byte[] newArray = new byte[length]; int destPos = 0; for (byte[] array : arrays) { System.arraycopy(array, 0, newArray, destPos, array.length); destPos += array.length; } return newArray; } \n### Response:", "ground_truth": "Combine the individual byte arrays into one array.", "predict": "Concatenate byte arrays."}, {"ID": 138, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (s *Session) Set(key string, value interface{}) { s.set(key, value, false) }. \n### Response: // Set fills the session with an entry \"value\", based on its \"key\"..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static byte[] subArray(byte[] array, int beginIndex, int endIndex) { int length = endIndex - beginIndex; byte[] subarray = new byte[length]; System.arraycopy(array, beginIndex, subarray, 0, length); return subarray; } \n### Response:", "ground_truth": "Extract a sub array of bytes out of the byte array.\n@param array the byte array to extract from\n@param beginIndex the beginning index of the sub array, inclusive\n@param endIndex the ending index of the sub array, exclusive", "predict": "// Subarray returns a copy of the array from the specified beginIndex to the endIndex.."}, {"ID": 139, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static function equals(string $string1, string $string2, bool $caseSensitive = true) { if ($caseSensitive) { return $string1 === $string2; } return strtolower($string1) === strtolower($string2); }. \n### Response: Compare two strings for identically\n\n@param string $string1\n@param string $string2\n@param bool   $caseSensitive Optional. Default: true\n\n@return bool.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public List<GrantedAuthority> getGrantedAuthorities(Collection<String> attributes) { ArrayList<GrantedAuthority> gaList = new ArrayList<>(); for (String attribute : attributes) { Collection<GrantedAuthority> c = attributes2grantedAuthoritiesMap .get(attribute); if (c != null) { gaList.addAll(c); } } gaList.trimToSize(); return gaList; } \n### Response:", "ground_truth": "Map the given array of attributes to Spring Security GrantedAuthorities.", "predict": "Get a list of granted authorities for a given set of attributes\n\n@param Collection<String>  attributes\n\n@return ArrayList<GrantedAuthority>."}, {"ID": 140, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def post(params = {}) params = Utils.symbolize_hash_keys(params) query_params = { _actions: false, _links: true, _embedded: true } headers = {} body = nil raise ArgumentError.new(\"applicationId is required\") unless params.has_key?(:applicationId) raise ArgumentError.new(\"applicationKey is required\") unless params.has_key?(:applicationKey) body = params[:applicationKey] if params.has_key?(:applicationKey) headers[:losantdomain] = params[:losantdomain] if params.has_key?(:losantdomain) query_params[:_actions] = params[:_actions] if params.has_key?(:_actions) query_params[:_links] = params[:_links] if params.has_key?(:_links) query_params[:_embedded] = params[:_embedded] if params.has_key?(:_embedded) path = \"/applications/#{params[:applicationId]}/keys\" @client.request( method: :post, path: path, query: query_params, headers: headers, body: body) end. \n### Response: Create a new applicationKey for an application\n\n Authentication:\n The client must be configured with a valid api\n access token to call this action. The token\n must include at least one of the following scopes:\n all.Application, all.Organization, all.User, applicationKeys.*, or applicationKeys.post.\n\n Parameters:\n *  {string} applicationId - ID associated with the application\n *  {hash} applicationKey - ApplicationKey information (https://api.losant.com/#/definitions/applicationKeyPost)\n *  {string} losantdomain - Domain scope of request (rarely needed)\n *  {boolean} _actions - Return resource actions in response\n *  {boolean} _links - Return resource link in response\n *  {boolean} _embedded - Return embedded resources in response\n\n Responses:\n *  201 - Successfully created applicationKey (https://api.losant.com/#/definitions/applicationKeyPostResponse)\n\n Errors:\n *  400 - Error if malformed request (https://api.losant.com/#/definitions/error)\n *  404 - Error if application was not found (https://api.losant.com/#/definitions/error).\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private Map<String, Collection<GrantedAuthority>> preProcessMap(Map<?, ?> orgMap) { Map<String, Collection<GrantedAuthority>> result = new HashMap<String, Collection<GrantedAuthority>>( orgMap.size()); for (Map.Entry<?, ?> entry : orgMap.entrySet()) { Assert.isInstanceOf(String.class, entry.getKey(), \"attributes2grantedAuthoritiesMap contains non-String objects as keys\"); result.put((String) entry.getKey(), getGrantedAuthorityCollection(entry.getValue())); } return result; } \n### Response:", "ground_truth": "Preprocess the given map to convert all the values to GrantedAuthority collections\n\n@param orgMap The map to process\n@return the processed Map", "predict": "**Method Name:** preProcessMap\n\n**Description:** Preprocesses a map of organization maps to create a new map with granted authorities.\n\n**Parameters:**\n\n*  orgMap - A map of organization maps.\n\n**Returns:** A new map with granted authorities.\n\n**Exceptions:**\n\n*  ClassCastException - If the key is not a String.\n\n**Example:**\n```java\nMap<String, Collection<GrantedAuthority>> orgMap = new HashMap<>();\norgMap.put(\"user1\", new ArrayList<>());\norgMap.put(\"user2\", new ArrayList<>());\norgMap.put(\"user3\", new ArrayList<>());\n\nMap<String, Collection<GrantedAuthority>> preProcessMap(orgMap) {\n  Map<String, Collection<GrantedAuthority>> result = new HashMap<String, Collection<GrantedAuthority>>(orgMap.size());\n  for (Map.Entry<String, Collection<GrantedAuthority>> entry : orgMap.entrySet()) {\n    Assert.isInstanceOf(String.class, entry.getKey(), \"attributes2grantedAuthorityMap contains non-String objects as keys\");\n    result.put((String) entry.getKey(), getGrantedAuthorityCollection(entry.getValue()));\n  }\n  return result;\n}\n```\nNote: This code is for educational purposes only and may not be used in production environment."}, {"ID": 141, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def set_monitoring(module): \"\"\" Defines the monitoring method on the module. \"\"\" def monitoring(is_monitoring, track_data=None, track_grad=None, track_update=None, track_update_ratio=None): \"\"\" Turn monitoring on or off. If any of the keyword arguments are not None, they will be overwritten. \"\"\" module.is_monitoring = is_monitoring module.track_data = track_data if track_data is not None else module.track_data module.track_grad = track_grad if track_grad is not None else module.track_grad module.track_update = track_update if track_update is not None else module.track_update module.track_update_ratio = track_update_ratio if track_update_ratio is not None else module.track_update_ratio module.monitoring = monitoring. \n### Response: Defines the monitoring method on the module..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private Collection<GrantedAuthority> getGrantedAuthorityCollection(Object value) { Collection<GrantedAuthority> result = new ArrayList<>(); addGrantedAuthorityCollection(result, value); return result; } \n### Response:", "ground_truth": "Convert the given value to a collection of Granted Authorities\n\n@param value The value to convert to a GrantedAuthority Collection\n@return Collection containing the GrantedAuthority Collection", "predict": "Returns the granted authority collection for the given value."}, {"ID": 142, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static function getLanguage() { if (!self::$language) { $locale = Config::get()->get('language.language'); $debug = Config::get()->get('language.debug'); self::$language = Language::getInstance($locale, $debug); Text::setLanguage(self::$language); } return self::$language; }. \n### Response: Get a language object.\n\nReturns the global {@link JLanguage} object, only creating it if it doesn't already exist.\n\n@return  Language object\n\n@see     Language\n@since   11.1.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private void addGrantedAuthorityCollection(Collection<GrantedAuthority> result, Object value) { if (value == null) { return; } if (value instanceof Collection<?>) { addGrantedAuthorityCollection(result, (Collection<?>) value); } else if (value instanceof Object[]) { addGrantedAuthorityCollection(result, (Object[]) value); } else if (value instanceof String) { addGrantedAuthorityCollection(result, (String) value); } else if (value instanceof GrantedAuthority) { result.add((GrantedAuthority) value); } else { throw new IllegalArgumentException(\"Invalid object type: \" + value.getClass().getName()); } } \n### Response:", "ground_truth": "Convert the given value to a collection of Granted Authorities, adding the result\nto the given result collection.\n\n@param value The value to convert to a GrantedAuthority Collection\n@return Collection containing the GrantedAuthority Collection", "predict": "Adds a granted authority collection to the result.\n\nAdds the given value of type Object to the result, or adds a new granted authority of the same type if the current one is empty.\n\n@param  result  Collection of granted authority\n@param  value  Object to add to the result\n@return  void\n\n@since   11.1.\n\n"}, {"ID": 143, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function Fields() { foreach ($this->getExtraFields() as $field) { if (!$this->fields->fieldByName($field->getName())) { $this->fields->push($field); } } return $this->fields; }. \n### Response: Return the form's fields - used by the templates\n\n@return FieldList The form fields.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected Object getPreAuthenticatedPrincipal(HttpServletRequest httpRequest) { Object principal = httpRequest.getUserPrincipal() == null ? null : httpRequest .getUserPrincipal().getName(); if (logger.isDebugEnabled()) { logger.debug(\"PreAuthenticated J2EE principal: \" + principal); } return principal; } \n### Response:", "ground_truth": "Return the J2EE user name.", "predict": "Get the preAuthenticated J2EE principal from the HttpServletRequest. If it is null, return null. If it is not null, return the principal. Uses logging for debugging.\n\n@return Object The preAuthenticated J2EE principal."}, {"ID": 144, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected function generateItem($url, $link, $title, $cssClass, $isActive, $subitems = '', NewsCategoryModel $category = null) { $data = []; // Set the data from category if (null !== $category) { $data = $category->row(); } $data['isActive'] = $isActive; $data['subitems'] = $subitems; $data['class'] = $cssClass; $data['title'] = StringUtil::specialchars($title); $data['linkTitle'] = StringUtil::specialchars($title); $data['link'] = $link; $data['href'] = ampersand($url); $data['quantity'] = 0; // Add the \"active\" class if ($isActive) { $data['class'] = \\trim($data['class'].' active'); } // Add the \"submenu\" class if ($subitems) { $data['class'] = \\trim($data['class'].' submenu'); } // Add the news quantity if ($this->news_showQuantity) { if (null === $category) { $data['quantity'] = NewsCategoryModel::getUsage($this->news_archives); } else { $data['quantity'] = NewsCategoryModel::getUsage($this->news_archives, $category->id, (bool) $this->news_includeSubcategories); } } // Add the image if (null !== $category && null !== ($image = $this->manager->getImage($category))) { $data['image'] = new \\stdClass(); Controller::addImageToTemplate($data['image'], [ 'singleSRC' => $image->path, 'size' => $this->news_categoryImgSize, 'alt' => $title, 'imageTitle' => $title, ]); } else { $data['image'] = null; } return $data; }. \n### Response: Generate the item.\n\n@param string                 $url\n@param string                 $link\n@param string                 $title\n@param string                 $cssClass\n@param bool                   $isActive\n@param string                 $subitems\n@param NewsCategoryModel|null $category\n\n@return array.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @SuppressWarnings(\"unchecked\") public <C> C getSharedObject(Class<C> sharedType) { return (C) this.sharedObjects.get(sharedType); } \n### Response:", "ground_truth": "Gets a shared Object. Note that object heirarchies are not considered.\n\n@param sharedType the type of the shared Object\n@return the shared Object or null if it is not found", "predict": "Get the shared object for the given type.\n\n@param Class<C> sharedType\n\n@return the shared object for the given type."}, {"ID": 145, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function get_renderer(moodle_page $page, $component, $subtype = null, $target = null) { if (is_null($this->rf)) { $classname = $this->rendererfactory; $this->rf = new $classname($this); } return $this->rf->get_renderer($page, $component, $subtype, $target); }. \n### Response: Get the renderer for a part of Moodle for this theme.\n\n@param moodle_page $page the page we are rendering\n@param string $component the name of part of moodle. E.g. 'core', 'quiz', 'qtype_multichoice'.\n@param string $subtype optional subtype such as 'news' resulting to 'mod_forum_news'\n@param string $target one of rendering target constants\n@return renderer_base the requested renderer..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected String buildHttpsRedirectUrlForRequest(HttpServletRequest request) throws IOException, ServletException { int serverPort = portResolver.getServerPort(request); Integer httpsPort = portMapper.lookupHttpsPort(Integer.valueOf(serverPort)); if (httpsPort != null) { RedirectUrlBuilder urlBuilder = new RedirectUrlBuilder(); urlBuilder.setScheme(\"https\"); urlBuilder.setServerName(request.getServerName()); urlBuilder.setPort(httpsPort.intValue()); urlBuilder.setContextPath(request.getContextPath()); urlBuilder.setServletPath(request.getServletPath()); urlBuilder.setPathInfo(request.getPathInfo()); urlBuilder.setQuery(request.getQueryString()); return urlBuilder.getUrl(); } // Fall through to server-side forward with warning message logger.warn(\"Unable to redirect to HTTPS as no port mapping found for HTTP port \" + serverPort); return null; } \n### Response:", "ground_truth": "Builds a URL to redirect the supplied request to HTTPS. Used to redirect the\ncurrent request to HTTPS, before doing a forward to the login page.", "predict": "Redirect the user to the HTTPS version of the requested page if the HTTP port is not mapped to an HTTPS port.\n\n@param HttpServletRequest request the HTTP request object\n@return the HTTPS redirect URL\n@throws IOException, ServletException the IOException and ServletException thrown by this method\n@logger.warn(\"Unable to redirect to HTTPS as no port mapping found for HTTP port \" + serverPort); the warning message logged by the logger."}, {"ID": 146, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function send($mobileNumber, $message, $messageId = null) { return $this->sendAsync($mobileNumber, $message, $messageId) ->then( function (ResponseInterface $response) { return new SentResponse($response, $this->requestForm); }, function ($exception) { return $this->throwError($exception); } )->wait(); }. \n### Response: Send a message immediately.\n\n@param  string $mobileNumber\n@param  string $message\n@param  string $messageId\n\n@throws inherits \\Jag\\Chikka\\Exceptions\\Exception\n\n@return \\Jag\\Chikka\\Responses\\SentResponse.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public Object invoke(JoinPoint jp, AspectJCallback advisorProceed) { InterceptorStatusToken token = super .beforeInvocation(new MethodInvocationAdapter(jp)); Object result; try { result = advisorProceed.proceedWithObject(); } finally { super.finallyInvocation(token); } return super.afterInvocation(token, result); } \n### Response:", "ground_truth": "Method that is suitable for user with traditional AspectJ-code aspects.\n\n@param jp The AspectJ joint point being invoked which requires a security decision\n@param advisorProceed the advice-defined anonymous class that implements\n{@code AspectJCallback} containing a simple {@code return proceed();} statement\n\n@return The returned value from the method invocation", "predict": "Invoke the method.\n\n@param  JoinPoint jp\n@param  AspectJCallback advisorProceed\n\n@return Object result.\n\nThis method is used to invoke the method beingAspectJ-ized. It is called before and after the method is invoked, and it can be used to add advice to the method. The method first creates an InterceptorStatusToken and then tries to invoke the method using the method invocation adapter. If the method invocation adapter is unable to invoke the method, it will try to proceed with object creation using the advisorProceed. Finally, the method returns the result after the method has been invoked."}, {"ID": 147, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function truncate($string, $length, $alignment = null, $delimString = null) { $alignment = $alignment === null ? 'left' : $alignment; $delimString = $delimString === null ? '...' : $delimString; $delimLen = strlen($delimString); if (!in_array($alignment, ['left', 'right'], true)) { throw new \\InvalidArgumentException( 'Alignment must either be \"left\" or \"right\"' ); } if ($delimLen > $length) { throw new \\InvalidArgumentException( sprintf( 'Delimiter length \"%s\" cannot be greater than truncate length \"%s\"', $delimLen, $length ) ); } if (strlen($string) > $length) { $offset = $length - $delimLen; if ('left' === $alignment) { $string = substr($string, 0, $offset).$delimString; } else { $string = $delimString.substr($string, strlen($string) - $offset); } } return $string; }. \n### Response: Truncates a string.\n\n@param string $string\n@param int    $length\n@param string $alignment   - one of \"left\", \"right\". default left\n@param string $delimString - string to use to mark the truncation\n\n@throws \\InvalidArgumentException\n\n@return string.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private static String hasRole(String role) { Assert.isTrue( !role.startsWith(\"ROLE_\"), () -> role + \" should not start with ROLE_ since ROLE_ is automatically prepended when using hasRole. Consider using hasAuthority or access instead.\"); return \"ROLE_\" + role; } \n### Response:", "ground_truth": "Creates a String for specifying a user requires a role.\n\n@param role the role that should be required which is prepended with ROLE_\nautomatically (i.e. USER, ADMIN, etc). It should not start with ROLE_\n@return the {@link ConfigAttribute} expressed as a String", "predict": "Provides a method to check if a given role is present in the system.\n\n@param string $role - the role to check\n\n@return boolean."}, {"ID": 148, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def prox_max(X, step, thresh=0): \"\"\"Projection onto numbers below `thresh` \"\"\" thresh_ = _step_gamma(step, thresh) above = X - thresh_ > 0 X[above] = thresh_ return X. \n### Response: Projection onto numbers below `thresh`.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private static String[] hasAnyRole(String... roles) { for (int i = 0; i < roles.length; i++) { roles[i] = \"ROLE_\" + roles[i]; } return roles; } \n### Response:", "ground_truth": "Creates a String for specifying that a user requires one of many roles.\n\n@param roles the roles that the user should have at least one of (i.e. ADMIN, USER,\netc). Each role should not start with ROLE_ since it is automatically prepended\nalready.\n@return the {@link ConfigAttribute} expressed as a String", "predict": "Method-level comment for hasAnyRole() method:\n```\nprivate static String[] hasAnyRole(String... roles) {\n    // Method to check if any role is present in the given array of roles\n    // Return an array containing the names of any roles that are present\n    // The method uses a loop to iterate through the array and assign\n    // the role name to each element.\n    //\n    // @param roles - The array of role names to check\n    // @return An array containing the names of any roles that are present in the\n    //            given array of roles\n```"}, {"ID": 149, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (mcs *ConsenterSupport) ProcessConfigUpdateMsg(env *cb.Envelope) (config *cb.Envelope, configSeq uint64, err error) { return mcs.ProcessConfigUpdateMsgVal, mcs.ConfigSeqVal, mcs.ProcessConfigUpdateMsgErr }. \n### Response: // ProcessConfigUpdateMsg returns ProcessConfigUpdateMsgVal, ConfigSeqVal, ProcessConfigUpdateMsgErr.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected UserDetails processAutoLoginCookie(String[] cookieTokens, HttpServletRequest request, HttpServletResponse response) { if (cookieTokens.length != 2) { throw new InvalidCookieException(\"Cookie token did not contain \" + 2 + \" tokens, but contained '\" + Arrays.asList(cookieTokens) + \"'\"); } final String presentedSeries = cookieTokens[0]; final String presentedToken = cookieTokens[1]; PersistentRememberMeToken token = tokenRepository .getTokenForSeries(presentedSeries); if (token == null) { // No series match, so we can't authenticate using this cookie throw new RememberMeAuthenticationException( \"No persistent token found for series id: \" + presentedSeries); } // We have a match for this user/series combination if (!presentedToken.equals(token.getTokenValue())) { // Token doesn't match series value. Delete all logins for this user and throw // an exception to warn them. tokenRepository.removeUserTokens(token.getUsername()); throw new CookieTheftException( messages.getMessage( \"PersistentTokenBasedRememberMeServices.cookieStolen\", \"Invalid remember-me token (Series/token) mismatch. Implies previous cookie theft attack.\")); } if (token.getDate().getTime() + getTokenValiditySeconds() * 1000L < System .currentTimeMillis()) { throw new RememberMeAuthenticationException(\"Remember-me login has expired\"); } // Token also matches, so login is valid. Update the token value, keeping the // *same* series number. if (logger.isDebugEnabled()) { logger.debug(\"Refreshing persistent login token for user '\" + token.getUsername() + \"', series '\" + token.getSeries() + \"'\"); } PersistentRememberMeToken newToken = new PersistentRememberMeToken( token.getUsername(), token.getSeries(), generateTokenData(), new Date()); try { tokenRepository.updateToken(newToken.getSeries(), newToken.getTokenValue(), newToken.getDate()); addCookie(newToken, request, response); } catch (Exception e) { logger.error(\"Failed to update token: \", e); throw new RememberMeAuthenticationException( \"Autologin failed due to data access problem\"); } return getUserDetailsService().loadUserByUsername(token.getUsername()); } \n### Response:", "ground_truth": "Locates the presented cookie data in the token repository, using the series id. If\nthe data compares successfully with that in the persistent store, a new token is\ngenerated and stored with the same series. The corresponding cookie value is set on\nthe response.\n\n@param cookieTokens the series and token values\n\n@throws RememberMeAuthenticationException if there is no stored token corresponding\nto the submitted cookie, or if the token in the persistent store has expired.\n@throws InvalidCookieException if the cookie doesn't have two tokens as expected.\n@throws CookieTheftException if a presented series value is found, but the stored\ntoken is different from the one presented.", "predict": "// This method processes the auto-login cookie for a user and returns the user details.\n// It checks if the cookie contains 2 tokens, and if not, throws an InvalidCookieException.\n// It retrieves the persistent token for the given series and if found, returns it.\n// If no token is found, it throws a RememberMeAuthenticationException with a message indicating\n// that the cookie has been stolen.\n// It updates the token value keeping the same series number and adds the cookie to the request and response.\n// If the token is updated successfully, it returns the updated user details.\n// If any exception is thrown during the process, it throws a RememberMeAuthenticationException with a\n// message indicating the problem."}, {"ID": 150, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function (filePath, options) { gulpUtil.log(gulpUtil.colors.blue(\"jsHint\"), pathHelper.makeRelative(filePath)); var jsHintConfig = jsHintConfigHelper.getRules(xtend({ lookup: false, esnext: false }, options)); gulp.src(filePath) .pipe(plumber()) .pipe(jshint(jsHintConfig)) .pipe(jshint.reporter(jshintStylish)); }. \n### Response: Lints a given file\n\n@param {string} filePath\n@param {{esnext: boolean}} [options].\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void onLoginSuccess(HttpServletRequest request, HttpServletResponse response, Authentication successfulAuthentication) { String username = successfulAuthentication.getName(); logger.debug(\"Creating new persistent login for user \" + username); PersistentRememberMeToken persistentToken = new PersistentRememberMeToken( username, generateSeriesData(), generateTokenData(), new Date()); try { tokenRepository.createNewToken(persistentToken); addCookie(persistentToken, request, response); } catch (Exception e) { logger.error(\"Failed to save persistent token \", e); } } \n### Response:", "ground_truth": "Creates a new persistent login token with a new series number, stores the data in\nthe persistent token repository and adds the corresponding cookie to the response.", "predict": "Provides an implementation for the `onLoginSuccess` method, which handles a successful login from the user.\n\n@param {HttpServletRequest} request\n@param {HttpServletResponse} response\n@param {Authentication} successfulAuthentication.\n\nThis method logs a debug message for the user with the given username, creates a new persistent login for the user, and creates a new persistent token. It then attempts to save the persistent token to the database using the `tokenRepository.createNewToken` method, and adds the persistent token to the user's session using the `addCookie` method. If any errors occur, they are logged."}, {"ID": 151, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String encode(int width, int height, RegionData data[]) { StringBuilder sb = new StringBuilder(); sb.append(width).append(DELIM); sb.append(height); boolean first = false; for(RegionData datum : data) { if(first) { first = false; } else { sb.append(DELIM); } sb.append(datum.getLabel()).append(REGION_DELIM); sb.append(datum.getHighlightedValue()).append(REGION_DELIM); sb.append(encodeHex(datum.getValues())); } return sb.toString(); }. \n### Response: Convert a Graph fields into an opaque String that can later be\nre-assembled into a Graph object. Note that GraphConfiguration\ninformation is NOT encoded into the opaque String.\n@param width of the Graph\n@param height of the Graph\n@param data array of RegionData for the graph\n@return opaque String which can later be used with decode().\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected Authentication attemptSwitchUser(HttpServletRequest request) throws AuthenticationException { UsernamePasswordAuthenticationToken targetUserRequest; String username = request.getParameter(this.usernameParameter); if (username == null) { username = \"\"; } if (this.logger.isDebugEnabled()) { this.logger.debug(\"Attempt to switch to user [\" + username + \"]\"); } UserDetails targetUser = this.userDetailsService.loadUserByUsername(username); this.userDetailsChecker.check(targetUser); // OK, create the switch user token targetUserRequest = createSwitchUserToken(request, targetUser); if (this.logger.isDebugEnabled()) { this.logger.debug(\"Switch User Token [\" + targetUserRequest + \"]\"); } // publish event if (this.eventPublisher != null) { this.eventPublisher.publishEvent(new AuthenticationSwitchUserEvent( SecurityContextHolder.getContext().getAuthentication(), targetUser)); } return targetUserRequest; } \n### Response:", "ground_truth": "Attempt to switch to another user. If the user does not exist or is not active,\nreturn null.\n\n@return The new Authentication request if successfully switched to\nanother user, null otherwise.\n\n@throws UsernameNotFoundException If the target user is not found.\n@throws LockedException if the account is locked.\n@throws DisabledException If the target user is disabled.\n@throws AccountExpiredException If the target user account is expired.\n@throws CredentialsExpiredException If the target user credentials are expired.", "predict": "Attempt to switch to a specific user by providing their username in the request parameter. Load the target user from the userDetailsService and check if they are valid. If they are, create a switch user token by calling the createSwitchUserToken method with the request and target user. If the switch user token is valid, publish an AuthenticationSwitchUserEvent with the target user information."}, {"ID": 152, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public <T> Collector<T> create(long id, Collection<Address> backupOwners, int topologyId) { if (backupOwners.isEmpty()) { return new PrimaryOwnerOnlyCollector<>(); } SingleKeyCollector<T> collector = new SingleKeyCollector<>(id, backupOwners, topologyId); BaseAckTarget prev = collectorMap.put(id, collector); //is it possible the have a previous collector when the topology changes after the first collector is created //in that case, the previous collector must have a lower topology id assert prev == null || prev.topologyId < topologyId : format(\"replaced old collector '%s' by '%s'\", prev, collector); if (trace) { log.tracef(\"Created new collector for %s. BackupOwners=%s\", id, backupOwners); } return collector; }. \n### Response: Creates a collector for a single key write operation.\n@param id           the id from {@link CommandInvocationId}.\n@param backupOwners the backup owners of the key.\n@param topologyId   the current topology id..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected Authentication attemptExitUser(HttpServletRequest request) throws AuthenticationCredentialsNotFoundException { // need to check to see if the current user has a SwitchUserGrantedAuthority Authentication current = SecurityContextHolder.getContext().getAuthentication(); if (null == current) { throw new AuthenticationCredentialsNotFoundException( this.messages.getMessage(\"SwitchUserFilter.noCurrentUser\", \"No current user associated with this request\")); } // check to see if the current user did actual switch to another user // if so, get the original source user so we can switch back Authentication original = getSourceAuthentication(current); if (original == null) { this.logger.debug(\"Could not find original user Authentication object!\"); throw new AuthenticationCredentialsNotFoundException( this.messages.getMessage(\"SwitchUserFilter.noOriginalAuthentication\", \"Could not find original Authentication object\")); } // get the source user details UserDetails originalUser = null; Object obj = original.getPrincipal(); if ((obj != null) && obj instanceof UserDetails) { originalUser = (UserDetails) obj; } // publish event if (this.eventPublisher != null) { this.eventPublisher.publishEvent( new AuthenticationSwitchUserEvent(current, originalUser)); } return original; } \n### Response:", "ground_truth": "Authentication object or null\notherwise.\n\n@throws AuthenticationCredentialsNotFoundException If no\nAuthentication associated with this request.", "predict": "This method attempts to exit a user by switching to another user. It first checks if the current user has a SwitchUserGrantedAuthority, and if not, throws an AuthenticationCredentialsNotFoundException. It then checks if the current user did actually switch to another user, and if so, gets the original source user so that it can switch back. It then gets the source user details and publishes an AuthenticationSwitchUserEvent. If the event is not published, it returns the original Authentication object."}, {"ID": 153, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def follow(user, obj): \"\"\" Make a user follow an object \"\"\" follow, created = Follow.objects.get_or_create(user, obj) return follow. \n### Response: Make a user follow an object.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void setExitUserUrl(String exitUserUrl) { Assert.isTrue(UrlUtils.isValidRedirectUrl(exitUserUrl), \"exitUserUrl cannot be empty and must be a valid redirect URL\"); this.exitUserMatcher = createMatcher(exitUserUrl); } \n### Response:", "ground_truth": "Set the URL to respond to exit user processing.\n\n@param exitUserUrl The exit user URL.", "predict": "Set the exitUserUrl for the user.\n\n"}, {"ID": 154, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static function getModelKeys($model, $includePrimary = true) { $keys = array_map(function ($foreignKey) { array_shift($foreignKey); return array_keys($foreignKey); }, $model->getTableSchema()->foreignKeys); if ($includePrimary) { $keys[] = $model->primaryKey(); } return call_user_func_array('array_merge', $keys); }. \n### Response: Returns all primary and foreign key column names for specified model.\n@param ActiveRecord $model\n@param bool $includePrimary\n@return array names of columns from primary and foreign keys.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @RequestMapping(value = \"/hello.htm\", method = RequestMethod.GET) public ModelAndView displayPublicIndex() { Contact rnd = contactManager.getRandomContact(); return new ModelAndView(\"hello\", \"contact\", rnd); } \n### Response:", "ground_truth": "The public index page, used for unauthenticated users.", "predict": "Displays the public index page for the specified contact manager.\n\n@method public ModelAndView displayPublicIndex()\n@return ModelAndView\n\n"}, {"ID": 155, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def read_object(ctx, pin, object_id): \"\"\" Read arbitrary PIV object. Read PIV object by providing the object id. \\b OBJECT-ID Id of PIV object in HEX. \"\"\" controller = ctx.obj['controller'] def do_read_object(retry=True): try: click.echo(controller.get_data(object_id)) except APDUError as e: if e.sw == SW.NOT_FOUND: ctx.fail('No data found.') elif e.sw == SW.SECURITY_CONDITION_NOT_SATISFIED: _verify_pin(ctx, controller, pin) do_read_object(retry=False) else: raise do_read_object(). \n### Response: Read arbitrary PIV object.\n\n    Read PIV object by providing the object id.\n\n    \\b\n    OBJECT-ID       Id of PIV object in HEX..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @Bean(name = AbstractSecurityWebApplicationInitializer.DEFAULT_FILTER_NAME) public Filter springSecurityFilterChain() throws Exception { boolean hasConfigurers = webSecurityConfigurers != null && !webSecurityConfigurers.isEmpty(); if (!hasConfigurers) { WebSecurityConfigurerAdapter adapter = objectObjectPostProcessor .postProcess(new WebSecurityConfigurerAdapter() { }); webSecurity.apply(adapter); } return webSecurity.build(); } \n### Response:", "ground_truth": "Creates the Spring Security Filter Chain\n@return the {@link Filter} that represents the security filter chain\n@throws Exception", "predict": "Implement Spring Security filter.\n\n    Implement Spring Security filter by applying the WebSecurityConfigurerAdapter.\n\n    If no web security configurers are found, create a new WebSecurityConfigurerAdapter and apply it to the web security.\n\n    return the web security.build();"}, {"ID": 156, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def FloatStringToFloat(float_string, problems=None): \"\"\"Convert a float as a string to a float or raise an exception\"\"\" # Will raise TypeError unless a string match = re.match(r\"^[+-]?\\d+(\\.\\d+)?$\", float_string) # Will raise TypeError if the string can't be parsed parsed_value = float(float_string) if \"x\" in float_string: # This is needed because Python 2.4 does not complain about float(\"0x20\"). # But it does complain about float(\"0b10\"), so this should be enough. raise ValueError() if not match and problems is not None: # Does not match the regex, but it's a float according to Python problems.InvalidFloatValue(float_string) return parsed_value. \n### Response: Convert a float as a string to a float or raise an exception.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public Jwt decode(String token) throws JwtException { JWT jwt = parse(token); if (jwt instanceof SignedJWT) { Jwt createdJwt = createJwt(token, jwt); return validateJwt(createdJwt); } throw new JwtException(\"Unsupported algorithm of \" + jwt.getHeader().getAlgorithm()); } \n### Response:", "ground_truth": "Decode and validate the JWT from its compact claims representation format\n\n@param token the JWT value\n@return a validated {@link Jwt}\n@throws JwtException", "predict": "Decode a JWT token"}, {"ID": 157, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function setLocale($locale) { if ($locale && !preg_match('/[a-z]{2,3}/', $locale)) { throw new \\InvalidArgumentException('Locale must be a valid i18n code'); } $this->i18n = $locale; return $this; }. \n### Response: Defines locale code to use for query\n\n@param string $locale An i18n locale code\n@return $this.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public boolean authorizeUsingAccessExpression() throws IOException { if (SecurityContextHolder.getContext().getAuthentication() == null) { return false; } SecurityExpressionHandler<FilterInvocation> handler = getExpressionHandler(); Expression accessExpression; try { accessExpression = handler.getExpressionParser().parseExpression(getAccess()); } catch (ParseException e) { IOException ioException = new IOException(); ioException.initCause(e); throw ioException; } return ExpressionUtils.evaluateAsBoolean(accessExpression, createExpressionEvaluationContext(handler)); } \n### Response:", "ground_truth": "Make an authorization decision based on a Spring EL expression. See the\n\"Expression-Based Access Control\" chapter in Spring Security for details on what\nexpressions can be used.\n\n@return the result of the authorization decision\n@throws IOException", "predict": "Authorizes the application using an access expression.\n\n@param SecurityExpressionHandler<FilterInvocation> handler The security expression handler\n@return boolean The boolean value indicating whether the authorization is successful or not\n@throws IOException If an error occurs while parsing or evaluating the access expression."}, {"ID": 158, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def on_enter_specimen(self, event): \"\"\" upon enter on the specimen box it makes that specimen the current specimen \"\"\" new_specimen = self.specimens_box.GetValue() if new_specimen not in self.specimens: self.user_warning( \"%s is not a valid specimen with measurement data, aborting\" % (new_specimen)) self.specimens_box.SetValue(self.s) return self.select_specimen(new_specimen) if self.ie_open: self.ie.change_selected(self.current_fit) self.update_selection(). \n### Response: upon enter on the specimen box it makes that specimen the current\n        specimen.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public boolean authorizeUsingUrlCheck() throws IOException { String contextPath = ((HttpServletRequest) getRequest()).getContextPath(); Authentication currentUser = SecurityContextHolder.getContext() .getAuthentication(); return getPrivilegeEvaluator().isAllowed(contextPath, getUrl(), getMethod(), currentUser); } \n### Response:", "ground_truth": "Make an authorization decision based on the URL and HTTP method attributes. True is\nreturned if the user is allowed to access the given URL as defined.\n\n@return the result of the authorization decision\n@throws IOException", "predict": "This method checks if the user is authorized to use a specific URL based on their authentication and the context path of the request. It also retrieves the current URL and method used for authentication."}, {"ID": 159, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (m *MockCommonAPIClient) ServiceRemove(ctx context.Context, serviceID string) error { ret := m.ctrl.Call(m, \"ServiceRemove\", ctx, serviceID) ret0, _ := ret[0].(error) return ret0 }. \n### Response: // ServiceRemove mocks base method.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public Collection<GrantedAuthority> convert(Jwt jwt) { return getScopes(jwt) .stream() .map(authority -> SCOPE_AUTHORITY_PREFIX + authority) .map(SimpleGrantedAuthority::new) .collect(Collectors.toList()); } \n### Response:", "ground_truth": "Extracts the authorities\n@param jwt The {@link Jwt} token\n@return The {@link GrantedAuthority authorities} read from the token scopes", "predict": "// Converts a Jwt to a list of SimpleGrantedAuthority."}, {"ID": 160, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static function createListen($port, $backlog = 128) { $return = @socket_create_listen($port, $backlog); if ($return === false) { throw new SocketException(); } $socket = new self($return); $socket->domain = AF_INET; return $socket; }. \n### Response: Opens a socket on port to accept connections.\n\nCreates a new socket resource of type AF_INET listening on all local interfaces on the given\nport waiting for new connections.\n\n@param int $port    The port on which to listen on all interfaces.\n@param int $backlog The backlog parameter defines the maximum length the queue of pending connections may\ngrow to. SOMAXCONN may be passed as the backlog parameter.\n\n@throws Exception\\SocketException If the socket is not successfully created.\n\n@see Socket::create()\n@see Socket::bind()\n@see Socket::listen()\n\n@return Socket Returns a Socket object based on the successful creation of the php socket..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public CsrfToken generateToken(HttpServletRequest request) { return wrap(request, this.delegate.generateToken(request)); } \n### Response:", "ground_truth": "Generates a new token\n@param request the {@link HttpServletRequest} to use. The\n{@link HttpServletRequest} must have the {@link HttpServletResponse} as an\nattribute with the name of HttpServletResponse.class.getName()", "predict": "Provides a method to generate a CSRF token for the given HttpServletRequest.\n\nThis method wraps the given request and calls the delegate's generateToken() method to generate the token.\n\n@param HttpServletRequest request The HttpServletRequest object to which the token will be added.\n\n@return CsrfToken The generated CSRF token.\n\n@see HttpServletRequest\n@see CsrfToken\n\n@Override protected CsrfToken generateToken(HttpServletRequest request) throws Exception { }"}, {"ID": 161, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def _publish_response(self, slug, message): \"\"\"Publish a response message for a device Args: slug (string): The device slug that we are publishing on behalf of message (dict): A set of key value pairs that are used to create the message that is sent. \"\"\" resp_topic = self.topics.gateway_topic(slug, 'data/response') self._logger.debug(\"Publishing response message: (topic=%s) (message=%s)\", resp_topic, message) self.client.publish(resp_topic, message). \n### Response: Publish a response message for a device\n\n        Args:\n            slug (string): The device slug that we are publishing on behalf of\n            message (dict): A set of key value pairs that are used to create the message\n                that is sent..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @RequestMapping(value = \"/secure/adminPermission.htm\", method = RequestMethod.GET) public ModelAndView displayAdminPage(@RequestParam(\"contactId\") int contactId) { Contact contact = contactManager.getById(Long.valueOf(contactId)); Acl acl = aclService.readAclById(new ObjectIdentityImpl(contact)); Map<String, Object> model = new HashMap<>(); model.put(\"contact\", contact); model.put(\"acl\", acl); return new ModelAndView(\"adminPermission\", \"model\", model); } \n### Response:", "ground_truth": "Displays the permission admin page for a particular contact.", "predict": "Display an admin page\n\n        Args:\n            contactId (int): The ID of the contact to display\n            acl (Acl): The Acl object to display\n        Returns:\n            ModelAndView: A ModelAndView object that displays the admin page\n            \"adminPermission\": A string name of the page\n            \"model\": A string name of the model to display."}, {"ID": 162, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function transformSyncBranch (action, parentAction, path, actions, isSync) { var branch = { name: getFunctionName(action), args: {}, output: null, duration: 0, mutations: [], isAsync: !isSync, outputPath: null, isExecuting: false, hasExecuted: false, path: path.slice(), outputs: null, actionIndex: actions.indexOf(action) === -1 ? actions.push(action) - 1 : actions.indexOf(action) }; var nextAction = parentAction[parentAction.indexOf(action) + 1]; if (!Array.isArray(nextAction) && typeof nextAction === 'object') { parentAction.splice(parentAction.indexOf(nextAction), 1); branch.outputs = Object.keys(nextAction) .reduce((paths, key) => { path = path.concat('outputs', key); paths[key] = transformBranch(nextAction[key], parentAction, path, actions, false); path.pop(); path.pop(); return paths; }, {}); } return branch; }. \n### Response: Transform action to sync branch\n@param {Function} action\n@param {Array|Function} parentAction\n@param {Array} path\n@param {Array} actions\n@param {Boolean} isSync\n@returns {{\nname: *, args: {}, output: null, duration: number,\nmutations: Array, isAsync: boolean, outputPath: null,\nisExecuting: boolean, hasExecuted: boolean,\npath: *, outputs: null, actionIndex: number\n}|undefined}.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @RequestMapping(value = \"/secure/addPermission.htm\", method = RequestMethod.GET) public ModelAndView displayAddPermissionPageForContact( @RequestParam(\"contactId\") long contactId) { Contact contact = contactManager.getById(contactId); AddPermission addPermission = new AddPermission(); addPermission.setContact(contact); Map<String, Object> model = new HashMap<>(); model.put(\"addPermission\", addPermission); model.put(\"recipients\", listRecipients()); model.put(\"permissions\", listPermissions()); return new ModelAndView(\"addPermission\", model); } \n### Response:", "ground_truth": "Displays the \"add permission\" page for a contact.", "predict": "Display addPermission page for contact\n@param {Long} contactId\n@return ModelAndView(\"addPermission\")"}, {"ID": 163, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public MarkdownDocStream indent(int newindent) { if(newindent < indent) { newline = newline == Newline.BREAK ? Newline.NEWLINE : Newline.PAR; } indent = newindent; return this; }. \n### Response: Set the indent depth.\n\n@param newindent Indent depth\n@return {@code this}.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @RequestMapping(value = \"/secure/addPermission.htm\", method = RequestMethod.POST) public String addPermission(AddPermission addPermission, BindingResult result, ModelMap model) { addPermissionValidator.validate(addPermission, result); if (result.hasErrors()) { model.put(\"recipients\", listRecipients()); model.put(\"permissions\", listPermissions()); return \"addPermission\"; } PrincipalSid sid = new PrincipalSid(addPermission.getRecipient()); Permission permission = permissionFactory.buildFromMask(addPermission .getPermission()); try { contactManager.addPermission(addPermission.getContact(), sid, permission); } catch (DataAccessException existingPermission) { existingPermission.printStackTrace(); result.rejectValue(\"recipient\", \"err.recipientExistsForContact\", \"Addition failure.\"); model.put(\"recipients\", listRecipients()); model.put(\"permissions\", listPermissions()); return \"addPermission\"; } return \"redirect:/secure/index.htm\"; } \n### Response:", "ground_truth": "Handles submission of the \"add permission\" form.", "predict": "This method is responsible for indentation of the given MarkdownDocStream. It takes an integer newindent as a parameter and checks if it is less than the current indentation. If it is, it adds a newline character and sets the new indentation to the given value. It then returns the MarkdownDocStream with the updated indentation. The method is used to add a new permission to the user's list of recipients and permissions. If there are any errors in the validation, the method returns a \"addPermission\" message with the list of recipients and permissions. If there is an exception while adding the permission, it prints the stack trace and returns a \"addPermission\" message with the same information. Finally, it returns a \"redirect:/secure/index.htm\" message to redirect the user to the index page."}, {"ID": 164, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function hidden(string $name, array $options = []): FieldTypeInterface { return (new HiddenType($name)) ->setLocale($this->app->getLocale()) ->setViewFactory($this->viewFactory) ->setOptions($options); }. \n### Response: Return a hidden type instance.\n\n@param string $name\n@param array  $options\n\n@return FieldTypeInterface.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @RequestMapping(value = \"/secure/deletePermission.htm\") public ModelAndView deletePermission(@RequestParam(\"contactId\") long contactId, @RequestParam(\"sid\") String sid, @RequestParam(\"permission\") int mask) { Contact contact = contactManager.getById(contactId); Sid sidObject = new PrincipalSid(sid); Permission permission = permissionFactory.buildFromMask(mask); contactManager.deletePermission(contact, sidObject, permission); Map<String, Object> model = new HashMap<>(); model.put(\"contact\", contact); model.put(\"sid\", sidObject); model.put(\"permission\", permission); return new ModelAndView(\"deletePermission\", \"model\", model); } \n### Response:", "ground_truth": "Deletes a permission", "predict": "This method is responsible for deleting a permission from a contact. It takes three parameters:\n\n* `contactId`: The ID of the contact to delete the permission from.\n* `sid`: The ID of theSid object to create.\n* `permission`: The mask of the permission to delete.\n\nIt first retrieves the contact by its ID, creates a newSid object with the given ID, and builds a permission object from the given mask. Then it deletes the permission from the contact,Sid object, and maps the contact,Sid, and permission to a HashMap. Finally, it returns a ModelAndView with the name \"deletePermission\" and the HashMap as its parameters.\n\n@RequestMapping(value = \"/secure/deletePermission.htm\")\npublic ModelAndView deletePermission(@RequestParam(\"contactId\") long contactId, @RequestParam(\"sid\") String sid, @RequestParam(\"permission\") int mask)\n\n@return ModelAndView(\"deletePermission\", \"model\", model)"}, {"ID": 165, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: async def _execute(self, fn, *args, **kwargs): \"\"\"Queue a function with the given arguments for execution.\"\"\" function = partial(fn, *args, **kwargs) future = self._loop.create_future() self._tx.put_nowait((future, function)) return await future. \n### Response: Queue a function with the given arguments for execution..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private static String getRoleWithDefaultPrefix(String defaultRolePrefix, String role) { if (role == null) { return role; } if (defaultRolePrefix == null || defaultRolePrefix.length() == 0) { return role; } if (role.startsWith(defaultRolePrefix)) { return role; } return defaultRolePrefix + role; } \n### Response:", "ground_truth": "Prefixes role with defaultRolePrefix if defaultRolePrefix is non-null and if role\ndoes not already start with defaultRolePrefix.\n\n@param defaultRolePrefix\n@param role\n@return", "predict": "This method returns the role with the given default prefix if it exists, otherwise it returns the role itself."}, {"ID": 166, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (o OpenSSL) EncryptBinaryBytes(passphrase string, plainData []byte, kdf DigestFunc) ([]byte, error) { salt, err := o.GenerateSalt() if err != nil { return nil, err } return o.EncryptBinaryBytesWithSaltAndDigestFunc(passphrase, salt, plainData, kdf) }. \n### Response: // EncryptBinaryBytes encrypts a slice of bytes in a manner compatible to OpenSSL encryption\n// functions using AES-256-CBC as encryption algorithm. This function generates\n// a random salt on every execution..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static UserDetailsResourceFactoryBean fromString(String users) { InMemoryResource resource = new InMemoryResource(users); return fromResource(resource); } \n### Response:", "ground_truth": "Creates a UserDetailsResourceFactoryBean with a resource from the provided String\n\n@param users the string representing the users\n@return the UserDetailsResourceFactoryBean", "predict": "// This method returns a UserDetailsResourceFactoryBean instance based on a string of users.\n// The InMemoryResource is used to store the users information and is returned as a result.\n// The fromResource() method is used to create a new InMemoryResource instance from the provided users string.\n\n"}, {"ID": 167, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def load(dbname, dbmode='a'): \"\"\"Load an existing hdf5 database. Return a Database instance. :Parameters: filename : string Name of the hdf5 database to open. mode : 'a', 'r' File mode : 'a': append, 'r': read-only. \"\"\" if dbmode == 'w': raise AttributeError(\"dbmode='w' not allowed for load.\") db = Database(dbname, dbmode=dbmode) return db. \n### Response: Load an existing hdf5 database.\n\n    Return a Database instance.\n\n    :Parameters:\n      filename : string\n        Name of the hdf5 database to open.\n      mode : 'a', 'r'\n        File mode : 'a': append, 'r': read-only..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public List<String> getAttributeValues(String name) { List<String> result = null; if (attributes != null) { result = attributes.get(name); } if (result == null) { result = Collections.emptyList(); } return result; } \n### Response:", "ground_truth": "Returns the values for a specific attribute\n\n@param name the attribute name\n@return a String array, never null but may be zero length", "predict": "Get the value of a specified attribute.\n\n    :param name: the name of the attribute to retrieve.\n    :return: the value of the specified attribute or a empty list if the attribute is not found.\n   .."}, {"ID": 168, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def dehydrate_point(value): \"\"\" Dehydrator for Point data. :param value: :type value: Point :return: \"\"\" dim = len(value) if dim == 2: return Structure(b\"X\", value.srid, *value) elif dim == 3: return Structure(b\"Y\", value.srid, *value) else: raise ValueError(\"Cannot dehydrate Point with %d dimensions\" % dim). \n### Response: Dehydrator for Point data.\n\n    :param value:\n    :type value: Point\n    :return:.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public String getFirstAttributeValue(String name) { List<String> result = getAttributeValues(name); if (result.isEmpty()) { return null; } else { return result.get(0); } } \n### Response:", "ground_truth": "Returns the first attribute value for a specified attribute\n\n@param name\n@return the first attribute value for a specified attribute, may be null", "predict": "Method-level comment: Returns the first attribute value associated with the given name.\n\n    :param name:\n    :return: The first attribute value associated with the given name. If the list is empty, returns null."}, {"ID": 169, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private function registerStandaloneObjects(ContainerBuilder $container) { //====================================================================// // Load Service Definition $definition = $container->getDefinition('splash.connectors.standalone'); //====================================================================// // Load List of Tagged Objects Services $taggedObjects = $container->findTaggedServiceIds('splash.standalone.object'); //====================================================================// // Register Objects Services foreach ($taggedObjects as $id => $serviceTags) { foreach ($serviceTags as $attributes) { //====================================================================// // Ensure Object Type is set if (!isset($attributes[\"type\"])) { throw new Exception('Tagged Standalone Object Service as no \"type\" attribute.'); } //====================================================================// // Add Object Service to Connector $definition->addMethodCall('registerObjectService', array($attributes[\"type\"], new Reference($id))); } } }. \n### Response: Register Tagged Objects Services to Standalone Connector\n\n@param ContainerBuilder $container\n\n@throws Exception.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static byte[] encode(CharSequence string) { try { ByteBuffer bytes = CHARSET.newEncoder().encode(CharBuffer.wrap(string)); byte[] bytesCopy = new byte[bytes.limit()]; System.arraycopy(bytes.array(), 0, bytesCopy, 0, bytes.limit()); return bytesCopy; } catch (CharacterCodingException e) { throw new IllegalArgumentException(\"Encoding failed\", e); } } \n### Response:", "ground_truth": "Get the bytes of the String in UTF-8 encoded form.", "predict": "Encoding a CharSequence string.\n\n@param CharSequence string\n\n@return byte array."}, {"ID": 170, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def find_best_periods(self, n_periods=5, return_scores=False): \"\"\"Find the top several best periods for the model\"\"\" return self.optimizer.find_best_periods(self, n_periods, return_scores=return_scores). \n### Response: Find the top several best periods for the model.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String decode(byte[] bytes) { try { return CHARSET.newDecoder().decode(ByteBuffer.wrap(bytes)).toString(); } catch (CharacterCodingException e) { throw new IllegalArgumentException(\"Decoding failed\", e); } } \n### Response:", "ground_truth": "Decode the bytes in UTF-8 form into a String.", "predict": "Decoding of a sequence of bytes."}, {"ID": 171, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static function getFlashMessages($label = null, $delete = true) { if (!Atomik::has('session.__FLASH')) { return array(); } if ($label === null) { if ($delete) { return Atomik::delete('session.__FLASH'); } return Atomik::get('session.__FLASH'); } if (!Atomik::has(\"session.__FLASH.$label\")) { return array(); } if ($delete) { return Atomik::delete(\"session.__FLASH.$label\"); } return Atomik::get(\"session.__FLASH.$label\"); }. \n### Response: Returns the flash messages saved in the session\n\n@internal\n@param string $label Whether to only retreives messages from this label. When null or 'all', returns all messages\n@param bool $delete Whether to delete messages once retrieved\n@return array An array of messages if the label is specified or an array of array message.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private <T extends AccessibleObject> String[] lookupParameterNames( ParameterNameFactory<T> parameterNameFactory, T t) { Annotation[][] parameterAnnotations = parameterNameFactory.findParameterAnnotations(t); int parameterCount = parameterAnnotations.length; String[] paramNames = new String[parameterCount]; boolean found = false; for (int i = 0; i < parameterCount; i++) { Annotation[] annotations = parameterAnnotations[i]; String parameterName = findParameterName(annotations); if (parameterName != null) { found = true; paramNames[i] = parameterName; } } return found ? paramNames : null; } \n### Response:", "ground_truth": "Gets the parameter names or null if not found.\n\n@param parameterNameFactory the {@link ParameterNameFactory} to use\n@param t the {@link AccessibleObject} to find the parameter names on (i.e. Method\nor Constructor)\n@return the parameter names or null", "predict": "Returns the names of all parameters found in the given object.\n\n@param parameterNameFactory The factory that returns the annotations for the given parameter.\n@param t The parameter object.\n@return The array of parameter names if found, or null if not found.\n\nNote: This method is used to find the names of all parameters in an object, and it returns the names of all parameters found or null if not found. It uses the findParameterAnnotations() method from the ParameterNameFactory class to find the annotations for the given parameter. The findParameterName() method is used to find the name of the parameter."}, {"ID": 172, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (serviceInstance *ServiceInstance) UnmarshalJSON(data []byte) error { var ccServiceInstance struct { Metadata internal.Metadata Entity struct { Name string `json:\"name\"` SpaceGUID string `json:\"space_guid\"` ServiceGUID string `json:\"service_guid\"` ServicePlanGUID string `json:\"service_plan_guid\"` Type string `json:\"type\"` Tags []string `json:\"tags\"` DashboardURL string `json:\"dashboard_url\"` RouteServiceURL string `json:\"route_service_url\"` LastOperation LastOperation `json:\"last_operation\"` } } err := cloudcontroller.DecodeJSON(data, &ccServiceInstance) if err != nil { return err } serviceInstance.GUID = ccServiceInstance.Metadata.GUID serviceInstance.Name = ccServiceInstance.Entity.Name serviceInstance.SpaceGUID = ccServiceInstance.Entity.SpaceGUID serviceInstance.ServiceGUID = ccServiceInstance.Entity.ServiceGUID serviceInstance.ServicePlanGUID = ccServiceInstance.Entity.ServicePlanGUID serviceInstance.Type = constant.ServiceInstanceType(ccServiceInstance.Entity.Type) serviceInstance.Tags = ccServiceInstance.Entity.Tags serviceInstance.DashboardURL = ccServiceInstance.Entity.DashboardURL serviceInstance.RouteServiceURL = ccServiceInstance.Entity.RouteServiceURL serviceInstance.LastOperation = ccServiceInstance.Entity.LastOperation return nil }. \n### Response: // UnmarshalJSON helps unmarshal a Cloud Controller Service Instance response..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @RequestMapping(value = \"/secure/add.htm\", method = RequestMethod.POST) public String addContact(WebContact form, BindingResult result) { validator.validate(form, result); if (result.hasErrors()) { return \"add\"; } Contact contact = new Contact(form.getName(), form.getEmail()); contactManager.create(contact); return \"redirect:/secure/index.htm\"; } \n### Response:", "ground_truth": "Handles the submission of the contact form, creating a new instance if the username\nand email are valid.", "predict": "// This method adds a Contact to the system using the provided form and results from a validation process. It creates a new Contact object and then calls the contactManager.create() method to persist the contact.."}, {"ID": 173, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private function getRequestedRoles() { $rules = $this->config->get('Rules', false); if (!$rules) { return []; } // see which of the rules matches the path and extract the requested roles for access $returnRoles = []; foreach ($rules as $r) { $path = $r->get('Path', false); if ($path && $this->testPath($path)) { $roles = $r->get('Roles', []); if ($this->isString($roles)) { $roles = (array)$roles; } else { $roles = $roles->toArray(); } // covert the role names to Role instances foreach ($roles as $role) { $returnRoles[] = new Role($role); } return $returnRoles; } } return []; }. \n### Response: Returns an array of roles required by the access rule.\n\n@return array.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override protected Collection<ConfigAttribute> findAttributes(Method method, Class<?> targetClass) { if (targetClass == null) { return null; } return findAttributesSpecifiedAgainst(method, targetClass); } \n### Response:", "ground_truth": "Will walk the method inheritance tree to find the most specific declaration\napplicable.", "predict": "Retrieves the specified attributes from the target class and returns them as a collection.\n\n@return collection of ConfigAttribute objects."}, {"ID": 174, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function (sqlContext, logical) { var jvmObject; if (arguments[0] instanceof org.apache.spark.sql.execution.QueryExecution) { var jvmObject = arguments[0]; } else { jvmObject = new org.apache.spark.sql.execution.QueryExecution(Utils.unwrapObject(sqlContext), Utils.unwrapObject(logical)); } JavaWrapper.call(this, jvmObject); }. \n### Response: The primary workflow for executing relational queries using Spark.  Designed to allow easy\naccess to the intermediate phases of query execution for developers.\n\nWhile this is not a public class, we should avoid changing the function names for the sake of\nchanging them, because a lot of developers use the feature for debugging.\n@classdesc\n \n@param {module:eclairjs/sql.SQLContext} sqlContext\n@param {LogicalPlan} logical\n\n@class\n@memberof module:eclairjs/sql/execution.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private void addSecureMethod(RegisteredMethod method, List<ConfigAttribute> attr) { Assert.notNull(method, \"RegisteredMethod required\"); Assert.notNull(attr, \"Configuration attribute required\"); if (logger.isInfoEnabled()) { logger.info(\"Adding secure method [\" + method + \"] with attributes [\" + attr + \"]\"); } this.methodMap.put(method, attr); } \n### Response:", "ground_truth": "Add configuration attributes for a secure method.\n\n@param method the method to be secured\n@param attr required authorities associated with the method", "predict": "This method adds a secure method to the methodMap, which is used to store the secure methods in the Spark application.\n\nIt first checks if the method and attributes are not null, and if they are, it ensures that they are not null and logs a message indicating the purpose of adding the method and attributes.\n\nThen, it adds the method and attributes to the methodMap.\n\n@methoddesc\n\nAdds a secure method to the methodMap.\n\n@param {RegisteredMethod} method\n@param {List<ConfigAttribute>> attr\n\n@return void\n\n@memberof module:eclairjs/sql/execution.\n\n"}, {"ID": 175, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def parse_hash direction = clause.values.first field = clause.keys.first.to_s [\"$order_by\", [\"$#{direction}\", field]] end. \n### Response: Parses a hash clause\n\n * *Returns* :\n   - A ReQON formatted array\n * *Examples* :\n    @clause = { test: \"asc\"}\n    @clause.parse\n    => [\"$order_by\", [\"$asc\", \"test\"]].\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public Collection<ConfigAttribute> getAllConfigAttributes() { Set<ConfigAttribute> allAttributes = new HashSet<>(); for (List<ConfigAttribute> attributeList : methodMap.values()) { allAttributes.addAll(attributeList); } return allAttributes; } \n### Response:", "ground_truth": "Obtains the configuration attributes explicitly defined against this bean.\n\n@return the attributes explicitly defined against this bean", "predict": "getAllConfigAttributes(): Returns a collection of all ConfigAttribute objects associated with the current method.\n\n * *Returns* :\n   - A collection of ConfigAttribute objects\n * *Examples* :\n    @method = \"getAllConfigAttributes\"\n    @allAttributes.parse\n    => [\"$order_by\", [\"$asc\", \"test\"]].\n\n"}, {"ID": 176, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def validate(self): \"\"\" check that the block can be run \"\"\" if self.required and len(self.selected()) == 0: raise ReliureError(\"No component selected for block '%s'\" % self.name). \n### Response: check that the block can be run.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private boolean isMatch(String methodName, String mappedName) { return (mappedName.endsWith(\"*\") && methodName.startsWith(mappedName.substring(0, mappedName.length() - 1))) || (mappedName.startsWith(\"*\") && methodName.endsWith(mappedName .substring(1, mappedName.length()))); } \n### Response:", "ground_truth": "Return if the given method name matches the mapped name. The default implementation\nchecks for \"xxx\" and \"xxx\" matches.\n\n@param methodName the method name of the class\n@param mappedName the name in the descriptor\n\n@return if the names match", "predict": "This method determines whether two strings are identical by checking if the last character of one string is a wildcard and the first character of the other string starts with a wildcard followed by a number (e.g. \"*.txt\" and \".txt\" are identical, as are \".txt\" and \"txt.\")."}, {"ID": 177, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func RequiresAppInPing(requiresAppInPing bool) Option { return func(r *Ringpop) error { r.config.RequiresAppInPing = requiresAppInPing return nil } }. \n### Response: // RequiresAppInPing configures if ringpop node should reject pings\n// that don't contain app name.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public C anyRequest() { Assert.state(!this.anyRequestConfigured, \"Can't configure anyRequest after itself\"); C configurer = requestMatchers(ANY_REQUEST); this.anyRequestConfigured = true; return configurer; } \n### Response:", "ground_truth": "Maps any request.\n\n@return the object that is chained after creating the {@link RequestMatcher}", "predict": "// AnyRequest configures the request matching strategy using the\n// requestMatchers function and sets the anyRequestConfigured flag to true."}, {"ID": 178, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def write_recovery(page, injList): \"\"\" Write injection recovery plots to markup.page object page \"\"\" th = ['']+injList td = [] plots = ['sky_error_time','sky_error_mchirp','sky_error_distance'] text = { 'sky_error_time':'Sky error vs time',\\ 'sky_error_mchirp':'Sky error vs mchirp',\\ 'sky_error_distance':'Sky error vs distance' } for row in plots: pTag = text[row] d = [pTag] for inj in injList: plot = markup.page() plot = markup.page() p = \"%s/efficiency_OFFTRIAL_1/found_%s.png\" % (inj, row) plot.a(href=p, title=pTag) plot.img(src=p) plot.a.close() d.append(plot()) td.append(d) page = write_table(page, th, td) return page. \n### Response: Write injection recovery plots to markup.page object page.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void handleBindException(String userDn, String username, Throwable cause) { if (logger.isDebugEnabled()) { logger.debug(\"Failed to bind as \" + userDn + \": \" + cause); } } \n### Response:", "ground_truth": "Allows subclasses to inspect the exception thrown by an attempt to bind with a\nparticular DN. The default implementation just reports the failure to the debug\nlogger.", "predict": "Handling a bindException in a service layer."}, {"ID": 179, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def get_root_folder(service_instance): ''' Returns the root folder of a vCenter. service_instance The Service Instance Object for which to obtain the root folder. ''' try: log.trace('Retrieving root folder') return service_instance.RetrieveContent().rootFolder except vim.fault.NoPermission as exc: log.exception(exc) raise salt.exceptions.VMwareApiError( 'Not enough permissions. Required privilege: ' '{}'.format(exc.privilegeId)) except vim.fault.VimFault as exc: log.exception(exc) raise salt.exceptions.VMwareApiError(exc.msg) except vmodl.RuntimeFault as exc: log.exception(exc) raise salt.exceptions.VMwareRuntimeError(exc.msg). \n### Response: Returns the root folder of a vCenter.\n\n    service_instance\n        The Service Instance Object for which to obtain the root folder..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @Transactional(readOnly = true) public Contact getRandomContact() { logger.debug(\"Returning random contact\"); Random rnd = new Random(); List<Contact> contacts = contactDao.findAll(); int getNumber = rnd.nextInt(contacts.size()); return contacts.get(getNumber); } \n### Response:", "ground_truth": "This is a public method.", "predict": "returning random contact\n\n    logger.debug\n        Returning random contact\n    Random rnd = new Random();\n    List<Contact> contacts = contactDao.findAll();\n    int getNumber = rnd.nextInt(contacts.size());\n    return contacts.get(getNumber);\n}\n\n@Transactional(readOnly = true)\n\npublic Contact getRandomContact()\n\nThis method is a public one and it is annotated with `@Transactional(readOnly = true)` which means that it will be executed in a transaction and only if the transaction is successful will the method return a value. The method logs a debug message to the console before executing the query to generate a random contact. It then retrieves all the contacts from the `contactDao` and generates an random number between 0 and the size of the list. Finally, it returns the contact with the specified number."}, {"ID": 180, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: static function getInstance() { $driver = static::getLibrary(); try { $instance = new $driver(); } catch (\\Exception $e) { throw new Exception('Unable to create an instance of ' . $driver); } if (!self::isInstanceOf($instance, CryptInterface::class)) { throw new Exception(Exception::MSG_INVALID_ARG, ['driver', CryptInterface::class]); } return $instance; }. \n### Response: Create an instance of a crypt driver.\n\n\n@throws \\Webiny\\Component\\StdLib\\Exception\\Exception\n@return CryptInterface.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected final void clearAuthenticationAttributes(HttpServletRequest request) { HttpSession session = request.getSession(false); if (session == null) { return; } session.removeAttribute(WebAttributes.AUTHENTICATION_EXCEPTION); } \n### Response:", "ground_truth": "Removes temporary authentication-related data which may have been stored in the\nsession during the authentication process.", "predict": "Clear authentication attributes from the request session.\n\n@throws HttpServletRequestException\n@return void."}, {"ID": 181, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function render($showChrome = true) { $html = \"\"; foreach ($this->items as $item) { $html .= $item->render($showChrome); } return $html; }. \n### Response: Render the list of items\n\n@param  boolean $showChrome [description]\n@return [type]              [description].\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static Field getField(Class<?> clazz, String fieldName) throws IllegalStateException { Assert.notNull(clazz, \"Class required\"); Assert.hasText(fieldName, \"Field name required\"); try { return clazz.getDeclaredField(fieldName); } catch (NoSuchFieldException nsf) { // Try superclass if (clazz.getSuperclass() != null) { return getField(clazz.getSuperclass(), fieldName); } throw new IllegalStateException(\"Could not locate field '\" + fieldName + \"' on class \" + clazz); } } \n### Response:", "ground_truth": "Attempts to locate the specified field on the class.\n\n@param clazz the class definition containing the field\n@param fieldName the name of the field to locate\n\n@return the Field (never null)\n\n@throws IllegalStateException if field could not be found", "predict": "Get the field value of a specific class, using the specified name.\n\n@param  Class<?> clazz [description]\n@return  String fieldName [description]."}, {"ID": 182, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (g *Graph) Check(x *Graph) (bool, string) { for i := 0; i < g.Len(); i++ { ns := g.GetAt(i) nx := x.GetAt(i) b := ns.checkNode(nx) if !b { if ns != nil { return false, \"want \" + ns.ThisString() + \", got \" + nx.ThisString() } } ok, mess := ns.Check(nx) if !ok { return false, mess } } return true, \"\" }. \n### Response: // Check returns true if the Graph given as a parameter conforms to the\n// schema represented by the receiver Graph..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected String createServiceUrl(final HttpServletRequest request, final HttpServletResponse response) { return CommonUtils.constructServiceUrl(null, response, this.serviceProperties.getService(), null, this.serviceProperties.getArtifactParameter(), this.encodeServiceUrlWithSessionId); } \n### Response:", "ground_truth": "Constructs a new Service Url. The default implementation relies on the CAS client\nto do the bulk of the work.\n@param request the HttpServletRequest\n@param response the HttpServlet Response\n@return the constructed service url. CANNOT be NULL.", "predict": "// Create a service URL using the service properties and encode it with the session ID."}, {"ID": 183, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function AnnotateText(\\Google\\Cloud\\Language\\V1\\AnnotateTextRequest $argument, $metadata = [], $options = []) { return $this->_simpleRequest('/google.cloud.language.v1.LanguageService/AnnotateText', $argument, ['\\Google\\Cloud\\Language\\V1\\AnnotateTextResponse', 'decode'], $metadata, $options); }. \n### Response: A convenience method that provides all the features that analyzeSentiment,\nanalyzeEntities, and analyzeSyntax provide in one call.\n@param \\Google\\Cloud\\Language\\V1\\AnnotateTextRequest $argument input argument\n@param array $metadata metadata\n@param array $options call options.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected String createRedirectUrl(final String serviceUrl) { return CommonUtils.constructRedirectUrl(this.loginUrl, this.serviceProperties.getServiceParameter(), serviceUrl, this.serviceProperties.isSendRenew(), false); } \n### Response:", "ground_truth": "Constructs the Url for Redirection to the CAS server. Default implementation relies\non the CAS client to do the bulk of the work.\n\n@param serviceUrl the service url that should be included.\n@return the redirect url. CANNOT be NULL.", "predict": "This method creates a redirect URL that will be used to redirect the client to the next step in the authentication process.\n\n@param serviceUrl service URL\n@return redirect URL."}, {"ID": 184, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public ArrayList<OvhSenderAvailable> serviceName_sendersAvailableForValidation_GET(String serviceName, OvhSenderRefererEnum referer) throws IOException { String qPath = \"/sms/{serviceName}/sendersAvailableForValidation\"; StringBuilder sb = path(qPath, serviceName); query(sb, \"referer\", referer); String resp = exec(qPath, \"GET\", sb.toString(), null); return convertTo(resp, t3); }. \n### Response: The senders that are attached to your personal informations or OVH services and that can be automatically validated\n\nREST: GET /sms/{serviceName}/sendersAvailableForValidation\n@param referer [required] Information type\n@param serviceName [required] The internal name of your SMS offer.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private String extractPrefix(String encPass) { if (!encPass.startsWith(\"{\")) { return null; } int secondBrace = encPass.lastIndexOf('}'); if (secondBrace < 0) { throw new IllegalArgumentException( \"Couldn't find closing brace for SHA prefix\"); } return encPass.substring(0, secondBrace + 1); } \n### Response:", "ground_truth": "Returns the hash prefix or null if there isn't one.", "predict": "This method extracts the SHA prefix from a string. It starts by checking if the string starts with a '{' character. If it does, it returns null. If not, it uses the last '}' character to determine the end of the prefix. If the end of the prefix is not found, it throws an IllegalArgumentException with a message indicating that the SHA prefix could not be found. The method returns the substring from the first '}' character to the second '}' character."}, {"ID": 185, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def export_vtkjs(self, filename, compress_arrays=False): \"\"\" Export the current rendering scene as a VTKjs scene for rendering in a web browser \"\"\" if not hasattr(self, 'ren_win'): raise RuntimeError('Export must be called before showing/closing the scene.') if isinstance(vtki.FIGURE_PATH, str) and not os.path.isabs(filename): filename = os.path.join(vtki.FIGURE_PATH, filename) return export_plotter_vtkjs(self, filename, compress_arrays=compress_arrays). \n### Response: Export the current rendering scene as a VTKjs scene for\n        rendering in a web browser.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void commence(HttpServletRequest request, HttpServletResponse response, AuthenticationException arg2) throws IOException, ServletException { if (logger.isDebugEnabled()) { logger.debug(\"Pre-authenticated entry point called. Rejecting access\"); } response.sendError(HttpServletResponse.SC_FORBIDDEN, \"Access Denied\"); } \n### Response:", "ground_truth": "Always returns a 403 error code to the client.", "predict": "commence():\n        Pre-authenticated entry point called. Rejecting access.\n        \n         response.sendError(HttpServletResponse.SC_FORBIDDEN, \"Access Denied\");"}, {"ID": 186, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (b *Bucket) SetWithMeta(k string, flags int, exp int, v interface{}) (*MutationToken, error) { return b.WriteWithMT(k, flags, exp, v, 0) }. \n### Response: // Set a value in this bucket with with flags.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private void checkFilterStack(List<Filter> filters) { checkForDuplicates(SecurityContextPersistenceFilter.class, filters); checkForDuplicates(UsernamePasswordAuthenticationFilter.class, filters); checkForDuplicates(SessionManagementFilter.class, filters); checkForDuplicates(BasicAuthenticationFilter.class, filters); checkForDuplicates(SecurityContextHolderAwareRequestFilter.class, filters); checkForDuplicates(JaasApiIntegrationFilter.class, filters); checkForDuplicates(ExceptionTranslationFilter.class, filters); checkForDuplicates(FilterSecurityInterceptor.class, filters); } \n### Response:", "ground_truth": "Checks the filter list for possible errors and logs them", "predict": "// Check if there are any duplicate filters in the list."}, {"ID": 187, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def _unpack(self, record, key, expected): \"\"\"Replaces the attr dict at the given key with an instance of a Model\"\"\" attrs = record.get(key) if attrs is None: return obj = unpack_from_dynamodb( attrs=attrs, expected=expected, model=self.model, engine=self.engine ) object_loaded.send(self.engine, engine=self.engine, obj=obj) record[key] = obj. \n### Response: Replaces the attr dict at the given key with an instance of a Model.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @SuppressWarnings(\"unchecked\") final Class<? extends Throwable>[] getRegisteredTypes() { Set<Class<? extends Throwable>> typeList = this.extractorMap.keySet(); return typeList.toArray(new Class[typeList.size()]); } \n### Response:", "ground_truth": "Returns an array containing the classes for which extractors are registered. The\norder of the classes is the order in which comparisons will occur for resolving a\nmatching extractor.\n\n@return the types for which extractors are registered", "predict": "This method returns an array of the registered types in the extractor map, which is a key-value pair of class and type. The method is marked with @SuppressWarnings(\"unchecked\") to indicate that it may return unexpected types in some cases."}, {"ID": 188, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void ioctl(long command, int value) throws IOException { final int response = directIOCTL(getFileDescriptor(), command, value); if(response < 0) throw new LinuxFileException(); }. \n### Response: Runs an ioctl value command on a file descriptor.\n\n@param command ioctl command\n@param value int ioctl value\n@return result of operation. Zero if everything is OK, less than zero if there was an error..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private Throwable extractCause(Throwable throwable) { for (Map.Entry<Class<? extends Throwable>, ThrowableCauseExtractor> entry : extractorMap .entrySet()) { Class<? extends Throwable> throwableType = entry.getKey(); if (throwableType.isInstance(throwable)) { ThrowableCauseExtractor extractor = entry.getValue(); return extractor.extractCause(throwable); } } return null; } \n### Response:", "ground_truth": "Extracts the cause of the given throwable using an appropriate extractor.\n\n@param throwable the Throwable (not null\n@return the cause, may be null if none could be resolved", "predict": "Extracts the cause of a given throwable and stores it in the extractorMap.\n\n@param throwable Throwable to extract the cause from.\n@return the cause of the throwable or null if it could not be extracted.\n\nNote: This method iterates through a map of extractor classes and their corresponding cause extractors. If a class is found that implements the extractor, it returns the cause of the throwable it is associated with. If no matching class is found, or if the throwable is not a Throwable, it returns null."}, {"ID": 189, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function waitForLogout(self, cb) { if (!self.loggingout) return cb(); setTimeout(function() { waitForLogout(self, cb); }, 1); }. \n### Response: Wait for a logout in process to happen.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @SuppressWarnings({ \"unchecked\", \"rawtypes\" }) private String registerAccessManager(ParserContext pc, boolean jsr250Enabled, BeanDefinition expressionVoter) { BeanDefinitionBuilder accessMgrBuilder = BeanDefinitionBuilder .rootBeanDefinition(AffirmativeBased.class); ManagedList voters = new ManagedList(4); if (expressionVoter != null) { voters.add(expressionVoter); } voters.add(new RootBeanDefinition(RoleVoter.class)); voters.add(new RootBeanDefinition(AuthenticatedVoter.class)); if (jsr250Enabled) { voters.add(new RootBeanDefinition(Jsr250Voter.class)); } accessMgrBuilder.addConstructorArgValue(voters); BeanDefinition accessManager = accessMgrBuilder.getBeanDefinition(); String id = pc.getReaderContext().generateBeanName(accessManager); pc.registerBeanComponent(new BeanComponentDefinition(accessManager, id)); return id; } \n### Response:", "ground_truth": "Register the default AccessDecisionManager. Adds the special JSR 250 voter jsr-250\nis enabled and an expression voter if expression-based access control is enabled.\n@return", "predict": "Registers an access manager bean with the specified properties and uses the BeanComponentDefinition to register it with the parser context."}, {"ID": 190, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func Convert_build_SecretSpec_To_v1_SecretSpec(in *build.SecretSpec, out *v1.SecretSpec, s conversion.Scope) error { return autoConvert_build_SecretSpec_To_v1_SecretSpec(in, out, s) }. \n### Response: // Convert_build_SecretSpec_To_v1_SecretSpec is an autogenerated conversion function..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static Set<String> authorityListToSet( Collection<? extends GrantedAuthority> userAuthorities) { Assert.notNull(userAuthorities, \"userAuthorities cannot be null\"); Set<String> set = new HashSet<>(userAuthorities.size()); for (GrantedAuthority authority : userAuthorities) { set.add(authority.getAuthority()); } return set; } \n### Response:", "ground_truth": "Converts an array of GrantedAuthority objects to a Set.\n@return a Set of the Strings obtained from each call to\nGrantedAuthority.getAuthority()", "predict": "// AuthorityListToSet is a static method in the class SetUtil that converts a collection of GrantedAuthority to a Set of strings.."}, {"ID": 191, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public final T parseText(String value, ICalDataType dataType, ICalParameters parameters, ParseContext context) { T property = _parseText(value, dataType, parameters, context); property.setParameters(parameters); return property; }. \n### Response: Unmarshals a property from a plain-text iCalendar data stream.\n@param value the value as read off the wire\n@param dataType the data type of the property value. The property's VALUE\nparameter is used to determine the data type. If the property has no\nVALUE parameter, then this parameter will be set to the property's\ndefault datatype. Note that the VALUE parameter is removed from the\nproperty's parameter list after it has been read.\n@param parameters the parsed parameters\n@param context the parse context\n@return the unmarshalled property\n@throws CannotParseException if the scribe could not parse the property's\nvalue\n@throws SkipMeException if the property should not be added to the final\n{@link ICalendar} object\n@throws DataModelConversionException if the property should be converted\nto something different in order to adhere to the 2.0 data model (only\nthrown when parsing 1.0 vCals).\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private boolean matches(byte[] expected, byte[] actual) { if (expected.length != actual.length) { return false; } int result = 0; for (int i = 0; i < expected.length; i++) { result |= expected[i] ^ actual[i]; } return result == 0; } \n### Response:", "ground_truth": "Constant time comparison to prevent against timing attacks.", "predict": "This method performs a byte comparison between two byte arrays. It returns true if the arrays match, and false otherwise."}, {"ID": 192, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: final public function viewOptions($ident = null) { // No options defined if (!$this->viewOptions) { return []; } // No ident defined if (!$ident) { return $this->viewOptions; } // Invalid ident if (!isset($this->viewOptions[$ident])) { return []; } // Success! return $this->viewOptions[$ident]; }. \n### Response: View options.\n@param string $ident The display ident (ex: charcoal/admin/property/display/text).\n@return array Should ALWAYS be an array..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void setDefaultFailureUrl(String defaultFailureUrl) { Assert.isTrue(UrlUtils.isValidRedirectUrl(defaultFailureUrl), () -> \"'\" + defaultFailureUrl + \"' is not a valid redirect URL\"); this.defaultFailureUrl = defaultFailureUrl; } \n### Response:", "ground_truth": "The URL which will be used as the failure destination.\n\n@param defaultFailureUrl the failure URL, for example \"/loginFailed.jsp\".", "predict": "setDefaultFailureUrl.\n@param string $defaultFailureUrl The default failure URL.\n@return void Should ALWAYS return void.."}, {"ID": 193, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def update_expiration_date(connection, new_date) xml = connection.make_xml('VulnerabilityExceptionUpdateExpirationDateRequest', { 'exception-id' => @id, 'expiration-date' => new_date }) connection.execute(xml, '1.2').success end. \n### Response: Update the expiration date for this exception.\n The expiration time cannot be in the past.\n\n @param [Connection] connection Connection to security console.\n @param [String] new_date Date in the format \"YYYY-MM-DD\".\n @return [Boolean] Whether the update was successfully submitted..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void setResolveHiddenInputs( Function<HttpServletRequest, Map<String, String>> resolveHiddenInputs) { Assert.notNull(resolveHiddenInputs, \"resolveHiddenInputs cannot be null\"); this.resolveHiddenInputs = resolveHiddenInputs; } \n### Response:", "ground_truth": "Sets a Function used to resolve a Map of the hidden inputs where the key is the\nname of the input and the value is the value of the input. Typically this is used\nto resolve the CSRF token.\n@param resolveHiddenInputs the function to resolve the inputs", "predict": "Set the resolveHiddenInputs method for the HttpServletRequest object.\n\nThis method sets the resolveHiddenInputs method for the HttpServletRequest object, which is used to resolve any hidden input values that may be present in the request. The method takes a Function<HttpServletRequest, Map<String, String>> object as its argument, which is used to resolve any hidden input values that may be present in the request. By setting this method to a non-null value, the HttpServletRequest object is prepared to handle any hidden input values that may be present in the request."}, {"ID": 194, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (s *Computer) SetComputerId(v string) *Computer { s.ComputerId = &v return s }. \n### Response: // SetComputerId sets the ComputerId field's value..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private static String buildRequestUrl(String servletPath, String requestURI, String contextPath, String pathInfo, String queryString) { StringBuilder url = new StringBuilder(); if (servletPath != null) { url.append(servletPath); if (pathInfo != null) { url.append(pathInfo); } } else { url.append(requestURI.substring(contextPath.length())); } if (queryString != null) { url.append(\"?\").append(queryString); } return url.toString(); } \n### Response:", "ground_truth": "Obtains the web application-specific fragment of the URL.", "predict": "// BuildRequestUrl builds the request URL.."}, {"ID": 195, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def _ParsePathSpecification( self, knowledge_base, searcher, file_system, path_specification, path_separator): \"\"\"Parses a file system for a preprocessing attribute. Args: knowledge_base (KnowledgeBase): to fill with preprocessing information. searcher (dfvfs.FileSystemSearcher): file system searcher to preprocess the file system. file_system (dfvfs.FileSystem): file system to be preprocessed. path_specification (dfvfs.PathSpec): path specification that contains the artifact value data. path_separator (str): path segment separator. Raises: PreProcessFail: if the preprocessing fails. \"\"\" try: file_entry = searcher.GetFileEntryByPathSpec(path_specification) except IOError as exception: relative_path = searcher.GetRelativePath(path_specification) if path_separator != file_system.PATH_SEPARATOR: relative_path_segments = file_system.SplitPath(relative_path) relative_path = '{0:s}{1:s}'.format( path_separator, path_separator.join(relative_path_segments)) raise errors.PreProcessFail(( 'Unable to retrieve file entry: {0:s} with error: ' '{1!s}').format(relative_path, exception)) if file_entry: self._ParseFileEntry(knowledge_base, file_entry). \n### Response: Parses a file system for a preprocessing attribute.\n\n    Args:\n      knowledge_base (KnowledgeBase): to fill with preprocessing information.\n      searcher (dfvfs.FileSystemSearcher): file system searcher to preprocess\n          the file system.\n      file_system (dfvfs.FileSystem): file system to be preprocessed.\n      path_specification (dfvfs.PathSpec): path specification that contains\n          the artifact value data.\n      path_separator (str): path segment separator.\n\n    Raises:\n      PreProcessFail: if the preprocessing fails..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static boolean isAbsoluteUrl(String url) { if (url == null) { return false; } final Pattern ABSOLUTE_URL = Pattern.compile(\"\\\\A[a-z0-9.+-]+://.*\", Pattern.CASE_INSENSITIVE); return ABSOLUTE_URL.matcher(url).matches(); } \n### Response:", "ground_truth": "Decides if a URL is absolute based on whether it contains a valid scheme name, as\ndefined in RFC 1738.", "predict": "Method-level comment:\n```\n    public static boolean isAbsoluteUrl(String url) {\n        if (url == null) {\n            return false;\n        }\n        final Pattern ABSOLUTE_URL = Pattern.compile(\"\\\\A[a-z0-9.+-]+://.*\", Pattern.CASE_INSENSITIVE);\n        return ABSOLUTE_URL.matcher(url).matches();\n    }\n```\nExplanation:\nThis method is used to determine if a given URL is an absolute URL. It first checks if the input string is null, and if so, returns false. Then, it creates a pattern that matches absolute URLs, which is defined by the `ABSOLUTE_URL` constant. The `matcher` method is then used to match the input string against the pattern, and if it matches, the method returns true. If the input string is not an absolute URL, the method returns false."}, {"ID": 196, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function persistTranslatable(Translatable $translatable) { $translations = $translatable->getTranslations(); if (!isset($translations[$this->defaultLanguage])) { throw new \\LogicException('Not possible to persist a Translatable without default language!'); } $original = $translations[$this->defaultLanguage]; unset($translations[$this->defaultLanguage]); foreach ($translations as $language => $translation) { $this->translationCollection->upsert( [ 'original' => $original, 'language' => $language ], [ 'original' => $original, 'language' => $language, 'localized' => $translation ] ); } $this->removeFromCache($original); }. \n### Response: persists a translatable to database\n\n@param Translatable $translatable the translatable\n\n@return void.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public List<OpenIDAttribute> createAttributeList(String identifier) { for (Map.Entry<Pattern, List<OpenIDAttribute>> entry : idToAttributes.entrySet()) { if (entry.getKey().matcher(identifier).matches()) { return entry.getValue(); } } return Collections.emptyList(); } \n### Response:", "ground_truth": "Iterates through the patterns stored in the map and returns the list of attributes\ndefined for the first match. If no match is found, returns an empty list.", "predict": "creates an empty list of OpenIDAttribute for the given identifier\n\n@param String identifier the identifier\n\n@return List<OpenIDAttribute>."}, {"ID": 197, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func KopsFileUrl(file string, assetBuilder *assets.AssetBuilder) (*url.URL, *hashing.Hash, error) { base, err := BaseUrl() if err != nil { return nil, nil, err } base.Path = path.Join(base.Path, file) fileUrl, hash, err := assetBuilder.RemapFileAndSHA(base) if err != nil { return nil, nil, err } return fileUrl, hash, nil }. \n### Response: // KopsFileUrl returns the base url for the distribution of kops - in particular for nodeup & docker images.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: Serializable identifierFrom(Serializable identifier, ResultSet resultSet) throws SQLException { if (isString(identifier) && hasValidClassIdType(resultSet) && canConvertFromStringTo(classIdTypeFrom(resultSet))) { identifier = convertFromStringTo((String) identifier, classIdTypeFrom(resultSet)); } else { // Assume it should be a Long type identifier = convertToLong(identifier); } return identifier; } \n### Response:", "ground_truth": "Converts the raw type from the database into the right Java type. For most applications the 'raw type' will be Long, for some applications\nit could be String.\n@param identifier The identifier from the database\n@param resultSet  Result set of the query\n@return The identifier in the appropriate target Java type. Typically Long or UUID.\n@throws SQLException", "predict": "// This method returns the Serializable identifier for the given identifier, based on its type and the result set."}, {"ID": 198, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private Journal.JournalEntry readInternal() throws IOException { if (mInputStream == null) { return null; } JournalEntry entry = mInputStream.mReader.readEntry(); if (entry != null) { return entry; } if (mInputStream.mFile.isIncompleteLog()) { // Incomplete logs may end early. return null; } else { Preconditions.checkState(mInputStream.mFile.isCompletedLog(), \"Expected log to be either checkpoint, incomplete, or complete\"); ProcessUtils.fatalError(LOG, \"Journal entry %s was truncated\", mNextSequenceNumber); return null; } }. \n### Response: Reads the next journal entry.\n\n@return the journal entry, null if no journal entry is found.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void createEntries(final MutableAcl acl) { if (acl.getEntries().isEmpty()) { return; } jdbcOperations.batchUpdate(insertEntry, new BatchPreparedStatementSetter() { public int getBatchSize() { return acl.getEntries().size(); } public void setValues(PreparedStatement stmt, int i) throws SQLException { AccessControlEntry entry_ = acl.getEntries().get(i); Assert.isTrue(entry_ instanceof AccessControlEntryImpl, \"Unknown ACE class\"); AccessControlEntryImpl entry = (AccessControlEntryImpl) entry_; stmt.setLong(1, ((Long) acl.getId()).longValue()); stmt.setInt(2, i); stmt.setLong(3, createOrRetrieveSidPrimaryKey(entry.getSid(), true) .longValue()); stmt.setInt(4, entry.getPermission().getMask()); stmt.setBoolean(5, entry.isGranting()); stmt.setBoolean(6, entry.isAuditSuccess()); stmt.setBoolean(7, entry.isAuditFailure()); } }); } \n### Response:", "ground_truth": "Creates a new row in acl_entry for every ACE defined in the passed MutableAcl\nobject.\n\n@param acl containing the ACEs to insert", "predict": "Creates and updates entries in the acl."}, {"ID": 199, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def get_agents_with_name(name, stmts): \"\"\"Return all agents within a list of statements with a particular name.\"\"\" return [ag for stmt in stmts for ag in stmt.agent_list() if ag is not None and ag.name == name]. \n### Response: Return all agents within a list of statements with a particular name..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void createObjectIdentity(ObjectIdentity object, Sid owner) { Long sidId = createOrRetrieveSidPrimaryKey(owner, true); Long classId = createOrRetrieveClassPrimaryKey(object.getType(), true, object.getIdentifier().getClass()); jdbcOperations.update(insertObjectIdentity, classId, object.getIdentifier().toString(), sidId, Boolean.TRUE); } \n### Response:", "ground_truth": "Creates an entry in the acl_object_identity table for the passed ObjectIdentity.\nThe Sid is also necessary, as acl_object_identity has defined the sid column as\nnon-null.\n\n@param object to represent an acl_object_identity for\n@param owner for the SID column (will be created if there is no acl_sid entry for\nthis particular Sid already)", "predict": "Create an object identity for the given object and owner.\n\nThis method is used to create an object identity for an object. It first creates or retrieves theSidPrimaryKey, which is used to identify the object, and then creates or retrieves the classPrimaryKey, which is used to identify the class of the object. Finally, it uses the jdbcOperations.update method to insert the object into the database."}, {"ID": 200, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected function setFlash($type,$message,$parameters = array(),$domain = 'flashes') { return $this->container->get('session')->getBag('flashes')->add($type,$message); }. \n### Response: Envia un mensaje flash\n\n@param array $type success|error\n@param type $message\n@param type $parameters\n@param type $domain\n@return type.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void updateObjectIdentity(MutableAcl acl) { Long parentId = null; if (acl.getParentAcl() != null) { Assert.isInstanceOf(ObjectIdentityImpl.class, acl.getParentAcl() .getObjectIdentity(), \"Implementation only supports ObjectIdentityImpl\"); ObjectIdentityImpl oii = (ObjectIdentityImpl) acl.getParentAcl() .getObjectIdentity(); parentId = retrieveObjectIdentityPrimaryKey(oii); } Assert.notNull(acl.getOwner(), \"Owner is required in this implementation\"); Long ownerSid = createOrRetrieveSidPrimaryKey(acl.getOwner(), true); int count = jdbcOperations.update(updateObjectIdentity, parentId, ownerSid, Boolean.valueOf(acl.isEntriesInheriting()), acl.getId()); if (count != 1) { throw new NotFoundException(\"Unable to locate ACL to update\"); } } \n### Response:", "ground_truth": "Updates an existing acl_object_identity row, with new information presented in the\npassed MutableAcl object. Also will create an acl_sid entry if needed for the Sid\nthat owns the MutableAcl.\n\n@param acl to modify (a row must already exist in acl_object_identity)\n\n@throws NotFoundException if the ACL could not be found to update.", "predict": "Implementa un method `updateObjectIdentity` en el service `MyService` para actualizar los objectIdentity de un acl.\n\n@param MutableAcl acl\n@return void.\n\nEl acl se actualiza con los objectIdentity de su parentAcl, si existen. Si no existen, se actualiza el objectIdentity de la acl.\n\n@see setFlash()\n\n@type MutableAcl\n@domain 'objectIdentity'"}, {"ID": 201, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func postAPIMetricsStore(redirectURL string) func(*rest.ResponseWriter, *rest.Request) { return func(w *rest.ResponseWriter, request *rest.Request) { proxyRequest, _ := http.NewRequest(request.Method, redirectURL, request.Body) for k, v := range request.Header { proxyRequest.Header[k] = v } proxyResponse, err := client.Do(proxyRequest) if err == nil { defer proxyResponse.Body.Close() w.WriteHeader(proxyResponse.StatusCode) io.Copy(w, proxyResponse.Body) } else { glog.Errorf(\"Failed to proxy request: %s\", err) w.WriteHeader(http.StatusInternalServerError) } } }. \n### Response: // postAPIMetricsStore redirects the post request to the configured address\n// Any additional parameters should be encoded in the redirect url.  For\n// example, encode the containers tenant and service id..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void saveRequest(HttpServletRequest request, HttpServletResponse response) { if (requestMatcher.matches(request)) { DefaultSavedRequest savedRequest = new DefaultSavedRequest(request, portResolver); if (createSessionAllowed || request.getSession(false) != null) { // Store the HTTP request itself. Used by // AbstractAuthenticationProcessingFilter // for redirection after successful authentication (SEC-29) request.getSession().setAttribute(this.sessionAttrName, savedRequest); logger.debug(\"DefaultSavedRequest added to Session: \" + savedRequest); } } else { logger.debug(\"Request not saved as configured RequestMatcher did not match\"); } } \n### Response:", "ground_truth": "Stores the current request, provided the configuration properties allow it.", "predict": "// Save the HTTP request to the session.  Used by // AbstractAuthenticationProcessingFilter // for redirection after successful authentication (SEC-29)\n// If the requestMatcher matches the request, save the // request to the session.\n// If createSessionAllowed and the request has a // session, store the request to the session.\n// Otherwise, log an error and do not save the // request."}, {"ID": 202, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public VectorTile addTile(TileCode tileCode) { String code = tileCode.toString(); VectorTile tile = tiles.get(code); if (tile == null) { tile = new VectorTile(tileCode, calcBoundsForTileCode(tileCode), this); tile.setPictureStyle(new PictureStyle(layer.getOpacity())); tiles.put(code, tile); } return tile; }. \n### Response: Adds the tile with the specified code to the cache or returns the tile if it's already in the cache.\n\n@param tileCode\nA {@link TileCode} instance..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static ServerWebExchangeMatcher pathMatchers(HttpMethod method, String... patterns) { List<ServerWebExchangeMatcher> matchers = new ArrayList<>(patterns.length); for (String pattern : patterns) { matchers.add(new PathPatternParserServerWebExchangeMatcher(pattern, method)); } return new OrServerWebExchangeMatcher(matchers); } \n### Response:", "ground_truth": "Creates a matcher that matches on the specific method and any of the provided patterns.\n@param method the method to match on. If null, any method will be matched\n@param patterns the patterns to match on\n@return the matcher to use", "predict": "This method returns a new instance of the OrServerWebExchangeMatcher class, which matches either of the specified HTTP methods and patterns.\n\n@param method\nThe HTTP method to match.\n@param patterns\nA list of patterns to match."}, {"ID": 203, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function SearchBox_requestingFocusOnKeyboardInputHandler() { this._fireEvent(EventName.receivingfocusonkeyboardinput, null); if (_Global.document.activeElement !== this._inputElement) { try { this._inputElement.focus(); } catch (e) { } } }. \n### Response: Type to search helpers.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static ServerWebExchangeMatcher anyExchange() { // we don't use a lambda to ensure a unique equals and hashcode // which otherwise can cause problems with adding multiple entries to an ordered LinkedHashMap return new ServerWebExchangeMatcher() { @Override public Mono<MatchResult> matches(ServerWebExchange exchange) { return ServerWebExchangeMatcher.MatchResult.match(); } }; } \n### Response:", "ground_truth": "Matches any exchange\n@return the matcher to use", "predict": "This method returns the matcher for any server web exchange. It does not use a lambda to ensure a unique equals and hashcode, which can cause problems with adding multiple entries to an ordered LinkedHashMap."}, {"ID": 204, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static function last(array $data, ?string $key = null) { if (count($data) === 0) { return null; } $element = end($data); if ($key !== null && is_array($element) && isset($element[$key])) { return $element[$key]; } return $element; }. \n### Response: Get last element of array.\n\n@param mixed[] $data\n@param string $key Get key from element if array. Default null.\n@return mixed.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static TextEncryptor delux(CharSequence password, CharSequence salt) { return new HexEncodingTextEncryptor(stronger(password, salt)); } \n### Response:", "ground_truth": "Creates a text encryptor that uses \"stronger\" password-based encryption. Encrypted\ntext is hex-encoded.\n\n@param password the password used to generate the encryptor's secret key; should\nnot be shared\n@see Encryptors#stronger(CharSequence, CharSequence)", "predict": "Encrypt text using Luxon.\n\n@param CharSequence $password Encrypt password.\n@param CharSequence $salt Encrypt salt.\n@return TextEncryptor.\n\n"}, {"ID": 205, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (b *Buffer) Bytes() []byte { if b == nil || b.C_gss_buffer_t == nil || b.C_gss_buffer_t.length == 0 { return make([]byte, 0) } return C.GoBytes(b.C_gss_buffer_t.value, C.int(b.C_gss_buffer_t.length)) }. \n### Response: // Bytes returns the contents of a Buffer as a byte slice..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static TextEncryptor text(CharSequence password, CharSequence salt) { return new HexEncodingTextEncryptor(standard(password, salt)); } \n### Response:", "ground_truth": "Creates a text encryptor that uses \"standard\" password-based encryption. Encrypted\ntext is hex-encoded.\n\n@param password the password used to generate the encryptor's secret key; should\nnot be shared\n@see Encryptors#standard(CharSequence, CharSequence)", "predict": "// Text returns the textEncryptor instance with the specified password and salt.."}, {"ID": 206, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected function incrementTag($current, $major, $minor, $patch, $preRelease, $preIncrement) { // Current version $this->line(''); $this->info(\"The current release version is: {$current}.\"); // Simple options $tag['major'] = 'v'.($major+1).'.0.0'; $tag['minor'] = \"v{$major}.\".($minor+1).'.0'; $tag['patch'] = \"v{$major}.{$minor}.\".($patch+1); // Next RC versions $majorPlus = $major + 1; $minorPlus = $minor + 1; $tag['rcmajor'] = \"v{$majorPlus}.0.0-rc\"; $tag['rcminor'] = \"v{$major}.{$minorPlus}.0-rc\"; // Increment RC version if ($preRelease) { $extra = ((($preIncrement + 1) > 1) ? '.'.($preIncrement + 1) : ''); $tag['rc'] = \"v{$major}.{$minor}.{$patch}-rc{$extra}\"; } // Check if user provided the release $release = $this->argument(\"release\"); // If release not specified, ask the user if (!$release) { $this->line(''); $release = array_search($this->choice(\"Please select the next release version:\", $tag), $tag); } // Check valid release if (!isset($tag[$release])) { $this->error(\"Unknown release type: {$release}\"); return false; } return $tag[$release]; }. \n### Response: Increments the tag, based on argument or user input\n\n@param  string  $current\n@param  integer $major\n@param  integer $minor\n@param  integer $patch\n@param  sting   $preRelease\n@param  integer $preIncrement\n@return string.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static TextEncryptor queryableText(CharSequence password, CharSequence salt) { return new HexEncodingTextEncryptor(new AesBytesEncryptor(password.toString(), salt)); } \n### Response:", "ground_truth": "Creates an encryptor for queryable text strings that uses standard password-based\nencryption. Uses a 16-byte all-zero initialization vector so encrypting the same\ndata results in the same encryption result. This is done to allow encrypted data to\nbe queried against. Encrypted text is hex-encoded.\n\n@param password the password used to generate the encryptor's secret key; should\nnot be shared\n@param salt a hex-encoded, random, site-global salt value to use to generate the\nsecret key", "predict": "Returns an instance of the HexEncodingTextEncryptor class, which is an implementation of the TextEncryptor interface that uses the AesBytesEncryptor class to encrypt text.\n\n@param  CharSequence  $password\n@param  CharSequence  $salt\n@return HexEncodingTextEncryptor."}, {"ID": 207, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func valueIsUnpacker(v reflect.Value) (reflect.Value, bool) { for { if implementsUnpacker(v.Type()) { return v, true } if !v.CanAddr() { break } v = v.Addr() } return reflect.Value{}, false }. \n### Response: // valueIsUnpacker checks if v implements the Unpacker interface.\n// If there exists a pointer to v, the pointer to v is also tested..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void writeHeaders(HttpServletRequest request, HttpServletResponse response) { if (XFrameOptionsMode.ALLOW_FROM.equals(frameOptionsMode)) { String allowFromValue = this.allowFromStrategy.getAllowFromValue(request); if (XFrameOptionsMode.DENY.getMode().equals(allowFromValue)) { if (!response.containsHeader(XFRAME_OPTIONS_HEADER)) { response.setHeader(XFRAME_OPTIONS_HEADER, XFrameOptionsMode.DENY.getMode()); } } else if (allowFromValue != null) { if (!response.containsHeader(XFRAME_OPTIONS_HEADER)) { response.setHeader(XFRAME_OPTIONS_HEADER, XFrameOptionsMode.ALLOW_FROM.getMode() + \" \" + allowFromValue); } } } else { response.setHeader(XFRAME_OPTIONS_HEADER, frameOptionsMode.getMode()); } } \n### Response:", "ground_truth": "Writes the X-Frame-Options header value, overwritting any previous value.\n\n@param request the servlet request\n@param response the servlet response", "predict": "// Writes the XFrameOptions header if the XFrameOptionsMode is ALLOW_FROM.\n// If the XFrameOptionsMode is DENY, sets the XFrameOptionsMode header.\n\n// This method checks if the request has an XFrameOptions value for the ALLOW_FROM header,\n// and if the value matches the one specified in the XFrameOptionsMode.\n// If the allowFromValue is not null, it is used to determine if the response should include\n// an XFrameOptions header.\n// If the allowFromValue is null, the XFrameOptionsMode header is not included in the response."}, {"ID": 208, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def set_model_domain(model, domain): \"\"\" Sets the domain on the ONNX model. :param model: instance of an ONNX model :param domain: string containing the domain name of the model Example: :: from onnxmltools.utils import set_model_domain onnx_model = load_model(\"SqueezeNet.onnx\") set_model_domain(onnx_model, \"com.acme\") \"\"\" if model is None or not isinstance(model, onnx_proto.ModelProto): raise ValueError(\"Model is not a valid ONNX model.\") if not convert_utils.is_string_type(domain): raise ValueError(\"Domain must be a string type.\") model.domain = domain. \n### Response: Sets the domain on the ONNX model.\n\n    :param model: instance of an ONNX model\n    :param domain: string containing the domain name of the model\n\n    Example:\n\n    ::\n        from onnxmltools.utils import set_model_domain\n        onnx_model = load_model(\"SqueezeNet.onnx\")\n        set_model_domain(onnx_model, \"com.acme\").\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected String determineTargetUrl(HttpServletRequest request, HttpServletResponse response, Authentication authentication) { return determineTargetUrl(request, response); } \n### Response:", "ground_truth": "Builds the target URL according to the logic defined in the main class Javadoc\n\n@since 5.2", "predict": "Determines the target URL for the request.\n\n    :param request: HttpServletRequest object containing the HTTP request parameters\n    :param resp HttpServletResponse object containing the HTTP response parameters\n    :param authentication: Authentication object for the current user\n\n    Example:\n\n    ::\n        from javax.servlet.http import HttpServletRequest, HttpServletResponse, Authentication\n        request = HttpServletRequest(\"http://example.com/api/request\")\n        response = HttpServletResponse(\"http://example.com/api/response\")\n        authentication = Authentication(\"username\", \"password\")\n        targetUrl = determineTargetUrl(request, response, authentication).\n\nNote: This method is part of the HttpServletResponse class in Java, and it is used to determine the target URL for the HTTP response. It takes in three parameters: the request, the response, and the authentication object. The method returns the target URL for the response."}, {"ID": 209, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function getHelper($helper, $config = array()) { $name = (string) $helper; if (!isset($this->_helpers[$name])) { if (is_string($helper) && strpos($helper, '.') === false) { $identifier = clone $this->getIdentifier(); $identifier->path = array('template','helper'); $identifier->name = $helper; } else { $identifier = $this->getIdentifier($helper); } register_default(array( 'identifier' => $identifier, 'prefix' => $this )); //Create the template helper $helper = $this->getService($identifier, array_merge($config, array('template' => $this))); //Check the helper interface if (!($helper instanceof LibBaseTemplateHelperInterface)) { throw new LibBaseTemplateHelperException(\"Template helper $identifier does not implement LibBaseTemplateHelperInterface\"); } $this->_helpers[$name] = $helper; } return $this->_helpers[$name]; }. \n### Response: Get a template helper.\n\n@param\tmixed\tAn object that implements AnObjectIdentifiable, an object that\nimplements AnServiceIdentifierInterface or valid identifier string\n@param\tmixed\tParameters to be passed to the helper\n\n@return LibBaseTemplateHelperInterface.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected String determineTargetUrl(HttpServletRequest request, HttpServletResponse response) { if (isAlwaysUseDefaultTargetUrl()) { return defaultTargetUrl; } // Check for the parameter and use that if available String targetUrl = null; if (targetUrlParameter != null) { targetUrl = request.getParameter(targetUrlParameter); if (StringUtils.hasText(targetUrl)) { logger.debug(\"Found targetUrlParameter in request: \" + targetUrl); return targetUrl; } } if (useReferer && !StringUtils.hasLength(targetUrl)) { targetUrl = request.getHeader(\"Referer\"); logger.debug(\"Using Referer header: \" + targetUrl); } if (!StringUtils.hasText(targetUrl)) { targetUrl = defaultTargetUrl; logger.debug(\"Using default Url: \" + targetUrl); } return targetUrl; } \n### Response:", "ground_truth": "Builds the target URL according to the logic defined in the main class Javadoc.", "predict": "Determine the target URL based on the request parameters and if available, use the Referer header or default target URL.\n\n@param\tHttpServletRequest\tThe request object\n@param\tHttpServletResponse\tThe response object\n\n@return\tThe target URL."}, {"ID": 210, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function addItem(Varien_Object $item) { if (!$item instanceof Aoe_Scheduler_Model_Job) { Mage::throwException( sprintf( 'Invalid model class. Expected \"%s\" and received \"%s\".', 'Aoe_Scheduler_Model_Job', get_class($item) ) ); } $jobCode = $item->getJobCode(); if (!$jobCode) { Mage::throwException('Jobs must have a job code'); } if (isset($this->_items[$jobCode])) { Mage::throwException('Job with the same job code \"' . $item->getJobCode() . '\" already exist'); } $this->_items[$jobCode] = $item; return $this; }. \n### Response: Adding item to item array\n\n@param   Aoe_Scheduler_Model_Job $item\n\n@return  $this.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void setTargetUrlParameter(String targetUrlParameter) { if (targetUrlParameter != null) { Assert.hasText(targetUrlParameter, \"targetUrlParameter cannot be empty\"); } this.targetUrlParameter = targetUrlParameter; } \n### Response:", "ground_truth": "If this property is set, the current request will be checked for this a parameter\nwith this name and the value used as the target URL if present.\n\n@param targetUrlParameter the name of the parameter containing the encoded target\nURL. Defaults to null.", "predict": "Setting targetUrlParameter\n\n@param   String   $targetUrlParameter\n\n@return  void."}, {"ID": 211, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def set_short_url(self): \"\"\" Generates the ``short_url`` attribute if the model does not already have one. Used by the ``set_short_url_for`` template tag and ``TweetableAdmin``. If no sharing service is defined (bitly is the one implemented, but others could be by overriding ``generate_short_url``), the ``SHORT_URL_UNSET`` marker gets stored in the DB. In this case, ``short_url`` is temporarily (eg not persisted) set to host + ``get_absolute_url`` - this is so that we don't permanently store ``get_absolute_url``, since it may change over time. \"\"\" if self.short_url == SHORT_URL_UNSET: self.short_url = self.get_absolute_url_with_host() elif not self.short_url: self.short_url = self.generate_short_url() self.save(). \n### Response: Generates the ``short_url`` attribute if the model does not\n        already have one. Used by the ``set_short_url_for`` template\n        tag and ``TweetableAdmin``.\n\n        If no sharing service is defined (bitly is the one implemented,\n        but others could be by overriding ``generate_short_url``), the\n        ``SHORT_URL_UNSET`` marker gets stored in the DB. In this case,\n        ``short_url`` is temporarily (eg not persisted) set to\n        host + ``get_absolute_url`` - this is so that we don't\n        permanently store ``get_absolute_url``, since it may change\n        over time..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private Directory getDirectoryWithImmediateParentPopulated(final Long id) { return getJdbcTemplate().queryForObject(SELECT_FROM_DIRECTORY_SINGLE, new Object[] { id }, new RowMapper<Directory>() { public Directory mapRow(ResultSet rs, int rowNumber) throws SQLException { Long parentDirectoryId = new Long(rs .getLong(\"parent_directory_id\")); Directory parentDirectory = Directory.ROOT_DIRECTORY; if (parentDirectoryId != null && !parentDirectoryId.equals(new Long(-1))) { // Need to go and lookup the parent, so do that first parentDirectory = getDirectoryWithImmediateParentPopulated(parentDirectoryId); } Directory directory = new Directory(rs .getString(\"directory_name\"), parentDirectory); FieldUtils.setProtectedFieldValue(\"id\", directory, new Long(rs.getLong(\"id\"))); return directory; } }); } \n### Response:", "ground_truth": "Executes recursive SQL as needed to build a full Directory hierarchy of objects", "predict": "This method retrieves a directory with the specified ID from the database using the JdbcTemplate. It then checks if the parent directory with the specified ID is null or not. If it is not null and not -1, it retrieves the parent directory using the getDirectoryWithImmediateParentPopulated() method and stores it in the directory object. Finally, it sets the protected field \"id\" of the directory object to the new ID value and returns the directory object.\n\nIt is used to retrieve a directory with immediate parent, if one exists, otherwise it will look for the parent directory using the \"getDirectoryWithImmediateParentPopulated()\" method.\n\nNote that the \"FieldUtils.setProtectedFieldValue()\" is used to set the protected field \"id\" of the directory object to the new ID value.\n\nPlease add comments to the above code to make it more understandable."}, {"ID": 212, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (w *Webhook) HasCreateEvent() bool { return w.SendEverything || (w.ChooseEvents && w.HookEvents.Create) }. \n### Response: // HasCreateEvent returns true if hook enabled create event..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public DistinguishedName buildDn(String username) { DistinguishedName dn = new DistinguishedName(userDnBase); dn.add(usernameAttribute, username); return dn; } \n### Response:", "ground_truth": "Assembles the Distinguished Name that should be used the given username.", "predict": "// BuildDn returns a DistinguishedName object representing the DN of the given username.."}, {"ID": 213, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function(obj, callback, error) { var that = this objs = (this.isArray(obj) ? obj : [obj]).map(function(o) { if (!o.key) { o.key = that.uuid() } return o }), ins = \"INSERT OR REPLACE INTO \" + this.record + \" (value, timestamp, id) VALUES (?,?,?)\", win = function() { if (callback) { that.lambda(callback).call(that, that.isArray(obj) ? objs : objs[0]) } }, error = error || function() {}, insvals = [], ts = now() try { for (var i = 0, l = objs.length; i < l; i++) { insvals[i] = [JSON.stringify(objs[i]), ts, objs[i].key]; } } catch (e) { fail(e) throw e; } that.db.transaction(function(t) { for (var i = 0, l = objs.length; i < l; i++) t.executeSql(ins, insvals[i]) }, function(e, i) { fail(e, i) }, win) return this }. \n### Response: you think thats air you're breathing now?.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private Map<Class<? extends Object>, Object> createSharedObjects() { Map<Class<? extends Object>, Object> sharedObjects = new HashMap<Class<? extends Object>, Object>(); sharedObjects.putAll(localConfigureAuthenticationBldr.getSharedObjects()); sharedObjects.put(UserDetailsService.class, userDetailsService()); sharedObjects.put(ApplicationContext.class, context); sharedObjects.put(ContentNegotiationStrategy.class, contentNegotiationStrategy); sharedObjects.put(AuthenticationTrustResolver.class, trustResolver); return sharedObjects; } \n### Response:", "ground_truth": "Creates the shared objects\n\n@return the shared Objects", "predict": "This method creates a shared objects map for the application."}, {"ID": 214, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private function prepareDB() { $dbpool = DBPool::init($this->db_config); // var_dump($dbpool->cap + $dbpool->activeCount, $dbpool->queue->isEmpty(), $dbpool->queue->count()); if ($dbpool->queue->isEmpty() && ($dbpool->cap + $dbpool->activeCount >= $this->config['max_pool_size'])) { \\throw_error('MySQL pool is empty...', 12009); } if ($dbpool->cap < $this->config['idle_pool_size'] || ($dbpool->queue->isEmpty() && $dbpool->cap < $this->config['max_pool_size']) ) { // var_dump('........................reconnect........................'); $this->reconnect(); $dbpool->activeCount++; return false; } else { // var_dump('........................using pool........................'); $this->db = $dbpool->out($this->config['idle_pool_size']); return true; } }. \n### Response: Get one MySQL connect from pool\n\n@return bool.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private void configureJaasUsingLoop() throws IOException { String loginConfigUrl = convertLoginConfigToUrl(); boolean alreadySet = false; int n = 1; final String prefix = \"login.config.url.\"; String existing; while ((existing = Security.getProperty(prefix + n)) != null) { alreadySet = existing.equals(loginConfigUrl); if (alreadySet) { break; } n++; } if (!alreadySet) { String key = prefix + n; log.debug(\"Setting security property [\" + key + \"] to: \" + loginConfigUrl); Security.setProperty(key, loginConfigUrl); } } \n### Response:", "ground_truth": "Loops through the login.config.url.1,login.config.url.2 properties looking for the\nlogin configuration. If it is not set, it will be set to the last available\nlogin.config.url.X property.", "predict": "Configure JAX-RS application with login credentials using loop\n\n@ throws IOException\n\nprivate void configureJaasUsingLoop() throws IOException {\nString loginConfigUrl = convertLoginConfigToUrl();\nboolean alreadySet = false;\nint n = 1;\nfinal String prefix = \"login.config.url.\";\nString existing;\nwhile ((existing = Security.getProperty(prefix + n))!= null) {\n alreadySet = existing.equals(loginConfigUrl);\nif (alreadySet) {\nbreak;\n}\nn++;\n}\nif (!alreadySet) {\nString key = prefix + n;\nlog.debug(\"Setting security property [\" + key + \"] to: \" + loginConfigUrl);\nSecurity.setProperty(key, loginConfigUrl);\n}\n}"}, {"ID": 215, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def CreateFile(filename): \"\"\"Create a GCS file with GCS client lib. Args: filename: GCS filename. Returns: The corresponding string blobkey for this GCS file. \"\"\" with gcs.open(filename, 'w') as f: f.write('abcde\\n') blobstore_filename = '/gs' + filename return blobstore.create_gs_key(blobstore_filename). \n### Response: Create a GCS file with GCS client lib.\n\n  Args:\n    filename: GCS filename.\n\n  Returns:\n    The corresponding string blobkey for this GCS file..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String getCurrentDate() { long now = System.currentTimeMillis(); if ((now - currentDateGenerated) > 1000) { synchronized (format) { if ((now - currentDateGenerated) > 1000) { currentDateGenerated = now; currentDate = format.format(new Date(now)); } } } return currentDate; } \n### Response:", "ground_truth": "Gets the current date in HTTP format.\n\n@return Current date in HTTP format", "predict": "getCurrentDate():\n\nThis method returns the current date and time in the format specified by the format string.\n\nArgs:\n\n* now: The current time in milliseconds.\n* format: The format string for the date and time.\n\nReturns:\n\n* The current date and time in the format specified by the format string.\n\nNote:\n\n* This method is synchronized to ensure that only one thread can access the current date and time at a time.\n* If the current date and time is greater than 1000 milliseconds since the last time the method was called, the method synchronizes the access to the currentDateGenerated variable to ensure that no other thread can modify it before the currentDate is updated.\n\nNote: This method is synchronized to ensure that only one thread can access the current date and time at a time."}, {"ID": 216, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void setItem(java.util.Collection<ImportJobResponse> item) { if (item == null) { this.item = null; return; } this.item = new java.util.ArrayList<ImportJobResponse>(item); }. \n### Response: A list of import jobs for the application.\n\n@param item\nA list of import jobs for the application..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private static Long internalParseDate(String value, DateFormat[] formats) { Date date = null; for (int i = 0; (date == null) && (i < formats.length); i++) { try { date = formats[i].parse(value); } catch (ParseException ignored) { } } if (date == null) { return null; } return new Long(date.getTime()); } \n### Response:", "ground_truth": "Parses date with given formatters.\n\n@param value The string to parse\n@param formats Array of formats to use\n\n@return Parsed date (or null if no formatter mached)", "predict": "This method parses a date string using a specified format and returns a Long value representing the date.\n\n@param value\nThe date string to be parsed.\n\n@param formats\nThe format of the date string to be parsed.\n\n"}, {"ID": 217, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function send() { $blError = true; // error if (($sOxid = $this->getEditObjectId())) { $oPricealarm = oxNew(\\OxidEsales\\Eshop\\Application\\Model\\PriceAlarm::class); $oPricealarm->load($sOxid); $aParams = \\OxidEsales\\Eshop\\Core\\Registry::getConfig()->getRequestParameter(\"editval\"); $sMailBody = isset($aParams['oxpricealarm__oxlongdesc']) ? stripslashes($aParams['oxpricealarm__oxlongdesc']) : ''; if ($sMailBody) { $sMailBody = \\OxidEsales\\Eshop\\Core\\Registry::getUtilsView()->parseThroughSmarty($sMailBody, $oPricealarm->getId()); } $sRecipient = $oPricealarm->oxpricealarm__oxemail->value; $oEmail = oxNew(\\OxidEsales\\Eshop\\Core\\Email::class); $blSuccess = (int) $oEmail->sendPricealarmToCustomer($sRecipient, $oPricealarm, $sMailBody); // setting result message if ($blSuccess) { $oPricealarm->oxpricealarm__oxsended->setValue(date(\"Y-m-d H:i:s\")); $oPricealarm->save(); $blError = false; } } if (!$blError) { $this->_aViewData[\"mail_succ\"] = 1; } else { $this->_aViewData[\"mail_err\"] = 1; } }. \n### Response: Sending email to selected customer.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @SuppressWarnings(\"unchecked\") private static void updateCache(HashMap cache, Object key, Object value) { if (value == null) { return; } if (cache.size() > 1000) { cache.clear(); } cache.put(key, value); } \n### Response:", "ground_truth": "Updates cache.\n\n@param cache Cache to be updated\n@param key Key to be updated\n@param value New value", "predict": "Update cache."}, {"ID": 218, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def get_conditional_instance(self, parameter_names): \"\"\" get a new Schur instance that includes conditional update from some parameters becoming known perfectly Parameters ---------- parameter_names : list parameters that are to be treated as notionally perfectly known Returns ------- la_cond : Schur a new Schur instance conditional on perfect knowledge of some parameters Note ---- this method is used by the get_parameter_contribution() method - don't call this method directly \"\"\" if not isinstance(parameter_names, list): parameter_names = [parameter_names] for iname, name in enumerate(parameter_names): name = str(name).lower() parameter_names[iname] = name assert name in self.jco.col_names,\\ \"contribution parameter \" + name + \" not found jco\" keep_names = [] for name in self.jco.col_names: if name not in parameter_names: keep_names.append(name) if len(keep_names) == 0: raise Exception(\"Schur.contribution_from_Parameters \" + \"atleast one parameter must remain uncertain\") #get the reduced predictions if self.predictions is None: raise Exception(\"Schur.contribution_from_Parameters \" + \"no predictions have been set\") # cond_preds = [] # for pred in self.predictions: # cond_preds.append(pred.get(keep_names, pred.col_names)) cond_preds = self.predictions.get(row_names=keep_names) la_cond = Schur(jco=self.jco.get(self.jco.row_names, keep_names), parcov=self.parcov.condition_on(parameter_names), obscov=self.obscov, predictions=cond_preds,verbose=False) return la_cond. \n### Response: get a new Schur instance that includes conditional update from\n        some parameters becoming known perfectly\n\n        Parameters\n        ----------\n        parameter_names : list\n            parameters that are to be treated as notionally perfectly\n            known\n\n        Returns\n        -------\n        la_cond : Schur\n            a new Schur instance conditional on perfect knowledge\n            of some parameters\n\n        Note\n        ----\n        this method is used by the get_parameter_contribution() method -\n        don't call this method directly.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void setDetails(HttpServletRequest request, UsernamePasswordAuthenticationToken authRequest) { authRequest.setDetails(authenticationDetailsSource.buildDetails(request)); } \n### Response:", "ground_truth": "Provided so that subclasses may configure what is put into the authentication\nrequest's details property.\n\n@param request that an authentication request is being created for\n@param authRequest the authentication request object that should have its details\nset", "predict": "setDetails(HttpServletRequest request, UsernamePasswordAuthenticationToken authRequest)\n\nParameters\n----------\nrequest : HttpServletRequest\nauthRequest : UsernamePasswordAuthenticationToken\n\nReturns\n-------\nvoid\n\nNote\n----\nThis method is used to set the details of the authentication request. It builds the details using the authenticationDetailsSource and sets them on the authRequest object."}, {"ID": 219, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (alloc *Allocator) Alloc(tableID int64) (int64, error) { return atomic.AddInt64(&alloc.base, 1), nil }. \n### Response: // Alloc allocs a next autoID for table with tableID..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private static String getSecurityName(final Subject subject) { if (logger.isDebugEnabled()) { logger.debug(\"Determining Websphere security name for subject \" + subject); } String userSecurityName = null; if (subject != null) { // SEC-803 Object credential = subject.getPublicCredentials(getWSCredentialClass()) .iterator().next(); if (credential != null) { userSecurityName = (String) invokeMethod(getSecurityNameMethod(), credential); } } if (logger.isDebugEnabled()) { logger.debug(\"Websphere security name is \" + userSecurityName + \" for subject \" + subject); } return userSecurityName; } \n### Response:", "ground_truth": "Get the security name for the given subject.\n\n@param subject The subject for which to retrieve the security name\n@return String the security name for the given subject", "predict": "// Determines the Websphere security name for the subject passed in as a final argument.."}, {"ID": 220, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def argtypes(self): \"\"\"Returns the ctypes argtypes for use with the method.argtypes assignment for an executable loaded from a shared library. \"\"\" if self.dimension is not None: result = [] if \"in\" in self.direction: #The only complication here is that the 'known' dimensionality could actually #be a function like \"size\" that needs information about other variables. #If we choose to ignore known shapes, we lose the error checking for the passed #in variables from the python side. if self.direction == \"(inout)\" and \":\" not in self.dimension: wstr = \", writeable\" else: wstr = \"\" if \":\" in self.dimension or \"size\" in self.dimension: template = 'ndpointer(dtype={}, ndim={}, flags=\"F{}\")' result.append(template.format(self.pytype, self.D, wstr)) else: template = 'ndpointer(dtype={}, ndim={}, shape=({}), flags=\"F{}\")' sdim = self.dimension + (\"\" if self.D > 1 else \",\") result.append(template.format(self.pytype, self.D, sdim, wstr)) elif self.direction == \"(out)\": result.append(\"c_void_p\") if self.D > 0 and \":\" in self.dimension: result.extend([\"c_int_p\" for i in range(self.D)]) if (self.direction == \"(inout)\" and \":\" in self.dimension and (\"allocatable\" in self.modifiers or \"pointer\" in self.modifiers)): result.append(\"c_void_p\") return result else: ctype = self.ctype if ctype is not None: return [\"{}_p\".format(ctype.lower())]. \n### Response: Returns the ctypes argtypes for use with the method.argtypes assignment for\n        an executable loaded from a shared library..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @SuppressWarnings(\"unchecked\") private static List<String> getWebSphereGroups(final String securityName) { Context ic = null; try { // TODO: Cache UserRegistry object ic = new InitialContext(); Object objRef = ic.lookup(USER_REGISTRY); Object userReg = invokeMethod(getNarrowMethod(), null , objRef, Class.forName(\"com.ibm.websphere.security.UserRegistry\")); if (logger.isDebugEnabled()) { logger.debug(\"Determining WebSphere groups for user \" + securityName + \" using WebSphere UserRegistry \" + userReg); } final Collection groups = (Collection) invokeMethod(getGroupsForUserMethod(), userReg, new Object[] { securityName }); if (logger.isDebugEnabled()) { logger.debug(\"Groups for user \" + securityName + \": \" + groups.toString()); } return new ArrayList(groups); } catch (Exception e) { logger.error(\"Exception occured while looking up groups for user\", e); throw new RuntimeException( \"Exception occured while looking up groups for user\", e); } finally { try { if (ic != null) { ic.close(); } } catch (NamingException e) { logger.debug(\"Exception occured while closing context\", e); } } } \n### Response:", "ground_truth": "Get the WebSphere group names for the given security name.\n\n@param securityName The security name for which to retrieve the WebSphere group\nnames\n@return the WebSphere group names for the given security name", "predict": "Determines WebSphere groups for user with the specified security name using the WebSphere UserRegistry.\n\nThis method uses the SuppressWarnings(\"unchecked\") annotation to indicate that there may be some unchecked code in the method, which should be avoided in production environments. The method attempts to cache the UserRegistry object using the lookup method, but if an exception occurs while looking up the object, it will throw a RuntimeException and log an error message. The method then calls the invokeMethod method to call the getGroupsForUserMethod with the userReg object and the securityName object, and returns an ArrayList of the groups found. If an exception occurs, it will log an error message and throw a RuntimeException. Finally, the method closes the context using the close method.\n\nThis method is useful for finding the groups for a specific user in the WebSphere environment. It is important to note that this method may have some unchecked code, so it should be used with caution in production environments."}, {"ID": 221, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void registerChildInternal(IgnoreDomainResourceTypeResource child) { child.setParent(this); children.put(child.getName(), child); }. \n### Response: call with lock on 'children' held.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void changePassword(final String oldPassword, final String newPassword) { Authentication authentication = SecurityContextHolder.getContext() .getAuthentication(); Assert.notNull( authentication, \"No authentication object found in security context. Can't change current user's password!\"); String username = authentication.getName(); logger.debug(\"Changing password for user '\" + username); DistinguishedName userDn = usernameMapper.buildDn(username); if (usePasswordModifyExtensionOperation) { changePasswordUsingExtensionOperation(userDn, oldPassword, newPassword); } else { changePasswordUsingAttributeModification(userDn, oldPassword, newPassword); } } \n### Response:", "ground_truth": "Changes the password for the current user. The username is obtained from the\nsecurity context.\n\nThere are two supported strategies for modifying the user's password depending on\nthe capabilities of the corresponding LDAP server.\n\n\nConfigured one way, this method will modify the user's password via the\n\nLDAP Password Modify Extended Operation\n.\n\nSee {@link LdapUserDetailsManager#setUsePasswordModifyExtensionOperation(boolean)} for details.\n\n\nBy default, though, if the old password is supplied, the update will be made by rebinding as the user,\nthus modifying the password using the user's permissions. If\noldPassword is null, the update will be attempted using a standard\nread/write context supplied by the context source.\n\n\n@param oldPassword the old password\n@param newPassword the new value of the password.", "predict": "This method changes the password for the specified user. It first checks if the user is currently authenticated and if so, it retrieves their name. It then logs a debug message indicating the user's name and calls the `changePasswordUsingExtensionOperation` or `changePasswordUsingAttributeModification` method, depending on whether the user's password can be modified using an extension operation or not, respectively."}, {"ID": 222, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (o *BackendServiceConfig) SetBackendServices(v []*BackendService) *BackendServiceConfig { if o.BackendServices = v; o.BackendServices == nil { o.nullFields = append(o.nullFields, \"BackendServices\") } return o }. \n### Response: // SetBackendServices sets the backend service list.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected DistinguishedName buildGroupDn(String group) { DistinguishedName dn = new DistinguishedName(groupSearchBase); dn.add(groupRoleAttributeName, group.toLowerCase()); return dn; } \n### Response:", "ground_truth": "Creates a DN from a group name.\n\n@param group the name of the group\n@return the DN of the corresponding group, including the groupSearchBase", "predict": "// BuildGroupDn returns a DistinguishedName object representing the group name."}, {"ID": 223, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private function destroyClient(): void { ++$this->reconnects; $this->client = null; $delay = mt_rand(0, (int)min(5000, (int)pow(2, $this->reconnects) * 100)); usleep($delay * 1000); }. \n### Response: Destroys the current client and creates an exponential backoff with jitter,\n100ms base, 5 sec ceiling.\n\n@return void.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void allowableSessionsExceeded(List<SessionInformation> sessions, int allowableSessions, SessionRegistry registry) throws SessionAuthenticationException { if (exceptionIfMaximumExceeded || (sessions == null)) { throw new SessionAuthenticationException(messages.getMessage( \"ConcurrentSessionControlAuthenticationStrategy.exceededAllowed\", new Object[] { Integer.valueOf(allowableSessions) }, \"Maximum sessions of {0} for this principal exceeded\")); } // Determine least recently used session, and mark it for invalidation SessionInformation leastRecentlyUsed = null; for (SessionInformation session : sessions) { if ((leastRecentlyUsed == null) || session.getLastRequest() .before(leastRecentlyUsed.getLastRequest())) { leastRecentlyUsed = session; } } leastRecentlyUsed.expireNow(); } \n### Response:", "ground_truth": "Allows subclasses to customise behaviour when too many sessions are detected.\n\n@param sessions either null or all unexpired sessions associated with\nthe principal\n@param allowableSessions the number of concurrent sessions the user is allowed to\nhave\n@param registry an instance of the SessionRegistry for subclass use", "predict": "This method determines the least recently used session and marks it for invalidation. It does this by iterating through the list of sessions and checking if the last request of the session is before the last request of the least recently used session. If this is the case, the least recently used session is marked for invalidation."}, {"ID": 224, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func RegisterGenerator(config *GeneratorConfig) (err error) { notOnce := true once.Do(func() { generator, err = NewGenerator(config) notOnce = false return }) if notOnce { panic(\"uuid: Register* methods cannot be called more than once.\") } return }. \n### Response: // RegisterGenerator will set the package generator with the given configuration\n// Like uuid.Init this can only be called once. Any subsequent calls will have no\n// effect. If you call this you do not need to call uuid.Init..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private void copyDetails(Authentication source, Authentication dest) { if ((dest instanceof AbstractAuthenticationToken) && (dest.getDetails() == null)) { AbstractAuthenticationToken token = (AbstractAuthenticationToken) dest; token.setDetails(source.getDetails()); } } \n### Response:", "ground_truth": "Copies the authentication details from a source Authentication object to a\ndestination one, provided the latter does not already have one set.\n\n@param source source authentication\n@param dest the destination authentication object", "predict": "// CopyDetails copies the authentication details from the source authentication to the destination authentication.\n// This method can only be called once, as it requires an AbstractAuthenticationToken object to be passed in.\n// Any subsequent calls will result in a null pointer exception."}, {"ID": 225, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def clean(self, list_article_candidates): \"\"\"Iterates over each article_candidate and cleans every extracted data. :param list_article_candidates: A list, the list of ArticleCandidate-Objects which have been extracted :return: A list, the list with the cleaned ArticleCandidate-Objects \"\"\" # Save cleaned article_candidates in results. results = [] for article_candidate in list_article_candidates: article_candidate.title = self.do_cleaning(article_candidate.title) article_candidate.description = self.do_cleaning(article_candidate.description) article_candidate.text = self.do_cleaning(article_candidate.text) article_candidate.topimage = self.do_cleaning(article_candidate.topimage) article_candidate.author = self.do_cleaning(article_candidate.author) article_candidate.publish_date = self.do_cleaning(article_candidate.publish_date) results.append(article_candidate) return results. \n### Response: Iterates over each article_candidate and cleans every extracted data.\n\n        :param list_article_candidates: A list, the list of ArticleCandidate-Objects which have been extracted\n        :return: A list, the list with the cleaned ArticleCandidate-Objects.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private List<Filter> getFilters(HttpServletRequest request) { for (SecurityFilterChain chain : filterChains) { if (chain.matches(request)) { return chain.getFilters(); } } return null; } \n### Response:", "ground_truth": "Returns the first filter chain matching the supplied URL.\n\n@param request the request to match\n@return an ordered array of Filters defining the filter chain", "predict": "This method retrieves a list of filters from the `filterChains` list and only returns the filters that match the `HttpServletRequest` object.\n\n        :param request: The HttpServletRequest object, which contains information about the current request\n        :return: A list of Filter objects, which are the filters that match the request\n        :Note: This method is used to retrieve security filters, which are typically used to restrict access to protected resources."}, {"ID": 226, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public void stop() { synchronized (this.lifecycleMonitor) { if (isRunning()) { log.info(\"stop: Stopping ConnectorManager\"); try { connector.stop(); } finally { running = false; } } } }. \n### Response: Stop this connector, logging out existing sessions, closing their connections, and stopping to accept new\nconnections..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public List<Filter> getFilters(String url) { return getFilters(firewall.getFirewalledRequest((new FilterInvocation(url, \"GET\") .getRequest()))); } \n### Response:", "ground_truth": "Convenience method, mainly for testing.\n\n@param url the URL\n@return matching filter list", "predict": "This method returns a list of filters for the given URL, using the firewall's request filter."}, {"ID": 227, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function setAuthentication($username, $password) { $this->_mailer->Username = $username; $this->_mailer->Password = $password; return $this; }. \n### Response: Sets the authentication used to send the mail.\n\n@param string $username\n@param string $password\n\n@return \\Scara\\Mail\\Mailer.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected ApplicationContext getContext(PageContext pageContext) { ServletContext servletContext = pageContext.getServletContext(); return SecurityWebApplicationContextUtils.findRequiredWebApplicationContext(servletContext); } \n### Response:", "ground_truth": "Allows test cases to override where application context obtained from.\n\n@param pageContext so the ServletContext can be accessed as required\nby Spring's WebApplicationContextUtils\n\n@return the Spring application context (never null)", "predict": "Provides the application context for the current web application.\n\n@param PageContext pageContext\n\n@return ServletContext.\n\nNote: The `SecurityWebApplicationContextUtils` class is not provided in the provided code snippet, so this comment may not be accurate."}, {"ID": 228, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (gs GroupsService) List(query Query, token string) ([]Group, error) { requestPath := url.URL{ Path: \"/Groups\", RawQuery: url.Values{ \"filter\": []string{query.Filter}, \"sortBy\": []string{query.SortBy}, }.Encode(), } resp, err := newNetworkClient(gs.config).MakeRequest(network.Request{ Method: \"GET\", Path: requestPath.String(), Authorization: network.NewTokenAuthorization(token), AcceptableStatusCodes: []int{http.StatusOK}, }) if err != nil { return []Group{}, translateError(err) } var response documents.GroupListResponse err = json.Unmarshal(resp.Body, &response) if err != nil { return []Group{}, MalformedResponseError{err} } var groupList []Group for _, groupResponse := range response.Resources { groupList = append(groupList, newGroupFromResponse(gs.config, groupResponse)) } return groupList, err }. \n### Response: // List wil make a request to UAA to list the groups that match the given Query.\n// A token with the \"scim.read\" scope is required..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static DistinguishedName getFullDn(DistinguishedName dn, Context baseCtx) throws NamingException { DistinguishedName baseDn = new DistinguishedName(baseCtx.getNameInNamespace()); if (dn.contains(baseDn)) { return dn; } baseDn.append(dn); return baseDn; } \n### Response:", "ground_truth": "Gets the full dn of a name by prepending the name of the context it is relative to.\nIf the name already contains the base name, it is returned unaltered.", "predict": "// GetFullDn returns the full distinguished name (DN) of a given distinguished name (dn),\n// including the namespace part if present.\n// This method throws a NamingException if the DN could not be found or if the\n// namespace part of the DN is missing.\n\nNote: The method is part of a NamingException handling library, so it may be used to handle different types of naming exceptions."}, {"ID": 229, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def collect_single_file(self, file_path): \"\"\" Takes in a list of strings, usually the lines in a text file, and collects the AnchorHub tags and auto-generated anchors for the file according to the Collector's converter, strategies, and switches :param file_path: string file path of file to examine :return: A dictionary mapping AnchorHub tags to auto-generated anchors, and a list of containing an entry for each duplicate tag found on the page. \"\"\" lines = FileToList.to_list(file_path) file_anchors = {} file_duplicates = [] for i in range(len(lines)): # Flip any switches that are triggered by this line self._try_switches(lines, i) if self._no_switches_on(): for s in self._strategies: if s.test(lines, i): # This strategy found an anchor and knows how to parse tag, convert_me = s.get(lines, i) if tag in file_anchors: # Duplicate tag file_duplicates.append((tag, i + 1, file_anchors[tag])) else: anchor = self._converter(convert_me, file_anchors) file_anchors[tag] = anchor self._arm_switches() return file_anchors, file_duplicates. \n### Response: Takes in a list of strings, usually the lines in a text file,\n        and collects the AnchorHub tags and auto-generated anchors for the\n        file according to the  Collector's converter, strategies, and switches\n\n        :param file_path: string file path of file to examine\n        :return: A dictionary mapping AnchorHub tags to auto-generated\n            anchors, and a list of containing an entry for each duplicate tag\n            found on the page..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public MockMvcRequestSpecification sessionAttrs(Map<String, Object> sessionAttributes) { notNull(sessionAttributes, \"sessionAttributes\"); parameterUpdater.updateParameters(convert(cfg.getMockMvcParamConfig().sessionAttributesUpdateStrategy()), sessionAttributes, this.sessionAttributes); return this; } \n### Response:", "ground_truth": "Set session attributes.\n\n@param sessionAttributes the session attributes", "predict": "This method returns the `MockMvcRequestSpecification` object for the session attributes. It sets the session attributes using the `convert` method from the `MockMvcParamConfig` class and the current session attributes, and then returns the updated specification object.\n\nThe method does not have any comments as it is a public method and it is not necessary to provide comments for public methods.\n\nNote: This method is used to set the session attributes for the mockMvc request. It is important to check if the session attributes are not null before updating them."}, {"ID": 230, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public boolean shouldPull(int share, Object id) { final String methodName = \"shouldPull()\"; boolean shouldPull = false; if (this.featureSupport.isReplicationSupported()) { // TODO write code to support shouldPull function //if (tc.isDebugEnabled()) { // Tr.debug(tc, methodName + \" cacheName=\" + cacheName + \" ERROR because it is not implemented yet\"); //} } else { //Tr.error(tc, \"DYNA1065E\", new Object[] { methodName, cacheName, this.cacheProviderName}); } return shouldPull; }. \n### Response: Return to indicate the entry can be pulled from other remote caches which caching this value.\n\n@param share sharing policy\n@id cache ID.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public AuthenticationScheme basic(String userName, String password) { final PreemptiveBasicAuthScheme preemptiveBasicAuthScheme = new PreemptiveBasicAuthScheme(); preemptiveBasicAuthScheme.setUserName(userName); preemptiveBasicAuthScheme.setPassword(password); return preemptiveBasicAuthScheme; } \n### Response:", "ground_truth": "", "predict": "This method returns an instance of the PreemptiveBasicAuthScheme class, which is a type of authentication scheme used for basic authentication.\n\n@param userName username\n@param password password"}, {"ID": 231, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function mergeWithParams(array $params) { // merge the passed properties with the default settings for the stateful session beans foreach (array_keys(get_object_vars($this)) as $propertyName) { if (array_key_exists($propertyName, $params)) { $this->$propertyName = $params[$propertyName]; } } }. \n### Response: Merge the passed params with the default settings.\n\n@param array $params The associative array with the params to merge\n\n@return void.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void filters(List<Filter> filters) { Validate.notNull(filters, \"Filter list cannot be null\"); RestAssured.filters.addAll(filters); } \n### Response:", "ground_truth": "Add default filters that will be applied to each request.\n\n@param filters The filter list", "predict": "Filters the list of filters.\n\n@param List<Filter> filters The list of filters to apply\n\n@return void."}, {"ID": 232, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def asset(self, asset_id, query=None): \"\"\"Fetches an Asset by ID. API Reference: https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/assets/asset/get-a-single-asset :param asset_id: The ID of the target Asset. :param query: (optional) Dict with API options. :return: :class:`Asset <Asset>` object. :rtype: contentful.asset.Asset Usage: >>> nyancat_asset = client.asset('nyancat') <Asset id='nyancat' url='//images.contentful.com/cfex...'> \"\"\" return self._get( self.environment_url( '/assets/{0}'.format(asset_id) ), query ). \n### Response: Fetches an Asset by ID.\n\n        API Reference: https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/assets/asset/get-a-single-asset\n\n        :param asset_id: The ID of the target Asset.\n        :param query: (optional) Dict with API options.\n        :return: :class:`Asset ` object.\n        :rtype: contentful.asset.Asset\n\n        Usage:\n            >>> nyancat_asset = client.asset('nyancat')\n            .\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void filters(Filter filter, Filter... additionalFilters) { Validate.notNull(filter, \"Filter cannot be null\"); RestAssured.filters.add(filter); if (additionalFilters != null) { Collections.addAll(RestAssured.filters, additionalFilters); } } \n### Response:", "ground_truth": "Add default filters to apply to each request.\n\n@param filter            The filter to add\n@param additionalFilters An optional array of additional filters to add", "predict": "Fetches additional filters for the given filter.\n\n        Validate.notNull(filter, \"Filter cannot be null\");\n        RestAssured.filters.add(filter);\n        if (additionalFilters!= null) {\n            Collections.addAll(RestAssured.filters, additionalFilters);\n        }\n\n        Usage:\n            >>> RestAssured.filters = [Filter('my-filter-name'), Filter('my-other-filter-name')]\n           ."}, {"ID": 233, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function read($fileName=null) { $this->_resetFileName($fileName); $manifest = array(); $hashLen = ($this->hashEncoding == 'sha1') ? 40 : 32; $lines = readLines($this->fileName, $this->fileEncoding); foreach ($lines as $line) { $hash = trim(substr($line, 0, $hashLen)); $payload = trim(substr($line, $hashLen)); if (strlen($payload) > 0) { $manifest[$payload] = $hash; } } $this->data = $manifest; return $manifest; }. \n### Response: This reads the data from the file name.\n\n@param string $fileName This is the file name to read. It defaults to\nthe current value of the $fileName property. If given, it will set the\nvalue of the property also.\n\n@return array The data read..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static AuthenticationScheme basic(String userName, String password) { final BasicAuthScheme scheme = new BasicAuthScheme(); scheme.setUserName(userName); scheme.setPassword(password); return scheme; } \n### Response:", "ground_truth": "", "predict": "This method returns the default BasicAuthScheme object.\n\n@param string $userName This is the username to authenticate with.\n@param string $password This is the password to use for authentication.\n@return BasicAuthScheme The default BasicAuthScheme object.\n\nNote: This method is used to authenticate users using the Basic Authentication protocol. It requires two parameters: the username and password. The username is the username of the user to be authenticated, and the password is the password used to authenticate the user. The method returns the default BasicAuthScheme object, which is used to create an instance of the BasicAuthScheme class and set the username and password."}, {"ID": 234, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def iter(self, *, encoding=None, decoder=None): \"\"\"Returns async iterator. Usage example: >>> async for ch, msg in mpsc.iter(): ... print(ch, msg) \"\"\" return _IterHelper(self, is_active=lambda r: not r._queue.exhausted, encoding=encoding, decoder=decoder). \n### Response: Returns async iterator.\n\n        Usage example:\n\n        >>> async for ch, msg in mpsc.iter():\n        ...     print(ch, msg).\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static AuthenticationScheme ntlm(String userName, String password, String workstation, String domain) { final NTLMAuthScheme scheme = new NTLMAuthScheme(); scheme.setUserName(userName); scheme.setPassword(password); scheme.setWorkstation(workstation); scheme.setDomain(domain); return scheme; } \n### Response:", "ground_truth": "Create a NTLM authentication scheme.\n\n@param userName The user name.\n@param password The password.\n@param workstation The NTLM workstation.\n@param domain The NTLM workstation.\n@return The authentication scheme", "predict": "This method returns an instance of the NTLM authentication scheme."}, {"ID": 235, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def skydir_to_pixel(self, skydir): \"\"\"Return the pixel index of a SkyCoord object.\"\"\" if self.coordsys in ['CEL', 'EQU']: skydir = skydir.transform_to('icrs') lon = skydir.ra.deg lat = skydir.dec.deg else: skydir = skydir.transform_to('galactic') lon = skydir.l.deg lat = skydir.b.deg return self.get_pixel_indices(lat, lon). \n### Response: Return the pixel index of a SkyCoord object..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static AuthenticationScheme form(String userName, String password, FormAuthConfig config) { if (userName == null) { throw new IllegalArgumentException(\"Username cannot be null\"); } if (password == null) { throw new IllegalArgumentException(\"Password cannot be null\"); } final FormAuthScheme scheme = new FormAuthScheme(); scheme.setUserName(userName); scheme.setPassword(password); scheme.setConfig(config); return scheme; } \n### Response:", "ground_truth": "Use form authentication with the supplied configuration.\n\n@param userName The user name.\n@param password The password.\n@param config   The form authentication config\n@return The authentication scheme", "predict": "This method returns an instance of the FormAuthScheme class, which is used to authenticate users. It sets the username, password, and configuration for the authentication scheme. It does not have any comments."}, {"ID": 236, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func Write(w io.Writer, c *Compound) (err error) { if _, err = TagCompound.WriteTo(w); err != nil { return } nameTag := &String{c.Name} _, err = nameTag.WriteTo(w) if err != nil { return } _, err = c.WriteTo(w) if err != nil { return } return }. \n### Response: // Write writes an NBT compound to a byte stream. It doesn't handle compression..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void proxy(URI uri) { if (uri == null) { throw new IllegalArgumentException(\"Proxy URI cannot be null\"); } proxy(new ProxySpecification(uri.getHost(), uri.getPort(), uri.getScheme())); } \n### Response:", "ground_truth": "Instruct REST Assured to connect to a proxy using a URI.\n\n@param uri The URI of the proxy", "predict": "// Proxy the specified URI using the ProxySpecification class."}, {"ID": 237, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def dynamic_load(name): \"\"\"Equivalent of \"from X import Y\" statement using dot notation to specify what to import and return. For example, foo.bar.thing returns the item \"thing\" in the module \"foo.bar\" \"\"\" pieces = name.split('.') item = pieces[-1] mod_name = '.'.join(pieces[:-1]) mod = __import__(mod_name, globals(), locals(), [item]) return getattr(mod, item). \n### Response: Equivalent of \"from X import Y\" statement using dot notation to specify\n    what to import and return.  For example, foo.bar.thing returns the item\n    \"thing\" in the module \"foo.bar\".\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String print(ResponseOptions responseOptions, ResponseBody responseBody, PrintStream stream, LogDetail logDetail, boolean shouldPrettyPrint) { final StringBuilder builder = new StringBuilder(); if (logDetail == ALL || logDetail == STATUS) { builder.append(responseOptions.statusLine()); } if (logDetail == ALL || logDetail == HEADERS) { final Headers headers = responseOptions.headers(); if (headers.exist()) { appendNewLineIfAll(logDetail, builder).append(toString(headers)); } } else if (logDetail == COOKIES) { final Cookies cookies = responseOptions.detailedCookies(); if (cookies.exist()) { appendNewLineIfAll(logDetail, builder).append(cookies.toString()); } } if (logDetail == ALL || logDetail == BODY) { String responseBodyToAppend; if (shouldPrettyPrint) { responseBodyToAppend = new Prettifier().getPrettifiedBodyIfPossible(responseOptions, responseBody); } else { responseBodyToAppend = responseBody.asString(); } if (logDetail == ALL && !isBlank(responseBodyToAppend)) { builder.append(SystemUtils.LINE_SEPARATOR).append(SystemUtils.LINE_SEPARATOR); } builder.append(responseBodyToAppend); } String response = builder.toString(); stream.println(response); return response; } \n### Response:", "ground_truth": "Prints the response to the print stream\n\n@return A string of representing the response", "predict": "This method is responsible for printing the response of the application. It takes several parameters:\n\n* `ResponseOptions`: This is an object that specifies the response options for the application, such as the status line, headers, cookies, and detailed cookies.\n* `ResponseBody`: This is the response body of the application.\n* `PrintStream`: This is an object that provides the stream for printing the response.\n* `LogDetail`: This is an object that specifies the log level for the response.\n* `shouldPrettyPrint`: This is a boolean parameter that specifies whether to pretty print the response body.\n\nThe method first checks if any of the log levels specified by `logDetail` are enabled. If so, it appends the response status line to the `builder`. It then checks if any headers for the response exist. If so, it appends the headers to the `builder`. If not, it checks if any cookies for the response exist. If so, it appends the cookies to the `builder`. If the log level is all, it appends the response status line and the response body to the `builder`. Finally, it returns the `builder` string. The `stream.println(response)` method is used to print the response to the console.\n\nOverall, this method is responsible for printing the response of the application and providing the necessary information to the user."}, {"ID": 238, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def _get_progress_bar(self, progress_bar_type): \"\"\"Construct a tqdm progress bar object, if tqdm is installed.\"\"\" if tqdm is None: if progress_bar_type is not None: warnings.warn(_NO_TQDM_ERROR, UserWarning, stacklevel=3) return None description = \"Downloading\" unit = \"rows\" try: if progress_bar_type == \"tqdm\": return tqdm.tqdm(desc=description, total=self.total_rows, unit=unit) elif progress_bar_type == \"tqdm_notebook\": return tqdm.tqdm_notebook( desc=description, total=self.total_rows, unit=unit ) elif progress_bar_type == \"tqdm_gui\": return tqdm.tqdm_gui(desc=description, total=self.total_rows, unit=unit) except (KeyError, TypeError): # Protect ourselves from any tqdm errors. In case of # unexpected tqdm behavior, just fall back to showing # no progress bar. warnings.warn(_NO_TQDM_ERROR, UserWarning, stacklevel=3) return None. \n### Response: Construct a tqdm progress bar object, if tqdm is installed..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public RestAssuredConfig redirect(RedirectConfig redirectConfig) { notNull(redirectConfig, \"Redirect config\"); return new RestAssuredConfig(redirectConfig, conf(HttpClientConfig.class), conf(LogConfig.class), conf(EncoderConfig.class), conf(DecoderConfig.class), conf(SessionConfig.class), conf(ObjectMapperConfig.class), conf(ConnectionConfig.class), conf(JsonConfig.class), conf(XmlConfig.class), conf(SSLConfig.class), conf(MatcherConfig.class), conf(HeaderConfig.class), conf(MultiPartConfig.class), conf(ParamConfig.class), conf(OAuthConfig.class), conf(FailureConfig.class)); } \n### Response:", "ground_truth": "Set the redirect config.\n\n@param redirectConfig The {@link RedirectConfig} to set\n@return An updated RestAssuredConfiguration", "predict": "This method returns a new RestAssuredConfig object, which contains the configuration for the client, logs, encoders, decoders, sessions, ObjectMapper, connections, JSON, XML, SSL, Matcher, Header, MultiPart, Param, and OAuth configurations. It also includes the configuration for the failure handler. The method is responsible for not nulling the redirectConfig object and creating a new RestAssuredConfig object with the provided configurations."}, {"ID": 239, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void createSession(String sessionId) { boolean newSession = sessionId == null; sessionId = newSession ? newSessionId() : sessionId; SessionController controller = sessions.get(sessionId); if (controller == null) { controller = SessionController.create(sessionId, newSession); sessions.put(sessionId, controller); } }. \n### Response: Creates a new session with the specified session id.\n\n@param sessionId The session id to associate with the new session..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public EncoderConfig defaultQueryParameterCharset(String charset) { return new EncoderConfig(defaultContentCharset, charset, shouldAppendDefaultContentCharsetToContentTypeIfUndefined, contentEncoders, contentTypeToDefaultCharset, true); } \n### Response:", "ground_truth": "Specify the default charset for query parameters\n\n@param charset The charset to use.\n@return A new instance of {@link EncoderConfig}", "predict": "This method returns an EncoderConfig object that specifies the default content charset and the charset to use for query parameter encoding.\n\n@param charset The charset to use for query parameter encoding..\n\n"}, {"ID": 240, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private function FetchFields($res) { if (!$this->debug_on) { return ; } $i=0; $this->col_info = array(); while ($i < @pg_num_fields($res)) { $this->col_info[$i]->name = @pg_field_name($res, $i); $this->col_info[$i]->size = @pg_field_size($res, $i); $this->col_info[$i]->type = @pg_field_type($res, $i); $i++; } }. \n### Response: fetches table fields\n\n@param object $res.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public ObjectMapperConfig defaultObjectMapperType(ObjectMapperType defaultObjectMapperType) { return new ObjectMapperConfig(defaultObjectMapper, defaultObjectMapperType, gsonObjectMapperFactory, jackson1ObjectMapperFactory, jackson2ObjectMapperFactory, jaxbObjectMapperFactory, johnzonObjectMapperFactory, true); } \n### Response:", "ground_truth": "Creates an object mapper configuration that uses the specified object mapper as default.\n\n@param defaultObjectMapperType The object mapper to use. If null then classpath scanning will be used.", "predict": "This method returns a new ObjectMapperConfig object with the default configuration and set the default ObjectMapperType to the specified defaultObjectMapperType.\n\n@return ObjectMapperConfig object with default configuration and set defaultObjectMapperType to specified defaultObjectMapperType."}, {"ID": 241, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func Encode(g geom.T, byteOrder binary.ByteOrder) (string, error) { wkb, err := wkb.Marshal(g, byteOrder) if err != nil { return \"\", err } return hex.EncodeToString(wkb), nil }. \n### Response: // Encode encodes an arbitrary geometry to a string..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public ObjectMapperConfig jaxbObjectMapperFactory(JAXBObjectMapperFactory jaxbObjectMapperFactory) { return new ObjectMapperConfig(defaultObjectMapper, defaultObjectMapperType, gsonObjectMapperFactory, jackson1ObjectMapperFactory, jackson2ObjectMapperFactory, jaxbObjectMapperFactory, johnzonObjectMapperFactory, true); } \n### Response:", "ground_truth": "Specify a custom JAXB object mapper factory.\n\n@param jaxbObjectMapperFactory The object mapper factory", "predict": "// jaxbObjectMapperFactory returns a new ObjectMapperConfig with default settings and a default  Jackson 2 object map factory.."}, {"ID": 242, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def dispatch_job_hook(self, link, key, job_config, logfile, stream=sys.stdout): \"\"\"Send a single job to the LSF batch Parameters ---------- link : `fermipy.jobs.chain.Link` The link used to invoke the command we are running key : str A string that identifies this particular instance of the job job_config : dict A dictionrary with the arguments for the job. Used with the self._command_template job template logfile : str The logfile for this job, may be used to check for success/ failure \"\"\" full_sub_dict = job_config.copy() if self._no_batch: full_command = \"%s >& %s\" % ( link.command_template().format(**full_sub_dict), logfile) else: full_sub_dict['logfile'] = logfile full_command_template = build_bsub_command( link.command_template(), self._lsf_args) full_command = full_command_template.format(**full_sub_dict) logdir = os.path.dirname(logfile) print_bsub = True if self._dry_run: if print_bsub: stream.write(\"%s\\n\" % full_command) return 0 try: os.makedirs(logdir) except OSError: pass proc = subprocess.Popen(full_command.split(), stderr=stream, stdout=stream) proc.communicate() return proc.returncode. \n### Response: Send a single job to the LSF batch\n\n        Parameters\n        ----------\n\n        link : `fermipy.jobs.chain.Link`\n            The link used to invoke the command we are running\n\n        key : str\n            A string that identifies this particular instance of the job\n\n        job_config : dict\n            A dictionrary with the arguments for the job.  Used with\n            the self._command_template job template\n\n        logfile : str\n            The logfile for this job, may be used to check for success/ failure.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public RestAssuredMockMvcConfig logConfig(LogConfig logConfig) { notNull(logConfig, \"Log config\"); return new RestAssuredMockMvcConfig(logConfig, encoderConfig, decoderConfig, sessionConfig, objectMapperConfig, jsonConfig, xmlConfig, headerConfig, asyncConfig, multiPartConfig, mockMvcConfig, paramConfig, matcherConfig); } \n### Response:", "ground_truth": "Set the Log config.\n\n@param logConfig The {@link LogConfig} to set\n@return An updated RestAssuredMockMvcConfig", "predict": "Implement a method to log configuration information for the RestAssuredMockMvc framework.\n\n        Returns\n        -------\n\n        RestAssuredMockMvcConfig\n            A new instance of the RestAssuredMockMvcConfig class, with the log configuration set.\n\n        logConfig : LogConfig\n            The log configuration to use for this RestAssuredMockMvc instance."}, {"ID": 243, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def get_merkle_root(block_representation, coin_symbol='btc', api_key=None): ''' Takes a block_representation and returns the merkle root ''' return get_block_overview(block_representation=block_representation, coin_symbol=coin_symbol, txn_limit=1, api_key=api_key)['mrkl_root']. \n### Response: Takes a block_representation and returns the merkle root.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public RestAssuredMockMvcConfig sessionConfig(SessionConfig sessionConfig) { notNull(sessionConfig, \"Session config\"); return new RestAssuredMockMvcConfig(logConfig, encoderConfig, decoderConfig, sessionConfig, objectMapperConfig, jsonConfig, xmlConfig, headerConfig, asyncConfig, multiPartConfig, mockMvcConfig, paramConfig, matcherConfig); } \n### Response:", "ground_truth": "Set the session config.\n\n@param sessionConfig The {@link SessionConfig} to set\n@return An updated RestAssuredMockMvcConfig", "predict": "This method returns a new RestAssuredMockMvcConfig object, which is a configuration for testing web applications using the MockMvc framework. It sets various properties such as log configuration, encoder/decoder configuration, session configuration, objectMapper configuration, JSON/XML/HTTP header configuration, async/multi-part configuration, mockMvc configuration, param/matcher configuration."}, {"ID": 244, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function smartParse (str, sep1, sep2) { sep1 = sep1 || ';' sep2 = sep2 || '=' if ((typeof str === 'string') && str.indexOf(sep1) >= 0) { if (str.indexOf(sep2) >= 0) { return parseKeyValue(str, sep1, sep2) } else { return str.split(sep1) } } return str }. \n### Response: Split string into list or key-value-pairs depending on whether\nthe given separator chars appear in the string. This is the logic used by\nthe old parseInfo function and the default logic used by the new parse\nfunction unless a specific format is defined for an info key.\n\nEx.:\n- smartParse('foo') => 'foo'\n- smartParse('foo;bar') => ['foo', 'bar']\n- smartParse('foo=1;bar=2') => {foo: 1, bar: 2}\n\n@private.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public RestAssuredMockMvcConfig objectMapperConfig(ObjectMapperConfig objectMapperConfig) { notNull(objectMapperConfig, \"Object mapper config\"); return new RestAssuredMockMvcConfig(logConfig, encoderConfig, decoderConfig, sessionConfig, objectMapperConfig, jsonConfig, xmlConfig, headerConfig, asyncConfig, multiPartConfig, mockMvcConfig, paramConfig, matcherConfig); } \n### Response:", "ground_truth": "Set the object mapper config.\n\n@param objectMapperConfig The {@link ObjectMapperConfig} to set\n@return An updated RestAssuredMockMvcConfig", "predict": "This method returns a new RestAssuredMockMvcConfig object, which includes various configuration options for testing using the ObjectMapperConfig object. It does not include any comments.\n\n@public\n\n"}, {"ID": 245, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def _get_answer_spans(answer_list, answer_start_list): \"\"\"Find all answer spans from the context, returning start_index and end_index :param list[str] answer_list: List of all answers :param list[int] answer_start_list: List of all answers' start indices Returns ------- List[Tuple] list of Tuple(answer_start_index answer_end_index) per question \"\"\" return [(answer_start_list[i], answer_start_list[i] + len(answer)) for i, answer in enumerate(answer_list)]. \n### Response: Find all answer spans from the context, returning start_index and end_index\n\n        :param list[str] answer_list: List of all answers\n        :param list[int] answer_start_list: List of all answers' start indices\n\n        Returns\n        -------\n        List[Tuple]\n            list of Tuple(answer_start_index answer_end_index) per question.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public RestAssuredMockMvcConfig jsonConfig(JsonConfig jsonConfig) { notNull(jsonConfig, \"JsonConfig\"); return new RestAssuredMockMvcConfig(logConfig, encoderConfig, decoderConfig, sessionConfig, objectMapperConfig, jsonConfig, xmlConfig, headerConfig, asyncConfig, multiPartConfig, mockMvcConfig, paramConfig, matcherConfig); } \n### Response:", "ground_truth": "Set the Json config.\n\n@param jsonConfig The {@link JsonConfig} to set\n@return An updated RestAssuredMockMvcConfig", "predict": "Returns a new RestAssuredMockMvcConfig object with all the configuration parameters.\n\n        :param jsonConfig: JSON configuration object\n\n        Returns\n        -------\n        RestAssuredMockMvcConfig\n            object with all the configuration parameters."}, {"ID": 246, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def initialize(self, cfg_file=None, mode=None): \"\"\"Initialize the model for simulation, possibly given a config file. Parameters ---------- cfg_file : Optional[str] The name of the configuration file to load, optional. \"\"\" self.sim = ScipyOdeSimulator(self.model) self.state = numpy.array(copy.copy(self.sim.initials)[0]) self.time = numpy.array(0.0) self.status = 'initialized'. \n### Response: Initialize the model for simulation, possibly given a config file.\n\n        Parameters\n        ----------\n        cfg_file : Optional[str]\n            The name of the configuration file to load, optional..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public RestAssuredMockMvcConfig xmlConfig(XmlConfig xmlConfig) { notNull(xmlConfig, \"XmlConfig\"); return new RestAssuredMockMvcConfig(logConfig, encoderConfig, decoderConfig, sessionConfig, objectMapperConfig, jsonConfig, xmlConfig, headerConfig, asyncConfig, multiPartConfig, mockMvcConfig, paramConfig, matcherConfig); } \n### Response:", "ground_truth": "Set the Xml config.\n\n@param xmlConfig The {@link XmlConfig} to set\n@return An updated RestAssuredMockMvcConfig", "predict": "Return a new RestAssuredMockMvcConfig object.\n\n        Returns\n        -------\n        RestAssuredMockMvcConfig\n            A new RestAssuredMockMvcConfig object.."}, {"ID": 247, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void addMatch(Element e, PseudoClassType pseudoClass) { if (elements == null) elements = new HashMap<Element, Set<PseudoClassType>>(); Set<PseudoClassType> classes = elements.get(e); if (classes == null) { classes = new HashSet<PseudoClassType>(2); elements.put(e, classes); } classes.add(pseudoClass); }. \n### Response: Assigns a pseudo class to the given element. Multiple pseudo classes may be assigned to a single element.\n@param e the DOM element\n@param pseudoClass the pseudo class to be assigned.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public RestAssuredMockMvcConfig encoderConfig(EncoderConfig encoderConfig) { notNull(encoderConfig, \"EncoderConfig\"); return new RestAssuredMockMvcConfig(logConfig, encoderConfig, decoderConfig, sessionConfig, objectMapperConfig, jsonConfig, xmlConfig, headerConfig, asyncConfig, multiPartConfig, mockMvcConfig, paramConfig, matcherConfig); } \n### Response:", "ground_truth": "Set the encoder config\n\n@param encoderConfig The {@link EncoderConfig} to set\n@return An updated RestAssuredMockMvcConfig", "predict": "Provides the configuration for creating a mockMvc instance using the RestAssured framework.\n\n@param encoderConfig the encoder configuration to be used."}, {"ID": 248, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (client *Client) GetServicePlanVisibilities(filters ...Filter) ([]ServicePlanVisibility, Warnings, error) { request, err := client.newHTTPRequest(requestOptions{ RequestName: internal.GetServicePlanVisibilitiesRequest, Query: ConvertFilterParameters(filters), }) if err != nil { return nil, nil, err } var fullVisibilityList []ServicePlanVisibility warnings, err := client.paginate(request, ServicePlanVisibility{}, func(item interface{}) error { if vis, ok := item.(ServicePlanVisibility); ok { fullVisibilityList = append(fullVisibilityList, vis) } else { return ccerror.UnknownObjectInListError{ Expected: ServicePlanVisibility{}, Unexpected: item, } } return nil }) return fullVisibilityList, warnings, err }. \n### Response: // GetServicePlanVisibilities returns back a list of Service Plan Visibilities\n// given the provided filters..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public RestAssuredMockMvcConfig headerConfig(HeaderConfig headerConfig) { notNull(headerConfig, \"HeaderConfig\"); return new RestAssuredMockMvcConfig(logConfig, encoderConfig, decoderConfig, sessionConfig, objectMapperConfig, jsonConfig, xmlConfig, headerConfig, asyncConfig, multiPartConfig, mockMvcConfig, paramConfig, matcherConfig); } \n### Response:", "ground_truth": "Set the header config\n\n@param headerConfig The {@link HeaderConfig} to set\n@return An updated RestAssuredMockMvcConfig", "predict": "// headerConfig takes a HeaderConfig object as input and returns a new RestAssuredMockMvcConfig object\n// with the necessary configuration options.."}, {"ID": 249, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function Device() { this.available = false; this.platform = null; this.version = null; this.uuid = null; this.cordova = null; this.model = null; this.manufacturer = null; this.isVirtual = null; this.serial = null; var me = this; channel.onCordovaReady.subscribe(function() { me.getInfo(function(info) { //ignoring info.cordova returning from native, we should use value from cordova.version defined in cordova.js //TODO: CB-5105 native implementations should not return info.cordova var buildLabel = cordova.version; me.available = true; me.platform = info.platform; me.version = info.version; me.uuid = info.uuid; me.cordova = buildLabel; me.model = info.model; me.isVirtual = info.isVirtual; me.manufacturer = info.manufacturer || 'unknown'; me.serial = info.serial || 'unknown'; channel.onCordovaInfoReady.fire(); },function(e) { me.available = false; utils.alert(\"[ERROR] Error initializing Cordova: \" + e); }); }); }. \n### Response: This represents the mobile device, and provides properties for inspecting the model, version, UUID of the\nphone, etc.\n@constructor.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public RestAssuredMockMvcConfig asyncConfig(AsyncConfig asyncConfig) { notNull(asyncConfig, AsyncConfig.class); return new RestAssuredMockMvcConfig(logConfig, encoderConfig, decoderConfig, sessionConfig, objectMapperConfig, jsonConfig, xmlConfig, headerConfig, asyncConfig, multiPartConfig, mockMvcConfig, paramConfig, matcherConfig); } \n### Response:", "ground_truth": "Set the async config\n\n@param asyncConfig The {@link AsyncConfig} to set\n@return An updated RestAssuredMockMvcConfig", "predict": "This method creates a new RestAssuredMockMvcConfig object and returns it, which is used to configure the mockMvc() method in the MockMvcBuilder class.\n@method public RestAssuredMockMvcConfig asyncConfig(AsyncConfig asyncConfig) returns a new instance of the RestAssuredMockMvcConfig object."}, {"ID": 250, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function ComparePosition( $other, $useLineNo = false) { $thisDomNode = $this->getUnderlyingObject(); $otherDomNode = $other->getUnderlyingObject(); $doc1 = $thisDomNode->baseURI; $doc2 = $otherDomNode->baseURI; if ( strcasecmp( $doc1, $doc2 ) != 0 ) // if ( spl_object_hash( $this->domNode->ownerDocument ) != spl_object_hash( $other->getUnderlyingObject()->ownerDocument ) ) return XmlNodeOrder::Unknown; $thisPath = $thisDomNode->getNodePath(); $otherPath = $otherDomNode->getNodePath(); // Convert node names into a set positions // This is necessary because the getNodePath returns named nodes. // However there has to be a question mark over performance since // an XPath query is being performed for every segment of both the // 'this' path and the 'other' path. // In the case where a parent has named child nodes that are not // in a lexical order such as: // <a> // <c/> // <b/> // </a> // Then sorting on the path will result in a list that is not // document ordered. By changing the name for the correct position // in the parent the set of paths can be sorted. $convert = function( $xPath, $nodePath ) { $parts = explode( \"/\", $nodePath ); $length = 0; foreach ( $parts as $key => &$part ) { $length++; if ( $part == \"\" ) continue; $length += strlen( $part ); $result = $xPath->evaluate( \"count(\" . substr( $nodePath, 0, $length -1 ) . \"/preceding-sibling::*) + 1\" ); $part = $result; } unset( $part ); return implode( \"/\", $parts ); }; $xPath = new \\DOMXPath( $thisDomNode instanceof \\DOMDocument ? $thisDomNode : $thisDomNode->ownerDocument ); $thisPath = $convert( $xPath, $thisPath ); $xPath = new \\DOMXPath( $otherDomNode instanceof \\DOMDocument ? $otherDomNode : $otherDomNode->ownerDocument ); $otherPath = $convert( $xPath, $otherPath ); if ( $useLineNo ) { $thisPath = $thisDomNode->getLineNo() . \"-\" . $thisPath; $otherPath = $otherDomNode->getLineNo() . \"-\" . $otherPath; } // Using strnatcasecmp so /xx[20] will follow /xx[3] which does not happen with other sort types $compare = strnatcasecmp( $thisPath, $otherPath ); return $compare == 0 ? XmlNodeOrder::Same : ( $compare < 0 ? XmlNodeOrder::Before : XmlNodeOrder::After ); }. \n### Response: Compares the position of the current XPathNavigator with the\nposition of the XPathNavigator specified.\n\n@param XPathNavigator $other : The XPathNavigator to compare against.\n@param bool $useLineNo (Default: false)\n@return XmlNodeOrder An XmlNodeOrder value representing the comparative position of the two XPathNavigator objects..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public RestAssuredMockMvcConfig mockMvcConfig(MockMvcConfig mockMvcConfig) { notNull(mockMvcConfig, MockMvcConfig.class); return new RestAssuredMockMvcConfig(logConfig, encoderConfig, decoderConfig, sessionConfig, objectMapperConfig, jsonConfig, xmlConfig, headerConfig, asyncConfig, multiPartConfig, mockMvcConfig, paramConfig, matcherConfig); } \n### Response:", "ground_truth": "Set the MockMVC config\n\n@param mockMvcConfig The {@link MockMvcConfig} to set\n@return An updated RestAssuredMockMvcConfig", "predict": "Creates a new RestAssuredMockMvcConfig object and returns it.\n\n@param MockMvcConfig mockMvcConfig The mockMvcConfig object to use for testing.\n@return RestAssuredMockMvcConfig A new RestAssuredMockMvcConfig object.."}, {"ID": 251, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function assign($key, $value = null){ if(is_array($key)){ foreach($key as $k => $v){ $this->variables[$k] = $v; } } else{ $this->variables[$key] = $value; } }. \n### Response: Assign view variable\n@param string|array $key\n@param mixed $value.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public RestAssuredMockMvcConfig multiPartConfig(MultiPartConfig multiPartConfig) { notNull(multiPartConfig, MultiPartConfig.class); return new RestAssuredMockMvcConfig(logConfig, encoderConfig, decoderConfig, sessionConfig, objectMapperConfig, jsonConfig, xmlConfig, headerConfig, asyncConfig, multiPartConfig, mockMvcConfig, paramConfig, matcherConfig); } \n### Response:", "ground_truth": "Set the multi-part config\n\n@param multiPartConfig The {@link MultiPartConfig} to set\n@return An updated RestAssuredMockMvcConfig", "predict": "Provides the configuration for the RestAssured mockMvc framework.\n@param MultiPartConfig $multiPartConfig."}, {"ID": 252, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def start(self, num_processes: Optional[int] = 1, max_restarts: int = None) -> None: \"\"\"Starts this server in the `.IOLoop`. By default, we run the server in this process and do not fork any additional child process. If num_processes is ``None`` or <= 0, we detect the number of cores available on this machine and fork that number of child processes. If num_processes is given and > 1, we fork that specific number of sub-processes. Since we use processes and not threads, there is no shared memory between any server code. Note that multiple processes are not compatible with the autoreload module (or the ``autoreload=True`` option to `tornado.web.Application` which defaults to True when ``debug=True``). When using multiple processes, no IOLoops can be created or referenced until after the call to ``TCPServer.start(n)``. Values of ``num_processes`` other than 1 are not supported on Windows. The ``max_restarts`` argument is passed to `.fork_processes`. .. versionchanged:: 6.0 Added ``max_restarts`` argument. \"\"\" assert not self._started self._started = True if num_processes != 1: process.fork_processes(num_processes, max_restarts) sockets = self._pending_sockets self._pending_sockets = [] self.add_sockets(sockets). \n### Response: Starts this server in the `.IOLoop`.\n\n        By default, we run the server in this process and do not fork any\n        additional child process.\n\n        If num_processes is ``None`` or  1, we fork that\n        specific number of sub-processes.\n\n        Since we use processes and not threads, there is no shared memory\n        between any server code.\n\n        Note that multiple processes are not compatible with the autoreload\n        module (or the ``autoreload=True`` option to `tornado.web.Application`\n        which defaults to True when ``debug=True``).\n        When using multiple processes, no IOLoops can be created or\n        referenced until after the call to ``TCPServer.start(n)``.\n\n        Values of ``num_processes`` other than 1 are not supported on Windows.\n\n        The ``max_restarts`` argument is passed to `.fork_processes`.\n\n        .. versionchanged:: 6.0\n\n           Added ``max_restarts`` argument..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public RestAssuredMockMvcConfig paramConfig(MockMvcParamConfig paramConfig) { notNull(paramConfig, MultiPartConfig.class); return new RestAssuredMockMvcConfig(logConfig, encoderConfig, decoderConfig, sessionConfig, objectMapperConfig, jsonConfig, xmlConfig, headerConfig, asyncConfig, multiPartConfig, mockMvcConfig, paramConfig, matcherConfig); } \n### Response:", "ground_truth": "Set the parameter config\n\n@param paramConfig The {@link MockMvcParamConfig} to set\n@return An updated RestAssuredMockMvcConfig", "predict": "Returns a new `RestAssuredMockMvcConfig` instance with all the configuration parameters for testing.\n\n        This method sets the configuration parameters for the mockMvcConfig and matcherConfig\n        instances, and returns them.\n\n        The mockMvcConfig instance is used to configure the mockMvc and it's\n        parameters, while the matcherConfig instance is used to configure the\n        matchers used in the test.\n\n       .. versionchanged:: 6.0\n\n           Added `notNull(paramConfig, MultiPartConfig.class)` method.."}, {"ID": 253, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def valid_for_country?(country) country = country.to_s.upcase tdata = analyze(sanitized, passed_country(country)) tdata.find do |iso2, data| country == iso2 && data[:valid].any? end.is_a? Array end. \n### Response: Returns whether a current parsed phone number is valid for specified\n country\n @param country [String|Symbol] ISO code of country (2 letters) like 'US',\n   'us' or :us for United States\n @return [Boolean] parsed phone number is valid.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public RestAssuredMockMvcConfig matcherConfig(MatcherConfig matcherConfig) { notNull(matcherConfig, MatcherConfig.class); return new RestAssuredMockMvcConfig(logConfig, encoderConfig, decoderConfig, sessionConfig, objectMapperConfig, jsonConfig, xmlConfig, headerConfig, asyncConfig, multiPartConfig, mockMvcConfig, paramConfig, matcherConfig); } \n### Response:", "ground_truth": "Set the matcher config\n\n@param matcherConfig The {@link MockMvcParamConfig} to set\n@return An updated RestAssuredMockMvcConfig", "predict": "Provides a configuration for the RestAssured framework for testing web applications.\n\nThis method creates a new RestAssuredMockMvcConfig object and returns it, which is used to configure the mockMvc() method in the matcher class. This allows the matcher to be used in combination with other testing frameworks such as JUnit.\n\nThe matcherConfig() method is not null-safe and returns a new MatcherConfig object, which is used to configure the mockMvcConfig() method in the RestAssured framework. This allows for flexibility in how the matcher is configured and used."}, {"ID": 254, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def get(expr, key, default=None): \"\"\" Return the mapped value for this key, or the default if the key does not exist Parameters ---------- key : any default : any \"\"\" return ops.MapValueOrDefaultForKey(expr, key, default).to_expr(). \n### Response: Return the mapped value for this key, or the default\n    if the key does not exist\n\n    Parameters\n    ----------\n    key : any\n    default : any.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public CertificateAuthSettings allowAllHostnames() { return new CertificateAuthSettings(keystoreType, trustStoreType, port, trustStore, keyStore, ALLOW_ALL_HOSTNAME_VERIFIER, sslSocketFactory); } \n### Response:", "ground_truth": "", "predict": "This method returns a new `CertificateAuthSettings` object with the specified parameters.\n\n    Returns\n    -------\n    CertificateAuthSettings\n\n    Parameters\n    ----------\n    keystoreType : string\n        The type of keystore to use (e.g. \"JKS\", \"CAV\").\n    trustStoreType : string\n        The type of trust store to use (e.g. \"CAV\").\n    port : int\n        The port number to use for SSL/TLS connections.\n    trustStore : string\n        The name or path of the trust store.\n    keyStore : string\n        The name or path of the key store.\n    ALLOW_ALL_HOSTNAME_VERIFIER : string\n        The hostname verification algorithm to use (e.g. \"MD5\", \"SHA1\").\n    sslSocketFactory : SSLSocketFactory\n        The SSL/TLS socket factory to use.\n\n    Returns\n    -------\n    CertificateAuthSettings"}, {"ID": 255, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def _did_timeout(self): \"\"\" Called when a resquest has timeout \"\"\" bambou_logger.debug('Bambou %s on %s has timeout (timeout=%ss)..' % (self._request.method, self._request.url, self.timeout)) self._has_timeouted = True if self.async: self._callback(self) else: return self. \n### Response: Called when a resquest has timeout.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public XmlPathConfig declareNamespaces(Map<String, String> namespacesToDeclare) { return new XmlPathConfig(jaxbObjectMapperFactory, defaultParserType, defaultDeserializer, charset, features, namespacesToDeclare, properties, validating, namespaceAware, allowDocTypeDeclaration); } \n### Response:", "ground_truth": "Specify declared namespaces that will be used when parsing XML.\n\n@param namespacesToDeclare A map containing features that will be used by the underlying {@link groovy.util.XmlSlurper}.\n@return A new instance of XmlPathConfig\n@see org.xml.sax.XMLReader#setFeature(java.lang.String, boolean)", "predict": "Declares the namespaces to be declared in the  XML path configuration."}, {"ID": 256, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def format_name(text): \"\"\"Format a comic name.\"\"\" name = unescape(text) name = asciify(name.replace(u'&', u'And').replace(u'@', u'At')) name = capfirst(name) return name. \n### Response: Format a comic name..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public XmlPathConfig declaredNamespace(String prefix, String namespaceURI) { Validate.notEmpty(prefix, \"Prefix cannot be empty\"); Validate.notEmpty(namespaceURI, \"Namespace URI cannot be empty\"); Map<String, String> updatedNamespaces = new HashMap<String, String>(declaredNamespaces); updatedNamespaces.put(prefix, namespaceURI); return new XmlPathConfig(jaxbObjectMapperFactory, defaultParserType, defaultDeserializer, charset, features, updatedNamespaces, properties, validating, true, allowDocTypeDeclaration); } \n### Response:", "ground_truth": "Declares a namespace.\n\n@param prefix       The feature name, which is a fully-qualified URI.\n@param namespaceURI The requested value of the feature (true or false).\n@return A new XmlPathConfig instance\n@see org.xml.sax.XMLReader#setFeature(java.lang.String, boolean)", "predict": "Declares the namespace of an XML document.."}, {"ID": 257, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private static void validateSeedBrokers(String[] seedBrokers, Exception exception) { if (!(exception instanceof ClosedChannelException)) { return; } int unknownHosts = 0; for (String broker : seedBrokers) { URL brokerUrl = NetUtils.getCorrectHostnamePort(broker.trim()); try { InetAddress.getByName(brokerUrl.getHost()); } catch (UnknownHostException e) { unknownHosts++; } } // throw meaningful exception if all the provided hosts are invalid if (unknownHosts == seedBrokers.length) { throw new IllegalArgumentException(\"All the servers provided in: '\" + ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG + \"' config are invalid. (unknown hosts)\"); } }. \n### Response: Validate that at least one seed broker is valid in case of a\nClosedChannelException.\n\n@param seedBrokers\narray containing the seed brokers e.g. [\"host1:port1\",\n\"host2:port2\"]\n@param exception\ninstance.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public Object request(String method, boolean hasBody, Closure configClosure) throws ClientProtocolException, IOException { return this.doRequest(this.defaultURI.toURI(), method, this.defaultContentType, hasBody, configClosure); } \n### Response:", "ground_truth": "Make an HTTP request to the default URI, and parse using the default\ncontent-type.\n\n@param method        {@link HttpRequestFactory HTTP method}\n@param configClosure request configuration options\n@return whatever value was returned by the executed response handler.\n@throws ClientProtocolException\n@throws IOException\n@see #request(Object, HttpRequestFactory, Object, Closure)", "predict": "This method performs a request and returns the response. It also throws specific exceptions that may be encountered during the request process, such as ClientProtocolException and IOException.\n\n@param method\nthe HTTP method to use (e.g. GET, POST, PUT, DELETE)\n@param hasBody\ntrue if the request includes a body, false otherwise\n@param configClosure\nthe configuration closure to be passed to the underlying method\n@return\nthe response to the request\n@throws\nClientProtocolException and IOException."}, {"ID": 258, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function isInstanceOf(cls) { var i, l, bases = this.constructor._meta.bases; for (i = 0, l = bases.length; i < l; i += 1) { if (bases[i] === cls) { return true; } } return this instanceof cls; }. \n### Response: emulation of \"instanceof\".\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void setHeaders(Map<?, ?> headers) { this.defaultRequestHeaders.clear(); if (headers == null) return; for (Object key : headers.keySet()) { Object val = headers.get(key); if (val == null) continue; this.defaultRequestHeaders.put(key.toString(), val.toString()); } } \n### Response:", "ground_truth": "Set the default headers to add to all requests made by this builder\ninstance.  These values will replace any previously set default headers.\n\n@param headers map of header names & values.", "predict": "This method sets the default request headers for the HTTP client. It clears any existing headers and iterates over the key-value pairs in the headers map. For each key-value pair, it sets the corresponding header value using the key and its corresponding value from the headers map."}, {"ID": 259, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func WriteSliceArray(lst [][]byte, buf *goetty.ByteBuf) { buf.WriteByte('*') if len(lst) == 0 { buf.Write(NullArray) buf.Write(Delims) } else { buf.Write(goetty.StringToSlice(strconv.Itoa(len(lst)))) buf.Write(Delims) for i := 0; i < len(lst); i++ { WriteBulk(lst[i], buf) } } }. \n### Response: // WriteSliceArray write slice array resp.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void setProxy(String host, int port, String scheme) { getClient().getParams().setParameter( ConnRoutePNames.DEFAULT_PROXY, new HttpHost(host, port, scheme)); } \n### Response:", "ground_truth": "null for the default\n@see HttpHost#HttpHost(String, int, String)", "predict": "// SetProxy set proxy resp."}, {"ID": 260, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def position(self): \"\"\" Returns the current position of the motor in pulses of the rotary encoder. When the motor rotates clockwise, the position will increase. Likewise, rotating counter-clockwise causes the position to decrease. Writing will set the position to that value. \"\"\" self._position, value = self.get_attr_int(self._position, 'position') return value. \n### Response: Returns the current position of the motor in pulses of the rotary\n        encoder. When the motor rotates clockwise, the position will increase.\n        Likewise, rotating counter-clockwise causes the position to decrease.\n        Writing will set the position to that value..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public MultiPartSpecBuilder controlName(String controlName) { Validate.notEmpty(controlName, \"Control name cannot be empty\"); this.controlName = controlName; this.isControlNameExplicit = true; return this; } \n### Response:", "ground_truth": "Specify the control name of this multi-part.\n\n@param controlName The control name to use. Default is file.\n@return An instance of MultiPartSpecBuilder", "predict": "This method sets the value of the \"controlName\" attribute to the specified input string and sets the \"isControlNameExplicit\" flag to true. It then returns the current MultiPartSpecBuilder object."}, {"ID": 261, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function setHandlerMethod($handlerMethod) { Assert::string($handlerMethod, 'The handler method must be a string. Got: %s'); Assert::notEmpty($handlerMethod, 'The handler method must not be empty.'); $this->handlerMethod = $handlerMethod; return $this; }. \n### Response: Sets the method of the command handler that should be executed when the\nconfigured command is run.\n\nThe method receives three arguments:\n\n* {@link Args} `$args`: The console arguments.\n* {@link IO} `$io`: The I/O.\n* {@link Command} `$command`: The executed command.\n\n@param string $handlerMethod The method name.\n\n@return ApplicationConfig|CommandConfig|SubCommandConfig|OptionCommandConfig The current instance.\n\n@see getHandlerMethod().\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public MultiPartSpecBuilder header(String name, String value) { Validate.notEmpty(name, \"Header name cannot be empty\"); Validate.notEmpty(value, \"Header value cannot be empty\"); // Replace previous header if exists final Set<String> headerNames = headers.keySet(); final String trimmedName = name.trim(); for (String headerName : headerNames) { if (headerName.equalsIgnoreCase(trimmedName)) { headers.remove(headerName); } } // Put the name header in the header list headers.put(name, value); return this; } \n### Response:", "ground_truth": "Add a header to this multipart specification.\n\n@param name The name of the header\n@param value The value of the header\n@return An instance of MultiPartSpecBuilder", "predict": "This method is used to add a new header to the list of headers in the MultiPartSpecBuilder.\n\nIt first validates that the header name is not empty and that the header value is not empty. It then removes any previous header with the same name from the headers list. Finally, it adds the header name and value to the headers list.\n\nIt returns the MultiPartSpecBuilder object so that it can be used to build the MultiPartSpec.\n\n@param String $name The header name.\n@param String $value The header value.\n@return MultiPartSpecBuilder The current instance.\n@see headers().\n\n"}, {"ID": 262, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static function unregister() { self::$registered = false; in_array(vfsStream::SCHEME, stream_get_wrappers()) and stream_wrapper_unregister(vfsStream::SCHEME); }. \n### Response: Unregister the virtual filesystem stream wrapper.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void basic(String host, int port, String user, String pass) { builder.getClient().getCredentialsProvider().setCredentials( new AuthScope(host, port), new UsernamePasswordCredentials(user, pass) ); } \n### Response:", "ground_truth": "Set authentication credentials to be used for the given host and port.\n\n@param host\n@param port\n@param user\n@param pass", "predict": "This method sets the credentials for the client's authentication scope."}, {"ID": 263, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function login() { if ($this->isLoggedIn()) { throw new BadMethodCallException('Client is already logged-in.'); } // Auto-connect: if ($this->isConnected() === false) { $this->connect(); } $response = $this->request( 'idoit.login' ); if (!array_key_exists('session-id', $response)) { throw new RuntimeException('Failed to login because i-doit responded without a session ID'); } $this->session = $response['session-id']; return $this; }. \n### Response: Logins to API\n\n@return self Returns itself\n\n@throws Exception on error.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void ntlm(String host, int port, String user, String pass, String workstation, String domain) { builder.getClient().getCredentialsProvider().setCredentials( new AuthScope(host, port), new NTCredentials(user, pass, workstation, domain) ); } \n### Response:", "ground_truth": "Set NTLM authentication credentials to be used for the given host and port.\n\n@param host\n@param port\n@param user\n@param pass\n@param workstation\n@param domain", "predict": "Authenticates with NTLM protocol\n\n@param builder Client object\n@param host Host address\n@param port Port number\n@param user User name\n@param pass Password\n@param workstation workstation name\n@param domain Domain name\n@return void Returns nothing.\n\n@throws Exception on error."}, {"ID": 264, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func poller(interval, timeout time.Duration) WaitFunc { return WaitFunc(func(done <-chan struct{}) <-chan struct{} { ch := make(chan struct{}) go func() { defer close(ch) tick := time.NewTicker(interval) defer tick.Stop() var after <-chan time.Time if timeout != 0 { // time.After is more convenient, but it // potentially leaves timers around much longer // than necessary if we exit early. timer := time.NewTimer(timeout) after = timer.C defer timer.Stop() } for { select { case <-tick.C: // If the consumer isn't ready for this signal drop it and // check the other channels. select { case ch <- struct{}{}: default: } case <-after: return case <-done: return } } }() return ch }) }. \n### Response: // poller returns a WaitFunc that will send to the channel every interval until\n// timeout has elapsed and then closes the channel.\n//\n// Over very short intervals you may receive no ticks before the channel is\n// closed. A timeout of 0 is interpreted as an infinity, and in such a case\n// it would be the caller's responsibility to close the done channel.\n// Failure to do so would result in a leaked goroutine.\n//\n// Output ticks are not buffered. If the channel is not ready to receive an\n// item, the tick is skipped..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static Headers headers(Header header, Header... additionalHeaders) { notNull(header, \"Header\"); final List<Header> headerList = new LinkedList<Header>(); headerList.add(header); if (additionalHeaders != null) { Collections.addAll(headerList, additionalHeaders); } return new Headers(headerList); } \n### Response:", "ground_truth": "An alternative way to create a Headers object from the constructor.\n\n@param header            The header to be included\n@param additionalHeaders Additional headers to be included (optional)\n@return A new headers object containing the specified headers", "predict": "// This method returns a new Headers object with the specified header and any additional headers if provided.\n//\n// The method does not buffer any output ticks. If the provided headers are not all present, a new Headers object is created with the missing headers.\n//\n// If an additional header is provided but not all headers are present, a new Headers object is created with all missing headers.\n//\n// If a null header is provided, a new Headers object is created with no headers.\n//\n// This method does not check for the presence of any missing headers.\n//\n// This method does not handle any null or empty headers.\n//\n// This method does not handle any missing or null additional headers.\n//\n// This method does not handle any duplicate or null headers.\n//\n// This method does not handle any headers that are not of the specified type.\n//\n// This method does not handle any headers that are of a type that is not supported by the collection.\n//\n// This method does not handle any headers that are of a type that is not in the specified collection.\n//\n// This method does not handle any headers that are of a type that is not in the specified collection and have a missing key.\n//\n// This method does not handle any headers that are of a type that is not in the specified collection and have a duplicate key.\n//\n// This method does not handle any headers that are of a type that is not in the specified collection and have a null key.\n//\n// This method does not handle any headers that are of a type that is not in the specified collection and have a key that is not in the collection.\n//\n// This method does not handle any headers that are of a type that is not in the specified collection and have a key that is of a type that is not supported by the collection.\n//\n// This method does not handle any headers that are of a type that is not in the specified collection and have a key that is of a type that is not in the specified collection and have a missing key.\n//\n// This method does not handle any headers that are of a type that is not in the specified collection and have a key that is of a type that is not in the specified collection and have a duplicate key.\n//\n// This method does not handle any headers that are of a type that is not in the specified collection and have a key that is of a type that is not in the specified collection and have a null key.\n//\n// This method does not handle any headers that are of a type that is not in the specified collection and have a key that is of a type that is not in the specified collection and have a key that is of a type that is not supported by the collection.\n//\n// This method does not handle any headers that are of a type that is not in the specified collection and have a key that is of a type that is not in the specified collection and have a key that is of a type that is not in the specified collection and have a missing key.\n//\n// This method does not handle any headers that are of a type that is not in the specified collection and have a key that is of a type that is not in the specified collection and have a key that is of a type that is not in the specified collection and have a duplicate key.\n//\n// This method does not handle any headers that are of a type that is not in the specified collection and have a key that is of a type that is not in the specified collection and have a null key."}, {"ID": 265, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def uninstall(args): \" Uninstall site. \" site = find_site(args.PATH) site.run_remove() site.clean() if not listdir(op.dirname(site.deploy_dir)): call('sudo rm -rf %s' % op.dirname(site.deploy_dir)). \n### Response: Uninstall site..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void reset() { mockMvcFactory = null; config = null; basePath = \"/\"; resultHandlers.clear(); requestPostProcessors.clear(); responseSpecification = null; requestSpecification = null; authentication = null; } \n### Response:", "ground_truth": "Reset all static configurations to their default values.", "predict": "This method resets the state of the Spring MVC application, including setting the mockMvcFactory to null, configuring the application, clearing the resultHandlers, requestPostProcessors, responseSpecification, and requestSpecification variables. It also sets the basePath to \"/\" and removes any authentication information."}, {"ID": 266, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function setType(string $type) : void { if (empty($type)) { throw new InvalidArgumentException('Empty field type is not allowed: ' . $this->getName()); } $this->_type = $this->_extractType($type); }. \n### Response: Set field type\n\n@throws \\InvalidArgumentException when type is empty\n@param  string $type field type\n@return void.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public ResponseBuilder setHeader(String name, String value) { notNull(name, \"Header name\"); notNull(value, \"Header value\"); List<Header> newHeaders = new ArrayList<Header>(restAssuredResponse.headers().asList()); newHeaders.add(new Header(name, value)); restAssuredResponse.setResponseHeaders(new Headers(newHeaders)); if (trim(name).equalsIgnoreCase(CONTENT_TYPE)) { restAssuredResponse.setContentType(value); } return this; } \n### Response:", "ground_truth": "Set a specific header\n\n@return The builder", "predict": "Set header\n\n@param  string $name header name\n@param  string $value header value\n@return ResponseBuilder object to set headers\n\nNote: This method sets the response headers and content type based on the provided header name and value. It does not modify the response body."}, {"ID": 267, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void assertDeleteCount(long expectedDeleteCount) { QueryCount queryCount = QueryCountHolder.getGrandTotal(); long recordedDeleteCount = queryCount.getDelete(); if (expectedDeleteCount != recordedDeleteCount) { throw new SQLDeleteCountMismatchException(expectedDeleteCount, recordedDeleteCount); } }. \n### Response: Assert delete statement count\n\n@param expectedDeleteCount expected delete statement count.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public Response build() { final int statusCode = restAssuredResponse.statusCode(); if (statusCode < 100 || statusCode >= 600) { throw new IllegalArgumentException(format(\"Status code must be greater than 100 and less than 600, was %d.\", statusCode)); } if (StringUtils.isBlank(restAssuredResponse.statusLine())) { restAssuredResponse.setStatusLine(restAssuredResponse.statusCode()); } restAssuredResponse.setRpr(new ResponseParserRegistrar()); return restAssuredResponse; } \n### Response:", "ground_truth": "Build the actual response\n\n@return The response object", "predict": "Build response\n\n@return Response object."}, {"ID": 268, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private function getRequestId(RequestInterface $request, ResponseInterface $response) { if ($request->hasHeader('X-Request-Id')) { return $request->getHeader('X-Request-Id')[0]; } if ($response->hasHeader('X-Request-Id')) { return $response->getHeader('X-Request-Id')[0]; } return ''; }. \n### Response: Returns the X-Request-Id if present\n\n@param RequestInterface $request\n@param ResponseInterface $response\n@return string.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public DetailedCookieMatcher value(Matcher<? super String> valueMatcher) { return new DetailedCookieMatcher(and(Matchers.hasProperty(\"value\", valueMatcher))); } \n### Response:", "ground_truth": "Verifies whether value of cookie satisfies specified matcher.\n@param valueMatcher value assertion\n@return A {@link DetailedCookieMatcher} instance with and-composed value property assertion", "predict": "Returns a new DetailedCookieMatcher with the \"value\" property matching the given Matcher.\n\n@param Matcher<? super String> $valueMatcher\n@return DetailedCookieMatcher."}, {"ID": 269, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static function type_float($var) { if (is_array($var) or is_object($var)) { throw new InvalidContentType('Array or object could not be converted to float.'); } // deal with locale issues $locale_info = localeconv(); $var = str_replace($locale_info[\"mon_thousands_sep\"] , \"\", $var); $var = str_replace($locale_info[\"mon_decimal_point\"] , \".\", $var); return floatval($var); }. \n### Response: Casts to float when necessary\n\n@param   mixed  value to typecast\n\n@throws  InvalidContentType\n\n@return  float.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public DetailedCookieMatcher comment(Matcher<? super String> commentMatcher) { return new DetailedCookieMatcher(and(Matchers.hasProperty(\"comment\", commentMatcher))); } \n### Response:", "ground_truth": "Verifies whether comment of cookie satisfies specified matcher.\n@param commentMatcher comment assertion\n@return A {@link DetailedCookieMatcher} instance with and-composed comment property assertion", "predict": "Provides a detailed match for a cookie's \"comment\" property.\n\n@param   Matcher<? super String>  commentMatcher\n\n@return   DetailedCookieMatcher."}, {"ID": 270, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static boolean isRestSSLEnabled(Configuration sslConfig) { @SuppressWarnings(\"deprecation\") final boolean fallbackFlag = sslConfig.getBoolean(SecurityOptions.SSL_ENABLED); return sslConfig.getBoolean(SecurityOptions.SSL_REST_ENABLED, fallbackFlag); }. \n### Response: Checks whether SSL for the external REST endpoint is enabled..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public DetailedCookieMatcher expiryDate(Matcher<? super Date> expiryDateMatcher) { return new DetailedCookieMatcher(and(Matchers.hasProperty(\"expiryDate\", expiryDateMatcher))); } \n### Response:", "ground_truth": "Verifies whether expiry date of cookie satisfies specified matcher.\n@param expiryDateMatcher expiry date assertion\n@return A {@link DetailedCookieMatcher} instance with and-composed expiry date property assertion", "predict": "This method returns a new DetailedCookieMatcher object that matches all of the specified expiryDateMatcher objects."}, {"ID": 271, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def get_foreign_struct(namespace, name): \"\"\"Returns a ForeignStruct implementation or raises ForeignError\"\"\" get_foreign_module(namespace) try: return ForeignStruct.get(namespace, name) except KeyError: raise ForeignError(\"Foreign %s.%s not supported\" % (namespace, name)). \n### Response: Returns a ForeignStruct implementation or raises ForeignError.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public DetailedCookieMatcher domain(Matcher<? super String> domainMatcher) { return new DetailedCookieMatcher(and(Matchers.hasProperty(\"domain\", domainMatcher))); } \n### Response:", "ground_truth": "Verifies whether domain of cookie satisfies specified matcher.\n@param domainMatcher assertion for domain property\n@return A {@link DetailedCookieMatcher} instance with and-composed domain property assertion", "predict": "This method returns a new DetailedCookieMatcher object that matches the specified domain. The method uses the and() method to create a new DetailedCookieMatcher object with a property \"domain\" that matches the specified domainMatcher."}, {"ID": 272, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public int getUTFLength(String s) { // This code is extracted out of DataOutputStream.writeUTF(). If we change the underlying implementation, this // needs to change as well. int charCount = s.length(); int length = 2; // writeUTF() will also encode a 2-byte length. for (int i = 0; i < charCount; ++i) { char c = s.charAt(i); if (c >= 1 && c <= 127) { length++; } else if (c > 2047) { length += 3; } else { length += 2; } } return length; }. \n### Response: region RevisionDataOutput Implementation.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public DetailedCookieMatcher path(Matcher<? super String> pathMatcher) { return new DetailedCookieMatcher(and(Matchers.hasProperty(\"path\", pathMatcher))); } \n### Response:", "ground_truth": "Verifies whether path of cookie satisfies specified matcher.\n@param pathMatcher assertion for path property\n@return A {@link DetailedCookieMatcher} instance with and-composed path property assertion", "predict": "region DetailedCookieMatcher implementation."}, {"ID": 273, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public String getOptionsHelpMessage() { String ls = System.getProperty(\"line.separator\"); usageMessage = \"Available options:\"; StringBuilder sb = new StringBuilder(usageMessage); sb.append(ls); for (Option option : declaredOptions.values()) { String name = option.getName(); int extraPadding = longestOptionNameLength - name.length(); sb.append(\" -\").append(name); for (int i = 0; i < extraPadding; i++) { sb.append(' '); } sb.append(DEFAULT_PADDING).append(option.getDescription()).append(ls); } return sb.toString(); }. \n### Response: Build the options message.\n@return message.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public DetailedCookieMatcher secured(Matcher<? super Boolean> securedMatcher) { return new DetailedCookieMatcher(and(Matchers.hasProperty(\"secured\", securedMatcher))); } \n### Response:", "ground_truth": "Verifies whether secured property of cookie satisfies specified matcher.\n@param securedMatcher assertion for secured property\n@return A {@link DetailedCookieMatcher} instance with and-composed secured property assertion", "predict": "Create a new DetailedCookieMatcher with the given Matcher.\n@return a new DetailedCookieMatcher.\n\nNote: The Matcher.hasProperty() method is used to check if a property exists in a boolean value."}, {"ID": 274, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func resetBuffer() map[string]interface{} { bufferMu.Lock() bufCopy := buffer buffer = make(map[string]interface{}) bufferItemCount = 0 bufferMu.Unlock() return bufCopy }. \n### Response: // resetBuffer makes a local pointer to the buffer,\n// then resets the buffer by assigning to be a newly-\n// made value to clear it out, then sets the buffer\n// item count to 0. It returns the copied pointer to\n// the original map so the old buffer value can be\n// used locally..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public DetailedCookieMatcher httpOnly(Matcher<? super Boolean> httpOnlyMatcher) { return new DetailedCookieMatcher(and(Matchers.hasProperty(\"httpOnly\", httpOnlyMatcher))); } \n### Response:", "ground_truth": "", "predict": "// This method returns a new DetailedCookieMatcher with the specified httpOnlyMatcher,\n// which checks if the cookie has the \"httpOnly\" property and is set to \"true\".\n// It uses the and() function to combine the existing DetailedCookieMatcher with\n// the \"httpOnly\" matcher."}, {"ID": 275, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def genes(self): \"\"\"Return a list of all genes.\"\"\" return [ExpGene.from_series(g) for i, g in self.reset_index().iterrows()]. \n### Response: Return a list of all genes..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public DetailedCookieMatcher version(Matcher<? super Integer> versionMatcher) { return new DetailedCookieMatcher(and(Matchers.hasProperty(\"version\", versionMatcher))); } \n### Response:", "ground_truth": "Verifies whether version of cookie satisfies specified matcher.\n@param versionMatcher assertion for version property\n@return A {@link DetailedCookieMatcher} instance with and-composed version property assertion", "predict": "Returns a new DetailedCookieMatcher with the \"version\" property set to the given Matcher."}, {"ID": 276, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def _get_sorted_relationships(self, goterm): \"\"\"Traverse GO Terms above the current GO Term. Then add current GO Term to sorted.\"\"\" if goterm.id in self.goids_seen: return self.goids_seen.add(goterm.id) for goterm_upper in goterm.get_goterms_upper(): self._get_sorted_relationships(goterm_upper) self.goterms_sorted.append(goterm). \n### Response: Traverse GO Terms above the current GO Term. Then add current GO Term to sorted..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public DetailedCookieMatcher maxAge(Matcher<? super Integer> maxAgeMatcher) { return new DetailedCookieMatcher(and(Matchers.hasProperty(\"maxAge\", maxAgeMatcher))); } \n### Response:", "ground_truth": "Verifies whether max age of cookie satisfies specified matcher.\n@param maxAgeMatcher assertion for max age property\n@return A {@link DetailedCookieMatcher} instance with and-composed max age property assertion", "predict": "Returns a new DetailedCookieMatcher that matches all cookies with a \"maxAge\" property that is greater than or equal to the given maxAgeMatcher."}, {"ID": 277, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function size() { $countArray = array_map(function ($item) { return count($item); }, $this->identityMap); return array_sum($countArray); }. \n### Response: Calculates the size of the UnitOfWork. The size of the UnitOfWork is the\nnumber of entities in the identity map.\n\n@return integer.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public ResponseSpecBuilder expectHeader(String headerName, Matcher<String> expectedValueMatcher) { spec.header(headerName, expectedValueMatcher); return this; } \n### Response:", "ground_truth": "Expect that a response header matches the supplied header name and hamcrest matcher.\n\n@param headerName           The name of the expected header\n@param expectedValueMatcher The Hamcrest matcher that must conform to the value\n@return The builder", "predict": "Provides a method to check the header of a response.\n\n@param headerName The name of the header to check.\n@param expectedValueMatcher The matcher used to match the value of the header.\n@return a ResponseSpecBuilder object.\n\nThis method takes a header name and a Matcher<String> as parameters and returns a ResponseSpecBuilder object that can be used to check the header of a response. The method sets the header of the response using the specified Matcher and returns this object. This method is useful for checking the header of a response and making sure it matches the expected value."}, {"ID": 278, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private boolean pauseIfRetryNeeded(int retries) { if (retries >= connection.getMaxErrorRetry()) { return false; } long delay = (long) (Math.random() * Math.pow(4, retries) * 125); try { Thread.sleep(delay); } catch (Exception e) { throw MwsUtl.wrap(e); } return true; }. \n### Response: Random exponential back-off sleep on failed request.\n\nIf retry needed sleeps and then return true.\n\nSleep is random so that retry requests do not form spikes.\n\n@param retries\ncurrent retry, 0 for first retry\n\n@return true if should retry..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public ResponseSpecBuilder expectHeader(String headerName, String expectedValue) { spec.header(headerName, expectedValue); return this; } \n### Response:", "ground_truth": "Expect that a response header matches the supplied name and value.\n\n@param headerName    The name of the expected header\n@param expectedValue The value of the expected header\n@return The builder", "predict": "Expected header value.\n\n@return the ResponseSpecBuilder object for building the response spec.."}, {"ID": 279, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (s *SyncState) ResourceInstanceObject(addr addrs.AbsResourceInstance, gen Generation) *ResourceInstanceObjectSrc { s.lock.RLock() defer s.lock.RUnlock() inst := s.state.ResourceInstance(addr) if inst == nil { return nil } return inst.GetGeneration(gen).DeepCopy() }. \n### Response: // ResourceInstanceObject returns a snapshot of the current instance object\n// of the given generation belonging to the instance with the given address,\n// or nil if no such object is tracked..\n//\n// The return value is a pointer to a copy of the object, which the caller may\n// then freely access and mutate..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public ResponseSpecBuilder expectCookie(String cookieName, String expectedValue) { spec.cookie(cookieName, expectedValue); return this; } \n### Response:", "ground_truth": "Expect that a response cookie matches the supplied name and value.\n\n@param cookieName    The name of the expected cookie\n@param expectedValue The value of the expected cookie\n@return The builder", "predict": "// expectCookie returns a new ResponseSpecBuilder object, initialized with the given cookie name and expected value.\n//\n// This method returns a new ResponseSpecBuilder object that can be used to build the ResponseSpec object,\n// which is the structure that contains the HTTP status code, headers, and cookies..\n\n"}, {"ID": 280, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def from_bucket(cls, connection, bucket): \"\"\"Create from bucket object.\"\"\" if bucket is None: raise errors.NoContainerException # It appears that Amazon does not have a single-shot REST query to # determine the number of keys / overall byte size of a bucket. return cls(connection, bucket.name). \n### Response: Create from bucket object..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public ProxySpecification withHost(String host) { return new ProxySpecification(host, port, scheme, username, password); } \n### Response:", "ground_truth": "Specify the hostname of the proxy.\n\n@param host The hostname of the proxy.\n@return A new ProxySpecification instance", "predict": "This method returns a new ProxySpecification object with the specified host."}, {"ID": 281, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function count() { return count($this->filter($this->menu[$this->getLang()], $this->_where, $this->_with)); }. \n### Response: Returns the count for the provided filter options.\n\n@return integer The number of rows for your filtering options..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public JsonPathConfig numberReturnType(NumberReturnType numberReturnType) { return new JsonPathConfig(numberReturnType, defaultParserType, gsonObjectMapperFactory, jackson1ObjectMapperFactory, jackson2ObjectMapperFactory, johnzonObjectMapperFactory, defaultDeserializer, charset); } \n### Response:", "ground_truth": "Specifies if JsonPath should use floats and doubles or BigDecimals to represent Json numbers.\n\n@param numberReturnType The choice.\n@return A new instance of JsonPathConfig with the given configuration", "predict": "This method returns a new JsonPathConfig object for the specified numberReturnType parameter. It uses the default parser type, gsonObjectMapperFactory, jackson1ObjectMapperFactory, jackson2ObjectMapperFactory, johnzonObjectMapperFactory, and default deserializer to configure the JsonPath parsing and deserialization. The charset parameter is set to the specified character set.\n\n@return JsonPathConfig The JsonPathConfig object for the specified numberReturnType parameter."}, {"ID": 282, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function addMessage(SwatMessage $message) { if ($this->parent instanceof SwatTitleable) { $title = $this->parent->getTitle(); if ($title === null) { $field_title = ''; } else { if ($this->parent->getTitleContentType() === 'text/xml') { $field_title = '<strong>' . $this->parent->getTitle() . '</strong>'; } else { $field_title = '<strong>' . SwatString::minimizeEntities( $this->parent->getTitle() ) . '</strong>'; } } } else { $field_title = ''; } if ($message->content_type === 'text/plain') { $content = SwatString::minimizeEntities($message->primary_content); } else { $content = $message->primary_content; } $message->primary_content = sprintf($content, $field_title); $message->content_type = 'text/xml'; parent::addMessage($message); }. \n### Response: Adds a message to this control\n\nBefore the message is added, the content is updated with the name of\nthis controls's parent title field if the parent implements the\n{@link SwatTitleable} interface.\n\n@param SwatMessage $message the message to add.\n\n@see SwatWidget::addMessage().\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public JsonPathConfig defaultParserType(JsonParserType defaultParserType) { return new JsonPathConfig(numberReturnType, defaultParserType, gsonObjectMapperFactory, jackson1ObjectMapperFactory, jackson2ObjectMapperFactory, johnzonObjectMapperFactory, defaultDeserializer, charset); } \n### Response:", "ground_truth": "Creates an json path configuration that uses the specified parser type as default.\n\n@param defaultParserType The parser type to use. If null then classpath scanning will be used.", "predict": "Provides a default JSON parser type for the application.\n\n@param JsonParserType defaultParserType the JSON parser type to use for parsing JSON data.\n\n@return the default JSON parser type for the application.\n\n@see SwatWidget::defaultParserType()."}, {"ID": 283, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def query(self, query, table_name=None, decode_geom=False, is_select=None): \"\"\"Pull the result from an arbitrary SQL SELECT query from a CARTO account into a pandas DataFrame. This is the default behavior, when `is_select=True` Can also be used to perform database operations (creating/dropping tables, adding columns, updates, etc.). In this case, you have to explicitly specify `is_select=False` This method is a helper for the `CartoContext.fetch` and `CartoContext.execute` methods. We strongly encourage you to use any of those methods depending on the type of query you want to run. If you want to get the results of a `SELECT` query into a pandas DataFrame, then use `CartoContext.fetch`. For any other query that performs an operation into the CARTO database, use `CartoContext.execute` Args: query (str): Query to run against CARTO user database. This data will then be converted into a pandas DataFrame. table_name (str, optional): If set (and `is_select=True`), this will create a new table in the user's CARTO account that is the result of the SELECT query provided. Defaults to None (no table created). decode_geom (bool, optional): Decodes CARTO's geometries into a `Shapely <https://github.com/Toblerity/Shapely>`__ object that can be used, for example, in `GeoPandas <http://geopandas.org/>`__. It only works for SELECT queries when `is_select=True` is_select (bool, optional): This argument has to be set depending on the query performed. True for SELECT queries, False for any other query. For the case of a SELECT SQL query (`is_select=True`) the result will be stored into a pandas DataFrame. When an arbitrary SQL query (`is_select=False`) it will perform a database operation (UPDATE, DROP, INSERT, etc.) By default `is_select=None` that means that the method will return a dataframe if the `query` starts with a `select` clause, otherwise it will just execute the query and return `None` Returns: pandas.DataFrame: When `is_select=True` and the query is actually a SELECT query this method returns a pandas DataFrame representation of query supplied otherwise returns None. Pandas data types are inferred from PostgreSQL data types. In the case of PostgreSQL date types, dates are attempted to be converted, but on failure a data type 'object' is used. Raises: CartoException: If there's any error when executing the query Examples: Query a table in CARTO and write a new table that is result of query. This query gets the 10 highest values from a table and returns a dataframe, as well as creating a new table called 'top_ten' in the CARTO account... code:: python topten_df = cc.query( ''' SELECT * FROM my_table ORDER BY value_column DESC LIMIT 10 ''', table_name='top_ten' ) This query joins points to polygons based on intersection, and aggregates by summing the values of the points in each polygon. The query returns a dataframe, with a geometry column that contains polygons and also creates a new table called 'points_aggregated_to_polygons' in the CARTO account... code:: python points_aggregated_to_polygons = cc.query( ''' SELECT polygons.*, sum(points.values) FROM polygons JOIN points ON ST_Intersects(points.the_geom, polygons.the_geom) GROUP BY polygons.the_geom, polygons.cartodb_id. \n### Response: Pull the result from an arbitrary SQL SELECT query from a CARTO account\n        into a pandas DataFrame. This is the default behavior, when `is_select=True`\n\n        Can also be used to perform database operations (creating/dropping tables,\n        adding columns, updates, etc.). In this case, you have to explicitly\n        specify `is_select=False`\n\n        This method is a helper for the `CartoContext.fetch` and `CartoContext.execute`\n        methods. We strongly encourage you to use any of those methods depending on the\n        type of query you want to run. If you want to get the results of a `SELECT` query\n        into a pandas DataFrame, then use `CartoContext.fetch`. For any other query that\n        performs an operation into the CARTO database, use `CartoContext.execute`\n\n        Args:\n            query (str): Query to run against CARTO user database. This data\n              will then be converted into a pandas DataFrame.\n            table_name (str, optional): If set (and `is_select=True`), this will create a new\n              table in the user's CARTO account that is the result of the SELECT\n              query provided. Defaults to None (no table created).\n            decode_geom (bool, optional): Decodes CARTO's geometries into a\n              `Shapely `__\n              object that can be used, for example, in `GeoPandas\n              `__. It only works for SELECT queries when `is_select=True`\n            is_select (bool, optional): This argument has to be set depending on the query\n              performed. True for SELECT queries, False for any other query.\n              For the case of a SELECT SQL query (`is_select=True`) the result will be stored into a\n              pandas DataFrame.\n              When an arbitrary SQL query (`is_select=False`) it will perform a database\n              operation (UPDATE, DROP, INSERT, etc.)\n              By default `is_select=None` that means that the method will return a dataframe if\n              the `query` starts with a `select` clause, otherwise it will just execute the query\n              and return `None`\n\n        Returns:\n            pandas..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public LogConfig defaultStream(PrintStream printStream) { return new LogConfig(printStream, true, logDetailIfValidationFails, urlEncodeRequestUri, true); } \n### Response:", "ground_truth": "Specify a new default stream to the print to.\n\n@param printStream The stream\n@return A new LogConfig instance", "predict": "This method returns a new `LogConfig` object with the default behavior of printing log messages to the default print stream and setting the log level to \"debug\" if validation fails and the requestUri is encoded using `urlEncodeRequestUri`.\n\nThe `defaultStream` method takes a `PrintStream` object as an argument and returns a new `LogConfig` object with the same properties as the original object. This allows the log configuration to be easily reused across different applications that use the same logging library.\n\nThe `logDetailIfValidationFails` property is set to `true` by default, but can be changed to `false` to log only the most important details if validation fails. The `urlEncodeRequestUri` property is set to `true` by default, but can be changed to `false` to log the requestUri without encoding it.\n\nReturns:\n```\nLogConfig\n```"}, {"ID": 284, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private function getContextForSource( $source, $evaluationResult, $aspect, $log, &$contextRef = null ) { $sourceFact = $this->getSourceFact( $source, $evaluationResult, $aspect, $log ); if ( ! $sourceFact ) return array(); // Get the context ref from the source $contextRef = FactValues::getContextRef( $sourceFact ); $context = $this->xbrlInstance->getContext( $contextRef ); return $context; }. \n### Response: Return the context for a source.  if there is a problem accessing the source fact then an exception will be thrown.\n@param string $source The source variable to use\n@param array $evaluationResult\n@param string $aspect The aspect identifier to use\n@param \\XBRL_Log $log\n@param string $contextRef (reference)\n@return array the resulting context.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public LogConfig enableLoggingOfRequestAndResponseIfValidationFails(LogDetail logDetail) { return new LogConfig(defaultPrintStream, prettyPrintingEnabled, logDetail, urlEncodeRequestUri, true); } \n### Response:", "ground_truth": "Enable logging of both the request and the response if REST Assureds test validation fails with the specified log detail\n\n@param logDetail The log detail to show in the log\n@return A new LogConfig instance", "predict": "Enables logging of the request and response if validation fails.\n\n@param LogDetail $logDetail The log detail to use\n@return LogConfig The log config object\n\nThis method enables logging of the request and response if validation fails. It returns a new LogConfig object with the specified default print stream, pretty Printing enabled, log detail, and urlEncodeRequestUri option enabled."}, {"ID": 285, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function fetchUniqueIconsList() { $md5s = []; foreach ($this->getIconsList() as $path => $name) { $hash = md5_file($path); if (in_array($hash, $md5s, true)) { continue; } $md5s[$path] = $hash; $list[$path] = $name; } return $list; }. \n### Response: Fetches list of unique icons.\n@return array.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: static HttpRequestBase createHttpRequest(URI uri, String httpMethod, boolean hasBody) { String method = notNull(upperCase(trimToNull(httpMethod)), \"Http method\"); Class<? extends HttpRequestBase> type = HTTP_METHOD_TO_HTTP_REQUEST_TYPE.get(method); final HttpRequestBase httpRequest; // If we are sending HTTP method that does not allow body (like GET) then HTTP library prevents // us from including it, however we chose to allow deviations from standard if user wants so, // so it needs custom handling - hence the second condition below. // Otherwise we should use standard implementation found in the map if (type == null || (!(type.isInstance(HttpEntityEnclosingRequest.class)) && hasBody)) { httpRequest = new CustomHttpMethod(method, uri); } else { try { httpRequest = type.newInstance(); } catch (Exception e) { throw new RuntimeException(e); } httpRequest.setURI(uri); } return httpRequest; } \n### Response:", "ground_truth": "Get the HttpRequest class that represents this request type.\n\n@return a non-abstract class that implements {@link HttpRequest}", "predict": "This method creates an HTTP request using the given URI, HTTP method, and whether the request includes a body. It also checks if the requested method does not allow the inclusion of a body, and if so, it uses a custom implementation of the `CustomHttpMethod` class. Otherwise, it uses the standard implementation found in the `map` object. The method returns the created HTTP request.\n@return HttpRequestBase."}, {"ID": 286, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (a Authorizer) CurrentUser(rw http.ResponseWriter, req *http.Request) (user UserData, e error) { if err := a.Authorize(rw, req, false); err != nil { return user, mkerror(err.Error()) } authSession, _ := a.cookiejar.Get(req, \"auth\") username, ok := authSession.Values[\"username\"].(string) if !ok { return user, mkerror(\"User not found in authsession\") } return a.backend.User(username) }. \n### Response: // CurrentUser returns the currently logged in user and a boolean validating\n// the information..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public MultiPartConfig defaultBoundary(String defaultBoundary) { return new MultiPartConfig(defaultControlName, defaultFileName, defaultSubtype, defaultBoundary, defaultCharset, true); } \n### Response:", "ground_truth": "Specify an explicit default multipart boundary to use when sending multi-part data.\n\n@param defaultBoundary The boundary to set\n@return An updated MultiPartConfig", "predict": "// defaultBoundary returns a new MultiPartConfig object with the specified default boundary and all default values.."}, {"ID": 287, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (a *assertion) Length(obtained interface{}, expected int, msgs ...string) bool { length, err := a.Len(obtained) if err != nil { return a.failer.Fail(Length, ValueDescription(obtained), expected, err.Error()) } if length != expected { return a.failer.Fail(Length, length, expected, msgs...) } return true }. \n### Response: // Length implements Assertion..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public MockMvcRequestSpecBuilder addAttribute(String attributeName, Object attributeValue) { spec.attribute(attributeName, attributeValue); return this; } \n### Response:", "ground_truth": "Add request attribute\n\n@param attributeName  The attribute name\n@param attributeValue The attribute value\n@return The request specification builder", "predict": "// addAttribute method implementation.."}, {"ID": 288, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected function getGuzzleHandler() { if (property_exists($this, 'app') && isset($this->app['guzzle_handler']) && is_string($this->app['guzzle_handler'])) { $handler = $this->app['guzzle_handler']; return new $handler(); } return \\GuzzleHttp\\choose_handler(); }. \n### Response: Get guzzle handler.\n\n@return callable.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public MockMvcRequestSpecBuilder addHeader(String headerName, String headerValue) { spec.header(headerName, headerValue); return this; } \n### Response:", "ground_truth": "Add a header to be sent with the request\n\n@param headerName  The header name\n@param headerValue The header value\n@return The request specification builder", "predict": "Add header to request spec.\n\n@return MockMvcRequestSpecBuilder instance."}, {"ID": 289, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void configureSecurity(ServletContextHandler context, String realmName, String authMethod, String formLoginPage, String formErrorPage) { final SecurityHandler securityHandler = context.getSecurityHandler(); Authenticator authenticator = null; if (authMethod == null) { LOG.warn(\"UNKNOWN AUTH METHOD: \" + authMethod); } else { switch (authMethod) { case Constraint.__FORM_AUTH: authenticator = new FormAuthenticator(); securityHandler.setInitParameter(FormAuthenticator.__FORM_LOGIN_PAGE, formLoginPage); securityHandler.setInitParameter(FormAuthenticator.__FORM_ERROR_PAGE, formErrorPage); break; case Constraint.__BASIC_AUTH: authenticator = new BasicAuthenticator(); break; case Constraint.__DIGEST_AUTH: authenticator = new DigestAuthenticator(); break; case Constraint.__CERT_AUTH: authenticator = new ClientCertAuthenticator(); break; case Constraint.__CERT_AUTH2: authenticator = new ClientCertAuthenticator(); break; case Constraint.__SPNEGO_AUTH: authenticator = new SpnegoAuthenticator(); break; default: authenticator = getAuthenticator(authMethod); break; } } securityHandler.setAuthenticator(authenticator); securityHandler.setRealmName(realmName); }. \n### Response: Sets the security authentication method and the realm name on the\nsecurity handler. This has to be done before the context is started.\n\n@param context\n@param realmName\n@param authMethod\n@param formLoginPage\n@param formErrorPage.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public MockMvcRequestSpecBuilder addMultiPart(String controlName, String contentBody, String mimeType) { spec.multiPart(controlName, mimeType); return this; } \n### Response:", "ground_truth": "Specify a string to send to the server using multi-part form data with a specific mime-type.\n\n@param controlName Defines the control name of the body part. In HTML this is the attribute name of the input tag.\n@param contentBody The string to send\n@param mimeType    The mime-type\n@return The request specification", "predict": "Adds a multi-part response to the request.\n\n@param controlName\n@param contentBody\n@param mimeType\n\nThis method adds a multi-part response to the request. The control name is used to identify the part of the response that corresponds to the control specified in the request. The content body is the content of the part, and the mimeType is the type of the content. The method returns the MockMvcRequestSpecBuilder object, which can be used to build the request."}, {"ID": 290, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function getDiscounts() { if ($this->getTotalDiscount() && $this->getTotalDiscount()->getBruttoPrice() == 0 && count($this->_aItemDiscounts) == 0) { return []; } return array_merge($this->_aItemDiscounts, $this->_aDiscounts); }. \n### Response: Returns applied discount information array\n\n@return array.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public MockMvcRequestSpecBuilder addResultHandlers(ResultHandler resultHandler, ResultHandler... additionalResultHandlers) { spec.resultHandlers(resultHandler, additionalResultHandlers); return this; } \n### Response:", "ground_truth": "Add a result handler\n\n@param resultHandler The result handler\n@return MockMvcRequestSpecBuilder", "predict": "Adds result handlers to the request spec builder\n\n@param ResultHandler result handler to add to the request spec builder\n@param AdditionalResultHandlers additional result handlers to add to the request spec builder\n@return MockMvcRequestSpecBuilder instance\n\nThis method adds two ResultHandlers to the request spec builder and returns the builder. It takes two arguments: a result handler and an array of additional result handlers. The result handler is added to the request spec builder, and the additional result handlers are added in the order specified in the array. The method returns the MockMvcRequestSpecBuilder instance, which can be used to configure other aspects of the request spec."}, {"ID": 291, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function getUsedSubdivisionFields() { $fields = [ AddressField::ADMINISTRATIVE_AREA, AddressField::LOCALITY, AddressField::DEPENDENT_LOCALITY, ]; // Remove fields not used by the format, and reset the keys. $fields = array_intersect($fields, $this->getUsedFields()); $fields = array_values($fields); return $fields; }. \n### Response: Gets the list of used subdivision fields.\n\n@return array An array of address fields..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public <T> HttpClientConfig setParam(String parameterName, T parameterValue) { notNull(parameterName, \"Parameter name\"); final Map<String, Object> newParams = new HashMap<String, Object>(httpClientParams); newParams.put(parameterName, parameterValue); return new HttpClientConfig(httpClientFactory, newParams, httpMultipartMode, shouldReuseHttpClientInstance, NO_HTTP_CLIENT, true); } \n### Response:", "ground_truth": "            The parameter type\n@return An updated HttpClientConfig", "predict": "Sets a parameter value for the HttpClientConfig object.\n\n@param parameterName The name of the parameter.\n@param parameterValue The value of the parameter.\n@return A new HttpClientConfig object with the updated parameters.\n\nNote: This method sets a single parameter value for the HttpClientConfig object. It does not modify any of the existing parameters or return a new instance of the HttpClientConfig object."}, {"ID": 292, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function makelink() { /* * If link set directly that forces using it rather than build */ if ($this->link) { return $this->link; } $pageid = static::makeParameterId($this->for); $parameters = $this->app['request']->query->all(); if (array_key_exists($pageid, $parameters)) { unset($parameters[$pageid]); } else { unset($parameters['page']); } $parameters[$pageid] = ''; $link = '?' . http_build_query($parameters); return $link; }. \n### Response: Used for calling from template to build up right paginated URL link.\n\n@return string.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public HttpClientConfig addParams(Map<String, ?> httpClientParams) { notNull(httpClientParams, \"httpClientParams\"); final Map<String, Object> newParams = new HashMap<String, Object>(this.httpClientParams); newParams.putAll(httpClientParams); return new HttpClientConfig(httpClientFactory, newParams, httpMultipartMode, shouldReuseHttpClientInstance, NO_HTTP_CLIENT, true); } \n### Response:", "ground_truth": "", "predict": "This method adds new parameters to the HttpClientConfig object. It does this by calling the notNull() method to check if the parameters are null, and then creating a new HashMap with the values from the original parameters. Finally, it returns a new HttpClientConfig object with the new parameters and the appropriate configuration options."}, {"ID": 293, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (s *Server) wrap() { oldHook := s.Config.ConnState s.Config.ConnState = func(c net.Conn, cs http.ConnState) { s.mu.Lock() defer s.mu.Unlock() switch cs { case http.StateNew: s.wg.Add(1) if _, exists := s.conns[c]; exists { panic(\"invalid state transition\") } if s.conns == nil { s.conns = make(map[net.Conn]http.ConnState) } s.conns[c] = cs if s.closed { // Probably just a socket-late-binding dial from // the default transport that lost the race (and // thus this connection is now idle and will // never be used). s.closeConn(c) } case http.StateActive: if oldState, ok := s.conns[c]; ok { if oldState != http.StateNew && oldState != http.StateIdle { panic(\"invalid state transition\") } s.conns[c] = cs } case http.StateIdle: if oldState, ok := s.conns[c]; ok { if oldState != http.StateActive { panic(\"invalid state transition\") } s.conns[c] = cs } if s.closed { s.closeConn(c) } case http.StateHijacked, http.StateClosed: s.forgetConn(c) } if oldHook != nil { oldHook(c, cs) } } }. \n### Response: // wrap installs the connection state-tracking hook to know which\n// connections are idle..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public HttpClientConfig httpClientFactory(HttpClientFactory httpClientFactory) { return new HttpClientConfig(httpClientFactory, httpClientParams, httpMultipartMode, shouldReuseHttpClientInstance, NO_HTTP_CLIENT, true); } \n### Response:", "ground_truth": "", "predict": "// httpClientFactory returns a new HttpClientConfig instance with the specified\n// httpClientFactory, httpClientParams, httpMultipartMode, and shouldReuseHttpClientInstance.\n// This is used to create a new HttpClient instance when needed."}, {"ID": 294, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def get_arcs(analysis): \"\"\" Hit stats for each branch. Returns a flat list where every four values represent a branch: 1. line-number 2. block-number (not used) 3. branch-number 4. hits (we only get 1/0 from coverage.py) \"\"\" if not analysis.has_arcs(): return None branch_lines = analysis.branch_lines() branches = [] for l1, l2 in analysis.arcs_executed(): if l1 in branch_lines: branches.extend((l1, 0, abs(l2), 1)) for l1, l2 in analysis.arcs_missing(): if l1 in branch_lines: branches.extend((l1, 0, abs(l2), 0)) return branches. \n### Response: Hit stats for each branch.\n\n        Returns a flat list where every four values represent a branch:\n        1. line-number\n        2. block-number (not used)\n        3. branch-number\n        4. hits (we only get 1/0 from coverage.py).\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public HttpClientConfig httpMultipartMode(HttpMultipartMode httpMultipartMode) { return new HttpClientConfig(httpClientFactory, httpClientParams, httpMultipartMode, shouldReuseHttpClientInstance, httpClient, true); } \n### Response:", "ground_truth": "", "predict": "Method: `httpMultipartMode()`\n\nDescription: Returns an instance of `HttpClientConfig` with the specified `HttpMultipartMode` parameter set to `true`.\n\nReturns: An instance of `HttpClientConfig` with the specified `HttpMultipartMode` parameter set to `true`.\n\nExample: `new HttpClientConfig(httpClientFactory, httpClientParams, HttpMultipartMode.BROWSER_multipartFormReuse, shouldReuseHttpClientInstance, httpClient, true)`"}, {"ID": 295, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (proof *RangeProof) Verify(root []byte) error { if proof == nil { return cmn.ErrorWrap(ErrInvalidProof, \"proof is nil\") } err := proof.verify(root) return err }. \n### Response: // Verify that proof is valid..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public <T> T get(String path) { final JSONAssertion jsonAssertion = createJsonAssertion(path, params); final Object json = jsonParser.parseWith(createConfigurableJsonSlurper()); return (T) jsonAssertion.getResult(json, null); } \n### Response:", "ground_truth": "Get the result of an Object path expression as a boolean.\n\n@param path The Object path.\n@return The object matching the Object path. This may be any primitive type, a List or a Map.  A {@link java.lang.ClassCastException} will be thrown if the object\ncannot be casted to the expected type.", "predict": "// Create a JSON assertion for the given path and parameters..\n\n// Parse the JSON object with the given parser and return the result as a T.."}, {"ID": 296, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def _resolve_dependencies(self, cur, dependencies): \"\"\" Function checks if dependant packages are installed in DB \"\"\" list_of_deps_ids = [] _list_of_deps_unresolved = [] _is_deps_resolved = True for k, v in dependencies.items(): pgpm.lib.utils.db.SqlScriptsHelper.set_search_path(cur, self._pgpm_schema_name) cur.execute(\"SELECT _find_schema('{0}', '{1}')\" .format(k, v)) pgpm_v_ext = tuple(cur.fetchone()[0][1:-1].split(',')) try: list_of_deps_ids.append(int(pgpm_v_ext[0])) except: pass if not pgpm_v_ext[0]: _is_deps_resolved = False _list_of_deps_unresolved.append(\"{0}: {1}\".format(k, v)) return _is_deps_resolved, list_of_deps_ids, _list_of_deps_unresolved. \n### Response: Function checks if dependant packages are installed in DB.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public int getInt(String path) { //The type returned from Groovy depends on the input, so we need to handle different numerical types. Object value = get(path); if (value instanceof Integer) { return (Integer) value; } else if (value instanceof Short) { return ((Short) value).intValue(); } else if (value instanceof Long) { return ((Long) value).intValue(); } else { return ObjectConverter.convertObjectTo(value, Integer.class); } } \n### Response:", "ground_truth": "Get the result of an Object path expression as an int.\n\n@param path The Object path.\n@return The int matching the Object path. A {@link java.lang.ClassCastException} will be thrown if the object\ncannot be casted to the expected type.", "predict": "Method returns the integer value of the specified path, depending on the numerical type of the object returned by the Groovy `get()` method."}, {"ID": 297, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def index_view(request, auth_form=None, force_login=False, added_context=None): \"\"\"Process and show the main login page or dashboard if logged in.\"\"\" if request.user.is_authenticated and not force_login: return dashboard_view(request) else: auth_form = auth_form or AuthenticateForm() request.session.set_test_cookie() fcps_emerg = get_fcps_emerg(request) try: login_warning = settings.LOGIN_WARNING except AttributeError: login_warning = None if fcps_emerg and not login_warning: login_warning = fcps_emerg ap_week = get_ap_week_warning(request) if ap_week and not login_warning: login_warning = ap_week events = Event.objects.filter(time__gte=datetime.now(), time__lte=(datetime.now().date() + relativedelta(weeks=1)), public=True).this_year() sports_events = events.filter(approved=True, category=\"sports\").order_by('time')[:3] school_events = events.filter(approved=True, category=\"school\").order_by('time')[:3] data = { \"auth_form\": auth_form, \"request\": request, \"git_info\": settings.GIT, \"bg_pattern\": get_bg_pattern(), \"theme\": get_login_theme(), \"login_warning\": login_warning, \"senior_graduation\": settings.SENIOR_GRADUATION, \"senior_graduation_year\": settings.SENIOR_GRADUATION_YEAR, \"sports_events\": sports_events, \"school_events\": school_events } schedule = schedule_context(request) data.update(schedule) if added_context is not None: data.update(added_context) return render(request, \"auth/login.html\", data). \n### Response: Process and show the main login page or dashboard if logged in..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public byte getByte(String path) { //The type returned from Groovy depends on the input, so we need to handle different numerical types. Object value = get(path); if (value instanceof Byte) { return (Byte) value; } else if (value instanceof Long) { return ((Long) value).byteValue(); } else if (value instanceof Integer) { return ((Integer) value).byteValue(); } else { return ObjectConverter.convertObjectTo(value, Byte.class); } } \n### Response:", "ground_truth": "Get the result of an Object path expression as a byte.\n\n@param path The Object path.\n@return The object matching the Object path. A {@link java.lang.ClassCastException} will be thrown if the object\ncannot be casted to the expected type.", "predict": "The method `getByte` in the Java code is used to retrieve a byte value from a given path. It handles different numerical types such as Byte, Long, and Integer and returns the appropriate byte value based on the input type. The method uses the `get` method from the Groovy code to retrieve the value from the given path. If the value is an instance of Byte, the method returns the byte value as a `Byte` object. If the value is an instance of Long, the method returns the byte value as a `Long` object. If the value is an instance of Integer, the method returns the byte value as a `Integer` object. If the value is not an instance of any of the above types, the method returns the `ObjectConverter` object's `convertObjectTo` method to convert the value to a `Byte` object."}, {"ID": 298, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (s *Service) FindUser(ctx context.Context, filter platform.UserFilter) (*platform.User, error) { op := OpPrefix + platform.OpFindUser if filter.ID != nil { u, err := s.FindUserByID(ctx, *filter.ID) if err != nil { return nil, &platform.Error{ Op: op, Err: err, } } return u, nil } if filter.Name != nil { var u *platform.User err := s.forEachUser(ctx, func(user *platform.User) bool { if user.Name == *filter.Name { u = user return false } return true }) if err != nil { return nil, err } if u == nil { return nil, &platform.Error{ Code: platform.ENotFound, Op: op, Msg: \"user not found\", } } return u, nil } return nil, &platform.Error{ Code: platform.EInvalid, Op: op, Msg: \"expected filter to contain name\", } }. \n### Response: // FindUser returns the first user that matches a filter..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public short getShort(String path) { //The type returned from Groovy depends on the input, so we need to handle different numerical types. Object value = get(path); if (value instanceof Short) { return (Short) value; } else if (value instanceof Long) { return ((Long) value).shortValue(); } else if (value instanceof Integer) { return ((Integer) value).shortValue(); } else { return ObjectConverter.convertObjectTo(value, Short.class); } } \n### Response:", "ground_truth": "Get the result of an Object path expression as a short.\n\n@param path The Object path.\n@return The object matching the Object path. A {@link java.lang.ClassCastException} will be thrown if the object\ncannot be casted to the expected type.", "predict": "// GetShort returns the short value for the given path. It handles different numerical types such as Short, Long, and Integer."}, {"ID": 299, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def moment_inertia(self): \"\"\" The analytic inertia tensor of the sphere primitive. Returns ---------- tensor: (3,3) float, 3D inertia tensor \"\"\" tensor = inertia.sphere_inertia(mass=self.volume, radius=self.primitive.radius) return tensor. \n### Response: The analytic inertia tensor of the sphere primitive.\n\n        Returns\n        ----------\n        tensor: (3,3) float, 3D inertia tensor.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public float getFloat(String path) { final Object value = get(path); //Groovy will always return a Double for floating point values. if (value instanceof Double) { return ((Double) value).floatValue(); } else { return ObjectConverter.convertObjectTo(value, Float.class); } } \n### Response:", "ground_truth": "Get the result of an Object path expression as a float.\n\n@param path The Object path.\n@return The object matching the Object path. A {@link java.lang.ClassCastException} will be thrown if the object\ncannot be casted to the expected type.", "predict": "public float getFloat(String path) {\n    final Object value = get(path);\n    // Groovy will always return a Double for floating point values.\n    if (value instanceof Double) {\n        return ((Double) value).floatValue();\n    } else {\n        return ObjectConverter.convertObjectTo(value, Float.class);\n    }\n}"}, {"ID": 300, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void stop() { executor.shutdown(); // Disable new tasks from being submitted try { // Wait a while for existing tasks to terminate if (!executor.awaitTermination(1, TimeUnit.SECONDS)) { executor.shutdownNow(); // Cancel currently executing tasks // Wait a while for tasks to respond to being cancelled if (!executor.awaitTermination(1, TimeUnit.SECONDS)) { LOG.warn(getClass().getSimpleName() + \": ScheduledExecutorService did not terminate\"); } } } catch (InterruptedException ie) { // (Re-)Cancel if current thread also interrupted executor.shutdownNow(); // Preserve interrupt status Thread.currentThread().interrupt(); } }. \n### Response: Stops the reporter and shuts down its thread of execution.\n\nUses the shutdown pattern from http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ExecutorService.html.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public double getDouble(String path) { final Object value = get(path); if (value instanceof Double) { return (Double) value; } return ObjectConverter.convertObjectTo(value, Double.class); } \n### Response:", "ground_truth": "Get the result of an Object path expression as a double.\n\n@param path The Object path.\n@return The object matching the Object path. A {@link java.lang.ClassCastException} will be thrown if the object\ncannot be casted to the expected type.", "predict": "This method retrieves a double value from a specified path and returns it. It first calls the `get` method to retrieve the value, and then checks if it is an instance of `Double`. If it is, it returns it directly. Otherwise, it uses the `ObjectConverter` class to convert the value to `Double.class`.\n\nThe method uses the `convertObjectTo` method to achieve this, which takes an object and returns a new object with the same type and class as the original object. This method is likely used to convert any non-double values to `Double.class`.\n\nNote that this method does not handle any exceptions or errors that may occur during the retrieval of the value. It simply returns the retrieved value if it is successful, or an exception if it is not successful."}, {"ID": 301, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (cmd *UpdateFolderCommand) UpdateDashboardModel(dashFolder *Dashboard, orgId int64, userId int64) { dashFolder.OrgId = orgId dashFolder.Title = strings.TrimSpace(cmd.Title) dashFolder.Data.Set(\"title\", dashFolder.Title) if cmd.Uid != \"\" { dashFolder.SetUid(cmd.Uid) } dashFolder.SetVersion(cmd.Version) dashFolder.IsFolder = true if userId == 0 { userId = -1 } dashFolder.UpdatedBy = userId dashFolder.UpdateSlug() }. \n### Response: // UpdateDashboardModel updates an existing model from command into model for update.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public long getLong(String path) { //The type returned from Groovy depends on the input, so we need to handle different numerical types. Object value = get(path); if (value instanceof Long) { return (Long) value; } else if (value instanceof Short) { return ((Short) value).longValue(); } else if (value instanceof Integer) { return ((Integer) value).longValue(); } else { return ObjectConverter.convertObjectTo(value, Long.class); } } \n### Response:", "ground_truth": "Get the result of an Object path expression as a long.\n\n@param path The Object path.\n@return The object matching the Object path. A {@link java.lang.ClassCastException} will be thrown if the object\ncannot be casted to the expected type.", "predict": "// GetLong retrieves a long value from a specified path. Handling different numerical types is necessary to ensure accurate results."}, {"ID": 302, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public Boolean verifySubscriberRequestedSubscription(SubscriptionRequest sr) throws SubscriptionOriginVerificationException { LOG.info(\"(Hub) -> Subscriber, sending notification to verify the origin of the subscription {}.\", sr.getCallback()); SubscriptionConfirmationRequest sc = new SubscriptionConfirmationRequest(sr.getMode(), sr.getTopic(), \"challenge\", \"0\"); URI uri; try { uri = new URIBuilder(sr.getCallback()).setParameters(sc.toRequestParameters()).build(); } catch (URISyntaxException e) { throw new SubscriptionOriginVerificationException(\"URISyntaxException while sending a confirmation of subscription\", e); } HttpGet httpGet = new HttpGet(uri); CloseableHttpClient httpclient = HttpClients.createDefault(); CloseableHttpResponse response; try { response = httpclient.execute(httpGet); } catch (IOException e) { throw new SubscriptionOriginVerificationException(\"IOException while sending a confirmation of subscription\", e); } LOG.info(\"Subscriber replied with the http code {}.\", response.getStatusLine().getStatusCode()); Integer returnedCode = response.getStatusLine().getStatusCode(); // if code is a success code return true, else false return (199 < returnedCode) && (returnedCode < 300); }. \n### Response: Output method that sends a subscription confirmation for the subscriber to avoid DoS attacks, or false subscription.\n\n@param sr\n@return True case the subscription was confirmed, or False otherwise\n@throws org.ow2.chameleon.fuchsia.push.base.hub.exception.SubscriptionOriginVerificationException.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public <T> List<T> getList(String path, Class<T> genericType) { if (genericType == null) { throw new IllegalArgumentException(\"Generic type cannot be null\"); } final List<T> original = get(path); final List<T> newList = new LinkedList<T>(); if (original != null) { for (T t : original) { T e; if (t instanceof Map && !genericType.isAssignableFrom(Map.class)) { // TODO Avoid double parsing String str = objectToString(t); //noinspection unchecked e = (T) jsonStringToObject(str, genericType); } else { e = ObjectConverter.convertObjectTo(t, genericType); } newList.add(e); } } return Collections.unmodifiableList(newList); } \n### Response:", "ground_truth": "Get the result of an Object path expression as a list.\n\n@param path        The Object path.\n@param genericType The generic list type\n@param          The type\n@return The object matching the Object path. A {@link java.lang.ClassCastException} will be thrown if the object\ncannot be casted to the expected type.", "predict": "Method that returns a list of the specified type, based on a given path.\n\n@param path\n@return A list of the specified type, based on the given path\n@throws org.ow2.chameleon.fuchsia.push.base.hub.exception.InvalidPathException.\n\nThis method takes a path as input and returns a list of the specified type. It first calls the `get` method with the path, which returns a list of the specified type. If the generic type is null, it throws an IllegalArgumentException.\n\nThen, it creates a new list by copying the original list and adding each element to the new list, except for elements that are of type Map, which are converted to objects using the `objectToString` and `jsonStringToObject` methods, respectively.\n\nFinally, it returns the new list, which is unmodifiable."}, {"ID": 303, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def extentSearch(self, xmin, ymin, xmax, ymax): \"\"\"Filters the data by a geographical bounding box. The bounding box is given as lower left point coordinates and upper right point coordinates. Note: It's necessary that the dataframe has a `lat` and `lng` column in order to apply the filter. Check if the method could be removed in the future. (could be done via freeSearch) Returns ------- list: A list containing all indexes with filtered data. Matches will be `True`, the remaining items will be `False`. If the dataFrame is empty, an empty list will be returned. \"\"\" if not self._dataFrame.empty: try: questionMin = (self._dataFrame.lat >= xmin) & ( self._dataFrame.lng >= ymin) questionMax = (self._dataFrame.lat <= xmax) & ( self._dataFrame.lng <= ymax) return np.logical_and(questionMin, questionMax) except AttributeError: return [] else: return []. \n### Response: Filters the data by a geographical bounding box.\n\n        The bounding box is given as lower left point coordinates and upper\n        right point coordinates.\n\n        Note:\n            It's necessary that the dataframe has a `lat` and `lng` column\n            in order to apply the filter.\n\n            Check if the method could be removed in the future. (could be done\n            via freeSearch)\n\n        Returns\n        -------\n            list: A list containing all indexes with filtered data. Matches\n                will be `True`, the remaining items will be `False`. If the\n                dataFrame is empty, an empty list will be returned..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public <K, V> Map<K, V> getMap(String path) { return get(path); } \n### Response:", "ground_truth": "Get the result of an Object path expression as a map.\n\n@param path The Object path.\n@param   The type of the expected key\n@param   The type of the expected value\n@return The map matching the Object path. A {@link java.lang.ClassCastException} will be thrown if the object\ncannot be casted to the expected type.", "predict": "Returns a map with key-value pairs based on the path specified.\n\nNote:\n\t* The path must be a valid key-value pair in the `path` map.\n\t* The `get` method returns the value associated with the specified path.\n\nExample:\n```java\nMap<String, Integer> map = getMap(\"path/to/first\");\n```\nThis method returns a map with key-value pairs based on the path specified. The key is the path, and the value is the corresponding value in the `path` map."}, {"ID": 304, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function addicon($icon, $tag = 'i') { $icon = static::icon($icon, $tag); return $this->addElement($icon); }. \n### Response: Shortcut to creating a FontAwesome item.\n\n@param string $value\n\n@return Html instance.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public <T> T getObject(String path, Class<T> objectType) { Object object = getFromPath(path, false); return getObjectAsType(object, objectType); } \n### Response:", "ground_truth": "Get an XML document as a Java Object.\n\n@param objectType The type of the java object.\n@param         The type of the java object\n@return A Java object representation of the XML document", "predict": "Shortcut to getting an object from a path.\n\n@param String path\n\n@return T object."}, {"ID": 305, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public com.google.api.ads.adwords.axis.v201809.cm.Money getTargetCpa() { return targetCpa; }. \n### Response: Gets the targetCpa value for this TargetCpaBiddingScheme.\n\n@return targetCpa   * Average cost per acquisition (CPA) target. This target should\nbe greater than or equal to\nminimum billable unit based on the currency for\nthe account..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public RequestSpecBuilder setBody(Object object, ObjectMapper mapper) { spec.body(object, mapper); return this; } \n### Response:", "ground_truth": "", "predict": "Sets the body of the request.\n\n@param object   The object to be set as the request body.\n@param mapper  The ObjectMapper object used to serialize and deserialize the request body.\n\n@return This instance of RequestSpecBuilder.\n\nThis method sets the body of the request using the provided object and the ObjectMapper object. The request body is serialized and deserialized using the specified mapper. The returned instance of RequestSpecBuilder is used to build the new request."}, {"ID": 306, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def update_post(params) post_file = params[:post][:name] post = jekyll_post(post_file) yaml_config = merge_config(post.data, params) write_post_contents(params[:post][:content], yaml_config, post_file) post_file end. \n### Response: Update exiting post..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public RequestSpecBuilder addCookie(String key, Object value, Object... cookieNameValuePairs) { spec.cookie(key, value, cookieNameValuePairs); return this; } \n### Response:", "ground_truth": "Add a cookie to be sent with the request.\n\n@param key                  The cookie key\n@param value                The cookie value\n@param cookieNameValuePairs Additional cookies values. This will actually create two cookies with the same name but with different values.\n@return The request specification builder", "predict": "Adds a cookie to the request specification."}, {"ID": 307, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static ReadStreamOld open(String string) { VfsStringReader ss = new VfsStringReader(string); ReadStreamOld rs = new ReadStreamOld(ss); try { rs.setEncoding(\"UTF-8\"); } catch (Exception e) { } //rs.setPath(new NullPath(\"string\")); return rs; }. \n### Response: Creates a new ReadStream reading bytes from the given string.\n\n@param string the source string.\n\n@return a ReadStream reading from the string..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public RequestSpecBuilder addParam(String parameterName, Object... parameterValues) { spec.param(parameterName, parameterValues); return this; } \n### Response:", "ground_truth": "Add a parameter to be sent with the request.\n\n@param parameterName   The parameter name\n@param parameterValues Zero to many parameter values for this parameter name.\n@return The request specification builder", "predict": "Adds a new parameter to the RequestSpec.\n\n@param parameterName the name of the parameter.\n\n@param parameterValues the values of the parameter.\n\n@return the RequestSpecBuilder object.."}, {"ID": 308, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def prompt(questions: List[Dict[Text, Any]], answers: Optional[Dict[Text, Any]] = None, patch_stdout: bool = False, true_color: bool = False, kbi_msg: Text = DEFAULT_KBI_MESSAGE, **kwargs): \"\"\"Prompt the user for input on all the questions.\"\"\" if isinstance(questions, dict): questions = [questions] answers = answers or {} for question_config in questions: # import the question if 'type' not in question_config: raise PromptParameterException('type') if 'name' not in question_config: raise PromptParameterException('name') choices = question_config.get('choices') if choices is not None and callable(choices): question_config['choices'] = choices(answers) _kwargs = kwargs.copy() _kwargs.update(question_config) _type = _kwargs.pop('type') _filter = _kwargs.pop('filter', None) name = _kwargs.pop('name') when = _kwargs.pop('when', None) if true_color: _kwargs[\"color_depth\"] = ColorDepth.TRUE_COLOR try: if when: # at least a little sanity check! if callable(question_config['when']): try: if not question_config['when'](answers): continue except Exception as e: raise ValueError(\"Problem in 'when' check of {} \" \"question: {}\".format(name, e)) else: raise ValueError(\"'when' needs to be function that \" \"accepts a dict argument\") if _filter: # at least a little sanity check! if not callable(_filter): raise ValueError(\"'filter' needs to be function that \" \"accepts an argument\") if callable(question_config.get('default')): _kwargs['default'] = question_config['default'](answers) create_question_func = prompt_by_name(_type) if not create_question_func: raise ValueError(\"No question type '{}' found. \" \"Known question types are {}.\" \"\".format(_type, \", \".join(AVAILABLE_PROMPTS))) missing_args = list(utils.missing_arguments(create_question_func, _kwargs)) if missing_args: raise PromptParameterException(missing_args[0]) question = create_question_func(**_kwargs) answer = question.unsafe_ask(patch_stdout) if answer is not None: if _filter: try: answer = _filter(answer) except Exception as e: raise ValueError(\"Problem processing 'filter' of {} \" \"question: {}\".format(name, e)) answers[name] = answer except KeyboardInterrupt: print('') print(kbi_msg) print('') return {} return answers. \n### Response: Prompt the user for input on all the questions..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public RequestSpecBuilder addParam(String parameterName, Collection<?> parameterValues) { spec.param(parameterName, parameterValues); return this; } \n### Response:", "ground_truth": "Add a multi-value parameter to be sent with the request.\n\n@param parameterName   The parameter key\n@param parameterValues The parameter values\n@return The request specification builder", "predict": "Add a parameter to the RequestSpecBuilder."}, {"ID": 309, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def reboot(timeout=5, in_seconds=False, wait_for_reboot=False, # pylint: disable=redefined-outer-name only_on_pending_reboot=False): ''' Reboot a running system. Args: timeout (int): The number of minutes/seconds before rebooting the system. Use of minutes or seconds depends on the value of ``in_seconds``. Default is 5 minutes. in_seconds (bool): ``True`` will cause the ``timeout`` parameter to be in seconds. ``False`` will be in minutes. Default is ``False``. .. versionadded:: 2015.8.0 wait_for_reboot (bool) ``True`` will sleep for timeout + 30 seconds after reboot has been initiated. This is useful for use in a highstate. For example, you may have states that you want to apply only after the reboot. Default is ``False``. .. versionadded:: 2015.8.0 only_on_pending_reboot (bool): If this is set to ``True``, then the reboot will only proceed if the system reports a pending reboot. Setting this parameter to ``True`` could be useful when calling this function from a final housekeeping state intended to be executed at the end of a state run (using *order: last*). Default is ``False``. Returns: bool: ``True`` if successful (a reboot will occur), otherwise ``False`` CLI Example: .. code-block:: bash salt '*' system.reboot 5 salt '*' system.reboot 5 True Invoking this function from a final housekeeping state: .. code-block:: yaml final_housekeeping: module.run: - name: system.reboot - only_on_pending_reboot: True - order: last ''' ret = shutdown(timeout=timeout, reboot=True, in_seconds=in_seconds, only_on_pending_reboot=only_on_pending_reboot) if wait_for_reboot: seconds = _convert_minutes_seconds(timeout, in_seconds) time.sleep(seconds + 30) return ret. \n### Response: Reboot a running system.\n\n    Args:\n\n        timeout (int):\n            The number of minutes/seconds before rebooting the system. Use of\n            minutes or seconds depends on the value of ``in_seconds``. Default\n            is 5 minutes.\n\n        in_seconds (bool):\n            ``True`` will cause the ``timeout`` parameter to be in seconds.\n             ``False`` will be in minutes. Default is ``False``.\n\n            .. versionadded:: 2015.8.0\n\n        wait_for_reboot (bool)\n            ``True`` will sleep for timeout + 30 seconds after reboot has been\n            initiated. This is useful for use in a highstate. For example, you\n            may have states that you want to apply only after the reboot.\n            Default is ``False``.\n\n            .. versionadded:: 2015.8.0\n\n        only_on_pending_reboot (bool):\n            If this is set to ``True``, then the reboot will only proceed\n            if the system reports a pending reboot. Setting this parameter to\n            ``True`` could be useful when calling this function from a final\n            housekeeping state intended to be executed at the end of a state run\n            (using *order: last*). Default is ``False``.\n\n    Returns:\n        bool: ``True`` if successful (a reboot will occur), otherwise ``False``\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' system.reboot 5\n        salt '*' system.reboot 5 True\n\n    Invoking this function from a final housekeeping state:\n\n    .. code-block:: yaml\n\n        final_housekeeping:\n           module.run:\n              - name: system.reboot\n              - only_on_pending_reboot: True\n              - order: last.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public MockMvcParamConfig formParamsUpdateStrategy(UpdateStrategy updateStrategy) { return new MockMvcParamConfig(queryParamsUpdateStrategy, updateStrategy, requestParameterUpdateStrategy, attributeUpdateStrategy, sessionUpdateStrategy, true); } \n### Response:", "ground_truth": "Set form parameter update strategy to the given value.\n\n@param updateStrategy The update strategy to use for form parameters\n@return A new instance of {@link MockMvcParamConfig}", "predict": "This method returns a new MockMvcParamConfig object with the specified update strategy for query, update, request parameter, and attribute updates. The formParamsUpdateStrategy is not used in this implementation.\n\nThis method is useful for creating a MockMvcParamConfig object that can be used to specify the update strategy for form parameters. The formParamsUpdateStrategy is not used in this implementation, but it could be added as a parameter if needed.\n\nThe return type of this method is MockMvcParamConfig, which is a subclass of ParamConfig that provides support for query, update, request parameter, and attribute updates.\n\nThis method takes an UpdateStrategy object as a parameter, which specifies the update strategy for query, update, request parameter, and attribute updates. The default update strategy is QueryParamsUpdateStrategy, which updates the query parameters. If the update strategy is not specified, it is assumed to be QueryParamsUpdateStrategy.\n\nThe return value is a new MockMvcParamConfig object that specifies the same update strategy as the passed-in UpdateStrategy object. This object can be used to update form parameters in a MockMvcController.\n\nThis method is useful for creating a MockMvcParamConfig object that can be used to specify the update strategy for form parameters. The formParamsUpdateStrategy is not used in this implementation, but it could be added as a parameter if needed."}, {"ID": 310, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (actor Actor) UnbindServiceBySpace(appName string, serviceInstanceName string, spaceGUID string) (ServiceBinding, Warnings, error) { var allWarnings Warnings app, warnings, err := actor.GetApplicationByNameAndSpace(appName, spaceGUID) allWarnings = append(allWarnings, warnings...) if err != nil { return ServiceBinding{}, allWarnings, err } serviceInstance, warnings, err := actor.GetServiceInstanceByNameAndSpace(serviceInstanceName, spaceGUID) allWarnings = append(allWarnings, warnings...) if err != nil { return ServiceBinding{}, allWarnings, err } serviceBinding, warnings, err := actor.GetServiceBindingByApplicationAndServiceInstance(app.GUID, serviceInstance.GUID) allWarnings = append(allWarnings, warnings...) if err != nil { return ServiceBinding{}, allWarnings, err } deletedBinding, ccWarnings, err := actor.CloudControllerClient.DeleteServiceBinding(serviceBinding.GUID, true) allWarnings = append(allWarnings, ccWarnings...) return ServiceBinding(deletedBinding), allWarnings, err }. \n### Response: // UnbindServiceBySpace deletes the service binding between an application and\n// service instance for a given space..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static Filter logResponseToIfMatches(PrintStream stream, Matcher<Integer> matcher) { return new ResponseLoggingFilter(stream, matcher); } \n### Response:", "ground_truth": "Create a new logging filter without using the \"new\" operator.\nWill make the DSL look nicer.\n\n@param stream The print stream to log to\n@param matcher The matcher that must be fulfilled in order for logging to occur\n@return a new instance of the filter", "predict": "// Logs a response if the given matcher matches an integer value."}, {"ID": 311, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def download_file(pk): \"\"\"Download the file reference in `models.ReleaseFile` with the given pk. \"\"\" release_file = models.ReleaseFile.objects.get(pk=pk) logging.info(\"Downloading %s\", release_file.url) proxies = None if settings.LOCALSHOP_HTTP_PROXY: proxies = settings.LOCALSHOP_HTTP_PROXY response = requests.get(release_file.url, stream=True, proxies=proxies) # Write the file to the django file field filename = os.path.basename(release_file.url) # Setting the size manually since Django can't figure it our from # the raw HTTPResponse if 'content-length' in response.headers: size = int(response.headers['content-length']) else: size = len(response.content) # Setting the content type by first looking at the response header # and falling back to guessing it from the filename default_content_type = 'application/octet-stream' content_type = response.headers.get('content-type') if content_type is None or content_type == default_content_type: content_type = mimetypes.guess_type(filename)[0] or default_content_type # Using Django's temporary file upload system to not risk memory # overflows with TemporaryUploadedFile(name=filename, size=size, charset='utf-8', content_type=content_type) as temp_file: temp_file.write(response.content) temp_file.seek(0) # Validate the md5 hash of the downloaded file md5_hash = md5_hash_file(temp_file) if md5_hash != release_file.md5_digest: logging.error(\"MD5 hash mismatch: %s (expected: %s)\" % ( md5_hash, release_file.md5_digest)) return release_file.distribution.save(filename, temp_file) release_file.save() logging.info(\"Complete\"). \n### Response: Download the file reference in `models.ReleaseFile` with the given pk..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static Cookies cookies(Cookie cookie, Cookie... additionalCookies) { AssertParameter.notNull(cookie, \"Cookie\"); final List<Cookie> cookieList = new LinkedList<Cookie>(); cookieList.add(cookie); Collections.addAll(cookieList, additionalCookies); return new Cookies(cookieList); } \n### Response:", "ground_truth": "An alternative way to create a Cookies object from the constructor.\n\n@param cookie            The cookie to be included\n@param additionalCookies Additional cookies to be included (optional)\n@return A new cookies object containing the specified cookies", "predict": "This method returns a new `Cookies` object with the specified number of `Cookie` objects."}, {"ID": 312, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func filterPodPresets(list []*settingsv1alpha1.PodPreset, pod *api.Pod) ([]*settingsv1alpha1.PodPreset, error) { var matchingPPs []*settingsv1alpha1.PodPreset for _, pp := range list { selector, err := metav1.LabelSelectorAsSelector(&pp.Spec.Selector) if err != nil { return nil, fmt.Errorf(\"label selector conversion failed: %v for selector: %v\", pp.Spec.Selector, err) } // check if the pod labels match the selector if !selector.Matches(labels.Set(pod.Labels)) { continue } klog.V(4).Infof(\"PodPreset %s matches pod %s labels\", pp.GetName(), pod.GetName()) matchingPPs = append(matchingPPs, pp) } return matchingPPs, nil }. \n### Response: // filterPodPresets returns list of PodPresets which match given Pod..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private void cleanUpForCollectedState(Set<KeyAndSource> keysAndSources) { synchronized (lock) { for (KeyAndSource keyAndSource : keysAndSources) { Multiset<Object> set = backingMap.get(keyAndSource.key); if (set != null) { set.remove(keyAndSource.source); if (set.isEmpty()) { backingMap.remove(keyAndSource.key); } } } } } \n### Response:", "ground_truth": "There may be multiple child injectors blacklisting a certain key so only remove the source\nthat's relevant.", "predict": "// cleanUpForCollectedState cleans up the backingMap for keysAndSources in the synchronized block.."}, {"ID": 313, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @GuardedBy(\"evictionLock\") void drainKeyReferences() { if (!collectKeys()) { return; } Reference<? extends K> keyRef; while ((keyRef = keyReferenceQueue().poll()) != null) { Node<K, V> node = data.get(keyRef); if (node != null) { evictEntry(node, RemovalCause.COLLECTED, 0L); } } }. \n### Response: Drains the weak key references queue..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: void index() { for (Binding<?> binding : state.getExplicitBindingsThisLevel().values()) { bindingsMultimap.put(binding.getKey().getTypeLiteral(), binding); } } \n### Response:", "ground_truth": "Indexes bindings by type.", "predict": "Index the bindingsMultimap based on the explicit bindings at this level."}, {"ID": 314, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func Load(content string) (tree *Tree, err error) { return LoadBytes([]byte(content)) }. \n### Response: // Load creates a Tree from a string..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: <T> BindingImpl<T> getBindingOrThrow(Key<T> key, Errors errors, JitLimitation jitType) throws ErrorsException { // Check explicit bindings, i.e. bindings created by modules. BindingImpl<T> binding = state.getExplicitBinding(key); if (binding != null) { return binding; } // Look for an on-demand binding. return getJustInTimeBinding(key, errors, jitType); } \n### Response:", "ground_truth": "Gets a binding implementation. First, it check to see if the parent has a binding. If the\nparent has a binding and the binding is scoped, it will use that binding. Otherwise, this\nchecks for an explicit binding. If no explicit binding is found, it looks for a just-in-time\nbinding.", "predict": "// Get the binding for the given key or throw an error if no binding is found."}, {"ID": 315, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static function fromString(string $string): self { try { $data = Uri\\parse(trim($string)); } catch (\\Exception $e) { throw new InvalidArgumentException; } return new self( $data['scheme'] ? new Scheme($data['scheme']) : new NullScheme, new Authority( new UserInformation( $data['user'] ? new User($data['user']) : new NullUser, $data['pass'] ? new Password($data['pass']) : new NullPassword ), $data['host'] ? new Host($data['host']) : new NullHost, $data['port'] ? new Port((int) $data['port']) : new NullPort ), $data['path'] && !empty($data['path']) ? new Path($data['path']) : new NullPath, $data['query'] ? Query::fromString($data['query']) : new NullQuery, $data['fragment'] ? new Fragment($data['fragment']) : new NullFragment ); }. \n### Response: Build a url out of the given string\n\n@param string $string\n\n@return self.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private <T> BindingImpl<T> convertConstantStringBinding(Key<T> key, Errors errors) throws ErrorsException { // Find a constant string binding. Key<String> stringKey = key.ofType(STRING_TYPE); BindingImpl<String> stringBinding = state.getExplicitBinding(stringKey); if (stringBinding == null || !stringBinding.isConstant()) { return null; } // We can't call getProvider().get() because this InstanceBinding may not have been inintialized // yet (because we may have been called during InternalInjectorCreator.initializeStatically and // instance binding validation hasn't happened yet.) @SuppressWarnings(\"unchecked\") String stringValue = ((InstanceBinding<String>) stringBinding).getInstance(); Object source = stringBinding.getSource(); // Find a matching type converter. TypeLiteral<T> type = key.getTypeLiteral(); TypeConverterBinding typeConverterBinding = state.getConverter(stringValue, type, errors, source); if (typeConverterBinding == null) { // No converter can handle the given type. return null; } // Try to convert the string. A failed conversion results in an error. try { @SuppressWarnings(\"unchecked\") // This cast is safe because we double check below. T converted = (T) typeConverterBinding.getTypeConverter().convert(stringValue, type); if (converted == null) { throw errors .converterReturnedNull(stringValue, source, type, typeConverterBinding) .toException(); } if (!type.getRawType().isInstance(converted)) { throw errors .conversionTypeError(stringValue, source, type, typeConverterBinding, converted) .toException(); } return new ConvertedConstantBindingImpl<T>( this, key, converted, stringBinding, typeConverterBinding); } catch (ErrorsException e) { throw e; } catch (RuntimeException e) { throw errors .conversionError(stringValue, source, type, typeConverterBinding, e) .toException(); } } \n### Response:", "ground_truth": "Converts a constant string binding to the required type.\n\n@return the binding if it could be resolved, or null if the binding doesn't exist\n@throws com.google.inject.internal.ErrorsException if there was an error resolving the binding", "predict": "Converts a constant string binding to the specified type.\n\n@param key $key\n\n@param errors $errors\n\n@return BindingImpl<T>."}, {"ID": 316, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function verifyListIsEmpty(string $tabName): void { $this->navLinkTabs->goToTab($tabName); if ($this->adminLists[$tabName]->table->getItemCount() > 0) { throw new \\Exception(sprintf('\"%s\" list is not empty.', $tabName)); } }. \n### Response: Verifies if list from given tab is empty.\n\n@param string $tabName.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private boolean cleanup(BindingImpl<?> binding, Set<Key> encountered) { boolean bindingFailed = false; Set<Dependency<?>> deps = getInternalDependencies(binding); for (Dependency dep : deps) { Key<?> depKey = dep.getKey(); InjectionPoint ip = dep.getInjectionPoint(); if (encountered.add(depKey)) { // only check if we haven't looked at this key yet BindingImpl depBinding = jitBindings.get(depKey); if (depBinding != null) { // if the binding still exists, validate boolean failed = cleanup(depBinding, encountered); // if children fail, we fail if (depBinding instanceof ConstructorBindingImpl) { ConstructorBindingImpl ctorBinding = (ConstructorBindingImpl) depBinding; ip = ctorBinding.getInternalConstructor(); if (!ctorBinding.isInitialized()) { failed = true; } } if (failed) { removeFailedJitBinding(depBinding, ip); bindingFailed = true; } } else if (state.getExplicitBinding(depKey) == null) { // ignore keys if they were explicitly bound, but if neither JIT // nor explicit, it's also invalid & should let parent know. bindingFailed = true; } } } return bindingFailed; } \n### Response:", "ground_truth": "Iterates through the binding's dependencies to clean up any stray bindings that were leftover\nfrom a failed JIT binding. This is required because the bindings are eagerly & optimistically\nadded to allow circular dependency support, so dependencies may pass where they should have\nfailed.", "predict": "Validates the binding for each key encountered in the current scope and, if a failure is detected, cleans up the binding and reports the failure to the parent scope.\n\n@param BindingImpl<?> $binding The binding to validate.\n@param Set<Key> $encountered The set of keys to be validated."}, {"ID": 317, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def raise_exception_if_baseline_file_is_unstaged(filename): \"\"\"We want to make sure that if there are changes to the baseline file, they will be included in the commit. This way, we can keep our baselines up-to-date. :raises: ValueError \"\"\" try: files_changed_but_not_staged = subprocess.check_output( [ 'git', 'diff', '--name-only', ], ).split() except subprocess.CalledProcessError: # Since we don't pipe stderr, we get free logging through git. raise ValueError if filename.encode() in files_changed_but_not_staged: log.error(( 'Your baseline file ({}) is unstaged.\\n' '`git add {}` to fix this.' ).format( filename, filename, )) raise ValueError. \n### Response: We want to make sure that if there are changes to the baseline\n    file, they will be included in the commit. This way, we can keep\n    our baselines up-to-date.\n\n    :raises: ValueError.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private void removeFailedJitBinding(Binding<?> binding, InjectionPoint ip) { failedJitBindings.add(binding.getKey()); jitBindings.remove(binding.getKey()); membersInjectorStore.remove(binding.getKey().getTypeLiteral()); provisionListenerStore.remove(binding); if (ip != null) { constructors.remove(ip); } } \n### Response:", "ground_truth": "Cleans up any state that may have been cached when constructing the JIT binding.", "predict": "This method removes a failed JIT binding and an injection point from the specified binding and injection point.\n\n:param binding: The binding to be removed.\n:param ip: The injection point to be removed.\n:return: None.\n:raises: None.\n\nNote: This method does not modify the JIT bindings or injection points in any way. It simply removes the specified binding and injection point from the list of available ones."}, {"ID": 318, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def unique_id generator = Sass::Script::Functions.random_number_generator Thread.current[:sass_last_unique_id] ||= generator.rand(36**8) # avoid the temptation of trying to guess the next unique value. value = (Thread.current[:sass_last_unique_id] += (generator.rand(10) + 1)) # the u makes this a legal identifier if it would otherwise start with a number. identifier(\"u\" + value.to_s(36).rjust(8, '0')) end. \n### Response: Returns a unique CSS identifier. The identifier is returned as an unquoted\n string. The identifier returned is only guaranteed to be unique within the\n scope of a single Sass run.\n\n @overload unique_id()\n @return [Sass::Script::Value::String].\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @SuppressWarnings(\"unchecked\") private Set<Dependency<?>> getInternalDependencies(BindingImpl<?> binding) { if (binding instanceof ConstructorBindingImpl) { return ((ConstructorBindingImpl) binding).getInternalDependencies(); } else if (binding instanceof HasDependencies) { return ((HasDependencies) binding).getDependencies(); } else { return ImmutableSet.of(); } } \n### Response:", "ground_truth": "Safely gets the dependencies of possibly not initialized bindings.", "predict": "Returns a set of all internal dependencies of the given binding. The method is safe to use because it only checks if the binding is a ConstructorBindingImpl or a HasDependencies, and it returns the correct set of dependencies based on the type of the binding.\n\n @overload getInternalDependencies()\n @return [Set<Dependency<?>>]."}, {"ID": 319, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: final public function isGranted(array $roles, array $resources, array $modules, array $accesses) { // Find a user which matches the required roles. $user = $this->checkRole($roles); if (null === $user) { return false; } else { return $this->isUserGranted($roles, $resources, $modules, $accesses, $user); } }. \n### Response: Checks if the current user is allowed\n\n@return Boolean.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: <T> BindingImpl<T> createUninitializedBinding( Key<T> key, Scoping scoping, Object source, Errors errors, boolean jitBinding) throws ErrorsException { Class<?> rawType = key.getTypeLiteral().getRawType(); ImplementedBy implementedBy = rawType.getAnnotation(ImplementedBy.class); // Don't try to inject arrays or enums annotated with @ImplementedBy. if (rawType.isArray() || (rawType.isEnum() && implementedBy != null)) { throw errors.missingImplementationWithHint(key, this).toException(); } // Handle TypeLiteral<T> by binding the inner type if (rawType == TypeLiteral.class) { @SuppressWarnings(\"unchecked\") // we have to fudge the inner type as Object BindingImpl<T> binding = (BindingImpl<T>) createTypeLiteralBinding((Key<TypeLiteral<Object>>) key, errors); return binding; } // Handle @ImplementedBy if (implementedBy != null) { Annotations.checkForMisplacedScopeAnnotations(rawType, source, errors); return createImplementedByBinding(key, scoping, implementedBy, errors); } // Handle @ProvidedBy. ProvidedBy providedBy = rawType.getAnnotation(ProvidedBy.class); if (providedBy != null) { Annotations.checkForMisplacedScopeAnnotations(rawType, source, errors); return createProvidedByBinding(key, scoping, providedBy, errors); } return ConstructorBindingImpl.create( this, key, null, /* use default constructor */ source, scoping, errors, jitBinding && options.jitDisabled, options.atInjectRequired); } \n### Response:", "ground_truth": "Creates a binding for an injectable type with the given scope. Looks for a scope on the type if\nnone is specified.", "predict": "This method creates a binding for a given key using the provided options and annotations. It handles different types of bindings such as TypeLiteral, @ImplementedBy, @ProvidedBy and creates a new instance of ConstructorBindingImpl.\n\n@return BindingImpl<T>."}, {"ID": 320, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def unstruct_strat(self): # type: () -> UnstructureStrategy \"\"\"The default way of unstructuring ``attrs`` classes.\"\"\" return ( UnstructureStrategy.AS_DICT if self._unstructure_attrs == self.unstructure_attrs_asdict else UnstructureStrategy.AS_TUPLE ). \n### Response: The default way of unstructuring ``attrs`` classes..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: static Object[] getAll(InternalContext context, SingleParameterInjector<?>[] parameterInjectors) throws InternalProvisionException { if (parameterInjectors == null) { return NO_ARGUMENTS; } int size = parameterInjectors.length; Object[] parameters = new Object[size]; // optimization: use manual for/each to save allocating an iterator here for (int i = 0; i < size; i++) { parameters[i] = parameterInjectors[i].inject(context); } return parameters; } \n### Response:", "ground_truth": "Returns an array of parameter values.", "predict": "getAll():\n```\n    static Object[] getAll(InternalContext context, SingleParameterInjector<?>[] parameterInjectors) throws InternalProvisionException {\n        if (parameterInjectors == null) {\n            return NO_ARGUMENTS;\n        }\n        int size = parameterInjectors.length;\n        Object[] parameters = new Object[size];\n        // optimization: use manual for/each to save allocating an iterator here\n        for (int i = 0; i < size; i++) {\n            parameters[i] = parameterInjectors[i].inject(context);\n        }\n        return parameters;\n    }\n```"}, {"ID": 321, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def _calc_frames(stats): \"\"\" Compute a DataFrame summary of a Stats object. \"\"\" timings = [] callers = [] for key, values in iteritems(stats.stats): timings.append( pd.Series( key + values[:-1], index=timing_colnames, ) ) for caller_key, caller_values in iteritems(values[-1]): callers.append( pd.Series( key + caller_key + caller_values, index=caller_columns, ) ) timings_df = pd.DataFrame(timings) callers_df = pd.DataFrame(callers) timings_df['filename:funcname'] = \\ (timings_df['filename'] + ':' + timings_df['funcname']) timings_df = timings_df.groupby('filename:funcname').sum() return timings_df, callers_df. \n### Response: Compute a DataFrame summary of a Stats object..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private static void bindInjector(InjectorImpl injector) { Key<Injector> key = Key.get(Injector.class); InjectorFactory injectorFactory = new InjectorFactory(injector); injector.state.putBinding( key, new ProviderInstanceBindingImpl<Injector>( injector, key, SourceProvider.UNKNOWN_SOURCE, injectorFactory, Scoping.UNSCOPED, injectorFactory, ImmutableSet.<InjectionPoint>of())); } \n### Response:", "ground_truth": "The Injector is a special case because we allow both parent and child injectors to both have a\nbinding for that key.", "predict": "Binds the Injector object.."}, {"ID": 322, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function setFolds(path, folds) { var context = getViewStateContext(); var allFolds = PreferencesManager.getViewState(FOLDS_PREF_KEY, context); allFolds[path] = simplify(folds); PreferencesManager.setViewState(FOLDS_PREF_KEY, allFolds, context); }. \n### Response: Saves the line folds for the specified path\n@param {!string} path the path to the document\n@param {Object} folds the fold ranges to save for the current document.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private static void bindLogger(InjectorImpl injector) { Key<Logger> key = Key.get(Logger.class); LoggerFactory loggerFactory = new LoggerFactory(); injector.state.putBinding( key, new ProviderInstanceBindingImpl<Logger>( injector, key, SourceProvider.UNKNOWN_SOURCE, loggerFactory, Scoping.UNSCOPED, loggerFactory, ImmutableSet.<InjectionPoint>of())); } \n### Response:", "ground_truth": "The Logger is a special case because it knows the injection point of the injected member. It's\nthe only binding that does this.", "predict": "Binds the logger provider to the injector.\n@param {InjectorImpl} injector the injector to use for binding the logger provider.\n@param {Key<Logger>} key the key for the logger provider.\n@param {SourceProvider.UNKNOWN_SOURCE} source the source of the logger provider.\n@param {LoggerFactory} loggerFactory the logger factory to use.\n@param {ImmutableSet<InjectionPoint>} injectionPoints the set of injection points for the logger provider."}, {"ID": 323, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (d *domainClient) CallFunctionOn(ctx context.Context, args *CallFunctionOnArgs) (reply *CallFunctionOnReply, err error) { reply = new(CallFunctionOnReply) if args != nil { err = rpcc.Invoke(ctx, \"Runtime.callFunctionOn\", args, reply, d.conn) } else { err = rpcc.Invoke(ctx, \"Runtime.callFunctionOn\", nil, reply, d.conn) } if err != nil { err = &internal.OpError{Domain: \"Runtime\", Op: \"CallFunctionOn\", Err: err} } return }. \n### Response: // CallFunctionOn invokes the Runtime method. Calls function with given\n// declaration on the given object. Object group of the result is inherited\n// from the target object..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private static boolean checkForMisplacedBindingAnnotations(Member member, Errors errors) { Annotation misplacedBindingAnnotation = Annotations.findBindingAnnotation( errors, member, ((AnnotatedElement) member).getAnnotations()); if (misplacedBindingAnnotation == null) { return false; } // don't warn about misplaced binding annotations on methods when there's a field with the same // name. In Scala, fields always get accessor methods (that we need to ignore). See bug 242. if (member instanceof Method) { try { if (member.getDeclaringClass().getDeclaredField(member.getName()) != null) { return false; } } catch (NoSuchFieldException ignore) { } } errors.misplacedBindingAnnotation(member, misplacedBindingAnnotation); return true; } \n### Response:", "ground_truth": "Returns true if the binding annotation is in the wrong place.", "predict": "// Check if the given member is a method and if it has been misplacated with a binding annotation.\n// If it has, return false to avoid warning.\nprivate static boolean checkFor MisplacedBindingAnnotations(Member member, Errors errors) {\n// Annotation misplacedBindingAnnotation = Annotations.findBindingAnnotation( errors, member, ((AnnotatedElement) member).getAnnotations());\nAnnotation misplacedBindingAnnotation = Annotations.findBindingAnnotation( errors, member, ((AnnotatedElement) member).getAnnotations());\nif (misplacedBindingAnnotation == null) {\nreturn false;\n}\n// don't warn about misplaced binding annotations on methods when there's a field with the same // name. In Scala, fields always get accessor methods (that we need to ignore). See bug 242.\nif (member instanceof Method) {\ntry {\n// If the method has accessors, check if it has been misplacated with a field with the same name.\nif (member.getDeclaringClass().getDeclaredField(member.getName())!= null) {\nreturn false;\n}\n} catch (NoSuchFieldException ignore) {\n}\n// If the method doesn't have accessors, check if it has been misplacated with a field with the same name.\nreturn true;\n}\nerrors.misplacedBindingAnnotation(member, misplacedBindingAnnotation);\nreturn true;\n}"}, {"ID": 324, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func isNonstandardTransaction(tx *btcutil.Tx) bool { // Check all of the output public key scripts for non-standard scripts. for _, txOut := range tx.MsgTx().TxOut { scriptClass := txscript.GetScriptClass(txOut.PkScript) if scriptClass == txscript.NonStandardTy { return true } } return false }. \n### Response: // isNonstandardTransaction determines whether a transaction contains any\n// scripts which are not one of the standard types..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private static boolean overrides(Method a, Method b) { // See JLS section 8.4.8.1 int modifiers = b.getModifiers(); if (Modifier.isPublic(modifiers) || Modifier.isProtected(modifiers)) { return true; } if (Modifier.isPrivate(modifiers)) { return false; } // b must be package-private return a.getDeclaringClass().getPackage().equals(b.getDeclaringClass().getPackage()); } \n### Response:", "ground_truth": "Returns true if a overrides b. Assumes signatures of a and b are the same and a's declaring\nclass is a subclass of b's declaring class.", "predict": "// Determine whether the method b is an override of the method a.\n// See JLS section 8.4.8.1.\n\n// int modifiers = b.getModifiers();\n// if (Modifier.isPublic(modifiers) || Modifier.isProtected(modifiers)) {\n// return true;\n// }\n// if (Modifier.isPrivate(modifiers)) {\n// return false;\n// }\n// // b must be package-private.\n// return a.getDeclaringClass().getPackage().equals(b.getDeclaringClass().getPackage());"}, {"ID": 325, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private List getIncludedGlyphs(FontFileReader in, int glyphOffset, Integer glyphIdx) throws IOException { List ret = new ArrayList(); ret.add(glyphIdx); int offset = glyphOffset + (int)mtxTab[glyphIdx.intValue()].getOffset() + 10; Integer compositeIdx = null; int flags = 0; boolean moreComposites = true; while (moreComposites) { flags = in.readTTFUShort(offset); compositeIdx = new Integer(in.readTTFUShort(offset + 2)); ret.add(compositeIdx); offset += 4; if ((flags & 1) > 0) { // ARG_1_AND_ARG_2_ARE_WORDS offset += 4; } else { offset += 2; } if ((flags & 8) > 0) { offset += 2; // WE_HAVE_A_SCALE } else if ((flags & 64) > 0) { offset += 4; // WE_HAVE_AN_X_AND_Y_SCALE } else if ((flags & 128) > 0) { offset += 8; // WE_HAVE_A_TWO_BY_TWO } if ((flags & 32) > 0) { moreComposites = true; } else { moreComposites = false; } } return ret; }. \n### Response: Returns a List containing the glyph itself plus all glyphs\nthat this composite glyph uses\n\n@param in The input from which to determine the included glyphs\n@param glyphOffset The offset the glyph\n@param glyphIdx The index of the base glyph\n@return The list of glyphs building the composite\n@throws IOException Indicates a failure to read from the font file.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void initializeDelegate(MembersInjector<T> delegate) { checkState(this.delegate == null, \"delegate already initialized\"); this.delegate = checkNotNull(delegate, \"delegate\"); } \n### Response:", "ground_truth": "Sets the actual members injector.\n\n@throws IllegalStateException if the delegate is already set", "predict": "Initializes the delegate and assigns it to the current instance.\n\n@param delegate The delegate to be used for injection.\n@return A boolean indicating whether the delegate was successfully initialized.\n@throws MemberInjectorException If the delegate is not properly initialized."}, {"ID": 326, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function Player(game) { this.game = game; this.fov = new RL.FovROT(game); // modify fov to set tiles as explored this.fov.setMapTileVisible = function(x, y, range, visibility){ RL.FovROT.prototype.setMapTileVisible.call(this, x, y, range, visibility); if(visibility){ var tile = this.game.map.get(x, y); if(tile){ tile.explored = true; } } }; if(this.init){ this.init(game); } }. \n### Response: Represents the player.\nVery similar to Entity\nHandles functionality triggered by keyboard and mouse Input\n@class Player\n@constructor\n@uses TileDraw\n@param {Game} game - game instance this obj is attached to.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @SuppressWarnings(\"unchecked\") final TypeLiteral<Provider<T>> providerType() { // This cast is safe and wouldn't generate a warning if Type had a type // parameter. return (TypeLiteral<Provider<T>>) get(Types.providerOf(getType())); } \n### Response:", "ground_truth": "Gets the type of this type's provider.", "predict": "Returns the type of provider associated with the given type.\n@return the type of provider associated with the given type\n@throws any exception if the provider is not found or the type is not a provider.\n\n"}, {"ID": 327, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (cnc *CloudNodeController) updateNodeAddress(node *v1.Node, instances cloudprovider.Instances) { // Do not process nodes that are still tainted cloudTaint := getCloudTaint(node.Spec.Taints) if cloudTaint != nil { klog.V(5).Infof(\"This node %s is still tainted. Will not process.\", node.Name) return } // Node that isn't present according to the cloud provider shouldn't have its address updated exists, err := ensureNodeExistsByProviderID(instances, node) if err != nil { // Continue to update node address when not sure the node is not exists klog.Errorf(\"%v\", err) } else if !exists { klog.V(4).Infof(\"The node %s is no longer present according to the cloud provider, do not process.\", node.Name) return } nodeAddresses, err := getNodeAddressesByProviderIDOrName(instances, node) if err != nil { klog.Errorf(\"%v\", err) return } if len(nodeAddresses) == 0 { klog.V(5).Infof(\"Skipping node address update for node %q since cloud provider did not return any\", node.Name) return } // Check if a hostname address exists in the cloud provided addresses hostnameExists := false for i := range nodeAddresses { if nodeAddresses[i].Type == v1.NodeHostName { hostnameExists = true } } // If hostname was not present in cloud provided addresses, use the hostname // from the existing node (populated by kubelet) if !hostnameExists { for _, addr := range node.Status.Addresses { if addr.Type == v1.NodeHostName { nodeAddresses = append(nodeAddresses, addr) } } } // If nodeIP was suggested by user, ensure that // it can be found in the cloud as well (consistent with the behaviour in kubelet) if nodeIP, ok := ensureNodeProvidedIPExists(node, nodeAddresses); ok { if nodeIP == nil { klog.Errorf(\"Specified Node IP not found in cloudprovider\") return } } if !nodeAddressesChangeDetected(node.Status.Addresses, nodeAddresses) { return } newNode := node.DeepCopy() newNode.Status.Addresses = nodeAddresses _, _, err = nodeutil.PatchNodeStatus(cnc.kubeClient.CoreV1(), types.NodeName(node.Name), node, newNode) if err != nil { klog.Errorf(\"Error patching node with cloud ip addresses = [%v]\", err) } }. \n### Response: // UpdateNodeAddress updates the nodeAddress of a single node.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private List<TypeLiteral<?>> resolveAll(Type[] types) { TypeLiteral<?>[] result = new TypeLiteral<?>[types.length]; for (int t = 0; t < types.length; t++) { result[t] = resolve(types[t]); } return ImmutableList.copyOf(result); } \n### Response:", "ground_truth": "Returns an immutable list of the resolved types.", "predict": "// resolveAll returns a list of all the resolveable types in the given array."}, {"ID": 328, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function isEmailUnique($email) { if ($email) { try { $this->userRepository->findUserByEmail($email); } catch (NoResultException $exc) { return true; } } return false; }. \n### Response: Checks if an email-adress is unique\nNull and empty will always return false.\n\n@param string $email\n\n@return bool.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static <T> TypeLiteral<T> canonicalizeForKey(TypeLiteral<T> typeLiteral) { Type type = typeLiteral.getType(); if (!isFullySpecified(type)) { Errors errors = new Errors().keyNotFullySpecified(typeLiteral); throw new ConfigurationException(errors.getMessages()); } if (typeLiteral.getRawType() == javax.inject.Provider.class) { ParameterizedType parameterizedType = (ParameterizedType) type; // the following casts are generally unsafe, but com.google.inject.Provider extends // javax.inject.Provider and is covariant @SuppressWarnings(\"unchecked\") TypeLiteral<T> guiceProviderType = (TypeLiteral<T>) TypeLiteral.get(Types.providerOf(parameterizedType.getActualTypeArguments()[0])); return guiceProviderType; } @SuppressWarnings(\"unchecked\") TypeLiteral<T> wrappedPrimitives = (TypeLiteral<T>) PRIMITIVE_TO_WRAPPER.get(typeLiteral); if (wrappedPrimitives != null) { return wrappedPrimitives; } // If we know this isn't a subclass, return as-is. if (typeLiteral.getClass() == TypeLiteral.class) { return typeLiteral; } // recreate the TypeLiteral to avoid anonymous TypeLiterals from holding refs to their // surrounding classes. @SuppressWarnings(\"unchecked\") TypeLiteral<T> recreated = (TypeLiteral<T>) TypeLiteral.get(typeLiteral.getType()); return recreated; } \n### Response:", "ground_truth": "Returns an type that's appropriate for use in a key.\n\nIf the raw type of {@code typeLiteral} is a {@code javax.inject.Provider}, this returns a\n{@code com.google.inject.Provider} with the same type parameters.\n\nIf the type is a primitive, the corresponding wrapper type will be returned.\n\n@throws ConfigurationException if {@code type} contains a type variable", "predict": "Provides a utility method for canonicalizing a `TypeLiteral<T>` to its raw type. This method checks if the raw type is `javax.inject.Provider.class`, and if so, it casts the raw type to the appropriate parameterized type. It also checks if the raw type is a subclass of `javax.inject.Provider`, and if so, it returns the parameterized type as-is. If the raw type is not a subclass of `javax.inject.Provider`, it returns the raw type. Additionally, it checks if the raw type is a subclass of `TypeLiteral<T>` and if so, it returns the parameterized type casted to `TypeLiteral<T>`. Finally, it recreates the `TypeLiteral<T>` to avoid holding references to its surrounding classes.\n\n@param TypeLiteral<T> $typeLiteral\n\n@return <T>\n\nNote: The cast to `TypeLiteral<T>` is generally unsafe, but `com.google.inject.Provider` extends `javax.inject.Provider` and is covariant, so it can be safely cast. However, it is recommended to use `@SuppressWarnings(\"unchecked\")` to avoid any potential issues."}, {"ID": 329, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function transform(ProjectDescriptor $project, Transformation $transformation) { $structure = $this->loadAst($this->getAstPath($transformation)); $proc = $this->getXslProcessor($transformation); $proc->registerPHPFunctions(); $this->registerDefaultVariables($transformation, $proc, $structure); $this->setProcessorParameters($transformation, $proc); $artifact = $this->getArtifactPath($transformation); $this->checkForSpacesInPath($artifact); // if a query is given, then apply a transformation to the artifact // location by replacing ($<var>} with the sluggified node-value of the // search result if ($transformation->getQuery() !== '') { $xpath = new \\DOMXPath($structure); /** @var \\DOMNodeList $qry */ $qry = $xpath->query($transformation->getQuery()); $count = $qry->length; foreach ($qry as $key => $element) { Dispatcher::getInstance()->dispatch( 'transformer.writer.xsl.pre', PreXslWriterEvent::createInstance($this)->setElement($element)->setProgress(array($key+1, $count)) ); $proc->setParameter('', $element->nodeName, $element->nodeValue); $file_name = $transformation->getTransformer()->generateFilename( $element->nodeValue ); if (! $artifact) { $url = $this->generateUrlForXmlElement($project, $element); if ($url === false || $url[0] !== DIRECTORY_SEPARATOR) { continue; } $filename = $transformation->getTransformer()->getTarget() . str_replace('/', DIRECTORY_SEPARATOR, $url); } else { $filename = str_replace('{$' . $element->nodeName . '}', $file_name, $artifact); } $relativeFileName = substr($filename, strlen($transformation->getTransformer()->getTarget()) + 1); $proc->setParameter('', 'root', str_repeat('../', substr_count($relativeFileName, '/'))); $this->writeToFile($filename, $proc, $structure); } } else { if (substr($transformation->getArtifact(), 0, 1) == '$') { // not a file, it must become a variable! $variable_name = substr($transformation->getArtifact(), 1); $this->xsl_variables[$variable_name] = $proc->transformToXml($structure); } else { $relativeFileName = substr($artifact, strlen($transformation->getTransformer()->getTarget()) + 1); $proc->setParameter('', 'root', str_repeat('../', substr_count($relativeFileName, '/'))); $this->writeToFile($artifact, $proc, $structure); } } }. \n### Response: This method combines the structure.xml and the given target template\nand creates a static html page at the artifact location.\n\n@param ProjectDescriptor $project        Document containing the structure.\n@param Transformation    $transformation Transformation to execute.\n\n@throws \\RuntimeException if the structure.xml file could not be found.\n@throws Exception        if the structure.xml file's documentRoot could not be read because of encoding issues\nor because it was absent.\n\n@return void.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: static void prepareBuiltInConverters(InjectorImpl injector) { // Configure type converters. convertToPrimitiveType(injector, int.class, Integer.class); convertToPrimitiveType(injector, long.class, Long.class); convertToPrimitiveType(injector, boolean.class, Boolean.class); convertToPrimitiveType(injector, byte.class, Byte.class); convertToPrimitiveType(injector, short.class, Short.class); convertToPrimitiveType(injector, float.class, Float.class); convertToPrimitiveType(injector, double.class, Double.class); convertToClass( injector, Character.class, new TypeConverter() { @Override public Object convert(String value, TypeLiteral<?> toType) { value = value.trim(); if (value.length() != 1) { throw new RuntimeException(\"Length != 1.\"); } return value.charAt(0); } @Override public String toString() { return \"TypeConverter<Character>\"; } }); convertToClasses( injector, Matchers.subclassesOf(Enum.class), new TypeConverter() { @Override @SuppressWarnings(\"unchecked\") public Object convert(String value, TypeLiteral<?> toType) { return Enum.valueOf((Class) toType.getRawType(), value); } @Override public String toString() { return \"TypeConverter<E extends Enum<E>>\"; } }); internalConvertToTypes( injector, new AbstractMatcher<TypeLiteral<?>>() { @Override public boolean matches(TypeLiteral<?> typeLiteral) { return typeLiteral.getRawType() == Class.class; } @Override public String toString() { return \"Class<?>\"; } }, new TypeConverter() { @Override @SuppressWarnings(\"unchecked\") public Object convert(String value, TypeLiteral<?> toType) { try { return Class.forName(value); } catch (ClassNotFoundException e) { throw new RuntimeException(e.getMessage()); } } @Override public String toString() { return \"TypeConverter<Class<?>>\"; } }); } \n### Response:", "ground_truth": "Installs default converters for primitives, enums, and class literals.", "predict": "This method configures type converters for the given injector. It uses the `convertToPrimitiveType`, `convertToClass`, and `convertToClasses` static methods provided by the `InjectorImpl` class to convert various primitive types, classes, and interfaces to their corresponding wrapper classes. Additionally, it uses the `internalConvertToTypes` method to convert types based on their raw types.\n\n@param InjectorImpl              The injector to configure.\n\n@return void."}, {"ID": 330, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def SetRaw(self, name, value): \"\"\"Set the raw string without verification or escaping.\"\"\" if self.writeback is None: logging.warning(\"Attempting to modify a read only config object.\") if name in self.constants: raise ConstModificationError( \"Attempting to modify constant value %s\" % name) self.writeback_data[name] = value self.FlushCache(). \n### Response: Set the raw string without verification or escaping..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private static ClassLoader canonicalize(ClassLoader classLoader) { return classLoader != null ? classLoader : SystemBridgeHolder.SYSTEM_BRIDGE.getParent(); } \n### Response:", "ground_truth": "Attempts to canonicalize null references to the system class loader. May return null if for\nsome reason the system loader is unavailable.", "predict": "Method-level comment for ` canonicalize` method:\n```\nprivate static ClassLoader canonicalize(ClassLoader classLoader) {\n    // Return the original classloader or SystemBridgeHolder.SYSTEM_BRIDGE.getParent()\n    // if no classloader is found.\n    return classLoader!= null? classLoader : SystemBridgeHolder.SYSTEM_BRIDGE.getParent();\n}\n```"}, {"ID": 331, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function Conversation (config) { if (!(this instanceof Conversation)) { throw new SyntaxError('Constructor must be called with the new operator'); } // public properties this.id = config && config.id || uuid.v4(); this.self = config && config.self || null; this.other = config && config.other || null; this.context = config && config.context || {}; // private properties this._send = config && config.send || null; this._inbox = []; // queue with received but not yet picked messages this._receivers = []; // queue with handlers waiting for a new message }. \n### Response: A conversation\nHolds meta data for a conversation between two peers\n@param {Object} [config] Configuration options:\n{string} [id]      A unique id for the conversation. If not provided, a uuid is generated\n{string} self      Id of the peer on this side of the conversation\n{string} other     Id of the peer on the other side of the conversation\n{Object} [context] Context passed with all callbacks of the conversation\n{function(to: string, message: *): Promise} send   Function to send a message\n@constructor.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private static boolean hasSameVersionOfCglib(ClassLoader classLoader) { Class<?> fc = net.sf.cglib.reflect.FastClass.class; try { return classLoader.loadClass(fc.getName()) == fc; } catch (ClassNotFoundException e) { return false; } } \n### Response:", "ground_truth": "Returns true if the types classloader has the same version of cglib that BytecodeGen has. This\nonly returns false in strange OSGI situations, but it prevents us from using FastClass for non\npublic members.", "predict": "This method checks if the Cglib reflection library version is the same as the one used by the classloader."}, {"ID": 332, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def parse_operand(string, location, tokens): \"\"\"Parse an x86 instruction operand. \"\"\" mod = \" \".join(tokens.get(\"modifier\", \"\")) if \"immediate\" in tokens: imm = parse_immediate(\"\".join(tokens[\"immediate\"])) size = modifier_size.get(mod, None) oprnd = X86ImmediateOperand(imm, size) if \"register\" in tokens: name = tokens[\"register\"] size = arch_info.registers_size[tokens[\"register\"]] oprnd = X86RegisterOperand(name, size) if \"memory\" in tokens: seg_reg = tokens.get(\"segment\", None) base_reg = tokens.get(\"base\", None) index_reg = tokens.get(\"index\", None) scale_imm = int(tokens.get(\"scale\", \"0x1\"), 16) displ_imm = int(\"\".join(tokens.get(\"displacement\", \"0x0\")), 16) oprnd = X86MemoryOperand(seg_reg, base_reg, index_reg, scale_imm, displ_imm) oprnd.modifier = mod if not oprnd.size and oprnd.modifier: oprnd.size = modifier_size[oprnd.modifier] return oprnd. \n### Response: Parse an x86 instruction operand..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private static boolean isPubliclyCallable(Member member) { if (!Modifier.isPublic(member.getModifiers())) { return false; } Class<?>[] parameterTypes; if (member instanceof Constructor) { parameterTypes = ((Constructor) member).getParameterTypes(); } else { Method method = (Method) member; if (!Modifier.isPublic(method.getReturnType().getModifiers())) { return false; } parameterTypes = method.getParameterTypes(); } for (Class<?> type : parameterTypes) { if (!Modifier.isPublic(type.getModifiers())) { return false; } } return true; } \n### Response:", "ground_truth": "Returns true if the member can be called by a fast class generated in a different classloader.", "predict": "private static boolean isPubliclyCallable(Member member) {\nif (!Modifier.isPublic(member.getModifiers())) {\nreturn false;\n}\nClass<?>[] parameterTypes;\nif (member instanceof Constructor) {\nparameterTypes = ((Constructor) member).getParameterTypes();\n} else {\nMethod method = (Method) member;\nif (!Modifier.isPublic(method.getReturnType().getModifiers())) {\nreturn false;\n}\nparameterTypes = method.getParameterTypes();\n}\nfor (Class<?> type : parameterTypes) {\nif (!Modifier.isPublic(type.getModifiers())) {\nreturn false;\n}\n}\nreturn true;\n}"}, {"ID": 333, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (r *rpcServer) GetNodeInfo(ctx context.Context, in *lnrpc.NodeInfoRequest) (*lnrpc.NodeInfo, error) { graph := r.server.chanDB.ChannelGraph() // First, parse the hex-encoded public key into a full in-memory public // key object we can work with for querying. pubKeyBytes, err := hex.DecodeString(in.PubKey) if err != nil { return nil, err } pubKey, err := btcec.ParsePubKey(pubKeyBytes, btcec.S256()) if err != nil { return nil, err } // With the public key decoded, attempt to fetch the node corresponding // to this public key. If the node cannot be found, then an error will // be returned. node, err := graph.FetchLightningNode(pubKey) if err != nil { return nil, err } // With the node obtained, we'll now iterate through all its out going // edges to gather some basic statistics about its out going channels. var ( numChannels uint32 totalCapacity btcutil.Amount ) if err := node.ForEachChannel(nil, func(_ *bbolt.Tx, edge *channeldb.ChannelEdgeInfo, _, _ *channeldb.ChannelEdgePolicy) error { numChannels++ totalCapacity += edge.Capacity return nil }); err != nil { return nil, err } nodeAddrs := make([]*lnrpc.NodeAddress, 0) for _, addr := range node.Addresses { nodeAddr := &lnrpc.NodeAddress{ Network: addr.Network(), Addr: addr.String(), } nodeAddrs = append(nodeAddrs, nodeAddr) } // TODO(roasbeef): list channels as well? nodeColor := fmt.Sprintf(\"#%02x%02x%02x\", node.Color.R, node.Color.G, node.Color.B) return &lnrpc.NodeInfo{ Node: &lnrpc.LightningNode{ LastUpdate: uint32(node.LastUpdate.Unix()), PubKey: in.PubKey, Addresses: nodeAddrs, Alias: node.Alias, Color: nodeColor, }, NumChannels: numChannels, TotalCapacity: int64(totalCapacity), }, nil }. \n### Response: // GetNodeInfo returns the latest advertised and aggregate authenticated\n// channel information for the specified node identified by its public key..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public Key<?> fixAnnotations(Key<?> key) { return key.getAnnotation() == null ? key : Key.get(key.getTypeLiteral(), key.getAnnotation().annotationType()); } \n### Response:", "ground_truth": "Replace annotation instances with annotation types, this is only appropriate for testing if a\nkey is bound and not for injecting.\n\n", "predict": "// fixAnnotations returns a new key with all annotations of the given key fixed."}, {"ID": 334, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static char eatUtf8(String a, int[] n) { if (a.length() == 0) { n[0] = 0; return ((char) 0); } n[0] = Utf8Length(a.charAt(0)); if (a.length() >= n[0]) { switch (n[0]) { case 1: return (a.charAt(0)); case 2: if ((a.charAt(1) & 0xC0) != 0x80) break; return ((char) (((a.charAt(0) & 0x1F) << 6) + (a.charAt(1) & 0x3F))); case 3: if ((a.charAt(1) & 0xC0) != 0x80 || (a.charAt(2) & 0xC0) != 0x80) break; return ((char) (((a.charAt(0) & 0x0F) << 12) + ((a.charAt(1) & 0x3F) << 6) + ((a.charAt(2) & 0x3F)))); case 4: if ((a.charAt(1) & 0xC0) != 0x80 || (a.charAt(2) & 0xC0) != 0x80 || (a.charAt(3) & 0xC0) != 0x80) break; return ((char) (((a.charAt(0) & 0x07) << 18) + ((a.charAt(1) & 0x3F) << 12) + ((a.charAt(2) & 0x3F) << 6) + ((a.charAt(3) & 0x3F)))); } } n[0] = -1; return ((char) 0); }. \n### Response: Eats a UTF8 code from a String. There is also a built-in way in Java that converts\nUTF8 to characters and back, but it does not work with all characters..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: <T> Initializable<T> requestInjection( InjectorImpl injector, T instance, Binding<T> binding, Object source, Set<InjectionPoint> injectionPoints) { checkNotNull(source); Preconditions.checkState( !validationStarted, \"Member injection could not be requested after validation is started\"); ProvisionListenerStackCallback<T> provisionCallback = binding == null ? null : injector.provisionListenerStore.get(binding); // short circuit if the object has no injections or listeners. if (instance == null || (injectionPoints.isEmpty() && !injector.membersInjectorStore.hasTypeListeners() && provisionCallback == null)) { return Initializables.of(instance); } if (initializablesCache.containsKey(instance)) { @SuppressWarnings(\"unchecked\") // Map from T to InjectableReference<T> Initializable<T> cached = (Initializable<T>) initializablesCache.get(instance); return cached; } InjectableReference<T> injectableReference = new InjectableReference<T>( injector, instance, binding == null ? null : binding.getKey(), provisionCallback, source, cycleDetectingLockFactory.create(instance.getClass())); initializablesCache.put(instance, injectableReference); pendingInjections.add(injectableReference); return injectableReference; } \n### Response:", "ground_truth": "Registers an instance for member injection when that step is performed.\n\n@param instance an instance that optionally has members to be injected (each annotated\nwith @Inject).\n@param binding the binding that caused this initializable to be created, if it exists.\n@param source the source location that this injection was requested", "predict": "Request injection for an instance of T, using the InjectorImpl and the binding, and returning an InjectableReference<T>. If the instance is null, returns an Initializables.of(instance). If there are no injections or listeners, returns the cached Initializable<T>. If the instance has no injections or listeners, returns the same instance, but with a cycle detecting lock factory."}, {"ID": 335, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def script(inbox, cfg): \"\"\" Execute arbitrary scripts. Arguments: - cfg(``dict``) script configuartion dictionary \"\"\" script_name = cfg[\"id\"] script_id = str(abs(hash((cfg[\"id\"],) + tuple(inbox[0].values()))))[0:8] # LOG.log(mp.DEFAULT, \"@papy;script %s:%s started\" % (script_name, script_id)) # LOG.log(mp.SUBDEFAULT, \"@papy;%s:%s received: %s\" % (script_name, script_id, inbox)) args = {} args[\"params\"] = dict(cfg[\"params\"]) args[\"in\"] = {} for in_port in cfg[\"in\"]: for inin_ports in inbox: in_path = inin_ports.get(in_port, None) if (in_path is not None): # first matching input-output (including type) port is linked remaining ignored args[\"in\"][in_port] = in_path break # check that all input ports are connected if len(args[\"in\"]) < len(cfg[\"in\"]): raise Exception(\"not all in_ports connected, got: %s\" % (args[\"in\"],)) # create output file for out_ports args[\"out\"] = {} out = {} for i, (out_port, out_ext) in enumerate(cfg[\"out\"]): if cfg[\"in\"] == tuple(out_port_ for out_port_, _ in cfg[\"out\"]): pfx = args[\"in\"][cfg[\"in\"][i]].split(\"/\")[-1].split(\".\")[0] + \"_\" base = cfg[\"id\"] else: pfx = args[\"in\"][cfg[\"in\"][0]].split(\"/\")[-1].split(\".\")[0] + \"_\" base = cfg[\"id\"] + \"-\" + out_port if out_ext: out_path = cfg[\"dir\"] + \"/\" + pfx + base + \".\" + out_ext else: out_path = cfg[\"dir\"] + \"/\" + pfx + base args[\"out\"][out_port] = out_path out[out_port] = out_path # evaluate and check for errors ret = _eval_script(cfg[\"evaluator\"], cfg[\"preamble\"], cfg[\"dir\"], cfg[\"executable\"], cfg[\"script\"], args) if ret[0] != 0: # LOG.error(\"@papy;%s:%s %s:%s:%s\" % (script_name, script_id, ret[0], # ret[1].replace(\"\\n\", \"<br>\"), # ret[2].replace(\"\\n\", \"<br>\"))) raise Exception(ret[0], cfg[\"script\"], ret[1], ret[2]) #LOG.log(mp.SUBDEFAULT, \"@papy;%s:%s produced:%s\" % (script_name, script_id, out)) #LOG.log(mp.DEFAULT, \"@papy;script %s:%s finished\" % (script_name, script_id)) return out. \n### Response: Execute arbitrary scripts. \n\n    Arguments:\n    \n      - cfg(``dict``) script configuartion dictionary.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: void validateOustandingInjections(Errors errors) { validationStarted = true; initializablesCache.clear(); for (InjectableReference<?> reference : pendingInjections) { try { reference.validate(errors); } catch (ErrorsException e) { errors.merge(e.getErrors()); } } } \n### Response:", "ground_truth": "Prepares member injectors for all injected instances. This prompts Guice to do static analysis\non the injected instances.", "predict": "void validateOustandingInjections(Errors errors) {\n\n validationStarted = true;\n initializablesCache.clear();\n\n for (InjectableReference<?> reference : pendingInjections) {\n try {\n reference.validate(errors);\n } catch (ErrorsException e) {\n errors.merge(e.getErrors());\n }\n }\n}"}, {"ID": 336, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static final boolean isListItem(String pattern) { int idx = pattern.lastIndexOf(Lim); if (idx != -1) { try { Integer.parseInt(pattern.substring(idx+1)); return true; } catch (NumberFormatException ex) { return false; } } else { return false; } }. \n### Response: Return true if string after last separator is numeric\n@param pattern\n@return.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public T newInstance(Object[] args) throws Throwable { constructor.setAccessible(true); try { return constructor.newInstance(args); } catch (InvocationTargetException e) { throw e.getCause(); } } \n### Response:", "ground_truth": "Returns an instance of T, constructed using this constructor, with the supplied arguments.", "predict": "newInstance(): newInstances a new instance of the T class.\n@param args\n@return."}, {"ID": 337, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def _update_message_request(self, message): \"\"\"Add row keys and row range to given request message :type message: class:`data_messages_v2_pb2.ReadRowsRequest` :param message: The ``ReadRowsRequest`` protobuf \"\"\" for each in self.row_keys: message.rows.row_keys.append(_to_bytes(each)) for each in self.row_ranges: r_kwrags = each.get_range_kwargs() message.rows.row_ranges.add(**r_kwrags). \n### Response: Add row keys and row range to given request message\n\n        :type message: class:`data_messages_v2_pb2.ReadRowsRequest`\n        :param message: The ``ReadRowsRequest`` protobuf.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @SuppressWarnings({\"JavaDoc\", \"deprecation\"}) private ServletRequest withDispatcher( ServletRequest servletRequest, final ManagedServletPipeline servletPipeline) { // don't wrap the request if there are no servlets mapped. This prevents us from inserting our // wrapper unless it's actually going to be used. This is necessary for compatibility for apps // that downcast their HttpServletRequests to a concrete implementation. if (!servletPipeline.hasServletsMapped()) { return servletRequest; } HttpServletRequest request = (HttpServletRequest) servletRequest; //noinspection OverlyComplexAnonymousInnerClass return new HttpServletRequestWrapper(request) { @Override public RequestDispatcher getRequestDispatcher(String path) { final RequestDispatcher dispatcher = servletPipeline.getRequestDispatcher(path); return (null != dispatcher) ? dispatcher : super.getRequestDispatcher(path); } }; } \n### Response:", "ground_truth": "Used to create an proxy that dispatches either to the guice-servlet pipeline or the regular\npipeline based on uri-path match. This proxy also provides minimal forwarding support.\n\nWe cannot forward from a web.xml Servlet/JSP to a guice-servlet (because the filter pipeline\nis not called again). However, we can wrap requests with our own dispatcher to forward the\n*other* way. web.xml Servlets/JSPs can forward to themselves as per normal.\n\nThis is not a problem cuz we intend for people to migrate from web.xml to guice-servlet,\nincrementally, but not the other way around (which, we should actively discourage).", "predict": "Provides a method `withDispatcher` for the `ServletRequest` class that wraps the request and sets the requestDispatcher to the provided `ManagedServletPipeline`. This method is necessary for compatibility with apps that downcast their `HttpServletRequest` objects to a concrete implementation. It checks if there are any servlets mapped to the request and if not, it returns the original `ServletRequest`. If there areServlets mapped, it creates a new `HttpServletRequestWrapper` object and sets the requestDispatcher to the provided ` servletPipeline`.\n\n        :param servletRequest: The original `ServletRequest` object.\n        :param servletPipeline: The `ManagedServletPipeline` object.\n        :return: A new `ServletRequest` object that wraps the provided `ServletRequest` and `ManagedServletPipeline`."}, {"ID": 338, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected function buildBlocks($rootId) { // build the root block if (!$this->rawLayout->hasProperty($rootId, RawLayout::RESOLVED_OPTIONS, true)) { $this->buildBlock($rootId); } // build child blocks $iterator = $this->rawLayout->getHierarchyIterator($rootId); foreach ($iterator as $id) { if (!$this->rawLayout->has($id) || $this->rawLayout->hasProperty($id, RawLayout::RESOLVED_OPTIONS, true)) { // the block is already built continue; } if (!$this->isContainerBlock($iterator->getParent())) { $blockType = $this->rawLayout->getProperty($iterator->getParent(), RawLayout::BLOCK_TYPE, true); throw new Exception\\LogicException( sprintf( 'The \"%s\" item cannot be added as a child to \"%s\" item (block type: %s) ' . 'because only container blocks can have children.', $id, $iterator->getParent(), $blockType instanceof BlockTypeInterface ? $blockType->getName() : $blockType ) ); } $this->buildBlock($id); } // apply layout changes were made by built blocks and build newly added blocks $this->layoutManipulator->applyChanges($this->context); if ($this->layoutManipulator->getNumberOfAddedItems() !== 0) { $this->buildBlocks($rootId); } }. \n### Response: Builds all blocks starting with and including the given root block\n\n@param string $rootId\n\n@throws Exception\\LogicException if a child block is added to not container.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: static <T> InternalFactory<? extends T> scope( Key<T> key, InjectorImpl injector, InternalFactory<? extends T> creator, Object source, Scoping scoping) { if (scoping.isNoScope()) { return creator; } Scope scope = scoping.getScopeInstance(); // NOTE: SingletonScope relies on the fact that we are passing a // ProviderToInternalFactoryAdapter here. If you change the type make sure to update // SingletonScope as well. Provider<T> scoped = scope.scope(key, new ProviderToInternalFactoryAdapter<T>(injector, creator)); return new InternalFactoryToProviderAdapter<T>(scoped, source); } \n### Response:", "ground_truth": "Scopes an internal factory.", "predict": "Provides a scope for the given internal factory.\n\n@param Key<T> $key\n@param InjectorImpl $ injector\n@param InternalFactory<? extends T> $creator\n@param Object $source\n@return Scope<T>\n\n@ note: SingletonScope relies on the fact that we are passing a // ProviderToInternalFactoryAdapter here. If you change the type make sure to update // SingletonScope as well."}, {"ID": 339, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (a Author) String() string { e := \"\" if a.Email != \"\" { e = \" <\" + a.Email + \">\" } return fmt.Sprintf(\"%v%v\", a.Name, e) }. \n### Response: // String makes Author comply to the Stringer interface, to allow an easy print in the templating process.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: static Scoping makeInjectable(Scoping scoping, InjectorImpl injector, Errors errors) { Class<? extends Annotation> scopeAnnotation = scoping.getScopeAnnotation(); if (scopeAnnotation == null) { return scoping; } ScopeBinding scope = injector.state.getScopeBinding(scopeAnnotation); if (scope != null) { return forInstance(scope.getScope()); } errors.scopeNotFound(scopeAnnotation); return UNSCOPED; } \n### Response:", "ground_truth": "Replaces annotation scopes with instance scopes using the Injector's annotation-to-instance\nmap. If the scope annotation has no corresponding instance, an error will be added and unscoped\nwill be retuned.", "predict": "// Make the given scoping object available for injection by the InjectorImpl."}, {"ID": 340, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function disk() { if (is_null($this->disk)) { $this->disk = app(Disk::class); } return $this->disk; }. \n### Response: Return the Disk instance.\n\n@return \\Eyewitness\\Eye\\Monitors\\Disk.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: static String normalizePath(String path) { StringBuilder sb = new StringBuilder(path.length()); int queryStart = path.indexOf('?'); String query = null; if (queryStart != -1) { query = path.substring(queryStart); path = path.substring(0, queryStart); } // Normalize the path. we need to decode path segments, normalize and rejoin in order to // 1. decode and normalize safe percent escaped characters. e.g. %70 -> 'p' // 2. decode and interpret dangerous character sequences. e.g. /%2E/ -> '/./' -> '/' // 3. preserve dangerous encoded characters. e.g. '/%2F/' -> '///' -> '/%2F' List<String> segments = new ArrayList<>(); for (String segment : SLASH_SPLITTER.split(path)) { // This decodes all non-special characters from the path segment. so if someone passes // /%2E/foo we will normalize it to /./foo and then /foo String normalized = UrlEscapers.urlPathSegmentEscaper().escape(lenientDecode(segment, UTF_8, false)); if (\".\".equals(normalized)) { // skip } else if (\"..\".equals(normalized)) { if (segments.size() > 1) { segments.remove(segments.size() - 1); } } else { segments.add(normalized); } } SLASH_JOINER.appendTo(sb, segments); if (query != null) { sb.append(query); } return sb.toString(); } \n### Response:", "ground_truth": "Normalizes a path by unescaping all safe, percent encoded characters.", "predict": "This method normalizes a path segment by decode, normalize, and rejoining the segments. It also handles dangerous character sequences and preserving dangerous encoded characters. The path is normalized by first finding the index of the '?' character and then getting the substring of the path starting from the index of the '?' character and ending at the first non-'?' character. The query string is then extracted from the normalized path and if it is not null, it is appended to the normalized path. Finally, the normalized path is returned."}, {"ID": 341, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def url(self): ''' Because invoice URLs are generally emailed, this includes the default site URL and the protocol specified in settings. ''' if self.id: return '%s://%s%s' % ( getConstant('email__linkProtocol'), Site.objects.get_current().domain, reverse('viewInvoice', args=[self.id,]), ). \n### Response: Because invoice URLs are generally emailed, this\n        includes the default site URL and the protocol specified in\n        settings..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static <T extends Annotation> T generateAnnotation(Class<T> annotationType) { Preconditions.checkState( isAllDefaultMethods(annotationType), \"%s is not all default methods\", annotationType); return (T) cache.getUnchecked(annotationType); } \n### Response:", "ground_truth": "Generates an Annotation for the annotation class. Requires that the annotation is all\noptionals.", "predict": "This method generates an annotation for a given annotation type. It first checks if all default methods of the annotation type are present in the cache. If not, it returns the annotation object from the cache."}, {"ID": 342, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func checkCopySyntaxTypeB(srcURLs []string, tgtURL string, keys map[string][]prefixSSEPair) { // Check source. if len(srcURLs) != 1 { fatalIf(errInvalidArgument().Trace(), \"Invalid number of source arguments.\") } srcURL := srcURLs[0] _, srcContent, err := url2Stat(srcURL, false, keys) fatalIf(err.Trace(srcURL), \"Unable to stat source `\"+srcURL+\"`.\") if !srcContent.Type.IsRegular() { fatalIf(errInvalidArgument().Trace(srcURL), \"Source `\"+srcURL+\"` is not a file.\") } // Check target. if _, tgtContent, err := url2Stat(tgtURL, false, keys); err == nil { if !tgtContent.Type.IsDir() { fatalIf(errInvalidArgument().Trace(tgtURL), \"Target `\"+tgtURL+\"` is not a folder.\") } } }. \n### Response: // checkCopySyntaxTypeB verifies if the source is a valid file and target is a valid folder..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static boolean isRetainedAtRuntime(Class<? extends Annotation> annotationType) { Retention retention = annotationType.getAnnotation(Retention.class); return retention != null && retention.value() == RetentionPolicy.RUNTIME; } \n### Response:", "ground_truth": "Returns true if the given annotation is retained at runtime.", "predict": "// isRetainedAtRuntime verifies if an annotation with RetentionPolicy.RUNTIME is present on a given class.."}, {"ID": 343, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def get_closest_readlength(estimated_readlength): # type: (int) -> int \"\"\"Find the predefined readlength closest to the estimated readlength. In the case of a tie, choose the shortest readlength.\"\"\" readlengths = [36, 50, 75, 100] differences = [abs(r - estimated_readlength) for r in readlengths] min_difference = min(differences) index_of_min_difference = [i for i, d in enumerate(differences) if d == min_difference][0] return readlengths[index_of_min_difference]. \n### Response: Find the predefined readlength closest to the estimated readlength.\n\n    In the case of a tie, choose the shortest readlength..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static Class<? extends Annotation> findScopeAnnotation( Errors errors, Annotation[] annotations) { Class<? extends Annotation> found = null; for (Annotation annotation : annotations) { Class<? extends Annotation> annotationType = annotation.annotationType(); if (isScopeAnnotation(annotationType)) { if (found != null) { errors.duplicateScopeAnnotations(found, annotationType); } else { found = annotationType; } } } return found; } \n### Response:", "ground_truth": "Returns the scoping annotation, or null if there isn't one.", "predict": "Find the annotation type that is a duplicate of the given annotations for the given errors.\n\n    The method iterates through the given annotations and checks if the given annotationType is a duplicate of any of them. If it finds a duplicate, it returns the found duplicate. Otherwise, it returns the original annotationType.."}, {"ID": 344, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def get_emitter(self, event_type: str) -> Callable: \"\"\"Get the callable that emits the given type of events.\"\"\" if event_type not in self.events: raise ValueError(f'No event {event_type} in system.') return self.events.get_emitter(event_type). \n### Response: Get the callable that emits the given type of events..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static Key<?> getKey( TypeLiteral<?> type, Member member, Annotation[] annotations, Errors errors) throws ErrorsException { int numErrorsBefore = errors.size(); Annotation found = findBindingAnnotation(errors, member, annotations); errors.throwIfNewErrors(numErrorsBefore); return found == null ? Key.get(type) : Key.get(type, found); } \n### Response:", "ground_truth": "Gets a key for the given type, member and annotations.", "predict": "Find the binding annotation for the given member and return its key."}, {"ID": 345, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func builderToV2(msg *v1.ApiCommonBuildMessage, tags strpair.Map, params *v1Params) (ret *pb.BuilderID, err error) { ret = &pb.BuilderID{Builder: params.Builder} if ret.Builder == \"\" { ret.Builder = tags.Get(v1.TagBuilder) // Fallback: Grab builder name from tags. } ret.Project, ret.Bucket = BucketNameToV2(msg.Bucket) if msg.Project != \"\" && ret.Project != \"\" && ret.Project != msg.Project { err = errors.Reason( \"message project %q does not match bucket project %q\", msg.Project, ret.Project).Tag(MalformedBuild).Err() } return }. \n### Response: // builderToV2 attempts to parse as many fields into bucket and project as possible,\n// and do project name validation if the project is available..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String nameOf(Key<?> key) { Annotation annotation = key.getAnnotation(); Class<? extends Annotation> annotationType = key.getAnnotationType(); if (annotation != null && !isMarker(annotationType)) { return key.getAnnotation().toString(); } else if (key.getAnnotationType() != null) { return \"@\" + key.getAnnotationType().getName(); } else { return \"\"; } } \n### Response:", "ground_truth": "Returns the name the binding should use. This is based on the annotation. If the annotation has\nan instance and is not a marker annotation, we ask the annotation for its toString. If it was a\nmarker annotation or just an annotation type, we use the annotation's name. Otherwise, the name\nis the empty string.", "predict": "// returns the name of the key as it is defined in the key annotation.\n// If the key is not an annotation, returns an empty string.\n// If the key annotation is not found, returns the name of the default\n// annotation type.\n\n"}, {"ID": 346, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected final OperationStatus matchStatus(String line, OperationStatus... statii) { OperationStatus rv = null; for (OperationStatus status : statii) { if (line.equals(status.getMessage())) { rv = status; } } if (rv == null) { rv = new OperationStatus(false, line, StatusCode.fromAsciiLine(line)); } return rv; }. \n### Response: Match the status line provided against one of the given OperationStatus\nobjects. If none match, return a failure status with the given line.\n\n@param line the current line\n@param statii several status objects\n@return the appropriate status object.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void initializeDelegate(Provider<T> delegate) { checkState(this.delegate == null, \"delegate already initialized\"); this.delegate = checkNotNull(delegate, \"delegate\"); } \n### Response:", "ground_truth": "Sets the actual provider.\n\n@throws IllegalStateException if the delegate is already set", "predict": "Initializes the delegate provider and sets the delegate to the provided provider.\n\n@param delegate the provider to initialize\n@return an empty void object.\n\nNote: The checkState method is used to ensure that the delegate is not already initialized."}, {"ID": 347, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def check_filepath(self, path, filename): \"\"\" Check and return the final filepath to settings Args: path (str): Directory path where to search for settings file. filename (str): Filename to use to search for settings file. Raises: boussole.exceptions.SettingsBackendError: If determined filepath does not exists or is a directory. Returns: string: Settings file path, joining given path and filename. \"\"\" settings_path = os.path.join(path, filename) if not os.path.exists(settings_path) or \\ not os.path.isfile(settings_path): msg = \"Unable to find settings file: {}\" raise SettingsBackendError(msg.format(settings_path)) return settings_path. \n### Response: Check and return the final filepath to settings\n\n        Args:\n            path (str): Directory path where to search for settings file.\n            filename (str): Filename to use to search for settings file.\n\n        Raises:\n            boussole.exceptions.SettingsBackendError: If determined filepath\n                does not exists or is a directory.\n\n        Returns:\n            string: Settings file path, joining given path and filename..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private void addDirectTypeBinding(Binder binder) { binder .bind(bindingSelection.getDirectKey()) .toProvider(new RealDirectTypeProvider<T>(bindingSelection)); } \n### Response:", "ground_truth": "Adds a binding for T. Multiple calls to this are safe, and will be collapsed as duplicate\nbindings.", "predict": "Adds a direct type binding to the given binder.\n\n        Args:\n            Binder: Binder to add the direct type binding to.\n\n        Returns:\n            void: No return value is required.\n\nNote: This method is used to add a direct type binding to the given binder, which is used to bind types to keys in a data model. The method binds the given direct key to a new RealDirectTypeProvider<T> object, which is used to provide types to the binder. This method does not modify the binder itself, but rather adds a new binding to it."}, {"ID": 348, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected function buildLimit() { return $this->limit !== null ? ' LIMIT ' . $this->limit . ($this->offset ? ' OFFSET ' . $this->offset : '') : ''; }. \n### Response: Builds the `LIMIT ... OFFSET` clause.\n\n@return string.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public ConstructorInjector<?> get(InjectionPoint constructorInjector, Errors errors) throws ErrorsException { return cache.get(constructorInjector, errors); } \n### Response:", "ground_truth": "Returns a new complete constructor injector with injection listeners registered.", "predict": "This method retrieves the constructor injection point and the associated errors from the cache. It then returns the cached constructor injection point or throws an ErrorsException if the cache is empty or invalid."}, {"ID": 349, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (fsm *FSMHandler) AdjustWeights() ([]SuggestedWeight, error) { // In this case adjusting weights would have no effect, so do nothing if len(fsm.endpoints) < 2 { return fsm.originalWeights, nil } // Metrics are not ready if !metricsReady(fsm.endpoints) { return fsm.originalWeights, nil } if !fsm.timerExpired() { return fsm.lastWeights, nil } // Select endpoints with highest error rates and lower their weight good, bad := splitEndpoints(fsm.endpoints) // No endpoints that are different by their quality, so converge weights if len(bad) == 0 || len(good) == 0 { weights, changed := fsm.convergeWeights() if changed { fsm.lastWeights = weights fsm.setTimer() } return fsm.lastWeights, nil } fsm.lastWeights = fsm.adjustWeights(good, bad) fsm.setTimer() return fsm.lastWeights, nil }. \n### Response: // Called on every load balancer NextEndpoint call, returns the suggested weights\n// on every call, can adjust weights if needed..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private static boolean hasScope(Class<? extends Interceptor> interceptorClass) { for (Annotation annotation : interceptorClass.getAnnotations()) { if (Annotations.isScopeAnnotation(annotation.annotationType())) { return true; } } return false; } \n### Response:", "ground_truth": "Returns true if the given class has a scope annotation.", "predict": "// Returns true if the interceptor class has a \"scope\" annotation, otherwise false.\n// This method is used by the balancer to determine if an interceptor should be added to the chain."}, {"ID": 350, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def stream(self, recurring=values.unset, trigger_by=values.unset, usage_category=values.unset, limit=None, page_size=None): \"\"\" Streams TriggerInstance records from the API as a generator stream. This operation lazily loads records as efficiently as possible until the limit is reached. The results are returned as a generator, so this operation is memory efficient. :param TriggerInstance.Recurring recurring: The frequency of recurring UsageTriggers to read :param TriggerInstance.TriggerField trigger_by: The trigger field of the UsageTriggers to read :param TriggerInstance.UsageCategory usage_category: The usage category of the UsageTriggers to read :param int limit: Upper limit for the number of records to return. stream() guarantees to never return more than limit. Default is no limit :param int page_size: Number of records to fetch per request, when not set will use the default value of 50 records. If no page_size is defined but a limit is defined, stream() will attempt to read the limit with the most efficient page size, i.e. min(limit, 1000) :returns: Generator that will yield up to limit results :rtype: list[twilio.rest.api.v2010.account.usage.trigger.TriggerInstance] \"\"\" limits = self._version.read_limits(limit, page_size) page = self.page( recurring=recurring, trigger_by=trigger_by, usage_category=usage_category, page_size=limits['page_size'], ) return self._version.stream(page, limits['limit'], limits['page_limit']). \n### Response: Streams TriggerInstance records from the API as a generator stream.\n        This operation lazily loads records as efficiently as possible until the limit\n        is reached.\n        The results are returned as a generator, so this operation is memory efficient.\n\n        :param TriggerInstance.Recurring recurring: The frequency of recurring UsageTriggers to read\n        :param TriggerInstance.TriggerField trigger_by: The trigger field of the UsageTriggers to read\n        :param TriggerInstance.UsageCategory usage_category: The usage category of the UsageTriggers to read\n        :param int limit: Upper limit for the number of records to return. stream()\n                          guarantees to never return more than limit.  Default is no limit\n        :param int page_size: Number of records to fetch per request, when not set will use\n                              the default value of 50 records.  If no page_size is defined\n                              but a limit is defined, stream() will attempt to read the\n                              limit with the most efficient page size, i.e. min(limit, 1000)\n\n        :returns: Generator that will yield up to limit results\n        :rtype: list[twilio.rest.api.v2010.account.usage.trigger.TriggerInstance].\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: static <K, V> RealMapBinder<K, V> newRealMapBinder( Binder binder, TypeLiteral<K> keyType, Key<V> valueTypeAndAnnotation) { binder = binder.skipSources(RealMapBinder.class); TypeLiteral<V> valueType = valueTypeAndAnnotation.getTypeLiteral(); return newRealMapBinder( binder, keyType, valueType, valueTypeAndAnnotation.ofType(mapOf(keyType, valueType)), RealMultibinder.newRealSetBinder( binder, valueTypeAndAnnotation.ofType(entryOfProviderOf(keyType, valueType)))); } \n### Response:", "ground_truth": "since it's an easy way to group a type and an optional annotation type or instance.", "predict": "```\nstatic <K, V> RealMapBinder<K, V> newRealMapBinder( Binder binder, TypeLiteral<K> keyType, Key<V> valueTypeAndAnnotation) {\n    Binder binder = binder.skipSources(RealMapBinder.class);\n    TypeLiteral<V> valueType = valueTypeAndAnnotation.getTypeLiteral();\n    return newRealMapBinder( binder, keyType, valueType, valueTypeAndAnnotation.ofType(mapOf(keyType, valueType)), RealMultiBinder.newRealSetBinder( binder, valueTypeAndAnnotation.ofType(entryOfProviderOf(keyType, valueType))));\n}\n```\n### Resp Creates a new RealMapBinder instance that maps keys to values of type K and values to types V.\n        This operation is useful for binding data in a way that is consistent with the Java data model.\n        The returned binder can be used to bind data in a variety of ways, such as as a key-value pair, a map, or a set.\n\n        :param Binder binder: The Binder instance to use for binding data\n        :param TypeLiteral<K> keyType: The type of the keys to be bound\n        :param TypeLiteral<V> valueType: The type of the values to be bound\n        :param Key<V> valueTypeAndAnnotation: The type of the key and value to be bound\n        :return: A new RealMapBinder instance\n        :rtype: RealMapBinder<K, V>.\n```"}, {"ID": 351, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (i *I) Validate(ctx *Context) error { _, err := i.template(ctx) return err }. \n### Response: // Validate validates that the template is syntactically valid..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: Key<V> getKeyForNewValue(K key) { checkNotNull(key, \"key\"); checkConfiguration(!bindingSelection.isInitialized(), \"MapBinder was already initialized\"); RealMultibinder<Map.Entry<K, Provider<V>>> entrySetBinder = bindingSelection.getEntrySetBinder(); Key<V> valueKey = Key.get( bindingSelection.getValueType(), new RealElement( entrySetBinder.getSetName(), MAPBINDER, bindingSelection.getKeyType().toString())); entrySetBinder.addBinding().toProvider(new ProviderMapEntry<K, V>(key, valueKey)); return valueKey; } \n### Response:", "ground_truth": "Adds a binding to the map for the given key.", "predict": "// getKeyForNewValue retrieves the value key for a new value of type K.."}, {"ID": 352, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func DecompressFile(source, destination string) error { cIface, err := ByExtension(source) if err != nil { return err } c, ok := cIface.(Decompressor) if !ok { return fmt.Errorf(\"format specified by source filename is not a recognized compression algorithm: %s\", source) } return FileCompressor{Decompressor: c}.DecompressFile(source, destination) }. \n### Response: // DecompressFile is a convenience function to simply compress a file.\n// The compression algorithm is selected implicitly based on the\n// source's extension..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private T provision(InternalContext context, ConstructionContext<T> constructionContext) throws InternalProvisionException { try { T t; try { Object[] parameters = SingleParameterInjector.getAll(context, parameterInjectors); t = constructionProxy.newInstance(parameters); constructionContext.setProxyDelegates(t); } finally { constructionContext.finishConstruction(); } // Store reference. If an injector re-enters this factory, they'll get the same reference. constructionContext.setCurrentReference(t); MembersInjectorImpl<T> localMembersInjector = membersInjector; localMembersInjector.injectMembers(t, context, false); localMembersInjector.notifyListeners(t); return t; } catch (InvocationTargetException userException) { Throwable cause = userException.getCause() != null ? userException.getCause() : userException; throw InternalProvisionException.errorInjectingConstructor(cause) .addSource(constructionProxy.getInjectionPoint()); } finally { constructionContext.removeCurrentReference(); } } \n### Response:", "ground_truth": "Provisions a new T.", "predict": "// Provides a way to provision a type using its constructor.\n// This method creates a new instance of the provided type and\n// stores a reference to it in the constructionContext.\n// If an injector re-enters this factory, they'll get the same reference.\n// This method also injects members of the type into the injector and\n// notifys any listeners.\n```\n```"}, {"ID": 353, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def get_group_permissions(self): \"\"\" If allowed by the configuration, this returns the set of permissions defined by the user's LDAP group memberships. \"\"\" if self._group_permissions is None: self._group_permissions = set() if self.settings.FIND_GROUP_PERMS: try: self._load_group_permissions() except ldap.LDAPError as e: results = ldap_error.send(self.backend.__class__, context='get_group_permissions', exception=e) if len(results) == 0: logger.warning(\"Caught LDAPError loading group permissions: %s\", pprint.pformat(e)) return self._group_permissions. \n### Response: If allowed by the configuration, this returns the set of permissions\n        defined by the user's LDAP group memberships..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private Object writeReplace() throws ObjectStreamException { Object[] sourcesAsStrings = sources.toArray(); for (int i = 0; i < sourcesAsStrings.length; i++) { sourcesAsStrings[i] = Errors.convert(sourcesAsStrings[i]).toString(); } return new Message(ImmutableList.copyOf(sourcesAsStrings), message, cause); } \n### Response:", "ground_truth": "When serialized, we eagerly convert sources to strings. This hurts our formatting, but it\nguarantees that the receiving end will be able to read the message.", "predict": "private Object writeReplace() throws ObjectStreamException {\n        Object[] sourcesAsStrings = sources.toArray();\n        for (int i = 0; i < sourcesAsStrings.length; i++) {\n            sourcesAsStrings[i] = Errors.convert(sourcesAsStrings[i]).toString();\n        }\n        return new Message(ImmutableList.copyOf(sourcesAsStrings), message, cause);\n    }"}, {"ID": 354, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (h *Health) safeResetStates() { h.statesLock.Lock() defer h.statesLock.Unlock() h.states = make(map[string]State, 0) }. \n### Response: // resets the states in a concurrency-safe manner.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: static Module forModule(Module module) { // avoid infinite recursion, since installing a module always installs itself if (module instanceof CheckedProviderMethodsModule) { return Modules.EMPTY_MODULE; } return new CheckedProviderMethodsModule(module); } \n### Response:", "ground_truth": "Returns a module which creates bindings for provider methods from the given module.", "predict": "// returns the requested module, avoiding infinite recursion."}, {"ID": 355, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def _create_tc_dirs(self): \"\"\"Create app directories for logs and data files.\"\"\" tc_log_path = self.profile.get('args', {}).get('tc_log_path') if tc_log_path is not None and not os.path.isdir(tc_log_path): os.makedirs(tc_log_path) tc_out_path = self.profile.get('args', {}).get('tc_out_path') if tc_out_path is not None and not os.path.isdir(tc_out_path): os.makedirs(tc_out_path) tc_tmp_path = self.profile.get('args', {}).get('tc_tmp_path') if tc_tmp_path is not None and not os.path.isdir(tc_tmp_path): os.makedirs(tc_tmp_path). \n### Response: Create app directories for logs and data files..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override @SuppressWarnings(\"unchecked\") public Collection<AssistedMethod> getAssistedMethods() { return (Collection<AssistedMethod>) (Collection<?>) assistDataByMethod.values(); } \n### Response:", "ground_truth": "the collection is immutable.", "predict": "Retrieves the list of assist methods for the given method data."}, {"ID": 356, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def payment_end(self, account, wallet): \"\"\" End a payment session. Marks the account as available for use in a payment session. :param account: Account to mark available :type account: str :param wallet: Wallet to end payment session for :type wallet: str :raises: :py:exc:`nano.rpc.RPCException` >>> rpc.payment_end( ... account=\"xrb_3e3j5tkog48pnny9dmfzj1r16pg8t1e76dz5tmac6iq689wyjfpi00000000\", ... wallet=\"FFFD1BAEC8EC20814BBB9059B393051AAA8380F9B5A2E6B2489A277D81789EEE\" ... ) True \"\"\" account = self._process_value(account, 'account') wallet = self._process_value(wallet, 'wallet') payload = {\"account\": account, \"wallet\": wallet} resp = self.call('payment_end', payload) return resp == {}. \n### Response: End a payment session.  Marks the account as available for use in a\n        payment session.\n\n        :param account: Account to mark available\n        :type account: str\n\n        :param wallet: Wallet to end payment session for\n        :type wallet: str\n\n        :raises: :py:exc:`nano.rpc.RPCException`\n\n        >>> rpc.payment_end(\n        ...     account=\"xrb_3e3j5tkog48pnny9dmfzj1r16pg8t1e76dz5tmac6iq689wyjfpi00000000\",\n        ...     wallet=\"FFFD1BAEC8EC20814BBB9059B393051AAA8380F9B5A2E6B2489A277D81789EEE\"\n        ... )\n        True.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private boolean isTypeNotSpecified(TypeLiteral<?> typeLiteral, ConfigurationException ce) { Collection<Message> messages = ce.getErrorMessages(); if (messages.size() == 1) { Message msg = Iterables.getOnlyElement(new Errors().keyNotFullySpecified(typeLiteral).getMessages()); return msg.getMessage().equals(Iterables.getOnlyElement(messages).getMessage()); } else { return false; } } \n### Response:", "ground_truth": "Returns true if the ConfigurationException is due to an error of TypeLiteral not being fully\nspecified.", "predict": "This method checks if a given type literal is not specified in a configuration exception. It returns true if the type literal is not specified, and false otherwise.\n\n:param typeLiteral: Type literal to check\n:type typeLiteral: Type\n:param ce: ConfigurationException to get error messages\n:return: True if type literal is not specified, False otherwise\n\nNote: This method is used to check if a type literal is not specified in a configuration exception. It is useful when you want to check if a type is specified in the configuration, but you want to handle the case where it is not specified."}, {"ID": 357, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func strToDate(t *mysqlTime, date string, format string, ctx map[string]int) bool { date = skipWhiteSpace(date) format = skipWhiteSpace(format) token, formatRemain, succ := getFormatToken(format) if !succ { return false } if token == \"\" { // Extra characters at the end of date are ignored. return true } dateRemain, succ := matchDateWithToken(t, date, token, ctx) if !succ { return false } return strToDate(t, dateRemain, formatRemain, ctx) }. \n### Response: // strToDate converts date string according to format, returns true on success,\n// the value will be stored in argument t or ctx..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private boolean constructorHasMatchingParams( TypeLiteral<?> type, Constructor<?> constructor, List<Key<?>> paramList, Errors errors) throws ErrorsException { List<TypeLiteral<?>> params = type.getParameterTypes(constructor); Annotation[][] paramAnnotations = constructor.getParameterAnnotations(); int p = 0; List<Key<?>> constructorKeys = Lists.newArrayList(); for (TypeLiteral<?> param : params) { Key<?> paramKey = Annotations.getKey(param, constructor, paramAnnotations[p++], errors); constructorKeys.add(paramKey); } // Require that every key exist in the constructor to match up exactly. for (Key<?> key : paramList) { // If it didn't exist in the constructor set, we can't use it. if (!constructorKeys.remove(key)) { return false; } } // If any keys remain and their annotation is Assisted, we can't use it. for (Key<?> key : constructorKeys) { if (key.getAnnotationType() == Assisted.class) { return false; } } // All @Assisted params match up to the method's parameters. return true; } \n### Response:", "ground_truth": "Matching logic for constructors annotated with AssistedInject. This returns true if and only if\nall @Assisted parameters in the constructor exactly match (in any order) all @Assisted\nparameters the method's parameter.", "predict": "// constructorHasMatchingParams checks if the given constructor and its parameters have matching annotations,\n// and returns true if all @Assisted params match up to the method's parameters,\n// and false otherwise.\n\n// This method is used to check if a constructor has matching parameters to its arguments,\n// and to check if an @Assisted parameter matches up to the method's parameters.\n// It requires that every key exist in the constructor to match up exactly,\n// and that any @Assisted params remain after matching the constructor's parameters.\n// It returns true if all @Assisted params match up to the method's parameters,\n// and false otherwise.\n```"}, {"ID": 358, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def _check_data_for_date(self, item, timestamp, data_dict, data_index_dict): \"\"\" Checks if the item is found in the index. An entry in the index points to the data in the data_dict. This is mainly used retrieve callsigns and prefixes. In case data is found for item, a dict containing the data is returned. Otherwise a KeyError is raised. \"\"\" if item in data_index_dict: for item in data_index_dict[item]: # startdate < timestamp if const.START in data_dict[item] and not const.END in data_dict[item]: if data_dict[item][const.START] < timestamp: item_data = copy.deepcopy(data_dict[item]) del item_data[const.START] return item_data # enddate > timestamp elif not const.START in data_dict[item] and const.END in data_dict[item]: if data_dict[item][const.END] > timestamp: item_data = copy.deepcopy(data_dict[item]) del item_data[const.END] return item_data # startdate > timestamp > enddate elif const.START in data_dict[item] and const.END in data_dict[item]: if data_dict[item][const.START] < timestamp \\ and data_dict[item][const.END] > timestamp: item_data = copy.deepcopy(data_dict[item]) del item_data[const.START] del item_data[const.END] return item_data # no startdate or enddate available elif not const.START in data_dict[item] and not const.END in data_dict[item]: return data_dict[item] raise KeyError. \n### Response: Checks if the item is found in the index. An entry in the index points to the data\n        in the data_dict. This is mainly used retrieve callsigns and prefixes.\n        In case data is found for item, a dict containing the data is returned. Otherwise a KeyError is raised..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private Set<Dependency<?>> getDependencies( InjectionPoint ctorPoint, TypeLiteral<?> implementation) { ImmutableSet.Builder<Dependency<?>> builder = ImmutableSet.builder(); builder.addAll(ctorPoint.getDependencies()); if (!implementation.getRawType().isInterface()) { for (InjectionPoint ip : InjectionPoint.forInstanceMethodsAndFields(implementation)) { builder.addAll(ip.getDependencies()); } } return builder.build(); } \n### Response:", "ground_truth": "Calculates all dependencies required by the implementation and constructor.", "predict": "This method retrieves the dependencies of a constructor point and an instance method or field of the given implementation. It creates an ImmutableSet of all the dependencies and returns it.\n\nThe method first retrieves the dependencies of the constructor point by calling its getDependencies() method. If the implementation is not an interface, it then iterates over all the instance methods and fields of the implementation by calling InjectionPoint.forInstanceMethodsAndFields(implementation). The dependencies of each instance method or field are added to the builder and then returned."}, {"ID": 359, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static EventType valueOf(final Integer i) { final EventType type = translation.get(i); if (isNull(type)) { throw new IllegalArgumentException(\"Invalid event type: \" + i); } return type; }. \n### Response: Get the Fedora event type for a JCR type\n\n@param i the integer value of a JCR type\n@return EventType.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private Set<Dependency<?>> removeAssistedDeps(Set<Dependency<?>> deps) { ImmutableSet.Builder<Dependency<?>> builder = ImmutableSet.builder(); for (Dependency<?> dep : deps) { Class<?> annotationType = dep.getKey().getAnnotationType(); if (annotationType == null || !annotationType.equals(Assisted.class)) { builder.add(dep); } } return builder.build(); } \n### Response:", "ground_truth": "Return all non-assisted dependencies.", "predict": "Removes all dependencies that are annotated with `Assisted` and returns a new set of dependencies.\n\n@param deps a set of dependencies\n@return a new set of dependencies\n\n"}, {"ID": 360, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function(index, event) { this.index = index; var rows = this.element.find('li'); rows .removeClass('is-active') .find('a') .aria('selected', false); // Select if (index >= 0) { if (this.items[index]) { var item = this.items[index]; rows.eq(index) .addClass('is-active') .find('a') .aria('selected', true); this.input.val(item.title); this.fireEvent(event || 'select', [item, index]); } // Reset } else { this.input.val(this.term); this.fireEvent('reset'); } }. \n### Response: Select an item in the list.\n\n@param {Number} index\n@param {String} [event].\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private boolean isValidForOptimizedAssistedInject( Set<Dependency<?>> dependencies, Class<?> implementation, TypeLiteral<?> factoryType) { Set<Dependency<?>> badDeps = null; // optimization: create lazily for (Dependency<?> dep : dependencies) { if (isInjectorOrAssistedProvider(dep)) { if (badDeps == null) { badDeps = Sets.newHashSet(); } badDeps.add(dep); } } if (badDeps != null && !badDeps.isEmpty()) { logger.log( Level.WARNING, \"AssistedInject factory {0} will be slow \" + \"because {1} has assisted Provider dependencies or injects the Injector. \" + \"Stop injecting @Assisted Provider<T> (instead use @Assisted T) \" + \"or Injector to speed things up. (It will be a ~6500% speed bump!) \" + \"The exact offending deps are: {2}\", new Object[] {factoryType, implementation, badDeps}); return false; } return true; } \n### Response:", "ground_truth": "Returns true if all dependencies are suitable for the optimized version of AssistedInject. The\noptimized version caches the binding & uses a ThreadLocal Provider, so can only be applied if\nthe assisted bindings are immediately provided. This looks for hints that the values may be\nlazily retrieved, by looking for injections of Injector or a Provider for the assisted values.", "predict": "isValidForOptimizedAssistedInject(): This method checks if the factory of the given factory type can be optimized by avoiding the creation of assisted dependencies or the use of the Injector. It does this by checking if the given dependencies are either assisted Provider dependencies or the Injector. If any of these dependencies are found, a warning log is generated and the factory is returned as not optimized. If all dependencies are found to be non-assisted or the Injector is not found, the method returns true.\n\n@param {Set<Dependency<?>>} dependencies\n@param {Class<?>} implementation\n@param {TypeLiteral<?>} factoryType."}, {"ID": 361, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void passOver(PageElement element) throws TechnicalException, FailureException { try { final String javascript = \"var evObj = document.createEvent('MouseEvents');\" + \"evObj.initMouseEvent(\\\"mouseover\\\",true, false, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);\" + \"arguments[0].dispatchEvent(evObj);\"; ((JavascriptExecutor) getDriver()).executeScript(javascript, Context.waitUntil(ExpectedConditions.presenceOfElementLocated(Utilities.getLocator(element)))); } catch (final Exception e) { new Result.Failure<>(e.getMessage(), Messages.format(Messages.getMessage(Messages.FAIL_MESSAGE_UNABLE_TO_PASS_OVER_ELEMENT), element, element.getPage().getApplication()), true, element.getPage().getCallBack()); } }. \n### Response: Passes over a specific page element triggering 'mouseover' js event.\n\n@param element\nTarget page element\n@throws TechnicalException\nis thrown if you have a technical error (format, configuration, datas, ...) in NoraUi.\nFailure with {@value com.github.noraui.utils.Messages#FAIL_MESSAGE_UNABLE_TO_PASS_OVER_ELEMENT} message (with screenshot)\n@throws FailureException\nif the scenario encounters a functional error.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public Binding<?> getBindingFromNewInjector( final Method method, final Object[] args, final AssistData data) { checkState( injector != null, \"Factories.create() factories cannot be used until they're initialized by Guice.\"); final Key<?> returnType = data.returnType; // We ignore any pre-existing binding annotation. final Key<?> returnKey = Key.get(returnType.getTypeLiteral(), RETURN_ANNOTATION); Module assistedModule = new AbstractModule() { @Override @SuppressWarnings({ \"unchecked\", \"rawtypes\" }) // raw keys are necessary for the args array and return value protected void configure() { Binder binder = binder().withSource(method); int p = 0; if (!data.optimized) { for (Key<?> paramKey : data.paramTypes) { // Wrap in a Provider to cover null, and to prevent Guice from injecting the // parameter binder.bind((Key) paramKey).toProvider(Providers.of(args[p++])); } } else { for (Key<?> paramKey : data.paramTypes) { // Bind to our ThreadLocalProviders. binder.bind((Key) paramKey).toProvider(data.providers.get(p++)); } } Constructor constructor = data.constructor; // Constructor *should* always be non-null here, // but if it isn't, we'll end up throwing a fairly good error // message for the user. if (constructor != null) { binder .bind(returnKey) .toConstructor(constructor, (TypeLiteral) data.implementationType) .in(Scopes.NO_SCOPE); // make sure we erase any scope on the implementation type } } }; Injector forCreate = injector.createChildInjector(assistedModule); Binding<?> binding = forCreate.getBinding(returnKey); // If we have providers cached in data, cache the binding for future optimizations. if (data.optimized) { data.cachedBinding = binding; } return binding; } \n### Response:", "ground_truth": "Creates a child injector that binds the args, and returns the binding for the method's result.", "predict": "Retrieves the binding for the specified method, args, and AssistData.\n\n@param method\nThe method to bind the binding for\n@param args\nThe arguments to pass to the method\n@param data\nThe AssistData to configure the binding with\n@return\nThe binding for the specified method, args, and AssistData\n@throws TechnicalException\nif there is a technical error (format, configuration, datas,...) in NoraUi\n@throws FailureException\nif the scenario encounters a functional error.\n\nNote: This method is used by the `getBindingFromNewInjector()` method of the `AssistData` class. The `AssistData` class is used to configure the binding for a new injector, which is created using the `createChildInjector()` method of the `Injector` class."}, {"ID": 362, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function bulkDeleteAction(Request $request, Role $role): Response { $this->denyAccessUnlessGranted(new Attribute('role', 'assign')); $form = $this->formFactory->deleteRoleAssignments( new RoleAssignmentsDeleteData() ); $form->handleRequest($request); if ($form->isSubmitted()) { $result = $this->submitHandler->handle($form, function (RoleAssignmentsDeleteData $data) use ($role) { foreach ($data->getRoleAssignments() as $roleAssignmentId => $selected) { $roleAssignment = $this->roleService->loadRoleAssignment($roleAssignmentId); $this->roleService->removeRoleAssignment($roleAssignment); } $this->notificationHandler->success( $this->translator->trans( /** @Desc(\"Assignment on role '%role%' removed.\") */ 'role.assignment_delete.success', ['%role%' => $role->identifier], 'role' ) ); return new RedirectResponse($this->generateUrl('ezplatform.role.view', [ 'roleId' => $role->id, ])); }); if ($result instanceof Response) { return $result; } } return $this->redirect($this->generateUrl('ezplatform.role.view', [ 'roleId' => $role->id, ])); }. \n### Response: Handles removing role assignments based on submitted form.\n\n@param \\Symfony\\Component\\HttpFoundation\\Request $request\n@param \\eZ\\Publish\\API\\Repository\\Values\\User\\Role $role\n\n@return \\Symfony\\Component\\HttpFoundation\\Response.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public Object invoke(Object proxy, final Method method, final Object[] args) throws Throwable { // If we setup a method handle earlier for this method, call it. // This is necessary for default methods that java8 creates, so we // can call the default method implementation (and not our proxied version of it). if (methodHandleByMethod.containsKey(method)) { return methodHandleByMethod.get(method).invokeWithArguments(args); } if (method.getDeclaringClass().equals(Object.class)) { if (\"equals\".equals(method.getName())) { return proxy == args[0]; } else if (\"hashCode\".equals(method.getName())) { return System.identityHashCode(proxy); } else { return method.invoke(this, args); } } AssistData data = assistDataByMethod.get(method); checkState(data != null, \"No data for method: %s\", method); Provider<?> provider; if (data.cachedBinding != null) { // Try to get optimized form... provider = data.cachedBinding.getProvider(); } else { provider = getBindingFromNewInjector(method, args, data).getProvider(); } try { int p = 0; for (ThreadLocalProvider tlp : data.providers) { tlp.set(args[p++]); } return provider.get(); } catch (ProvisionException e) { // if this is an exception declared by the factory method, throw it as-is if (e.getErrorMessages().size() == 1) { Message onlyError = getOnlyElement(e.getErrorMessages()); Throwable cause = onlyError.getCause(); if (cause != null && canRethrow(method, cause)) { throw cause; } } throw e; } finally { for (ThreadLocalProvider tlp : data.providers) { tlp.remove(); } } } \n### Response:", "ground_truth": "When a factory method is invoked, we create a child injector that binds all parameters, then\nuse that to get an instance of the return type.", "predict": "Invokes the method with the given parameters and throws any exceptions that may occur.\n\n@param \\eZ\\Publish\\API\\Repository\\Values\\User\\Role $role\n\n@return \\ Symfony\\Component\\HttpFoundation\\Response.\n\n@Override\npublic Object invoke(Object proxy, final Method method, final Object[] args) throws Throwable {\n// If we setup a method handle earlier for this method, call it.\nif (methodHandleByMethod.containsKey(method)) {\nreturn methodHandleByMethod.get(method).invokeWithArguments(args);\n}\n// If this is the default method, call the implementation.\nif (method.getDeclaringClass().equals(Object.class)) {\nif (\"equals\".equals(method.getName())) {\nreturn proxy == args[0];\n} else if (\"hashCode\".equals(method.getName())) {\nreturn System.identityHashCode(proxy);\n} else {\nreturn method.invoke(this, args);\n}\n}\n// AssistData data = assistDataByMethod.get(method);\ncheckState(data!= null, \"No data for method: %s\", method);\n// Provider<?> provider;\nif (data.cachedBinding!= null) {\n// Try to get optimized form...\nprovider = data.cachedBinding.getProvider();\n} else {\nprovider = getBindingFromNewInjector(method, args, data).getProvider();\n}\ntry {\n// Try to get optimized form...\nint p = 0;\nfor (ThreadLocalProvider tlp : data.providers) {\ntlp.set(args[p++]);\n}\nreturn provider.get();\n} catch (ProvisionException e) {\n// if this is an exception declared by the factory method, throw it as-is\nif (e.getErrorMessages().size() == 1) {\nMessage onlyError = getOnlyElement(e.getErrorMessages());\nThrowable cause = onlyError.getCause();\nif (cause!= null && canRethrow(method, cause)) {\nthrow cause;\n}\n}\nthrow e;\n} finally {\nfor (ThreadLocalProvider tlp : data.providers) {\ntlp.remove();\n}\n}\n}"}, {"ID": 363, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (p *Peer) Deliver(ctx context.Context, chunk storage.Chunk, priority uint8, syncing bool) error { var msg interface{} spanName := \"send.chunk.delivery\" //we send different types of messages if delivery is for syncing or retrievals, //even if handling and content of the message are the same, //because swap accounting decides which messages need accounting based on the message type if syncing { msg = &ChunkDeliveryMsgSyncing{ Addr: chunk.Address(), SData: chunk.Data(), } spanName += \".syncing\" } else { msg = &ChunkDeliveryMsgRetrieval{ Addr: chunk.Address(), SData: chunk.Data(), } spanName += \".retrieval\" } ctx = context.WithValue(ctx, \"stream_send_tag\", nil) return p.SendPriority(ctx, msg, priority) }. \n### Response: // Deliver sends a storeRequestMsg protocol message to the peer\n// Depending on the `syncing` parameter we send different message types.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: <T> Errors missingImplementationWithHint(Key<T> key, Injector injector) { StringBuilder sb = new StringBuilder(); sb.append(format(\"No implementation for %s was bound.\", key)); // Keys which have similar strings as the desired key List<String> possibleMatches = new ArrayList<>(); // Check for other keys that may have the same type, // but not the same annotation TypeLiteral<T> type = key.getTypeLiteral(); List<Binding<T>> sameTypes = injector.findBindingsByType(type); if (!sameTypes.isEmpty()) { sb.append(format(\"%n Did you mean?\")); int howMany = Math.min(sameTypes.size(), MAX_MATCHING_TYPES_REPORTED); for (int i = 0; i < howMany; ++i) { // TODO: Look into a better way to prioritize suggestions. For example, possbily // use levenshtein distance of the given annotation vs actual annotation. sb.append(format(\"%n * %s\", sameTypes.get(i).getKey())); } int remaining = sameTypes.size() - MAX_MATCHING_TYPES_REPORTED; if (remaining > 0) { String plural = (remaining == 1) ? \"\" : \"s\"; sb.append(format(\"%n %d more binding%s with other annotations.\", remaining, plural)); } } else { // For now, do a simple substring search for possibilities. This can help spot // issues when there are generics being used (such as a wrapper class) and the // user has forgotten they need to bind based on the wrapper, not the underlying // class. In the future, consider doing a strict in-depth type search. // TODO: Look into a better way to prioritize suggestions. For example, possbily // use levenshtein distance of the type literal strings. String want = type.toString(); Map<Key<?>, Binding<?>> bindingMap = injector.getAllBindings(); for (Key<?> bindingKey : bindingMap.keySet()) { String have = bindingKey.getTypeLiteral().toString(); if (have.contains(want) || want.contains(have)) { Formatter fmt = new Formatter(); Messages.formatSource(fmt, bindingMap.get(bindingKey).getSource()); String match = String.format(\"%s bound%s\", convert(bindingKey), fmt.toString()); possibleMatches.add(match); // TODO: Consider a check that if there are more than some number of results, // don't suggest any. if (possibleMatches.size() > MAX_RELATED_TYPES_REPORTED) { // Early exit if we have found more than we need. break; } } } if ((possibleMatches.size() > 0) && (possibleMatches.size() <= MAX_RELATED_TYPES_REPORTED)) { sb.append(format(\"%n Did you mean?\")); for (String possibleMatch : possibleMatches) { sb.append(format(\"%n %s\", possibleMatch)); } } } // If where are no possibilities to suggest, then handle the case of missing // annotations on simple types. This is usually a bad idea. if (sameTypes.isEmpty() && possibleMatches.isEmpty() && key.getAnnotation() == null && COMMON_AMBIGUOUS_TYPES.contains(key.getTypeLiteral().getRawType())) { // We don't recommend using such simple types without annotations. sb.append(format(\"%nThe key seems very generic, did you forget an annotation?\")); } return addMessage(sb.toString()); } \n### Response:", "ground_truth": "Within guice's core, allow for better missing binding messages", "predict": "This method is used to report an issue with the `Injector` used to implement the ` missingImplementationWithHint` method. The method takes in a `Key<T>` representing the type of the key being used, and an `Injector` instance. It returns a string containing a message indicating the issue and some additional information.\n\nThe method first checks if there are any possibilities to suggest for the given key using a simple substring search. If there are no possibilities to suggest, it then checks if the key has any annotations and if so, it checks if the annotations match the expected type. If there are no possibilities to suggest and the key has no annotations, it reports that the key seems very generic and suggests that it may have forgotten an annotation.\n\nIf there are no possibilities to suggest and the key has no annotations, but the key is of a simple type that is not ambiguous, it reports that the key seems very generic and suggests that it may have forgotten an annotation.\n\nOverall, this method helps to catch issues with the `Injector` used to implement the `missingImplementationWithHint` method and provides some additional information about the issue."}, {"ID": 364, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private function setLimitAndSetOffset() { if ($this->perPage === null) { $this->offset = null; $this->limit = null; } else { $this->offset = ($this->currentPage - 1) * $this->perPage; $this->limit = $this->perPage; } }. \n### Response: Pour \"setter\" le limit et le offset.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static <T> RealMultibinder<T> newRealSetBinder(Binder binder, Key<T> key) { binder = binder.skipSources(RealMultibinder.class); RealMultibinder<T> result = new RealMultibinder<>(binder, key); binder.install(result); return result; } \n### Response:", "ground_truth": "Implementation of newSetBinder.", "predict": "Pour \"newer\" le Binder de setage de keys de T."}, {"ID": 365, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static <T> T withWriter(Path self, String charset, @ClosureParams(value = SimpleType.class, options = \"java.io.Writer\") Closure<T> closure) throws IOException { return withWriter(self, charset, false, closure); }. \n### Response: Creates a new BufferedWriter for this file, passes it to the closure, and\nensures the stream is flushed and closed after the closure returns.\nThe writer will use the given charset encoding, but will not write a BOM.\n\n@param self    a Path\n@param charset the charset used\n@param closure a closure\n@return the value returned by the closure\n@throws java.io.IOException if an IOException occurs.\n@since 2.3.0.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: Key<T> getKeyForNewItem() { checkConfiguration(!bindingSelection.isInitialized(), \"Multibinder was already initialized\"); return Key.get( bindingSelection.getElementTypeLiteral(), new RealElement(bindingSelection.getSetName(), MULTIBINDER, \"\")); } \n### Response:", "ground_truth": "Adds a new entry to the set and returns the key for it.", "predict": "This method returns the key for the first new item in the MultiBinder. It first checks if the MultiBinder has been initialized, and if not, it returns an error message. It then returns the key for the element type literal of the binding selection, using the RealElement class and the MULTIBINDER set name.\n\n@return the key for the first new item in the MultiBinder\n@since 2.3.0."}, {"ID": 366, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (s *ListDeploymentInstancesInput) SetInstanceTypeFilter(v []*string) *ListDeploymentInstancesInput { s.InstanceTypeFilter = v return s }. \n### Response: // SetInstanceTypeFilter sets the InstanceTypeFilter field's value..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private Filter findNextFilter(HttpServletRequest request) { while (++index < filterDefinitions.length) { Filter filter = filterDefinitions[index].getFilterIfMatching(request); if (filter != null) { return filter; } } return null; } \n### Response:", "ground_truth": "Iterates over the remaining filter definitions. Returns the first applicable filter, or null if\nnone apply.", "predict": "// FindNextFilter finds the next Filter in the list and returns its value.."}, {"ID": 367, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def render_child(self, child, view_name=None, context=None): \"\"\"A shortcut to render a child block. Use this method to render your children from your own view function. If `view_name` is not provided, it will default to the view name you're being rendered with. Returns the same value as :func:`render`. \"\"\" return child.render(view_name or self._view_name, context). \n### Response: A shortcut to render a child block.\n\n        Use this method to render your children from your own view function.\n\n        If `view_name` is not provided, it will default to the view name you're\n        being rendered with.\n\n        Returns the same value as :func:`render`..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private static boolean hasAtInject(Constructor cxtor) { return cxtor.isAnnotationPresent(Inject.class) || cxtor.isAnnotationPresent(javax.inject.Inject.class); } \n### Response:", "ground_truth": "Returns true if the inject annotation is on the constructor.", "predict": "private static boolean hasAtInject(Constructor cxtor) {\n        return cxtor.isAnnotationPresent(Inject.class) || cxtor.isAnnotationPresent(javax.inject.Inject.class);\n    }"}, {"ID": 368, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function cacheForget(Cacheable $model) { // Clear the cache for each key. foreach ($this->getModelCacheKeys($model) as $cacheKey) { Cache::forget($cacheKey); } return true; }. \n### Response: Attempt to forget items from the cache for a given model.\n\n@param Cacheable $model\n@return bool.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: InjectionPoint getInternalConstructor() { if (factory.constructorInjector != null) { return factory.constructorInjector.getConstructionProxy().getInjectionPoint(); } else { return constructorInjectionPoint; } } \n### Response:", "ground_truth": "Returns an injection point that can be used to clean up the constructor store.", "predict": "Retrieves the internal constructor of the injection point.\n\n@param Factory $factory\n@return InjectionPoint."}, {"ID": 369, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public int getTabIndex(final WComponent content) { List<WTab> tabs = getTabs(); final int count = tabs.size(); for (int i = 0; i < count; i++) { WTab tab = tabs.get(i); if (content == tab.getContent()) { return i; } } return -1; }. \n### Response: Retrieves the tab index for the given tab content.\n\n@param content the tab content\n@return the tab index, or -1 if the content is not in a tab in this tab set..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: Set<Dependency<?>> getInternalDependencies() { ImmutableSet.Builder<InjectionPoint> builder = ImmutableSet.builder(); if (factory.constructorInjector == null) { builder.add(constructorInjectionPoint); // If the below throws, it's OK -- we just ignore those dependencies, because no one // could have used them anyway. try { builder.addAll( InjectionPoint.forInstanceMethodsAndFields( constructorInjectionPoint.getDeclaringType())); } catch (ConfigurationException ignored) { } } else { builder.add(getConstructor()).addAll(getInjectableMembers()); } return Dependency.forInjectionPoints(builder.build()); } \n### Response:", "ground_truth": "Returns a set of dependencies that can be iterated over to clean up stray JIT bindings.", "predict": "Retrieves the internal dependencies of the given factory.constructorInjector, and returns a Set of all the injection points that are declared in the factory's constructor injection point.\n\n@return a Set of all the injection points that are declared in the factory's constructor injection point, or an empty Set if the factory does not have any injection points.\n\nNote: If the factory's constructorInjector is null, we add the constructor injection point to the builder and try to add all the instance methods and fields of the declaring type. If the above throws, it's OK, we just ignore those dependencies, because no one could have used them anyway."}, {"ID": 370, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def _get_stream_view_infos( self, trimmed=False): \"\"\"query the sherlock-catalogues database streamed data tables' metadata \"\"\" self.log.debug('starting the ``_get_stream_view_infos`` method') sqlQuery = u\"\"\" SELECT * FROM crossmatch_catalogues.tcs_helper_catalogue_tables_info where legacy_table = 0 and table_name not like \"legacy%%\" and table_name like \"%%stream\" order by number_of_rows desc; \"\"\" % locals() streamInfo = readquery( log=self.log, sqlQuery=sqlQuery, dbConn=self.cataloguesDbConn, quiet=False ) if trimmed: cleanTable = [] for r in streamInfo: orow = collections.OrderedDict(sorted({}.items())) for c in self.basicColumns: if c in r: orow[c] = r[c] cleanTable.append(orow) streamInfo = cleanTable self.log.debug('completed the ``_get_stream_view_infos`` method') return streamInfo. \n### Response: query the sherlock-catalogues database streamed data tables' metadata.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static Module forModule(Object module, ModuleAnnotatedMethodScanner scanner) { return forObject(module, false, scanner); } \n### Response:", "ground_truth": "Returns a module which creates bindings methods in the module that match the scanner.", "predict": "This method returns a new instance of the `Module` class, created by calling the `forObject` method with a given `module` object and a `ModuleAnnotatedMethodScanner` object. The method uses the `forObject` method to iterate over all methods annotated with the `ModuleAnnotatedMethodScanner` interface, and returns the first instance that matches the given criteria."}, {"ID": 371, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (s *TrainingSpecification) SetSupportsDistributedTraining(v bool) *TrainingSpecification { s.SupportsDistributedTraining = &v return s }. \n### Response: // SetSupportsDistributedTraining sets the SupportsDistributedTraining field's value..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private Annotation getAnnotation(Binder binder, Method method) { if (method.isBridge() || method.isSynthetic()) { return null; } Annotation annotation = null; for (Class<? extends Annotation> annotationClass : scanner.annotationClasses()) { Annotation foundAnnotation = method.getAnnotation(annotationClass); if (foundAnnotation != null) { if (annotation != null) { binder.addError( \"More than one annotation claimed by %s on method %s.\" + \" Methods can only have one annotation claimed per scanner.\", scanner, method); return null; } annotation = foundAnnotation; } } return annotation; } \n### Response:", "ground_truth": "Returns the annotation that is claimed by the scanner, or null if there is none.", "predict": "// GetAnnotation returns the annotation associated with the given method.."}, {"ID": 372, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function ( e ) { var that = this; $(document).off( 'mousemove.ColReorder mouseup.ColReorder' ); if ( this.dom.drag !== null ) { /* Remove the guide elements */ this.dom.drag.remove(); this.dom.pointer.remove(); this.dom.drag = null; this.dom.pointer = null; /* Actually do the reorder */ this.s.dt.oInstance.fnColReorder( this.s.mouse.fromIndex, this.s.mouse.toIndex ); this._fnSetColumnIndexes(); /* When scrolling we need to recalculate the column sizes to allow for the shift */ if ( this.s.dt.oScroll.sX !== \"\" || this.s.dt.oScroll.sY !== \"\" ) { this.s.dt.oInstance.fnAdjustColumnSizing( false ); } /* Save the state */ this.s.dt.oInstance.oApi._fnSaveState( this.s.dt ); if ( this.s.reorderCallback !== null ) { this.s.reorderCallback.call( this ); } } }. \n### Response: Finish off the mouse drag and insert the column where needed\n@method  _fnMouseUp\n@param   event e Mouse event\n@returns void\n@private.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public Integer getLineNumber(Member member) { Preconditions.checkArgument( type == member.getDeclaringClass(), \"Member %s belongs to %s, not %s\", member, member.getDeclaringClass(), type); return lines.get(memberKey(member)); } \n### Response:", "ground_truth": "Get the line number associated with the given member.\n\n@param member a field, constructor, or method belonging to the class used during construction\n@return the wrapped line number, or null if not available\n@throws IllegalArgumentException if the member does not belong to the class used during\nconstruction", "predict": "Method to retrieve the line number of a given member\n@param   member Member to retrieve the line number for\n@return Integer line number\n@throws ClassCastException if the member is not of the specified type\n@private."}, {"ID": 373, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (c *Client) Clone() (*Client, error) { c.modifyLock.RLock() c.config.modifyLock.RLock() config := c.config c.modifyLock.RUnlock() newConfig := &Config{ Address: config.Address, HttpClient: config.HttpClient, MaxRetries: config.MaxRetries, Timeout: config.Timeout, Backoff: config.Backoff, Limiter: config.Limiter, } config.modifyLock.RUnlock() return NewClient(newConfig) }. \n### Response: // Clone creates a new client with the same configuration. Note that the same\n// underlying http.Client is used; modifying the client from more than one\n// goroutine at once may not be safe, so modify the client as needed and then\n// clone.\n//\n// Also, only the client's config is currently copied; this means items not in\n// the api.Config struct, such as policy override and wrapping function\n// behavior, must currently then be set as desired on the new client..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: void initialize(Errors errors) { injector.lookups = injector; new LookupProcessor(errors).process(injector, lookups); } \n### Response:", "ground_truth": "Initialize the specified lookups, either immediately or when the injector is created.", "predict": "// Initialize the LookupProcessor with the errors object, which will be used to\n// handle any errors that may occur during the process.\n//\n// The LookupProcessor will then be passed to the process method, which will\n// perform any necessary lookups and return the results."}, {"ID": 374, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def assert_or_raise(stmt: bool, exception: Exception, *exception_args, **exception_kwargs) -> None: \"\"\" If the statement is false, raise the given exception. \"\"\" if not stmt: raise exception(*exception_args, **exception_kwargs). \n### Response: If the statement is false, raise the given exception..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @Deprecated public static <T> Callable<T> continueRequest(Callable<T> callable, Map<Key<?>, Object> seedMap) { return wrap(callable, continueRequest(seedMap)); } \n### Response:", "ground_truth": "Wraps the given callable in a contextual callable that \"continues\" the HTTP request in another\nthread. This acts as a way of transporting request context data from the request processing\nthread to to worker threads.\n\nThere are some limitations:\n\n\nDerived objects (i.e. anything marked @RequestScoped will not be transported.\nState changes to the HttpServletRequest after this method is called will not be seen in the\ncontinued thread.\nOnly the HttpServletRequest, ServletContext and request parameter map are available in the\ncontinued thread. The response and session are not available.\n\nThe returned callable will throw a {@link ScopingException} when called if the HTTP request\nscope is still active on the current thread.\n\n@param callable code to be executed in another thread, which depends on the request scope.\n@param seedMap the initial set of scoped instances for Guice to seed the request scope with. To\nseed a key with null, use {@code null} as the value.\n@return a callable that will invoke the given callable, making the request context available to\nit.\n@throws OutOfScopeException if this method is called from a non-request thread, or if the\nrequest has completed.\n@since 3.0\n@deprecated You probably want to use {@code transferRequest} instead", "predict": "This method is deprecated and will be removed in a future release. It is recommended to use the new `wrap` method instead."}, {"ID": 375, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (l *channelLink) processHodlQueue(firstHodlEvent invoices.HodlEvent) error { // Try to read all waiting resolution messages, so that they can all be // processed in a single commitment tx update. hodlEvent := firstHodlEvent loop: for { if err := l.processHodlMapEvent(hodlEvent); err != nil { return err } select { case item := <-l.hodlQueue.ChanOut(): hodlEvent = item.(invoices.HodlEvent) default: break loop } } // Update the commitment tx. if err := l.updateCommitTx(); err != nil { return fmt.Errorf(\"unable to update commitment: %v\", err) } return nil }. \n### Response: // processHodlQueue processes a received hodl event and continues reading from\n// the hodl queue until no more events remain. When this function returns\n// without an error, the commit tx should be updated..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static <T> Callable<T> transferRequest(Callable<T> callable) { return wrap(callable, transferRequest()); } \n### Response:", "ground_truth": "Wraps the given callable in a contextual callable that \"transfers\" the request to another\nthread. This acts as a way of transporting request context data from the current thread to a\nfuture thread.\n\nAs opposed to {@link #continueRequest}, this method propagates all existing scoped objects.\nThe primary use case is in server implementations where you can detach the request processing\nthread while waiting for data, and reattach to a different thread to finish processing at a\nlater time.\n\nBecause request-scoped objects are not typically thread-safe, the callable returned by this\nmethod must not be run on a different thread until the current request scope has terminated.\nThe returned callable will block until the current thread has released the request scope.\n\n@param callable code to be executed in another thread, which depends on the request scope.\n@return a callable that will invoke the given callable, making the request context available to\nit.\n@throws OutOfScopeException if this method is called from a non-request thread, or if the\nrequest has completed.\n@since 4.0", "predict": "// Transfer the request to the specified recipient.\n// This method wraps the given callable and transfers the request to\n// the specified recipient."}, {"ID": 376, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def cached_rate(original, target) if defined?(Rails) unless rate = Rails.cache.read(\"#{original}_#{target}_#{stringified_exchange_date}\") rate = (1.0 / Rails.cache.read(\"#{target}_#{original}_#{stringified_exchange_date}\")) rescue nil end rate end end. \n### Response: Tries to either get rate or calculate the inverse rate from cache.\n\n First looks for an \"usd_eur_25-8-2010\" entry in the cache,\n and if it does not find it, it looks for \"eur_usd_25-8-2010\" and\n inverts it..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private static Object validateAndCanonicalizeValue(Key<?> key, Object object) { if (object == null || object == NullObject.INSTANCE) { return NullObject.INSTANCE; } if (!key.getTypeLiteral().getRawType().isInstance(object)) { throw new IllegalArgumentException( \"Value[\" + object + \"] of type[\" + object.getClass().getName() + \"] is not compatible with key[\" + key + \"]\"); } return object; } \n### Response:", "ground_truth": "Validates the key and object, ensuring the value matches the key type, and canonicalizing null\nobjects to the null sentinel.", "predict": "Validates and canonicalizes the value associated with the given key.\n\n Checks if the object passed as argument is null or of type NullObject.INSTANCE,\n if it is, it returns it.\n\n Checks if the object passed as argument is of type Object,\n if it is, it returns it.\n\n Checks if the key passed as argument is of type Key<?>,\n if it is, it returns it.\n\n If the object is not compatible with the key, throws an IllegalArgumentException with a message indicating the type of the value is not compatible.\n\n Returns the object passed as argument if it is not null, or NullObject.INSTANCE if it is."}, {"ID": 377, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function(searchVal) { searchVal = searchVal.trim().toLowerCase(); for (var key in treeObject) { var me = treeObject[key]; if (me.val.indexOf(searchVal) !== -1 || searchVal.length == 0) { $(tocList[key]).show(); if ($(tocList[me.parent]).is(\":hidden\")) { showParents(key); } } else { $(tocList[key]).hide(); } } }. \n### Response: Perform the search.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @SuppressWarnings(\"unchecked\") // the MembersInjector type always agrees with the passed type public <T> MembersInjectorImpl<T> get(TypeLiteral<T> key, Errors errors) throws ErrorsException { return (MembersInjectorImpl<T>) cache.get(key, errors); } \n### Response:", "ground_truth": "Returns a new complete members injector with injection listeners registered.", "predict": "This method returns a MembersInjectorImpl instance for the specified key, which always agrees with the passed type."}, {"ID": 378, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function appendStatement(StatementNode $statementNode) { if (!$this->isEmpty() && $this->firstToken()->getType() === '{') { $this->lastChild()->before($statementNode); } else { $this->appendChild($statementNode); } return $this; }. \n### Response: Append statement to block.\n\n@param StatementNode $statementNode\nStatement to append.\n@return $this.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private <T> MembersInjectorImpl<T> createWithListeners(TypeLiteral<T> type, Errors errors) throws ErrorsException { int numErrorsBefore = errors.size(); Set<InjectionPoint> injectionPoints; try { injectionPoints = InjectionPoint.forInstanceMethodsAndFields(type); } catch (ConfigurationException e) { errors.merge(e.getErrorMessages()); injectionPoints = e.getPartialValue(); } ImmutableList<SingleMemberInjector> injectors = getInjectors(injectionPoints, errors); errors.throwIfNewErrors(numErrorsBefore); EncounterImpl<T> encounter = new EncounterImpl<>(errors, injector.lookups); Set<TypeListener> alreadySeenListeners = Sets.newHashSet(); for (TypeListenerBinding binding : typeListenerBindings) { TypeListener typeListener = binding.getListener(); if (!alreadySeenListeners.contains(typeListener) && binding.getTypeMatcher().matches(type)) { alreadySeenListeners.add(typeListener); try { typeListener.hear(type, encounter); } catch (RuntimeException e) { errors.errorNotifyingTypeListener(binding, type, e); } } } encounter.invalidate(); errors.throwIfNewErrors(numErrorsBefore); return new MembersInjectorImpl<T>(injector, type, encounter, injectors); } \n### Response:", "ground_truth": "Creates a new members injector and attaches both injection listeners and method aspects.", "predict": "Implements an instance of the MembersInjectorImpl<T> class, which is used to inject members into a type. This method creates a new instance of the MembersInjectorImpl<T> with the given type and an error list. It then iterates over all typeListener bindings and attempts to register the typeListener with them. If the typeListener is already registered, it is added to the alreadySeenListeners set. Finally, the encounter object is validated and the errors are thrown if any new errors are found.\n\n@param TypeLiteral<T> $type\nType to inject members into.\n@return MembersInjectorImpl<T> instance.\n@throws ErrorsException\n\u9519\u8bef\u5217\u8868."}, {"ID": 379, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function validateToken($token) { /* | Return false if given token is not string */ if (!is_string($token)) { return false; } if (isset($this->storage->csrf_tokens[$token])) { $this->storage->csrf_tokens = [trim($token) => null]; return true; } return false; }. \n### Response: Validate token and return boolean value\nif matched with input.\n\n@param $token\n\n@return bool.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: ImmutableList<SingleMemberInjector> getInjectors( Set<InjectionPoint> injectionPoints, Errors errors) { List<SingleMemberInjector> injectors = Lists.newArrayList(); for (InjectionPoint injectionPoint : injectionPoints) { try { Errors errorsForMember = injectionPoint.isOptional() ? new Errors(injectionPoint) : errors.withSource(injectionPoint); SingleMemberInjector injector = injectionPoint.getMember() instanceof Field ? new SingleFieldInjector(this.injector, injectionPoint, errorsForMember) : new SingleMethodInjector(this.injector, injectionPoint, errorsForMember); injectors.add(injector); } catch (ErrorsException ignoredForNow) { // ignored for now } } return ImmutableList.copyOf(injectors); } \n### Response:", "ground_truth": "Returns the injectors for the specified injection points.", "predict": "This method returns a list of SingleMemberInjector instances, which are used to resolve injection points in the application. It iterates over the injection points and creates either SingleFieldInjector or SingleMethodInjector instances depending on the type of member being injected. If an error occurs during the injection process, it is ignored for the current iteration. Finally, the list is returned as ImmutableList.copyOf(injectors).\n\n@param $ InjectionPoints\n\n@return List<SingleMemberInjector>."}, {"ID": 380, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void setTimeZone(TimeZone tz) { setTzFormatString(tz); if( _locale != null ) { _tzFormat=new SimpleDateFormat(_tzFormatString,_locale); _minFormat=new SimpleDateFormat(_minFormatString,_locale); } else if( _dfs != null ) { _tzFormat=new SimpleDateFormat(_tzFormatString,_dfs); _minFormat=new SimpleDateFormat(_minFormatString,_dfs); } else { _tzFormat=new SimpleDateFormat(_tzFormatString); _minFormat=new SimpleDateFormat(_minFormatString); } _tzFormat.setTimeZone(tz); _minFormat.setTimeZone(tz); _lastSeconds=-1; _lastMinutes=-1; }. \n### Response: Set the timezone.\n@param tz TimeZone.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: static <T> Key<T> get(Class<T> type, AnnotationStrategy annotationStrategy) { return new Key<T>(type, annotationStrategy); } \n### Response:", "ground_truth": "Gets a key for an injection type and an annotation strategy.", "predict": "Get an annotation strategy for the given type.\n@param type The type to get the annotation strategy for.\n@param annotationStrategy The annotation strategy to use."}, {"ID": 381, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function presenter($view, $method = 'view', $auto_filter = null) { return \\Presenter::forge($view, $method, $auto_filter, $this->find_file($view)); }. \n### Response: Loads a presenter, and have it use the view from the currently active theme,\nthe fallback theme, or the standard FuelPHP cascading file system\n\n@param   string  Presenter classname without Presenter_ prefix or full classname\n@param   string  Method to execute\n@param   bool    $auto_filter  Auto filter the view data\n@return  View    New View object.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: static AnnotationStrategy strategyFor(Annotation annotation) { checkNotNull(annotation, \"annotation\"); Class<? extends Annotation> annotationType = annotation.annotationType(); ensureRetainedAtRuntime(annotationType); ensureIsBindingAnnotation(annotationType); if (Annotations.isMarker(annotationType)) { return new AnnotationTypeStrategy(annotationType, annotation); } return new AnnotationInstanceStrategy(Annotations.canonicalizeIfNamed(annotation)); } \n### Response:", "ground_truth": "Gets the strategy for an annotation.", "predict": "This method determines the strategy to use for an annotation. It first checks if the annotation is a marker, and if so, returns a new AnnotationTypeStrategy. If the annotation is not a marker, it returns a new AnnotationInstanceStrategy."}, {"ID": 382, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def read_dict(self, dictionary, source='<dict>'): \"\"\"Read configuration from a dictionary. Keys are section names, values are dictionaries with keys and values that should be present in the section. If the used dictionary type preserves order, sections and their keys will be added in order. All types held in the dictionary are converted to strings during reading, including section names, option names and keys. Optional second argument is the `source' specifying the name of the dictionary being read. \"\"\" elements_added = set() for section, keys in dictionary.items(): section = str(section) try: self.add_section(section) except (DuplicateSectionError, ValueError): if self._strict and section in elements_added: raise elements_added.add(section) for key, value in keys.items(): key = self.optionxform(str(key)) if value is not None: value = str(value) if self._strict and (section, key) in elements_added: raise DuplicateOptionError(section, key, source) elements_added.add((section, key)) self.set(section, key, value). \n### Response: Read configuration from a dictionary.\n\n        Keys are section names, values are dictionaries with keys and values\n        that should be present in the section. If the used dictionary type\n        preserves order, sections and their keys will be added in order.\n\n        All types held in the dictionary are converted to strings during\n        reading, including section names, option names and keys.\n\n        Optional second argument is the `source' specifying the name of the\n        dictionary being read..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: static AnnotationStrategy strategyFor(Class<? extends Annotation> annotationType) { annotationType = Annotations.canonicalizeIfNamed(annotationType); if (isAllDefaultMethods(annotationType)) { return strategyFor(generateAnnotation(annotationType)); } checkNotNull(annotationType, \"annotation type\"); ensureRetainedAtRuntime(annotationType); ensureIsBindingAnnotation(annotationType); return new AnnotationTypeStrategy(annotationType, null); } \n### Response:", "ground_truth": "Gets the strategy for an annotation type.", "predict": "Annotation strategy for a specific annotation type.\n\n        Returns an instance of the `AnnotationTypeStrategy` class, which\n        will handle the annotation type and its associated annotations.\n\n        This method first  canonicalizes the annotation type by checking if it\n        is all default methods and then returns the strategy for generating\n        the annotation. If the annotation type has no default methods, it will\n        return the strategy for generating the annotation.\n\n        This method also ensures that the annotation is retained at runtime and\n        that it is a binding annotation.\n\n        This method is required because the `AnnotationTypeStrategy` class\n        expects this method to be called for each annotation type that it\n        handles.\n```"}, {"ID": 383, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @GetMapping(path = SamlIdPConstants.ENDPOINT_SAML2_SSO_PROFILE_POST_CALLBACK) protected void handleCallbackProfileRequest(final HttpServletResponse response, final HttpServletRequest request) throws Exception { LOGGER.info(\"Received SAML callback profile request [{}]\", request.getRequestURI()); val authnRequest = retrieveSamlAuthenticationRequestFromHttpRequest(request); if (authnRequest == null) { LOGGER.error(\"Can not validate the request because the original Authn request can not be found.\"); response.setStatus(HttpServletResponse.SC_FORBIDDEN); return; } val ticket = CommonUtils.safeGetParameter(request, CasProtocolConstants.PARAMETER_TICKET); if (StringUtils.isBlank(ticket)) { LOGGER.error(\"Can not validate the request because no [{}] is provided via the request\", CasProtocolConstants.PARAMETER_TICKET); response.setStatus(HttpServletResponse.SC_FORBIDDEN); return; } val authenticationContext = buildAuthenticationContextPair(request, authnRequest); val assertion = validateRequestAndBuildCasAssertion(response, request, authenticationContext); val binding = determineProfileBinding(authenticationContext, assertion); buildSamlResponse(response, request, authenticationContext, assertion, binding); }. \n### Response: Handle callback profile request.\n\n@param response the response\n@param request  the request\n@throws Exception the exception.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private void pruneStacktrace(Throwable throwable) { for (Throwable t = throwable; t != null; t = t.getCause()) { StackTraceElement[] stackTrace = t.getStackTrace(); List<StackTraceElement> pruned = Lists.newArrayList(); for (StackTraceElement element : stackTrace) { String className = element.getClassName(); if (!AOP_INTERNAL_CLASSES.contains(className) && !className.contains(\"$EnhancerByGuice$\")) { pruned.add(element); } } t.setStackTrace(pruned.toArray(new StackTraceElement[pruned.size()])); } } \n### Response:", "ground_truth": "Removes stacktrace elements related to AOP internal mechanics from the throwable's stack trace\nand any causes it may have.", "predict": "This method is used to prune the stack trace of a given throwable. It iterates through the stack trace of the throwable and removes any classes that are internal to the AOP framework (e.g. $EnhancerByGuice$) or that do not contain the specified class name (e.g. not containing \"org.apache.commons.lang.\") before returning the updated stack trace."}, {"ID": 384, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function default_sort() { if ( self::get_current_post_type() !== $this->cpt->post_type ) { return; } # If we've already ordered the screen, bail out: if ( isset( $_GET['orderby'] ) ) { return; } # Loop over our columns to find the default sort column (if there is one): foreach ( $this->args['admin_cols'] as $id => $col ) { if ( is_array( $col ) && isset( $col['default'] ) ) { $_GET['orderby'] = $id; $_GET['order'] = ( 'desc' === strtolower( $col['default'] ) ? 'desc' : 'asc' ); break; } } }. \n### Response: Set the default sort field and sort order on our post type admin screen..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public String getBindingSource() { if (source instanceof Class) { return StackTraceElements.forType((Class) source).toString(); } else if (source instanceof Member) { return StackTraceElements.forMember((Member) source).toString(); } else { return source.toString(); } } \n### Response:", "ground_truth": "Returns a string describing where this dependency was bound. If the binding was just-in-time,\nthere is no valid binding source, so this describes the class in question.", "predict": "Get the binding source of the current class or member."}, {"ID": 385, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func Convert_image_ImageStreamTagList_To_v1_ImageStreamTagList(in *image.ImageStreamTagList, out *v1.ImageStreamTagList, s conversion.Scope) error { return autoConvert_image_ImageStreamTagList_To_v1_ImageStreamTagList(in, out, s) }. \n### Response: // Convert_image_ImageStreamTagList_To_v1_ImageStreamTagList is an autogenerated conversion function..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String formatMessages(String heading, Collection<Message> errorMessages) { Formatter fmt = new Formatter().format(heading).format(\":%n%n\"); int index = 1; boolean displayCauses = getOnlyCause(errorMessages) == null; Map<Equivalence.Wrapper<Throwable>, Integer> causes = Maps.newHashMap(); for (Message errorMessage : errorMessages) { int thisIdx = index++; fmt.format(\"%s) %s%n\", thisIdx, errorMessage.getMessage()); List<Object> dependencies = errorMessage.getSources(); for (int i = dependencies.size() - 1; i >= 0; i--) { Object source = dependencies.get(i); formatSource(fmt, source); } Throwable cause = errorMessage.getCause(); if (displayCauses && cause != null) { Equivalence.Wrapper<Throwable> causeEquivalence = ThrowableEquivalence.INSTANCE.wrap(cause); if (!causes.containsKey(causeEquivalence)) { causes.put(causeEquivalence, thisIdx); fmt.format(\"Caused by: %s\", Throwables.getStackTraceAsString(cause)); } else { int causeIdx = causes.get(causeEquivalence); fmt.format( \"Caused by: %s (same stack trace as error #%s)\", cause.getClass().getName(), causeIdx); } } fmt.format(\"%n\"); } if (errorMessages.size() == 1) { fmt.format(\"1 error\"); } else { fmt.format(\"%s errors\", errorMessages.size()); } return fmt.toString(); } \n### Response:", "ground_truth": "Returns the formatted message for an exception with the specified messages.", "predict": "// Format messages is a public static method in the class Formatter. \n// It takes a string heading and a collection of Message objects as input \n// and returns a string representation of the same. \n// The method uses a Formatter object to format the heading and \n// the message for each error. It also uses a Map to store the index \n// of each source of the error and a Map to store the cause index \n// of each error. \n// The method displays the cause index and the message for each error \n// if the displayCauses flag is set to true and the cause is not null. \n// If the number of errors is one, the method returns a string \n// representation of one error, otherwise it returns a string \n// representation of the number of errors. \n// This method is autogenerated because it is used in a class \n// that is generated for a specific project."}, {"ID": 386, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected function validateEmail() { $field = 'email'; if ($this->isExcluded($field)) { return null; } $value = $this->getSubmitted($field); if ($this->isUpdating() && !isset($value)) { $this->unsetSubmitted($field); return null; } $label = $this->translation->text('E-mail'); if (empty($value)) { $this->setErrorRequired($field, $label); return false; } if (!filter_var($value, FILTER_VALIDATE_EMAIL)) { $this->setErrorInvalid($field, $label); return false; } return true; }. \n### Response: Validates an E-mail\n@return boolean.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static Message create(String messageFormat, Object... arguments) { return create(null, messageFormat, arguments); } \n### Response:", "ground_truth": "Creates a new Message without a cause.\n\n@param messageFormat Format string\n@param arguments format string arguments", "predict": "Creates a new Message object with the specified message format and arguments.\n@return Message."}, {"ID": 387, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private function _fetch_table() { if ($this->_table == NULL) { $this->_table = plural(preg_replace('/(_m|_model)?$/', '', strtolower(get_class($this)))); } }. \n### Response: Guess the table name by pluralising the model name.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static Message create(Throwable cause, String messageFormat, Object... arguments) { return create(cause, ImmutableList.of(), messageFormat, arguments); } \n### Response:", "ground_truth": "Creates a new Message with the given cause.\n\n@param cause The exception that caused the error\n@param messageFormat Format string\n@param arguments format string arguments", "predict": "This method creates a new Message object and returns it, with a cause parameter and a message format parameter. It uses the plural() function to pluralize the class name, which is used to determine the table name."}, {"ID": 388, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function getDomainInfo($domain) { try { $result = $this->getDomainLookupQuery($domain)->getSingleResult(); } catch (NoResultException $e) { $result = null; } return $result; }. \n### Response: Get the info for a single domain\n\n@param string $domain Domain name to search by\n\n@return array.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static Message create( Throwable cause, List<Object> sources, String messageFormat, Object... arguments) { String message = format(messageFormat, arguments); return new Message(sources, message, cause); } \n### Response:", "ground_truth": "Creates a new Message with the given cause and a binding source stack.\n\n@param cause The exception that caused the error\n@param sources The binding sources for the source stack\n@param messageFormat Format string\n@param arguments format string arguments", "predict": "Create a new message with the given sources, message, and cause.\n\n@param Throwable $cause cause of the message\n@param List<Object> $sources sources of the message\n@param String $messageFormat format of the message\n@return Message with the given sources, message, and cause."}, {"ID": 389, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function getValue($array = FALSE, $array_strict = TRUE) { if($array) { $result = []; foreach($this->getFormElements() as $name => $child) { $result[$name] = $child->getValue($array_strict); } return $result; } else { return $this->value; } }. \n### Response: Returns the value of the form\n\nThe value is an representation of the form input data or if no input has given to the form yet, the default\nvalues.\nThe form value is stored in an object (entity). If an object was passed during form construction, this object will\nbe used as the form value.\n\nThe value can also be retrieved as an array. In this case, the values will be hard filtered by default.\nIf you want to hard filter the values in the object (entity), use the applyFilter method.\n\n@param bool $array Specifies if the value should be returned as an array\n@param bool $array_strict If set to true and an array is requested, the array will contain hard filtered values.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: static Object convert(Object o) { ElementSource source = null; if (o instanceof ElementSource) { source = (ElementSource) o; o = source.getDeclaringSource(); } return convert(o, source); } \n### Response:", "ground_truth": "Formats an object in a user friendly way.", "predict": "This method converts an object to a specific type of element source.\n\nThe method first checks if the object is an instance of an ElementSource class. If it is, the source object is retrieved and the object is converted to the source.\n\n@param Object o The object to be converted to an ElementSource.\n@return The converted object to an ElementSource."}, {"ID": 390, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def on_to_position(self, speed, position, brake=True, block=True): \"\"\" Rotate the motor at ``speed`` to ``position`` ``speed`` can be a percentage or a :class:`ev3dev2.motor.SpeedValue` object, enabling use of other units. \"\"\" speed = self._speed_native_units(speed) self.speed_sp = int(round(speed)) self.position_sp = position self._set_brake(brake) self.run_to_abs_pos() if block: self.wait_until('running', timeout=WAIT_RUNNING_TIMEOUT) self.wait_until_not_moving(). \n### Response: Rotate the motor at ``speed`` to ``position``\n\n        ``speed`` can be a percentage or a :class:`ev3dev2.motor.SpeedValue`\n        object, enabling use of other units..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private boolean shouldBeSkipped(String className) { return (parent != null && parent.shouldBeSkipped(className)) || classNamesToSkip.contains(className); } \n### Response:", "ground_truth": "Returns true if the className should be skipped.", "predict": "Determine if the given className should be skipped or not.\n\n        ``className`` is a string representing a class to be skipped.."}, {"ID": 391, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def get_instance(self, payload): \"\"\" Build an instance of SessionInstance :param dict payload: Payload response from the API :returns: twilio.rest.proxy.v1.service.session.SessionInstance :rtype: twilio.rest.proxy.v1.service.session.SessionInstance \"\"\" return SessionInstance(self._version, payload, service_sid=self._solution['service_sid'], ). \n### Response: Build an instance of SessionInstance\n\n        :param dict payload: Payload response from the API\n\n        :returns: twilio.rest.proxy.v1.service.session.SessionInstance\n        :rtype: twilio.rest.proxy.v1.service.session.SessionInstance.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public Object getFromClassNames(List<String> moduleClassNames) { Preconditions.checkNotNull(moduleClassNames, \"The list of module class names cannot be null.\"); for (final String moduleClassName : moduleClassNames) { if (!shouldBeSkipped(moduleClassName)) { return new StackTraceElement(moduleClassName, \"configure\", null, -1); } } return UNKNOWN_SOURCE; } \n### Response:", "ground_truth": "Returns the non-skipped module class name.", "predict": "The method `getFromClassNames` retrieves the source code for a given list of module class names.\n\n        :param List<String> moduleClassNames: The list of module class names to retrieve the source code for\n\n        :returns: The source code for the given module class names or UNKNOWN_SOURCE if no source code is found\n        :rtype: Object or UNKNOWN_SOURCE\n        \"\"\""}, {"ID": 392, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function seeElementCount($selector, $count) { $this->assertCount($count, $this->crawler->filter($selector)); return $this; }. \n### Response: Verify the number of DOM elements.\n\n@param  string  $selector\n@param  int  $number\n@return $this.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void main(String[] args) throws Exception { if (args.length != 1) { System.err.println( \"Usage: java -Dcom.sun.management.jmxremote \" + Manager.class.getName() + \" [module class name]\"); System.err.println(\"Then run 'jconsole' to connect.\"); System.exit(1); } Module module = (Module) Class.forName(args[0]).newInstance(); Injector injector = Guice.createInjector(module); manage(args[0], injector); System.out.println(\"Press Ctrl+C to exit...\"); // Sleep forever. Thread.sleep(Long.MAX_VALUE); } \n### Response:", "ground_truth": "Run with no arguments for usage instructions.", "predict": "This code defines a method `main` that is the entry point for a Java application. It first checks if the command-line argument is provided, and if not, it prints a usage message and exits the program. If the argument is provided, it loads a module using the specified class name, creates an instance of the injector, and manages the application. Finally, it prints a message to the console and waits for the user to press Ctrl+C to exit.\n\nThe method has a single parameter `args`, which is an array of strings representing the command-line arguments. The method uses the `Class.forName` method to load the specified module, and the `Class.newInstance` method to create an instance of the module. The method then calls the `manage` method on the injector to manage the application. Finally, it waits for the user to press Ctrl+C to exit.\n\nThe method has a single line of code that uses the `Thread.sleep` method to wait for forever. This is likely intended to simulate a long-running operation that the application needs to perform.\n\nOverall, this code is a simple example of how to use the Guice and Injector libraries to manage a Java application."}, {"ID": 393, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (c *Command) DebugFlags() { c.Println(\"DebugFlags called on\", c.Name()) var debugflags func(*Command) debugflags = func(x *Command) { if x.HasFlags() || x.HasPersistentFlags() { c.Println(x.Name()) } if x.HasFlags() { x.flags.VisitAll(func(f *flag.Flag) { if x.HasPersistentFlags() && x.persistentFlag(f.Name) != nil { c.Println(\" -\"+f.Shorthand+\",\", \"--\"+f.Name, \"[\"+f.DefValue+\"]\", \"\", f.Value, \" [LP]\") } else { c.Println(\" -\"+f.Shorthand+\",\", \"--\"+f.Name, \"[\"+f.DefValue+\"]\", \"\", f.Value, \" [L]\") } }) } if x.HasPersistentFlags() { x.pflags.VisitAll(func(f *flag.Flag) { if x.HasFlags() { if x.flags.Lookup(f.Name) == nil { c.Println(\" -\"+f.Shorthand+\",\", \"--\"+f.Name, \"[\"+f.DefValue+\"]\", \"\", f.Value, \" [P]\") } } else { c.Println(\" -\"+f.Shorthand+\",\", \"--\"+f.Name, \"[\"+f.DefValue+\"]\", \"\", f.Value, \" [P]\") } }) } c.Println(x.flagErrorBuf) if x.HasSubCommands() { for _, y := range x.commands { debugflags(y) } } } debugflags(c) }. \n### Response: // DebugFlags used to determine which flags have been assigned to which commands\n// and which persist..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: Dependency<?> pushDependency(Dependency<?> dependency, Object source) { Dependency<?> previous = this.dependency; this.dependency = dependency; doPushState(dependency, source); return previous; } \n### Response:", "ground_truth": "Sets the new current dependency & adds it to the state.", "predict": "// PushDependency updates the dependency field of the current command\n// and returns the previous dependency object, which is used to track changes\n// in the command's state."}, {"ID": 394, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public void process() throws Exception { // if the deployment is Implicit, we don't want to process it if (deploymentContext != null && deploymentContext.isImplicit()) { return; } try { // First register OpenApiServletContextListener which triggers the final init WARArchive warArchive = archive.as(WARArchive.class); warArchive.findWebXmlAsset().addListener(LISTENER_CLASS); } catch (Exception e) { throw new RuntimeException(\"Failed to register OpenAPI listener\", e); } OpenApiStaticFile staticFile = ArchiveUtil.archiveToStaticFile(archive); // Set models from annotations and static file OpenApiDocument openApiDocument = OpenApiDocument.INSTANCE; openApiDocument.config(config); openApiDocument.modelFromStaticFile(OpenApiProcessor.modelFromStaticFile(staticFile)); openApiDocument.modelFromAnnotations(OpenApiProcessor.modelFromAnnotations(config, index)); }. \n### Response: Process the deployment in order to produce an OpenAPI document.\n\n@see org.wildfly.swarm.spi.api.DeploymentProcessor#process().\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: void pushState(com.google.inject.Key<?> key, Object source) { doPushState(key, source); } \n### Response:", "ground_truth": "Adds to the state without setting the dependency.", "predict": "Push state to the application.\n\n@see com.google.inject.Key#key(Object)\n@see com.google.inject.Key#key(Object, Object)\n\nThis method is used to push state to the application. The key is used to identify the state, and the source is the object that the state is associated with. The method calls the doPushState method with the key and source as arguments."}, {"ID": 395, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Nullable private UserObject sawStaticCall() { if (getSigConstantOperand().endsWith(Values.SIG_VOID)) { return null; } return new UserObject(isRiskyMethodCall()); }. \n### Response: processes a static call or initializer by checking to see if the call is risky, and returning a OpcodeStack item user value saying so.\n\n@return the user object to place on the OpcodeStack.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: static <T> Initializable<T> of(final T instance) { return new Initializable<T>() { @Override public T get() { return instance; } @Override public String toString() { return String.valueOf(instance); } }; } \n### Response:", "ground_truth": "Returns an initializable for an instance that requires no initialization.", "predict": "This method returns an instance of the `Initializable` class, which represents a class that can be instantiated and has a default constructor.\n\n@return an instance of the `Initializable` class, which represents a class that can be instantiated and has a default constructor.\n\n"}, {"ID": 396, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def compute_fingerprint(self, target): \"\"\"UnpackedJars targets need to be re-unpacked if any of its configuration changes or any of the jars they import have changed. \"\"\" if isinstance(target, UnpackedJars): hasher = sha1() for cache_key in sorted(jar.cache_key() for jar in target.all_imported_jar_deps): hasher.update(cache_key.encode('utf-8')) hasher.update(target.payload.fingerprint().encode('utf-8')) return hasher.hexdigest() if PY3 else hasher.hexdigest().decode('utf-8') return None. \n### Response: UnpackedJars targets need to be re-unpacked if any of its configuration changes or any of\n    the jars they import have changed..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected T provision( Provider<? extends T> provider, Dependency<?> dependency, ConstructionContext<T> constructionContext) throws InternalProvisionException { T t = provider.get(); if (t == null && !dependency.isNullable()) { InternalProvisionException.onNullInjectedIntoNonNullableDependency(source, dependency); } constructionContext.setProxyDelegates(t); return t; } \n### Response:", "ground_truth": "Provisions a new instance. Subclasses should override this to catch exceptions & rethrow as\nErrorsExceptions.", "predict": "This method provision() is used to provision a provider with a dependency and a construction context. It throws an InternalProvisionException if any of the dependencies or providers are null or if the dependency is a Nullable type. It sets the proxy delegate to the provider and returns the provider."}, {"ID": 397, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void validate() throws GridConfigurationException { // validations occur here in the getters called on the configuration. try { configuration.getHubHost(); configuration.getHubPort(); } catch (RuntimeException e) { throw new GridConfigurationException(e.getMessage()); } }. \n### Response: Validate the current setting and throw a config exception is an invalid setup is detected.\n\n@throws GridConfigurationException grid configuration.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void onEvent(ConnectionEventType type, String remoteAddr, Connection conn) { List<ConnectionEventProcessor> processorList = this.processors.get(type); if (processorList != null) { for (ConnectionEventProcessor processor : processorList) { processor.onEvent(remoteAddr, conn); } } } \n### Response:", "ground_truth": "Dispatch events.\n\n@param type\n@param remoteAddr\n@param conn", "predict": "This method is responsible for processing events in the event processing pipeline. It takes in three arguments:\n\n* `ConnectionEventType`: The type of event to process.\n* `String remoteAddr`: The remote address of the connection.\n* `Connection conn`: The connection object.\n\nIt retrieves the list of event processors for the given type from the `processors` property. Then, it iterates over the list and calls the `onEvent` method on each processor, passing in the remote address and connection object as arguments.\n\n@return void event processing.\n\nNote that this method is only called when an event is received. It does not perform any validation of the event data."}, {"ID": 398, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (r *GormWorkItemTypeGroupRepository) Load(ctx context.Context, groupID uuid.UUID) (*WorkItemTypeGroup, error) { defer goa.MeasureSince([]string{\"goa\", \"db\", \"workitemtypegroup\", \"load\"}, time.Now()) log.Debug(ctx, map[string]interface{}{\"witg_id\": groupID}, \"loading work item type group \") res := WorkItemTypeGroup{} db := r.db.Model(&res).Where(\"id=?\", groupID).First(&res) if db.RecordNotFound() { log.Error(ctx, map[string]interface{}{\"witg_id\": groupID}, \"work item type group not found\") return nil, errors.NewNotFoundError(\"work item type group\", groupID.String()) } if err := db.Error; err != nil { return nil, errors.NewInternalError(ctx, err) } typeList, err := r.loadTypeList(ctx, res.ID) if err != nil { return nil, errs.WithStack(err) } res.TypeList = typeList return &res, nil }. \n### Response: // Load returns the work item type group for the given id.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void addConnectionEventProcessor(ConnectionEventType type, ConnectionEventProcessor processor) { List<ConnectionEventProcessor> processorList = this.processors.get(type); if (processorList == null) { this.processors.putIfAbsent(type, new ArrayList<ConnectionEventProcessor>(1)); processorList = this.processors.get(type); } processorList.add(processor); } \n### Response:", "ground_truth": "Add event processor.\n\n@param type\n@param processor", "predict": "// Add a connection event processor to the list of processors for the given type."}, {"ID": 399, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (pt pollingTrackerBase) baseCheckForErrors() error { // for Azure-AsyncOperations the response body cannot be nil or empty if pt.Pm == PollingAsyncOperation { if pt.resp.Body == nil || pt.resp.ContentLength == 0 { return autorest.NewError(\"pollingTrackerBase\", \"baseCheckForErrors\", \"for Azure-AsyncOperation response body cannot be nil\") } if pt.rawBody[\"status\"] == nil { return autorest.NewError(\"pollingTrackerBase\", \"baseCheckForErrors\", \"missing status property in Azure-AsyncOperation response body\") } } return nil }. \n### Response: // error checking common to all trackers.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static <T> T getFutureTaskResult(RunStateRecordedFutureTask<T> task, Logger logger) { T t = null; if (null != task) { try { t = task.getAfterRun(); } catch (InterruptedException e) { logger.error(\"Future task interrupted!\", e); } catch (ExecutionException e) { logger.error(\"Future task execute failed!\", e); } catch (FutureTaskNotRunYetException e) { logger.error(\"Future task has not run yet!\", e); } catch (FutureTaskNotCompleted e) { logger.error(\"Future task has not completed!\", e); } } return t; } \n### Response:", "ground_truth": "get the result of a future task\n\nNotice: the run method of this task should have been called at first.\n\n@param task\n@param \n@return", "predict": "// Get the result of a future task."}, {"ID": 400, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String formattingFinishedPercentage(final RolloutGroup rolloutGroup, final float finishedPercentage) { float tmpFinishedPercentage = 0; switch (rolloutGroup.getStatus()) { case READY: case SCHEDULED: case ERROR: tmpFinishedPercentage = 0.0F; break; case FINISHED: tmpFinishedPercentage = 100.0F; break; case RUNNING: tmpFinishedPercentage = finishedPercentage; break; default: break; } return String.format(\"%.1f\", tmpFinishedPercentage); }. \n### Response: Formats the finished percentage of a rollout group into a string with one\ndigit after comma.\n\n@param rolloutGroup\nthe rollout group\n@param finishedPercentage\nthe calculated finished percentage of the rolloutgroup\n@return formatted String value.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void launderThrowable(Throwable t) { if (t instanceof RuntimeException) { throw (RuntimeException) t; } else if (t instanceof Error) { throw (Error) t; } else { throw new IllegalStateException(\"Not unchecked!\", t); } } \n### Response:", "ground_truth": "launder the throwable\n\n@param t", "predict": "Provides a way to handle and throw exceptions that may occur during the execution of a program.\n\n@param Throwable\nthe exception to be laundered\n@return void\nno effect\n\nNote: This method is not recommended for use in production code as it may cause unexpected behavior and can lead to unexpected exceptions."}, {"ID": 401, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def endStep(self,key): \"\"\" Record the end time for the step. If key==None, simply record ptime as end time for class to represent the overall runtime since the initialization of the class. \"\"\" ptime = _ptime() if key is not None: self.steps[key]['end'] = ptime self.steps[key]['elapsed'] = ptime[1] - self.steps[key]['start'][1] self.end = ptime print('==== Processing Step ',key,' finished at ',ptime[0]) print(''). \n### Response: Record the end time for the step.\n\n        If key==None, simply record ptime as end time for class to represent\n        the overall runtime since the initialization of the class..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void registerProcessor(CommandCode cmdCode, RemotingProcessor<?> processor) { if (this.cmd2processors.containsKey(cmdCode)) { logger .warn( \"Processor for cmd={} is already registered, the processor is {}, and changed to {}\", cmdCode, cmd2processors.get(cmdCode).getClass().getName(), processor.getClass() .getName()); } this.cmd2processors.put(cmdCode, processor); } \n### Response:", "ground_truth": "Register processor to process command that has the command code of cmdCode.\n\n@param cmdCode\n@param processor", "predict": "Registers a processor for a given command code.\n\n        If the processor is already registered, a warning message is logged,\n        and the processor is updated.\n\n        This method is used to register a processor for a specific command code,\n         ensuring that no existing processor for the command code is used.."}, {"ID": 402, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (f doFunc) Do(ctx context.Context, req *http.Request) (*http.Response, error) { return f(ctx, req) }. \n### Response: // Do implements Doer.Do.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void registerDefaultProcessor(RemotingProcessor<?> processor) { if (this.defaultProcessor == null) { this.defaultProcessor = processor; } else { throw new IllegalStateException(\"The defaultProcessor has already been registered: \" + this.defaultProcessor.getClass()); } } \n### Response:", "ground_truth": "Register the default processor to process command with no specific processor registered.\n\n@param processor", "predict": "// Registers the specified ReemotingProcessor as the default processor."}, {"ID": 403, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func SetField(src interface{}, v reflect.Value, fieldName string) error { field := v.FieldByName(fieldName) if !field.IsValid() { return fmt.Errorf(\"couldn't find %v field in %T\", fieldName, v.Interface()) } srcValue := reflect.ValueOf(src) if srcValue.Type().AssignableTo(field.Type()) { field.Set(srcValue) return nil } if srcValue.Type().ConvertibleTo(field.Type()) { field.Set(srcValue.Convert(field.Type())) return nil } return fmt.Errorf(\"couldn't assign/convert %v to %v\", srcValue.Type(), field.Type()) }. \n### Response: // SetField puts the value of src, into fieldName, which must be a member of v.\n// The value of src must be assignable to the field..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public RemotingProcessor<?> getProcessor(CommandCode cmdCode) { RemotingProcessor<?> processor = this.cmd2processors.get(cmdCode); if (processor != null) { return processor; } return this.defaultProcessor; } \n### Response:", "ground_truth": "Get the specific processor with command code of cmdCode if registered, otherwise the default processor is returned.\n\n@param cmdCode\n@return", "predict": "// GetProcessor retrieves the RemotingProcessor<?> for the given CommandCode.\n// It first retrieves the processor from the cmd2processors array,\n// if it exists. If no processor is found, it returns the defaultProcessor.\n\nNote: The method retrieves the RemotingProcessor<?> for the given CommandCode, and returns it if it exists, otherwise it returns the defaultProcessor."}, {"ID": 404, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected function createOrGetZip() { if (!isset($this->zip)) { $this->zip = new \\ZipArchive(); $zipFilePath = $this->getZipFilePath(); $this->zip->open($zipFilePath, \\ZipArchive::CREATE|\\ZipArchive::OVERWRITE); } return $this->zip; }. \n### Response: Returns the already created ZipArchive instance or\ncreates one if none exists.\n\n@return \\ZipArchive.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private Url tryGet(String url) { SoftReference<Url> softRef = Url.parsedUrls.get(url); return (null == softRef) ? null : softRef.get(); } \n### Response:", "ground_truth": "try get from cache\n\n@param url\n@return", "predict": "This method retrieves the URL from the specified string and returns it as a SoftReference object.\n\n@return SoftReference<Url>."}, {"ID": 405, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public GrProperty addProperty(String name, Object value) { GrProperty prop = GrAccess.createProperty(name); prop.setValue(value); return getPropertiesContainer().addElement(prop); }. \n### Response: add a new property, throw a RuntimeException if the property already exists\n@param name of the property\n@param value of the property\n@return the added property.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected ProtocolCode decodeProtocolCode(ByteBuf in) { if (in.readableBytes() >= protocolCodeLength) { byte[] protocolCodeBytes = new byte[protocolCodeLength]; in.readBytes(protocolCodeBytes); return ProtocolCode.fromBytes(protocolCodeBytes); } return null; } \n### Response:", "ground_truth": "decode the protocol code\n\n@param in input byte buf\n@return an instance of ProtocolCode", "predict": "decodes a protocol code from a ByteBuf\n@param in the ByteBuf containing the protocol code\n@return the decoded protocol code or null if the protocol code cannot be decoded\n\nNote: This method is used by the `ProtocolCode` class to decode protocol codes from a ByteBuf. It checks if the method can read the entire protocol code and if so, it decodes it and returns it. If the method cannot read the entire protocol code, it returns null."}, {"ID": 406, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function getImagePathPrivate() { //set default return $return = null; //set media path $sMediaPath = \\Yii::$app->imagemanager->mediaPath; $sFileExtension = pathinfo($this->fileName, PATHINFO_EXTENSION); //get image file path $sImageFilePath = $sMediaPath . '/' . $this->id . '_' . $this->fileHash . '.' . $sFileExtension; //check file exists if (file_exists($sImageFilePath)) { $return = $sImageFilePath; } return $return; }. \n### Response: Get image path private\n@return string|null If image file exists the path to the image, if file does not exists null.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public Map<String, List<Connection>> getAll() { Map<String, List<Connection>> allConnections = new HashMap<String, List<Connection>>(); Iterator<Map.Entry<String, RunStateRecordedFutureTask<ConnectionPool>>> iterator = this .getConnPools().entrySet().iterator(); while (iterator.hasNext()) { Map.Entry<String, RunStateRecordedFutureTask<ConnectionPool>> entry = iterator.next(); ConnectionPool pool = FutureTaskUtil.getFutureTaskResult(entry.getValue(), logger); if (null != pool) { allConnections.put(entry.getKey(), pool.getAll()); } } return allConnections; } \n### Response:", "ground_truth": "Get all connections of all poolKey.\n\n@return a map with poolKey as key and a list of connections in ConnectionPool as value", "predict": "getAll() method\n\n@return Map<String, List<Connection>> allConnections A map of connection pool keys to their respective connection pool lists.\n\nNote: This method is an override of the default getAll() method in the ConnectionPool class, which is used to retrieve all connection pool objects. The method iterates through the connection pool objects and adds their connection lists to a map. If a connection pool object is not found in the iteration, it returns a null value."}, {"ID": 407, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @SuppressWarnings(\"deprecation\") private JFreeChart createChart(CategoryDataset dataset) { // String s = name; String s = null; String tit = null; String ax = null; // if (first) // tit = title + \" (EST)\"; // else if (last) // ax = \"Time\"; tit = this.name; chart = ChartFactory.createStackedBarChart( tit, // chart title s, // domain axis label ax, // range axis label dataset, // data PlotOrientation.HORIZONTAL, // the plot orientation false, // legend false, // tooltips false // urls ); CategoryPlot plot = chart.getCategoryPlot(); chart.getTitle().setHorizontalAlignment(HorizontalAlignment.LEFT); plot.setRangeAxisLocation(AxisLocation.BOTTOM_OR_RIGHT); //plot.getCategories(); //CategoryItemRenderer renderer = plot.getRenderer(); StackedBarRenderer renderer = (StackedBarRenderer) plot.getRenderer(); renderer.setItemLabelsVisible(true); renderer.setItemLabelGenerator(new LabelGenerator(showlabels)); ItemLabelPosition pos = new ItemLabelPosition(ItemLabelAnchor.INSIDE1, TextAnchor.TOP_RIGHT); renderer.setPositiveItemLabelPositionFallback(pos); for(int i = 0; i < dataset.getRowCount(); i++) { renderer.setSeriesPositiveItemLabelPosition(i, pos); } /* if (values.elementAt(0) instanceof ResourceLevel) { renderer.setItemLabelGenerator( new PlotBoxTL.LabelGenerator(true)); } else renderer.setItemLabelGenerator( new PlotBoxTL.LabelGenerator(false)); */ renderer.setToolTipGenerator(new PlotBoxTooltip()); plot.setRenderer(renderer); // renderer.getSeriesStroke(0). plot.setForegroundAlpha(0.8f); NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis(); rangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits()); rangeAxis.setLowerMargin(2.0); rangeAxis.setUpperMargin(2.0); //long origin = stl.getSerializableSimpleTimeline().getEarliestStartTime(); //long horizon = stl.getSerializableSimpleTimeline().getLatestEndTime(); long origin = stl.getPulses()[0].longValue(); NumberFormat nf = new DecimalFormat(); rangeAxis.setNumberFormatOverride ( nf ); if (this.range != null) rangeAxis.setRange(range); //rangeAxis.setRange((new Double(origin)).doubleValue(), (new Double(horizon)).doubleValue()); ///// 0 should be replaced by the start of the horizon renderer.setBase(origin); //renderer.setBase(); for (int i = 0; i < durations.length; i++) { if (stl.isInconsistent(values[i])) renderer.setSeriesPaint(i, new Color(198, 30, 69)); else if (stl.isCritical(values[i])) renderer.setSeriesPaint(i, new Color(238,234,111)); else if (stl.isUndetermined(values[i])) renderer.setSeriesPaint(i, new Color(255,255,255)); else renderer.setSeriesPaint(i, new Color(111,180,238)); renderer.setSeriesOutlinePaint(i, Color.black); } renderer.setBaseSeriesVisibleInLegend(false, false); renderer.setSeriesStroke(0, new BasicStroke(40f)); return chart; }. \n### Response: Creates a chart for the PlotBoxBehavior\n\n@param dataset  A dataset for the chart.\n\n@return A chart where the PlotBoxBehavior will be plotted..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public void scan() { if (null != this.connTasks && !this.connTasks.isEmpty()) { Iterator<String> iter = this.connTasks.keySet().iterator(); while (iter.hasNext()) { String poolKey = iter.next(); ConnectionPool pool = this.getConnectionPool(this.connTasks.get(poolKey)); if (null != pool) { pool.scan(); if (pool.isEmpty()) { if ((System.currentTimeMillis() - pool.getLastAccessTimestamp()) > DEFAULT_EXPIRE_TIME) { iter.remove(); logger.warn(\"Remove expired pool task of poolKey {} which is empty.\", poolKey); } } } } } } \n### Response:", "ground_truth": "in case of cache pollution and connection leak, to do schedule scan\n\n@see com.alipay.remoting.Scannable#scan()", "predict": "scan method scans the connection pool and removes expired tasks.\n\n@param connTasks  A list of connection pool tasks.\n\n@return void.\n\nThis method scans the connection pool and removes expired tasks. It is called when the scan method is called for the first time or when the isEmpty() method is called on the connection pool. The method checks if the connection pool is empty and if so, it removes the expired task using the lastAccessTimestamp method and logger.warn() method to log the warning message."}, {"ID": 408, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def get_input_vector(self, ind): \"\"\" Given an index, get the corresponding vector of the Input Matrix. \"\"\" dim = self.get_dimension() b = fasttext.Vector(dim) self.f.getInputVector(b, ind) return np.array(b). \n### Response: Given an index, get the corresponding vector of the Input Matrix..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public Connection getAndCreateIfAbsent(Url url) throws InterruptedException, RemotingException { // get and create a connection pool with initialized connections. ConnectionPool pool = this.getConnectionPoolAndCreateIfAbsent(url.getUniqueKey(), new ConnectionPoolCall(url)); if (null != pool) { return pool.get(); } else { logger.error(\"[NOTIFYME] bug detected! pool here must not be null!\"); return null; } } \n### Response:", "ground_truth": "If no task cached, create one and initialize the connections.\n\n@see ConnectionManager#getAndCreateIfAbsent(Url)", "predict": "Obtain a connection pool from the given URL and return it if it exists, or null if it doesn't."}, {"ID": 409, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function onLayoutBoxFormInit(FormEvent $event) { $builder = $event->getFormBuilder(); $form = $event->getForm(); $configurators = $this->container->get('layout_box.configurator.collection')->all(); $resource = $event->getResource(); $boxSettings = $resource->getSettings(); foreach ($configurators as $configurator) { if ($configurator instanceof LayoutBoxConfiguratorInterface) { $defaults = []; if ($resource->getBoxType() == $configurator->getType()) { $defaults = $boxSettings; } $configurator->addFormFields($builder, $form, $defaults); } } }. \n### Response: Adds configurator fields to main layout box edit form.\nLoops through all configurators, renders the fieldset and sets default data\n\n@param FormEvent $event.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public void createConnectionAndHealIfNeed(Url url) throws InterruptedException, RemotingException { // get and create a connection pool with initialized connections. ConnectionPool pool = this.getConnectionPoolAndCreateIfAbsent(url.getUniqueKey(), new ConnectionPoolCall(url)); if (null != pool) { healIfNeed(pool, url); } else { logger.error(\"[NOTIFYME] bug detected! pool here must not be null!\"); } } \n### Response:", "ground_truth": "If no task cached, create one and initialize the connections.\nIf task cached, check whether the number of connections adequate, if not then heal it.\n\n@param url\n@return\n@throws InterruptedException\n@throws RemotingException", "predict": "Creates a connection pool with initialized connections and calls healIfNeed if necessary.\n\n@param Url $url.\n\n"}, {"ID": 410, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function getCurrentPage() { $page = (int) $this->request->getParam(self::PAGE_PARM_NAME); return $page ? $page : 1; }. \n### Response: Return current page from request\n\n@return int.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private void removeTask(String poolKey) { RunStateRecordedFutureTask<ConnectionPool> task = this.connTasks.remove(poolKey); if (null != task) { ConnectionPool pool = FutureTaskUtil.getFutureTaskResult(task, logger); if (null != pool) { pool.removeAllAndTryClose(); } } } \n### Response:", "ground_truth": "remove task and remove all connections\n\n@param poolKey", "predict": "Remove a task with a given pool key\n\n@param poolKey The pool key to remove.\n\n@return True if the task was successfully removed, false otherwise.\n\nNote: This method is used to remove a task from the connection tasks list. It first checks if the task is still present in the list by calling `connTasks.remove(poolKey)`. If the task is still present, it is retrieved using `FutureTaskUtil.getFutureTaskResult(task, logger)`. Finally, the task's result is removed and the connection pool is closed if necessary."}, {"ID": 411, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func NewClient(config *triton.ClientConfig) (*ServiceGroupClient, error) { // TODO: Utilize config interface within the function itself client, err := client.New( config.TritonURL, config.MantaURL, config.AccountName, config.Signers..., ) if err != nil { return nil, err } return newServiceGroupClient(client), nil }. \n### Response: // NewClient returns a new client for working with Service Groups endpoints and\n// resources within TSG.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private void healIfNeed(ConnectionPool pool, Url url) throws RemotingException, InterruptedException { String poolKey = url.getUniqueKey(); // only when async creating connections done // and the actual size of connections less than expected, the healing task can be run. if (pool.isAsyncCreationDone() && pool.size() < url.getConnNum()) { FutureTask<Integer> task = this.healTasks.get(poolKey); if (null == task) { task = new FutureTask<Integer>(new HealConnectionCall(url, pool)); task = this.healTasks.putIfAbsent(poolKey, task); if (null == task) { task = this.healTasks.get(poolKey); task.run(); } } try { int numAfterHeal = task.get(); if (logger.isDebugEnabled()) { logger.debug(\"[NOTIFYME] - conn num after heal {}, expected {}, warmup {}\", numAfterHeal, url.getConnNum(), url.isConnWarmup()); } } catch (InterruptedException e) { this.healTasks.remove(poolKey); throw e; } catch (ExecutionException e) { this.healTasks.remove(poolKey); Throwable cause = e.getCause(); if (cause instanceof RemotingException) { throw (RemotingException) cause; } else { FutureTaskUtil.launderThrowable(cause); } } // heal task is one-off, remove from cache directly after run this.healTasks.remove(poolKey); } } \n### Response:", "ground_truth": "execute heal connection tasks if the actual number of connections in pool is less than expected\n\n@param pool\n@param url", "predict": "// HealIfNeed implements a method that runs a healing task if needed,\n// only if async creation is done and the actual size of connections is less than the expected number, and the healing task is not interrupted.\n// The task is run using a FutureTask and the result is logged.\n// The method also handles exceptions and removes the task from the cache if necessary.\n// This method is a one-off task and should be removed from the cache directly after the run."}, {"ID": 412, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static char getTrigger(final String delimitedExpression) { final String expr = StringUtils.trimToEmpty(delimitedExpression); Validate.isTrue(isDelimited(expr)); return expr.charAt(0); }. \n### Response: Get the trigger character for the specified delimited expression.\n\n@param delimitedExpression\n@return first non-whitespace character of {@code delimitedExpression}\n@throws IllegalArgumentException if argument expression is not delimited.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private void doCreate(final Url url, final ConnectionPool pool, final String taskName, final int syncCreateNumWhenNotWarmup) throws RemotingException { final int actualNum = pool.size(); final int expectNum = url.getConnNum(); if (actualNum < expectNum) { if (logger.isDebugEnabled()) { logger.debug(\"actual num {}, expect num {}, task name {}\", actualNum, expectNum, taskName); } if (url.isConnWarmup()) { for (int i = actualNum; i < expectNum; ++i) { Connection connection = create(url); pool.add(connection); } } else { if (syncCreateNumWhenNotWarmup < 0 || syncCreateNumWhenNotWarmup > url.getConnNum()) { throw new IllegalArgumentException( \"sync create number when not warmup should be [0,\" + url.getConnNum() + \"]\"); } // create connection in sync way if (syncCreateNumWhenNotWarmup > 0) { for (int i = 0; i < syncCreateNumWhenNotWarmup; ++i) { Connection connection = create(url); pool.add(connection); } if (syncCreateNumWhenNotWarmup == url.getConnNum()) { return; } } // initialize executor in lazy way initializeExecutor(); pool.markAsyncCreationStart();// mark the start of async try { this.asyncCreateConnectionExecutor.execute(new Runnable() { @Override public void run() { try { for (int i = pool.size(); i < url.getConnNum(); ++i) { Connection conn = null; try { conn = create(url); } catch (RemotingException e) { logger .error( \"Exception occurred in async create connection thread for {}, taskName {}\", url.getUniqueKey(), taskName, e); } pool.add(conn); } } finally { pool.markAsyncCreationDone();// mark the end of async } } }); } catch (RejectedExecutionException e) { pool.markAsyncCreationDone();// mark the end of async when reject throw e; } } // end of NOT warm up } // end of if } \n### Response:", "ground_truth": "do create connections\n\n@param url\n@param pool\n@param taskName\n@param syncCreateNumWhenNotWarmup you can specify this param to ensure at least desired number of connections available in sync way\n@throws RemotingException", "predict": "This method is responsible for creating a connection in the connection pool. It checks if the connection pool is already warm up, if not, it creates a connection in a sync way if syncCreateNumWhenNotWarmup is greater than 0, otherwise it creates a connection in an async way. It also initializes an executor and marks it as async creation start. It then execute an async create connection thread and marks it as async creation done if it was rejected. Finally, it marks the end of not warm up."}, {"ID": 413, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (c *VSphereCloud) GetCloudGroups(cluster *kops.Cluster, instancegroups []*kops.InstanceGroup, warnUnmatched bool, nodes []v1.Node) (map[string]*cloudinstances.CloudInstanceGroup, error) { glog.V(8).Infof(\"vSphere cloud provider GetCloudGroups not implemented yet\") return nil, fmt.Errorf(\"vSphere cloud provider does not support getting cloud groups at this time\") }. \n### Response: // GetCloudGroups is not implemented yet, that needs to return the instances and groups that back a kops cluster..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void closeConnection(String addr) { Url url = this.addressParser.parse(addr); this.connectionManager.remove(url.getUniqueKey()); } \n### Response:", "ground_truth": "Close all connections of a address\n\n@param addr", "predict": "// CloseConnection parses the addr and removes the connection key from the connection manager.."}, {"ID": 414, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function handleError($redirection, $error404) { if ($redirection) { $this->increaseCounter($redirection); return $redirection; } elseif ($error404) { $this->increaseCounter($error404); return $error404; } throw new NoResultException(); }. \n### Response: Check if the Error and its associated Redirection exists, then increase the counter of the Error|Redirection.\n\n@param Redirection|null $redirection\n@param Error404|null    $error404\n\n@throws NoResultException\n\n@return Redirection|Error404.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void onClose() { Iterator<Entry<Integer, InvokeFuture>> iter = invokeFutureMap.entrySet().iterator(); while (iter.hasNext()) { Entry<Integer, InvokeFuture> entry = iter.next(); iter.remove(); InvokeFuture future = entry.getValue(); if (future != null) { future.putResponse(future.createConnectionClosedResponse(this.getRemoteAddress())); future.cancelTimeout(); future.tryAsyncExecuteInvokeCallbackAbnormally(); } } } \n### Response:", "ground_truth": "Do something when closing.", "predict": "Implement a method called `onClose` to handle the completion of all outstanding asynchronous tasks.\n\n@param InvokeFuture $future\n\n@return void\n\nThis method will be called when all outstanding asynchronous tasks have completed. It should cancel any remaining timeouts and try to execute theInvokeCallbackAbnormally if the connection has closed."}, {"ID": 415, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def export_wif(self) -> str: \"\"\" This interface is used to get export ECDSA private key in the form of WIF which is a way to encoding an ECDSA private key and make it easier to copy. :return: a WIF encode private key. \"\"\" data = b''.join([b'\\x80', self.__private_key, b'\\01']) checksum = Digest.hash256(data[0:34]) wif = base58.b58encode(b''.join([data, checksum[0:4]])) return wif.decode('ascii'). \n### Response: This interface is used to get export ECDSA private key in the form of WIF which\n        is a way to encoding an ECDSA private key and make it easier to copy.\n\n        :return: a WIF encode private key..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void close() { if (closed.compareAndSet(false, true)) { try { if (this.getChannel() != null) { this.getChannel().close().addListener(new ChannelFutureListener() { @Override public void operationComplete(ChannelFuture future) throws Exception { if (logger.isInfoEnabled()) { logger .info( \"Close the connection to remote address={}, result={}, cause={}\", RemotingUtil.parseRemoteAddress(Connection.this .getChannel()), future.isSuccess(), future.cause()); } } }); } } catch (Exception e) { logger.warn(\"Exception caught when closing connection {}\", RemotingUtil.parseRemoteAddress(Connection.this.getChannel()), e); } } } \n### Response:", "ground_truth": "Close the connection.", "predict": "This method is used to close the connection to the channel. It checks if the channel is not null and if it is, it closes the channel. It alsoaddListener to the channel close operation and logs any success or failure. If there is an exception, it logs a warning."}, {"ID": 416, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private function copy() { $source = Yii::getAlias($this->source); if (!file_exists($source) || !is_dir($source)) { throw new ErrorException(\"Source directory {$this->source} not found\"); } $destination = Yii::getAlias($this->destination); if (!$this->replace && is_dir($destination)) { // if replace is disabled we will skip existing files $this->keepFiles = FileHelper::findFiles($destination); } FileHelper::copyDirectory($source, $destination, [ 'except' => ['.git/'], 'fileMode' => 0775, 'beforeCopy' => function ($from, $to) { return $this->replace || !file_exists($to) || !is_file($to); } ]); return true; }. \n### Response: Copies original module files to destination folder.\n@return bool\n@throws ErrorException.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public Object setAttributeIfAbsent(String key, Object value) { return attributes.putIfAbsent(key, value); } \n### Response:", "ground_truth": "set attribute if key absent.\n\n@param key\n@param value\n@return", "predict": "Sets a new attribute with the specified key if it is not already present in the attributes object.\n@return the new attribute object or null if the key is not found.\n@throws AttributeError."}, {"ID": 417, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function resolveExternalPath(importPath, options) { let baseIndex = importPath[0] === '@' ? importPath.indexOf('/') + 1 : 0; let addonName = importPath.substring(0, importPath.indexOf('/', baseIndex)); let addon = options.parent.addons.find(addon => addon.name === addonName); if (!addon) { throw new Error(`Unable to resolve styles from addon ${addonName}; is it installed?`); } let pathWithinAddon = importPath.substring(addonName.length + 1); let addonTreePath = path.join(addon.root, addon.treePaths.addon); let absolutePath = ensurePosixPath(path.resolve(addonTreePath, pathWithinAddon)); let keyPath = options.addonModulesRoot + addonName + '/' + pathWithinAddon; return new DependencyPath('external', absolutePath, keyPath); }. \n### Response: Resolve absolute paths pointing to external addons.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void registerUserProcessor(UserProcessor<?> processor, ConcurrentHashMap<String, UserProcessor<?>> userProcessors) { if (null == processor) { throw new RuntimeException(\"User processor should not be null!\"); } if (processor instanceof MultiInterestUserProcessor) { registerUserProcessor((MultiInterestUserProcessor) processor, userProcessors); } else { if (StringUtils.isBlank(processor.interest())) { throw new RuntimeException(\"Processor interest should not be blank!\"); } UserProcessor<?> preProcessor = userProcessors.putIfAbsent(processor.interest(), processor); if (preProcessor != null) { String errMsg = \"Processor with interest key [\" + processor.interest() + \"] has already been registered to rpc server, can not register again!\"; throw new RuntimeException(errMsg); } } } \n### Response:", "ground_truth": "Help register single-interest user processor.\n\n@param processor  the processor need to be registered\n@param userProcessors   the map of user processors", "predict": "Registers a user processor."}, {"ID": 418, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def _fetch_router_info(self, router_ids=None, device_ids=None, all_routers=False): \"\"\"Fetch router dict from the routing plugin. :param router_ids: List of router_ids of routers to fetch :param device_ids: List of device_ids whose routers to fetch :param all_routers: If True fetch all the routers for this agent. :return: List of router dicts of format: [ {router_dict1}, {router_dict2},.....] \"\"\" try: if all_routers: LOG.debug('Fetching all routers') router_ids = self.plugin_rpc.get_router_ids(self.context) routers = self._fetch_router_chunk_data(router_ids) elif router_ids: routers = self._fetch_router_chunk_data(router_ids) elif device_ids: return self.plugin_rpc.get_routers(self.context, hd_ids=device_ids) except oslo_messaging.MessagingTimeout: if self.sync_routers_chunk_size > SYNC_ROUTERS_MIN_CHUNK_SIZE: self.sync_routers_chunk_size = max( int(round(self.sync_routers_chunk_size / 2)), SYNC_ROUTERS_MIN_CHUNK_SIZE) LOG.warning('Server failed to return info for routers in ' 'required time, decreasing chunk size to: %s', self.sync_routers_chunk_size) else: LOG.warning('Server failed to return info for routers in ' 'required time even with min chunk size: %s. ' 'It might be under very high load or just ' 'inoperable', self.sync_routers_chunk_size) raise except oslo_messaging.MessagingException: LOG.exception(\"RPC Error in fetching routers from plugin\") self.fullsync = True raise n_exc.AbortSyncRouters() LOG.debug(\"Periodic_sync_routers_task successfully completed\") # adjust chunk size after successful sync if (self.sync_routers_chunk_size < cfg.CONF.cfg_agent.max_device_sync_batch_size): self.sync_routers_chunk_size = min( self.sync_routers_chunk_size + SYNC_ROUTERS_MIN_CHUNK_SIZE, cfg.CONF.cfg_agent.max_device_sync_batch_size) return routers. \n### Response: Fetch router dict from the routing plugin.\n\n        :param router_ids: List of router_ids of routers to fetch\n        :param device_ids: List of device_ids whose routers to fetch\n        :param all_routers:  If True fetch all the routers for this agent.\n        :return: List of router dicts of format:\n                 [ {router_dict1}, {router_dict2},.....].\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private static void registerUserProcessor(MultiInterestUserProcessor<?> processor, ConcurrentHashMap<String, UserProcessor<?>> userProcessors) { if (null == processor.multiInterest() || processor.multiInterest().isEmpty()) { throw new RuntimeException(\"Processor interest should not be blank!\"); } for (String interest : processor.multiInterest()) { UserProcessor<?> preProcessor = userProcessors.putIfAbsent(interest, processor); if (preProcessor != null) { String errMsg = \"Processor with interest key [\" + interest + \"] has already been registered to rpc server, can not register again!\"; throw new RuntimeException(errMsg); } } } \n### Response:", "ground_truth": "Help register multi-interest user processor.\n\n@param processor  the processor with multi-interest need to be registered\n@param userProcessors    the map of user processors", "predict": "Registers a new MultiInterestUserProcessor instance with the ConcurrentHashMap<String, UserProcessor<?>> userProcessors.\n\n:param processor: MultiInterestUserProcessor instance to register\n:param userProcessors: ConcurrentHashMap of interest keys to store the preProcessor instances for this processor\n:return: None\n\nNote: This method should only be used when a new MultiInterestUserProcessor instance is being created, and not when a preProcessor instance for the same processor is being updated."}, {"ID": 419, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def send(self, msg, timeout=None): \"\"\"Transmit a message to the CAN bus. :param can.Message msg: A message object. :param float timeout: Wait up to this many seconds for the transmit queue to be ready. If not given, the call may fail immediately. :raises can.CanError: if the message could not be written. \"\"\" log.debug(\"We've been asked to write a message to the bus\") logger_tx = log.getChild(\"tx\") logger_tx.debug(\"sending: %s\", msg) started = time.time() # If no timeout is given, poll for availability if timeout is None: timeout = 0 time_left = timeout data = build_can_frame(msg) while time_left >= 0: # Wait for write availability ready = select.select([], [self.socket], [], time_left)[1] if not ready: # Timeout break sent = self._send_once(data, msg.channel) if sent == len(data): return # Not all data were sent, try again with remaining data data = data[sent:] time_left = timeout - (time.time() - started) raise can.CanError(\"Transmit buffer full\"). \n### Response: Transmit a message to the CAN bus.\n\n        :param can.Message msg: A message object.\n        :param float timeout:\n            Wait up to this many seconds for the transmit queue to be ready.\n            If not given, the call may fail immediately.\n\n        :raises can.CanError:\n            if the message could not be written..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private void dispatchToUserProcessor(RemotingContext ctx, RpcRequestCommand cmd) { final int id = cmd.getId(); final byte type = cmd.getType(); // processor here must not be null, for it have been checked before UserProcessor processor = ctx.getUserProcessor(cmd.getRequestClass()); if (processor instanceof AsyncUserProcessor) { try { processor.handleRequest(processor.preHandleRequest(ctx, cmd.getRequestObject()), new RpcAsyncContext(ctx, cmd, this), cmd.getRequestObject()); } catch (RejectedExecutionException e) { logger .warn(\"RejectedExecutionException occurred when do ASYNC process in RpcRequestProcessor\"); sendResponseIfNecessary(ctx, type, this.getCommandFactory() .createExceptionResponse(id, ResponseStatus.SERVER_THREADPOOL_BUSY)); } catch (Throwable t) { String errMsg = \"AYSNC process rpc request failed in RpcRequestProcessor, id=\" + id; logger.error(errMsg, t); sendResponseIfNecessary(ctx, type, this.getCommandFactory() .createExceptionResponse(id, t, errMsg)); } } else { try { Object responseObject = processor .handleRequest(processor.preHandleRequest(ctx, cmd.getRequestObject()), cmd.getRequestObject()); sendResponseIfNecessary(ctx, type, this.getCommandFactory().createResponse(responseObject, cmd)); } catch (RejectedExecutionException e) { logger .warn(\"RejectedExecutionException occurred when do SYNC process in RpcRequestProcessor\"); sendResponseIfNecessary(ctx, type, this.getCommandFactory() .createExceptionResponse(id, ResponseStatus.SERVER_THREADPOOL_BUSY)); } catch (Throwable t) { String errMsg = \"SYNC process rpc request failed in RpcRequestProcessor, id=\" + id; logger.error(errMsg, t); sendResponseIfNecessary(ctx, type, this.getCommandFactory() .createExceptionResponse(id, t, errMsg)); } } } \n### Response:", "ground_truth": "dispatch request command to user processor\n@param ctx remoting context\n@param cmd rpc request command", "predict": "Dispatches the given RPC request to the specified user processor.\n\n        :param ctx: The RemotingContext object containing the context of the rpc request.\n        :param cmd: The rpc request command object.\n        :param processor: The user processor object to which the request should be sent.\n        :param type: The type of the rpc request (e.g. Async, Sync).\n        :param id: The unique identifier of the rpc request.\n\n        :raises RejectedExecutionException: If the rpc request cannot be executed due to a rejection of the execution.\n\n        :raises Throwable: If any exception occurs during the execution of the rpc request."}, {"ID": 420, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function ApiDox() { this.settings = { input: '', inputText: null, inputTitle: '', output: '', fullSourceDescription: false }; this.anchors = {}; this.comments = []; this.curSection = null; this.fileComment = {}; this.lines = []; this.params = {}; this.returns = {}; this.sees = []; this.toc = []; this.throws = []; }. \n### Response: ApiDox constructor.\n\nUsage:\n\nvar dox = require('apidox').create();\nvar markdown = dox\n.set('input', '/path/to/source.js')\n.set('output', '/path/to/output.md')\n.parse()\n.convert();\n\nConfiguration:\n\n- `{string} input` Source file to read\n- `{string} inputText` Alternative to `input`\n- `{string|boolean} [inputTitle=input]` Customize `Source: ...` link text\n- `false`: Omit `Source: ...` entirely from markdown\n- `string`: Set link text (does not affect link URL)\n- `{string} output` Markdown file to write\n\nProperties:\n\n- `{object} anchors` Keys are object paths which already have anchors\n- For duplicate prevention\n- `{array} comments` Filtered dox-provided objects to convert\n- `{string curSection` Current section being converted, ex. 'Klass.prototype'.\n- `{object} fileComment` First dox-provided comment found in the file\n- `{array} lines` Markdown lines\n- `{object} params` Collected `@param` meta indexed by method name\n- `{array} types` Type names\n- `{string} description` First line\n- `{array} overflow` Additional lines\n- `{object} returns` Collected `@return` metadata indexed by method name\n- `{array} types` Type names\n- `{string} description` First line\n- `{array} overflow` Additional lines\n- `{array} sees` Collected `@see` lines\n- `{array} toc` Collected table-of-contents metadata objects\n- `{string} title` Link title\n- `{string} url` Link URL\n- `{array} throws` Collected `@throws` lines.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private boolean deserializeRequestCommand(RemotingContext ctx, RpcRequestCommand cmd, int level) { boolean result; try { cmd.deserialize(level); result = true; } catch (DeserializationException e) { logger .error( \"DeserializationException occurred when process in RpcRequestProcessor, id={}, deserializeLevel={}\", cmd.getId(), RpcDeserializeLevel.valueOf(level), e); sendResponseIfNecessary(ctx, cmd.getType(), this.getCommandFactory() .createExceptionResponse(cmd.getId(), ResponseStatus.SERVER_DESERIAL_EXCEPTION, e)); result = false; } catch (Throwable t) { String errMsg = \"Deserialize RpcRequestCommand failed in RpcRequestProcessor, id=\" + cmd.getId() + \", deserializeLevel=\" + level; logger.error(errMsg, t); sendResponseIfNecessary(ctx, cmd.getType(), this.getCommandFactory() .createExceptionResponse(cmd.getId(), t, errMsg)); result = false; } return result; } \n### Response:", "ground_truth": "deserialize request command\n\n@return true if deserialize success; false if exception catched", "predict": "This method deserializes a request command from the RemotingContext and rpc request processor, and returns the result. It uses try-catch blocks to handle any exceptions that may occur during the deserialization process. The method also logs any errors that occur and sends an exception response if necessary."}, {"ID": 421, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static function register($config) { // Validate config $missing = array_diff(['title', 'class', 'helperClass', 'supported'], array_keys($config)); if ($missing) { throw new InvalidArgumentException( \"Missing database helper config keys: '\" . implode(\"', '\", $missing) . \"'\" ); } // Guess missing module text if not given if (empty($config['missingModuleText'])) { if (empty($config['module'])) { $moduleText = 'Module for database connector ' . $config['title'] . 'is missing.'; } else { $moduleText = \"The SilverStripe module '\" . $config['module'] . \"' is missing.\"; } $config['missingModuleText'] = $moduleText . ' Please install it via composer or from http://addons.silverstripe.org/.'; } // Set missing text if (empty($config['missingExtensionText'])) { $config['missingExtensionText'] = 'The PHP extension is missing, please enable or install it.'; } // set default fields if none are defined already if (!isset($config['fields'])) { $config['fields'] = self::$default_fields; } self::$adapters[$config['class']] = $config; }. \n### Response: Add new adapter to the registry\n\n@param array $config Associative array of configuration details. This must include:\n- title\n- class\n- helperClass\n- supported\nThis SHOULD include:\n- fields\n- helperPath (if helperClass can't be autoloaded via psr-4/-0)\n- missingExtensionText\n- module OR missingModuleText.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private void preProcessRemotingContext(RemotingContext ctx, RpcRequestCommand cmd, long currentTimestamp) { ctx.setArriveTimestamp(cmd.getArriveTime()); ctx.setTimeout(cmd.getTimeout()); ctx.setRpcCommandType(cmd.getType()); ctx.getInvokeContext().putIfAbsent(InvokeContext.BOLT_PROCESS_WAIT_TIME, currentTimestamp - cmd.getArriveTime()); } \n### Response:", "ground_truth": "pre process remoting context, initial some useful infos and pass to biz\n\n@param ctx remoting context\n@param cmd rpc request command\n@param currentTimestamp current timestamp", "predict": "Preprocess the RemotingContext for the RpcRequestCommand. Set the arrival time, timeout, and  RPC type. Add the BOLT_PROCESS_WAIT_TIME value if it is not already set."}, {"ID": 422, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (o *DeletePollersIdentifierParams) WithIdentifier(identifier string) *DeletePollersIdentifierParams { o.Identifier = identifier return o }. \n### Response: // WithIdentifier adds the identifier to the delete pollers identifier params.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private void timeoutLog(final RpcRequestCommand cmd, long currentTimestamp, RemotingContext ctx) { if (logger.isDebugEnabled()) { logger .debug( \"request id [{}] currenTimestamp [{}] - arriveTime [{}] = server cost [{}] >= timeout value [{}].\", cmd.getId(), currentTimestamp, cmd.getArriveTime(), (currentTimestamp - cmd.getArriveTime()), cmd.getTimeout()); } String remoteAddr = \"UNKNOWN\"; if (null != ctx) { ChannelHandlerContext channelCtx = ctx.getChannelContext(); Channel channel = channelCtx.channel(); if (null != channel) { remoteAddr = RemotingUtil.parseRemoteAddress(channel); } } logger .warn( \"Rpc request id[{}], from remoteAddr[{}] stop process, total wait time in queue is [{}], client timeout setting is [{}].\", cmd.getId(), remoteAddr, (currentTimestamp - cmd.getArriveTime()), cmd.getTimeout()); } \n### Response:", "ground_truth": "print some log when request timeout and discarded in io thread.", "predict": "// This method logs a timeout error for the Rpc request with the given command ID, current timestamp, and remote address."}, {"ID": 423, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (r *Request) UseHandler(phase string, fn context.HandlerFunc) *Request { r.Middleware.UseHandler(phase, fn) return r }. \n### Response: // UseHandler uses an new middleware handler for the given phase..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private void debugLog(RemotingContext ctx, RpcRequestCommand cmd, long currentTimestamp) { if (logger.isDebugEnabled()) { logger.debug(\"Rpc request received! requestId={}, from {}\", cmd.getId(), RemotingUtil.parseRemoteAddress(ctx.getChannelContext().channel())); logger.debug( \"request id {} currenTimestamp {} - arriveTime {} = server cost {} < timeout {}.\", cmd.getId(), currentTimestamp, cmd.getArriveTime(), (currentTimestamp - cmd.getArriveTime()), cmd.getTimeout()); } } \n### Response:", "ground_truth": "print some debug log when receive request", "predict": "// DebugLog logs an  RPC request received and its current timestamp, remote address, server cost, and timeout."}, {"ID": 424, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function setEntityFactory(EntityFactory $factory = null) { if ($factory === null) { $factory = new Entity(); } $this->factory = $factory; return $this; }. \n### Response: Sets the Entity Factory which will create the Entities from Responses\n@param EntityFactory $factory\n@return $this.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public void process(RemotingContext ctx, T msg, ExecutorService defaultExecutor) throws Exception { ProcessTask task = new ProcessTask(ctx, msg); if (this.getExecutor() != null) { this.getExecutor().execute(task); } else { defaultExecutor.execute(task); } } \n### Response:", "ground_truth": "Process the remoting command with its own executor or with the defaultExecutor if its own if null.\n\n@param ctx\n@param msg\n@param defaultExecutor\n@throws Exception", "predict": "processes the response and creates a new ProcessTask object if the current executor is not null, otherwise it uses the default executor.\n@Override\npublic void process(RemotingContext ctx, T msg, ExecutorService defaultExecutor) throws Exception\n@param ctx the RemotingContext object\n@param msg the T object\n@param defaultExecutor the ExecutorService to use for executing tasks.\n@return void."}, {"ID": 425, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function addUserArgumentsAndOptions() { $this->getDefinition()->addArguments($this->getUserDefinition()->getArguments()); $this->getDefinition()->addOptions($this->getUserDefinition()->getOptions()); }. \n### Response: Add user definition arguments and options to definition..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void invokeWithCallback(final Connection conn, final RemotingCommand request, final InvokeCallback invokeCallback, final int timeoutMillis) { final InvokeFuture future = createInvokeFuture(conn, request, request.getInvokeContext(), invokeCallback); conn.addInvokeFuture(future); final int requestId = request.getId(); try { Timeout timeout = TimerHolder.getTimer().newTimeout(new TimerTask() { @Override public void run(Timeout timeout) throws Exception { InvokeFuture future = conn.removeInvokeFuture(requestId); if (future != null) { future.putResponse(commandFactory.createTimeoutResponse(conn .getRemoteAddress())); future.tryAsyncExecuteInvokeCallbackAbnormally(); } } }, timeoutMillis, TimeUnit.MILLISECONDS); future.addTimeout(timeout); conn.getChannel().writeAndFlush(request).addListener(new ChannelFutureListener() { @Override public void operationComplete(ChannelFuture cf) throws Exception { if (!cf.isSuccess()) { InvokeFuture f = conn.removeInvokeFuture(requestId); if (f != null) { f.cancelTimeout(); f.putResponse(commandFactory.createSendFailedResponse( conn.getRemoteAddress(), cf.cause())); f.tryAsyncExecuteInvokeCallbackAbnormally(); } logger.error(\"Invoke send failed. The address is {}\", RemotingUtil.parseRemoteAddress(conn.getChannel()), cf.cause()); } } }); } catch (Exception e) { InvokeFuture f = conn.removeInvokeFuture(requestId); if (f != null) { f.cancelTimeout(); f.putResponse(commandFactory.createSendFailedResponse(conn.getRemoteAddress(), e)); f.tryAsyncExecuteInvokeCallbackAbnormally(); } logger.error(\"Exception caught when sending invocation. The address is {}\", RemotingUtil.parseRemoteAddress(conn.getChannel()), e); } } \n### Response:", "ground_truth": "Invocation with callback.\n\n@param conn\n@param request\n@param invokeCallback\n@param timeoutMillis\n@throws InterruptedException", "predict": "This method adds user definition arguments and options to the definition and invokes the command with a callback. It creates a `InvokeFuture` for the command and adds it to the connection. It then sets a timeout for the command and writes the command to the channel. If the command fails, it cancels the timeout and sets a response with the failed reason. Finally, it logs any errors. The method also catches any exceptions that may be thrown and logs them."}, {"ID": 426, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func OpenMongoDB(ctx context.Context) context.Context { uri, dbName := getHerokuMongoURI() databaseName = dbName sesh, err := mgo.Dial(uri) if err != nil { panic(err) } ctx = context.WithValue(ctx, mongodb(mongoDBName), sesh) return ctx }. \n### Response: // OpenMongoDB open MongoDB connections in the context's default.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void oneway(final Connection conn, final RemotingCommand request) { try { conn.getChannel().writeAndFlush(request).addListener(new ChannelFutureListener() { @Override public void operationComplete(ChannelFuture f) throws Exception { if (!f.isSuccess()) { logger.error(\"Invoke send failed. The address is {}\", RemotingUtil.parseRemoteAddress(conn.getChannel()), f.cause()); } } }); } catch (Exception e) { if (null == conn) { logger.error(\"Conn is null\"); } else { logger.error(\"Exception caught when sending invocation. The address is {}\", RemotingUtil.parseRemoteAddress(conn.getChannel()), e); } } } \n### Response:", "ground_truth": "Oneway invocation.\n\n@param conn\n@param request\n@throws InterruptedException", "predict": "// Oneway method sends a RemotingCommand to the connection and listens for a ChannelFutureListener to complete."}, {"ID": 427, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def root(value = nil) if value @root = value else Utils::Kernel.Pathname(@root || Dir.pwd).realpath end end. \n### Response: The root of the application\n\n By default it returns the current directory, for this reason, **all the\n commands must be executed from the top level directory of the project**.\n\n If for some reason, that constraint above cannot be satisfied, please\n configure the root directory, so that commands can be executed from\n everywhere.\n\n This is part of a DSL, for this reason when this method is called with\n an argument, it will set the corresponding instance variable. When\n called without, it will return the already set value, or the default.\n\n @overload root(value)\n   Sets the given value\n   @param value [String,Pathname,#to_pathname] The root directory of the app\n\n @overload root\n   Gets the value\n   @return [Pathname]\n   @raise [Errno::ENOENT] if the path cannot be found\n\n @since 0.1.0\n\n @see http://www.ruby-doc.org/core/Dir.html#method-c-pwd\n\n @example Getting the value\n   require 'hanami'\n\n   module Bookshelf\n     class Application  #\n\n @example Setting the value\n   require 'hanami'\n\n   module Bookshelf\n     class Application < Hanami::Application\n       configure do\n         root '/path/to/another/root'\n       end\n     end\n   end.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static byte toByte(BitSet bs) { int value = 0; for (int i = 0; i < bs.length(); ++i) { if (bs.get(i)) { value += 1 << i; } } if (bs.length() > 7) { throw new IllegalArgumentException(\"The byte value \" + value + \" generated according to bit set \" + bs + \" is out of range, should be limited between [\" + Byte.MIN_VALUE + \"] to [\" + Byte.MAX_VALUE + \"]\"); } return (byte) value; } \n### Response:", "ground_truth": "from bit set to byte\n@param bs\n@return byte represent the bit set", "predict": "Generates the byte value according to a bit set\n\nThis method generates the byte value according to a given bit set, using a loop to iterate through each bit and its corresponding value. If the bit set is greater than 7, it throws an IllegalArgumentException with a message indicating that the byte value is out of range. Finally, it returns the generated byte value.\n\n@since 1.0.0\n\n@see BitSet\n\n@example Generates the byte value for a bit set of 0 to 6\n   BitSet bs = BitSet.of(0, 1, 2, 3, 4, 5, 6);\n   byte result = toByte(bs);\n   System.out.println(\"The byte value generated according to bit set \" + bs + \" is \" + result);\n\n@example Generates the byte value for a bit set of -128 to -125\n   BitSet bs = BitSet.of(-128, -127, -126, -125, -124, -123, -122, -121, -120, -119, -118, -117, -116, -115, -114, -113, -112, -111, -110, -109, -108, -107, -106, -105, -104, -103, -102, -101, -100, -99, -98, -97, -96, -95, -94, -93, -92, -91, -90, -89, -88, -87, -86, -85, -84, -83, -82, -81, -80, -79, -78, -77, -76, -75, -74, -73, -72, -71, -70, -69, -68, -67, -66, -65, -64, -63, -62, -61, -60, -59, -58, -57, -56, -55, -54, -53, -52, -51, -50, -49, -48, -47, -46, -45, -44, -43, -42, -41, -40, -39, -38, -37, -36, -35, -34, -33, -32, -31, -30, -29, -28, -27, -26, -25, -24, -23, -22, -21, -20, -19, -18, -17, -16, -15, -14, -13, -12, -11, -10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0);\n   byte result = toByte(bs);\n   System.out.println(\"The byte value generated according to bit set \" + bs + \" is \" + result);\n\n@end"}, {"ID": 428, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (hub *Hub) Broadcast(event string, data interface{}) { hub.broadcast <- &message{ event: event, data: data, } }. \n### Response: // Broadcast emits an event with data to ALL active connections..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static BitSet toBitSet(int value) { if (value > Byte.MAX_VALUE || value < Byte.MIN_VALUE) { throw new IllegalArgumentException( \"The value \" + value + \" is out of byte range, should be limited between [\" + Byte.MIN_VALUE + \"] to [\" + Byte.MAX_VALUE + \"]\"); } BitSet bs = new BitSet(); int index = 0; while (value != 0) { if (value % 2 != 0) { bs.set(index); } ++index; value = (byte) (value >> 1); } return bs; } \n### Response:", "ground_truth": "from byte to bit set\n@param value\n@return bit set represent the byte", "predict": "// Converts an integer value to a BitSet, ensuring the range of [0] to [2^32-1].."}, {"ID": 429, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void setEnabled(boolean enabled) { super.setEnabled(enabled); if (dayChooser != null) { dayChooser.setEnabled(enabled); monthChooser.setEnabled(enabled); yearChooser.setEnabled(enabled); } }. \n### Response: Enable or disable the JCalendar.\n\n@param enabled\nthe new enabled value.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void addReconnectTask(Url url) { ReconnectTask task = new ReconnectTask(); task.url = url; tasks.add(task); } \n### Response:", "ground_truth": "add reconnect task\n\n@param url", "predict": "Adds a new ReconnectTask to the tasks list.\n\n@param url\nthe new URL for the task.\n\n"}, {"ID": 430, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (t *TextView) ScrollToEnd() *TextView { if !t.scrollable { return t } t.trackEnd = true t.columnOffset = 0 return t }. \n### Response: // ScrollToEnd scrolls to the bottom left corner of the text if the text view\n// is scrollable. Adding new rows to the end of the text view will cause it to\n// scroll with the new data..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void stop() { if (!this.started) { return; } this.started = false; healConnectionThreads.interrupt(); this.tasks.clear(); this.canceled.clear(); } \n### Response:", "ground_truth": "stop reconnect thread", "predict": "// Stop the background healing thread and clear the started, tasks, and canceled flags.\n// This will prevent the healing thread from running again and prevent any new tasks from being started."}, {"ID": 431, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private function sendMail() { // check for configured mailer if(is_null($this->mailer) && !is_null(Application::getInstance()->getConfig()->mail->mailer)) { $mailer = Application::getInstance()->getConfig()->mail->mailer; $reflection = new \\ReflectionClass(str_replace('/', '\\\\', $mailer->class)); $port = isset($mailer->port) ? $mailer->port : null; $encryption = isset($mailer->encryption) ? $mailer->encryption : null; $this->mailer = $reflection->newInstanceArgs([$mailer->host, $port, $encryption]); if(isset($mailer->auth_type)) { $this->mailer->setCredentials($mailer->user, $mailer->pass, $mailer->auth_type); } else { $this->mailer->setCredentials($mailer->user, $mailer->pass); } } if(is_null($this->mailer)) { // use PHP's own mail() function $headers = []; foreach($this->headers as $k => $v) { $headers[] = iconv_mime_encode($k, $v); } mb_internal_encoding($this->encoding); // @todo ensure receiver to be RFC conforming return mail( implode(',', $this->receiver), mb_encode_mimeheader($this->subject, mb_internal_encoding(), 'Q'), $this->msg, implode(self::CRLF, $headers) ); } else { // send mail with configured mailer try { $this->mailer->connect(); $this->mailer->setFrom($this->sender); $this->mailer->setTo(array_merge((array) $this->receiver, $this->cc, $this->bcc)); $this->mailer->setHeaders(array_merge( [ 'To' => implode(',', (array) $this->receiver), 'Subject' => $this->subject ], $this->headers )); $this->mailer->setMessage($this->msg); $this->mailer->send(); $this->mailer->close(); return true; } catch(MailerException $e) { $this->mailer->close(); return $e->getMessage(); } } }. \n### Response: evaluate mailer class and send mail\n\n@return boolean\n@throws \\ReflectionException\n@throws \\vxPHP\\Application\\Exception\\ApplicationException.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected RemotingCommand toRemotingCommand(Object request, Connection conn, InvokeContext invokeContext, int timeoutMillis) throws SerializationException { RpcRequestCommand command = this.getCommandFactory().createRequestCommand(request); if (null != invokeContext) { // set client custom serializer for request command if not null Object clientCustomSerializer = invokeContext.get(InvokeContext.BOLT_CUSTOM_SERIALIZER); if (null != clientCustomSerializer) { try { command.setSerializer((Byte) clientCustomSerializer); } catch (ClassCastException e) { throw new IllegalArgumentException( \"Illegal custom serializer [\" + clientCustomSerializer + \"], the type of value should be [byte], but now is [\" + clientCustomSerializer.getClass().getName() + \"].\"); } } // enable crc by default, user can disable by set invoke context `false` for key `InvokeContext.BOLT_CRC_SWITCH` Boolean crcSwitch = invokeContext.get(InvokeContext.BOLT_CRC_SWITCH, ProtocolSwitch.CRC_SWITCH_DEFAULT_VALUE); if (null != crcSwitch && crcSwitch) { command.setProtocolSwitch(ProtocolSwitch .create(new int[] { ProtocolSwitch.CRC_SWITCH_INDEX })); } } else { // enable crc by default, if there is no invoke context. command.setProtocolSwitch(ProtocolSwitch .create(new int[] { ProtocolSwitch.CRC_SWITCH_INDEX })); } command.setTimeout(timeoutMillis); command.setRequestClass(request.getClass().getName()); command.setInvokeContext(invokeContext); command.serialize(); logDebugInfo(command); return command; } \n### Response:", "ground_truth": "Convert application request object to remoting request command.\n\n@param request\n@param conn\n@param timeoutMillis\n@return\n@throws CodecException", "predict": "This method is used to serialize a request command and return it to the client. It first checks if the invoke context is not null, and if so, it sets the client custom serializer for the command. It also enables crc by default if the user has set the `InvokeContext.BOLT_CRC_SWITCH` key to `false`. The command is then serialized, and the logDebugInfo method is used to print any debug information about the command. Finally, the command is returned to the client.\n\n@return RemotingCommand\n@throws SerializationException.\n\n"}, {"ID": 432, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void setUnavailableUntil(long time, boolean isInit) //PM01373 { if (com.ibm.ejs.ras.TraceComponent.isAnyTracingEnabled() && logger.isLoggable(Level.FINE)) logger.logp(Level.FINE, CLASS_NAME, \"setUnavailableUntil\", \"setUnavailableUntil() : \" + time); if(isInit){ state = UNINITIALIZED_STATE; //PM01373 } else { state = UNAVAILABLE_STATE; } unavailableUntil = time; evtSource.onServletUnavailableForService(getServletEvent()); }. \n### Response: Method setUnavailableUntil.\n\n@param time\n@param isInit.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public Map<String, List<Connection>> filter(List<Connection> connections) { List<Connection> serviceOnConnections = new ArrayList<Connection>(); List<Connection> serviceOffConnections = new ArrayList<Connection>(); Map<String, List<Connection>> filteredConnections = new ConcurrentHashMap<String, List<Connection>>(); for (Connection connection : connections) { String serviceStatus = (String) connection.getAttribute(Configs.CONN_SERVICE_STATUS); if (serviceStatus != null) { if (connection.isInvokeFutureMapFinish() && !freshSelectConnections.containsValue(connection)) { serviceOffConnections.add(connection); } } else { serviceOnConnections.add(connection); } } filteredConnections.put(Configs.CONN_SERVICE_STATUS_ON, serviceOnConnections); filteredConnections.put(Configs.CONN_SERVICE_STATUS_OFF, serviceOffConnections); return filteredConnections; } \n### Response:", "ground_truth": "Filter connections to monitor\n\n@param connections", "predict": "Method filter.\n\n@Override\npublic Map<String, List<Connection>> filter(List<Connection> connections) {\n//PM01066 - Implement the filter method using a for loop and the getAttribute method to retrieve the service status of each connection.\nList<Connection> serviceOnConnections = new ArrayList<Connection>();\nList<Connection> serviceOffConnections = new ArrayList<Connection>();\nMap<String, List<Connection>> filteredConnections = new ConcurrentHashMap<String, List<Connection>>();\nfor (Connection connection : connections) {\nString serviceStatus = (String) connection.getAttribute(Configs.CONN_SERVICE_STATUS);\nif (serviceStatus!= null) {\nif (connection.isInvokeFutureMapFinish() &&!freshSelectConnections.containsValue(connection)) {\nserviceOffConnections.add(connection);\n} else {\nserviceOnConnections.add(connection);\n}\n}\nfilteredConnections.put(Configs.CONN_SERVICE_STATUS_ON, serviceOnConnections);\nfilteredConnections.put(Configs.CONN_SERVICE_STATUS_OFF, serviceOffConnections);\n}\nreturn filteredConnections;\n}"}, {"ID": 433, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private boolean isValidTreeType(Tree t) { if (t instanceof LambdaExpressionTree) { return true; } if (t instanceof ClassTree) { NestingKind nestingKind = ASTHelpers.getSymbol((ClassTree) t).getNestingKind(); return nestingKind.equals(NestingKind.ANONYMOUS) || nestingKind.equals(NestingKind.LOCAL); } return false; }. \n### Response: Is t an anonymous inner class or a lambda?.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public void monitor(Map<String, RunStateRecordedFutureTask<ConnectionPool>> connPools) { try { if (null != connPools && !connPools.isEmpty()) { Iterator<Map.Entry<String, RunStateRecordedFutureTask<ConnectionPool>>> iter = connPools .entrySet().iterator(); while (iter.hasNext()) { Map.Entry<String, RunStateRecordedFutureTask<ConnectionPool>> entry = iter .next(); String poolKey = entry.getKey(); ConnectionPool pool = FutureTaskUtil.getFutureTaskResult(entry.getValue(), logger); List<Connection> connections = pool.getAll(); Map<String, List<Connection>> filteredConnectons = this.filter(connections); List<Connection> serviceOnConnections = filteredConnectons .get(Configs.CONN_SERVICE_STATUS_ON); List<Connection> serviceOffConnections = filteredConnectons .get(Configs.CONN_SERVICE_STATUS_OFF); if (serviceOnConnections.size() > CONNECTION_THRESHOLD) { Connection freshSelectConnect = serviceOnConnections.get(random .nextInt(serviceOnConnections.size())); freshSelectConnect.setAttribute(Configs.CONN_SERVICE_STATUS, Configs.CONN_SERVICE_STATUS_OFF); Connection lastSelectConnect = freshSelectConnections.remove(poolKey); freshSelectConnections.put(poolKey, freshSelectConnect); closeFreshSelectConnections(lastSelectConnect, serviceOffConnections); } else { if (freshSelectConnections.containsKey(poolKey)) { Connection lastSelectConnect = freshSelectConnections.remove(poolKey); closeFreshSelectConnections(lastSelectConnect, serviceOffConnections); } if (logger.isInfoEnabled()) { logger .info( \"the size of serviceOnConnections [{}] reached CONNECTION_THRESHOLD [{}].\", serviceOnConnections.size(), CONNECTION_THRESHOLD); } } for (Connection offConn : serviceOffConnections) { if (offConn.isFine()) { offConn.close(); } } } } } catch (Exception e) { logger.error(\"ScheduledDisconnectStrategy monitor error\", e); } } \n### Response:", "ground_truth": "Monitor connections and close connections with status is off\n\n@param connPools", "predict": "This method is used to monitor the connection pool of a ScheduledDisconnectStrategy. It checks if the connection pool is not empty and if the size of the connected connections is greater than the specified threshold. It then iterates through the connected connections and closes the fine connections if they are not fine. It also logs any errors that occur during the monitoring process. The method is marked with the @Override annotation, indicating that it is a override method of the protected monitor method in the ScheduledDisconnectStrategy class."}, {"ID": 434, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void removeCompositeComponentForResolver(FacesContext facesContext) { List<UIComponent> list = (List<UIComponent>) facesContext.getAttributes().get(CURRENT_COMPOSITE_COMPONENT_KEY); if (list != null) { list.remove(list.size()-1); } }. \n### Response: Removes the composite component from the attribute map of the FacesContext.\n@param facesContext.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private void closeFreshSelectConnections(Connection lastSelectConnect, List<Connection> serviceOffConnections) throws InterruptedException { if (null != lastSelectConnect) { if (lastSelectConnect.isInvokeFutureMapFinish()) { serviceOffConnections.add(lastSelectConnect); } else { Thread.sleep(RETRY_DETECT_PERIOD); if (lastSelectConnect.isInvokeFutureMapFinish()) { serviceOffConnections.add(lastSelectConnect); } else { if (logger.isInfoEnabled()) { logger.info(\"Address={} won't close at this schedule turn\", RemotingUtil.parseRemoteAddress(lastSelectConnect.getChannel())); } } } } } \n### Response:", "ground_truth": "close the connection of the fresh select connections\n\n@param lastSelectConnect\n@param serviceOffConnections\n@throws InterruptedException", "predict": "Closes any remaining fresh select connections.\n@param lastSelectConnect The last select connection.\n@param serviceOffConnections The list of off-connection connections to close.\n\nNote: This method is used to close any remaining fresh select connections after the last select connection has completed its execution. It uses the Thread.sleep() method to wait for a specified period before closing the connections. Additionally, it logs an error message if the last select connection is not in theInvokeFutureMapFinish state, indicating that it may not be closed at this schedule turn."}, {"ID": 435, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function getAltAttribute() { $data = unserialize($this->attributes['data']); return $data === false ? null : (isset($data['alt']) ? $data['alt'] : null); }. \n### Response: Add alt tag to model..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static boolean getBool(String key, String defaultValue) { return Boolean.parseBoolean(System.getProperty(key, defaultValue)); } \n### Response:", "ground_truth": "~~~ public helper methods to retrieve system property", "predict": "Add a description of the method to explain its purpose."}, {"ID": 436, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (m *ExpirationManager) emitMetrics() { m.pendingLock.RLock() num := len(m.pending) m.pendingLock.RUnlock() metrics.SetGauge([]string{\"expire\", \"num_leases\"}, float32(num)) // Check if lease count is greater than the threshold if num > maxLeaseThreshold { if atomic.LoadUint32(m.leaseCheckCounter) > 59 { m.logger.Warn(\"lease count exceeds warning lease threshold\") atomic.StoreUint32(m.leaseCheckCounter, 0) } else { atomic.AddUint32(m.leaseCheckCounter, 1) } } }. \n### Response: // emitMetrics is invoked periodically to emit statistics.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private void infoLog(String format, String addr) { if (logger.isInfoEnabled()) { if (StringUtils.isNotEmpty(addr)) { logger.info(format, addr); } else { logger.info(format, \"UNKNOWN-ADDR\"); } } } \n### Response:", "ground_truth": "print info log\n@param format\n@param addr", "predict": "// infoLog is a private method that logs information using the logger."}, {"ID": 437, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function _match (rule, cmtData) { var path = rule.subject.split('.'); var extracted = cmtData; while (path.length > 0) { var item = path.shift(); if (item === '') { continue; } if (extracted.hasOwnProperty(item)) { extracted = extracted[item]; } if (extracted === null || typeof extracted === 'undefined') { extracted = null; break; } } if (extracted === null) { // Null precondition implies anything return true; } switch (rule.op) { case '<': return extracted < rule.value; case '>': return extracted > rule.value; case '~': case 'regexp': return (new RegExp(rule.value)).test(extracted.toString()); case '=': case 'eq': return rule.value === ((typeof extracted === 'number') ? extracted : extracted.toString()); case '!': case 'not': return !_match(rule.value, extracted); case '&&': case 'and': if (Array.isArray(rule.value)) { return rule.value.every(function (r) { return _match(r, extracted); }); } else { return false; } case '||': case 'or': if (Array.isArray(rule.value)) { return rule.value.some(function (r) { return _match(r, extracted); }); } else { return false; } default: return false; } }. \n### Response: Matches a rule against an input that could be the full or a subset of\nthe comment data.\n\n@param rule - rule object to match\n@param cmtData - full or portion of comment data\n@return boolean indicator of match.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public boolean isRequestTimeout() { if (this.timeout > 0 && (this.rpcCommandType != RpcCommandType.REQUEST_ONEWAY) && (System.currentTimeMillis() - this.arriveTimestamp) > this.timeout) { return true; } return false; } \n### Response:", "ground_truth": "whether this request already timeout\n\n@return", "predict": "Provides a method to check if a request has expired due to a timeout.\n\n@return boolean indicator of whether the request has expired or not.\n\nNote: This method is only applicable for RPC requests and not for other types of requests."}, {"ID": 438, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function Complex(real, imaginary, parameters) { abstractions.Element.call(this, utilities.types.NUMBER, parameters); // normalize the values if (real === undefined || real === null || real === -0) { real = 0; } real = utilities.precision.lockOnExtreme(real); if (imaginary === undefined || imaginary === null || imaginary === -0) { imaginary = 0; } if (imaginary.getTypeId && imaginary.getTypeId() === utilities.types.ANGLE) { // convert polar to rectangular var magnitude = real; var phase = imaginary; if (magnitude < 0) { // normalize the magnitude magnitude = -magnitude; phase = Angle.inverse(phase); } real = magnitude * Angle.cosine(phase); imaginary = magnitude * Angle.sine(phase); } imaginary = utilities.precision.lockOnExtreme(imaginary); if (real.toString() === 'NaN' || imaginary.toString() === 'NaN') { real = NaN; imaginary = NaN; } else if (real === Infinity || real === -Infinity || imaginary === Infinity || imaginary === -Infinity) { real = Infinity; imaginary = Infinity; } this.getReal = function() { return real; }; this.getImaginary = function() { return imaginary; }; this.getMagnitude = function() { // need to preserve full precision on this except for the sum part var magnitude = Math.sqrt(utilities.precision.sum(Math.pow(real, 2), Math.pow(imaginary, 2))); magnitude = utilities.precision.lockOnExtreme(magnitude); return magnitude; }; this.getPhase = function() { if (this.isInfinite()) return new Angle(0); if (this.isUndefined()) return undefined; const phase = Angle.arctangent(imaginary, real); return phase; }; return this; }. \n### Response: PUBLIC CONSTRUCTORS \nThis constructor creates an immutable instance of a complex number using the specified\nreal and imaginary values.  If the imaginary value is an angle then the complex number\nis in polar form, otherwise it is in rectangular form.\n\n@constructor\n@param {Number} real The real value of the complex number.\n@param {Number|Angle} imaginary The imaginary value of the complex number.\n@param {Parameters} parameters Optional parameters used to parameterize this element.\n@returns {Complex} The new complex number..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public UserProcessor<?> getUserProcessor(String className) { return StringUtils.isBlank(className) ? null : this.userProcessors.get(className); } \n### Response:", "ground_truth": "Get user processor for class name.\n\n@param className\n@return", "predict": "Method comments:\n\n* This method retrieves a user processor for the specified className.\n* It returns null if the className is blank, otherwise it returns the value stored in the `userProcessors` property of the `UserProcessor` object.\n\n@method getUserProcessor\n@param {String} className The class name of the user processor to retrieve.\n@return {UserProcessor<?>} The user processor for the specified className or null if the className is blank.\n@details\nThis method retrieves a user processor for the specified className using the `get` method of the `userProcessors` property of the `UserProcessor` object. If the className is blank, it returns null. Otherwise, it retrieves the value stored in the `userProcessors` property and returns it.\n\n@see UserProcessor#getUserProcessor\n\n"}, {"ID": 439, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void setJobWatermark(SourceState state, String watermark) { state.setProp(ComplianceConfigurationKeys.HIVE_PURGER_WATERMARK, watermark); log.info(\"Setting job watermark for the job: \" + watermark); }. \n### Response: Sets Job Watermark in the SourceState which will be copied to all WorkUnitStates. Job Watermark is a complete partition name.\nDuring next run of this job, fresh work units will be created starting from this partition..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private Connection randomGet(List<Connection> conns) { if (null == conns || conns.isEmpty()) { return null; } int size = conns.size(); int tries = 0; Connection result = null; while ((result == null || !result.isFine()) && tries++ < MAX_TIMES) { result = conns.get(this.random.nextInt(size)); } if (result != null && !result.isFine()) { result = null; } return result; } \n### Response:", "ground_truth": "get one connection randomly\n\n@param conns\n@return", "predict": "This method retrieves a connection from a list of connections. It checks if the list is empty or not, and if so, returns null. It then calculates the size of the list and initializes a variable for the number of tries. It then iterates through the list and retrieves a connection using the random number generator. If the connection is found, it checks if it is fine and if so, returns it. If the connection is not found or if it is not fine, it returns null."}, {"ID": 440, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public List<MonitorInfo> getMonitorLockedElements(final ThreadInfo threadInfo, final StackTraceElement stackTraceElement) { final Map<StackTraceElement, List<MonitorInfo>> elementMap = monitorLockedElements.get(threadInfo); if (null == elementMap) { return Collections.EMPTY_LIST; } final List<MonitorInfo> monitorList = elementMap.get(stackTraceElement); if (null == monitorList) { return Collections.EMPTY_LIST; } return monitorList; }. \n### Response: Get a list of monitor locks that were acquired by this thread at this stack element.\n@param threadInfo The thread that created the stack element\n@param stackTraceElement The stack element\n@return List of monitor locks that were acquired by this thread at this stack element\nor an empty list if none were acquired.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @SuppressWarnings(\"unchecked\") public <T> T get(String key, T defaultIfNotFound) { return this.context.get(key) != null ? (T) this.context.get(key) : defaultIfNotFound; } \n### Response:", "ground_truth": "get and use default if not found\n\n@param key\n@param defaultIfNotFound\n@param \n@return", "predict": "Get the value of a key in the context.\n\n@param key The key to look up\n@return The value of the key in the context\nor the default value if the key is not found.\n\nNote: This method uses the context to look up the value of the key, and it checks whether the context has a value for the key before returning the value. This is to avoid null pointer exceptions and ensure that the method returns the correct value."}, {"ID": 441, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def list_vulns(full = false) xml = make_xml('VulnerabilityListingRequest') # TODO: Add a flag to do stream parsing of the XML to improve performance. response = execute(xml, '1.2') vulns = [] if response.success response.res.elements.each('VulnerabilityListingResponse/VulnerabilitySummary') do |vuln| if full vulns << XML::VulnerabilitySummary.parse(vuln) else vulns << XML::Vulnerability.new(vuln.attributes['id'], vuln.attributes['title'], vuln.attributes['severity'].to_i) end end end vulns end. \n### Response: Retrieve summary details of all vulnerabilities.\n\n @param [Boolean] full Whether or not to gather the full summary.\n   Without the flag, only id, title, and severity are returned.\n   It can take twice a long to retrieve full summary information.\n @return [Array[Vulnerability|VulnerabilitySummary]] Collection of all known vulnerabilities..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public String getProperty(String key) { if (properties == null) { return null; } return properties.getProperty(key); } \n### Response:", "ground_truth": "Get property value according to property key\n\n@param key\n@return property value", "predict": "Retrieves a specific property from the properties object.\n\n @param [String] key The property to retrieve.\n @return [String]] The value of the specified property.\n\n"}, {"ID": 442, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (s *Option) SetOptionDescription(v string) *Option { s.OptionDescription = &v return s }. \n### Response: // SetOptionDescription sets the OptionDescription field's value..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static Object resolveResponseObject(ResponseCommand responseCommand, String addr) throws RemotingException { preProcess(responseCommand, addr); if (responseCommand.getResponseStatus() == ResponseStatus.SUCCESS) { return toResponseObject(responseCommand); } else { String msg = String.format(\"Rpc invocation exception: %s, the address is %s, id=%s\", responseCommand.getResponseStatus(), addr, responseCommand.getId()); logger.warn(msg); if (responseCommand.getCause() != null) { throw new InvokeException(msg, responseCommand.getCause()); } else { throw new InvokeException(msg + \", please check the server log for more.\"); } } } \n### Response:", "ground_truth": "Analyze the response command and generate the response object.\n\n@param responseCommand response command\n@param addr response address\n@return response object", "predict": "// resolveResponseObject retrieves the response object from the server and returns it.."}, {"ID": 443, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static Duration formattedStringToDuration(final String formattedDuration) { if (formattedDuration == null) { return null; } final TemporalAccessor ta = DateTimeFormatter.ofPattern(DURATION_FORMAT).parse(formattedDuration.trim()); return Duration.between(LocalTime.MIDNIGHT, LocalTime.from(ta)); }. \n### Response: Converts a formatted String into a Duration object.\n\n@param formattedDuration\nString in {@link #DURATION_FORMAT}\n@return duration\n@throws DateTimeParseException\nwhen String is in wrong format.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private static Object toResponseObject(ResponseCommand responseCommand) throws CodecException { RpcResponseCommand response = (RpcResponseCommand) responseCommand; response.deserialize(); return response.getResponseObject(); } \n### Response:", "ground_truth": "Convert remoting response command to application response object.", "predict": "Deserializes the response command and returns the response object.\n\n@param responseCommand\nResponse command\n@return response object\n@throws CodecException\nwhen Codec is not supported.\n\n"}, {"ID": 444, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected function validateInstallerInstall() { $handlers = $this->install->getHandlers(); if (count($handlers) >= 2) { $options = array(); foreach ($handlers as $id => $handler) { $options[$id] = $handler['title']; } $input = $this->menu($options, 'default', $this->text('Installation profile (enter a number)')); if (!$this->isValidInput($input, 'installer', 'install')) { $this->errors(); $this->validateInstallerInstall(); } } }. \n### Response: Validates installation profile input.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private static Throwable toThrowable(ResponseCommand responseCommand) throws CodecException { RpcResponseCommand resp = (RpcResponseCommand) responseCommand; resp.deserialize(); Object ex = resp.getResponseObject(); if (ex != null && ex instanceof Throwable) { return (Throwable) ex; } return null; } \n### Response:", "ground_truth": "Convert remoting response command to throwable if it is a throwable, otherwise return null.", "predict": "Returns null if the response cannot be deserialized or if there is an exception."}, {"ID": 445, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function md5_16($string) { $tmp = md5($string); $out = ''; for ($i = 0; $i <= 30; $i = $i + 2) { $out .= chr(hexdec(substr($tmp, $i, 2))); } return $out; }. \n### Response: calculate the 16 byte version of the 128 bit md5 digest of the string\n\n@param $string\n@return string.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private static String detailErrMsg(String clientErrMsg, ResponseCommand responseCommand) { RpcResponseCommand resp = (RpcResponseCommand) responseCommand; if (StringUtils.isNotBlank(resp.getErrorMsg())) { return String.format(\"%s, ServerErrorMsg:%s\", clientErrMsg, resp.getErrorMsg()); } else { return String.format(\"%s, ServerErrorMsg:null\", clientErrMsg); } } \n### Response:", "ground_truth": "Detail your error msg with the error msg returned from response command", "predict": "This method is used to retrieve the detailed error message for a given client error message and response command. It first retrieves the client error message from the response command using the `getErrorMsg()` method. If the error message is not blank, it formats it as a string and returns it. Otherwise, it formats it as a string and returns it as is. This method is useful for debugging and troubleshooting specific issues with a given client error message and response command.\n\n@param clientErrMsg\n@param responseCommand\n@return detailed error message."}, {"ID": 446, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public Collection<PluginComponent> list(List<String> queryParams) { return HTTP.GET(\"/v2/components.json\", null, queryParams, PLUGIN_COMPONENTS).get(); }. \n### Response: Returns the set of plugin components with the given query parameters.\n@param queryParams The query parameters\n@return The set of plugin components.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private RpcServerException createServerException(Throwable t, String errMsg) { String formattedErrMsg = String.format( \"[Server]OriginErrorMsg: %s: %s. AdditionalErrorMsg: %s\", t.getClass().getName(), t.getMessage(), errMsg); RpcServerException e = new RpcServerException(formattedErrMsg); e.setStackTrace(t.getStackTrace()); return e; } \n### Response:", "ground_truth": "create server exception using error msg and fill the stack trace using the stack trace of throwable.\n\n@param t the origin throwable to fill the stack trace of rpc server exception\n@param errMsg additional error msg, null is allowed\n@return an instance of RpcServerException", "predict": "Creates an RpcServerException with the given origin error message, class name, message, and stack trace.\n\n@param t The throwable\n@param errMsg The error message\n@return The new RpcServerException with the given information."}, {"ID": 447, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func SleepRaw(ctx context.Context, body []byte) ([]byte, error) { time.Sleep(1 * time.Second) return nil, nil }. \n### Response: // SleepRaw responds to raw requests over any transport by sleeping for one\n// second..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void printConnectionTraceLog(Logger logger, String traceId, InvokeContext invokeContext) { String sourceIp = invokeContext.get(InvokeContext.CLIENT_LOCAL_IP); Integer sourcePort = invokeContext.get(InvokeContext.CLIENT_LOCAL_PORT); String targetIp = invokeContext.get(InvokeContext.CLIENT_REMOTE_IP); Integer targetPort = invokeContext.get(InvokeContext.CLIENT_REMOTE_PORT); StringBuilder logMsg = new StringBuilder(); logMsg.append(traceId).append(\",\"); logMsg.append(sourceIp).append(\",\"); logMsg.append(sourcePort).append(\",\"); logMsg.append(targetIp).append(\",\"); logMsg.append(targetPort); if (logger.isInfoEnabled()) { logger.info(logMsg.toString()); } } \n### Response:", "ground_truth": "print trace log\n@param traceId\n@param invokeContext", "predict": "// Prints connection trace log for a client, including client local IP, local port,\n// remote IP, and remote port."}, {"ID": 448, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def delimiters_to_re(delimiters): \"\"\"convert delimiters to corresponding regular expressions\"\"\" # caching delimiters = tuple(delimiters) if delimiters in re_delimiters: re_tag = re_delimiters[delimiters] else: open_tag, close_tag = delimiters # escape open_tag = ''.join([c if c.isalnum() else '\\\\' + c for c in open_tag]) close_tag = ''.join([c if c.isalnum() else '\\\\' + c for c in close_tag]) re_tag = re.compile(open_tag + r'([#^>&{/!=]?)\\s*(.*?)\\s*([}=]?)' + close_tag, re.DOTALL) re_delimiters[delimiters] = re_tag return re_tag. \n### Response: convert delimiters to corresponding regular expressions.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static EventLoopGroup newEventLoopGroup(int nThreads, ThreadFactory threadFactory) { return epollEnabled ? new EpollEventLoopGroup(nThreads, threadFactory) : new NioEventLoopGroup(nThreads, threadFactory); } \n### Response:", "ground_truth": "Create the right event loop according to current platform and system property, fallback to NIO when epoll not enabled.\n\n@param nThreads\n@param threadFactory\n@return an EventLoopGroup suitable for the current platform", "predict": "This method creates an EventLoopGroup using the Epoll or Nio event loop manager, depending on whether epollEnabled is true or false. It returns the created EventLoopGroup, which can be used to manage the event loop."}, {"ID": 449, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: boolean isAggregatedQuery() { if (kunderaQuery.getSelectStatement() != null) { Expression exp = ((SelectClause) kunderaQuery.getSelectStatement().getSelectClause()).getSelectExpression(); return AggregateFunction.class.isAssignableFrom(exp.getClass()); } else { return false; } }. \n### Response: Checks if is aggregated query.\n\n@return true, if is aggregated query.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String parseRemoteAddress(final Channel channel) { if (null == channel) { return StringUtils.EMPTY; } final SocketAddress remote = channel.remoteAddress(); return doParse(remote != null ? remote.toString().trim() : StringUtils.EMPTY); } \n### Response:", "ground_truth": "Parse the remote address of the channel.\n\n@param channel\n@return", "predict": "This method parses the remote address of a channel.\n\n@param channel The channel to parse the remote address of.\n@return The parsed remote address or StringUtils.EMPTY if the channel is null.\n\nThis method is useful for parsing the remote address of a channel. It first checks if the channel is null, and if so, returns StringUtils.EMPTY. If the channel is not null, it retrieves the remote address of the channel using its remoteAddress() method and returns the parsed remote address or StringUtils.EMPTY if the remote address is null or cannot be parsed. The doParse() method is used to parse the remote address if it can be parsed."}, {"ID": 450, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def set_author(self, name: str, icon_url: str = None, url: str = None) -> \\ None: \"\"\" Sets the author of the embed. Parameters ---------- name: str The author's name. icon_url: str, optional URL for the author's icon. url: str, optional URL hyperlink for the author. \"\"\" self.author = { 'name': name, 'icon_url': icon_url, 'url': url }. \n### Response: Sets the author of the embed.\n\n        Parameters\n        ----------\n        name: str\n            The author's name.\n\n        icon_url: str, optional\n            URL for the author's icon.\n\n        url: str, optional\n            URL hyperlink for the author..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String parseLocalAddress(final Channel channel) { if (null == channel) { return StringUtils.EMPTY; } final SocketAddress local = channel.localAddress(); return doParse(local != null ? local.toString().trim() : StringUtils.EMPTY); } \n### Response:", "ground_truth": "Parse the local address of the channel.\n\n@param channel\n@return", "predict": "parseLocalAddress(channel)\n```java\npublic static String parseLocalAddress(final Channel channel) {\n    if (null == channel) {\n        return StringUtils.EMPTY;\n    }\n    final SocketAddress local = channel.localAddress();\n    return doParse(local!= null? local.toString().trim() : StringUtils.EMPTY);\n}\n```\n\nThis method parses the local address of a channel.\n\nParameters\n----------\n\n* channel: Channel object\n\nReturns\n-------\n\n* String\n\ndoParse(optional)\n```java\npublic static String doParse(final String input) {\n    if (input == null || input.isEmpty()) {\n        return StringUtils.EMPTY;\n    }\n    // parse the local address\n    //...\n    return input;\n}\n```\nThis method does not provide any comments."}, {"ID": 451, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def Analyze(self, data): \"\"\"Analyzes a block of data, attempting to match Yara rules to it. Args: data(bytes): a block of data. \"\"\" if not self._rules: return try: self._matches = self._rules.match(data=data, timeout=self._MATCH_TIMEOUT) except yara.YaraTimeoutError: logger.error('Could not process file within timeout: {0:d}'.format( self._MATCH_TIMEOUT)) except yara.YaraError as exception: logger.error('Error processing file with Yara: {0!s}.'.format( exception)). \n### Response: Analyzes a block of data, attempting to match Yara rules to it.\n\n    Args:\n      data(bytes): a block of data..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String parseRemoteIP(final Channel channel) { if (null == channel) { return StringUtils.EMPTY; } final InetSocketAddress remote = (InetSocketAddress) channel.remoteAddress(); if (remote != null) { return remote.getAddress().getHostAddress(); } return StringUtils.EMPTY; } \n### Response:", "ground_truth": "Parse the remote host ip of the channel.\n\n@param channel\n@return", "predict": "parseRemoteIP():\n```\n* Analyzes the remote IP address of a channel.\n* If the channel is null, returns StringUtils.EMPTY.\n* If the channel is not an InetSocketAddress, returns null.\n* If the channel has a remote address, returns the remote address's host address.\n* If the remote address is null, returns StringUtils.EMPTY.\n```\n"}, {"ID": 452, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public SourceSnippet createConstructorInjection( MethodLiteral<?, Constructor<?>> constructor, NameGenerator nameGenerator, List<InjectorMethod> methodsOutput) throws NoSourceNameException { return createMethodCallWithInjection(constructor, null, nameGenerator, methodsOutput); }. \n### Response: Creates a constructor injecting method and returns a string that invokes\nthe new method.  The new method returns the constructed object.\n\n@param constructor constructor to call\n@param nameGenerator NameGenerator to be used for ensuring method name uniqueness\n@param methodsOutput a list where all new methods created by this\ncall are added\n@return source snippet calling the generated method.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String parseRemoteHostName(final Channel channel) { if (null == channel) { return StringUtils.EMPTY; } final InetSocketAddress remote = (InetSocketAddress) channel.remoteAddress(); if (remote != null) { return remote.getAddress().getHostName(); } return StringUtils.EMPTY; } \n### Response:", "ground_truth": "Parse the remote hostname of the channel.\n\nNote: take care to use this method, for a reverse name lookup takes uncertain time in {@link InetAddress#getHostName}.\n\n@param channel\n@return", "predict": "This method parses the remote host name of a channel.\n\n@param channel Channel to check for the remote host name\n@return The remote host name of the channel\n\nThis method is useful for checking if a channel has a remote host name and returning it if it does, or StringUtils.EMPTY if it doesn't."}, {"ID": 453, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private function handleBuffer($buffer) { $error = error_get_last(); if ( $error ) { $matches = []; preg_match('/\\: (.*) in /', $error['message'], $matches); $message = key_exists(1, $matches) ? $matches[1] : $error['message']; /* @var $response \\PowerOn\\Network\\Response */ $response = $this->_container['Response']; if ( DEV_ENVIRONMENT ) { $response->setHeader(500); return '<header>' . '<h1>Error: ' . $message . '</h1>' . '<h2>' . $error['file'] . ' (' . $error['line'] . ')</h2>' . '</header>'; } else { /* @var $logger \\Monolog\\Logger */ $logger = $this->_container['Logger']; $logger->error($message, [ 'type' => $error['type'], 'file' => $error['file'], 'line' => $error['line'] ]); /* @var $router \\AltoRouter */ $router = $this->_container['AltoRouter']; $response->redirect( $router->generate('poweron_error', ['error' => 500]) ); } } return $buffer; }. \n### Response: Controla el flujo de una plantilla y procesa los errores en caso de encontrarlos\n@param string $buffer El flujo resultante\n@return string el flujo.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String parseLocalIP(final Channel channel) { if (null == channel) { return StringUtils.EMPTY; } final InetSocketAddress local = (InetSocketAddress) channel.localAddress(); if (local != null) { return local.getAddress().getHostAddress(); } return StringUtils.EMPTY; } \n### Response:", "ground_truth": "Parse the local host ip of the channel.\n\n@param channel\n@return", "predict": "Utilize la comilla \".\" para escapar el efecto de reemploar el idioma en el if/else.\n\nUtilize la comilla \".\" para escapar el efecto de reemploar el idioma en el if/else.\n\nUtilize la comilla \".\" para escapar el efecto de reemploar el idioma en el if/else.\n\nUtilize la comilla \".\" para escapar el efecto de reemploar el idioma en el if/else.\n\nUtilize la comilla \".\" para escapar el efecto de reemploar el idioma en el if/else.\n\nUtilize la comilla \".\" para escapar el efecto de reemploar el idioma en el if/else.\n\nUtilize la comilla \".\" para escapar el efecto de reemploar el idioma en el if/else.\n\nUtilize la comilla \".\" para escapar el efecto de reemploar el idioma en el if/else.\n\nUtilize la comilla \".\" para escapar el efecto de reemploar el idioma en el if/else.\n\nUtilize la comilla \".\" para escapar el efecto de reemploar el idioma en el if/else."}, {"ID": 454, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func buildSignalToRankFunc(withImageFs bool) map[evictionapi.Signal]rankFunc { signalToRankFunc := map[evictionapi.Signal]rankFunc{ evictionapi.SignalMemoryAvailable: rankMemoryPressure, evictionapi.SignalAllocatableMemoryAvailable: rankMemoryPressure, evictionapi.SignalPIDAvailable: rankPIDPressure, } // usage of an imagefs is optional if withImageFs { // with an imagefs, nodefs pod rank func for eviction only includes logs and local volumes signalToRankFunc[evictionapi.SignalNodeFsAvailable] = rankDiskPressureFunc([]fsStatsType{fsStatsLogs, fsStatsLocalVolumeSource}, v1.ResourceEphemeralStorage) signalToRankFunc[evictionapi.SignalNodeFsInodesFree] = rankDiskPressureFunc([]fsStatsType{fsStatsLogs, fsStatsLocalVolumeSource}, resourceInodes) // with an imagefs, imagefs pod rank func for eviction only includes rootfs signalToRankFunc[evictionapi.SignalImageFsAvailable] = rankDiskPressureFunc([]fsStatsType{fsStatsRoot}, v1.ResourceEphemeralStorage) signalToRankFunc[evictionapi.SignalImageFsInodesFree] = rankDiskPressureFunc([]fsStatsType{fsStatsRoot}, resourceInodes) } else { // without an imagefs, nodefs pod rank func for eviction looks at all fs stats. // since imagefs and nodefs share a common device, they share common ranking functions. signalToRankFunc[evictionapi.SignalNodeFsAvailable] = rankDiskPressureFunc([]fsStatsType{fsStatsRoot, fsStatsLogs, fsStatsLocalVolumeSource}, v1.ResourceEphemeralStorage) signalToRankFunc[evictionapi.SignalNodeFsInodesFree] = rankDiskPressureFunc([]fsStatsType{fsStatsRoot, fsStatsLogs, fsStatsLocalVolumeSource}, resourceInodes) signalToRankFunc[evictionapi.SignalImageFsAvailable] = rankDiskPressureFunc([]fsStatsType{fsStatsRoot, fsStatsLogs, fsStatsLocalVolumeSource}, v1.ResourceEphemeralStorage) signalToRankFunc[evictionapi.SignalImageFsInodesFree] = rankDiskPressureFunc([]fsStatsType{fsStatsRoot, fsStatsLogs, fsStatsLocalVolumeSource}, resourceInodes) } return signalToRankFunc }. \n### Response: // buildSignalToRankFunc returns ranking functions associated with resources.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static int parseRemotePort(final Channel channel) { if (null == channel) { return -1; } final InetSocketAddress remote = (InetSocketAddress) channel.remoteAddress(); if (remote != null) { return remote.getPort(); } return -1; } \n### Response:", "ground_truth": "Parse the remote host port of the channel.\n\n@param channel\n@return int", "predict": "// parseRemotePort parses the remote port associated with a Channel."}, {"ID": 455, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function executeCallback($cb, array $args = [], $filter = false) { if ($cb instanceof Closure) { return call_user_func_array($cb, $args); } if (is_string($cb) && strpos($cb, \"@\") !== false) { $cb = explode('@', $cb); } if (is_array($cb) && count($cb) == 2) { if (!is_object($cb[0])) { $cb = $this->resolveCallback($cb); } if (isset($cb[0], $cb[1]) && is_object($cb[0]) && !method_exists($cb[0], $cb[1])) { $name = get_class($cb[0]); throw new ControllerNotFoundException(\"Controller '{$name}->{$cb[1]}' not found\"); } return call_user_func_array($cb, $args); } if (is_string($cb) && strpos($cb, \"::\") !== false) { return call_user_func_array($cb, $args); } throw new Exception('Invalid callback'); }. \n### Response: Execute a callback\n\n@param  mixed   $cb\n@param  array   $args\n@param  boolean $filter Set if the callback is a filter or not\n\n@return mixed\n\n@throws Exception If the filter is unknown\n@throws Exception If the callback isn't in one of the accepted formats.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static int parseLocalPort(final Channel channel) { if (null == channel) { return -1; } final InetSocketAddress local = (InetSocketAddress) channel.localAddress(); if (local != null) { return local.getPort(); } return -1; } \n### Response:", "ground_truth": "Parse the local host port of the channel.\n\n@param channel\n@return int", "predict": "Parse the local port of a channel\n\n@param  Channel   $channel\n\n@return int\n\n@throws Exception If the channel is null or if the local address or port is not an InetSocketAddress."}, {"ID": 456, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private String readMessage(String pFileName) { try { // Read resource from web app InputStream is = getServletContext().getResourceAsStream(pFileName); if (is != null) { return new String(FileUtil.read(is)); } else { log(\"File not found: \" + pFileName); } } catch (IOException ioe) { log(\"Error reading file: \" + pFileName + \" (\" + ioe.getMessage() + \")\"); } return null; }. \n### Response: Reads the response message from a file in the current web app.\n\n@param pFileName\n@return the message.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String parseSocketAddressToHostIp(SocketAddress socketAddress) { final InetSocketAddress addrs = (InetSocketAddress) socketAddress; if (addrs != null) { InetAddress addr = addrs.getAddress(); if (null != addr) { return addr.getHostAddress(); } } return StringUtils.EMPTY; } \n### Response:", "ground_truth": "Parse the host ip of socket address.\n\ne.g. /127.0.0.1:1234 -> 127.0.0.1\n\n@param socketAddress\n@return String", "predict": "parseSocketAddressToHostIp(): This method parses a SocketAddress object to its corresponding InetSocketAddress object and returns the host IP address if it can be found, or StringUtils.EMPTY if it cannot be found.\n\n@param socketAddress\n@return the host IP address."}, {"ID": 457, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public synchronized PacketBuilder withBoolean(final boolean b) { checkBuilt(); try { dataOutputStream.writeBoolean(b); } catch (final IOException e) { logger.error(\"Unable to add boolean: {} : {}\", e.getClass(), e.getMessage()); } return this; }. \n### Response: Adds a boolean\n@param b Boolean\n@throws IllegalStateException see {@link #checkBuilt()}.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void add(Connection connection) { markAccess(); if (null == connection) { return; } boolean res = this.conns.addIfAbsent(connection); if (res) { connection.increaseRef(); } } \n### Response:", "ground_truth": "add a connection\n\n@param connection", "predict": "Adds a connection to the database\n@param connection Connection to add\n@return True if the connection was added successfully, False otherwise\n@throws IllegalStateException see {@link #markAccess()} and {@link #conns}."}, {"ID": 458, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void string2Writer(String source, Writer out) throws IOException { char[] buffer = source.toCharArray(); for (int i = 0; i < buffer.length; i++) { out.append(buffer[i]); } out.flush(); }. \n### Response: String 2 writer.\n\n@param source the source\n@param out the out\n@throws IOException Signals that an I/O exception has occurred..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void removeAndTryClose(Connection connection) { if (null == connection) { return; } boolean res = this.conns.remove(connection); if (res) { connection.decreaseRef(); } if (connection.noRef()) { connection.close(); } } \n### Response:", "ground_truth": "removeAndTryClose a connection\n\n@param connection", "predict": "Method to remove a connection and try to close it.\n\n@param connection the connection to be removed\n\nThis method first checks if the given connection is null, and if so, it returns immediately. If the connection is not null, it calls the `remove` method on the `conns` collection and then checks if the result is true. If it is, it calls the `decreaseRef` method on the connection to decrement its reference count, and then it calls the `close` method on the connection to finally close it."}, {"ID": 459, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def deparent_unreachable( reachable, shared ): \"\"\"Eliminate all parent-links from unreachable objects from reachable objects \"\"\" for id,shares in shared.iteritems(): if id in reachable: # child is reachable filtered = [ x for x in shares if x in reachable # only those parents which are reachable ] if len(filtered) != len(shares): shares[:] = filtered. \n### Response: Eliminate all parent-links from unreachable objects from reachable objects.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public Connection get() { markAccess(); if (null != this.conns) { List<Connection> snapshot = new ArrayList<Connection>(this.conns); if (snapshot.size() > 0) { return this.strategy.select(snapshot); } else { return null; } } else { return null; } } \n### Response:", "ground_truth": "get a connection\n\n@return", "predict": "This method retrieves a connection from the database and returns it if it is not null. It first marks the access method to indicate that it is being accessed. If the conns list is not null, it creates a new ArrayList of connections and then checks if any of the connections in the snapshot list are present. If they are, it returns the selected connection. If not, it returns null. This method is useful for selecting a single connection from the snapshot list, rather than returning all of the connections in the list."}, {"ID": 460, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public com.google.api.ads.admanager.axis.v201808.DeviceCapabilityTargeting getDeviceCapabilityTargeting() { return deviceCapabilityTargeting; }. \n### Response: Gets the deviceCapabilityTargeting value for this TechnologyTargeting.\n\n@return deviceCapabilityTargeting   * The device capabilities being targeted by the {@link LineItem}..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void registerCustomSerializer(String className, CustomSerializer serializer) { CustomSerializer prevSerializer = classCustomSerializer.putIfAbsent(className, serializer); if (prevSerializer != null) { throw new RuntimeException(\"CustomSerializer has been registered for class: \" + className + \", the custom serializer is: \" + prevSerializer.getClass().getName()); } } \n### Response:", "ground_truth": "Register custom serializer for class name.\n\n@param className\n@param serializer\n@return", "predict": "Registers a custom serializer for the specified class.\n\n@param className   * The class to register the custom serializer for.\n@param serializer  * The custom serializer to be registered.\n\n@try {\n    // Register the custom serializer\n} catch (Exception e) {\n    // Throw an exception if the custom serializer cannot be registered\n    throw new RuntimeException(\"CustomSerializer has been registered for class: \" + className + \", the custom serializer is: \" + prevSerializer.getClass().getName(), e);\n}\n\n@return None\n\nThis method registers a custom serializer for the specified class. If the custom serializer has already been registered for the class, it will not be updated. If the custom serializer cannot be registered, an exception will be thrown. The method also checks if the custom serializer has already been registered for the class before trying to register it again."}, {"ID": 461, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def to_pandas(self, columns=None): # pylint: disable=import-error \"\"\" Converts sequence to a pandas DataFrame using pandas.DataFrame.from_records :param columns: columns for pandas to use :return: DataFrame of sequence \"\"\" import pandas return pandas.DataFrame.from_records(self.to_list(), columns=columns). \n### Response: Converts sequence to a pandas DataFrame using pandas.DataFrame.from_records\n\n        :param columns: columns for pandas to use\n        :return: DataFrame of sequence.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static CustomSerializer getCustomSerializer(String className) { if (!classCustomSerializer.isEmpty()) { return classCustomSerializer.get(className); } return null; } \n### Response:", "ground_truth": "Get the custom serializer for class name.\n\n@param className\n@return", "predict": "This method returns the custom serializer for the specified class, if it exists, otherwise it returns null.\n\n        :param className: class to find the custom serializer for\n        :return: custom serializer for the specified class, or null if not found.\n\n"}, {"ID": 462, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (r *RoutesService) CreateWithContext(ctx context.Context, route *Route) (*Route, *http.Response, error) { resource, _ := url.Parse(routesResourcePath) req, err := r.client.NewRequest(ctx, http.MethodPost, resource, route) if err != nil { return nil, nil, err } root := new(Route) res, err := r.client.Do(req, root) if err != nil { return nil, res, err } return root, res, nil }. \n### Response: // CreateWithContext creates a new route..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void registerCustomSerializer(CommandCode code, CustomSerializer serializer) { CustomSerializer prevSerializer = commandCustomSerializer.putIfAbsent(code, serializer); if (prevSerializer != null) { throw new RuntimeException(\"CustomSerializer has been registered for command code: \" + code + \", the custom serializer is: \" + prevSerializer.getClass().getName()); } } \n### Response:", "ground_truth": "Register custom serializer for command code.\n\n@param code\n@param serializer\n@return", "predict": "// RegisterCustomSerializer registers a custom serializer for a given command code.."}, {"ID": 463, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static function connect($route, $defaults = [], $options = []) { static::$initialized = true; static::scope('/', function ($routes) use ($route, $defaults, $options) { /** @var \\Cake\\Routing\\RouteBuilder $routes */ $routes->connect($route, $defaults, $options); }); }. \n### Response: Connects a new Route in the router.\n\nCompatibility proxy to \\Cake\\Routing\\RouteBuilder::connect() in the `/` scope.\n\n@param string $route A string describing the template of the route\n@param array|string $defaults An array describing the default route parameters. These parameters will be used by default\nand can supply routing parameters that are not dynamic. See above.\n@param array $options An array matching the named elements in the route to regular expressions which that\nelement should match. Also contains additional parameters such as which routed parameters should be\nshifted into the passed arguments, supplying patterns for routing parameters and supplying the name of a\ncustom routing class.\n@return void\n@throws \\Cake\\Core\\Exception\\Exception\n@see \\Cake\\Routing\\RouteBuilder::connect()\n@see \\Cake\\Routing\\Router::scope().\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static CustomSerializer getCustomSerializer(CommandCode code) { if (!commandCustomSerializer.isEmpty()) { return commandCustomSerializer.get(code); } return null; } \n### Response:", "ground_truth": "Get the custom serializer for command code.\n\n@param code\n@return", "predict": "Returns the default custom serializer for the given command code.\n\nCompatibility proxy to \\Cake\\Component\\Command\\CustomSerializer::get() in the `getCustomSerializer()` scope.\n\n@param string $code A string describing the command code\n@return \\Cake\\Component\\Command\\CustomSerializer The default custom serializer for the given command code or null if no default custom serializer is found.\n@throws \\Cake\\Core\\Exception\\Exception\n@see \\Cake\\Component\\Command\\CustomSerializer::get()\n@see \\Cake\\Component\\Command\\CustomSerializer::getCustomSerializer()."}, {"ID": 464, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function moveApiAction(Request $request) { $serializer = $this->get('campaignchain.core.serializer.default'); $responseData = array(); $id = $request->request->get('id'); $newDue = new \\DateTime($request->request->get('start_date')); $milestoneService = $this->get('campaignchain.core.milestone'); $milestone = $milestoneService->getMilestone($id); $responseData['id'] = $milestone->getId(); $oldDue = clone $milestone->getStartDate(); $responseData['old_due_date'] = $oldDue->format(\\DateTime::ISO8601); // Calculate time difference. // TODO: Check whether start = end date. $interval = $milestone->getStartDate()->diff($newDue); $responseData['interval']['object'] = json_encode($interval, true); $responseData['interval']['string'] = $interval->format(self::FORMAT_DATEINTERVAL); // Set new due date. $milestone = $milestoneService->moveMilestone($milestone, $interval); $responseData['new_due_date'] = $milestone->getStartDate()->format(\\DateTime::ISO8601); $em = $this->getDoctrine()->getManager(); $em->flush(); return new Response($serializer->serialize($responseData, 'json')); }. \n### Response: Move a Milestone to a new start date.\n\n@ApiDoc(\nsection = \"Core\",\nviews = { \"private\" },\nrequirements={\n{\n\"name\"=\"id\",\n\"description\" = \"Milestone ID\",\n\"requirement\"=\"\\d+\"\n},\n{\n\"name\"=\"start_date\",\n\"description\" = \"Start date in ISO8601 format\",\n\"requirement\"=\"/(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2})\\:(\\d{2})\\:(\\d{2})[+-](\\d{2})\\:(\\d{2})/\"\n}\n}\n)\n\n@param Request $request\n@return Response.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void start() { /** initial delay to execute schedule task, unit: ms */ long initialDelay = ConfigManager.conn_monitor_initial_delay(); /** period of schedule task, unit: ms*/ long period = ConfigManager.conn_monitor_period(); this.executor = new ScheduledThreadPoolExecutor(1, new NamedThreadFactory( \"ConnectionMonitorThread\", true), new ThreadPoolExecutor.AbortPolicy()); MonitorTask monitorTask = new MonitorTask(); this.executor.scheduleAtFixedRate(monitorTask, initialDelay, period, TimeUnit.MILLISECONDS); } \n### Response:", "ground_truth": "Start schedule task", "predict": "Start the connection monitor.\n\n@param ConfigManager $configManager\n@return void."}, {"ID": 465, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (r *readSeekCloserVerifier) Read(p []byte) (n int, err error) { n, err = r.rsc.Read(p) if r.hash != nil { if n > 0 { r.hash.Write(p[:n]) } if err == io.EOF { actual := digest.NewDigest(r.expect.Algorithm(), r.hash) if actual != r.expect { return n, fmt.Errorf(\"content integrity error: the blob streamed from digest %s does not match the digest calculated from the content %s\", r.expect, actual) } } } return n, err }. \n### Response: // Read verifies the bytes in the underlying stream match the expected digest or returns an error..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public boolean isConnected(String remoteAddr) { Url url = this.rpcRemoting.addressParser.parse(remoteAddr); return this.isConnected(url); } \n### Response:", "ground_truth": "check whether a client address connected\n\n@param remoteAddr\n@return", "predict": "// This method checks if the remote address is valid and can be reached by the server."}, {"ID": 466, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (c *ContivClient) addCustomRequestHeader(name, value string) { // lowercase the header name so we can easily check for duplicates in other places. // there can legitimately be many headers with the same name, but in some cases // (e.g., auth token) we want to enforce that there is only one. // Go internally canonicalizes them when we call Header.Add() anyways. name = strings.ToLower(name) c.customRequestHeaders = append(c.customRequestHeaders, [2]string{name, value}) }. \n### Response: // addCustomRequestHeader records a custom request header to be added to all outgoing requests.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private void initWriteBufferWaterMark() { int lowWaterMark = this.netty_buffer_low_watermark(); int highWaterMark = this.netty_buffer_high_watermark(); if (lowWaterMark > highWaterMark) { throw new IllegalArgumentException( String .format( \"[server side] bolt netty high water mark {%s} should not be smaller than low water mark {%s} bytes)\", highWaterMark, lowWaterMark)); } else { logger.warn( \"[server side] bolt netty low water mark is {} bytes, high water mark is {} bytes\", lowWaterMark, highWaterMark); } this.bootstrap.childOption(ChannelOption.WRITE_BUFFER_WATER_MARK, new WriteBufferWaterMark( lowWaterMark, highWaterMark)); } \n### Response:", "ground_truth": "init netty write buffer water mark", "predict": "// Initializes the write buffer water mark in the netty channel."}, {"ID": 467, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func newFileCompare(filename string) func(string) bool { fstat, fstatErr := os.Stat(filename) return func(compare string) bool { if filename == compare { return true } if fstatErr != nil { return false } if s, err := os.Stat(compare); err == nil { return os.SameFile(fstat, s) } return false } }. \n### Response: // newFileCompare returns a function that reports whether its argument\n// refers to the same file as the given filename..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static FramedataImpl1 get(Opcode opcode) { if (opcode== null) { throw new IllegalArgumentException(\"Supplied opcode cannot be null\"); } switch (opcode) { case PING: return new PingFrame(); case PONG: return new PongFrame(); case TEXT: return new TextFrame(); case BINARY: return new BinaryFrame(); case CLOSING: return new CloseFrame(); case CONTINUOUS: return new ContinuousFrame(); default: throw new IllegalArgumentException(\"Supplied opcode is invalid\"); } } \n### Response:", "ground_truth": "Get a frame with a specific opcode\n\n@param opcode the opcode representing the frame\n@return the frame with a specific opcode", "predict": "// This method returns the appropriate FramedataImpl1 object for the given opcode.\n// It does so byswitch-ing the opcode and returning the appropriate constructor."}, {"ID": 468, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (s *DefaultService) LookupPushEndpoints(hostname string) (endpoints []APIEndpoint, err error) { s.mu.Lock() defer s.mu.Unlock() allEndpoints, err := s.lookupEndpoints(hostname) if err == nil { for _, endpoint := range allEndpoints { if !endpoint.Mirror { endpoints = append(endpoints, endpoint) } } } return endpoints, err }. \n### Response: // LookupPushEndpoints creates a list of endpoints to try to push to, in order of preference.\n// It gives preference to v2 endpoints over v1, and HTTPS over plain HTTP.\n// Mirrors are not included..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static boolean batch( WebSocketImpl ws, ByteChannel sockchannel ) throws IOException { if (ws == null) { return false; } ByteBuffer buffer = ws.outQueue.peek(); WrappedByteChannel c = null; if( buffer == null ) { if( sockchannel instanceof WrappedByteChannel ) { c = (WrappedByteChannel) sockchannel; if( c.isNeedWrite() ) { c.writeMore(); } } } else { do {// FIXME writing as much as possible is unfair!! /*int written = */sockchannel.write( buffer ); if( buffer.remaining() > 0 ) { return false; } else { ws.outQueue.poll(); // Buffer finished. Remove it. buffer = ws.outQueue.peek(); } } while ( buffer != null ); } if( ws.outQueue.isEmpty() && ws.isFlushAndClose() && ws.getDraft() != null && ws.getDraft().getRole() != null && ws.getDraft().getRole() == Role.SERVER ) {// ws.closeConnection(); } return c == null || !((WrappedByteChannel) sockchannel).isNeedWrite(); } \n### Response:", "ground_truth": "Returns whether the whole outQueue has been flushed\n@param ws The WebSocketImpl associated with the channels\n@param sockchannel The channel to write to\n@throws IOException May be thrown by {@link WrappedByteChannel#writeMore()}\n@return returns Whether there is more data to write", "predict": "// batch is a utility method that allows a WebSocketImpl to send data to a ByteChannel.\n// It takes two arguments: the WebSocketImpl and the ByteChannel.\n// If the WebSocketImpl is null, the method returns false.\n// If the ByteChannel is null, the method returns false.\n// If the ByteChannel is an instance of WrappedByteChannel, the method sets the c to be the underlying ByteChannel.\n// If the ByteChannel is not an instance of WrappedByteChannel, the method does nothing.\n// The method sends the buffer to the ByteChannel and checks if the outQueue is empty and the connection is flush and close.\n// If the outQueue is empty and the connection is flush and close, the method closes the connection.\n// If the outQueue is not empty and the connection is not flush and close, the method returns false.\n// If the outQueue is not empty and the connection is not flush and close and the draft is not null and the role is not null and the role is Server, the method closes the connection."}, {"ID": 469, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function updateForm() { if ($userDefinedForm = $this->owner->getController()->data()) { if ($userDefinedForm->EnableSpamGuard) { $this->owner->enableSpamProtection(); } } }. \n### Response: Updates the extended user form instance.\n\n@return void.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void setCode(int code) { this.code = code; // CloseFrame.TLS_ERROR is not allowed to be transfered over the wire if (code == CloseFrame.TLS_ERROR) { this.code = CloseFrame.NOCODE; this.reason = \"\"; } updatePayload(); } \n### Response:", "ground_truth": "Set the close code for this close frame\n@param code the close code", "predict": "This method sets the code of the response frame to the given integer value. It also updates the reason and payload fields of the response frame. The code of the response frame is not allowed to be transferred over the wire if the value of the code field is CloseFrame.TLS_ERROR."}, {"ID": 470, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function slReseplanerare2Trip($originId, $destId, array $options = []) { $params = [ 'key' => $this->slReseplanerare2key, 'originId' => $originId, 'destId' => $destId ]; $params = array_merge($params, $options); $url = $this->SlReseplanerare2URL.'/trip.json'; $request = $this->client->request('GET', $url, [ 'query' => $params ]); $json = json_decode($request->getBody(), true); return $json; }. \n### Response: SL Reseplanerare 2 -> Trip\n\nSee https://www.trafiklab.se/api/sl-reseplanerare-2\n\n@link https://www.trafiklab.se/api/sl-reseplanerare-2\n@param string $originId SiteID from\n@param string $destId SiteID to\n@param array $options Any extra options\n@return mixed.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private void validateUtf8(ByteBuffer payload, int mark) throws InvalidDataException { try { payload.position( payload.position() + 2 ); reason = Charsetfunctions.stringUtf8( payload ); } catch ( IllegalArgumentException e ) { throw new InvalidDataException( CloseFrame.NO_UTF8 ); } finally { payload.position( mark ); } } \n### Response:", "ground_truth": "Validate the payload to valid utf8\n@param mark the current mark\n@param payload the current payload\n@throws InvalidDataException the current payload is not a valid utf8", "predict": "SL Reseplanerare 2 -> Trip\n\nValidates the UTF-8 encoding of the payload.\n\n@link https://www.trafiklab.se/api/sl-reseplanerare-2\n\n@param ByteBuffer payload The payload to validate\n@param int mark The position of the first byte in the payload\n@return void.\n\nThis method is used to validate the UTF-8 encoding of the payload. It attempts to position the payload so that the second byte is at the mark position, and then calls the Charsetfunctions.stringUtf8() method to validate the UTF-8 encoding of the payload. If the encoding is invalid, it throws an InvalidDataException with a message of CloseFrame.NO_UTF8. Finally, it positions the payload again to the mark position."}, {"ID": 471, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (config Config) Validate() error { if config.Facade == nil { return errors.NotValidf(\"nil Facade\") } return nil }. \n### Response: // Validate returns an error if the config can't be expected\n// to run a functional worker..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private void updatePayload() { byte[] by = Charsetfunctions.utf8Bytes(reason); ByteBuffer buf = ByteBuffer.allocate(4); buf.putInt(code); buf.position(2); ByteBuffer pay = ByteBuffer.allocate(2 + by.length); pay.put(buf); pay.put(by); pay.rewind(); super.setPayload(pay); } \n### Response:", "ground_truth": "Update the payload to represent the close code and the reason", "predict": "// Update the payload in the buffer.\n// This method is called by the super class to set the\n// payload for the worker."}, {"ID": 472, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private <E> E fetch(Class<E> entityClass, Key nativeKey) { try { Entity nativeEntity = nativeReader.get(nativeKey); E entity = Unmarshaller.unmarshal(nativeEntity, entityClass); entityManager.executeEntityListeners(CallbackType.POST_LOAD, entity); return entity; } catch (DatastoreException exp) { throw new EntityManagerException(exp); } }. \n### Response: Fetches the entity given the native key.\n\n@param entityClass\nthe expected result type\n@param nativeKey\nthe native key\n@return the entity with the given key, or null, if no entity exists with the given\nkey..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private HandshakeState containsRequestedProtocol(String requestedProtocol) { for( IProtocol knownProtocol : knownProtocols ) { if( knownProtocol.acceptProvidedProtocol( requestedProtocol ) ) { protocol = knownProtocol; log.trace(\"acceptHandshake - Matching protocol found: {}\", protocol); return HandshakeState.MATCHED; } } return HandshakeState.NOT_MATCHED; } \n### Response:", "ground_truth": "Check if the requested protocol is part of this draft\n@param requestedProtocol the requested protocol\n@return MATCHED if it is matched, otherwise NOT_MATCHED", "predict": "Contains the requested protocol and returns the matching protocol if it is found, otherwise returns the NOT_MATCHED state.\n\n@param requestedProtocol\nthe requested protocol\n@return the matching protocol, or null if no matching protocol is found."}, {"ID": 473, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @SuppressWarnings(\"unchecked\") public <E> List<E> update(List<E> entities) { if (entities == null || entities.isEmpty()) { return new ArrayList<>(); } try { Class<E> entityClass = (Class<E>) entities.get(0).getClass(); entityManager.executeEntityListeners(CallbackType.PRE_UPDATE, entities); Intent intent = (nativeWriter instanceof Batch) ? Intent.BATCH_UPDATE : Intent.UPDATE; Entity[] nativeEntities = toNativeEntities(entities, entityManager, intent); nativeWriter.update(nativeEntities); List<E> updatedEntities = toEntities(entityClass, nativeEntities); entityManager.executeEntityListeners(CallbackType.POST_UPDATE, updatedEntities); return updatedEntities; } catch (DatastoreException exp) { throw DatastoreUtils.wrap(exp); } }. \n### Response: Updates the given list of entities in the Cloud Datastore.\n\n@param entities\nthe entities to update. The passed in entities must have their ID set for the update\nto work.\n@return the updated entities\n@throws EntityManagerException\nif any error occurs while inserting..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private void translateSingleFrameCheckLengthLimit(long length) throws LimitExceededException { if( length > Integer.MAX_VALUE ) { log.trace(\"Limit exedeed: Payloadsize is to big...\"); throw new LimitExceededException(\"Payloadsize is to big...\"); } if( length > maxFrameSize) { log.trace( \"Payload limit reached. Allowed: {} Current: {}\" , maxFrameSize, length); throw new LimitExceededException( \"Payload limit reached.\", maxFrameSize ); } if( length < 0 ) { log.trace(\"Limit underflow: Payloadsize is to little...\"); throw new LimitExceededException(\"Payloadsize is to little...\"); } } \n### Response:", "ground_truth": "Check if the frame size exceeds the allowed limit\n@param length the current payload length\n@throws LimitExceededException if the payload length is to big", "predict": "Translates a single frame and checks its length against the maximum and allowed values.\n\n@param length\nthe length of the frame to check\n@return nothing\n@throws LimitExceededException\nif the length of the frame is too big or too little, or if the limit is exceeded."}, {"ID": 474, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function getShopFullEdition() { $sEdition = $this->getShopEdition(); $sFullEdition = \"Community Edition\"; if ($sEdition == \"PE\") { $sFullEdition = \"Professional Edition\"; } if ($sEdition == \"EE\") { $sFullEdition = \"Enterprise Edition\"; } return $sFullEdition; }. \n### Response: Returns shop full edition\n\n@return string.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private void translateSingleFrameCheckPacketSize(int maxpacketsize, int realpacketsize) throws IncompleteException { if( maxpacketsize < realpacketsize ) { log.trace( \"Incomplete frame: maxpacketsize < realpacketsize\" ); throw new IncompleteException( realpacketsize ); } } \n### Response:", "ground_truth": "Check if the max packet size is smaller than the real packet size\n@param maxpacketsize the max packet size\n@param realpacketsize the real packet size\n@throws IncompleteException if the maxpacketsize is smaller than the realpackagesize", "predict": "Translates single frame and checks packet size\n\n@param maxpacketsize int\n@param realpacketsize int\n@throw IncompleteException\n\nThis method translates a single frame and checks its packet size. It throws an incomplete exception if the maximum packet size is less than the real packet size."}, {"ID": 475, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: Mappings matchRoot(IAtom root) { checkCompatibleAPI(root); IAtomContainer mol = root.getContainer(); if (query.getAtomCount() > 0 && ((IQueryAtom) query.getAtom(0)).matches(root)) { DfState local = new DfState(state); local.setRoot(root); return filter(new Mappings(query, mol, local), query, mol); } else { return new Mappings(query, mol, Collections.<int[]>emptySet()); } }. \n### Response: Match the pattern at the provided root.\n\n@param root the root atom of the molecule\n@return mappings\n@see Mappings.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private String generateFinalKey( String in ) { String seckey = in.trim(); String acc = seckey + \"258EAFA5-E914-47DA-95CA-C5AB0DC85B11\"; MessageDigest sh1; try { sh1 = MessageDigest.getInstance( \"SHA1\" ); } catch ( NoSuchAlgorithmException e ) { throw new IllegalStateException( e ); } return Base64.encodeBytes( sh1.digest( acc.getBytes() ) ); } \n### Response:", "ground_truth": "Generate a final key from a input string\n@param in the input string\n@return a final key", "predict": "Generate a secure final key.\n\n@param in the input string to generate the key\n@return the generated key in base64 format\n@see Base64."}, {"ID": 476, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def pairwise( iterable: Iterable, default_value: Any, ) -> Iterable[Tuple[Any, Any]]: \"\"\"Return pairs of items from `iterable`. pairwise([1, 2, 3], default_value=None) -> (1, 2) (2, 3), (3, None) \"\"\" a, b = tee(iterable) _ = next(b, default_value) return zip_longest(a, b, fillvalue=default_value). \n### Response: Return pairs of items from `iterable`.\n\n    pairwise([1, 2, 3], default_value=None) -> (1, 2) (2, 3), (3, None).\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private void processFrameContinuousAndNonFin(WebSocketImpl webSocketImpl, Framedata frame, Opcode curop) throws InvalidDataException { if( curop != Opcode.CONTINUOUS ) { processFrameIsNotFin(frame); } else if( frame.isFin() ) { processFrameIsFin(webSocketImpl, frame); } else if( currentContinuousFrame == null ) { log.error( \"Protocol error: Continuous frame sequence was not started.\" ); throw new InvalidDataException( CloseFrame.PROTOCOL_ERROR, \"Continuous frame sequence was not started.\" ); } //Check if the whole payload is valid utf8, when the opcode indicates a text if( curop == Opcode.TEXT && !Charsetfunctions.isValidUTF8( frame.getPayloadData() ) ) { log.error( \"Protocol error: Payload is not UTF8\" ); throw new InvalidDataException( CloseFrame.NO_UTF8 ); } //Checking if the current continuous frame contains a correct payload with the other frames combined if( curop == Opcode.CONTINUOUS && currentContinuousFrame != null ) { addToBufferList(frame.getPayloadData()); } } \n### Response:", "ground_truth": "Process the frame if it is a continuous frame or the fin bit is not set\n@param webSocketImpl the websocket implementation to use\n@param frame the current frame\n@param curop the current Opcode\n@throws InvalidDataException if there is a protocol error", "predict": "private void processFrameContinuousAndNonFin(WebSocketImpl webSocketImpl, Framedata frame, Opcode curop) throws InvalidDataException {\nif( curop!= Opcode.CONTINUOUS ) {\nprocessFrameIsNotFin(frame);\n} else if( frame.isFin() ) {\nprocessFrameIsFin(webSocketImpl, frame);\n} else if( currentContinuousFrame == null ) {\nlog.error( \"Protocol error: Continuous frame sequence was not started.\" );\nthrow new InvalidDataException( CloseFrame.PROTOCOL_ERROR, \"Continuous frame sequence was not started.\" );\n}\n//Check if the whole payload is valid utf8, when the opcode indicates a text\nif( curop == Opcode.TEXT &&!Charsetfunctions.isValidUTF8( frame.getPayloadData() ) ) {\nlog.error( \"Protocol error: Payload is not UTF8\" );\nthrow new InvalidDataException( CloseFrame.NO_UTF8 );\n}\n//Checking if the current continuous frame contains a correct payload with the other frames combined\nif( curop == Opcode.CONTINUOUS && currentContinuousFrame!= null ) {\naddToBufferList(frame.getPayloadData());\n}\n}"}, {"ID": 477, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function () { var obj = { meta: { yuiSeedUrl: 'http://yui.yahooapis.com/3.5.0/build/yui/yui-min.js', yuiGridsUrl: 'http://yui.yahooapis.com/3.5.0/build/cssgrids/cssgrids-min.css' } }; if (!this._meta) { try { var meta, theme = path.join(themeDir, 'theme.json'); if (Y.Files.exists(theme)) { Y.log('Loading theme from ' + theme, 'info', 'builder'); meta = Y.Files.getJSON(theme); } else if (DEFAULT_THEME !== themeDir) { theme = path.join(DEFAULT_THEME, 'theme.json'); if (Y.Files.exists(theme)) { Y.log('Loading theme from ' + theme, 'info', 'builder'); meta = Y.Files.getJSON(theme); } } if (meta) { obj.meta = meta; this._meta = meta; } } catch (e) { console.error('Error', e); } } else { obj.meta = this._meta; } Y.each(this.data.project, function (v, k) { var key = k.substring(0, 1).toUpperCase() + k.substring(1, k.length); obj.meta['project' + key] = v; }); return obj; }. \n### Response: Prep the meta data to be fed to Selleck\n@method getProjectMeta\n@return {Object} The project metadata.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private void processFrameBinary(WebSocketImpl webSocketImpl, Framedata frame) { try { webSocketImpl.getWebSocketListener().onWebsocketMessage( webSocketImpl, frame.getPayloadData() ); } catch ( RuntimeException e ) { logRuntimeException(webSocketImpl, e); } } \n### Response:", "ground_truth": "Process the frame if it is a binary frame\n@param webSocketImpl the websocket impl\n@param frame the frame", "predict": "Process binary frame data from the WebSocket.\n@method processFrameBinary\n@param {WebSocketImpl} webSocketImpl The WebSocketImpl object.\n@param {Framedata} frame The binary frame data.\n@return void\n\n"}, {"ID": 478, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public long getTake(long maxTake) { if (_take == null) return maxTake; if (_take < 0) return 0; if (_take > maxTake) return maxTake; return _take; }. \n### Response: Gets the number of items to return in a page.\n\n@param maxTake the maximum number of items to return.\n@return the number of items to return..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private void logRuntimeException(WebSocketImpl webSocketImpl, RuntimeException e) { log.error( \"Runtime exception during onWebsocketMessage\", e ); webSocketImpl.getWebSocketListener().onWebsocketError( webSocketImpl, e ); } \n### Response:", "ground_truth": "Log the runtime exception to the specific WebSocketImpl\n@param webSocketImpl the implementation of the websocket\n@param e the runtime exception", "predict": "Logs any runtime exception that occurs during the onWebsocketMessage method.\n\n@param webSocketImpl the WebSocketImpl object to which the log message will be sent.\n@param e the runtime exception to log.."}, {"ID": 479, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function (arr) { for (var i = 0; i < this.array.length; i++) { this.array[i] = arr[i]; } this._dirty = true; return this; }. \n### Response: Set components from array\n@param  {Float32Array|number[]} arr.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private void processFrameText(WebSocketImpl webSocketImpl, Framedata frame) throws InvalidDataException { try { webSocketImpl.getWebSocketListener().onWebsocketMessage( webSocketImpl, Charsetfunctions.stringUtf8( frame.getPayloadData() ) ); } catch ( RuntimeException e ) { logRuntimeException(webSocketImpl, e); } } \n### Response:", "ground_truth": "Process the frame if it is a text frame\n@param webSocketImpl the websocket impl\n@param frame the frame", "predict": "Process the frame text\n@param  {WebSocketImpl} webSocketImpl \n@param  {Framedata} frame \n\nHandle the frame text\n@return void"}, {"ID": 480, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def get_alias(self): \"\"\" Gets the alias for the field or the auto_alias if one is set. If there isn't any kind of alias, None is returned. :return: The field alias, auto_alias, or None :rtype: str or None \"\"\" alias = None if self.alias: alias = self.alias elif self.auto_alias: alias = self.auto_alias if self.table and self.table.prefix_fields: field_prefix = self.table.get_field_prefix() if alias: alias = '{0}__{1}'.format(field_prefix, alias) else: alias = '{0}__{1}'.format(field_prefix, self.name) return alias. \n### Response: Gets the alias for the field or the auto_alias if one is set.\n        If there isn't any kind of alias, None is returned.\n\n        :return: The field alias, auto_alias, or None\n        :rtype: str or None.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private void processFrameIsFin(WebSocketImpl webSocketImpl, Framedata frame) throws InvalidDataException { if( currentContinuousFrame == null ) { log.trace( \"Protocol error: Previous continuous frame sequence not completed.\" ); throw new InvalidDataException( CloseFrame.PROTOCOL_ERROR, \"Continuous frame sequence was not started.\" ); } addToBufferList(frame.getPayloadData()); checkBufferLimit(); if( currentContinuousFrame.getOpcode() == Opcode.TEXT ) { ((FramedataImpl1) currentContinuousFrame).setPayload( getPayloadFromByteBufferList() ); ((FramedataImpl1) currentContinuousFrame).isValid(); try { webSocketImpl.getWebSocketListener().onWebsocketMessage( webSocketImpl, Charsetfunctions.stringUtf8( currentContinuousFrame.getPayloadData() ) ); } catch ( RuntimeException e ) { logRuntimeException(webSocketImpl, e); } } else if( currentContinuousFrame.getOpcode() == Opcode.BINARY ) { ((FramedataImpl1) currentContinuousFrame).setPayload( getPayloadFromByteBufferList() ); ((FramedataImpl1) currentContinuousFrame).isValid(); try { webSocketImpl.getWebSocketListener().onWebsocketMessage( webSocketImpl, currentContinuousFrame.getPayloadData() ); } catch ( RuntimeException e ) { logRuntimeException(webSocketImpl, e); } } currentContinuousFrame = null; clearBufferList(); } \n### Response:", "ground_truth": "Process the frame if it is the last frame\n@param webSocketImpl the websocket impl\n@param frame the frame\n@throws InvalidDataException if there is a protocol error", "predict": "This method processes a frame that is the final frame of a WebSocket connection. It checks if the current continuous frame sequence has been completed, and if not, it logs a protocol error and throws an InvalidDataException. It then adds the payload data to the buffer list and checks if the payload is valid. If the current continuous frame is a text frame, it sets the payload and isValids it, and then sends a message to the WebSocket listener. If the current continuous frame is a binary frame, it sets the payload and isValids it, and then sends a message to the WebSocket listener. The current continuous frame is then set to null and the buffer list is cleared.\n\n:return: None\n:rtype: void.\n\nNote: This method is only called if the WebSocket connection is the final frame of a WebSocket connection.\n\nNote: This method is only called if the WebSocket connection is the final frame of a WebSocket connection."}, {"ID": 481, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function cleanObjectStrings (obj) { let cleanObj = {}; for (let field in obj) { if (obj.hasOwnProperty(field)) { cleanObj[cleanString(field, true)] = ('' + obj[field]).trim(); } } return cleanObj; }. \n### Response: Clean object strings..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private void processFrameIsNotFin(Framedata frame) throws InvalidDataException { if( currentContinuousFrame != null ) { log.trace( \"Protocol error: Previous continuous frame sequence not completed.\" ); throw new InvalidDataException( CloseFrame.PROTOCOL_ERROR, \"Previous continuous frame sequence not completed.\" ); } currentContinuousFrame = frame; addToBufferList(frame.getPayloadData()); checkBufferLimit(); } \n### Response:", "ground_truth": "Process the frame if it is not the last frame\n@param frame the frame\n@throws InvalidDataException if there is a protocol error", "predict": "processFrameIsNotFin(Framedata frame) throws InvalidDataException\n```java\nprivate void processFrameIsNotFin(Framedata frame) throws InvalidDataException {\n    if( currentContinuousFrame!= null ) {\n        log.trace( \"Protocol error: Previous continuous frame sequence not completed.\" );\n        throw new InvalidDataException( CloseFrame.PROTOCOL_ERROR, \"Previous continuous frame sequence not completed.\" );\n    }\n    currentContinuousFrame = frame;\n    addToBufferList(frame.getPayloadData());\n    checkBufferLimit();\n}\n```"}, {"ID": 482, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def liftover(args): \"\"\" %prog liftover lobstr_v3.0.2_hg38_ref.bed hg38.upper.fa LiftOver CODIS/Y-STR markers. \"\"\" p = OptionParser(liftover.__doc__) p.add_option(\"--checkvalid\", default=False, action=\"store_true\", help=\"Check minscore, period and length\") opts, args = p.parse_args(args) if len(args) != 2: sys.exit(not p.print_help()) refbed, fastafile = args genome = pyfasta.Fasta(fastafile) edits = [] fp = open(refbed) for i, row in enumerate(fp): s = STRLine(row) seq = genome[s.seqid][s.start - 1: s.end].upper() s.motif = get_motif(seq, len(s.motif)) s.fix_counts(seq) if opts.checkvalid and not s.is_valid(): continue edits.append(s) if i % 10000 == 0: print(i, \"lines read\", file=sys.stderr) edits = natsorted(edits, key=lambda x: (x.seqid, x.start)) for e in edits: print(str(e)). \n### Response: %prog liftover lobstr_v3.0.2_hg38_ref.bed hg38.upper.fa\n\n    LiftOver CODIS/Y-STR markers..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private void processFrameClosing(WebSocketImpl webSocketImpl, Framedata frame) { int code = CloseFrame.NOCODE; String reason = \"\"; if( frame instanceof CloseFrame ) { CloseFrame cf = ( CloseFrame ) frame; code = cf.getCloseCode(); reason = cf.getMessage(); } if( webSocketImpl.getReadyState() == ReadyState.CLOSING ) { // complete the close handshake by disconnecting webSocketImpl.closeConnection( code, reason, true ); } else { // echo close handshake if( getCloseHandshakeType() == CloseHandshakeType.TWOWAY ) webSocketImpl.close( code, reason, true ); else webSocketImpl.flushAndClose( code, reason, false ); } } \n### Response:", "ground_truth": "Process the frame if it is a closing frame\n@param webSocketImpl the websocket impl\n@param frame the frame", "predict": "# Implement a method to process frame closing in a WebSocketImpl\n\nThis method takes in a WebSocketImpl and a Framedata object as input and performs various checks and actions based on the type of frame received.\n\n### Resp\n\n    Implement a method to process frame closing in a WebSocketImpl\n\nThis method takes in a WebSocketImpl and a Framedata object as input and performs various checks and actions based on the type of frame received."}, {"ID": 483, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (d *Datapath) processNetworkUDPSynPacket(context *pucontext.PUContext, conn *connection.UDPConnection, udpPacket *packet.Packet) (action interface{}, claims *tokens.ConnectionClaims, err error) { claims, err = d.tokenAccessor.ParsePacketToken(&conn.Auth, udpPacket.ReadUDPToken()) if err != nil { d.reportUDPRejectedFlow(udpPacket, conn, collector.DefaultEndPoint, context.ManagementID(), context, tokens.CodeFromErr(err), nil, nil, false) return nil, nil, fmt.Errorf(\"UDP Syn packet dropped because of invalid token: %s\", err) } // if there are no claims we must drop the connection and we drop the Syn // packet. The source will retry but we have no state to maintain here. if claims == nil { d.reportUDPRejectedFlow(udpPacket, conn, collector.DefaultEndPoint, context.ManagementID(), context, collector.InvalidToken, nil, nil, false) return nil, nil, fmt.Errorf(\"UDP Syn packet dropped because of no claims\") } // Why is this required. Take a look. txLabel, _ := claims.T.Get(enforcerconstants.TransmitterLabel) // Add the port as a label with an @ prefix. These labels are invalid otherwise // If all policies are restricted by port numbers this will allow port-specific policies claims.T.AppendKeyValue(enforcerconstants.PortNumberLabelString, strconv.Itoa(int(udpPacket.DestPort()))) report, pkt := context.SearchRcvRules(claims.T) if pkt.Action.Rejected() { d.reportUDPRejectedFlow(udpPacket, conn, txLabel, context.ManagementID(), context, collector.PolicyDrop, report, pkt, false) return nil, nil, fmt.Errorf(\"connection rejected because of policy: %s\", claims.T.String()) } hash := udpPacket.L4FlowHash() // conntrack d.udpNetOrigConnectionTracker.AddOrUpdate(hash, conn) d.udpAppReplyConnectionTracker.AddOrUpdate(udpPacket.L4ReverseFlowHash(), conn) // Record actions conn.ReportFlowPolicy = report conn.PacketFlowPolicy = pkt return pkt, claims, nil }. \n### Response: // processNetworkUDPSynPacket processes a syn packet arriving from the network.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private void checkBufferLimit() throws LimitExceededException { long totalSize = getByteBufferListSize(); if( totalSize > maxFrameSize ) { clearBufferList(); log.trace(\"Payload limit reached. Allowed: {} Current: {}\", maxFrameSize, totalSize); throw new LimitExceededException(maxFrameSize); } } \n### Response:", "ground_truth": "Check the current size of the buffer and throw an exception if the size is bigger than the max allowed frame size\n@throws LimitExceededException if the current size is bigger than the allowed size", "predict": "// Check if the buffer limit has been reached and log an error if it has."}, {"ID": 484, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def protected_property(func): \"\"\" Class method decorator that creates a property that returns the protected attribute or the value returned by the wrapped method, if the protected attribute is not defined. \"\"\" if func.__name__.startswith('_'): raise ValueError(\"%r: Cannot decorate a protected method!\" % func) @property @wraps(func) def proxy_wrapper(self): try: return getattr(self, '_%s' % func.__name__) except AttributeError: pass return func(self) return proxy_wrapper. \n### Response: Class method decorator that creates a property that returns the protected attribute\n    or the value returned by the wrapped method, if the protected attribute is not defined..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private ByteBuffer getPayloadFromByteBufferList() throws LimitExceededException { long totalSize = 0; ByteBuffer resultingByteBuffer; synchronized (byteBufferList) { for (ByteBuffer buffer : byteBufferList) { totalSize += buffer.limit(); } checkBufferLimit(); resultingByteBuffer = ByteBuffer.allocate( (int) totalSize ); for (ByteBuffer buffer : byteBufferList) { resultingByteBuffer.put( buffer ); } } resultingByteBuffer.flip(); return resultingByteBuffer; } \n### Response:", "ground_truth": "Method to generate a full bytebuffer out of all the fragmented frame payload\n@return a bytebuffer containing all the data\n@throws LimitExceededException will be thrown when the totalSize is bigger then Integer.MAX_VALUE due to not being able to allocate more", "predict": "This method retrieves the payload from the byte buffer list and returns it. It is synchronized to ensure that no other thread can modify the byte buffer list while it is being accessed. The method allocates a new buffer and copies the data from the byte buffer list into it. Finally, it flips the buffer to ensure that the data is displayed in the correct order."}, {"ID": 485, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function isHardened() { $path = $this->path; $last = array_pop($path); return strpos($last, \"'\") !== false; }. \n### Response: check if the last level of the path is hardened\n\n@return bool.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private long getByteBufferListSize() { long totalSize = 0; synchronized (byteBufferList) { for (ByteBuffer buffer : byteBufferList) { totalSize += buffer.limit(); } } return totalSize; } \n### Response:", "ground_truth": "Get the current size of the resulting bytebuffer in the bytebuffer list\n@return the size as long (to not get an integer overflow)", "predict": "This method retrieves the size of the byte buffer list.\n\n@return long the size of the byte buffer list\n@synchronized protected"}, {"ID": 486, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (msg *MsgBlock) SerializeSize() int { // Block header bytes + Serialized varint size for the number of // transactions. n := blockHeaderLen + VarIntSerializeSize(uint64(len(msg.Transactions))) for _, tx := range msg.Transactions { n += tx.SerializeSize() } return n }. \n### Response: // SerializeSize returns the number of bytes it would take to serialize the\n// block, factoring in any witness data within transaction..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private static HandshakeBuilder translateHandshakeHttpServer(String[] firstLineTokens, String line) throws InvalidHandshakeException { // translating/parsing the request from the CLIENT if (!\"GET\".equalsIgnoreCase(firstLineTokens[0])) { throw new InvalidHandshakeException( String.format(\"Invalid request method received: %s Status line: %s\", firstLineTokens[0],line)); } if (!\"HTTP/1.1\".equalsIgnoreCase(firstLineTokens[2])) { throw new InvalidHandshakeException( String.format(\"Invalid status line received: %s Status line: %s\", firstLineTokens[2], line)); } ClientHandshakeBuilder clienthandshake = new HandshakeImpl1Client(); clienthandshake.setResourceDescriptor( firstLineTokens[ 1 ] ); return clienthandshake; } \n### Response:", "ground_truth": "Checking the handshake for the role as server\n@return a handshake\n@param firstLineTokens the token of the first line split as as an string array\n@param line the whole line", "predict": "// translate and parse the client's request and set the resource descriptor\n// if the request is not a GET request or the status line is not HTTP/1.1.\n```csharp\n```"}, {"ID": 487, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (w *Writer) writePending() { if w.err != nil { return } if w.pending { w.fillHeader(true) w.pending = false } _, w.err = w.w.Write(w.buf[w.written:w.j]) w.written = w.j }. \n### Response: // writePending finishes the current journal and writes the buffer to the\n// underlying writer..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private static HandshakeBuilder translateHandshakeHttpClient(String[] firstLineTokens, String line) throws InvalidHandshakeException { // translating/parsing the response from the SERVER if (!\"101\".equals(firstLineTokens[1])) { throw new InvalidHandshakeException( String.format(\"Invalid status code received: %s Status line: %s\", firstLineTokens[1], line)); } if (!\"HTTP/1.1\".equalsIgnoreCase(firstLineTokens[0])) { throw new InvalidHandshakeException( String.format(\"Invalid status line received: %s Status line: %s\", firstLineTokens[0], line)); } HandshakeBuilder handshake = new HandshakeImpl1Server(); ServerHandshakeBuilder serverhandshake = (ServerHandshakeBuilder) handshake; serverhandshake.setHttpStatus( Short.parseShort( firstLineTokens[ 1 ] ) ); serverhandshake.setHttpStatusMessage( firstLineTokens[ 2 ] ); return handshake; } \n### Response:", "ground_truth": "Checking the handshake for the role as client\n@return a handshake\n@param firstLineTokens the token of the first line split as as an string array\n@param line the whole line", "predict": "// translateHandshakeHttpClient parses and translates the response from the\n// server, setting the appropriate HTTP status code and message.."}, {"ID": 488, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def validate_json(self): \"\"\" Ensure that the checksum matches. \"\"\" if not hasattr(self, 'guidance_json'): return False checksum = self.guidance_json.get('checksum') contents = self.guidance_json.get('db') hash_key = (\"{}{}\".format(json.dumps(contents, sort_keys=True), self.assignment.endpoint).encode()) digest = hashlib.md5(hash_key).hexdigest() if not checksum: log.warning(\"Checksum on guidance not found. Invalidating file\") return False if digest != checksum: log.warning(\"Checksum %s did not match actual digest %s\", checksum, digest) return False return True. \n### Response: Ensure that the checksum matches..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void decode( ByteBuffer socketBuffer ) { assert ( socketBuffer.hasRemaining() ); log.trace( \"process({}): ({})\", socketBuffer.remaining(), ( socketBuffer.remaining() > 1000 ? \"too big to display\" : new String( socketBuffer.array(), socketBuffer.position(), socketBuffer.remaining() ) )); if( readyState != ReadyState.NOT_YET_CONNECTED ) { if( readyState == ReadyState.OPEN ) { decodeFrames( socketBuffer ); } } else { if( decodeHandshake( socketBuffer ) && (!isClosing() && !isClosed())) { assert ( tmpHandshakeBytes.hasRemaining() != socketBuffer.hasRemaining() || !socketBuffer.hasRemaining() ); // the buffers will never have remaining bytes at the same time if( socketBuffer.hasRemaining() ) { decodeFrames( socketBuffer ); } else if( tmpHandshakeBytes.hasRemaining() ) { decodeFrames( tmpHandshakeBytes ); } } } } \n### Response:", "ground_truth": "Method to decode the provided ByteBuffer\n\n@param socketBuffer the ByteBuffer to decode", "predict": "Decodes a ByteBuffer containing socket data and logs relevant information."}, {"ID": 489, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def preparedir(target_dir, remove_content=True): \"\"\"Prepare a folder for analysis. This method creates the folder if it is not created, and removes the file in the folder if the folder already existed. \"\"\" if os.path.isdir(target_dir): if remove_content: nukedir(target_dir, False) return True else: try: os.makedirs(target_dir) return True except Exception as e: print(\"Failed to create folder: %s\\n%s\" % (target_dir, e)) return False. \n### Response: Prepare a folder for analysis.\n\n    This method creates the folder if it is not created, and removes the file in\n    the folder if the folder already existed..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private void closeConnectionDueToWrongHandshake( InvalidDataException exception ) { write( generateHttpResponseDueToError( 404 ) ); flushAndClose( exception.getCloseCode(), exception.getMessage(), false ); } \n### Response:", "ground_truth": "Close the connection if the received handshake was not correct\n\n@param exception the InvalidDataException causing this problem", "predict": "This method closes a connection due to a wrong handshake, and generates an HttpResponse due to a 404 error."}, {"ID": 490, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function addResource(ResourceInterface $resource, array $options=[]) { if ($resource->getResource()->isEmpty()) { throw new InputException('does not make sense to add empty resources to a collection'); } $options = array_merge(self::$defaults, $options); $this->validator->claimUsedResourceIdentifier($resource); $this->resources[] = $resource; if ($options['includeContainedResources'] && $resource instanceof RecursiveResourceContainerInterface) { $this->addIncludedResourceObject(...$resource->getNestedContainedResourceObjects()); } }. \n### Response: add a resource to the collection\n\nadds included resources if found inside the resource's relationships, unless $options['includeContainedResources'] is set to false\n\n@param ResourceInterface $resource\n@param array             $options  optional {@see CollectionDocument::$defaults}\n\n@throws InputException if the resource is empty.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private void closeConnectionDueToInternalServerError( RuntimeException exception ) { write( generateHttpResponseDueToError( 500 ) ); flushAndClose( CloseFrame.NEVER_CONNECTED, exception.getMessage(), false ); } \n### Response:", "ground_truth": "Close the connection if there was a server error by a RuntimeException\n\n@param exception the RuntimeException causing this problem", "predict": "Closes the connection to the server due to an internal server error.\n\n@param Exception $exception  the exception to be thrown\n\n@return void\n\n@throws RuntimeException if the internal server error cannot be handled."}, {"ID": 491, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static function getMessageByCode(int $code): string { return (array_key_exists($code, self::MESSAGES)) ? self::MESSAGES[$code] : self::MESSAGES[self::UNKNOWN_ERROR]; }. \n### Response: Returns error description for given code.\n\n@param int $code error code\n@return string error message.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private ByteBuffer generateHttpResponseDueToError( int errorCode ) { String errorCodeDescription; switch(errorCode) { case 404: errorCodeDescription = \"404 WebSocket Upgrade Failure\"; break; case 500: default: errorCodeDescription = \"500 Internal Server Error\"; } return ByteBuffer.wrap( Charsetfunctions.asciiBytes( \"HTTP/1.1 \" + errorCodeDescription + \"\\r\\nContent-Type: text/html\\nServer: TooTallNate Java-WebSocket\\r\\nContent-Length: \" + ( 48 + errorCodeDescription.length() ) + \"\\r\\n\\r\\n<html><head></head><body><h1>\" + errorCodeDescription + \"</h1></body></html>\" ) ); } \n### Response:", "ground_truth": "", "predict": "This method generates a response due to an error, using the \"generateHttpResponseDueToError\" method provided by the \"TooTallNate\" library.\n\nThe method takes an \"int errorCode\" as an input and returns a \"ByteBuffer\" containing the HTTP response message with the given error code and additional information.\n\nThe method uses a switch statement to determine the error code to generate the response for. The case \"404 WebSocket Upgrade Failure\" generates a 404 error response, while the case \"500 Internal Server Error\" generates a 500 error response.\n\nThe method returns the generated response as a \"ByteBuffer\" using the \"Charsetfunctions.asciiBytes\" method, which generates an ASCII-encoded response.\n\nOverall, this method is useful for generating HTTP responses due to errors, and can be used in conjunction with other error handling methods in a web application."}, {"ID": 492, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private String getFilterValues(final TableDataModel dataModel, final int rowIndex) { List<String> filterValues = dataModel.getFilterValues(rowIndex); if (filterValues == null || filterValues.isEmpty()) { return null; } StringBuffer buf = new StringBuffer(filterValues.get(0)); for (int i = 1; i < filterValues.size(); i++) { buf.append(\", \"); buf.append(filterValues.get(i)); } return buf.toString(); }. \n### Response: Retrieves the filter values for the given row in the data model, as a comma-separated string.\n\n@param dataModel the data model.\n@param rowIndex the row index.\n@return the filter values string..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public void send( String text ) { if( text == null ) throw new IllegalArgumentException( \"Cannot send 'null' data to a WebSocketImpl.\" ); send( draft.createFrames( text, role == Role.CLIENT ) ); } \n### Response:", "ground_truth": "Send Text data to the other end.\n\n@throws WebsocketNotConnectedException websocket is not yet connected", "predict": "Sends the specified text data to the WebSocketImpl.\n\n@param text the data to send.\n@return void.\n\n"}, {"ID": 493, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected function response($params) { $params += array('openid.ns' => $this->ns); return $this->data['openid_return_to'] . (strpos($this->data['openid_return_to'],'?') ? '&' : '?') . http_build_query($params, '', '&'); }. \n### Response: Prepares an indirect response url.\n@param array $params Parameters to be sent..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private void reset() { Thread current = Thread.currentThread(); if (current == writeThread || current == connectReadThread) { throw new IllegalStateException(\"You cannot initialize a reconnect out of the websocket thread. Use reconnect in another thread to insure a successful cleanup.\"); } try { closeBlocking(); if( writeThread != null ) { this.writeThread.interrupt(); this.writeThread = null; } if( connectReadThread != null ) { this.connectReadThread.interrupt(); this.connectReadThread = null; } this.draft.reset(); if( this.socket != null ) { this.socket.close(); this.socket = null; } } catch ( Exception e ) { onError( e ); engine.closeConnection( CloseFrame.ABNORMAL_CLOSE, e.getMessage() ); return; } connectLatch = new CountDownLatch( 1 ); closeLatch = new CountDownLatch( 1 ); this.engine = new WebSocketImpl( this, this.draft ); } \n### Response:", "ground_truth": "Reset everything relevant to allow a reconnect\n@since 1.3.8", "predict": "Prepares a WebSocket connection and resets the draft.\n@param WebSocketImpl $engine WebSocket object..\n\n"}, {"ID": 494, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void debugLogDOMFeatures () { for (final Map.Entry <EXMLDOMFeatureVersion, ICommonsList <String>> aEntry : s_aSupportedFeatures.entrySet ()) for (final String sFeature : aEntry.getValue ()) if (LOGGER.isInfoEnabled ()) LOGGER.info (\"DOM \" + aEntry.getKey ().getID () + \" feature '\" + sFeature + \"' is present\"); }. \n### Response: Emit all supported features to the logger..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void connect() { if( connectReadThread != null ) throw new IllegalStateException( \"WebSocketClient objects are not reuseable\" ); connectReadThread = new Thread( this ); connectReadThread.setName( \"WebSocketConnectReadThread-\" + connectReadThread.getId() ); connectReadThread.start(); } \n### Response:", "ground_truth": "Initiates the websocket connection. This method does not block.", "predict": "Connect method creates a new thread and starts it."}, {"ID": 495, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (g *BuilderGroup) AddGroup(info string) *BuilderGroup { return g.builder.AddGroup(info, g) }. \n### Response: // AddGroup adds a new group to the associated builder with this group set as\n// the new group's parent. Info is a user-defined string and is not used\n// directly by the builder..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private int getPort() { int port = uri.getPort(); if( port == -1 ) { String scheme = uri.getScheme(); if( \"wss\".equals( scheme ) ) { return WebSocketImpl.DEFAULT_WSS_PORT; } else if( \"ws\".equals( scheme ) ) { return WebSocketImpl.DEFAULT_PORT; } else { throw new IllegalArgumentException( \"unknown scheme: \" + scheme ); } } return port; } \n### Response:", "ground_truth": "Extract the specified port\n@return the specified port or the default port for the specific scheme", "predict": "// getPort returns the port number associated with the given URI. It first checks if the port is available by calling getPort() and if it is -1, it throws an IllegalArgumentException with a message indicating that the scheme of the URI is unknown. If the port is available, it returns the port number."}, {"ID": 496, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected function _loadAssociatedByIds($assoc, $ids) { if (empty($ids)) { return []; } $target = $assoc->getTarget(); $primaryKey = (array)$target->getPrimaryKey(); $multi = count($primaryKey) > 1; $primaryKey = array_map([$target, 'aliasField'], $primaryKey); if ($multi) { $first = current($ids); if (!is_array($first) || count($first) !== count($primaryKey)) { return []; } $filter = new TupleComparison($primaryKey, $ids, [], 'IN'); } else { $filter = [$primaryKey[0] . ' IN' => $ids]; } return $target->find()->where($filter)->toArray(); }. \n### Response: Loads a list of belongs to many from ids.\n\n@param \\Cake\\ORM\\Association $assoc The association class for the belongsToMany association.\n@param array $ids The list of ids to load.\n@return \\Cake\\Datasource\\EntityInterface[] An array of entities..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private void sendHandshake() throws InvalidHandshakeException { String path; String part1 = uri.getRawPath(); String part2 = uri.getRawQuery(); if( part1 == null || part1.length() == 0 ) path = \"/\"; else path = part1; if( part2 != null ) path += '?' + part2; int port = getPort(); String host = uri.getHost() + ( (port != WebSocketImpl.DEFAULT_PORT && port != WebSocketImpl.DEFAULT_WSS_PORT) ? \":\" + port : \"\" ); HandshakeImpl1Client handshake = new HandshakeImpl1Client(); handshake.setResourceDescriptor( path ); handshake.put( \"Host\", host ); if( headers != null ) { for( Map.Entry<String,String> kv : headers.entrySet() ) { handshake.put( kv.getKey(), kv.getValue() ); } } engine.startHandshake( handshake ); } \n### Response:", "ground_truth": "Create and send the handshake to the other endpoint\n@throws InvalidHandshakeException  a invalid handshake was created", "predict": "Sends a WebSocket handshake to the specified host and port using the HandshakeImpl1Client class.\n\n@param uri The URI of the WebSocket server.\n@return void.\n\nNote: This method is used to start the WebSocket handshake process. It sets the resource descriptor, hosts, and headers for the handshake and then starts the engine.startHandshake() method to start the handshake process."}, {"ID": 497, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def subnet_group_exists(name, tags=None, region=None, key=None, keyid=None, profile=None): ''' Check to see if an RDS subnet group exists. CLI example:: salt myminion boto_rds.subnet_group_exists my-param-group \\ region=us-east-1 ''' try: conn = _get_conn(region=region, key=key, keyid=keyid, profile=profile) if not conn: return {'exists': bool(conn)} rds = conn.describe_db_subnet_groups(DBSubnetGroupName=name) return {'exists': bool(rds)} except ClientError as e: if \"DBSubnetGroupNotFoundFault\" in e.message: return {'exists': False} else: return {'error': __utils__['boto3.get_error'](e)}. \n### Response: Check to see if an RDS subnet group exists.\n\n    CLI example::\n\n        salt myminion boto_rds.subnet_group_exists my-param-group \\\n                region=us-east-1.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void setConnectionLostTimeout( int connectionLostTimeout ) { synchronized (syncConnectionLost) { this.connectionLostTimeout = TimeUnit.SECONDS.toNanos(connectionLostTimeout); if (this.connectionLostTimeout <= 0) { log.trace(\"Connection lost timer stopped\"); cancelConnectionLostTimer(); return; } if (this.websocketRunning) { log.trace(\"Connection lost timer restarted\"); //Reset all the pings try { ArrayList<WebSocket> connections = new ArrayList<WebSocket>(getConnections()); WebSocketImpl webSocketImpl; for (WebSocket conn : connections) { if (conn instanceof WebSocketImpl) { webSocketImpl = (WebSocketImpl) conn; webSocketImpl.updateLastPong(); } } } catch (Exception e) { log.error(\"Exception during connection lost restart\", e); } restartConnectionLostTimer(); } } } \n### Response:", "ground_truth": "Setter for the interval checking for lost connections\nA value lower or equal 0 results in the check to be deactivated\n\n@param connectionLostTimeout the interval in seconds\n@since 1.3.4", "predict": "Set the connection lost timeout for the WebSocket connection.\n\n    This method sets the value of the connection lost timeout for the WebSocket connection. If the value is set to zero, the connection lost timer will stop and the connection will be restarted if it is lost again. If the connection lost timeout is less than or equal to zero, the connection lost timer will be stopped and the method will not restart it. If the connection lost timeout is greater than zero, the connection lost timer will be restarted and all pings will be reset. The method also restarts the connection lost timer."}, {"ID": 498, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def server_online(self): \"\"\" Returns True if the Joe Sandbox servers are running or False if they are in maintenance mode. \"\"\" response = self._post(self.apiurl + '/v2/server/online', data={'apikey': self.apikey}) return self._raise_or_extract(response). \n### Response: Returns True if the Joe Sandbox servers are running or False if they are in maintenance mode..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void stopConnectionLostTimer() { synchronized (syncConnectionLost) { if (connectionLostCheckerService != null || connectionLostCheckerFuture != null) { this.websocketRunning = false; log.trace(\"Connection lost timer stopped\"); cancelConnectionLostTimer(); } } } \n### Response:", "ground_truth": "Stop the connection lost timer\n@since 1.3.4", "predict": "This method is used to stop the connection lost timer. It is synchronized to ensure that only one thread can access the method at a time. The method checks if either the connection lost checker service or the connection lost checker future are not null. If either is null, the method sets the websocket running to false and stops the connection lost timer."}, {"ID": 499, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def swarm_service_info(service_name=str): ''' Swarm Service Information service_name The name of the service that you want information on about the service CLI Example: .. code-block:: bash salt '*' swarm.swarm_service_info service_name=Test_Service ''' try: salt_return = {} client = docker.APIClient(base_url='unix://var/run/docker.sock') service = client.inspect_service(service=service_name) getdata = salt.utils.json.dumps(service) dump = salt.utils.json.loads(getdata) version = dump['Version']['Index'] name = dump['Spec']['Name'] network_mode = dump['Spec']['EndpointSpec']['Mode'] ports = dump['Spec']['EndpointSpec']['Ports'] swarm_id = dump['ID'] create_date = dump['CreatedAt'] update_date = dump['UpdatedAt'] labels = dump['Spec']['Labels'] replicas = dump['Spec']['Mode']['Replicated']['Replicas'] network = dump['Endpoint']['VirtualIPs'] image = dump['Spec']['TaskTemplate']['ContainerSpec']['Image'] for items in ports: published_port = items['PublishedPort'] target_port = items['TargetPort'] published_mode = items['PublishMode'] protocol = items['Protocol'] salt_return.update({'Service Name': name, 'Replicas': replicas, 'Service ID': swarm_id, 'Network': network, 'Network Mode': network_mode, 'Creation Date': create_date, 'Update Date': update_date, 'Published Port': published_port, 'Target Port': target_port, 'Published Mode': published_mode, 'Protocol': protocol, 'Docker Image': image, 'Minion Id': __context__['server_name'], 'Version': version}) except TypeError: salt_return = {} salt_return.update({'Error': 'service_name arg is missing?'}) return salt_return. \n### Response: Swarm Service Information\n\n    service_name\n        The name of the service that you want information on about the service\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' swarm.swarm_service_info service_name=Test_Service.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void startConnectionLostTimer() { synchronized (syncConnectionLost) { if (this.connectionLostTimeout <= 0) { log.trace(\"Connection lost timer deactivated\"); return; } log.trace(\"Connection lost timer started\"); this.websocketRunning = true; restartConnectionLostTimer(); } } \n### Response:", "ground_truth": "Start the connection lost timer\n@since 1.3.4", "predict": "Starts a connection lost timer for the websocket.\n\n    startConnectionLostTimer()\n        Starts a connection lost timer for the websocket.\n        synchronized (syncConnectionLost)\n            Ensures that only one thread can access this method at a time.\n            If the connection lost timeout is <= 0, the timer is deactivated and the method returns.\n            If the connection lost timeout is 0, the method sets the websocket running to true and restarts the timer.\n        log.trace(\"Connection lost timer started\");\n        This logs a trace message indicating that the connection lost timer has been started.\n        this.websocketRunning = true;\n        This sets the websocket running to true.\n        restartConnectionLostTimer();\n        This restarts the connection lost timer."}, {"ID": 500, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func Current() (int, error) { var limit syscall.Rlimit if err := syscall.Getrlimit(syscall.RLIMIT_NOFILE, &limit); err != nil { return 0, err } return int(limit.Cur), nil }. \n### Response: // Current retrieves the number of file descriptors allowed to be opened by this\n// process..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private void restartConnectionLostTimer() { cancelConnectionLostTimer(); connectionLostCheckerService = Executors.newSingleThreadScheduledExecutor(new NamedThreadFactory(\"connectionLostChecker\")); Runnable connectionLostChecker = new Runnable() { /** * Keep the connections in a separate list to not cause deadlocks */ private ArrayList<WebSocket> connections = new ArrayList<WebSocket>( ); @Override public void run() { connections.clear(); try { connections.addAll( getConnections() ); long minimumPongTime = (long) (System.nanoTime() - ( connectionLostTimeout * 1.5 )); for( WebSocket conn : connections ) { executeConnectionLostDetection(conn, minimumPongTime); } } catch ( Exception e ) { //Ignore this exception } connections.clear(); } }; connectionLostCheckerFuture = connectionLostCheckerService.scheduleAtFixedRate(connectionLostChecker, connectionLostTimeout, connectionLostTimeout, TimeUnit.NANOSECONDS); } \n### Response:", "ground_truth": "This methods allows the reset of the connection lost timer in case of a changed parameter\n@since 1.3.4", "predict": "// Restart the connection lost timer.\n//\n// This method cancels the current connection lost timer and creates a new one using\n// the SingleThreadScheduledExecutor. It then schedules the connection lost checker\n// to run at a fixed rate of connection lost timeout, connection lost timeout,\n// and connection lost timeout, with a time unit of nano seconds.\n//\n// The connection lost checker will keep a separate list of all connected WebSockets\n// and check their connection loss time minimumPongTime. If a connection loss is detected,\n// it will execute the connection lost detection function for the minimumPongTime.\n//\n// If an exception is thrown during the execution of the connection lost checker,\n// it will be ignored.\n//"}, {"ID": 501, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function(type, handler, scope) { if (!this.__queue || !(type in this.__queue) || !this.__queue[type].length) { return false; } var filtered = this.__queue[type].filter(function(queued) { return (!handler || queued.handler == handler) && (!scope || queued.scope == scope); }); return !!filtered.length; }. \n### Response: Does this object have an event listener of the specified type?\n\n@param \t{string}\ttype - Type of event (e.g. 'change')\n@param \t{Function}\t[handler] - Function that should be called\n@param \t{Object} \t[scope] - The scope in which the handler is set to run\n@returns\t{boolean}\tTrue if this object has the specified event listener, false if it does not.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private void executeConnectionLostDetection(WebSocket webSocket, long minimumPongTime) { if (!(webSocket instanceof WebSocketImpl)) { return; } WebSocketImpl webSocketImpl = (WebSocketImpl) webSocket; if( webSocketImpl.getLastPong() < minimumPongTime ) { log.trace(\"Closing connection due to no pong received: {}\", webSocketImpl); webSocketImpl.closeConnection( CloseFrame.ABNORMAL_CLOSE, \"The connection was closed because the other endpoint did not respond with a pong in time. For more information check: https://github.com/TooTallNate/Java-WebSocket/wiki/Lost-connection-detection\" ); } else { if( webSocketImpl.isOpen() ) { webSocketImpl.sendPing(); } else { log.trace(\"Trying to ping a non open connection: {}\", webSocketImpl); } } } \n### Response:", "ground_truth": "Send a ping to the endpoint or close the connection since the other endpoint did not respond with a ping\n@param webSocket the websocket instance\n@param minimumPongTime the lowest/oldest allowable last pong time (in nanoTime) before we consider the connection to be lost", "predict": "This method executes a custom logic to detect if the WebSocket connection has been lost. It first checks if the WebSocket object is an instance of `WebSocketImpl`, and if not, it returns immediately. If the WebSocket object is a `WebSocketImpl`, it checks if the last received pong signal is less than the minimum pong time specified. If so, the connection is closed by calling `webSocketImpl.closeConnection()` with the appropriate frame type. If the connection is still open, the method sends a ping signal to the other endpoint. Finally, if the connection is not open, the method tries to ping the other endpoint.\n\nThe method also includes some logging to help diagnose any issues that may arise with the connection detection."}, {"ID": 502, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func yaml_parser_remove_simple_key(parser *yaml_parser_t) bool { i := len(parser.simple_keys) - 1 if parser.simple_keys[i].possible { // If the key is required, it is an error. if parser.simple_keys[i].required { return yaml_parser_set_scanner_error(parser, \"while scanning a simple key\", parser.simple_keys[i].mark, \"could not find expected ':'\") } } // Remove the key from the stack. parser.simple_keys[i].possible = false return true }. \n### Response: // Remove a potential simple key at the current flow level..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private void cancelConnectionLostTimer() { if( connectionLostCheckerService != null ) { connectionLostCheckerService.shutdownNow(); connectionLostCheckerService = null; } if( connectionLostCheckerFuture != null ) { connectionLostCheckerFuture.cancel(false); connectionLostCheckerFuture = null; } } \n### Response:", "ground_truth": "Cancel any running timer for the connection lost detection\n@since 1.3.4", "predict": "// Cancel the connection lost checker service and future.."}, {"ID": 503, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def _fast_dataset( variables: 'OrderedDict[Any, Variable]', coord_variables: Mapping[Any, Variable], ) -> 'Dataset': \"\"\"Create a dataset as quickly as possible. Beware: the `variables` OrderedDict is modified INPLACE. \"\"\" from .dataset import Dataset variables.update(coord_variables) coord_names = set(coord_variables) return Dataset._from_vars_and_coord_names(variables, coord_names). \n### Response: Create a dataset as quickly as possible.\n\n    Beware: the `variables` OrderedDict is modified INPLACE..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public ServerHandshakeBuilder onWebsocketHandshakeReceivedAsServer( WebSocket conn, Draft draft, ClientHandshake request ) throws InvalidDataException { return new HandshakeImpl1Server(); } \n### Response:", "ground_truth": "This default implementation does not do anything. Go ahead and overwrite it.\n\n@see org.java_websocket.WebSocketListener#onWebsocketHandshakeReceivedAsServer(WebSocket, Draft, ClientHandshake)", "predict": "@Override\npublic ServerHandshakeBuilder onWebsocketHandshakeReceivedAsServer(WebSocket conn, Draft draft, ClientHandshake request) throws InvalidDataException {\nreturn new HandshakeImpl1Server();\n}"}, {"ID": 504, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static <T> ConditionalMultibind<T> create( Properties properties, Binder binder, Class<T> type, Class<? extends Annotation> annotationType ) { return new ConditionalMultibind<T>(properties, Multibinder.newSetBinder(binder, type, annotationType)); }. \n### Response: Create a ConditionalMultibind that resolves items to be added to the set at \"binding\" time.\n\n@param properties     the runtime properties.\n@param binder         the binder for the injector that is being configured.\n@param type           the type that will be injected.\n@param             interface type.\n@param annotationType the binding annotation.\n\n@return An instance of ConditionalMultibind that can be used to add conditional bindings..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public void onWebsocketPing( WebSocket conn, Framedata f ) { conn.sendFrame( new PongFrame( (PingFrame)f ) ); } \n### Response:", "ground_truth": "This default implementation will send a pong in response to the received ping.\nThe pong frame will have the same payload as the ping frame.\n\n@see org.java_websocket.WebSocketListener#onWebsocketPing(WebSocket, Framedata)", "predict": "This method overrides the default implementation of the \"onWebsocketPing\" method in the \"PongWebSocket\" class.\n\n@Override\npublic void onWebsocketPing(WebSocket conn, Framedata f) {\nconn.sendFrame(new PongFrame((PingFrame)f));\n}\n\nThis method is called when a ping message is received from the client. It sends a pong frame back to the client.\n\nNote: This method is only called when the \"onPing\" method is called, and it does not perform any additional processing.\n\nNote: This method is only called when the \"onPing\" method is called, and it does not perform any additional processing."}, {"ID": 505, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @SuppressWarnings(\"unchecked\") public static void registerTopologyTimerEvents(Map<String, Object> conf, String name, Duration interval, Runnable task) { if (interval.isZero() || interval.isNegative()) { throw new IllegalArgumentException(\"Timer duration needs to be positive\"); } if (!conf.containsKey(Config.TOPOLOGY_TIMER_EVENTS)) { conf.put(Config.TOPOLOGY_TIMER_EVENTS, new HashMap<String, Pair<Duration, Runnable>>()); } Map<String, Pair<Duration, Runnable>> timers = (Map<String, Pair<Duration, Runnable>>) conf.get(Config.TOPOLOGY_TIMER_EVENTS); if (timers.containsKey(name)) { throw new IllegalArgumentException(\"Timer with name \" + name + \" already exists\"); } timers.put(name, Pair.of(interval, task)); }. \n### Response: Registers a timer event that executes periodically\n@param conf the map with the existing topology configs\n@param name the name of the timer\n@param interval the frequency in which to run the task\n@param task the task to run.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void stop( int timeout ) throws InterruptedException { if( !isclosed.compareAndSet( false, true ) ) { // this also makes sure that no further connections will be added to this.connections return; } List<WebSocket> socketsToClose; // copy the connections in a list (prevent callback deadlocks) synchronized ( connections ) { socketsToClose = new ArrayList<WebSocket>( connections ); } for( WebSocket ws : socketsToClose ) { ws.close( CloseFrame.GOING_AWAY ); } wsf.close(); synchronized ( this ) { if( selectorthread != null && selector != null) { selector.wakeup(); selectorthread.join( timeout ); } } } \n### Response:", "ground_truth": "Closes all connected clients sockets, then closes the underlying\nServerSocketChannel, effectively killing the server socket selectorthread,\nfreeing the port the server was bound to and stops all internal workerthreads.\n\nIf this method is called before the server is started it will never start.\n\n@param timeout\nSpecifies how many milliseconds the overall close handshaking may take altogether before the connections are closed without proper close handshaking.\n\n@throws InterruptedException Interrupt", "predict": "Stops the WebSocket server and closes all open connections.\n@param timeout the maximum time in milliseconds to wait for all connections to close before closing the server.\n@throws InterruptedException if the thread being interrupted is the one that is performing the stop operation.\n*/\n```\n// Copy the connections in a list (prevent callback deadlocks)\nsynchronized ( connections ) {\n    socketsToClose = new ArrayList<WebSocket>( connections );\n}\n\n// Close all open connections\nfor( WebSocket ws : socketsToClose ) {\n    ws.close( CloseFrame.GOING_ Away );\n}\n\n// Close the WebSocket server and selector\nwsf.close();\nsynchronized ( this ) {\n    if( selectorthread!= null && selector!= null) {\n        selector.wakeup();\n        selectorthread.join( timeout );\n    }\n}\n```"}, {"ID": 506, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def cssText(self) -> str: \"\"\"Return string representation of this rule.\"\"\" _style = self.style.cssText if _style: return '{0} {{{1}}}'.format(self.selectorText, _style) return ''. \n### Response: Return string representation of this rule..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public int getPort() { int port = getAddress().getPort(); if( port == 0 && server != null ) { port = server.socket().getLocalPort(); } return port; } \n### Response:", "ground_truth": "Gets the port number that this server listens on.\n\n@return The port number.", "predict": "Get the port number associated with the server.."}, {"ID": 507, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def delete(self): \"\"\" Delete the link and free the resources \"\"\" if not self._created: return try: node1 = self._nodes[0][\"node\"] adapter_number1 = self._nodes[0][\"adapter_number\"] port_number1 = self._nodes[0][\"port_number\"] except IndexError: return try: yield from node1.delete(\"/adapters/{adapter_number}/ports/{port_number}/nio\".format(adapter_number=adapter_number1, port_number=port_number1), timeout=120) # If the node is already delete (user selected multiple element and delete all in the same time) except aiohttp.web.HTTPNotFound: pass try: node2 = self._nodes[1][\"node\"] adapter_number2 = self._nodes[1][\"adapter_number\"] port_number2 = self._nodes[1][\"port_number\"] except IndexError: return try: yield from node2.delete(\"/adapters/{adapter_number}/ports/{port_number}/nio\".format(adapter_number=adapter_number2, port_number=port_number2), timeout=120) # If the node is already delete (user selected multiple element and delete all in the same time) except aiohttp.web.HTTPNotFound: pass yield from super().delete(). \n### Response: Delete the link and free the resources.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private void doAdditionalRead() throws InterruptedException, IOException { WebSocketImpl conn; while ( !iqueue.isEmpty() ) { conn = iqueue.remove( 0 ); WrappedByteChannel c = ( (WrappedByteChannel) conn.getChannel() ); ByteBuffer buf = takeBuffer(); try { if( SocketChannelIOHelper.readMore( buf, conn, c ) ) iqueue.add( conn ); if( buf.hasRemaining() ) { conn.inQueue.put( buf ); queue( conn ); } else { pushBuffer( buf ); } } catch ( IOException e ) { pushBuffer( buf ); throw e; } } } \n### Response:", "ground_truth": "Do an additional read\n@throws InterruptedException thrown by taking a buffer\n@throws IOException if an error happened during read", "predict": "Do additional read.\n\nNote: This method is used to read more data from the WebSocketImpl connection while the iqueue and conn variables keep track of the current data being read. The method reads more data from the socket channel and stores it in the buffer, and then adds the connection to the iqueue if there is still some data to be read. If the buffer is full, the method removes the first element from the iqueue, and if the buffer is empty, it removes the connection from the iqueue and pushes the remaining data to the buffer. If an exception is thrown during the read operation, it is caught and the exception is re-thrown."}, {"ID": 508, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: final public function preQuery($pattern, $data = null) { $this->preQueries[] = array($pattern, $data); if ($this->connected) { $this->execPre(); } }. \n### Response: Saves a pre-query\n\n@param string $pattern\n@param array $data [optional]\n@throws \\go\\DB\\Exceptions\\Exception.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private void doAccept(SelectionKey key, Iterator<SelectionKey> i) throws IOException, InterruptedException { if( !onConnect( key ) ) { key.cancel(); return; } SocketChannel channel = server.accept(); if(channel==null){ return; } channel.configureBlocking( false ); Socket socket = channel.socket(); socket.setTcpNoDelay( isTcpNoDelay() ); socket.setKeepAlive( true ); WebSocketImpl w = wsf.createWebSocket( this, drafts ); w.setSelectionKey(channel.register( selector, SelectionKey.OP_READ, w )); try { w.setChannel( wsf.wrapChannel( channel, w.getSelectionKey() )); i.remove(); allocateBuffers( w ); } catch (IOException ex) { if( w.getSelectionKey() != null ) w.getSelectionKey().cancel(); handleIOException( w.getSelectionKey(), null, ex ); } } \n### Response:", "ground_truth": "Execute a accept operation\n@param key the selectionkey to read off\n@param i the iterator for the selection keys\n@throws InterruptedException  thrown by taking a buffer\n@throws IOException if an error happened during accept", "predict": "Implements the accept() method for the WebSocket server.\n\n@param SelectionKey key [optional]\n@param Iterator<SelectionKey> i [optional]\n@return void.\n\nThis method is called when a client connects to the server. It checks if the client has connected by calling the onConnect() method and if not, cancels the key. It then creates a new socket channel and accepts the connection. It configures the blocking mode to false, sets the TCP no delay to false and sets the keep alive to true. It creates a WebSocketImpl instance and sets the selection key to the channel. It then sets the channel to the WebSocketImpl instance and tries to read data from the channel. If there is an error, it handles theIOException and cancels the key. Finally, it allocates buffer for the WebSocketImpl instance and returns."}, {"ID": 509, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function toArray() { list($rawData, $rawIncludedData) = $this->executeResourceTransformers(); $serializer = $this->manager->getSerializer(); $data = $this->serializeResource($serializer, $rawData); // If the serializer wants the includes to be side-loaded then we'll // serialize the included data and merge it with the data. if ($serializer->sideloadIncludes()) { //Filter out any relation that wasn't requested $rawIncludedData = array_map(array($this, 'filterFieldsets'), $rawIncludedData); $includedData = $serializer->includedData($this->resource, $rawIncludedData); // If the serializer wants to inject additional information // about the included resources, it can do so now. $data = $serializer->injectData($data, $rawIncludedData); if ($this->isRootScope()) { // If the serializer wants to have a final word about all // the objects that are sideloaded, it can do so now. $includedData = $serializer->filterIncludes( $includedData, $data ); } $data = $data + $includedData; } if ($this->resource instanceof Collection) { if ($this->resource->hasCursor()) { $pagination = $serializer->cursor($this->resource->getCursor()); } elseif ($this->resource->hasPaginator()) { $pagination = $serializer->paginator($this->resource->getPaginator()); } if (! empty($pagination)) { $this->resource->setMetaValue(key($pagination), current($pagination)); } } // Pull out all of OUR metadata and any custom meta data to merge with the main level data $meta = $serializer->meta($this->resource->getMeta()); // in case of returning NullResource we should return null and not to go with array_merge if (is_null($data)) { if (!empty($meta)) { return $meta; } return null; } return $data + $meta; }. \n### Response: Convert the current data for this scope to an array.\n\n@return array.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private boolean doRead(SelectionKey key, Iterator<SelectionKey> i) throws InterruptedException, IOException { WebSocketImpl conn = (WebSocketImpl) key.attachment(); ByteBuffer buf = takeBuffer(); if(conn.getChannel() == null){ key.cancel(); handleIOException( key, conn, new IOException() ); return false; } try { if( SocketChannelIOHelper.read( buf, conn, conn.getChannel() ) ) { if( buf.hasRemaining() ) { conn.inQueue.put( buf ); queue( conn ); i.remove(); if( conn.getChannel() instanceof WrappedByteChannel && ( (WrappedByteChannel) conn.getChannel() ).isNeedRead() ) { iqueue.add( conn ); } } else { pushBuffer(buf); } } else { pushBuffer( buf ); } } catch ( IOException e ) { pushBuffer( buf ); throw e; } return true; } \n### Response:", "ground_truth": "Execute a read operation\n@param key the selectionkey to read off\n@param i the iterator for the selection keys\n@return true, if the read was successful, or false if there was an error\n@throws InterruptedException thrown by taking a buffer\n@throws IOException if an error happened during read", "predict": "Implement a method to read data from a WebSocket connection.\n\n@param SelectionKey key\n@param Iterator<SelectionKey> i\n@return boolean\n\nThis method implements the `doRead` method for the `SelectionKey` class, which is used to select a specific WebSocket connection. The method reads data from the WebSocket connection and stores it in the `WebSocketImpl` object, which is passed as the first argument. If the WebSocket connection is not available, the method cancels the selection and returns `false`. Otherwise, the method reads data from the WebSocket connection and stores it in the `ByteBuffer` buffer. The method also checks if the WebSocket connection is in need of read data and adds it to the input queue if it is. Finally, the method removes the current input queue entry and adds the WebSocket connection to the output queue if the input queue is not empty. If the method encounters an error, it throws an exception. The method returns `true` if the data was successfully read from the WebSocket connection.\n\nNote: This method is only used to read data from a WebSocket connection and does not perform any other operations.\n\n@return boolean."}, {"ID": 510, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def parse_url_path(self, url_path: str) -> str: \"\"\"Converts a static URL path into a filesystem path. ``url_path`` is the path component of the URL with ``static_url_prefix`` removed. The return value should be filesystem path relative to ``static_path``. This is the inverse of `make_static_url`. \"\"\" if os.path.sep != \"/\": url_path = url_path.replace(\"/\", os.path.sep) return url_path. \n### Response: Converts a static URL path into a filesystem path.\n\n        ``url_path`` is the path component of the URL with\n        ``static_url_prefix`` removed.  The return value should be\n        filesystem path relative to ``static_path``.\n\n        This is the inverse of `make_static_url`..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private void doWrite(SelectionKey key) throws IOException { WebSocketImpl conn = (WebSocketImpl) key.attachment(); if( SocketChannelIOHelper.batch( conn, conn.getChannel() ) ) { if( key.isValid() ) { key.interestOps(SelectionKey.OP_READ); } } } \n### Response:", "ground_truth": "Execute a write operation\n@param key the selectionkey to write on\n@throws IOException if an error happened during batch", "predict": "private void doWrite(SelectionKey key) throws IOException {\n\n        WebSocketImpl conn = (WebSocketImpl) key.attachment();\n\n        if( SocketChannelIOHelper.batch( conn, conn.getChannel() ) ) {\n\n            if( key.isValid() ) {\n                key.interestOps(SelectionKey.OP_READ);\n            }\n        }\n    }"}, {"ID": 511, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function Context(hook, opts) { var prop; this.hook = hook; //create new object, to avoid affecting input opts in other places //For example context.opts.plugin = Object is done, then it affects by reference this.opts = {}; for (prop in opts) { if (opts.hasOwnProperty(prop)) { this.opts[prop] = opts[prop]; } } this.cmdLine = process.argv.join(' '); this.cordova = require('../cordova/cordova'); }. \n### Response: Creates hook script context\n@constructor\n@param {String} hook The hook type\n@param {Object} opts Hook options\n@returns {Object}.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private boolean doSetupSelectorAndServerThread() { selectorthread.setName( \"WebSocketSelector-\" + selectorthread.getId() ); try { server = ServerSocketChannel.open(); server.configureBlocking( false ); ServerSocket socket = server.socket(); socket.setReceiveBufferSize( WebSocketImpl.RCVBUF ); socket.setReuseAddress( isReuseAddr() ); socket.bind( address ); selector = Selector.open(); server.register( selector, server.validOps() ); startConnectionLostTimer(); for( WebSocketWorker ex : decoders ){ ex.start(); } onStart(); } catch ( IOException ex ) { handleFatal( null, ex ); return false; } return true; } \n### Response:", "ground_truth": "Setup the selector thread as well as basic server settings\n@return true, if everything was successful, false if some error happened", "predict": "Provides a method to setup the WebSocket server and selector thread\n@method doSetupSelectorAndServerThread\n@param {ServerSocketChannel} server The server channel\n@param {ServerSocket} socket The socket for the server\n@param {Selector} selector The selector for the server\n@param {boolean} isReuseAddr The flag to indicate if the address should be reused\n@param {WebSocketWorker} decoders The list of WebSocket workers\n@try {\n    // setup server and selector\n    server = server.socket();\n    server.configureBlocking(false);\n    server.setReceiveBufferSize(WebSocketImpl.RCVBUF);\n    server.setReuseAddress(isReuseAddr());\n    server.bind(address);\n    selector = selector.open();\n    server.register(selector, server.validOps());\n    startConnectionLostTimer();\n    for(WebSocketWorker ex : decoders){ ex.start(); }\n    onStart();\n} catch (IOException ex) {\n    handleFatal(null, ex);\n    return false;\n} finally {\n    // clean up resources\n    server.close();\n    socket.close();\n    selector.close();\n}\n@endtry\n@return {boolean} True if everything went well, false if there was an error."}, {"ID": 512, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def tags(self): \"\"\" Returns a list of all the tags applied to this view \"\"\" tag_list = self.spec.get('tag', []) if isinstance(tag_list, (list, set, tuple)): return list(tag_list) return [tag_list]. \n### Response: Returns a list of all the tags applied to this view.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private boolean doEnsureSingleThread() { synchronized ( this ) { if( selectorthread != null ) throw new IllegalStateException( getClass().getName() + \" can only be started once.\" ); selectorthread = Thread.currentThread(); if( isclosed.get() ) { return false; } } return true; } \n### Response:", "ground_truth": "The websocket server can only be started once\n@return true, if the server can be started, false if already a thread is running", "predict": "Ensures that only one thread is allowed to access the selector thread at a time."}, {"ID": 513, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static function is_integer(): bool { $args = \\func_get_args(); foreach ( $args as $a ){ if ( \\is_string($a) || (abs($a) > PHP_INT_MAX) ){ if ( !preg_match('/^-?(\\d+)$/', (string)$a) ){ return false; } } else if ( !\\is_int($a) ){ return false; } } return true; }. \n### Response: Checks if the item is a integer.\nCan take as many arguments and will return false if one of them is not an integer or the string of an integer.\n\n```php\n\\bbn\\x::dump(\\bbn\\str::is_integer(13.2));\n// (bool) false\n\\bbn\\x::dump(\\bbn\\str::is_integer(14));\n// (bool) true\n\\bbn\\x::dump(\\bbn\\str::is_integer('14'));\n// (bool) true\n```\n\n@param mixed $st The item to be tested.\n@return bool.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private void doServerShutdown() { stopConnectionLostTimer(); if( decoders != null ) { for( WebSocketWorker w : decoders ) { w.interrupt(); } } if( selector != null ) { try { selector.close(); } catch ( IOException e ) { log.error( \"IOException during selector.close\", e ); onError( null, e ); } } if( server != null ) { try { server.close(); } catch ( IOException e ) { log.error( \"IOException during server.close\", e ); onError( null, e ); } } } \n### Response:", "ground_truth": "Clean up everything after a shutdown", "predict": "This method is responsible for ending the server shutdown process. It stops any connection lost timer, handles the interruption of any WebSocketWorkers, and closes any selectors and servers. It also logs anyIOExceptions that occur during the shutdown process.\n\n```php\n\\bbn\\x::dump(\\bbn\\str::doServerShutdown());\n// void doServerShutdown() {\n// stopConnectionLostTimer();\n// if( decoders!= null ) { for( WebSocketWorker w : decoders ) { w.interrupt(); }\n// }\n// if( selector!= null ) { try { selector.close(); } catch ( IOException e ) { log.error( \"IOException during selector.close\", e ); onError( null, e ); }\n// }\n// if( server!= null ) { try { server.close(); } catch ( IOException e ) { log.error( \"IOException during server.close\", e ); onError( null, e ); }\n// }\n```\n\n@param void The method does not take any arguments.\n@return void."}, {"ID": 514, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def set_buffer(self, treebuffer, branches=None, ignore_branches=None, create_branches=False, visible=True, ignore_missing=False, ignore_duplicates=False, transfer_objects=False): \"\"\" Set the Tree buffer Parameters ---------- treebuffer : rootpy.tree.buffer.TreeBuffer a TreeBuffer branches : list, optional (default=None) only include these branches from the TreeBuffer ignore_branches : list, optional (default=None) ignore these branches from the TreeBuffer create_branches : bool, optional (default=False) If True then the branches in the TreeBuffer should be created. Use this option if initializing the Tree. A ValueError is raised if an attempt is made to create a branch with the same name as one that already exists in the Tree. If False the addresses of existing branches will be set to point at the addresses in this buffer. visible : bool, optional (default=True) If True then the branches will be added to the buffer and will be accessible as attributes of the Tree. ignore_missing : bool, optional (default=False) If True then any branches in this buffer that do not exist in the Tree will be ignored, otherwise a ValueError will be raised. This option is only valid when ``create_branches`` is False. ignore_duplicates : bool, optional (default=False) If False then raise a ValueError if the tree already has a branch with the same name as an entry in the buffer. If True then skip branches that already exist. This option is only valid when ``create_branches`` is True. transfer_objects : bool, optional (default=False) If True, all tree objects and collections will be transferred from the buffer into this Tree's buffer. \"\"\" # determine branches to keep while preserving branch order if branches is None: branches = treebuffer.keys() if ignore_branches is not None: branches = [b for b in branches if b not in ignore_branches] if create_branches: for name in branches: value = treebuffer[name] if self.has_branch(name): if ignore_duplicates: log.warning( \"Skipping entry in buffer with the same name \" \"as an existing branch: `{0}`\".format(name)) continue raise ValueError( \"Attempting to create two branches \" \"with the same name: `{0}`\".format(name)) if isinstance(value, Scalar): self.Branch(name, value, '{0}/{1}'.format( name, value.type)) elif isinstance(value, Array): length = value.length_name or len(value) self.Branch(name, value, '{0}[{2}]/{1}'.format( name, value.type, length)) else: self.Branch(name, value) else: for name in branches: value = treebuffer[name] if self.has_branch(name): self.SetBranchAddress(name, value) elif not ignore_missing: raise ValueError( \"Attempting to set address for \" \"branch `{0}` which does not exist\".format(name)) else: log.warning( \"Skipping entry in buffer for which no \" \"corresponding branch in the \" \"tree exists: `{0}`\".format(name)) if visible: newbuffer = TreeBuffer() for branch in branches: if branch in treebuffer: newbuffer[branch] = treebuffer[branch] newbuffer.set_objects(treebuffer) self.update_buffer(newbuffer, transfer_objects=transfer_objects). \n### Response: Set the Tree buffer\n\n        Parameters\n        ----------\n        treebuffer : rootpy.tree.buffer.TreeBuffer\n            a TreeBuffer\n\n        branches : list, optional (default=None)\n            only include these branches from the TreeBuffer\n\n        ignore_branches : list, optional (default=None)\n            ignore these branches from the TreeBuffer\n\n        create_branches : bool, optional (default=False)\n            If True then the branches in the TreeBuffer should be created.\n            Use this option if initializing the Tree. A ValueError is raised\n            if an attempt is made to create a branch with the same name as one\n            that already exists in the Tree. If False the addresses of existing\n            branches will be set to point at the addresses in this buffer.\n\n        visible : bool, optional (default=True)\n            If True then the branches will be added to the buffer and will be\n            accessible as attributes of the Tree.\n\n        ignore_missing : bool, optional (default=False)\n            If True then any branches in this buffer that do not exist in the\n            Tree will be ignored, otherwise a ValueError will be raised. This\n            option is only valid when ``create_branches`` is False.\n\n        ignore_duplicates : bool, optional (default=False)\n            If False then raise a ValueError if the tree already has a branch\n            with the same name as an entry in the buffer. If True then skip\n            branches that already exist. This option is only valid when\n            ``create_branches`` is True.\n\n        transfer_objects : bool, optional (default=False)\n            If True, all tree objects and collections will be transferred from\n            the buffer into this Tree's buffer..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private Socket getSocket( WebSocket conn ) { WebSocketImpl impl = (WebSocketImpl) conn; return ( (SocketChannel) impl.getSelectionKey().channel() ).socket(); } \n### Response:", "ground_truth": "Getter to return the socket used by this specific connection\n@param conn The specific connection\n@return The socket used by this connection", "predict": "The method `getSocket` is used to retrieve a socket from a WebSocket connection.\n\nThe method takes a `WebSocket` object as an argument and returns a `Socket` object. The `WebSocketImpl` object is used to retrieve the selection key and the channel, which is the socket to be used for communication. The `SocketChannel` object is then cast to a `SocketChannel` and the socket is returned.\n\nThe method is marked with the `@private` annotation, indicating that it is intended to be used within the same class. This is likely because the method is used to retrieve a specific socket from a WebSocket connection, and it is not intended to be accessed by other parts of the code outside of this class."}, {"ID": 515, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void sendContinueResponse(final HttpServerExchange exchange, final IoCallback callback) { if (!exchange.isResponseChannelAvailable()) { callback.onException(exchange, null, UndertowMessages.MESSAGES.cannotSendContinueResponse()); return; } internalSendContinueResponse(exchange, callback); }. \n### Response: Sends a continuation using async IO, and calls back when it is complete.\n\n@param exchange The exchange\n@param callback The completion callback.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void broadcast(byte[] data, Collection<WebSocket> clients) { if (data == null || clients == null) { throw new IllegalArgumentException(); } broadcast(ByteBuffer.wrap(data), clients); } \n### Response:", "ground_truth": "Send a byte array to a specific collection of websocket connections\n@param data the data to send to the endpoints\n@param clients a collection of endpoints to whom the text has to be send", "predict": "Broadcasts the given data to all the clients in the collection.\n\n@param data The data to be broadcasted\n@param clients The clients to be broadcasted to.\n\n"}, {"ID": 516, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function(distance) { var newpoint = this.point.plus(this.axisvector.unit().times(distance)); return new CSG.Connector(newpoint, this.axisvector, this.normalvector); }. \n### Response: creates a new Connector, with the connection point moved in the direction of the axisvector.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void broadcast(String text, Collection<WebSocket> clients) { if (text == null || clients == null) { throw new IllegalArgumentException(); } doBroadcast(text, clients); } \n### Response:", "ground_truth": "Send a text to a specific collection of websocket connections\n@param text the text to send to the endpoints\n@param clients a collection of endpoints to whom the text has to be send", "predict": "This method broadcast(String text, Collection<WebSocket> clients) is used to send a message to a specified number of clients. It checks if the text or clients are null and throws an IllegalArgumentException if either is. It then calls the doBroadcast(String text, Collection<WebSocket> clients) method to perform the broadcast."}, {"ID": 517, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static function run(string $command, string $cwd = null): array { return Sys::run($command, $cwd); }. \n### Response: run a command. it is support windows\n@param string      $command\n@param string|null $cwd\n@return array\n@throws \\RuntimeException\n@deprecated Please use Sys::run().\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private void doBroadcast(Object data, Collection<WebSocket> clients) { String sData = null; if (data instanceof String) { sData = (String)data; } ByteBuffer bData = null; if (data instanceof ByteBuffer) { bData = (ByteBuffer)data; } if (sData == null && bData == null) { return; } Map<Draft, List<Framedata>> draftFrames = new HashMap<Draft, List<Framedata>>(); for( WebSocket client : clients ) { if( client != null ) { Draft draft = client.getDraft(); fillFrames(draft, draftFrames, sData, bData); try { client.sendFrame( draftFrames.get( draft ) ); } catch ( WebsocketNotConnectedException e ) { //Ignore this exception in this case } } } } \n### Response:", "ground_truth": "Private method to cache all the frames to improve memory footprint and conversion time\n@param data the data to broadcast\n@param clients the clients to send the message to", "predict": "doBroadcast a WebSocket broadcast. It receives data from an Object and sends it to all clients in the Collection.\n\n@param Object data\n@param Collection<WebSocket> clients\n@return void\n@throws WebsocketNotConnectedException\n@ deprecated Please use Websocket.sendFrame() instead."}, {"ID": 518, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function getSuffix(suffix) { suffix = (suffix.slice(0, 1) === ' ') ? suffix : suffix.replace(/.+?(?=\\s)/, ''); suffix = suffix.slice(1, suffix.length); return suffix; }. \n### Response: Returns a cleaned up version of the\nremaining text to the right of the cursor.\n\n@param {String} suffix\n@return {String}\n@api private.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private void fillFrames(Draft draft, Map<Draft, List<Framedata>> draftFrames, String sData, ByteBuffer bData) { if( !draftFrames.containsKey( draft ) ) { List<Framedata> frames = null; if (sData != null) { frames = draft.createFrames( sData, false ); } if (bData != null) { frames = draft.createFrames( bData, false ); } if (frames != null) { draftFrames.put(draft, frames); } } } \n### Response:", "ground_truth": "Fills the draftFrames with new data for the broadcast\n@param draft The draft to use\n@param draftFrames The list of frames per draft to fill\n@param sData the string data, can be null\n@param bData the bytebuffer data, can be null", "predict": "This method fills in frames for a draft object, based on the provided data. It checks if the draft object has already been created with a frame, and if not, creates and adds frames to the map. It also adds the frames to the draft object if they are not already present.\n\n@param {Draft} draft\n@param {Map<Draft, List<Framedata>>} draftFrames\n@param {String} sData\n@param {ByteBuffer} bData\n@return void\n@api private."}, {"ID": 519, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static function start_cache($template) { $key = self::get_key($template); self::$template_data[$key]['start_time'] = microtime(true); }. \n### Response: Start logging of cache time\n\n@param object $template cached template.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static int transferByteBuffer( ByteBuffer source, ByteBuffer dest ) { if( source == null || dest == null ) { throw new IllegalArgumentException(); } int fremain = source.remaining(); int toremain = dest.remaining(); if( fremain > toremain ) { int limit = Math.min( fremain, toremain ); source.limit( limit ); dest.put( source ); return limit; } else { dest.put( source ); return fremain; } } \n### Response:", "ground_truth": "Transfer from one ByteBuffer to another ByteBuffer\n\n@param source the ByteBuffer to copy from\n@param dest   the ByteBuffer to copy to\n@return the number of transferred bytes", "predict": "Transfers a buffer from the source to the destination and returns the number of bytes transferred.\n\n@param ByteBuffer $source buffer to be transferred\n@param ByteBuffer $dest buffer to be transferred\n\n"}, {"ID": 520, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def initializePage(self): \"\"\" Initializes the page based on the current structure information. \"\"\" tree = self.uiStructureTREE tree.blockSignals(True) tree.setUpdatesEnabled(False) self.uiStructureTREE.clear() xstruct = self.scaffold().structure() self._structure = xstruct for xentry in xstruct: XScaffoldElementItem(tree, xentry) tree.blockSignals(False) tree.setUpdatesEnabled(True). \n### Response: Initializes the page based on the current structure information..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public JPAApi start() { jpaConfig .persistenceUnits() .forEach( persistenceUnit -> emfs.put( persistenceUnit.name, Persistence.createEntityManagerFactory(persistenceUnit.unitName))); return this; } \n### Response:", "ground_truth": "Initialise JPA entity manager factories.", "predict": "Starts the JPA application. Iterates through all persistence units and creates an EntityManagerFactory for each unit. Returns the JPAApi object."}, {"ID": 521, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public void clearCache() { entityCache.clearCache(CommerceWishListImpl.class); finderCache.clearCache(FINDER_CLASS_NAME_ENTITY); finderCache.clearCache(FINDER_CLASS_NAME_LIST_WITH_PAGINATION); finderCache.clearCache(FINDER_CLASS_NAME_LIST_WITHOUT_PAGINATION); }. \n### Response: Clears the cache for all commerce wish lists.\n\n\nThe {@link EntityCache} and {@link FinderCache} are both cleared by this method.\n.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public EntityManager em(String name) { EntityManagerFactory emf = emfs.get(name); if (emf == null) { return null; } return emf.createEntityManager(); } \n### Response:", "ground_truth": "Get a newly created EntityManager for the specified persistence unit name.\n\n@param name The persistence unit name", "predict": "Creates an instance of the EntityManager and returns it.\n\nThe method first retrieves the specified EntityManagerFactory by calling the method <ems>get</ems>(<name>)</name> with the <name>name</name> parameter equal to the string \"{name}\" where \"{name}\" is a placeholder for the name of the EntityManagerFactory to be retrieved. If the returned EntityManagerFactory is null, a null object is returned. If the EntityManagerFactory is not found, a null object is returned. Finally, the method creates an instance of the EntityManager by calling the method <emf>create</emf>()."}, {"ID": 522, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func ToRevoke(username string, perm chronograf.Permission) string { return ToInfluxQL(\"REVOKE\", \"FROM\", username, perm) }. \n### Response: // ToRevoke converts the permission into InfluxQL revokes.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void withTransaction(Consumer<EntityManager> block) { withTransaction( em -> { block.accept(em); return null; }); } \n### Response:", "ground_truth": "Run a block of code with a newly created EntityManager for the default Persistence Unit.\n\n@param block Block of code to execute", "predict": "// WithTransaction blocks the EntityManager's transaction and returns null when it is finished."}, {"ID": 523, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (f *File) Seek(offset int64, whence int) (n int64, err error) { newOffset := offset switch whence { case io.SeekStart: case io.SeekCurrent: origOffset := atomic.LoadInt64(&f.offset) newOffset = origOffset + offset case io.SeekEnd: ei, err := f.fs.config.KBFSOps().Stat(f.fs.ctx, f.node) if err != nil { return 0, err } newOffset = int64(ei.Size) + offset } if newOffset < 0 { return 0, errors.Errorf(\"Cannot seek to offset %d\", newOffset) } _ = atomic.SwapInt64(&f.offset, newOffset) return newOffset, nil }. \n### Response: // Seek implements the billy.File interface for File..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private static Seq<Object> convertArgsToScalaBuffer(final Object... args) { return scala.collection.JavaConverters.asScalaBufferConverter(wrapArgsToListIfNeeded(args)) .asScala() .toList(); } \n### Response:", "ground_truth": "Converts the varargs to a scala buffer, takes care of wrapping varargs into a intermediate list\nif necessary\n\n@param args the message arguments\n@return scala type for message processing", "predict": "// Converts Object arguments to Scala Buffer.."}, {"ID": 524, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (c *Commit) File(path string) (*File, error) { tree, err := c.Tree() if err != nil { return nil, err } return tree.File(path) }. \n### Response: // File returns the file with the specified \"path\" in the commit and a\n// nil error if the file exists. If the file does not exist, it returns\n// a nil file and the ErrFileNotFound error..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @SafeVarargs private static <T> List<T> wrapArgsToListIfNeeded(final T... args) { List<T> out; if (args != null && args.length == 1 && args[0] instanceof List) { out = (List<T>) args[0]; } else { out = Arrays.asList(args); } return out; } \n### Response:", "ground_truth": "Wraps arguments passed into a list if necessary.\n\nReturns the first value as is if it is the only argument and a subtype of `java.util.List`\nOtherwise, it calls Arrays.asList on args\n\n@param args arguments as a List", "predict": "// wrapArgsToListIfNeeded returns a new list that wraps the given args if they are a list, and the original list if they are not.\n// If the args are not a list, the returned list will be a single element list with the original args.\n// This method is safe because it does not modify the input args and only returns a modified version of the input.\n// It is used in the following example to wrap the arguments passed to the function:\n// List<String> myArgs = Arrays.asList(\"arg1\", \"arg2\", \"arg3\");\n// List<String> wrappedArgs = wrapArgsToListIfNeeded(myArgs);\n// String arg1 = wrappedArgs.get(0); // \"arg1\"\n// String arg2 = wrappedArgs.get(1); // \"arg2\"\n// String arg3 = wrappedArgs.get(2); // \"arg3\""}, {"ID": 525, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @SuppressWarnings(\"unchecked\") public Set<QueryableEntry> query(Predicate predicate) { stats.incrementQueryCount(); if (!haveAtLeastOneIndex() || !(predicate instanceof IndexAwarePredicate)) { return null; } IndexAwarePredicate indexAwarePredicate = (IndexAwarePredicate) predicate; QueryContext queryContext = queryContextProvider.obtainContextFor(this); if (!indexAwarePredicate.isIndexed(queryContext)) { return null; } Set<QueryableEntry> result = indexAwarePredicate.filter(queryContext); if (result != null) { stats.incrementIndexedQueryCount(); queryContext.applyPerQueryStats(); } return result; }. \n### Response: Performs a query on this indexes instance using the given predicate.\n\n@param predicate the predicate to evaluate.\n@return the produced result set or {@code null} if the query can't be\nperformed using the indexes known to this indexes instance..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public String get(play.api.i18n.Lang lang, String key, Object... args) { Seq<Object> scalaArgs = convertArgsToScalaBuffer(args); return messages.apply(key, scalaArgs, lang); } \n### Response:", "ground_truth": "Translates a message.\n\nUses `java.text.MessageFormat` internally to format the message.\n\n@param lang the message lang\n@param key the message key\n@param args the message arguments\n@return the formatted message or a default rendering if the key wasn't defined", "predict": "This method retrieves a value from a specified key using the specified arguments in the specified language.\n\n@param lang the language in which the value should be retrieved.\n@param key the key of the value to retrieve.\n@param args the arguments to use when retrieving the value.\n@return the value retrieved or {@code null} if the value could not be retrieved.\n\n@see play.api.i18n.Messages#apply(String, Object..., play.api.i18n.Lang)\n\n@SuppressWarnings(\"unchecked\")"}, {"ID": 526, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function addChildByData($routeName, $options, $position = 'last') { if (isset($options['children']['.defaults'])) { $options['children']['.defaults'] = array_merge($this->defaultOptions, $options['children']['.defaults']); } else { $options['children']['.defaults'] = $this->defaultOptions; } $options['parent'] = $this; $options = array_merge($this->defaultOptions, $options); $item = $this->getMenu()->createItem($routeName, $options); return $this->addChild($item, $position); }. \n### Response: Add a child to the menu using item data.\n\nPossible value for position are:\n* 'last': insert at last position (append), this is the default\n* 'first': insert at first position\n* positive number (e.g. 2): insert at this position, count starts at 0\n* negative number (e.g. -1): insert at this position from the END of the children backwards\n\n@param string $routeName\n@param array $options\n@param string $position\n\n@return MenuItem    The generated item.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public String get(play.api.i18n.Lang lang, List<String> keys, Object... args) { Buffer<String> keyArgs = scala.collection.JavaConverters.asScalaBufferConverter(keys).asScala(); Seq<Object> scalaArgs = convertArgsToScalaBuffer(args); return messages.apply(keyArgs.toSeq(), scalaArgs, lang); } \n### Response:", "ground_truth": "Translates the first defined message.\n\nUses `java.text.MessageFormat` internally to format the message.\n\n@param lang the message lang\n@param keys the messages keys\n@param args the message arguments\n@return the formatted message or a default rendering if the key wasn't defined", "predict": "Get a message from the system using the specified keys and arguments.\n\n@param play.api.i18n.Lang $lang\n@param List<String> $keys\n@param Object... $args\n\n@return String    The generated message."}, {"ID": 527, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def background_mean(self): \"\"\" The mean of ``background`` values within the source segment. Pixel values that are masked in the input ``data``, including any non-finite pixel values (i.e. NaN, infs) that are automatically masked, are also masked in the background array. \"\"\" if self._background is not None: if self._is_completely_masked: return np.nan * self._background_unit # unit for table else: return np.mean(self._background_values) else: return None. \n### Response: The mean of ``background`` values within the source segment.\n\n        Pixel values that are masked in the input ``data``, including\n        any non-finite pixel values (i.e. NaN, infs) that are\n        automatically masked, are also masked in the background array..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public Boolean isDefinedAt(play.api.i18n.Lang lang, String key) { return messages.isDefinedAt(key, lang); } \n### Response:", "ground_truth": "Check if a message key is defined.\n\n@param lang the message lang\n@param key the message key\n@return a Boolean", "predict": "The method `isDefinedAt` returns `true` if a message with the specified key is defined in the message map, and `false` otherwise."}, {"ID": 528, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (gc ConnectionConfig) Validate() error { if gc.Region == \"\" { return NewMissingConfigValue(OSEnvRegion, \"Region\") } if gc.ProjectID == \"\" { return NewMissingConfigValue(OSEnvProjectID, \"ProjectID\") } return nil }. \n### Response: // Validate checks the connection's fields for invalid values.\n// If the values are not valid, it returns a config.InvalidConfigValueError\n// error with the key set to the corresponding OS environment variable\n// name.\n//\n// To be considered valid, each of the connection's must be set to some\n// non-empty value..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public Messages preferred(Collection<Lang> candidates) { Seq<Lang> cs = Scala.asScala(candidates); play.api.i18n.Messages msgs = messages.preferred((Seq) cs); return new MessagesImpl(new Lang(msgs.lang()), this); } \n### Response:", "ground_truth": "Get a messages context appropriate for the given candidates.\n\nWill select a language from the candidates, based on the languages available, and fallback\nto the default language if none of the candidates are available.\n\n@param candidates the candidate languages\n@return the most appropriate Messages instance given the candidate languages", "predict": "// preferred returns the preferred Messages implementation for the given candidates.\n// It uses the preferred method of the messages package to select the appropriate Lang implementation.\n//\n// The candidates collection is converted to a Scala sequence using the asScala method and then passed to the preferred method.\n// The resulting MessagesImpl object is returned with the Lang object set to the selected Lang implementation."}, {"ID": 529, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def _maybe_to_categorical(array): \"\"\" Coerce to a categorical if a series is given. Internal use ONLY. \"\"\" if isinstance(array, (ABCSeries, ABCCategoricalIndex)): return array._values elif isinstance(array, np.ndarray): return Categorical(array) return array. \n### Response: Coerce to a categorical if a series is given.\n\n    Internal use ONLY..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public Messages preferred(Http.RequestHeader request) { play.api.i18n.Messages msgs = messages.preferred(request); return new MessagesImpl(new Lang(msgs.lang()), this); } \n### Response:", "ground_truth": "Get a messages context appropriate for the given request.\n\nWill select a language from the request, based on the languages available, and fallback to\nthe default language if none of the candidates are available.\n\n@param request the incoming request\n@return the preferred messages context for the request", "predict": "Preferred method in Messages class\n\n    Returns a new MessagesImpl instance with the preferred language and this instance.\n\n    Play's i18n library uses the specified language by default, so this method only\n    cares about the language specified in the request header."}, {"ID": 530, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: ApiFuture<Void> begin() { BeginTransactionRequest.Builder beginTransaction = BeginTransactionRequest.newBuilder(); beginTransaction.setDatabase(firestore.getDatabaseName()); if (previousTransactionId != null) { beginTransaction .getOptionsBuilder() .getReadWriteBuilder() .setRetryTransaction(previousTransactionId); } ApiFuture<BeginTransactionResponse> transactionBeginFuture = firestore.sendRequest( beginTransaction.build(), firestore.getClient().beginTransactionCallable()); return ApiFutures.transform( transactionBeginFuture, new ApiFunction<BeginTransactionResponse, Void>() { @Override public Void apply(BeginTransactionResponse beginTransactionResponse) { transactionId = beginTransactionResponse.getTransaction(); pending = true; return null; } }); }. \n### Response: Starts a transaction and obtains the transaction id from the server..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public Result setLang(Result result, Lang lang) { return messages.setLang(result.asScala(), lang).asJava(); } \n### Response:", "ground_truth": "Given a Result and a Lang, return a new Result with the lang cookie set to the given Lang.\n\n@param result the result where the lang will be set.\n@param lang the lang to set on the result\n@return a new result with the lang.", "predict": "This method sets the language of the message to the specified Lang."}, {"ID": 531, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def get_nodes(graph: BELGraph, node_predicates: NodePredicates) -> Set[BaseEntity]: \"\"\"Get the set of all nodes that pass the predicates.\"\"\" return set(filter_nodes(graph, node_predicates=node_predicates)). \n### Response: Get the set of all nodes that pass the predicates..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public final Self bindings(GuiceableModule... modules) { return newBuilder(delegate.bindings(Scala.varargs(modules))); } \n### Response:", "ground_truth": "Add bindings from guiceable modules.\n\n@param modules the set of modules to bind\n@return a copy of this builder configured with those modules", "predict": "Self bindings(GuiceableModule... modules)"}, {"ID": 532, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void deleteWsdlPublishDirectory(File dir) throws IOException { String[] files = dir.list(); for (int i = 0; files != null && i < files.length; i++) { String fileName = files[i]; File file = new File(dir + \"/\" + fileName); if (file.isDirectory()) { deleteWsdlPublishDirectory(file); } else { if (file.delete() == false) DEPLOYMENT_LOGGER.cannotDeletePublishedWsdlDoc(file.toURI().toURL()); } } // delete the directory as well if (dir.delete() == false) { DEPLOYMENT_LOGGER.cannotDeletePublishedWsdlDoc(dir.toURI().toURL()); } }. \n### Response: Delete the published wsdl document, traversing down the dir structure.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public final Self bindings(play.api.inject.Module... modules) { return bindings(Guiceable.modules(modules)); } \n### Response:", "ground_truth": "Add bindings from Play modules.\n\n@param modules the set of Guice modules whose bindings to apply\n@return a copy of this builder configured with the provided bindings", "predict": "This method returns the Self bindings for the given modules."}, {"ID": 533, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def unchunk(self): \"\"\" Reconstitute the chunked array back into a full ndarray. Returns ------- ndarray \"\"\" if self.padding != len(self.shape)*(0,): shape = self.values.shape arr = empty(shape, dtype=object) for inds in product(*[arange(s) for s in shape]): slices = [] for i, p, n in zip(inds, self.padding, shape): start = None if (i == 0 or p == 0) else p stop = None if (i == n-1 or p == 0) else -p slices.append(slice(start, stop, None)) arr[inds] = self.values[inds][tuple(slices)] else: arr = self.values return allstack(arr.tolist()). \n### Response: Reconstitute the chunked array back into a full ndarray.\n\n        Returns\n        -------\n        ndarray.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public final Self bindings(play.api.inject.Binding<?>... bindings) { return bindings(Guiceable.bindings(bindings)); } \n### Response:", "ground_truth": "Add Play bindings.\n\n@param bindings the set of play bindings to apply\n@return a copy of this builder configured with the provided bindings", "predict": "Provides a method for binding an array of objects using a list of bindings.\n\n        Returns\n        -------\n        Self."}, {"ID": 534, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void sendRequest(String methodName, Object... params) { sendRequest(new InvocationRequest(methodName, params), true); }. \n### Response: Send a request to the remote viewer to request execution of the specified method.\n\n@param methodName Name of the method to execute.\n@param params Parameters to pass to the method (may be null)..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public final Self overrides(GuiceableModule... modules) { return newBuilder(delegate.overrides(Scala.varargs(modules))); } \n### Response:", "ground_truth": "Override bindings using guiceable modules.\n\n@param modules the set of Guice modules whose bindings override some previously configured ones\n@return a copy of this builder re-configured with the provided bindings", "predict": "This method returns a new builder object that includes the overrides method of the delegate and any additional methods defined in the specified modules.\n\n@param modules List of modules to include in the overrides method.\n\n"}, {"ID": 535, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void adjustForDisplay(ImageGray transform , int numLevels , double valueRange ) { if( transform instanceof GrayF32) adjustForDisplay((GrayF32)transform,numLevels,(float)valueRange); else adjustForDisplay((GrayI)transform,numLevels,(int)valueRange); }. \n### Response: Adjusts the values inside a wavelet transform to make it easier to view.\n\n@param transform\n@param numLevels Number of levels in the transform.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public final Self overrides(play.api.inject.Module... modules) { return overrides(Guiceable.modules(modules)); } \n### Response:", "ground_truth": "Override bindings using Play modules.\n\n@param modules the set of Play modules whose bindings override some previously configured ones\n@return a copy of this builder re-configured with the provided bindings", "predict": "Overrides the method in the injected module with the same name and parameters.\n\n@param modules modules injected by the module provider.\n\n"}, {"ID": 536, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private static function getMediaRootRelative() { $config = ObjectFactory::getInstance('configuration'); $mediaRootAbs = $config->getDirectoryValue('uploadDir', 'Media'); return self::makeRelative($mediaRootAbs); }. \n### Response: Get the media root directory relative to the executed script\n@return String.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public final Self overrides(play.api.inject.Binding<?>... bindings) { return overrides(Guiceable.bindings(bindings)); } \n### Response:", "ground_truth": "Override bindings using Play bindings.\n\n@param bindings a set of Play bindings that override some previously configured ones\n@return a copy of this builder re-configured with the provided bindings", "predict": "Overrides the binding of a module or a class.\n@param bindings a list of bindings\n@return Self\n```typescript\n```"}, {"ID": 537, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public com.google.api.ads.adwords.axis.v201809.cm.BidSource getCpcBidSource() { return cpcBidSource; }. \n### Response: Gets the cpcBidSource value for this CpcBid.\n\n@return cpcBidSource   * The level (ad group or criterion) at which the bid was set.\nThis is applicable\nonly at the criteria level.\nThis field is\nread only and will be ignored when sent to the API..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public final Self disable(Class<?>... moduleClasses) { return newBuilder(delegate.disable(Scala.toSeq(moduleClasses))); } \n### Response:", "ground_truth": "Disable modules by class.\n\n@param moduleClasses the module classes whose bindings should be disabled\n@return a copy of this builder configured to ignore the provided module classes", "predict": "Disables the specified modules in the adwords ad server.\n\n@param moduleClasses   * A sequence of class<?> objects representing the modules to disable.\nThis method does not modify the adwords ad server configuration.\nThis field is\nread only and will be ignored when sent to the API..\n\n@return A newBuilder object that represents the adwords ad server configuration after disabling the specified modules.\nThis method returns a newBuilder object that represents the adwords ad server configuration with all modules disabled."}, {"ID": 538, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def shorter_name(key): \"\"\"Return a shorter name for an id. Does this by only taking the last part of the URI, after the last / and the last #. Also replaces - and . with _. Parameters ---------- key: str Some URI Returns ------- key_short: str A shortened, but more ambiguous, identifier \"\"\" key_short = key for sep in ['#', '/']: ind = key_short.rfind(sep) if ind is not None: key_short = key_short[ind+1:] else: key_short = key_short return key_short.replace('-', '_').replace('.', '_'). \n### Response: Return a shorter name for an id.\n\n    Does this by only taking the last part of the URI,\n    after the last / and the last #. Also replaces - and . with _.\n\n    Parameters\n    ----------\n    key: str\n        Some URI\n\n    Returns\n    -------\n    key_short: str\n        A shortened, but more ambiguous, identifier.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @Deprecated // TODO: When you remove this method make call(Request) below abstract public CompletionStage<Result> call(Context ctx) { return call( ctx.args != null && !ctx.args.isEmpty() ? ctx.request().addAttr(CTX_ARGS, ctx.args) : ctx.request()); } \n### Response:", "ground_truth": "the\nmigration guide for more details.", "predict": "@Deprecated\n\n* This method is deprecated and will be removed in the future.\n* It is recommended to use the `addAttr` method of the `Request` object instead.\n* The method call is now abstract and will need to be implemented by the subclass.\n\n* This method is used to call the `call` method with the appropriate arguments.\n* It returns a `CompletionStage` object that indicates the completion of the method call.\n\n* The `ctx.args!= null &&!ctx.args.isEmpty()` condition is used to determine if there are any additional arguments to pass to the `call` method.\n* The `ctx.request().addAttr(CTX_ARGS, ctx.args)` method is used to add the specified attributes to the request.\n\n* When this method is removed, the `call` method will need to be updated to use the `addAttr` method instead.\n\n* The abstract method `call` is used to call the `call` method with the appropriate arguments.\n* The `ctx.args!= null &&!ctx.args.isEmpty()` condition is used to determine if there are any additional arguments to pass to the `call` method.\n* The `ctx.request().addAttr(CTX_ARGS, ctx.args)` method is used to add the specified attributes to the request."}, {"ID": 539, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def _overlay_expand(self): \"\"\"This method overlays each of the value sources onto the default in each of the defined options. It does so using a breadth first iteration, overlaying and expanding each level of the tree in turn. As soon as no changes were made to any level, the loop breaks and the work is done. The actual action of the overlay is to take the value from the source and copy into the 'default' member of each Option object. \"expansion\" means converting an option value into its real type from string. The conversion is accomplished by simply calling the'set_value' method of the Option object. If the resultant type has its own configuration options, bring those into the current namespace and then proceed to overlay/expand those. \"\"\" new_keys_have_been_discovered = True # loop control, False breaks loop finished_keys = set() all_reference_values = {} while new_keys_have_been_discovered: # loop until nothing more is done # names_of_all_exsting_options holds a list of all keys in the # option definitons in breadth first order using this form: # [ 'x', 'y', 'z', 'x.a', 'x.b', 'z.a', 'z.b', 'x.a.j', 'x.a.k', # 'x.b.h'] names_of_all_exsting_options = [ x for x in self.option_definitions.keys_breadth_first() if isinstance(self.option_definitions[x], Option) ] new_keys_have_been_discovered = False # setup to break loop # create alternate paths options set_of_reference_value_option_names = \\ self._create_reference_value_options( names_of_all_exsting_options, finished_keys ) for a_ref_option_name in set_of_reference_value_option_names: if a_ref_option_name not in all_reference_values: all_reference_values[a_ref_option_name] = [] all_keys = list(set_of_reference_value_option_names) \\ + names_of_all_exsting_options # previous versions of this method pulled the values from the # values sources deeper within the following nested loops. # that was not necessary and caused a lot of redundant work. # the 'values_from_all_sources' now holds all the the values # from each of the value sources. values_from_all_sources = [ a_value_source.get_values( self, # pass in the config_manager itself True, # ignore mismatches self.value_source_object_hook # build with this class ) for a_value_source in self.values_source_list ] # overlay process: # fetch all the default values from the value sources before # applying the from string conversions for key in all_keys: if key in finished_keys: continue #if not isinstance(an_option, Option): # continue # aggregations and other types are ignored # loop through all the value sources looking for values # that match this current key. if self.option_definitions[key].reference_value_from: reference_value_from = ( self.option_definitions[key].reference_value_from ) top_key = key.split('.')[-1] self.option_definitions[key].default = ( self.option_definitions[reference_value_from] [top_key].default ) all_reference_values[ '.'.join((reference_value_from, top_key)) ].append( key ) an_. \n### Response: This method overlays each of the value sources onto the default\n        in each of the defined options.  It does so using a breadth first\n        iteration, overlaying and expanding each level of the tree in turn.\n        As soon as no changes were made to any level, the loop breaks and the\n        work is done.  The actual action of the overlay is to take the value\n        from the source and copy into the 'default' member of each Option\n        object.\n\n        \"expansion\" means converting an option value into its real type from\n        string. The conversion is accomplished by simply calling the\n       'set_value' method of the Option object.  If the resultant type has its\n        own configuration options, bring those into the current namespace and\n        then proceed to overlay/expand those..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public CompletionStage<Result> call( Request req) { // TODO: Make this method abstract after removing call(Context) return Context.safeCurrent().map( threadLocalCtx -> { // A previous action did explicitly set a context onto the thread local (via // Http.Context.current.set(...)) // Let's use that context so the user doesn't loose data he/she set onto that ctx // (args,...) Context newCtx = threadLocalCtx.withRequest(req.removeAttr(CTX_ARGS)); Context.setCurrent(newCtx); return call(newCtx); }).orElseGet( () -> { // A previous action did not set a context explicitly, we simply create a new one to // pass on the request Context ctx = new Context(req.removeAttr(CTX_ARGS), contextComponents); ctx.args = req.attrs().getOptional(CTX_ARGS).orElse(new HashMap<>()); return call(ctx); }); } \n### Response:", "ground_truth": "", "predict": "This method calls a external API (call(Context)) with a Request object. It uses the context provided by the user to avoid losing any data set on the context. The method returns a CompletionStage<Result> object, which can be used to handle the response from the API. The method is currently abstract, which means that it can be extended to add additional functionality."}, {"ID": 540, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func NewHTTPProvider(path string) (*HTTPProvider, error) { if _, err := os.Stat(path); os.IsNotExist(err) { return nil, fmt.Errorf(\"webroot path does not exist\") } return &HTTPProvider{path: path}, nil }. \n### Response: // NewHTTPProvider returns a HTTPProvider instance with a configured webroot path.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public Optional<File> getExistingFile(String relativePath) { return OptionConverters.toJava(env.getExistingFile(relativePath)); } \n### Response:", "ground_truth": "Retrieves a file relative to the application root path. This method returns an Optional, using\nempty if the file was not found.\n\n@param relativePath relative path of the file to fetch\n@return an existing file", "predict": "// GetExistingFile returns an Optional<File> containing the file with the given relative path, if it exists."}, {"ID": 541, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public Entry insertAfter(Entry newEntry, Entry insertAfter) { if (tc.isEntryEnabled()) SibTr.entry(tc, \"insertAfter\", new Object[] { newEntry, insertAfter }); Entry insertedEntry = null; //check that the params are not null, if either is, there is nothing to do. if(newEntry != null && insertAfter != null) { //call the internal unsynchronized insert method insertedEntry = insertAfter.forceInsertAfter(newEntry); } if (tc.isEntryEnabled()) SibTr.exit(tc, \"insertAfter\", insertedEntry); return insertedEntry; }. \n### Response: Synchronized. Insert an entry into the list after a given one. The\nnew entry must not already be in a list. The entry after which the new\none is to be inserted must be in this list.\n\n@param newEntry The entry to be added.\n@param insertAfter The entry after which the new one is to be inserted.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public <A extends Annotation> Binding<T> in(final Class<A> scope) { return underlying.in(scope).asJava(); } \n### Response:", "ground_truth": "Configure the scope for this binding.", "predict": "Synchronized. Returns a binding of the specified type for the given scope.\n\n@param scope The class or interface to which the method belongs.\n\n"}, {"ID": 542, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override synchronized public V put(K key, V value) { V oldValue = this.get(key); try { super.put(key, value); writeBack(key, value); return oldValue; } catch(Exception e) { super.put(key, oldValue); writeBack(key, oldValue); throw new VoldemortException(\"Failed to put(\" + key + \", \" + value + \") in write through cache\", e); } }. \n### Response: Updates the value in HashMap and writeBack as Atomic step.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static <A, B> Tuple<A, B> Tuple(A a, B b) { return new Tuple<A, B>(a, b); } \n### Response:", "ground_truth": "Constructs a tuple of A,B\n\n@param a The a value\n@param b The b value\n@param  a's type\n@param  b's type\n@return The tuple", "predict": "Creates a new Tuple object with the specified arguments."}, {"ID": 543, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func Sprint(a ...interface{}) string { a = append(a, ResetCode) compileValues(&a) return fmt.Sprint(a...) }. \n### Response: // Similar to fmt.Sprint, will reset the color at the end..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static <A, B, C, D, E> Tuple5<A, B, C, D, E> Tuple5(A a, B b, C c, D d, E e) { return new Tuple5<A, B, C, D, E>(a, b, c, d, e); } \n### Response:", "ground_truth": "Constructs a tuple of A,B,C,D,E\n\n@param a The a value\n@param b The b value\n@param c The c value\n@param d The d value\n@param e The e value\n@param  a's type\n@param  b's type\n@param  c's type\n@param  d's type\n@param  e's type\n@return The tuple", "predict": "// This method returns a new instance of the Tuple5 class with the given arguments."}, {"ID": 544, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (d *compressor) findMatch(pos int, prevHead int, prevLength int, lookahead int) (length, offset int, ok bool) { minMatchLook := maxMatchLength if lookahead < minMatchLook { minMatchLook = lookahead } win := d.window[0 : pos+minMatchLook] // We quit when we get a match that's at least nice long nice := len(win) - pos if d.nice < nice { nice = d.nice } // If we've got a match that's good enough, only look in 1/4 the chain. tries := d.chain length = prevLength if length >= d.good { tries >>= 2 } wEnd := win[pos+length] wPos := win[pos:] minIndex := pos - windowSize for i := prevHead; tries > 0; tries-- { if wEnd == win[i+length] { n := matchLen(win[i:], wPos, minMatchLook) if n > length && (n > minMatchLength || pos-i <= 4096) { length = n offset = pos - i ok = true if n >= nice { // The match is good enough that we don't try to find a better one. break } wEnd = win[pos+n] } } if i == minIndex { // hashPrev[i & windowMask] has already been overwritten, so stop now. break } i = int(d.hashPrev[i&windowMask]) - d.hashOffset if i < minIndex || i < 0 { break } } return }. \n### Response: // Try to find a match starting at index whose length is greater than prevSize.\n// We only look at chainCount possibilities before giving up.\n// pos = d.index, prevHead = d.chainHead-d.hashOffset, prevLength=minMatchLength-1, lookahead.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private static Executor toExecutor(ExecutionContext ec) { ExecutionContext prepared = ec.prepare(); if (prepared instanceof Executor) { return (Executor) prepared; } else { return prepared::execute; } } \n### Response:", "ground_truth": "Converts the execution context to an executor, preparing it first.\n\n@param ec the execution context.\n@return the Java Executor.", "predict": "// Return the specified Executor, if it is a prepared ExecutionContext.\n// Otherwise, return the prepared::execute method."}, {"ID": 545, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private function getOutput() { $output = \"# Todo list\\n\\n\"; // Make menu $columns = 12; $captions = implode('|', array_fill(0, $columns, ' ')); $subcaptions = implode('|', array_fill(0, $columns, ':---:')); $output .= \"|$captions|\\n\"; $output .= \"|$subcaptions|\\n\"; $menu = []; foreach (array_keys($this->output) as $language) { $menu[] = \"[$language](#$language)\"; } $rows = array_chunk($menu, $columns); array_map(function ($row) use (&$output) { $row = implode(' | ', $row); $output .= $row.\"\\n\"; }, $rows); $output .= \"\\n\\n\"; // Make items foreach ($this->output as $language => $values) { $output .= \"#### {$language}:\\n\"; $output .= implode(PHP_EOL, $values); $output .= \"\\n\\n[ [to top](#todo-list) ]\\n\\n\"; } return $output; }. \n### Response: Forming the page content for output.\n\n@return string.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static JPAConfig of(String name, String unitName) { return new DefaultJPAConfig(new JPAConfig.PersistenceUnit(name, unitName)); } \n### Response:", "ground_truth": "Create a default JPA configuration with the given name and unit name.\n\n@param name the name for the entity manager factory\n@param unitName the persistence unit name as used in `persistence.xml`\n@return a default JPA configuration", "predict": "Provides the default JPA configuration for the application.\n\n@return DefaultJPAConfig."}, {"ID": 546, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function getElementTop(el) { let top = 0; let element = el; do { top += element.offsetTop || 0; element = element.offsetParent; } while (element); return top; }. \n### Response: Get element's top offset.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static JPAConfig of(String n1, String u1, String n2, String u2) { return new DefaultJPAConfig( new JPAConfig.PersistenceUnit(n1, u1), new JPAConfig.PersistenceUnit(n2, u2)); } \n### Response:", "ground_truth": "Create a default JPA configuration with the given names and unit names.\n\n@param n1 Name of the first entity manager factory\n@param u1 Name of the first unit\n@param n2 Name of the second entity manager factory\n@param u2 Name of the second unit\n@return a default JPA configuration with the provided persistence units.", "predict": "This method returns a new DefaultJPAConfig object with the specifiedPersistenceUnit values for the given n1, u1, n2, and u2 parameters."}, {"ID": 547, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def _update_conda_devel(): \"\"\"Update to the latest development conda package. \"\"\" conda_bin = _get_conda_bin() channels = _get_conda_channels(conda_bin) assert conda_bin, \"Could not find anaconda distribution for upgrading bcbio\" subprocess.check_call([conda_bin, \"install\", \"--quiet\", \"--yes\"] + channels + [\"bcbio-nextgen>=%s\" % version.__version__.replace(\"a0\", \"a\")]) return os.path.dirname(os.path.dirname(conda_bin)). \n### Response: Update to the latest development conda package..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static JPAConfig from(Map<String, String> map) { ImmutableSet.Builder<JPAConfig.PersistenceUnit> persistenceUnits = new ImmutableSet.Builder<JPAConfig.PersistenceUnit>(); for (Map.Entry<String, String> entry : map.entrySet()) { persistenceUnits.add(new JPAConfig.PersistenceUnit(entry.getKey(), entry.getValue())); } return new DefaultJPAConfig(persistenceUnits.build()); } \n### Response:", "ground_truth": "Create a default JPA configuration from a map of names to unit names.\n\n@param map Map of entity manager factory names to unit names\n@return a JPAConfig configured with the provided mapping", "predict": "This method returns a DefaultJPAConfig object from a map of persistence unit keys and values.."}, {"ID": 548, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def _check_required_fields(self, object_type, ignore_fields): # type: (str, List[str]) -> None \"\"\"Helper method to check that metadata for HDX object is complete Args: ignore_fields (List[str]): Any fields to ignore in the check Returns: None \"\"\" for field in self.configuration[object_type]['required_fields']: if field not in self.data and field not in ignore_fields: raise HDXError('Field %s is missing in %s!' % (field, object_type)). \n### Response: Helper method to check that metadata for HDX object is complete\n\n        Args:\n            ignore_fields (List[str]): Any fields to ignore in the check\n\n        Returns:\n            None.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static Flow<String, ByteString, NotUsed> string(String callbackName) { return Flow.of(String.class) .map( str -> { return ByteString.fromString(\"'\" + StringEscapeUtils.escapeEcmaScript(str) + \"'\"); }) .via(flow(callbackName)); } \n### Response:", "ground_truth": "Produces a Flow of escaped ByteString from a series of String elements. Calls out to Comet.flow\ninternally.\n\n@param callbackName the javascript callback method.\n@return a flow of ByteString elements.", "predict": "Method-level comment for the `string` method:\n```\npublic static Flow<String, ByteString, NotUsed> string(String callbackName)\n```\n"}, {"ID": 549, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (r *Router) DELETE(path string, handlers ...HandlerFunc) { r.Handle(\"DELETE\", path, handlers) }. \n### Response: //DELETE handle DELETE method.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static Flow<JsonNode, ByteString, NotUsed> json(String callbackName) { return Flow.of(JsonNode.class) .map( json -> { return ByteString.fromString(Json.stringify(json)); }) .via(flow(callbackName)); } \n### Response:", "ground_truth": "Produces a flow of ByteString using `Json.stringify` from a Flow of JsonNode. Calls out to\nComet.flow internally.\n\n@param callbackName the javascript callback method.\n@return a flow of ByteString elements.", "predict": "//json generate ByteString from JSON string."}, {"ID": 550, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (m *MockLambdaAPI) UpdateFunctionConfigurationRequest(arg0 *lambda.UpdateFunctionConfigurationInput) (*request.Request, *lambda.FunctionConfiguration) { ret := m.ctrl.Call(m, \"UpdateFunctionConfigurationRequest\", arg0) ret0, _ := ret[0].(*request.Request) ret1, _ := ret[1].(*lambda.FunctionConfiguration) return ret0, ret1 }. \n### Response: // UpdateFunctionConfigurationRequest mocks base method.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public <T extends ConstraintValidator<?, ?>> MappedConstraintValidatorFactory addConstraintValidator(Class<T> key, T constraintValidator) { validators.put(key, () -> constraintValidator); return this; } \n### Response:", "ground_truth": "Adds validator as a singleton.\n\n@param key the constraint validator type\n@param constraintValidator the constraint validator instance\n@param  the type of constraint validator implementation\n@return {@link MappedConstraintValidatorFactory} with the given constraint validator added.", "predict": "// Add constraintValidator to MappedConstraintValidatorFactory."}, {"ID": 551, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def fix_hashbang(self, contents, python): \"\"\" Rewrite hashbangs_ to use the correct Python executable. :param contents: The contents of the script whose hashbang should be fixed (a string). :param python: The absolute pathname of the Python executable (a string). :returns: The modified contents of the script (a string). .. _hashbangs: http://en.wikipedia.org/wiki/Shebang_(Unix) \"\"\" lines = contents.splitlines() if lines: hashbang = lines[0] # Get the base name of the command in the hashbang. executable = os.path.basename(hashbang) # Deal with hashbangs like `#!/usr/bin/env python'. executable = re.sub(b'^env ', b'', executable) # Only rewrite hashbangs that actually involve Python. if re.match(b'^python(\\\\d+(\\\\.\\\\d+)*)?$', executable): lines[0] = b'#!' + python.encode('ascii') logger.debug(\"Rewriting hashbang %r to %r!\", hashbang, lines[0]) contents = b'\\n'.join(lines) return contents. \n### Response: Rewrite hashbangs_ to use the correct Python executable.\n\n        :param contents: The contents of the script whose hashbang should be\n                         fixed (a string).\n        :param python: The absolute pathname of the Python executable (a\n                       string).\n        :returns: The modified contents of the script (a string).\n\n        .. _hashbangs: http://en.wikipedia.org/wiki/Shebang_(Unix).\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private <T extends ConstraintValidator<?, ?>> T newInstance(Class<T> key) { try { return key.getDeclaredConstructor().newInstance(); } catch (InstantiationException | RuntimeException | IllegalAccessException | NoSuchMethodException | InvocationTargetException ex) { throw new RuntimeException(ex); } } \n### Response:", "ground_truth": "need to do so.", "predict": "### Method: <T extends ConstraintValidator<?,?>> T newInstance(Class<T> key)\n\nThis method creates a new instance of the specified class and returns it.\n\n.. _ConstraintValidator: https://docs.oracle.com/javase/7/docs/api/java/validation/ConstraintValidator.html\n.. _Class: <T extends ConstraintValidator<?,?>>\n\nThis method is used to create a new instance of a ConstraintValidator class.\n\n"}, {"ID": 552, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function allNodesAtLocation(location) { var nodes = []; exports.root.each(function each(n) { if (n.type === DOMNode.TYPE_ELEMENT && n.isAtLocation(location)) { nodes.push(n); } }); return nodes; }. \n### Response: Get the element node that encloses the given location\n@param {location}.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static Method getMatchingAccessibleMethod( final Class<?> cls, final String methodName, final Class<?>... parameterTypes) { try { final Method method = cls.getMethod(methodName, parameterTypes); MemberUtils.setAccessibleWorkaround(method); return method; } catch (final NoSuchMethodException e) { // NOPMD - Swallow the exception } // search through all methods Method bestMatch = null; final Method[] methods = cls.getMethods(); for (final Method method : methods) { // compare name and parameters if (method.getName().equals(methodName) && MemberUtils.isMatchingMethod(method, parameterTypes)) { // get accessible version of method final Method accessibleMethod = getAccessibleMethod(method); if (accessibleMethod != null && (bestMatch == null || MemberUtils.compareMethodFit(accessibleMethod, bestMatch, parameterTypes) < 0)) { bestMatch = accessibleMethod; } } } if (bestMatch != null) { MemberUtils.setAccessibleWorkaround(bestMatch); } if (bestMatch != null && bestMatch.isVarArgs() && bestMatch.getParameterTypes().length > 0 && parameterTypes.length > 0) { final Class<?>[] methodParameterTypes = bestMatch.getParameterTypes(); final Class<?> methodParameterComponentType = methodParameterTypes[methodParameterTypes.length - 1].getComponentType(); final String methodParameterComponentTypeName = ClassUtils.primitiveToWrapper(methodParameterComponentType).getName(); final String parameterTypeName = parameterTypes[parameterTypes.length - 1].getName(); final String parameterTypeSuperClassName = parameterTypes[parameterTypes.length - 1].getSuperclass().getName(); if (!methodParameterComponentTypeName.equals(parameterTypeName) && !methodParameterComponentTypeName.equals(parameterTypeSuperClassName)) { return null; } } return bestMatch; } \n### Response:", "ground_truth": "Finds an accessible method that matches the given name and has compatible parameters.\nCompatible parameters mean that every method parameter is assignable from the given parameters.\nIn other words, it finds a method with the given name that will take the parameters given.\n\nThis method can match primitive parameter by passing in wrapper classes. For example, a\n{@code Boolean} will match a primitive {@code boolean} parameter.\n\n@param cls find method in this class\n@param methodName find method with this name\n@param parameterTypes find method with most compatible parameters\n@return The accessible method", "predict": "This method retrieves a method with the specified name and parameters from the specified class, and returns it if it exists. It also sets the accessibility of the retrieved method to be accessible if possible. The method uses the `MemberUtils` class to check if the method is matching and accessible, and also checks if the method hasVarArgs and parameterTypes are not empty. If the method is found to be accessible and hasVarArgs, it returns the method. If not, it returns null."}, {"ID": 553, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: static private function linkTag( eZContentObjectAttribute $attribute, eZTagsObject $tagObject, $keyword, $locale, $priority ) { $languageID = eZContentLanguage::idByLocale( $locale ); if ( $languageID === false ) return; if ( $locale == $attribute->attribute( 'language_code' ) ) { if ( !$tagObject->hasTranslation( $locale ) ) { $tagKeywordObject = new eZTagsKeyword( array( 'keyword_id' => $tagObject->attribute( 'id' ), 'language_id' => $languageID, 'keyword' => $keyword, 'locale' => $locale, 'status' => eZTagsKeyword::STATUS_PUBLISHED ) ); $tagKeywordObject->store(); $tagObject->updateLanguageMask(); } } $linkObject = new eZTagsAttributeLinkObject( array( 'keyword_id' => $tagObject->attribute( 'id' ), 'objectattribute_id' => $attribute->attribute( 'id' ), 'objectattribute_version' => $attribute->attribute( 'version' ), 'object_id' => $attribute->attribute( 'contentobject_id' ), 'priority' => $priority ) ); $linkObject->store(); }. \n### Response: Links the content object attribute and tag\n\n@static\n\n@param eZContentObjectAttribute $attribute\n@param eZTagsObject $tagObject\n@param string $keyword\n@param string $locale.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public CompletionStage<Result> onClientError( RequestHeader request, int statusCode, String message) { if (statusCode == 400) { return onBadRequest(request, message); } else if (statusCode == 403) { return onForbidden(request, message); } else if (statusCode == 404) { return onNotFound(request, message); } else if (statusCode >= 400 && statusCode < 500) { return onOtherClientError(request, statusCode, message); } else { throw new IllegalArgumentException( \"onClientError invoked with non client error status code \" + statusCode + \": \" + message); } } \n### Response:", "ground_truth": "Invoked when a client error occurs, that is, an error in the 4xx series.\n\nThe base implementation calls onBadRequest, onForbidden, onNotFound, or onOtherClientError\ndepending on the HTTP status code.\n\n@param request The request that caused the client error.\n@param statusCode The error status code. Must be greater or equal to 400, and less than 500.\n@param message The error message.\n@return a CompletionStage containing the Result.", "predict": "Implements a client error handler.\n\n@Override\n\n@param RequestHeader $request\n@param int $statusCode\n@param String $message.\n\nThis method is invoked when a client error occurs. It checks the status code and the message passed in the request. If the status code is 400 or higher, it calls the onBadRequest() method. If the status code is 403 or higher, it calls the onForbidden() method. If the status code is 404 or higher, it calls the onNotFound() method. If the status code is lower than 400 and higher than 500, it calls the onOtherClientError() method. If the status code is not a client error status code, it throws an IllegalArgumentException with the message.\n\n@return CompletionStage<Result>."}, {"ID": 554, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function setRequestMetadata($var) { GPBUtil::checkMessage($var, \\Google\\Cloud\\Audit\\RequestMetadata::class); $this->request_metadata = $var; return $this; }. \n### Response: Metadata about the operation.\n\nGenerated from protobuf field .google.cloud.audit.RequestMetadata request_metadata = 4;\n@param \\Google\\Cloud\\Audit\\RequestMetadata $var\n@return $this.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected CompletionStage<Result> onBadRequest(RequestHeader request, String message) { return CompletableFuture.completedFuture( Results.badRequest( views.html.defaultpages.badRequest.render( request.method(), request.uri(), message, request.asScala()))); } \n### Response:", "ground_truth": "Invoked when a client makes a bad request.\n\nReturns Results.badRequest (400) with the included template from {@code\nviews.html.defaultpages.badRequest} as the content.\n\n@param request The request that was bad.\n@param message The error message.\n@return a CompletionStage containing the Result.", "predict": "This method is used to handle a bad request. It returns a CompletableFuture that will complete with a result of type Result. The result contains information about the bad request, such as the HTTP method, URL, message, and any additional parameters.\n\nThe method uses the CompletableFuture.completedFuture() method to create a future that will be completed when the bad request is processed. The method first checks if the request is a bad request using the Google Cloud Audit API. If it is, the method calls the views.html.defaultpages.badRequest.render() method to generate a bad request response.\n\nThe method then returns the CompletableFuture, which can be used to wait for the result to be completed.\n\nThis method is useful for handling a variety of bad requests, such as invalid requests, missing parameters, and requests that contain errors. It can be used in conjunction with other methods, such as.NET's HttpClient or Java's HttpClient, to handle bad requests in a more efficient and scalable way."}, {"ID": 555, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function setWordSpacing($ws = 0.) { $this->ws = $ws; $this->_out(sprintf('%.3F Tw', $ws*$this->k)); }. \n### Response: set the Word Spacing\n\n@param float word spacing\n@access public.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected CompletionStage<Result> onForbidden(RequestHeader request, String message) { return CompletableFuture.completedFuture( Results.forbidden(views.html.defaultpages.unauthorized.render(request.asScala()))); } \n### Response:", "ground_truth": "Invoked when a client makes a request that was forbidden.\n\nReturns Results.forbidden (401) with the included template from {@code\nviews.html.defaultpages.unauthorized} as the content.\n\n@param request The forbidden request.\n@param message The error message.\n@return a CompletionStage containing the Result.", "predict": "### Resp Handle a forbidden request\n\n@param RequestHeader request\n@param String message\n@return CompletionStage<Result>\n@access protected.\n\nThis method is used to handle a forbidden request. It returns a CompletableFuture that will be completed with the result of the forbidden operation. The method takes a RequestHeader object and a String message as parameters. The message is used to identify the reason for the forbidden request. The method uses the Results class to return the forbidden result."}, {"ID": 556, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public IJsonMarshaller getIJsonMarshallerInstance(Class<? extends IJsonMarshaller> cls) throws JsonMarshallerException { if(logger.isDebugEnabled()) { logger.debug(\"Try to get {} by CDI.select Unsatisfied: {}\", cls.getName(), CDI.current().select(cls).isUnsatisfied()); } if(CDI.current().select(cls).isUnsatisfied()) { throw new JsonMarshallerException(cls.getName()+\" is Unsatisfied\"); } return CDI.current().select(cls).get(); }. \n### Response: Get Instance of IJsonMarshaller from CDI\n@param cls\n@return\n@throws JsonMarshallerException.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected CompletionStage<Result> onNotFound(RequestHeader request, String message) { if (environment.isProd()) { return CompletableFuture.completedFuture( Results.notFound( views.html.defaultpages.notFound.render( request.method(), request.uri(), request.asScala()))); } else { return CompletableFuture.completedFuture( Results.notFound( views.html.defaultpages.devNotFound.render( request.method(), request.uri(), Some.apply(routes.get()), request.asScala()))); } } \n### Response:", "ground_truth": "Invoked when a handler or resource is not found.\n\nIf the environment's mode is production, then returns Results.notFound (404) with the\nincluded template from `views.html.defaultpages.notFound` as the content.\n\nOtherwise, Results.notFound (404) is rendered with {@code\nviews.html.defaultpages.devNotFound} template.\n\n@param request The request that no handler was found to handle.\n@param message A message, which is not used by the default implementation.\n@return a CompletionStage containing the Result.", "predict": "Implement a method `onNotFound` to handle the case when a request is not found.\n\n@param request\n@param message\n@return\nA completion stage of a CompletableFuture.\n\nThis method is called when a request is not found. It checks if the production environment is enabled and returns a completion stage of a `Results.notFound`Future. If the environment is not production, it returns a completion stage of a `Results.notFound`Future with a custom view for the not found page. If the environment is production, it returns a completion stage of a `Results.notFound`Future with a default view for the not found page.\n\nThis method is protected and its implementation is not shown here."}, {"ID": 557, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def valid(self, name): \"\"\"Ensure a variable name is valid. Note: Assumes variable names are ASCII, which isn't necessarily true in Python 3. Args: name: A proposed variable name. Returns: A valid version of the name. \"\"\" name = re.sub('[^0-9a-zA-Z_]', '', name) if re.match('[0-9]', name): name = '_' + name return name. \n### Response: Ensure a variable name is valid.\n\n    Note: Assumes variable names are ASCII, which isn't necessarily true in\n    Python 3.\n\n    Args:\n      name: A proposed variable name.\n\n    Returns:\n      A valid version of the name..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public CompletionStage<Result> onServerError(RequestHeader request, Throwable exception) { try { UsefulException usefulException = throwableToUsefulException(exception); logServerError(request, usefulException); switch (environment.mode()) { case PROD: return onProdServerError(request, usefulException); default: return onDevServerError(request, usefulException); } } catch (Exception e) { logger.error(\"Error while handling error\", e); return CompletableFuture.completedFuture(Results.internalServerError()); } } \n### Response:", "ground_truth": "Invoked when a server error occurs.\n\nBy default, the implementation of this method delegates to [[onProdServerError()]] when in\nprod mode, and [[onDevServerError()]] in dev mode. It is recommended, if you want Play's debug\ninfo on the error page in dev mode, that you override [[onProdServerError()]] instead of this\nmethod.\n\n@param request The request that triggered the server error.\n@param exception The server error.\n@return a CompletionStage containing the Result.", "predict": "```\n@Override\npublic CompletionStage<Result> onServerError(RequestHeader request, Throwable exception)\n{\n    try {\n        UsefulException usefulException = throwableToUsefulException(exception);\n        logServerError(request, usefulException);\n        switch (environment.mode())\n        {\n            case PROD:\n                return onProdServerError(request, usefulException);\n            default:\n                return onDevServerError(request, usefulException);\n        }\n    } catch (Exception e)\n    {\n        logger.error(\"Error while handling error\", e);\n        return CompletableFuture.completedFuture(Results.internalServerError());\n    }\n}\n```\n- **Note**: This method handles server errors by trying to convert the given exception into a useful exception and logs the error. It then switches the environment and returns the appropriate error handler.\n- **Args**:\n\t+ request: The request header to handle the error.\n\t+ exception: The exception to be handled.\n- **Returns**: The completion stage of the result.\n\nThis method is used in the `onServerError` method of the `RequestHeader` object. It is called when a server error occurs and it can be used to handle the error by returning a completion stage with the appropriate error message.\n```"}, {"ID": 558, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void split() { if (!needsSplitting()) { return; } Node parent = getParentNode(); String[] parts = getData().split(\"\\\\]\\\\]>\"); parent.insertBefore(new CDATASectionImpl(document, parts[0] + \"]]\"), this); for (int p = 1; p < parts.length - 1; p++) { parent.insertBefore(new CDATASectionImpl(document, \">\" + parts[p] + \"]]\"), this); } setData(\">\" + parts[parts.length - 1]); }. \n### Response: Splits this CDATA node into parts that do not contain a \"]]>\" sequence.\nAny newly created nodes will be inserted before this node..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void logServerError(RequestHeader request, UsefulException usefulException) { logger.error( String.format( \"\\n\\n! @%s - Internal server error, for (%s) [%s] ->\\n\", usefulException.id, request.method(), request.uri()), usefulException); } \n### Response:", "ground_truth": "Responsible for logging server errors.\n\nThe base implementation uses a SLF4J Logger. If a special annotation is desired for internal\nserver errors, you may want to use SLF4J directly with the Marker API to distinguish server\nerrors from application errors.\n\nThis can also be overridden to add additional logging information, eg. the id of the\nauthenticated user.\n\n@param request The request that triggered the server error.\n@param usefulException The server error.", "predict": "Logs an internal server error in the specified request and usefulException. The error message is formatted using the String.format method and is logged to the logger.."}, {"ID": 559, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected function createModel($input) { if (!$this->option('without-model')) { $this->call( 'create:model', [ 'model-name' => $input->modelName, '--table-name' => $input->table, '--primary-key' => $input->primaryKey, '--resource-file' => $input->resourceFile, '--model-directory' => $input->modelDirectory, '--with-soft-delete' => $input->withSoftDelete, '--without-timestamps' => $input->withoutTimeStamps, '--template-name' => $input->template, '--force' => $input->force, ] ); } return $this; }. \n### Response: Executes the command that generates a model.\n\n@param CrestApps\\CodeGenerator\\Models\\ResourceInput $input\n\n@return $this.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected final UsefulException throwableToUsefulException(final Throwable throwable) { return HttpErrorHandlerExceptions.throwableToUsefulException( sourceMapper.sourceMapper(), environment.isProd(), throwable); } \n### Response:", "ground_truth": "Convert the given exception to an exception that Play can report more information about.\n\nThis will generate an id for the exception, and in dev mode, will load the source code for\nthe code that threw the exception, making it possible to report on the location that the\nexception was thrown from.", "predict": "Provides a utility method to convert a throwable to a useful exception.\n\n@param Throwable $throwable\n\n@return UsefulException\n\n@throws HttpErrorHandlerExceptions\\HttpErrorHandlerExceptions $this->throwableToUsefulException(sourceMapper.sourceMapper(), environment.isProd(), $throwable)"}, {"ID": 560, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def column_reflection_fallback(self): \"\"\"If we can't reflect the table, use a query to at least get column names.\"\"\" sql = sa.select([sa.text(\"*\")]).select_from(self._table) col_names = self.engine.execute(sql).keys() col_dict = [{'name': col_name} for col_name in col_names] return col_dict. \n### Response: If we can't reflect the table, use a query to at least get column names..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected CompletionStage<Result> onDevServerError( RequestHeader request, UsefulException exception) { return CompletableFuture.completedFuture( Results.internalServerError( views.html.defaultpages.devError.render(playEditor, exception, request.asScala()))); } \n### Response:", "ground_truth": "Invoked in dev mode when a server error occurs. Note that this method is where the URL set by\nplay.editor is used.\n\nThe base implementation returns {@code Results.internalServerError} with the content of\n{@code views.html.defaultpages.devError}.\n\n@param request The request that triggered the error.\n@param exception The exception.\n@return a CompletionStage containing the Result.", "predict": "This method is used to handle errors that occur on the development server. It returns a CompletableFuture that will complete with an internal server error response. The response is generated by rendering a view called \"devError\" using the exception and request asScala()."}, {"ID": 561, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (sc *StatementContext) UpdatedRows() uint64 { sc.mu.Lock() rows := sc.mu.updated sc.mu.Unlock() return rows }. \n### Response: // UpdatedRows is used to generate info message.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected CompletionStage<Result> onProdServerError( RequestHeader request, UsefulException exception) { return CompletableFuture.completedFuture( Results.internalServerError( views.html.defaultpages.error.render(exception, request.asScala()))); } \n### Response:", "ground_truth": "Invoked in prod mode when a server error occurs.\n\nThe base implementation returns {@code Results.internalServerError} with the content of\n{@code views.html.defaultpages.error} template.\n\nOverride this rather than [[onServerError()]] if you don't want to change Play's debug\noutput when logging errors in dev mode.\n\n@param request The request that triggered the error.\n@param exception The exception.\n@return a CompletionStage containing the Result.", "predict": "// OnProdServerError is used to handle server errors in the production environment."}, {"ID": 562, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function Upgrade164to170() { $this->_batch->addTask('Db_CreateNewTables'); $this->_batch->addTask('Db_AddPatches', 56); $this->_batch->addTask('Echo', $this->_('Make sure to read the changelog as it contains important instructions')); return true; }. \n### Response: To upgrade to 1.7.0.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static BuildDocHandler fromResources(File[] files, String[] baseDirs) throws IOException { assert (files.length == baseDirs.length); FileRepository[] repositories = new FileRepository[files.length]; List<JarFile> jarFiles = new ArrayList<>(); for (int i = 0; i < files.length; i++) { File file = files[i]; String baseDir = baseDirs[i]; if (file.isDirectory()) { repositories[i] = new FilesystemRepository(file); } else { // Assume it's a jar file JarFile jarFile = new JarFile(file); jarFiles.add(jarFile); repositories[i] = new JarRepository(jarFile, Option.apply(baseDir)); } } return new DocumentationHandler( new AggregateFileRepository(repositories), () -> { for (JarFile jarFile : jarFiles) { jarFile.close(); } }); } \n### Response:", "ground_truth": "Create a BuildDocHandler that serves documentation from the given files, which could either be\ndirectories or jar files. The baseDir array must be the same length as the files array, and the\ncorresponding entry in there for jar files is used as a base directory to use resources from in\nthe jar.\n\n@param files The directories or jar files to serve documentation from.\n@param baseDirs The base directories for the jar files. Entries may be null.\n@return a BuildDocHandler.", "predict": "This method returns a `BuildDocHandler` instance that can handle the resources provided in the given `File[]` and `String[]` arrays. It initializes several `FileRepository` and `JarFile` instances and iterates through the files in the arrays to find the ones that are either directories or jar files. For each file, it creates a new ` JarRepository` instance and adds the file to the `jarFiles` list. Finally, it creates a new `AggregateFileRepository` instance and returns a ` DocumentationHandler` instance that uses this repository and a lambda function to close the jar files."}, {"ID": 563, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function isSubdomainOf(subdomain, host) { // Comparisons must be case-insensitive subdomain = subdomain.toLowerCase(); host = host.toLowerCase(); // If we're ignoring www, remove it from both // (if www is the first domain component...) if (crawler.ignoreWWWDomain) { subdomain = subdomain.replace(/^www./ig, \"\"); host = host.replace(/^www./ig, \"\"); } // They should be the same flipped around! return subdomain.split(\"\").reverse().join(\"\").substr(0, host.length) === host.split(\"\").reverse().join(\"\"); }. \n### Response: Checks if the first domain is a subdomain of the second.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static BuildDocHandler fromDirectory(File directory) { FileRepository repo = new FilesystemRepository(directory); return new DocumentationHandler(repo); } \n### Response:", "ground_truth": "Create an BuildDocHandler that serves documentation from a given directory by wrapping a\nFilesystemRepository.\n\n@param directory The directory to serve the documentation from.", "predict": "Creates a new DocumentationHandler from a FileRepository object for the specified directory."}, {"ID": 564, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def _replace_old_image(self): ''' Override this in subclass if you don't want image replacing or want to customize image replacing ''' try: old_obj = self.__class__.objects.get(pk=self.pk) if old_obj.image.path != self.image.path: path = old_obj.image.path default_storage.delete(path) except self.__class__.DoesNotExist: pass. \n### Response: Override this in subclass if you don't want\n            image replacing or want to customize image replacing.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static BuildDocHandler fromDirectoryAndJar(File directory, JarFile jarFile, String base) { return fromDirectoryAndJar(directory, jarFile, base, false); } \n### Response:", "ground_truth": "Create an BuildDocHandler that serves the manual from a given directory by wrapping a\nFilesystemRepository, and the API docs from a given JAR file by wrapping a JarRepository\n\n@param directory The directory to serve the documentation from.\n@param jarFile The JAR file to server the documentation from.\n@param base The directory within the JAR file to serve the documentation from, or null if the\ndocumentation should be served from the root of the JAR.", "predict": "This method returns the `BuildDocHandler` instance for the specified directory and jar file, but with the `base` directory not included in the jar."}, {"ID": 565, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function getMultipleSelectors(selector) { if (Array.isArray(selector)) { var section_selector = selector[0].selector; var real_selector = selector[1].selector; return [section_selector, real_selector]; } else { return selector; } }. \n### Response: The param \"selector\" that is passed to a custom command or assertion can be an array of selector, or a string. It's an array when a custom command is called from a section, and this array cannot be used straight away in a command, because nightwatch or selenium encode it in JSON, but the array itself has circular references that json doesn't like. So I simply extract the selectors for each item of the array and return it.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static BuildDocHandler fromDirectoryAndJar( File directory, JarFile jarFile, String base, boolean fallbackToJar) { FileRepository fileRepo = new FilesystemRepository(directory); FileRepository jarRepo = new JarRepository(jarFile, Option.apply(base)); FileRepository manualRepo; if (fallbackToJar) { manualRepo = new AggregateFileRepository(new FileRepository[] {fileRepo, jarRepo}); } else { manualRepo = fileRepo; } return new DocumentationHandler(manualRepo, jarRepo); } \n### Response:", "ground_truth": "Create an BuildDocHandler that serves the manual from a given directory by wrapping a\nFilesystemRepository, and the API docs from a given JAR file by wrapping a JarRepository.\n\n@param directory The directory to serve the documentation from.\n@param jarFile The JAR file to server the documentation from.\n@param base The directory within the JAR file to serve the documentation from, or null if the\ndocumentation should be served from the root of the JAR.\n@param fallbackToJar Whether the doc handler should fall back to the jar repo for docs.", "predict": "This method returns a `BuildDocHandler` instance for the specified directory and jar file. It creates a `FilesystemRepository` instance for the directory, a ` JarRepository` instance for the jar file, and a `FileRepository` instance for manual input. If the jar file is a fallback, it creates a new `AggregateFileRepository` instance with the `FileRepository` instances created. Finally, it creates a ` DocumentationHandler` instance and returns it."}, {"ID": 566, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public final <E> E find(Class<E> entityClass, Object primaryKey) { checkClosed(); checkTransactionNeeded(); return getPersistenceDelegator().findById(entityClass, primaryKey); }. \n### Response: Find by primary key. Search for an entity of the specified class and\nprimary key. If the entity instance is contained in the persistence\ncontext it is returned from there.\n\n@param entityClass\n@param primaryKey\n@return the found entity instance or null if the entity does not exist\n@throws IllegalArgumentException\nif the first argument does not denote an entity type or the\nsecond argument is is not a valid type for that entity\u2019s\nprimary key or is null\n@see javax.persistence.EntityManager#find(java.lang.Class,\njava.lang.Object).\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static BuildDocHandler fromJar(JarFile jarFile, String base) { FileRepository repo = new JarRepository(jarFile, Option.apply(base)); return new DocumentationHandler(repo); } \n### Response:", "ground_truth": "Create an BuildDocHandler that serves documentation from a given JAR file by wrapping a\nJarRepository.\n\n@param jarFile The JAR file to server the documentation from.\n@param base The directory within the JAR file to serve the documentation from, or null if the\ndocumentation should be served from the root of the JAR.", "predict": "Create a new DocumentationHandler instance from a JarFile and a base directory.\n\n@param jarFile\n@param base\n@return the new DocumentationHandler instance\n@see JarFile, String."}, {"ID": 567, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (c AccountClient) CancelReset(ctx context.Context, sessionID int) (err error) { __arg := CancelResetArg{SessionID: sessionID} err = c.Cli.Call(ctx, \"keybase.1.account.cancelReset\", []interface{}{__arg}, nil) return }. \n### Response: // Aborts the reset process.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public CompletionStage<ByteString> consumeData(Materializer mat) { return dataStream().runFold(ByteString.empty(), ByteString::concat, mat); } \n### Response:", "ground_truth": "Consumes the data.\n\nThis method should be used carefully, since if the source represents an ephemeral stream,\nthen the entity may not be usable after this method is invoked.\n\n@param mat the application's materializer.\n@return a CompletionStage holding the data", "predict": "// Consumes the next batch of data from the data stream."}, {"ID": 568, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: void addEntry(final String aLine) { final String trimmed = aLine.replaceAll(\"^>*\", \"\"); String[] tokens = trimmed.split(\"\\t\"); // Now strip the empty entries final Vector<String> v = new Vector<String>(); for (int i = 0; i < tokens.length; i++) { if (!\"\".equals(tokens[i])) { v.add(tokens[i]); } } tokens = new String[v.size()]; tokens = v.toArray(tokens); if (tokens.length > 0) { final String tok = tokens[0].trim(); try { if (tok.startsWith(\"0x\")) { this.checkBytesFrom = Integer.parseInt(tok.substring(2), 16); } else { this.checkBytesFrom = Integer.parseInt(tok); } } catch (final NumberFormatException e) { // We could have a space delinitaed entry so lets try to handle // this anyway addEntry(trimmed.replaceAll(\" \", \"\\t\")); return; } } if (tokens.length > 1) { this.typeStr = tokens[1].trim(); this.type = getType(this.typeStr); } if (tokens.length > 2) { // We don't trim the content this.content = ltrim(tokens[2]); this.content = stringWithEscapeSubstitutions(this.content); } if (tokens.length > 3) { this.mimeType = tokens[3].trim(); } if (tokens.length > 4) { this.mimeEnc = tokens[4].trim(); } }. \n### Response: as much of the file as possible. Currently about 70 entries are incorrect.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static final HttpEntity fromContent(Content content, String charset) { String body; if (content instanceof Xml) { // See https://github.com/playframework/playframework/issues/2770 body = content.body().trim(); } else { body = content.body(); } return new Strict( ByteString.fromString(body, charset), Optional.of(content.contentType() + \"; charset=\" + charset)); } \n### Response:", "ground_truth": "Create an entity from the given content.\n\n@param content The content.\n@param charset The charset.\n@return the HTTP entity.", "predict": "This method returns an HttpEntity object that represents the content of the given content, including any headers and encoding. It checks if the content is an Xml, and if so, it returns a Strict object with the content body and the specified charset. If the content is not Xml, it returns a Strict object with the content body. The method also includes a check for the specified charset, and if it is not found, it sets the content type to \"text/plain\" and the charset to the specified charset. This method is useful for handling different types of content, such as Xml and text, and for specifying the charset of the content."}, {"ID": 569, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def dist_to_deg(self, distance, latitude): \"\"\" distance = distance in meters latitude = latitude in degrees at the equator, the distance of one degree is equal in latitude and longitude. at higher latitudes, a degree longitude is shorter in length, proportional to cos(latitude) http://en.wikipedia.org/wiki/Decimal_degrees This function is part of a distance filter where the database 'distance' is in degrees. There's no good single-valued answer to this problem. The distance/ degree is quite constant N/S around the earth (latitude), but varies over a huge range E/W (longitude). Split the difference: I'm going to average the the degrees latitude and degrees longitude corresponding to the given distance. At high latitudes, this will be too short N/S and too long E/W. It splits the errors between the two axes. Errors are < 25 percent for latitudes < 60 degrees N/S. \"\"\" # d * (180 / pi) / earthRadius ==> degrees longitude # (degrees longitude) / cos(latitude) ==> degrees latitude lat = latitude if latitude >= 0 else -1 * latitude rad2deg = 180 / pi earthRadius = 6378160.0 latitudeCorrection = 0.5 * (1 + cos(lat * pi / 180)) return (distance / (earthRadius * latitudeCorrection) * rad2deg). \n### Response: distance = distance in meters\n        latitude = latitude in degrees\n\n        at the equator, the distance of one degree is equal in latitude and longitude.\n        at higher latitudes, a degree longitude is shorter in length, proportional to cos(latitude)\n        http://en.wikipedia.org/wiki/Decimal_degrees\n\n        This function is part of a distance filter where the database 'distance' is in degrees.\n        There's no good single-valued answer to this problem.\n        The distance/ degree is quite constant N/S around the earth (latitude),\n        but varies over a huge range E/W (longitude).\n\n        Split the difference: I'm going to average the the degrees latitude and degrees longitude\n        corresponding to the given distance. At high latitudes, this will be too short N/S\n        and too long E/W. It splits the errors between the two axes.\n\n        Errors are < 25 percent for latitudes < 60 degrees N/S..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static final HttpEntity fromString(String content, String charset) { return new Strict( ByteString.fromString(content, charset), Optional.of(\"text/plain; charset=\" + charset)); } \n### Response:", "ground_truth": "Create an entity from the given String.\n\n@param content The content.\n@param charset The charset.\n@return the HTTP entity.", "predict": "This method returns an instance of the `Strict` class, which represents an HTTP entity with a content type of \"text/plain\" and a character set of the specified charset. The method takes two arguments: a `String` representing the content to be loaded, and a `String` representing the character set to use. It returns a new instance of the `Strict` class with the specified content and character set."}, {"ID": 570, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function buildServiceTable($services) { $table = new TableHelper; $table->setHeaders($this->buildTableHeaders()); $table->setRows($this->buildTableRows($services)); return $table; }. \n### Response: Construct an ASCII table to display services.\n\n@param  array $services\n@return TableHelper.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static final HttpEntity chunked(Source<ByteString, ?> data, Optional<String> contentType) { return new Chunked(data.map(HttpChunk.Chunk::new), contentType); } \n### Response:", "ground_truth": "Convert the given source of ByteStrings to a chunked entity.\n\n@param data The source.\n@param contentType The optional content type.\n@return The ByteStrings.", "predict": "This method returns an instance of the `Chunked` class, which represents a single HTTP chunk.\n\n@param  Source<ByteString,?> data\n@param  Optional<String> contentType\n@return Chunked."}, {"ID": 571, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def _is_axis_allowed(self, axis): \"\"\"Check if axis are allowed. In case the calculation is requested over CA items dimension, it is not valid. It's valid in all other cases. \"\"\" if axis is None: # If table direction was requested, we must ensure that each slice # doesn't have the CA items dimension (thus the [-2:] part). It's # OK for the 0th dimension to be items, since no calculation is # performed over it. if DT.CA_SUBVAR in self.dim_types[-2:]: return False return True if isinstance(axis, int): if self.ndim == 1 and axis == 1: # Special allowed case of a 1D cube, where \"row\" # directions is requested. return True axis = [axis] # ---axis is a tuple--- for dim_idx in axis: if self.dim_types[dim_idx] == DT.CA_SUBVAR: # If any of the directions explicitly asked for directly # corresponds to the CA items dimension, the requested # calculation is not valid. return False return True. \n### Response: Check if axis are allowed.\n\n        In case the calculation is requested over CA items dimension, it is not\n        valid. It's valid in all other cases..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static Result status(int status, JsonNode content) { return status(status, content, JsonEncoding.UTF8); } \n### Response:", "ground_truth": "Generates a simple result with json content and UTF8 encoding.\n\n@param status the HTTP status for this result e.g. 200 (OK), 404 (NOT_FOUND)\n@param content the result's body content as a play-json object\n@return the result", "predict": "This method returns a Result object with a status code and a JSON-formatted content.\n\nThe status code is determined by the status parameter, which is an integer. The content parameter is a JSON-formatted string that represents the content of the request. The encoding is specified by the JsonEncoding parameter, which is a string value.\n\nThe method is useful for handling HTTP requests and responses, and can be used to return information about the status of the request and the content of the response."}, {"ID": 572, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function createLinkToken($userId) { $url = sprintf('%s/v2/bot/user/%s/linkToken', $this->endpointBase, urlencode($userId)); return $this->httpClient->post($url, []); }. \n### Response: Issues a link token used for the account link feature.\n\n@param string $userId User ID for the LINE account to be linked.\n@return Response.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static Result status(int status, JsonNode content, JsonEncoding encoding) { if (content == null) { throw new NullPointerException(\"Null content\"); } return status(status).sendJson(content, encoding); } \n### Response:", "ground_truth": "Generates a simple result with json content.\n\n@param status the HTTP status for this result e.g. 200 (OK), 404 (NOT_FOUND)\n@param content the result's body content, as a play-json object\n@param encoding the encoding into which the json should be encoded\n@return the result", "predict": "This method returns a Result object with a status code and a JSON-formatted content. It checks if the content is null before throwing a NullPointerException. The method sends the JSON content as a response.\n\n@param int $status The HTTP status code to return.\n@param JsonNode $content A JSON-formatted content object.\n@param JsonEncoding $encoding The JSON encoding to use.\n@return Result."}, {"ID": 573, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function checkSendOrderConfirmationMessageToCustomer(OrderEvent $event) { if (Paybox::getConfigValue('send_confirmation_email_on_successful_payment', false)) { $paybox = new Paybox(); if ($paybox->isPaymentModuleFor($event->getOrder())) { if (!$event->getOrder()->isPaid()) { $event->stopPropagation(); } } } }. \n### Response: Send the confirmation message only if the order is paid.\n\n@param OrderEvent $event.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static Result status(int status, byte[] content) { if (content == null) { throw new NullPointerException(\"Null content\"); } return new Result( status, new HttpEntity.Strict(ByteString.fromArray(content), Optional.empty())); } \n### Response:", "ground_truth": "Generates a simple result with byte-array content.\n\n@param status the HTTP status for this result e.g. 200 (OK), 404 (NOT_FOUND)\n@param content the result's body content, as a byte array\n@return the result", "predict": "This method returns a Result object with the given status and a HttpEntity.Strict object containing the given content, if it exists.\n\n@param int status The status code to return.\n@param byte[] content The content to return.\n\nThis method returns a Result object with the given status and a HttpEntity.Strict object containing the given content, if it exists. The content is returned as a byte array, and if it is null, a NullPointerException is thrown."}, {"ID": 574, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (computeSystem *System) Modify(config interface{}) (err error) { computeSystem.handleLock.RLock() defer computeSystem.handleLock.RUnlock() operation := \"hcsshim::ComputeSystem::Modify\" computeSystem.logOperationBegin(operation) defer func() { computeSystem.logOperationEnd(operation, err) }() if computeSystem.handle == 0 { return makeSystemError(computeSystem, \"Modify\", \"\", ErrAlreadyClosed, nil) } requestJSON, err := json.Marshal(config) if err != nil { return err } requestString := string(requestJSON) logrus.WithFields(computeSystem.logctx). WithField(logfields.JSON, requestString). Debug(\"HCS ComputeSystem Modify Document\") var resultp *uint16 syscallWatcher(computeSystem.logctx, func() { err = hcsModifyComputeSystem(computeSystem.handle, requestString, &resultp) }) events := processHcsResult(resultp) if err != nil { return makeSystemError(computeSystem, \"Modify\", requestString, err, events) } return nil }. \n### Response: // Modify the System by sending a request to HCS.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static Result status(int status, InputStream content, long contentLength) { return status(status).sendInputStream(content, contentLength); } \n### Response:", "ground_truth": "Generates a chunked result.\n\n@param status the HTTP status for this result e.g. 200 (OK), 404 (NOT_FOUND)\n@param content the input stream containing data to chunk over\n@param contentLength the length of the provided content in bytes.\n@return the result", "predict": "// Return the result of the given status and send the input stream to the content."}, {"ID": 575, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def fit(self, x, augment=False, rounds=1, seed=None): \"\"\"Fits internal statistics to some sample data. Required for featurewise_center, featurewise_std_normalization and zca_whitening. # Arguments x: Numpy array, the data to fit on. Should have rank 5 or 4 when time_delay is None. In case of grayscale data, the channels axis should have value 1, and in case of RGB data, it should have value 3. augment: Whether to fit on randomly augmented samples rounds: If `augment`, how many augmentation passes to do over the data seed: random seed. # Raises ValueError: in case of invalid input `x`. \"\"\" x = np.asarray(x, dtype=K.floatx()) if x.shape[self.channel_axis] not in {1, 3, 4}: warnings.warn( 'Expected input to be images (as Numpy array) ' 'following the data format convention \"' + self.data_format + '\" ' '(channels on axis ' + str( self.channel_axis) + '), i.e. expected ' 'either 1, 3 or 4 channels on axis ' + str(self.channel_axis) + '. ' 'However, it was passed an array with shape ' + str( x.shape) + ' (' + str(x.shape[self.channel_axis]) + ' channels).') if seed is not None: np.random.seed(seed) x = np.copy(x) if augment: ax = np.zeros(tuple([rounds * x.shape[0]] + list(x.shape)[1:]), dtype=K.floatx()) for r in range(rounds): for i in range(x.shape[0]): ax[i + r * x.shape[0]] = self.random_transform(x[i]) x = ax if self.featurewise_center: self.mean = np.mean(x, axis=0) x -= self.mean if self.featurewise_std_normalization: self.std = np.std(x, axis=0) x /= (self.std + K.epsilon()) if self.zca_whitening: flat_x = np.reshape(x, (x.shape[0], x.shape[1] * x.shape[2] * x.shape[3])) sigma = np.dot(flat_x.T, flat_x) / flat_x.shape[0] u, s, _ = linalg.svd(sigma) self.principal_components = np.dot(np.dot(u, np.diag(1. / np.sqrt(s + self.zca_epsilon))), u.T). \n### Response: Fits internal statistics to some sample data.\n\n        Required for featurewise_center, featurewise_std_normalization\n        and zca_whitening.\n\n        # Arguments\n            x: Numpy array, the data to fit on. Should have rank 5 or 4 when time_delay is None.\n                In case of grayscale data,\n                the channels axis should have value 1, and in case\n                of RGB data, it should have value 3.\n            augment: Whether to fit on randomly augmented samples\n            rounds: If `augment`,\n                how many augmentation passes to do over the data\n            seed: random seed.\n\n        # Raises\n            ValueError: in case of invalid input `x`..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static Result status(int status, File content) { return status(status, content, StaticFileMimeTypes.fileMimeTypes()); } \n### Response:", "ground_truth": "Generates a result with file contents.\n\n@param status the HTTP status for this result e.g. 200 (OK), 404 (NOT_FOUND)\n@param content the file to send\n@return the result", "predict": "This method returns a Result object with the given status code and the contents of the given file.\n\nThe method takes two arguments:\n\n* status: an integer indicating the status of the operation (0 for success, 1 for failure, etc.).\n* content: a File content object containing the contents of the file.\n\nThe method returns a Result object with the following properties:\n\n* status: an integer indicating the status of the operation.\n* content: a File content object containing the contents of the file.\n\nThe method status(int status, File content, StaticFileMimeTypes.fileMimeTypes()) is a wrapper around the original method that returns a Result object with the given status code and the contents of the given file. The status argument is used to determine the success or failure of the operation, and the content argument is used to retrieve the contents of the file. The StaticFileMimeTypes.fileMimeTypes() method is used to determine the type of file content."}, {"ID": 576, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func IsReplicationLagHigh(tabletStats *TabletStats) bool { return float64(tabletStats.Stats.SecondsBehindMaster) > lowReplicationLag.Seconds() }. \n### Response: // IsReplicationLagHigh verifies that the given TabletStats refers to a tablet with high\n// replication lag, i.e. higher than the configured discovery_low_replication_lag flag..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private User findById(Long id) { if (id > 3) return null; User user = new User(); user.id = id; user.name = \"User \" + String.valueOf(id); return user; } \n### Response:", "ground_truth": "designed to be lightweight operation", "predict": "// FindById returns the first user with a matching ID if one is found, or null if\n// no user is found. This method does not modify the database or any other\n// application-level data."}, {"ID": 577, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void unsetDestinationAddressFactory(ServiceReference<SIDestinationAddressFactory> ref) { if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) SibTr.entry(tc, \"unsetDestinationAddressFactory\", ref); destinationAddressFactoryRef.setReference(ref); if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) SibTr.exit(tc, \"unsetDestinationAddressFactory\"); }. \n### Response: Declarative Services method for unsetting the DestinationAddressFactory service\nreference.\n\n@param ref\nreference to the service.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public Lang preferred(Collection<Lang> candidates) { return new Lang( langs.preferred((scala.collection.immutable.Seq) Scala.asScala(candidates).toSeq())); } \n### Response:", "ground_truth": "Select a preferred language, given the list of candidates.\n\nWill select the preferred language, based on what languages are available, or return the\ndefault language if none of the candidates are available.\n\n@param candidates The candidate languages\n@return The preferred language", "predict": "This is a method in a Scala library that returns the preferred language of a collection of languages.\n\n@param candidates\nthe collection of languages to return the preferred language of.\n\nThis method uses the `preferred` method of the ` langs` collection to return the preferred language of the given collection. The `preferred` method takes a Scala collection as an argument and returns a new Scala collection with the preferred elements."}, {"ID": 578, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function getBasket() { if ($this->_oBasket === null) { $this->_oBasket = false; if ($oBasket = $this->getSession()->getBasket()) { $this->_oBasket = $oBasket; } } return $this->_oBasket; }. \n### Response: Template variable getter. Returns active basket\n\n@return oxBasket.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public Call unique() { return new play.api.mvc.Call(method(), this.uniquify(this.url()), fragment()); } \n### Response:", "ground_truth": "Append a unique identifier to the URL.\n\n@return a copy if this call with a unique identifier to this url", "predict": "Method for uniqueness the fragment in a URL.\n\n@return Call. This method returns a Call object that represents the unique request."}, {"ID": 579, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def _update_listing_client_kwargs(client_kwargs, max_request_entries): \"\"\" Updates client kwargs for listing functions. Args: client_kwargs (dict): Client arguments. max_request_entries (int): If specified, maximum entries returned by request. Returns: dict: Updated client_kwargs \"\"\" client_kwargs = client_kwargs.copy() if max_request_entries: client_kwargs['num_results'] = max_request_entries return client_kwargs. \n### Response: Updates client kwargs for listing functions.\n\n        Args:\n            client_kwargs (dict): Client arguments.\n            max_request_entries (int): If specified, maximum entries returned\n                by request.\n\n        Returns:\n            dict: Updated client_kwargs.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public Call withFragment(String fragment) { return new play.api.mvc.Call(method(), url(), fragment); } \n### Response:", "ground_truth": "Returns a new Call with the given fragment.\n\n@param fragment the URL fragment\n@return a copy of this call that contains the fragment", "predict": "This method returns a new `Call` object with the specified `fragment`.\n\n        Returns:\n            play.api.mvc.Call: New Call object with the specified fragment."}, {"ID": 580, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (c *Core) setupAuditedHeadersConfig(ctx context.Context) error { // Create a sub-view view := c.systemBarrierView.SubView(auditedHeadersSubPath) // Create the config out, err := view.Get(ctx, auditedHeadersEntry) if err != nil { return errwrap.Wrapf(\"failed to read config: {{err}}\", err) } headers := make(map[string]*auditedHeaderSettings) if out != nil { err = out.DecodeJSON(&headers) if err != nil { return err } } // Ensure that we are able to case-sensitively access the headers; // necessary for the upgrade case lowerHeaders := make(map[string]*auditedHeaderSettings, len(headers)) for k, v := range headers { lowerHeaders[strings.ToLower(k)] = v } c.auditedHeaders = &AuditedHeadersConfig{ Headers: lowerHeaders, view: view, } return nil }. \n### Response: // Initialize the headers config by loading from the barrier view.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public String absoluteURL(Http.Request request) { return absoluteURL(request.secure(), request.host()); } \n### Response:", "ground_truth": "Transform this call to an absolute URL.\n\n@param request used to identify the host and protocol that should base this absolute URL\n@return the absolute URL string", "predict": "// Return the absolute URL of the requested resource."}, {"ID": 581, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private static void createPerformanceTarget( AdWordsServicesInterface adWordsServices, AdWordsSession session, CampaignGroup campaignGroup) throws ApiException, RemoteException { // Get the CampaignGroupPerformanceTargetService. CampaignGroupPerformanceTargetServiceInterface campaignGroupPerformanceTargetService = adWordsServices.get(session, CampaignGroupPerformanceTargetServiceInterface.class); // Create the performance target. CampaignGroupPerformanceTarget campaignGroupPerformanceTarget = new CampaignGroupPerformanceTarget(); campaignGroupPerformanceTarget.setCampaignGroupId(campaignGroup.getId()); PerformanceTarget performanceTarget = new PerformanceTarget(); // Keep the CPC for the campaigns < $3. performanceTarget.setEfficiencyTargetType(EfficiencyTargetType.CPC_LESS_THAN_OR_EQUAL_TO); performanceTarget.setEfficiencyTargetValue(3000000d); // Keep the maximum spend under $50. performanceTarget.setSpendTargetType(SpendTargetType.MAXIMUM); Money maxSpend = new Money(); maxSpend.setMicroAmount(500000000L); performanceTarget.setSpendTarget(maxSpend); // Aim for at least 3000 clicks. performanceTarget.setVolumeTargetValue(3000L); performanceTarget.setVolumeGoalType(VolumeGoalType.MAXIMIZE_CLICKS); // Start the performance target today, and run it for the next 90 days. DateTime startDate = DateTime.now(); DateTime endDate = DateTime.now().plusDays(90); performanceTarget.setStartDate(startDate.toString(\"yyyyMMdd\")); performanceTarget.setEndDate(endDate.toString(\"yyyyMMdd\")); campaignGroupPerformanceTarget.setPerformanceTarget(performanceTarget); // Create the operation. CampaignGroupPerformanceTargetOperation operation = new CampaignGroupPerformanceTargetOperation(); operation.setOperand(campaignGroupPerformanceTarget); operation.setOperator(Operator.ADD); CampaignGroupPerformanceTarget newCampaignGroupPerformanceTarget = campaignGroupPerformanceTargetService .mutate(new CampaignGroupPerformanceTargetOperation[] {operation}) .getValue(0); // Display the results. System.out.printf( \"Campaign group performance target with ID %d was added for campaign group ID %d.%n\", newCampaignGroupPerformanceTarget.getId(), newCampaignGroupPerformanceTarget.getCampaignGroupId()); }. \n### Response: Creates a performance target for the campaign group..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public String webSocketURL(Http.Request request) { return webSocketURL(request.secure(), request.host()); } \n### Response:", "ground_truth": "Transform this call to an WebSocket URL.\n\n@param request used as the base for forming the WS url\n@return the websocket url string", "predict": "Returns the webSocketURL with the secure and host parameters set."}, {"ID": 582, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function fromJS(obj) { Object.keys(obj).forEach(function (key) { var val = obj[key]; if (typeof this[key] !== 'function') { debug('Knex Error: unknown key ' + key); } if (Array.isArray(val)) { this[key].apply(this, val); } else { this[key](val); } }, this); return this; }. \n### Response: Takes a JS object of methods to call and calls them.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: AbstractFunction1<Connection, BoxedUnit> connectionFunction(final ConnectionRunnable block) { return new AbstractFunction1<Connection, BoxedUnit>() { public BoxedUnit apply(Connection connection) { try { block.run(connection); return BoxedUnit.UNIT; } catch (java.sql.SQLException e) { throw new RuntimeException(\"Connection runnable failed\", e); } } }; } \n### Response:", "ground_truth": "Create a Scala function wrapper for ConnectionRunnable.\n\n@param block a Java functional interface instance to wrap\n@return a scala function that wraps the given block", "predict": "This method returns a new instance of the `AbstractFunction1<Connection, BoxedUnit>` class, which is a function that takes a `Connection` object and a `ConnectionRunnable` object as arguments and returns a `BoxedUnit` object. The `apply` method of the returned object is used to execute the block of code passed to it in the `ConnectionRunnable` object. If the block throws a `SQLException`, it is caught and an `RuntimeException` is thrown with the message \"Connection runnable failed\"."}, {"ID": 583, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func VoteBitsInBlock(block *dcrutil.Block) []stake.VoteVersionTuple { var voteBits []stake.VoteVersionTuple for _, stx := range block.MsgBlock().STransactions { if !stake.IsSSGen(stx) { continue } voteBits = append(voteBits, stake.VoteVersionTuple{ Version: stake.SSGenVersion(stx), Bits: stake.SSGenVoteBits(stx), }) } return voteBits }. \n### Response: // VoteBitsInBlock returns a list of vote bits for the votes in a block.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: <A> AbstractFunction1<Connection, A> connectionFunction(final ConnectionCallable<A> block) { return new AbstractFunction1<Connection, A>() { public A apply(Connection connection) { try { return block.call(connection); } catch (java.sql.SQLException e) { throw new RuntimeException(\"Connection callable failed\", e); } } }; } \n### Response:", "ground_truth": "Create a Scala function wrapper for ConnectionCallable.\n\n@param block a Java functional interface instance to wrap\n@param  the provided block's return type\n@return a scala function wrapping the given block", "predict": "// ConnectionFunction returns a function that can be called with a connection object."}, {"ID": 584, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function validate($args) { $matched = false; //validates arguments foreach ($args as $arg => $value) { //non-named option are skipped from validation if (is_numeric($arg)) continue; //validates action options foreach ($this->options as $option) { //checks if options matches specified parameter if ($option->matchParam($arg)) { //validates option if (!$option->validate($value)) { throw new InvalidArgumentException($arg, $value); } $matched = true; } } if (!$matched) { throw new InvalidOptionException($arg); } } //validates required options foreach ($this->options as $option) { if (!$option->isRequired()) { continue; } if (!$option->getValue($args)) { throw new MissingRequiredArgumentException($option->getName()); } } return true; }. \n### Response: Validates current action options\n\n@param array $args\n@throws Exception\\MissingRequiredArgumentException\n@throws Exception\\InvalidArgumentException\n@throws Exception\\InvalidOptionException\n@return bool.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static Server forRouter(Mode mode, int port, Function<BuiltInComponents, Router> block) { return new Builder().mode(mode).http(port).build(block); } \n### Response:", "ground_truth": "Create a server for the router returned by the given block.\n\n@param block The block which creates a router.\n@param mode The mode the server will run on.\n@param port The port the server will run on.\n@return The running server.", "predict": "Provides a server for a router\n\n@param Mode $mode - The mode of the router\n@param int $port - The port number to use for the server\n@param Function<BuiltInComponents, Router> $block - The block of code to be executed as a router\n@return Builder - A builder object that can be used to build a new server\n@throws Exception\\MissingRequiredArgumentException\n@throws Exception\\InvalidArgumentException\n@throws Exception\\InvalidOptionException"}, {"ID": 585, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func CacheDir(appName string) (string, error) { if appName == \"\" { return \"\", fmt.Errorf(\"No app name for dir\") } return filepath.Join(os.TempDir(), appName), nil }. \n### Response: // CacheDir returns where to store temporary files.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static JsonNode toJson(final Object data) { try { return mapper().valueToTree(data); } catch (Exception e) { throw new RuntimeException(e); } } \n### Response:", "ground_truth": "Converts an object to JsonNode.\n\n@param data Value to convert in Json.\n@return the JSON node.", "predict": "// ToJson returns a JsonNode representing the data."}, {"ID": 586, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function(el, options) { var eHandler = function(e) { e.mfpEl = this; mfp._openClick(e, el, options); }; if(!options) { options = {}; } var eName = 'click.magnificPopup'; options.mainEl = el; if(options.items) { options.isObj = true; el.off(eName).on(eName, eHandler); } else { options.isObj = false; if(options.delegate) { el.off(eName).on(eName, options.delegate , eHandler); } else { options.items = el; el.off(eName).on(eName, eHandler); } } }. \n### Response: Initializes single popup or a group of popups.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static <A> A fromJson(JsonNode json, Class<A> clazz) { try { return mapper().treeToValue(json, clazz); } catch (Exception e) { throw new RuntimeException(e); } } \n### Response:", "ground_truth": "Converts a JsonNode to a Java value\n\n@param  the type of the return value.\n@param json Json value to convert.\n@param clazz Expected Java value type.\n@return the return value.", "predict": "This method is used to convert a JSON object to a Java object. It takes in a JSON node and a class type as parameters and returns the corresponding Java object. The method uses the mapper() method from the Spring Framework's  Jackson library to convert the JSON node to a Java object. If there is an exception, it throws a RuntimeException."}, {"ID": 587, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public Date toDate(double x) { if (Double.isNaN(x)) { return null; } return new Date(Double.doubleToRawLongBits(x)); }. \n### Response: Retruns the date object from internal double encoding.\n@param x the date in double encoding..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static JsonNode parse(String src) { try { return mapper().readTree(src); } catch (Throwable t) { throw new RuntimeException(t); } } \n### Response:", "ground_truth": "Parses a String representing a json, and return it as a JsonNode.\n\n@param src the JSON string.\n@return the JSON node.", "predict": "Method-level comment for the `parse` method:\n```\npublic static JsonNode parse(String src) {\n    try {\n        return mapper().readTree(src);\n    } catch (Throwable t) {\n        throw new RuntimeException(t);\n    }\n}\n```\nThis method parses a JSON string into a JsonNode object by using the ` mapper()` method to read the tree from a string. It includes a try-catch block to handle any errors that may occur during the parsing process. If an error occurs, it throws a `RuntimeException` exception with the error message."}, {"ID": 588, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public double[] getVotesForInstance(Instance inst) { double[] votes = new double[2]; if (this.reset == false) { double error = this.getAnomalyScore(inst); // Exponential function to convert the error [0, +inf) into a vote [1,0]. votes[0] = Math.pow(2.0, -1.0 * (error / this.threshold)); votes[1] = 1.0 - votes[0]; } return votes; }. \n### Response: Calculates the error between the autoencoder's reconstruction of the input and the argument instances.\nThis error is converted to vote scores.\n\n@param inst the instance to get votes for\n\n@return the votes for the instance's label [normal, outlier].\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static JsonNode parse(java.io.InputStream src) { try { return mapper().readTree(src); } catch (Throwable t) { throw new RuntimeException(t); } } \n### Response:", "ground_truth": "Parses a InputStream representing a json, and return it as a JsonNode.\n\n@param src the JSON input stream.\n@return the JSON node.", "predict": "parses a JSON string from an input stream and returns a JsonNode object.\n\n@param src the input stream containing the JSON string to parse.\n\n@return the JsonNode object representing the parsed JSON string."}, {"ID": 589, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def get(self): \"\"\" Get a JSON-ready representation of this MailSettings. :returns: This MailSettings, ready for use in a request body. :rtype: dict \"\"\" mail_settings = {} if self.bcc_settings is not None: mail_settings[\"bcc\"] = self.bcc_settings.get() if self.bypass_list_management is not None: mail_settings[ \"bypass_list_management\"] = self.bypass_list_management.get() if self.footer_settings is not None: mail_settings[\"footer\"] = self.footer_settings.get() if self.sandbox_mode is not None: mail_settings[\"sandbox_mode\"] = self.sandbox_mode.get() if self.spam_check is not None: mail_settings[\"spam_check\"] = self.spam_check.get() return mail_settings. \n### Response: Get a JSON-ready representation of this MailSettings.\n\n        :returns: This MailSettings, ready for use in a request body.\n        :rtype: dict.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String relative(String startPath, String targetPath) { // If the start and target path's are the same then link to the current directory if (startPath.equals(targetPath)) { return CURRENT_DIR; } String[] start = toSegments(canonical(startPath)); String[] target = toSegments(canonical(targetPath)); // If start path has no trailing separator (a \"file\" path), then drop file segment if (!startPath.endsWith(SEPARATOR)) start = Arrays.copyOfRange(start, 0, start.length - 1); // If target path has no trailing separator, then drop file segment, but keep a reference to add // it later String targetFile = \"\"; if (!targetPath.endsWith(SEPARATOR)) { targetFile = target[target.length - 1]; target = Arrays.copyOfRange(target, 0, target.length - 1); } // Work out how much of the filepath is shared by start and path. String[] common = commonPrefix(start, target); String[] parents = toParentDirs(start.length - common.length); int relativeStartIdx = common.length; String[] relativeDirs = Arrays.copyOfRange(target, relativeStartIdx, target.length); String[] relativePath = Arrays.copyOf(parents, parents.length + relativeDirs.length); System.arraycopy(relativeDirs, 0, relativePath, parents.length, relativeDirs.length); // If this is not a sibling reference append a trailing / to path String trailingSep = \"\"; if (relativePath.length > 0) trailingSep = SEPARATOR; return Arrays.stream(relativePath).collect(Collectors.joining(SEPARATOR)) + trailingSep + targetFile; } \n### Response:", "ground_truth": "Create a path to targetPath that's relative to the given startPath.", "predict": "public static String relative(String startPath, String targetPath)\n```csharp\n        public static String relative(String startPath, String targetPath) {\n            // If the start and target path's are the same then link to the current directory\n            if (startPath.equals(targetPath)) {\n                return CURRENT_DIR;\n            }\n            // Create a copy of the start path with the trailing separator removed\n            String[] start = toSegments(canonical(startPath));\n            // If start path has no trailing separator (a \"file\" path), then drop file segment\n            if (!startPath.endsWith(SEPARATOR)) {\n                start = Arrays.copyOfRange(start, 0, start.length - 1);\n            }\n            // If target path has no trailing separator, then drop file segment, but keep a reference to add it later\n            String targetFile = \"\";\n            if (!targetPath.endsWith(SEPARATOR)) {\n                targetFile = target[target.length - 1];\n                target = Arrays.copyOfRange(target, 0, target.length - 1);\n            }\n            // Work out how much of the filepath is shared by start and path.\n            String[] common = commonPrefix(start, target);\n            String[] parents = toParentDirs(start.length - common.length);\n            int relativeStartIdx = common.length;\n            String[] relativeDirs = Arrays.copyOfRange(target, relativeStartIdx, target.length);\n            String[] relativePath = Arrays.copyOf(parents, parents.length + relativeDirs.length);\n            // If this is not a sibling reference append a trailing / to path\n            if (relativePath.length > 0) {\n                relativePath = Arrays.stream(relativePath).collect(Collectors.joining(SEPARATOR));\n            }\n            return Arrays.stream(relativePath).collect(Collectors.joining(SEPARATOR)) + trailingSep + targetFile;\n        }\n```"}, {"ID": 590, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static function calculate_next_automated_backup($ignoredtimezone, $now) { $config = get_config('backup'); $backuptime = new DateTime('@' . $now); $backuptime->setTimezone(core_date::get_server_timezone_object()); $backuptime->setTime($config->backup_auto_hour, $config->backup_auto_minute); while ($backuptime->getTimestamp() < $now) { $backuptime->add(new DateInterval('P1D')); } // Get number of days from backup date to execute backups. $automateddays = substr($config->backup_auto_weekdays, $backuptime->format('w')) . $config->backup_auto_weekdays; $daysfromnow = strpos($automateddays, \"1\"); // Error, there are no days to schedule the backup for. if ($daysfromnow === false) { return 0; } if ($daysfromnow > 0) { $backuptime->add(new DateInterval('P' . $daysfromnow . 'D')); } return $backuptime->getTimestamp(); }. \n### Response: Works out the next time the automated backup should be run.\n\n@param mixed $ignoredtimezone all settings are in server timezone!\n@param int $now timestamp, should not be in the past, most likely time()\n@return int timestamp of the next execution at server time.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String canonical(String url) { String[] urlPath = toSegments(url); Stack<String> canonical = new Stack<>(); for (String comp : urlPath) { if (comp.isEmpty() || comp.equals(CURRENT_DIR)) continue; if (!comp.equals(PARENT_DIR) || (!canonical.empty() && canonical.peek().equals(PARENT_DIR))) canonical.push(comp); else canonical.pop(); } String prefixSep = url.startsWith(SEPARATOR) ? SEPARATOR : \"\"; String trailingSep = url.endsWith(SEPARATOR) ? SEPARATOR : \"\"; return prefixSep + canonical.stream().collect(Collectors.joining(SEPARATOR)) + trailingSep; } \n### Response:", "ground_truth": "Create a canonical path that does not contain parent directories, current directories, or\nsuperfluous directory separators.", "predict": "Provides a method to extract segments from a URL and return a canonical version of it.\n\n@param String $url URL to extract segments from.\n@return String canonical version of the URL.\n\nNote: This method assumes that the URL is in the format of `http://example.com/path/to/segments` and that the segments are separated by a `/` character."}, {"ID": 591, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (s *GetObjectInput) SetResponseCacheControl(v string) *GetObjectInput { s.ResponseCacheControl = &v return s }. \n### Response: // SetResponseCacheControl sets the ResponseCacheControl field's value..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static List<Tuple<String, List<Object>>> displayableConstraint( Set<ConstraintDescriptor<?>> constraints) { return constraints .parallelStream() .filter(c -> c.getAnnotation().annotationType().isAnnotationPresent(Display.class)) .map(c -> displayableConstraint(c)) .collect(Collectors.toList()); } \n### Response:", "ground_truth": "Converts a set of constraints to human-readable values. Does not guarantee the order of the\nreturned constraints.\n\nThis method calls {@code displayableConstraint} under the hood.\n\n@param constraints the set of constraint descriptors.\n@return a list of pairs of tuples assembled from displayableConstraint.", "predict": "// DisplayableConstraint returns a list of Tuples containing the displayable constraints for the given constraints.."}, {"ID": 592, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function filterPath($path, $trim = null) { if (!is_string($path)) { throw new InvalidArgumentException('The path must be a string.'); } if ($trim === null && defined(get_called_class().'::DIRECTORY_SEPARATORS')) { $trim = static::DIRECTORY_SEPARATORS; } if ($trim) { if (!is_string($trim)) { throw new InvalidArgumentException( 'The characters to strip must be a string or use static::DIRECTORY_SEPARATORS.' ); } $path = trim($path, $trim); } return trim($path); }. \n### Response: Filter the given path.\n\nTrims leading and trailing directory paths\n\n@param  string      $path Path to the file or directory.\n@param  string|null $trim The characters to strip from the $path.\n@throws InvalidArgumentException If the path is invalid.\n@return string Returns the filtered path..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static Tuple<String, List<Object>> displayableConstraint( ConstraintDescriptor<?> constraint) { final Display displayAnnotation = constraint.getAnnotation().annotationType().getAnnotation(Display.class); return Tuple( displayAnnotation.name(), Collections.unmodifiableList( Stream.of(displayAnnotation.attributes()) .map(attr -> constraint.getAttributes().get(attr)) .collect(Collectors.toList()))); } \n### Response:", "ground_truth": "Converts a constraint to a human-readable value.\n\n@param constraint the constraint descriptor.\n@return A tuple containing the constraint's display name and the constraint attributes.", "predict": "Display the given constraint.\n\nReturns a Tuple with the name and an unmodifiable list of the attributes of the constraint..\n\n@param  ConstraintDescriptor<?> $ constraint Constraint description.\n@return Tuple with the name and an unmodifiable list of the attributes.."}, {"ID": 593, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (ctx *context) Markdown(markdownB []byte, opts ...Markdown) (int, error) { options := DefaultMarkdownOptions if len(opts) > 0 { options = opts[0] } ctx.ContentType(ContentHTMLHeaderValue) n, err := WriteMarkdown(ctx.writer, markdownB, options) if err != nil { ctx.StatusCode(http.StatusInternalServerError) return 0, err } return n, err }. \n### Response: // Markdown parses the markdown to html and renders its result to the client..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public <A> CompletionStage<A> timeout( final CompletionStage<A> stage, final long amount, final TimeUnit unit) { requireNonNull(stage, \"Null stage\"); requireNonNull(unit, \"Null unit\"); FiniteDuration duration = FiniteDuration.apply(amount, unit); return toJava(delegate.timeout(duration, Scala.asScalaWithFuture(() -> stage))); } \n### Response:", "ground_truth": "Creates a CompletionStage that returns either the input stage, or a futures.\n\nNote that timeout is not the same as cancellation. Even in case of futures, the given\ncompletion stage will still complete, even though that completed value is not returned.\n\n@param stage the input completion stage that may time out.\n@param amount The amount (expressed with the corresponding unit).\n@param unit The time Unit.\n@param  the completion's result type.\n@return either the completed future, or a completion stage that failed with futures.", "predict": "// Implement a timeout method that returns a CompletionStage with a timeout amount and unit.."}, {"ID": 594, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static function make($collection, callable $formatNode = null, $pk = 'id', $fk = 'parent_id', $childrenAttr = 'children', $levelLabel = 'level') { $nested = []; $onLevels = []; foreach ($collection as $item) { $itemNode = $item; $onLevels[$item[$levelLabel]][$item[$pk]] = $itemNode; } $start = count($onLevels) - 1; for ($level = $start; $level >= 0; $level--) { $itemsOnCurrentLevel = $onLevels[$level]; foreach ($itemsOnCurrentLevel as $i => $childNode) { $parentLevel = $childNode[$levelLabel] - 1; $parentId = $childNode[$fk]; if (!isset($onLevels[$parentLevel][$parentId]) && $level > 0) { throw new \\Exception('Error: Cannot find '.$fk.' of item having '.$pk.' of '.$childNode[$pk]); } if (isset($formatNode)) { $childNode = $formatNode($childNode); } if ($level > 0) { $onLevels[$parentLevel][$parentId][$childrenAttr][] = $childNode; unset($onLevels[$level]); } else { $nested[] = $childNode; } } } return $nested; }. \n### Response: Make nested data collection.\n\n@param  mixed    $collection   Collection to be nested. Make sure to ordery by, level and position\n@param  callable $formatNode   Format callback\n@param  string   $pk           Primary key name (id)\n@param  string   $fk           Foreign key name (parent_id)\n@param  string   $childrenAttr Children attribute to be used (children)\n@param  string   $levelLabel   Level label (level)\n@return array    The nested collection.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static boolean isAssignable( Class<?>[] classArray, Class<?>[] toClassArray, boolean autoboxing) { if (arrayGetLength(classArray) != arrayGetLength(toClassArray)) { return false; } if (classArray == null) { classArray = EMPTY_CLASS_ARRAY; } if (toClassArray == null) { toClassArray = EMPTY_CLASS_ARRAY; } for (int i = 0; i < classArray.length; i++) { if (isAssignable(classArray[i], toClassArray[i], autoboxing) == false) { return false; } } return true; } \n### Response:", "ground_truth": "Checks if an array of Classes can be assigned to another array of Classes.\n\nThis method calls {@link #isAssignable(Class, Class) isAssignable} for each Class pair in\nthe input arrays. It can be used to check if a set of arguments (the first parameter) are\nsuitably compatible with a set of method parameter types (the second parameter).\n\nUnlike the {@link Class#isAssignableFrom(java.lang.Class)} method, this method takes into\naccount widenings of primitive classes and {@code null}s.\n\nPrimitive widenings allow an int to be assigned to a {@code long}, {@code float} or {@code\ndouble}. This method returns the correct result for these cases.\n\n{@code Null} may be assigned to any reference type. This method will return {@code true} if\n{@code null} is passed in and the toClass is non-primitive.\n\nSpecifically, this method tests whether the type represented by the specified {@code Class}\nparameter can be converted to the type represented by this {@code Class} object via an identity\nconversion widening primitive or widening reference conversion. See The Java Language Specification, sections\n5.1.1, 5.1.2 and 5.1.4 for details.\n\n@param classArray the array of Classes to check, may be {@code null}\n@param toClassArray the array of Classes to try to assign into, may be {@code null}\n@param autoboxing whether to use implicit autoboxing/unboxing between primitives and wrappers\n@return {@code true} if assignment possible", "predict": "Provides a method to check if two classes areAssignable, which means they have the same data type, and can be safely assigned to each other.\n\n@param  Class<?>[] $classArray   Array of class<?> objects to check\n@param  Class<?>[] $toClassArray   Array of class<?> objects to compare\n@param  boolean   $autoboxing   If true, perform autoboxing of the classes\n@return boolean    True if the classes are assignable, false otherwise\n\nThis method can be useful in situations where you need to check if two objects are of the same type and can be safely assigned to each other, without the need to perform any type of conversion."}, {"ID": 595, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Nullable public static String getCharsetNameFromMimeType (@Nullable final IMimeType aMimeType) { return aMimeType == null ? null : aMimeType.getParameterValueWithName (CMimeType.PARAMETER_NAME_CHARSET); }. \n### Response: Determine the charset name from the provided MIME type.\n\n@param aMimeType\nThe MIME type to query. May be null.\n@return null if no MIME type was provided or if the MIME type\ndoes not contain a \"charset\" parameter.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static Date parseCRONExpression(String cron) { try { return new CronExpression(cron).getNextValidTimeAfter(new Date()); } catch (Exception e) { throw new IllegalArgumentException(\"Invalid CRON pattern : \" + cron, e); } } \n### Response:", "ground_truth": "Parses a CRON expression.\n\n@param cron the CRON String\n@return the next Date that satisfies the expression", "predict": "This method parses a cron expression from a string and returns the next valid time after the specified date. It uses a try-catch block to handle any exceptions that may occur during the parsing process. If an exception is thrown, it will throw a new IllegalArgumentException with the message \"Invalid CRON pattern : \" + cron."}, {"ID": 596, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def get_example(): \"\"\"Retrieve an example of the metadata\"\"\" example = dict() for section_key, section in Metadata.MAIN_SECTIONS.items(): example[section_key] = section.EXAMPLE.copy() return example. \n### Response: Retrieve an example of the metadata.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static long cronInterval(String cron, Date date) { try { return new CronExpression(cron).getNextInterval(date); } catch (Exception e) { throw new IllegalArgumentException(\"Invalid CRON pattern : \" + cron, e); } } \n### Response:", "ground_truth": "Compute the number of milliseconds between the next valid date and the one after.\n\n@param cron the CRON String\n@param date the date to start search\n@return the number of milliseconds between the next valid date and the one after, with an\ninvalid interval between", "predict": "This method returns the cron interval for the specified cron expression and date in the format \"HH:mm:ss.SSSZ\". It uses a try-catch block to handle any exceptions that may occur during the execution of the CronExpression constructor. If an exception is thrown, it throws a new IllegalArgumentException with the message \"Invalid CRON pattern : \" + cron, indicating that the cron expression is invalid."}, {"ID": 597, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static function add($method, $target, $handler, $name = null) { array_push(static::$prefixRoutes, [ 'method' => $method, 'target' => $target, 'handler' => $handler, 'name' => $name, ]); }. \n### Response: Support method to add group of routes.\n\n@param $method, HTTP Request method\n@param $target, the route\n@param $handler, Closure | Controller@method\n@param $name, route name optional.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static AhcWSClient create( AhcWSClientConfig config, AhcHttpCache cache, Materializer materializer) { final StandaloneAhcWSClient client = StandaloneAhcWSClient.create(config, cache, materializer); return new AhcWSClient(client, materializer); } \n### Response:", "ground_truth": "Creates WS client manually from configuration, internally creating a new instance of\nAsyncHttpClient and managing its own thread pool.\n\nThis client is not managed as part of Play's lifecycle, and must be closed by calling\nws.close(), otherwise you will run into memory leaks.\n\n@param config a config object, usually from AhcWSClientConfigFactory\n@param cache if not null, provides HTTP caching.\n@param materializer an Akka materializer\n@return a new instance of AhcWSClient.", "predict": "This method creates a new instance of the AhcWSClient class and returns it.\n\n@param AhcWSClientConfig, Configuration for the AhcWSClient\n@param AhcHttpCache, HTTP caching implementation\n@param Materializer, Materializer for the AhcWSClient@method\n\nThis method is responsible for creating a new instance of the AhcWSClient class and passing it various parameters. It also returns a new instance of the AhcWSClient class. This method is typically used when creating a new instance of the AhcWSClient class for a specific request."}, {"ID": 598, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function update_item_permissions_check( $request ) { if ( ! $this->check_is_taxonomy_allowed( $this->taxonomy ) ) { return false; } $term = get_term( (int) $request['id'], $this->taxonomy ); if ( ! $term ) { return new WP_Error( 'rest_term_invalid', __( \"Resource doesn't exist.\" ), array( 'status' => 404 ) ); } $taxonomy_obj = get_taxonomy( $this->taxonomy ); if ( ! current_user_can( $taxonomy_obj->cap->edit_terms ) ) { return new WP_Error( 'rest_cannot_update', __( 'Sorry, you cannot update resource.' ), array( 'status' => rest_authorization_required_code() ) ); } return true; }. \n### Response: Checks if a request has access to update the specified term.\n\n@param  WP_REST_Request $request Full details about the request.\n@return WP_Error|boolean.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public GuiceApplicationBuilder builder(ApplicationLoader.Context context) { return initialBuilder .in(context.environment()) .loadConfig(context.initialConfig()) .overrides(overrides(context)); } \n### Response:", "ground_truth": "Construct a builder to use for loading the given context.\n\n@param context the context the returned builder will load\n@return the builder", "predict": "Returns a new GuiceApplicationBuilder object that sets up the application according to the provided context.\n\n@param  ApplicationLoader.Context $context Context with which the application is being set up.\n@return GuiceApplicationBuilder.\n```"}, {"ID": 599, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static function addStub(\\Phar $phar, $stubAlias) { if ($stubAlias === false) { return; } echo \"\\nAdd stub\"; $path = \\Yii::getAlias($stubAlias); if (file_exists($path) === false) { throw new InvalidConfigException(\"Invalid configuration. Stub file '{$path}' does not exists.\"); } $phar->setStub(file_get_contents($path)); }. \n### Response: Add stub from file to phar file.\n\n@param \\Phar       $phar      PHAR object to update.\n@param string|bool $stubAlias Path alias to stub file.\n\n@throws \\yii\\base\\InvalidConfigException On wrong stub file set (index0h\\phar\\Module::stub)..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static Result TODO(Request request) { return status(NOT_IMPLEMENTED, views.html.defaultpages.todo.render(request.asScala())); } \n### Response:", "ground_truth": "Generates a 501 NOT_IMPLEMENTED simple result.", "predict": "This method returns a `Result` object with a status code of `NOT_IMPLEMENTED` and a view to render for the \"todo\" page.\n\n@param Request $request Request object.\n\n@return Result object with status code and view.\n\n"}, {"ID": 600, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def randbetween(ctx, bottom, top): \"\"\" Returns a random integer number between the numbers you specify \"\"\" bottom = conversions.to_integer(bottom, ctx) top = conversions.to_integer(top, ctx) return random.randint(bottom, top). \n### Response: Returns a random integer number between the numbers you specify.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @Deprecated public static void session(String key, String value) { session().put(key, value); } \n### Response:", "ground_truth": "Puts a new value into the current session.\n\n@param key the key to set into the session\n@param value the value to set for key\n@deprecated Deprecated as of 2.7.0. Use {@link Result} instead.", "predict": "@Deprecated\npublic static void session(String key, String value) {\nsession().put(key, value);\n}\n\nExplanation: This method is deprecated and will be removed in the future. It is recommended to use the new `session()` method instead."}, {"ID": 601, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def save(self, data): \"\"\"Save the config data Args: data: any serializable config data Raises: ConfigLoaderException: if the ConfigLoader.load not called, so there is no config file name, or the data is not serializable or the loader is nested \"\"\" if self.__nested: raise ConfigLoaderException(\"Cannot save the config if the 'nested' paramter is True!\") if self.__loaded_config_file is None: raise ConfigLoaderException(\"Load not called yet!\") try: with open(self.__loaded_config_file, 'w') as f: f.write(self.__formatter.encode(data)) except Exception as e: raise ConfigLoaderException(\"Config data is not serializable: %s\" % e). \n### Response: Save the config data\n\n        Args:\n            data: any serializable config data\n\n        Raises:\n            ConfigLoaderException: if the ConfigLoader.load not called, so there is no config file name,\n                                   or the data is not serializable or the loader is nested.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @Deprecated public static void flash(String key, String value) { flash().put(key, value); } \n### Response:", "ground_truth": "Puts a new value into the flash scope.\n\n@param key the key to put into the flash scope\n@param value the value corresponding to key\n@deprecated Deprecated as of 2.7.0. Use {@link Result} instead.", "predict": "Flash the config data\n\n        Args:\n            key: the config key\n            value: the config value\n\n        Returns:\n            void\n\n        Raises:\n            None\n\n         deprecated: This method is deprecated and will be removed in the future. Instead, use the `put()` method of the `Config` class."}, {"ID": 602, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def get_one(self, schema, query=None, **kwargs): \"\"\" get one row from the db matching filters set in query schema -- Schema() query -- Query() return -- dict -- the matching row \"\"\" ret = self._get_query(self._get_one, schema, query, **kwargs) if not ret: ret = {} return ret. \n### Response: get one row from the db matching filters set in query\n\n        schema -- Schema()\n        query -- Query()\n\n        return -- dict -- the matching row.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public <A extends Annotation> BindingKey<T> qualifiedWith(final A instance) { return underlying.qualifiedWith(instance).asJava(); } \n### Response:", "ground_truth": "Qualify this binding key with the given instance of an annotation.\n\nThis can be used to specify bindings with annotations that have particular values.", "predict": "qualifiedWith(instance)\n\nThis method returns the binding key of the given instance, which is a binding key of type T.\n\n        instance -- A extends Annotation -- the annotation to be qualified\n\n        return -- BindingKey<T> -- the binding key of the given instance."}, {"ID": 603, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public List<SessionTicketKey> parseBytes(byte[] json) throws IOException { List<String> allSeeds = TicketSeeds.parseFromJSONBytes(json, objectMapper).getAllSeeds(); return allSeeds.stream().map(this::deriveKeyFromSeed).collect(Collectors.toList()); }. \n### Response: Returns a list of tickets parsed from the given JSON bytes. The keys are returned in a format suitable for\nuse with netty. The first keys are the current keys, following that are the new keys and old keys.\n\n@param json the JSON bytes containing ticket seed data.\n@return a list of ticket keys. Current keys are first, then new keys, then old keys.\n@throws IOException if parsing the JSON fails.\n@throws IllegalArgumentException if the JSON does not contain any current seeds..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public <A extends Annotation> BindingKey<T> qualifiedWith(final Class<A> annotation) { return underlying.qualifiedWith(annotation).asJava(); } \n### Response:", "ground_truth": "Qualify this binding key with the given annotation.\n\nFor example, you may have both a cached implementation, and a direct implementation of a\nservice. To differentiate between them, you may define a Cached annotation:\n\n{@code\nbindClass(Foo.class).qualifiedWith(Cached.class).to(FooCached.class),\nbindClass(Foo.class).to(FooImpl.class)\n\n...\n\nclass MyController {\n{@literal @}Inject\nMyController({@literal @}Cached Foo foo) {\n...\n}\n...\n}\n}\n\nIn the above example, the controller will get the cached {@code Foo} service.", "predict": "Returns the binding key with the specified annotation.\n\n@param annotation the annotation to use for qualified keys.\n@return the binding key with the specified annotation.\n@throws IllegalArgumentException if the specified annotation is not valid."}, {"ID": 604, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function syncProducts($langcode, $page_size, array $options = ['skus' => NULL, 'category_id' => NULL]) { $langcode = strtolower($langcode); $store_id = $this->i18nhelper->getStoreIdFromLangcode($langcode); if (empty($store_id)) { $this->output->writeln(dt(\"Store id not found for provided language code.\")); return; } $page_size = (int) $page_size; if ($page_size <= 0) { $this->output->writeln(dt(\"Page size must be a positive integer.\")); return; } $skus = $options['skus']; $category_id = $options['category_id']; // Apply only one filer at a time. if ($category_id) { $skus = ''; } // Ask for confirmation from user if attempt is to run full sync. if (empty($skus) && empty($category_id)) { $confirmation_text = dt('I CONFIRM'); $input = $this->io()->ask(dt('Are you sure you want to import all products for @language language? If yes, type: \"@confirmation\"', [ '@language' => $langcode, '@confirmation' => $confirmation_text, ])); if ($input != $confirmation_text) { throw new UserAbortException(dt('Please be more attentive in using this command and prove you are not sleep working...')); } } $this->output->writeln(dt('Requesting all commerce products for selected language code...')); $this->ingestApiWrapper->productFullSync($store_id, $langcode, $skus, $category_id, $page_size); $this->output->writeln(dt('Done.')); }. \n### Response: Run a full synchronization of all commerce product records.\n\n@param string $langcode\nSync products available in this langcode.\n@param string $page_size\nNumber of items to be synced in one batch.\n@param array $options\nCommand options.\n\n@command acm_sku:sync-products\n\n@option skus SKUs to import (like query).\n@option category_id Magento category id to sync the products for.\n\n@validate-module-enabled acm_sku\n\n@aliases acsp,sync-commerce-products\n\n@usage drush acsp en 50\nRun a full product synchronization of all available products in store\nlinked to en and page size 50.\n@usage drush acsp en 50 --skus=\\'M-H3495 130 2  FW\\',\\'M-H3496 130 004FW\\',\\'M-H3496 130 005FW\\''\nSynchronize sku data for the skus M-H3495 130 2  FW, M-H3496 130 004FW\n& M-H3496 130 005FW only in store linked to en and page size 50.\n@usage drush acsp en 50 --category_id=1234\nSynchronize sku data for the skus in category with id 1234 only in store\nlinked to en and page size 50.\n\n@throws \\Drush\\Exceptions\\UserAbortException.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public Binding<T> to(final Class<? extends T> implementation) { return underlying.to(implementation).asJava(); } \n### Response:", "ground_truth": "Bind this binding key to the given implementation class.\n\nThis class will be instantiated and injected by the injection framework.", "predict": "Implement a binding method to convert a class to its Java equivalent.\n\n@param Class<? extends T> implementation\nThe class to convert to its Java equivalent.\n\n@return Binding<T>\nThe binding object for the specified class.\n\n@Note\nThis method is useful for converting between different programming languages or frameworks."}, {"ID": 605, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (m *Manager) SetHosts(hosts []string) { m.init() m.mu.Lock() m.state.Hosts = append(m.state.Hosts[:0], hosts...) m.mu.Unlock() m.updated() }. \n### Response: // SetHosts sets the manager's list of known host names.\n// If the list is non-nil, the manager will only ever attempt to acquire\n// certificates for host names on the list.\n// If the list is nil, the manager does not restrict the hosts it will\n// ask for certificates for..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public Binding<T> to(final Provider<? extends T> provider) { return underlying.to(provider).asJava(); } \n### Response:", "ground_truth": "Bind this binding key to the given provider instance.\n\nThis provider instance will be invoked to obtain the implementation for the key.", "predict": "// This method returns a binding for the provided provider.\n// It is important to note that the returned binding may not\n// be valid until the underlying implementation has finished\n// processing the provider.\n\n"}, {"ID": 606, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function store(CreateRedirectRequest $request) { $this->authorize(RedirectsPolicy::PERMISSION_CREATE); $redirect = Redirect::createRedirect( $request->getValidatedData() ); $this->transNotification('created', [], $redirect->toArray()); return redirect()->route('admin::seo.redirects.show', [$redirect]); }. \n### Response: Store the new redirect.\n\n@param  \\Arcanesoft\\Seo\\Http\\Requests\\Admin\\Redirects\\CreateRedirectRequest  $request\n\n@return \\Illuminate\\Http\\RedirectResponse.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public <A extends T> Binding<T> to(final Supplier<A> instance) { return underlying.to(new FromJavaSupplier<>(instance)).asJava(); } \n### Response:", "ground_truth": "Bind this binding key to the given instance.", "predict": "This method is used to bind a supplier of type A to a method that takes a T as an argument. The type A is defined as any subclass of T.\n\nThe method returns a binding of type A that can be used to pass an instance of a supplier of type T to the method that takes T as an argument. The method uses the underlying class to bind the supplier to the method. The method also uses the FromJavaSupplier class to create a supplier of type A that can be used to pass an instance of the supplier to the method that takes T as an argument.\n\n@param  \\Illuminate\\Support\\Supplier<A>  $instance\n\n@return \\Illuminate\\Support\\Binding<A>."}, {"ID": 607, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func stringToRuneSlice(input string) []rune { output := make([]rune, utf8.RuneCountInString(input)) n := 0 for _, r := range input { output[n] = r n++ } return output }. \n### Response: // stringToRuneSlice converts a string to a slice of runes.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public Binding<T> to(final BindingKey<? extends T> key) { return underlying.to(key.asScala()).asJava(); } \n### Response:", "ground_truth": "Bind this binding key to another binding key.", "predict": "// to returns a binding of type T to a binding key of type<? extends T>."}, {"ID": 608, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void error(VirtualConnection vc, TCPReadRequestContext rsc, IOException ioe) { if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) { Tr.debug(tc, \"error() called: vc=\" + vc + \" ioe=\" + ioe); } HttpOutboundServiceContextImpl osc = (HttpOutboundServiceContextImpl) vc.getStateMap().get(CallbackIDs.CALLBACK_HTTPOSC); if (osc.markReadCancelSuccess()) { if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) { Tr.debug(tc, \"Ignoring error callback on canceled read\"); } return; } int state; // query/set the states in one block to avoid timing windows synchronized (osc.stateSyncObject) { state = osc.getReadState(); osc.setCallbackState(HttpOutboundServiceContextImpl.CALLBACK_STATE_ERROR, ioe); } if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) { Tr.debug(tc, \"Read-ahead state: \" + state); } switch (state) { case (HttpOutboundServiceContextImpl.READ_STATE_IDLE): // new connection hasn't started yet, notify app channel now osc.getAppReadCallback().error(vc, ioe); break; case (HttpOutboundServiceContextImpl.READ_STATE_TIME_RESET): // new conn has been initialized but the read for response hasn't // been started yet if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) { Tr.debug(tc, \"Received the read-ahead immed timeout.\"); } break; case (HttpOutboundServiceContextImpl.READ_STATE_SYNC): // d264854: no longer possible // a synchronous read for the response has been started already osc.wakeupReadAhead(); break; case (HttpOutboundServiceContextImpl.READ_STATE_ASYNC): // d264854: no longer possible // an async read for the response has been started already osc.setPersistent(false); osc.reConnect(vc, ioe); break; default: if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) { Tr.debug(tc, \"Unexpected read-ahead state: \" + state); } break; } }. \n### Response: If an error occurs, such as the server side closing down the socket, then\nthis method will be called. Depending on what state the connection is in,\nthis error is either sent to the application channel immediately or\ndelayed until the actual read for the response would start, when it can\nthen hand the error off to the application channel.\n\n@param vc\n@param rsc\n@param ioe.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public <P extends Provider<? extends T>> Binding<T> toProvider(final Class<P> provider) { return underlying.toProvider(provider).asJava(); } \n### Response:", "ground_truth": "Bind this binding key to the given provider class.\n\nThe dependency injection framework will instantiate and inject this provider, and then\ninvoke its `get` method whenever an instance of the class is needed.", "predict": "This method returns a binding for the provided provider. The provider is assumed to be a class that extends Provider<? extends T>, where T is the type of the value being bound. The method returns the binding as a Java object."}, {"ID": 609, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public String getKeyValue(String key){ String keyName = keysMap.get(key); if (keyName != null){ return keyName; } return \"\"; //key wasn't defined in keys properties file }. \n### Response: get the key name to use in log from the logging keys map.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static List<Lang> availables(Application app) { play.api.i18n.Langs langs = app.injector().instanceOf(play.api.i18n.Langs.class); List<play.api.i18n.Lang> availableLangs = Scala.asJava(langs.availables()); return availableLangs.stream().map(Lang::new).collect(toList()); } \n### Response:", "ground_truth": "Retrieve Lang availables from the application configuration.\n\n@param app the current application.\n@return the list of available Lang.", "predict": "This method provides information about the available languages for an application. It retrieves the available languages from the application and returns them as a list. The method uses the `app.injector()` method to get an instance of the `Langs` class, and then uses the `instanceOf` method to check if the instance is an instance of the `Langs` class. If it is, the method returns the name of the language using the `keysMap.get(key)` method. If the language is not found in the keys properties file, the method returns an empty string. Finally, the method uses the `Scala.asJava` method to convert the list of available languages to a Java list and then uses the `stream` and `map` methods to convert it to a list. Finally, the method uses the `collect` method to collect the list to a list."}, {"ID": 610, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def check_unexpected_files(&block) expected_files = glob_all after_path produced_files = glob_all unexpected_files = produced_files - expected_files # Select only files unexpected_files.select! { |path| path.file? } # Filter ignored paths unexpected_files.reject! { |path| context.ignores?(path) } block.call unexpected_files end. \n### Response: Compares the expected and produced directory by using the rules\n defined in the context for unexpected files.\n\n This is separate because you probably don't want to define an extra\n test case for each file, which wasn't expected at all. So you can\n keep your test cases consistent.\n\n @param  [Block()>] diff_block\n         The block, where you will likely define a test that no unexpected files exists.\n         It will receive an Array..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static Lang preferred(Application app, List<Lang> availableLangs) { play.api.i18n.Langs langs = app.injector().instanceOf(play.api.i18n.Langs.class); Stream<Lang> stream = availableLangs.stream(); List<play.api.i18n.Lang> langSeq = stream.map(l -> new play.api.i18n.Lang(l.toLocale())).collect(toList()); return new Lang(langs.preferred(Scala.toSeq(langSeq))); } \n### Response:", "ground_truth": "Guess the preferred lang in the langs set passed as argument. The first Lang that matches an\navailable Lang wins, otherwise returns the first Lang available in this application.\n\n@param app the currept application\n@param availableLangs the set of langs from which to guess the preferred\n@return the preferred lang.", "predict": "Provides a way to return the preferred version of a language based on the available languages in the application.\n\nThis method takes in two parameters:\n\n* `Application app`: The application instance that contains the available languages.\n* `List<Lang> availableLangs`: A list of all the available languages in the application.\n\nThe method creates a stream of `Lang` instances and then maps each language to a new instance of the `Lang` class. Finally, it collects the stream into a list of `Lang` instances.\n\nThe method returns a new `Lang` instance that is the preferred version of the language based on the available languages in the application.\n\n@param  [Application()>] app\n         The application instance that contains the available languages.\n         It will receive an Application instance.\n@param  [List<Lang()>] availableLangs\n         A list of all the available languages in the application.\n         It will receive a List<Lang>.\n@return\n         A new Lang instance that is the preferred version of the language based on the available languages in the application.\n```"}, {"ID": 611, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (s *ReceiveMessageInput) SetReceiveRequestAttemptId(v string) *ReceiveMessageInput { s.ReceiveRequestAttemptId = &v return s }. \n### Response: // SetReceiveRequestAttemptId sets the ReceiveRequestAttemptId field's value..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static play.api.db.evolutions.EvolutionsReader fromMap( Map<String, List<Evolution>> evolutions) { return new SimpleEvolutionsReader(evolutions); } \n### Response:", "ground_truth": "Create an evolutions reader based on a simple map of database names to evolutions.\n\n@param evolutions The map of database names to evolutions.\n@return the evolutions reader.", "predict": "// Returns a new SimpleEvolutionsReader instance that reads the evolutions from the given map.."}, {"ID": 612, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def get_items_of_type(self, item_type): \"\"\" Returns all items of specified type. >>> book.get_items_of_type(epub.ITEM_IMAGE) :Args: - item_type: Type for items we are searching for :Returns: Returns found items as tuple. \"\"\" return (item for item in self.items if item.get_type() == item_type). \n### Response: Returns all items of specified type.\n\n        >>> book.get_items_of_type(epub.ITEM_IMAGE)\n\n        :Args:\n          - item_type: Type for items we are searching for\n\n        :Returns:\n          Returns found items as tuple..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static play.api.db.evolutions.EvolutionsReader forDefault(Evolution... evolutions) { Map<String, List<Evolution>> map = new HashMap<String, List<Evolution>>(); map.put(\"default\", Arrays.asList(evolutions)); return fromMap(map); } \n### Response:", "ground_truth": "Create an evolutions reader for the default database from a list of evolutions.\n\n@param evolutions The list of evolutions.\n@return the evolutions reader.", "predict": "This method returns a default evolution reader for the specified evolutions.\n\nThe method takes in an array of Evolution objects as a parameter and returns a reader for the default evolution. The map is used to store the evolutions as a list of Evolution objects. The method returns a reader for the list of default evolutions.\n\nNote that this method is only available in the play.api.db.evolutions package and is used to read evolution data from a database. It is not intended for use in production code and should only be used for testing purposes."}, {"ID": 613, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (h OsHelperImpl) WriteStringToFile(filename string, contents string) error { err := ioutil.WriteFile(filename, []byte(contents), 0644) return err }. \n### Response: // Overwrite the contents, creating if necessary. Panic on err.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void cleanupEvolutions(Database database, boolean autocommit, String schema) { DatabaseEvolutions evolutions = new DatabaseEvolutions(database.asScala(), schema); evolutions.evolve(evolutions.resetScripts(), autocommit); } \n### Response:", "ground_truth": "Cleanup evolutions for the given database.\n\nThis will run the down scripts for all the applied evolutions.\n\n@param database The database to apply the evolutions to.\n@param autocommit Whether autocommit should be used.\n@param schema The schema where all the play evolution tables are saved in", "predict": "// Clean up evolutions data and reset scripts. Evolve() method may commit the changes."}, {"ID": 614, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public synchronized void updateComplete() { grailsClassesByName = Collections.unmodifiableMap(grailsClassesByName); classesByName = Collections.unmodifiableMap(classesByName); grailsClassesArray = grailsClasses.toArray(new GrailsClass[grailsClasses.size()]); // Make classes array classes = classesByName.values().toArray(new Class[classesByName.size()]); }. \n### Response: Refresh the arrays generated from the maps..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public GuiceApplicationBuilder withConfigLoader(Function<Environment, Config> load) { return newBuilder( delegate.loadConfig( func( (play.api.Environment env) -> new play.api.Configuration(load.apply(new Environment(env)))))); } \n### Response:", "ground_truth": "Set the initial configuration loader. Overrides the default or any previously configured\nvalues.\n\n@param load the configuration loader\n@return the configured application builder", "predict": "This method is used to create a new GuiceApplicationBuilder object with a configuration loader that uses the provided Function<Environment, Config> load. The load function is passed a new Environment object as an argument and creates a new Configuration object by calling the load method on the Environment object. The newBuilder() method is then used to return the new ApplicationBuilder object."}, {"ID": 615, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def run_pending(self): \"\"\" Run all jobs that are scheduled to run. Please note that it is *intended behavior that run_pending() does not run missed jobs*. For example, if you've registered a job that should run every minute and you only call run_pending() in one hour increments then your job won't be run 60 times in between but only once. \"\"\" runnable_jobs = (job for job in self.jobs if job.should_run) for job in sorted(runnable_jobs): self._run_job(job). \n### Response: Run all jobs that are scheduled to run.\n\n        Please note that it is *intended behavior that run_pending()\n        does not run missed jobs*. For example, if you've registered a job\n        that should run every minute and you only call run_pending()\n        in one hour increments then your job won't be run 60 times in\n        between but only once..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public GuiceApplicationBuilder withModuleLoader( BiFunction<Environment, Config, List<GuiceableModule>> loader) { return newBuilder( delegate.load( func( (play.api.Environment env, play.api.Configuration conf) -> Scala.toSeq(loader.apply(new Environment(env), conf.underlying()))))); } \n### Response:", "ground_truth": "Set the module loader. Overrides the default or any previously configured values.\n\n@param loader the configuration\n@return the configured application builder", "predict": "This method is used to configure the Guice application builder with a module loader.\n\nIt returns a new builder object that loads the Guice application by calling the delegate.load method with the provided module loader function. The loader function takes an Environment and Configuration object and returns a list ofGuiceableModules. The returned builder object can then be used to build the Guice application.\n\nPlease note that it is intended behavior that run_pending() does not run missed jobs. For example, if you've registered a job that should run every minute and you only call run_pending() in one hour increments then your job won't be run 60 times in between but only once."}, {"ID": 616, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private function decodeJSON($json) { $query = json_decode($json); if (json_last_error()) { throw new QBParseException('JSON parsing threw an error: '.json_last_error_msg()); } if (!is_object($query)) { throw new QBParseException('The query is not valid JSON'); } return $query; }. \n### Response: Decode the given JSON\n\n@param string incoming json\n@throws QBParseException\n@return stdClass.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public GuiceApplicationBuilder load(GuiceableModule... modules) { return newBuilder(delegate.load(Scala.varargs(modules))); } \n### Response:", "ground_truth": "Override the module loader with the given guiceable modules.\n\n@param modules the set of overriding modules\n@return an application builder that incorporates the overrides", "predict": "Loads the specified modules into the application.\n\n@param array ofGuiceableModule objects\n@return GuiceApplicationBuilder object\n@throws Exception."}, {"ID": 617, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void storeCookies(URLConnection conn) throws IOException { // let's determine the domain from where these cookies are being sent String domain = getDomainFromHost(conn.getURL().getHost()); Map<String, Map<String, String>> domainStore; // this is where we will store cookies for this domain // now let's check the store to see if we have an entry for this domain if (store.containsKey(domain)) { // we do, so lets retrieve it from the store domainStore = store.get(domain); } else { // we don't, so let's create it and put it in the store domainStore = new HashMap<>(); store.put(domain, domainStore); } // OK, now we are ready to get the cookies out of the URLConnection String headerName = null; for (int i = 1; (headerName = conn.getHeaderFieldKey(i)) != null; i++) { if (headerName.equalsIgnoreCase(SET_COOKIE)) { Map<String, String> cookie = new HashMap<>(); StringTokenizer st = new StringTokenizer(conn.getHeaderField(i), COOKIE_VALUE_DELIMITER); // the specification dictates that the first name/value pair // in the string is the cookie name and value, so let's handle // them as a special case: if (st.hasMoreTokens()) { String token = st.nextToken(); String name = token.substring(0, token.indexOf(NAME_VALUE_SEPARATOR)); String value = token.substring(token.indexOf(NAME_VALUE_SEPARATOR) + 1, token.length()); domainStore.put(name, cookie); cookie.put(name, value); } while (st.hasMoreTokens()) { String token = st.nextToken().toLowerCase(); int idx = token.indexOf(NAME_VALUE_SEPARATOR); if (idx > 0 && idx < token.length() - 1) { cookie.put(token.substring(0, idx).toLowerCase(), token.substring(idx + 1, token .length())); } } } } }. \n### Response: Retrieves and stores cookies returned by the host on the other side of the the open\njava.net.URLConnection.\n\nThe connection MUST have been opened using the connect() method or a IOException will be\nthrown.\n\n@param conn a java.net.URLConnection - must be open, or IOException will be thrown\n@throws java.io.IOException Thrown if conn is not open..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public GuiceApplicationBuilder load(com.google.inject.Module... modules) { return load(Guiceable.modules(modules)); } \n### Response:", "ground_truth": "Override the module loader with the given Guice modules.\n\n@param modules the set of overriding modules\n@return an application builder that incorporates the overrides", "predict": "loads all the modules defined in the given array of com.google.inject.Module objects into the current Guice application.\n\n@param modules an array of com.google.inject.Module objects - must be defined, or a null reference will be returned\n@return a new GuiceApplicationBuilder object - will be used to build the current Guice application.\n@since  inject is a part of the google-guice library, which is a dependency of the project.\n\n@throws java.lang.reflect.Exception thrown if any of the modules in the array are not defined or if the array is empty."}, {"ID": 618, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func manifestDispatcher(ctx *Context, r *http.Request) http.Handler { manifestHandler := &manifestHandler{ Context: ctx, } reference := getReference(ctx) dgst, err := digest.Parse(reference) if err != nil { // We just have a tag manifestHandler.Tag = reference } else { manifestHandler.Digest = dgst } mhandler := handlers.MethodHandler{ \"GET\": http.HandlerFunc(manifestHandler.GetManifest), \"HEAD\": http.HandlerFunc(manifestHandler.GetManifest), } if !ctx.readOnly { mhandler[\"PUT\"] = http.HandlerFunc(manifestHandler.PutManifest) mhandler[\"DELETE\"] = http.HandlerFunc(manifestHandler.DeleteManifest) } return mhandler }. \n### Response: // manifestDispatcher takes the request context and builds the\n// appropriate handler for handling manifest requests..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public GuiceApplicationBuilder load(play.api.inject.Module... modules) { return load(Guiceable.modules(modules)); } \n### Response:", "ground_truth": "Override the module loader with the given Play modules.\n\n@param modules the set of overriding modules\n@return an application builder that incorporates the overrides", "predict": "// load takes a list of modules and returns a GuiceApplicationBuilder\n// that loads them into the application.."}, {"ID": 619, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function authenticateByCode($provider, string $code) { $provider_user = $provider->user(); /** @var \\Railken\\Amethyst\\Repositories\\UserRepository */ $repository = $this->manager->getRepository(); $user = $repository->findOneByEmail($provider_user->getEmail()); if (!$user) { $result = $this->manager->create([ 'name' => $provider_user->getNickname() ? $provider_user->getNickname() : $provider_user->getName(), 'role' => 'user', 'password' => str_random(32), 'email' => $provider_user->getEmail(), ]); if (!$result->ok()) { return $this->response(['errors' => $result->getSimpleErrors()], Response::HTTP_BAD_REQUEST); } $user = $result->getResource(); } $token = Container::getInstance()->make(\\Laravel\\Passport\\PersonalAccessTokenFactory::class)->make( $user->getKey(), 'login', [] ); return $this->response([ 'token_type' => 'Bearer', 'expires_in' => 0, 'access_token' => $token->accessToken, ], Response::HTTP_OK); }. \n### Response: Authenticate a user by the \"code\" of oauth2.\n\n@param \\Laravel\\Socialite\\Two\\AbstractProvider $provider\n@param string                                  $code\n\n@return \\Symfony\\Component\\HttpFoundation\\Response.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public GuiceApplicationBuilder load(play.api.inject.Binding<?>... bindings) { return load(Guiceable.bindings(bindings)); } \n### Response:", "ground_truth": "Override the module loader with the given Play bindings.\n\n@param bindings the set of binding override\n@return an application builder that incorporates the overrides", "predict": "This method is used to load the application with the specified bindings.\n\n@param play.api.inject.Binding<?>... bindings\n\n@return GuiceApplicationBuilder."}, {"ID": 620, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func replyWithError(w http.ResponseWriter, status, message string, args ...interface{}) error { return replyWithJSON(w, map[string]string{ \"status\": status, \"error_message\": fmt.Sprintf(message, args...), }) }. \n### Response: // replyWithError sends StatusOK with JSON body containing an error.\n//\n// Due to Cloud Endpoints limitations, legacy API used StatusOK for some not-OK\n// responses and communicated the actual error through 'status' response field..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected GuiceApplicationBuilder newBuilder( play.api.inject.guice.GuiceApplicationBuilder builder) { return new GuiceApplicationBuilder(builder); } \n### Response:", "ground_truth": "Implementation of Self creation for GuiceBuilder.\n\n@return the application builder", "predict": "// This method returns a new instance of the GuiceApplicationBuilder class.\n// It is used to build the application instance using the provided builder.\n```\n// This method is used to build the application instance using the provided builder.\n```"}, {"ID": 621, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def createIndices(self): \"\"\" Index columns that are queried. The expression index can take a long time. \"\"\" sql = '''CREATE INDEX name_index ON Expression (name)''' self._cursor.execute(sql) self._dbConn.commit() sql = '''CREATE INDEX expression_index ON Expression (expression)''' self._cursor.execute(sql) self._dbConn.commit(). \n### Response: Index columns that are queried. The expression index can\n        take a long time..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public String encode(Cookie cookie) { if (cookie == null) { throw new NullPointerException(\"cookie\"); } StringBuilder buf = new StringBuilder(); encode(buf, cookie); return stripTrailingSeparator(buf); } \n### Response:", "ground_truth": "Encodes the specified cookie into a Cookie header value.\n\n@param cookie specified the cookie\n@return a Rfc6265 style Cookie header value", "predict": "Encodes a cookie. If the cookie is null, a NullPointerException is thrown. Constructs a string from the encoded cookie and returns it. The string is then stripped of trailing separators."}, {"ID": 622, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def promote(target_repo, options = {}) request_body = {}.tap do |body| body[:status] = options[:status] || \"promoted\" body[:comment] = options[:comment] || \"\" body[:ciUser] = options[:user] || Artifactory.username body[:dryRun] = options[:dry_run] || false body[:targetRepo] = target_repo body[:copy] = options[:copy] || false body[:artifacts] = true # always move/copy the build's artifacts body[:dependencies] = options[:dependencies] || false body[:scopes] = options[:scopes] || [] body[:properties] = options[:properties] || {} body[:failFast] = options[:fail_fast] || true end endpoint = \"/api/build/promote/#{url_safe(name)}/#{url_safe(number)}\" client.post(endpoint, JSON.fast_generate(request_body), \"Content-Type\" => \"application/json\" ) end. \n### Response: Move a build's artifacts to a new repository optionally moving or\n copying the build's dependencies to the target repository\n and setting properties on promoted artifacts.\n\n @example promote the build to 'omnibus-stable-local'\n   build.promote('omnibus-stable-local')\n @example promote a build attaching some new properites\n   build.promote('omnibus-stable-local'\n     properties: {\n       'promoted_by' => 'hipchat:schisamo@chef.io'\n     }\n   )\n\n @param [String] target_repo\n   repository to move or copy the build's artifacts and/or dependencies\n @param [Hash] options\n   the list of options to pass\n\n @option options [String] :status (default: 'promoted')\n   new build status (any string)\n @option options [String] :comment (default: '')\n   an optional comment describing the reason for promotion\n @option options [String] :user (default: +Artifactory.username+)\n   the user that invoked promotion\n @option options [Boolean] :dry_run (default: +false+)\n   pretend to do the promotion\n @option options [Boolean] :copy (default: +false+)\n   whether to copy instead of move\n @option options [Boolean] :dependencies (default: +false+)\n   whether to move/copy the build's dependencies\n @option options [Array] :scopes (default: [])\n   an array of dependency scopes to include when \"dependencies\" is true\n @option options [Hash>] :properties (default: [])\n   a list of properties to attach to the build's artifacts\n @option options [Boolean] :fail_fast (default: +true+)\n   fail and abort the operation upon receiving an error\n\n @return [Hash]\n   the parsed JSON response from the server.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public EntityManager em() { Deque<EntityManager> ems = this.emStack(true); if (ems.isEmpty()) { Http.Context.safeCurrent() .map( ctx -> { throw new RuntimeException( \"No EntityManager found in the context. Try to annotate your action method with @play.db.jpa.Transactional\"); }) .orElseGet( () -> { throw new RuntimeException( \"No EntityManager bound to this thread. Try wrapping this call in JPAApi.withTransaction, or ensure that the HTTP context is setup on this thread.\"); }); } return ems.peekFirst(); } \n### Response:", "ground_truth": "Get the default EntityManager for this thread.\n\n@throws RuntimeException if no EntityManager is bound to the current Http.Context or the\ncurrent Thread.\n@return the EntityManager", "predict": "Provides a method to get the current EntityManager from the HTTP context. This method is used to perform JPA operations such as creating, updating, and deleting entities. If no EntityManager is found in the context, a RuntimeException is thrown. If the EntityManager is bound to a thread, the method returns the first EntityManager found in the stack. Otherwise, it throws a RuntimeException.\n\n@return the current EntityManager from the HTTP context.\n\nNote: This method is used in the JPAApi class, which is part of the play framework.\n\n"}, {"ID": 623, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function add(string $string, float $score, bool $increment = false, $payload = null) { $args = [ $this->indexName, $string, $score ]; if ($increment) { $args[] = 'INC'; } if (!is_null($payload)) { $args[] = 'PAYLOAD'; $args[] = $payload; } return $this->redisClient->rawCommand('FT.SUGADD', $args); }. \n### Response: Add a suggestion string to an auto-complete suggestion dictionary.\nThis is disconnected from the index definitions,\nand leaves creating and updating suggestion dictionaries to the user.\n\n@param string $string\n@param float $score\n@param bool $increment\n@param null $payload\n@return int.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @SuppressWarnings(\"unchecked\") public Deque<EntityManager> emStack(boolean threadLocalFallback) { return Http.Context.safeCurrent() .map( context -> { Object emsObject = context.args.get(CURRENT_ENTITY_MANAGER); if (emsObject != null) { return (Deque<EntityManager>) emsObject; } else { Deque<EntityManager> ems = new ArrayDeque<>(); context.args.put(CURRENT_ENTITY_MANAGER, ems); return ems; } }) .orElseGet( () -> { // Not a web request if (threadLocalFallback) { return this.get(); } else { throw new RuntimeException( \"No Http.Context is present. If you want to invoke this method outside of a HTTP request, you need to wrap the call with JPA.withTransaction instead.\"); } }); } \n### Response:", "ground_truth": "Get the EntityManager stack.\n\n@param threadLocalFallback if true, fall back to a ThreadLocal queue of entity managers if no\nHTTP.Context object is found.\n@return the queue of entity managers.", "predict": "This method returns a Deque<EntityManager> object that represents the entity manager for the current entity. It is used to manage the entity manager for the current entity in a non-transactional manner. The method is used to stack the entity manager for the current entity on top of another entity manager if one is available, or to return a null entity manager if no such entity manager is available. The method is marked with @SuppressWarnings(\"unchecked\") to indicate that it may contain unchecked code, but it is intended to be used in a production environment."}, {"ID": 624, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func NewStatus(nodeHeight uint32, conns int64, apiVersion int, dcrdataVersion, netName string) *Status { return &Status{ height: nodeHeight, nodeConnections: conns, api: APIStatus{ APIVersion: apiVersion, DcrdataVersion: dcrdataVersion, NetworkName: netName, }, } }. \n### Response: // NewStatus is the constructor for a new Status..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: void pushOrPopEm(EntityManager em, boolean threadLocalFallback) { Deque<EntityManager> ems = this.emStack(threadLocalFallback); if (em != null) { ems.push(em); } else { if (ems.isEmpty()) { throw new IllegalStateException(\"Tried to remove the EntityManager, but none was set.\"); } ems.pop(); } } \n### Response:", "ground_truth": "Pushes or pops the EntityManager stack depending on the value of the em argument. If em is\nnull, then the current EntityManager is popped. If em is non-null, then em is pushed onto the\nstack and becomes the current EntityManager.\n\n@param em the entity manager to push, if null then will pop one off the stack.\n@param threadLocalFallback if true, fall back to a ThreadLocal queue of entity managers if no\nHTTP.Context object is found.", "predict": "// pushOrPopEm is a method that pushes or pops an EntityManager from the emStack deque.."}, {"ID": 625, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def set_singles_buffer(self, results): \"\"\"Create the singles buffer This creates the singles buffer for each ifo. The dtype is determined by a representative sample of the single triggers in the results. Parameters ---------- restuls: dict of dict Dict indexed by ifo and then trigger column. \"\"\" # Determine the dtype from a sample of the data. self.singles_dtype = [] data = False for ifo in self.ifos: if ifo in results and results[ifo] is not False: data = results[ifo] break if data is False: return for key in data: self.singles_dtype.append((key, data[key].dtype)) if 'stat' not in data: self.singles_dtype.append(('stat', self.stat_calculator.single_dtype)) # Create a ring buffer for each template ifo combination for ifo in self.ifos: self.singles[ifo] = MultiRingBuffer(self.num_templates, self.buffer_size, self.singles_dtype). \n### Response: Create the singles buffer\n\n        This creates the singles buffer for each ifo. The dtype is determined\n        by a representative sample of the single triggers in the results.\n\n        Parameters\n        ----------\n        restuls: dict of dict\n            Dict indexed by ifo and then trigger column..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static <In, FlowIn, Out> Flow<In, Out, ?> bypassWith( Function<In, F.Either<FlowIn, Out>> splitter, Flow<FlowIn, Out, ?> flow) { return bypassWith( Flow.<In>create().map(splitter::apply), play.api.libs.streams.AkkaStreams.onlyFirstCanFinishMerge(2), flow); } \n### Response:", "ground_truth": "Bypass the given flow using the given splitter function.\n\nIf the splitter function returns Left, they will go through the flow. If it returns Right,\nthey will bypass the flow.\n\nUses onlyFirstCanFinishMerge(2) by default.\n\n@param  the In type parameter for Flow\n@param  the FlowIn type parameter for the left branch in Either.\n@param  the Out type parameter for Flow\n@param flow the original flow\n@param splitter the splitter function to use\n@return the flow with a bypass.", "predict": "Method-level comment:\n\nThis method returns a flow that bypassing the specified splitter and flows.\n\nThe splitter is a function that takes an input flow and returns an either flow of the same type as the input flow.\nThe second parameter is a flag that indicates whether the flow should only be merged once or not.\nThe third parameter is a flow that is passed to the splitter.\n\nThe method uses the `Flow.create()` method to create a new flow, and the `map()` method is used to apply the splitter to the input flow.\nThe `onlyFirstCanFinishMerge(2)` is used to specify that only the first two elements of the output flow should be merged.\n\nThe method also uses the `AkkaStreams.onlyFirstCanFinishMerge(2)` method to specify that only the first two elements of the output flow should be merged."}, {"ID": 626, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def register_predictor(cls, name): \"\"\"Register method to keep list of predictors.\"\"\" def decorator(subclass): \"\"\"Register as decorator function.\"\"\" cls._predictors[name.lower()] = subclass subclass.name = name.lower() return subclass return decorator. \n### Response: Register method to keep list of predictors..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static <In, FlowIn, Out> Flow<In, Out, ?> bypassWith( Flow<In, F.Either<FlowIn, Out>, ?> splitter, Graph<UniformFanInShape<Out, Out>, ?> mergeStrategy, Flow<FlowIn, Out, ?> flow) { return splitter.via( Flow.fromGraph( GraphDSL.<FlowShape<F.Either<FlowIn, Out>, Out>>create( builder -> { // Eager cancel must be true so that if the flow cancels, that will be propagated // upstream. // However, that means the bypasser must block cancel, since when this flow // finishes, the merge // will result in a cancel flowing up through the bypasser, which could lead to // dropped messages. // Using scaladsl here because of https://github.com/akka/akka/issues/18384 UniformFanOutShape<F.Either<FlowIn, Out>, F.Either<FlowIn, Out>> broadcast = builder.add(Broadcast.create(2, true)); UniformFanInShape<Out, Out> merge = builder.add(mergeStrategy); Flow<F.Either<FlowIn, Out>, FlowIn, ?> collectIn = Flow.<F.Either<FlowIn, Out>>create() .collect( Scala.partialFunction( x -> { if (x.left.isPresent()) { return x.left.get(); } else { throw Scala.noMatch(); } })); Flow<F.Either<FlowIn, Out>, Out, ?> collectOut = Flow.<F.Either<FlowIn, Out>>create() .collect( Scala.partialFunction( x -> { if (x.right.isPresent()) { return x.right.get(); } else { throw Scala.noMatch(); } })); Flow<F.Either<FlowIn, Out>, F.Either<FlowIn, Out>, ?> blockCancel = play.api.libs.streams.AkkaStreams .<F.Either<FlowIn, Out>>ignoreAfterCancellation() .asJava(); // Normal flow builder .from(broadcast.out(0)) .via(builder.add(collectIn)) .via(builder.add(flow)) .toInlet(merge.in(0)); // Bypass flow, need to ignore downstream finish builder .from(broadcast.out(1)) .via(builder.add(blockCancel)) .via(builder.add(collectOut)) .toInlet(merge.in(1)); return new FlowShape<>(broadcast.in(), merge.out()); }))); } \n### Response:", "ground_truth": "Using the given splitter flow, allow messages to bypass a flow.\n\nIf the splitter flow produces Left, they will be fed into the flow. If it produces Right,\nthey will bypass the flow.\n\n@param  the In type parameter for Flow\n@param  the FlowIn type parameter for the left branch in Either.\n@param  the Out type parameter for Flow.\n@param flow the original flow.\n@param splitter the splitter function.\n@param mergeStrategy the merge strategy (onlyFirstCanFinishMerge, ignoreAfterFinish,\nignoreAfterCancellation)\n@return the flow with a bypass.", "predict": "Method-level comment for bypassWith():\n```\npublic static <In, FlowIn, Out> Flow<In, Out,?> bypassWith(Flow<In, F.Either<FlowIn, Out>,?> splitter, Graph<UniformFanInShape<Out, Out>,?> mergeStrategy, Flow<FlowIn, Out,?> flow) {\n    // Method description: Bypass the given flow using the given splitter and merge strategy.\n    //...\n}\n```\nMethod-level comment for register_predictor(cls, name):\n```\ndef register_predictor(cls, name):\n    \"\"\"Register method to keep list of predictors.\"\"\"\n    def decorator(subclass):\n        \"\"\"Register as decorator function.\"\"\"\n        cls._predictors[name.lower()] = subclass\n        subclass.name = name.lower()\n        return subclass\n    return decorator\n```\nMethod-level comment for bypassWith():\n```\npublic static <In, FlowIn, Out> Flow<In, Out,?> bypassWith(Flow<In, F.Either<FlowIn, Out>,?> splitter, Graph<UniformFanInShape<Out, Out>,?> mergeStrategy, Flow<FlowIn, Out,?> flow) {\n    // Method description: Bypass the given flow using the given splitter and merge strategy.\n    //...\n}\n```"}, {"ID": 627, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (c *RegionCache) UpdateLeader(regionID RegionVerID, leaderStoreID uint64) { c.mu.Lock() defer c.mu.Unlock() r := c.getCachedRegion(regionID) if r == nil { logutil.Logger(context.Background()).Debug(\"regionCache: cannot find region when updating leader\", zap.Uint64(\"regionID\", regionID.GetID()), zap.Uint64(\"leaderStoreID\", leaderStoreID)) return } if !r.SwitchPeer(leaderStoreID) { logutil.Logger(context.Background()).Debug(\"regionCache: cannot find peer when updating leader\", zap.Uint64(\"regionID\", regionID.GetID()), zap.Uint64(\"leaderStoreID\", leaderStoreID)) c.dropRegionFromCache(r.VerID()) } }. \n### Response: // UpdateLeader update some region cache with newer leader info..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static <In, Out> Flow<In, Out, ?> actorRef( Function<ActorRef, Props> props, int bufferSize, OverflowStrategy overflowStrategy, ActorRefFactory factory, Materializer mat) { return play.api.libs.streams.ActorFlow.<In, Out>actorRef( new AbstractFunction1<ActorRef, Props>() { @Override public Props apply(ActorRef v1) { return props.apply(v1); } }, bufferSize, overflowStrategy, factory, mat) .asJava(); } \n### Response:", "ground_truth": "Create a flow that is handled by an actor.\n\nMessages can be sent downstream by sending them to the actor passed into the props function.\nThis actor meets the contract of the actor returned by {@link\nakka.stream.javadsl.Source#actorRef}.\n\nThe props function should return the props for an actor to handle the flow. This actor will\nbe created using the passed in {@link akka.actor.ActorRefFactory}. Each message received will\nbe sent to the actor - there is no back pressure, if the actor is unable to process the\nmessages, they will queue up in the actors mailbox. The upstream can be cancelled by the actor\nterminating itself.\n\n@param  the In type parameter for a Flow\n@param  the Out type parameter for a Flow\n@param props A function that creates the props for actor to handle the flow.\n@param bufferSize The maximum number of elements to buffer.\n@param overflowStrategy The strategy for how to handle a buffer overflow.\n@param factory The Actor Factory used to create the actor to handle the flow - for example, an\nActorSystem.\n@param mat The materializer to materialize the flow.\n@return the flow itself.", "predict": "// actorRef returns an actor flow for the given props and buffer size, with overflow strategy of OverflowStrategy.asJava()"}, {"ID": 628, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static EntityCreateOperation<ContentKeyAuthorizationPolicyOptionInfo> create(String name, int keyDeliveryType, String keyDeliveryConfiguration, List<ContentKeyAuthorizationPolicyRestriction> restrictions) { return new Creator(name, keyDeliveryType, keyDeliveryConfiguration, restrictions); }. \n### Response: Creates an operation to create a new content key authorization options\n\n@param name\nFriendly name of the authorization policy\n@param keyDeliveryType\nDelivery method of the content key to the client\n@param keyDeliveryConfiguration\nXml data, specific to the key delivery type that defines how\nthe key is delivered to the client\n@param restrictions\nRequirements defined in each restriction must be met in order\nto deliver the key using the key delivery data\n@return The operation.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private List<Object> convertErrorArguments(Object[] arguments) { if (arguments == null) { return Collections.emptyList(); } List<Object> converted = Arrays.stream(arguments) .filter( arg -> !(arg instanceof org.springframework.context.support.DefaultMessageSourceResolvable)) .collect(Collectors.toList()); return Collections.unmodifiableList(converted); } \n### Response:", "ground_truth": "Convert the error arguments.\n\n@param arguments The arguments to convert.\n@return The converted arguments.", "predict": "This method converts an array of objects into a list of unmodifiable objects, which can be used as input for a method that expects a list of objects.\n\nThe method filters out any objects that are of type org.springframework.context.support.DefaultMessageSourceResolvable, which is a type that represents Spring message sources such as the error message source. This is necessary because the method is using the @MessageMapping annotation, which requires that the input to the method be a list of objects."}, {"ID": 629, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public boolean isExpected(final HandlingEvent event) { if (getLegs().isEmpty()) { return true; } if (event.getType() == Type.RECEIVE) { // Check that the first leg's origin is the event's location final Leg leg = getLegs().get(0); return (leg.getFrom().equals(event.getLocation())); } if (event.getType() == Type.LOAD) { // Check that the there is one leg with same from location and // carrier movement for (Leg leg : getLegs()) { if (leg.getFrom().equals(event.getLocation()) && leg.getCarrierMovement().equals( event.getCarrierMovement())) return true; } return false; } if (event.getType() == Type.UNLOAD) { // Check that the there is one leg with same to loc and carrier // movement for (Leg leg : getLegs()) { if (leg.getTo().equals(event.getLocation()) && leg.getCarrierMovement().equals( event.getCarrierMovement())) return true; } return false; } if (event.getType() == Type.CLAIM) { // Check that the last leg's destination is from the event's // location final Leg leg = getLegs().get(getLegs().size() - 1); return (leg.getTo().equals(event.getLocation())); } // HandlingEvent.Type.CUSTOMS; return true; }. \n### Response: Test if the given handling event is expected when executing this\nitinerary.\n\n@param event\nEvent to test.\n@return true if the event is expected.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public Form<T> fill(T value) { if (value == null) { throw new RuntimeException(\"Cannot fill a form with a null value\"); } return new Form<>( rootName, backedType, new HashMap<>(), new HashMap<>(), new ArrayList<>(), Optional.ofNullable(value), groups, messagesApi, formatters, validatorFactory, config, lang, directFieldAccess); } \n### Response:", "ground_truth": "Populates this form with an existing value, used for edit forms.\n\n@param value existing value of type T used to fill this form\n@return a copy of this form filled with the new data", "predict": "Fill the form with the given value.\n\n@param value\nValue to fill the form with.\n@return The filled-up form.\n\nNote: This method is used to fill the form with the given value. It checks if the value is null before attempting to fill it, and throws a RuntimeException if it is. This ensures that the form cannot be filled with a null value."}, {"ID": 630, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private JSONValue toJsonStringList(Collection<? extends Object> list) { if (null != list) { JSONArray array = new JSONArray(); for (Object o : list) { array.set(array.size(), new JSONString(o.toString())); } return array; } else { return null; } }. \n### Response: Convert a list of objects to a JSON array with the string representations of that objects.\n@param list the list of objects.\n@return the JSON array with the string representations..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public List<ValidationError> globalErrors() { return Collections.unmodifiableList( errors.stream().filter(error -> error.key().isEmpty()).collect(Collectors.toList())); } \n### Response:", "ground_truth": "Retrieve all global errors - errors without a key.\n\n@return All global errors.", "predict": "Returns a unmodifiable list of all errors.\n\n@return a unmodifiable list of all errors."}, {"ID": 631, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def string_tokenizer(self, untokenized_string: str, include_blanks=False): \"\"\" This function is based off CLTK's line tokenizer. Use this for strings rather than .txt files. input: '20. u2-sza-bi-la-kum\\n1. a-na ia-as2-ma-ah-{d}iszkur#\\n2. qi2-bi2-ma\\n3. um-ma {d}utu-szi-{d}iszkur\\n' output:['20. u2-sza-bi-la-kum', '1. a-na ia-as2-ma-ah-{d}iszkur#', '2. qi2-bi2-ma'] :param untokenized_string: string :param include_blanks: instances of empty lines :return: lines as strings in list \"\"\" line_output = [] assert isinstance(untokenized_string, str), \\ 'Incoming argument must be a string.' if include_blanks: tokenized_lines = untokenized_string.splitlines() else: tokenized_lines = [line for line in untokenized_string.splitlines() if line != r'\\\\n'] for line in tokenized_lines: # Strip out damage characters if not self.damage: # Add 'xn' -- missing sign or number? line = ''.join(c for c in line if c not in \"#[]?!*\") re.match(r'^\\d*\\.|\\d\\'\\.', line) line_output.append(line.rstrip()) return line_output. \n### Response: This function is based off CLTK's line tokenizer. Use this for strings\n        rather than .txt files.\n\n        input: '20. u2-sza-bi-la-kum\\n1. a-na ia-as2-ma-ah-{d}iszkur#\\n2.\n        qi2-bi2-ma\\n3. um-ma {d}utu-szi-{d}iszkur\\n'\n        output:['20. u2-sza-bi-la-kum', '1. a-na ia-as2-ma-ah-{d}iszkur#',\n        '2. qi2-bi2-ma']\n\n        :param untokenized_string: string\n        :param include_blanks: instances of empty lines\n        :return: lines as strings in list.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public JsonNode errorsAsJson(Lang lang) { Map<String, List<String>> allMessages = new HashMap<>(); errors.forEach( error -> { if (error != null) { final List<String> messages = new ArrayList<>(); if (messagesApi != null && lang != null) { final List<String> reversedMessages = new ArrayList<>(error.messages()); Collections.reverse(reversedMessages); messages.add( messagesApi.get( lang, reversedMessages, translateMsgArg(error.arguments(), messagesApi, lang))); } else { messages.add(error.message()); } allMessages.put(error.key(), messages); } }); return play.libs.Json.toJson(allMessages); } \n### Response:", "ground_truth": "Returns the form errors serialized as Json using the given Lang.\n\n@param lang the language to use.\n@return the JSON node containing the errors.", "predict": "This method returns a JSON representation of all errors, based on the specified `Lang` language. It iterates over the `errors` list and creates a map of error messages and their corresponding translations. If an error is found, it reverses the list of messages and adds them to the map. Finally, it returns the JSON representation of the map.\n\nThis method is useful for displaying a list of errors in a specific language to the user, as it allows them to easily search and filter the errors based on the language.\n\n:param lang: the language to display errors in\n:return: a JSON representation of all errors."}, {"ID": 632, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function sendDrones(filter, res) { droneModel.getProcessed(filter, function(err, result) { if (err) return haibu.sendResponse(res, 500, err); haibu.sendResponse(res, 200, {drones: result}); }); }. \n### Response: find drones for given filter and sends response.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public Optional<Object> value(String key) { return super.value().map(v -> v.getData().get(asNormalKey(key))); } \n### Response:", "ground_truth": "Gets the concrete value\n\n@param key the string key.\n@return the value", "predict": "This method returns an optional object containing the value of the specified key. It maps the super.value() method to a new Optional<Object> containing the result of calling the getData() method on the super class's object, and then maps the result to an Optional<Object> containing the value of the specified key."}, {"ID": 633, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def Handle(self, args, token=None): \"\"\"Deletes the notification from the pending notifications.\"\"\" if data_store.RelationalDBEnabled(): self.HandleRelationalDB(args, token=token) else: self.HandleLegacy(args, token=token). \n### Response: Deletes the notification from the pending notifications..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public DynamicForm fill(Map<String, Object> value) { Form<Dynamic> form = super.fill(new Dynamic(value)); return new DynamicForm( form.rawData(), form.files(), form.errors(), form.value(), messagesApi, formatters, validatorFactory, config, lang().orElse(null)); } \n### Response:", "ground_truth": "Fills the form with existing data.\n\n@param value the map of values to fill in the form.\n@return the modified form.", "predict": "This method fills the given Map<String, Object> value with the dynamic form data."}, {"ID": 634, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def translate_labels(val): ''' Can either be a list of label names, or a list of name=value pairs. The API can accept either a list of label names or a dictionary mapping names to values, so the value we translate will be different depending on the input. ''' if not isinstance(val, dict): if not isinstance(val, list): val = split(val) new_val = {} for item in val: if isinstance(item, dict): if len(item) != 1: raise SaltInvocationError('Invalid label(s)') key = next(iter(item)) val = item[key] else: try: key, val = split(item, '=', 1) except ValueError: key = item val = '' if not isinstance(key, six.string_types): key = six.text_type(key) if not isinstance(val, six.string_types): val = six.text_type(val) new_val[key] = val val = new_val return val. \n### Response: Can either be a list of label names, or a list of name=value pairs. The API\n    can accept either a list of label names or a dictionary mapping names to\n    values, so the value we translate will be different depending on the input..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public <T> T parse(String text, Class<T> clazz) { return conversion.convert(text, clazz); } \n### Response:", "ground_truth": "Parses this string as instance of the given class.\n\n@param text the text to parse\n@param clazz class representing the required type\n@param  the type to parse out of the text\n@return the parsed value", "predict": "This method parses a string of text and returns a T object of the specified class. The text is passed in as a String and the class is passed in as a Class<T>. The conversion.convert method is used to convert the text to the specified class."}, {"ID": 635, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: JournalSegment<E> getNextSegment(long index) { Map.Entry<Long, JournalSegment<E>> nextSegment = segments.higherEntry(index); return nextSegment != null ? nextSegment.getValue() : null; }. \n### Response: Returns the segment following the segment with the given ID.\n\n@param index The segment index with which to look up the next segment.\n@return The next segment for the given index..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @SuppressWarnings(\"unchecked\") public <T> T parse(Field field, String text) { return (T) conversion.convert(text, new TypeDescriptor(field)); } \n### Response:", "ground_truth": "Parses this string as instance of a specific field\n\n@param field the related field (custom formatters are extracted from this field annotation)\n@param text the text to parse\n@param  the type to parse out of the text\n@return the parsed value", "predict": "This method parses a string text into a type T using a conversion. It uses a TypeDescriptor<T> to specify the type of T.\n\n@param field The field to which the text is being parsed.\n@return The parsed value of the given field.\n\nNote: This method is marked with the @SuppressWarnings(\"unchecked\") annotation, which suggests that it may be used in a situation where type safety is not required or when the type of the parsed value is not known at compile time. In such cases, it is recommended to use a type cast instead of using this method."}, {"ID": 636, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def _process_locale(self, locale): \"\"\"Return True if this locale should be processed.\"\"\" if locale.lower().startswith('en'): return False return (locale in self.enabled_locales or self.reverse_locale_map.get(locale.lower(), None) in self.enabled_locales or locale in self.lower_locales or self.reverse_locale_map.get(locale.lower(), None) in self.lower_locales ). \n### Response: Return True if this locale should be processed..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public <T> String print(T t) { if (t == null) { return \"\"; } if (conversion.canConvert(t.getClass(), String.class)) { return conversion.convert(t, String.class); } else { return t.toString(); } } \n### Response:", "ground_truth": "Computes the display string for any value.\n\n@param t the value to print\n@param  the type to print\n@return the formatted string", "predict": "This method prints the value of a T object. It first checks if the object is null, and if so, returns an empty string. If the object is not null, it checks if it can be converted to a string using the conversion.canConvert() method. If the object can be converted, it is converted to a string using the conversion.convert() method, and then the returned string is returned. Otherwise, the object'stoString() method is called, which returns its string representation, and the returned string is returned."}, {"ID": 637, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function is($name) { foreach ($this->roles as $role) { if ($role->name == $name || $role->slug == $name || $role->id == $name) { return true; } } return false; }. \n### Response: Determine whether the user has role that given by name parameter.\n\n@param $name\n\n@return bool.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public <T> String print(Field field, T t) { return print(new TypeDescriptor(field), t); } \n### Response:", "ground_truth": "Computes the display string for any value, for a specific field.\n\n@param field the related field - custom formatters are extracted from this field annotation\n@param t the value to print\n@param  the type to print\n@return the formatted string", "predict": "This method prints the contents of a given field and its type description.\n\n@param field\n\n@return String."}, {"ID": 638, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void deleteRepositoryFile(GitlabProject project, String path, String branchName, String commitMsg) throws IOException { Query query = new Query() .append(\"branch\", branchName) .append(\"commit_message\", commitMsg); String tailUrl = GitlabProject.URL + \"/\" + project.getId() + \"/repository/files/\" + sanitizePath(path) + query.toString(); retrieve().method(DELETE).to(tailUrl, Void.class); }. \n### Response: Deletes an existing file in the repository\n\n@param project    The Project\n@param path       The file path inside the repository\n@param branchName The name of a repository branch\n@param commitMsg  The commit message\n@throws IOException on gitlab api call error.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public <T> String print(TypeDescriptor desc, T t) { if (t == null) { return \"\"; } if (desc != null && conversion.canConvert(desc, TypeDescriptor.valueOf(String.class))) { return (String) conversion.convert(t, desc, TypeDescriptor.valueOf(String.class)); } else if (conversion.canConvert(t.getClass(), String.class)) { return conversion.convert(t, String.class); } else { return t.toString(); } } \n### Response:", "ground_truth": "Computes the display string for any value, for a specific type.\n\n@param desc the field descriptor - custom formatters are extracted from this descriptor.\n@param t the value to print\n@param  the type to print\n@return the formatted string", "predict": "Prints the type description of a given object.\n\n@param desc The type description\n@param t The object to print\n@return The string representation of the object\n\nNote: This method is used for debugging purposes and is not intended for production use. It is recommended to use other methods for production purposes such as println() or print()."}, {"ID": 639, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def get_function_help(function: str, bel_spec: BELSpec): \"\"\"Get function_help given function name This will get the function summary template (argument summary in signature) and the argument help listing. \"\"\" function_long = bel_spec[\"functions\"][\"to_long\"].get(function) function_help = [] if function_long: for signature in bel_spec[\"functions\"][\"signatures\"][function_long][\"signatures\"]: function_help.append( { \"function_summary\": signature[\"argument_summary\"], \"argument_help\": signature[\"argument_help_listing\"], \"description\": bel_spec[\"functions\"][\"info\"][function_long][\"description\"], } ) return function_help. \n### Response: Get function_help given function name\n\n    This will get the function summary template (argument summary in signature)\n    and the argument help listing..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private Formatters registerOptional() { conversion.addConverter( new GenericConverter() { public Object convert( Object source, TypeDescriptor sourceType, TypeDescriptor targetType) { if (sourceType.getObjectType().equals(String.class)) { // From String to Optional Object element = conversion.convert(source, sourceType, targetType.elementTypeDescriptor(source)); return Optional.ofNullable(element); } else if (targetType.getObjectType().equals(String.class)) { // From Optional to String if (source == null) return \"\"; Optional<?> opt = (Optional) source; return opt.map( o -> conversion.convert( source, sourceType.getElementTypeDescriptor(), targetType)) .orElse(\"\"); } return null; } public Set<GenericConverter.ConvertiblePair> getConvertibleTypes() { Set<ConvertiblePair> result = new HashSet<>(); result.add(new ConvertiblePair(Optional.class, String.class)); result.add(new ConvertiblePair(String.class, Optional.class)); return result; } }); return this; } \n### Response:", "ground_truth": "Converter for String -> Optional and Optional -> String", "predict": "private Formatters registerOptional()\n\nThis method registers a generic converter for converting from String to Optional and from Optional to String.\n\nIt does this by adding a new GenericConverter instance to the conversion object and returning it. The converter implementation is as follows:\n\n* `public Object convert(Object source, TypeDescriptor sourceType, TypeDescriptor targetType)`\n\t+ If the source type is a String, it converts the source object to an Optional object by calling the `convert` method with the source object, the source type's element type descriptor, and the target type's element type descriptor. If the Optional is null, it returns an empty Optional.\n\t+ If the target type is a String, it converts the Optional object to a String by calling the `convert` method with the source object, the source type's element type descriptor, and the target type's element type descriptor. If the source is null, it returns an empty String.\n* `public Set<ConvertiblePair> getConvertibleTypes()`\n\t+ This method returns a set of ConvertiblePair objects, where each ConvertiblePair represents a pair of types that can be converted from/to each other. The pairs are created by calling the `convert` method with the source type and the target type as arguments. The source type must be a String and the target type must be a String.\n\t+ The set contains the following ConvertiblePair objects:\n\t\t+ `ConvertiblePair(Optional.class, String.class)`\n\t\t+ `ConvertiblePair(String.class, Optional.class)`\n\t+ The returned set is a HashSet, which ensures that the order of the ConvertiblePair objects is not important."}, {"ID": 640, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function(line) { // example: def bar(a, b) do // // (^\\s*) begining of line // (def|defp) $1 public or private def // (.*?) $2 in betweend def ... do // \\s* optional space // do opening keyword (bracket in JS) // \\s*$ end of line var parts = line.match(/^(\\s*)(defp\\s|def\\s)(.*?)\\s*do\\s*$/); if (!parts) return line; // ^( $1 // \\s*[\\w$]+ function name // ) // ( $2 optional params including parens // \\( literal parens // (.*?) $3 just params // \\) literal parens // )? // \\s*$ trailing space var middle = /^(\\s*[\\w$]+)(\\((.*?)\\))?\\s*$/; var leading = parts[1]; var funcName = parts[3].trim().match(middle)[1]; var params = parts[3].trim().match(middle)[3] || ''; var _export = (parts[2].trim() === 'def') ? 'export ' : ''; return leading + _export + 'function ' + funcName + '('+ params +') {'; }. \n### Response: defines public and private module functions returns String a -> String b.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public <T> Formatters register(final Class<T> clazz, final SimpleFormatter<T> formatter) { conversion.addFormatterForFieldType( clazz, new org.springframework.format.Formatter<T>() { public T parse(String text, Locale locale) throws java.text.ParseException { return formatter.parse(text, locale); } public String print(T t, Locale locale) { return formatter.print(t, locale); } public String toString() { return formatter.toString(); } }); return this; } \n### Response:", "ground_truth": "Registers a simple formatter.\n\n@param clazz class handled by this formatter\n@param  the type that this formatter will parse and print\n@param formatter the formatter to register\n@return the modified Formatters object.", "predict": "Registers a SimpleFormatter for a given Class."}, {"ID": 641, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function deleteBulk(array $scheduledTasks) { $this->om->startFlushSuite(); foreach ($scheduledTasks as $scheduledTask) { $this->delete($scheduledTask); } $this->om->endFlushSuite(); }. \n### Response: Deletes a list of ScheduledTasks.\n\n@param ScheduledTask[] $scheduledTasks.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @SuppressWarnings(\"unchecked\") public <A extends Annotation, T> Formatters register( final Class<T> clazz, final AnnotationFormatter<A, T> formatter) { final Class<? extends Annotation> annotationType = (Class<? extends Annotation>) GenericTypeResolver.resolveTypeArguments( formatter.getClass(), AnnotationFormatter.class)[0]; conversion.addConverter( new ConditionalGenericConverter() { public Set<GenericConverter.ConvertiblePair> getConvertibleTypes() { Set<GenericConverter.ConvertiblePair> types = new HashSet<>(); types.add(new GenericConverter.ConvertiblePair(clazz, String.class)); return types; } public boolean matches(TypeDescriptor sourceType, TypeDescriptor targetType) { return (sourceType.getAnnotation(annotationType) != null); } public Object convert( Object source, TypeDescriptor sourceType, TypeDescriptor targetType) { final A a = (A) sourceType.getAnnotation(annotationType); Locale locale = LocaleContextHolder.getLocale(); try { return formatter.print(a, (T) source, locale); } catch (Exception ex) { throw new ConversionFailedException(sourceType, targetType, source, ex); } } public String toString() { return \"@\" + annotationType.getName() + \" \" + clazz.getName() + \" -> \" + String.class.getName() + \": \" + formatter; } }); conversion.addConverter( new ConditionalGenericConverter() { public Set<GenericConverter.ConvertiblePair> getConvertibleTypes() { Set<GenericConverter.ConvertiblePair> types = new HashSet<>(); types.add(new GenericConverter.ConvertiblePair(String.class, clazz)); return types; } public boolean matches(TypeDescriptor sourceType, TypeDescriptor targetType) { return (targetType.getAnnotation(annotationType) != null); } public Object convert( Object source, TypeDescriptor sourceType, TypeDescriptor targetType) { final A a = (A) targetType.getAnnotation(annotationType); Locale locale = LocaleContextHolder.getLocale(); try { return formatter.parse(a, (String) source, locale); } catch (Exception ex) { throw new ConversionFailedException(sourceType, targetType, source, ex); } } public String toString() { return String.class.getName() + \" -> @\" + annotationType.getName() + \" \" + clazz.getName() + \": \" + formatter; } }); return this; } \n### Response:", "ground_truth": "Registers an annotation-based formatter.\n\n@param clazz class handled by this formatter\n@param formatter the formatter to register\n@param  the annotation type\n@param  the type that will be parsed or printed\n@return the modified Formatters object.", "predict": "This method registers an annotation formatter for a specific class and its subclasses. It also adds a conditional generic converter to convert between the annotation and its corresponding string representation. The converter is used to print and parse the formatter. The method returns the registered formatter.\n\n@param clazz The class to register the formatter for.\n\n@return The registered formatter."}, {"ID": 642, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def list(self, toa=None, show_history=False): \"\"\"Return all revisions for this stack :param int toa: The time of action as a UTC timestamp :param bool show_history: Whether to show historical revisions \"\"\" if not toa: toa = time.mktime(datetime.datetime.now().timetuple()) query = { \"$query\": { \"master_id\": self.master_id, \"processed\": show_history, \"toa\" : {\"$lte\" : toa} }, \"$orderby\": { \"toa\": 1 } } revisions = yield self.revisions.find(query) raise Return(revisions). \n### Response: Return all revisions for this stack\n\n        :param int toa: The time of action as a UTC timestamp\n        :param bool show_history: Whether to show historical revisions.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public String encode(Cookie cookie) { if (cookie == null) { throw new NullPointerException(\"cookie\"); } final String name = cookie.name(); final String value = cookie.value() != null ? cookie.value() : \"\"; validateCookie(name, value); StringBuilder buf = new StringBuilder(); if (cookie.wrap()) { addQuoted(buf, name, value); } else { add(buf, name, value); } if (cookie.maxAge() != Integer.MIN_VALUE) { add(buf, CookieHeaderNames.MAX_AGE, cookie.maxAge()); Date expires = cookie.maxAge() <= 0 ? new Date(0) // Set expires to the Unix epoch : new Date(cookie.maxAge() * 1000L + System.currentTimeMillis()); add(buf, CookieHeaderNames.EXPIRES, HttpHeaderDateFormat.get().format(expires)); } if (cookie.sameSite() != null) { add(buf, CookieHeaderNames.SAMESITE, cookie.sameSite()); } if (cookie.path() != null) { add(buf, CookieHeaderNames.PATH, cookie.path()); } if (cookie.domain() != null) { add(buf, CookieHeaderNames.DOMAIN, cookie.domain()); } if (cookie.isSecure()) { add(buf, CookieHeaderNames.SECURE); } if (cookie.isHttpOnly()) { add(buf, CookieHeaderNames.HTTPONLY); } return stripTrailingSeparator(buf); } \n### Response:", "ground_truth": "Encodes the specified cookie into a Set-Cookie header value.\n\n@param cookie the cookie\n@return a single Set-Cookie header value", "predict": "Encodes a Cookie using the specified name, value, validate() method to ensure it's a valid cookie, and adds various header information such as MAX\\_AGE, EXPIRES, SameSite, PATH, DOMAIN, Secure, and HttpOnly. Returns the encoded cookie string."}, {"ID": 643, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Nullable @ObjectiveCName(\"editMyAboutCommandWithNick:\") public Command<Boolean> editMyAbout(final String newAbout) { return callback -> modules.getUsersModule().editAbout(newAbout) .then(v -> callback.onResult(true)) .failure(e -> callback.onError(e)); }. \n### Response: Edit current user's about\n\n@param newAbout new user's about\n@return Command for execution.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static NodeList selectNodes(String path, Object node) { return selectNodes(path, node, null); } \n### Response:", "ground_truth": "Select all nodes that are selected by this XPath expression. If multiple nodes match, multiple\nnodes will be returned. Nodes will be returned in document-order,\n\n@param path the xpath expression\n@param node the starting node\n@return result of evaluating the xpath expression against node", "predict": "Select all nodes in the given path.\n\n@param path the path of the nodes to be selected\n@return a NodeList of the selected nodes.\n\n"}, {"ID": 644, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function delete($project, $params = array(), $options = array()) { $path = sprintf(\"/projects/%s\", $project); return $this->client->delete($path, $params, $options); }. \n### Response: A specific, existing project can be deleted by making a DELETE request\non the URL for that project.\n\nReturns an empty data record.\n\n@param  project The project to delete.\n@return response.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static <T> scala.collection.immutable.Seq<T> toSeq(java.util.List<T> list) { return scala.collection.JavaConverters.asScalaBufferConverter(list).asScala().toList(); } \n### Response:", "ground_truth": "Converts a Java List to Scala Seq.\n\n@param list    the java list.\n@return the converted Seq.\n@param  the element type.", "predict": "This method converts a Java `List<T>` to a Scala `Seq<T>`.\n\n@param  list The list to convert.\n@return the converted Scala list.\n\n"}, {"ID": 645, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function stringReduce (string, reducerCallback, initialValue) { if (string.length === 0) { assertErr(initialValue, TypeError, 'Reduce of empty string with no initial value') return initialValue } var initialValuePassed = arguments.length === 3 var result var startIndex if (initialValuePassed) { // initial value, initialize reduce state result = initialValue startIndex = 0 } else { // no initial value if (string.length === 1) { return string.charAt(0) } // no initial value, initialize reduce state result = string.charAt(0) startIndex = 1 } for (var i = startIndex; i < string.length; i++) { result = reducerCallback(result, string.charAt(i), i, string) } return result }. \n### Response: reduce a string to a value\n@param  {string}   string          string to reduce\n@param  {function} reducerCb    reducer function\n@param  {*}        initialValue reduce initial value\n@return {*} result.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static <T> scala.collection.immutable.Seq<T> toSeq(T[] array) { return toSeq(java.util.Arrays.asList(array)); } \n### Response:", "ground_truth": "Converts a Java Array to Scala Seq.\n\n@param array    the java array.\n@return the converted Seq.\n@param  the element type.", "predict": "To convert an array to a Scala `Seq`\n@param  {T[]}   array          array to convert\n@return {Scala.collection.immutable.Seq<T>} Scala `Seq` of the array."}, {"ID": 646, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def inurl(needles, haystack, position='any'): \"\"\"convenience function to make string.find return bool\"\"\" count = 0 # lowercase everything to do case-insensitive search haystack2 = haystack.lower() for needle in needles: needle2 = needle.lower() if position == 'any': if haystack2.find(needle2) > -1: count += 1 elif position == 'end': if haystack2.endswith(needle2): count += 1 elif position == 'begin': if haystack2.startswith(needle2): count += 1 # assessment if count > 0: return True return False. \n### Response: convenience function to make string.find return bool.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @SafeVarargs public static <T> scala.collection.immutable.Seq<T> varargs(T... array) { return toSeq(array); } \n### Response:", "ground_truth": "Converts a Java varargs to Scala varargs.\n\n@param array    the java array.\n@return the Scala varargs\n@param  the element type.", "predict": "Method-level comment for `varargs` method:\n```\n@SafeVarargs\npublic static <T> scala.collection.immutable.Seq<T> varargs(T... array) {\n    return toSeq(array);\n}\n```\nThis method is marked with the `@SafeVarargs` annotation, which ensures that it can handle arrays with potentially large sizes without causing a runtime exception. The method returns a `Seq` object, which is a collection class in Scala that can hold a sequence of values. The `toSeq` method is used to convert the input array to a `Seq` object."}, {"ID": 647, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function setTransactionReference($value) { $reference = json_decode($value, true); if (json_last_error() === 0) { if (isset($reference['VendorTxCode'])) { $this->setRelatedTransactionId($reference['VendorTxCode']); } if (isset($reference['VPSTxId'])) { $this->setVpsTxId($reference['VPSTxId']); } if (isset($reference['SecurityKey'])) { $this->setSecurityKey($reference['SecurityKey']); } if (isset($reference['TxAuthNo'])) { $this->setTxAuthNo($reference['TxAuthNo']); } } return parent::setTransactionReference($value); }. \n### Response: A JSON transactionReference passed in is split into its\ncomponent parts.\n\n@param string $value original transactionReference in JSON format..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static <In, Out> MappedWebSocketAcceptor<In, Out> json(Class<In> in) { return new MappedWebSocketAcceptor<>( Scala.partialFunction( message -> { try { if (message instanceof Message.Binary) { return F.Either.Left( play.libs.Json.mapper() .readValue( ((Message.Binary) message).data().iterator().asInputStream(), in)); } else if (message instanceof Message.Text) { return F.Either.Left( play.libs.Json.mapper().readValue(((Message.Text) message).data(), in)); } } catch (Exception e) { return F.Either.Right(new Message.Close(CloseCodes.Unacceptable(), e.getMessage())); } throw Scala.noMatch(); }), outMessage -> { try { return new Message.Text(play.libs.Json.mapper().writeValueAsString(outMessage)); } catch (Exception e) { throw new RuntimeException(e); } }); } \n### Response:", "ground_truth": "Acceptor for JSON WebSockets.\n\n@param in The class of the incoming messages, used to decode them from the JSON.\n@param  The websocket's input type (what it receives from clients)\n@param  The websocket's output type (what it writes to clients)\n@return The WebSocket acceptor.", "predict": "This method returns a MappedWebSocketAcceptor that can handle incoming messages.\n\n@param Scala.Function<In, Out> $jsonFunction the Scala function that takes an In message and returns a MappedWebSocketAcceptor<In, Out>.\n\nThis method creates a MappedWebSocketAcceptor using the Scala.partialFunction method, which allows it to handle both binary and text messages. It also uses the play.libs.Json.mapper() method to read the value of the message and the in parameter to specify the input class. Finally, it writes the response message to a String using the play.libs.Json.mapper().writeValueAsString() method.\n\nNote that this method is written in Scala and uses the play.libs.Json library, so it may not be compatible with Java-based applications."}, {"ID": 648, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def _ParseSourcePathOption(self, options): \"\"\"Parses the source path option. Args: options (argparse.Namespace): command line arguments. Raises: BadConfigOption: if the options are invalid. \"\"\" self._source_path = self.ParseStringOption(options, self._SOURCE_OPTION) if not self._source_path: raise errors.BadConfigOption('Missing source path.') self._source_path = os.path.abspath(self._source_path). \n### Response: Parses the source path option.\n\n    Args:\n      options (argparse.Namespace): command line arguments.\n\n    Raises:\n      BadConfigOption: if the options are invalid..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private static <In, Out> WebSocket acceptOrResult( PartialFunction<Message, F.Either<In, Message>> inMapper, Function<Http.RequestHeader, CompletionStage<F.Either<Result, Flow<In, Out, ?>>>> f, Function<Out, Message> outMapper) { return new WebSocket() { @Override public CompletionStage<F.Either<Result, Flow<Message, Message, ?>>> apply( Http.RequestHeader request) { return f.apply(request) .thenApply( resultOrFlow -> { if (resultOrFlow.left.isPresent()) { return F.Either.Left(resultOrFlow.left.get()); } else { Flow<Message, Message, ?> flow = AkkaStreams.bypassWith( Flow.<Message>create().collect(inMapper), play.api.libs.streams.AkkaStreams.onlyFirstCanFinishMerge(2), resultOrFlow.right.get().map(outMapper::apply)); return F.Either.Right(flow); } }); } }; } \n### Response:", "ground_truth": "Helper to create handlers for WebSockets.\n\n@param inMapper Function to map input messages. If it produces left, the message will be passed\nto the WebSocket flow, if it produces right, the message will be sent back out to the\nclient - this can be used to send errors directly to the client.\n@param f The function to handle the WebSocket.\n@param outMapper Function to map output messages.\n@return The WebSocket handler.", "predict": "private static <In, Out> WebSocket acceptOrResult( PartialFunction<Message, F.Either<In, Message>> inMapper, Function<Http.RequestHeader, CompletionStage<F.Either<Result, Flow<Message, Message,?>>> f, Function<Out, Message> outMapper) {\n```\n    // Parses the source path option.\n    // Args:\n    //   options (argparse.Namespace): command line arguments.\n    // Raises:\n    //   BadConfigOption: if the options are invalid..\n```\n}\n```\nprivate static <In, Out> WebSocket acceptOrResult( PartialFunction<Message, F.Either<In, Message>> inMapper, Function<Http.RequestHeader, CompletionStage<F.Either<Result, Flow<Message, Message,?>>> f, Function<Out, Message> outMapper) {\n```\n    // Accepts a WebSocket connection and returns a result or throws an exception if the connection is invalid.\n    // This method takes a PartialFunction<Message, F.Either<In, Message>>, a Function<Http.RequestHeader, CompletionStage<F.Either<Result, Flow<Message, Message,?>>>>, and a Function<Out, Message>.\n```"}, {"ID": 649, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func WriteUInt32(w io.Writer, v uint) error { a := byte(v >> 24) b := byte(v >> 16) c := byte(v >> 8) d := byte(v) _, err := w.Write([]byte{a, b, c, d}) if err != nil { return err } return nil }. \n### Response: //WriteUInt32  writes a 32-bit unsigned integer value to w io.Writer.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: static boolean setAccessibleWorkaround(final AccessibleObject o) { if (o == null || o.isAccessible()) { return false; } final Member m = (Member) o; if (!o.isAccessible() && Modifier.isPublic(m.getModifiers()) && isPackageAccess(m.getDeclaringClass().getModifiers())) { try { o.setAccessible(true); return true; } catch (final SecurityException e) { // NOPMD // ignore in favor of subsequent IllegalAccessException } } return false; } \n### Response:", "ground_truth": "XXX Default access superclass workaround.\n\nWhen a {@code public} class has a default access superclass with {@code public} members,\nthese members are accessible. Calling them from compiled code works fine. Unfortunately, on\nsome JVMs, using reflection to invoke these members seems to (wrongly) prevent access even when\nthe modifier is {@code public}. Calling {@code setAccessible(true)} solves the problem but will\nonly work from sufficiently privileged code. Better workarounds would be gratefully accepted.\n\n@param o the AccessibleObject to set as accessible\n@return a boolean indicating whether the accessibility of the object was set to true.", "predict": "//SetAccessibleWorkaround sets the accessibility of a AccessibleObject. If the object is null or its isAccessible() method returns false, then it will return false. If the object is a Member and its getModifiers() method returns a non-public modifier and its getDeclaringClass().getModifiers() method returns a package access modifier, then the try-catch block will throw a IllegalAccessException, which will be ignored in favor of a subsequent AccessibleObject.setAccessible() call."}, {"ID": 650, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def release_pool(self): \"\"\"Release pool and all its connection\"\"\" if self._current_acquired > 0: raise PoolException(\"Can't release pool: %d connection(s) still acquired\" % self._current_acquired) while not self._pool.empty(): conn = self.acquire() conn.close() if self._cleanup_thread is not None: self._thread_event.set() self._cleanup_thread.join() self._pool = None. \n### Response: Release pool and all its connection.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private static float getPrimitivePromotionCost( final Class<?> srcClass, final Class<?> destClass) { float cost = 0.0f; Class<?> cls = srcClass; if (!cls.isPrimitive()) { // slight unwrapping penalty cost += 0.1f; cls = ClassUtils.wrapperToPrimitive(cls); } for (int i = 0; cls != destClass && i < ORDERED_PRIMITIVE_TYPES.length; i++) { if (cls == ORDERED_PRIMITIVE_TYPES[i]) { cost += 0.1f; if (i < ORDERED_PRIMITIVE_TYPES.length - 1) { cls = ORDERED_PRIMITIVE_TYPES[i + 1]; } } } return cost; } \n### Response:", "ground_truth": "Gets the number of steps required to promote a primitive number to another type.\n\n@param srcClass the (primitive) source class\n@param destClass the (primitive) destination class\n@return The cost of promoting the primitive", "predict": "private static float getPrimitivePromotionCost( final Class<?> srcClass, final Class<?> destClass) {"}, {"ID": 651, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def get_feature_penalty(self): \"\"\"Get the feature penalty of the Dataset. Returns ------- feature_penalty : numpy array or None Feature penalty for each feature in the Dataset. \"\"\" if self.feature_penalty is None: self.feature_penalty = self.get_field('feature_penalty') return self.feature_penalty. \n### Response: Get the feature penalty of the Dataset.\n\n        Returns\n        -------\n        feature_penalty : numpy array or None\n            Feature penalty for each feature in the Dataset..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private static float getTotalTransformationCost( final Class<?>[] srcArgs, final Executable executable) { final Class<?>[] destArgs = executable.getParameterTypes(); final boolean isVarArgs = executable.isVarArgs(); // \"source\" and \"destination\" are the actual and declared args respectively. float totalCost = 0.0f; final long normalArgsLen = isVarArgs ? destArgs.length - 1 : destArgs.length; if (srcArgs.length < normalArgsLen) { return Float.MAX_VALUE; } for (int i = 0; i < normalArgsLen; i++) { totalCost += getObjectTransformationCost(srcArgs[i], destArgs[i]); } if (isVarArgs) { // When isVarArgs is true, srcArgs and dstArgs may differ in length. // There are two special cases to consider: final boolean noVarArgsPassed = srcArgs.length < destArgs.length; final boolean explicitArrayForVarags = srcArgs.length == destArgs.length && srcArgs[srcArgs.length - 1].isArray(); final float varArgsCost = 0.001f; final Class<?> destClass = destArgs[destArgs.length - 1].getComponentType(); if (noVarArgsPassed) { // When no varargs passed, the best match is the most generic matching type, not the most // specific. totalCost += getObjectTransformationCost(destClass, Object.class) + varArgsCost; } else if (explicitArrayForVarags) { final Class<?> sourceClass = srcArgs[srcArgs.length - 1].getComponentType(); totalCost += getObjectTransformationCost(sourceClass, destClass) + varArgsCost; } else { // This is typical varargs case. for (int i = destArgs.length - 1; i < srcArgs.length; i++) { final Class<?> srcClass = srcArgs[i]; totalCost += getObjectTransformationCost(srcClass, destClass) + varArgsCost; } } } return totalCost; } \n### Response:", "ground_truth": "Returns the sum of the object transformation cost for each class in the source argument list.\n\n@param srcArgs The source arguments\n@param executable The executable to calculate transformation costs for\n@return The total transformation cost", "predict": "private static float getTotalTransformationCost(final Class<?>[] srcArgs, final Executable executable) {\n\t// \"source\" and \"destination\" are the actual and declared args respectively.\n\t// \"source\" and \"destination\" are the actual and declared args respectively.\n\t// When isVarArgs is true, srcArgs and dstArgs may differ in length.\n\t// There are two special cases to consider:\n\t// final boolean noVarArgsPassed = srcArgs.length < destArgs.length;\n\t// final boolean explicitArrayForVarags = srcArgs.length == destArgs.length && srcArgs[srcArgs.length - 1].isArray();\n\t// final float varArgsCost = 0.001f;\n\t// final Class<?> destClass = destArgs[destArgs.length - 1].getComponentType();\n\t// if (noVarArgsPassed) {\n\t//   // When no varargs passed, the best match is the most generic matching type, not the most specific.\n\t//   totalCost += getObjectTransformationCost(destClass, Object.class) + varArgsCost;\n\t// } else if (explicitArrayForVarags) {\n\t//   // When no varargs passed, the best match is the most generic matching type, not the most specific.\n\t//   totalCost += getObjectTransformationCost(sourceClass, destClass) + varArgsCost;\n\t// } else {\n\t//   // This is typical varargs case.\n\t//   for (int i = destArgs.length - 1; i < srcArgs.length; i++) {\n\t//     final Class<?> srcClass = srcArgs[i];\n\t//   }\n\t// }\n\t// return totalCost;\n\t// }\n\t// float totalCost = 0.0f;\n\t// final long normalArgsLen = isVarArgs? destArgs.length - 1 : destArgs.length;\n\t// if (srcArgs.length < normalArgsLen) { return Float.MAX_VALUE; }\n\t// for (int i = 0; i < normalArgsLen; i++) { totalCost += getObjectTransformationCost(srcArgs[i], destArgs[i]); }\n\t// if (isVarArgs) {\n\t//   // When isVarArgs is true, srcArgs and dstArgs may differ in length.\n\t//   // There are two special cases to consider:\n\t//   final boolean noVarArgsPassed = srcArgs.length < destArgs.length;\n\t//   final boolean explicitArrayForVarags = srcArgs.length == destArgs.length && srcArgs[srcArgs.length - 1].isArray();\n\t//   final float varArgsCost = 0.001f;\n\t//   final Class<?> destClass = destArgs[destArgs.length - 1].getComponentType();\n\t//   if (noVarArgsPassed) {\n\t//     // When no varargs passed, the best match is the most generic matching type, not the most specific.\n\t//     totalCost += getObjectTransformationCost(destClass, Object.class) + varArgsCost;\n\t//   } else if (explicitArrayForVarags) {\n\t//     // When no varargs passed, the best match is the most generic matching type, not the most specific.\n\t//     totalCost += getObjectTransformationCost(sourceClass, destClass) + varArgsCost;\n\t//   } else {\n\t//     // This is typical varargs case.\n\t//     for (int i = destArgs.length - 1; i < srcArgs.length; i++) {\n\t//       final Class<?> srcClass = srcArgs[i];\n\t//     }\n\t//   }\n\t// }\n\t// return totalCost;"}, {"ID": 652, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def process_bounce(message, notification): \"\"\"Function to process a bounce notification\"\"\" mail = message['mail'] bounce = message['bounce'] bounces = [] for recipient in bounce['bouncedRecipients']: # Create each bounce record. Add to a list for reference later. bounces += [Bounce.objects.create( sns_topic=notification['TopicArn'], sns_messageid=notification['MessageId'], mail_timestamp=clean_time(mail['timestamp']), mail_id=mail['messageId'], mail_from=mail['source'], address=recipient['emailAddress'], feedback_id=bounce['feedbackId'], feedback_timestamp=clean_time(bounce['timestamp']), hard=bool(bounce['bounceType'] == 'Permanent'), bounce_type=bounce['bounceType'], bounce_subtype=bounce['bounceSubType'], reporting_mta=bounce.get('reportingMTA'), action=recipient.get('action'), status=recipient.get('status'), diagnostic_code=recipient.get('diagnosticCode') )] # Send signals for each bounce. for bounce in bounces: signals.feedback.send( sender=Bounce, instance=bounce, message=message, notification=notification ) logger.info('Logged %s Bounce(s)', str(len(bounces))) return HttpResponse('Bounce Processed'). \n### Response: Function to process a bounce notification.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private static float getObjectTransformationCost(Class<?> srcClass, final Class<?> destClass) { if (destClass.isPrimitive()) { return getPrimitivePromotionCost(srcClass, destClass); } float cost = 0.0f; while (srcClass != null && !destClass.equals(srcClass)) { if (destClass.isInterface() && ClassUtils.isAssignable(srcClass, destClass)) { // slight penalty for interface match. // we still want an exact match to override an interface match, // but // an interface match should override anything where we have to // get a superclass. cost += 0.25f; break; } cost++; srcClass = srcClass.getSuperclass(); } /* * If the destination class is null, we've traveled all the way up to * an Object match. We'll penalize this by adding 1.5 to the cost. */ if (srcClass == null) { cost += 1.5f; } return cost; } \n### Response:", "ground_truth": "Gets the number of steps required needed to turn the source class into the destination class.\nThis represents the number of steps in the object hierarchy graph.\n\n@param srcClass The source class\n@param destClass The destination class\n@return The cost of transforming an object", "predict": "Method-level comment for getObjectTransformationCost():\n```\nprivate static float getObjectTransformationCost(Class<?> srcClass, final Class<?> destClass)\n```\n* Description: Calculate the cost of transforming an object from one class to another.\n* Args:\n\t+ srcClass (Class<?>): The source class to transform.\n\t+ destClass (Class<?>): The destination class to transform.\n* Return: The cost of the transformation."}, {"ID": 653, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def class_type_changed(self): \"\"\" Forces a reset if the class type is changed from instruments to scripts or vice versa \"\"\" if self.source_path.text(): self.reset_avaliable(self.source_path.text()). \n### Response: Forces a reset if the class type is changed from instruments to scripts or vice versa.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public String at(String key, Object... args) { return messagesApi.get(lang, key, args); } \n### Response:", "ground_truth": "Get the message at the given key.\n\nUses `java.text.MessageFormat` internally to format the message.\n\n@param key the message key\n@param args the message arguments\n@return the formatted message or a default rendering if the key wasn't defined", "predict": "Returns the message associated with the specified key and arguments."}, {"ID": 654, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def clean_form_template(self): \"\"\" Check if template exists \"\"\" form_template = self.cleaned_data.get('form_template', '') if form_template: try: get_template(form_template) except TemplateDoesNotExist: msg = _('Selected Form Template does not exist.') raise forms.ValidationError(msg) return form_template. \n### Response: Check if template exists.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public String at(List<String> keys, Object... args) { return messagesApi.get(lang, keys, args); } \n### Response:", "ground_truth": "Get the message at the first defined key.\n\nUses `java.text.MessageFormat` internally to format the message.\n\n@param keys the messages keys\n@param args the message arguments\n@return the formatted message or a default rendering if the key wasn't defined", "predict": "Method-level comment for `at` method:\n```\n\"\"\"\nReturns the message from the specified keys and arguments.\n\"\"\"\n```"}, {"ID": 655, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def describe(self): \"\"\"Describe this _LocalTransformJob The response is a JSON-like dictionary that follows the response of the boto describe_transform_job() API. Returns: dict: description of this _LocalTransformJob \"\"\" response = { 'TransformJobStatus': self.state, 'ModelName': self.model_name, 'TransformJobName': self.name, 'TransformJobArn': _UNUSED_ARN, 'TransformEndTime': self.end_time, 'CreationTime': self.start_time, 'TransformStartTime': self.start_time, 'Environment': {}, 'BatchStrategy': self.batch_strategy, } if self.transform_resources: response['TransformResources'] = self.transform_resources if self.output_data: response['TransformOutput'] = self.output_data if self.input_data: response['TransformInput'] = self.input_data return response. \n### Response: Describe this _LocalTransformJob\n\n        The response is a JSON-like dictionary that follows the response of the\n        boto describe_transform_job() API.\n\n        Returns:\n            dict: description of this _LocalTransformJob.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static Database createFrom( String driver, String url, Map<String, ? extends Object> config) { return createFrom(\"default\", driver, url, config); } \n### Response:", "ground_truth": "Create a pooled database named \"default\" with the given configuration.\n\n@param driver the database driver class\n@param url the database url\n@param config a map of extra database configuration\n@return a configured database", "predict": "This method returns the `Database` object with the specified parameters.\n\n"}, {"ID": 656, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def constrained_to(self, initial_sequence: torch.Tensor, keep_beam_details: bool = True) -> 'BeamSearch': \"\"\" Return a new BeamSearch instance that's like this one but with the specified constraint. \"\"\" return BeamSearch(self._beam_size, self._per_node_beam_size, initial_sequence, keep_beam_details). \n### Response: Return a new BeamSearch instance that's like this one but with the specified constraint..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static ParallelSorter create(Object[] arrays) { Generator gen = new Generator(); gen.setArrays(arrays); return gen.create(); } \n### Response:", "ground_truth": "Create a new ParallelSorter object for a set of arrays. You may\nsort the arrays multiple times via the same ParallelSorter object.\n@param arrays An array of arrays to sort. The arrays may be a mix\nof primitive and non-primitive types, but should all be the same\nlength.\n@param loader ClassLoader for generated class, uses \"current\" if null", "predict": "This method creates a new ParallelSorter instance and sets its arrays to the given Object[] arrays. It then returns the new ParallelSorter instance."}, {"ID": 657, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void setDisplayerSetting( DisplayerAttributeDef displayerAttributeDef, String value ) { settings.put(getSettingPath(displayerAttributeDef), value); }. \n### Response: 'Generic' setter method.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void quickSort(int index, int lo, int hi, Comparator cmp) { chooseComparer(index, cmp); super.quickSort(lo, hi - 1); } \n### Response:", "ground_truth": "Sort the arrays using the quicksort algorithm.\n@param index array (column) to sort by\n@param lo starting array index (row), inclusive\n@param hi ending array index (row), exclusive\n@param cmp Comparator to use if the specified column is non-primitive", "predict": "'QuickSort implementation using the super class'."}, {"ID": 658, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function encode($value) { $encryptedValue = $this->getEncryptor()->encrypt($value); $encodedValue = base64_encode($encryptedValue); return $encodedValue; }. \n### Response: Encrypt and encode a value.\n\n@param string $value\n@return string.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void mergeSort(int index, int lo, int hi, Comparator cmp) { chooseComparer(index, cmp); super.mergeSort(lo, hi - 1); } \n### Response:", "ground_truth": "Sort the arrays using an in-place merge sort.\n@param index array (column) to sort by\n@param lo starting array index (row), inclusive\n@param hi ending array index (row), exclusive\n@param cmp Comparator to use if the specified column is non-primitive", "predict": "Merge sort implementation.\n\n@param int $index The index of the element to sort.\n@param int $lo The low index of the sorted array.\n@param int $hi The high index of the sorted array.\n@param Comparator $cmp The comparer object used for sorting.\n@Override\npublic void mergeSort(int $index, int $lo, int $hi, Comparator $cmp) {\n$chooseComparer($index, $cmp);\nsuper.mergeSort($lo, $hi - 1);\n}."}, {"ID": 659, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public Privilege createPrivilege(String name, String version, List<?> statements) throws OAuthSystemException, OAuthProblemException, URISyntaxException { cleanError(); prepareToken(); OneloginURLConnectionClient httpClient = new OneloginURLConnectionClient(); OAuthClient oAuthClient = new OAuthClient(httpClient); URIBuilder url = new URIBuilder(settings.getURL(Constants.CREATE_PRIVILEGE_URL)); OAuthClientRequest bearerRequest = new OAuthBearerClientRequest(url.toString()) .buildHeaderMessage(); Map<String, String> headers = getAuthorizedHeader(); bearerRequest.setHeaders(headers); List<HashMap<String, Object>> statementData = new ArrayList<HashMap<String, Object>>(); if (!statements.isEmpty()) { if (statements.get(0) instanceof Statement) { List<Statement> data = (List<Statement>) statements; HashMap<String, Object> dataObj; for (Statement statement: data) { dataObj = new HashMap<String, Object>(); dataObj.put(\"Effect\", statement.effect); dataObj.put(\"Action\", statement.actions); dataObj.put(\"Scope\", statement.scopes); statementData.add(dataObj); } } else if (statements.get(0) instanceof HashMap) { List<HashMap<String, Object>> data = (List<HashMap<String, Object>>) statements; for (HashMap<String, Object> statement: data) { statementData.add(statement); } } } Map<String, Object> privilegeData = new HashMap<String, Object>(); privilegeData.put(\"Version\", version); privilegeData.put(\"Statement\", statementData); Map<String, Object> params = new HashMap<String, Object>(); params.put(\"name\", name); params.put(\"privilege\", privilegeData); String body = JSONUtils.buildJSON(params); bearerRequest.setBody(body); Privilege privilege = null; OneloginOAuth2JSONResourceResponse oAuth2Response = oAuthClient.resource(bearerRequest, OAuth.HttpMethod.POST, OneloginOAuth2JSONResourceResponse.class); if (oAuth2Response.getResponseCode() == 201) { String id = (String) oAuth2Response.getFromContent(\"id\"); if (id != null && !id.isEmpty()) { privilege = new Privilege(id, name, version, statements); } } else { error = oAuth2Response.getError(); errorDescription = oAuth2Response.getErrorDescription(); } return privilege; }. \n### Response: Creates a Privilege\n\n@param name\nThe name of this privilege.\n@param version\nThe version for the privilege schema. Set to 2018-05-18.\n@param statements\nA list of Statement objects or HashMap\n\n@return Created Privilege\n\n@throws OAuthSystemException - if there is a IOException reading parameters of the httpURLConnection\n@throws OAuthProblemException - if there are errors validating the OneloginOAuthJSONResourceResponse and throwOAuthProblemException is enabled\n@throws URISyntaxException - if there is an error when generating the target URL at the URIBuilder constructor\n\n@see Create Privilege documentation.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public Object invoke(Object obj, Object[] args) throws Throwable { try { init(); FastClassInfo fci = fastClassInfo; return fci.f1.invoke(fci.i1, obj, args); } catch (InvocationTargetException e) { throw e.getTargetException(); } catch (IllegalArgumentException e) { if (fastClassInfo.i1 < 0) throw new IllegalArgumentException(\"Protected method: \" + sig1); throw e; } } \n### Response:", "ground_truth": "Invoke the original method, on a different object of the same type.\n@param obj the compatible object; recursion will result if you use the object passed as the first\nargument to the MethodInterceptor (usually not what you want)\n@param args the arguments passed to the intercepted method; you may substitute a different\nargument array as long as the types are compatible\n@see MethodInterceptor#intercept\n@throws Throwable the bare exceptions thrown by the called method are passed through\nwithout wrapping in an InvocationTargetException", "predict": "Invokes a protected method in the specified class.\n\n@param obj\nThe object to invoke the method on.\n@param args\nThe arguments to pass to the method.\n\n@return The result of the method invocation.\n\n@throws Throwable - any thrown exception will be caught and logged.\n\n@see Invoke method documentation."}, {"ID": 660, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func NewUnionTypeDef(init ...*UnionTypeDef) *UnionTypeDef { var o *UnionTypeDef if len(init) == 1 { o = init[0] } else { o = new(UnionTypeDef) } return o.Init() }. \n### Response: //\n// NewUnionTypeDef - creates an initialized UnionTypeDef instance, returns a pointer to it\n//.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void cast_numeric(Type from, Type to) { if (from != to) { if (from == Type.DOUBLE_TYPE) { if (to == Type.FLOAT_TYPE) { mv.visitInsn(Constants.D2F); } else if (to == Type.LONG_TYPE) { mv.visitInsn(Constants.D2L); } else { mv.visitInsn(Constants.D2I); cast_numeric(Type.INT_TYPE, to); } } else if (from == Type.FLOAT_TYPE) { if (to == Type.DOUBLE_TYPE) { mv.visitInsn(Constants.F2D); } else if (to == Type.LONG_TYPE) { mv.visitInsn(Constants.F2L); } else { mv.visitInsn(Constants.F2I); cast_numeric(Type.INT_TYPE, to); } } else if (from == Type.LONG_TYPE) { if (to == Type.DOUBLE_TYPE) { mv.visitInsn(Constants.L2D); } else if (to == Type.FLOAT_TYPE) { mv.visitInsn(Constants.L2F); } else { mv.visitInsn(Constants.L2I); cast_numeric(Type.INT_TYPE, to); } } else { if (to == Type.BYTE_TYPE) { mv.visitInsn(Constants.I2B); } else if (to == Type.CHAR_TYPE) { mv.visitInsn(Constants.I2C); } else if (to == Type.DOUBLE_TYPE) { mv.visitInsn(Constants.I2D); } else if (to == Type.FLOAT_TYPE) { mv.visitInsn(Constants.I2F); } else if (to == Type.LONG_TYPE) { mv.visitInsn(Constants.I2L); } else if (to == Type.SHORT_TYPE) { mv.visitInsn(Constants.I2S); } } } } \n### Response:", "ground_truth": "Casts from one primitive numeric type to another", "predict": "// cast_numeric - performs a numeric cast between two types\n//."}, {"ID": 661, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func tagsToMapRAM(ts []*ram.Tag) map[string]string { result := make(map[string]string) for _, t := range ts { if !tagIgnoredRAM(t) { result[aws.StringValue(t.Key)] = aws.StringValue(t.Value) } } return result }. \n### Response: // tagsToMapRAM turns the list of RAM tags into a map..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void load_arg(int index) { load_local(state.argumentTypes[index], state.localOffset + skipArgs(index)); } \n### Response:", "ground_truth": "Pushes the specified argument of the current method onto the stack.\n@param index the zero-based index into the argument list", "predict": "// load_arg takes an index of an argument and loads it from the local file.."}, {"ID": 662, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private function inflate($filePath) { $currentDirectory = rtrim(dirname($this->currentView), self::DS); $currentDirectory .= self::DS; if (substr($filePath, -6, 6) != '.phtml') { $filePath .= '.phtml'; } $searchPath = realpath($currentDirectory . $filePath); if ($searchPath != false && file_exists($searchPath)) { $content = @include $searchPath; if (!$content) { // @codeCoverageIgnoreStart $e = new ViewFileNotFoundException('Unable to inflate file \"' . $searchPath . '\"'); $e->setAdditionalData('View Path: ', $searchPath); throw $e; // @codeCoverageIgnoreEnd } return; } // @codeCoverageIgnoreStart $e = new ViewFileNotFoundException('Invalid view file path, expected: \"' . $currentDirectory . $filePath . '\"'); $e->setAdditionalData('View Path Checked: ', $currentDirectory . $filePath); throw $e; // @codeCoverageIgnoreEnd }. \n### Response: Inflate a given\n@param string $filePath\n@throws \\Phavour\\Runnable\\View\\Exception\\ViewFileNotFoundException.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: void emit_field(int opcode, Type ctype, String name, Type ftype) { mv.visitFieldInsn(opcode, ctype.getInternalName(), name, ftype.getDescriptor()); } \n### Response:", "ground_truth": "package-protected for EmitUtils, try to fix", "predict": "Emit a field instruction\n@param int opcode\n@param Type ctype\n@param String name\n@param Type ftype."}, {"ID": 663, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def ensure_dir_exists(verify_dir): \"\"\"Ensure directory exists. Create if necessary.\"\"\" if not os.path.exists(verify_dir): # Doesn't exist create dir os.makedirs(verify_dir) else: # Exists if not os.path.isdir(verify_dir): # Not a dir, raise an exception raise ValueError(\"{} is not a directory\".format(verify_dir)). \n### Response: Ensure directory exists. Create if necessary..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void zero_or_null(Type type) { if (TypeUtils.isPrimitive(type)) { switch (type.getSort()) { case Type.DOUBLE: push(0d); break; case Type.LONG: push(0L); break; case Type.FLOAT: push(0f); break; case Type.VOID: aconst_null(); default: push(0); } } else { aconst_null(); } } \n### Response:", "ground_truth": "Pushes a zero onto the stack if the argument is a primitive class, or a null otherwise.", "predict": "This method is used to determine if a given type is primitive or not, and if it is, it will either push a null value or call a constant null method. If the type is not primitive, the constant null method will be called."}, {"ID": 664, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function parseMatchTime(matchTime) { /** @type String[] */ var matchTimeArr = matchTime.split(' '); matchTimeArr = [matchTimeArr[1], matchTimeArr[3]]; var dayMonthYear = matchTimeArr[0].split('.'); var hourMinutes = matchTimeArr[1].split(':'); var date = new Date(dayMonthYear[2], parseInt(dayMonthYear[1]) - 1, dayMonthYear[0], hourMinutes[0], hourMinutes[1]); return date; }. \n### Response: Parse the match time.\n\n@param {String} matchTime\n@returns {Date} The match date time..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void unbox_or_zero(Type type) { if (TypeUtils.isPrimitive(type)) { if (type != Type.VOID_TYPE) { Label nonNull = make_label(); Label end = make_label(); dup(); ifnonnull(nonNull); pop(); zero_or_null(type); goTo(end); mark(nonNull); unbox(type); mark(end); } } else { checkcast(type); } } \n### Response:", "ground_truth": "Unboxes the object on the top of the stack. If the object is null, the\nunboxed primitive value becomes zero.", "predict": "Unbox or zero the primitive type.\n\n@param {Type} type The primitive type to box or zero.\n@return void The method does not return a value.\n\n"}, {"ID": 665, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (v delegatingStrategy) MergeType(diff apply.TypeElement) (apply.Result, error) { switch diff.GetFieldMergeType() { case apply.MergeStrategy: return v.merge.MergeType(diff) case apply.ReplaceStrategy: return v.replace.MergeType(diff) case apply.RetainKeysStrategy: return v.retainKeys.MergeType(diff) default: return v.merge.MergeType(diff) } }. \n### Response: // MergeType delegates visiting a map based on the field patch strategy.\n// Defaults to \"merge\".\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void process_array(CodeEmitter e, Type type, ProcessArrayCallback callback) { Type componentType = TypeUtils.getComponentType(type); Local array = e.make_local(); Local loopvar = e.make_local(Type.INT_TYPE); Label loopbody = e.make_label(); Label checkloop = e.make_label(); e.store_local(array); e.push(0); e.store_local(loopvar); e.goTo(checkloop); e.mark(loopbody); e.load_local(array); e.load_local(loopvar); e.array_load(componentType); callback.processElement(componentType); e.iinc(loopvar, 1); e.mark(checkloop); e.load_local(loopvar); e.load_local(array); e.arraylength(); e.if_icmp(e.LT, loopbody); } \n### Response:", "ground_truth": "Process an array on the stack. Assumes the top item on the stack\nis an array of the specified type. For each element in the array,\nputs the element on the stack and triggers the callback.\n@param type the type of the array (type.isArray() must be true)\n@param callback the callback triggered for each element", "predict": "// Process an array component by calling a callback with the element type.\n// This method uses a loop to iterate over the array and the callback.\n// It also uses the \"arraylength\" method to check if the current element is greater than the loop body.\n// If the current element is greater than the loop body, the method stops iterating and returns.\n// Otherwise, it increments the loop variable and continues to the next iteration.\n\nNote: The \"TypeUtils\" class may not be present in the code snippet provided."}, {"ID": 666, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (c *Cluster) GetPrevRegionByKey(key []byte) (*metapb.Region, *metapb.Peer) { c.RLock() defer c.RUnlock() currentRegion, _ := c.GetRegionByKey(key) if len(currentRegion.StartKey) == 0 { return nil, nil } for _, r := range c.regions { if bytes.Equal(r.Meta.EndKey, currentRegion.StartKey) { return proto.Clone(r.Meta).(*metapb.Region), proto.Clone(r.leaderPeer()).(*metapb.Peer) } } return nil, nil }. \n### Response: // GetPrevRegionByKey returns the previous Region and its leader whose range contains the key..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private static void nullcmp(CodeEmitter e, Label oneNull, Label bothNull) { e.dup2(); Label nonNull = e.make_label(); Label oneNullHelper = e.make_label(); Label end = e.make_label(); e.ifnonnull(nonNull); e.ifnonnull(oneNullHelper); e.pop2(); e.goTo(bothNull); e.mark(nonNull); e.ifnull(oneNullHelper); e.goTo(end); e.mark(oneNullHelper); e.pop2(); e.goTo(oneNull); e.mark(end); } \n### Response:", "ground_truth": "If both objects on the top of the stack are non-null, does nothing.\nIf one is null, or both are null, both are popped off and execution\nbranches to the respective label.\n@param oneNull label to branch to if only one of the objects is null\n@param bothNull label to branch to if both of the objects are null", "predict": "// nullcmp compares two labels and returns the result of the last operation.."}, {"ID": 667, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function identity($options = []) { $token = $this->tokenRepo->get(); $accessToken = $token['access_token']; $url = $token['id']; $options['headers']['Authorization'] = \"OAuth $accessToken\"; $identity = $this->request($url, $options); return $identity; }. \n### Response: Returns information about the logged-in user.\n\n@param  array\n\n@return array $identity.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public Map/*<Signature, Signature>*/resolveAll() { Map resolved = new HashMap(); for (Iterator entryIter = declToBridge.entrySet().iterator(); entryIter.hasNext(); ) { Map.Entry entry = (Map.Entry) entryIter.next(); Class owner = (Class) entry.getKey(); Set bridges = (Set) entry.getValue(); try { InputStream is = classLoader.getResourceAsStream(owner.getName().replace('.', '/') + \".class\"); if (is == null) { return resolved; } try { new ClassReader(is) .accept(new BridgedFinder(bridges, resolved), ClassReader.SKIP_FRAMES | ClassReader.SKIP_DEBUG); } finally { is.close(); } } catch (IOException ignored) {} } return resolved; } \n### Response:", "ground_truth": "Finds all bridge methods that are being called with invokespecial &\nreturns them.", "predict": "Resolves all bridge classes for the given owner.\n\n@return Map<Signature, Signature/>.\n\nNote: This method iterates through the set of bridge classes for the given owner and attempts to load the bridge class using the classloader. If the class cannot be loaded, it returns the resolved map without any processing. If the class is successfully loaded, it attempts to parse the bridge information using the BridgedFinder class and the resolved map. Finally, it closes the input stream and any other resources used by the ClassReader."}, {"ID": 668, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def conversion_base_line_helper(data, period): \"\"\" The only real difference between TenkanSen and KijunSen is the period value \"\"\" catch_errors.check_for_period_error(data, period) cblh = [(np.max(data[idx+1-period:idx+1]) + np.min(data[idx+1-period:idx+1])) / 2 for idx in range(period-1, len(data))] cblh = fill_for_noncomputable_vals(data, cblh) return cblh. \n### Response: The only real difference between TenkanSen and KijunSen is the period value.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void getMethods(Class superclass, Class[] interfaces, List methods) { getMethods(superclass, interfaces, methods, null, null); } \n### Response:", "ground_truth": "Finds all of the methods that will be extended by an\nEnhancer-generated class using the specified superclass and\ninterfaces. This can be useful in building a list of Callback\nobjects. The methods are added to the end of the given list.  Due\nto the subclassing nature of the classes generated by Enhancer,\nthe methods are guaranteed to be non-static, non-final, and\nnon-private. Each method signature will only occur once, even if\nit occurs in multiple classes.\n@param superclass the class that will be extended, or null\n@param interfaces the list of interfaces that will be implemented, or null\n@param methods the list into which to copy the applicable methods", "predict": "This method retrieves all the methods defined in the superclass of the current class and its interfaces. It does not provide any additional information about the methods."}, {"ID": 669, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (k *Key) parseFloat64s(strs []string, addInvalid, returnOnInvalid bool) ([]float64, error) { vals := make([]float64, 0, len(strs)) for _, str := range strs { val, err := strconv.ParseFloat(str, 64) if err != nil && returnOnInvalid { return nil, err } if err == nil || addInvalid { vals = append(vals, val) } } return vals, nil }. \n### Response: // parseFloat64s transforms strings to float64s..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void filterConstructors(Class sc, List constructors) { CollectionUtils.filter(constructors, new VisibilityPredicate(sc, true)); if (constructors.size() == 0) throw new IllegalArgumentException(\"No visible constructors in \" + sc); } \n### Response:", "ground_truth": "Filter the list of constructors from the superclass. The\nconstructors which remain will be included in the generated\nclass. The default implementation is to filter out all private\nconstructors, but subclasses may extend Enhancer to override this\nbehavior.\n@param sc the superclass\n@param constructors the list of all declared constructors from the superclass\n@throws IllegalArgumentException if there are no non-private constructors", "predict": "// Filter constructors based on visibility.."}, {"ID": 670, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (s *MessageStore) MessagesForPeer( peerPubKey [33]byte) ([]lnwire.Message, error) { var msgs []lnwire.Message err := s.db.View(func(tx *bbolt.Tx) error { messageStore := tx.Bucket(messageStoreBucket) if messageStore == nil { return ErrCorruptedMessageStore } c := messageStore.Cursor() k, v := c.Seek(peerPubKey[:]) for ; bytes.HasPrefix(k, peerPubKey[:]); k, v = c.Next() { // Deserialize the message from its raw bytes and filter // out any which are not currently supported by the // store. msg, err := readMessage(v) if err == ErrUnsupportedMessage { continue } if err != nil { return err } msgs = append(msgs, msg) } return nil }) if err != nil { return nil, err } return msgs, nil }. \n### Response: // MessagesForPeer returns the set of messages that exists within the store for\n// the given peer..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void setSuperclass(Class superclass) { if (superclass != null && superclass.equals(Object.class)) { superclass = null; } this.superclass = superclass; } \n### Response:", "ground_truth": "Set the class which the generated class will extend. The class\nmust not be declared as final, and must have a non-private\nno-argument constructor.\n@param superclass class to extend, or null to extend Object", "predict": "// Set the superclass of this object to the specified class."}, {"ID": 671, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function createGuid() { return sprintf('%04x%04x-%04x-%04x-%04x-%04x%04x%04x', mt_rand(0, 0xffff), mt_rand(0, 0xffff), mt_rand(0, 0xffff), mt_rand(0, 0x0fff) | 0x4000, mt_rand(0, 0x3fff) | 0x8000, mt_rand(0, 0xffff), mt_rand(0, 0xffff), mt_rand(0, 0xffff) ); }. \n### Response: Creates a guid using UUID v4 based on RFC 4122\n\n@see http://tools.ietf.org/html/rfc4122#section-4.4\n@see http://www.php.net/manual/en/function.uniqid.php#94959\n@return string a uuid-v4.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private void getField(String[] names) throws Exception { final CodeEmitter e = begin_method(Constants.ACC_PUBLIC, PROVIDER_GET, null); e.load_this(); e.load_arg(0); EmitUtils.string_switch(e, names, Constants.SWITCH_STYLE_HASH, new ObjectSwitchCallback() { public void processCase(Object key, Label end) { Type type = (Type)fields.get(key); e.getfield((String)key); e.box(type); e.return_value(); } public void processDefault() { e.throw_exception(ILLEGAL_ARGUMENT_EXCEPTION, \"Unknown field name\"); } }); e.end_method(); } \n### Response:", "ground_truth": "to avoid JVM hashcode implementation incompatibilities", "predict": "This method retrieves a list of fields from a specified array of names.\n\n@see <https://docs.oracle.com/javase/8/docs/api/java/util/EmitUtils.html#string_switch>\n@see <https://docs.oracle.com/javase/8/docs/api/java/lang/ObjectSwitchCallback.html>\n@throw exception of type Exception if the field name is unknown or if the method cannot be called due to an exception.\n\nThis method is used in a class that implements the Provider interface to retrieve a list of fields from a specified array of names."}, {"ID": 672, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def encode_content(self, robj, rpb_content): \"\"\" Fills an RpbContent message with the appropriate data and metadata from a RiakObject. :param robj: a RiakObject :type robj: RiakObject :param rpb_content: the protobuf message to fill :type rpb_content: riak.pb.riak_pb2.RpbContent \"\"\" if robj.content_type: rpb_content.content_type = str_to_bytes(robj.content_type) if robj.charset: rpb_content.charset = str_to_bytes(robj.charset) if robj.content_encoding: rpb_content.content_encoding = str_to_bytes(robj.content_encoding) for uk in robj.usermeta: pair = rpb_content.usermeta.add() pair.key = str_to_bytes(uk) pair.value = str_to_bytes(robj.usermeta[uk]) for link in robj.links: pb_link = rpb_content.links.add() try: bucket, key, tag = link except ValueError: raise RiakError(\"Invalid link tuple %s\" % link) pb_link.bucket = str_to_bytes(bucket) pb_link.key = str_to_bytes(key) if tag: pb_link.tag = str_to_bytes(tag) else: pb_link.tag = str_to_bytes('') for field, value in robj.indexes: pair = rpb_content.indexes.add() pair.key = str_to_bytes(field) pair.value = str_to_bytes(str(value)) # Python 2.x data is stored in a string if six.PY2: rpb_content.value = str(robj.encoded_data) else: rpb_content.value = robj.encoded_data. \n### Response: Fills an RpbContent message with the appropriate data and\n        metadata from a RiakObject.\n\n        :param robj: a RiakObject\n        :type robj: RiakObject\n        :param rpb_content: the protobuf message to fill\n        :type rpb_content: riak.pb.riak_pb2.RpbContent.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void add(Method method) { add(ReflectUtils.getSignature(method), ReflectUtils.getExceptionTypes(method)); } \n### Response:", "ground_truth": "Add a method signature to the interface. The method modifiers are ignored,\nsince interface methods are by definition abstract and public.\n@param method the method to add to the interface", "predict": "This method adds a method to the class. It uses the reflection API to retrieve the signature and exception types of the method being added."}, {"ID": 673, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected function _insertQueryTranslator($query) { $v = $query->clause('values'); if (count($v->values()) === 1 || $v->query()) { return $query; } $newQuery = $query->getConnection()->newQuery(); $cols = $v->columns(); $placeholder = 0; $replaceQuery = false; foreach ($v->values() as $k => $val) { $fillLength = count($cols) - count($val); if ($fillLength > 0) { $val = array_merge($val, array_fill(0, $fillLength, null)); } foreach ($val as $col => $attr) { if (!($attr instanceof ExpressionInterface)) { $val[$col] = sprintf(':c%d', $placeholder); $placeholder++; } } $select = array_combine($cols, $val); if ($k === 0) { $replaceQuery = true; $newQuery->select($select)->from('DUAL'); continue; } $q = $newQuery->getConnection()->newQuery(); $newQuery->unionAll($q->select($select)->from('DUAL')); } if ($replaceQuery) { $v->query($newQuery); } return $query; }. \n### Response: Transforms an insert query that is meant to insert multiple rows at a time,\notherwise it leaves the query untouched.\n\nThe way Oracle works with multi insert is by having multiple\n\"SELECT FROM DUAL\" select statements joined with UNION.\n\n@param \\Cake\\Database\\Query $query The query to translate\n@return \\Cake\\Database\\Query.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public int cardinality() { int w = value; int c = 0; while (w != 0) { c += T[w & 255]; w >>= 8; } return c; } \n### Response:", "ground_truth": "If bit 31 is set then this method results in an infinite loop.\n\n@return the number of bits set to true in this TinyBitSet.", "predict": "This method calculates the cardinality of a given array.\n\nIt uses a while loop to iterate through the array and adds each element to a running total.\nIt then returns the final value of the running total.\n\n@param \\Cake\\Array\\Array $array The array to calculate the cardinality of\n@return The cardinality of the array."}, {"ID": 674, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (s *Proposal) SetNoVoteCount(v int64) *Proposal { s.NoVoteCount = &v return s }. \n### Response: // SetNoVoteCount sets the NoVoteCount field's value..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void setNamingPolicy(NamingPolicy namingPolicy) { if (namingPolicy == null) namingPolicy = DefaultNamingPolicy.INSTANCE; this.namingPolicy = namingPolicy; } \n### Response:", "ground_truth": "Override the default naming policy.\n@see DefaultNamingPolicy\n@param namingPolicy the custom policy, or null to use the default", "predict": "// Set naming policy to the default policy.."}, {"ID": 675, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void validateHeader(boolean validateRecordSize) throws IOException { int readmagic = file.readInt(); // Validate magic number if (readmagic != this.magic) { file.close(); throw new IOException(\"Magic in LinearDiskCache does not match: \" + readmagic + \" instead of \" + this.magic); } // Validate header size if (file.readInt() != this.headersize) { file.close(); throw new IOException(\"Header size in LinearDiskCache does not match.\"); } if (validateRecordSize) { // Validate record size if (file.readInt() != this.recordsize) { file.close(); throw new IOException(\"Recordsize in LinearDiskCache does not match.\"); } } else { // or just read it from file this.recordsize = file.readInt(); } // read the number of records and validate with file size. if (file.getFilePointer() != HEADER_POS_SIZE) { throw new IOException(\"Incorrect file position when reading header.\"); } this.numrecs = file.readInt(); if (numrecs < 0 || file.length() != indexToFileposition(numrecs)) { throw new IOException(\"File size and number of records do not agree.\"); } // yet another sanity check. We should have read all of our internal header // now. if (file.getFilePointer() != INTERNAL_HEADER_SIZE) { throw new IOException(\"Incorrect file position after reading header.\"); } }. \n### Response: Validates the header and throws an IOException if the header is invalid. If\nvalidateRecordSize is set to true the record size must match exactly the\nstored record size within the files header, else the record size is read\nfrom the header and used.\n\n@param validateRecordSize\n@throws IOException.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static Method[] findMethods(String[] namesAndDescriptors, Method[] methods) { Map map = new HashMap(); for (int i = 0; i < methods.length; i++) { Method method = methods[i]; map.put(method.getName() + Type.getMethodDescriptor(method), method); } Method[] result = new Method[namesAndDescriptors.length / 2]; for (int i = 0; i < result.length; i++) { result[i] = (Method)map.get(namesAndDescriptors[i * 2] + namesAndDescriptors[i * 2 + 1]); if (result[i] == null) { // TODO: error? } } return result; } \n### Response:", "ground_truth": "used by MethodInterceptorGenerated generated code", "predict": "Finds methods in a given class and returns an array of the methods.\n\n@return an array of Method objects representing the methods in the given class.\n\n@param namesAndDescriptors an array of strings representing the names and descriptions of the methods to find.\n@param methods an array of Method objects representing the methods to find."}, {"ID": 676, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (h handler) apply(ctx *Ctx, fns []appliable, current int) { status, err := h(ctx) if err != nil { log.Errorf(\"Error returned from route handler. %s\", err.Error()) ctx.Res.Status = 500 } else { ctx.Res.Status = status } current++ if len(fns) > current { fns[current].apply(ctx, fns, current) } }. \n### Response: // composing route with middlewares. Will be called from ``compose`` fn..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static Path resolve(final Path base, String child) { if (StringUtil.startsWithChar(child, File.separatorChar)) { child = child.substring(1); } return base.resolve(child); } \n### Response:", "ground_truth": "Resolves subpath in safer way. For some reason, if child starts with\na separator it gets resolved as a full path, ignoring the base.\nThis method acts different.", "predict": "// Resolve a file path relative to the base path."}, {"ID": 677, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function get($key) { return $this->allSaved()->get($key, function () use ($key) { return $this->getDefault($key); }); }. \n### Response: Get value from settings by key. Get registered default if not set.\n\n@param string $key\n\n@return mixed.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String readString(final Path path) throws IOException { try (BufferedReader reader = Files.newBufferedReader(path, StandardCharsets.UTF_8)) { StringWriter writer = new StringWriter(); // flush & close not needed for StringWriter-instance StreamUtil.copy(reader, writer); return writer.toString(); } } \n### Response:", "ground_truth": "Reads path content.", "predict": "Reads a string from a file specified by path.\n\n@param Path $path\n\n@return String.\n\n"}, {"ID": 678, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function findOneByParams(array $params = []) { $params['limit'] = 1; $records = $this->findByParams($params); if (count($records) > 0) { return $records->rewind(); } return null; }. \n### Response: Finds one Record using params array\n\n@param array $params\n@return Record|null.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public HttpRequest host(final String host) { this.host = host; if (headers.contains(HEADER_HOST)) { headerOverwrite(HEADER_HOST, host); } return this; } \n### Response:", "ground_truth": "Sets request host name.", "predict": "This method sets the host header for the HttpRequest object.\n\n@param String host\n@return HttpRequest object."}, {"ID": 679, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def get_session_token(self, duration=None, force_new=False): \"\"\" Return a valid session token. Because retrieving new tokens from the Secure Token Service is a fairly heavyweight operation this module caches previously retrieved tokens and returns them when appropriate. Each token is cached with a key consisting of the region name of the STS endpoint concatenated with the requesting user's access id. If there is a token in the cache meeting with this key, the session expiration is checked to make sure it is still valid and if so, the cached token is returned. Otherwise, a new session token is requested from STS and it is placed into the cache and returned. :type duration: int :param duration: The number of seconds the credentials should remain valid. :type force_new: bool :param force_new: If this parameter is True, a new session token will be retrieved from the Secure Token Service regardless of whether there is a valid cached token or not. \"\"\" token_key = '%s:%s' % (self.region.name, self.provider.access_key) token = self._check_token_cache(token_key, duration) if force_new or not token: boto.log.debug('fetching a new token for %s' % token_key) self._mutex.acquire() token = self._get_session_token(duration) _session_token_cache[token_key] = token self._mutex.release() return token. \n### Response: Return a valid session token.  Because retrieving new tokens\n        from the Secure Token Service is a fairly heavyweight operation\n        this module caches previously retrieved tokens and returns\n        them when appropriate.  Each token is cached with a key\n        consisting of the region name of the STS endpoint\n        concatenated with the requesting user's access id.  If there\n        is a token in the cache meeting with this key, the session\n        expiration is checked to make sure it is still valid and if\n        so, the cached token is returned.  Otherwise, a new session\n        token is requested from STS and it is placed into the cache\n        and returned.\n\n        :type duration: int\n        :param duration: The number of seconds the credentials should\n            remain valid.\n\n        :type force_new: bool\n        :param force_new: If this parameter is True, a new session token\n            will be retrieved from the Secure Token Service regardless\n            of whether there is a valid cached token or not..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static HttpRequest create(final String method, final String destination) { return new HttpRequest() .method(method.toUpperCase()) .set(destination); } \n### Response:", "ground_truth": "Generic request builder, usually used when method is a variable.\nOtherwise, use one of the other static request builder methods.", "predict": "Returns a new HttpRequest object with the specified method and destination."}, {"ID": 680, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func NewHTTPUClient() (*HTTPUClient, error) { conn, err := net.ListenPacket(\"udp\", \":0\") if err != nil { return nil, err } return &HTTPUClient{conn: conn}, nil }. \n### Response: // NewHTTPUClient creates a new HTTPUClient, opening up a new UDP socket for the\n// purpose..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static HttpRequest connect(final String destination) { return new HttpRequest() .method(HttpMethod.CONNECT) .set(destination); } \n### Response:", "ground_truth": "Builds a CONNECT request.", "predict": "// Connect method returns a new HttpRequest object, setting the method to CONNECT and\n// the destination to the specified destination.."}, {"ID": 681, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (hd *HD44780) Home() error { err := hd.WriteInstruction(lcdReturnHome) time.Sleep(clearDelay) return err }. \n### Response: // Home moves the cursor and all characters to the home position..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static HttpRequest get(final String destination) { return new HttpRequest() .method(HttpMethod.GET) .set(destination); } \n### Response:", "ground_truth": "Builds a GET request.", "predict": "// Returns the HTTP request with the specified destination URL.."}, {"ID": 682, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private function parseDates($data, $format) { foreach ($data as $key => $entry) { $data[$key]['date'] = $data[$key]['date']->format($format); } return $data; }. \n### Response: Parses dates according to a given format.\n\n@param array $data\n@param string $format\n\n@return string.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static HttpRequest post(final String destination) { return new HttpRequest() .method(HttpMethod.POST) .set(destination); } \n### Response:", "ground_truth": "Builds a POST request.", "predict": "This method returns a new HttpRequest object with the specified method (HttpMethod.POST) and set to the specified destination.\n\n@param String destination.\n\n@return HttpRequest object."}, {"ID": 683, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static function check( array $fields, array $data ) { $dependency = new static( $data ); foreach ( $fields as $field ) { if ( ! $field->get_option( 'deps' ) ) { continue; } $satisfied = $dependency->apply( $deps = $field->get_option( 'deps' ) ); $field->set_option( 'row_attributes', $field->get_option( 'row_attributes' ) + [ 'data-deps' => esc_attr( json_encode( $deps, JSON_HEX_APOS ) ), 'data-satisfied' => $satisfied ? 'true' : 'false', ] ); $field->set_option( 'active', $satisfied ); } }. \n### Response: Check the fields dependencies.\n\n@param \\WPLibs\\Form\\Contracts\\Field[] $fields\n@param array                          $data\n@return void.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static HttpRequest put(final String destination) { return new HttpRequest() .method(HttpMethod.PUT) .set(destination); } \n### Response:", "ground_truth": "Builds a PUT request.", "predict": "Put the data in the specified destination.\n\n@param \\WPLibs\\Http\\Contracts\\HttpRequest $request\n@return \\WPLibs\\Http\\Contracts\\HttpRequest\n\nNote: This method is part of the WordPress REST API and is used to send a PUT request to update a resource. It creates a new HttpRequest object with the appropriate HTTP method (PUT) and sets the destination URL as the set parameter."}, {"ID": 684, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (cli *Client) Disconnect() error { // Lock for the disconnection. cli.muConn.Lock() // Return an error if the Client has not yet connected to the Server. if cli.conn == nil { // Unlock. cli.muConn.Unlock() return ErrNotYetConnected } // Send a DISCONNECT Packet to the Server. // Ignore the error returned by the send method because // we proceed to the subsequent disconnecting processing // even if the send method returns the error. cli.send(packet.NewDISCONNECT()) // Close the Network Connection. if err := cli.conn.Close(); err != nil { // Unlock. cli.muConn.Unlock() return err } // Change the state of the Network Connection to disconnected. cli.conn.disconnected = true // Send the end signal to the goroutine via the channels. select { case cli.conn.sendEnd <- struct{}{}: default: } // Unlock. cli.muConn.Unlock() // Wait until all goroutines end. cli.conn.wg.Wait() // Lock for cleaning the Network Connection. cli.muConn.Lock() // Lock for cleaning the Session. cli.muSess.Lock() // Clean the Network Connection and the Session. cli.clean() // Unlock. cli.muSess.Unlock() // Unlock. cli.muConn.Unlock() return nil }. \n### Response: // Disconnect sends a DISCONNECT Packet to the Server and\n// closes the Network Connection..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static HttpRequest patch(final String destination) { return new HttpRequest() .method(HttpMethod.PATCH) .set(destination); } \n### Response:", "ground_truth": "Builds a PATCH request.", "predict": "// Patch creates a new HttpRequest object and sets the destination\n// field to the specified value.."}, {"ID": 685, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static int safeToInt(long value) { if (value > Integer.MAX_VALUE || value < Integer.MIN_VALUE) { throw new ArithmeticException(\"Calculation overflows an int: \" + value); } return (int) value; }. \n### Response: Safely convert a long to an int.\n\n@param value  the value to convert\n@return the int value\n@throws ArithmeticException if the result overflows an int.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static HttpRequest delete(final String destination) { return new HttpRequest() .method(HttpMethod.DELETE) .set(destination); } \n### Response:", "ground_truth": "Builds a DELETE request.", "predict": "Delete a resource from the specified destination.\n\n@param destination  the URL of the resource to delete\n@return the HttpRequest object\n\nNote: This method uses the set method to specify the destination URL, which is a string. It is important to ensure that the destination URL is valid and does not contain any special characters that could cause issues when converting it to a string. It is also important to handle the case where the destination URL is empty or does not exist, as this could result in a 404 error."}, {"ID": 686, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public boolean waitForWebElement(By by){ if(config.commandLogging){ Log.d(config.commandLoggingTag, \"waitForWebElement(\"+by+\")\"); } return (waiter.waitForWebElement(by, 0, Timeout.getLargeTimeout(), true) != null); }. \n### Response: Waits for a WebElement matching the specified By object. Default timeout is 20 seconds.\n\n@param by the By object. Examples are: {@code By.id(\"id\")} and {@code By.name(\"name\")}\n@return {@code true} if the {@link WebElement} is displayed and {@code false} if it is not displayed before the timeout.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static HttpRequest head(final String destination) { return new HttpRequest() .method(HttpMethod.HEAD) .set(destination); } \n### Response:", "ground_truth": "Builds a HEAD request.", "predict": "This method returns a new HttpRequest object with the specified method and set parameters.\n\n@param destination the URL to send a HEAD request to.\n@return the new HttpRequest object with the specified method and set parameters.\n\nNote: This method only supports sending a HEAD request, which only retrieves the headers of the requested resource. It is not suitable for making a GET or POST request."}, {"ID": 687, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public AttributeList readAttributeList(InputStream in) throws ConversionException, IOException, ClassNotFoundException { JSONArray json = parseArray(in); AttributeList ret = new AttributeList(); for (Object item : json) { if (!(item instanceof JSONObject)) { throwConversionException(\"readAttributeList() receives an items that's not a JSONObject.\", item); } JSONObject jo = (JSONObject) item; String name = readStringInternal(jo.get(N_NAME)); Object value = readPOJOInternal(jo.get(N_VALUE)); ret.add(new Attribute(name, value)); } return ret; }. \n### Response: Decode a JSON document to retrieve an AttributeList instance.\n\n@param in The stream to read JSON from\n@return The decoded AttributeList instance\n@throws ConversionException If JSON uses unexpected structure/format\n@throws IOException If an I/O error occurs or if JSON is ill-formed.\n@throws ClassNotFoundException If needed class can't be found.\n@see #writeAttributeList(OutputStream, AttributeList).\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static HttpRequest trace(final String destination) { return new HttpRequest() .method(HttpMethod.TRACE) .set(destination); } \n### Response:", "ground_truth": "Builds a TRACE request.", "predict": "Implement a trace request for the HTTP protocol.\n\n@param destination The destination URL to send the request to\n@return ThetracedHttpRequest object\n@see #trace(String)."}, {"ID": 688, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def _handle_emailauth(maildomain='', message=''): # pylint:disable=unused-argument ''' Called when SteamGuard requires authentication via e-mail. Asks the user to enter the code. Args: maildomain: Optional. The mail domain of the e-mail address the SteamGuard code is send to. message: Optional. A message from Steam service. Returns: A string containing the code. ''' print('SteamGuard requires email authentication...') emailauth = input('Please enter the code sent to your mail address at \"%s\": ' % maildomain) emailauth.upper() return emailauth. \n### Response: Called when SteamGuard requires authentication via e-mail.\n        Asks the user to enter the code.\n\n        Args:\n            maildomain: Optional. The mail domain of the e-mail address the SteamGuard\n                code is send to.\n            message: Optional. A message from Steam service.\n\n        Returns:\n            A string containing the code..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static HttpRequest options(final String destination) { return new HttpRequest() .method(HttpMethod.OPTIONS) .set(destination); } \n### Response:", "ground_truth": "Builds an OPTIONS request.", "predict": "This method returns a new HttpRequest object with the specified method (HttpMethod.OPTIONS) and set the destination parameter to the specified string."}, {"ID": 689, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static <T extends Com4jObject> T getActiveObject(Class<T> primaryInterface, GUID clsid ) { return new GetActiveObjectTask<T>(clsid,primaryInterface).execute(); }. \n### Response: Gets an already running object from the running object table.\n\n@param  the type of the return value and the type parameter of the class object of primaryInterface\n\n@param primaryInterface The returned COM object is returned as this interface.\nMust be non-null. Passing in {@link Com4jObject} allows\nthe caller to create a new instance without knowing\nits primary interface.\n@param clsid The CLSID of the object to be retrieved.\n\n@return the retrieved object\n\n@throws ComException if the retrieval fails.\n\n@see MSDN documentation.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public HttpRequest path(String path) { // this must be the only place that sets the path if (!path.startsWith(StringPool.SLASH)) { path = StringPool.SLASH + path; } int ndx = path.indexOf('?'); if (ndx != -1) { String queryString = path.substring(ndx + 1); path = path.substring(0, ndx); query = HttpUtil.parseQuery(queryString, true); } else { query = HttpMultiMap.newCaseInsensitiveMap(); } this.path = path; return this; } \n### Response:", "ground_truth": "Sets request path. Query string is allowed.\nAdds a slash if path doesn't start with one.\nQuery will be stripped out from the path.\nPrevious query is discarded.\n@see #query()", "predict": "This method returns the current path of the HTTP request.\n\n@return the current path of the HTTP request\n\n@param path The path of the HTTP request.\n\nThis method starts by checking if the path starts with the StringPool.SLASH string. If it does not, it adds the StringPool.SLASH string to the beginning of the path.\n\nThen, the method checks if the path contains a question mark (?) at the beginning. If it does, it extracts the query string from the path by substringing it from the beginning of the string.\n\nIf the query string is not present, the method extracts a case-insensitive map of query parameters from the path.\n\nIf the path does not contain a question mark, the method returns a new instance of HttpMultiMap.newCaseInsensitiveMap().\n\nFinally, the method sets the path variable to the returned path and returns the current path.\n\n@see MSDN documentation."}, {"ID": 690, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static function pageGetArray(?string $page = null): array { if ($page === null) { $page = $_SERVER['PHP_SELF']; } return self::getArray($page); }. \n### Response: Get session array by page filename.\n\n@param string $page Default null which means current page PHP_SELF.\n@return mixed[].\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public HttpRequest cookies(final Cookie... cookies) { if (cookies.length == 0) { return this; } StringBuilder cookieString = new StringBuilder(); boolean first = true; for (Cookie cookie : cookies) { Integer maxAge = cookie.getMaxAge(); if (maxAge != null && maxAge.intValue() == 0) { continue; } if (!first) { cookieString.append(\"; \"); } first = false; cookieString.append(cookie.getName()); cookieString.append('='); cookieString.append(cookie.getValue()); } headerOverwrite(\"cookie\", cookieString.toString()); return this; } \n### Response:", "ground_truth": "Sets cookies to the request.", "predict": "This method is used to handle cookies for the HttpRequest object. It takes in a list of Cookie objects and returns a string containing the cookies. The method first checks if the list of cookies is empty, if so it returns the HttpRequest object. It then creates a StringBuilder to hold the cookies and iterates through the list of cookies. For each cookie it checks if its max age is zero and if so it skips it. If first is true it will add semicolon after the first cookie and if not it will add name and value of the cookie. Finally it returns the cookies string with headerOverwrite method."}, {"ID": 691, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def my_main(context): \"\"\" The starting point for your app.\"\"\" print('starting MyApp...') if context['debug']: print('Context:') for k in context: print('Key: {}\\nValue: {}'.format(k, context[k])) print('Done!') return 0. \n### Response: The starting point for your app..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public HttpRequest query(final String name1, final Object value1, final Object... parameters) { query(name1, value1 == null ? null : value1.toString()); for (int i = 0; i < parameters.length; i += 2) { String name = parameters[i].toString(); String value = parameters[i + 1].toString(); query.add(name, value); } return this; } \n### Response:", "ground_truth": "Adds many query parameters at once. Although it accepts objects,\neach value will be converted to string.", "predict": "The method query() returns an HttpRequest object and performs a query on the server. It takes in three parameters: name1, value1, and parameters. The method first sets the initial value of the query to null. Then, it calls the add() method to add the values of the parameters to the query string. Finally, it returns the HttpRequest object."}, {"ID": 692, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function bitAnd( $value1, $value2 ) { $value1 = $this->getIdentifier( $value1 ); $value2 = $this->getIdentifier( $value2 ); return \"( {$value1} & {$value2} )\"; }. \n### Response: Returns the SQL that performs the bitwise AND on two values.\n\n@param string $value1\n@param string $value2\n@return string.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public HttpRequest query(final Map<String, String> queryMap) { for (Map.Entry<String, String> entry : queryMap.entrySet()) { query.add(entry.getKey(), entry.getValue()); } return this; } \n### Response:", "ground_truth": "Adds all parameters from the provided map.", "predict": "Returns the HttpRequest object that contains the query parameters.\n\n@param Map<String, String> queryMap\n@return HttpRequest."}, {"ID": 693, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void updateTaskDef(TaskDef taskDef) { Preconditions.checkNotNull(taskDef, \"Task definition cannot be null\"); stub.updateTask( MetadataServicePb.UpdateTaskRequest.newBuilder() .setTask(protoMapper.toProto(taskDef)) .build() ); }. \n### Response: Updates an existing task definition\n\n@param taskDef the task definition to be updated.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public HttpRequest queryString(final String queryString, final boolean decode) { this.query = HttpUtil.parseQuery(queryString, decode); return this; } \n### Response:", "ground_truth": "Sets query from provided query string. Previous query values\nare discarded.", "predict": "This method parses a query string and returns an HttpRequest object.\n\n@param queryString the query string to be parsed.\n@param decode whether to decode the query string.\n\n"}, {"ID": 694, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def update(self, query, payload): \"\"\"Updates a record :param query: Dictionary, string or :class:`QueryBuilder` object :param payload: Dictionary payload :return: - Dictionary of the updated record \"\"\" if not isinstance(payload, dict): raise InvalidUsage(\"Update payload must be of type dict\") record = self.get(query).one() self._url = self._url_builder.get_appended_custom(\"/{0}\".format(record['sys_id'])) return self._get_response('PUT', data=json.dumps(payload)). \n### Response: Updates a record\n\n        :param query: Dictionary, string or :class:`QueryBuilder` object\n        :param payload: Dictionary payload\n        :return:\n            - Dictionary of the updated record.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public String queryString() { if (query == null) { return StringPool.EMPTY; } return HttpUtil.buildQuery(query, queryEncoding); } \n### Response:", "ground_truth": "Generates query string. All values are URL encoded.", "predict": "This method returns the query string for the current request. It first checks if the query is null and returns a empty string if it is. If the query is not null, it returns the buildQuery() method with the query parameters and queryEncoding."}, {"ID": 695, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected function showCheckAll() { if ( $this->getCheckboxCellRenderer() === null || $this->getFirstAncestor('SwatForm') === null ) { $show = false; } elseif ($this->show_check_all === null && count($this->model) > 1) { $show = true; } elseif ($this->show_check_all === true) { $show = true; } else { $show = false; } return $show; }. \n### Response: Whether or not a check-all widget is to be displayed for the tiles\nof this tile view\n\nThis depends on the {@link SwatTileView::$show_check_all} property as\nwell as whether or not this tile view contains a\n{@link SwatCheckboxCellRenderer} and whether or not this tile view\ncontains enough tiles to warrent having a check-all widget\n\n@return boolean true if a check-all widget is to be displayed for this\ntile view and false if it is not..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public String hostUrl() { StringBand url = new StringBand(8); if (protocol != null) { url.append(protocol); url.append(\"://\"); } if (host != null) { url.append(host); } if (port != Defaults.DEFAULT_PORT) { url.append(':'); url.append(port); } return url.toString(); } \n### Response:", "ground_truth": "Returns just host url, without path and query.", "predict": "This method returns the host URL of the server.\n\nIt first creates a StringBand object with a size of 8 characters. Then, it checks if there is a protocol specified (e.g. \"http\", \"https\", etc.). If so, it appends it to the string. If there is no protocol specified, it appends \"://\" to the string. It then checks if there is a host specified. If so, it appends the host to the string. If there is no host specified, it appends \"://\" to the string and appends the port number (if specified) to the string. Finally, it returns the string.\n\n@return the host URL of the server."}, {"ID": 696, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function sendOrder(Request $request, $order_id) { $elementIds = $request->request->get('elements', []); $acceptor = $this->getAuthenticatedUser(); $basketElements = $this->doAcceptElements($order_id, $elementIds, $acceptor); $success = !empty($basketElements); if ('json' === $request->getRequestFormat()) { return $this->app->json([ 'success' => $success, 'msg' => $success ? $this->app->trans('Order has been sent') : $this->app->trans('An error occured while sending, please retry or contact an admin if problem persists'), 'order_id' => $order_id, ]); } return $this->app->redirectPath('prod_orders', [ 'success' => (int) $success, 'action' => 'send', ]); }. \n### Response: Send an order\n\n@param  Request $request\n@param  integer $order_id\n@return RedirectResponse|JsonResponse.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public HttpRequest basicAuthentication(final String username, final String password) { if (username != null && password != null) { String data = username.concat(StringPool.COLON).concat(password); String base64 = Base64.encodeToString(data); headerOverwrite(HEADER_AUTHORIZATION, \"Basic \" + base64); } return this; } \n### Response:", "ground_truth": "Enables basic authentication by adding required header.", "predict": "This method is used to authenticate a user's username and password using the Basic Authentication protocol. It checks if the username and password are both present and if they are valid. If they are, it encodes the username and password into a base64 string and overwrites the authorization header with the resulting string. The method returns the original HttpRequest object."}, {"ID": 697, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def make_valid_polygon(shape): \"\"\" Make a polygon valid. Polygons can be invalid in many ways, such as self-intersection, self-touching and degeneracy. This process attempts to make a polygon valid while retaining as much of its extent or area as possible. First, we call pyclipper to robustly union the polygon. Using this on its own appears to be good for \"cleaning\" the polygon. This might result in polygons which still have degeneracies according to the OCG standard of validity - as pyclipper does not consider these to be invalid. Therefore we follow by using the `buffer(0)` technique to attempt to remove any remaining degeneracies. \"\"\" assert shape.geom_type == 'Polygon' shape = make_valid_pyclipper(shape) assert shape.is_valid return shape. \n### Response: Make a polygon valid. Polygons can be invalid in many ways, such as\n    self-intersection, self-touching and degeneracy. This process attempts to\n    make a polygon valid while retaining as much of its extent or area as\n    possible.\n\n    First, we call pyclipper to robustly union the polygon. Using this on its\n    own appears to be good for \"cleaning\" the polygon.\n\n    This might result in polygons which still have degeneracies according to\n    the OCG standard of validity - as pyclipper does not consider these to be\n    invalid. Therefore we follow by using the `buffer(0)` technique to attempt\n    to remove any remaining degeneracies..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public HttpRequest setHostHeader() { String hostPort = this.host; if (port != Defaults.DEFAULT_PORT) { hostPort += StringPool.COLON + port; } headerOverwrite(HEADER_HOST, hostPort); return this; } \n### Response:", "ground_truth": "Sets 'Host' header from current host and port.", "predict": "Set the host header. \n\nThis method sets the host header for the given HttpRequest object. \n\nIt first extracts the host from the current host header and if the port is different it adds the port to the host. \n\nThen it overwrites the host header with the new host and returns the updated HttpRequest object."}, {"ID": 698, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function xorHaving($field, $op = null, $value = null) { return $this->_modifyPredicate($this->_having, Predicate::MAYBE, $field, $op, $value); }. \n### Response: Will modify or create a having predicate using the XOR conjunction.\n\n@param string $field\n@param string $op\n@param mixed $value\n@return $this.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override protected Buffer buffer(final boolean fullRequest) { // INITIALIZATION // host port if (header(HEADER_HOST) == null) { setHostHeader(); } // form Buffer formBuffer = formBuffer(); // query string String queryString = queryString(); // user-agent if (header(\"User-Agent\") == null) { header(\"User-Agent\", Defaults.userAgent); } // POST method requires Content-Type to be set if (method.equals(\"POST\") && (contentLength() == null)) { contentLength(0); } // BUILD OUT Buffer request = new Buffer(); request.append(method) .append(SPACE) .append(path); if (query != null && !query.isEmpty()) { request.append('?'); request.append(queryString); } request.append(SPACE) .append(httpVersion) .append(CRLF); populateHeaderAndBody(request, formBuffer, fullRequest); return request; } \n### Response:", "ground_truth": "Prepares the request buffer.", "predict": "This method is an override of the `buffer` method in a class `Buffer`. It initializes the request header and body, sets the HTTP method, and sets the user-agent if necessary. It then builds the request by appending the method, path, and query string, and if the query string is not empty, it appends it. Finally, it returns the built request.\n\n@param boolean fullRequest\n@return Buffer\n\nThis method takes a boolean argument `fullRequest` as its only parameter. It returns a new `Buffer` object that represents the built request. The `Buffer` class is used to send HTTP requests and responses in a binary format. It is typically implemented as a `List` of bytes, where each byte is represented by a `char` or a `int`."}, {"ID": 699, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function hasRequiredArgument($includeBase = true) { Assert::boolean($includeBase, 'The parameter $includeBase must be a boolean. Got: %s'); if (!$this->hasOptionalArg && count($this->arguments) > 0) { return true; } if ($includeBase && $this->baseFormat) { return $this->baseFormat->hasRequiredArgument(); } return false; }. \n### Response: Returns whether the format contains a required argument.\n\n@param bool $includeBase Whether to include arguments in the base format\nin the search.\n\n@return bool Returns `true` if the format contains a required argument\nand `false` otherwise..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public <R> R sendAndReceive(final Function<HttpResponse, R> responseHandler) { return responseHandler.apply(send()); } \n### Response:", "ground_truth": "Syntax sugar.", "predict": "This method sends a request and returns the response received.\n\n@param Function<HttpResponse, R> responseHandler The function that will be applied to the send() method to receive the response.\n\n@return R The response received from the server.\n\nThis method is used for sending and receiving HTTP requests and responses. It takes a response handler function as an argument, which is applied to the send() method to receive the response. The method returns the response received from the server."}, {"ID": 700, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (m *MockZonedEnviron) StorageProviderTypes() ([]storage.ProviderType, error) { ret := m.ctrl.Call(m, \"StorageProviderTypes\") ret0, _ := ret[0].([]storage.ProviderType) ret1, _ := ret[1].(error) return ret0, ret1 }. \n### Response: // StorageProviderTypes mocks base method.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: static Handler removeRange(final Handler firstHandler, final Label start, final Label end) { if (firstHandler == null) { return null; } else { firstHandler.nextHandler = removeRange(firstHandler.nextHandler, start, end); } int handlerStart = firstHandler.startPc.bytecodeOffset; int handlerEnd = firstHandler.endPc.bytecodeOffset; int rangeStart = start.bytecodeOffset; int rangeEnd = end == null ? Integer.MAX_VALUE : end.bytecodeOffset; // Return early if [handlerStart,handlerEnd[ and [rangeStart,rangeEnd[ don't intersect. if (rangeStart >= handlerEnd || rangeEnd <= handlerStart) { return firstHandler; } if (rangeStart <= handlerStart) { if (rangeEnd >= handlerEnd) { // If [handlerStart,handlerEnd[ is included in [rangeStart,rangeEnd[, remove firstHandler. return firstHandler.nextHandler; } else { // [handlerStart,handlerEnd[ - [rangeStart,rangeEnd[ = [rangeEnd,handlerEnd[ return new Handler(firstHandler, end, firstHandler.endPc); } } else if (rangeEnd >= handlerEnd) { // [handlerStart,handlerEnd[ - [rangeStart,rangeEnd[ = [handlerStart,rangeStart[ return new Handler(firstHandler, firstHandler.startPc, start); } else { // [handlerStart,handlerEnd[ - [rangeStart,rangeEnd[ = // [handlerStart,rangeStart[ + [rangeEnd,handerEnd[ firstHandler.nextHandler = new Handler(firstHandler, end, firstHandler.endPc); return new Handler(firstHandler, firstHandler.startPc, start); } } \n### Response:", "ground_truth": "Removes the range between start and end from the Handler list that begins with the given\nelement.\n\n@param firstHandler the beginning of a Handler list. May be {@literal null}.\n@param start the start of the range to be removed.\n@param end the end of the range to be removed. Maybe {@literal null}.\n@return the exception handler list with the start-end range removed.", "predict": "// Removes a range of handlers from the given list."}, {"ID": 701, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function checkAddress(string $address, ?string $publicKey = null): bool { return $this->getJson([ 'q' => 'checkAddress', 'account' => $address, 'public_key' => $publicKey, ]); }. \n### Response: Check that an address is valid.\nOptionally validate it against the corresponding public key.\n\n@param string      $address\n@param string|null $publicKey An optional corresponding public key.\n@return bool\n@throws ApiException\n@api.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: static int getExceptionTableLength(final Handler firstHandler) { int length = 0; Handler handler = firstHandler; while (handler != null) { length++; handler = handler.nextHandler; } return length; } \n### Response:", "ground_truth": "Returns the number of elements of the Handler list that begins with the given element.\n\n@param firstHandler the beginning of a Handler list. May be {@literal null}.\n@return the number of elements of the Handler list that begins with 'handler'.", "predict": "This method retrieves the length of the exception table for the given first handler.\n\n@param Handler firstHandler The first handler to be processed.\n@return The length of the exception table.\n@api."}, {"ID": 702, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def deconstruct(self): \"\"\" to support Django 1.7 migrations, see also the add_introspection_rules section at bottom of this file for South + earlier Django versions \"\"\" name, path, args, kwargs = super( ExclusiveBooleanField, self).deconstruct() if self._on_fields: kwargs['on'] = self._on_fields return name, path, args, kwargs. \n### Response: to support Django 1.7 migrations, see also the add_introspection_rules\n        section at bottom of this file for South + earlier Django versions.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void collectActionInterceptors() { final Collection<? extends ActionInterceptor> interceptorValues = interceptorsManager.getAllInterceptors(); interceptors = new ArrayList<>(); interceptors.addAll(interceptorValues); interceptors.sort(Comparator.comparing(a -> a.getClass().getSimpleName())); } \n### Response:", "ground_truth": "Collects all interceptors.", "predict": "Collecting all interceptor values from the interceptorsManager and sorting them by class name."}, {"ID": 703, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func GetHostLowestLinkMtu() (int, error) { lowestMTU := 9000 //Jumbo frame MTU intfList, err := net.Interfaces() if err != nil { return 0, err } // Loop thru each interface and add its ip addr to list for _, intf := range intfList { if strings.HasPrefix(intf.Name, \"docker\") || strings.HasPrefix(intf.Name, \"veth\") || strings.HasPrefix(intf.Name, \"vport\") || strings.HasPrefix(intf.Name, \"lo\") { continue } lowestMTU = int(math.Min(float64(lowestMTU), float64(intf.MTU))) } if lowestMTU == 0 { return 0, errors.New(\"Failed to find minimum MTU\") } return lowestMTU, nil }. \n### Response: //GetHostLowestLinkMtu return lowest mtu for host interface(excluding ovs\n//interface.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void collectActionFilters() { final Collection<? extends ActionFilter> filterValues = filtersManager.getAllFilters(); filters = new ArrayList<>(); filters.addAll(filterValues); filters.sort(Comparator.comparing(a -> a.getClass().getSimpleName())); } \n### Response:", "ground_truth": "Collects all filters.", "predict": "//CollectActionFilters return all action filters and sort them by class name."}, {"ID": 704, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected function getName($classname, $function = null) { $name = str_replace('Controller', '', last(explode('\\\\', $classname))); return strtoupper(!is_null($function) ? $name . '_' . $function : $name); }. \n### Response: Creates name of log entity\n\n@param String $classname\n@param String $function\n@return String.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void collectActionResults() { final Collection<ActionResult> resultsValues = resultsManager.getAllActionResults(); results = new ArrayList<>(); results.addAll(resultsValues); results.sort(Comparator.comparing(a -> a.getClass().getSimpleName())); } \n### Response:", "ground_truth": "Collects all action results.", "predict": "Collects all action results from the results manager and sorts them by class name.\n\n@return void.\n\n"}, {"ID": 705, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def start(self): ''' Start the actual proxy minion. If sub-classed, don't **ever** forget to run: super(YourSubClass, self).start() NOTE: Run any required code before calling `super()`. ''' super(ProxyMinion, self).start() try: if check_user(self.config['user']): self.action_log_info('The Proxy Minion is starting up') self.verify_hash_type() self.minion.tune_in() if self.minion.restart: raise SaltClientError('Proxy Minion could not connect to Master') except (KeyboardInterrupt, SaltSystemExit) as exc: self.action_log_info('Proxy Minion Stopping') if isinstance(exc, KeyboardInterrupt): log.warning('Exiting on Ctrl-c') self.shutdown() else: log.error(exc) self.shutdown(exc.code). \n### Response: Start the actual proxy minion.\n\n        If sub-classed, don't **ever** forget to run:\n\n            super(YourSubClass, self).start()\n\n        NOTE: Run any required code before calling `super()`..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void collectActionRuntimes() { actions = actionsManager.getAllActionRuntimes(); actions.sort(Comparator.comparing(ActionRuntime::getActionPath)); } \n### Response:", "ground_truth": "Collects all action runtime configurations.", "predict": "Collects all actionRuntimes and sorts them by their actionPath."}, {"ID": 706, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function step(x, a, p, q) { var temp, w; temp = p <= 0.5 ? gratio(a)(x) - p : q - gratioc(a)(x); temp /= r(a, x); w = (a - 1 - x) / 2; if (Math.max(Math.abs(temp), Math.abs(w * temp)) <= 0.1) { return x * (1 - (temp + w * temp * temp)); } return x * (1 - temp); }. \n### Response: Use Schroeder or Newton-Raphson to do one step of the iteration, formulas 37 and 38..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @SuppressWarnings({\"unchecked\"}) protected void setSimpleProperty(final BeanProperty bp, final Object value) { Setter setter = bp.getSetter(isDeclared); // try: setter if (setter != null) { invokeSetter(setter, bp, value); return; } // try: put(\"property\", value) if (bp.isMap()) { ((Map) bp.bean).put(bp.name, value); return; } if (isSilent) { return; } throw new BeanException(\"Simple property not found: \" + bp.name, bp); } \n### Response:", "ground_truth": "Sets a value of simple property.", "predict": "Use the appropriate method to set the Simple property, such as Schroeder or Newton-Raphson."}, {"ID": 707, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def _reset_offset(self, partition): \"\"\"Reset offsets for the given partition using the offset reset strategy. Arguments: partition (TopicPartition): the partition that needs reset offset Raises: NoOffsetForPartitionError: if no offset reset strategy is defined \"\"\" timestamp = self._subscriptions.assignment[partition].reset_strategy if timestamp is OffsetResetStrategy.EARLIEST: strategy = 'earliest' elif timestamp is OffsetResetStrategy.LATEST: strategy = 'latest' else: raise NoOffsetForPartitionError(partition) log.debug(\"Resetting offset for partition %s to %s offset.\", partition, strategy) offsets = self._retrieve_offsets({partition: timestamp}) if partition not in offsets: raise NoOffsetForPartitionError(partition) offset = offsets[partition][0] # we might lose the assignment while fetching the offset, # so check it is still active if self._subscriptions.is_assigned(partition): self._subscriptions.seek(partition, offset). \n### Response: Reset offsets for the given partition using the offset reset strategy.\n\n        Arguments:\n            partition (TopicPartition): the partition that needs reset offset\n\n        Raises:\n            NoOffsetForPartitionError: if no offset reset strategy is defined.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public <T> T getProperty(final Object bean, final String name) { BeanProperty beanProperty = new BeanProperty(this, bean, name); if (!isSilent) { resolveNestedProperties(beanProperty); return (T) getIndexProperty(beanProperty); } else { try { resolveNestedProperties(beanProperty); return (T) getIndexProperty(beanProperty); } catch (Exception ignore) { return null; } } } \n### Response:", "ground_truth": "Returns value of bean's property.", "predict": "getProperty():\n\n* Overrides the method from the bean class to retrieve the property value for the given bean and property name.\n* If the property is not silent, resolve nested properties and return the index property.\n* Otherwise, try to resolve nested properties and return the index property, if possible. If an exception is thrown, return null.\n\nArguments:\n\t* bean (Object): the bean to retrieve the property value for\n\t* name (String): the name of the property to retrieve\n\nReturns:\n\t* T: the value of the property\n\nNote:\n\t* This method is used to retrieve the value of a property for a given bean, and may throw an exception if the property is not found or if the property is silent."}, {"ID": 708, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static HttpTemplate template(TemplateType type, String template) { return new HttpTemplate(type).withTemplate(template); }. \n### Response: Static builder to create an template for responding or forwarding requests.\n\n@param template the template for the response or request.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public String extractThisReference(final String propertyName) { int ndx = StringUtil.indexOfChars(propertyName, INDEX_CHARS); if (ndx == -1) { return propertyName; } return propertyName.substring(0, ndx); } \n### Response:", "ground_truth": "Extract the first name of this reference.", "predict": "This method is an override of the default extractThisReference method provided by the StringUtil class. It is used to extract a reference to a specific string property. The method takes a final String propertyName as an input and returns a String containing the full reference to the property. If the reference cannot be found, it returns the original propertyName."}, {"ID": 709, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function regenerateChannel() { $channel = $this->channel; $this->channel = $this->amqp->channel(); return $channel; }. \n### Response: Regenerates a channel\n\n@return AMQPChannel Old channel.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public PrintWriter getWriter() { if (writer == null) { writer = new FastCharArrayWriter(); printWriter = new PrintWriter(writer); } return printWriter; } \n### Response:", "ground_truth": "Returns buffered writer. Buffer will be created if not already used.", "predict": "@return PrintWriter The PrintWriter object.\n\nNote: FastCharArrayWriter is not a standard Java class, it might be a custom implementation."}, {"ID": 710, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function amqpSenderNode(config) { RED.nodes.createNode(this, config); // get endpoint configuration this.endpoint = RED.nodes.getNode(config.endpoint); // get all other configuration this.address = config.address; this.autosettle = config.autosettle; this.dynamic = config.dynamic; this.sndsettlemode = config.sndsettlemode; this.rcvsettlemode = config.rcvsettlemode; this.durable = config.durable; this.expirypolicy = config.expirypolicy; var node = this; // node not yet connected this.status({ fill: 'red', shape: 'dot', text: 'disconnected' }); if (node.endpoint) { node.endpoint.connect(function(connection) { setup(connection); }); /** * Node setup for creating sender link * * @param connection Connection instance */ function setup(connection) { node.connection = connection; // node connected node.status({ fill: 'green', shape: 'dot', text: 'connected' }); // build sender options based on node configuration var options = { target: { address: node.address, dynamic: node.dynamic, durable: node.durable, expiry_policy: node.expirypolicy }, autosettle: node.autosettle, snd_settle_mode: node.sndsettlemode, rcv_settle_mode: node.rcvsettlemode }; node.sender = node.connection.open_sender(options); node.sender.on('accepted', function(context) { var msg = outDelivery(node, context.delivery); node.send(msg); }); node.sender.on('released', function(context) { var msg = outDelivery(node, context.delivery); node.send(msg); }); node.sender.on('rejected', function(context) { var msg = outDelivery(node, context.delivery); node.send(msg); }); node.connection.on('disconnected', function(context) { // node disconnected node.status({fill: 'red', shape: 'dot', text: 'disconnected' }); }); node.on('input', function(msg) { // enough credits to send if (node.sender.sendable()) { node.sender.send(msg.payload); } }); node.on('close', function() { if (node.sender != null) node.sender.detach(); node.connection.close(); }); } } }. \n### Response: Node for AMQP sender.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void setObjectReference(final String name, final Object object) { if (objectRefs == null) { objectRefs = new HashMap<>(); } objectRefs.put(name, object); } \n### Response:", "ground_truth": "Saves object reference.", "predict": "Method-level comment: Sets a reference to an object in a map."}, {"ID": 711, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function setImageFile(File $imageFile = null) { $this->imageFile = $imageFile; if ($imageFile) { // It is required that at least one field changes if you are using doctrine // otherwise the event listeners won't be called and the file is lost $this->modified = new \\DateTimeImmutable(); } return $this; }. \n### Response: imageFile property is not persisted!\n\n@param File|null $imageFile\n\n@return $this.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public Object getObjectReference(final String name) { if (objectRefs == null) { return null; } return objectRefs.get(name); } \n### Response:", "ground_truth": "Returns object reference.", "predict": "objectRefs is a null reference, so it's not possible to retrieve an object reference with the given name.\n\n@param String name\n\n@return Object reference."}, {"ID": 712, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def load(self, path, name): \"\"\"Imports the specified ``fgic`` file from the hard disk. :param path: filedirectory to which the ``fgic`` file is written. :param name: filename, without file extension \"\"\" filename = name + '.fgic' filepath = aux.joinpath(path, filename) with zipfile.ZipFile(filepath, 'r') as containerZip: #Convert the zipfile data into a str object, necessary since #containerZip.read() returns a bytes object. jsonString = io.TextIOWrapper(containerZip.open('data'), encoding='utf-8' ).read() infoString = io.TextIOWrapper(containerZip.open('info'), encoding='utf-8' ).read() self.container = json.loads(jsonString, object_hook=Fgi.jsonHook) self.info.update(json.loads(infoString)) self._matrixTemplate = self.info['_matrixTemplate'] del self.info['_matrixTemplate']. \n### Response: Imports the specified ``fgic`` file from the hard disk.\n\n        :param path: filedirectory to which the ``fgic`` file is written.\n        :param name: filename, without file extension.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public Object lookupObject(final String ref) { Object value = getObjectReference(ref); if (value == null) { throw new DbSqlBuilderException(\"Invalid object reference: \" + ref); } return value; } \n### Response:", "ground_truth": "Lookups for object reference and throws an exception if reference doesn't exist.", "predict": "This method lookupObject(final String ref) is a public method in the class DbSqlBuilderException. It takes a string ref as an input and returns an object value. The method first calls getObjectReference(ref) to retrieve the object value. If the object value is null, it throws a DbSqlBuilderException with a message indicating that the object reference is invalid. Finally, the method returns the object value."}, {"ID": 713, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def reboot_instances(self, instance_ids=None): \"\"\" Reboot the specified instances. :type instance_ids: list :param instance_ids: The instances to terminate and reboot \"\"\" params = {} if instance_ids: self.build_list_params(params, instance_ids, 'InstanceId') return self.get_status('RebootInstances', params). \n### Response: Reboot the specified instances.\n\n        :type instance_ids: list\n        :param instance_ids: The instances to terminate and reboot.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public DbEntityDescriptor getTableDescriptor(final String tableRef) { if (tableRefs == null) { return null; } TableRefData t = tableRefs.get(tableRef); return t == null ? null : t.desc; } \n### Response:", "ground_truth": "Returns entity descriptor for provided table reference.", "predict": "The method `getTableDescriptor` retrieves the table description for the specified table reference.\n\n        :param tableRef: The table reference.\n\nThe method uses a `if` statement to check if there is a `TableRefData` object associated with the table reference. If there is, it retrieves the `desc` property of the `TableRefData` object and returns it. If there is no `TableRefData` object associated with the table reference, the method returns `null`."}, {"ID": 714, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func NewError(format string, args ...interface{}) Error { err := FmtError{format, args} return newCmnError(err) }. \n### Response: // New Error with formatted message.\n// The Error's Data will be a FmtError type..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public DbEntityDescriptor findTableDescriptorByColumnRef(final String columnRef) { for (Map.Entry<String, TableRefData> entry : tableRefs.entrySet()) { DbEntityDescriptor ded = entry.getValue().desc; if (ded.findByPropertyName(columnRef) != null) { return ded; } } return null; } \n### Response:", "ground_truth": "Finds entity descriptor of a table that contains provided column reference.", "predict": "// Find the DbEntityDescriptor for the given columnRef.\n// Return null if no such DbEntityDescriptor is found."}, {"ID": 715, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (l *WAL) ClosedSegments() ([]string, error) { l.mu.RLock() defer l.mu.RUnlock() // Not loading files from disk so nothing to do if l.path == \"\" { return nil, nil } var currentFile string if l.currentSegmentWriter != nil { currentFile = l.currentSegmentWriter.path() } files, err := segmentFileNames(l.path) if err != nil { return nil, err } var closedFiles []string for _, fn := range files { // Skip the current path if fn == currentFile { continue } closedFiles = append(closedFiles, fn) } return closedFiles, nil }. \n### Response: // ClosedSegments returns a slice of the names of the closed segment files..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public String getTableAlias(final String tableRef) { if (tableRefs == null) { return null; } TableRefData t = tableRefs.get(tableRef); return t == null ? null : t.alias; } \n### Response:", "ground_truth": "Returns table alias for provided table reference.", "predict": "// GetTableAlias returns the alias of the table specified by tableRef.."}, {"ID": 716, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def _enqueue(self, msg: Any, rid: int, signer: Signer) -> None: \"\"\" Enqueue the message into the remote's queue. :param msg: the message to enqueue :param rid: the id of the remote node \"\"\" if rid not in self.outBoxes: self.outBoxes[rid] = deque() self.outBoxes[rid].append(msg). \n### Response: Enqueue the message into the remote's queue.\n\n        :param msg: the message to enqueue\n        :param rid: the id of the remote node.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void registerTableReference(final String tableReference, final DbEntityDescriptor ded, final String tableAlias) { if (tableRefs == null) { tableRefs = new HashMap<>(); } TableRefData t = new TableRefData(ded, tableAlias); if (tableRefs.put(tableReference, t) != null) { throw new DbSqlBuilderException(\"Duplicated table reference: \" + tableReference); } } \n### Response:", "ground_truth": "Registers table reference for provided entity.", "predict": "Registers a table reference in the database.\n\n        :param tableReference: the table reference to register\n        :param ded: the DbEntityDescriptor for the table\n        :param tableAlias: the alias for the table\n        :return: None\n        :throwable: DbSqlBuilderException if a duplicate is found.\n\n"}, {"ID": 717, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function addSpan(DateTimeSpan $dtsSpan) { // And add the Span Second count to it $this->Timestamp = $this->Timestamp + $dtsSpan->Seconds; return $this; }. \n### Response: Add a datespan to the current date. Use add for adding a date interval.\n\n@param \\DateInterval|DateTimeSpan $dtsSpan\n@return $this.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected DbEntityDescriptor lookupTableRef(final String tableRef) { DbEntityDescriptor ded = getTableDescriptor(tableRef); if (ded == null) { throw new DbSqlBuilderException(\"Table reference not used in this query: \" + tableRef); } return ded; } \n### Response:", "ground_truth": "Lookups for table reference and throws an exception if table reference not found.", "predict": "lookupTableRef method returns the DbEntityDescriptor for the specified table reference.\n\n@param tableRef\n@return DbEntityDescriptor.\n\n"}, {"ID": 718, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function add($name, $value) { $this->arguments[] = '--add'; $this->arguments[] = $name; $this->arguments[] = $value; return $this; }. \n### Response: Add the add option and associated parameters to the command line.\n\n@param string $name  The config value name.\n\n@param string $value The value to use.\n\n@return ConfigCommandBuilder.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void registerHint(final String hint) { if (hints == null) { hints = new ArrayList<>(hintCount); } hints.add(hint); } \n### Response:", "ground_truth": "Registers a hint.", "predict": "Registers a hint with the ConfigCommandBuilder.\n\n@param string $hint The hint to register.\n\n@return void."}, {"ID": 719, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function create(array $attributes) { $model = $this->getModelName(); $nodeType = $model::create($attributes); $this->builderService->buildTable( $nodeType->getName(), $nodeType->getKey() ); return $nodeType; }. \n### Response: Creates a node type\n\n@param array $attributes\n@return NodeTypeContract.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public final boolean serialize(final JsonContext jsonContext, final T value) { if (jsonContext.pushValue(value)) { // prevent circular dependencies return false; } serializeValue(jsonContext, value); jsonContext.popValue(); return true; } \n### Response:", "ground_truth": "Detects circular dependencies and pushes value as current\ntype context.", "predict": "Serializes the given value and returns true.\n\n@param JsonContext jsonContext\n@return boolean."}, {"ID": 720, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (d *defaulter) AsDuration(v Valuer, dv time.Duration) time.Duration { value, err := v.Value() if err != nil { d.logValuerError(err) return dv } dvalue, err := time.ParseDuration(value) if err != nil { d.logFormatError(\"duration\", err) return dv } return dvalue }. \n### Response: // AsDuration implements Defaulter..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void injectAttributes(final HttpServletRequest servletRequest, final Targets targets) { final Enumeration<String> attributeNames = servletRequest.getAttributeNames(); while (attributeNames.hasMoreElements()) { final String attrName = attributeNames.nextElement(); targets.forEachTargetAndIn(this, (target, in) -> { final String name = in.matchedName(attrName); if (name != null) { final Object attrValue = servletRequest.getAttribute(attrName); target.writeValue(name, attrValue, true); } }); } } \n### Response:", "ground_truth": "Injects request attributes.", "predict": "// injectAttributes implements Targets.forEachTargetAndIn.."}, {"ID": 721, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function setDescription($desc) { $descAttribute = $this->descriptionAttribute; return is_string($descAttribute) ? $this->$descAttribute = $desc : null; }. \n### Response: Get description.\n@param string $desc description.\n@return string|null description if enabled, or null if disabled..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void injectParameters(final HttpServletRequest servletRequest, final Targets targets) { final boolean encode = encodeGetParams && servletRequest.getMethod().equals(\"GET\"); final Enumeration<String> paramNames = servletRequest.getParameterNames(); while (paramNames.hasMoreElements()) { final String paramName = paramNames.nextElement(); if (servletRequest.getAttribute(paramName) != null) { continue; } targets.forEachTargetAndIn(this, (target, in) -> { final String name = in.matchedName(paramName); if (name != null) { String[] paramValues = servletRequest.getParameterValues(paramName); paramValues = ServletUtil.prepareParameters( paramValues, treatEmptyParamsAsNull, ignoreEmptyRequestParams); if (paramValues != null) { if (encode) { for (int j = 0; j < paramValues.length; j++) { final String p = paramValues[j]; if (p != null) { final String encoding = madvocEncoding.getEncoding(); paramValues[j] = StringUtil.convertCharset(p, StringPool.ISO_8859_1, encoding); } } } final Object value = (paramValues.length != 1 ? paramValues : paramValues[0]); target.writeValue(name, value, true); } } }); } } \n### Response:", "ground_truth": "Inject request parameters.", "predict": "Provides a method to inject parameters into a target object.\n\n* Requires the `HttpServletRequest` and `Targets` classes to be imported.\n* Provides a way to get or set parameters for a GET request using the `getParameterNames()` and `getParameterValues()` methods of the `HttpServletRequest`.\n* Requires the `encodeGetParams` boolean flag to be set to true if you want to encode GET parameters.\n* Provides a way to iterate through all parameters for a target object using the `forEachTargetAndIn()` method of the `Targets` class.\n* Provides a way to prepare and convert parameters to/from a specific encoding using the `ServletUtil.prepareParameters()` and `StringUtil.convertCharset()` methods.\n* Provides a way to write the value of a parameter to a target object using the `target.writeValue()` method.\n\nNote: This method is used in the `Servlet` class of the `HttpServlet` package."}, {"ID": 722, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def update_settings(self, settings): \"\"\"Update the settings If a derived class has an ALLOWED_SETTINGS dict, we check here that incoming settings from the web app are allowed, and set the child properties as appropriate. \"\"\" def error_string(setting, setting_val): return ('{val} is not an acceptable value for ' 'parameter {param} for visualization' '{vis}.').format(val=setting_val, param=setting, vis=self.__class__.__name__) for setting in settings: if settings[setting] in self.ALLOWED_SETTINGS[setting]: # if the setting is allowed, set the attribute but remove # invalid variable characters # # see: # # https://stackoverflow.com/questions/3303312/how-do-i-convert-a-string-to-a-valid-variable-name-in-python setattr(self, '_' + re.sub('\\W|^(?=\\d)', '_', setting).lower(), settings[setting]) else: raise ValueError(error_string(settings[setting], setting)). \n### Response: Update the settings\n\n        If a derived class has an ALLOWED_SETTINGS dict, we check here that\n        incoming settings from the web app are allowed, and set the child\n        properties as appropriate..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void injectUploadedFiles(final HttpServletRequest servletRequest, final Targets targets) { if (!(servletRequest instanceof MultipartRequestWrapper)) { return; } final MultipartRequestWrapper multipartRequest = (MultipartRequestWrapper) servletRequest; if (!multipartRequest.isMultipart()) { return; } final Enumeration<String> paramNames = multipartRequest.getFileParameterNames(); while (paramNames.hasMoreElements()) { final String paramName = paramNames.nextElement(); if (servletRequest.getAttribute(paramName) != null) { continue; } targets.forEachTargetAndIn(this, (target, in) -> { final String name = in.matchedName(paramName); if (name != null) { final FileUpload[] paramValues = multipartRequest.getFiles(paramName); if (ignoreInvalidUploadFiles) { for (int j = 0; j < paramValues.length; j++) { final FileUpload paramValue = paramValues[j]; if ((!paramValue.isValid()) || (!paramValue.isUploaded())) { paramValues[j] = null; } } } final Object value = (paramValues.length == 1 ? paramValues[0] : paramValues); target.writeValue(name, value, true); } }); } } \n### Response:", "ground_truth": "Inject uploaded files from multipart request parameters.", "predict": "Injected uploaded files are processed for multipart requests.\n\n        If the request is not a multipart request, the method checks if the\n        request has a file parameter named \"paramName\" and if the\n        attribute \"servletRequest.getAttribute(paramName)\" is not null. If the\n        attribute is not null, the method retrieves the uploaded file for\n        the specified name and writes the value to the target object. If\n        the file is invalid or not uploaded, the method sets the value to null.\n\n        The method iterates through the targets and processes each\n        target and in case of a match with the name of the file parameter,\n        the method retrieves the uploaded file and writes the value to the\n        target object."}, {"ID": 723, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function updateFilter($id, $counterId, Models\\Filter $filter) { $resource = 'counter/' . $counterId . '/filter/' . $id; $response = $this->sendPutRequest($resource, [\"filter\" => $filter->toArray()]); $filterResponse = new Models\\UpdateFilterResponse($response); return $filterResponse->getFilter(); }. \n### Response: Update counter filter\n\n@see http://api.yandex.ru/metrika/doc/beta/management/filters/editfilter.xml\n\n@param int $id\n@param int $counterId\n@param  Models\\Filter $filter\n@return array.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public String convertPropertyNameToColumnName(final String propertyName) { StringBuilder tableName = new StringBuilder(propertyName.length() * 2); if (splitCamelCase) { String convertedTableName = Format.fromCamelCase(propertyName, separatorChar); tableName.append(convertedTableName); } else { tableName.append(propertyName); } if (!changeCase) { return tableName.toString(); } return uppercase ? toUppercase(tableName).toString() : toLowercase(tableName).toString(); } \n### Response:", "ground_truth": "Converts property name to column name.", "predict": "Convert column name to table name\n\n@see http://api.yandex.ru/metrika/doc/beta/management/filters/convertcolumnnametoColumnName.xml\n\n@param String propertyName\n@return String."}, {"ID": 724, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (c *ModelCommandBase) ActiveBranch() (string, error) { if c._activeBranch != \"\" { return c._activeBranch, nil } // If we need to look up the model generation, we need to ensure we // have access to the model details. if err := c.maybeInitModel(); err != nil { return \"\", errors.Trace(err) } details, err := c.store.ModelByName(c._controllerName, c._modelName) if err != nil { if !c.runStarted { return \"\", errors.Trace(err) } details, err = c.modelDetails(c._controllerName, c._modelName) if err != nil { return \"\", errors.Trace(err) } } c._activeBranch = details.ActiveBranch return c._activeBranch, nil }. \n### Response: // ActiveBranch implements the ModelCommand interface..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public String convertColumnNameToPropertyName(final String columnName) { StringBuilder propertyName = new StringBuilder(columnName.length()); int len = columnName.length(); if (splitCamelCase) { boolean toUpper = false; for (int i = 0; i < len; i++) { char c = columnName.charAt(i); if (c == separatorChar) { toUpper = true; continue; } if (toUpper) { propertyName.append(Character.toUpperCase(c)); toUpper = false; } else { propertyName.append(Character.toLowerCase(c)); } } return propertyName.toString(); } return columnName; } \n### Response:", "ground_truth": "Converts column name to property name.", "predict": "// Convert column name to PropertyName"}, {"ID": 725, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected function _handleOrderResponseErrors( $oPmResponseHandler ) { $aInitDataForPaymentStep = array(); // If order was declined, collect declination fields and unset error code (\"unexpected\" error) if ( $oPmResponseHandler->wasDeclined() ) { $aInitDataForPaymentStep = (array) $oPmResponseHandler->getDeclinationDataFromResponse(); } $aErrorsData = (array) $oPmResponseHandler->getErrorDataFromResponse(); // If there are errors add those to the data array if ( !empty( $aErrorsData ) ) { $aInitDataForPaymentStep = array_merge( $aInitDataForPaymentStep, $aErrorsData ); } // If order declination data or errors were present, save the data to session if ( !empty( $aInitDataForPaymentStep ) ) { $oPmResponseHandler->setErrorCode( null ); $this->_setSessionInitData( $aInitDataForPaymentStep ); } }. \n### Response: Check order response for declination status and fields and error fields.\nSet all relevant fields to session.\nThe session data is used to go with redirection to payment step and used to initialize payment forms.\n\n@param OxpsPaymorrowResponseHandler $oPmResponseHandler.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public String applyToColumnName(final String columnName) { String propertyName = convertColumnNameToPropertyName(columnName); return convertPropertyNameToColumnName(propertyName); } \n### Response:", "ground_truth": "Applies column naming strategy to given column name hint.\nReturns full column name.", "predict": "This method converts a column name to a property name and returns it.\n\n@param columnName the column name to convert."}, {"ID": 726, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected function setVersion($version) { // Set version of browser $this->version = $version; // If major and minor versions hasn't been set // we'll set them by parsing version. // // If version doesn't contain a \".\" then we'll only // set the major version. if (empty($this->majorVersion) && strpos($version, '.') !== false) { // Split version by comma $version = explode('.', $version); // Set major and minor version $this->majorVersion = (int) isset($version[0]) ? $version[0] : 0; $this->minorVersion = (int) isset($version[1]) ? $version[1] : 0; } else { $this->majorVersion = (int) $version; } return $this; }. \n### Response: Set version of browser.\n\n@author Morten Rugaard \n\n@param string $version\n\n@return $this.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void storeValue(final PreparedStatement st, final int index, final Object value, final int dbSqlType) throws SQLException { T t = TypeConverterManager.get().convertType(value, sqlType); set(st, index, t, dbSqlType); } \n### Response:", "ground_truth": "Stores value in database. Value is casted to sql type.", "predict": "Store value in PreparedStatement.\n\n@author Morten Rugaard\n\n@param PreparedStatement st\n\n@param int index\n\n@param T value\n\n@param int dbSqlType\n\n@throw SQLException"}, {"ID": 727, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def getPassagePlus(self, urn, inventory=None, context=None): \"\"\" Retrieve a passage and information about it :param urn: URN identifying the text's passage (Minimum depth : 1) :type urn: text :param inventory: Name of the inventory :type inventory: text :param context: Number of citation units at the same level of the citation hierarchy as the requested urn, immediately preceding and immediately following the requested urn to include in the reply :type context: int :rtype: str \"\"\" return self.call({ \"inv\": inventory, \"urn\": urn, \"context\": context, \"request\": \"GetPassagePlus\" }). \n### Response: Retrieve a passage and information about it\n\n        :param urn: URN identifying the text's passage (Minimum depth : 1)\n        :type urn: text\n        :param inventory: Name of the inventory\n        :type inventory: text\n        :param context: Number of citation units at the same level of the citation hierarchy as the requested urn, immediately preceding and immediately following the requested urn to include in the reply\n        :type context: int\n        :rtype: str.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @SuppressWarnings({\"unchecked\"}) protected <E> E prepareGetValue(final T t, final Class<E> destinationType) { if (t == null) { return null; } if (destinationType == null) { return (E) t; } return TypeConverterManager.get().convertType(t, destinationType); } \n### Response:", "ground_truth": "Once when value is read from result set, prepare it to match destination type.\n@param t get value\n@param destinationType destination type", "predict": "This method is used to prepare a value of a specific type for a given input. It is marked with the @SuppressWarnings({\"unchecked\"}) annotation to indicate that the code should be executed with caution, as it may use unchecked operations.\n\nThe method takes a T t and a Class<E> destinationType as inputs. It first checks if the input is null, and if so, returns null. If the destinationType is null, it returns the input. If the destinationType is not null, it returns the type of the input as a Class<E> object. Finally, it uses the TypeConverterManager.get().convertType() method to convert the input to the destinationType.\n\nThis method is likely used in a Java library or framework that provides a way to convert between different data types. It is important to use this method carefully, as unchecked operations can lead to unexpected results or errors if not handled properly."}, {"ID": 728, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected function request_proxy_data($data) { if (isset($this->params['rescued'])) { return $data; } $data['$proxy'] = array( 'client' => isset($this->params['route']['client']) ? $this->params['route']['client'] : $this->params['client_id'], 'host' => $this->params['host'], 'port' => $this->params['port'] ); if (is_array($this->params['proxy'])) { $this->server->options['clear'] = isset($this->params['proxy']['clear']) ? $this->params['proxy']['clear'] : false; $this->server->options['host'] = isset($this->params['proxy']['host']) ? $this->params['proxy']['host'] : $this->params['host']; $this->server->options['port'] = isset($this->params['proxy']['port']) ? $this->params['proxy']['port'] : $this->params['port']; } return $data; }. \n### Response: Modify request to pass through an API proxy\n\n@param  array $data\n@return array.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected Set<T> getAll() { final Set<T> set = new HashSet<>(wrappers.size()); set.addAll(wrappers.values()); return set; } \n### Response:", "ground_truth": "Returns all action wrappers. Returns a copy in new set.", "predict": "Modify all wrappers to return a set of their values.\n\n@param  wrappers An array of wrapper objects.\n@return A set of the wrapper's values."}, {"ID": 729, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function find ($request, $match) { // check for collection if (isset($match['collectionId'])) { $collectionId = $match['collectionId']; } elseif (isset($request->REQUEST['collectionId'])) { $collectionId = $request->REQUEST['collectionId']; } $document = new Collection_Document(); $paginator = new Pluf_Paginator($document); if (isset($collectionId)) { $sql = new Pluf_SQL('collection=%s', array( $collectionId )); $paginator->forced_where = $sql; } $paginator->list_filters = array( 'id' ); $search_fields = array( 'id' ); $sort_fields = array( 'id', 'collection' ); $paginator->configure(array(), $search_fields, $sort_fields); $paginator->items_per_page = Collection_Shortcuts_NormalizeItemPerPage( $request); $paginator->setFromRequest($request); $docs = $paginator->render_object(); // TODO: maso, 2017: pass list of attributes foreach ($docs['items'] as $key => $value) { $docs['items'][$key] = $this->getDocumentMap($value); } return new Pluf_HTTP_Response_Json($docs); }. \n### Response: Search for an document\n\n@param Pluf_HTTP_Request $request\n@param array $match\n@return Pluf_HTTP_Response_Json.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public T resolve(final Class<? extends T> wrapperClass) { String wrapperClassName = wrapperClass.getName(); T wrapper = lookup(wrapperClassName); if (wrapper == null) { wrapper = createWrapper(wrapperClass); initializeWrapper(wrapper); wrappers.put(wrapperClassName, wrapper); } return wrapper; } \n### Response:", "ground_truth": "Resolves single wrapper. Creates new wrapper instance if not already registered.\nDoes not expand the wrappers.", "predict": "Resolve a wrapper class to a T object\n\n@param Class<T> $wrapperClass\n@return T."}, {"ID": 730, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (rc *RedisConnector) NewPool(socketPath, host, password string, db int, cnf *config.RedisConfig, tlsConfig *tls.Config) *redis.Pool { if cnf == nil { cnf = defaultConfig } return &redis.Pool{ MaxIdle: cnf.MaxIdle, IdleTimeout: time.Duration(cnf.IdleTimeout) * time.Second, MaxActive: cnf.MaxActive, Wait: cnf.Wait, Dial: func() (redis.Conn, error) { c, err := rc.open(socketPath, host, password, db, cnf, tlsConfig) if err != nil { return nil, err } if db != 0 { _, err = c.Do(\"SELECT\", db) if err != nil { return nil, err } } return c, err }, // PINGs connections that have been idle more than 10 seconds TestOnBorrow: func(c redis.Conn, t time.Time) error { if time.Since(t) < time.Duration(10*time.Second) { return nil } _, err := c.Do(\"PING\") return err }, } }. \n### Response: // NewPool returns a new pool of Redis connections.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected <R extends T> R createWrapper(final Class<R> wrapperClass) { try { return ClassUtil.newInstance(wrapperClass); } catch (Exception ex) { throw new MadvocException(\"Invalid Madvoc wrapper: \" + wrapperClass, ex); } } \n### Response:", "ground_truth": "Creates new wrapper.", "predict": "// CreateWrapper creates an instance of a Madvoc wrapper for a given class."}, {"ID": 731, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func readProjectConfig(c context.Context, task proto.Message) error { projectID := task.(*internal.ReadProjectConfigTask).ProjectId ctx, cancel := context.WithTimeout(c, 150*time.Second) defer cancel() jobs, err := globalCatalog.GetProjectJobs(ctx, projectID) if err != nil { logging.WithError(err).Errorf(c, \"Failed to query for a list of jobs\") return err } if err := globalEngine.UpdateProjectJobs(ctx, projectID, jobs); err != nil { logging.WithError(err).Errorf(c, \"Failed to update some jobs\") return err } return nil }. \n### Response: // readProjectConfig grabs a list of jobs in a project from catalog, updates\n// all changed jobs, adds new ones, disables old ones..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String separatorsToSystem(final String path) { if (path == null) { return null; } if (SYSTEM_SEPARATOR == WINDOWS_SEPARATOR) { return separatorsToWindows(path); } else { return separatorsToUnix(path); } } \n### Response:", "ground_truth": "Converts all separators to the system separator.\n\n@param path  the path to be changed, null ignored\n@return the updated path", "predict": "// separatorsToSystem returns the separators for the specified path, considering\n// whether it is a Windows or Unix system."}, {"ID": 732, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static function getEventListeners() { $listeners = array(); $reflection = new ReflectionClass(get_called_class()); foreach ($reflection->getMethods(ReflectionMethod::IS_PUBLIC) as $method) { if(substr($method->name, 0, 2) == 'on') { $listeners[] = $method->name; } } return $listeners; }. \n### Response: Get the event listeners\n\n@return array.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private static String doGetPath(final String filename, final int separatorAdd) { if (filename == null) { return null; } int prefix = getPrefixLength(filename); if (prefix < 0) { return null; } int index = indexOfLastSeparator(filename); int endIndex = index + separatorAdd; if (prefix >= filename.length() || index < 0 || prefix >= endIndex) { return StringPool.EMPTY; } return filename.substring(prefix, endIndex); } \n### Response:", "ground_truth": "Does the work of getting the path.\n\n@param filename  the filename\n@param separatorAdd  0 to omit the end separator, 1 to return it\n@return the path", "predict": "Do something with the file path\n\n@return the file path."}, {"ID": 733, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func RegisterOps(codec kbfscodec.Codec) { codec.RegisterType(reflect.TypeOf(createOp{}), createOpCode) codec.RegisterType(reflect.TypeOf(rmOp{}), rmOpCode) codec.RegisterType(reflect.TypeOf(renameOp{}), renameOpCode) codec.RegisterType(reflect.TypeOf(syncOp{}), syncOpCode) codec.RegisterType(reflect.TypeOf(setAttrOp{}), setAttrOpCode) codec.RegisterType(reflect.TypeOf(resolutionOp{}), resolutionOpCode) codec.RegisterType(reflect.TypeOf(rekeyOp{}), rekeyOpCode) codec.RegisterType(reflect.TypeOf(GCOp{}), gcOpCode) codec.RegisterIfaceSliceType(reflect.TypeOf(opsList{}), opsListCode, opPointerizer) }. \n### Response: // RegisterOps registers all op types with the given codec..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String[] split(final String filename) { String prefix = getPrefix(filename); if (prefix == null) { prefix = StringPool.EMPTY; } int lastSeparatorIndex = indexOfLastSeparator(filename); int lastExtensionIndex = indexOfExtension(filename); String path; String baseName; String extension; if (lastSeparatorIndex == -1) { path = StringPool.EMPTY; if (lastExtensionIndex == -1) { baseName = filename.substring(prefix.length()); extension = StringPool.EMPTY; } else { baseName = filename.substring(prefix.length(), lastExtensionIndex); extension = filename.substring(lastExtensionIndex + 1); } } else { path = filename.substring(prefix.length(), lastSeparatorIndex + 1); if (lastExtensionIndex == -1) { baseName = filename.substring(prefix.length() + path.length()); extension = StringPool.EMPTY; } else { baseName = filename.substring(prefix.length() + path.length(), lastExtensionIndex); extension = filename.substring(lastExtensionIndex + 1); } } return new String[] {prefix, path, baseName, extension}; } \n### Response:", "ground_truth": "Splits filename into a array of four Strings containing prefix, path, basename and extension.\nPath will contain ending separator.", "predict": "// Splits a given filename into its prefix, path, base name, and extension.."}, {"ID": 734, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def process_text(text, pmid=None, python2_path=None): \"\"\"Processes the specified plain text with TEES and converts output to supported INDRA statements. Check for the TEES installation is the TEES_PATH environment variable, and configuration file; if not found, checks candidate paths in tees_candidate_paths. Raises an exception if TEES cannot be found in any of these places. Parameters ---------- text : str Plain text to process with TEES pmid : str The PMID from which the paper comes from, to be stored in the Evidence object of statements. Set to None if this is unspecified. python2_path : str TEES is only compatible with python 2. This processor invokes this external python 2 interpreter so that the processor can be run in either python 2 or python 3. If None, searches for an executible named python2 in the PATH environment variable. Returns ------- tp : TEESProcessor A TEESProcessor object which contains a list of INDRA statements extracted from TEES extractions \"\"\" # Try to locate python2 in one of the directories of the PATH environment # variable if it is not provided if python2_path is None: for path in os.environ[\"PATH\"].split(os.pathsep): proposed_python2_path = os.path.join(path, 'python2.7') if os.path.isfile(proposed_python2_path): python2_path = proposed_python2_path print('Found python 2 interpreter at', python2_path) break if python2_path is None: raise Exception('Could not find python2 in the directories ' + 'listed in the PATH environment variable. ' + 'Need python2 to run TEES.') # Run TEES a1_text, a2_text, sentence_segmentations = run_on_text(text, python2_path) # Run the TEES processor tp = TEESProcessor(a1_text, a2_text, sentence_segmentations, pmid) return tp. \n### Response: Processes the specified plain text with TEES and converts output to\n    supported INDRA statements. Check for the TEES installation is the\n    TEES_PATH environment variable, and configuration file; if not found,\n    checks candidate paths in tees_candidate_paths. Raises an exception if\n    TEES cannot be found in any of these places.\n\n    Parameters\n    ----------\n    text : str\n        Plain text to process with TEES\n    pmid : str\n        The PMID from which the paper comes from, to be stored in the Evidence\n        object of statements. Set to None if this is unspecified.\n    python2_path : str\n        TEES is only compatible with python 2. This processor invokes this\n        external python 2 interpreter so that the processor can be run in\n        either python 2 or python 3. If None, searches for an executible named\n        python2 in the PATH environment variable.\n\n    Returns\n    -------\n    tp : TEESProcessor\n        A TEESProcessor object which contains a list of INDRA statements\n        extracted from TEES extractions.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String relativePath(final String targetPath, final String basePath) { return new File(basePath).toPath().relativize(new File(targetPath).toPath()).toString(); } \n### Response:", "ground_truth": "Calculates relative path of target path on base path.", "predict": "Returns the relative path of the target file relative to the base path."}, {"ID": 735, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def enable_evb(self): \"\"\"Function to enable EVB on the interface. \"\"\" if self.is_ncb: self.run_lldptool([\"-T\", \"-i\", self.port_name, \"-g\", \"ncb\", \"-V\", \"evb\", \"enableTx=yes\"]) ret = self.enable_gpid() return ret else: LOG.error(\"EVB cannot be set on NB\") return False. \n### Response: Function to enable EVB on the interface..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public WebApp registerComponent(final Class<?> madvocComponent) { Objects.requireNonNull(madvocComponent); madvocComponents.add(ClassConsumer.of(madvocComponent)); return this; } \n### Response:", "ground_truth": "Registers additional Madvoc components after the registration of default components.", "predict": "Method-level comment for the WebApp registerComponent() method:\n```\n// Registers the specified madvocComponent with the madvocComponents list.\n// This method requires the madvocComponent to be non-null and adds it to the list.\n```"}, {"ID": 736, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def get_smart_task(self, task_id): \"\"\" Return specified transition. Returns a Command. \"\"\" def process_result(result): return SmartTask(self, result) return Command('get', [ROOT_SMART_TASKS, task_id], process_result=process_result). \n### Response: Return specified transition.\n\n        Returns a Command..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public <A extends ActionConfig> WebApp withActionConfig(final Class<A> actionConfigType, final Consumer<A> actionConfigConsumer) { withRegisteredComponent(ActionConfigManager.class, acm -> acm.with(actionConfigType, actionConfigConsumer)); return this; } \n### Response:", "ground_truth": "Configures the action configurations.", "predict": "This method is used to register an action configuration component with the WebApp. It takes in two parameters:\n\n* `actionConfigType`: the type of the action configuration component to register. This can be a class, interface, or a consumer of the action configuration component.\n* `actionConfigConsumer`: a consumer of the action configuration component. This can be a lambda function that takes in the action configuration component and returns a value.\n\nThe method uses the `with` method from the `ActionConfigManager` class to register the action configuration component with the WebApp. The `with` method takes in two parameters:\n\n* `actionConfigType`: the type of the action configuration component to register.\n* `actionConfigConsumer`: a consumer of the action configuration component.\n\nThe method returns the WebApp itself, which allows the method to be used as a constructor for the WebApp.\n\nOverall, this method is used to register an action configuration component with the WebApp and is useful for implementing custom action configurations for the WebApp."}, {"ID": 737, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def _check_voSet(orb,kwargs,funcName): \"\"\"Function to check whether vo is set, because it's required for funcName\"\"\" if not orb._voSet and kwargs.get('vo',None) is None: warnings.warn(\"Method %s(.) requires vo to be given at Orbit initialization or at method evaluation; using default vo which is %f km/s\" % (funcName,orb._vo), galpyWarning). \n### Response: Function to check whether vo is set, because it's required for funcName.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public WebApp start() { log = LoggerFactory.getLogger(WebApp.class); log.debug(\"Initializing Madvoc WebApp\"); //// params & props for (final Map<String, Object> params : paramsList) { madvocContainer.defineParams(params); } for (final Props props : propsList) { madvocContainer.defineParams(props); } propsList = null; //// components registerMadvocComponents(); madvocComponents.forEach( madvocComponent -> madvocContainer.registerComponent(madvocComponent.type(), madvocComponent.consumer())); madvocComponents = null; madvocComponentInstances.forEach(madvocContainer::registerComponentInstance); madvocComponentInstances = null; configureDefaults(); //// listeners madvocContainer.fireEvent(Init.class); //// component configuration componentConfigs.accept(madvocContainer); componentConfigs = null; initialized(); madvocContainer.fireEvent(Start.class); if (!madvocRouterConsumers.isEmpty()) { final MadvocRouter madvocRouter = MadvocRouter.create(); madvocContainer.registerComponentInstance(madvocRouter); madvocRouterConsumers.accept(madvocRouter); } madvocRouterConsumers = null; started(); madvocContainer.fireEvent(Ready.class); ready(); return this; } \n### Response:", "ground_truth": "Initializes and starts web application.", "predict": "Method to initialize Madvoc WebApp, log debug, params & props, register MadvocComponents, register component instances, configureDefaults, initialize, fire events, start, fire events, ready and return this."}, {"ID": 738, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def _get_invoke_config(self, function): \"\"\" Returns invoke configuration to pass to Lambda Runtime to invoke the given function :param samcli.commands.local.lib.provider.Function function: Lambda function to generate the configuration for :return samcli.local.lambdafn.config.FunctionConfig: Function configuration to pass to Lambda runtime \"\"\" env_vars = self._make_env_vars(function) code_abs_path = resolve_code_path(self.cwd, function.codeuri) LOG.debug(\"Resolved absolute path to code is %s\", code_abs_path) function_timeout = function.timeout # The Runtime container handles timeout inside the container. When debugging with short timeouts, this can # cause the container execution to stop. When in debug mode, we set the timeout in the container to a max 10 # hours. This will ensure the container doesn't unexpectedly stop while debugging function code if self.is_debugging(): function_timeout = self.MAX_DEBUG_TIMEOUT return FunctionConfig(name=function.name, runtime=function.runtime, handler=function.handler, code_abs_path=code_abs_path, layers=function.layers, memory=function.memory, timeout=function_timeout, env_vars=env_vars). \n### Response: Returns invoke configuration to pass to Lambda Runtime to invoke the given function\n\n        :param samcli.commands.local.lib.provider.Function function: Lambda function to generate the configuration for\n        :return samcli.local.lambdafn.config.FunctionConfig: Function configuration to pass to Lambda runtime.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void configureDefaults() { final ActionConfigManager actionConfigManager = madvocContainer.lookupComponent(ActionConfigManager.class); actionConfigManager.registerAnnotation(Action.class); actionConfigManager.registerAnnotation(RestAction.class); } \n### Response:", "ground_truth": "Configure defaults.", "predict": "Configures the default behavior of the  Madvoc container.\n\n        :param samcli.commands.local.lib.provider.madvocContainer: Madvoc container\n        :returnvoid: Provides default configuration for the  Madvoc container.\n\nNote: This method is not used in the example code provided.\n```vbnet\n```"}, {"ID": 739, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected function getSingleKeyValue($actionKey) { $query = new ObjectQuery($this->entityType, __CLASS__.__METHOD__); $tpl = $query->getObjectTemplate($this->entityType); $actionKeyParams = ActionKey::parseKey($actionKey); $tpl->setValue($this->valueMap['resource'], Criteria::asValue('=', $actionKeyParams['resource'])); $tpl->setValue($this->valueMap['context'], Criteria::asValue('=', $actionKeyParams['context'])); $tpl->setValue($this->valueMap['action'], Criteria::asValue('=', $actionKeyParams['action'])); $keys = $query->execute(BuildDepth::SINGLE); if (sizeof($keys) > 0) { return $keys[0]->getValue($this->valueMap['value']); } return null; }. \n### Response: Get a single key value from the storage\n@param $actionKey The action key\n@return String.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void registerMadvocComponents() { if (madvocContainer == null) { throw new MadvocException(\"Madvoc WebApp not initialized.\"); } log.debug(\"Registering Madvoc WebApp components\"); madvocContainer.registerComponent(MadvocEncoding.class); madvocContainer.registerComponentInstance(new ServletContextProvider(servletContext)); madvocContainer.registerComponent(ActionConfigManager.class); madvocContainer.registerComponent(ActionMethodParamNameResolver.class); madvocContainer.registerComponent(ActionMethodParser.class); madvocContainer.registerComponent(ActionPathRewriter.class); madvocContainer.registerComponent(ActionsManager.class); madvocContainer.registerComponent(ContextInjectorComponent.class); madvocContainer.registerComponent(InterceptorsManager.class); madvocContainer.registerComponent(FiltersManager.class); madvocContainer.registerComponent(MadvocController.class); madvocContainer.registerComponent(RootPackages.class); madvocContainer.registerComponent(ResultsManager.class); madvocContainer.registerComponent(ResultMapper.class); madvocContainer.registerComponent(ScopeResolver.class); madvocContainer.registerComponent(ScopeDataInspector.class); madvocContainer.registerComponent(AsyncActionExecutor.class); madvocContainer.registerComponent(FileUploader.class); } \n### Response:", "ground_truth": "Registers default Madvoc components.", "predict": "Registers Madvoc WebApp components.\n@param madvocContainer The container to register components in.\n@return void."}, {"ID": 740, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def parse_selectors(self, raw_selectors): \"\"\" Parses out the old xCSS \"foo extends bar\" syntax. Returns a 2-tuple: a set of selectors, and a set of extended selectors. \"\"\" # Fix tabs and spaces in selectors raw_selectors = _spaces_re.sub(' ', raw_selectors) parts = _xcss_extends_re.split(raw_selectors, 1) # handle old xCSS extends if len(parts) > 1: unparsed_selectors, unsplit_parents = parts # Multiple `extends` are delimited by `&` unparsed_parents = unsplit_parents.split('&') else: unparsed_selectors, = parts unparsed_parents = () selectors = Selector.parse_many(unparsed_selectors) parents = [Selector.parse_one(parent) for parent in unparsed_parents] return selectors, parents. \n### Response: Parses out the old xCSS \"foo extends bar\" syntax.\n\n        Returns a 2-tuple: a set of selectors, and a set of extended selectors..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public ClassScanner excludeJars(final String... excludedJars) { for (final String excludedJar : excludedJars) { rulesJars.exclude(excludedJar); } return this; } \n### Response:", "ground_truth": "Specify excluded jars.", "predict": "Excludes all Jar files from the rulesJars list.\n\n        Returns this object."}, {"ID": 741, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def get_ddo(self, ont_id: str) -> dict: \"\"\" This interface is used to get a DDO object in the from of dict. :param ont_id: the unique ID for identity. :return: a description object of ONT ID in the from of dict. \"\"\" args = dict(ontid=ont_id.encode('utf-8')) invoke_code = build_vm.build_native_invoke_code(self.__contract_address, self.__version, 'getDDO', args) unix_time_now = int(time()) tx = Transaction(0, 0xd1, unix_time_now, 0, 0, None, invoke_code, bytearray(), []) response = self.__sdk.rpc.send_raw_transaction_pre_exec(tx) ddo = OntId.parse_ddo(ont_id, response['Result']) return ddo. \n### Response: This interface is used to get a DDO object in the from of dict.\n\n        :param ont_id: the unique ID for identity.\n        :return: a description object of ONT ID in the from of dict..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public ClassScanner includeJars(final String... includedJars) { for (final String includedJar : includedJars) { rulesJars.include(includedJar); } return this; } \n### Response:", "ground_truth": "Specify included jars.", "predict": "This method is used to scan all included Jars in the given list of includedJars and include them in the rulesJars.\n\n        public ClassScanner includeJars(final String... includedJars) {\n            for (final String includedJar : includedJars) {\n                rulesJars.include(includedJar);\n            }\n            return this;\n        }"}, {"ID": 742, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def _parse_part(client, command, actor, args): \"\"\"Parse a PART and update channel states, then dispatch events. Note that two events are dispatched here: - PART, because a user parted the channel - MEMBERS, because the channel's members changed \"\"\" actor = User(actor) channel, _, message = args.partition(' :') channel = client.server.get_channel(channel) channel.remove_user(actor) if actor.nick == client.user.nick: client.server.remove_channel(channel) client.dispatch_event(\"PART\", actor, channel, message) if actor.nick != client.user.nick: client.dispatch_event(\"MEMBERS\", channel). \n### Response: Parse a PART and update channel states, then dispatch events.\n\n    Note that two events are dispatched here:\n        - PART, because a user parted the channel\n        - MEMBERS, because the channel's members changed.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public ClassScanner includeEntries(final String... includedEntries) { for (final String includedEntry : includedEntries) { rulesEntries.include(includedEntry); } return this; } \n### Response:", "ground_truth": "Sets included set of names that will be considered during configuration.\n@see InExRules", "predict": "public ClassScanner includeEntries(final String... includedEntries)\n```kotlin\n* This method iterates through the specified array of includedEntries and\n* includes each entry in the rulesEntries array.\n*\n* Return this object to indicate that the method has completed its operation.\n```"}, {"ID": 743, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function getNumber() { const type = NodeType.NumberType; const token = tokens[pos]; const line = token.ln; const column = token.col; const l = tokens[pos].number_l; let content = ''; for (let j = 0; j < l; j++) { content += tokens[pos + j].value; } pos += l; return newNode(type, content, line, column); }. \n### Response: Get node with number\n@return {Array} `['number', x]` where `x` is a number converted\nto string..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public ClassScanner excludeEntries(final String... excludedEntries) { for (final String excludedEntry : excludedEntries) { rulesEntries.exclude(excludedEntry); } return this; } \n### Response:", "ground_truth": "Sets excluded names that narrows included set of packages.\n@see InExRules", "predict": "Exclude entries from rules\n@return {ClassScanner} this\n\n"}, {"ID": 744, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected function getCategoryMenuOptions($obCategoryList) { if (empty($obCategoryList) || $obCategoryList->isEmpty()) { return null; } $arResult = []; foreach ($obCategoryList as $obCategory) { if ($obCategory->children->isEmpty()) { $arResult[$obCategory->id] = $obCategory->name; } else { $arResult[$obCategory->id] = [ 'title' => $obCategory->name, 'items' => $this->getCategoryMenuOptions($obCategory->children), ]; } } return $arResult; }. \n### Response: Get option array for category\n@param CategoryCollection|\\Lovata\\Shopaholic\\Classes\\Item\\CategoryItem[] $obCategoryList\n@return null|array|string.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void scanJarFile(final File file) { final ZipFile zipFile; try { zipFile = new ZipFile(file); } catch (IOException ioex) { if (!ignoreException) { throw new FindFileException(\"Invalid zip: \" + file.getName(), ioex); } return; } final Enumeration entries = zipFile.entries(); while (entries.hasMoreElements()) { final ZipEntry zipEntry = (ZipEntry) entries.nextElement(); final String zipEntryName = zipEntry.getName(); try { if (StringUtil.endsWithIgnoreCase(zipEntryName, CLASS_FILE_EXT)) { final String entryName = prepareEntryName(zipEntryName, true); final ClassPathEntry classPathEntry = new ClassPathEntry(entryName, zipFile, zipEntry); try { scanEntry(classPathEntry); } finally { classPathEntry.closeInputStream(); } } else if (includeResources) { final String entryName = prepareEntryName(zipEntryName, false); final ClassPathEntry classPathEntry = new ClassPathEntry(entryName, zipFile, zipEntry); try { scanEntry(classPathEntry); } finally { classPathEntry.closeInputStream(); } } } catch (RuntimeException rex) { if (!ignoreException) { ZipUtil.close(zipFile); throw rex; } } } ZipUtil.close(zipFile); } \n### Response:", "ground_truth": "Scans classes inside single JAR archive. Archive is scanned as a zip file.\n@see #onEntry(ClassPathEntry)", "predict": "Scans a jar file for class path resources and returns the result.\n\n@param File $file\n@return null|void."}, {"ID": 745, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def to_dict(self): '''Save this data port connector into a dictionary.''' d = {'connectorId': self.connector_id, 'name': self.name, 'dataType': self.data_type, 'interfaceType': self.interface_type, 'dataflowType': self.data_flow_type, 'sourceDataPort': self.source_data_port.to_dict(), 'targetDataPort': self.target_data_port.to_dict()} if self.visible != True: d[RTS_EXT_NS_YAML + 'visible'] = self.visible if self.subscription_type: d['subscriptionType'] = self.subscription_type if self.push_interval: d['pushInterval'] = self.push_interval if self.comment: d[RTS_EXT_NS_YAML + 'comment'] = self.comment props = [] for name in self.properties: p = {'name': name} if self.properties[name]: p['value'] = str(self.properties[name]) props.append(p) if props: d[RTS_EXT_NS_YAML + 'properties'] = props return d. \n### Response: Save this data port connector into a dictionary..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void scanClassPath(final File root) { String rootPath = root.getAbsolutePath(); if (!rootPath.endsWith(File.separator)) { rootPath += File.separatorChar; } final FindFile ff = FindFile.create().includeDirs(false).recursive(true).searchPath(rootPath); File file; while ((file = ff.nextFile()) != null) { final String filePath = file.getAbsolutePath(); try { if (StringUtil.endsWithIgnoreCase(filePath, CLASS_FILE_EXT)) { scanClassFile(filePath, rootPath, file, true); } else if (includeResources) { scanClassFile(filePath, rootPath, file, false); } } catch (RuntimeException rex) { if (!ignoreException) { throw rex; } } } } \n### Response:", "ground_truth": "Scans single classpath directory.\n@see #onEntry(ClassPathEntry)", "predict": "Scan class path and include resources."}, {"ID": 746, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func EncryptMultiPart(r io.Reader, partID int, key ObjectKey) io.Reader { partKey := key.DerivePartKey(uint32(partID)) return EncryptSinglePart(r, ObjectKey(partKey)) }. \n### Response: // EncryptMultiPart encrypts an io.Reader which must be the body of\n// multi-part PUT request. It derives an unique encryption key from\n// the partID and the object key..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static byte[] bytecodeSignatureOfType(final Class type) { final String name = 'L' + type.getName().replace('.', '/') + ';'; return name.getBytes(); } \n### Response:", "ground_truth": "Returns type signature bytes used for searching in class file.", "predict": "// Returns the bytecode signature for the given Class type."}, {"ID": 747, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def main(argv=sys.argv, stream=sys.stderr): \"\"\"Entry point for ``tappy`` command.\"\"\" args = parse_args(argv) suite = build_suite(args) runner = unittest.TextTestRunner(verbosity=args.verbose, stream=stream) result = runner.run(suite) return get_status(result). \n### Response: Entry point for ``tappy`` command..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public ClassScanner scan(final String... paths) { for (final String path : paths) { filesToScan.add(new File(path)); } return this; } \n### Response:", "ground_truth": "Scans provided paths.", "predict": "Method comment:\n```\npublic ClassScanner scan(final String... paths) {\n    // This method scans the specified paths and returns a list of File objects.\n    for (final String path : paths) {\n        // This loop iterates over each path and creates a File object.\n        filesToScan.add(new File(path));\n    }\n    return this;\n}\n```"}, {"ID": 748, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def decrypt(self, data): \"\"\" DES decrypts the data based on the key it was initialised with. :param data: The encrypted bytes string to decrypt :return: The decrypted bytes string \"\"\" decrypted_data = b\"\" for i in range(0, len(data), 8): block = data[i:i + 8] block_length = len(block) if block_length != 8: raise ValueError(\"DES decryption must be a multiple of 8 \" \"bytes\") decrypted_data += self._decode_block(block) return decrypted_data. \n### Response: DES decrypts the data based on the key it was initialised with.\n\n        :param data: The encrypted bytes string to decrypt\n        :return: The decrypted bytes string.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void start() { if (detectEntriesMode) { rulesEntries.detectMode(); } filesToScan.forEach(file -> { final String path = file.getAbsolutePath(); if (StringUtil.endsWithIgnoreCase(path, JAR_FILE_EXT)) { if (!acceptJar(file)) { return; } scanJarFile(file); } else if (file.isDirectory()) { scanClassPath(file); } }); } \n### Response:", "ground_truth": "Starts with the scanner.", "predict": "```\n        public void start()\n        {\n            if (detectEntriesMode)\n            {\n                rulesEntries.detectMode();\n            }\n            filesToScan.forEach(file -> {\n                final String path = file.getAbsolutePath();\n                if (StringUtil.endsWithIgnoreCase(path, JAR_FILE_EXT))\n                {\n                    if (!acceptJar(file))\n                    {\n                        return;\n                    }\n                    scanJarFile(file);\n                }\n                else if (file.isDirectory())\n                {\n                    scanClassPath(file);\n                }\n            });\n        }\n```\n\n        :param detectEntriesMode: The method to use for detecting the entry mode\n        :return: void\n        \n        This method starts the scanning process by checking if the specified files are Jar files and if so, it will scan them. If not, it will check if the files are directories and if so, it will scan the directories.\n        \n        Note: This method uses the StringUtil class to check if the file extension of the file is JAR_FILE_EXT and if so, it will use the acceptJar method to scan the file.\n        \n        Note: This method uses the scanJarFile and scanClassPath methods to scan the specified files and directories.\n```"}, {"ID": 749, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def random_pairs_with_replacement(n, shape, random_state=None): \"\"\"make random record pairs\"\"\" if not isinstance(random_state, np.random.RandomState): random_state = np.random.RandomState(random_state) n_max = max_pairs(shape) if n_max <= 0: raise ValueError('n_max must be larger than 0') # make random pairs indices = random_state.randint(0, n_max, n) if len(shape) == 1: return _map_tril_1d_on_2d(indices, shape[0]) else: return np.unravel_index(indices, shape). \n### Response: make random record pairs.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override protected JtxTransaction createNewTransaction(final JtxTransactionMode tm, final Object scope, final boolean active) { return new DbJtxTransaction(this, tm, scope, active); } \n### Response:", "ground_truth": "Builds new transaction instance.", "predict": "```\n\"\"\"Create a new transaction.\"\"\"\n\nreturn new DbJtxTransaction(this, tm, scope, active);\n```"}, {"ID": 750, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function supportsApplication(Request $request): bool { return in_array($request->getApplicationId(), $this->supportedApplicationIds, true); }. \n### Response: Check if the request handler can handle given request from skill.\n\n@param Request $request\n\n@return bool.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @SuppressWarnings(\"unchecked\") public <S extends MadvocScope> S defaultOrScopeType(final Class<S> scopeClass) { if (scopeClass == null) { return (S) getOrInitScope(RequestScope.class); } return (S) getOrInitScope(scopeClass); } \n### Response:", "ground_truth": "Lookups the scope instance of given scope annotation.\nIf instance does not exist, it will be created, cached and returned.", "predict": "This method is used to return the default or initial scope type for a given MadvocScope class. It checks if the given scope class is null and returns the default (RequestScope) type if it is, otherwise it returns the type obtained from the getOrInitScope() method. This method is useful when you don't want to specify the scope type explicitly and want to use the default behavior.\n\n@param Class<S> scopeClass\n\n@return S."}, {"ID": 751, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function getMultiple(string ...$keys): array { $ret = []; foreach ($keys as $key) { $ret[] = $this->get($key); } return $ret; }. \n### Response: Get multiple header values\n\n@param string ...$keys\n@return array.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected MadvocScope getOrInitScope(final Class<? extends MadvocScope> madvocScopeType) { for (final MadvocScope s : allScopes) { if (s.getClass().equals(madvocScopeType)) { return s; } } // new scope detected final MadvocScope newScope; try { newScope = madpc.createBean(madvocScopeType); } catch (Exception ex) { throw new MadvocException(\"Unable to create scope: \" + madvocScopeType, ex); } allScopes.add(newScope); return newScope; } \n### Response:", "ground_truth": "Performs search for the scope class and returns it's instance.", "predict": "### Method-level comment for `getOrInitScope`\n```\nprotected MadvocScope getOrInitScope(final Class<? extends MadvocScope> madvocScopeType)\n```\n### Method-level comment for `getOrInitScope`\n```\n// Retrieve the first instance of a matching scope type or create a new one if no matching instance is found\n// This method is used to initialize the MadvocScope object with a specific scope type, if one is not already present in the object\n```"}, {"ID": 752, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public boolean isSupported() throws NoResponseException, XMPPErrorException, NotConnectedException, InterruptedException { return ServiceDiscoveryManager.getInstanceFor(connection()).accountSupportsFeatures( PushNotificationsElements.NAMESPACE); }. \n### Response: Returns true if Push Notifications are supported by this account.\n\n@return true if Push Notifications are supported by this account.\n@throws NoResponseException\n@throws XMPPErrorException\n@throws NotConnectedException\n@throws InterruptedException\n@since 4.2.2.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void forScope(final Class<? extends MadvocScope> scopeType, final Consumer<MadvocScope> madvocScopeConsumer) { final MadvocScope scope = getOrInitScope(scopeType); madvocScopeConsumer.accept(scope); } \n### Response:", "ground_truth": "Finds a given scope and consumes it.", "predict": "This method is used to iterate over the MadvocScope objects and accept them as a consumer.\n\n@return a consumer for the specified MadvocScope type.\n@param scopeType the MadvocScope type to iterate over.\n@since 4.2.2.\n\n"}, {"ID": 753, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function remove(string $cypher): self { $query = new self; $query->clauses = $this->clauses->add( new Clause\\RemoveClause($cypher) ); return $query; }. \n### Response: Add a REMOVE clause\n\n@param string $cypher\n\n@return self.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static byte[] decode(final char[] arr) { int length = arr.length; if (length == 0) { return new byte[0]; } int sndx = 0, endx = length - 1; int pad = arr[endx] == '=' ? (arr[endx - 1] == '=' ? 2 : 1) : 0; int cnt = endx - sndx + 1; int sepCnt = length > 76 ? (arr[76] == '\\r' ? cnt / 78 : 0) << 1 : 0; int len = ((cnt - sepCnt) * 6 >> 3) - pad; byte[] dest = new byte[len]; int d = 0; for (int cc = 0, eLen = (len / 3) * 3; d < eLen;) { int i = INV[arr[sndx++]] << 18 | INV[arr[sndx++]] << 12 | INV[arr[sndx++]] << 6 | INV[arr[sndx++]]; dest[d++] = (byte) (i >> 16); dest[d++] = (byte) (i >> 8); dest[d++] = (byte) i; if (sepCnt > 0 && ++cc == 19) { sndx += 2; cc = 0; } } if (d < len) { int i = 0; for (int j = 0; sndx <= endx - pad; j++) { i |= INV[arr[sndx++]] << (18 - j * 6); } for (int r = 16; d < len; r -= 8) { dest[d++] = (byte) (i >> r); } } return dest; } \n### Response:", "ground_truth": "Decodes a BASE64 encoded char array.", "predict": "This method decodes a binary string represented as a sequence of characters. It first checks if the input string is empty, and if so, returns a new byte array with a size of 0. If the input string is not empty, it initializes the dest array to have a size of 0. It then iterates over the input string, performing a bitwise AND operation with each character in the INV array. The result of each AND operation is stored in the dest array, starting from the first character. The number of characters in the output array is calculated by dividing the total number of characters by 3 and multiplying by 3. The method then returns the output array."}, {"ID": 754, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function validate_verify($value, $input, $args) { $userModel = config('auth.model'); $user = $userModel::find($this->session->get('loginUserId')); if($user) { if($this->hash->verify($value, $user->password)) { return true; } return false; } return false; }. \n### Response: To verify user password\n\n@param $value\n@param $input\n@param $args\n\n@return bool.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @SuppressWarnings({\"unchecked\"}) public static String prepareCsrfToken(final HttpSession session, final int timeToLive) { Set<Token> tokenSet = (Set<Token>) session.getAttribute(CSRF_TOKEN_SET); if (tokenSet == null) { tokenSet = new HashSet<>(); session.setAttribute(CSRF_TOKEN_SET, tokenSet); } String value; boolean unique; do { value = RandomString.get().randomAlphaNumeric(32); assureSize(tokenSet); unique = tokenSet.add(new Token(value, timeToLive)); } while (!unique); return value; } \n### Response:", "ground_truth": "Generates new CSRF token and puts it in the session. Returns generated token value.", "predict": "To generate CSRF token\n\n@param session\n@param timeToLive\n\n@return String."}, {"ID": 755, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def check_valid_varname(varname, custom_units, custom_structs, constants, pos, error_prefix=\"Variable name invalid.\", exc=None): \"\"\" Handle invalid variable names \"\"\" exc = VariableDeclarationException if exc is None else exc valid_varname, msg = is_varname_valid(varname, custom_units, custom_structs, constants) if not valid_varname: raise exc(error_prefix + msg, pos) return True. \n### Response: Handle invalid variable names.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected static void assureSize(final Set<Token> tokenSet) { if (tokenSet.size() < maxTokensPerSession) { return; } long validUntilMin = Long.MAX_VALUE; Token tokenToRemove = null; Iterator<Token> iterator = tokenSet.iterator(); while (iterator.hasNext()) { Token token = iterator.next(); if (token.isExpired()) { iterator.remove(); continue; } if (token.validUntil < validUntilMin) { validUntilMin = token.validUntil; tokenToRemove = token; } } if ((tokenToRemove != null) && (tokenSet.size() >= maxTokensPerSession)) { tokenSet.remove(tokenToRemove); } } \n### Response:", "ground_truth": "Removes expired tokens if token set is full.\n@see #setMaxTokensPerSession(int)", "predict": "Ensures that the set of tokens has a minimum size and removes any expired tokens."}, {"ID": 756, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function actionImages($id) { $gallery = $this->findModel($id); $searchModel = $this->module->manager->createGalleryImageSearch(); $dataProvider = $searchModel->search($_GET, $id); return $this->render('image/index', [ 'gallery' => $gallery, 'dataProvider' => $dataProvider, 'searchModel' => $searchModel, ]); }. \n### Response: Lists all Gallery images models.\n\n@param $id Gallery id\n@return mixed.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @SuppressWarnings({\"unchecked\"}) public static boolean checkCsrfToken(final HttpSession session, final String tokenValue) { Set<Token> tokenSet = (Set<Token>) session.getAttribute(CSRF_TOKEN_SET); if ((tokenSet == null) && (tokenValue == null)) { return true; } if ((tokenSet == null) || (tokenValue == null)) { return false; } boolean found = false; Iterator<Token> it = tokenSet.iterator(); while (it.hasNext()) { Token t = it.next(); if (t.isExpired()) { it.remove(); continue; } if (t.getValue().equals(tokenValue)) { it.remove(); found = true; } } return found; } \n### Response:", "ground_truth": "Checks token value.\nC", "predict": "This method checks if a given session has a CSRF token set and returns true if it does, and false otherwise. It uses the `Set<Token>` class from the Apache Commons Collections library to store the CSRF tokens, and iterates over the tokens in the set using an `Iterator<Token>`. If a token is expired or its value matches the current token value, it is removed from the set. Finally, the method returns the value of the last token in the set as the result of the check."}, {"ID": 757, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function formatDate($field, $value, array $options) { if ($value === null) { return $this->Html->label(__d('crud', 'N/A'), ['type' => 'info']); } if (is_int($value) || is_string($value) || $value instanceof DateTime || $value instanceof DateTimeImmutable) { return $this->Time->timeAgoInWords($value, $options); } return $this->Html->label(__d('crud', 'N/A'), ['type' => 'info']); }. \n### Response: Format a date for display\n\n@param string $field Name of field.\n@param mixed $value Value of field.\n@param array $options Options array.\n@return string.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static BeanCopy from(final Object source) { BeanCopy beanCopy = new BeanCopy(source); beanCopy.isSourceMap = source instanceof Map; return beanCopy; } \n### Response:", "ground_truth": "Defines source, detects a map.", "predict": "Create a new BeanCopy instance\n\n@param object $source Object to copy.\n@return BeanCopy instance."}, {"ID": 758, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected function filter_out_prediction_samples_and_ranges(array &$sampleids, array &$ranges, \\core_analytics\\local\\time_splitting\\base $timesplitting) { if (count($ranges) > 1) { throw new \\coding_exception('$ranges argument should only contain one range'); } $rangeindex = key($ranges); $predictedrange = $this->get_predict_samples_record($timesplitting, $rangeindex); if (!$predictedrange) { // Nothing to filter out. return null; } $predictedrange->sampleids = json_decode($predictedrange->sampleids, true); $missingsamples = array_diff_key($sampleids, $predictedrange->sampleids); if (count($missingsamples) === 0) { // All samples already calculated. unset($ranges[$rangeindex]); return null; } // Replace the list of samples by the one excluding samples that already got predictions at this range. $sampleids = $missingsamples; return $predictedrange; }. \n### Response: Filters out samples that have already been used for prediction.\n\n@param int[] $sampleids\n@param array $ranges\n@param \\core_analytics\\local\\time_splitting\\base $timesplitting\n@return  \\stdClass|null The analytics_predict_samples record or null.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void copy() { beanUtil = new BeanUtilBean() .declared(declared) .forced(forced) .silent(true); visit(); } \n### Response:", "ground_truth": "Performs the copying.", "predict": "Creates a new instance of the `BeanUtilBean` class and sets its properties.\n\n@param BeanUtilBean $beanUtil The beanUtil instance to copy.\n@return void The method did not return anything.\n\n"}, {"ID": 759, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def _make_signing_request(self, message): \"\"\"Makes a request to the API signBlob API.\"\"\" message = _helpers.to_bytes(message) method = 'POST' url = _SIGN_BLOB_URI.format(self._service_account_email) headers = {} body = json.dumps({ 'bytesToSign': base64.b64encode(message).decode('utf-8'), }) self._credentials.before_request(self._request, method, url, headers) response = self._request( url=url, method=method, body=body, headers=headers) if response.status != http_client.OK: raise exceptions.TransportError( 'Error calling the IAM signBytes API: {}'.format( response.data)) return json.loads(response.data.decode('utf-8')). \n### Response: Makes a request to the API signBlob API..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override protected boolean visitProperty(String name, final Object value) { if (isTargetMap) { name = LEFT_SQ_BRACKET + name + RIGHT_SQ_BRACKET; } beanUtil.setProperty(destination, name, value); return true; } \n### Response:", "ground_truth": "Copies single property to the destination.\nExceptions are ignored, so copying continues if\ndestination does not have some of the sources properties.", "predict": "visits properties of the target object.\n\n@Override\nprotected boolean visitProperty(String name, final Object value) {\nif (isTargetMap) {\nname = LEFT_SQ_BRACKET + name + RIGHT_SQ_BRACKET;\n}\nbeanUtil.setProperty(destination, name, value);\nreturn true;\n}"}, {"ID": 760, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function process() { $saIni = $this->getSiteAccessIni(); $this->destinationLocale = $saIni->variable( 'RegionalSettings', 'ContentObjectLocale' ); // Detect the type of siteaccess we are dealing with. Initially URI and Host are supported. // We don't want the siteaccess part here, since we are inserting our siteaccess name. $indexFile = trim( eZSys::indexFile( false ), '/' ); switch ( $GLOBALS['eZCurrentAccess']['type'] ) { case eZSiteAccess::TYPE_URI: eZURI::transformURI( $host, true, 'full' ); break; default: $host = $saIni->variable( 'SiteSettings', 'SiteURL' ); $host = eZSys::serverProtocol().\"://\".$host; break; } $this->baseDestinationUrl = \"{$host}{$indexFile}\"; }. \n### Response: This is a hook which is called by the language switcher module on\nimplementation classes.\n\nIn this implementation it is doing initialisation as an example.\n\n@return void.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public void init(final TemplateData templateData) { super.init(templateData); if (entity != null) { ded = lookupType(entity); } else { Object object = templateData.getObjectReference(entityName); if (object != null) { ded = lookupType(resolveClass(object)); } else { ded = lookupName(entityName); } } String tableReference = this.tableReference; if (tableReference == null) { tableReference = tableAlias; } if (tableReference == null) { tableReference = entityName; } if (tableReference == null) { tableReference = ded.getEntityName(); } templateData.registerTableReference(tableReference, ded, tableAlias); } \n### Response:", "ground_truth": "Resolves and registers table references.", "predict": "This is a method in a class that is implementing the `TemplateData` interface. It is called when a template is being rendered and it takes in a `TemplateData` object as an argument.\n\nThe method first checks if the entity being rendered is not null. If it is, it calls the `lookupType` method to determine the type of entity. If it is not null and the type is not already registered, it calls the `lookupType` method again to resolve the type.\n\nIf the entity is null and the type is already registered, it calls the `lookupName` method to determine the name of the entity. If the name is not null and the entity is not a table, it calls the `resolveClass` method to resolve the class of the entity. If the entity is a table, it calls the `registerTableReference` method to register the table reference.\n\nOverall, this method is responsible for registering the entity and table references in the template data object."}, {"ID": 761, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public Calendar getEnd() { Calendar cal = Calendar.getInstance(); cal.setTimeInMillis(end); return cal; }. \n### Response: Returns the end of the interval. This is the whole date that was\nspecified during instantiation, even if it's too detailed for the given\ninterval unit.\n\n@return the start of the interval.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @SuppressWarnings(\"unchecked\") public <S extends Scope> S resolveScope(final Class<S> scopeType) { S scope = (S) scopes.get(scopeType); if (scope == null) { try { scope = newInternalInstance(scopeType, (PetiteContainer) this); } catch (Exception ex) { throw new PetiteException(\"Invalid Petite scope: \" + scopeType.getName(), ex); } registerScope(scopeType, scope); scopes.put(scopeType, scope); } return scope; } \n### Response:", "ground_truth": "Resolves and registers scope from a scope type.", "predict": "Resolves the given scope type and returns the corresponding instance. \n\n@param scopeType the type of the scope to resolve. \n@return the resolved scope instance. \n\nNote: This method uses the PetiteContainer class to register the resolved scope and its associated instance. \n\nNote: This method uses the @SuppressWarnings(\"unchecked\") annotation to suppress the warning message generated by the unchecked cast."}, {"ID": 762, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def join(self, timeout=None): \"\"\"Joins with a default timeout exposed on the class.\"\"\" return super(_StoppableDaemonThread, self).join(timeout or self.JOIN_TIMEOUT). \n### Response: Joins with a default timeout exposed on the class..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public <T> BeanDefinition<T> registerPetiteBean( final Class<T> type, String name, Class<? extends Scope> scopeType, WiringMode wiringMode, final boolean define, final Consumer<T> consumer ) { if (name == null) { name = resolveBeanName(type); } if (wiringMode == null) { wiringMode = annotationResolver.resolveBeanWiringMode(type); } if (wiringMode == WiringMode.DEFAULT) { wiringMode = petiteConfig.getDefaultWiringMode(); } if (scopeType == null) { scopeType = annotationResolver.resolveBeanScopeType(type); } if (scopeType == null) { scopeType = SingletonScope.class; } // remove existing bean BeanDefinition existing = removeBean(name); if (existing != null) { if (petiteConfig.getDetectDuplicatedBeanNames()) { throw new PetiteException( \"Duplicated bean name detected while registering class '\" + type.getName() + \"'. Petite bean class '\" + existing.type.getName() + \"' is already registered with the name: \" + name); } } // check if type is valid if (type.isInterface()) { throw new PetiteException(\"PetiteBean can not be an interface: \" + type.getName()); } // registration if (log.isDebugEnabled()) { log.info(\"Petite bean: [\" + name + \"] --> \" + type.getName() + \" @ \" + scopeType.getSimpleName() + \":\" + wiringMode.toString()); } // register Scope scope = resolveScope(scopeType); BeanDefinition<T> beanDefinition = createBeanDefinitionForRegistration(name, type, scope, wiringMode, consumer); registerBean(name, beanDefinition); // providers ProviderDefinition[] providerDefinitions = petiteResolvers.resolveProviderDefinitions(type, name); if (providerDefinitions != null) { for (ProviderDefinition providerDefinition : providerDefinitions) { providers.put(providerDefinition.name, providerDefinition); } } // define if (define) { beanDefinition.ctor = petiteResolvers.resolveCtorInjectionPoint(beanDefinition.type()); beanDefinition.properties = PropertyInjectionPoint.EMPTY; beanDefinition.methods = MethodInjectionPoint.EMPTY; beanDefinition.initMethods = InitMethodPoint.EMPTY; beanDefinition.destroyMethods = DestroyMethodPoint.EMPTY; } // return return beanDefinition; } \n### Response:", "ground_truth": "Registers or defines a bean.\n\n@param type bean type, must be specified\n@param name bean name, if null it will be resolved from the class (name or annotation)\n@param scopeType bean scope, if null it will be resolved from the class (annotation or default one)\n@param wiringMode wiring mode, if null it will be resolved from the class (annotation or default one)\n@param define when set to true bean will be defined - all injection points will be set to none", "predict": "The method `registerPetiteBean` is a public method of the `PetiteBean` class that takes in several parameters. It is responsible for registering a Petite bean with the specified type, name, scope type, wiring mode, and consumer.\n\nThe method first checks if the name of the type is null, if it is, it sets the name to the resolveBeanName method of the type.\n\nIf the wiring mode is null, it sets it to the default WiringMode.\nIf the scope type is null, it sets it to the SingletonScope.class.\nIf the wiring mode is null, it sets it to the default WiringMode.\nIf the scope type is null, it sets it to the SingletonScope.class.\n\nThen, it removes the existing bean if it exists, and checks if the type is valid. If it is not valid, it throws an exception.\n\nIt then registers the Petite bean with the specified type, name, and scope type, and wiring mode.\n\nIt then registers the Petite bean with the specified name, and register any providers that are defined.\n\nFinally, it defines the ctor, properties, methods, and init methods of the Petite bean.\n\nThe method returns the bean definition that was registered."}, {"ID": 763, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @SneakyThrows public void start(final String name) { thread = new Thread(this); thread.setName(name); thread.start(); }. \n### Response: Start thread.\n\n@param name the name.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void registerBean(final String name, final BeanDefinition beanDefinition) { beans.put(name, beanDefinition); if (!petiteConfig.isUseAltBeanNames()) { return; } Class type = beanDefinition.type(); if (annotationResolver.beanHasAnnotationName(type)) { return; } Class[] interfaces = ClassUtil.resolveAllInterfaces(type); for (Class anInterface : interfaces) { String altName = annotationResolver.resolveBeanName(anInterface, petiteConfig.getUseFullTypeNames()); if (name.equals(altName)) { continue; } if (beans.containsKey(altName)) { continue; } if (beansAlt.containsKey(altName)) { BeanDefinition existing = beansAlt.get(altName); if (existing != null) { beansAlt.put(altName, null); // store null as value to mark that alt name is duplicate } } else { beansAlt.put(altName, beanDefinition); } } } \n### Response:", "ground_truth": "Registers bean definition by putting it in the beans map. If bean does\nnot have petite name explicitly defined, alternative bean names\nwill be registered.", "predict": "Registers a bean with the given name and defines the necessary annotations for the bean. If the configuration requires alternative names for the same type, it is registered using the `beansAlt` map. If no alternative names are required, the existing bean definition is used."}, {"ID": 764, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function handleRatelimit(\\Psr\\Http\\Message\\ResponseInterface $response, ?\\CharlotteDunois\\Yasmin\\Interfaces\\RatelimitBucketInterface $ratelimit = null, bool $isReactionEndpoint = false) { \\extract($this->extractRatelimit($response)); if($isReactionEndpoint && !empty($resetTime)) { $resetTime = (float) \\bcadd(\\microtime(true), 0.25); } $global = false; if($response->hasHeader('X-RateLimit-Global')) { $global = true; $this->limit = $limit ?? $this->limit; $this->remaining = $remaining ?? $this->remaining; $this->resetTime = $resetTime ?? $this->resetTime; if($this->remaining === 0 && $this->resetTime > \\microtime(true)) { $this->limited = true; $this->client->emit('debug', 'Global ratelimit encountered, continueing in '.($this->resetTime - \\microtime(true)).' seconds'); } else { $this->limited = false; } } elseif($ratelimit !== null) { $set = $ratelimit->handleRatelimit($limit, $remaining, $resetTime); if($set instanceof \\React\\Promise\\ExtendedPromiseInterface) { $this->bucketRatelimitPromises[$ratelimit->getEndpoint()] = $set; } } $this->loop->futureTick(function () use ($ratelimit, $global, $limit, $remaining, $resetTime) { $this->client->emit('ratelimit', array( 'endpoint' => ($ratelimit !== null ? $ratelimit->getEndpoint() : 'global'), 'global' => $global, 'limit' => $limit, 'remaining' => $remaining, 'resetTime' => $resetTime )); }); }. \n### Response: Handles ratelimits.\n@param \\Psr\\Http\\Message\\ResponseInterface                               $response\n@param \\CharlotteDunois\\Yasmin\\Interfaces\\RatelimitBucketInterface|null  $ratelimit\n@param bool                                                              $isReactionEndpoint\n@return void.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void removeBean(final Class type) { // collect bean names Set<String> beanNames = new HashSet<>(); for (BeanDefinition def : beans.values()) { if (def.type.equals(type)) { beanNames.add(def.name); } } // remove collected bean names for (String beanName : beanNames) { removeBean(beanName); } } \n### Response:", "ground_truth": "Removes all petite beans of provided type. Bean name is not resolved from a type!\nInstead, all beans are iterated and only beans with equal types are removed.\n@see #removeBean(String)", "predict": "Removes a bean from the beans collection.\n\n@param \\Class\\Type\\BeanDefinition\\BeanDefinitionInterface $type\n@return void."}, {"ID": 765, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (h *LangHandler) lintWorkspace(ctx context.Context, bctx *build.Context, conn jsonrpc2.JSONRPC2) error { var files []string pkgs := tools.ListPkgsUnderDir(bctx, h.RootFSPath) find := h.getFindPackageFunc() for _, pkg := range pkgs { p, err := find(ctx, bctx, pkg, h.RootFSPath, h.RootFSPath, 0) if err != nil { if _, ok := err.(*build.NoGoError); ok { continue } if _, ok := err.(*build.MultiplePackageError); ok { continue } return err } for _, f := range p.GoFiles { files = append(files, path.Join(p.Dir, f)) } } return h.lint(ctx, bctx, conn, []string{path.Join(h.RootFSPath, \"/...\")}, files) }. \n### Response: // lintWorkspace runs LangHandler.lint for the entire workspace.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected String[] resolveBeanNamesForType(final Class type) { String[] beanNames = beanCollections.get(type); if (beanNames != null) { return beanNames; } ArrayList<String> list = new ArrayList<>(); for (Map.Entry<String, BeanDefinition> entry : beans.entrySet()) { BeanDefinition beanDefinition = entry.getValue(); if (ClassUtil.isTypeOf(beanDefinition.type, type)) { String beanName = entry.getKey(); list.add(beanName); } } if (list.isEmpty()) { beanNames = StringPool.EMPTY_ARRAY; } else { beanNames = list.toArray(new String[0]); } beanCollections.put(type, beanNames); return beanNames; } \n### Response:", "ground_truth": "Resolves bean names for give type.", "predict": "// resolveBeanNamesForType retrieves the bean names for the given type and returns them if they are available in the beanCollections."}, {"ID": 766, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private int getPhosphoProteinNodes(Collection<KamNode> nodes) { int count = 0; for (KamNode node : nodes) { if (node.getFunctionType() == FunctionEnum.PROTEIN_ABUNDANCE && node.getLabel().indexOf(\"proteinModification(P\") > -1) { count++; } } return count; }. \n### Response: return number of protein with phosphorylation modification\n@param nodes\n@return.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void registerPetiteCtorInjectionPoint(final String beanName, final Class[] paramTypes, final String[] references) { BeanDefinition beanDefinition = lookupExistingBeanDefinition(beanName); ClassDescriptor cd = ClassIntrospector.get().lookup(beanDefinition.type); Constructor constructor = null; if (paramTypes == null) { CtorDescriptor[] ctors = cd.getAllCtorDescriptors(); if (ctors != null && ctors.length > 0) { if (ctors.length > 1) { throw new PetiteException(ctors.length + \" suitable constructor found as injection point for: \" + beanDefinition.type.getName()); } constructor = ctors[0].getConstructor(); } } else { CtorDescriptor ctorDescriptor = cd.getCtorDescriptor(paramTypes, true); if (ctorDescriptor != null) { constructor = ctorDescriptor.getConstructor(); } } if (constructor == null) { throw new PetiteException(\"Constructor not found: \" + beanDefinition.type.getName()); } BeanReferences[] ref = referencesResolver.resolveReferenceFromValues(constructor, references); beanDefinition.ctor = new CtorInjectionPoint(constructor, ref); } \n### Response:", "ground_truth": "Registers constructor injection point.\n\n@param beanName bean name\n@param paramTypes constructor parameter types, may be null\n@param references references for arguments", "predict": "Registers a constructor injection point for the given bean definition.\n@param beanName\n@param paramTypes\n@param references"}, {"ID": 767, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function checkDefaultTemplate () { const pkg = requireFresh(path.join(project, 'package.json')); expect(pkg.author).toEqual('Apache Cordova Team'); const configXml = new ConfigParser(path.join(project, 'config.xml')); expect(configXml.author()).toEqual('Apache Cordova Team'); }. \n### Response: Check that we did use the default template.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void registerPetitePropertyInjectionPoint(final String beanName, final String property, final String reference) { BeanDefinition beanDefinition = lookupExistingBeanDefinition(beanName); ClassDescriptor cd = ClassIntrospector.get().lookup(beanDefinition.type); PropertyDescriptor propertyDescriptor = cd.getPropertyDescriptor(property, true); if (propertyDescriptor == null) { throw new PetiteException(\"Property not found: \" + beanDefinition.type.getName() + '#' + property); } BeanReferences ref = referencesResolver.resolveReferenceFromValue(propertyDescriptor, reference); PropertyInjectionPoint pip = new PropertyInjectionPoint(propertyDescriptor, ref); beanDefinition.addPropertyInjectionPoint(pip); } \n### Response:", "ground_truth": "Registers property injection point.\n\n@param beanName bean name\n@param property property name\n@param reference explicit injection reference, may be null", "predict": "RegisterPetitePropertyInjectionPoint(): Registers a Petite property injection point for the given bean name, property, and reference."}, {"ID": 768, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func iso88591ToUTF8(s []byte) []byte { runes := make([]rune, len(s)) for i := range s { runes[i] = rune(s[i]) } return []byte(string(runes)) }. \n### Response: // Convert an ISO-8859-1 encoded byte string to UTF-8. Works by the\n// principle that ISO-8859-1 bytes are equivalent to unicode code points,\n// that a rune slice is a list of code points, and that stringifying a slice\n// of runes generates UTF-8 in Go..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void registerPetiteSetInjectionPoint(final String beanName, final String property) { BeanDefinition beanDefinition = lookupExistingBeanDefinition(beanName); ClassDescriptor cd = ClassIntrospector.get().lookup(beanDefinition.type); PropertyDescriptor propertyDescriptor = cd.getPropertyDescriptor(property, true); if (propertyDescriptor == null) { throw new PetiteException(\"Property not found: \" + beanDefinition.type.getName() + '#' + property); } SetInjectionPoint sip = new SetInjectionPoint(propertyDescriptor); beanDefinition.addSetInjectionPoint(sip); } \n### Response:", "ground_truth": "Registers set injection point.\n\n@param beanName bean name\n@param property set property name", "predict": "// Register a SetInjectionPoint for the given beanName and property.\n// This method lookups the existing beanDefinition for the given beanName,\n// retrieves the ClassDescriptor for the type of the beanDefinition,\n// and retrieves the PropertyDescriptor for the property. If the property\n// is not found, it throws a PetiteException with a message indicating\n// that the property was not found. Then, it creates a new SetInjectionPoint\n// object and adds it to the beanDefinition."}, {"ID": 769, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static function createMemberCampaign($member, $campaign, $registrationType = 'site') { /** @var \\Drupal\\openy_campaign\\Entity\\MemberCampaign $memberCampaign Create temporary MemberCampaign object. Will be saved later. */ $memberCampaign = \\Drupal::entityTypeManager() ->getStorage('openy_campaign_member_campaign') ->create([ 'campaign' => $campaign, 'member' => $member, 'registration_type' => $registrationType, ]); if (($memberCampaign instanceof MemberCampaign === FALSE) || empty($memberCampaign)) { \\Drupal::logger('openy_campaign') ->error('Error while creating MemberCampaign temporary object.'); return FALSE; } return $memberCampaign; }. \n### Response: Create MemberCampaign entity.\n\n@param \\Drupal\\openy_campaign\\Entity\\Member $member\nMember entity.\n@param \\Drupal\\node\\Entity\\Node $campaign\nCampaign node.\n@param string $registrationType\n\n@return bool | \\Drupal\\openy_campaign\\Entity\\MemberCampaign\nFALSE or MemberCampaign entity\n\n@throws \\Drupal\\Component\\Plugin\\Exception\\InvalidPluginDefinitionException.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void registerPetiteMethodInjectionPoint(final String beanName, final String methodName, final Class[] arguments, final String[] references) { BeanDefinition beanDefinition = lookupExistingBeanDefinition(beanName); ClassDescriptor cd = ClassIntrospector.get().lookup(beanDefinition.type); Method method = null; if (arguments == null) { MethodDescriptor[] methods = cd.getAllMethodDescriptors(methodName); if (methods != null && methods.length > 0) { if (methods.length > 1) { throw new PetiteException(methods.length + \" suitable methods found as injection points for: \" + beanDefinition.type.getName() + '#' + methodName); } method = methods[0].getMethod(); } } else { MethodDescriptor md = cd.getMethodDescriptor(methodName, arguments, true); if (md != null) { method = md.getMethod(); } } if (method == null) { throw new PetiteException(\"Method not found: \" + beanDefinition.type.getName() + '#' + methodName); } BeanReferences[] ref = referencesResolver.resolveReferenceFromValues(method, references); MethodInjectionPoint mip = new MethodInjectionPoint(method, ref); beanDefinition.addMethodInjectionPoint(mip); } \n### Response:", "ground_truth": "Registers method injection point.\n\n@param beanName bean name\n@param methodName method name\n@param arguments method arguments, may be null\n@param references injection references", "predict": "Registers a method injection point for the given beanName, methodName, arguments, and references.\n\n@param String beanName\nThe name of the bean definition to register the injection point for.\n@param String methodName\nThe name of the method to register as an injection point.\n@param Class[] arguments\nThe arguments to pass to the method.\n@param String[] references\nThe references to resolve from the method arguments.\n@return void\n\n@throws \\Drupal\\Component\\Plugin\\Exception\\InvalidPluginDefinitionException."}, {"ID": 770, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def dependencies_graph(nodes=nil) nodes = @resolver.getDependenciesGraph() unless nodes graph = {} if Naether.platform == 'java' nodes.each do |k,v| deps = dependencies_graph(v) graph[k] = Naether::Java.convert_to_ruby_hash( deps ) end else iterator = nodes.entrySet().iterator(); while iterator.hasNext() entry = iterator.next() deps = dependencies_graph(entry.getValue()) graph[entry.getKey().toString()] = Naether::Java.convert_to_ruby_hash( deps ) end end graph end. \n### Response: Dependencies as a Graph of nested Hashes\n\n @return [Hash].\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void registerPetiteInitMethods(final String beanName, final InitMethodInvocationStrategy invocationStrategy, String... initMethodNames) { BeanDefinition beanDefinition = lookupExistingBeanDefinition(beanName); ClassDescriptor cd = ClassIntrospector.get().lookup(beanDefinition.type); if (initMethodNames == null) { initMethodNames = StringPool.EMPTY_ARRAY; } int total = initMethodNames.length; InitMethodPoint[] initMethodPoints = new InitMethodPoint[total]; int i; for (i = 0; i < initMethodNames.length; i++) { MethodDescriptor md = cd.getMethodDescriptor(initMethodNames[i], ClassUtil.EMPTY_CLASS_ARRAY, true); if (md == null) { throw new PetiteException(\"Init method not found: \" + beanDefinition.type.getName() + '#' + initMethodNames[i]); } initMethodPoints[i] = new InitMethodPoint(md.getMethod(), i, invocationStrategy); } beanDefinition.addInitMethodPoints(initMethodPoints); } \n### Response:", "ground_truth": "Registers init method.\n\n@param beanName bean name\n@param invocationStrategy moment of invocation\n@param initMethodNames init method names", "predict": "RegistersPetiteInitMethods for beanName, invocationStrategy, and initMethodNames.\n\n @param beanName The name of the bean to register.\n @param invocationStrategy The strategy to use when calling the init methods.\n @param initMethodNames The array of init method names to register.\n @return void."}, {"ID": 771, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void forwardElimination(double scales[]) throws MatrixException { // Loop once per pivot row 0..nRows-1. for (int rPivot = 0; rPivot < nRows - 1; ++rPivot) { double largestScaledElmt = 0; int rLargest = 0; // Starting from the pivot row rPivot, look down // column rPivot to find the largest scaled element. for (int r = rPivot; r < nRows; ++r) { // Use the permuted row index. int pr = permutation[r]; double absElmt = Math.abs(LU.at(pr, rPivot)); double scaledElmt = absElmt*scales[pr]; if (largestScaledElmt < scaledElmt) { // The largest scaled element and // its row index. largestScaledElmt = scaledElmt; rLargest = r; } } // Is the matrix singular? if (largestScaledElmt == 0) { throw new MatrixException(MatrixException.SINGULAR); } // Exchange rows if necessary to choose the best // pivot element by making its row the pivot row. if (rLargest != rPivot) { int temp = permutation[rPivot]; permutation[rPivot] = permutation[rLargest]; permutation[rLargest] = temp; ++exchangeCount; } // Use the permuted pivot row index. int prPivot = permutation[rPivot]; double pivotElmt = LU.at(prPivot, rPivot); // Do the elimination below the pivot row. for (int r = rPivot + 1; r < nRows; ++r) { // Use the permuted row index. int pr = permutation[r]; double multiple = LU.at(pr, rPivot)/pivotElmt; // Set the multiple into matrix L. LU.set(pr, rPivot, multiple); // Eliminate an unknown from matrix U. if (multiple != 0) { for (int c = rPivot + 1; c < nCols; ++c) { double elmt = LU.at(pr, c); // Subtract the multiple of the pivot row. elmt -= multiple*LU.at(prPivot, c); LU.set(pr, c, elmt); } } } } }. \n### Response: Do forward elimination with scaled partial row pivoting.\n@parm scales the scaling vector\n@throws matrix.MatrixException for a singular matrix.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void registerPetiteDestroyMethods(final String beanName, String... destroyMethodNames) { BeanDefinition beanDefinition = lookupExistingBeanDefinition(beanName); ClassDescriptor cd = ClassIntrospector.get().lookup(beanDefinition.type); if (destroyMethodNames == null) { destroyMethodNames = StringPool.EMPTY_ARRAY; } int total = destroyMethodNames.length; DestroyMethodPoint[] destroyMethodPoints = new DestroyMethodPoint[total]; int i; for (i = 0; i < destroyMethodNames.length; i++) { MethodDescriptor md = cd.getMethodDescriptor(destroyMethodNames[i], ClassUtil.EMPTY_CLASS_ARRAY, true); if (md == null) { throw new PetiteException(\"Destroy method not found: \" + beanDefinition.type.getName() + '#' + destroyMethodNames[i]); } destroyMethodPoints[i] = new DestroyMethodPoint(md.getMethod()); } beanDefinition.addDestroyMethodPoints(destroyMethodPoints); } \n### Response:", "ground_truth": "Registers destroy method.\n\n@param beanName bean name\n@param destroyMethodNames destroy method names", "predict": "RegistersPetiteDestroyMethods for bean definition with destroy method names.\n@parm beanName the name of the bean to register\n@parm destroyMethodNames the array of names of the destroy methods to register."}, {"ID": 772, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @SuppressWarnings(\"unchecked\") public <V3, M4, C, N, Q> N getSceneRoot(AiWrapperProvider<V3, M4, C, N, Q> wrapperProvider) { return (N) m_sceneRoot; }. \n### Response: Returns the scene graph root.\n\nThis method is part of the wrapped API (see {@link AiWrapperProvider}\nfor details on wrappers).\n\nThe built-in behavior is to return a {@link AiVector}.\n\n@param wrapperProvider the wrapper provider (used for type inference)\n@return the scene graph root.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void registerPetiteProvider(final String providerName, final String beanName, final String methodName, final Class[] arguments) { BeanDefinition beanDefinition = lookupBeanDefinition(beanName); if (beanDefinition == null) { throw new PetiteException(\"Bean not found: \" + beanName); } Class beanType = beanDefinition.type; ClassDescriptor cd = ClassIntrospector.get().lookup(beanType); MethodDescriptor md = cd.getMethodDescriptor(methodName, arguments, true); if (md == null) { throw new PetiteException(\"Provider method not found: \" + methodName); } ProviderDefinition providerDefinition = new ProviderDefinition(providerName, beanName, md.getMethod()); providers.put(providerName, providerDefinition); } \n### Response:", "ground_truth": "Registers instance method provider.\n\n@param providerName provider name\n@param beanName bean name\n@param methodName instance method name\n@param arguments method argument types", "predict": "Registers a provider method for the specified bean.\n\nThis method is part of the Petite API (see {@link Petite}\nfor details on providers).\n\nThe built-in behavior is to register a new provider method with the specified name, bean name, and provider method.\n\n@param providerName the name of the provider\n@param beanName the name of the bean to register the provider method for\n@param methodName the name of the provider method\n@param arguments the arguments for the provider method\n@return void."}, {"ID": 773, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function getContentType(string $id): ?ContentType { foreach ($this->clientsConfig as $clientConfig) { /** @var \\Contentful\\Delivery\\Client $client */ $client = $clientConfig['service']; foreach ($client->getContentTypes()->getItems() as $contentType) { /** @var \\Contentful\\Delivery\\Resource\\ContentType $contentType */ if ($contentType->getId() === $id) { return $contentType; } } } return null; }. \n### Response: Returns the content type with specified ID.\n\nIf no content type is found, null is returned..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void registerPetiteProvider(final String providerName, final Class type, final String staticMethodName, final Class[] arguments) { ClassDescriptor cd = ClassIntrospector.get().lookup(type); MethodDescriptor md = cd.getMethodDescriptor(staticMethodName, arguments, true); if (md == null) { throw new PetiteException(\"Provider method not found: \" + staticMethodName); } ProviderDefinition providerDefinition = new ProviderDefinition(providerName, md.getMethod()); providers.put(providerName, providerDefinition); } \n### Response:", "ground_truth": "Registers static method provider.\n\n@param providerName provider name\n@param type class type\n@param staticMethodName static method name\n@param arguments method argument types", "predict": "Registers a provider for the specified type and method.\n\nIf the provider method is not found, throws a PetiteException with the specified method name.\n\nProvides a definition for the provider, which is stored in the providers array."}, {"ID": 774, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func New(params DriverParameters) (*Driver, error) { if !params.V4Auth && (params.RegionEndpoint == \"\" || strings.Contains(params.RegionEndpoint, \"s3.amazonaws.com\")) { return nil, fmt.Errorf(\"on Amazon S3 this storage driver can only be used with v4 authentication\") } awsConfig := aws.NewConfig() sess, err := session.NewSession() if err != nil { return nil, fmt.Errorf(\"failed to create new session: %v\", err) } creds := credentials.NewChainCredentials([]credentials.Provider{ &credentials.StaticProvider{ Value: credentials.Value{ AccessKeyID: params.AccessKey, SecretAccessKey: params.SecretKey, SessionToken: params.SessionToken, }, }, &credentials.EnvProvider{}, &credentials.SharedCredentialsProvider{}, &ec2rolecreds.EC2RoleProvider{Client: ec2metadata.New(sess)}, }) if params.RegionEndpoint != \"\" { awsConfig.WithS3ForcePathStyle(true) awsConfig.WithEndpoint(params.RegionEndpoint) } awsConfig.WithCredentials(creds) awsConfig.WithRegion(params.Region) awsConfig.WithDisableSSL(!params.Secure) if params.UserAgent != \"\" || params.SkipVerify { httpTransport := http.DefaultTransport if params.SkipVerify { httpTransport = &http.Transport{ TLSClientConfig: &tls.Config{InsecureSkipVerify: true}, } } if params.UserAgent != \"\" { awsConfig.WithHTTPClient(&http.Client{ Transport: transport.NewTransport(httpTransport, transport.NewHeaderRequestModifier(http.Header{http.CanonicalHeaderKey(\"User-Agent\"): []string{params.UserAgent}})), }) } else { awsConfig.WithHTTPClient(&http.Client{ Transport: transport.NewTransport(httpTransport), }) } } sess, err = session.NewSession(awsConfig) if err != nil { return nil, fmt.Errorf(\"failed to create new session with aws config: %v\", err) } s3obj := s3.New(sess) // enable S3 compatible signature v2 signing instead if !params.V4Auth { setv2Handlers(s3obj) } // TODO Currently multipart uploads have no timestamps, so this would be unwise // if you initiated a new s3driver while another one is running on the same bucket. // multis, _, err := bucket.ListMulti(\"\", \"\") // if err != nil { // return nil, err // } // for _, multi := range multis { // err := multi.Abort() // //TODO appropriate to do this error checking? // if err != nil { // return nil, err // } // } d := &driver{ S3: s3obj, Bucket: params.Bucket, ChunkSize: params.ChunkSize, Encrypt: params.Encrypt, KeyID: params.KeyID, MultipartCopyChunkSize: params.MultipartCopyChunkSize, MultipartCopyMaxConcurrency: params.MultipartCopyMaxConcurrency, MultipartCopyThresholdSize: params.MultipartCopyThresholdSize, RootDirectory: params.RootDirectory, StorageClass: params.StorageClass, ObjectACL: params.ObjectACL, } return &Driver{ baseEmbed: baseEmbed{ Base: base.Base{ StorageDriver: d, }, }, }, nil }. \n### Response: // New constructs a new Driver with the given AWS credentials, region, encryption flag, and\n// bucketName.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void forEachBeanType(final Class type, final Consumer<String> beanNameConsumer) { forEachBean(bd -> { if (ClassUtil.isTypeOf(bd.type, type)) { beanNameConsumer.accept(bd.name); } }); } \n### Response:", "ground_truth": "Iterates all beans that are of given type.", "predict": "// forEachBeanType iterates over all beans of type type and calls the consumer for each bean."}, {"ID": 775, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function just_parse($input) { $input = $this->parse_conditions($input); $input = $this->parse_xml($input); $input = $this->postrender($input); return $input; }. \n### Response: Public wrapper to dipp into template parsing.\n\n@param string $input Template content\n\n@return string\n@uses   rcmail_output_html::parse_xml()\n@since  0.1-rc1.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void defineParameters(final Map<?, ?> properties) { for (Map.Entry<?, ?> entry : properties.entrySet()) { defineParameter(entry.getKey().toString(), entry.getValue()); } } \n### Response:", "ground_truth": "Defines many parameters at once.", "predict": "Method to define parameters for a mail template.\n\n@param Map<String, String> properties Map of parameters to define\n\n@return void\n@uses mail_template_parser::parse_parameters()\n@since 0.1-rc1."}, {"ID": 776, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected function getUserFromRequest(Request $request) { $username = $request->get('username'); return $this->userService->findByEmail($username); }. \n### Response: Get the user from the request\n\n@param  Request $request\n@return UserEntity|boolean.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public Object intercept(final ActionRequest actionRequest) throws Exception { printBefore(actionRequest); long startTime = System.currentTimeMillis(); Object result = null; try { result = actionRequest.invoke(); } catch (Exception ex) { result = \"<exception>\"; throw ex; } catch (Throwable th) { result = \"<throwable>\"; throw new Exception(th); } finally { long executionTime = System.currentTimeMillis() - startTime; printAfter(actionRequest, executionTime, result); } return result; } \n### Response:", "ground_truth": "Measure action invocation time.", "predict": "intercepts the action request and executes it, printing the before and after times, and returns the result.\n\n@param  ActionRequest $actionRequest\n@return Object|boolean."}, {"ID": 777, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func AnnotateFlags(cmd *cobra.Command, generators map[string]Generator) { // Iterate over all generators and mark any flags used by them. for name, generator := range generators { generatorParams := map[string]struct{}{} for _, param := range generator.ParamNames() { generatorParams[param.Name] = struct{}{} } cmd.Flags().VisitAll(func(flag *pflag.Flag) { if _, found := generatorParams[flag.Name]; !found { // This flag is not used by the current generator // so skip it. return } if flag.Annotations == nil { flag.Annotations = map[string][]string{} } if annotations := flag.Annotations[\"generator\"]; annotations == nil { flag.Annotations[\"generator\"] = []string{} } flag.Annotations[\"generator\"] = append(flag.Annotations[\"generator\"], name) }) } }. \n### Response: // AnnotateFlags annotates all flags that are used by generators..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static int resolveJavaVersion(final int version) { final int javaVersionNumber = SystemUtil.info().getJavaVersionNumber(); final int platformVersion = javaVersionNumber - 8 + 52; return version > platformVersion ? version : platformVersion; } \n### Response:", "ground_truth": "Resolves Java version from current version.", "predict": "// resolveJavaVersion returns the platform version if the specified version is greater than the platform version, or the specified version if the platform version is greater than the specified version.."}, {"ID": 778, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def time_delay_from_location(self, other_location, right_ascension, declination, t_gps): \"\"\"Return the time delay from the given location to detector for a signal with the given sky location In other words return `t1 - t2` where `t1` is the arrival time in this detector and `t2` is the arrival time in the other location. Parameters ---------- other_location : numpy.ndarray of coordinates A detector instance. right_ascension : float The right ascension (in rad) of the signal. declination : float The declination (in rad) of the signal. t_gps : float The GPS time (in s) of the signal. Returns ------- float The arrival time difference between the detectors. \"\"\" ra_angle = self.gmst_estimate(t_gps) - right_ascension cosd = cos(declination) e0 = cosd * cos(ra_angle) e1 = cosd * -sin(ra_angle) e2 = sin(declination) ehat = np.array([e0, e1, e2]) dx = other_location - self.location return dx.dot(ehat) / constants.c.value. \n### Response: Return the time delay from the given location to detector for\n        a signal with the given sky location\n\n        In other words return `t1 - t2` where `t1` is the\n        arrival time in this detector and `t2` is the arrival time in the\n        other location.\n\n        Parameters\n        ----------\n        other_location : numpy.ndarray of coordinates\n            A detector instance.\n        right_ascension : float\n            The right ascension (in rad) of the signal.\n        declination : float\n            The declination (in rad) of the signal.\n        t_gps : float\n            The GPS time (in s) of the signal.\n\n        Returns\n        -------\n        float\n            The arrival time difference between the detectors..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void pushInt(final MethodVisitor mv, final int value) { if (value <= 5) { mv.visitInsn(ICONST_0 + value); } else if (value <= Byte.MAX_VALUE) { mv.visitIntInsn(BIPUSH, value); } else { mv.visitIntInsn(SIPUSH, value); } } \n### Response:", "ground_truth": "Pushes int value in an optimal way.", "predict": "Pushes an integer value into the stack.\n\nParameters\n----------\n\n* mv: MethodVisitor\n* value: The integer value to be pushed.\n\nReturns\n-------\n\nNone\n\nNote: This method is used to push an integer value into the stack. The value can be any integer between 0 and Byte.MAX_VALUE (inclusive). If the value is less than or equal to 5, it is pushed using the ICONST_0 + value syntax. If the value is greater than or equal to Byte.MAX_VALUE, it is pushed using the BIPUSH, SIPUSH, or BIPUSH+SIPUSH syntax, depending on the size of the stack."}, {"ID": 779, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private Node createNode(final Iterable<Range<C>> ranges) { Range<C> span = Iterables.getFirst(ranges, null); if (span == null) { return null; } for (Range<C> range : ranges) { checkNotNull(range, \"ranges must not contain null ranges\"); span = range.span(span); } if (span.isEmpty()) { return null; } C center = Ranges.center(span); List<Range<C>> left = Lists.newArrayList(); List<Range<C>> right = Lists.newArrayList(); List<Range<C>> overlap = Lists.newArrayList(); for (Range<C> range : ranges) { if (Ranges.isLessThan(range, center)) { left.add(range); } else if (Ranges.isGreaterThan(range, center)) { right.add(range); } else { overlap.add(range); } } return new Node(center, createNode(left), createNode(right), overlap); }. \n### Response: Create and return a new node for the specified ranges.\n\n@param ranges ranges\n@return a new node for the specified ranges.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void checkArgumentIndex(final MethodInfo methodInfo, final int argIndex) { if ((argIndex < 1) || (argIndex > methodInfo.getArgumentsCount())) { throw new ProxettaException(\"Invalid argument index: \" + argIndex); } } \n### Response:", "ground_truth": "Validates argument index.", "predict": "Check the index of the provided argument in the method's arguments list.\n\n@param methodInfo methodInfo\n@param argIndex the index of the provided argument in the method's arguments list.\n@throw ProxettaException if the argument index is invalid.\n\nNote: This method is used to check the index of an argument in a method's arguments list. If the argument index is invalid, a ProxettaException is thrown.\n\nNote: This method is used to check the index of an argument in a method's arguments list. If the argument index is invalid, a ProxettaException is thrown."}, {"ID": 780, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (g *gatewayCfg) addURLs(infoURLs []string) { var scheme string if g.TLSConfig != nil { scheme = \"tls\" } else { scheme = \"nats\" } for _, iu := range infoURLs { if _, present := g.urls[iu]; !present { // Urls in Info.GatewayURLs come without scheme. Add it to parse // the url (otherwise it fails). if u, err := url.Parse(fmt.Sprintf(\"%s://%s\", scheme, iu)); err == nil { // Also, if a tlsName has not been set yet and we are dealing // with a hostname and not a bare IP, save the hostname. g.saveTLSHostname(u) // Use u.Host for the key. g.urls[u.Host] = u } } } }. \n### Response: // add URLs from the given array to the urls map only if not already present.\n// remoteGateway write lock is assumed to be held on entry.\n// Write lock is held on entry..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String adviceFieldName(final String name, final int index) { return ProxettaNames.fieldPrefix + name + ProxettaNames.fieldDivider + index; } \n### Response:", "ground_truth": "Builds advice field name.", "predict": "// Return the advice field name based on the given name and index.\n// ProxettaNames.fieldPrefix and ProxettaNames.fieldDivider are used to generate the field name.\n// index is used to determine the order of the fields in the advice string."}, {"ID": 781, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def save attributes = { sms_url: self.sms_url, voice_start: self.voice_start_url } # If new URL, send country, otherwise not unless self.number_id attributes[:country] = self.country end response = @client.post(\"/Numbers/#{self.number_id}\", attributes) response.code == 200 end. \n### Response: Updates or allocates a number.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String adviceMethodName(final String name, final int index) { return ProxettaNames.methodPrefix + name + ProxettaNames.methodDivider + index; } \n### Response:", "ground_truth": "Builds advice method name.", "predict": "This code defines a public static method named `adviceMethodName` that takes two arguments: `name` and `index`. The method returns a string that represents the advice method name with the given `name` and `index`.\n\nThe method is used to provide advice to a client on how to perform a specific operation. For example, if the client is trying to send a SMS, the method might return the advice \"Add country code to the URL\" with the index `0`.\n\nOverall, this method serves as a utility function that can be used in other parts of the application to provide guidance on how to perform various operations."}, {"ID": 782, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected function setMessage($message, array $parameters = []) { $message = sprintf( \"%s: %s.\", (new \\ReflectionClass($this))->getShortName(), $message ); $parameters = array_map([$this->getDumper(), \"dump\"], $parameters); $this->message = call_user_func_array( \"sprintf\", array_merge([$message], $parameters) ); }. \n### Response: Sets the error message.\n\n@see Essence\\Matchers\\AbstractMatcher::$message\n@param string $message\n@param array $parameters\n@return void.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void loadSpecialMethodArguments(final MethodVisitor mv, final MethodInfo methodInfo) { mv.visitVarInsn(ALOAD, 0); for (int i = 1; i <= methodInfo.getArgumentsCount(); i++) { loadMethodArgument(mv, methodInfo, i); } } \n### Response:", "ground_truth": "Loads all method arguments before INVOKESPECIAL call.", "predict": "Loads special method arguments.\n\n@see Essence\\Matchers\\AbstractMatcher::$message\n@param MethodVisitor $mv\n@param MethodInfo $methodInfo\n@return void."}, {"ID": 783, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def to_cartesian(r, theta, theta_units=\"radians\"): \"\"\" Converts polar r, theta to cartesian x, y. \"\"\" assert theta_units in ['radians', 'degrees'],\\ \"kwarg theta_units must specified in radians or degrees\" # Convert to radians if theta_units == \"degrees\": theta = to_radians(theta) theta = to_proper_radians(theta) x = r * cos(theta) y = r * sin(theta) return x, y. \n### Response: Converts polar r, theta to cartesian x, y..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void loadStaticMethodArguments(final MethodVisitor mv, final MethodInfo methodInfo) { for (int i = 0; i < methodInfo.getArgumentsCount(); i++) { loadMethodArgument(mv, methodInfo, i); } } \n### Response:", "ground_truth": "Loads all method arguments before INVOKESTATIC call.", "predict": "Loads static method arguments."}, {"ID": 784, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected function highlightCodeBlock($codeblock) { if(($tag=$this->getHighlightTag($codeblock))!==null && ($highlighter=$this->createHighLighter($tag))) { $codeblock = preg_replace('/\\A\\n+|\\n+\\z/', '', $codeblock); $tagLen = strpos($codeblock, $tag)+strlen($tag); $codeblock = ltrim(substr($codeblock, $tagLen)); $output=preg_replace('/<span\\s+[^>]*>(\\s*)<\\/span>/', '\\1', $highlighter->highlight($codeblock)); return \"<div class=\\\"{$this->highlightCssClass}\\\">\".$output.\"</div>\"; } else return \"<pre>\".CHtml::encode($codeblock).\"</pre>\"; }. \n### Response: Highlights the code block.\n@param string $codeblock the code block\n@return string the highlighted code block. Null if the code block does not need to highlighted.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void loadVirtualMethodArguments(final MethodVisitor mv, final MethodInfo methodInfo) { for (int i = 1; i <= methodInfo.getArgumentsCount(); i++) { loadMethodArgument(mv, methodInfo, i); } } \n### Response:", "ground_truth": "Loads all method arguments before INVOKEVIRTUAL call.", "predict": "Loads virtual method arguments.\n@param MethodVisitor $mv the MethodVisitor object\n@param MethodInfo $methodInfo the MethodInfo object\n@return void the method is executed\n\n"}, {"ID": 785, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def coerce_to_bytes(x, charset=sys.getdefaultencoding(), errors='strict'): \"\"\" Coerce value to bytes >>> a = coerce_to_bytes('hello') >>> assert isinstance(a, bytes) >>> a = coerce_to_bytes(b'hello') >>> assert isinstance(a, bytes) >>> a = coerce_to_bytes(None) >>> assert a is None >>> coerce_to_bytes(object()) Traceback (most recent call last): ... TypeError: Cannot coerce to bytes \"\"\" PY2 = sys.version_info[0] == 2 if PY2: # pragma: nocover if x is None: return None if isinstance(x, (bytes, bytearray, buffer)): return bytes(x) if isinstance(x, unicode): return x.encode(charset, errors) raise TypeError('Cannot coerce to bytes') else: # pragma: nocover if x is None: return None if isinstance(x, (bytes, bytearray, memoryview)): return bytes(x) if isinstance(x, str): return x.encode(charset, errors) raise TypeError('Cannot coerce to bytes'). \n### Response: Coerce value to bytes\n\n    >>> a = coerce_to_bytes('hello')\n    >>> assert isinstance(a, bytes)\n    >>> a = coerce_to_bytes(b'hello')\n    >>> assert isinstance(a, bytes)\n    >>> a = coerce_to_bytes(None)\n    >>> assert a is None\n    >>> coerce_to_bytes(object())\n    Traceback (most recent call last):\n    ...\n    TypeError: Cannot coerce to bytes.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void loadMethodArgument(final MethodVisitor mv, final MethodInfo methodInfo, final int index) { int offset = methodInfo.getArgumentOffset(index); int type = methodInfo.getArgument(index).getOpcode(); switch (type) { case 'V': break; case 'B': case 'C': case 'S': case 'I': case 'Z': mv.visitVarInsn(ILOAD, offset); break; case 'J': mv.visitVarInsn(LLOAD, offset); break; case 'F': mv.visitVarInsn(FLOAD, offset); break; case 'D': mv.visitVarInsn(DLOAD, offset); break; default: mv.visitVarInsn(ALOAD, offset); } } \n### Response:", "ground_truth": "Loads one argument. Index is 1-based. No conversion occurs.", "predict": "Load method argument\n\nThis method loads a method argument by consulting the method's argument offset and type. It uses a switch statement to handle different types of arguments. If the argument is a variable argument type (V, B, C, S, I, Z), the method loads the variable argument instruction (ILOAD, offset) and visits the variable argument in the visitor. If the argument is a method argument type (J, L, F, D), the method loads the method argument instruction (ALOAD, offset) and visits the method argument in the visitor. If the argument is not a variable argument type or a method argument type, the method simply loads the instruction (ALOAD, offset) and visits it in the visitor."}, {"ID": 786, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def _cls_fqn(self, cls): \"\"\" Returns fully qualified name for the class based on current namespace and the class name. \"\"\" ns = self._namespace_stack[-1] if ns in ['__base__', None]: return cls.__name__ else: return ns + '.' + cls.__name__. \n### Response: Returns fully qualified name for the class based on current namespace\n        and the class name..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void storeMethodArgument(final MethodVisitor mv, final MethodInfo methodInfo, final int index) { int offset = methodInfo.getArgumentOffset(index); int type = methodInfo.getArgument(index).getOpcode(); switch (type) { case 'V': break; case 'B': case 'C': case 'S': case 'I': case 'Z': mv.visitVarInsn(ISTORE, offset); break; case 'J': mv.visitVarInsn(LSTORE, offset); break; case 'F': mv.visitVarInsn(FSTORE, offset); break; case 'D': mv.visitVarInsn(DSTORE, offset); break; default: mv.visitVarInsn(ASTORE, offset); } } \n### Response:", "ground_truth": "Stores one argument. Index is 1-based. No conversion occurs.", "predict": "Store method argument.\n\nThis method is used to store the method argument in the stack frame. The method visitor mv is used to visit theVarInsn node for the argument and the switch statement is used to handle the different types of arguments. The default case is handled by storing the ASTORE argument."}, {"ID": 787, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static function lastIndexOf(array $array, callable $predicate) : int { for ($index = count($array) - 1; $index >= 0; --$index) { if ($predicate($array[$index])) { return $index; } } return -1; }. \n### Response: Returns index of last element of the array for which predicate is true. Returns -1 if none.\n\n@param array $array\n@param callable $predicate\n\n@return int.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void prepareReturnValue(final MethodVisitor mv, final MethodInfo methodInfo, int varOffset) { varOffset += methodInfo.getAllArgumentsSize(); switch (methodInfo.getReturnType().getOpcode()) { case 'V': mv.visitInsn(ACONST_NULL); break; case 'B': AsmUtil.valueOfByte(mv); break; case 'C': AsmUtil.valueOfCharacter(mv); break; case 'S': AsmUtil.valueOfShort(mv); break; case 'I': AsmUtil.valueOfInteger(mv); break; case 'Z': AsmUtil.valueOfBoolean(mv); break; case 'J': AsmUtil.valueOfLong(mv); break; case 'F': AsmUtil.valueOfFloat(mv); break; case 'D': AsmUtil.valueOfDouble(mv); break; } } \n### Response:", "ground_truth": "Prepares return value.", "predict": "Prepares the return value for the method and adds the type information for the return type.\n\n@param mv $mv\n@param methodInfo $methodInfo\n@param varOffset $varOffset\n\n@return void."}, {"ID": 788, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def get_gradebook_column_query_session(self, proxy): \"\"\"Gets the ``OsidSession`` associated with the gradebook column query service. arg: proxy (osid.proxy.Proxy): a proxy return: (osid.grading.GradebookColumnQuerySession) - a ``GradebookColumnQuerySession`` raise: NullArgument - ``proxy`` is ``null`` raise: OperationFailed - unable to complete request raise: Unimplemented - ``supports_gradebook_column_query()`` is ``false`` *compliance: optional -- This method must be implemented if ``supports_gradebook_column_query()`` is ``true``.* \"\"\" if not self.supports_gradebook_column_query(): raise errors.Unimplemented() # pylint: disable=no-member return sessions.GradebookColumnQuerySession(proxy=proxy, runtime=self._runtime). \n### Response: Gets the ``OsidSession`` associated with the gradebook column query service.\n\n        arg:    proxy (osid.proxy.Proxy): a proxy\n        return: (osid.grading.GradebookColumnQuerySession) - a\n                ``GradebookColumnQuerySession``\n        raise:  NullArgument - ``proxy`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  Unimplemented - ``supports_gradebook_column_query()`` is\n                ``false``\n        *compliance: optional -- This method must be implemented if\n        ``supports_gradebook_column_query()`` is ``true``.*.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String createMethodSignaturesKey(final int access, final String methodName, final String description, final String className) { return new StringBand(7) .append(access) .append(COLON) .append(description) .append(StringPool.UNDERSCORE) .append(className) .append(StringPool.HASH) .append(methodName) .toString(); } \n### Response:", "ground_truth": "Creates unique key for method signatures map.", "predict": "Creates a key for method signature information.\n\n        return: a string representing the method signature key\n        raise:  None - no exception is raised\n        raise:  ClassCastException - the className argument is not a valid class\n        raise:  InvalidAccessException - the access argument is not a valid access level\n        raise:  InvalidMethodNameException - the methodName argument is not a valid method name\n        raise:  InvalidDescriptionException - the description argument is not a valid description\n        raise:  Invalid classNameException - the className argument is not a valid class name\n        raise:  InvalidAccessLevelException - the access level argument is not a valid access level\n        raise:  InvalidMethodSignatureException - the method signature key is not valid\n        raise:  InvalidKeyException - the key is not valid\n        raise:  ClassCastException - the className argument is not a valid class\n        raise:  InvalidAccessException - the access argument is not a valid access level\n        raise:  InvalidMethodNameException - the methodName argument is not a valid method name\n        raise:  InvalidDescriptionException - the description argument is not a valid description\n        raise:  Invalid classNameException - the className argument is not a valid class name\n        raise:  InvalidAccessLevelException - the access level argument is not a valid access level\n        raise:  InvalidMethodSignatureException - the method signature key is not valid"}, {"ID": 789, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public VirtualHost getVirtualHost(String targetHost) throws WebAppHostNotFoundException { Iterator i = requestMapper.targetMappings(); while (i.hasNext()) { RequestProcessor rp = (RequestProcessor) i.next(); if (rp instanceof VirtualHost) { VirtualHost vHost = (VirtualHost) rp; if (targetHost.equalsIgnoreCase(vHost.getName())) return vHost; } } return null; }. \n### Response: Method getVirtualHost. Returns null if the input name does not\nmatch any configured host.\n\n@param targetHost\n@return VirtualHost\n\nThis method is not to be used in any request processing as it\nis not optimized for performance\n@throws WebAppHostNotFoundException.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void newArray(final MethodVisitor mv, final Class componentType) { if (componentType == int.class) { mv.visitIntInsn(NEWARRAY, T_INT); return; } if (componentType == long.class) { mv.visitIntInsn(NEWARRAY, T_LONG); return; } if (componentType == float.class) { mv.visitIntInsn(NEWARRAY, T_FLOAT); return; } if (componentType == double.class) { mv.visitIntInsn(NEWARRAY, T_DOUBLE); return; } if (componentType == byte.class) { mv.visitIntInsn(NEWARRAY, T_BYTE); return; } if (componentType == short.class) { mv.visitIntInsn(NEWARRAY, T_SHORT); return; } if (componentType == boolean.class) { mv.visitIntInsn(NEWARRAY, T_BOOLEAN); return; } if (componentType == char.class) { mv.visitIntInsn(NEWARRAY, T_CHAR); return; } mv.visitTypeInsn(ANEWARRAY, AsmUtil.typeToSignature(componentType)); } \n### Response:", "ground_truth": "Creates new array.", "predict": "Method newArray. Returns an array of the specified component type.\n\n@param componentType\n@return An array of the specified component type\n\nThis method is not to be used in any request processing as it\nis not optimized for performance.\n@throws IllegalArgumentException.\n\n"}, {"ID": 790, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function sendRequestPostExec(statementContext, onResultAvailable) { // get the request headers var headers = statementContext.resultRequestHeaders; // use the snowflake service to issue the request sendSfRequest(statementContext, { method : 'GET', headers: headers, url : Url.format( { pathname: '/queries/' + statementContext.statementId + '/result', search : QueryString.stringify( { disableOfflineChunks: false }) }), callback: buildResultRequestCallback( statementContext, headers, onResultAvailable) }); }. \n### Response: Issues a request to get the result of a statement that has been previously\nexecuted.\n\n@param statementContext\n@param onResultAvailable.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void storeIntoArray(final MethodVisitor mv, final Class componentType) { if (componentType == int.class) { mv.visitInsn(IASTORE); return; } if (componentType == long.class) { mv.visitInsn(LASTORE); return; } if (componentType == float.class) { mv.visitInsn(FASTORE); return; } if (componentType == double.class) { mv.visitInsn(DASTORE); return; } if (componentType == byte.class) { mv.visitInsn(BASTORE); return; } if (componentType == short.class) { mv.visitInsn(SASTORE); return; } if (componentType == boolean.class) { mv.visitInsn(BASTORE); return; } if (componentType == char.class) { mv.visitInsn(CASTORE); return; } mv.visitInsn(AASTORE); } \n### Response:", "ground_truth": "Stores element on stack into an array.", "predict": "Stores the component type of a given component intoArray.\n\n@param mv The MethodVisitor object to visit the insns of the componentType.\n@param componentType The type of the component being stored."}, {"ID": 791, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void deleteChildren(final long parentId) throws SQLException { Connection conn = null; PreparedStatement stmt = null; Timer.Context ctx = metrics.deleteChildrenTimer.time(); try { conn = connectionSupplier.getConnection(); stmt = conn.prepareStatement(deleteChildrenSQL); stmt.setLong(1, parentId); stmt.executeUpdate(); } finally { ctx.stop(); SQLUtil.closeQuietly(conn, stmt); } }. \n### Response: Deletes all children.\n@param parentId The parent post id.\n@throws SQLException on database error..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String extractEncoding(final String contentType, String defaultEncoding) { String encoding = extractEncoding(contentType); if (encoding == null) { if (defaultEncoding == null) { defaultEncoding = JoddCore.encoding; } encoding = defaultEncoding; } return encoding; } \n### Response:", "ground_truth": "Extracts encoding from a given content type.\n\n@param contentType     content type.\n@param defaultEncoding Default encoding to be used if extract returns {@code null}.\nIf defaultEncoding is {@code null}, {@link JoddCore#encoding} will be used.\n@return Encoding from the content type.\n@see #extractEncoding(String)", "predict": "Extracts the encoding from a given content type.\n@param contentType The content type of the document.\n@return The extracted encoding or null if the encoding cannot be found.\n\nNote: This method is only available in the provided code snippet as it is a static method."}, {"ID": 792, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function (type, name, callback) { if (type === 'modifier') { this.modifiers[name] = callback } else { this.plugins[name] = {'type': type, 'process': callback} } }. \n### Response: Register a plugin..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static boolean isEmptyFlags(Flags flags) { if (flags == null) return true; Flags.Flag[] systemFlags = flags.getSystemFlags(); if (systemFlags != null && systemFlags.length > 0) { return false; } String[] userFlags = flags.getUserFlags(); if (userFlags != null && userFlags.length > 0) { return false; } return true; } \n### Response:", "ground_truth": "Check whether flags is a empty flags\n@param flags a flags of message to check\n@return whether the flags is empty", "predict": "This method returns `true` if all flags are empty, and `false` otherwise."}, {"ID": 793, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (t *Template) GetAWSLambdaFunctionWithName(name string) (*resources.AWSLambdaFunction, error) { if untyped, ok := t.Resources[name]; ok { switch resource := untyped.(type) { case *resources.AWSLambdaFunction: return resource, nil } } return nil, fmt.Errorf(\"resource %q of type AWSLambdaFunction not found\", name) }. \n### Response: // GetAWSLambdaFunctionWithName retrieves all AWSLambdaFunction items from an AWS CloudFormation template\n// whose logical ID matches the provided name. Returns an error if not found..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String resolveAuthBearerToken(final HttpServletRequest request) { String header = request.getHeader(HEADER_AUTHORIZATION); if (header == null) { return null; } int ndx = header.indexOf(\"Bearer \"); if (ndx == -1) { return null; } return header.substring(ndx + 7).trim(); } \n### Response:", "ground_truth": "Returns Bearer token.", "predict": "// resolveAuthBearerToken retrieves the authorization header from the given HttpServletRequest and returns the token if found.\n// It also returns null if the header is not found or the token is not in the expected format.\n```"}, {"ID": 794, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def process(self, element): \"\"\"Run batch prediciton on a TF graph. Args: element: list of strings, representing one batch input to the TF graph. \"\"\" import collections import apache_beam as beam num_in_batch = 0 try: assert self._session is not None feed_dict = collections.defaultdict(list) for line in element: # Remove trailing newline. if line.endswith('\\n'): line = line[:-1] feed_dict[self._input_alias_map.values()[0]].append(line) num_in_batch += 1 # batch_result is list of numpy arrays with batch_size many rows. batch_result = self._session.run(fetches=self._tensor_names, feed_dict=feed_dict) # ex batch_result for batch_size > 1: # (array([value1, value2, ..., value_batch_size]), # array([[a1, b1, c1]], ..., [a_batch_size, b_batch_size, c_batch_size]]), # ...) # ex batch_result for batch_size == 1: # (value, # array([a1, b1, c1]), # ...) # Convert the results into a dict and unbatch the results. if num_in_batch > 1: for result in zip(*batch_result): predictions = {} for name, value in zip(self._aliases, result): predictions[name] = (value.tolist() if getattr(value, 'tolist', None) else value) yield predictions else: predictions = {} for i in range(len(self._aliases)): value = batch_result[i] value = (value.tolist() if getattr(value, 'tolist', None) else value) predictions[self._aliases[i]] = value yield predictions except Exception as e: # pylint: disable=broad-except yield beam.pvalue.TaggedOutput('errors', (str(e), element)). \n### Response: Run batch prediciton on a TF graph.\n\n    Args:\n      element: list of strings, representing one batch input to the TF graph..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void requireAuthentication(final HttpServletResponse resp, final String realm) throws IOException { resp.setHeader(WWW_AUTHENTICATE, \"Basic realm=\\\"\" + realm + '\\\"'); resp.sendError(HttpServletResponse.SC_UNAUTHORIZED); } \n### Response:", "ground_truth": "Sends correct headers to require basic authentication for the given realm.", "predict": "Require authentication for the response.\n\n    Args:\n      resp: HttpServletResponse, representing the response body.\n       realm: String, the realm to be authenticated.\n\n    Returns:\n      void."}, {"ID": 795, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public GridBagConstraints getGBConstraints() { if (m_gbconstraints == null) m_gbconstraints = new GridBagConstraints(); else { // Set back to default values m_gbconstraints.gridx = GridBagConstraints.RELATIVE; m_gbconstraints.gridy = GridBagConstraints.RELATIVE; m_gbconstraints.gridwidth = 1; m_gbconstraints.gridheight = 1; m_gbconstraints.weightx = 0; m_gbconstraints.weighty = 0; m_gbconstraints.anchor = GridBagConstraints.CENTER; m_gbconstraints.fill = GridBagConstraints.NONE; m_gbconstraints.insets.bottom = 0; m_gbconstraints.insets.left = 0; m_gbconstraints.insets.right = 0; m_gbconstraints.insets.top = 0; m_gbconstraints.ipadx = 0; m_gbconstraints.ipady = 0; } return m_gbconstraints; }. \n### Response: Get standard GridBagConstraints.\nThe grid bag constrain is reset to the original value in this method.\n@return The grid bag constraints..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void prepareDownload(final HttpServletResponse response, final File file, final String mimeType) { if (!file.exists()) { throw new IllegalArgumentException(\"File not found: \" + file); } if (file.length() > Integer.MAX_VALUE) { throw new IllegalArgumentException(\"File too big: \" + file); } prepareResponse(response, file.getAbsolutePath(), mimeType, (int) file.length()); } \n### Response:", "ground_truth": "Prepares response for file download with provided mime type.", "predict": "Prepares the response for a download by calling the prepareResponse() method with the given response, file path, mimeType, and file size.\n@param response The HttpServletResponse object to send the response with.\n@param file The File object to be downloaded.\n@param mimeType The MIME type of the file.\n@param fileSize The size of the file in bytes.\n@return The prepared response."}, {"ID": 796, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def parsedata(self, packet): '''parse the data section of a packet, it can range from 0 to many bytes''' data = [] datalength = ord(packet[3]) position = 4 while position < datalength + 4: data.append(packet[position]) position += 1 return data. \n### Response: parse the data section of a packet, it can range from 0 to many bytes.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void prepareResponse(final HttpServletResponse response, final String fileName, String mimeType, final int fileSize) { if ((mimeType == null) && (fileName != null)) { String extension = FileNameUtil.getExtension(fileName); mimeType = MimeTypes.getMimeType(extension); } if (mimeType != null) { response.setContentType(mimeType); } if (fileSize >= 0) { response.setContentLength(fileSize); } // support internationalization // See https://tools.ietf.org/html/rfc6266#section-5 for more information. if (fileName != null) { String name = FileNameUtil.getName(fileName); String encodedFileName = URLCoder.encode(name); response.setHeader(CONTENT_DISPOSITION, \"attachment;filename=\\\"\" + name + \"\\\";filename*=utf8''\" + encodedFileName); } } \n### Response:", "ground_truth": "null\n@param fileSize if less then 0 it will be ignored", "predict": "This method prepares the response for a file upload request. It checks if the mimeType and fileName are valid and if the file size is greater than zero. It then sets the ContentType and ContentLength of the response and supports internationalization by encoding the file name using a URL Coder."}, {"ID": 797, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function getNextUrl($absolute = false) { return $this->hasNext() ? $this->getUrl($this->getNext(), $absolute) : null; }. \n### Response: Get the next page url, null if not.\n\n@param bool $absolute Indicate if the URI should be absolute\n\n@return string|not.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static Cookie[] getAllCookies(final HttpServletRequest request, final String cookieName) { Cookie[] cookies = request.getCookies(); if (cookies == null) { return null; } ArrayList<Cookie> list = new ArrayList<>(cookies.length); for (Cookie cookie : cookies) { if (cookie.getName().equals(cookieName)) { list.add(cookie); } } if (list.isEmpty()) { return null; } return list.toArray(new Cookie[0]); } \n### Response:", "ground_truth": "", "predict": "Get all cookies from the request.\n\n@param HttpServletRequest request Object representing the HTTP request\n@return an array of Cookie objects\n\nNote: This method retrieves all cookies from the request and returns them as an array. It does not modify the request object."}, {"ID": 798, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def find_in_data_path(filename): \"\"\"Searches for a file within Fuel's data path. This function loops over all paths defined in Fuel's data path and returns the first path in which the file is found. Parameters ---------- filename : str Name of the file to find. Returns ------- file_path : str Path to the first file matching `filename` found in Fuel's data path. Raises ------ IOError If the file doesn't appear in Fuel's data path. \"\"\" for path in config.data_path: path = os.path.expanduser(os.path.expandvars(path)) file_path = os.path.join(path, filename) if os.path.isfile(file_path): return file_path raise IOError(\"{} not found in Fuel's data path\".format(filename)). \n### Response: Searches for a file within Fuel's data path.\n\n    This function loops over all paths defined in Fuel's data path and\n    returns the first path in which the file is found.\n\n    Parameters\n    ----------\n    filename : str\n        Name of the file to find.\n\n    Returns\n    -------\n    file_path : str\n        Path to the first file matching `filename` found in Fuel's\n        data path.\n\n    Raises\n    ------\n    IOError\n        If the file doesn't appear in Fuel's data path..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String readRequestBodyFromReader(final HttpServletRequest request) throws IOException { BufferedReader buff = request.getReader(); StringWriter out = new StringWriter(); StreamUtil.copy(buff, out); return out.toString(); } \n### Response:", "ground_truth": "Reads HTTP request body using the request reader. Once body is read,\nit cannot be read again!", "predict": "Reads the request body from the `HttpServletRequest` object and writes it to a `StringWriter` object.\n\n    This method throws an `IOException` if an error occurs while reading the request body.\n\n    Parameters\n    ----------\n    request : HttpServletRequest\n        The `HttpServletRequest` object to read the request body from.\n\n    Returns\n    -------\n    String\n        The request body as a `String`.\n\n    Raises\n    ------\n    IOException\n        If an error occurs while reading the request body.."}, {"ID": 799, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public List<LDAPEntry> search(LDAPConnection ldapConnection, String baseDN, String query) throws GuacamoleException { logger.debug(\"Searching \\\"{}\\\" for objects matching \\\"{}\\\".\", baseDN, query); try { // Search within subtree of given base DN LDAPSearchResults results = ldapConnection.search(baseDN, LDAPConnection.SCOPE_SUB, query, null, false, confService.getLDAPSearchConstraints()); // Produce list of all entries in the search result, automatically // following referrals if configured to do so List<LDAPEntry> entries = new ArrayList<>(results.getCount()); while (results.hasMore()) { try { entries.add(results.next()); } // Warn if referrals cannot be followed catch (LDAPReferralException e) { if (confService.getFollowReferrals()) { logger.error(\"Could not follow referral: {}\", e.getFailedReferral()); logger.debug(\"Error encountered trying to follow referral.\", e); throw new GuacamoleServerException(\"Could not follow LDAP referral.\", e); } else { logger.warn(\"Given a referral, but referrals are disabled. Error was: {}\", e.getMessage()); logger.debug(\"Got a referral, but configured to not follow them.\", e); } } catch (LDAPException e) { logger.warn(\"Failed to process an LDAP search result. Error was: {}\", e.resultCodeToString()); logger.debug(\"Error processing LDAPEntry search result.\", e); } } return entries; } catch (LDAPException | GuacamoleException e) { throw new GuacamoleServerException(\"Unable to query list of \" + \"objects from LDAP directory.\", e); } }. \n### Response: Executes an arbitrary LDAP query using the given connection, returning a\nlist of all results. Only objects beneath the given base DN are\nincluded in the search.\n\n@param ldapConnection\nThe current connection to the LDAP server, associated with the\ncurrent user.\n\n@param baseDN\nThe base DN to search using the given LDAP query.\n\n@param query\nThe LDAP query to execute.\n\n@return\nA list of all results accessible to the user currently bound under\nthe given LDAP connection.\n\n@throws GuacamoleException\nIf an error occurs executing the query, or if configuration\ninformation required to execute the query cannot be read from\nguacamole.properties..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String readRequestBodyFromStream(final HttpServletRequest request) throws IOException { String charEncoding = request.getCharacterEncoding(); if (charEncoding == null) { charEncoding = JoddCore.encoding; } CharArrayWriter charArrayWriter = new CharArrayWriter(); BufferedReader bufferedReader = null; try { InputStream inputStream = request.getInputStream(); if (inputStream != null) { bufferedReader = new BufferedReader(new InputStreamReader(inputStream, charEncoding)); StreamUtil.copy(bufferedReader, charArrayWriter); } else { return StringPool.EMPTY; } } finally { StreamUtil.close(bufferedReader); } return charArrayWriter.toString(); } \n### Response:", "ground_truth": "Reads HTTP request body using the request stream. Once body is read,\nit cannot be read again!", "predict": "Reads the request body from the specified HttpServletRequest and returns a string representation of it as a CharArrayWriter.\n\n@param request\nThe HttpServletRequest object containing the request parameters and headers.\n\n@return\nA string representation of the request body as a CharArrayWriter.\n\n@throws IOException\nIf the request body cannot be read from the specified HttpServletRequest.\n\n"}, {"ID": 800, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static boolean copyModuleMetaDataSlot(MetaDataEvent<ModuleMetaData> event, MetaDataSlot slot) { Container container = event.getContainer(); MetaData metaData = event.getMetaData(); try { // For now, we just need to copy from WebModuleInfo, and ClientModuleInfo // Supports EJB in WAR and ManagedBean in Client ExtendedModuleInfo moduleInfo = (ExtendedModuleInfo) container.adapt(NonPersistentCache.class).getFromCache(WebModuleInfo.class); if (moduleInfo == null) { moduleInfo = (ExtendedModuleInfo) container.adapt(NonPersistentCache.class).getFromCache(ClientModuleInfo.class); } if (moduleInfo != null) { ModuleMetaData primaryMetaData = moduleInfo.getMetaData(); if (metaData != primaryMetaData) { Object slotData = primaryMetaData.getMetaData(slot); if (slotData == null) { // The caller is required to populate slot data. throw new IllegalStateException(); } metaData.setMetaData(slot, slotData); return true; } } } catch (UnableToAdaptException e) { throw new UnsupportedOperationException(e); } return false; }. \n### Response: Copy slot data from a primary module metadata to a nested module\nmetadata. This is necessary for containers that want to share\nmodule-level data for all components in a module, because nested modules\nhave their own distinct metadata.\n\n@param event event from {@link ModuleMetaDataListener#moduleMetaDataCreated}\n@param slot the slot to copy\n@return true if the data was copied, or false if this is the primary metadata\nand the caller must set the slot data\n@throws IllegalStateException if the primary metadata slot was not set.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void storeContextPath(final PageContext pageContext, final String contextPathVariableName) { String ctxPath = getContextPath(pageContext); HttpServletRequest request = (HttpServletRequest) pageContext.getRequest(); request.setAttribute(contextPathVariableName, ctxPath); ServletContext servletContext = pageContext.getServletContext(); servletContext.setAttribute(contextPathVariableName, ctxPath); } \n### Response:", "ground_truth": "Stores context path in server context and request scope.", "predict": "Store the current context path in the request and the servlet context.\n\n@param pageContext the PageContext object\n@param contextPathVariableName the variable name used to store the context path\n@return void\n@throws  servletException if the request or servlet context is not valid."}, {"ID": 801, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function applyFields($text) { $mailKeys = array_keys($this->getMailFields()); return str_replace($mailKeys, $this->mailFields, $text); }. \n### Response: Replace the mailkeys with the mailfields in given text\n@param  string $text     The text to apply the replacment to\n@return string           The text with replaced mailfields.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void storeContextPath(final ServletContext servletContext, final String contextPathVariableName) { String ctxPath = getContextPath(servletContext); servletContext.setAttribute(contextPathVariableName, ctxPath); } \n### Response:", "ground_truth": "Stores context path in page context and request scope.", "predict": "Store the context path in the servlet context\n@param  ServletContext servletContext The servlet context to store the context path in\n@return void            No effect\n\n"}, {"ID": 802, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override protected void propertyChange(PropertyChangeEvent evt) { super.propertyChange(evt); String name = evt.getPropertyName(); if (name.equals(\"foreground\")) { updateForeground((Color)evt.getNewValue()); } else if (name.equals(\"font\")) { updateFont((Font)evt.getNewValue()); } else if (name.equals(\"document\")) { JComponent comp = getComponent(); updateForeground(comp.getForeground()); updateFont(comp.getFont()); } }. \n### Response: This method gets called when a bound property is changed\non the associated JTextComponent.  This is a hook\nwhich UI implementations may change to reflect how the\nUI displays bound properties of JTextComponent subclasses.\nIf the font, foreground or document has changed, the\nthe appropriate property is set in the default style of\nthe document.\n\n@param evt the property change event.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public boolean isGetParameter(final HttpServletRequest request, String name) { name = URLCoder.encodeQueryParam(name) + '='; String query = request.getQueryString(); String[] nameValuePairs = StringUtil.splitc(query, '&'); for (String nameValuePair : nameValuePairs) { if (nameValuePair.startsWith(name)) { return true; } } return false; } \n### Response:", "ground_truth": "Checks if some parameter is in GET parameters.", "predict": "This method checks if a GET parameter named \"name\" is present in the query string of the HTTP request. It first encodes the name using URLCoder.encodeQueryParam() and then splits the query string using the \"&\" character to get an array of name value pairs. It then checks if the start of the name value pair is equal to the name being checked. If so, it returns true, otherwise it returns false.\n\n@param request the HttpServletRequest object.\n\n@param name the name of the GET parameter to check.\n\n@return a boolean indicating if the parameter is present."}, {"ID": 803, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (s *GetMasterAccountOutput) SetMaster(v *Master) *GetMasterAccountOutput { s.Master = v return s }. \n### Response: // SetMaster sets the Master field's value..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String[] prepareParameters( final String[] paramValues, final boolean treatEmptyParamsAsNull, final boolean ignoreEmptyRequestParams) { if (treatEmptyParamsAsNull || ignoreEmptyRequestParams) { int emptyCount = 0; int total = paramValues.length; for (int i = 0; i < paramValues.length; i++) { String paramValue = paramValues[i]; if (paramValue == null) { emptyCount++; continue; } if (paramValue.length() == 0) { emptyCount++; if (treatEmptyParamsAsNull) { paramValue = null; } } paramValues[i] = paramValue; } if ((ignoreEmptyRequestParams) && (emptyCount == total)) { return null; } } return paramValues; } \n### Response:", "ground_truth": "Prepares parameters for further processing.\n@param paramValues\tstring array of param values\n@param treatEmptyParamsAsNull\tempty parameters should be treated as null\n@param ignoreEmptyRequestParams\tif all parameters are empty, return null", "predict": "//PrepareParameters checks if the input parameters are empty or not, and if not, it sets the emptyCount and total to paramValues.length."}, {"ID": 804, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def login(self, password): \"\"\"Login to filemail as the current user. :param password: :type password: ``str`` \"\"\" method, url = get_URL('login') payload = { 'apikey': self.config.get('apikey'), 'username': self.username, 'password': password, 'source': 'Desktop' } res = getattr(self.session, method)(url, params=payload) if res.status_code == 200: return True hellraiser(res). \n### Response: Login to filemail as the current user.\n\n        :param password:\n        :type password: ``str``.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void copyParamsToAttributes( final HttpServletRequest servletRequest, final boolean treatEmptyParamsAsNull, final boolean ignoreEmptyRequestParams) { Enumeration paramNames = servletRequest.getParameterNames(); while (paramNames.hasMoreElements()) { String paramName = (String) paramNames.nextElement(); if (servletRequest.getAttribute(paramName) != null) { continue; } String[] paramValues = servletRequest.getParameterValues(paramName); paramValues = prepareParameters(paramValues, treatEmptyParamsAsNull, ignoreEmptyRequestParams); if (paramValues == null) { continue; } servletRequest.setAttribute(paramName, paramValues.length == 1 ? paramValues[0] : paramValues); } // multipart if (!(servletRequest instanceof MultipartRequestWrapper)) { return; } MultipartRequestWrapper multipartRequest = (MultipartRequestWrapper) servletRequest; if (!multipartRequest.isMultipart()) { return; } paramNames = multipartRequest.getFileParameterNames(); while (paramNames.hasMoreElements()) { String paramName = (String) paramNames.nextElement(); if (servletRequest.getAttribute(paramName) != null) { continue; } FileUpload[] paramValues = multipartRequest.getFiles(paramName); servletRequest.setAttribute(paramName, paramValues.length == 1 ? paramValues[0] : paramValues); } } \n### Response:", "ground_truth": "Copies all request parameters to attributes.", "predict": "Copy parameters to attributes.\n\n        :paramservletRequest:\n        :type boolean:\n        :param treatEmptyParamsAsNull:\n        :type boolean:\n        :param ignoreEmptyRequestParams:\n        :type boolean:."}, {"ID": 805, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def list_nodes_full(**kwargs): ''' Return all data on nodes ''' nodes = _query('server/list') ret = {} for node in nodes: name = nodes[node]['label'] ret[name] = nodes[node].copy() ret[name]['id'] = node ret[name]['image'] = nodes[node]['os'] ret[name]['size'] = nodes[node]['VPSPLANID'] ret[name]['state'] = nodes[node]['status'] ret[name]['private_ips'] = nodes[node]['internal_ip'] ret[name]['public_ips'] = nodes[node]['main_ip'] return ret. \n### Response: Return all data on nodes.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void invokeBody(final JspFragment body) throws JspException { if (body == null) { return; } try { body.invoke(null); } catch (IOException ioex) { throw new JspException(\"Tag body failed\", ioex); } } \n### Response:", "ground_truth": "Invokes tag body.", "predict": "Method-level comment: Invokes the specified JspFragment and throws any JspExceptions that may occur."}, {"ID": 806, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected function indentArray(array $elements) { return self::INDENTATION . \\str_replace(PHP_EOL, PHP_EOL . self::INDENTATION, \\implode(PHP_EOL, $elements)); }. \n### Response: Indent all elements in the supplied array.\nThe array must contain either strings or objects that can be casted to strings.\n@param array $elements.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static char[] renderBody(final JspFragment body) throws JspException { FastCharArrayWriter writer = new FastCharArrayWriter(); invokeBody(body, writer); return writer.toCharArray(); } \n### Response:", "ground_truth": "Renders tag body to char array.", "predict": "Renders the body of the JspFragment.\nInvokes the body of the JspFragment using the FastCharArrayWriter.\nReturns the rendered character array.\n@return a character array containing the rendered text.\n@throws JspException If an error occurs during the rendering process."}, {"ID": 807, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private String getPropertyLabel(PropertyIdValue propertyIdValue) { PropertyRecord propertyRecord = this.propertyRecords .get(propertyIdValue); if (propertyRecord == null || propertyRecord.propertyDocument == null) { return propertyIdValue.getId(); } else { return getLabel(propertyIdValue, propertyRecord.propertyDocument); } }. \n### Response: Returns a string that should be used as a label for the given property.\n\n@param propertyIdValue\nthe property to label\n@return the label.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String renderBodyToString(final JspFragment body) throws JspException { char[] result = renderBody(body); return new String(result); } \n### Response:", "ground_truth": "Renders tag body to string.\n@see #renderBody(javax.servlet.jsp.tagext.JspFragment)", "predict": "Renders the body of the JspFragment and returns a string representation.\n\n@param body\nthe JspFragment to render\n@return the string representation.\n\n"}, {"ID": 808, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func SassMakeDataContext(gos string) SassDataContext { s := C.CString(gos) dctx := C.sass_make_data_context(s) return (SassDataContext)(dctx) }. \n### Response: // SassMakeDataContext creates a data context from a source string.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void invokeInitMethods(final InitMethodInvocationStrategy invocationStrategy) { for (final InitMethodPoint initMethod : beanDefinition.initMethodPoints()) { if (invocationStrategy != initMethod.invocationStrategy) { continue; } try { initMethod.method.invoke(bean); } catch (Exception ex) { throw new PetiteException(\"Invalid init method: \" + initMethod, ex); } } } \n### Response:", "ground_truth": "Invokes init methods.", "predict": "// Invokes all init methods in the given bean definition and throws any invalid ones."}, {"ID": 809, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def deprecate(old, new, reference: '', ids: []) return if @ignored.include?('deprecations') || (@ignored & ids.map!(&:to_s)).any? msg = ids.empty? ? '' : \"[#{ids.map(&:inspect).join(', ')}] \" ref_msg = reference.empty? ? '.' : \"; see explanation for this deprecation: #{reference}.\" warn \"[DEPRECATION] #{msg}#{old} is deprecated. Use #{new} instead#{ref_msg}\" end. \n### Response: Marks code as deprecated with replacement.\n\n @param [String] old\n @param [String] new.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void callDestroyMethods() { for (final DestroyMethodPoint destroyMethodPoint : beanDefinition.destroyMethodPoints()) { try { destroyMethodPoint.method.invoke(bean); } catch (Exception ex) { throw new PetiteException(\"Invalid destroy method: \" + destroyMethodPoint.method, ex); } } } \n### Response:", "ground_truth": "Calls destroy methods on given BeanData. Destroy methods are called\nwithout any order.", "predict": "Provides an explanation for the deprecation and handles the exception.\n\n@param [DestroyMethodPoint] destroyMethodPoint.\n\n@return void.\n\n"}, {"ID": 810, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String normalize(String pidString) throws MalformedPIDException { if (pidString == null) { throw new MalformedPIDException(\"PID is null.\"); } return normalize(pidString, 0, pidString.length()); }. \n### Response: Return the normalized form of the given pid string, or throw a\nMalformedPIDException.\n@param pidString\n@return String normalized version of the pid\n@throws MalformedPIDException.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public Object newBeanInstance() { if (beanDefinition.ctor == CtorInjectionPoint.EMPTY) { throw new PetiteException(\"No constructor (annotated, single or default) founded as injection point for: \" + beanDefinition.type.getName()); } int paramNo = beanDefinition.ctor.references.length; Object[] args = new Object[paramNo]; // wiring if (beanDefinition.wiringMode != WiringMode.NONE) { for (int i = 0; i < paramNo; i++) { args[i] = pc.getBean(beanDefinition.ctor.references[i]); if (args[i] == null) { if ((beanDefinition.wiringMode == WiringMode.STRICT)) { throw new PetiteException( \"Wiring constructor failed. References '\" + beanDefinition.ctor.references[i] + \"' not found for constructor: \" + beanDefinition.ctor.constructor); } } } } // create instance final Object bean; try { bean = beanDefinition.ctor.constructor.newInstance(args); } catch (Exception ex) { throw new PetiteException(\"Failed to create new bean instance '\" + beanDefinition.type.getName() + \"' using constructor: \" + beanDefinition.ctor.constructor, ex); } return bean; } \n### Response:", "ground_truth": "Creates a new instance.", "predict": "This method creates a new instance of a bean using the provided constructor injection point and arguments. It first checks if the constructor is annotated or has a default implementation, and if not, it throws a PetiteException with a message indicating that no constructor was found.\n\nThe method then allocates an array of objects to be passed to the constructor and sets the first element to be used as an argument. If an object is not found in the array, it throws a new PetiteException with a message indicating that the wiring constructor failed.\n\nFinally, the method creates the new bean instance by calling the constructor and passing the allocated array of arguments. If an exception occurs during this process, it throws a new PetiteException with a message indicating the failure.\n\nThe method returns the newly created bean instance."}, {"ID": 811, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def append_row(self, values, value_input_option='RAW'): \"\"\"Adds a row to the worksheet and populates it with values. Widens the worksheet if there are more values than columns. :param values: List of values for the new row. :param value_input_option: (optional) Determines how input data should be interpreted. See `ValueInputOption`_ in the Sheets API. :type value_input_option: str .. _ValueInputOption: https://developers.google.com/sheets/api/reference/rest/v4/ValueInputOption \"\"\" params = { 'valueInputOption': value_input_option } body = { 'values': [values] } return self.spreadsheet.values_append(self.title, params, body). \n### Response: Adds a row to the worksheet and populates it with values.\n        Widens the worksheet if there are more values than columns.\n\n        :param values: List of values for the new row.\n        :param value_input_option: (optional) Determines how input data should\n                                    be interpreted. See `ValueInputOption`_ in\n                                    the Sheets API.\n        :type value_input_option: str\n\n        .. _ValueInputOption: https://developers.google.com/sheets/api/reference/rest/v4/ValueInputOption.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void injectParams(final ParamManager paramManager, final boolean implicitParamInjection) { if (beanDefinition.name == null) { return; } if (implicitParamInjection) { // implicit final int len = beanDefinition.name.length() + 1; for (final String param : beanDefinition.params) { final Object value = paramManager.get(param); final String destination = param.substring(len); try { BeanUtil.declared.setProperty(bean, destination, value); } catch (Exception ex) { throw new PetiteException(\"Unable to set parameter: '\" + param + \"' to bean: \" + beanDefinition.name, ex); } } } // explicit for (final ValueInjectionPoint pip : beanDefinition.values) { final String value = paramManager.parseKeyTemplate(pip.valueTemplate); try { BeanUtil.declared.setProperty(bean, pip.property, value); } catch (Exception ex) { throw new PetiteException(\"Unable to set value for: '\" + pip.valueTemplate + \"' to bean: \" + beanDefinition.name, ex); } } } \n### Response:", "ground_truth": "Injects all parameters.", "predict": "InjectParams:\n\n* Validates if the bean definition is null and returns if not.\n* If the bean definition is null, returns immediately.\n* If the bean definition is not null, checks if the method is implicit or explicit parameter injection.\n* If it's implicit parameter injection, iterates over all parameters and sets the property of the bean.\n* If it's explicit parameter injection, parses the key template of the value injection point and sets the value.\n\n.. _BeanDefinition: https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets.beanDefinition.\n.. _ParamManager: https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets.ParamManager.\n.. _ImplicitParamInjection: https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets.beanDefinition.parameters.implicit.\n.. _ explicitParamInjection: https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets.beanDefinition.parameters.implicit."}, {"ID": 812, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def clean_translated_locales(configuration, langs=None): \"\"\" Strips out the warning from all translated po files about being an English source file. \"\"\" if not langs: langs = configuration.translated_locales for locale in langs: clean_locale(configuration, locale). \n### Response: Strips out the warning from all translated po files\n    about being an English source file..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @SuppressWarnings({\"UnusedDeclaration\"}) public String rewrite(final HttpServletRequest servletRequest, final String actionPath, final String httpMethod) { return actionPath; } \n### Response:", "ground_truth": "Rewrites action path.", "predict": "rewrites the specified action path and HTTP method, returning the action path."}, {"ID": 813, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def export_polydata(obj, file_name, **kwargs): \"\"\" Exports control points or evaluated points in VTK Polydata format. Please see the following document for details: http://www.vtk.org/VTK/img/file-formats.pdf Keyword Arguments: * ``point_type``: **ctrlpts** for control points or **evalpts** for evaluated points * ``tessellate``: tessellates the points (works only for surfaces) :param obj: geometry object :type obj: abstract.SplineGeometry, multi.AbstractContainer :param file_name: output file name :type file_name: str :raises GeomdlException: an error occurred writing the file \"\"\" content = export_polydata_str(obj, **kwargs) return exch.write_file(file_name, content). \n### Response: Exports control points or evaluated points in VTK Polydata format.\n\n    Please see the following document for details: http://www.vtk.org/VTK/img/file-formats.pdf\n\n    Keyword Arguments:\n        * ``point_type``: **ctrlpts** for control points or **evalpts** for evaluated points\n        * ``tessellate``: tessellates the points (works only for surfaces)\n\n    :param obj: geometry object\n    :type obj: abstract.SplineGeometry, multi.AbstractContainer\n    :param file_name: output file name\n    :type file_name: str\n    :raises GeomdlException: an error occurred writing the file.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void addHeader(final String name, final String value) { List<String> valuesList = super.getAll(name); if (valuesList.isEmpty()) { super.add(name, value); return; } super.remove(name); valuesList.add(value); super.addAll(name, valuesList); } \n### Response:", "ground_truth": "Adds new header value. If existing value exist, it will be removed\nso the store the new key value.", "predict": "Adds a header to the list of values for the given name.\n\n    List<String> valuesList = super.getAll(name);\n    if (valuesList.isEmpty()) {\n        super.add(name, value);\n        return;\n    }\n    super.remove(name);\n    valuesList.add(value);\n    super.addAll(name, valuesList);\n\n    // Adds the header to the super class's list of values.\n    // This is necessary because the super class's list of values\n    // is used to store the values for all of the methods in the\n    // class hierarchy.\n    //\n    // :param name: the name of the header\n    // :param value: the value to add to the header\n    // :return: None\n    // :raises GeomdlException: an error occurred writing the file.\n}"}, {"ID": 814, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function tryWindowsKey (key, device, mac) { // Skip the Properties key to avoid problems with permissions if (key.indexOf('Properties') > -1) { return false } const networkAdapterKeyPath = new Winreg({ hive: Winreg.HKLM, key: key }) // we need to format the MAC a bit for Windows mac = mac.replace(/:/g, '') networkAdapterKeyPath.values((err, values) => { let gotAdapter = false if (err) { console.log('ERROR: ' + err) } else { for (let x = 0; x < values.length; x++) { if (values[x].name === 'AdapterModel') { gotAdapter = true break } } if (gotAdapter) { networkAdapterKeyPath.set('NetworkAddress', 'REG_SZ', mac, () => { try { cp.execSync('netsh interface set interface \"' + device + '\" disable') cp.execSync('netsh interface set interface \"' + device + '\" enable') } catch (err) { throw new Error('Unable to restart device, is the cmd running as admin?') } }) } } }) }. \n### Response: Tries to set the \"NetworkAddress\" value on the specified registry key for given\n`device` to `mac`.\n\n@param {string} key\n@param {string} device\n@param {string} mac.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void put(final String profile, final Map<String, PropsEntry> map, final String key, final String value, final boolean append) { String realValue = value; if (append || appendDuplicateProps) { PropsEntry pv = map.get(key); if (pv != null) { realValue = pv.value + APPEND_SEPARATOR + realValue; } } PropsEntry propsEntry = new PropsEntry(key, realValue, profile, this); // update position pointers if (first == null) { first = propsEntry; } else { last.next = propsEntry; } last = propsEntry; // add to the map map.put(key, propsEntry); } \n### Response:", "ground_truth": "Puts key-value pair into the map, with respect of appending duplicate properties", "predict": "Provides a method `put` for adding a new entry to a `Map<String, PropsEntry>`.\n\n@param {String} profile\n@param {Map<String, PropsEntry>} map\n@param {String} key\n@param {String} value\n@param {boolean} append."}, {"ID": 815, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private function parentIsIn($conjunction, array $parentModelIds) { if (!empty($this->expression)) { $this->expression[] = $conjunction; } $expression = []; foreach ($parentModelIds as $parentModelId) { $index = \\count($this->variables); $expression[] = \\sprintf(self::PARENT_IS_EXPRESSION, $index); $this->variables[] = $parentModelId; } $this->expression[] = '(' . \\implode(' or ', $expression) . ')'; $this->compiled = null; return $this; }. \n### Response: Add parent is in.\n\n@param string          $conjunction    AND or OR.\n@param array|ModelId[] $parentModelIds The parent ids.\n\n@return static.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void putBaseProperty(final String key, final String value, final boolean append) { put(null, baseProperties, key, value, append); } \n### Response:", "ground_truth": "Adds base property.", "predict": "Add base property.\n\n@param String key The key of the property.\n@param String value The value of the property.\n@param boolean append If the property should be appended to the existing properties.\n\n@return void."}, {"ID": 816, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function GetCustomCountQuery($objectclass, $criteria) { $this->IncludeModel($objectclass); $sql = call_user_func( array($objectclass,\"GetCustomCountQuery\"),$criteria ); return $sql; }. \n### Response: Returns the custom \"counter\" query for the given object class if it is defined\n\n@access public\n@param string $objectclass the type of object that your DataSet will contain\n@return Array of FieldMap objects.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void putProfileProperty(final String key, final String value, final String profile, final boolean append) { Map<String, PropsEntry> map = profileProperties.computeIfAbsent(profile, k -> new HashMap<>()); put(profile, map, key, value, append); } \n### Response:", "ground_truth": "Adds profile property.", "predict": "Adds a new property to the given profile.\n\n@access public\n@param string $profile the profile object that contains the properties to be added\n@param string $key the key of the property\n@param string $value the value of the property\n@param boolean $append whether to append the new property to the existing ones\n@return void."}, {"ID": 817, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private function fillZipWithFileContents($zipFileUrl) { $this->zip->open($zipFileUrl, \\ZipArchive::CREATE); $this->finalizeSheet(); $this->finalizeStyles(); $this->finalizeDefaultXmls(); }. \n### Response: Add all file and string contents to zip file.\n\n@param string $zipFileUrl.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public PropsEntry getProfileProperty(final String profile, final String key) { final Map<String, PropsEntry> profileMap = profileProperties.get(profile); if (profileMap == null) { return null; } return profileMap.get(key); } \n### Response:", "ground_truth": "Returns profile property.", "predict": "This method retrieves the specified profile property by key. It first retrieves the associated profile map from the `profileProperties` object, and then returns the value associated with the key specified.\n\n@param string $profile The profile name or ID to look up.\n@param string $key The key of the profile property to retrieve."}, {"ID": 818, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private function addConfig(ParsableInterface $file) { $app = $this->getContainer(); try { $newConfig = $file->parse(); } catch (RuntimeException $e) { $app['logger.flash']->danger($e->getMessage()); $app['logger.system']->error($e->getMessage(), ['event' => 'exception', 'exception' => $e]); throw $e; } if (is_array($newConfig)) { $this->config = Arr::replaceRecursive($this->config, $newConfig); } }. \n### Response: Merge in a yaml file to the config.\n\n@param ParsableInterface $file.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public String resolveMacros(String value, final String... profiles) { // create string template parser that will be used internally StringTemplateParser stringTemplateParser = new StringTemplateParser(); stringTemplateParser.setResolveEscapes(false); if (!ignoreMissingMacros) { stringTemplateParser.setReplaceMissingKey(false); } else { stringTemplateParser.setReplaceMissingKey(true); stringTemplateParser.setMissingKeyReplacement(StringPool.EMPTY); } final Function<String, String> macroResolver = macroName -> { String[] lookupProfiles = profiles; int leftIndex = macroName.indexOf('<'); if (leftIndex != -1) { int rightIndex = macroName.indexOf('>'); String profiles1 = macroName.substring(leftIndex + 1, rightIndex); macroName = macroName.substring(0, leftIndex).concat(macroName.substring(rightIndex + 1)); lookupProfiles = StringUtil.splitc(profiles1, ','); StringUtil.trimAll(lookupProfiles); } return lookupValue(macroName, lookupProfiles); }; // start parsing int loopCount = 0; while (loopCount++ < MAX_INNER_MACROS) { final String newValue = stringTemplateParser.parse(value, macroResolver); if (newValue.equals(value)) { break; } if (skipEmptyProps) { if (newValue.length() == 0) { return null; } } value = newValue; } return value; } \n### Response:", "ground_truth": "Resolves all macros in this props set. Called on property lookup.", "predict": "This method resolve macros from a given value and profiles, and returns the new value after parsing. It creates a string template parser that will be used internally, and sets various options to optimize the parsing process. The method starts by parsing the value and profiles, and then continues parsing until it reaches the maximum number of inner macros. If the new value is the same as the current value, it breaks out of the loop. If the new value is empty, it returns null. Otherwise, it returns the new value."}, {"ID": 819, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function fetchPairs($key, $value = NULL) { $return = array(); foreach ($this as $row) { $return[$row->$key] = $value ? $row->$value : $row->$key; } return $return; }. \n### Response: Returns all rows as associative array.\n@param  string\n@param  string $value name used for an array value or NULL for the whole row\n@return array.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public Map extract(Map target, final String[] profiles, final String[] wildcardPatterns, String prefix) { if (target == null) { target = new HashMap(); } // make sure prefix ends with a dot if (prefix != null) { if (!StringUtil.endsWithChar(prefix, '.')) { prefix += StringPool.DOT; } } if (profiles != null) { for (String profile : profiles) { while (true) { final Map<String, PropsEntry> map = this.profileProperties.get(profile); if (map != null) { extractMap(target, map, profiles, wildcardPatterns, prefix); } final int ndx = profile.lastIndexOf('.'); if (ndx == -1) { break; } profile = profile.substring(0, ndx); } } } extractMap(target, this.baseProperties, profiles, wildcardPatterns, prefix); return target; } \n### Response:", "ground_truth": "Extracts props to target map. This is all-in-one method, that does many things at once.", "predict": "Extracts a map from the target, considering all profiles and wildcard patterns. Ensures that the prefix ends with a dot and iterates through all profiles. Returns the extracted map.\n\n@param  Map\n@param  String[]\n@param  String[]\n@param  String\n@return Map."}, {"ID": 820, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func UpdateIPRole(client *TwilioIPMessagingClient, serviceSid string, sid string, friendlyName string, kind string, permissions []string) (*IPRole, error) { var role *IPRole params := url.Values{} params.Set(\"FriendlyName\", friendlyName) params.Set(\"Type\", kind) if permissions != nil { for _, p := range permissions { params.Add(\"Permission\", p) } } res, err := client.post(params, \"/Services/\"+serviceSid+\"/Roles/\"+sid+\".json\") if err != nil { return role, err } role = new(IPRole) err = json.Unmarshal(res, role) return role, err }. \n### Response: // UpdateIPRole updates an existing IP Messaging Role..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private static int streamtoword(byte[] data, int[] offp) { int i; int word = 0; int off = offp[0]; for (i = 0; i < 4; i++) { word = (word << 8) | (data[off] & 0xff); off = (off + 1) % data.length; } offp[0] = off; return word; } \n### Response:", "ground_truth": "Cycically extract a word of key material.\n\n@param data the string to extract the data from\n@param offp a \"pointer\" (as a one-entry array) to the\ncurrent offset into data\n@return the next word of material from data", "predict": "// Stream to a single word using the given data and output frame pointer.."}, {"ID": 821, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func Convert_kops_AddonSpec_To_v1alpha1_AddonSpec(in *kops.AddonSpec, out *AddonSpec, s conversion.Scope) error { return autoConvert_kops_AddonSpec_To_v1alpha1_AddonSpec(in, out, s) }. \n### Response: // Convert_kops_AddonSpec_To_v1alpha1_AddonSpec is an autogenerated conversion function..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String hashpw(String password, String salt) { BCrypt B; String real_salt; byte[] passwordb, saltb, hashed; char minor = (char) 0; int rounds, off; StringBuffer rs = new StringBuffer(); if (salt.charAt(0) != '$' || salt.charAt(1) != '2') { throw new IllegalArgumentException(\"Invalid salt version\"); } if (salt.charAt(2) == '$') { off = 3; } else { minor = salt.charAt(2); if (minor != 'a' || salt.charAt(3) != '$') { throw new IllegalArgumentException(\"Invalid salt revision\"); } off = 4; } // Extract number of rounds if (salt.charAt(off + 2) > '$') { throw new IllegalArgumentException(\"Missing salt rounds\"); } rounds = Integer.parseInt(salt.substring(off, off + 2)); real_salt = salt.substring(off + 3, off + 25); try { passwordb = (password + (minor >= 'a' ? \"\\000\" : \"\")).getBytes(\"UTF-8\"); } catch (UnsupportedEncodingException uee) { throw new AssertionError(\"UTF-8 is not supported\"); } saltb = decode_base64(real_salt, BCRYPT_SALT_LEN); B = new BCrypt(); hashed = B.crypt_raw(passwordb, saltb, rounds, (int[]) bf_crypt_ciphertext.clone()); rs.append(\"$2\"); if (minor >= 'a') { rs.append(minor); } rs.append('$'); if (rounds < 10) { rs.append('0'); } if (rounds > 30) { throw new IllegalArgumentException( \"rounds exceeds maximum (30)\"); } rs.append(rounds) .append('$') .append(encode_base64(saltb, saltb.length)) .append(encode_base64(hashed, bf_crypt_ciphertext.length * 4 - 1)); return rs.toString(); } \n### Response:", "ground_truth": "Hash a password using the OpenBSD bcrypt scheme.\n\n@param password the password to hash\n@param salt the salt to hash with (perhaps generated\nusing BCrypt.gensalt)\n@return the hashed password", "predict": "// Hashes a password and salt using the BCrypt algorithm.\n// Returns the resulting hash as a string.\npublic static String hashpw(String password, String salt) {\n// Extract the salt and number of rounds from the input parameters.\nBCrypt B;\nint rounds;\nString minor = (char) 0;\nint off = 4;\n// Extract the salt and number of rounds from the input parameters.\n rounds = Integer.parseInt(salt.substring(off, off + 2));\nreal_salt = salt.substring(off + 3, off + 25);\ntry {\n// Convert the password and salt to bytes and encode them in UTF-8.\nbyte[] passwordb, saltb, hashed;\npasswordb = (password + (minor >= 'a'? \"\\000\" : \"\")).getBytes(\"UTF-8\");\nsaltb = decode_base64(real_salt, BCRYPT_SALT_LEN);\nhashed = BCrypt.hashpw(passwordb, saltb);\n} catch (UnsupportedEncodingException uee) {\n// If UTF-8 is not supported, return an error message.\nthrow new AssertionError(\"UTF-8 is not supported\");\n}\n// Convert the hash to a string and return it.\nreturn encode_base64(hashed, bf_crypt_ciphertext.length * 4 - 1);\n}"}, {"ID": 822, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (i *AgentIPC) deregisterClient(client *IPCClient) { // Close the socket client.conn.Close() // Remove from the clients list i.Lock() delete(i.clients, client.name) i.Unlock() // Remove from the log writer if client.logStreamer != nil { i.logWriter.DeregisterHandler(client.logStreamer) client.logStreamer.Stop() } // Remove from event handlers for _, es := range client.eventStreams { i.agent.DeregisterEventHandler(es) es.Stop() } }. \n### Response: // deregisterClient is called to cleanup after a client disconnects.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static boolean checkpw(String plaintext, String hashed) { byte[] hashed_bytes; byte[] try_bytes; try { String try_pw = hashpw(plaintext, hashed); hashed_bytes = hashed.getBytes(\"UTF-8\"); try_bytes = try_pw.getBytes(\"UTF-8\"); } catch (UnsupportedEncodingException uee) { return false; } if (hashed_bytes.length != try_bytes.length) { return false; } byte ret = 0; for (int i = 0; i < try_bytes.length; i++) { ret |= hashed_bytes[i] ^ try_bytes[i]; } return ret == 0; } \n### Response:", "ground_truth": "Check that a plaintext password matches a previously hashed\none.\n\n@param plaintext the plaintext password to verify\n@param hashed the previously-hashed password\n@return true if the passwords match, false otherwise", "predict": "// checkpw is a public static method that checks the hash of a plaintext and a hashed password."}, {"ID": 823, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def string(_object): \"\"\" Validates a given input is of type string. Example usage:: data = {'a' : 21} schema = (string, 21) You can also use this as a decorator, as a way to check for the input before it even hits a validator you may be writing. .. note:: If the argument is a callable, the decorating behavior will be triggered, otherwise it will act as a normal function. \"\"\" if is_callable(_object): _validator = _object @wraps(_validator) def decorated(value): ensure(isinstance(value, basestring), \"not of type string\") return _validator(value) return decorated ensure(isinstance(_object, basestring), \"not of type string\"). \n### Response: Validates a given input is of type string.\n\n    Example usage::\n\n        data = {'a' : 21}\n        schema = (string, 21)\n\n    You can also use this as a decorator, as a way to check for the\n    input before it even hits a validator you may be writing.\n\n    .. note::\n        If the argument is a callable, the decorating behavior will be\n        triggered, otherwise it will act as a normal function..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public int copyAll(final OutputStream out) throws IOException { int count = 0; while (true) { byte b = readByte(); if (isBoundary(b)) { break; } out.write(b); count++; } return count; } \n### Response:", "ground_truth": "Copies bytes from this stream to some output until boundary is\nreached. Returns number of copied bytes. It will throw an exception\nfor any irregular behaviour.", "predict": "This method copies all bytes from the input stream to the output stream, starting at the first boundary.\n\n    This method is useful for copying large amounts of data, as it allows\n    to start at a specific point and write all the data to the output\n    stream without having to read the entire input stream first.\n\n   .. note::\n        The method uses a while loop, which will continue to execute\n        as long as the input stream is not empty. If the input stream is\n        empty, the method will throw an IOException.\n        To avoid this, you can use a InputStream in the first place,\n        and then use the method \"read()\" to read the first byte of the\n        input stream."}, {"ID": 824, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void migrateGroups() throws Exception { Session session = service.getStorageSession(); try { if (session.itemExists(groupsStorageOld)) { NodeIterator iterator = ((ExtendedNode)session.getItem(groupsStorageOld)).getNodesLazily(); GroupHandlerImpl gh = ((GroupHandlerImpl)service.getGroupHandler()); while (iterator.hasNext()) { Node oldGroupNode = iterator.nextNode(); gh.migrateGroup(oldGroupNode); migrateGroups(oldGroupNode); } } } finally { session.logout(); } }. \n### Response: Method for groups migration. Must be run after users and membershipTypes migration.\n@throws Exception.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public int copyMax(final OutputStream out, final int maxBytes) throws IOException { int count = 0; while (true) { byte b = readByte(); if (isBoundary(b)) { break; } out.write(b); count++; if (count == maxBytes) { return count; } } return count; } \n### Response:", "ground_truth": "Copies max or less number of bytes to output stream. Useful for determining\nif uploaded file is larger then expected.", "predict": "Method for copying a maximum of maxBytes bytes from input to output. Does not return a value.\n@throws IOException."}, {"ID": 825, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function runInFolder($folder = null, $tasks = []) { // Convert to array if (!is_array($tasks)) { $tasks = [$tasks]; } // Prepend folder array_unshift($tasks, 'cd '.$this->paths->getFolder($folder)); return $this->run($tasks); }. \n### Response: Run commands in a folder.\n\n@param string|null  $folder\n@param string|array $tasks\n\n@return string|null.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public ActionRuntime parse(final Class<?> actionClass, final Method actionMethod, ActionDefinition actionDefinition) { final ActionAnnotationValues annotationValues = detectActionAnnotationValues(actionMethod); final ActionConfig actionConfig = resolveActionConfig(annotationValues); // interceptors ActionInterceptor[] actionInterceptors = parseActionInterceptors(actionClass, actionMethod, actionConfig); // filters ActionFilter[] actionFilters = parseActionFilters(actionClass, actionMethod, actionConfig); // build action definition when not provided if (actionDefinition == null) { actionDefinition = parseActionDefinition(actionClass, actionMethod); } detectAndRegisterAlias(annotationValues, actionDefinition); final boolean async = parseMethodAsyncFlag(actionMethod); final boolean auth = parseMethodAuthFlag(actionMethod); final Class<? extends ActionResult> actionResult = parseActionResult(actionMethod); final Class<? extends ActionResult> defaultActionResult = actionConfig.getActionResult(); return createActionRuntime( null, actionClass, actionMethod, actionResult, defaultActionResult, actionFilters, actionInterceptors, actionDefinition, async, auth); } \n### Response:", "ground_truth": "Parses java action method annotation and returns its action runtime.\n\n@param actionClass action class\n@param actionMethod action method\n@param actionDefinition optional action def, usually null so to be parsed", "predict": "Implement the `parse` method to parse an action definition and return an actionRuntime object.\n\n@param Class<?> actionClass\n@param Method actionMethod\n@param ActionDefinition actionDefinition\n\n@return ActionRuntime object."}, {"ID": 826, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private static Class<?> getSerializerType(Object instance) { Type type = instance.getClass().getGenericInterfaces()[0]; if (type instanceof ParameterizedType) { Class<?> cls = null; Type clsType = ((ParameterizedType) type).getActualTypeArguments()[0]; if (clsType instanceof GenericArrayType) { // Workaround for Java 6 (JDK bug 7151486) cls = Array.newInstance((Class) ((GenericArrayType) clsType).getGenericComponentType(), 0).getClass(); } else { cls = (Class<?>) clsType; } if (Object.class.equals(cls)) { throw new RuntimeException(\"The serializer type can't be object\"); } return cls; } else { throw new RuntimeException(String .format(\"The serializer class %s is not generic or has an unknown type\", instance.getClass().getName())); } }. \n### Response: Returns the serializer's generic type.\n\n@param instance serializer instance\n@return the class the serializer can serialize.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected ActionConfig resolveActionConfig(final ActionAnnotationValues annotationValues) { final Class<? extends Annotation> annotationType; if (annotationValues == null) { annotationType = Action.class; } else { annotationType = annotationValues.annotationType(); } return actionConfigManager.lookup(annotationType); } \n### Response:", "ground_truth": "Resolves action config.", "predict": "Resolves the action configuration for the given annotation values.\n\n@param annotationValues the annotation values to resolve the action configuration for\n@return the action configuration found by the actionConfigManager.lookup method."}, {"ID": 827, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected function getAddressesForPrincipal($principal) { $CUAS = '{'.self::NS_CALDAV.'}calendar-user-address-set'; $properties = $this->server->getProperties( $principal, [$CUAS] ); // If we can't find this information, we'll stop processing if (!isset($properties[$CUAS])) { return []; } $addresses = $properties[$CUAS]->getHrefs(); return $addresses; }. \n### Response: Returns a list of addresses that are associated with a principal.\n\n@param string $principal\n\n@return array.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void detectAndRegisterAlias(final ActionAnnotationValues annotationValues, final ActionDefinition actionDefinition) { final String alias = parseMethodAlias(annotationValues); if (alias != null) { String aliasPath = StringUtil.cutToIndexOf(actionDefinition.actionPath(), StringPool.HASH); actionsManager.registerPathAlias(alias, aliasPath); } } \n### Response:", "ground_truth": "Detects if alias is defined in annotation and registers it if so.", "predict": "Detects and registers an alias for an action.\n\n@param ActionAnnotationValues annotationValues\n\n@param ActionDefinition actionDefinition.\n\n@return void."}, {"ID": 828, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected function removeNonExistentClasses(&$pathnameArray) { foreach ($pathnameArray as $pathname => $phpClass) { if (!file_exists($pathname)) { unset($pathnameArray[$pathname]); } } }. \n### Response: Removes files which are no longer present in this directory\n\n@param PhpClass[] $pathnameArray\n@return \\Synga\\InheritanceFinder\\PhpClass[].\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected Class<? extends ActionInterceptor>[] readActionInterceptors(final AnnotatedElement actionClassOrMethod) { Class<? extends ActionInterceptor>[] result = null; InterceptedBy interceptedBy = actionClassOrMethod.getAnnotation(InterceptedBy.class); if (interceptedBy != null) { result = interceptedBy.value(); if (result.length == 0) { result = null; } } return result; } \n### Response:", "ground_truth": "Reads class or method annotation for action interceptors.", "predict": "Reads the action interceptors for the given action class or method.\n\n@param AnnotatedElement $actionClassOrMethod\n@return Class<? extends ActionInterceptor>[]."}, {"ID": 829, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function stored($stored) { if($stored === true or $stored === false) { $this->data['stored'] = ($stored) ? 'YES' : 'NO'; } else { $this->data['stored'] = $stored; } return $this; }. \n### Response: Tell whether this field must be stored or not\n@param string $stored\n@return OpenSearchServer\\Field\\Create.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected Class<? extends ActionFilter>[] readActionFilters(final AnnotatedElement actionClassOrMethod) { Class<? extends ActionFilter>[] result = null; FilteredBy filteredBy = actionClassOrMethod.getAnnotation(FilteredBy.class); if (filteredBy != null) { result = filteredBy.value(); if (result.length == 0) { result = null; } } return result; } \n### Response:", "ground_truth": "Reads class or method annotation for action filters.", "predict": "This method reads the action filters for a given annotated element.\n@param AnnotatedElement actionClassOrMethod\n@return Class<? extends ActionFilter>[]."}, {"ID": 830, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def visibleRows(self): # onscreen rows 'List of rows onscreen. ' return self.rows[self.topRowIndex:self.topRowIndex+self.nVisibleRows]. \n### Response: List of rows onscreen..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected String[] readPackageActionPath(final Class actionClass) { Package actionPackage = actionClass.getPackage(); final String actionPackageName = actionPackage.getName(); // 1 - read annotations first String packageActionPathFromAnnotation; mainloop: while (true) { MadvocAction madvocActionAnnotation = actionPackage.getAnnotation(MadvocAction.class); packageActionPathFromAnnotation = madvocActionAnnotation != null ? madvocActionAnnotation.value().trim() : null; if (StringUtil.isEmpty(packageActionPathFromAnnotation)) { packageActionPathFromAnnotation = null; } if (packageActionPathFromAnnotation == null) { // next package String newPackage = actionPackage.getName(); actionPackage = null; while (actionPackage == null) { final int ndx = newPackage.lastIndexOf('.'); if (ndx == -1) { // end of hierarchy, nothing found break mainloop; } newPackage = newPackage.substring(0, ndx); actionPackage = Packages.of(actionClass.getClassLoader(), newPackage); } } else { // annotation found, register root rootPackages.addRootPackage(actionPackage.getName(), packageActionPathFromAnnotation); break; } } // 2 - read root package String packagePath = rootPackages.findPackagePathForActionPackage(actionPackageName); if (packagePath == null) { return ArraysUtil.array(null, null); } return ArraysUtil.array( StringUtil.stripChar(packagePath, '/'), StringUtil.surround(packagePath, StringPool.SLASH) ); } \n### Response:", "ground_truth": "Reads action path for package.\nIf annotation is not set on package-level, class package will be used for\npackage action path part.", "predict": "* Reads the action path of the given action class.\n* Provides the package name and the path to the root package of the action.\n* Iterates through the annotations of the action package and extracts the package action path from an annotation if it is found.\n* Registers the root package of the action with the package manager.\n* Returns the array of package paths for the action package."}, {"ID": 831, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def return_error(self, status, payload=None): \"\"\"Error handler called by request handlers when an error occurs and the request should be aborted. Usage:: def handle_post_request(self, *args, **kwargs): self.request_handler = self.get_request_handler() try: self.request_handler.process(self.get_data()) except SomeException as e: self.return_error(400, payload=self.request_handler.errors) return self.return_create_response() \"\"\" resp = None if payload is not None: payload = json.dumps(payload) resp = self.make_response(payload, status=status) if status in [405]: abort(status) else: abort(status, response=resp). \n### Response: Error handler called by request handlers when an error occurs and the request\n        should be aborted.\n\n        Usage::\n\n            def handle_post_request(self, *args, **kwargs):\n\n                self.request_handler = self.get_request_handler()\n                try:\n                    self.request_handler.process(self.get_data())\n                except SomeException as e:\n                    self.return_error(400, payload=self.request_handler.errors)\n\n                return self.return_create_response().\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected String[] readMethodActionPath(final String methodName, final ActionAnnotationValues annotationValues, final ActionConfig actionConfig) { // read annotation String methodActionPath = annotationValues != null ? annotationValues.value() : null; if (methodActionPath == null) { methodActionPath = methodName; } else { if (methodActionPath.equals(Action.NONE)) { return ArraysUtil.array(null, null); } } // check for defaults for (String path : actionConfig.getActionMethodNames()) { if (methodActionPath.equals(path)) { methodActionPath = null; break; } } return ArraysUtil.array(methodName, methodActionPath); } \n### Response:", "ground_truth": "Reads action path from the action method.", "predict": "```\n// read annotation\nprotected String[] readMethodActionPath(final String methodName, final ActionAnnotationValues annotationValues, final ActionConfig actionConfig)\n```\n### Resp Reads the method action path from the given methodName, and returns an array of strings.\n\n        Usage::\n\n            protected String[] readMethodActionPath(final String methodName, final ActionAnnotationValues annotationValues, final ActionConfig actionConfig)\n\n            String[] methodActionPath = readMethodActionPath(\"process\", annotationValues, actionConfig);\n            // do something with the method action path array\n```"}, {"ID": 832, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static base_responses update(nitro_service client, aaakcdaccount resources[]) throws Exception { base_responses result = null; if (resources != null && resources.length > 0) { aaakcdaccount updateresources[] = new aaakcdaccount[resources.length]; for (int i=0;i<resources.length;i++){ updateresources[i] = new aaakcdaccount(); updateresources[i].kcdaccount = resources[i].kcdaccount; updateresources[i].keytab = resources[i].keytab; updateresources[i].realmstr = resources[i].realmstr; updateresources[i].delegateduser = resources[i].delegateduser; updateresources[i].kcdpassword = resources[i].kcdpassword; updateresources[i].usercert = resources[i].usercert; updateresources[i].cacert = resources[i].cacert; } result = update_bulk_request(client, updateresources); } return result; }. \n### Response: Use this API to update aaakcdaccount resources..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected String parseMethodAlias(final ActionAnnotationValues annotationValues) { String alias = null; if (annotationValues != null) { alias = annotationValues.alias(); } return alias; } \n### Response:", "ground_truth": "Reads method's alias value.", "predict": "This method parses a method alias from an ActionAnnotationValues object."}, {"ID": 833, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function render() { parent::render(); $oSmarty = \\OxidEsales\\Eshop\\Core\\Registry::getUtilsView()->getSmarty(); // #2873: In demoshop for RSS we set php_handling to SMARTY_PHP_PASSTHRU // as SMARTY_PHP_REMOVE removes not only php tags, but also xml if (\\OxidEsales\\Eshop\\Core\\Registry::getConfig()->isDemoShop()) { $oSmarty->php_handling = SMARTY_PHP_PASSTHRU; } foreach (array_keys($this->_aViewData) as $sViewName) { $oSmarty->assign($sViewName, $this->_aViewData[$sViewName]); } // return rss xml, no further processing $sCharset = \\OxidEsales\\Eshop\\Core\\Registry::getLang()->translateString(\"charset\"); \\OxidEsales\\Eshop\\Core\\Registry::getUtils()->setHeader(\"Content-Type: text/xml; charset=\" . $sCharset); \\OxidEsales\\Eshop\\Core\\Registry::getUtils()->showMessageAndExit( $this->_processOutput( $oSmarty->fetch($this->_sThisTemplate, $this->getViewId()) ) ); }. \n### Response: Renders requested RSS feed\n\nTemplate variables:\nrss.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public ActionRuntime createActionRuntime( final ActionHandler actionHandler, final Class actionClass, final Method actionClassMethod, final Class<? extends ActionResult> actionResult, final Class<? extends ActionResult> defaultActionResult, final ActionFilter[] filters, final ActionInterceptor[] interceptors, final ActionDefinition actionDefinition, final boolean async, final boolean auth) { if (actionHandler != null) { return new ActionRuntime( actionHandler, actionClass, actionClassMethod, filters, interceptors, actionDefinition, NoneActionResult.class, NoneActionResult.class, async, auth, null, null); } final ScopeData scopeData = scopeDataInspector.inspectClassScopes(actionClass); // find ins and outs final Class[] paramTypes = actionClassMethod.getParameterTypes(); final MethodParam[] params = new MethodParam[paramTypes.length]; final Annotation[][] paramAnns = actionClassMethod.getParameterAnnotations(); String[] methodParamNames = null; // for all elements: action and method arguments... for (int ndx = 0; ndx < paramTypes.length; ndx++) { Class paramType = paramTypes[ndx]; // lazy init to postpone bytecode usage, when method has no arguments if (methodParamNames == null) { methodParamNames = actionMethodParamNameResolver.resolveParamNames(actionClassMethod); } final String paramName = methodParamNames[ndx]; final Annotation[] parameterAnnotations = paramAnns[ndx]; final ScopeData paramsScopeData = scopeDataInspector.inspectMethodParameterScopes(paramName, paramType, parameterAnnotations); MapperFunction mapperFunction = null; for (final Annotation annotation : parameterAnnotations) { if (annotation instanceof Mapper) { mapperFunction = MapperFunctionInstances.get().lookup(((Mapper) annotation).value()); break; } } params[ndx] = new MethodParam( paramTypes[ndx], paramName, scopeDataInspector.detectAnnotationType(parameterAnnotations), paramsScopeData, mapperFunction ); } return new ActionRuntime( null, actionClass, actionClassMethod, filters, interceptors, actionDefinition, actionResult, defaultActionResult, async, auth, scopeData, params); } \n### Response:", "ground_truth": "Creates new instance of action runtime configuration.\nInitialize caches.", "predict": "This method creates an ActionRuntime for a given ActionHandler, Class, Method, ActionResult, and defaultActionResult. It inspects the Class and method arguments to determine if they are filter or interceptor parameters, and if so, it creates a new MethodParam object for each one. It then inspects the MethodParameter scopes to determine if any of the parameters are Mapper functions, and if so, it lookups the corresponding MapperFunction instance. Finally, it creates an ActionRuntime with the given ActionHandler, Class, Method, filters, interceptors, actionDefinition, actionResult, and defaultActionResult. The method is marked with the \u674f\u773c\u8aaa\u660e\u9ede (\u674f\u773c\u8aaa\u660e\u8a9e) \"comment\" \u9ede\uff0c which indicates that the code contains useful information for developers to understand."}, {"ID": 834, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func Serialize(s Serializer) (string, error) { w := &standardWriter{} if err := s.Serialize(w); err != nil { return \"\", err } return w.String(), nil }. \n### Response: // Serialize serializes a serializer to a string..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override protected void preResponseCommit() { long lastModified = lastModifiedData.getLastModified(); long ifModifiedSince = request.getDateHeader(\"If-Modified-Since\"); if (lastModified > -1 && !response.containsHeader(\"Last-Modified\")) { if (ifModifiedSince < (lastModified / 1000 * 1000)) { response.setDateHeader(\"Last-Modified\", lastModified); } else { response.reset(); response.setStatus(HttpServletResponse.SC_NOT_MODIFIED); } } } \n### Response:", "ground_truth": "todo move to BufferResponseWrapper ?", "predict": "// override the preResponseCommit method to check if the last modified date is before the specified date and if so, set the last-modified header and return a status code ofSC_NOT_MODIFIED."}, {"ID": 835, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def default_policy(policy='deny', direction='incoming'): \"\"\" Changes the default policy for traffic `direction` :param policy: allow, deny or reject :param direction: traffic direction, possible values: incoming, outgoing, routed \"\"\" if policy not in ['allow', 'deny', 'reject']: raise UFWError(('Unknown policy %s, valid values: ' 'allow, deny, reject') % policy) if direction not in ['incoming', 'outgoing', 'routed']: raise UFWError(('Unknown direction %s, valid values: ' 'incoming, outgoing, routed') % direction) output = subprocess.check_output(['ufw', 'default', policy, direction], universal_newlines=True, env={'LANG': 'en_US', 'PATH': os.environ['PATH']}) hookenv.log(output, level='DEBUG') m = re.findall(\"^Default %s policy changed to '%s'\\n\" % (direction, policy), output, re.M) if len(m) == 0: hookenv.log(\"ufw couldn't change the default policy to %s for %s\" % (policy, direction), level='WARN') return False else: hookenv.log(\"ufw default policy for %s changed to %s\" % (direction, policy), level='INFO') return True. \n### Response: Changes the default policy for traffic `direction`\n\n    :param policy: allow, deny or reject\n    :param direction: traffic direction, possible values: incoming, outgoing,\n                      routed.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static <T> T applyAdvice(final Class<T> targetClass) { Class adviceClass = cache.get(targetClass); if (adviceClass == null) { // advice not yet created adviceClass = PROXY_PROXETTA.proxy().setTarget(targetClass).define(); cache.put(targetClass, adviceClass); } // create new advice instance and injects target instance to it try { Object advice = ClassUtil.newInstance(adviceClass); Field field = adviceClass.getField(\"$___target$0\"); field.set(advice, targetClass); return (T) advice; } catch (Exception ex) { throw new ProxettaException(ex); } } \n### Response:", "ground_truth": "Applies advice on given target class and returns proxy instance.", "predict": "Applys advice to the target class `targetClass` using the advice cache.\n\n    :param targetClass: the class to apply the advice to\n    :return: the advice instance or the target object if advice not found in the cache."}, {"ID": 836, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def _parse_kpoint(line, lines): \"\"\"Parse the k-point and then continue to iterate over the band energies and occupations\"\"\" toks = line.split() kpoint = [float(x) for x in toks[:3]] weight = float(toks[-1]) newline = next(lines) bands_up = [] occ_up = [] bands_down = [] occ_down = [] ispin = None while len(newline.split()) > 0: toks = newline.split() if ispin is None: # there are two spins if there are 5 columns (two spin energies and occupancies) or # very probably if there are 3 columns and the last column's first value isn't 1.0 # (which would be the occupancy of the lowest energy level) ispin = (len(toks) == 5) or (len(toks) == 3 and abs(float(toks[2]) - 1.0) > 1.0e-4) if len(toks) == 2: bands_up.append(float(toks[1])) elif len(toks) == 3 and not ispin: bands_up.append(float(toks[1])) occ_up.append(float(toks[2])) elif len(toks) == 3 and ispin: bands_up.append(float(toks[1])) bands_down.append(float(toks[2])) elif len(toks) == 5 and ispin: bands_up.append(float(toks[1])) bands_down.append(float(toks[2])) occ_up.append(float(toks[3])) occ_down.append(float(toks[4])) else: raise ValueError(\"Encountered {} when parsing k-point\".format(newline)) newline = next(lines) res = {\"kpoint\": kpoint, \"weight\": weight} if len(bands_down) > 0: res[\"energies\"] = list(zip(bands_up, bands_down)) else: res[\"energies\"] = list(zip(bands_up)) if len(occ_down) > 0: res[\"occupancies\"] = list(zip(occ_up, occ_down)) elif len(occ_up) > 0: res[\"occupancies\"] = list(zip(occ_up)) return res. \n### Response: Parse the k-point and then continue to iterate over the band energies and occupations.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void injectTargetIntoProxy(final Object proxy, final Object target) { Class proxyClass = proxy.getClass(); try { Field field = proxyClass.getField(\"$___target$0\"); field.set(proxy, target); } catch (Exception ex) { throw new ProxettaException(ex); } } \n### Response:", "ground_truth": "Injects target into proxy.", "predict": "Inject target into proxy.\n\n"}, {"ID": 837, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def append(self, name): \"\"\"If name is not in the map, append it with an empty id range set.\"\"\" if not isinstance(name, str): raise TypeError( \"argument 'name' must be a string, not {}\".format( name.__class__.__name__ ) ) if not name: raise ValueError(\"argument 'name' cannot be empty\") if not name in self.__map: self.__map[name] = IdRangeSet(). \n### Response: If name is not in the map, append it with an empty id range set..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public AnnotationVisitor visitAnnotation(final String descriptor, final boolean visible) { if (fv != null) { return fv.visitAnnotation(descriptor, visible); } return null; } \n### Response:", "ground_truth": "Visits an annotation of the field.\n\n@param descriptor the class descriptor of the annotation class.\n@param visible {@literal true} if the annotation is visible at runtime.\n@return a visitor to visit the annotation values, or {@literal null} if this visitor is not\ninterested in visiting this annotation.", "predict": "This method visits an annotation and returns its visitor object if it is found, or null otherwise."}, {"ID": 838, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def static_partial_tile_sizes(width, height, tilesize, scale_factors): \"\"\"Generator for partial tile sizes for zoomed in views. Positional arguments: width -- width of full size image height -- height of full size image tilesize -- width and height of tiles scale_factors -- iterable of scale factors, typically [1,2,4..] Yields ([rx,ry,rw,rh],[sw,sh]), the region and size for each tile \"\"\" for sf in scale_factors: if (sf * tilesize >= width and sf * tilesize >= height): continue # avoid any full-region tiles rts = tilesize * sf # tile size in original region xt = (width - 1) // rts + 1 yt = (height - 1) // rts + 1 for nx in range(xt): rx = nx * rts rxe = rx + rts if (rxe > width): rxe = width rw = rxe - rx # same as sw = int(math.ceil(rw/float(sf))) sw = (rw + sf - 1) // sf for ny in range(yt): ry = ny * rts rye = ry + rts if (rye > height): rye = height rh = rye - ry # same as sh = int(math.ceil(rh/float(sf))) sh = (rh + sf - 1) // sf yield([rx, ry, rw, rh], [sw, sh]). \n### Response: Generator for partial tile sizes for zoomed in views.\n\n    Positional arguments:\n    width -- width of full size image\n    height -- height of full size image\n    tilesize -- width and height of tiles\n    scale_factors -- iterable of scale factors, typically [1,2,4..]\n\n    Yields ([rx,ry,rw,rh],[sw,sh]), the region and size for each tile.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public String resolveRealName(final String jsonName) { if (jsonNames == null) { return jsonName; } int jsonIndex = ArraysUtil.indexOf(jsonNames, jsonName); if (jsonIndex == -1) { return jsonName; } return realNames[jsonIndex]; } \n### Response:", "ground_truth": "Resolves real name from JSON name.", "predict": "Method for resolving a real name from a JSON object.\n\n    This method checks if a JSON object named \"jsonNames\" is present in the current JSON object. If it is not found, it returns the original JSON object with the name \"jsonName\". If it is found, it searches for the index of the name in the \"jsonNames\" array and returns the value at that index, which in this case is the value of the \"realNames\" array at the corresponding index."}, {"ID": 839, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function validateNotEmpty($parameter, $value) { if (!empty($value)) { return true; } $message = sprintf('Parameter: %s cannot be empty.', $parameter); throw new AdldapException($message); }. \n### Response: Validates that the inserted value of the specified parameter\nis not empty. This will throw an AdldapException otherwise.\n\n@param string $parameter\n@param mixed  $value\n\n@return bool\n\n@throws AdldapException.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public String resolveJsonName(final String realName) { if (realNames == null) { return realName; } int realIndex = ArraysUtil.indexOf(realNames, realName); if (realIndex == -1) { return realName; } return jsonNames[realIndex]; } \n### Response:", "ground_truth": "Resolves JSON name from real name.", "predict": "Resolves the JSON name of the given real name by searching for it in the given real names array and returning the found index.\n\n@param string  $realName\n\n@return string.\n\nNote: This method assumes that the real names array is well-formed and contains at least one real name."}, {"ID": 840, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private static void listAllThreads(final PrintWriter out) { final ThreadGroup currentThreadGroup = Thread.currentThread().getThreadGroup(); ThreadGroup rootThreadGroup = currentThreadGroup; ThreadGroup parent = rootThreadGroup.getParent(); while (parent != null) { rootThreadGroup = parent; parent = parent.getParent(); } // And list it, recursively Util.printGroupInfo(out, rootThreadGroup, \"\"); }. \n### Response: Find the root thread group and list it recursively.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public TypeData lookupTypeData(final Class type) { TypeData typeData = typeDataMap.get(type); if (typeData == null) { if (serializationSubclassAware) { typeData = findSubclassTypeData(type); } if (typeData == null) { typeData = scanClassForAnnotations(type); typeDataMap.put(type, typeData); } } return typeData; } \n### Response:", "ground_truth": "Returns all includes for given type. Returns an empty array\nwhen no includes are defined.", "predict": "This method lookupTypeData(Class type) retrieves the TypeData for the specified Class type and stores it in the typeDataMap. If the TypeData is not found, it checks if it isserializationSubclassAware and if not, it searches for a subclass TypeData and stores it in the map. Finally, it returns the TypeData."}, {"ID": 841, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function calcAge(DateTime $birthDate, DateTime $refDate = null) { return DateTimeRenderer::renderAge($birthDate, $refDate); }. \n### Response: Calculates an age.\n\n@param DateTime $birthDate The birth date.\n@param DateTime|null $refDate The reference date.\n@return int Returns teh age.\n@throws Exception Throws an exception if an error occurs..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected TypeData _lookupTypeData(final Class type) { TypeData typeData = typeDataMap.get(type); if (typeData == null) { typeData = scanClassForAnnotations(type); typeDataMap.put(type, typeData); } return typeData; } \n### Response:", "ground_truth": "Lookups type data and creates one if missing.", "predict": "Provides information about the type data for a given class.\n\n@param Class $type The class to look up the type data for.\n@return TypeData Returns the type data for the given class.\n@throws Exception Throws an exception if an error occurs while looking up the type data."}, {"ID": 842, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def on_helpButton(self, event, page=None): \"\"\"shows html help page\"\"\" # for use on the command line: path = find_pmag_dir.get_pmag_dir() # for use with pyinstaller #path = self.main_frame.resource_dir help_page = os.path.join(path, 'dialogs', 'help_files', page) # if using with py2app, the directory structure is flat, # so check to see where the resource actually is if not os.path.exists(help_page): help_page = os.path.join(path, 'help_files', page) html_frame = pw.HtmlFrame(self, page=help_page) html_frame.Show(). \n### Response: shows html help page.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected TypeData findSubclassTypeData(final Class type) { final Class<? extends Annotation> defaultAnnotation = jsonAnnotation; if (type.getAnnotation(defaultAnnotation) != null) { // current type has annotation, don't find anything, let type data be created return null; } ClassDescriptor cd = ClassIntrospector.get().lookup(type); // lookup superclasses Class[] superClasses = cd.getAllSuperclasses(); for (Class superClass : superClasses) { if (superClass.getAnnotation(defaultAnnotation) != null) { // annotated subclass founded! return _lookupTypeData(superClass); } } Class[] interfaces = cd.getAllInterfaces(); for (Class interfaze : interfaces) { if (interfaze.getAnnotation(defaultAnnotation) != null) { // annotated subclass founded! return _lookupTypeData(interfaze); } } return null; } \n### Response:", "ground_truth": "Finds type data of first annotated superclass or interface.", "predict": "This method is used to retrieve the TypeData for a specific Class. It first checks if the Class has a default annotation, and if so, it returns null. It then lookups the superclasses of the Class and checks if any of them have a default annotation. If a subclass with the default annotation is found, it returns the TypeData for that subclass. If no subclass with the default annotation is found, it returns null."}, {"ID": 843, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func LoadXML(input []byte) (*Dataset, error) { m, _, err := mxj.NewMapXmlReaderRaw(bytes.NewReader(input)) if err != nil { return nil, err } // this seems quite a bit hacky datasetNode, _ := m.ValueForPath(\"dataset\") rowNode := datasetNode.(map[string]interface{})[\"row\"].([]interface{}) back := make([]map[string]interface{}, 0, len(rowNode)) for _, r := range rowNode { back = append(back, r.(map[string]interface{})) } return internalLoadFromDict(back) }. \n### Response: // LoadXML loads a Dataset from an XML source..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public String resolveJsonName(final Class type, final String name) { TypeData typeData = lookupTypeData(type); return typeData.resolveJsonName(name); } \n### Response:", "ground_truth": "Returns different name of a property if set by annotation.", "predict": "// resolveJsonName returns the JSON name of a given class.."}, {"ID": 844, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function startTimelapse($filename, $interval, $length, $timeUnit = self::TIMEUNIT_SECOND) { if (empty($filename)) { throw new \\InvalidArgumentException('Filename required'); } $this->valueArguments['output'] = $filename; $this->timeout($length, $timeUnit); $this->timelapse($interval, $timeUnit); $this->execute( $this->buildCommand() ); }. \n### Response: Take pictures with timelapse mode.\n\nNote you should specify %04d at the point in the filename where you want a frame count number to appear.\ne.g. 'image%04d.jpg'. Note that the %04d indicates a 4 digit number with leading zero's added to pad to the\nrequired number of digits. So, for example, %08d would result in an 8 digit number.\n\nIf a timelapse value of 0 is entered, the application will take pictures as fast as possible. Note there is an\nminimum enforced pause of 30ms between captures to ensure that exposure calculations can be made.\n\nTime unit can be one of: `Raspicam::TIMEUNIT_MINUTE`, `Raspicam::TIMEUNIT_SECOND`,\n`Raspicam::TIMEUNIT_MILLISECOND`, `Raspicam::TIMEUNIT_MICROSECOND`.\n\n**Example:**\n```php\n// take picture every ten seconds for two minutes\n$camera->startTimelapse('image%04d.jpg', 10, 120);\n```\n\n@param string    $filename\n@param int|float $interval Time between shots.\n@param int|float $length   Time how long to keep taking pictures.\n@param string    $timeUnit Optional. Time unit for $interval and $length. Default: `Raspicam::TIMEUNIT_SECOND`.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public String resolveRealName(final Class type, final String jsonName) { TypeData typeData = lookupTypeData(type); return typeData.resolveRealName(jsonName); } \n### Response:", "ground_truth": "Returns real property name for given JSON property.", "predict": "Resolves the fully qualified name of a class.\n\n@param Class<T> $type The type of object to resolve the real name of.\n@param String $jsonName The JSON name to look up.\n@return String The fully qualified name of the class.\n\n"}, {"ID": 845, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function init() { parent::init(); foreach ($this->children as $child) { $child->init(); foreach ($child->getPages() as $page) { $this->addPage($page); } } foreach ($this->pages as $page) { $page->init(); } }. \n### Response: Initializes this notebook.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public byte[] getFileContent() throws IOException { if (data != null) { return data; } if (tempFile != null) { return FileUtil.readBytes(tempFile); } return null; } \n### Response:", "ground_truth": "Returns the content of file upload item.", "predict": "getFileContent() returns null if no data or temp file is found."}, {"ID": 846, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def WhatActorsArePresent(self): '''Return a list of URI's of all the actor attributes found in the header. The special actor \"next\" is ignored. ''' results = [] for E in self.header_elements: a = _find_actor(E) if a not in [ None, SOAP.ACTOR_NEXT ]: results.append(a) return results. \n### Response: Return a list of URI's of all the actor attributes found in\n        the header.  The special actor \"next\" is ignored..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private void copyBootstrapMethods(final ClassReader classReader, final char[] charBuffer) { // Find attributOffset of the 'bootstrap_methods' array. byte[] inputBytes = classReader.b; int currentAttributeOffset = classReader.getFirstAttributeOffset(); for (int i = classReader.readUnsignedShort(currentAttributeOffset - 2); i > 0; --i) { String attributeName = classReader.readUTF8(currentAttributeOffset, charBuffer); if (Constants.BOOTSTRAP_METHODS.equals(attributeName)) { bootstrapMethodCount = classReader.readUnsignedShort(currentAttributeOffset + 6); break; } currentAttributeOffset += 6 + classReader.readInt(currentAttributeOffset + 2); } if (bootstrapMethodCount > 0) { // Compute the offset and the length of the BootstrapMethods 'bootstrap_methods' array. int bootstrapMethodsOffset = currentAttributeOffset + 8; int bootstrapMethodsLength = classReader.readInt(currentAttributeOffset + 2) - 2; bootstrapMethods = new ByteVector(bootstrapMethodsLength); bootstrapMethods.putByteArray(inputBytes, bootstrapMethodsOffset, bootstrapMethodsLength); // Add each bootstrap method in the symbol table entries. int currentOffset = bootstrapMethodsOffset; for (int i = 0; i < bootstrapMethodCount; i++) { int offset = currentOffset - bootstrapMethodsOffset; int bootstrapMethodRef = classReader.readUnsignedShort(currentOffset); currentOffset += 2; int numBootstrapArguments = classReader.readUnsignedShort(currentOffset); currentOffset += 2; int hashCode = classReader.readConst(bootstrapMethodRef, charBuffer).hashCode(); while (numBootstrapArguments-- > 0) { int bootstrapArgument = classReader.readUnsignedShort(currentOffset); currentOffset += 2; hashCode ^= classReader.readConst(bootstrapArgument, charBuffer).hashCode(); } add(new Entry(i, Symbol.BOOTSTRAP_METHOD_TAG, offset, hashCode & 0x7FFFFFFF)); } } } \n### Response:", "ground_truth": "Read the BootstrapMethods 'bootstrap_methods' array binary content and add them as entries of\nthe SymbolTable.\n\n@param classReader the ClassReader whose bootstrap methods must be copied to initialize the\nSymbolTable.\n@param charBuffer a buffer used to read strings in the constant pool.", "predict": "private void copyBootstrapMethods(final ClassReader classReader, final char[] charBuffer) {\n// Find the offset of the 'bootstrap_methods' array.\nbyte[] inputBytes = classReader.b;\nint currentAttributeOffset = classReader.getFirstAttributeOffset();\nfor (int i = classReader.readUnsignedShort(currentAttributeOffset - 2); i > 0; --i) {\nString attributeName = classReader.readUTF8(currentAttributeOffset, charBuffer);\nif (Constants.BOOTSTRAP_METHODS.equals(attributeName)) {\n// Check if the 'bootstrap_methods' array has been found.\nbootstrapMethodCount = classReader.readUnsignedShort(currentAttributeOffset + 6);\nbreak;\n}\ncurrentAttributeOffset += 6 + classReader.readInt(currentAttributeOffset + 2);\n}\n// If the 'bootstrap_methods' array has not been found, compute the offset and length of the 'bootstrap_methods' array.\nint bootstrapMethodsOffset = currentAttributeOffset + 8;\nint bootstrapMethodsLength = classReader.readInt(currentAttributeOffset + 2) - 2;\nbootstrapMethods = new ByteVector(bootstrapMethodsLength);\nbootstrapMethods.putByteArray(inputBytes, bootstrapMethodsOffset, bootstrapMethodsLength);\n// Add each bootstrap method in the symbol table entries.\nint currentOffset = bootstrapMethodsOffset;\nfor (int i = 0; i < bootstrapMethodCount; i++) {\nint offset = currentOffset - bootstrapMethodsOffset;\nint bootstrapMethodRef = classReader.readUnsignedShort(currentOffset);\ncurrentOffset += 2;\nint numBootstrapArguments = classReader.readUnsignedShort(currentOffset);\ncurrentOffset += 2;\nint hashCode = classReader.readConst(bootstrapMethodRef, charBuffer).hashCode();\nwhile (numBootstrapArguments-- > 0) {\nint bootstrapArgument = classReader.readUnsignedShort(currentOffset);\ncurrentOffset += 2;\nhashCode ^= classReader.readConst(bootstrapArgument, charBuffer).hashCode();\n}\nadd(new Entry(i, Symbol.BOOTSTRAP_METHOD_TAG, offset, hashCode & 0x7FFFFFFF));\n}\n}"}, {"ID": 847, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected function missingSelectors() { foreach ($this->extends as $extend) { if (isset($extend[3])) { continue; } list($target, $origin, $block) = $extend; // ignore if !optional if ($block[2]) { continue; } $target = implode(' ', $target); $origin = $this->collapseSelectors($origin); $this->sourceLine = $block[Parser::SOURCE_LINE]; $this->throwError(\"\\\"$origin\\\" failed to @extend \\\"$target\\\". The selector \\\"$target\\\" was not found.\"); } }. \n### Response: Report missing selectors.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: int setMajorVersionAndClassName(final int majorVersion, final String className) { this.majorVersion = majorVersion; this.className = className; return addConstantClass(className).index; } \n### Response:", "ground_truth": "Sets the major version and the name of the class to which this symbol table belongs. Also adds\nthe class name to the constant pool.\n\n@param majorVersion a major ClassFile version number.\n@param className an internal class name.\n@return the constant pool index of a new or already existing Symbol with the given class name.", "predict": "Set the major version and class name of the current class."}, {"ID": 848, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static InstanceFields allDeclaredFieldsOf(Object instance) { List<InstanceField> instanceFields = new ArrayList<InstanceField>(); for (Class<?> clazz = instance.getClass(); clazz != Object.class; clazz = clazz.getSuperclass()) { instanceFields.addAll(instanceFieldsIn(instance, clazz.getDeclaredFields())); } return new InstanceFields(instance, instanceFields); }. \n### Response: Instance fields declared in the class and superclasses of the given instance.\n\n@param instance Instance from which declared fields will be retrieved.\n@return InstanceFields of this object instance..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: void putConstantPool(final ByteVector output) { output.putShort(constantPoolCount).putByteArray(constantPool.data, 0, constantPool.length); } \n### Response:", "ground_truth": "Puts this symbol table's constant_pool array in the given ByteVector, preceded by the\nconstant_pool_count value.\n\n@param output where the JVMS ClassFile's constant_pool array must be put.", "predict": "Method to add constant pool elements to the output ByteVector.\n\n@param output ByteVector to store the constant pool elements.\n@return No effect.\n\nNote: This method does not modify the input ByteVector, but rather adds constant pool elements to it."}, {"ID": 849, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func ConvertStringToOperator(in string) (configs.Operator, error) { if op, ok := operators[in]; ok == true { return op, nil } return 0, fmt.Errorf(\"string %s is not a valid operator for seccomp\", in) }. \n### Response: // ConvertStringToOperator converts a string into a Seccomp comparison operator.\n// Comparison operators use the names they are assigned by Libseccomp's header.\n// Attempting to convert a string that is not a valid operator results in an\n// error..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: void putBootstrapMethods(final ByteVector output) { if (bootstrapMethods != null) { output .putShort(addConstantUtf8(Constants.BOOTSTRAP_METHODS)) .putInt(bootstrapMethods.length + 2) .putShort(bootstrapMethodCount) .putByteArray(bootstrapMethods.data, 0, bootstrapMethods.length); } } \n### Response:", "ground_truth": "Puts this symbol table's BootstrapMethods attribute in the given ByteVector. This includes the\n6 attribute header bytes and the num_bootstrap_methods value.\n\n@param output where the JVMS BootstrapMethods attribute must be put.", "predict": "// putBootstrapMethods adds the Seccomp bootstrap methods to the output ByteVector.\n// It checks if the bootstrapMethods object is not null and if it is, it adds the\n// specified constantUTF8 and length to the short, then adds 2 to the length and\n// adds the short and count to the byte array.\n// If the bootstrapMethods object is null, an error is thrown.\n// This method is used to add the Seccomp bootstrap methods to the output ByteVector.\n// It is important to note that the Seccomp bootstrap methods must be added to\n// the output ByteVector in the order they are defined in Libseccomp's header.\n// If the order is not correct, an error is thrown.\n\n"}, {"ID": 850, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static Path getLocalCache(URI cache, Configuration conf, Path subdir, FileStatus fileStatus, boolean isArchive, long confFileStamp, Path currentWorkDir, boolean honorSymLinkConf, MRAsyncDiskService asyncDiskService, LocalDirAllocator lDirAllocator) throws IOException { return getLocalCache(cache, conf, subdir, fileStatus, isArchive, confFileStamp, fileStatus.getLen(), currentWorkDir, honorSymLinkConf, asyncDiskService, lDirAllocator); }. \n### Response: Added for back compatibility..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: Symbol addConstantFieldref(final String owner, final String name, final String descriptor) { return addConstantMemberReference(Symbol.CONSTANT_FIELDREF_TAG, owner, name, descriptor); } \n### Response:", "ground_truth": "Adds a CONSTANT_Fieldref_info to the constant pool of this symbol table. Does nothing if the\nconstant pool already contains a similar item.\n\n@param owner the internal name of a class.\n@param name a field name.\n@param descriptor a field descriptor.\n@return a new or already existing Symbol with the given value.", "predict": "Add this comment to explain the purpose of this method:\n```\n// Add this comment to explain the purpose of this method.\n```"}, {"ID": 851, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def add_concept(self, concept_obj): ''' Add a concept to current concept list ''' if concept_obj is None: raise Exception(\"Concept object cannot be None\") elif concept_obj in self.__concepts: raise Exception(\"Concept object is already inside\") elif concept_obj.cidx in self.__concept_map: raise Exception(\"Duplicated concept ID ({})\".format(concept_obj.cidx)) self.__concepts.append(concept_obj) self.__concept_map[concept_obj.cidx] = concept_obj concept_obj.sent = self return concept_obj. \n### Response: Add a concept to current concept list.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: Symbol addConstantMethodref( final String owner, final String name, final String descriptor, final boolean isInterface) { int tag = isInterface ? Symbol.CONSTANT_INTERFACE_METHODREF_TAG : Symbol.CONSTANT_METHODREF_TAG; return addConstantMemberReference(tag, owner, name, descriptor); } \n### Response:", "ground_truth": "Adds a CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this\nsymbol table. Does nothing if the constant pool already contains a similar item.\n\n@param owner the internal name of a class.\n@param name a method name.\n@param descriptor a method descriptor.\n@param isInterface whether owner is an interface or not.\n@return a new or already existing Symbol with the given value.", "predict": "Add a constant method reference to the symbol table."}, {"ID": 852, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static function popsProxy() { $originalClass = static::$popsStaticOriginalClass; if (null === $originalClass) { throw new LogicException( 'This class should not be called directly.' ); } $proxyClassClass = get_called_class(); if ( !isset(self::$popsStaticProxies[$proxyClassClass][$originalClass]) ) { self::$popsStaticProxies[$proxyClassClass][$originalClass] = new $proxyClassClass($originalClass); } return self::$popsStaticProxies[$proxyClassClass][$originalClass]; }. \n### Response: Get the non-static class proxy for this class.\n\n@return ProxyClass The non-static class proxy..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private Entry addConstantMemberReference( final int tag, final String owner, final String name, final String descriptor) { int hashCode = hash(tag, owner, name, descriptor); Entry entry = get(hashCode); while (entry != null) { if (entry.tag == tag && entry.hashCode == hashCode && entry.owner.equals(owner) && entry.name.equals(name) && entry.value.equals(descriptor)) { return entry; } entry = entry.next; } constantPool.put122( tag, addConstantClass(owner).index, addConstantNameAndType(name, descriptor)); return put(new Entry(constantPoolCount++, tag, owner, name, descriptor, 0, hashCode)); } \n### Response:", "ground_truth": "Adds a CONSTANT_Fieldref_info, CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to\nthe constant pool of this symbol table. Does nothing if the constant pool already contains a\nsimilar item.\n\n@param tag one of {@link Symbol#CONSTANT_FIELDREF_TAG}, {@link Symbol#CONSTANT_METHODREF_TAG}\nor {@link Symbol#CONSTANT_INTERFACE_METHODREF_TAG}.\n@param owner the internal name of a class.\n@param name a field or method name.\n@param descriptor a field or method descriptor.\n@return a new or already existing Symbol with the given value.", "predict": "Add a constant member reference to the constant pool.\n\n@param tag The tag of the constant member reference.\n@param owner The owner of the constant member reference.\n@param name The name of the constant member reference.\n@param descriptor The descriptor of the constant member reference.\n@return The constant member reference added to the constant pool.\n@param constantPoolCount The number of constant members in the constant pool.\n@param tag The tag of the constant member reference.\n@param owner The owner of the constant member reference.\n@param name The name of the constant member reference.\n@param descriptor The descriptor of the constant member reference.\n@param constantPoolCount The number of constant members in the constant pool.\n@param hashCode The hash code of the constant member reference."}, {"ID": 853, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (s SatPerKVByte) FeeForVSize(vbytes int64) btcutil.Amount { return btcutil.Amount(s) * btcutil.Amount(vbytes) / 1000 }. \n### Response: // FeeForVSize calculates the fee resulting from this fee rate and the given\n// vsize in vbytes..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private void addConstantMemberReference( final int index, final int tag, final String owner, final String name, final String descriptor) { add(new Entry(index, tag, owner, name, descriptor, 0, hash(tag, owner, name, descriptor))); } \n### Response:", "ground_truth": "Adds a new CONSTANT_Fieldref_info, CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info\nto the constant pool of this symbol table.\n\n@param index the constant pool index of the new Symbol.\n@param tag one of {@link Symbol#CONSTANT_FIELDREF_TAG}, {@link Symbol#CONSTANT_METHODREF_TAG}\nor {@link Symbol#CONSTANT_INTERFACE_METHODREF_TAG}.\n@param owner the internal name of a class.\n@param name a field or method name.\n@param descriptor a field or method descriptor.", "predict": "// Adds a constant member reference entry to the constant member list."}, {"ID": 854, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public int getTotalTriples() throws Exception { int total = 0; for (HashMap<String, Integer> mappingStat : statistics.values()) { for (Integer triplesCount : mappingStat.values()) { int triples = triplesCount.intValue(); if (triples == -1) { throw new Exception(\"An error was occurred in the counting process.\"); } total = total + triples; } } return total; }. \n### Response: Gets the total number of triples from all the data sources and mappings.\n\n@return The total number of triples.\n@throws Exception.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private Symbol addConstantIntegerOrFloat(final int tag, final int value) { int hashCode = hash(tag, value); Entry entry = get(hashCode); while (entry != null) { if (entry.tag == tag && entry.hashCode == hashCode && entry.data == value) { return entry; } entry = entry.next; } constantPool.putByte(tag).putInt(value); return put(new Entry(constantPoolCount++, tag, value, hashCode)); } \n### Response:", "ground_truth": "Adds a CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table.\nDoes nothing if the constant pool already contains a similar item.\n\n@param tag one of {@link Symbol#CONSTANT_INTEGER_TAG} or {@link Symbol#CONSTANT_FLOAT_TAG}.\n@param value an int or float.\n@return a constant pool constant with the given tag and primitive values.", "predict": "Adds a constant integer or float to the symbol table.\n\n@param tag The tag of the constant.\n@param value The value of the constant.\n@return The symbol table entry with the specified tag and value.\n@throws Exception.\n\n"}, {"ID": 855, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void removeFromSession( HttpServletRequest request ) { StorageHandler sh = Handlers.get( getServletContext() ).getStorageHandler(); HttpServletRequest unwrappedRequest = PageFlowUtils.unwrapMultipart( request ); RequestContext rc = new RequestContext( unwrappedRequest, null ); String attrName = ScopedServletUtils.getScopedSessionAttrName( InternalConstants.FACES_BACKING_ATTR, unwrappedRequest ); sh.removeAttribute( rc, attrName ); }. \n### Response: Remove this instance from the session..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private void addConstantIntegerOrFloat(final int index, final int tag, final int value) { add(new Entry(index, tag, value, hash(tag, value))); } \n### Response:", "ground_truth": "Adds a new CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol\ntable.\n\n@param index the constant pool index of the new Symbol.\n@param tag one of {@link Symbol#CONSTANT_INTEGER_TAG} or {@link Symbol#CONSTANT_FLOAT_TAG}.\n@param value an int or float.", "predict": "Adds an Entry object with the specified index, tag, and value to the constant pool."}, {"ID": 856, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public void afterProjectsRead(final MavenSession session) throws MavenExecutionException { boolean anyProject = false; for (MavenProject project : session.getProjects()) { if (project.getPlugin(\"ceylon\") != null || project.getPlugin(\"ceylon-maven-plugin\") != null || \"ceylon\".equals(project.getArtifact().getArtifactHandler().getPackaging()) || \"car\".equals(project.getArtifact().getArtifactHandler().getPackaging()) || \"ceylon-jar\".equals(project.getArtifact().getArtifactHandler().getPackaging()) || usesCeylonRepo(project)) { anyProject = true; } } if (anyProject) { logger.info(\"At least one project is using the Ceylon plugin. Preparing.\"); findCeylonRepo(session); } logger.info(\"Adding Ceylon repositories to build\"); session.getRequest().setWorkspaceReader( new CeylonWorkspaceReader( session.getRequest().getWorkspaceReader(), logger)); }. \n### Response: Interception after projects are known.\n@param session The Maven session\n@throws MavenExecutionException In case of error.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private Symbol addConstantLongOrDouble(final int tag, final long value) { int hashCode = hash(tag, value); Entry entry = get(hashCode); while (entry != null) { if (entry.tag == tag && entry.hashCode == hashCode && entry.data == value) { return entry; } entry = entry.next; } int index = constantPoolCount; constantPool.putByte(tag).putLong(value); constantPoolCount += 2; return put(new Entry(index, tag, value, hashCode)); } \n### Response:", "ground_truth": "Adds a CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table.\nDoes nothing if the constant pool already contains a similar item.\n\n@param tag one of {@link Symbol#CONSTANT_LONG_TAG} or {@link Symbol#CONSTANT_DOUBLE_TAG}.\n@param value a long or double.\n@return a constant pool constant with the given tag and primitive values.", "predict": "Adds a constant long or double to the symbol table.\n@param tag The tag to add the constant to\n@param value The value to add the constant to\n@return The symbol with the added tag and value.\n\n"}, {"ID": 857, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func Dial(target string, failFast FailFast, opts ...grpc.DialOption) (*grpc.ClientConn, error) { grpccommon.EnableTracingOpt() newopts := []grpc.DialOption{ grpc.WithDefaultCallOptions( grpc.MaxCallRecvMsgSize(*grpccommon.MaxMessageSize), grpc.MaxCallSendMsgSize(*grpccommon.MaxMessageSize), grpc.FailFast(bool(failFast)), ), } if *keepaliveTime != 0 || *keepaliveTimeout != 0 { kp := keepalive.ClientParameters{ // After a duration of this time if the client doesn't see any activity it pings the server to see if the transport is still alive. Time: *keepaliveTime, // After having pinged for keepalive check, the client waits for a duration of Timeout and if no activity is seen even after that // the connection is closed. (This will eagerly fail inflight grpc requests even if they don't have timeouts.) Timeout: *keepaliveTimeout, PermitWithoutStream: true, } newopts = append(newopts, grpc.WithKeepaliveParams(kp)) } if *initialConnWindowSize != 0 { newopts = append(newopts, grpc.WithInitialConnWindowSize(int32(*initialConnWindowSize))) } if *initialWindowSize != 0 { newopts = append(newopts, grpc.WithInitialWindowSize(int32(*initialWindowSize))) } newopts = append(newopts, opts...) var err error for _, grpcDialOptionInitializer := range grpcDialOptions { newopts, err = grpcDialOptionInitializer(newopts) if err != nil { log.Fatalf(\"There was an error initializing client grpc.DialOption: %v\", err) } } newopts = append(newopts, interceptors()...) return grpc.Dial(target, newopts...) }. \n### Response: // Dial creates a grpc connection to the given target.\n// failFast is a non-optional parameter because callers are required to specify\n// what that should be..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private void addConstantLongOrDouble(final int index, final int tag, final long value) { add(new Entry(index, tag, value, hash(tag, value))); } \n### Response:", "ground_truth": "Adds a new CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol\ntable.\n\n@param index the constant pool index of the new Symbol.\n@param tag one of {@link Symbol#CONSTANT_LONG_TAG} or {@link Symbol#CONSTANT_DOUBLE_TAG}.\n@param value a long or double.", "predict": "// This method adds a constant long or double to the given Entry object.\n// The index, tag, and value are used to uniquely identify and hash the Entry object.\n// The method uses the hash function to ensure that the same index, tag, and value will\n// be added to the same Entry object multiple times.\n\n"}, {"ID": 858, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function(data) { try { data = data || this.getContent(); return this.keychain.sign(JSON.stringify(data)); } catch(e) { throw new CError({ body: { code: 'ImATeapot', message: 'unable to sign content', cause: e } }).log('body'); } }. \n### Response: Generate a signature for for data or content property\n\n@param {String/Object} data The data to sign or content if missing\n@return {String} The signature in Base64 format.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: int addConstantNameAndType(final String name, final String descriptor) { final int tag = Symbol.CONSTANT_NAME_AND_TYPE_TAG; int hashCode = hash(tag, name, descriptor); Entry entry = get(hashCode); while (entry != null) { if (entry.tag == tag && entry.hashCode == hashCode && entry.name.equals(name) && entry.value.equals(descriptor)) { return entry.index; } entry = entry.next; } constantPool.put122(tag, addConstantUtf8(name), addConstantUtf8(descriptor)); return put(new Entry(constantPoolCount++, tag, name, descriptor, hashCode)).index; } \n### Response:", "ground_truth": "Adds a CONSTANT_NameAndType_info to the constant pool of this symbol table. Does nothing if the\nconstant pool already contains a similar item.\n\n@param name a field or method name.\n@param descriptor a field or method descriptor.\n@return a new or already existing Symbol with the given value.", "predict": "This method adds a constant named and type to the constant pool.\n\n@param {String} name The name of the constant\n@param {String} descriptor The description of the constant\n@return {int} The index of the constant in the constant pool.\n\nNote: This method uses the hash function to hash the tag, name, and descriptor of the constant and the constant pool's constant table. It uses the constant pool's put122 method to add the constant to the constant pool. The constant pool count is increased by 1 after the method returns."}, {"ID": 859, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def _read_until(cls, sock, desired_size): \"\"\"Read a certain amount of content from a socket before returning.\"\"\" buf = b'' while len(buf) < desired_size: recv_bytes = sock.recv(desired_size - len(buf)) if not recv_bytes: raise cls.TruncatedRead('Expected {} bytes before socket shutdown, instead received {}' .format(desired_size, len(buf))) buf += recv_bytes return buf. \n### Response: Read a certain amount of content from a socket before returning..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private void addConstantNameAndType(final int index, final String name, final String descriptor) { final int tag = Symbol.CONSTANT_NAME_AND_TYPE_TAG; add(new Entry(index, tag, name, descriptor, hash(tag, name, descriptor))); } \n### Response:", "ground_truth": "Adds a new CONSTANT_NameAndType_info to the constant pool of this symbol table.\n\n@param index the constant pool index of the new Symbol.\n@param name a field or method name.\n@param descriptor a field or method descriptor.", "predict": "Adds a constant entry for the given index, tag, name, and descriptor."}, {"ID": 860, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected function migrated($className) { $classInfo = new ReflectionClass($className); $fileName = str_replace('.php', '', basename($classInfo->getFileName())); $result = $this->connection->createQueryBuilder()->select('version') ->from('schema_migrations') ->where('version = ?') ->setParameter(0, $fileName) ->execute(); if (!count($result->fetchAll())) { return $fileName; } else { return false; } }. \n### Response: Checks if the migration has been executed and returns the migrations\nbase file name.\n\n@param string $className\n\n@return string.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: int addConstantUtf8(final String value) { int hashCode = hash(Symbol.CONSTANT_UTF8_TAG, value); Entry entry = get(hashCode); while (entry != null) { if (entry.tag == Symbol.CONSTANT_UTF8_TAG && entry.hashCode == hashCode && entry.value.equals(value)) { return entry.index; } entry = entry.next; } constantPool.putByte(Symbol.CONSTANT_UTF8_TAG).putUTF8(value); return put(new Entry(constantPoolCount++, Symbol.CONSTANT_UTF8_TAG, value, hashCode)).index; } \n### Response:", "ground_truth": "Adds a CONSTANT_Utf8_info to the constant pool of this symbol table. Does nothing if the\nconstant pool already contains a similar item.\n\n@param value a string.\n@return a new or already existing Symbol with the given value.", "predict": "Adds a constantUTF8 constant to the constant pool.\n\n@param String $value\n\n@return int."}, {"ID": 861, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def connect(self, host, port=6667, password=None): \"\"\" Connects to a server \"\"\" # Prepare the callbacks self._irc.add_global_handler('all_events', self.__handler) # Prepare the connection self._connection = self._irc.server().connect( host, port, self._nickname, password, self._username, self._realname) # Start connection thread self.__stopped.clear() self.__thread = threading.Thread(target=self.__loop, name=\"IRC-Bot-Loop\") self.__thread.daemon = True self.__thread.start(). \n### Response: Connects to a server.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private void addConstantUtf8(final int index, final String value) { add(new Entry(index, Symbol.CONSTANT_UTF8_TAG, value, hash(Symbol.CONSTANT_UTF8_TAG, value))); } \n### Response:", "ground_truth": "Adds a new CONSTANT_String_info to the constant pool of this symbol table.\n\n@param index the constant pool index of the new Symbol.\n@param value a string.", "predict": "Adds a constant UTF-8-encoded value to the constant pool."}, {"ID": 862, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (s *Session) writeFrameInternal(f Frame, deadline <-chan time.Time) (int, error) { req := writeRequest{ frame: f, result: make(chan writeResult, 1), } select { case <-s.die: return 0, errors.New(errBrokenPipe) case s.writes <- req: case <-deadline: return 0, errTimeout } select { case result := <-req.result: return result.n, result.err case <-deadline: return 0, errTimeout case <-s.die: return 0, errors.New(errBrokenPipe) } }. \n### Response: // internal writeFrame version to support deadline used in keepalive.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: Symbol addConstantMethodHandle( final int referenceKind, final String owner, final String name, final String descriptor, final boolean isInterface) { final int tag = Symbol.CONSTANT_METHOD_HANDLE_TAG; // Note that we don't need to include isInterface in the hash computation, because it is // redundant with owner (we can't have the same owner with different isInterface values). int hashCode = hash(tag, owner, name, descriptor, referenceKind); Entry entry = get(hashCode); while (entry != null) { if (entry.tag == tag && entry.hashCode == hashCode && entry.data == referenceKind && entry.owner.equals(owner) && entry.name.equals(name) && entry.value.equals(descriptor)) { return entry; } entry = entry.next; } if (referenceKind <= Opcodes.H_PUTSTATIC) { constantPool.put112(tag, referenceKind, addConstantFieldref(owner, name, descriptor).index); } else { constantPool.put112( tag, referenceKind, addConstantMethodref(owner, name, descriptor, isInterface).index); } return put( new Entry(constantPoolCount++, tag, owner, name, descriptor, referenceKind, hashCode)); } \n### Response:", "ground_truth": "Adds a CONSTANT_MethodHandle_info to the constant pool of this symbol table. Does nothing if\nthe constant pool already contains a similar item.\n\n@param referenceKind one of {@link Opcodes#H_GETFIELD}, {@link Opcodes#H_GETSTATIC}, {@link\nOpcodes#H_PUTFIELD}, {@link Opcodes#H_PUTSTATIC}, {@link Opcodes#H_INVOKEVIRTUAL}, {@link\nOpcodes#H_INVOKESTATIC}, {@link Opcodes#H_INVOKESPECIAL}, {@link\nOpcodes#H_NEWINVOKESPECIAL} or {@link Opcodes#H_INVOKEINTERFACE}.\n@param owner the internal name of a class of interface.\n@param name a field or method name.\n@param descriptor a field or method descriptor.\n@param isInterface whether owner is an interface or not.\n@return a new or already existing Symbol with the given value.", "predict": "// Adds a constant method handle to the constant pool."}, {"ID": 863, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function getRolesByPrivilege($privilege) { $roles = array(); if ($this->acl) { foreach ($this->acl->getRoles() as $role) { if ($this->acl->isAllowed($role, null, $privilege)) { //Do not translate, only make first one uppercase $roles[$role] = ucfirst($role); } } } return $roles; }. \n### Response: Returns the roles in the acl with the privilege\n\n@return array roleId => ucfirst(roleId).\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private void addConstantMethodHandle( final int index, final int referenceKind, final String owner, final String name, final String descriptor) { final int tag = Symbol.CONSTANT_METHOD_HANDLE_TAG; int hashCode = hash(tag, owner, name, descriptor, referenceKind); add(new Entry(index, tag, owner, name, descriptor, referenceKind, hashCode)); } \n### Response:", "ground_truth": "Adds a new CONSTANT_MethodHandle_info to the constant pool of this symbol table.\n\n@param index the constant pool index of the new Symbol.\n@param referenceKind one of {@link Opcodes#H_GETFIELD}, {@link Opcodes#H_GETSTATIC}, {@link\nOpcodes#H_PUTFIELD}, {@link Opcodes#H_PUTSTATIC}, {@link Opcodes#H_INVOKEVIRTUAL}, {@link\nOpcodes#H_INVOKESTATIC}, {@link Opcodes#H_INVOKESPECIAL}, {@link\nOpcodes#H_NEWINVOKESPECIAL} or {@link Opcodes#H_INVOKEINTERFACE}.\n@param owner the internal name of a class of interface.\n@param name a field or method name.\n@param descriptor a field or method descriptor.", "predict": "Adds a constant method handle to the specified index, referenceKind, owner, name, and descriptor in the constant table.\n\n@param index The index of the constant method handle to add.\n@param referenceKind The referenceKind of the constant method handle to add.\n@param owner The owner of the constant method handle to add.\n@param name The name of the constant method handle to add.\n@param descriptor The descriptor of the constant method handle to add.\n@param referenceKind The referenceKind of the constant method handle to add.\n@return The hashCode of the constant method handle at the specified index."}, {"ID": 864, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function AuctionMediator(config) { if (this.init_) { this.init_(); } /** @property {boolean} prefix if false, do not add bid provider name to bid targeting key. Default: true */ this.prefix = config && config.hasOwnProperty('prefix') ? config.prefix : true; // store slots by name for easy lookup this.slotMap = {}; this.bidProviders = {}; this.auctionProvider = null; this.auctionRun = {}; this.timeout_ = AuctionMediator.NO_TIMEOUT; this.trigger_ = null; this.bidAssembler = new BidAssembler(); this.requestAssembler = new RequestAssembler(); this.auctionIdx_ = 0; this.doneCallbackOffset_ = AuctionMediator.DEFAULT_DONE_CALLBACK_OFFSET; this.omitDefaultBidKey_ = false; this.throwErrors_ = false; Event.setAuctionId(this.getAuctionId()); }. \n### Response: AuctionMediator coordiates requests to Publisher Ad Servers.\n\n@class\n@memberof pubfood#mediator\n@private.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: Symbol addConstantDynamic( final String name, final String descriptor, final Handle bootstrapMethodHandle, final Object... bootstrapMethodArguments) { Symbol bootstrapMethod = addBootstrapMethod(bootstrapMethodHandle, bootstrapMethodArguments); return addConstantDynamicOrInvokeDynamicReference( Symbol.CONSTANT_DYNAMIC_TAG, name, descriptor, bootstrapMethod.index); } \n### Response:", "ground_truth": "Adds a CONSTANT_Dynamic_info to the constant pool of this symbol table. Also adds the related\nbootstrap method to the BootstrapMethods of this symbol table. Does nothing if the constant\npool already contains a similar item.\n\n@param name a method name.\n@param descriptor a field descriptor.\n@param bootstrapMethodHandle a bootstrap method handle.\n@param bootstrapMethodArguments the bootstrap method arguments.\n@return a new or already existing Symbol with the given value.", "predict": "Symbol addConstantDynamic(String name, String descriptor, Handle bootstrapMethodHandle, Object... bootstrapMethodArguments)\n\nAdds a constant dynamic value to the specified name, descriptor, and bootstrap method handle. The constant dynamic value is returned by the method.\n\n@method\n@memberof dynamic#addConstantDynamic\n@param {String} name - The name of the constant dynamic value to be added.\n@param {String} descriptor - The descriptor of the constant dynamic value to be added.\n@param {Handle} bootstrapMethodHandle - The handle of the bootstrap method to be added.\n@param {Object...} bootstrapMethodArguments - The arguments to be passed to the bootstrap method.\n@return The constant dynamic value.\n@private."}, {"ID": 865, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static systembackup[] get(nitro_service service, String filename[]) throws Exception{ if (filename !=null && filename.length>0) { systembackup response[] = new systembackup[filename.length]; systembackup obj[] = new systembackup[filename.length]; for (int i=0;i<filename.length;i++) { obj[i] = new systembackup(); obj[i].set_filename(filename[i]); response[i] = (systembackup) obj[i].get_resource(service); } return response; } return null; }. \n### Response: Use this API to fetch systembackup resources of given names ..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: Symbol addConstantInvokeDynamic( final String name, final String descriptor, final Handle bootstrapMethodHandle, final Object... bootstrapMethodArguments) { Symbol bootstrapMethod = addBootstrapMethod(bootstrapMethodHandle, bootstrapMethodArguments); return addConstantDynamicOrInvokeDynamicReference( Symbol.CONSTANT_INVOKE_DYNAMIC_TAG, name, descriptor, bootstrapMethod.index); } \n### Response:", "ground_truth": "Adds a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table. Also adds the\nrelated bootstrap method to the BootstrapMethods of this symbol table. Does nothing if the\nconstant pool already contains a similar item.\n\n@param name a method name.\n@param descriptor a method descriptor.\n@param bootstrapMethodHandle a bootstrap method handle.\n@param bootstrapMethodArguments the bootstrap method arguments.\n@return a new or already existing Symbol with the given value.", "predict": "Adds a constant method to the bootstrap method handle and returns the result."}, {"ID": 866, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def issue_and_listen_to_command_history(): \"\"\"Listen to command history updates of a single issued command.\"\"\" def tc_callback(rec): print('TC:', rec) command = processor.issue_command('/YSS/SIMULATOR/SWITCH_VOLTAGE_OFF', args={ 'voltage_num': 1, }, comment='im a comment') command.create_command_history_subscription(on_data=tc_callback). \n### Response: Listen to command history updates of a single issued command..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private Symbol addConstantDynamicOrInvokeDynamicReference( final int tag, final String name, final String descriptor, final int bootstrapMethodIndex) { int hashCode = hash(tag, name, descriptor, bootstrapMethodIndex); Entry entry = get(hashCode); while (entry != null) { if (entry.tag == tag && entry.hashCode == hashCode && entry.data == bootstrapMethodIndex && entry.name.equals(name) && entry.value.equals(descriptor)) { return entry; } entry = entry.next; } constantPool.put122(tag, bootstrapMethodIndex, addConstantNameAndType(name, descriptor)); return put( new Entry( constantPoolCount++, tag, null, name, descriptor, bootstrapMethodIndex, hashCode)); } \n### Response:", "ground_truth": "Adds a CONSTANT_Dynamic or a CONSTANT_InvokeDynamic_info to the constant pool of this symbol\ntable. Does nothing if the constant pool already contains a similar item.\n\n@param tag one of {@link Symbol#CONSTANT_DYNAMIC_TAG} or {@link\nSymbol#CONSTANT_INVOKE_DYNAMIC_TAG}.\n@param name a method name.\n@param descriptor a field descriptor for CONSTANT_DYNAMIC_TAG) or a method descriptor for\nCONSTANT_INVOKE_DYNAMIC_TAG.\n@param bootstrapMethodIndex the index of a bootstrap method in the BootstrapMethods attribute.\n@return a new or already existing Symbol with the given value.", "predict": "Adds a constant orInvokeDynamicReference to the symbol table. This method hash the tag, name, descriptor, and bootstrapMethodIndex to determine which entry to return from the constant pool. It then iterates through the entries in the constant pool and returns the next entry if it matches the criteria. Finally, it adds the new entry to the end of the constant pool and returns the put operation to update the symbol table."}, {"ID": 867, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (s *ApplicationVersionLifecycleConfig) SetMaxCountRule(v *MaxCountRule) *ApplicationVersionLifecycleConfig { s.MaxCountRule = v return s }. \n### Response: // SetMaxCountRule sets the MaxCountRule field's value..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private void addConstantDynamicOrInvokeDynamicReference( final int tag, final int index, final String name, final String descriptor, final int bootstrapMethodIndex) { int hashCode = hash(tag, name, descriptor, bootstrapMethodIndex); add(new Entry(index, tag, null, name, descriptor, bootstrapMethodIndex, hashCode)); } \n### Response:", "ground_truth": "Adds a new CONSTANT_Dynamic_info or CONSTANT_InvokeDynamic_info to the constant pool of this\nsymbol table.\n\n@param tag one of {@link Symbol#CONSTANT_DYNAMIC_TAG} or {@link\nSymbol#CONSTANT_INVOKE_DYNAMIC_TAG}.\n@param index the constant pool index of the new Symbol.\n@param name a method name.\n@param descriptor a field descriptor for CONSTANT_DYNAMIC_TAG or a method descriptor for\nCONSTANT_INVOKE_DYNAMIC_TAG.\n@param bootstrapMethodIndex the index of a bootstrap method in the BootstrapMethods attribute.", "predict": "// Adds a constant or dynamic reference to the Entry object."}, {"ID": 868, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function on(string $event, $class_or_obj, string $method, array $arguments = []): Core { $this->registerEventHandler(new EventHandler($event, $class_or_obj, $method, $arguments)); return $this; }. \n### Response: Create an event handler to be called when a specified event is fired by the framework or a library within the\nFramework.\n\n@param string $event        The name of the event to listen for\n@param mixed  $class_or_obj The object or class the method belongs to\n@param string $method       The method to call\n@param array  $arguments    Optional parameters to pass to the method\n\n@return Core\n@throws \\Exception.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private Symbol addConstantUtf8Reference(final int tag, final String value) { int hashCode = hash(tag, value); Entry entry = get(hashCode); while (entry != null) { if (entry.tag == tag && entry.hashCode == hashCode && entry.value.equals(value)) { return entry; } entry = entry.next; } constantPool.put12(tag, addConstantUtf8(value)); return put(new Entry(constantPoolCount++, tag, value, hashCode)); } \n### Response:", "ground_truth": "Adds a CONSTANT_Class_info, CONSTANT_String_info, CONSTANT_MethodType_info,\nCONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table. Does\nnothing if the constant pool already contains a similar item.\n\n@param tag one of {@link Symbol#CONSTANT_CLASS_TAG}, {@link Symbol#CONSTANT_STRING_TAG}, {@link\nSymbol#CONSTANT_METHOD_TYPE_TAG}, {@link Symbol#CONSTANT_MODULE_TAG} or {@link\nSymbol#CONSTANT_PACKAGE_TAG}.\n@param value an internal class name, an arbitrary string, a method descriptor, a module or a\npackage name, depending on tag.\n@return a new or already existing Symbol with the given value.", "predict": "Add a constantUtf8 reference to a symbol.\n\n@param int $tag The tag of the symbol to add\n@param String $value The value of the symbol\n\n@return The added symbol\n@throws \\Exception."}, {"ID": 869, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def __telnet_event_listener(self, ip, callback): \"\"\"creates a telnet connection to the lightpad\"\"\" tn = telnetlib.Telnet(ip, 2708) self._last_event = \"\" self._telnet_running = True while self._telnet_running: try: raw_string = tn.read_until(b'.\\n', 5) if len(raw_string) >= 2 and raw_string[-2:] == b'.\\n': # lightpad sends \".\\n\" at the end that we need to chop off json_string = raw_string.decode('ascii')[0:-2] if json_string != self._last_event: callback(json.loads(json_string)) self._last_event = json_string except: pass tn.close(). \n### Response: creates a telnet connection to the lightpad.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private void addConstantUtf8Reference(final int index, final int tag, final String value) { add(new Entry(index, tag, value, hash(tag, value))); } \n### Response:", "ground_truth": "Adds a new CONSTANT_Class_info, CONSTANT_String_info, CONSTANT_MethodType_info,\nCONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table.\n\n@param index the constant pool index of the new Symbol.\n@param tag one of {@link Symbol#CONSTANT_CLASS_TAG}, {@link Symbol#CONSTANT_STRING_TAG}, {@link\nSymbol#CONSTANT_METHOD_TYPE_TAG}, {@link Symbol#CONSTANT_MODULE_TAG} or {@link\nSymbol#CONSTANT_PACKAGE_TAG}.\n@param value an internal class name, an arbitrary string, a method descriptor, a module or a\npackage name, depending on tag.", "predict": "private void addConstantUtf8Reference(final int index, final int tag, final String value) {\n// Add a constantUtf8 reference to the specified index, tag, and value.\n}"}, {"ID": 870, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (l *Listener) Close() error { l.once.Do(func() { close(l.done) <-l.rmvd }) return nil }. \n### Response: // Close implements the net.Listener Close method..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: Symbol addBootstrapMethod( final Handle bootstrapMethodHandle, final Object... bootstrapMethodArguments) { ByteVector bootstrapMethodsAttribute = bootstrapMethods; if (bootstrapMethodsAttribute == null) { bootstrapMethodsAttribute = bootstrapMethods = new ByteVector(); } // The bootstrap method arguments can be Constant_Dynamic values, which reference other // bootstrap methods. We must therefore add the bootstrap method arguments to the constant pool // and BootstrapMethods attribute first, so that the BootstrapMethods attribute is not modified // while adding the given bootstrap method to it, in the rest of this method. for (Object bootstrapMethodArgument : bootstrapMethodArguments) { addConstant(bootstrapMethodArgument); } // Write the bootstrap method in the BootstrapMethods table. This is necessary to be able to // compare it with existing ones, and will be reverted below if there is already a similar // bootstrap method. int bootstrapMethodOffset = bootstrapMethodsAttribute.length; bootstrapMethodsAttribute.putShort( addConstantMethodHandle( bootstrapMethodHandle.getTag(), bootstrapMethodHandle.getOwner(), bootstrapMethodHandle.getName(), bootstrapMethodHandle.getDesc(), bootstrapMethodHandle.isInterface()) .index); int numBootstrapArguments = bootstrapMethodArguments.length; bootstrapMethodsAttribute.putShort(numBootstrapArguments); for (Object bootstrapMethodArgument : bootstrapMethodArguments) { bootstrapMethodsAttribute.putShort(addConstant(bootstrapMethodArgument).index); } // Compute the length and the hash code of the bootstrap method. int bootstrapMethodlength = bootstrapMethodsAttribute.length - bootstrapMethodOffset; int hashCode = bootstrapMethodHandle.hashCode(); for (Object bootstrapMethodArgument : bootstrapMethodArguments) { hashCode ^= bootstrapMethodArgument.hashCode(); } hashCode &= 0x7FFFFFFF; // Add the bootstrap method to the symbol table or revert the above changes. return addBootstrapMethod(bootstrapMethodOffset, bootstrapMethodlength, hashCode); } \n### Response:", "ground_truth": "Adds a bootstrap method to the BootstrapMethods attribute of this symbol table. Does nothing if\nthe BootstrapMethods already contains a similar bootstrap method.\n\n@param bootstrapMethodHandle a bootstrap method handle.\n@param bootstrapMethodArguments the bootstrap method arguments.\n@return a new or already existing Symbol with the given value.", "predict": "// Add BootstrapMethod to the symbol table.\n// Compute the length and the hash code of the bootstrap method.\n// Add the bootstrap method to the symbol table or revert the above changes."}, {"ID": 871, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public DbOrganization getOrganization(final DbArtifact dbArtifact) { final DbModule module = getModule(dbArtifact); if(module == null || module.getOrganization() == null){ return null; } return repositoryHandler.getOrganization(module.getOrganization()); }. \n### Response: Returns the Organization that produce this artifact or null if there is none\n\n@param dbArtifact DbArtifact\n@return DbOrganization.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: int addMergedType(final int typeTableIndex1, final int typeTableIndex2) { // TODO sort the arguments? The merge result should be independent of their order. long data = typeTableIndex1 | (((long) typeTableIndex2) << 32); int hashCode = hash(Symbol.MERGED_TYPE_TAG, typeTableIndex1 + typeTableIndex2); Entry entry = get(hashCode); while (entry != null) { if (entry.tag == Symbol.MERGED_TYPE_TAG && entry.hashCode == hashCode && entry.data == data) { return entry.info; } entry = entry.next; } String type1 = typeTable[typeTableIndex1].value; String type2 = typeTable[typeTableIndex2].value; int commonSuperTypeIndex = addType(classWriter.getCommonSuperClass(type1, type2)); put(new Entry(typeCount, Symbol.MERGED_TYPE_TAG, data, hashCode)).info = commonSuperTypeIndex; return commonSuperTypeIndex; } \n### Response:", "ground_truth": "Adds a merged type in the type table of this symbol table. Does nothing if the type table\nalready contains a similar type.\n\n@param typeTableIndex1 a {@link Symbol#TYPE_TAG} type, specified by its index in the type\ntable.\n@param typeTableIndex2 another {@link Symbol#TYPE_TAG} type, specified by its index in the type\ntable.\n@return the index of a new or already existing {@link Symbol#TYPE_TAG} type Symbol,\ncorresponding to the common super class of the given types.", "predict": "This method adds a merged type to the classWriter, which is used to write the compiled class files. The merge result should be independent of their order. The method first sorts the arguments by their index1 and index2, as they are used in the hash function. Then, it uses the hash function to find the first entry in the Entry array that matches the tag, hashCode, and data of the current merged type. If no such entry is found, it returns -1. Finally, it adds the common super class index to the Entry array and returns the index."}, {"ID": 872, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def loggable(obj): \"\"\"Return \"True\" if the obj implements the minimum Logger API required by the 'trace' decorator. \"\"\" if isinstance(obj, logging.Logger): return True else: return (inspect.isclass(obj) and inspect.ismethod(getattr(obj, 'debug', None)) and inspect.ismethod(getattr(obj, 'isEnabledFor', None)) and inspect.ismethod(getattr(obj, 'setLevel', None))). \n### Response: Return \"True\" if the obj implements the minimum Logger API\n    required by the 'trace' decorator..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private int hash(final String name) { int h = 0; for (int i = name.length() - 1; i >= 0; i--) { char c = name.charAt(i); if (!caseSensitive) { if (c >= 'A' && c <= 'Z') { c += 32; } } h = 31 * h + c; } if (h > 0) { return h; } if (h == Integer.MIN_VALUE) { return Integer.MAX_VALUE; } return -h; } \n### Response:", "ground_truth": "Calculates hash value of the input string.", "predict": "This method calculates a hash value for a given string name. It does this by iterating through the characters in the name and adding their hash value to a pre-defined hash table. The hash value is calculated by taking the 31st power of the hash value and adding the character 'A' to the start of the string (since uppercase letters are 32 characters in length). The method returns the hash value as a positive integer, or -1 if the hash value is equal to the minimum value (Integer.MIN_VALUE) or if it is equal to the maximum value (Integer.MAX_VALUE)."}, {"ID": 873, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function register() { /* * Register the e-mail checker */ $this->app->singleton(EmailChecker::class, function ($app) { return new EmailChecker(); }); /* * Alias the dependency for ease. */ $this->app->alias(EmailChecker::class, 'email.checker'); }. \n### Response: Register the factory in the application container..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public HttpMultiMap<V> clear() { for (int i = 0; i < entries.length; i++) { entries[i] = null; } head.before = head.after = head; return this; } \n### Response:", "ground_truth": "Clears the map.", "predict": "Clear the HttpMultiMap."}, {"ID": 874, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (s *ChannelsService) Mark(channel string) *ChannelsMarkCall { var call ChannelsMarkCall call.service = s call.channel = channel return &call }. \n### Response: // Mark creates a ChannelsMarkCall object in preparation for accessing the channels.mark endpoint.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public List<V> getAll(final String name) { LinkedList<V> values = new LinkedList<>(); int h = hash(name); int i = index(h); MapEntry<V> e = entries[i]; while (e != null) { if (e.hash == h && eq(name, e.key)) { values.addFirst(e.getValue()); } e = e.next; } return values; } \n### Response:", "ground_truth": "Returns all values associated with the name.", "predict": "// getAll retrieves all values associated with the given name from the specified channel. \n\nNote: The above comments are generated based on the code provided and do not necessarily reflect the actual comments in the code."}, {"ID": 875, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private String checkRequestMethod(HttpServletRequest request, JCorsConfig config) { String requestMethod = request.getHeader(CorsHeaders.ACCESS_CONTROL_REQUEST_METHOD_HEADER); Constraint.ensureNotEmpty(requestMethod, \"Request Method Header must be supplied\"); Constraint.ensureTrue(config.isMethodAllowed(requestMethod), String.format(\"The specified method is not allowed: '%s'\", requestMethod)); return requestMethod; }. \n### Response: Checks if the requested method is allowed\n\n@param request\n@param config.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public Iterator<Map.Entry<String, V>> iterator() { final MapEntry[] e = {head.after}; return new Iterator<Map.Entry<String, V>>() { @Override public boolean hasNext() { return e[0] != head; } @Override @SuppressWarnings(\"unchecked\") public Map.Entry<String, V> next() { if (!hasNext()) { throw new NoSuchElementException(\"No next() entry in the iteration\"); } MapEntry<V> next = e[0]; e[0] = e[0].after; return next; } @Override public void remove() { throw new UnsupportedOperationException(); } }; } \n### Response:", "ground_truth": "Returns iterator of all entries.", "predict": "This method returns an iterator for the Map.Entry objects in the head of the Map.\n\n@return an iterator for the Map.Entry objects in the head of the Map.\n\n@param head the Map.Entry object at the head of the Map.\n\nNote: This method uses the Map.Entry class and its methods to iterate over the Map. The hasNext() method checks if there is another Map.Entry object in the Map, and the next() method retrieves the next Map.Entry object and assigns it to the next variable. The remove() method does not exist in the Map.Entry class."}, {"ID": 876, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function validateSnapshotStorage(snapshotStorage) { if (typeof snapshotStorage !== 'object' || !snapshotStorage) throw new TypeError('snapshotStorage argument must be an Object'); if (typeof snapshotStorage.getAggregateSnapshot !== 'function') throw new TypeError('snapshotStorage.getAggregateSnapshot argument must be a Function'); if (typeof snapshotStorage.saveAggregateSnapshot !== 'function') throw new TypeError('snapshotStorage.saveAggregateSnapshot argument must be a Function'); }. \n### Response: Ensure snapshotStorage matches the expected format\n@param {IAggregateSnapshotStorage} snapshotStorage.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public List<Map.Entry<String, V>> entries() { List<Map.Entry<String, V>> all = new LinkedList<>(); MapEntry<V> e = head.after; while (e != head) { all.add(e); e = e.after; } return all; } \n### Response:", "ground_truth": "Returns all the entries of this map. Case sensitivity does not influence\nthe returned list, it always contains all of the values.", "predict": "This method returns a list of all the Map.Entry objects in the head of the list. It uses a while loop to iterate through the list and add each Map.Entry object to the list. The method returns the list of all the Map.Entry objects.\n\nNote: The head of the list is a Map.Entry object with the key \"head\" and the value null. The after property of the Map.Entry object is used to determine the next Map.Entry object to add to the list. The method assumes that the head of the list is always a Map.Entry object with the key \"head\" and the value null."}, {"ID": 877, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function checkbox($field, $label) { $checkbox = new Checkbox($this->_entity, $field, $label); array_push($this->_elements, $checkbox); return $checkbox; }. \n### Response: add checkbox element\n@access public\n@param $field string\n@param $label string\n@return \\Gcs\\Framework\\Core\\Orm\\Validation\\Element\\Checkbox\n@since 3.0\n@package Gcs\\Framework\\Core\\Orm\\Validation.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private void grow(final int minCapacity) { final int oldCapacity = buffer.length; int newCapacity = oldCapacity << 1; if (newCapacity - minCapacity < 0) { // special case, min capacity is larger then a grow newCapacity = minCapacity + 512; } buffer = Arrays.copyOf(buffer, newCapacity); } \n### Response:", "ground_truth": "Grows the buffer.", "predict": "grow method\n@access private\n@param minCapacity int\n@return void\n@since 3.0\n@package Gcs\\Framework\\Core\\Orm\\Validation."}, {"ID": 878, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (r *Route) Head(handlers ...Handler) *Route { return r.group.add(\"HEAD\", r.path, handlers) }. \n### Response: // Head adds the route to the router using the HEAD HTTP method..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public FastCharBuffer append(final CharSequence csq, final int start, final int end) { for (int i = start; i < end; i++) { append(csq.charAt(i)); } return this; } \n### Response:", "ground_truth": "Appends character sequence to buffer.", "predict": "// override the method append to create a FastCharBuffer for the given CharSequence csq and start, end indices.."}, {"ID": 879, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def read(self, container: Container, filepath: str) -> str: \"\"\" Attempts to retrieve the contents of a given file in a running container. Parameters: container: the container from which the file should be fetched. filepath: the path to the file. If a relative path is given, the path will be interpreted as being relative to the source directory for the program under test inside the container. Returns: the contents of the file as a string. Raises: KeyError: if the given file was not found. \"\"\" logger.debug(\"reading contents of file [%s] in container [%s].\", filepath, container.uid) path = self._file_path(container, filepath) response = self.__api.get(path) if response.status_code == 200: contents = response.text logger.debug(\"fetched contents of file [%s] in container [%s]:%s\", filepath, container.uid, indent(\"\\n[CONTENTS]\\n{}\\n[/CONTENTS]\".format(contents), 2)) # noqa: pycodestyle return contents try: self.__api.handle_erroneous_response(response) except BugZooException as err: logger.exception(\"failed to read contents of file [%s] in container [%s]: %s\", # noqa: pycodestyle filepath, container.uid, err) raise. \n### Response: Attempts to retrieve the contents of a given file in a running\n        container.\n\n        Parameters:\n            container: the container from which the file should be fetched.\n            filepath: the path to the file. If a relative path is given,\n                the path will be interpreted as being relative to the source\n                directory for the program under test inside the container.\n\n        Returns:\n            the contents of the file as a string.\n\n        Raises:\n            KeyError: if the given file was not found..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public AnnotationVisitor visitAnnotation(final String desc, final boolean visible) { AnnotationVisitor destAnn = methodVisitor.visitAnnotation(desc, visible); // [A4] return new AnnotationVisitorAdapter(destAnn); } \n### Response:", "ground_truth": "Copies target method annotations.", "predict": "@Override\npublic AnnotationVisitor visitAnnotation(final String desc, final boolean visible)\n{\nAnnotationVisitor destAnn = methodVisitor.visitAnnotation(desc, visible);\n// [A4]\nreturn new AnnotationVisitorAdapter(destAnn);\n}"}, {"ID": 880, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static function getNonce($action, $previousTick = false) { // Don't regenerate this again if not needed if (isset(static::$nonces[$action][$previousTick])) { return static::$nonces[$action][$previousTick]; } $nonce = md5(self::generateNonceString($action, $previousTick)); static::$nonces[$action][$previousTick] = $nonce; return static::$nonces[$action][$previousTick]; }. \n### Response: Creates a hashed nonce tied to the passed action. Tied to the current user and time. The nonce for a given\naction is the same for 12 hours.\n\n@param string $action      the action the nonce is tied to (e.g. save-user-admin or move-page-homepage)\n@param bool   $previousTick if true, generates the token for the previous tick (the previous 12 hours)\n\n@return string the nonce.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public void visitEnd() { createFirstChainDelegate_Continue(tmd); for (int p = 0; p < tmd.proxyData.length; p++) { tmd.selectCurrentProxy(p); createProxyMethod(tmd); } } \n### Response:", "ground_truth": "Finally, builds proxy methods if applied to current method.", "predict": "This method overrides the default `visitEnd()` method in the `ChainDelegate` class and performs additional actions such as creating the first chain delegate, selecting the current proxy, and calling the `createProxyMethod()` method.\n\n@Override\npublic void visitEnd()\n\nThis method is a override of the default `visitEnd()` method in the `ChainDelegate` class.\n\nThis method is called at the end of the visit method in the chain.\n\nIt creates the first chain delegate by calling the `createFirstChainDelegate_Continue()` method.\nIt selects the current proxy by calling the `tmd.selectCurrentProxy(p)` method.\nIt calls the `createProxyMethod()` method by passing the `tmd` object.\n\nThis method is used to perform additional actions such as creating the first chain delegate, selecting the current proxy, and calling the `createProxyMethod()` method.\n\nNote: This method is only called when the chain is completed successfully.\nIt is not called when the chain is broken or when the chain delegate is removed."}, {"ID": 881, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function genStaticKeys (modules) { return modules.reduce(function (keys, m) { return keys.concat(m.staticKeys || []) }, []).join(',') }. \n### Response: Generate a static keys string from compiler modules..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void createFirstChainDelegate_Start() { // check invalid access flags int access = msign.getAccessFlags(); if (!wd.allowFinalMethods) { if ((access & AsmUtil.ACC_FINAL) != 0) { // detect final throw new ProxettaException( \"Unable to create proxy for final method: \" + msign + \". Remove final modifier or change the pointcut definition.\"); } } // create proxy methods tmd = new TargetMethodData(msign, aspectList); access &= ~ACC_NATIVE; access &= ~ACC_ABSTRACT; methodVisitor = wd.dest.visitMethod( access, tmd.msign.getMethodName(), tmd.msign.getDescription(), tmd.msign.getAsmMethodSignature(), null); } \n### Response:", "ground_truth": "Starts creation of first chain delegate.", "predict": "This method is part of the `createFirstChainDelegate_Start` protected method in the `FirstChainDelegate` class, which is a part of the `Proxetta` library.\n\nThe method checks if the access flags of the method being called (i.e. `msign.getAccessFlags()`) are invalid. If they are, it checks if the `wd.allowFinalMethods` flag is set to `false` (i.e. the method is not a final method). If it is, it throws a `ProxettaException` with the message \"Unable to create proxy for final method: [method name]\".\n\nThen, it creates a `TargetMethodData` object with the method signature and access flags, and sets the invalid access flags and abstract access flags to `false`. It then visits the method using the `wd.dest.visitMethod` method and passes the access flags, method name, description, signature, and null as arguments.\n\nOverall, this method is used to create a proxy for the method being called, if the original method is not a final method."}, {"ID": 882, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected function setDatatypeConverter(DatatypeConverterInterface $datatypeConverter) { if (null == $datatypeConverter) { throw new \\RuntimeException('DatatypeConverter can\\'t be null.'); } $this->datatypeConverter = $datatypeConverter; $this->datatypeConverter->setup(); return $this; }. \n### Response: Set data type converter.\n\n@param \\MwbExporter\\Formatter\\DatatypeConverterInterface $datatypeConverter\n@return \\MwbExporter\\Formatter\\Formatter.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void createFirstChainDelegate_Continue(final TargetMethodData tmd) { methodVisitor.visitCode(); if (tmd.msign.isStatic) { loadStaticMethodArguments(methodVisitor, tmd.msign); methodVisitor.visitMethodInsn( INVOKESTATIC, wd.thisReference, tmd.firstMethodName(), tmd.msign.getDescription(), false); } else { loadSpecialMethodArguments(methodVisitor, tmd.msign); methodVisitor.visitMethodInsn( INVOKESPECIAL, wd.thisReference, tmd.firstMethodName(), tmd.msign.getDescription(), false); } visitReturn(methodVisitor, tmd.msign, false); methodVisitor.visitMaxs(0, 0); methodVisitor.visitEnd(); } \n### Response:", "ground_truth": "Continues the creation of the very first method in calling chain that simply delegates invocation to the first proxy method.\nThis method mirrors the target method.", "predict": "Create first chain delegate and continue method.\n\n@param \\MwbExporter\\Formatter\\TargetMethodData tmd\n@return void."}, {"ID": 883, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected function createBatchAddresses($start, $count, $keyIndex) { $addresses = array(); for ($i = 0; $i < $count; $i++) { //create a path subsequent address $path = (string)WalletPath::create($keyIndex, $_chain = 0, $start+$i)->path()->publicPath(); list($address, $redeem, $witness) = $this->createAddress($path); $addresses[$address] = array( //'address' => $address, 'redeem' => $redeem, 'witness' => $witness, 'path' => $path ); if ($this->debug) { echo \".\"; } } return $addresses; }. \n### Response: create a batch of multisig addresses\n\n@param $start\n@param $count\n@param $keyIndex\n@return array.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static Path parse(final String path) { return path == null ? new Path() : new Path(StringUtil.splitc(path, '.')); } \n### Response:", "ground_truth": "Parses input dot-separated string that represents a path.", "predict": "parse a path string\n\n@param path\n@return Path object."}, {"ID": 884, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function(val) { return val === undefined ? (this.length ? this[0].outerHTML : null) : this.each(function(index, el) { el.outerHTML = val; }); }. \n### Response: outerHTML method\nget or set outerHTML value\n@param  {string}          [val] - html value\n@return {(string|object)}         html value or this.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public Path push(final CharSequence field) { _push(field); if (altPath != null) { altPath.push(field); } return this; } \n### Response:", "ground_truth": "Push element to the path.", "predict": "altPath method\nget or set alternative path\n@return {Path}           current path\n\n"}, {"ID": 885, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def log_cef(name, severity=logging.INFO, env=None, username='none', signature=None, **kwargs): \"\"\" Wraps cef logging function so we don't need to pass in the config dictionary every time. See bug 707060. ``env`` can be either a request object or just the request.META dictionary. \"\"\" cef_logger = commonware.log.getLogger('cef') c = {'product': settings.CEF_PRODUCT, 'vendor': settings.CEF_VENDOR, 'version': settings.CEF_VERSION, 'device_version': settings.CEF_DEVICE_VERSION} # The CEF library looks for some things in the env object like # REQUEST_METHOD and any REMOTE_ADDR stuff. Django not only doesn't send # half the stuff you'd expect, but it specifically doesn't implement # readline on its FakePayload object so these things fail. I have no idea # if that's outdated code in Django or not, but andym made this # <strike>awesome</strike> less crappy so the tests will actually pass. # In theory, the last part of this if() will never be hit except in the # test runner. Good luck with that. if isinstance(env, HttpRequest): r = env.META.copy() elif isinstance(env, dict): r = env else: r = {} # Drop kwargs into CEF config array, then log. c['environ'] = r c.update({ 'username': username, 'signature': signature, 'data': kwargs, }) cef_logger.log(severity, name, c). \n### Response: Wraps cef logging function so we don't need to pass in the config\n    dictionary every time. See bug 707060. ``env`` can be either a request\n    object or just the request.META dictionary..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private void configureServletContext(final ServletContext servletContext) { servletContext.addListener(jodd.servlet.RequestContextListener.class); if (decoraEnabled) { final FilterRegistration filter = servletContext.addFilter(\"decora\", jodd.decora.DecoraServletFilter.class); filter.addMappingForUrlPatterns(null, true, contextPath); } final FilterRegistration filter = servletContext.addFilter(\"madvoc\", jodd.madvoc.MadvocServletFilter.class); filter.addMappingForUrlPatterns(madvocDispatcherTypes, true, contextPath); } \n### Response:", "ground_truth": "Configures servlet context.", "predict": "Configures the servlet context. Implement the ` DecoraServletFilter` and `MadvocServletFilter` if they are enabled."}, {"ID": 886, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def do_studies(ocean_backend, enrich_backend, studies_args, retention_time=None): \"\"\"Execute studies related to a given enrich backend. If `retention_time` is not None, the study data is deleted based on the number of minutes declared in `retention_time`. :param ocean_backend: backend to access raw items :param enrich_backend: backend to access enriched items :param retention_time: maximum number of minutes wrt the current date to retain the data :param studies_args: list of studies to be executed \"\"\" for study in enrich_backend.studies: selected_studies = [(s['name'], s['params']) for s in studies_args if s['type'] == study.__name__] for (name, params) in selected_studies: logger.info(\"Starting study: %s, params %s\", name, str(params)) try: study(ocean_backend, enrich_backend, **params) except Exception as e: logger.error(\"Problem executing study %s, %s\", name, str(e)) raise e # identify studies which creates other indexes. If the study is onion, # it can be ignored since the index is recreated every week if name.startswith('enrich_onion'): continue index_params = [p for p in params if 'out_index' in p] for ip in index_params: index_name = params[ip] elastic = get_elastic(enrich_backend.elastic_url, index_name) elastic.delete_items(retention_time). \n### Response: Execute studies related to a given enrich backend. If `retention_time` is not None, the\n    study data is deleted based on the number of minutes declared in `retention_time`.\n\n    :param ocean_backend: backend to access raw items\n    :param enrich_backend: backend to access enriched items\n    :param retention_time: maximum number of minutes wrt the current date to retain the data\n    :param studies_args: list of studies to be executed.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public Object execute() { String methodName = targetMethodName(); Class returnType = returnType(); Object next = pathref.continueWith(this, methodName, returnType); return ProxyTarget.returnValue(next); } \n### Response:", "ground_truth": "Reads method name and appends it. Creates object for next call and\nreturns that value. If next object is unsupported, it will return null;", "predict": "This method is a Proxy method, which is used to execute a target method in a proxy object. The method returns the value of the target method, which is the return type of the proxy object. The method takes no arguments and returns an object of the return type of the target method. The method is used to execute a target method in a proxy object, which can be useful for implementing caching, proxying, and other features."}, {"ID": 887, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function delete($key) { $directory = $this->environment->getHooksDirectory(); $data_file = \"$directory/{$key}_processed.php\"; if (file_exists($data_file)) { unlink($data_file); } }. \n### Response: Deletes a data file, if it exists.\n\nDoes not give any indication if the deletion failed.\n\n@param string $key\nThe indentifier for the data, e.g. 'hooks'..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public FieldDescriptor[] getAllFieldDescriptors() { if (allFields == null) { FieldDescriptor[] allFields = new FieldDescriptor[fieldsMap.size()]; int index = 0; for (FieldDescriptor fieldDescriptor : fieldsMap.values()) { allFields[index] = fieldDescriptor; index++; } Arrays.sort(allFields, Comparator.comparing(fd -> fd.getField().getName())); this.allFields = allFields; } return allFields; } \n### Response:", "ground_truth": "Returns all fields of this collection. Returns empty array\nif no fields exist. Initialized lazy.", "predict": "This method returns an array of FieldDescriptor objects, which represent the fields in the class.\n\n@return FieldDescriptor[]\nThe array of FieldDescriptor objects representing the fields in the class.\n\nNote: This method does not perform any actual operations on the fields, such as setting or getting their values. It simply returns an array of objects."}, {"ID": 888, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public int getNumberOfPredecessors() { int numberOfPredecessors = 0; for (int i = 0; i < this.inputGates.length; ++i) { numberOfPredecessors += this.inputGates[i].getNumberOfEdges(); } return numberOfPredecessors; }. \n### Response: Returns the number of predecessors, i.e. the number of vertices\nwhich connect to this vertex.\n\n@return the number of predecessors.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @SuppressWarnings(\"unchecked\") @Override protected <T> BeanDefinition<T> createBeanDefinitionForRegistration( final String name, Class<T> type, final Scope scope, final WiringMode wiringMode, final Consumer<T> consumer) { if (proxetta != null) { final Class originalType = type; final ProxettaFactory builder = proxetta.proxy(); builder.setTarget(type); type = builder.define(); return new ProxettaBeanDefinition( name, type, scope, wiringMode, originalType, proxetta.getAspects(new ProxyAspect[0]), consumer); } return super.createBeanDefinitionForRegistration(name, type, scope, wiringMode, consumer); } \n### Response:", "ground_truth": "Applies proxetta on bean class before bean registration.", "predict": "This method creates a bean definition for the given registration method, using the Proxetta factory and aspect. It checks if the Proxetta library is present and if so, it creates a new instance of the Proxetta factory and sets the target class to the original class. If the Proxetta library is not present, it uses the default factory and aspect. The registration method is then overridden to return the bean definition.\n\n@return the bean definition for registration."}, {"ID": 889, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected function removeComposerAuthorInformation( InputInterface $input, OutputInterface $output ) { $command = $this->getApplication()->find( 'install:clean-composer' ); $output->write( '<comment>Cleaning <info>composer.json</info> ...</comment>' ); $command->run( new ArrayInput( [ 'command' => 'install:carbon-fields', ] ), new NullOutput() ); $output->writeln( ' <info>Done</info>' ); }. \n### Response: Remove author information from composer.json\n\n@param  InputInterface  $input\n@param  OutputInterface $output\n@return void.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static DbTransactionMode convertToDbMode(final JtxTransactionMode txMode) { final int isolation; switch (txMode.getIsolationLevel()) { case ISOLATION_DEFAULT: isolation = DbTransactionMode.ISOLATION_DEFAULT; break; case ISOLATION_NONE: isolation = DbTransactionMode.ISOLATION_NONE; break; case ISOLATION_READ_COMMITTED: isolation = DbTransactionMode.ISOLATION_READ_COMMITTED; break; case ISOLATION_READ_UNCOMMITTED: isolation = DbTransactionMode.ISOLATION_READ_UNCOMMITTED; break; case ISOLATION_REPEATABLE_READ: isolation = DbTransactionMode.ISOLATION_REPEATABLE_READ; break; case ISOLATION_SERIALIZABLE: isolation = DbTransactionMode.ISOLATION_SERIALIZABLE; break; default: throw new IllegalArgumentException(); } return new DbTransactionMode(isolation, txMode.isReadOnly()); } \n### Response:", "ground_truth": "Converter JTX transaction mode to DB transaction mode.", "predict": "Converts the JtxTransactionMode to DbTransactionMode.\n\n@param  JtxTransactionMode  $txMode\n@return DbTransactionMode\n@throws IllegalArgumentException."}, {"ID": 890, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def cmd_nmap_excluded(lowest, highest): \"\"\" Prints a random port that is not present on nmap-services file so is not scanned automatically by nmap. Useful for services like SSH or RDP, that are continuously scanned on their default ports. Example: \\b # habu.nmap.excluded 58567 \"\"\" if lowest >= highest: logging.error('lowest can not be greater or equal than highest') cfg = loadcfg() with (cfg['DATADIR'] / 'nmap-services').open() as nsf: nmap_services = nsf.read() unwanted = set() for line in nmap_services.strip().split('\\n'): if line.startswith('#'): continue service,port,_ = line.split('\\t', maxsplit=2) unwanted.add(int(port.split('/')[0])) choices = list(range(lowest,highest)) random.shuffle(choices) found = False for choice in choices: if choice not in unwanted: print(choice) found = True break if not found: logging.error('Can\\'t find a port number with the specified parameters'). \n### Response: Prints a random port that is not present on nmap-services file so is not scanned automatically by nmap.\n\n    Useful for services like SSH or RDP, that are continuously scanned on their default ports.\n\n    Example:\n\n    \\b\n    # habu.nmap.excluded\n    58567.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private Object readProperty(final Object source, final PropertyDescriptor propertyDescriptor) { Getter getter = propertyDescriptor.getGetter(declared); if (getter != null) { try { return getter.invokeGetter(source); } catch (Exception ex) { throw new JsonException(ex); } } return null; } \n### Response:", "ground_truth": "Reads property using property descriptor.", "predict": "This method reads a property from an object and returns its value if it is found, or null otherwise.\n\nIt uses the `getGetter` method to check if the property is present in the property descriptor, and if so, it calls the `invokeGetter` method to retrieve the value. If the value cannot be retrieved, it throws a `JsonException` with the message \\\"Can\\'t find a property with the specified name\\\"."}, {"ID": 891, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void saveReplyDestination(Message receivedMessage, TestContext context) { if (receivedMessage.getHeader(CitrusVertxMessageHeaders.VERTX_REPLY_ADDRESS) != null) { String correlationKeyName = endpointConfiguration.getCorrelator().getCorrelationKeyName(getName()); String correlationKey = endpointConfiguration.getCorrelator().getCorrelationKey(receivedMessage); correlationManager.saveCorrelationKey(correlationKeyName, correlationKey, context); correlationManager.store(correlationKey, receivedMessage.getHeader(CitrusVertxMessageHeaders.VERTX_REPLY_ADDRESS).toString()); } else { log.warn(\"Unable to retrieve reply address for message \\n\" + receivedMessage + \"\\n - no reply address found in message headers!\"); } }. \n### Response: Store the reply address either straight forward or with a given\nmessage correlation key.\n\n@param receivedMessage\n@param context.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public void putAll(final Map t) { for (Object o : t.entrySet()) { Map.Entry e = (Map.Entry) o; put(e.getKey(), e.getValue()); } } \n### Response:", "ground_truth": "Copies all of the mappings from the specified map to this one.\nThese mappings replace any mappings that this map had for any of the\nkeys currently in the specified Map.\n\n@param t Mappings to be stored in this map.", "predict": "This method overrides the default putAll() method of the Map interface to iterate over the entries in the specified Map and add each entry to the map.\n\n@param t\n\nThis method specifies the Map to be added to."}, {"ID": 892, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func NewJsonHandlerTables(lh datasource.FileLineHandler, tables []string) FileHandler { return &jsonHandlerTables{ FileHandler: &jsonHandler{lh}, tables: tables, } }. \n### Response: // NewJsonHandler creates a json file handler for paging new-line\n// delimited rows of json file.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public Buffer append(final Buffer buffer) { if (buffer.list.isEmpty()) { // nothing to append return buffer; } list.addAll(buffer.list); last = buffer.last; size += buffer.size; return this; } \n### Response:", "ground_truth": "Appends other buffer to this one.", "predict": "// appends the specified buffer to the end of the list.\n// If the list is empty, returns the buffer.\n// If the buffer is already the last element in the list, updates the\n// last and size properties of the buffer.\n// Returns the updated list and buffer."}, {"ID": 893, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private function _scanningTable($tables) { $this->_scanner->stdout('Extracting mesages from ' . $tables['table'] . '.' . implode(',', $tables['columns']), Console::FG_GREEN); $query = new \\yii\\db\\Query(); $data = $query->select($tables['columns']) ->from($tables['table']) ->createCommand(Yii::$app->{$tables['connection']}) ->queryAll(); $category = $this->_getCategory($tables); foreach ($data as $columns) { $columns = array_map('trim', $columns); foreach ($columns as $column) { $this->_scanner->addLanguageItem($category, $column); } } }. \n### Response: Scanning database table\n\n@param array $tables.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void writeTo(final Writer writer) throws IOException { for (Object o : list) { if (o instanceof FastByteBuffer) { FastByteBuffer fastByteBuffer = (FastByteBuffer) o; byte[] array = fastByteBuffer.toArray(); writer.write(new String(array, StringPool.ISO_8859_1)); } else if (o instanceof Uploadable) { Uploadable uploadable = (Uploadable) o; InputStream inputStream = uploadable.openInputStream(); try { StreamUtil.copy(inputStream, writer, StringPool.ISO_8859_1); } finally { StreamUtil.close(inputStream); } } } } \n### Response:", "ground_truth": "Writes content to the writer.", "predict": "Write to Writer\n\n@param Writer writer.\n\n"}, {"ID": 894, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def coerce_to_array(values, dtype, mask=None, copy=False): \"\"\" Coerce the input values array to numpy arrays with a mask Parameters ---------- values : 1D list-like dtype : integer dtype mask : boolean 1D array, optional copy : boolean, default False if True, copy the input Returns ------- tuple of (values, mask) \"\"\" # if values is integer numpy array, preserve it's dtype if dtype is None and hasattr(values, 'dtype'): if is_integer_dtype(values.dtype): dtype = values.dtype if dtype is not None: if (isinstance(dtype, str) and (dtype.startswith(\"Int\") or dtype.startswith(\"UInt\"))): # Avoid DeprecationWarning from NumPy about np.dtype(\"Int64\") # https://github.com/numpy/numpy/pull/7476 dtype = dtype.lower() if not issubclass(type(dtype), _IntegerDtype): try: dtype = _dtypes[str(np.dtype(dtype))] except KeyError: raise ValueError(\"invalid dtype specified {}\".format(dtype)) if isinstance(values, IntegerArray): values, mask = values._data, values._mask if dtype is not None: values = values.astype(dtype.numpy_dtype, copy=False) if copy: values = values.copy() mask = mask.copy() return values, mask values = np.array(values, copy=copy) if is_object_dtype(values): inferred_type = lib.infer_dtype(values, skipna=True) if inferred_type == 'empty': values = np.empty(len(values)) values.fill(np.nan) elif inferred_type not in ['floating', 'integer', 'mixed-integer', 'mixed-integer-float']: raise TypeError(\"{} cannot be converted to an IntegerDtype\".format( values.dtype)) elif not (is_integer_dtype(values) or is_float_dtype(values)): raise TypeError(\"{} cannot be converted to an IntegerDtype\".format( values.dtype)) if mask is None: mask = isna(values) else: assert len(mask) == len(values) if not values.ndim == 1: raise TypeError(\"values must be a 1D list-like\") if not mask.ndim == 1: raise TypeError(\"mask must be a 1D list-like\") # infer dtype if needed if dtype is None: dtype = np.dtype('int64') else: dtype = dtype.type # if we are float, let's make sure that we can # safely cast # we copy as need to coerce here if mask.any(): values = values.copy() values[mask] = 1 values = safe_cast(values, dtype, copy=False) else: values = safe_cast(values, dtype, copy=False) return values, mask. \n### Response: Coerce the input values array to numpy arrays with a mask\n\n    Parameters\n    ----------\n    values : 1D list-like\n    dtype : integer dtype\n    mask : boolean 1D array, optional\n    copy : boolean, default False\n        if True, copy the input\n\n    Returns\n    -------\n    tuple of (values, mask).\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void writeTo(final OutputStream out) throws IOException { for (Object o : list) { if (o instanceof FastByteBuffer) { FastByteBuffer fastByteBuffer = (FastByteBuffer) o; out.write(fastByteBuffer.toArray()); } else if (o instanceof Uploadable) { Uploadable uploadable = (Uploadable) o; InputStream inputStream = uploadable.openInputStream(); try { StreamUtil.copy(inputStream, out); } finally { StreamUtil.close(inputStream); } } } } \n### Response:", "ground_truth": "Writes content to the output stream.", "predict": "Writes the elements of the list to the output stream.\n\n    Parameters\n    ----------\n    out : OutputStream, optional\n\n    Returns\n    -------\n    void\n\n    Exceptions\n    -------\n    IOException if an exception occurs while writing the elements of the list."}, {"ID": 895, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (tx *Transaction) AddAddress(cidr string, args ...string) { tx.exec(append([]string{\"addr\", \"add\", cidr, \"dev\", tx.link}, args...)) }. \n### Response: // AddAddress adds an address to the interface..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void writeTo(final OutputStream out, final HttpProgressListener progressListener) throws IOException { // start final int size = size(); final int callbackSize = progressListener.callbackSize(size); int count = 0; // total count int step = 0; // step is offset in current chunk progressListener.transferred(count); // loop for (Object o : list) { if (o instanceof FastByteBuffer) { FastByteBuffer fastByteBuffer = (FastByteBuffer) o; byte[] bytes = fastByteBuffer.toArray(); int offset = 0; while (offset < bytes.length) { // calc the remaining sending chunk size int chunk = callbackSize - step; // check if this chunk size fits the bytes array if (offset + chunk > bytes.length) { chunk = bytes.length - offset; } // writes the chunk out.write(bytes, offset, chunk); offset += chunk; step += chunk; count += chunk; // listener if (step >= callbackSize) { progressListener.transferred(count); step -= callbackSize; } } } else if (o instanceof Uploadable) { Uploadable uploadable = (Uploadable) o; InputStream inputStream = uploadable.openInputStream(); int remaining = uploadable.getSize(); try { while (remaining > 0) { // calc the remaining sending chunk size int chunk = callbackSize - step; // check if this chunk size fits the remaining size if (chunk > remaining) { chunk = remaining; } // writes remaining chunk StreamUtil.copy(inputStream, out, chunk); remaining -= chunk; step += chunk; count += chunk; // listener if (step >= callbackSize) { progressListener.transferred(count); step -= callbackSize; } } } finally { StreamUtil.close(inputStream); } } } // end if (step != 0) { progressListener.transferred(count); } } \n### Response:", "ground_truth": "Writes content to the output stream, using progress listener to track the sending progress.", "predict": "// Writes data to the output stream, starting at the current offset and following the specified callback size."}, {"ID": 896, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public void start() { try { forceMkdir(downloadDir); for (File tempFile : listTempFile(this.downloadDir)) { deleteQuietly(tempFile); } } catch (IOException e) { throw new IllegalStateException(\"Fail to create the directory: \" + downloadDir, e); } }. \n### Response: Deletes the temporary files remaining from previous downloads.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public String getString(final String key) { CharSequence cs = (CharSequence) map.get(key); return cs == null ? null : cs.toString(); } \n### Response:", "ground_truth": "Returns the string value with the specified key.", "predict": "This method retrieves the value associated with the specified key from the map."}, {"ID": 897, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def send_message(self, message, room_id, **kwargs): \"\"\" Send a message to a given room \"\"\" return SendMessage(settings=self.settings, **kwargs).call( message=message, room_id=room_id, **kwargs ). \n### Response: Send a message to a given room.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public Integer getInteger(final String key) { Number number = (Number) map.get(key); if (number == null) { return null; } if (number instanceof Integer) { return (Integer) number; } return number.intValue(); } \n### Response:", "ground_truth": "returns the integer value with the specified key.", "predict": "This method retrieves an integer value associated with a given key from a map."}, {"ID": 898, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def _mine(self, load): ''' Store the mine data :param dict load: A payload received from a minion :rtype: bool :return: True if the data has been stored in the mine ''' load = self.__verify_load(load, ('id', 'data', 'tok')) if load is False: return {} return self.masterapi._mine(load, skip_verify=True). \n### Response: Store the mine data\n\n        :param dict load: A payload received from a minion\n\n        :rtype: bool\n        :return: True if the data has been stored in the mine.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public Long getLong(final String key) { Number number = (Number) map.get(key); if (number == null) { return null; } if (number instanceof Long) { return (Long) number; } return number.longValue(); } \n### Response:", "ground_truth": "Returns the long value with the specified key.", "predict": "Method-level comment:\n```\npublic Long getLong(final String key) {\n    Number number = (Number) map.get(key);\n    if (number == null) {\n        return null;\n    }\n    if (number instanceof Long) {\n        return (Long) number;\n    }\n    return number.longValue();\n}\n```"}, {"ID": 899, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def restore_geometry_state(self, gs): \"\"\"Restore the position of the main window and the docks. The gui widgets need to be recreated first. This function can be called in `on_show()`. \"\"\" if not gs: return if gs.get('geometry', None): self.restoreGeometry((gs['geometry'])) if gs.get('state', None): self.restoreState((gs['state'])). \n### Response: Restore the position of the main window and the docks.\n\n        The gui widgets need to be recreated first.\n\n        This function can be called in `on_show()`..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public Double getDouble(final String key) { Number number = (Number) map.get(key); if (number == null) { return null; } if (number instanceof Double) { return (Double) number; } return number.doubleValue(); } \n### Response:", "ground_truth": "Returns the double value with the specified key.", "predict": "This method retrieves the value of a key in a map.\n\n        It retrieves the value of the key using the `get()` method.\n\n        If the key is not found in the map, it returns `null`.\n\n        If the key is an instance of `Number`, it returns the corresponding `Number` object.\n\n        If the key is a string and the map contains a key with the same name, it returns the value associated with that key, which is a `Double` object.\n\n        Finally, it returns the `doubleValue()` method of the `Number` object."}, {"ID": 900, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function newCollector() { $collector = new Collector($this->getDispatcher()); // Pass services and settings to collector. $collector ->setCollections($this->_collections) ->setLogger($this->getLogger()) ->setQueue($this->getQueue()) ->setTimeout($this->_timeout) ->setLimit($this->_limit); return $collector; }. \n### Response: Returns a Collector object that the Indexer class injects itself as a\nservice into.\n\n@return Collector.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public Float getFloat(final String key) { Number number = (Number) map.get(key); if (number == null) { return null; } if (number instanceof Float) { return (Float) number; } return number.floatValue(); } \n### Response:", "ground_truth": "Returns the float value with the specified key.", "predict": "This method retrieves the value associated with the specified key from the map. It first checks if the key is present in the map using the `map.get(key)` method. If the key is not found, it returns `null`. If the key is found and it is an instance of `Float`, it returns the corresponding value as a `Float` object. Otherwise, it returns the `floatValue()` method of the `Number` object associated with the key, which returns the raw `float` value.\n\n@return Float."}, {"ID": 901, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected function loadProperties() { $methods = get_class_methods($this); foreach ($methods as $method) { preg_match(\"/load[a-zA-Z]+Property/\", $method, $matches); if (count($matches)) { $this->$method(); } } }. \n### Response: Run all defined property loader methods..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @SuppressWarnings(\"unchecked\") public <T> T getValue(final String key) { T val = (T) map.get(key); if (val instanceof Map) { return (T) new JsonObject((Map) val); } if (val instanceof List) { return (T) new JsonArray((List) val); } return val; } \n### Response:", "ground_truth": "Returns the value with the specified key, as an object.", "predict": "This method retrieves the value of a key in a map and returns it as a JsonArray or a JsonMap, depending on the type of the value. The method uses the @SuppressWarnings(\"unchecked\") annotation to avoid any unchecked operations."}, {"ID": 902, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function getValidator(array $rules = []): Validator { $parser = new RulesParser($this->factories); return new Validator($rules, $parser, $this->translator); }. \n### Response: Return a validator using the given rules.\n\n@param array $rules\n@return \\Ellipse\\Validation\\Validator.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public JsonObject put(final String key, final String value) { Objects.requireNonNull(key); map.put(key, value); return this; } \n### Response:", "ground_truth": "Puts a string into the JSON object with the specified key.", "predict": "This method adds a key-value pair to the \"map\" object.\n\n@param String key\n@param String value\n@return this."}, {"ID": 903, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function getParent() { JLog::add('JTree::getParent() is deprecated.', JLog::WARNING, 'deprecated'); $this->_current = &$this->_current->getParent(); }. \n### Response: Method to get the parent\n\n@return  void\n\n@since   11.1.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void useFolder(final String folderName) { closeFolderIfOpened(folder); try { this.folderName = folderName; this.folder = getService().getFolder(folderName); try { folder.open(Folder.READ_WRITE); } catch (final MailException ignore) { folder.open(Folder.READ_ONLY); } } catch (final MessagingException msgexc) { throw new MailException(\"Failed to connect to folder: \" + folderName, msgexc); } } \n### Response:", "ground_truth": "Opens new folder and closes previously opened folder.\n\n@param folderName Folder to open", "predict": "Method to use the provided folder.\n\n@param folderName The name of the folder.\n\n@return void\n\n@since 11.1."}, {"ID": 904, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static function find($mappingName) { if (!array_key_exists($mappingName, self::$container)) { throw new MappingClassNotFoundException($mappingName); } return self::$container[$mappingName]; }. \n### Response: Finds the mapper by its name\n\n@param $mappingName\n@throws Exception\\MappingClassNotFoundException\n@return bool.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: ReceivedEmail[] receiveMessages( final EmailFilter filter, final Flags flagsToSet, final Flags flagsToUnset, final boolean envelope, final Consumer<Message[]> processedMessageConsumer) { useAndOpenFolderIfNotSet(); final Message[] messages; try { if (filter == null) { messages = folder.getMessages(); } else { messages = folder.search(filter.getSearchTerm()); } if (messages.length == 0) { return ReceivedEmail.EMPTY_ARRAY; } if (envelope) { final FetchProfile fetchProfile = new FetchProfile(); fetchProfile.add(FetchProfile.Item.ENVELOPE); fetchProfile.add(FetchProfile.Item.FLAGS); folder.fetch(messages, fetchProfile); } // process messages final ReceivedEmail[] emails = new ReceivedEmail[messages.length]; for (int i = 0; i < messages.length; i++) { final Message msg = messages[i]; // we need to parse message BEFORE flags are set! emails[i] = new ReceivedEmail(msg, envelope, attachmentStorage); if (!EmailUtil.isEmptyFlags(flagsToSet)) { emails[i].flags(flagsToSet); msg.setFlags(flagsToSet, true); } if (!EmailUtil.isEmptyFlags(flagsToUnset)) { emails[i].flags().remove(flagsToUnset); msg.setFlags(flagsToUnset, false); } if (EmailUtil.isEmptyFlags(flagsToSet) && !emails[i].isSeen()) { msg.setFlag(Flags.Flag.SEEN, false); } } if (processedMessageConsumer != null) { processedMessageConsumer.accept(messages); } // if messages were marked to be deleted, we need to expunge the folder if (!EmailUtil.isEmptyFlags(flagsToSet)) { if (flagsToSet.contains(Flags.Flag.DELETED)) { folder.expunge(); } } return emails; } catch (final MessagingException msgexc) { throw new MailException(\"Failed to fetch messages\", msgexc); } } \n### Response:", "ground_truth": "The main email receiving method.", "predict": "This method receives messages from a folder and processes them. It uses the `Folder` class to open and manage the folder, and the `EmailFilter` and `Flags` classes to filter and set the message flags. It also uses the `FetchProfile` class to fetch the messages and their flags.\n\nThe method returns an array of `ReceivedEmail` objects, each of which represents a message that was received. If the folder is empty, the method returns an empty array. If the message flags are not set or if the message is seen, the method sets the flags and then processes the message. If the message flags are not set and the message has not been seen, the method expunges the folder.\n\nThe method throws a `MessagingException` if there is a problem fetching the messages, such as a network error or a missing dependency. It also throws a `MailException` if there is a problem processing the messages, such as a missing `Consumer` or a missing `Folder`.\n\n@param $folder\n@param $filter\n@param $flagsToSet\n@param $flagsToUnset\n@param $ envelope\n@param <Consumer<Message[]>> <Consumer<Message[]>> processedMessageConsumer\n@return ReceivedEmail[]\n@throws MessagingException\n@throws MailException."}, {"ID": 905, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function handle(EventListenerInterface $listener) { if (!$listener->getListeners()) { return; } $content = $this->request->getContent(); try { $options = Serializer::parse($content); } catch (\\InvalidArgumentException $e) { $options = []; } foreach ($listener->getListeners() as $namespace => $callable) { $event = new $namespace($options); if ($event->isValid()) { $listener->trigger($namespace, $event); break; } } }. \n### Response: handle event via request..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void updateEmailFlags(final ReceivedEmail receivedEmail) { useAndOpenFolderIfNotSet(); try { folder.setFlags(new int[] {receivedEmail.messageNumber()}, receivedEmail.flags(),true); } catch (MessagingException mex) { throw new MailException(\"Failed to fetch messages\", mex); } } \n### Response:", "ground_truth": "Updates the email flags on the server.", "predict": "updateEmailFlags method updates email flags in the specified folder."}, {"ID": 906, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (pl *Payload) EncodeBinary(enc *gob.Encoder) error { return enc.Encode(pl) }. \n### Response: // EncodeBinary writes the payload into its binary representation..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void closeFolderIfOpened(final Folder folder) { if (folder != null) { try { folder.close(true); } catch (final MessagingException ignore) { } } } \n### Response:", "ground_truth": "Closes folder if opened and expunge deleted messages.", "predict": "// Closes the specified folder if it was previously opened."}, {"ID": 907, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (light *Light) Dim(percent int) error { if percent > 0 && percent <= 100 { originalBri := light.State.Bri decreaseBri := float32(originalBri) * float32((float32(percent) / 100.0)) newBri := uint8(originalBri - uint8(decreaseBri)) if newBri < 0 { newBri = 0 } lightState := LightState{On: true, Bri: newBri} err := light.SetState(lightState) if err != nil { return err } return nil } return errors.New(\"Light.Dim percentage given is not between 1 and 100. \") }. \n### Response: // Dim lowers the brightness by a percent.\n// Note the required value is an integer, for example \"20\" is converted to 20%..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: DbQueryNamedParameter lookupNamedParameter(final String name) { DbQueryNamedParameter p = rootNP; while (p != null) { if (p.equalsName(name)) { return p; } p = p.next; } return null; } \n### Response:", "ground_truth": "Lookup for named parameter.", "predict": "// lookups a named parameter in the database query.\n// returns the first named parameter found or null if not found."}, {"ID": 908, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func Unpack(reader io.ReadSeeker, endianness Endianness, data interface{}, offsets ...int64) error { switch { // No offset to deal with case len(offsets) == 0: if err := binary.Read(reader, endianness, data); err != nil { return err } // An offset to deal with case len(offsets) == 1: if soughtOffset, err := reader.Seek(offsets[0], os.SEEK_SET); soughtOffset != offsets[0] || err != nil { switch { case err != nil: return err case soughtOffset != offsets[0]: return ErrSeeking default: if err := binary.Read(reader, endianness, data); err != nil { return err } } } // Error if more than one offset default: return ErrMultipleOffsets } return nil }. \n### Response: // Unpack data type from reader object. An optional offset can be specified..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected String alias(final String target) { return StringPool.LEFT_CHEV.concat(target).concat(StringPool.RIGHT_CHEV); } \n### Response:", "ground_truth": "Creates alias.", "predict": "// Return the left and right CHEV alias of the given target string. \n\nNote: The `StringPool` class is not defined in the provided code snippet, so this comment may not be accurate."}, {"ID": 909, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def waitForURL(url, max_seconds=None): \"\"\" Give it a URL. Keep trying to get a HEAD request from it until it works. If it doesn't work, wait a while and try again \"\"\" startTime = datetime.now() while True: response = None try: response = urllib2.urlopen(HEADREQUEST(url)) except urllib2.URLError: pass if response is not None and isinstance(response, urllib2.addinfourl): if response.getcode() == 200: # We're done, yay! return timeNow = datetime.now() timePassed = timeNow - startTime if max_seconds and max_seconds < timePassed.seconds: return print(\"Waiting on URL %s for %s so far\" % (url, timePassed)) time.sleep(30). \n### Response: Give it a URL.  Keep trying to get a HEAD request from it until it works.\n    If it doesn't work, wait a while and try again.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected boolean validateAction(final String... profiles) { prepareValidator(); vtor.useProfiles(profiles); vtor.validate(this); vtor.resetProfiles(); List<Violation> violations = vtor.getViolations(); return violations == null; } \n### Response:", "ground_truth": "Validates action. Profiles are reset after the invocation.\n@return true if validation is successful, otherwise returns false", "predict": "PrepareValidator();  Use profiles(profiles);  Validate(this);  ResetProfiles();  List<Violation> violations = vtor.getViolations();  return violations == null;"}, {"ID": 910, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Provides @io.janusproject.kernel.annotations.Kernel @Singleton public static AgentContext getKernel(ContextSpaceService contextService, @Named(JanusConfig.DEFAULT_CONTEXT_ID_NAME) UUID janusContextID, @Named(JanusConfig.DEFAULT_SPACE_ID_NAME) UUID defaultJanusSpaceId) { return contextService.createContext(janusContextID, defaultJanusSpaceId); }. \n### Response: Construct the root agent context within the Janus platform.\n\n@param contextService the service for managing the contexts.\n@param janusContextID the root context's id.\n@param defaultJanusSpaceId the id of the space within the root context.\n@return the root context..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void addViolation(final String name, final Object invalidValue) { prepareValidator(); vtor.addViolation(new Violation(name, this, invalidValue)); } \n### Response:", "ground_truth": "Adds action violation.", "predict": "Add a violation to the validator.\n\n@param name the name of the violation.\n@param invalidValue the value of the violation.\n@return void."}, {"ID": 911, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function info(options , callback){ options.url = 'https://'+options.host+':'+options.port+SUPERVISOR_PATH_INFO; options.key = ssl_files.readFileContent(options.keyFile); options.cert = ssl_files.readFileContent(options.certFile); options.ca = ssl_files.readCaChain(options.ca); request(options, function (error, response, body) { if (!error && response.statusCode == 200) { callback(null, JSON.parse(body)); }else{ callback(new Error(\"Error connecting to the supervisor:\"+error.toString()) , null); } }); }. \n### Response: Reads supervisor informations.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public RawData as(final String mimeOrExtension) { if (mimeOrExtension.contains(StringPool.SLASH)) { this.mimeType = mimeOrExtension; } else { this.mimeType = MimeTypes.getMimeType(mimeOrExtension); } return this; } \n### Response:", "ground_truth": "Defines mime type by providing real mime type or just extension!", "predict": "This method returns a RawData object with the specified mime type or if the mime type is not found, it returns the RawData object with the extension as the mimeType."}, {"ID": 912, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (p *Pollster) EnterVerifyDefault(valueName string, verify VerifyFunc, defVal string) (string, error) { var verifyDefault VerifyFunc if verify != nil { verifyDefault = func(s string) (ok bool, errmsg string, err error) { if s == \"\" { return true, \"\", nil } return verify(s) } } s, err := QueryVerify(\"Enter \"+valueName+\" [\"+defVal+\"]: \", p.scanner, p.out, p.errOut, verifyDefault) if err != nil { return \"\", errors.Trace(err) } if s == \"\" { return defVal, nil } return s, nil }. \n### Response: // EnterVerifyDefault requests that the user enter a value.  Values failing to\n// verify will be rejected with the error message returned by verify.  An empty\n// string will be accepted as the default value even if it would fail\n// verification..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public RawData downloadableAs(final String downloadFileName) { this.downloadFileName = downloadFileName; this.mimeType = MimeTypes.getMimeType(FileNameUtil.getExtension(downloadFileName)); return this; } \n### Response:", "ground_truth": "Defines download file name and mime type from the name extension.", "predict": "// DownloadableAs downloads the RawData object with the given downloadFileName.  It sets the mimeType to the MimeTypes.getMimeType() of the downloadFileName.  The RawData object is returned."}, {"ID": 913, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def start(self): \"\"\"Start the Consumers. :return: \"\"\" if not self.connection: self.create_connection() while True: try: channel = self.connection.channel() channel.queue.declare('simple_queue') channel.basic.consume(self, 'simple_queue', no_ack=False) channel.start_consuming() if not channel.consumer_tags: channel.close() except amqpstorm.AMQPError as why: LOGGER.exception(why) self.create_connection() except KeyboardInterrupt: self.connection.close() break. \n### Response: Start the Consumers.\n\n        :return:.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected T setTarget(final InputStream target) { assertTargetIsNotDefined(); targetInputStream = target; targetClass = null; targetClassName = null; return _this(); } \n### Response:", "ground_truth": "Defines class input stream as a target.", "predict": "Set the target input stream.\n\n        :assertTargetIsNotDefined:.\n        :targetInputStream: The target input stream.\n        :targetClass: The class to set as the target.\n        :targetClassName: The class name to set as the target.\n        :return: The current object."}, {"ID": 914, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (s *StanServer) processClientPublish(m *nats.Msg) { iopm := &ioPendingMsg{m: m} pm := &iopm.pm if pm.Unmarshal(m.Data) != nil { if s.processCtrlMsg(m) { return } // else we will report an error below... } // Make sure we have a guid and valid channel name. if pm.Guid == \"\" || !util.IsChannelNameValid(pm.Subject, false) { s.log.Errorf(\"Received invalid client publish message %v\", pm) s.sendPublishErr(m.Reply, pm.Guid, ErrInvalidPubReq) return } if s.debug { s.log.Tracef(\"[Client:%s] Received message from publisher subj=%s guid=%s\", pm.ClientID, pm.Subject, pm.Guid) } // Check if the client is valid. We do this after the clustered check so // that only the leader performs this check. valid := false if s.partitions != nil { // In partitioning mode it is possible that we get there // before the connect request is processed. If so, make sure we wait // for conn request to be processed first. Check clientCheckTimeout // doc for details. valid = s.clients.isValidWithTimeout(pm.ClientID, pm.ConnID, clientCheckTimeout) } else { valid = s.clients.isValid(pm.ClientID, pm.ConnID) } if !valid { s.log.Errorf(\"Received invalid client publish message %v\", pm) s.sendPublishErr(m.Reply, pm.Guid, ErrInvalidPubReq) return } s.ioChannel <- iopm }. \n### Response: // processClientPublish process inbound messages from clients..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected T setTarget(final String targetName) { assertTargetIsNotDefined(); try { targetInputStream = ClassLoaderUtil.getClassAsStream(targetName); if (targetInputStream == null) { throw new ProxettaException(\"Target class not found: \" + targetName); } targetClassName = targetName; targetClass = null; } catch (IOException ioex) { StreamUtil.close(targetInputStream); throw new ProxettaException(\"Unable to get stream class name: \" + targetName, ioex); } return _this(); } \n### Response:", "ground_truth": "Defines class name as a target.\nClass will not be loaded by classloader!", "predict": "// Set the target class for this object.."}, {"ID": 915, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static <T1, T2, T3, R> TriFunction<T1, T2, T3, R> spy3rd(TriFunction<T1, T2, T3, R> function, Box<T3> param3) { return spy(function, Box.<R>empty(), Box.<T1>empty(), Box.<T2>empty(), param3); }. \n### Response: Proxies a ternary function spying for third parameter.\n\n@param  the function result type\n@param  the function first parameter type\n@param  the function second parameter type\n@param  the function third parameter type\n@param function the function that will be spied\n@param param3 a box that will be containing the third spied parameter\n@return the proxied function.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public T setTarget(final Class target) { assertTargetIsNotDefined(); try { targetInputStream = ClassLoaderUtil.getClassAsStream(target); if (targetInputStream == null) { throw new ProxettaException(\"Target class not found: \" + target.getName()); } targetClass = target; targetClassName = target.getName(); } catch (IOException ioex) { StreamUtil.close(targetInputStream); throw new ProxettaException(\"Unable to stream class: \" + target.getName(), ioex); } return _this(); } \n### Response:", "ground_truth": "Defines class as a target.", "predict": "This method sets the target class of a proxy object.\n\n@param  the target class\n@return the proxy object.\n\nNote: This method is used to set the target class of a proxy object, which is then used to spy on methods and fields of the target object. The target class must be defined and can be any class, but it must not be the same class as the target object. The method uses the getClassAsStream() method from the ProxettaUtil class to stream the target class into a byte stream, and then uses the StreamUtil class to close the stream. If the target class cannot be found or is not streamable, a ProxettaException is thrown."}, {"ID": 916, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func Fatalf(format string, args ...interface{}) { logMux.RLock() defer logMux.RUnlock() info := retrieveCallInfo().verboseFormat() msg := fmt.Sprintf(format, args...) logBackend.Fatal(info, msg) logFatalExiter() }. \n### Response: // Fatalf logs a message independent of any level. After\n// logging the message the functions calls the fatal exiter\n// function, which by default means exiting the application\n// with error code -1..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void process() { if (targetInputStream == null) { throw new ProxettaException(\"Target missing: \" + targetClassName); } // create class reader final ClassReader classReader; try { classReader = new ClassReader(targetInputStream); } catch (IOException ioex) { throw new ProxettaException(\"Error reading class input stream\", ioex); } // reads information final TargetClassInfoReader targetClassInfoReader = new TargetClassInfoReader(proxetta.getClassLoader()); classReader.accept(targetClassInfoReader, 0); this.destClassWriter = new ClassWriter(ClassWriter.COMPUTE_MAXS | ClassWriter.COMPUTE_FRAMES); // create proxy if (log.isDebugEnabled()) { log.debug(\"processing: \" + classReader.getClassName()); } WorkData wd = process(classReader, targetClassInfoReader); // store important data proxyApplied = wd.proxyApplied; proxyClassName = wd.thisReference.replace('/', '.'); } \n### Response:", "ground_truth": "Reads the target and creates destination class.", "predict": "// This method performs the actual processing of the target class.\n// It creates a ClassReader and a TargetClassInfoReader, and then\n// reads the information about the target class.\n// It also creates a ClassWriter and sets its properties.\n// If log.isDebugEnabled() is true, it logs a debug message about\n// the processing of the target class.\n// The WorkData object is created by calling the process()\n// method with a ClassReader and a TargetClassInfoReader.\n// The proxyApplied and proxyClassName properties are set by\n// calling the process() method with the WorkData object."}, {"ID": 917, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func RunWithManager(r http.Handler, m *autocert.Manager) error { s := &http.Server{ Addr: \":https\", TLSConfig: m.TLSConfig(), Handler: r, } go http.ListenAndServe(\":http\", m.HTTPHandler(nil)) return s.ListenAndServeTLS(\"\", \"\") }. \n### Response: // RunWithManager support custom autocert manager.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public byte[] create() { process(); byte[] result = toByteArray(); dumpClassInDebugFolder(result); if ((!proxetta.isForced()) && (!isProxyApplied())) { if (log.isDebugEnabled()) { log.debug(\"Proxy not applied: \" + StringUtil.toSafeString(targetClassName)); } return null; } if (log.isDebugEnabled()) { log.debug(\"Proxy created \" + StringUtil.toSafeString(targetClassName)); } return result; } \n### Response:", "ground_truth": "Returns byte array of created class.", "predict": "// Create a proxy class instance."}, {"ID": 918, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function routeParams($params = '') { if (!empty($params)) { // Set the property if (is_a($params, 'stdClass')) { $this->routeParams = $params; } else { return false; } } else { // Get the property return $this->routeParams; } }. \n### Response: Get or set the routeParams property.\n\n@param object $params\n@return void|object|boolean.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public Class define() { process(); if ((!proxetta.isForced()) && (!isProxyApplied())) { if (log.isDebugEnabled()) { log.debug(\"Proxy not applied: \" + StringUtil.toSafeString(targetClassName)); } if (targetClass != null) { return targetClass; } if (targetClassName != null) { try { return ClassLoaderUtil.loadClass(targetClassName); } catch (ClassNotFoundException cnfex) { throw new ProxettaException(cnfex); } } } if (log.isDebugEnabled()) { log.debug(\"Proxy created: \" + StringUtil.toSafeString(targetClassName)); } try { ClassLoader classLoader = proxetta.getClassLoader(); if (classLoader == null) { classLoader = ClassLoaderUtil.getDefaultClassLoader(); if ((classLoader == null) && (targetClass != null)) { classLoader = targetClass.getClassLoader(); } } final byte[] bytes = toByteArray(); dumpClassInDebugFolder(bytes); return DefineClass.of(getProxyClassName(), bytes, classLoader); } catch (Exception ex) { throw new ProxettaException(\"Class definition failed\", ex); } } \n### Response:", "ground_truth": "Defines class.", "predict": "This method defines a class that is the proxy for the current request. It processes the request and if the request is not a regular HTTP request, it creates a proxy class. The method also logs some debug information and tries to load the proxy class using the default ClassLoader or the ClassLoader of the target class. Finally, it returns the proxy class definition using the DefineClass.of() method and throws an exception if the definition fails.\n\n@param targetClassName The class to define as a proxy.\n@return The proxy class definition.\n@throws ProxettaException The class definition failed."}, {"ID": 919, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func NewLexer(src io.Reader, fName string) *Lexer { file := t.NewFileSet().AddFile(fName, -1, 1<<31-3) lx, err := lex.New(file, bufio.NewReader(src), lex.RuneClass(Rune2Class)) if err != nil { panic(err) } return &Lexer{ Lexer: lx, StateStack: []int{0}, PhpDocComment: \"\", FreeFloating: nil, heredocLabel: \"\", tokenBytesBuf: &bytes.Buffer{}, TokenPool: &TokenPool{}, } }. \n### Response: // NewLexer the Lexer constructor.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public Object newInstance() { Class type = define(); try { return ClassUtil.newInstance(type); } catch (Exception ex) { throw new ProxettaException(\"Invalid Proxetta class\", ex); } } \n### Response:", "ground_truth": "Creates new instance of created class.\nAssumes default no-arg constructor.", "predict": "// newInstance() the newInstance method of the Object class."}, {"ID": 920, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function fopen() { return fopen( self::WNAME . '://' . spl_object_hash($this), 'rb', false, stream_context_create(array( self::WNAME => array( 'string' => $this ) )) ); }. \n### Response: Return a stream handle to this string stream.\n\n@return resource.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void dumpClassInDebugFolder(final byte[] bytes) { File debugFolder = proxetta.getDebugFolder(); if (debugFolder == null) { return; } if (!debugFolder.exists() || !debugFolder.isDirectory()) { log.warn(\"Invalid debug folder: \" + debugFolder); } String fileName = proxyClassName; if (fileName == null) { fileName = \"proxetta-\" + System.currentTimeMillis(); } fileName += \".class\"; File file = new File(debugFolder, fileName); try { FileUtil.writeBytes(file, bytes); } catch (IOException ioex) { log.warn(\"Error writing class as \" + file, ioex); } } \n### Response:", "ground_truth": "Writes created class content to output folder for debugging purposes.", "predict": "This method dumps the contents of a class file in the specified debug folder of the proxetta application. It first checks if the debug folder exists or is a directory, and if not, it logs a warning message. Then, it retrieves the name of the proxy class, if it is not provided, it generates it using the current time. Finally, it creates a new file in the debug folder with the name of the proxy class, and writes the bytes of the class file to it using the FileUtil class. If there is an error writing the class file, it logs a warning message.\n\n@param bytes The bytes to write to the file.\n@return void."}, {"ID": 921, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public boolean abortMC() { boolean trace = TraceComponent.isAnyTracingEnabled(); if (!(mc instanceof WSManagedConnection)) { if (trace && tc.isDebugEnabled()) Tr.debug(tc, \"abortMC\", \"Skipping MC abort because MC is not an instance of WSManagedConnection\"); return false; } if (trace && tc.isEntryEnabled()) Tr.entry(tc, \"abortMC\"); WSManagedConnection wsmc = (WSManagedConnection) mc; try { do_not_reuse_mcw = true; wsmc.abort(pm.connectorSvc.execSvcRef.getServiceWithException()); aborted = true; releaseToPoolManager(); // Get the connection out of the pool } catch (SQLFeatureNotSupportedException e) { if (trace && tc.isDebugEnabled()) Tr.debug(tc, \"JDBC feature or driver does not support aborting connections.\"); } catch (Exception e) { com.ibm.ws.ffdc.FFDCFilter.processException(e, \"com.ibm.ejs.j2c.MCWrapper.abortMC\", \"3765\", this); if (trace && tc.isDebugEnabled()) Tr.debug(this, tc, \"Caught exception aborting connection or releasing aborted connection to the pool manager.\"); } if (trace && tc.isEntryEnabled()) Tr.exit(tc, \"abortMC\", aborted); return aborted; }. \n### Response: Abort the manage connection associated with this MCWrapper.\n\n@return whether or not the connection was successfully aborted..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public T from(final String personalName, final String from) { return from(new EmailAddress(personalName, from)); } \n### Response:", "ground_truth": "Sets the FROM address by providing personal name and address.\n\n@param personalName personal name.\n@param from         email address.\n@return this\n@see #from(EmailAddress)", "predict": "This method returns a T object by sending an email using the specified email address.\n\n@param personalName the email address of the recipient.\n@param from the email address of the sender.\n@return the T object sent in the email."}, {"ID": 922, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function postDelete(ConnectionInterface $con = null) { parent::postDelete($con); $this->dispatchEvent(TheliaEvents::AFTER_DELETEADDRESS, new AddressEvent($this)); }. \n### Response: Code to be run after deleting the object in database\n@param ConnectionInterface $con.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public T to(final EmailAddress to) { this.to = ArraysUtil.append(this.to, to); return _this(); } \n### Response:", "ground_truth": "Appends TO address.\n\n@param to {@link EmailAddress} to add.\n@return this", "predict": "Method to add an email address to the to field of an object.\n\n"}, {"ID": 923, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static function pull($key) { self::setPrefix(); $value = $_SESSION[self::$_sessionPrefix . $key]; unset($_SESSION[self::$_sessionPrefix . $key]); return $value; }. \n### Response: Extract item from session then delete from the session, finally return the item\n@param  string $key item to extract\n@return string      return item.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public T to(final String personalName, final String to) { return to(new EmailAddress(personalName, to)); } \n### Response:", "ground_truth": "Appends TO address by personal name and email address.\n\n@param personalName personal name.\n@param to           email address.\n@return this\n@see #to(EmailAddress)", "predict": "This method returns a new instance of the T class and calls the to() method with two parameters, personalName and to. The to() method takes a EmailAddress object as its first parameter and returns it."}, {"ID": 924, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def fetch_check(self, master): '''check for missing parameters periodically''' if self.param_period.trigger(): if master is None: return if len(self.mav_param_set) == 0: master.param_fetch_all() elif self.mav_param_count != 0 and len(self.mav_param_set) != self.mav_param_count: if master.time_since('PARAM_VALUE') >= 1: diff = set(range(self.mav_param_count)).difference(self.mav_param_set) count = 0 while len(diff) > 0 and count < 10: idx = diff.pop() master.param_fetch_one(idx) count += 1. \n### Response: check for missing parameters periodically.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public T replyTo(final EmailAddress... replyTo) { this.replyTo = ArraysUtil.join(this.replyTo, valueOrEmptyArray(replyTo)); return _this(); } \n### Response:", "ground_truth": "Appends REPLY-TO addresses.\n\n@param replyTo vararg of {@link EmailAddress}es to set.\n@return this", "predict": "public T replyTo(final EmailAddress... replyTo) {\n```\n* This method replies to the specified email addresses using the specified replyTo array.\n* It uses the ArraysUtil class to join the replyTo array with a separator string.\n* The valueOrEmptyArray method is used to check if the replyTo array is empty.\n* This method returns the same instance of T that was created when this method was called.\n```\n}\n```"}, {"ID": 925, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function writeXML( \\XMLWriter $w, string $elementName = 'ImageSizeReducer' ) { $w->startElement( $elementName ); $this->writeXMLAttributes( $w ); $w->endElement(); }. \n### Response: Writes all instance options to an XML element.\n\n@param \\XMLWriter $w\n@param string $elementName.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public T cc(final EmailAddress... ccs) { this.cc = ArraysUtil.join(this.cc, valueOrEmptyArray(ccs)); return _this(); } \n### Response:", "ground_truth": "Appends CC addresses.\n\n@param ccs vararg of {@link EmailAddress}es to set.\n@return this", "predict": "This method creates and returns a new T object, which represents the EmailAddresses in the cc array.\n\n@param EmailAddress... ccs\n@return T\n\n"}, {"ID": 926, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void tryDeleteEmptyParentZNodes() throws Exception { // try to delete the parent znodes if they are empty String remainingPath = getParentPath(getNormalizedPath(client.getNamespace())); final CuratorFramework nonNamespaceClient = client.usingNamespace(null); while (!isRootPath(remainingPath)) { try { nonNamespaceClient.delete().forPath(remainingPath); } catch (KeeperException.NotEmptyException ignored) { // We can only delete empty znodes break; } remainingPath = getParentPath(remainingPath); } }. \n### Response: Tries to delete empty parent znodes.\n\nIMPORTANT: This method can be removed once all supported ZooKeeper versions\nsupport the container {@link org.apache.zookeeper.CreateMode}.\n\n@throws Exception if the deletion fails for other reason than {@link KeeperException.NotEmptyException}.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public T textMessage(final String text, final String encoding) { return message(new EmailMessage(text, MimeTypes.MIME_TEXT_PLAIN, encoding)); } \n### Response:", "ground_truth": "Adds plain message text.\n\n@param text     The text to add as a {@link String}.\n@param encoding The encoding as a {@link String}.\n@return this\n@see #message(EmailMessage)", "predict": "Returns the text message with the specified text and encoding.\n\nIMPORTANT: This method relies on the implementation of the EmailMessage class.\n\n@return the text message with the specified text and encoding.\n\n@throws EmailMessageException if the EmailMessage constructor fails to create an instance."}, {"ID": 927, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public BoxRequestsBookmark.DeleteTrashedBookmark getDeleteTrashedBookmarkRequest(String id) { BoxRequestsBookmark.DeleteTrashedBookmark request = new BoxRequestsBookmark.DeleteTrashedBookmark(id, getTrashedBookmarkUrl(id), mSession); return request; }. \n### Response: Gets a request that permanently deletes a bookmark from the trash\n\n@param id        id of bookmark to delete from the trash\n@return      request to permanently delete a bookmark from the trash.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public T htmlMessage(final String html, final String encoding) { return message(new EmailMessage(html, MimeTypes.MIME_TEXT_HTML, encoding)); } \n### Response:", "ground_truth": "Adds HTML message.\n\n@param html     The HTML to add as a {@link String}.\n@param encoding The encoding as a {@link String}.\n@return this\n@see #message(EmailMessage)", "predict": "This method returns a T object containing an HTML message.\n\n@param html        html content to be sent in the email message\n@param encoding    encoding of the email message\n@return      T object containing an HTML message.\n\nThis method creates an EmailMessage object using the given HTML content and MIME type. It then returns the T object containing the HTML message."}, {"ID": 928, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public HttpClientBuilder timeouts(int connectionTimeout, int soTimeout, long connectionManagerTimeout) { this.connectionTimeout = connectionTimeout; this.soTimeout = soTimeout; this.connectionManagerTimeout = connectionManagerTimeout; return this; }. \n### Response: Configures timeouts of the HttpClient being built.\n\n@param connectionTimeout         time in millis for connection to\nbe established\n@param soTimeout                 SO timeout (millis)\n@param connectionManagerTimeout  time in millis for connection to\nbe obtained from connection manager\n@return this.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public T header(final String name, final String value) { headers.put(name, value); return _this(); } \n### Response:", "ground_truth": "Sets header value.\n\n@param name  The name of the header.\n@param value The value of the header.\n@return this", "predict": "This method sets a header in the HttpClient being built.\n\n@param name            the header name\n@param value           the header value\n@return this.\n\nNote: This method is part of the HttpClientBuilder class, which is used to build HttpClient instances. It is used to set the header of the HttpClient."}, {"ID": 929, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def get_formula_string(string) #:nodoc: ruby_19 { string = convert_to_ascii_if_ascii(string) } record = 0x0207 # Record identifier length = 0x00 # Bytes to follow # string # Formula string. strlen = string.bytesize # Length of the formula string (chars). encoding = 0 # String encoding. # Handle utf8 strings. if is_utf8?(string) string = utf8_to_16be(string) encoding = 1 end length = 0x03 + string.bytesize # Length of the record data header = [record, length].pack(\"vv\") data = [strlen, encoding].pack(\"vC\") header + data + string end. \n### Response: Pack the string value when a formula evaluates to a string. The value cannot\n be calculated by the module and thus must be supplied by the user..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String get(final String name, final String defaultValue) { Objects.requireNonNull(name); String value = null; try { if (System.getSecurityManager() == null) { value = System.getProperty(name); } else { value = AccessController.doPrivileged((PrivilegedAction<String>) () -> System.getProperty(name)); } } catch (Exception ignore) { } if (value == null) { return defaultValue; } return value; } \n### Response:", "ground_truth": "Returns system property. If key is not available, returns the default value.", "predict": "This method retrieves a value from a specified property using the system security manager or aPrivilegedAction. If the property is not found or cannot be retrieved, it returns the default value."}, {"ID": 930, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def _remove_layer_and_reconnect(self, layer): \"\"\" Remove the layer, and reconnect each of its predecessor to each of its successor \"\"\" successors = self.get_successors(layer) predecessors = self.get_predecessors(layer) # remove layer's edges for succ in successors: self._remove_edge(layer, succ) for pred in predecessors: self._remove_edge(pred, layer) # connect predecessors and successors for pred in predecessors: for succ in successors: self._add_edge(pred, succ) # remove layer in the data structures self.layer_list.remove(layer) self.keras_layer_map.pop(layer) # re-assign input and output layers if layer happens to be an # input / output layer if layer in self.input_layers: idx = self.input_layers.index(layer) self.input_layers.pop(idx) for pred in predecessors: self.input_layers.insert(idx, pred) idx += 1 if layer in self.output_layers: idx = self.output_layers.index(layer) self.output_layers.pop(idx) for succ in successors: self.output_layers.insert(idx, succ) idx += 1. \n### Response: Remove the layer, and reconnect each of its predecessor to each of\n        its successor.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static boolean getBoolean(final String name, final boolean defaultValue) { String value = get(name); if (value == null) { return defaultValue; } value = value.trim().toLowerCase(); switch (value) { case \"true\" : case \"yes\" : case \"1\" : case \"on\" : return true; case \"false\": case \"no\" : case \"0\" : case \"off\" : return false; default: return defaultValue; } } \n### Response:", "ground_truth": "Returns system property as boolean.", "predict": "This method returns the boolean value associated with the specified name. It first retrieves the value from the specified name using the `get()` method. If the value is null, it returns the default value (defaultValue). The value is then trimmed andtoLowerCaseed to ensure it is in the correct format for the switch statement. Finally, the method returns the boolean value based on the format of the value."}, {"ID": 931, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public boolean containsAll(List<String> containWith) { return containAll(checkNotNull(containWith).toArray(new String[containWith.size()])); }. \n### Response: Checks if delegate string contains all string in the given string list\n\n@param containWith\n@return.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static long getInt(final String name, final int defaultValue) { String value = get(name); if (value == null) { return defaultValue; } value = value.trim().toLowerCase(); try { return Integer.parseInt(value); } catch (NumberFormatException nfex) { return defaultValue; } } \n### Response:", "ground_truth": "Returns system property as an int.", "predict": "This method returns the long value of the specified name if it is found in the specified value, or the default value (defaultValue) if it is not found.\n\n@param name\n@return.\n\n"}, {"ID": 932, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function dispatch(RequestInterface $request) { if (!$request->getParam('section')) { $request->setParam('section', $this->configStructure->getFirstSection()->getId()); } return parent::dispatch($request); }. \n### Response: Check if current section is found and is allowed\n\n@param RequestInterface $request The current request\n\n@return \\Magento\\Framework\\App\\ResponseInterface.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static long getLong(final String name, final long defaultValue) { String value = get(name); if (value == null) { return defaultValue; } value = value.trim().toLowerCase(); try { return Long.parseLong(value); } catch (NumberFormatException nfex) { return defaultValue; } } \n### Response:", "ground_truth": "Returns system property as a long.", "predict": "This is a static method in the Magento\\Framework\\App\\ObjectManager class that retrieves a long value from a specified name.\n\nThe method first calls the static method `get(String name)` to retrieve the value from the specified name. If the value is null, the method returns the default value `defaultValue`. Otherwise, the methodtrims andtoLowerCases the value and attempts to parse it as a long using the `Long.parseLong()` method. If the parsing fails, the method returns the default value.\n\nThe method is used to retrieve a long value from the specified name in the Magento system."}, {"ID": 933, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def modify_host(name, mod_request) begin @host.modify_host(name, mod_request) rescue => ex Util.log_exception(ex, caller_locations(1, 1)[0].label) raise ex end end. \n### Response: Modifies an existing Host.\n\n ==== Attributes\n\n * name - Name of the host.\n      type name: String\n * mod_request - Objects for host modification request.\n      type mod_request: Hash\n        mod_request = {\n            'newName'=> 'myNewName',         # New name of the host\n            'pathOperation'=> 1,             # Refer Hpe3parSdk::HostEditOperation for complete enumeration\n            'FCWWNs'=> [],                   # One or more WWN to set for the host.\n            'iSCSINames'=> [],               # One or more iSCSI names to set for the host.\n            'forcePathRemoval'=> false,      # If True, remove SSN(s) or\n                                             # iSCSI(s) even if there are\n                                             # VLUNs exported to host\n            'persona'=> 1,                   # Refer Hpe3parSdk::HostPersona for complete enumeration.\n            'descriptors'=>\n                {'location'=> 'earth',       # The host's location\n                 'IPAddr'=> '10.10.10.10',   # The host's IP address\n                 'os'=> 'linux',             # The operating system running on the host.\n                 'model'=> 'ex',             # The host's model\n                 'contact'=> 'Smith',        # The host's owner and contact\n                 'comment'=> 'Joes box'}     # Additional host information\n            'chapOperation'=> 1,             # Refer Hpe3parSdk::HostEditOperation for complete enumeration\n            'chapOperationMode'=> TARGET,    # Refer Hpe3parSdk::ChapOperationMode for complete enumeration\n            'chapName'=> 'MyChapName',       # The chap name\n            'chapSecret'=> 'xyz',            # The chap secret for the host or the target\n            'chapSecretHex'=> false,         # If True, the chapSecret is treated as Hex.\n            'chapRemoveTargetOnly'=> true    # If True, then remove target chap only\n        }\n\n ==== Raises\n\n * Hpe3parSdk::HTTPBadRequest\n        - INV_INPUT - Missing host name.\n * Hpe3parSdk::HTTPBadRequest\n        - INV_INPUT_PARAM_CONFLICT - Both iSCSINames & FCWWNs are specified. (lot of other possibilities).\n * Hpe3parSdk::HTTPBadRequest\n        - INV_INPUT_ONE_REQUIRED - iSCSINames or FCWwns missing.\n * Hpe3parSdk::HTTPBadRequest\n        - INV_INPUT_ONE_REQUIRED - No path operation specified.\n * Hpe3parSdk::HTTPBadRequest\n        - INV_INPUT_BAD_ENUM_VALUE - Invalid enum value.\n * Hpe3parSdk::HTTPBadRequest\n        - INV_INPUT_MISSING_REQUIRED - Required fields missing.\n * Hpe3parSdk::HTTPBadRequest\n        - INV_INPUT_EXCEEDS_LENGTH - Host descriptor argument length, new host name, or iSCSI name is too long.\n * Hpe3parSdk::HTTPBadRequest\n        - INV_INPUT_ILLEGAL_CHAR - Error parsing host or iSCSI name.\n * Hpe3parSdk::HTTPConflict\n        - EXISTENT_HOST - New host name is already used.\n * Hpe3parSdk::HTTPNotFound\n        - NON_EXISTENT_HOST - Host to be modified does not exist.\n * Hpe3parSdk::HTTPBadRequest\n        - INV_INPUT_TOO_MANY_WWN_OR_iSCSI - More than 1024 WWNs or iSCSI names are specified.\n * Hpe3parSdk::HTTPBadRequest\n        - INV_INPUT_WRONG_TYPE - Input value is of the wrong type.\n * Hpe3parSdk::HTTPConflict\n        - EXISTENT_PATH - WWN or iSCSI name is already claimed by other host.\n * Hpe3parSdk::HTTPBadRequest\n        - INV_INPUT_BAD_LENGTH - CHAP hex secret length is not 16 bytes, or chap ASCII secret length is not 12 to 16 characters.\n * Hpe3parSdk::HTTPNotFound\n        - NO_INITIATOR_CHAP - Setting target CHAP without initiator CHAP.\n * Hpe3parSdk::HTTPNotFound\n        - NON_EXISTENT_CHAP - Remove non-existing CHAP.\n * Hpe3parSdk::HTTPConflict\n        - NON_UNIQUE_CHAP_SECRET - CHAP secret is not unique.\n * Hpe3parSdk::HTTPConflict\n        - EXPORTED_VLUN - Setting persona with active export; remove a host path on an active export.\n * Hpe3parSdk::HTTPBadRequest\n        - NON_EXISTENT_PATH - Remove a non-existing path.\n * Hpe3parSdk::HTTPConflict\n        - LUN_HOSTPERSONA_CONFLICT - LUN number and persona capability conflict.\n * Hpe3parSdk::HTTPBadRequest\n        - INV_INPUT_DUP_PATH - Duplicate path specified..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: MethodParameter[] getResolvedParameters() { if (paramExtractor == null) { return MethodParameter.EMPTY_ARRAY; } if (!paramExtractor.debugInfoPresent) { throw new ParamoException(\"Parameter names not available for method: \" + declaringClass.getName() + '#' + methodName); } return paramExtractor.getMethodParameters(); } \n### Response:", "ground_truth": "Returns method parameters once when method is parsed.\nIf method has no parameters, an empty array is returned.", "predict": "### Method-level comment for the `modify_host` method\n```\ndef modify_host(name, mod_request)\n```"}, {"ID": 934, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function getChecksum($data) { $data['salt'] = $this->getEsiKey(); ksort($data); return md5(json_encode($data)); }. \n### Response: Returns checksum for supplied data array\n\n@param array $data\n@return string.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected int serializeKeyValue(final JsonContext jsonContext, final Path currentPath, final Object key, final Object value, int count) { if ((value == null) && jsonContext.isExcludeNulls()) { return count; } if (key != null) { currentPath.push(key.toString()); } else { currentPath.push(StringPool.NULL); } // check if we should include the field boolean include = true; if (value != null) { // + all collections are not serialized by default include = jsonContext.matchIgnoredPropertyTypes(value.getClass(), false, include); // + path queries: excludes/includes include = jsonContext.matchPathToQueries(include); } // done if (!include) { currentPath.pop(); return count; } if (key == null) { jsonContext.pushName(null, count > 0); } else { jsonContext.pushName(key.toString(), count > 0); } jsonContext.serialize(value); if (jsonContext.isNamePopped()) { count++; } currentPath.pop(); return count; } \n### Response:", "ground_truth": "Serializes key and a value.", "predict": "Serializes key-value pairs in the specified JSON format, including null values and exclude fields.\n\n@param JsonContext jsonContext\n@param Path currentPath\n@param Object key\n@param Object value\n@param int count\n@return int."}, {"ID": 935, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def from_dict(cls, d): \"\"\" Returns CompleteDos object from dict representation. \"\"\" tdos = PhononDos.from_dict(d) struct = Structure.from_dict(d[\"structure\"]) pdoss = {} for at, pdos in zip(struct, d[\"pdos\"]): pdoss[at] = pdos return cls(struct, tdos, pdoss). \n### Response: Returns CompleteDos object from dict representation..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected String lookupAlias(final String alias) { String value = actionsManager.lookupPathAlias(alias); if (value == null) { ActionRuntime cfg = actionsManager.lookup(alias); if (cfg != null) { value = cfg.getActionPath(); } } return value; } \n### Response:", "ground_truth": "Lookups value as an alias and, if not found, as a default alias.", "predict": "lookupAlias(final String alias)"}, {"ID": 936, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static <T extends Extendable> List<T> sort(final List<T> values, final Sort sort, final boolean ascending) { final SortableList<T> list = getSortableList(values); list.sortOnProperty(sort, ascending, new SortStrategy()); return list; }. \n### Response: Sorts a list of values based on a given sort field using a selection sort.\n\n@param values List of values (implements Extendable) to sort.\n@param sort The sort field to sort on.\n@param ascending Sort ascending/descending.\n@return Sorted list of values.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected String resolveAlias(final String value) { final StringBuilder result = new StringBuilder(value.length()); int i = 0; int len = value.length(); while (i < len) { int ndx = value.indexOf('<', i); if (ndx == -1) { // alias markers not found if (i == 0) { // try whole string as an alias String alias = lookupAlias(value); return (alias != null ? alias : value); } else { result.append(value.substring(i)); } break; } // alias marked found result.append(value.substring(i, ndx)); ndx++; int ndx2 = value.indexOf('>', ndx); String aliasName = (ndx2 == -1 ? value.substring(ndx) : value.substring(ndx, ndx2)); // process alias String alias = lookupAlias(aliasName); if (alias != null) { result.append(alias); } else { // alias not found if (log.isWarnEnabled()) { log.warn(\"Alias not found: \" + aliasName); } } i = ndx2 + 1; } // fix prefix '//' - may happened when aliases are used i = 0; len = result.length(); while (i < len) { if (result.charAt(i) != '/') { break; } i++; } if (i > 1) { return result.substring(i - 1, len); } return result.toString(); } \n### Response:", "ground_truth": "Returns resolved alias result value or passed on, if alias doesn't exist.", "predict": "This method resolve an alias of a string. It takes a string value as input and returns a new string with the resolved alias.\n\n@param value The string to resolve an alias for.\n\nThis method performs a loop through the input string value, starting from the first character and ending at the last character. It checks if the current character is a '<' character, and if so, it marks the current position as an alias marker. If the alias marker is not found, it appends the original string value to the result string. The loop continues until the end of the input string is reached.\n\nAfter the loop is completed, the method checks if the current position is a '>' character, and if so, it extracts the alias name from the input string and processes it. If the alias name is not found, it logs a warning message. Finally, the method appends the processed alias to the result string.\n\nThe method also fixes the prefix '//' that may happen when aliases are used by checking if the current character is not a '/' character and if so, it skips to the next character.\n\n@return The resolved alias of the input string value.\n\nNote: This method is protected, which means it can only be accessed by classes that have been declared within the same package as this method."}, {"ID": 937, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String dateToString(final Date date, final String format) { if (date == null) { return null; } final DateFormat dateFormat = new SimpleDateFormat(format, Locale.US); return dateFormat.format(date); }. \n### Response: Date to string.\n\n@param date\nthe date\n@param format\nthe format\n@return the string.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public ResultPath resolveResultPath(String path, String value) { boolean absolutePath = false; if (value != null) { // [*] resolve alias in value value = resolveAlias(value); // [*] absolute paths if (StringUtil.startsWithChar(value, '/')) { absolutePath = true; int dotNdx = value.indexOf(\"..\"); if (dotNdx != -1) { path = value.substring(0, dotNdx); value = value.substring(dotNdx + 2); } else { path = value; value = null; } } else { // [*] resolve # in value and path int i = 0; while (i < value.length()) { if (value.charAt(i) != '#') { break; } int dotNdx = MadvocUtil.lastIndexOfSlashDot(path); if (dotNdx != -1) { // dot found path = path.substring(0, dotNdx); } i++; } if (i > 0) { // remove # from value value = value.substring(i); // [*] update path and value if (StringUtil.startsWithChar(value, '.')) { value = value.substring(1); } else { int dotNdx = value.indexOf(\"..\"); if (dotNdx != -1) { path += '.' + value.substring(0, dotNdx); value = value.substring(dotNdx + 2); } else { if (value.length() > 0) { if (StringUtil.endsWithChar(path, '/')) { path += value; } else { path += '.' + value; } } value = null; } } } } } if (!absolutePath) { if (resultPathPrefix != null) { path = resultPathPrefix + path; } } return new ResultPath(path, value); } \n### Response:", "ground_truth": "Resolves result path.", "predict": "Method-level comment:\n\n* Resolves the path to the value by resolving alias and/or resolving '#' in the value and updating the path.\n* Absolute paths are determined by startsWithChar and lastIndexOfSlashDot methods.\n* If the value is null or does not contain an alias, it is returned as is.\n* If the value contains an alias and the path already exists, the resolved value is returned.\n* If the path does not exist, it is created by startsWithChar and lastIndexOfSlashDot methods.\n* If the absolute path is not found, the value is updated with the resolved path and value is null.\n* Returns the new path with the updated value.\n\n@param path\nthe path to resolve\n@param value\nthe value to resolve"}, {"ID": 938, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def vn(x): \"\"\" value or none, returns none if x is an empty list \"\"\" if x == []: return None if isinstance(x, list): return '|'.join(x) if isinstance(x, datetime): return x.isoformat() return x. \n### Response: value or none, returns none if x is an empty list.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public String resolveResultPathString(final String path, final String value) { final ResultPath resultPath = resolveResultPath(path, value); final String result = resultPath.pathValue(); return resolveAlias(result); } \n### Response:", "ground_truth": "Resolves result path as a string, when parts are not important\nand when only full string matters. Additional alias resolving\non full path is done.", "predict": "This method resolveResultPathString() is used to resolve the path of a ResultPath object from a given path and value. It first resolveResultPath() method is called with the path and value to get a ResultPath object. Then it uses the pathValue() method of the ResultPath object to get the value of the path. Finally it returns the resolved value by calling the resolveAlias() method on it."}, {"ID": 939, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static InvalidEntityKanbaneryException mostSpecializedException(String response) { //todo refactor this!!! if (response == null || \"\".equals(response)) { return new InvalidEntityKanbaneryException(response); } else if (TaskAlreadyInFirstColumnException.isBestExceptionFor(response)) { return new TaskAlreadyInFirstColumnException(response); } else if (TaskAlreadyInLastColumnException.isBestExceptionFor(response)) { return new TaskAlreadyInLastColumnException(response); } else if (PositionExceedsNumberOfTasksInColumnException.isBestExceptionFor(response)) { return new PositionExceedsNumberOfTasksInColumnException(response); } else if (CanOnlyIceBoxTaskFromFirstColumnException.isBestExceptionFor(response)) { return new CanOnlyIceBoxTaskFromFirstColumnException(response); } else if (CanOnlyArchiveFromLastColumnException.isBestExceptionFor(response)) { return new CanOnlyArchiveFromLastColumnException(response); } else if (NotFixedColumnCannotBeFirstException.isBestExceptionFor(response)) { return new NotFixedColumnCannotBeFirstException(response); } else if (BodyMustNotBeBlankException.isBestExceptionFor(response)) { return new BodyMustNotBeBlankException(response); } else if (MaximumNumbersOfCollaboratorsReachedException.isBestExceptionFor(response)) { return new MaximumNumbersOfCollaboratorsReachedException(response); } else if (UserAlreadyAssignedToThisProjectException.isBestExceptionFor(response)) { return new UserAlreadyAssignedToThisProjectException(response); } else if (ProjectOwnerCanNotBeGivenProjectMembership.isBestExceptionFor(response)) { return new ProjectOwnerCanNotBeGivenProjectMembership(response); } else if (CanNotDeleteColumnThatContainsTasksException.isBestExceptionFor(response)) { return new CanNotDeleteColumnThatContainsTasksException(response); } else { return new InvalidEntityKanbaneryException(response); } }. \n### Response: May be used as \"Exception factory\" to determine the \"best\" exception to be thrown\nfor such JSON response. For example we may throw \"TaskAlreadyInFirstColumnException\"\nif the JSON contains a message informing us about this.\n\n@param response the JSON server response, containing a error messages\n@return the \"best\" exception to be thrown for such an response JSON, based on it's error messages.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static int lastIndexOfSlashDot(final String str) { int slashNdx = str.lastIndexOf('/'); int dotNdx = StringUtil.lastIndexOf(str, '.', str.length(), slashNdx); if (dotNdx == -1) { if (slashNdx == -1) { return -1; } slashNdx++; if (slashNdx < str.length() - 1) { dotNdx = slashNdx; } else { dotNdx = -1; } } return dotNdx; } \n### Response:", "ground_truth": "Locates last dot after the last slash or just slash.", "predict": "This method returns the last slash-dot character in the given string.\n\n@param str the string to check for the last slash-dot character\n@return the last slash-dot character in the given string."}, {"ID": 940, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static function render() { $apiMode = Request::isAPI(); if(self::$twig === null) self::initialize(); $data = Request::getAllData(); if(!$apiMode) { $data[\"siteName\"] = Configuration::get(\"dachi.siteName\", \"Unnamed Dachi Installation\"); $data[\"timezone\"] = Configuration::get(\"dachi.timezone\", \"Europe/London\"); $data[\"domain\"] = Configuration::get(\"dachi.domain\", \"localhost\"); $data[\"baseURL\"] = Configuration::get(\"dachi.baseURL\", \"/\"); $data[\"assetsURL\"] = str_replace(\"%v\", Kernel::getGitHash(), Configuration::get(\"dachi.assetsURL\", \"/build/\")); $data[\"renderTPL\"] = self::getRenderTemplate(); $data[\"URI\"] = Request::getFullUri(); } if($apiMode) { $response = array( \"data\" => $data, \"response\" => Request::getResponseCode() ); return json_echo($response); } else if(Request::isAjax()) { $response = array( \"render_tpl\" => self::getRenderTemplate(), \"data\" => $data, \"response\" => Request::getResponseCode(), \"render_actions\" => self::$render_actions ); return json_echo($response); } else { $data[\"response\"] = Request::getResponseCode(); $response = self::$twig->render(self::getRenderTemplate(true), $data); foreach(array_reverse(self::$render_actions) as $action) { switch($action[\"type\"]) { case \"redirect\": if($action[\"soft\"] !== true) header(\"Location: \" . $action[\"location\"]); break; case \"display_tpl\": $match = preg_match(\"/<dachi-ui-block id=[\\\"']\" . preg_quote($action[\"target_id\"]) . \"[\\\"'][^>]*>([\\s\\S]*)<\\/dachi-ui-block>/U\", $response, $matches); if($match) { $replacement = \"<dachi-ui-block id='\" . $action[\"target_id\"] . \"'>\" . self::$twig->render($action[\"template\"] . '.twig', $data) . \"</dachi-ui-block>\"; $response = str_replace($matches[0], $replacement, $response); } break; } } echo $response; } }. \n### Response: Render the render queue to the browser\n\nIf the request is an ajax request, the render queue and data will be sent to the browser via JSON.\nIf the request is a standard request, the render queue will be rendered server-side and will be sent to the browser via HTML.\n\n@internal\n@see Router\n@return null.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static int lastIndexOfDotAfterSlash(final String str) { int slashNdx = str.lastIndexOf('/'); slashNdx++; return StringUtil.lastIndexOf(str, '.', str.length(), slashNdx); } \n### Response:", "ground_truth": "Locates last index of dot after the optional last slash.", "predict": "lastIndexOfDotAfterSlash method returns the last dot (.) after the last slash in a string.\n\n@internal\n@see StringUtil\n@return the last dot (.) after the last slash in a string."}, {"ID": 941, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function(record, properties, referenced_record_id) { properties[this._name] = this._referenced_module.getRecordById(referenced_record_id) || null; if (properties[this._name]) { this._registerRecord(record, properties[this._name]); } }. \n### Response: Update value of this field in local `record` and add the record to field's internal collections\n@param {Lava.data.Record} record The local record\n@param {Object} properties The properties of local record\n@param {string} referenced_record_id The id of foreign record, which it belongs to.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static int indexOfDotAfterSlash(final String str) { int slashNdx = str.lastIndexOf('/'); if (slashNdx == -1) { slashNdx = 0; } return str.indexOf('.', slashNdx); } \n### Response:", "ground_truth": "Locates first dot after the last slash.", "predict": "This method finds the index of the last occurrence of the dot `.` in a string.\n@param {String} str The string to search for the dot `.` after the last slash.\n@return The index of the dot `.`, or -1 if the string does not contain a dot `.`."}, {"ID": 942, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private IoBuffer encodeServerBW(ServerBW serverBW) { final IoBuffer out = IoBuffer.allocate(4); out.putInt(serverBW.getBandwidth()); return out; }. \n### Response: Encode server-side bandwidth event.\n\n@param serverBW\nServer-side bandwidth event\n@return Encoded event data.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String stripLastCamelWord(String name) { int ndx = name.length() - 1; while (ndx >= 0) { if (CharUtil.isUppercaseAlpha(name.charAt(ndx))) { break; } ndx--; } if (ndx >= 0) { name = name.substring(0, ndx); } return name; } \n### Response:", "ground_truth": "Removes last CamelWord", "predict": "stripLastCamelWord()\nRemoves the last camel case word from a given string.\n\n@param name\nString to be processed.\n@return\nThe processed string with last camel case word removed."}, {"ID": 943, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void triggerLoadingWithDelay() { if (delayedTrigger == null) { Runnable runnable = () -> { Operation op = new TriggerLoadIfNeededOperation(mapName); opService.invokeOnPartition(SERVICE_NAME, op, mapNamePartition); }; delayedTrigger = new CoalescingDelayedTrigger(execService, LOADING_TRIGGER_DELAY, LOADING_TRIGGER_DELAY, runnable); } delayedTrigger.executeWithDelay(); }. \n### Response: Triggers key loading on SENDER if it hadn't started. Delays triggering if invoked multiple times..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String resolveSchemaName(final Class<?> type, final String defaultSchemaName) { String schemaName = null; final DbTable dbTable = type.getAnnotation(DbTable.class); if (dbTable != null) { schemaName = dbTable.schema().trim(); } if ((schemaName == null) || (schemaName.length() == 0)) { schemaName = defaultSchemaName; } return schemaName; } \n### Response:", "ground_truth": "Resolves schema name from a type. Uses default schema name if not specified.", "predict": "Resolves the schema name for the given type. If no annotation is found for the type, returns the default schema name."}, {"ID": 944, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public ArrayList<OvhSubnet> project_serviceName_network_private_networkId_subnet_GET(String serviceName, String networkId) throws IOException { String qPath = \"/cloud/project/{serviceName}/network/private/{networkId}/subnet\"; StringBuilder sb = path(qPath, serviceName, networkId); String resp = exec(qPath, \"GET\", sb.toString(), null); return convertTo(resp, t6); }. \n### Response: Get network subnets\n\nREST: GET /cloud/project/{serviceName}/network/private/{networkId}/subnet\n@param networkId [required] Network id\n@param serviceName [required] Service name.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static DbEntityColumnDescriptor resolveColumnDescriptors( final DbEntityDescriptor dbEntityDescriptor, final PropertyDescriptor property, final boolean isAnnotated, final ColumnNamingStrategy columnNamingStrategy) { String columnName = null; boolean isId = false; Class<? extends SqlType> sqlTypeClass = null; // read ID annotation DbId dbId = null; if (property.getFieldDescriptor() != null) { dbId = property.getFieldDescriptor().getField().getAnnotation(DbId.class); } if (dbId == null && property.getReadMethodDescriptor() != null) { dbId = property.getReadMethodDescriptor().getMethod().getAnnotation(DbId.class); } if (dbId == null && property.getWriteMethodDescriptor() != null) { dbId = property.getWriteMethodDescriptor().getMethod().getAnnotation(DbId.class); } if (dbId != null) { columnName = dbId.value().trim(); sqlTypeClass = dbId.sqlType(); isId = true; } else { DbColumn dbColumn = null; if (property.getFieldDescriptor() != null) { dbColumn = property.getFieldDescriptor().getField().getAnnotation(DbColumn.class); } if (dbColumn == null && property.getReadMethodDescriptor() != null) { dbColumn = property.getReadMethodDescriptor().getMethod().getAnnotation(DbColumn.class); } if (dbColumn == null && property.getWriteMethodDescriptor() != null) { dbColumn = property.getWriteMethodDescriptor().getMethod().getAnnotation(DbColumn.class); } if (dbColumn != null) { columnName = dbColumn.value().trim(); sqlTypeClass = dbColumn.sqlType(); } else { if (isAnnotated) { return null; } } } if (StringUtil.isEmpty(columnName)) { // default annotation value columnName = columnNamingStrategy.convertPropertyNameToColumnName(property.getName()); } else { if (!columnNamingStrategy.isStrictAnnotationNames()) { columnName = columnNamingStrategy.applyToColumnName(columnName); } } if (sqlTypeClass == SqlType.class) { sqlTypeClass = null; } return new DbEntityColumnDescriptor( dbEntityDescriptor, quoteIfRequired(columnName, columnNamingStrategy.isAlwaysQuoteNames(), columnNamingStrategy.getQuoteChar()), property.getName(), property.getType(), isId, sqlTypeClass); } \n### Response:", "ground_truth": "Resolves column descriptor from property. If property is annotated value will be read\nfrom annotation. If property is not annotated, then property will be ignored\nif entity is annotated. Otherwise, column name is generated from the property name.", "predict": "### Resp Resolve column names for DbEntityColumnDescriptors\n\nREST: /cloud/project/{serviceName}/network/private/{networkId}/subnet\n@param networkId [required] Network id\n@param serviceName [required] Service name\n@param isAnnotated [required] Whether the column is annotated\n@param columnNamingStrategy [required] Column naming strategy\n\nThis method resolve column names for DbEntityColumnDescriptors and return a new DbEntityColumnDescriptor with the specified properties. It first checks if the property has a field annotation, if so it retrieves the annotation value and the type of the annotation. If the property does not have a field annotation, it checks if the property has a read or write method annotation, if so it retrieves the method and the annotation value and type. If the property does not have any annotation, it checks if the column name is empty, if so it returns the default annotation value. If the column name is not empty and the column naming strategy is not strict, it applies the column naming strategy to the column name. Finally, it returns a new DbEntityColumnDescriptor with the specified properties."}, {"ID": 945, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function registerMiddleware($middlewareInstance) { if (isset(class_uses($middlewareInstance)['Nf\\Middleware\\Pre'])) { $key = self::MIDDLEWARE_PRE; } else { $key = self::MIDDLEWARE_POST; } // adds the middleware $this->registeredMiddlewares[$key][] = $middlewareInstance; }. \n### Response: registers a middleware programmatically and not through a route.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void init(final long[] key, final long[] tweak) { final int newNw = key.length; // only create new arrays if the value of N{w} changes (different key size) if (nw != newNw) { nw = newNw; switch (nw) { case WORDS_4: pi = PI4; rpi = RPI4; r = R4; break; case WORDS_8: pi = PI8; rpi = RPI8; r = R8; break; case WORDS_16: pi = PI16; rpi = RPI16; r = R16; break; default: throw new RuntimeException(\"Invalid threefish key\"); } this.k = new long[nw + 1]; // instantiation of these fields here for performance reasons vd = new long[nw]; // v is the intermediate value v{d} at round d ed = new long[nw]; // ed is the value of e{d} at round d fd = new long[nw]; // fd is the value of f{d} at round d ksd = new long[nw]; // ksd is the value of k{s} at round d } System.arraycopy(key, 0, this.k, 0, key.length); long knw = EXTENDED_KEY_SCHEDULE_CONST; for (int i = 0; i < nw; i++) { knw ^= this.k[i]; } this.k[nw] = knw; // set tweak values t[0] = tweak[0]; t[1] = tweak[1]; t[2] = t[0] ^ t[1]; } \n### Response:", "ground_truth": "Initialize the cipher using the key and the tweak value.\n\n@param key the Threefish key to use\n@param tweak the tweak values to use", "predict": "This method initializes the threefish key schedule and tweak values for a specific key and array size. It does this by creating new arrays and copying the key and tweak values from the original array to the new arrays. The key schedule is instantiated for performance reasons and the intermediate values are calculated and copied for each round. The tweak values are then set to the calculated intermediate values."}, {"ID": 946, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def super_delegate(*args, &block) method_name = name_of_calling_method(caller) owner = args.first || method_delegate(method_name) super_delegate_method = unbound_method_from_next_delegate(method_name, owner) if super_delegate_method.arity == 0 super_delegate_method.bind(self).call else super_delegate_method.bind(self).call(*args, &block) end rescue NameError raise NoMethodError.new(\"super_delegate: no delegate method `#{method_name}' for #{self.inspect} from #{owner}\") end. \n### Response: Call the method of the same name defined in the next delegate stored in your object\n\n Because Casting creates an alternative method lookup path using a collection of delegates,\n you may use `super_delegate` to work like `super`.\n\n If you use this feature, be sure that you have created a delegate collection which does\n have the method you need or you'll see a NoMethodError.\n\n Example:\n\n module Greeter\n   def greet\n     \"Hello\"\n   end\n end\n\n module FormalGreeter\n   include Casting::Super\n\n   def greet\n     \"#{super_delegate}, how do you do?\"\n   end\n end\n\n some_object.cast_as(Greeter, FormalGreeter)\n some_object.greet #=> 'Hello, how do you do?'.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private void mix(final int j, final int d) { y[0] = x[0] + x[1]; final long rotl = r[d % DEPTH_OF_D_IN_R][j]; // java left rotation for a long y[1] = (x[1] << rotl) | (x[1] >>> (Long.SIZE - rotl)); y[1] ^= y[0]; } \n### Response:", "ground_truth": "Implementation of the MIX function.\n\n@param j the index in the rotation constants\n@param d the round", "predict": "Mix the values of x and y into a single long value\n\nThis method mix the values of x and y into a single long value by performing a left rotation in java using a long value.\n\nExample:\n\nx = 123; y = 456; mix(j, d);  => long value = 123456;.\n\nNote: This is a simple example of left rotation in java for a long value. In a real-world scenario, you may need to perform more complex rotation operations."}, {"ID": 947, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def save_state_regularly(self, fname, frequency=600): \"\"\" Save the state of node with a given regularity to the given filename. Args: fname: File name to save retularly to frequency: Frequency in seconds that the state should be saved. By default, 10 minutes. \"\"\" self.save_state(fname) loop = asyncio.get_event_loop() self.save_state_loop = loop.call_later(frequency, self.save_state_regularly, fname, frequency). \n### Response: Save the state of node with a given regularity to the given\n        filename.\n\n        Args:\n            fname: File name to save retularly to\n            frequency: Frequency in seconds that the state should be saved.\n                        By default, 10 minutes..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private void demix(final int j, final int d) { y[1] ^= y[0]; final long rotr = r[d % DEPTH_OF_D_IN_R][j]; // NOTE performance: darn, creation on stack! // right shift x[1] = (y[1] << (Long.SIZE - rotr)) | (y[1] >>> rotr); x[0] = y[0] - x[1]; } \n### Response:", "ground_truth": "Implementation of the un-MIX function.", "predict": "Demix method performs a demix operation on two indices j and d.\n\nNote: This method performs the operation on the stack, which may not be the most efficient way to perform this operation.\n\nThis method is used to perform a demix operation on two indices j and d. The demix operation involves XORing the values of y[1] with y[0] and performing a right shift on the value of r[d % DEPTH_OF_D_IN_R][j]. The resulting value x[1] is then set to the difference between y[0] and x[1].\n\nThe depth of the D-tree in the R-tree is used to determine the index j, which is the index of the D-node in the R-tree with the index d."}, {"ID": 948, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public final void onDismissed(Snackbar snackbar, int dismissEvent) { super.onDismissed(snackbar, dismissEvent); notifySnackbarCallback(snackbar, dismissEvent); }. \n### Response: Notifies that the Snackbar has been dismissed through some event, for example swiping or the action being pressed.\n\n@param snackbar     The Snackbar which has been dismissed.\n@param dismissEvent The event which caused the dismissal..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private void keySchedule(final int s) { for (int i = 0; i < nw; i++) { // just put in the main key first ksd[i] = k[(s + i) % (nw + 1)]; // don't add anything for i = 0,...,Nw - 4 if (i == nw - 3) { // second to last ksd[i] += t[s % TWEAK_VALUES]; } else if (i == nw - 2) { // first to last ksd[i] += t[(s + 1) % TWEAK_VALUES]; } else if (i == nw - 1) { // last ksd[i] += s; } } } \n### Response:", "ground_truth": "Creates the subkeys.\n\n@param s the value of the round devided by 4", "predict": "This method schedules the key schedule for the nw-based key schedule algorithm. It iterates through the key schedule array and assigns each key a value based on its position in the array. It also calculates the remaining time (t) for each key by dividing its current time (s) by the total number of days (TWEAK_VALUES).\n\n@param s The current time of the key schedule.\n\n@return The key schedule array."}, {"ID": 949, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override protected HttpOperation generateHttpOperation (GenericRecord inputRecord, State state) { Map<String, String> keyAndValue = new HashMap<>(); Optional<Iterable<String>> keys = getKeys(state); HttpOperation operation; if (keys.isPresent()) { for (String key : keys.get()) { String value = inputRecord.get(key).toString(); log.debug(\"Http join converter: key is {}, value is {}\", key, value); keyAndValue.put(key, value); } operation = new HttpOperation(); operation.setKeys(keyAndValue); } else { operation = HttpUtils.toHttpOperation(inputRecord); } return operation; }. \n### Response: Extract user defined keys by looking at \"gobblin.converter.http.keys\"\nIf keys are defined, extract key-value pair from inputRecord and set it to HttpOperation\nIf keys are not defined, generate HttpOperation by HttpUtils.toHttpOperation.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void init(final String keyMessage, final long tweak1, final long tweak2) { long[] tweak = new long[] {tweak1, tweak2}; byte[] key = new byte[blockSize / Byte.SIZE]; byte[] keyData = StringUtil.getBytes(keyMessage); System.arraycopy(keyData, 0, key, 0, key.length < keyData.length ? key.length : keyData.length); init(bytesToLongs(key), tweak); } \n### Response:", "ground_truth": "Initializes cipher in a simple way.", "predict": "Initialize the key-value pair using the provided keyMessage and tweak1 and tweak2.\n\nNote: This method uses the System.arraycopy() method to copy the key and keyData to a byte array, which is used to initialize the HttpOperation.\n\nNote: This method uses the StringUtil class to convert the keyMessage to a byte array.\n\nNote: This method uses the bytesToLongs() method to convert the byte array to a long array."}, {"ID": 950, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (p *CopyPropagator) updateBindings(pctx *plugContext, expr *ast.Expr) bool { if pctx.negated || len(expr.With) > 0 { return true } if expr.IsEquality() { a, b := expr.Operand(0), expr.Operand(1) if a.Equal(b) { return false } k, v, keep := p.updateBindingsEq(a, b) if !keep { if v != nil { pctx.bindings[k] = newbinding(k, v) } return false } } else if expr.IsCall() { terms := expr.Terms.([]*ast.Term) output := terms[len(terms)-1] if k, ok := output.Value.(ast.Var); ok && !p.livevars.Contains(k) && !pctx.headvars.Contains(k) { pctx.bindings[k] = newbinding(k, ast.CallTerm(terms[:len(terms)-1]...).Value) return false } } return !isNoop(expr) }. \n### Response: // updateBindings returns false if the expression can be killed. If the\n// expression is killed, the binding list is updated to map a var to value..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public byte[] encryptBlock(final byte[] content, final int offset) { long[] contentBlock = bytesToLongs(content, offset, blockSizeInBytes); long[] encryptedBlock = new long[blockSize / Long.SIZE]; blockEncrypt(contentBlock, encryptedBlock); return longsToBytes(encryptedBlock); } \n### Response:", "ground_truth": "Encrypts a block.", "predict": "// This method implements the encryption of a block of data. It takes in the\n// content and offset of the block as bytes, and the size of the block in bytes. It\n// returns the encrypted block in bytes."}, {"ID": 951, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public ListPipelinesResponse listPipelines(ListPipelinesRequest request) { checkNotNull(request, \"The parameter request should NOT be null.\"); InternalRequest internalRequest = createRequest(HttpMethodName.GET, request, PIPELINE); return invokeHttpClient(internalRequest, ListPipelinesResponse.class); }. \n### Response: List all your pipelines.\n\n@param request The request object containing all options for listing all pipelines.\n\n@return The list of all your pipelines.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected static long[] bytesToLongs(final byte[] ba, final int offset, final int size) { long[] result = new long[size >> 3]; int i8 = offset; for (int i = 0; i < result.length; i++) { result[i] = Bits.getLong(ba, i8); i8 += 8; } return result; } \n### Response:", "ground_truth": "Converts segment of byte array into long array.", "predict": "Converts a byte array to a long array.\n\n@param ba The byte array to be converted.\n\n@return The long array representing the bytes in the byte array.\n\nNote: This method is used for efficiency reasons, as it avoids the overhead of reading and writing the same data multiple times. It also uses bit manipulation to efficiently convert the bytes to a long array."}, {"ID": 952, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void send(JainMgcpResponseEvent event) { cancelLongtranTimer(); // to send response we already should know the address and port // number from which the original request was received if (remoteAddress == null) { throw new IllegalArgumentException(\"Unknown orinator address\"); } // restore the original transaction handle parameter // and encode event objet into MGCP response message event.setTransactionHandle(remoteTID); // encode event object into MGCP response message if(originalPacket==null) originalPacket=stack.allocatePacket(); originalPacket.setLength(encode(event,originalPacket.getRawData())); InetSocketAddress inetSocketAddress = new InetSocketAddress(remoteAddress, remotePort); originalPacket.setRemoteAddress(inetSocketAddress); if (logger.isDebugEnabled()) { logger.debug(\"--- TransactionHandler:\" + this + \" :LocalID=\" + localTID + \", Send response event to \" + remoteAddress + \":\" + remotePort + \", message\\n\" + new String(originalPacket.getRawData(),0,originalPacket.getLength())); } stack.send(originalPacket); /* * Just reset timer in case of provisional response. Otherwise, release tx. */ if (isProvisional(event.getReturnCode())) { // reset timer. resetLongtranTimer(); } else { release(); stack.getCompletedTransactions().put(Integer.valueOf(event.getTransactionHandle()), this); resetTHISTTimerTask(true); } }. \n### Response: Sends MGCP response message from the application to the host from wich origination command was received.\n\n@param event\nthe jain mgcp response event object..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private static String removeAnyBounding(final char s, final char e, final String str) { if (str == null || str.length() < 2) { return str; } if (str.startsWith(String.valueOf(s)) && str.endsWith(String.valueOf(e))) { return str.substring(1, str.length() - 1); } return str; } \n### Response:", "ground_truth": "If the string starts and ends with start and end char, remove them,\notherwise return the string as it was passed in.", "predict": "This method removes any boundaries between two characters (s, e, and str) by returning a substring of the original string that starts at the first boundary (String.valueOf(s)) and ends at the last boundary (String.valueOf(e)) and does not include the second boundary (String.valueOf(str))."}, {"ID": 953, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function(pe){// Shortcuts var ue=pe.length,be=this._map,he=this._reverseMap;if(!he){he=this._reverseMap=[];for(var me=0;me<be.length;me++)he[be.charCodeAt(me)]=me}// Ignore padding var ge=be.charAt(64);if(ge){var _e=pe.indexOf(ge);-1!==_e&&(ue=_e)}// Convert return se(pe,ue,he)}. \n### Response: Converts a Base64 string to a word array.\n\n@param {string} base64Str The Base64 string.\n\n@return {WordArray} The word array.\n\n@static\n\n@example\n\nvar wordArray = CryptoJS.enc.Base64.parse(base64String);.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public String path() { if (methref != null) { final String methodName = methref.ref(); return target.getName() + '#' + methodName; } return path; } \n### Response:", "ground_truth": "Returns path value.", "predict": "Returns the path to the target object.\n\n@param {Object} target The target object.\n\n@return {String} The path to the target object.\n\n@static\n\n@example\n\npath(\"example.com\"); // returns the path to the example.com object\npath(\"example.org\"); // returns the path to the example.org object\npath(\"www.example.com\"); // returns the path to the www.example.com object."}, {"ID": 954, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def __get_activities(self, search): \"\"\"returns list of activities for autocomplete, activity names converted to lowercase\"\"\" query = \"\"\" SELECT a.name AS name, b.name AS category FROM activities a LEFT JOIN categories b ON coalesce(b.id, -1) = a.category_id LEFT JOIN facts f ON a.id = f.activity_id WHERE deleted IS NULL AND a.search_name LIKE ? ESCAPE '\\\\' GROUP BY a.id ORDER BY max(f.start_time) DESC, lower(a.name) LIMIT 50 \"\"\" search = search.lower() search = search.replace('\\\\', '\\\\\\\\').replace('%', '\\\\%').replace('_', '\\\\_') activities = self.fetchall(query, ('%s%%' % search, )) return activities. \n### Response: returns list of activities for autocomplete,\n           activity names converted to lowercase.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static File zlib(final File file) throws IOException { if (file.isDirectory()) { throw new IOException(\"Can't zlib folder\"); } FileInputStream fis = new FileInputStream(file); Deflater deflater = new Deflater(Deflater.BEST_COMPRESSION); String zlibFileName = file.getAbsolutePath() + ZLIB_EXT; DeflaterOutputStream dos = new DeflaterOutputStream(new FileOutputStream(zlibFileName), deflater); try { StreamUtil.copy(fis, dos); } finally { StreamUtil.close(dos); StreamUtil.close(fis); } return new File(zlibFileName); } \n### Response:", "ground_truth": "Compresses a file into zlib archive.", "predict": "Returns a File object for the zlib compression file."}, {"ID": 955, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (p *NetPlugin) Reinit(cfg Config) { var err error p.Lock() defer p.Unlock() if p.NetworkDriver != nil { logrus.Infof(\"Reinit de-initializing NetworkDriver\") p.NetworkDriver.Deinit() p.NetworkDriver = nil } cfg.Instance.StateDriver, _ = utils.GetStateDriver() p.NetworkDriver, err = utils.NewNetworkDriver(cfg.Drivers.Network, &cfg.Instance) logrus.Infof(\"Reinit Initializing NetworkDriver\") if err != nil { logrus.Errorf(\"Reinit De-initializing due to error: %v\", err) p.NetworkDriver.Deinit() } }. \n### Response: //Reinit reinitialize the network driver.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static File gzip(final File file) throws IOException { if (file.isDirectory()) { throw new IOException(\"Can't gzip folder\"); } FileInputStream fis = new FileInputStream(file); String gzipName = file.getAbsolutePath() + GZIP_EXT; GZIPOutputStream gzos = new GZIPOutputStream(new FileOutputStream(gzipName)); try { StreamUtil.copy(fis, gzos); } finally { StreamUtil.close(gzos); StreamUtil.close(fis); } return new File(gzipName); } \n### Response:", "ground_truth": "Compresses a file into gzip archive.", "predict": "//gzip gzip the specified file."}, {"ID": 956, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (a *StorageAPIv5) Detach(args params.StorageAttachmentIds) (params.ErrorResults, error) { return a.internalDetach(args, nil, nil) }. \n### Response: // Detach sets the specified storage attachments to Dying, unless they are\n// already Dying or Dead. Any associated, persistent storage will remain\n// alive..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static File ungzip(final File file) throws IOException { String outFileName = FileNameUtil.removeExtension(file.getAbsolutePath()); File out = new File(outFileName); out.createNewFile(); FileOutputStream fos = new FileOutputStream(out); GZIPInputStream gzis = new GZIPInputStream(new FileInputStream(file)); try { StreamUtil.copy(gzis, fos); } finally { StreamUtil.close(fos); StreamUtil.close(gzis); } return out; } \n### Response:", "ground_truth": "Decompress gzip archive.", "predict": "// Ungzips a file from the specified file path. Create a new output file and copy the input stream to the output file. Close the output file and input stream when done."}, {"ID": 957, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function stripQuotes(&$var, $depth=0, $howDeep=5) { if (is_array($var)) { if ($depth++<$howDeep) { while (list($k,$v) = each($var)) { $this->stripQuotes($var[$k], $depth, $howDeep); } } } else { $var = stripslashes($var); } }. \n### Response: Strip quotes from variable\n\n@access public\n@param mixed $var\n@param int $depth current depth\n@param int $howDeep maximum depth.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static List<String> listZip(final File zipFile) throws IOException { List<String> entries = new ArrayList<>(); ZipFile zip = new ZipFile(zipFile); Enumeration zipEntries = zip.entries(); while (zipEntries.hasMoreElements()) { ZipEntry entry = (ZipEntry) zipEntries.nextElement(); String entryName = entry.getName(); entries.add(entryName); } return Collections.unmodifiableList(entries); } \n### Response:", "ground_truth": "Lists zip content.", "predict": "List of entries in the zip file\n\n@access public\n@param File $zipFile\n@return List<String> of entries in the zip file.\n\nNote: This method reads the contents of a zip file and returns a list of its entries. It uses the ZipFile class from the Apache Commons library to read the entries and the Enumeration class to iterate over them. The method throws an IOException if the zip file cannot be read or if there is an error while reading the entries."}, {"ID": 958, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (s *StageDeclaration) SetBlockers(v []*BlockerDeclaration) *StageDeclaration { s.Blockers = v return s }. \n### Response: // SetBlockers sets the Blockers field's value..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void unzip(final String zipFile, final String destDir, final String... patterns) throws IOException { unzip(new File(zipFile), new File(destDir), patterns); } \n### Response:", "ground_truth": "Extracts zip file content to the target directory.\n@see #unzip(java.io.File, java.io.File, String...)", "predict": "// Unzips the specified zip file and destination directory, and stores the specified patterns in the zip file."}, {"ID": 959, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def instrument(self, container: Container ) -> None: \"\"\" Instruments the program inside the container for computing test suite coverage. Params: container: the container that should be instrumented. \"\"\" path = \"containers/{}/instrument\".format(container.uid) r = self.__api.post(path) if r.status_code != 204: logger.info(\"failed to instrument container: %s\", container.uid) self.__api.handle_erroneous_response(r). \n### Response: Instruments the program inside the container for computing test suite\n        coverage.\n\n        Params:\n            container: the container that should be instrumented..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void addToZip(final ZipOutputStream zos, final File file, String path, final String comment, final boolean recursive) throws IOException { if (!file.exists()) { throw new FileNotFoundException(file.toString()); } if (path == null) { path = file.getName(); } while (path.length() != 0 && path.charAt(0) == '/') { path = path.substring(1); } boolean isDir = file.isDirectory(); if (isDir) { // add folder record if (!StringUtil.endsWithChar(path, '/')) { path += '/'; } } ZipEntry zipEntry = new ZipEntry(path); zipEntry.setTime(file.lastModified()); if (comment != null) { zipEntry.setComment(comment); } if (isDir) { zipEntry.setSize(0); zipEntry.setCrc(0); } zos.putNextEntry(zipEntry); if (!isDir) { InputStream is = new FileInputStream(file); try { StreamUtil.copy(is, zos); } finally { StreamUtil.close(is); } } zos.closeEntry(); // continue adding if (recursive && file.isDirectory()) { boolean noRelativePath = StringUtil.isEmpty(path); final File[] children = file.listFiles(); if (children != null && children.length != 0) { for (File child : children) { String childRelativePath = (noRelativePath ? StringPool.EMPTY : path) + child.getName(); addToZip(zos, child, childRelativePath, comment, recursive); } } } } \n### Response:", "ground_truth": "Adds single entry to ZIP output stream.\n\n@param zos zip output stream\n@param file file or folder to add\n@param path relative path of file entry; if null files name will be used instead\n@param comment optional comment\n@param recursive when set to true content of added folders will be added, too", "predict": "Instruments the program inside the container for computing test suite coverage.\n\nParams:\n- container: the container that should be instrumented.\n- file: the file inside the container.\n- path: the path to the file.\n- comment: the comment about the file.\n- recursive: whether to add files recursively or not.\n\nThis method adds a file to the zip archive if it doesn't already exist, or creates a folder record if the file is a directory. It also copies the input file to the zip archive and closes the entry after adding it. If the file is a directory and recursive is true, it will add all the files in the directory to the zip archive."}, {"ID": 960, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (s *OutputGroupSettings) SetFrameCaptureGroupSettings(v *FrameCaptureGroupSettings) *OutputGroupSettings { s.FrameCaptureGroupSettings = v return s }. \n### Response: // SetFrameCaptureGroupSettings sets the FrameCaptureGroupSettings field's value..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void addToZip(final ZipOutputStream zos, final byte[] content, String path, final String comment) throws IOException { while (path.length() != 0 && path.charAt(0) == '/') { path = path.substring(1); } if (StringUtil.endsWithChar(path, '/')) { path = path.substring(0, path.length() - 1); } ZipEntry zipEntry = new ZipEntry(path); zipEntry.setTime(System.currentTimeMillis()); if (comment != null) { zipEntry.setComment(comment); } zos.putNextEntry(zipEntry); InputStream is = new ByteArrayInputStream(content); try { StreamUtil.copy(is, zos); } finally { StreamUtil.close(is); } zos.closeEntry(); } \n### Response:", "ground_truth": "Adds byte content into the zip as a file.", "predict": "// Adds the content to the zip file, path is the entry path, comment is the entry comment, and the content is the byte array of content.."}, {"ID": 961, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void onInsertCompleted(Uri result, Uri uri, MatcherPattern target, InsertParameters parameter) { this.getContext().getContentResolver().notifyChange(result, null); }. \n### Response: This method is called after the onInsert processing has been handled. If you're a need,\nyou can override this method.\n@param result\nThis is the return value of onInsert method.\n@param uri\nThis is the Uri of target.\n@param target\nThis is identical to the argument of onInsert method.\nIt is MatcherPattern objects that match to evaluate Uri by UriMatcher. You can\naccess information in the tables and columns, ContentUri, MimeType etc.\n@param parameter\nThis is identical to the argument of onInsert method.\nArguments passed to the insert() method.\n@since 1.0.4.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public FieldDescriptor getFieldDescriptor(final String name, final boolean declared) { final FieldDescriptor fieldDescriptor = getFields().getFieldDescriptor(name); if (fieldDescriptor != null) { if (!fieldDescriptor.matchDeclared(declared)) { return null; } } return fieldDescriptor; } \n### Response:", "ground_truth": "Returns field descriptor.", "predict": "This method retrieves the field descriptor for a given field name. It first calls the getFields() method to retrieve all the fields that match the given name. If a field descriptor is found, it then checks if the field is declared. If not, it returns null. This method is useful for getting information about the fields in a database table.\n@param name\nThis is the name of the field.\n@param declared\nThis is a boolean indicating if the field is declared or not.\n@return the field descriptor for the given field name.\n@since 1.0.4."}, {"ID": 962, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def timer(self, jitter, action, *args, **kwargs): \"\"\"Convenience method to create a Timer from the heap\"\"\" return Timer(self, jitter, action, *args, **kwargs). \n### Response: Convenience method to create a Timer from the heap.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public PropertyDescriptor getPropertyDescriptor(final String name, final boolean declared) { PropertyDescriptor propertyDescriptor = getProperties().getPropertyDescriptor(name); if ((propertyDescriptor != null) && propertyDescriptor.matchDeclared(declared)) { return propertyDescriptor; } return null; } \n### Response:", "ground_truth": "Returns property descriptor. Declared flag is matched on both read and write\nmethods.", "predict": "Method-level comment for the `getPropertyDescriptor` method:\n\nThis method retrieves a property descriptor for a given name. It first retrieves the property descriptor from the `getProperties()` method and then checks if the property descriptor is null or if it matches the declared state of the property. If the property descriptor is not null and its declared state matches, it returns the property descriptor. Otherwise, it returns null. This method is useful for retrieving properties that are not explicitly declared in the application configuration."}, {"ID": 963, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def halt(self): \"\"\"Switch state to HALT\"\"\" buf = [] buf.append(self.act_end) buf.append(0) crc = self.calculate_crc(buf) self.clear_bitmask(0x08, 0x80) self.card_write(self.mode_transrec, buf) self.clear_bitmask(0x08, 0x08) self.authed = False. \n### Response: Switch state to HALT.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void setRequestBundleName(final ServletRequest request, final String bundleName) { if (log.isDebugEnabled()) { log.debug(\"Bundle name for this request: \" + bundleName); } request.setAttribute(REQUEST_BUNDLE_NAME_ATTR, bundleName); } \n### Response:", "ground_truth": "Sets bundle name for provided servlet request.", "predict": "Set request bundle name."}, {"ID": 964, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def has_permission(self, permission): \"\"\" Return a future that resolves with the result of the permission \"\"\" f = self.create_future() #: Old versions of android did permissions at install time if self.api_level < 23: f.set_result(True) return f def on_result(allowed): result = allowed == Activity.PERMISSION_GRANTED self.set_future_result(f, result) self.widget.checkSelfPermission(permission).then(on_result) return f. \n### Response: Return a future that resolves with the result of the permission.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void setSessionLocale(final HttpSession session, final String localeCode) { if (log.isDebugEnabled()) { log.debug(\"Locale stored to session: \" + localeCode); } Locale locale = Locale.forLanguageTag(localeCode); session.setAttribute(SESSION_LOCALE_ATTR, locale); } \n### Response:", "ground_truth": "Saves Locale to HTTP session.", "predict": "Set the session locale to the specified locale code."}, {"ID": 965, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def comparator uuid prefix = objects[uuid][Keys::ISA] == Keys::PBXGroup ? ' ' : '' prefix + Helpers.resolve_attributes(uuid, objects) end. \n### Response: The comparator used during the sort\n\n The comparator resolves the attributes for the node and appends a\n known prefix to objects where `isa = PBXGroup` to ensure that groups\n are sorted above files\n\n @param uuid [String] the uuid of the object to examine\n @!visibility public.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static Locale getSessionLocale(final HttpSession session) { Locale locale = (Locale) session.getAttribute(SESSION_LOCALE_ATTR); return locale == null ? MESSAGE_RESOLVER.getFallbackLocale() : locale; } \n### Response:", "ground_truth": "Returns current locale from session.\ns", "predict": "The method returns the current locale associated with the given HttpSession.\n\nThe method first retrieves the locale attribute from the session using the `getAttribute` method. If the locale is not found, it returns the default locale of the message resolver using the `getFallbackLocale` method.\n\n@param session [HttpSession] the HttpSession to retrieve the locale from\n@!visibility public static."}, {"ID": 966, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function createElement($name, $value = null, array $attributes = []) { $node = $this->document->createElement($name); return new Element($node, $value, $attributes); }. \n### Response: Creates a new element node.\n\n@param string      $name       The tag name of the element\n@param string|null $value      The value of the element\n@param array       $attributes The attributes of the element\n\n@return \\DiDom\\Element created element.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public String[] filterParametersForBeanName(String beanName, final boolean resolveReferenceParams) { beanName = beanName + '.'; List<String> list = new ArrayList<>(); for (Map.Entry<String, Object> entry : params.entrySet()) { String key = entry.getKey(); if (!key.startsWith(beanName)) { continue; } list.add(key); if (!resolveReferenceParams) { continue; } // resolve all references String value = PropertiesUtil.resolveProperty(params, key); entry.setValue(value); } if (list.isEmpty()) { return StringPool.EMPTY_ARRAY; } else { return list.toArray(new String[0]); } } \n### Response:", "ground_truth": "Returns an array of param keys that belongs to provided bean.\nOptionally resolves the value of returned parameters.", "predict": "This method filters the parameters for a specific bean name based on its key. It iterates through the parameters and adds each key that does not start with the bean name to a list. If the list is empty, it returns an empty array. Otherwise, it returns the list of filtered parameters as an array.\n\n@param string      $beanName   The name of the bean to filter\n@param boolean     $resolveReferenceParams The flag to indicate whether to resolve references in the parameters\n\n@return String[] filtered parameters array."}, {"ID": 967, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private function getWeightedFields( ContainerConfigurationInterface $containerConfig, $analyzer = null, FieldFilterInterface $fieldFilter = null, $defaultField = null, $boost = 1 ) { $mapping = $containerConfig->getMapping(); return $mapping->getWeightedSearchProperties($analyzer, $defaultField, $boost, $fieldFilter); }. \n### Response: Build an array of weighted fields to be searched with the ability to apply a filter callback method and a default field.\n\n@param ContainerConfigurationInterface $containerConfig Search request container config.\n@param string                          $analyzer        Target analyzer.\n@param FieldFilterInterface            $fieldFilter     Field filter.\n@param string|null                     $defaultField    Default search field.\n@param integer                         $boost           Additional boost applied to the fields (multiplicative).\n\n@return array.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public PropsEntries profile(final String... profiles) { if (profiles == null) { return this; } for (String profile : profiles) { addProfiles(profile); } return this; } \n### Response:", "ground_truth": "Enables profiles to iterate.", "predict": "Adds all the profiles specified in the arguments to the `PropsEntries` object.\n\n@param String... profiles Profiles to be added to the PropsEntries object.\n\n@return PropsEntries object with all the profiles added."}, {"ID": 968, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function deleteVersion($contentId, $versionNo) { $versionInfo = $this->loadVersionInfo($contentId, $versionNo); $this->locationGateway->deleteNodeAssignment($contentId, $versionNo); $this->fieldHandler->deleteFields($contentId, $versionInfo); $this->contentGateway->deleteRelations($contentId, $versionNo); $this->contentGateway->deleteVersions($contentId, $versionNo); $this->contentGateway->deleteNames($contentId, $versionNo); }. \n### Response: Deletes given version, its fields, node assignment, relations and names.\n\nRemoves the relations, but not the related objects.\n\n@param int $contentId\n@param int $versionNo\n\n@return bool.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static long getLongLittleEndian(final byte[] buf, final int offset) { return ((long) buf[offset + 7] << 56) // no mask needed | ((buf[offset + 6] & 0xffL) << 48) | ((buf[offset + 5] & 0xffL) << 40) | ((buf[offset + 4] & 0xffL) << 32) | ((buf[offset + 3] & 0xffL) << 24) | ((buf[offset + 2] & 0xffL) << 16) | ((buf[offset + 1] & 0xffL) << 8) | ((buf[offset] & 0xffL)); // no shift needed } \n### Response:", "ground_truth": "Gets a long from a byte buffer in little endian byte order.", "predict": "This method returns the long value of a given byte array using a LittleEndian format.\n\n@param byte[] $buf\n\n@return long."}, {"ID": 969, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (o AggregatorOptions) RunAggregator(stopCh <-chan struct{}) error { // TODO have a \"real\" external address if err := o.RecommendedOptions.SecureServing.MaybeDefaultWithSelfSignedCerts(\"localhost\", nil, nil); err != nil { return fmt.Errorf(\"error creating self-signed certificates: %v\", err) } serverConfig := genericapiserver.NewRecommendedConfig(aggregatorscheme.Codecs) if err := o.RecommendedOptions.ApplyTo(serverConfig); err != nil { return err } if err := o.APIEnablement.ApplyTo(&serverConfig.Config, apiserver.DefaultAPIResourceConfigSource(), aggregatorscheme.Scheme); err != nil { return err } serverConfig.LongRunningFunc = filters.BasicLongRunningRequestCheck( sets.NewString(\"watch\", \"proxy\"), sets.NewString(\"attach\", \"exec\", \"proxy\", \"log\", \"portforward\"), ) serviceResolver := apiserver.NewClusterIPServiceResolver(serverConfig.SharedInformerFactory.Core().V1().Services().Lister()) config := apiserver.Config{ GenericConfig: serverConfig, ExtraConfig: apiserver.ExtraConfig{ ServiceResolver: serviceResolver, }, } var err error config.ExtraConfig.ProxyClientCert, err = ioutil.ReadFile(o.ProxyClientCertFile) if err != nil { return err } config.ExtraConfig.ProxyClientKey, err = ioutil.ReadFile(o.ProxyClientKeyFile) if err != nil { return err } server, err := config.Complete().NewWithDelegate(genericapiserver.NewEmptyDelegate()) if err != nil { return err } return server.GenericAPIServer.PrepareRun().Run(stopCh) }. \n### Response: // RunAggregator runs the API Aggregator..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private static byte[] readStream(final InputStream inputStream, final boolean close) throws IOException { if (inputStream == null) { throw new IOException(\"Class not found\"); } try { ByteArrayOutputStream outputStream = new ByteArrayOutputStream(); byte[] data = new byte[INPUT_STREAM_DATA_CHUNK_SIZE]; int bytesRead; while ((bytesRead = inputStream.read(data, 0, data.length)) != -1) { outputStream.write(data, 0, bytesRead); } outputStream.flush(); return outputStream.toByteArray(); } finally { if (close) { inputStream.close(); } } } \n### Response:", "ground_truth": "Reads the given input stream and returns its content as a byte array.\n\n@param inputStream an input stream.\n@param close true to close the input stream after reading.\n@return the content of the given input stream.\n@throws IOException if a problem occurs during reading.", "predict": "// ReadStream reads from an InputStream and writes the data to a ByteArrayOutputStream."}, {"ID": 970, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def running_state(self, running_state): \"\"\"Sets the running_state of this MaintenanceWindow. :param running_state: The running_state of this MaintenanceWindow. # noqa: E501 :type: str \"\"\" allowed_values = [\"ONGOING\", \"PENDING\", \"ENDED\"] # noqa: E501 if running_state not in allowed_values: raise ValueError( \"Invalid value for `running_state` ({0}), must be one of {1}\" # noqa: E501 .format(running_state, allowed_values) ) self._running_state = running_state. \n### Response: Sets the running_state of this MaintenanceWindow.\n\n\n        :param running_state: The running_state of this MaintenanceWindow.  # noqa: E501\n        :type: str.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected Label readLabel(final int bytecodeOffset, final Label[] labels) { if (labels[bytecodeOffset] == null) { labels[bytecodeOffset] = new Label(); } return labels[bytecodeOffset]; } \n### Response:", "ground_truth": "Returns the label corresponding to the given bytecode offset. The default implementation of\nthis method creates a label for the given offset if it has not been already created.\n\n@param bytecodeOffset a bytecode offset in a method.\n@param labels the already created labels, indexed by their offset. If a label already exists\nfor bytecodeOffset this method must not create a new one. Otherwise it must store the new\nlabel in this array.\n@return a non null Label, which must be equal to labels[bytecodeOffset].", "predict": "This method reads a label from the bytecode and returns it.\n\n\n        :param bytecodeOffset: The bytecode offset of the label to read.  # noqa: E501\n        :param labels: The array of labels to read.  # noqa: E501\n        :type: int\n        :return: The label at the specified bytecode offset.  # noqa: E501\n        :rtype: Label.\n\n"}, {"ID": 971, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function getUploadedFiles() { if ($c = $this->model) { $a = explode(',', $this->value); $b = array(); foreach ($a as $val) { if ($val) { $b[] = $val; } } $files = implode(',', filter_var_array($b, FILTER_VALIDATE_INT)); if ($files) { $c->addCondition('id', 'in', ($files ? $files : 0)); $data = $c->getRows(array( 'id', 'url', 'thumb_url', $this->getOriginalFilenameFieldName(), $this->getFilesizeFieldName() )); } else { $data = array(); } return $this->formatFiles($data); } }. \n### Response: those can be done in flash thingie as well.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private int getTypeAnnotationBytecodeOffset( final int[] typeAnnotationOffsets, final int typeAnnotationIndex) { if (typeAnnotationOffsets == null || typeAnnotationIndex >= typeAnnotationOffsets.length || readByte(typeAnnotationOffsets[typeAnnotationIndex]) < TypeReference.INSTANCEOF) { return -1; } return readUnsignedShort(typeAnnotationOffsets[typeAnnotationIndex] + 1); } \n### Response:", "ground_truth": "Returns the bytecode offset corresponding to the specified JVMS 'type_annotation' structure, or\n-1 if there is no such type_annotation of if it does not have a bytecode offset.\n\n@param typeAnnotationOffsets the offset of each 'type_annotation' entry in a\nRuntime[In]VisibleTypeAnnotations attribute, or null.\n@param typeAnnotationIndex the index a 'type_annotation' entry in typeAnnotationOffsets.\n@return bytecode offset corresponding to the specified JVMS 'type_annotation' structure, or -1\nif there is no such type_annotation of if it does not have a bytecode offset.", "predict": "This code appears to be related to Java bytecode manipulation, specifically it is used to determine the offset of a given type annotation in the bytecode."}, {"ID": 972, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def _get_site_coeffs(self, sites, imt): \"\"\" Extracts correct coefficients for each site from Table 5 on p. 208 for each site. :raises UserWarning: If vs30 is below limit for site class D, since \"E- and F-type sites [...] are susceptible for liquefaction and failure.\" p. 205. \"\"\" site_classes = self.get_nehrp_classes(sites) is_bedrock = self.is_bedrock(sites) if 'E' in site_classes: msg = ('Site class E and F not supported by %s' % type(self).__name__) warnings.warn(msg, UserWarning) a_1 = np.nan*np.ones_like(sites.vs30) a_2 = np.nan*np.ones_like(sites.vs30) sigma = np.nan*np.ones_like(sites.vs30) for key in self.COEFFS_NEHRP.keys(): indices = (site_classes == key) & ~is_bedrock a_1[indices] = self.COEFFS_NEHRP[key][imt]['a1'] a_2[indices] = self.COEFFS_NEHRP[key][imt]['a2'] sigma[indices] = self.COEFFS_NEHRP[key][imt]['sigma'] a_1[is_bedrock] = 0. a_2[is_bedrock] = 0. sigma[is_bedrock] = 0. return (a_1, a_2, sigma). \n### Response: Extracts correct coefficients for each site from Table 5 on p. 208\n        for each site.\n\n        :raises UserWarning:\n            If vs30 is below limit for site class D, since \"E- and F-type\n            sites [...] are susceptible for liquefaction and failure.\" p. 205..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private int readElementValues( final AnnotationVisitor annotationVisitor, final int annotationOffset, final boolean named, final char[] charBuffer) { int currentOffset = annotationOffset; // Read the num_element_value_pairs field (or num_values field for an array_value). int numElementValuePairs = readUnsignedShort(currentOffset); currentOffset += 2; if (named) { // Parse the element_value_pairs array. while (numElementValuePairs-- > 0) { String elementName = readUTF8(currentOffset, charBuffer); currentOffset = readElementValue(annotationVisitor, currentOffset + 2, elementName, charBuffer); } } else { // Parse the array_value array. while (numElementValuePairs-- > 0) { currentOffset = readElementValue(annotationVisitor, currentOffset, /* named = */ null, charBuffer); } } if (annotationVisitor != null) { annotationVisitor.visitEnd(); } return currentOffset; } \n### Response:", "ground_truth": "Reads the element values of a JVMS 'annotation' structure and makes the given visitor visit\nthem. This method can also be used to read the values of the JVMS 'array_value' field of an\nannotation's 'element_value'.\n\n@param annotationVisitor the visitor that must visit the values.\n@param annotationOffset the start offset of an 'annotation' structure (excluding its type_index\nfield) or of an 'array_value' structure.\n@param named if the annotation values are named or not. This should be true to parse the values\nof a JVMS 'annotation' structure, and false to parse the JVMS 'array_value' of an\nannotation's element_value.\n@param charBuffer the buffer used to read strings in the constant pool.\n@return the end offset of the JVMS 'annotation' or 'array_value' structure.", "predict": "This method reads the values of elements in an annotation and returns the current offset in the annotation. It uses the `readUnsignedShort` and `readUTF8` functions to read the number of element value pairs and element names, respectively. It then uses a loop to parse the element value pairs and array values. If the annotation is named, it reads the element name using the `readUTF8` function and continues to parse the values. Otherwise, it reads the values using the same loop. If the annotation visitor is not null, it visits the end of the annotation."}, {"ID": 973, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def add_edge_fun(graph): \"\"\" Returns a function that adds an edge to the `graph` checking only the out node. :param graph: A directed graph. :type graph: networkx.classes.digraph.DiGraph :return: A function that adds an edge to the `graph`. :rtype: callable \"\"\" # Namespace shortcut for speed. succ, pred, node = graph._succ, graph._pred, graph._node def add_edge(u, v, **attr): if v not in succ: # Add nodes. succ[v], pred[v], node[v] = {}, {}, {} succ[u][v] = pred[v][u] = attr # Add the edge. return add_edge. \n### Response: Returns a function that adds an edge to the `graph` checking only the out\n    node.\n\n    :param graph:\n        A directed graph.\n    :type graph: networkx.classes.digraph.DiGraph\n\n    :return:\n        A function that adds an edge to the `graph`.\n    :rtype: callable.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private int readVerificationTypeInfo( final int verificationTypeInfoOffset, final Object[] frame, final int index, final char[] charBuffer, final Label[] labels) { int currentOffset = verificationTypeInfoOffset; int tag = b[currentOffset++] & 0xFF; switch (tag) { case Frame.ITEM_TOP: frame[index] = Opcodes.TOP; break; case Frame.ITEM_INTEGER: frame[index] = Opcodes.INTEGER; break; case Frame.ITEM_FLOAT: frame[index] = Opcodes.FLOAT; break; case Frame.ITEM_DOUBLE: frame[index] = Opcodes.DOUBLE; break; case Frame.ITEM_LONG: frame[index] = Opcodes.LONG; break; case Frame.ITEM_NULL: frame[index] = Opcodes.NULL; break; case Frame.ITEM_UNINITIALIZED_THIS: frame[index] = Opcodes.UNINITIALIZED_THIS; break; case Frame.ITEM_OBJECT: frame[index] = readClass(currentOffset, charBuffer); currentOffset += 2; break; case Frame.ITEM_UNINITIALIZED: frame[index] = createLabel(readUnsignedShort(currentOffset), labels); currentOffset += 2; break; default: throw new IllegalArgumentException(); } return currentOffset; } \n### Response:", "ground_truth": "Reads a JVMS 'verification_type_info' structure and stores it at the given index in the given\narray.\n\n@param verificationTypeInfoOffset the start offset of the 'verification_type_info' structure to\nread.\n@param frame the array where the parsed type must be stored.\n@param index the index in 'frame' where the parsed type must be stored.\n@param charBuffer the buffer used to read strings in the constant pool.\n@param labels the labels of the method currently being parsed, indexed by their offset. If the\nparsed type is an ITEM_Uninitialized, a new label for the corresponding NEW instruction is\nstored in this array if it does not already exist.\n@return the end offset of the JVMS 'verification_type_info' structure.", "predict": "This method reads the verification type information for a frame and returns the current offset. It uses a binary buffer to read the tag of the frame and a switch statement to determine the type of frame being read. If the tag is not a valid frame type, an IllegalArgumentException is thrown. The method then reads the contents of the frame and returns the current offset.\n\nThis method is useful for reading the verification type information for a frame, such as the top level class, the integer value, the floating-point value, the double value, the long value, the null value, the uninitialized this value, and the uninitialized label value."}, {"ID": 974, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func readNextChunk(r wire.SyncScanner) (io.Reader, error) { status, err := r.ReadStatus(\"read-chunk\") if err != nil { if wire.IsAdbServerErrorMatching(err, readFileNotFoundPredicate) { return nil, errors.Errorf(errors.FileNoExistError, \"no such file or directory\") } return nil, err } switch status { case wire.StatusSyncData: return r.ReadBytes() case wire.StatusSyncDone: return nil, io.EOF default: return nil, errors.Errorf(errors.AssertionError, \"expected chunk id '%s' or '%s', but got '%s'\", wire.StatusSyncData, wire.StatusSyncDone, []byte(status)) } }. \n### Response: // readNextChunk creates an io.LimitedReader for the next chunk of data,\n// and returns io.EOF if the last chunk has been read..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private int[] readBootstrapMethodsAttribute(final int maxStringLength) { char[] charBuffer = new char[maxStringLength]; int currentAttributeOffset = getFirstAttributeOffset(); int[] currentBootstrapMethodOffsets = null; for (int i = readUnsignedShort(currentAttributeOffset - 2); i > 0; --i) { // Read the attribute_info's attribute_name and attribute_length fields. String attributeName = readUTF8(currentAttributeOffset, charBuffer); int attributeLength = readInt(currentAttributeOffset + 2); currentAttributeOffset += 6; if (Constants.BOOTSTRAP_METHODS.equals(attributeName)) { // Read the num_bootstrap_methods field and create an array of this size. currentBootstrapMethodOffsets = new int[readUnsignedShort(currentAttributeOffset)]; // Compute and store the offset of each 'bootstrap_methods' array field entry. int currentBootstrapMethodOffset = currentAttributeOffset + 2; for (int j = 0; j < currentBootstrapMethodOffsets.length; ++j) { currentBootstrapMethodOffsets[j] = currentBootstrapMethodOffset; // Skip the bootstrap_method_ref and num_bootstrap_arguments fields (2 bytes each), // as well as the bootstrap_arguments array field (of size num_bootstrap_arguments * 2). currentBootstrapMethodOffset += 4 + readUnsignedShort(currentBootstrapMethodOffset + 2) * 2; } return currentBootstrapMethodOffsets; } currentAttributeOffset += attributeLength; } return null; } \n### Response:", "ground_truth": "Reads the BootstrapMethods attribute to compute the offset of each bootstrap method.\n\n@param maxStringLength a conservative estimate of the maximum length of the strings contained\nin the constant pool of the class.\n@return the offsets of the bootstrap methods or null.", "predict": "// This method reads the bootstrap methods attribute from the specified maxStringLength,\n// and returns an array of integers representing the offset of each bootstrap method in the attribute.\n// It reads the attribute name and length, and then skips over the num_bootstrap_methods, bootstrap_method_ref,\n// and num_bootstrap_arguments fields, as well as the bootstrap_arguments array field.\n// The method returns null if no valid attribute is found."}, {"ID": 975, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (ctx *HookContext) killCharmHook() error { proc := ctx.GetProcess() if proc == nil { // nothing to kill return charmrunner.ErrNoProcess } logger.Infof(\"trying to kill context process %v\", proc.Pid()) tick := ctx.clock.After(0) timeout := ctx.clock.After(30 * time.Second) for { // We repeatedly try to kill the process until we fail; this is // because we don't control the *Process, and our clients expect // to be able to Wait(); so we can't Wait. We could do better, // but not with a single implementation across all platforms. // TODO(gsamfira): come up with a better cross-platform approach. select { case <-tick: err := proc.Kill() if err != nil { logger.Infof(\"kill returned: %s\", err) logger.Infof(\"assuming already killed\") return nil } case <-timeout: return errors.Errorf(\"failed to kill context process %v\", proc.Pid()) } logger.Infof(\"waiting for context process %v to die\", proc.Pid()) tick = ctx.clock.After(100 * time.Millisecond) } }. \n### Response: // killCharmHook tries to kill the current running charm hook..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected CtorDescriptor[] inspectConstructors() { Class type = classDescriptor.getType(); Constructor[] ctors = type.getDeclaredConstructors(); CtorDescriptor[] allCtors = new CtorDescriptor[ctors.length]; for (int i = 0; i < ctors.length; i++) { Constructor ctor = ctors[i]; CtorDescriptor ctorDescriptor = createCtorDescriptor(ctor); allCtors[i] = ctorDescriptor; if (ctorDescriptor.isDefault()) { defaultCtor = ctorDescriptor; } } return allCtors; } \n### Response:", "ground_truth": "Inspects all declared constructors of a target type.", "predict": "// inspectConstructors returns an array of all constructor descriptions for the given class.."}, {"ID": 976, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void setExpirationTime(long expirationTime) { if (lock == SET) { throw new IllegalStateException(\"EntryInfo is locked\"); } expirationTimeFlag = SET; this.expirationTime = expirationTime; this.timeLimit = (int) ((expirationTime - System.currentTimeMillis()) / 1000L); }. \n### Response: This sets the expirationTime variable.\n\n@param The new expiration time.\n@ibm-private-in-use.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public CtorDescriptor getCtorDescriptor(final Class... args) { ctors: for (CtorDescriptor ctorDescriptor : allCtors) { Class[] arg = ctorDescriptor.getParameters(); if (arg.length != args.length) { continue; } for (int j = 0; j < arg.length; j++) { if (arg[j] != args[j]) { continue ctors; } } return ctorDescriptor; } return null; } \n### Response:", "ground_truth": "Finds constructor description that matches given argument types.", "predict": "This method retrieves the CtorDescriptor for a specific class.\n\n@param The class to retrieve the CtorDescriptor for.\n@ibm-private-in-use.\n\n"}, {"ID": 977, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (fb *Firebase) Watch(notifications chan Event) error { fb.watchMtx.Lock() if fb.watching { fb.watchMtx.Unlock() close(notifications) return nil } fb.watching = true fb.watchMtx.Unlock() stop := make(chan struct{}) events, err := fb.watch(stop) if err != nil { return err } var closedManually bool go func() { <-fb.stopWatching closedManually = true stop <- struct{}{} }() go func() { defer close(notifications) for event := range events { if closedManually { return } notifications <- event } }() return nil }. \n### Response: // Watch listens for changes on a firebase instance and\n// passes over to the given chan.\n//\n// Only one connection can be established at a time. The\n// second call to this function without a call to fb.StopWatching\n// will close the channel given and return nil immediately..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @SuppressWarnings(\"unchecked\") protected Map<String, TransientBeanData> getRequestMap(final HttpServletRequest servletRequest) { return (Map<String, TransientBeanData>) servletRequest.getAttribute(ATTR_NAME); } \n### Response:", "ground_truth": "", "predict": "// Request map for the HttpServletRequest.\n//\n// Returns a map of key-value pairs from the request's attributes.\n// The map is returned as a (Map<String, TransientBeanData>) object.\n// This is a safe way to retrieve the request map without having to cast the\n// returned value to a Map<String, TransientBeanData>.\n```"}, {"ID": 978, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public Optional<Integer> intArg(final String name) { return arg(name) .flatMap(s -> parse(s, Integer::valueOf)); }. \n### Response: Return the int-argument with the given name.\n\n@param name the argument name\n@return the int argument value, if any.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected Map<String, TransientBeanData> createRequestMap(final HttpServletRequest servletRequest) { Map<String, TransientBeanData> map = new HashMap<>(); servletRequest.setAttribute(ATTR_NAME, map); return map; } \n### Response:", "ground_truth": "Creates instance map and stores it in the request.", "predict": "Create a map of request attributes.\n\n@param servletRequest the HttpServletRequest object\n@return the map of request attributes."}, {"ID": 979, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static function createFromEdgeRcFile($section = 'default', $file = null) { $signer = Signer::createFromEdgeRcFile($section, $file); $auth = new static(); $auth->setSigner($signer); return $auth; }. \n### Response: Create Handler using an .edgerc file\n\nAutomatically create a valid authentication handler using\nan .edgerc file\n\n@param string $section\n@param null $file\n\n@return static.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected long[] convertArrayToArray(final Object value) { final Class valueComponentType = value.getClass().getComponentType(); final long[] result; if (valueComponentType.isPrimitive()) { result = convertPrimitiveArrayToArray(value, valueComponentType); } else { // convert object array to target array final Object[] array = (Object[]) value; result = new long[array.length]; for (int i = 0; i < array.length; i++) { result[i] = convertType(array[i]); } } return result; } \n### Response:", "ground_truth": "Converts array value to array.", "predict": "Convert an Object array to a long array\n\nThis method converts an object array to a target array of long values.\n\n@param object value\n\n@return long array."}, {"ID": 980, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def verify(token, key, algorithms, verify=True): \"\"\"Verifies a JWS string's signature. Args: token (str): A signed JWS to be verified. key (str or dict): A key to attempt to verify the payload with. Can be individual JWK or JWK set. algorithms (str or list): Valid algorithms that should be used to verify the JWS. Returns: str: The str representation of the payload, assuming the signature is valid. Raises: JWSError: If there is an exception verifying a token. Examples: >>> token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhIjoiYiJ9.jiMyrsmD8AoHWeQgmxZ5yq8z0lXS67_QGs52AzC8Ru8' >>> jws.verify(token, 'secret', algorithms='HS256') \"\"\" header, payload, signing_input, signature = _load(token) if verify: _verify_signature(signing_input, header, signature, key, algorithms) return payload. \n### Response: Verifies a JWS string's signature.\n\n    Args:\n        token (str): A signed JWS to be verified.\n        key (str or dict): A key to attempt to verify the payload with. Can be\n            individual JWK or JWK set.\n        algorithms (str or list): Valid algorithms that should be used to verify the JWS.\n\n    Returns:\n        str: The str representation of the payload, assuming the signature is valid.\n\n    Raises:\n        JWSError: If there is an exception verifying a token.\n\n    Examples:\n\n        >>> token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhIjoiYiJ9.jiMyrsmD8AoHWeQgmxZ5yq8z0lXS67_QGs52AzC8Ru8'\n        >>> jws.verify(token, 'secret', algorithms='HS256').\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public void init(final FilterConfig filterConfig) throws ServletException { // final String decoraManagerClass = filterConfig.getInitParameter(PARAM_DECORA_MANAGER); if (decoraManagerClass != null) { try { final Class decoraManagerType = ClassLoaderUtil.loadClass(decoraManagerClass); decoraManager = (DecoraManager) ClassUtil.newInstance(decoraManagerType); } catch (Exception ex) { log.error(\"Unable to load Decora manager class: \" + decoraManagerClass, ex); throw new ServletException(ex); } } else { decoraManager = createDecoraManager(); } // final String decoraParserClass = filterConfig.getInitParameter(PARAM_DECORA_PARSER); if (decoraParserClass != null) { try { final Class decoraParserType = ClassLoaderUtil.loadClass(decoraParserClass); decoraParser = (DecoraParser) ClassUtil.newInstance(decoraParserType); } catch (Exception ex) { log.error(\"Unable to load Decora parser class: \" + decoraParserClass, ex); throw new ServletException(ex); } } else { decoraParser = createDecoraParser(); } // final String decoraCache = filterConfig.getInitParameter(PARAM_DECORA_CACHE); if (decoraCache != null) { cached = Converter.get().toBoolean(decoraCache, false); } } \n### Response:", "ground_truth": "Initializes Decora filter. Loads manager and parser from init parameters.", "predict": "### Verify a JWS string's signature.\n\nThis method verifies a JWS string's signature. It first checks if a key and algorithms parameter have been provided. If so, it loads the JWS manager and parser classes, and creates a manager and parser instance. If the manager class cannot be loaded, it logs an error and throws a ServletException. It then creates a manager instance and uses it to load the JWS parser class. If the parser class cannot be loaded, it logs an error and throws a ServletException. Finally, it checks if the cache parameter has been provided and, if so, sets the value of the cache to a boolean value indicating whether the JWS has already been verified.\n\n### Example:\n```python\n>>> token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhIjoiYiJ9.jiMyrsmD8AoHWeQgmxZ5yq8z0lXS67_QGs52AzC8Ru8'\n>>> jws.verify(token,'secret', algorithms='HS256')\n```\nNote that the JWS string must be signed using a secret key and the specified algorithms. The returned value is the str representation of the payload, assuming the signature is valid.\n\nNote that this method is only called if the JWS manager and parser classes have been provided. If the JWS manager and parser classes cannot be loaded, the method will throw a ServletException."}, {"ID": 981, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected function getScssVars() { $sass = ''; // Required foreach ( $this->requiredSassVars as $var ) { $method = $this->varToGetter( $var ); if ( ! method_exists( $this->input, $method ) ) { throw new \\LogicException( \"Input::{$method}() not found.\" ); } if ( empty( $this->input->{$method}() ) ) { throw new \\InvalidArgumentException( \"Input::{$method}() cannot be empty.\" ); } $sass .= \"\\${$var}: \" . $this->input->{$method}() . \";\\n\"; } // Optional foreach ( $this->optionalSassVars as $var ) { $method = $this->varToGetter( $var ); if ( method_exists( $this->input, $method ) && ! empty( $this->input->{$method}() ) ) { $sass .= \"\\${$var}: \" . $this->input->{$method}() . \";\\n\"; } } return $sass; }. \n### Response: Generate SCSS vars based on Input object\n\n@throws \\LogicException\n@throws \\InvalidArgumentException\n\n@return string.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public FindFile onFile(final Consumer<File> fileConsumer) { if (consumers == null) { consumers = Consumers.of(fileConsumer); } else { consumers.add(fileConsumer); } return this; } \n### Response:", "ground_truth": "Registers file consumer", "predict": "FindFile.onFile(Consumer<File>).\n\n@param fileConsumer Consumer<File> to add to the consumers list.\n\n@return the FindFile object."}, {"ID": 982, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void initializePieces() { pieces.add(new Piece(\"x\", \" x /xxx/ x \", false, oneRotation)); pieces.add(new Piece(\"v\", \"x /x /xxx\", false, fourRotations)); pieces.add(new Piece(\"t\", \"xxx/ x / x \", false, fourRotations)); pieces.add(new Piece(\"w\", \" x/ xx/xx \", false, fourRotations)); pieces.add(new Piece(\"u\", \"x x/xxx\", false, fourRotations)); pieces.add(new Piece(\"i\", \"xxxxx\", false, twoRotations)); pieces.add(new Piece(\"f\", \" xx/xx / x \", true, fourRotations)); pieces.add(new Piece(\"p\", \"xx/xx/x \", true, fourRotations)); pieces.add(new Piece(\"z\", \"xx / x / xx\", true, twoRotations)); pieces.add(new Piece(\"n\", \"xx / xxx\", true, fourRotations)); pieces.add(new Piece(\"y\", \" x /xxxx\", true, fourRotations)); pieces.add(new Piece(\"l\", \" x/xxxx\", true, fourRotations)); }. \n### Response: Fill in the pieces list..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public FindFile searchPath(final URI searchPath) { File file; try { file = new File(searchPath); } catch (Exception ex) { throw new FindFileException(\"URI error: \" + searchPath, ex); } addPath(file); return this; } \n### Response:", "ground_truth": "Specifies the search path. Throws an exception if URI is invalid.", "predict": "This method searches for a file in the specified search path and adds it to the FindFile object's path list. It also returns the FindFile object itself."}, {"ID": 983, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (s *session) fillRecord(r *sessionRecord, snapshot bool) { r.setNextFileNum(s.nextFileNum()) if snapshot { if !r.has(recJournalNum) { r.setJournalNum(s.stJournalNum) } if !r.has(recSeqNum) { r.setSeqNum(s.stSeqNum) } for level, ik := range s.stCompPtrs { if ik != nil { r.addCompPtr(level, ik) } } r.setComparer(s.icmp.uName()) } }. \n### Response: // Manifest related utils.\n// Fill given session record obj with current states; need external\n// synchronization..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public FindFile searchPath(final URL searchPath) { File file = FileUtil.toContainerFile(searchPath); if (file == null) { throw new FindFileException(\"URL error: \" + searchPath); } addPath(file); return this; } \n### Response:", "ground_truth": "Specifies the search path. Throws an exception if URL is invalid.", "predict": "// Find file by path.\n// Returns the found file or throws an exception if the search path is invalid.\n// Adds the found file to the list of matching files."}, {"ID": 984, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def makeProductPicker(self): \"\"\" Make a LiveForm with radio buttons for each Product in the store. \"\"\" productPicker = liveform.LiveForm( self.coerceProduct, [liveform.Parameter( str(id(product)), liveform.FORM_INPUT, liveform.LiveForm( lambda selectedProduct, product=product: selectedProduct and product, [liveform.Parameter( 'selectedProduct', liveform.RADIO_INPUT, bool, repr(product))] )) for product in self.original.store.parent.query(Product)], u\"Product to Install\") return productPicker. \n### Response: Make a LiveForm with radio buttons for each Product in the store..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public FindFile include(final String... patterns) { for (String pattern : patterns) { rules.include(pattern); } return this; } \n### Response:", "ground_truth": "Defines include patterns.", "predict": "public FindFile include(final String... patterns) {\nfor (String pattern : patterns) {\nrules.include(pattern);\n}\nreturn this;\n}"}, {"ID": 985, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function add_unit($questiondata, $answer, $unit = null) { if (is_null($unit)) { $unit = $this->get_default_numerical_unit($questiondata); } if (!$unit) { return $answer; } if (!empty($questiondata->options->unitsleft)) { return $unit->unit . ' ' . $answer; } else { return $answer . ' ' . $unit->unit; } }. \n### Response: Add a unit to a response for display.\n@param object $questiondata the data defining the quetsion.\n@param string $answer a response.\n@param object $unit a unit. If null, {@link get_default_numerical_unit()}\nis used..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public FindFile exclude(final String... patterns) { for (String pattern : patterns) { rules.exclude(pattern); } return this; } \n### Response:", "ground_truth": "Defines exclude patterns.", "predict": "Excludes specified patterns from the search.\n@return the FindFile instance, excluding the specified patterns.\n\n"}, {"ID": 986, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static GraphCsvReader fromCsvReader(String verticesPath, String edgesPath, ExecutionEnvironment context) { return new GraphCsvReader(verticesPath, edgesPath, context); }. \n### Response: Creates a Graph from a CSV file of vertices and a CSV file of edges.\n\n@param verticesPath path to a CSV file with the Vertex data.\n@param edgesPath path to a CSV file with the Edge data\n@param context the Flink execution environment.\n@return An instance of {@link org.apache.flink.graph.GraphCsvReader},\non which calling methods to specify types of the Vertex ID, Vertex value and Edge value returns a Graph.\n\n@see org.apache.flink.graph.GraphCsvReader#types(Class, Class, Class)\n@see org.apache.flink.graph.GraphCsvReader#vertexTypes(Class, Class)\n@see org.apache.flink.graph.GraphCsvReader#edgeTypes(Class, Class)\n@see org.apache.flink.graph.GraphCsvReader#keyType(Class).\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void addPath(final File path) { if (!path.exists()) { return; } if (pathList == null) { pathList = new LinkedList<>(); } pathList.add(path); } \n### Response:", "ground_truth": "Adds existing search path to the file list.\nNon existing files are ignored.\nIf path is a folder, it will be scanned for all files.", "predict": "Adds a path to the list of paths in the `pathList` variable.\n\n@param path the file path to add to the list of paths.\n@return void."}, {"ID": 987, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private static void deleteBackups(final List<File> files, final int count) { if (count >= 0) { for (int i = files.size() - Math.max(0, files.size() - count); i < files.size(); ++i) { if (!files.get(i).delete()) { InternalLogger.log(Level.WARN, \"Failed to delete log file '\" + files.get(i).getAbsolutePath() + \"'\"); } } } }. \n### Response: Deletes old log files.\n\n@param files\nAll existing log files\n@param count\nNumber of log files to keep.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public List<File> findAll() { List<File> allFiles = new ArrayList<>(); File file; while ((file = nextFile()) != null) { allFiles.add(file); } return allFiles; } \n### Response:", "ground_truth": "Finds all files and returns list of founded files.", "predict": "This method returns a list of all the files in the directory.\n\n@return\nA list of all the files in the directory.\n\n@param directory\nThe directory to search for files.\n\n"}, {"ID": 988, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function getEnabledExtensions() { $enabled = []; $extensions = $this->getExtensions(); foreach ($this->getEnabled() as $id) { if (isset($extensions[$id])) { $enabled[$id] = $extensions[$id]; } } return $enabled; }. \n### Response: Get only enabled extensions.\n\n@return array.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void init() { rules.detectMode(); todoFiles = new LinkedList<>(); todoFolders = new LinkedList<>(); if (pathList == null) { pathList = new LinkedList<>(); return; } if (pathListOriginal == null) { pathListOriginal = (LinkedList<File>) pathList.clone(); } String[] files = new String[pathList.size()]; int index = 0; Iterator<File> iterator = pathList.iterator(); while (iterator.hasNext()) { File file = iterator.next(); if (file.isFile()) { files[index++] = file.getAbsolutePath(); iterator.remove(); } } if (index != 0) { FilesIterator filesIterator = new FilesIterator(files); todoFiles.add(filesIterator); } } \n### Response:", "ground_truth": "Initializes file walking.\nSeparates input files and folders.", "predict": "Initialize the todo list.\n\n@return the todo list."}, {"ID": 989, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (c *FakePods) Delete(name string, options *v1.DeleteOptions) error { _, err := c.Fake. Invokes(testing.NewDeleteAction(podsResource, c.ns, name), &corev1.Pod{}) return err }. \n### Response: // Delete takes name of the pod and deletes it. Returns an error if one occurs..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public Iterator<File> iterator() { return new Iterator<File>() { private File nextFile; @Override public boolean hasNext() { nextFile = nextFile(); return nextFile != null; } @Override public File next() { if (nextFile == null) { throw new NoSuchElementException(); } return nextFile; } @Override public void remove() { throw new UnsupportedOperationException(); } }; } \n### Response:", "ground_truth": "Returns file walking iterator.", "predict": "// This method implements an iterator for the File class. It returns a new iterator that iterates through the files in the specified directory. The method throws an UnsupportedOperationException if the directory cannot be found."}, {"ID": 990, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function writeCachedContent($content) { if ($this->source->recompiled || !($this->caching == Smarty::CACHING_LIFETIME_CURRENT || $this->caching == Smarty::CACHING_LIFETIME_SAVED)) { // don't write cache file return false; } $this->properties['cache_lifetime'] = $this->cache_lifetime; $this->properties['unifunc'] = 'content_' . str_replace('.', '_', uniqid('', true)); $content = $this->createTemplateCodeFrame($content, true); $_smarty_tpl = $this; eval(\"?>\" . $content); $this->cached->valid = true; $this->cached->processed = true; return $this->cached->write($this, $content); }. \n### Response: Writes the cached template output\n\n@return bool.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public WiringMode resolveBeanWiringMode(final Class type) { PetiteBean petiteBean = ((Class<?>) type).getAnnotation(PetiteBean.class); return petiteBean != null ? petiteBean.wiring() : WiringMode.DEFAULT; } \n### Response:", "ground_truth": "Resolves bean's auto-wire flag from the annotation. Returns default auto-wire if annotation doesn't exist.", "predict": "Resolves the WiringMode for the given type.\n\n@param type the class to resolve the WiringMode for.\n@return the WiringMode or WiringMode.DEFAULT if the annotation is not found."}, {"ID": 991, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public void outputText(SDocumentGraph graph, boolean alignmc, int matchNumber, Writer out) throws IOException, IllegalArgumentException { // first match if (matchNumber == 0) { // output header List<String> headerLine = new ArrayList<>(); for(Map.Entry<Integer, TreeSet<String>> match: annotationsForMatchedNodes.entrySet()) { int node_id = match.getKey(); headerLine.add(String.valueOf(node_id) + \"_id\"); headerLine.add(String.valueOf(node_id) + \"_span\"); for (String annoName: match.getValue()) { headerLine.add(String.valueOf(node_id) + \"_anno_\" + annoName); } } for (String key: metakeys) { headerLine.add(\"meta_\" + key); } out.append(StringUtils.join(headerLine, \"\\t\")); out.append(\"\\n\"); } // output nodes in the order of the matches SortedMap<Integer, String> contentLine = new TreeMap<>(); for (SNode node: this.getMatchedNodes(graph)) { List<String> nodeLine = new ArrayList<>(); // export id RelannisNodeFeature feats = RelannisNodeFeature.extract(node); nodeLine.add(String.valueOf(feats.getInternalID())); // export spanned text String span = graph.getText(node); if (span != null) nodeLine.add(graph.getText(node)); else nodeLine.add(\"\"); // export annotations int node_id = node .getFeature(AnnisConstants.ANNIS_NS, AnnisConstants.FEAT_MATCHEDNODE) .getValue_SNUMERIC().intValue(); for (String annoName: annotationsForMatchedNodes.get(node_id)) { SAnnotation anno = node.getAnnotation(annoName); if (anno != null) { nodeLine.add(anno.getValue_STEXT()); } else nodeLine.add(\"'NULL'\"); } // add everything to line contentLine.put(node_id, StringUtils.join(nodeLine, \"\\t\")); } out.append(StringUtils.join(contentLine.values(), \"\\t\")); // export Metadata // TODO cache the metadata if(!metakeys.isEmpty()) { // TODO is this the best way to get the corpus name? String corpus_name = CommonHelper.getCorpusPath(java.net.URI.create(graph.getDocument().getId())).get(0); List<Annotation> asList = Helper.getMetaData(corpus_name, graph.getDocument().getName()); for(Annotation anno : asList) { if (metakeys.contains(anno.getName())) out.append(\"\\t\" + anno.getValue()); } } out.append(\"\\n\"); }. \n### Response: Takes a match and outputs a csv-line\n\n@param graph\n@param alignmc\n@param matchNumber\n@param out\n\n@throws java.io.IOException.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public String resolveBeanName(final Class type, final boolean useLongTypeName) { PetiteBean petiteBean = ((Class<?>)type).getAnnotation(PetiteBean.class); String name = null; if (petiteBean != null) { name = petiteBean.value().trim(); } if ((name == null) || (name.length() == 0)) { if (useLongTypeName) { name = type.getName(); } else { name = StringUtil.uncapitalize(type.getSimpleName()); } } return name; } \n### Response:", "ground_truth": "Resolves bean's name from bean annotation or type name. May be used for resolving bean name\nof base type during registration of bean subclass.", "predict": "This method resolve the bean name of a given type using the PetiteBean annotation.\n\n@param type\nThe type to resolve the bean name for.\n@param useLongTypeName\nIf true, use the long type name instead of the short type name.\n@return\nThe resolved bean name."}, {"ID": 992, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static function getAllArrayItemsByKeyPrefix($array, $prefix, $stripPrefix = false) { $returnValues = array(); foreach ($array as $key => $value) { $positionOfPrefix = strpos($key, $prefix); if (is_numeric($positionOfPrefix) && $positionOfPrefix == 0) { if ($stripPrefix) $key = substr($key, strlen($prefix)); $returnValues [$key] = $value; } } return $returnValues; }. \n### Response: Find all parameters in the passed array with a key starting with the supplied prefix.\nReturn them as an associative array by key.\n\n@param array $array\n@param string $prefix\n\n@return array.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public PrintWriter getWriter() { if (outWriter == null) { if (outStream != null) { throw new IllegalStateException(\"Can't call getWriter() after getOutputStream()\"); } bufferedWriter = new FastCharArrayWriter(); outWriter = new PrintWriter(bufferedWriter) { @Override public void close() { // do not close the print writer after rendering // since it will remove reference to bufferedWriter } }; } return outWriter; } \n### Response:", "ground_truth": "Returns a writer.", "predict": "This method returns the PrintWriter object for the output stream.\n\n@param PrintWriter $outWriter\n\n@return PrintWriter object."}, {"ID": 993, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func SetLogger(l Logger) Logger { logMux.Lock() defer logMux.Unlock() old := logBackend logBackend = l return old }. \n### Response: // SetLogger sets a new logger..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public ServletOutputStream getOutputStream() { if (outStream == null) { if (outWriter != null) { throw new IllegalStateException(\"Can't call getOutputStream() after getWriter()\"); } bufferOutputStream = new FastByteArrayServletOutputStream(); outStream = bufferOutputStream; } return outStream; } \n### Response:", "ground_truth": "Returns a servlet output stream.", "predict": "// ServletOutputStream returns the output stream associated with the outWriter.."}, {"ID": 994, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def get_configs(self): \"\"\" Return a list of all installed configs. \"\"\" self.check_configs_ready() result = [] for bot in self.bots.values(): result.extend(list(bot.get_models())) return result. \n### Response: Return a list of all installed configs..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public String getClassName() { switch (sort) { case VOID: return \"void\"; case BOOLEAN: return \"boolean\"; case CHAR: return \"char\"; case BYTE: return \"byte\"; case SHORT: return \"short\"; case INT: return \"int\"; case FLOAT: return \"float\"; case LONG: return \"long\"; case DOUBLE: return \"double\"; case ARRAY: StringBuilder stringBuilder = new StringBuilder(getElementType().getClassName()); for (int i = getDimensions(); i > 0; --i) { stringBuilder.append(\"[]\"); } return stringBuilder.toString(); case OBJECT: case INTERNAL: return valueBuffer.substring(valueBegin, valueEnd).replace('/', '.'); default: throw new AssertionError(); } } \n### Response:", "ground_truth": "Returns the binary name of the class corresponding to this type. This method must not be used\non method types.\n\n@return the binary name of the class corresponding to this type.", "predict": "This method returns the class name of the sort type.."}, {"ID": 995, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (r *HashRing) Servers() []string { r.RLock() servers := r.copyServersNoLock() r.RUnlock() return servers }. \n### Response: // Servers returns all servers contained in the HashRing..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String getConstructorDescriptor(final Constructor<?> constructor) { StringBuilder stringBuilder = new StringBuilder(); stringBuilder.append('('); Class<?>[] parameters = constructor.getParameterTypes(); for (Class<?> parameter : parameters) { appendDescriptor(parameter, stringBuilder); } return stringBuilder.append(\")V\").toString(); } \n### Response:", "ground_truth": "Returns the descriptor corresponding to the given constructor.\n\n@param constructor a {@link Constructor} object.\n@return the descriptor of the given constructor.", "predict": "// GetConstructorDescriptor returns the constructor descriptor for the given constructor.."}, {"ID": 996, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function matches_filter(filters, logicalPath, filename) { if (filters.length === 0) { return true; } return _.some(filters, function (filter) { if (_.isRegExp(filter)) { return filter.test(logicalPath); } if (_.isFunction(filter)) { return filter(logicalPath, filename); } // prepare string to become RegExp. // mimics shell's globbing filter = filter.toString().replace(/\\*\\*|\\*|\\?|\\\\.|\\./g, function (m) { if (m[0] === '*') { return m === '**' ? '.+?' : '[^/]+?'; } if (m[0] === '?') { return '[^/]?'; } if (m[0] === '.') { return '\\\\.'; } // handle `\\\\.` part return m; }); // prepare RegExp filter = new RegExp('^' + filter + '$'); return filter.test(logicalPath); }); }. \n### Response: Returns true if there were no filters, or `filename` matches at least one.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String getMethodDescriptor(final Type returnType, final Type... argumentTypes) { StringBuilder stringBuilder = new StringBuilder(); stringBuilder.append('('); for (Type argumentType : argumentTypes) { argumentType.appendDescriptor(stringBuilder); } stringBuilder.append(')'); returnType.appendDescriptor(stringBuilder); return stringBuilder.toString(); } \n### Response:", "ground_truth": "Returns the descriptor corresponding to the given argument and return types.\n\n@param returnType the return type of the method.\n@param argumentTypes the argument types of the method.\n@return the descriptor corresponding to the given argument and return types.", "predict": "Returns a string describing the method's parameters and return type."}, {"ID": 997, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @LogExecTime public void verifyElementText(String locator, String value, String message) { jtCore.verifyElementText(locator, value, message); }. \n### Response: Allow custom message to verifyElementText.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String getMethodDescriptor(final Method method) { StringBuilder stringBuilder = new StringBuilder(); stringBuilder.append('('); Class<?>[] parameters = method.getParameterTypes(); for (Class<?> parameter : parameters) { appendDescriptor(parameter, stringBuilder); } stringBuilder.append(')'); appendDescriptor(method.getReturnType(), stringBuilder); return stringBuilder.toString(); } \n### Response:", "ground_truth": "Returns the descriptor corresponding to the given method.\n\n@param method a {@link Method} object.\n@return the descriptor of the given method.", "predict": "This method returns the method descriptor for a given method."}, {"ID": 998, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (b *Bundle) ApplicationConfig() (Application, bool) { result := b.channelConfig.ApplicationConfig() return result, result != nil }. \n### Response: // ApplicationConfig returns the configtxapplication.SharedConfig for the channel\n// and whether the Application config exists..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private void appendDescriptor(final StringBuilder stringBuilder) { if (sort == OBJECT) { stringBuilder.append(valueBuffer, valueBegin - 1, valueEnd + 1); } else if (sort == INTERNAL) { stringBuilder.append('L').append(valueBuffer, valueBegin, valueEnd).append(';'); } else { stringBuilder.append(valueBuffer, valueBegin, valueEnd); } } \n### Response:", "ground_truth": "Appends the descriptor corresponding to this type to the given string buffer.\n\n@param stringBuilder the string builder to which the descriptor must be appended.", "predict": "// appendDescriptor appends the value of the given descriptor to the given StringBuilder\n// and sorts the output in ascending order based on the sort value.\n\nNote: This method is used to append a descriptor to a string builder. The sort value determines the order in which the elements of the descriptor will be appended."}, {"ID": 999, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function registerProvider($id, $provider) { if (is_array($provider)) { $provider['id'] = $id; $provider = Yii::createObject($provider); } if (!($provider instanceof ProviderInterface)) { throw new InvalidConfigException(\"Invalid provider provided to key provider component\"); } $this->providers[$id] = $provider; }. \n### Response: Register a provider with the component\n\n@param  string\t\t\t\t\t\t\t\t$id \t\tID of provider to register\n@param  providers\\ProviderInterface|array\t$provider\tProvider to register\n@throws InvalidConfigException \tWhen provider is invalid.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public int getSize() { switch (sort) { case VOID: return 0; case BOOLEAN: case CHAR: case BYTE: case SHORT: case INT: case FLOAT: case ARRAY: case OBJECT: case INTERNAL: return 1; case LONG: case DOUBLE: return 2; default: throw new AssertionError(); } } \n### Response:", "ground_truth": "Returns the size of values of this type. This method must not be used for method types.\n\n@return the size of values of this type, i.e., 2 for {@code long} and {@code double}, 0 for\n{@code void} and 1 otherwise.", "predict": "Returns the size of the sort order.\n\n@return The size of the sort order.\n\n@switch statement to handle different types of sorting.\n\n@default: throws an assertion error if the sort order is not recognized."}, {"ID": 1000, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function getTapeContent($name) { $tape = $this->getTape($name); if ($tape->hasResponses()) { $content = $this->formatter->encodeResponsesCollection($tape->getResponses()); return $content; } return; }. \n### Response: Returns the content of a specific tape without writing it to disk.\n\n@param string $name\n\n@return null|string.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static int getArgumentsAndReturnSizes(final String methodDescriptor) { int argumentsSize = 1; // Skip the first character, which is always a '('. int currentOffset = 1; int currentChar = methodDescriptor.charAt(currentOffset); // Parse the argument types and compute their size, one at a each loop iteration. while (currentChar != ')') { if (currentChar == 'J' || currentChar == 'D') { currentOffset++; argumentsSize += 2; } else { while (methodDescriptor.charAt(currentOffset) == '[') { currentOffset++; } if (methodDescriptor.charAt(currentOffset++) == 'L') { // Skip the argument descriptor content. currentOffset = methodDescriptor.indexOf(';', currentOffset) + 1; } argumentsSize += 1; } currentChar = methodDescriptor.charAt(currentOffset); } currentChar = methodDescriptor.charAt(currentOffset + 1); if (currentChar == 'V') { return argumentsSize << 2; } else { int returnSize = (currentChar == 'J' || currentChar == 'D') ? 2 : 1; return argumentsSize << 2 | returnSize; } } \n### Response:", "ground_truth": "Computes the size of the arguments and of the return value of a method.\n\n@param methodDescriptor a method descriptor.\n@return the size of the arguments of the method (plus one for the implicit this argument),\nargumentsSize, and the size of its return value, returnSize, packed into a single int i =\n{@code (argumentsSize << 2) | returnSize} (argumentsSize is therefore equal to {@code\ni >> 2}, and returnSize to {@code i & 0x03}).", "predict": "This method is used to retrieve the arguments and return sizes for a specific method descriptor. It starts by initializing the argumentsSize variable to 1 and the currentOffset to 1. It then reads the first character of the method descriptor, which is always a '('. The method then enters a while loop that continues until the character'')' is found. In each iteration of the loop, it checks if the current character is either 'J' or 'D'. If it is, it increments the argumentsSize variable by 2. If it is not, it continues to the next iteration of the loop.\n\nIn the next iteration of the loop, the method reads the character '[' and continues to the next iteration of the loop. If the current character is 'L', it skips the argument descriptor content and increments the argumentsSize variable by 1. If the current character is not 'L', it reads the next character of the method descriptor and checks if it is either 'J' or 'D'. If it is, it increments the argumentsSize variable by 2.\n\nAfter the loop, the method reads the character 'V' and checks if it is equal to 'J' or 'D'. If it is, it returns the argumentSize variable's bit shift value (<< 2). If it is not, it checks if the current character is 'J' or 'D' and returns the appropriate argumentSize variable value (2 or 1).\n\nFinally, the method reads the character '(' and returns the argumentsSize variable."}, {"ID": 1001, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void beforeRequest (@Nonnull final HttpUriRequest aRequest, @Nullable final HttpContext aHttpContext) { if (isEnabled ()) if (LOGGER.isInfoEnabled ()) LOGGER.info (\"Before HTTP call: \" + aRequest.getMethod () + \" \" + aRequest.getURI () + (aHttpContext != null ? \" (with special HTTP context)\" : \"\")); }. \n### Response: Call before an invocation\n\n@param aRequest\nThe request to be executed. May not be null.\n@param aHttpContext\nThe special HTTP content for this call. May be null..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void setRollbackOnly(final Throwable th) { if (!isNoTransaction()) { if ((status != STATUS_MARKED_ROLLBACK) && (status != STATUS_ACTIVE)) { throw new JtxException(\"TNo active TX that can be marked as rollback only\"); } } rollbackCause = th; status = STATUS_MARKED_ROLLBACK; } \n### Response:", "ground_truth": "Modify the transaction associated with the target object such that the only possible outcome\nof the transaction is to roll back the transaction.", "predict": "Set the rollbackOnly flag for the current transaction.\n\n@param th\nThe cause of the transaction error. May be null.\n@return\nNone.\n\nNote: This method is used to set the rollbackOnly flag for the current transaction. If the current transaction is not a rollback transaction, it will not be marked as such. If the current transaction is an active transaction, it will not be marked as a rollback only transaction. The rollbackCause parameter is used to specify the cause of the transaction error, if any. The status parameter is set to STATUS_MARKED_ROLLBACK to indicate that the transaction is marked as a rollback only transaction."}, {"ID": 1002, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function(command) { var patt = /(\"[^\"]*\")/, quotedStringPlaceholder = \"__QUOTEDSTR__\", escapedQuotePlaceholder = \"__ESCAPED_QUOTE__\", matches = [], match; command = command.replace(/\\\\\\\"/g, escapedQuotePlaceholder); while ((match = patt.exec(command))) { var matched = match[0]; command = command.substr(0, match.index) + quotedStringPlaceholder + command.substr(match.index + matched.length); matches.push(matched.substring(1, matched.length - 1)); } var parts = command.split(\" \"); parts = parts.map(function(part) { var item = part.trim(); if (item === quotedStringPlaceholder) { item = matches.shift(); } item = item.replace(new RegExp(escapedQuotePlaceholder, \"g\"), '\"'); return item; }); return parts; }. \n### Response: Extract command components from a string\n@param {String} command The command to extract from\n@returns {String[]} The separated parts.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void commitOrRollback(boolean doCommit) { if (log.isDebugEnabled()) { if (doCommit) { log.debug(\"Commit JTX\"); } else { log.debug(\"Rollback JTX\"); } } boolean forcedRollback = false; if (!isNoTransaction()) { if (isRollbackOnly()) { if (doCommit) { doCommit = false; forcedRollback = true; } } else if (!isActive()) { if (isCompleted()) { throw new JtxException(\"TX is already completed, commit or rollback should be called once per TX\"); } throw new JtxException(\"No active TX to \" + (doCommit ? \"commit\" : \"rollback\")); } } if (doCommit) { commitAllResources(); } else { rollbackAllResources(forcedRollback); } } \n### Response:", "ground_truth": "Performs either commit or rollback on all transaction resources.", "predict": "Commit or rollback a JTX transaction\n@param {boolean} doCommit The state of the JTX transaction to commit or rollback\n@return {void} None\n\nNote: This method is used to commit or rollback a JTX transaction based on the state of the JTX transaction. It checks if the JTX transaction is no longer active, if it is, it will throw an exception. If the JTX transaction is still active and doCommit is true, it will commit all resources. If doCommit is false and forcedRollback is true, it will rollback all resources. If both doCommit and forcedRollback are true, it will throw an exception indicating that no active JTX transaction to commit or rollback."}, {"ID": 1003, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static MethodHandle defaultInvoker( Method method ) { if ( !method.isDefault() ) { throw new IllegalArgumentException( \"Not a default method: \" + method ); } try { return LOOKUP.unreflectSpecial( method, method.getDeclaringClass() ); } catch ( IllegalAccessException e ) { throw new RuntimeException( \"Reflection failed.\", e ); } }. \n### Response: Returns a method handle that invoke a default method of an interface.\n\n@param method the (default) method to get a method handle for.\n@return a method handle that invokes the specific default method..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void rollbackAllResources(final boolean wasForced) { status = STATUS_ROLLING_BACK; Exception lastException = null; Iterator<JtxResource> it = resources.iterator(); while (it.hasNext()) { JtxResource resource = it.next(); try { resource.rollbackTransaction(); } catch (Exception ex) { lastException = ex; } finally { it.remove(); } } txManager.removeTransaction(this); status = STATUS_ROLLEDBACK; if (lastException != null) { status = STATUS_UNKNOWN; throw new JtxException(\"Rollback failed: one or more TX resources couldn't rollback a TX\", lastException); } if (wasForced) { throw new JtxException(\"TX rolled back because it has been marked as rollback-only\", rollbackCause); } } \n### Response:", "ground_truth": "Rollbacks all attached resources. Resource will be closed. and detached from this transaction.\nIf exception occurs, it will be rethrown at the end.", "predict": "rollbackAllResources():\nRolls back all resources in the JtxResource class.\n\n@param wasForced a boolean indicating whether to rollback all resources or not.\n@return void.\n\n"}, {"ID": 1004, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func retrieveAuthData(p *Provider, TokenURL string, v url.Values) (map[string]map[string]interface{}, error) { v.Set(\"client_id\", p.ClientKey) v.Set(\"client_secret\", p.Secret) req, err := http.NewRequest(\"POST\", TokenURL, strings.NewReader(v.Encode())) if err != nil { return nil, err } req.Header.Set(\"Content-Type\", \"application/x-www-form-urlencoded\") r, err := p.Client().Do(req) if err != nil { return nil, err } defer r.Body.Close() body, err := ioutil.ReadAll(io.LimitReader(r.Body, 1<<20)) if err != nil { return nil, fmt.Errorf(\"oauth2: cannot fetch token: %v\", err) } if code := r.StatusCode; code < 200 || code > 299 { return nil, fmt.Errorf(\"oauth2: cannot fetch token: %v\\nResponse: %s\", r.Status, body) } var objmap map[string]map[string]interface{} err = json.Unmarshal(body, &objmap) if err != nil { return nil, err } return objmap, nil }. \n### Response: //Custom implementation for yammer to get access token and user data\n//Yammer provides user data along with access token, no separate api available.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public <E> E requestResource(final Class<E> resourceType) { if (isCompleted()) { throw new JtxException(\"TX is already completed, resource are not available after commit or rollback\"); } if (isRollbackOnly()) { throw new JtxException(\"TX is marked as rollback only, resource are not available\", rollbackCause); } if (!isNoTransaction() && !isActive()) { throw new JtxException(\"Resources are not available since TX is not active\"); } checkTimeout(); E resource = lookupResource(resourceType); if (resource == null) { int maxResources = txManager.getMaxResourcesPerTransaction(); if ((maxResources != -1) && (resources.size() >= maxResources)) { throw new JtxException(\"TX already has attached max. number of resources\"); } JtxResourceManager<E> resourceManager = txManager.lookupResourceManager(resourceType); resource = resourceManager.beginTransaction(mode, isActive()); resources.add(new JtxResource<>(this, resourceManager, resource)); } return resource; } \n### Response:", "ground_truth": "Requests a resource. If resource is not found, it will be created and new transaction will be started on it.", "predict": "//Request resource method for JtxManager\n//This method is used to request a resource from the JtxManager\n//It checks if the transaction is already completed, rollback only, or not active\n//If any of these conditions are true, it throws an exception\n//If the transaction is completed, the resource is returned immediately\n//If the transaction is rollback only, the resource is not returned until the transaction is rolled back\n//If the transaction is not active, the resource is not returned until the transaction is active\n//This method does not check for timeouts\n//It simply adds the resource to a list and returns it\n//This method is used to request a resource from the JtxManager for the given resourceType"}, {"ID": 1005, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (n *Node) Attach() (*rpc.Client, error) { n.lock.RLock() defer n.lock.RUnlock() if n.server == nil { return nil, ErrNodeStopped } return rpc.DialInProc(n.inprocHandler), nil }. \n### Response: // Attach creates an RPC client attached to an in-process API handler..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void popName() { if (isPushed) { if (pushedComma) { writeComma(); } String name = pushedName; pushedName = null; isPushed = false; writeName(name); } } \n### Response:", "ground_truth": "Writes stored name to JSON string. Cleans storage.", "predict": "// PopName() removes the last pushed name and resets the push state.."}, {"ID": 1006, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (buf *Buffer) WriteByte(b byte) error { buf.bytes = append(buf.bytes, b) return nil }. \n### Response: // WriteByte is equivalent to bytes.Buffer.WriteByte..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void writeString(final String value) { popName(); write(StringPool.QUOTE); int len = value.length(); for (int i = 0; i < len; i++) { char c = value.charAt(i); switch (c) { case '\"': write(\"\\\\\\\"\"); break; case '\\\\': write(\"\\\\\\\\\"); break; case '/': if (strictStringEncoding) { write(\"\\\\/\"); } else { write(c); } break; case '\\b': write(\"\\\\b\"); break; case '\\f': write(\"\\\\f\"); break; case '\\n': write(\"\\\\n\"); break; case '\\r': write(\"\\\\r\"); break; case '\\t': write(\"\\\\t\"); break; default: if (Character.isISOControl(c)) { unicode(c); } else { write(c); } } } write(StringPool.QUOTE); } \n### Response:", "ground_truth": "Write a quoted and escaped value to the output.", "predict": "// Write a string using the quote character and the escape character.\n// This method uses a loop to iterate through the characters in the string,\n// and uses the appropriate escape sequence to write each character.\n// The quote character is used to separate the string from the escape character,\n// and the escape character is used to write the special characters in the string.\n// The method also uses the StringPool.QUOTE to quote the string when it is written to the file."}, {"ID": 1007, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func escapeExKey(key *escapeKeyPair) rune { var r rune switch key.typ { case 'D': r = CharBackward case 'C': r = CharForward case 'A': r = CharPrev case 'B': r = CharNext case 'H': r = CharLineStart case 'F': r = CharLineEnd case '~': if key.attr == \"3\" { r = CharDelete } default: } return r }. \n### Response: // translate Esc[X.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void unicode(final char c) { write(\"\\\\u\"); int n = c; for (int i = 0; i < 4; ++i) { int digit = (n & 0xf000) >> 12; char hex = CharUtil.int2hex(digit); write(hex); n <<= 4; } } \n### Response:", "ground_truth": "Writes unicode representation of a character.", "predict": "// write Unicode code point to the output file."}, {"ID": 1008, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (conn *VTGateConn) UpdateStream(ctx context.Context, keyspace, shard string, keyRange *topodatapb.KeyRange, tabletType topodatapb.TabletType, timestamp int64, event *querypb.EventToken) (UpdateStreamReader, error) { return conn.impl.UpdateStream(ctx, keyspace, shard, keyRange, tabletType, timestamp, event) }. \n### Response: // UpdateStream executes a streaming query on vtgate. It returns an\n// UpdateStreamReader and an error. First check the error. Then you\n// can pull values from the UpdateStreamReader until io.EOF, or\n// another error..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void write(final CharSequence charSequence) { popName(); try { out.append(charSequence); } catch (IOException ioex) { throw new JsonException(ioex); } } \n### Response:", "ground_truth": "Appends char sequence to the buffer. Used for numbers, nulls, booleans, etc.", "predict": "// Writes a character sequence to the output stream.\n// This method does not return a value.\n\n"}, {"ID": 1009, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function (token, context, chain) { var // Parse the output without any filter unfiltered = Twig.parse.apply(this, [token.output, context]), // A regular expression to find closing and opening tags with spaces between them rBetweenTagSpaces = />\\s+</g, // Replace all space between closing and opening html tags output = unfiltered.replace(rBetweenTagSpaces,'><').trim(); return { chain: chain, output: output }; }. \n### Response: Parse the html and return it without any spaces between tags.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public LagartoDomBuilderConfig setParsingErrorLogLevelName(String logLevel) { logLevel = logLevel.trim().toUpperCase(); parsingErrorLogLevel = Logger.Level.valueOf(logLevel); return this; } \n### Response:", "ground_truth": "Sets parsing error log level as a name.", "predict": "This method sets the logging level for the `LagartoDomBuilderConfig` class based on the `logLevel` parameter. The logging level is converted to uppercase and the value is set to the `Logger.Level.valueOf(logLevel)` constant. The `this` keyword is returned from the method."}, {"ID": 1010, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public boolean isSet() { if (isUsageMode()) { return true; } if (getJobFile() != null) { return true; } if (getListType() != null) { return true; } return false; }. \n### Response: Gets whether the arguments have been sufficiently set to execute a CLI\ntask.\n\n@return true if the CLI arguments have been sufficiently set..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void startRegion(final int start, final int tagLen, final int deepLevel) { this.regionStart = start + tagLen; this.regionLength = 0; this.regionTagStart = start; this.deepLevel = deepLevel; } \n### Response:", "ground_truth": "Starts defining region by setting the start index and reset region length to zero.", "predict": "Starts a region in the input data and sets the start, tag length, and deep level of the region.\n\n@param start the starting index of the region\n@param tagLen the length of the tag in the region\n@param deepLevel the depth of the region\n@return true if the region was started successfully, false otherwise.\n\nNote: This method is used to start a region in the input data, and it sets the start, tag length, and deep level of the region. It does not modify the input data itself."}, {"ID": 1011, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function update($id, array &$doc) { $json = JSONEncoder::encode($doc); $response = $this->client->request('PUT', \"/{$this->name}/{$id}\", [ 'body' => $json, 'headers' => ['Content-Type' => 'application/json'], ]); if (201 !== $response->getStatusCode()) { throw new Exception('Unable to save document'); } $value = JSONEncoder::decode((string) $response->getBody()); $doc['_id'] = $value['id']; $doc['_rev'] = $value['rev']; }. \n### Response: Updates a document.\n\n@param string $id  The id from the document\n@param array  $doc A reference from the document\n\n@throws Exception.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public boolean isContaining(final String include) { if (value == null) { return false; } if (splits == null) { splits = StringUtil.splitc(value, ' '); } for (String s: splits) { if (s.equals(include)) { return true; } } return false; } \n### Response:", "ground_truth": "Returns true if attribute is containing some value.", "predict": "This method determines whether a given string contains a specified substring.\n\n@param string $value The string to check for the containing substring\n@param String $include The substring to check for\n\n@return boolean True if the substring is found, false otherwise.\n\n@throws Exception."}, {"ID": 1012, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void appendParameters(StringBuilder buffer,String parameters) { if((parameters!=null)&&(parameters.length()>0)) { String updatedParameters=parameters; if(parameters.startsWith(\"?\")) { updatedParameters=parameters.substring(1); } if(updatedParameters.length()>0) { int currentLength=buffer.length(); if((currentLength>0)&&(buffer.charAt(currentLength-1)=='/')) { int length=currentLength; buffer.delete(length-1,length); } //add separator buffer.append(\"?\"); try { String[] parameterPairs=updatedParameters.split(\"&\"); int amount=parameterPairs.length; String parameterPair=null; String[] values=null; boolean addedParameters=false; for(int index=0;index<amount;index++) { //get next element parameterPair=parameterPairs[index]; //split to key/value values=parameterPair.split(\"=\"); if(values.length==2) { if(addedParameters) { buffer.append(\"&\"); } buffer.append(URLEncoder.encode(values[0],\"UTF-8\")); buffer.append(\"=\"); buffer.append(URLEncoder.encode(values[1],\"UTF-8\")); //set flag addedParameters=true; } } } catch(Exception exception) { throw new FaxException(\"Unable to encode parameters.\",exception); } } } }. \n### Response: This function appends the parameters text to the base URL.\n\n@param   buffer\nThe buffer to update\n@param   parameters\nThe parameters line.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void registerPseudoFunction(final Class<? extends PseudoFunction> pseudoFunctionType) { PseudoFunction pseudoFunction; try { pseudoFunction = ClassUtil.newInstance(pseudoFunctionType); } catch (Exception ex) { throw new CSSellyException(ex); } PSEUDO_FUNCTION_MAP.put(pseudoFunction.getPseudoFunctionName(), pseudoFunction); } \n### Response:", "ground_truth": "Registers pseudo function.", "predict": "This method registers a pseudo-function with the specified pseudo-function type.\n\n@param    PseudoFunctionType\nThe type of pseudo-function to register.\n\n@return\nNone.\n\nNote: This method uses the ClassUtil class to create a new instance of the specified pseudo-function type, and then adds it to the PSEUDO_FUNCTION_MAP map. If there is an exception, it is caught and the CSSellyException is thrown."}, {"ID": 1013, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func ErrorByField(e error, field string) string { if e == nil { return \"\" } return ErrorsByField(e)[field] }. \n### Response: // ErrorByField returns error for specified field of the struct\n// validated by ValidateStruct or empty string if there are no errors\n// or this field doesn't exists or doesn't have any errors..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static PseudoFunction<?> lookupPseudoFunction(final String pseudoFunctionName) { PseudoFunction pseudoFunction = PSEUDO_FUNCTION_MAP.get(pseudoFunctionName); if (pseudoFunction == null) { throw new CSSellyException(\"Unsupported pseudo function: \" + pseudoFunctionName); } return pseudoFunction; } \n### Response:", "ground_truth": "Lookups pseudo function for given pseudo function name.", "predict": "// lookup PseudoFunction returns the pseudo function associated with the specified name\n// if it exists in the pseudo function map, otherwise throws an exception if it's not supported\n// or if the name is not found in the map."}, {"ID": 1014, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def list_server_certificates(path_prefix='/', region=None, key=None, keyid=None, profile=None): ''' Lists the server certificates stored in IAM that have the specified path prefix. .. versionadded:: ??? :param path_prefix: The path prefix for filtering the results. For example: /company/servercerts would get all server certificates for which the path starts with /company/servercerts . This parameter is optional. If it is not included, it defaults to a slash (/), listing all server certificates. This parameter allows (per its regex pattern) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (u0021) through the DEL character (u007F), including most punctuation characters, digits, and upper and lowercased letters. CLI Example: .. code-block:: bash salt myminion boto_iam.list_server_certificates path_prefix=/somepath/ ''' retries = 10 sleep = 6 conn = __utils__['boto3.get_connection']('iam', region=region, key=key, keyid=keyid, profile=profile) Items = [] while retries: try: log.debug('Garnering list of IAM Server Certificates') IsTruncated = True while IsTruncated: kwargs = {'PathPrefix': path_prefix} ret = conn.list_server_certificates(**kwargs) Items += ret.get('ServerCertificateMetadataList', []) IsTruncated = ret.get('IsTruncated') kwargs.update({'Marker': ret.get('Marker')}) return Items except botocore.exceptions.ParamValidationError as err: raise SaltInvocationError(str(err)) except botocore.exceptions.ClientError as err: if retries and jmespath.search('Error.Code', err.response) == 'Throttling': retries -= 1 log.debug('Throttled by AWS API, retrying in %s seconds...', sleep) time.sleep(sleep) continue log.error('Failed to list IAM Server Certificates: %s', err.message) return None. \n### Response: Lists the server certificates stored in IAM that have the specified path prefix.\n\n    .. versionadded:: ???\n\n    :param path_prefix:\n        The path prefix for filtering the results.  For example:  /company/servercerts would get\n        all server certificates for which the path starts with /company/servercerts .\n        This parameter is optional.  If it is not included, it defaults to a slash (/), listing all\n        server certificates.  This parameter allows (per its regex pattern) a string of characters\n        consisting of either a forward slash (/) by itself or a string that must begin and end with\n        forward slashes.  In addition, it can contain any ASCII character from the ! (u0021)\n        through the DEL character (u007F), including most punctuation characters, digits, and upper\n        and lowercased letters.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt myminion boto_iam.list_server_certificates path_prefix=/somepath/.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public void visit(final int version, int access, final String name, final String signature, final String superName, final String[] interfaces) { wd.init(name, superName, this.suffix, this.reqProxyClassName); // change access of destination access &= ~AsmUtil.ACC_ABSTRACT; // write destination class final int v = ProxettaAsmUtil.resolveJavaVersion(version); wd.dest.visit(v, access, wd.thisReference, signature, wd.superName, null); wd.proxyAspects = new ProxyAspectData[aspects.length]; for (int i = 0; i < aspects.length; i++) { wd.proxyAspects[i] = new ProxyAspectData(wd, aspects[i], i); } } \n### Response:", "ground_truth": "Creates destination subclass header from current target class. Destination name is created from targets by\nadding a suffix and, optionally, a number. Destination extends the target.", "predict": "This method implements the `visit` method of the `WebContent` class, which is used to perform various operations on the web content being served by the salted instance.\n\nThe method takes several parameters:\n\n* `version`: The version of the web content being served.\n* `access`: The access level of the web content. This can be either `ACC_abstract` (which means the web content is not a concrete class) or `ACC_final` (which means the web content is a concrete class).\n* `name`: The name of the web content being served.\n* `signature`: The signature of the web content being served.\n* `superName`: The name of the parent web content being served.\n* `interfaces`: An array of interfaces implemented by the web content.\n\nThe method initializes the `name`, `superName`, and `suffix` properties of the `WebContent` instance, sets the `access` to `ACC_abstract`, and resolves the Java version using the `ProxettaAsmUtil.resolveJavaVersion` method.\n\nThe method then calls the `visit` method of the destination web content class, passing in the current `version`, `access`, `thisReference`, `signature`, `superName`, and `interfaces` parameters. The `visit` method is called with the appropriate access level, and the `proxyAspects` array is initialized to hold instances of the `ProxyAspectData` class.\n\nFinally, the method iterates over the `aspects` array and creates new instances of the `ProxyAspectData` class for each interface implemented by the web content. These instances are then passed to the `visit` method of the destination web content class, which performs the necessary operations on the web content."}, {"ID": 1015, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void auditRetrieveDocumentSetEvent(RFC3881EventOutcomeCodes eventOutcome, String repositoryEndpointUri, String userName, String[] documentUniqueIds, String[] repositoryUniqueIds, String[] homeCommunityIds, String patientId, List<CodedValueType> purposesOfUse, List<CodedValueType> userRoles) { if (!isAuditorEnabled()) { return; } ImportEvent importEvent = new ImportEvent(false, eventOutcome, new IHETransactionEventTypeCodes.RetrieveDocumentSet(), purposesOfUse); importEvent.setAuditSourceId(getAuditSourceId(), getAuditEnterpriseSiteId()); importEvent.addSourceActiveParticipant(repositoryEndpointUri, null, null, EventUtils.getAddressForUrl(repositoryEndpointUri, false), false); /* * FIXME: Overriding endpoint URI with \"anonymous\", for now */ String replyToUri = \"http://www.w3.org/2005/08/addressing/anonymous\"; importEvent.addDestinationActiveParticipant(replyToUri, getSystemAltUserId(), getSystemUserName(), getSystemNetworkId(), true); if (!EventUtils.isEmptyOrNull(userName)) { importEvent.addHumanRequestorActiveParticipant(userName, null, userName, userRoles); } if (!EventUtils.isEmptyOrNull(patientId)) { importEvent.addPatientParticipantObject(patientId); } if (!EventUtils.isEmptyOrNull(documentUniqueIds)) { for (int i=0; i<documentUniqueIds.length; i++) { importEvent.addDocumentParticipantObject(documentUniqueIds[i], repositoryUniqueIds[i], homeCommunityIds[i]); } } audit(importEvent); }. \n### Response: Audits an ITI-43 Retrieve Document Set event for XDS.b Document Consumer actors.\nSends audit messages for situations when more than one repository and more than one community are specified in the transaction.\n\n@param eventOutcome The event outcome indicator\n@param repositoryEndpointUri The Web service endpoint URI for the document repository\n@param documentUniqueIds The list of Document Entry UniqueId(s) for the document(s) retrieved\n@param repositoryUniqueIds The list of XDS.b Repository Unique Ids involved in this transaction (aligned with Document Unique Ids array)\n@param homeCommunityIds The list of XCA Home Community Ids involved in this transaction (aligned with Document Unique Ids array)\n@param patientId The patient ID the document(s) relate to (if known)\n@param purposesOfUse purpose of use codes (may be taken from XUA token)\n@param userRoles roles of the human user (may be taken from XUA token).\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public AnnotationVisitor visitAnnotation(final String desc, final boolean visible) { AnnotationVisitor destAnn = wd.dest.visitAnnotation(desc, visible); // [A3] return new AnnotationVisitorAdapter(destAnn); } \n### Response:", "ground_truth": "Copies all destination type annotations to the target.", "predict": "Implement an annotation visitor to visit all annotations in the specified description and return a new annotation visitor adapter.\n\n@param desc The description of the annotation to visit\n@param visible The visibility of the annotation (true for visible annotations, false for hidden annotations)\n\n@return A new annotation visitor adapter to handle the visit of the specified annotation."}, {"ID": 1016, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func ListenLocal(socket string) (net.Listener, error) { // set up ACL for the named pipe // allow Administrators and SYSTEM sddl := \"D:P(A;;GA;;;BA)(A;;GA;;;SY)\" c := winio.PipeConfig{ SecurityDescriptor: sddl, MessageMode: true, // Use message mode so that CloseWrite() is supported InputBufferSize: 65536, // Use 64KB buffers to improve performance OutputBufferSize: 65536, } // on windows, our socket is actually a named pipe return winio.ListenPipe(socket, &c) }. \n### Response: // ListenLocal opens a local socket for control communication.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void makeStaticInitBlock() { if (wd.adviceClinits != null) { MethodVisitor mv = wd.dest.visitMethod(AsmUtil.ACC_STATIC, CLINIT, DESC_VOID, null, null); mv.visitCode(); for (String name : wd.adviceClinits) { mv.visitMethodInsn( INVOKESTATIC, wd.thisReference, name, DESC_VOID, false); } mv.visitInsn(RETURN); mv.visitMaxs(0, 0); mv.visitEnd(); } } \n### Response:", "ground_truth": "Creates static initialization block that simply calls all\nadvice static init methods in correct order.", "predict": "// MakeStaticInitBlock(): checks if adviceClinits is not null and iterates through it."}, {"ID": 1017, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (a GatewayUnsupported) RefreshBucketPolicy(ctx context.Context, bucket string) error { return NotImplemented{} }. \n### Response: // RefreshBucketPolicy refreshes cache policy with what's on disk..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void makeProxyConstructor() { MethodVisitor mv = wd.dest.visitMethod(AsmUtil.ACC_PRIVATE | AsmUtil.ACC_FINAL, ProxettaNames.initMethodName, DESC_VOID, null, null); mv.visitCode(); if (wd.adviceInits != null) { for (String name : wd.adviceInits) { mv.visitVarInsn(ALOAD, 0); mv.visitMethodInsn (INVOKESPECIAL, wd.thisReference, name, DESC_VOID, false); } } mv.visitInsn(RETURN); mv.visitMaxs(0, 0); mv.visitEnd(); } \n### Response:", "ground_truth": "Creates init method that simply calls all advice constructor methods in correct order.\nThis created init method is called from each destination's constructor.", "predict": "// Create a proxy constructor for the target class."}, {"ID": 1018, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def group_resources_by_type(resources): \"\"\"Group a list of `resources` by `type` with order\"\"\" groups = defaultdict(list) for resource in resources: groups[getattr(resource, 'type')].append(resource) ordered = OrderedDict() for rtype, rtype_label in RESOURCE_TYPES.items(): if groups[rtype]: ordered[(rtype, rtype_label)] = groups[rtype] return ordered. \n### Response: Group a list of `resources` by `type` with order.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void processSuperMethods() { for (ClassReader cr : targetClassInfo.superClassReaders) { cr.accept(new EmptyClassVisitor() { String declaredClassName; @Override public void visit(final int version, final int access, final String name, final String signature, final String superName, final String[] interfaces) { declaredClassName = name; } @Override public MethodVisitor visitMethod(final int access, final String name, final String desc, final String signature, final String[] exceptions) { if (name.equals(INIT) || name.equals(CLINIT)) { return null; } MethodSignatureVisitor msign = targetClassInfo.lookupMethodSignatureVisitor(access, name, desc, declaredClassName); if (msign == null) { return null; } return applyProxy(msign); } }, 0); } } \n### Response:", "ground_truth": "Checks for all public super methods that are not overridden.", "predict": "Process super classes and methods of the target class."}, {"ID": 1019, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String encodeURIPathComponent(String s) { StringBuilder result = new StringBuilder(); for (int i = 0; i < s.length(); i++) { result.append(Char.encodeURIPathComponent(s.charAt(i))); } return (result.toString()); }. \n### Response: Encodes a char to percentage code, if it is not a path character in the sense of URIs.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public int findLast(int low, int high) { int ndx = -1; while (low <= high) { int mid = (low + high) >>> 1; int delta = compare(mid); if (delta > 0) { high = mid - 1; } else { if (delta == 0) { ndx = mid; } low = mid + 1; } } if (ndx == -1) { return -(low + 1); } return ndx; } \n### Response:", "ground_truth": "Finds very last index of given element in inclusive index range. Returns negative\nvalue if element is not found.", "predict": "This method finds the last index of the first character in the two input strings, by iterating over the range from low to high and comparing the two indices. If the two indices are equal, it moves to the next pair of indices and compares again. If no such pair exists, it returns -(low + 1). If the method returns -1, it means that no such pair exists and the method has failed to find the last index of the first character."}, {"ID": 1020, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def zero_pad(matrix, to_length): \"\"\" Zero pads along the 0th dimension to make sure the utterance array x is of length to_length.\"\"\" assert matrix.shape[0] <= to_length if not matrix.shape[0] <= to_length: logger.error(\"zero_pad cannot be performed on matrix with shape {}\" \" to length {}\".format(matrix.shape[0], to_length)) raise ValueError result = np.zeros((to_length,) + matrix.shape[1:]) result[:matrix.shape[0]] = matrix return result. \n### Response: Zero pads along the 0th dimension to make sure the utterance array\n    x is of length to_length..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public String on(final String string) { if (!enabled) { return string; } final StringBuilder sb = new StringBuilder(); if (prefix != null) { sb.append(prefix).append(\"m\"); } sb.append(string); if (suffix != null) { sb.append(suffix).append(\"m\"); } return sb.toString(); } \n### Response:", "ground_truth": "Returns chalked string.", "predict": "This method returns a string based on the enabled flag and the input string. It first checks if the enabled flag is set to true and returns the string if it is. If the enabled flag is not set, it returns the input string. The method uses a StringBuilder to build a string with the prefix \"on\" followed by the input string, and then appends the suffix \"m\" to the end."}, {"ID": 1021, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def get_airport_metars_hist(self, iata): \"\"\"Retrieve the metar data for past 72 hours. The data will not be parsed to readable format. Given the IATA code of an airport, this method returns the metar information for last 72 hours. Args: iata (str): The IATA code for an airport, e.g. HYD Returns: The metar data for the airport Example:: from pyflightdata import FlightData f=FlightData() #optional login f.login(myemail,mypassword) f.get_airport_metars_hist('HYD') \"\"\" url = AIRPORT_BASE.format(iata) + \"/weather\" return self._fr24.get_airport_metars_hist(url). \n### Response: Retrieve the metar data for past 72 hours. The data will not be parsed to readable format.\n\n        Given the IATA code of an airport, this method returns the metar information for last 72 hours.\n\n        Args:\n            iata (str): The IATA code for an airport, e.g. HYD\n\n        Returns:\n            The metar data for the airport\n\n        Example::\n\n            from pyflightdata import FlightData\n            f=FlightData()\n            #optional login\n            f.login(myemail,mypassword)\n            f.get_airport_metars_hist('HYD').\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private byte[] replaceAsmInstructions(final byte[] classFile, final boolean hasFrames) { final Attribute[] attributes = getAttributePrototypes(); firstField = null; lastField = null; firstMethod = null; lastMethod = null; lastRuntimeVisibleAnnotation = null; lastRuntimeInvisibleAnnotation = null; lastRuntimeVisibleTypeAnnotation = null; lastRuntimeInvisibleTypeAnnotation = null; moduleWriter = null; nestHostClassIndex = 0; numberOfNestMemberClasses = 0; nestMemberClasses = null; firstAttribute = null; compute = hasFrames ? MethodWriter.COMPUTE_INSERTED_FRAMES : MethodWriter.COMPUTE_NOTHING; new ClassReader(classFile, 0, /* checkClassVersion = */ false) .accept( this, attributes, (hasFrames ? ClassReader.EXPAND_FRAMES : 0) | ClassReader.EXPAND_ASM_INSNS); return toByteArray(); } \n### Response:", "ground_truth": "Returns the equivalent of the given class file, with the ASM specific instructions replaced\nwith standard ones. This is done with a ClassReader -> ClassWriter round trip.\n\n@param classFile a class file containing ASM specific instructions, generated by this\nClassWriter.\n@param hasFrames whether there is at least one stack map frames in 'classFile'.\n@return an equivalent of 'classFile', with the ASM specific instructions replaced with standard\nones.", "predict": "This method replaces ASM instructions in a given class file.\n\nIt first retrieves the attribute array of the prototype of all the attributes in the class file. Then it sets the first field, last field, first method, last method, last runtime visible annotation, last runtime invisible annotation, last runtime visible type annotation, module writer, and nest host class index to their respective values. Next, it sets the compute value to hasFrames? MethodWriter.COMPUTE_INSERTED_FRAMES : MethodWriter.COMPUTE_NOTHING. Then it creates a new ClassReader object and accepts it with the current class, the attributes, and the ClassReader.EXPAND_FRAMES or ClassReader.EXPAND_ASM_INSNS options depending on whether to insert frames or not. Finally, it returns the modified class file as a byte array.\n\nThis method is useful for implementing bytecode manipulation or optimization techniques.\n\nNote: This method is used in a specific context and should be used with caution. It is recommended to use other more robust methods for bytecode manipulation."}, {"ID": 1022, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def _get_current_label(self): \"\"\"Get the label from the last line read\"\"\" if len(self._last) == 0: raise StopIteration return self._last[:self._last.find(\":\")]. \n### Response: Get the label from the last line read.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private Attribute[] getAttributePrototypes() { Attribute.Set attributePrototypes = new Attribute.Set(); attributePrototypes.addAttributes(firstAttribute); FieldWriter fieldWriter = firstField; while (fieldWriter != null) { fieldWriter.collectAttributePrototypes(attributePrototypes); fieldWriter = (FieldWriter) fieldWriter.fv; } MethodWriter methodWriter = firstMethod; while (methodWriter != null) { methodWriter.collectAttributePrototypes(attributePrototypes); methodWriter = (MethodWriter) methodWriter.mv; } return attributePrototypes.toArray(); } \n### Response:", "ground_truth": "Returns the prototypes of the attributes used by this class, its fields and its methods.\n\n@return the prototypes of the attributes used by this class, its fields and its methods.", "predict": "getAttributePrototypes():\nThis method returns an array of Attribute objects that represent the attributePrototypes set by the application.\n```\n```"}, {"ID": 1023, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void readProjectHeader() { Table table = m_tables.get(\"DIR\"); MapRow row = table.find(\"\"); if (row != null) { setFields(PROJECT_FIELDS, row, m_projectFile.getProjectProperties()); m_wbsFormat = new P3WbsFormat(row); } }. \n### Response: Read general project properties..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void registerDefaults() { register(Integer.class, IntegerSqlType.class); register(int.class, IntegerSqlType.class); register(MutableInteger.class, IntegerSqlType.class); register(Float.class, FloatSqlType.class); register(float.class, FloatSqlType.class); register(MutableFloat.class, FloatSqlType.class); register(Double.class, DoubleSqlType.class); register(double.class, DoubleSqlType.class); register(MutableDouble.class, DoubleSqlType.class); register(Byte.class, ByteSqlType.class); register(byte.class, ByteSqlType.class); register(MutableByte.class, ByteSqlType.class); register(Boolean.class, BooleanSqlType.class); register(boolean.class, BooleanSqlType.class); register(MutableBoolean.class, BooleanSqlType.class); register(Long.class, LongSqlType.class); register(long.class, LongSqlType.class); register(MutableLong.class, LongSqlType.class); register(Short.class, ShortSqlType.class); register(short.class, ShortSqlType.class); register(MutableShort.class, ShortSqlType.class); register(Character.class, CharacterSqlType.class); register(char.class, CharacterSqlType.class); register(BigDecimal.class, BigDecimalSqlType.class); register(BigInteger.class, BigIntegerSqlType.class); register(String.class, StringSqlType.class); register(LocalDateTime.class, LocalDateTimeSqlType.class); register(LocalDate.class, LocalDateSqlType.class); register(LocalTime.class, LocalTimeSqlType.class); register(Date.class, SqlDateSqlType.class); register(Timestamp.class, TimestampSqlType.class); register(Time.class, TimeSqlType.class); register(java.util.Date.class, DateSqlType.class); register(JulianDate.class, JulianDateSqlType.class); register(byte[].class, ByteArraySqlType.class); register(URL.class, URLSqlType.class); register(Blob.class, BlobSqlType.class); register(Clob.class, ClobSqlType.class); register(Array.class, SqlArraySqlType.class); register(Ref.class, SqlRefSqlType.class); } \n### Response:", "ground_truth": "Registers default set of SQL types.", "predict": "Registers various data types for use in SQL queries."}, {"ID": 1024, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (r *VarRef) String() string { buf := bytes.NewBufferString(QuoteIdent(r.Val)) if r.Type != Unknown { buf.WriteString(\"::\") buf.WriteString(r.Type.String()) } return buf.String() }. \n### Response: // String returns a string representation of the variable reference..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void register(final Class type, final Class<? extends SqlType> sqlTypeClass) { types.put(type, lookupSqlType(sqlTypeClass)); } \n### Response:", "ground_truth": "Registers sql type for provided type.", "predict": "// Registers a type and its associatedSqlType.."}, {"ID": 1025, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def _is_present(val): \"\"\"Returns True if the value is not None, and if it is either not a string, or a string with length > 0. \"\"\" if val is None: return False if isinstance(val, str): return len(val) > 0 return True. \n### Response: Returns True if the value is not None, and if it is either not a string, or a string with\n    length > 0..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public SqlType lookup(final Class clazz) { SqlType sqlType; for (Class x = clazz; x != null; x = x.getSuperclass()) { sqlType = types.get(clazz); if (sqlType != null) { return sqlType; } Class[] interfaces = x.getInterfaces(); for (Class i : interfaces) { sqlType = types.get(i); if (sqlType != null) { return sqlType; } } } return null; } \n### Response:", "ground_truth": "Retrieves SQL type for provided type. All subclasses and interfaces are examined\nfor matching sql type.", "predict": "This method lookups the SqlType for a given Class clazz. It iterates through the superclasses and interfaces of clazz and returns the SqlType if it is found. If no SqlType is found, it returns null."}, {"ID": 1026, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public boolean referencesMethod(ExecutableElement method) { TypeElement declaringClass = (TypeElement) method.getEnclosingElement(); String fullyQualifiedname = declaringClass.getQualifiedName().toString(); String name = method.getSimpleName().toString(); assert name.indexOf('.') == -1; String descriptor = Descriptor.getDesriptor(method); return getRefIndex(Methodref.class, fullyQualifiedname, name, descriptor) != -1; }. \n### Response: Return true if class contains method ref to given method\n@param method\n@return.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public SqlType lookupSqlType(final Class<? extends SqlType> sqlTypeClass) { SqlType sqlType = sqlTypes.get(sqlTypeClass); if (sqlType == null) { try { sqlType = ClassUtil.newInstance(sqlTypeClass); } catch (Exception ex) { throw new DbSqlException(\"SQL type not found: \" + sqlTypeClass.getSimpleName(), ex); } sqlTypes.put(sqlTypeClass, sqlType); } return sqlType; } \n### Response:", "ground_truth": "Returns sql type instance. Instances are stored for better performances.", "predict": "lookupSqlType(): Returns the SQL type corresponding to the given Class<? extends SqlType>.\n@param sqlTypeClass\n@return."}, {"ID": 1027, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function getSearchEngines($parameters = [], $parseResult = true) { $this->setParams([ 'metrics' => 'ga:pageviews,ga:sessionDuration,ga:exits', 'dimensions' => 'ga:source', 'filters' => 'ga:medium==cpa,ga:medium==cpc,ga:medium==cpm,ga:medium==cpp,ga:medium==cpv,ga:medium==organic,ga:medium==ppc', 'sort' => '-ga:pageviews', ]); return $this->execute($parameters, $parseResult); }. \n### Response: Search Engines.\n\nThis query returns site usage data for all traffic by search engine, sorted by pageviews in descending order.\n\n@param array $parameters Parameters you may want to overwrite.\n\n@return array.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static ProxyInfo socks4Proxy(final String proxyAddress, final int proxyPort, final String proxyUser) { return new ProxyInfo(ProxyType.SOCKS4, proxyAddress, proxyPort, proxyUser, null); } \n### Response:", "ground_truth": "Creates SOCKS4 proxy.", "predict": "ProxyInfo.\n\nThis method returns a new ProxyInfo object with the specified proxy address, port, username, and password, if any.\n\n@param String proxyAddress The address of the proxy server to use.\n@param int proxyPort The port number to use for the proxy server.\n@param String proxyUser The username to use for authentication with the proxy server.\n@param String proxyPassword The password to use for authentication with the proxy server.\n@return ProxyInfo The new ProxyInfo object.\n\n@static."}, {"ID": 1028, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def get_string_width(self, s): \"Get width of a string in the current font\" s = self.normalize_text(s) cw=self.current_font['cw'] w=0 l=len(s) if self.unifontsubset: for char in s: char = ord(char) if len(cw) > char: w += cw[char] # ord(cw[2*char])<<8 + ord(cw[2*char+1]) #elif (char>0 and char<128 and isset($cw[chr($char)])) { $w += $cw[chr($char)]; } elif (self.current_font['desc']['MissingWidth']) : w += self.current_font['desc']['MissingWidth'] #elif (isset($this->CurrentFont['MissingWidth'])) { $w += $this->CurrentFont['MissingWidth']; } else: w += 500 else: for i in range(0, l): w += cw.get(s[i],0) return w*self.font_size/1000.0. \n### Response: Get width of a string in the current font.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static ProxyInfo socks5Proxy(final String proxyAddress, final int proxyPort, final String proxyUser, final String proxyPassword) { return new ProxyInfo(ProxyType.SOCKS5, proxyAddress, proxyPort, proxyUser, proxyPassword); } \n### Response:", "ground_truth": "Creates SOCKS5 proxy.", "predict": "Returns a new ProxyInfo object with the specified proxy address, port, user, password, and ProxyType.SOCKS5."}, {"ID": 1029, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def _check_starting_nodes(self, nodes, lapse): \"\"\" Wait until all given nodes are alive, for max `lapse` seconds. \"\"\" with timeout(lapse, raise_timeout_error): try: while nodes: nodes = set(node for node in nodes if not node.is_alive()) if nodes: log.debug(\"Waiting for %d more nodes to come up ...\", len(nodes)) time.sleep(self.polling_interval) except TimeoutError: log.error(\"Some nodes did not start correctly\" \" within the given %d-seconds timeout: %s\", lapse, ', '.join(node.name for node in nodes)) # return list of not-yet-started nodes, # so we can exclude them from coming rounds return nodes. \n### Response: Wait until all given nodes are alive, for max `lapse` seconds..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static ProxyInfo httpProxy(final String proxyAddress, final int proxyPort, final String proxyUser, final String proxyPassword) { return new ProxyInfo(ProxyType.HTTP, proxyAddress, proxyPort, proxyUser, proxyPassword); } \n### Response:", "ground_truth": "Creates HTTP proxy.", "predict": "ProxyInfo httpProxy(String proxyAddress, int proxyPort, String proxyUser, String proxyPassword)\nReturns a new ProxyInfo object with the specified proxy address, port, user, and password for the HTTP proxy.\n\nNote: This method is a static method, which means it can be called without creating an instance of the class."}, {"ID": 1030, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (c *ServicedCli) cmdRestore(ctx *cli.Context) { args := ctx.Args() if len(args) < 1 { fmt.Printf(\"Incorrect Usage.\\n\\n\") cli.ShowCommandHelp(ctx, \"restore\") return } err := c.driver.Restore(args[0]) if err != nil { fmt.Fprintln(os.Stderr, err) } }. \n### Response: // serviced restore FILEPATH.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public int totalThreadTransactions() { ArrayList<JtxTransaction> txList = txStack.get(); if (txList == null) { return 0; } return txList.size(); } \n### Response:", "ground_truth": "Returns total number of transactions associated with current thread.", "predict": "// Total number of thread transactions."}, {"ID": 1031, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (s *DriveService) Fetch(ctx context.Context, title string) (body io.ReadCloser, size uint32, err error) { file, err := s.Get(ctx, title) if err != nil { return } // TODO: maybe in the case of no download link, remove the file. // The file should have malformed or converted to a Docs file // unwantedly. // TODO(mpl): I do not think the above comment is accurate. It // looks like at least one case we do not get a DownloadUrl is when // the UI would make you pick a conversion format first (spreadsheet, // doc, etc). -> we should see if the API offers the possibility to do // that conversion. and we could pass the type(s) we want (pdf, xls, doc...) // as arguments (in an options struct) to Fetch. if file.DownloadUrl == \"\" { err = errNoDownload return } req, _ := http.NewRequest(\"GET\", file.DownloadUrl, nil) req.WithContext(ctx) var resp *http.Response if resp, err = s.client.Transport.RoundTrip(req); err != nil { return } if file.FileSize > math.MaxUint32 || file.FileSize < 0 { err = errors.New(\"file too big\") } return resp.Body, uint32(file.FileSize), err }. \n### Response: // Fetch retrieves the metadata and contents of a file..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public int totalThreadTransactionsWithStatus(final JtxStatus status) { ArrayList<JtxTransaction> txlist = txStack.get(); if (txlist == null) { return 0; } int count = 0; for (JtxTransaction tx : txlist) { if (tx.getStatus() == status) { count++; } } return count; } \n### Response:", "ground_truth": "Returns total number of transactions of the specified status associated with current thread.", "predict": "// TotalThreadTransactionsWithStatus retrieves the number of transactions in the thread stack.."}, {"ID": 1032, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public Cluster destination(final String... destinations) { final String applicationName = clusterId.applicationName; return destination(Arrays.stream(destinations).map(d -> new ClusterId(applicationName, d)).toArray(ClusterId[]::new)); }. \n### Response: Set the list of explicit destination that outgoing messages should be limited to..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void associateTransaction(final JtxTransaction tx) { totalTransactions++; ArrayList<JtxTransaction> txList = txStack.get(); if (txList == null) { txList = new ArrayList<>(); txStack.set(txList); } txList.add(tx); // add last } \n### Response:", "ground_truth": "Associate transaction to current thread.", "predict": "associateTransaction(): associate the given transaction with the transaction stack. totalTransactions(): increase the total number of transactions in the transaction stack. txStack(): get the transaction stack, if it is not null. txList(): get an ArrayList of the transactions, if it is not null. add(tx): add the given transaction to the end of the transaction list."}, {"ID": 1033, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void auditAuditLogUsed(RFC3881EventOutcomeCodes eventOutcome, String accessingUser, String accessingProcess, String auditLogUri) { if (!isAuditorEnabled()) { return; } AuditLogUsedEvent auditLogUsedEvent = new AuditLogUsedEvent(eventOutcome); auditLogUsedEvent.setAuditSourceId(getAuditSourceId(), getAuditEnterpriseSiteId()); if (!EventUtils.isEmptyOrNull(accessingUser)) { auditLogUsedEvent.addAccessingParticipant(accessingUser, null, null, getSystemNetworkId()); } if (!EventUtils.isEmptyOrNull(accessingProcess)) { auditLogUsedEvent.addAccessingParticipant(accessingProcess, null, null, getSystemNetworkId()); } auditLogUsedEvent.addAuditLogIdentity(auditLogUri); audit(auditLogUsedEvent); }. \n### Response: Audits a DICOM \"Audit Log Used\" event, for a given User and Process.\n\n@param eventOutcome The event outcome indicator\n@param accessingUser Identity of the user accessing the audit log\n@param accessingProcess Identity of the process accessing the audit log\n@param auditLogUri The URI of the audit log being accessed.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void continueTx(final JtxTransaction sourceTx, final JtxTransactionMode destMode) { if (!validateExistingTransaction) { return; } JtxTransactionMode sourceMode = sourceTx.getTransactionMode(); JtxIsolationLevel destIsolationLevel = destMode.getIsolationLevel(); if (destIsolationLevel != ISOLATION_DEFAULT) { JtxIsolationLevel currentIsolationLevel = sourceMode.getIsolationLevel(); if (currentIsolationLevel != destIsolationLevel) { throw new JtxException(\"Participating TX specifies isolation level: \" + destIsolationLevel + \" which is incompatible with existing TX: \" + currentIsolationLevel); } } if ((!destMode.isReadOnly()) && (sourceMode.isReadOnly())) { throw new JtxException(\"Participating TX is not marked as read-only, but existing TX is\"); } } \n### Response:", "ground_truth": "Check if propagation of a transaction is possible, due to source and destination transaction modes.\n@see #setValidateExistingTransaction(boolean)", "predict": "Validates the existing transaction and ensures that it is of the specified transaction mode and isolation level. If the transaction is not valid, it returns without executing the rest of the method.\n\n@param sourceTx The transaction that the method is currently executing on\n@param destMode The transaction mode to which the sourceTx belongs\n@return A boolean indicating whether the transaction was valid or not.\n\nThis method is used to continue a transaction in DICOM. It first validates the existing transaction by checking its transaction mode and isolation level. If the transaction is not valid, it returns without executing the rest of the method. If the transaction is valid, it continues the transaction by executing the rest of the method on the specified transaction mode and isolation level."}, {"ID": 1034, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void initEnvironment() { // init logging system if not specified if (System.getProperty(\"org.apache.commons.logging.Log\") == null) System.setProperty(\"org.apache.commons.logging.Log\", \"net.lecousin.framework.log.bridges.ApacheCommonsLogging\"); // register protocols String protocols = System.getProperty(\"java.protocol.handler.pkgs\"); if (protocols == null) protocols = \"\"; if (!protocols.contains(\"net.lecousin.framework.protocols\")) { if (protocols.length() > 0) protocols += \"|\"; protocols += \"net.lecousin.framework.protocols\"; System.setProperty(\"java.protocol.handler.pkgs\", protocols); } }. \n### Response: Initialize properties..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected <E> JtxResourceManager<E> lookupResourceManager(final Class<E> resourceType) { //noinspection unchecked JtxResourceManager<E> resourceManager = this.resourceManagers.get(resourceType); if (resourceManager == null) { throw new JtxException(\"No registered resource manager for resource type: \" + resourceType.getSimpleName()); } return resourceManager; } \n### Response:", "ground_truth": "Lookups resource manager for provided type. Throws an exception if provider doesn't exists.", "predict": "lookupResourceManager method returns the registered resource manager for the specified resource type.."}, {"ID": 1035, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void SetNewViewpoint(String url) { Viewpoint vp = null; // get the name without the '#' sign String vpURL = url.substring(1, url.length()); for (Viewpoint viewpoint : viewpoints) { if ( viewpoint.getName().equalsIgnoreCase(vpURL) ) { vp = viewpoint; } } if ( vp != null ) { // found the Viewpoint matching the url GVRCameraRig mainCameraRig = gvrContext.getMainScene().getMainCameraRig(); float[] cameraPosition = vp.getPosition(); mainCameraRig.getTransform().setPosition( cameraPosition[0], cameraPosition[1], cameraPosition[2] ); // Set the Gaze controller position which is where the pick ray // begins in the direction of camera.lookt() GVRCursorController gazeController = null; GVRInputManager inputManager = gvrContext.getInputManager(); List<GVRCursorController> controllerList = inputManager.getCursorControllers(); for(GVRCursorController controller: controllerList){ if(controller.getControllerType() == GVRControllerType.GAZE); { gazeController = controller; break; } } if ( gazeController != null) { gazeController.setOrigin(cameraPosition[0], cameraPosition[1], cameraPosition[2]); } } else { Log.e(TAG, \"Viewpoint named \" + vpURL + \" not found (defined).\"); } }. \n### Response: end AnchorImplementation class.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected C createProxyObject(Class<C> target) { target = ProxettaUtil.resolveTargetClass(target); Class proxyClass = cache.get(target); if (proxyClass == null) { proxyClass = proxetta.defineProxy(target); cache.put(target, proxyClass); } C proxy; try { proxy = (C) ClassUtil.newInstance(proxyClass); } catch (Exception ex) { throw new PathrefException(ex); } return proxy; } \n### Response:", "ground_truth": "Creates proxy object.", "predict": "end CreateProxyObject method."}, {"ID": 1036, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function() { this.jsonInit({ \"message0\": \"%1\", \"args0\": [ { \"type\": \"field_dropdown\", \"name\": \"ON\", \"options\": [ [Blockly.Msg.MOTION_IFON_EDGE, '_edge_'], [Blockly.Msg.MOTION_IFON_POINTER, '_mouse_'], ] } ], \"colour\": Blockly.Colours.motion.secondary, \"colourSecondary\": Blockly.Colours.motion.secondary, \"colourTertiary\": Blockly.Colours.motion.tertiary, \"extensions\": [\"output_string\"] }); }. \n### Response: If on X, bounce block menu.\n@this Blockly.Block.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void append(final String methodName) { if (path.length() != 0) { path += StringPool.DOT; } if (methodName.startsWith(StringPool.LEFT_SQ_BRACKET)) { path = StringUtil.substring(path, 0, -1); } path += methodName; } \n### Response:", "ground_truth": "Appends method name to existing path.", "predict": "This method appends a method name to the path.\n@this Blockly.Block\n@param methodName the method name to append.\n@return the updated path."}, {"ID": 1037, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private function ensureValidBoxId($class) { if (!array_key_exists($class, $this->_boxIds) || $this->_boxIds[$class]->getAge() > self::MAXIMUM_BOXID_AGE) $this->_boxIds[$class] = $this->generateCometPollBoxId(); }. \n### Response: Ensures that the specifeid class has a valid box ID defined\n@param string $class.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String alignLeftAndPad(final String text, final int size) { int textLength = text.length(); if (textLength > size) { return text.substring(0, size); } final StringBuilder sb = new StringBuilder(size); sb.append(text); while (textLength++ < size) { sb.append(' '); } return sb.toString(); } \n### Response:", "ground_truth": "Puts the text to the left and pads with spaces until the size is reached.", "predict": "Aligns the given text to the left and pad it with spaces to the specified size.\n@param string $text.\n\n"}, {"ID": 1038, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected function generatePublicKey($path, $passphrase) { $processArgs = sprintf('rsa -pubout -in %s/private.pem -out %s/public.pem -passin pass:%s', $path, $path, $passphrase); $this->generateKey($processArgs); }. \n### Response: Generate a RSA public key.\n\n@param string          $path\n@param string          $passphrase\n@param OutputInterface $output.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String toPrettyString(final Object value) { if (value == null) { return StringPool.NULL; } final Class<?> type = value.getClass(); if (type.isArray()) { final Class componentType = type.getComponentType(); if (componentType.isPrimitive()) { final StringBuilder sb = new StringBuilder(); sb.append('['); if (componentType == int.class) { sb.append(ArraysUtil.toString((int[]) value)); } else if (componentType == long.class) { sb.append(ArraysUtil.toString((long[]) value)); } else if (componentType == double.class) { sb.append(ArraysUtil.toString((double[]) value)); } else if (componentType == float.class) { sb.append(ArraysUtil.toString((float[]) value)); } else if (componentType == boolean.class) { sb.append(ArraysUtil.toString((boolean[]) value)); } else if (componentType == short.class) { sb.append(ArraysUtil.toString((short[]) value)); } else if (componentType == byte.class) { sb.append(ArraysUtil.toString((byte[]) value)); } else { throw new IllegalArgumentException(); } sb.append(']'); return sb.toString(); } else { final StringBuilder sb = new StringBuilder(); sb.append('['); final Object[] array = (Object[]) value; for (int i = 0; i < array.length; i++) { if (i > 0) { sb.append(','); } sb.append(toPrettyString(array[i])); } sb.append(']'); return sb.toString(); } } else if (value instanceof Iterable) { final Iterable iterable = (Iterable) value; final StringBuilder sb = new StringBuilder(); sb.append('{'); int i = 0; for (final Object o : iterable) { if (i > 0) { sb.append(','); } sb.append(toPrettyString(o)); i++; } sb.append('}'); return sb.toString(); } return value.toString(); } \n### Response:", "ground_truth": "Converts object into pretty string. All arrays are iterated.", "predict": "This method is used to convert an object to a pretty string representation. The object can be of any type, but it is primarily used with objects of the form array or iterable. The method uses a combination of loops and conditional statements to format the object in a way that is easy to read and understand. The resulting string can be used in various contexts, such as printing out the object to the console or as a string representation of the object in a file."}, {"ID": 1039, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def restart_complete(self, state, new_address): ''' Called when we get notified that the restart has been completed by some agent who has volontureed to do so. ''' if state.timeout_call_id: state.agent.cancel_delayed_call(state.timeout_call_id) state.timeout_call_id = None return self._send_restarted_notifications(new_address). \n### Response: Called when we get notified that the restart has been completed by\n        some agent who has volontureed to do so..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String toCamelCase(final String input, final boolean firstCharUppercase, final char separator) { final int length = input.length(); final StringBuilder sb = new StringBuilder(length); boolean upperCase = firstCharUppercase; for (int i = 0; i < length; i++) { final char ch = input.charAt(i); if (ch == separator) { upperCase = true; } else if (upperCase) { sb.append(Character.toUpperCase(ch)); upperCase = false; } else { sb.append(ch); } } return sb.toString(); } \n### Response:", "ground_truth": "Converts separated string value to CamelCase.", "predict": "This method returns a camelCase-formatted string based on the input string, the first character being uppercase if `firstCharUppercase` is true, and otherwise being lowercase."}, {"ID": 1040, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (vs *Set) Equal(vsOther *Set) error { if vs.Size() != vsOther.Size() { return fmt.Errorf(\"set size %d != other set size %d\", vs.Size(), vsOther.Size()) } // Stop iteration IFF we find a non-matching validator return vs.IterateValidators(func(id crypto.Addressable, power *big.Int) error { otherPower := vsOther.GetPower(id.GetAddress()) if otherPower.Cmp(power) != 0 { return fmt.Errorf(\"set power %d != other set power %d\", power, otherPower) } return nil }) }. \n### Response: // Returns an error if the Sets are not equal describing which part of their structures differ.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String formatParagraph(final String src, final int len, final boolean breakOnWhitespace) { StringBuilder str = new StringBuilder(); int total = src.length(); int from = 0; while (from < total) { int to = from + len; if (to >= total) { to = total; } else if (breakOnWhitespace) { int ndx = StringUtil.lastIndexOfWhitespace(src, to - 1, from); if (ndx != -1) { to = ndx + 1; } } int cutFrom = StringUtil.indexOfNonWhitespace(src, from, to); if (cutFrom != -1) { int cutTo = StringUtil.lastIndexOfNonWhitespace(src, to - 1, from) + 1; str.append(src, cutFrom, cutTo); } str.append('\\n'); from = to; } return str.toString(); } \n### Response:", "ground_truth": "Formats provided string as paragraph.", "predict": "// Formats a paragraph by appending each line to aStringBuilder and returns the formatted string."}, {"ID": 1041, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static function generateSalt($length = 32) { $salt = ''; for($i = 0; $i < $length; ++$i) $salt .= chr(rand(0,127)); return $salt; }. \n### Response: Generates a random string which can be used to salt the password\n\n@param int $length\n\n@return string.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String convertTabsToSpaces(final String line, final int tabWidth) { int tab_index, tab_size; int last_tab_index = 0; int added_chars = 0; if (tabWidth == 0) { return StringUtil.remove(line, '\\t'); } StringBuilder result = new StringBuilder(); while ((tab_index = line.indexOf('\\t', last_tab_index)) != -1) { tab_size = tabWidth - ((tab_index + added_chars) % tabWidth); if (tab_size == 0) { tab_size = tabWidth; } added_chars += tab_size - 1; result.append(line, last_tab_index, tab_index); result.append(StringUtil.repeat(' ', tab_size)); last_tab_index = tab_index+1; } if (last_tab_index == 0) { return line; } result.append(line.substring(last_tab_index)); return result.toString(); } \n### Response:", "ground_truth": "Converts all tabs on a line to spaces according to the provided tab width.\nThis is not a simple tab to spaces replacement, since the resulting\nindentation remains the same.", "predict": "Converts tabs in a string to spaces using a while loop and string manipulation techniques.\n\n@param String line\n\n@return String."}, {"ID": 1042, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected function send( $method, $path, array $headers = array(), $queryString = null, array $links = null, $noCache = false, $absolutePath = false ) { $headers = $this->initHeaders($headers); $transport = HttpTransportFactory::build( 'curl', $this->getCacher(), $this->getLogger() ); if (!$absolutePath) { $path = $this->getApiEndpointPath($path); } $transport ->setMethod($method) ->setPath($path) ->setHeaders($headers) ; if (null !== $queryString) { $transport->setQueryString($queryString); } if (null !== $links) { $transport->setLinks($links); } try { $response = $transport->send(); } catch (ApiHttpResponseException $exception) { if ( 401 === $exception->getStatusCode() && $this->container->has('da_oauth_client.authorization_refresher.oauth') ) { // Try to refresh the access token. $oauthRefresher = $this->container->get('da_oauth_client.authorization_refresher.oauth'); $oauthRefresher->refresh(); $response = $transport->send($noCache); } else { throw $exception; } } return $response; }. \n### Response: Send a request to an API.\n\n@param string       $method       The HTTP method.\n@param string       $path         The relative path to the webservice.\n@param array        $headers      The optionnal headers.\n@param string|array $queryString  The specific queryString to the webservice.\n@param array        $links        Array of resources to link.\n@param boolean      $noCache      To force the request without check if a cache response exist.\n@param boolean      $absolutePath To use absolute path instead of build it with api endpoint.\n\n@return Da\\ApiClientBundle\\Http\\Response\n\n@throws ApiHttpResponseException.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String escapeJava(final String string) { int strLen = string.length(); StringBuilder sb = new StringBuilder(strLen); for (int i = 0; i < strLen; i++) { char c = string.charAt(i); switch (c) { case '\\b' : sb.append(\"\\\\b\"); break; case '\\t' : sb.append(\"\\\\t\"); break; case '\\n' : sb.append(\"\\\\n\"); break; case '\\f' : sb.append(\"\\\\f\"); break; case '\\r' : sb.append(\"\\\\r\"); break; case '\\\"' : sb.append(\"\\\\\\\"\"); break; case '\\\\' : sb.append(\"\\\\\\\\\"); break; default: if ((c < 32) || (c > 127)) { String hex = Integer.toHexString(c); sb.append(\"\\\\u\"); for (int k = hex.length(); k < 4; k++) { sb.append('0'); } sb.append(hex); } else { sb.append(c); } } } return sb.toString(); } \n### Response:", "ground_truth": "Escapes a string using java rules.", "predict": "escapeJava(String string)\n```java\npublic static String escapeJava(String string)\n```"}, {"ID": 1043, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static function loadByPath($path) { $path = trim($path, '/'); if (!$path) { return self::loadRoot(); } $info = pathinfo($path); $nodes = self::loadByName($info['basename']); if (empty($nodes)) { return null; } foreach ($nodes as $node) { if ($node->getPath() === $path) { return $node; } } return null; }. \n### Response: Find and return `Node` that matches the given remote path.\n\n@param string $path Remote path of the `Node`\n\n@return \\CloudDrive\\Node|null\n@throws \\Exception.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String unescapeJava(final String str) { char[] chars = str.toCharArray(); StringBuilder sb = new StringBuilder(str.length()); for (int i = 0; i < chars.length; i++) { char c = chars[i]; if (c != '\\\\') { sb.append(c); continue; } i++; c = chars[i]; switch (c) { case 'b': sb.append('\\b'); break; case 't': sb.append('\\t'); break; case 'n': sb.append('\\n'); break; case 'f': sb.append('\\f'); break; case 'r': sb.append('\\r'); break; case '\"': sb.append('\\\"'); break; case '\\\\': sb.append('\\\\'); break; case 'u' : char hex = (char) Integer.parseInt(new String(chars, i + 1, 4), 16); sb.append(hex); i += 4; break; default: throw new IllegalArgumentException(\"Invalid escaping character: \" + c); } } return sb.toString(); } \n### Response:", "ground_truth": "Unescapes a string using java rules.", "predict": "Unescapes Java escape sequences from a given string.\n\n@param string $str Java string to unescape\n\n@return string\n@throws IllegalArgumentException."}, {"ID": 1044, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def send(transport, time, state, host, description, service, tag, attribute, ttl, metric_f, echo): \"\"\"Send a single event to Riemann\"\"\" client = CommandLineClient(transport) event = client.create_event({ 'time': time, 'state': state, 'host': host, 'description': description, 'service': service, 'tags': tag, 'attributes': dict(attribute), 'ttl': ttl, 'metric_f': metric_f }) with client: client.send_event(event) if echo: echo_event(client.create_dict(event)). \n### Response: Send a single event to Riemann.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @SuppressWarnings({\"unchecked\"}) public <T> T getBean(final Class<T> type) { String name = resolveBeanName(type); return (T) getBean(name); } \n### Response:", "ground_truth": "Returns Petite bean instance. Bean name will be resolved from provided type.", "predict": "This method is used to retrieve a bean from a specified class. It uses the resolveBeanName() method to get the name of the bean, and then calls the getBean() method with the name. The type parameter T is defined as <T> to indicate that it is a generic type. This method is marked with @SuppressWarnings({\"unchecked\"}) to indicate that any unchecked operations may be performed."}, {"ID": 1045, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function draw(Dm_Image $image,$x=0,$y=0,$width=null,$height=null) { $srcImageResource = $image->getImageResource(); if (is_null($width)) $width = $image->getWidth(); if (is_null($height)) $height = $image->getHeight(); return imagecopy( $this->getImageResource(), $srcImageResource, $x, $y, 0, 0, $width, $height ); }. \n### Response: Copy and merge part of an image\n@param DmImage\n@param int x-coordinate of source point.\n@param int y-coordinate of source point.\n@param int Source width.\n@param int Source height.\n@return bool Returns TRUE on success or FALSE on failure..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public <T> T getBean(final String name) { // Lookup for registered bean definition. BeanDefinition def = lookupBeanDefinition(name); if (def == null) { // try provider ProviderDefinition providerDefinition = providers.get(name); if (providerDefinition != null) { return (T) invokeProvider(providerDefinition); } return null; } // Find the bean in its scope Object bean = def.scopeLookup(); if (bean == null) { // Create new bean in the scope initBeanDefinition(def); final BeanData beanData = new BeanData(this, def); registerBeanAndWireAndInjectParamsAndInvokeInitMethods(beanData); bean = beanData.bean(); } return (T) bean; } \n### Response:", "ground_truth": "Returns Petite bean instance.\nPetite container will find the bean in corresponding scope and all its dependencies,\neither by constructor or property injection. When using constructor injection, cyclic dependencies\ncan not be prevented, but at least they are detected.\n\n@see PetiteContainer#createBean(Class)", "predict": "Retrieves a bean with the specified name from a registered definition.\n\n@param String name of the bean to retrieve.\n\n@return The bean with the specified name or null if it cannot be found.\n\nNote: This method lookups the registered bean definition by using the specified name and checks if it is present in the providers array. If it is not found, it tries to find the bean in its scope by using the BeanDefinition's scopeLookup() method. If the bean is not found in the scope, it creates a new bean in the specified scope and registers it with the registered definition. Finally, it returns the bean instance created by the BeanData constructor."}, {"ID": 1046, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def ignore_code(self, code): \"\"\"Check if the error code should be ignored. If 'options.select' contains a prefix of the error code, return False. Else, if 'options.ignore' contains a prefix of the error code, return True. \"\"\" if len(code) < 4 and any(s.startswith(code) for s in self.options.select): return False return (code.startswith(self.options.ignore) and not code.startswith(self.options.select)). \n### Response: Check if the error code should be ignored.\n\n        If 'options.select' contains a prefix of the error code,\n        return False.  Else, if 'options.ignore' contains a prefix of\n        the error code, return True..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void initBeanDefinition(final BeanDefinition def) { // init methods if (def.initMethods == null) { def.initMethods = petiteResolvers.resolveInitMethodPoint(def.type); } // destroy methods if (def.destroyMethods == null) { def.destroyMethods = petiteResolvers.resolveDestroyMethodPoint(def.type); } // properties if (def.properties == null) { def.properties = petiteResolvers.resolvePropertyInjectionPoint(def.type, def.wiringMode == WiringMode.AUTOWIRE); } // methods if (def.methods == null) { def.methods = petiteResolvers.resolveMethodInjectionPoint(def.type); } // ctors if (def.ctor == null) { def.ctor = petiteResolvers.resolveCtorInjectionPoint(def.type); } // values if (def.values == null) { def.values = paramManager.resolveParamInjectionPoints(def.type); } // sets if (def.sets == null) { def.sets = petiteResolvers.resolveSetInjectionPoint(def.type, def.wiringMode == WiringMode.AUTOWIRE); } // params if (def.params == null) { def.params = paramManager.filterParametersForBeanName(def.name, petiteConfig.getResolveReferenceParameters()); } } \n### Response:", "ground_truth": "Resolves and initializes bean definition. May be called multiple times.", "predict": "Provides information about the method that initializes the bean definition.\n\nThe method takes a BeanDefinition object as an argument and initializes it by checking if any of the init methods, destroy methods, properties, methods, ctors, values, sets, or params have a prefix that matches the specified options. If a matching method is found, the bean definition is initialized. Otherwise, the bean definition is not initialized. The method also filters out any parameters that do not match the specified options.\n\nThe method is used to initialize the bean definition for a specific type, and it is called by the framework when the bean definition is first created."}, {"ID": 1047, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected Authentication getAuthenticationCookie(HttpServerExchange exchange) { Authentication authentication = Authentication.create().withSubject(null); String cookieValue = getCookieValue(exchange, this.config.getAuthenticationCookieName()); if (StringUtils.isNotBlank(cookieValue)) { try { String decryptedValue = Application.getInstance(Crypto.class).decrypt(cookieValue, this.config.getAuthenticationCookieEncryptionKey()); JwtConsumer jwtConsumer = new JwtConsumerBuilder() .setRequireSubject() .setVerificationKey(new HmacKey(this.config.getAuthenticationCookieSignKey().getBytes(StandardCharsets.UTF_8))) .setJwsAlgorithmConstraints(new AlgorithmConstraints(ConstraintType.WHITELIST, AlgorithmIdentifiers.HMAC_SHA512)) .build(); JwtClaims jwtClaims = jwtConsumer.processToClaims(decryptedValue); String expiresClaim = jwtClaims.getClaimValue(ClaimKey.EXPIRES.toString(), String.class); if ((\"-1\").equals(expiresClaim)) { authentication = Authentication.create() .withSubject(jwtClaims.getSubject()) .twoFactorAuthentication(jwtClaims.getClaimValue(ClaimKey.TWO_FACTOR.toString(), Boolean.class)); } else if (LocalDateTime.parse(jwtClaims.getClaimValue(ClaimKey.EXPIRES.toString(), String.class), DateUtils.formatter).isAfter(LocalDateTime.now())) { authentication = Authentication.create() .withExpires(LocalDateTime.parse(jwtClaims.getClaimValue(ClaimKey.EXPIRES.toString(), String.class), DateUtils.formatter)) .withSubject(jwtClaims.getSubject()) .twoFactorAuthentication(jwtClaims.getClaimValue(ClaimKey.TWO_FACTOR.toString(), Boolean.class)); } else { //Ignore this and use default authentication } } catch (MalformedClaimException | InvalidJwtException e) { LOG.error(\"Failed to parse authentication cookie\", e); authentication.invalidate(); } } return authentication; }. \n### Response: Retrieves the current authentication from the HttpServerExchange\n\n@param exchange The Undertow HttpServerExchange.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected Object invokeProvider(final ProviderDefinition provider) { if (provider.method != null) { final Object bean; if (provider.beanName != null) { // instance factory method bean = getBean(provider.beanName); } else { // static factory method bean = null; } try { return provider.method.invoke(bean); } catch (Exception ex) { throw new PetiteException(\"Invalid provider method: \" + provider.method.getName(), ex); } } throw new PetiteException(\"Invalid provider\"); } \n### Response:", "ground_truth": "Invokes provider to get a bean.", "predict": "Invokes the specified provider method and throws an exception if the method is invalid.\n\n@param provider The provider definition to invoke.\n\n"}, {"ID": 1048, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def update_from_json(self, json_device): \"\"\"Set all attributes based on API response.\"\"\" self.identifier = json_device['Id'] self.license_plate = json_device['EquipmentHeader']['SerialNumber'] self.make = json_device['EquipmentHeader']['Make'] self.model = json_device['EquipmentHeader']['Model'] self.equipment_id = json_device['EquipmentHeader']['EquipmentID'] self.active = json_device['EngineRunning'] self.odo = json_device['Odometer'] self.latitude = json_device['Location']['Latitude'] self.longitude = json_device['Location']['Longitude'] self.altitude = json_device['Location']['Altitude'] self.speed = json_device['Speed'] self.last_seen = json_device['Location']['DateTime']. \n### Response: Set all attributes based on API response..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void addBean(final String name, final Object bean, WiringMode wiringMode) { wiringMode = petiteConfig.resolveWiringMode(wiringMode); registerPetiteBean(bean.getClass(), name, SingletonScope.class, wiringMode, false, null); BeanDefinition def = lookupExistingBeanDefinition(name); registerBeanAndWireAndInjectParamsAndInvokeInitMethods(new BeanData(this, def, bean)); } \n### Response:", "ground_truth": "Adds object instance to the container as singleton bean.", "predict": "Adds a bean to the application. Retrieves the bean's class and name, and then registers it with the wiring mode specified. Retrieves the existing bean definition for the given name and then registers the new bean with it."}, {"ID": 1049, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected function getOptionLinks(array $urls) { $html = ''; foreach ($urls as $page => $url) { $html .= $this->getOption($url, $page); } return $html; }. \n### Response: Get option tags with links for the URLs in the given array.\n\n@param  array $urls\n@return string.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void setBeanProperty(final String name, final Object value) { Object bean = null; int ndx = name.length(); while (true) { ndx = name.lastIndexOf('.', ndx); if (ndx == -1) { break; } String beanName = name.substring(0, ndx); bean = getBean(beanName); if (bean != null) { break; } ndx--; } if (bean == null) { throw new PetiteException(\"Invalid bean property: \" + name); } try { BeanUtil.declared.setProperty(bean, name.substring(ndx + 1), value); } catch (Exception ex) { throw new PetiteException(\"Invalid bean property: \" + name, ex); } } \n### Response:", "ground_truth": "Sets petite bean property.", "predict": "Set the value of a bean property.\n\n@param  String name\n@param  Object value\n@return void."}, {"ID": 1050, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (c *CMSketch) updateValueBytes(d []byte, count uint64) { h1, h2 := murmur3.Sum128(d) if oriCount, ok := c.queryTopN(h1, h2, d); ok { deltaCount := count - oriCount c.updateTopNWithDelta(h1, h2, d, deltaCount) } c.setValue(h1, h2, count) }. \n### Response: // updateValueBytes updates value of d to count..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public Object getBeanProperty(final String name) { int ndx = name.indexOf('.'); if (ndx == -1) { throw new PetiteException(\"Only bean name is specified, missing property name: \" + name); } String beanName = name.substring(0, ndx); Object bean = getBean(beanName); if (bean == null) { throw new PetiteException(\"Bean doesn't exist: \" + name); } try { return BeanUtil.declared.getProperty(bean, name.substring(ndx + 1)); } catch (Exception ex) { throw new PetiteException(\"Invalid bean property: \" + name, ex); } } \n### Response:", "ground_truth": "Returns petite bean property value.", "predict": "// getBeanProperty retrieves the bean property with the specified name.."}, {"ID": 1051, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func PathValidator(input string) (interface{}, error) { if input == \"\" { return \"\", nil } path, err := homedir.Expand(input) if err != nil { return nil, err } return filepath.Clean(path), nil }. \n### Response: // PathValidator ensures the input is valid looking path\n// Returns modified extended path.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void shutdown() { scopes.forEachValue(Scope::shutdown); externalsCache.clear(); beans.clear(); beansAlt.clear(); scopes.clear(); providers.clear(); beanCollections.clear(); } \n### Response:", "ground_truth": "Shutdowns container. After container is down, it can't be used anymore.", "predict": "// shutdown method is called to clean up resources and close all beans and scopes.\n// It also clears externalsCache, beans, beansAlt, scopes, providers and beanCollections."}, {"ID": 1052, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def add_membership(self, user, role): \"\"\" make user a member of a group \"\"\" targetGroup = AuthGroup.objects(role=role, creator=self.client).first() if not targetGroup: return False target = AuthMembership.objects(user=user, creator=self.client).first() if not target: target = AuthMembership(user=user, creator=self.client) if not role in [i.role for i in target.groups]: target.groups.append(targetGroup) target.save() return True. \n### Response: make user a member of a group.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static MethodParameter[] resolveParameters(final AccessibleObject methodOrCtor) { Class[] paramTypes; Class declaringClass; String name; if (methodOrCtor instanceof Method) { Method method = (Method) methodOrCtor; paramTypes = method.getParameterTypes(); name = method.getName(); declaringClass = method.getDeclaringClass(); } else { Constructor constructor = (Constructor) methodOrCtor; paramTypes = constructor.getParameterTypes(); declaringClass = constructor.getDeclaringClass(); name = CTOR_METHOD; } if (paramTypes.length == 0) { return MethodParameter.EMPTY_ARRAY; } InputStream stream; try { stream = ClassLoaderUtil.getClassAsStream(declaringClass); } catch (IOException ioex) { throw new ParamoException(\"Failed to read class bytes: \" + declaringClass.getName(), ioex); } if (stream == null) { throw new ParamoException(\"Class not found: \" + declaringClass); } try { ClassReader reader = new ClassReader(stream); MethodFinder visitor = new MethodFinder(declaringClass, name, paramTypes); reader.accept(visitor, 0); return visitor.getResolvedParameters(); } catch (IOException ioex) { throw new ParamoException(ioex); } finally { StreamUtil.close(stream); } } \n### Response:", "ground_truth": "Resolves method parameters from a method or constructor.\nReturns an empty array when target does not contain any parameter.\nNo caching is involved in this process, i.e. class bytecode\nis examined every time this method is called.", "predict": "This method resolve parameters of a specific method or constructor. It is used to get the method parameters and their types from a given object. If the method or constructor is a method, it returns an array of MethodParameter objects. If it is a constructor, it returns an array of MethodParameter empty array. It also try to resolve parameters of the declared class and class that not found it will throw an exception. Finally it close the stream used to read the class bytes."}, {"ID": 1053, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def set_ion_type(self, ion_type): \"\"\"Sets context to the given IonType.\"\"\" if ion_type is self.ion_type: return self self.ion_type = ion_type self.line_comment = False return self. \n### Response: Sets context to the given IonType..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public int doAfterBody() throws JspException { BodyContent body = getBodyContent(); JspWriter out = body.getEnclosingWriter(); String bodytext = populateForm(body.getString(), name -> value(name, pageContext)); try { out.print(bodytext); } catch (IOException ioex) { throw new JspException(ioex); } return SKIP_BODY; } \n### Response:", "ground_truth": "Performs smart form population.", "predict": "This method overrides the doAfterBody method in the JspPage class and throws an exception if the page is not a JspPage. It retrieves the BodyContent object and the JspWriter object from the page's methods. It then populates the form data using the getString() method of the BodyContent object and the lambda function passed to the value() method. Finally, it prints the form data to the page's output stream. If the page is not a JspPage, an exception is thrown."}, {"ID": 1054, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected function callValidator($input, $field, $arguments) { $arguments = explode('|', $arguments); foreach ($arguments as $arg) { if ($this->multiple($arg)['multiple']) { switch ($this->multiple($arg)['rule']) { case 'unique': $table = $this->multiple($arg)['arguments'][0]; $column = $this->multiple($arg)['arguments'][1]; $this->unique($input, $table, $column); break; } } else { switch ($arg) { case 'required': $this->required($field, $input); break; case 'email': $this->email($input); break; case 'password': $this->password($input); break; } } } }. \n### Response: Loops through all arguments and checks what methods need to be called.\n\n@param $input\n@param $field\n@param $arguments.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public String getValue(final String... profiles) { if (hasMacro) { return propsData.resolveMacros(value, profiles); } return value; } \n### Response:", "ground_truth": "Returns the property value, with replaced macros.", "predict": "This method retrieves the value of a field based on the specified profiles.\n\n@param profiles The profiles to use for retrieving the value of the field.\n\n@return The value of the field.\n\n@note This method only retrieves the value of the field if the macro is present in the specified profiles. If the macro is not present in the profiles, the method returns the default value of the field."}, {"ID": 1055, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def validate_ip(s): \"\"\"Validate a dotted-quad ip address. The string is considered a valid dotted-quad address if it consists of one to four octets (0-255) seperated by periods (.). >>> validate_ip('127.0.0.1') True >>> validate_ip('127.0') True >>> validate_ip('127.0.0.256') False >>> validate_ip(LOCALHOST) True >>> validate_ip(None) #doctest: +IGNORE_EXCEPTION_DETAIL Traceback (most recent call last): ... TypeError: expected string or buffer :param s: String to validate as a dotted-quad ip address. :type s: str :returns: ``True`` if a valid dotted-quad ip address, ``False`` otherwise. :raises: TypeError \"\"\" if _DOTTED_QUAD_RE.match(s): quads = s.split('.') for q in quads: if int(q) > 255: return False return True return False. \n### Response: Validate a dotted-quad ip address.\n\n    The string is considered a valid dotted-quad address if it consists of\n    one to four octets (0-255) seperated by periods (.).\n\n\n    >>> validate_ip('127.0.0.1')\n    True\n    >>> validate_ip('127.0')\n    True\n    >>> validate_ip('127.0.0.256')\n    False\n    >>> validate_ip(LOCALHOST)\n    True\n    >>> validate_ip(None) #doctest: +IGNORE_EXCEPTION_DETAIL\n    Traceback (most recent call last):\n        ...\n    TypeError: expected string or buffer\n\n\n    :param s: String to validate as a dotted-quad ip address.\n    :type s: str\n    :returns: ``True`` if a valid dotted-quad ip address, ``False`` otherwise.\n    :raises: TypeError.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public void end() { if (parentNode != rootNode) { Node thisNode = parentNode; while (thisNode != rootNode) { if (domBuilder.config.isImpliedEndTags()) { if (implRules.implicitlyCloseTagOnEOF(thisNode.getNodeName())) { thisNode = thisNode.getParentNode(); continue; } } error(\"Unclosed tag closed: <\" + thisNode.getNodeName() + \">\"); thisNode = thisNode.getParentNode(); } } // remove whitespaces if (domBuilder.config.isIgnoreWhitespacesBetweenTags()) { removeLastChildNodeIfEmptyText(parentNode, true); } // foster if (domBuilder.config.isUseFosterRules()) { HtmlFosterRules fosterRules = new HtmlFosterRules(); fosterRules.fixFosterElements(rootNode); } // elapsed rootNode.end(); if (log.isDebugEnabled()) { log.debug(\"LagartoDom tree created in \" + rootNode.getElapsedTime() + \" ms\"); } } \n### Response:", "ground_truth": "Finishes the tree building. Closes unclosed tags.", "predict": "Ends the document.\n\n    This method is overriden to handle the end of the document. It first checks if the parent node is not the root node. If it is not, it recursively calls itself on the parent node until it reaches the root node.\n    It then checks if there are anyImpliedEndTags in the document and if so, it calls the method toimplicitlyCloseTagOnEOF to close any unclosed tags.\n    It also removes whitespaces if thedomBuilder.config.isIgnoreWhitespacesBetweenTags() is true and removesLastChildNodeIfEmptyText is true.\n    It then calls the method tofix Foster Rules to fix the Foster elements in the root node.\n    Finally, it calls the end method of the root node to end the document.\n\n    :param parentNode: The parent node to check.\n    :type parentNode: Node\n    :return: None\n    :raises: None\n\nNote: This method is not used in the provided code snippet, but it is a good practice to add a method-level comment for each method that is not used in the code."}, {"ID": 1056, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (o *Disk) SetMode(v *string) *Disk { if o.Mode = v; o.Mode == nil { o.nullFields = append(o.nullFields, \"Mode\") } return o }. \n### Response: // SetMode sets the mode.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected Element createElementNode(final Tag tag) { boolean hasVoidTags = htmlVoidRules != null; boolean isVoid = false; boolean selfClosed = false; if (hasVoidTags) { isVoid = htmlVoidRules.isVoidTag(tag.getName()); // HTML and XHTML if (isVoid) { // it's void tag, lookup the flag selfClosed = domBuilder.config.isSelfCloseVoidTags(); } } else { // XML, no voids, lookup the flag selfClosed = domBuilder.config.isSelfCloseVoidTags(); } return new Element(rootNode, tag, isVoid, selfClosed); } \n### Response:", "ground_truth": "Creates new element with correct configuration.", "predict": "// createElementNode creates a new element node."}, {"ID": 1057, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def shrink(self, fraction=0.85): \"\"\"Shrink the triangle polydata in the representation of the input mesh. Example: .. code-block:: python from vtkplotter import * pot = load(datadir + 'shapes/teapot.vtk').shrink(0.75) s = Sphere(r=0.2).pos(0,0,-0.5) show(pot, s) |shrink| |shrink.py|_ \"\"\" poly = self.polydata(True) shrink = vtk.vtkShrinkPolyData() shrink.SetInputData(poly) shrink.SetShrinkFactor(fraction) shrink.Update() return self.updateMesh(shrink.GetOutput()). \n### Response: Shrink the triangle polydata in the representation of the input mesh.\n\n        Example:\n            .. code-block:: python\n\n                from vtkplotter import *\n                pot = load(datadir + 'shapes/teapot.vtk').shrink(0.75)\n                s = Sphere(r=0.2).pos(0,0,-0.5)\n                show(pot, s)\n\n            |shrink| |shrink.py|_.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public void tag(final Tag tag) { if (!enabled) { return; } TagType tagType = tag.getType(); Element node; switch (tagType) { case START: if (domBuilder.config.isIgnoreWhitespacesBetweenTags()) { removeLastChildNodeIfEmptyText(parentNode, false); } node = createElementNode(tag); if (domBuilder.config.isImpliedEndTags()) { while (true) { String parentNodeName = parentNode.getNodeName(); if (!implRules.implicitlyCloseParentTagOnNewTag(parentNodeName, node.getNodeName())) { break; } parentNode = parentNode.getParentNode(); if (log.isDebugEnabled()) { log.debug(\"Implicitly closed tag <\" + node.getNodeName() + \"> \"); } } } parentNode.addChild(node); if (!node.isVoidElement()) { parentNode = node; } break; case END: if (domBuilder.config.isIgnoreWhitespacesBetweenTags()) { removeLastChildNodeIfEmptyText(parentNode, true); } String tagName = tag.getName().toString(); Node matchingParent = findMatchingParentOpenTag(tagName); if (matchingParent == parentNode) { // regular situation parentNode = parentNode.getParentNode(); break; } if (matchingParent == null) { // matching open tag not found, remove it error(\"Orphan closed tag ignored: </\" + tagName + \"> \" + tag.getTagPosition()); break; } // try to close it implicitly if (domBuilder.config.isImpliedEndTags()) { boolean fixed = false; while (implRules.implicitlyCloseParentTagOnTagEnd(parentNode.getNodeName(), tagName)) { parentNode = parentNode.getParentNode(); if (log.isDebugEnabled()) { log.debug(\"Implicitly closed tag <\" + tagName + \">\"); } if (parentNode == matchingParent) { parentNode = matchingParent.parentNode; fixed = true; break; } } if (fixed) { break; } } // matching tag found, but it is not a regular situation // therefore close all unclosed tags in between fixUnclosedTagsUpToMatchingParent(tag, matchingParent); break; case SELF_CLOSING: if (domBuilder.config.isIgnoreWhitespacesBetweenTags()) { removeLastChildNodeIfEmptyText(parentNode, false); } node = createElementNode(tag); parentNode.addChild(node); break; } } \n### Response:", "ground_truth": "Visits tags.", "predict": "This method is called by the VTK library when a tag is added to the DOM. It checks if the tag is enabled, and if not, it returns immediately. It then determines the type of the tag by checking the tag's type, and handles different cases depending on the tag type. For example, if the tag is a START tag, it adds a new node to the DOM and checks if the tag isImpliedEndTags(). If it is, it tries to close the tag implicitly. If the tag is an END tag, it removes the last child node of the parent node and adds the new node. If the tag is a  Self-CLOSING tag, it adds the new node to the parent node."}, {"ID": 1058, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public boolean isExpired() { if (_service.getTtl() == 0) { return false; } long t = this.cacheStartTime.getTime(); Date validTime = new Date(t + (_service.getTtl() * ONE_MINUTE_IN_MILLIS)); Date now = new Date(); return (now.getTime() > validTime.getTime()); }. \n### Response: Determine if the service record is expired. The service record include a\nTTL that tells the client how many minutes the client can count on the\ninformation in the service record. If the cache times out, then those\nservice records that have expired should be expunged from the cache.\n\n@return true if the service record should be expired from the cache.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void removeLastChildNodeIfEmptyText(final Node parentNode, final boolean closedTag) { if (parentNode == null) { return; } Node lastChild = parentNode.getLastChild(); if (lastChild == null) { return; } if (lastChild.getNodeType() != Node.NodeType.TEXT) { return; } if (closedTag) { if (parentNode.getChildNodesCount() == 1) { return; } } Text text = (Text) lastChild; if (text.isBlank()) { lastChild.detachFromParent(); } } \n### Response:", "ground_truth": "Removes last child node if contains just empty text.", "predict": "Removes the last child node of a parent node if it is empty and if the tag is closed.\n\n@param parentNode the parent node to remove the last child node from.\n@param closedTag whether the tag is closed or not.\n@return true if the last child node was removed successfully.\n\nNote: This method is used to remove the last child node of a parent node if it is empty and if the tag is closed. If the tag is not closed, the method will not remove the last child node."}, {"ID": 1059, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def get_app_instance(request): \"\"\" Returns a tuple containing the current namespace and the AppHookConfig instance :param request: request object :return: namespace, config \"\"\" app = None if getattr(request, 'current_page', None) and request.current_page.application_urls: app = apphook_pool.get_apphook(request.current_page.application_urls) if app and app.app_config: try: config = None with override(get_language_from_request(request, check_path=True)): namespace = resolve(request.path_info).namespace config = app.get_config(namespace) return namespace, config except Resolver404: pass return '', None. \n### Response: Returns a tuple containing the current namespace and the AppHookConfig instance\n\n    :param request: request object\n    :return: namespace, config.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public String getQueryString() { if (sqlTemplate == null) { return toString(); } if (parameterValues == null) { return sqlTemplate; } final StringBuilder sb = new StringBuilder(); int qMarkCount = 0; final StringTokenizer tok = new StringTokenizer(sqlTemplate + ' ', \"?\"); while (tok.hasMoreTokens()) { final String oneChunk = tok.nextToken(); sb.append(oneChunk); try { Object value = null; if (parameterValues.size() > 1 + qMarkCount) { value = parameterValues.get(1 + qMarkCount); qMarkCount++; } else { if (!tok.hasMoreTokens()) { value = \"\"; } } if (value == null) { value = \"?\"; } sb.append(value); } catch (Throwable th) { sb.append(\"--- Building query failed: \").append(th.toString()); } } return sb.toString().trim(); } \n### Response:", "ground_truth": "Returns the query string.", "predict": "This method returns the query string of a database query. It first checks if the SQL template is null or not. If it is, it returns the toString() method. If it is not, it checks if the parameter values are null. If they are, it returns the SQL template. Then it creates a StringBuilder object and starts a new StringTokenizer object with the SQL template and the \"?\" characters. It iterates through each character in the SQL template and appends it to the StringBuilder. It also tries to retrieve the value of each parameter by checking if it is in the parameter values array and if it is, it retrieves the index of the array and increments it. If the value is null, it appends an \"?\" character to the StringBuilder. If the value is not null and the index is not out of bounds, it appends the value to the StringBuilder. If the parameter values are empty, it appends an empty string to the StringBuilder. Finally, it returns the resulting string. It also handles any exceptions that may occur during the query string building process."}, {"ID": 1060, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def _proc_loop(proc_id, alive, queue, fn): \"\"\"Thread loop for generating data Parameters ---------- proc_id: int Process id alive: multiprocessing.Value variable for signaling whether process should continue or not queue: multiprocessing.Queue queue for passing data back fn: function function object that returns a sample to be pushed into the queue \"\"\" print(\"proc {} started\".format(proc_id)) try: while alive.value: data = fn() put_success = False while alive.value and not put_success: try: queue.put(data, timeout=0.5) put_success = True except QFullExcept: # print(\"Queue Full\") pass except KeyboardInterrupt: print(\"W: interrupt received, stopping process {} ...\".format(proc_id)) print(\"Closing process {}\".format(proc_id)) queue.close(). \n### Response: Thread loop for generating data\n\n        Parameters\n        ----------\n        proc_id: int\n            Process id\n        alive: multiprocessing.Value\n            variable for signaling whether process should continue or not\n        queue: multiprocessing.Queue\n            queue for passing data back\n        fn: function\n            function object that returns a sample to be pushed into the queue.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected String getActionClassName(final Object action) { Class clazz = action.getClass(); clazz = ProxettaUtil.resolveTargetClass(clazz); return clazz.getName(); } \n### Response:", "ground_truth": "Returns correct action class name. Detects Proxetta classes.", "predict": "Method-level comment: Returns the class name of the given action object.\n\nNote: This method is used to get the class name of an action object, which can be used to determine the type of an object or perform some other operation based on its class. The method uses the ProxettaUtil class to resolve the target class of the action object."}, {"ID": 1061, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func getPackageName(f string) string { for { lastPeriod := strings.LastIndex(f, \".\") lastSlash := strings.LastIndex(f, \"/\") if lastPeriod > lastSlash { f = f[:lastPeriod] } else { break } } return f }. \n### Response: // getPackageName reduces a fully qualified function name to the package name\n// There really ought to be to be a better way....\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected int calculateTo(final int from, final int count, final int size) { int to = size; if (count != -1) { to = from + count; if (to > size) { to = size; } } return to; } \n### Response:", "ground_truth": "Calculates 'TO'.", "predict": "// Calculate the target size by adding the number of elements in the input array and counting the number of occurrences of each element\n// If the count is not -1, add the count to the from index and increase the to index if the size is not reached\n// Return the final to index"}, {"ID": 1062, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function classTask(Option $option) { $current = $this->getRootAppDir($option); $base_dir = $current; foreach ($option->getArgs() as $class) { $path = str_replace('\\\\', DS, $class); $dir = dirname($path); if ($dir == '.') $dir = ''; $skeleton = $this->getSkeleton($option->get('skeleton')); $class_name = basename($path, '.php'); $namespace = str_replace(DS, '\\\\', $dir); $skeleton->assign('namespace', $namespace); $skeleton->assign('class', $class_name); $skeleton->assign('extends', $option->get('extends')); $skeleton->assign('use-raikiri', $option->get('use-raikiri')); $skeleton->assign('use-accessor', $option->get('use-accessor')); $file = $base_dir . DS . ($dir ? $dir . DS : '') . $class_name . '.php'; $file = $this->loader->find($current . DS . ($dir ? $dir . DS : '') . $class_name . '.php', true)->first(); if (! $file->isExists() || $this->confirmation(['class file(%s) is already exists. override ?', $file])) { $this->fileUtil->mkdirP(dirname($file)); $this->fileUtil->putContents($file, $skeleton->render()); $this->sendMessage('created class file. -> %s', $file); } if ($option->get('with-spec')) $this->task('add:spec', [$class]); } }. \n### Response: add a class.\n\n## usge\n$ ./app add:class Foo\\Bar\\Zoo\n\n@option  extands,e               extends class.\n@option  skeleton,s=class        use skeleton name.\n@option  with-spec               create with spec for class.\n@option  use-raikiri,r=true      use raikiri(di container).\n@option  use-accessor,a          use accessor trait..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void iterateCollection(final Collection collection, final int from, final int count, final PageContext pageContext) throws JspException { JspFragment body = getJspBody(); Iterator iter = collection.iterator(); int i = 0; int to = calculateTo(from, count, collection.size()); while (i < to) { Object item = iter.next(); if (i >= from) { if (status != null) { iteratorStatus.next(!iter.hasNext()); } TagUtil.setScopeAttribute(var, item, scope, pageContext); TagUtil.invokeBody(body); } i++; } } \n### Response:", "ground_truth": "Iterates collection.", "predict": "Iterate through a collection.\n\n## usge\n$./app iterateCollection:collection\n\n@collection  Collection to iterate.\n@from    Start index.\n@count   Number of elements to iterate.\n@pageContext Page context.\n\nExample:\n```\n<ul>\n  @ iterateCollection(array(\"item1\", \"item2\", \"item3\"), 0, 1, PageContext.getJspPage());\n</ul>\n```\n\n```\n<p>The following items will be included in the iteration:</p>\n@ iterateCollection(array(\"item1\", \"item2\", \"item3\"), 0, 1, PageContext.getJspPage());\n```"}, {"ID": 1063, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function(data, hashId, key) { if (hashId == -1) { // record key data.inputChar = key; data.lastEvent = \"input\"; } else if (data.inputChar && data.$lastHash == hashId && data.$lastKey == key) { // check for repeated keypress if (data.lastEvent == \"input\") { data.lastEvent = \"input1\"; } else if (data.lastEvent == \"input1\") { // simulate textinput return true; } } else { // reset data.$lastHash = hashId; data.$lastKey = key; data.lastEvent = \"keypress\"; } }. \n### Response: workaround for j not repeating with `defaults write -g ApplePressAndHoldEnabled -bool true`.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void iterateArray(final Object[] array, final int from, final int count, final PageContext pageContext) throws JspException { JspFragment body = getJspBody(); int len = array.length; int to = calculateTo(from, count, len); int last = to - 1; for (int i = from; i < to; i++) { Object item = array[i]; if (status != null) { iteratorStatus.next(i == last); } TagUtil.setScopeAttribute(var, item, scope, pageContext); TagUtil.invokeBody(body); } } \n### Response:", "ground_truth": "Iterates arrays.", "predict": "Method description: Iterates through an array and performs various operations on each element.\n\nNote: This method is used to iterate through the elements of an array and perform various operations on each element. It uses the `calculateTo` method to determine the index of the last element to iterate through, and the `TagUtil` class is used to set and invoke the body of the Jsp Fragment.\n\nNote 2: This method is used to iterate through the elements of an array and perform various operations on each element. It uses the `calculateTo` method to determine the index of the last element to iterate through, and the `TagUtil` class is used to set and invoke the body of the Jsp Fragment."}, {"ID": 1064, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public CellType getCachedFormulaResultType() { if (formulaType) { if(contentsSupplier.getContent() == null || type == null) { return CellType.BLANK; } else if(\"n\".equals(type)) { return CellType.NUMERIC; } else if(\"s\".equals(type) || \"inlineStr\".equals(type) || \"str\".equals(type)) { return CellType.STRING; } else if(\"b\".equals(type)) { return CellType.BOOLEAN; } else if(\"e\".equals(type)) { return CellType.ERROR; } else { throw new UnsupportedOperationException(\"Unsupported cell type '\" + type + \"'\"); } } else { throw new IllegalStateException(\"Only formula cells have cached results\"); } }. \n### Response: Only valid for formula cells\n@return one of ({@link CellType#NUMERIC}, {@link CellType#STRING},\n{@link CellType#BOOLEAN}, {@link CellType#ERROR}) depending\non the cached value of the formula.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String replace(final String s, final String sub, final String with) { if (sub.isEmpty()) { return s; } int c = 0; int i = s.indexOf(sub, c); if (i == -1) { return s; } int length = s.length(); StringBuilder sb = new StringBuilder(length + with.length()); do { sb.append(s, c, i); sb.append(with); c = i + sub.length(); } while ((i = s.indexOf(sub, c)) != -1); if (c < length) { sb.append(s, c, length); } return sb.toString(); } \n### Response:", "ground_truth": "Replaces all occurrences of a certain pattern in a string with a\nreplacement string. This is the fastest replace function known to author.\n\n@param s      string to be inspected\n@param sub    string pattern to be replaced\n@param with   string that should go where the pattern was", "predict": "This method replaces a specified substring in a given string.\n@param s the input string to be replaced\n@param sub the substring to be replaced\n@param with the replacement string\n@return the modified string after replacing the specified substring."}, {"ID": 1065, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (c *aesCBC) Decrypt(src io.Reader) io.Reader { return &cbcDecryptReader{ decrypter: c.decrypter, src: src, padder: c.padder, } }. \n### Response: // Decrypt will decrypt the data using AES CBC.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String replaceChar(final String s, final char sub, final char with) { int startIndex = s.indexOf(sub); if (startIndex == -1) { return s; } char[] str = s.toCharArray(); for (int i = startIndex; i < str.length; i++) { if (str[i] == sub) { str[i] = with; } } return new String(str); } \n### Response:", "ground_truth": "Replaces all occurrences of a character in a string.\n\n@param s      input string\n@param sub    character to replace\n@param with   character to replace with", "predict": "// Replaces all occurrences of the sub-string with the with-string in the given string."}, {"ID": 1066, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def weights_multi_problem_input(labels, taskid=-1): \"\"\"Assign weight 1.0 to only the inputs for the given task.\"\"\" taskid = check_nonnegative(taskid) weights_all_tokens = weights_multi_problem_all(labels, taskid) weights_target = weights_multi_problem(labels, taskid) return weights_all_tokens - weights_target. \n### Response: Assign weight 1.0 to only the inputs for the given task..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String replaceChars(final String s, final char[] sub, final char[] with) { char[] str = s.toCharArray(); for (int i = 0; i < str.length; i++) { char c = str[i]; for (int j = 0; j < sub.length; j++) { if (c == sub[j]) { str[i] = with[j]; break; } } } return new String(str); } \n### Response:", "ground_truth": "Replaces all occurrences of a characters in a string.\n\n@param s      input string\n@param sub    characters to replace\n@param with   characters to replace with", "predict": "ReplaceChars method is used to replace specific characters in a given string.."}, {"ID": 1067, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def remove_expired_multipartobjects(): \"\"\"Remove expired multipart objects.\"\"\" delta = current_app.config['FILES_REST_MULTIPART_EXPIRES'] expired_dt = datetime.utcnow() - delta file_ids = [] for mp in MultipartObject.query_expired(expired_dt): file_ids.append(str(mp.file_id)) mp.delete() for fid in file_ids: remove_file_data.delay(fid). \n### Response: Remove expired multipart objects..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String replaceFirst(final String s, final String sub, final String with) { int i = s.indexOf(sub); if (i == -1) { return s; } return s.substring(0, i) + with + s.substring(i + sub.length()); } \n### Response:", "ground_truth": "Replaces the very first occurrence of a substring with supplied string.\n\n@param s      source string\n@param sub    substring to replace\n@param with   substring to replace with", "predict": "This method is used to replace the first occurrence of a specified substring in a given string."}, {"ID": 1068, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public String getStringBody(Charset charset) throws IOException { BufferedReader rd = new BufferedReader(new InputStreamReader(getInputStreamBody(), charset)); String line; StringBuilder response = new StringBuilder(); while ((line = rd.readLine()) != null) { if (response.length() != 0) { response.append('\\n'); } response.append(line); } rd.close(); return response.toString(); }. \n### Response: Get the response body as string\n\n@param charset charset for the byte to String conversion\n@return body as string\n@throws IOException if the stream is not accessible.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String replaceFirst(final String s, final char sub, final char with) { int index = s.indexOf(sub); if (index == -1) { return s; } char[] str = s.toCharArray(); str[index] = with; return new String(str); } \n### Response:", "ground_truth": "Replaces the very first occurrence of a character in a string.\n\n@param s      string\n@param sub    char to replace\n@param with   char to replace with", "predict": "Replace the first occurrence of a sub-string with a new value\n\n@param s the string to replace\n@param sub the sub-string to replace\n@return the modified string\n@throws IOException if the input or output stream is not accessible."}, {"ID": 1069, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def interactive(renderer): \"\"\" Parse user input, dump to stdout, rinse and repeat. Python REPL style. \"\"\" _import_readline() _print_heading(renderer) contents = [] more = False while True: try: prompt, more = ('... ', True) if more else ('>>> ', True) contents.append(input(prompt) + '\\n') except EOFError: print('\\n' + mistletoe.markdown(contents, renderer), end='') more = False contents = [] except KeyboardInterrupt: print('\\nExiting.') break. \n### Response: Parse user input, dump to stdout, rinse and repeat.\n    Python REPL style..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String replaceLast(final String s, final String sub, final String with) { int i = s.lastIndexOf(sub); if (i == -1) { return s; } return s.substring(0, i) + with + s.substring(i + sub.length()); } \n### Response:", "ground_truth": "Replaces the very last occurrence of a substring with supplied string.\n\n@param s      source string\n@param sub    substring to replace\n@param with   substring to replace with", "predict": "ReplaceLast method.\n\nThis method takes three arguments: `s`, `sub`, and `with`. It returns a new string that replaces the last occurrence of `sub` in `s`. The method uses the `lastIndexOf` method to find the index of the last occurrence of `sub`, and then uses the `substring` method to create a new substring that starts at the index of the first occurrence of `sub` and ends at the index of the last occurrence of `sub`. Finally, the method concatenates `with` to the beginning and end of the new substring."}, {"ID": 1070, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def envvar_profile_cls(profile_cls=None, **profile_cls_options) -> typing.Type[EnvvarProfile]: \"\"\" A class decorator that makes the decorated class a sub-class of EnvvarProfile and transforms its type annotations into envvar profile properties. \"\"\" def decorator(profile_cls): profile_option_names = [\"profile_root\", \"profile_activating_envvar\"] profile_option_defaults = { \"profile_root\": to_snake_case(profile_cls.__name__) } dct = {} for option_name in profile_option_names: if option_name in profile_cls_options: dct[option_name] = profile_cls_options[option_name] elif option_name in profile_cls.__dict__: dct[option_name] = getattr(profile_cls, option_name) elif option_name in profile_option_defaults: dct[option_name] = profile_option_defaults[option_name] property_names = [] for cls in reversed(profile_cls.__mro__[:-1]): # Exclude base classes that aren't SimpleProfile sub-classes or aren't the class being decorated. if not issubclass(cls, EnvvarProfile) and cls is not profile_cls: continue for k, v in typing.get_type_hints(cls).items(): if k.startswith(\"_\") or k.startswith(\"profile_\"): continue if k not in property_names: property_names.append(k) default = getattr(cls, k, None) if isinstance(default, EnvvarProfileProperty): default = default.default dct[k] = EnvvarProfileProperty(name=k, default=default, type_=v) dct[\"profile_properties\"] = property_names bases = [] if not issubclass(profile_cls, EnvvarProfile): bases.append(EnvvarProfile) bases.append(profile_cls) cls = type(profile_cls.__name__, tuple(bases), dct) cls.__qualname__ = profile_cls.__qualname__ return cls if profile_cls is None: return decorator else: return decorator(profile_cls). \n### Response: A class decorator that makes the decorated class a sub-class of EnvvarProfile and transforms\n    its type annotations into envvar profile properties..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String replaceLast(final String s, final char sub, final char with) { int index = s.lastIndexOf(sub); if (index == -1) { return s; } char[] str = s.toCharArray(); str[index] = with; return new String(str); } \n### Response:", "ground_truth": "Replaces the very last occurrence of a character in a string.\n\n@param s      string\n@param sub    char to replace\n@param with   char to replace with", "predict": "The method `replaceLast` is a utility method that replaces the last occurrence of a specified character (sub) with a specified character (with)."}, {"ID": 1071, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def _merge_close(dat, events, time, min_interval): \"\"\"Merge together events separated by less than a minimum interval. Parameters ---------- dat : ndarray (dtype='float') vector with the data after selection-transformation events : ndarray (dtype='int') N x 3 matrix with start, peak, end samples time : ndarray (dtype='float') vector with time points min_interval : float minimum delay between consecutive events, in seconds Returns ------- ndarray (dtype='int') N x 3 matrix with start, peak, end samples \"\"\" if not events.any(): return events no_merge = time[events[1:, 0] - 1] - time[events[:-1, 2]] >= min_interval if no_merge.any(): begs = concatenate([[events[0, 0]], events[1:, 0][no_merge]]) ends = concatenate([events[:-1, 2][no_merge], [events[-1, 2]]]) new_events = vstack((begs, ends)).T else: new_events = asarray([[events[0, 0], events[-1, 2]]]) # add the location of the peak in the middle new_events = insert(new_events, 1, 0, axis=1) for i in new_events: if i[2] - i[0] >= 1: i[1] = i[0] + argmax(dat[i[0]:i[2]]) return new_events. \n### Response: Merge together events separated by less than a minimum interval.\n\n    Parameters\n    ----------\n    dat : ndarray (dtype='float')\n        vector with the data after selection-transformation\n    events : ndarray (dtype='int')\n        N x 3 matrix with start, peak, end samples\n    time : ndarray (dtype='float')\n        vector with time points\n    min_interval : float\n        minimum delay between consecutive events, in seconds\n\n    Returns\n    -------\n    ndarray (dtype='int')\n        N x 3 matrix with start, peak, end samples.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String remove(final String s, final String sub) { int c = 0; int sublen = sub.length(); if (sublen == 0) { return s; } int i = s.indexOf(sub, c); if (i == -1) { return s; } StringBuilder sb = new StringBuilder(s.length()); do { sb.append(s, c, i); c = i + sublen; } while ((i = s.indexOf(sub, c)) != -1); if (c < s.length()) { sb.append(s, c, s.length()); } return sb.toString(); } \n### Response:", "ground_truth": "Removes all substring occurrences from the string.\n\n@param s      source string\n@param sub    substring to remove", "predict": "Removes a substring from a string.\n\n    Parameters\n    ----------\n    s : String\n        the string to be removed\n    sub : String\n        the substring to be removed\n\n    Returns\n    -------\n    String\n        the modified string without the specified substring."}, {"ID": 1072, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func WithWords(a []string) ConsOpt { f := func(c *Corpus) error { s := set.Strings(a) c.words = s c.frequencies = make([]int, len(s)) for i := range c.frequencies { c.frequencies[i] = 1 } ids := make(map[string]int) maxID := len(s) totalFreq := len(s) var maxWL int for i, w := range a { if len(w) > maxWL { maxWL = len(w) } ids[w] = i } c.ids = ids atomic.AddInt64(&c.maxid, int64(maxID)) c.totalFreq = totalFreq c.maxWordLength = maxWL return nil } return f }. \n### Response: // WithWords creates a corpus from a.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String remove(final String string, final char ch) { int stringLen = string.length(); char[] result = new char[stringLen]; int offset = 0; for (int i = 0; i < stringLen; i++) { char c = string.charAt(i); if (c == ch) { continue; } result[offset] = c; offset++; } if (offset == stringLen) { return string; // no changes } return new String(result, 0, offset); } \n### Response:", "ground_truth": "Removes a single character from string.\n\n@param string    source string\n@param ch  character to remove", "predict": "// Remove removes a character from a string."}, {"ID": 1073, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (a *API) List(args params.BackupsListArgs) (params.BackupsListResult, error) { var result params.BackupsListResult backups, closer := newBackups(a.backend) defer closer.Close() metaList, err := backups.List() if err != nil { return result, errors.Trace(err) } result.List = make([]params.BackupsMetadataResult, len(metaList)) for i, meta := range metaList { result.List[i] = CreateResult(meta, \"\") } return result, nil }. \n### Response: // List provides the implementation of the API method..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static boolean isAllEmpty(final String... strings) { for (String string : strings) { if (!isEmpty(string)) { return false; } } return true; } \n### Response:", "ground_truth": "Determines if string array contains empty strings.\n@see #isEmpty(CharSequence)", "predict": "// IsAllEmpty returns true if all strings in the input are empty.."}, {"ID": 1074, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (c *Calcium) SetNodeAvailable(ctx context.Context, podname, nodename string, available bool) (*types.Node, error) { n, err := c.GetNode(ctx, podname, nodename) if err != nil { return nil, err } n.Available = available if err := c.store.UpdateNode(ctx, n); err != nil { return nil, err } return n, nil }. \n### Response: // SetNodeAvailable set node available or not.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static boolean isAllBlank(final String... strings) { for (String string : strings) { if (!isBlank(string)) { return false; } } return true; } \n### Response:", "ground_truth": "Determines if string array contains just blank strings.", "predict": "// IsAllBlank checks if all strings in the array are blank."}, {"ID": 1075, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (client *Client) GetBuildpacks(filters ...Filter) ([]Buildpack, Warnings, error) { request, err := client.newHTTPRequest(requestOptions{ RequestName: internal.GetBuildpacksRequest, Query: ConvertFilterParameters(filters), }) if err != nil { return nil, nil, err } var buildpacks []Buildpack warnings, err := client.paginate(request, Buildpack{}, func(item interface{}) error { if buildpack, ok := item.(Buildpack); ok { buildpacks = append(buildpacks, buildpack) } else { return ccerror.UnknownObjectInListError{ Expected: Buildpack{}, Unexpected: item, } } return nil }) return buildpacks, warnings, err }. \n### Response: // GetBuildpacks searches for a buildpack with the given name and returns it if it exists..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String[] toStringArray(final Object value) { if (value == null) { return new String[0]; } Class<?> type = value.getClass(); if (!type.isArray()) { return new String[] {value.toString()}; } Class componentType = type.getComponentType(); if (componentType.isPrimitive()) { if (componentType == int.class) { return ArraysUtil.toStringArray((int[]) value); } else if (componentType == long.class) { return ArraysUtil.toStringArray((long[]) value); } else if (componentType == double.class) { return ArraysUtil.toStringArray((double[]) value); } else if (componentType == float.class) { return ArraysUtil.toStringArray((float[]) value); } else if (componentType == boolean.class) { return ArraysUtil.toStringArray((boolean[]) value); } else if (componentType == short.class) { return ArraysUtil.toStringArray((short[]) value); } else if (componentType == byte.class) { return ArraysUtil.toStringArray((byte[]) value); } else { throw new IllegalArgumentException(); } } else { return ArraysUtil.toStringArray((Object[]) value); } } \n### Response:", "ground_truth": "Converts an array object to array of strings, where every element\nof input array is converted to a string. If input is not an array,\nthe result will still be an array with one element.", "predict": "// Returns a string array representation of the given object.."}, {"ID": 1076, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def create_token(credential, opts = {}) data, _status_code, _headers = create_token_with_http_info(credential, opts) return data end. \n### Response: Creates a new token\n @param credential\n @param [Hash] opts the optional parameters\n @return [TokenResponse].\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private static String changeFirstCharacterCase(final boolean capitalize, final String string) { int strLen = string.length(); if (strLen == 0) { return string; } char ch = string.charAt(0); char modifiedCh; if (capitalize) { modifiedCh = Character.toUpperCase(ch); } else { modifiedCh = Character.toLowerCase(ch); } if (modifiedCh == ch) { // no change, return unchanged string return string; } char[] chars = string.toCharArray(); chars[0] = modifiedCh; return new String(chars); } \n### Response:", "ground_truth": "Internal method for changing the first character case.", "predict": "This method changes the first character of a string based on whether the user wants to capitalize it or not. It returns a new string with the modified character.\n```\n// Method to change the first character case of a string\nprivate static String changeFirstCharacterCase(final boolean capitalize, final String string) {\n    // Get the length of the string\n    int strLen = string.length();\n    // If the string is empty, return the original string\n    if (strLen == 0) {\n        return string;\n    }\n    // Get the first character\n    char ch = string.charAt(0);\n    // Convert the character to uppercase or lowercase\n    char modifiedCh;\n    if (capitalize) {\n        modifiedCh = Character.toUpperCase(ch);\n    } else {\n        modifiedCh = Character.toLowerCase(ch);\n    }\n    // If the modified character is the same as the original character, return the original string\n    if (modifiedCh == ch) {\n        // No change, return the unchanged string\n        return string;\n    }\n    // Get the characters of the string\n    char[] chars = string.toCharArray();\n    // Set the first character to the modified character\n    chars[0] = modifiedCh;\n    // Return a new string with the modified characters\n    return new String(chars);\n}\n```"}, {"ID": 1077, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def _styles_part(self): \"\"\" Instance of |StylesPart| for this document. Creates an empty styles part if one is not present. \"\"\" try: return self.part_related_by(RT.STYLES) except KeyError: styles_part = StylesPart.default(self.package) self.relate_to(styles_part, RT.STYLES) return styles_part. \n### Response: Instance of |StylesPart| for this document. Creates an empty styles\n        part if one is not present..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String title(final String string) { char[] chars = string.toCharArray(); boolean wasWhitespace = true; for (int i = 0; i < chars.length; i++) { char c = chars[i]; if (CharUtil.isWhitespace(c)) { wasWhitespace = true; } else { if (wasWhitespace) { chars[i] = Character.toUpperCase(c); } else { chars[i] = Character.toLowerCase(c); } wasWhitespace = false; } } return new String(chars); } \n### Response:", "ground_truth": "Makes a title-cased string from given input.", "predict": "This method returns the title of the document. It converts the given string to a char array and then iterates over the characters in the array. It checks if the character is whitespace and if so, sets the was whitespace flag to true. If the whitespace flag is not set, it converts the character to uppercase or lowercase based on the current was whitespace flag. Finally, it converts the resulting characters back to a string and returns it."}, {"ID": 1078, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public Collection<GrantedAuthority> getGrantedAuthorities(DirContextOperations user, String username) { String userDn = user.getNameInNamespace(); if (logger.isDebugEnabled()) { logger.debug(\"Getting authorities for user \" + userDn); } Set<GrantedAuthority> roles = getGroupMembershipRoles(userDn, username); Set<GrantedAuthority> extraRoles = getAdditionalRoles(user, username); if (extraRoles != null) { roles.addAll(extraRoles); } if (defaultRole != null) { roles.add(defaultRole); } List<GrantedAuthority> result = new ArrayList<GrantedAuthority>(roles.size()); result.addAll(roles); return result; }. \n### Response: Obtains the authorities for the user who's directory entry is represented by\nthe supplied LdapUserDetails object.\n\n@param user the user who's authorities are required\n@return the set of roles granted to the user..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String compressChars(final String s, final char c) { int len = s.length(); StringBuilder sb = new StringBuilder(len); boolean wasChar = false; for (int i = 0; i < len; i++) { char c1 = s.charAt(i); if (c1 == c) { if (wasChar) { continue; } wasChar = true; } else { wasChar = false; } sb.append(c1); } if (sb.length() == len) { return s; } return sb.toString(); } \n### Response:", "ground_truth": "Compress multiple occurrences of given char into one appearance.", "predict": "Compresses a given string by replacing all occurrences of a character with another character.\n\n@param s the string to compress\n@return the compressed string.."}, {"ID": 1079, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static function createTempPath($prefix = 'php-') { $temp = tempnam(sys_get_temp_dir(), $prefix); if (false === $temp) { // @codeCoverageIgnoreStart throw new FileException( 'A new temporary file could not be created.' ); } // @codeCoverageIgnoreEnd return $temp; }. \n### Response: Creates a new temporary file and returns its path.\n\n@param string $prefix The prefix for the name of the temporary file.\n\n@return string The path to the temporary file.\n\n@throws FileException If the temporary file could not be created..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static boolean startsWithIgnoreCase(final String src, final String subS, final int startIndex) { String sub = subS.toLowerCase(); int sublen = sub.length(); if (startIndex + sublen > src.length()) { return false; } int j = 0; int i = startIndex; while (j < sublen) { char source = Character.toLowerCase(src.charAt(i)); if (sub.charAt(j) != source) { return false; } j++; i++; } return true; } \n### Response:", "ground_truth": "Tests if this string starts with the specified prefix with ignored case\nand with the specified prefix beginning a specified index.\n\n@param src        source string to test\n@param subS       starting substring\n@param startIndex index from where to test\n\n@return true if the character sequence represented by the argument is\na prefix of the character sequence represented by this string;\nfalse otherwise.", "predict": "This method checks if a string starts with a specific substring in ignore case. It does so by converting both the substring and the original string to lowercase, and then checking if the first character of the substring is different from the first character of the original string. If they are the same, the method returns true, otherwise it returns false.\n\n@param String src The source string to check forstartsWithIgnoreCase.\n\n@param String subS The substring to check forstartsWithIgnoreCase.\n\n@return boolean The result of the method's check forstartsWithIgnoreCase.\n\n@throws startsWithException If the method fails to check forstartsWithIgnoreCase."}, {"ID": 1080, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public List<String> getFileTypes() { List<String> fileTypes = getComponentModel().fileTypes; if (fileTypes == null) { return Collections.emptyList(); } return Collections.unmodifiableList(fileTypes); }. \n### Response: Returns a list of strings that determine the allowable file mime types accepted by the file input. If no types\nhave been added an empty list is returned. An empty list indicates that all file types are accepted.\n\n@return The mime types accepted by this file input e.g. \"text/plain\", \"text/html\", \"application/pdf\"..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static boolean endsWithChar(final String s, final char c) { if (s.length() == 0) { return false; } return s.charAt(s.length() - 1) == c; } \n### Response:", "ground_truth": "Returns if string ends with provided character.", "predict": "This method returns a boolean indicating whether the given string ends with the specified character. If the string is empty, it returns false.\n\n@param s The string to check for endsWithChar.\n@param c The character to check for endsWithChar.\n@return Whether the given string ends with the specified character or not.\n\nExample:\n```\nboolean isEndsWithChar = endsWithChar(\"Hello World\",''); // true\n```\n@return Whether the given string ends with the specified character or not."}, {"ID": 1081, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void writeTable(VoltTable table) throws IOException { int len = table.getSerializedSize(); growIfNeeded(len); table.flattenToBuffer(buffer.b()); }. \n### Response: Write a table using it's ByteBuffer serialization code..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static int countIgnoreCase(final String source, final String sub) { int count = 0; int j = 0; int sublen = sub.length(); if (sublen == 0) { return 0; } while (true) { int i = indexOfIgnoreCase(source, sub, j); if (i == -1) { break; } count++; j = i + sublen; } return count; } \n### Response:", "ground_truth": "Count substring occurrences in a source string, ignoring case.\n\n@param source\tsource string\n@param sub\t\tsubstring to count\n@return\t\t\tnumber of substring occurrences", "predict": "This method counts the number of occurrences of a given substring in a given source string. It uses a while loop to iterate through the source string, and the indexOfIgnoreCase() method to find the index of the substring in the source string. If the substring is not found, the loop breaks. After finding the index of the substring, the count is incremented. The method returns the total number of occurrences of the substring in the source string."}, {"ID": 1082, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void processSource(String[] filenames) { for (int i = 0; i != filenames.length; ++i) { String filename = filenames[i]; if (!filename.endsWith(\".js\")) { addError(\"msg.extension.not.js\", filename); return; } File f = new File(filename); String source = readSource(f); if (source == null) return; String mainClassName = targetName; if (mainClassName == null) { String name = f.getName(); String nojs = name.substring(0, name.length() - 3); mainClassName = getClassName(nojs); } if (targetPackage.length() != 0) { mainClassName = targetPackage+\".\"+mainClassName; } Object[] compiled = compiler.compileToClassFiles(source, filename, 1, mainClassName); if (compiled == null || compiled.length == 0) { return; } File targetTopDir = null; if (destinationDir != null) { targetTopDir = new File(destinationDir); } else { String parent = f.getParent(); if (parent != null) { targetTopDir = new File(parent); } } for (int j = 0; j != compiled.length; j += 2) { String className = (String)compiled[j]; byte[] bytes = (byte[])compiled[j + 1]; File outfile = getOutputFile(targetTopDir, className); try { FileOutputStream os = new FileOutputStream(outfile); try { os.write(bytes); } finally { os.close(); } } catch (IOException ioe) { addFormatedError(ioe.toString()); } } } }. \n### Response: Compile JavaScript source..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static boolean equalsIgnoreCase(final String[] as, final String[] as1) { if (as.length != as1.length) { return false; } for (int i = 0; i < as.length; i++) { if (!as[i].equalsIgnoreCase(as1[i])) { return false; } } return true; } \n### Response:", "ground_truth": "Compares two string arrays.\n\n@param as     first string array\n@param as1    second string array\n\n@return true if all array elements matches", "predict": "Check if two strings are equal.."}, {"ID": 1083, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public byte[] getDocumentPageImage(String accountId, String templateId, String documentId, String pageNumber) throws ApiException { return getDocumentPageImage(accountId, templateId, documentId, pageNumber, null); }. \n### Response: Gets a page image from a template for display.\nRetrieves a page image for display from the specified template.\n@param accountId The external account number (int) or account ID Guid. (required)\n@param templateId The ID of the template being accessed. (required)\n@param documentId The ID of the document being accessed. (required)\n@param pageNumber The page number being accessed. (required)\n@return byte[].\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static int indexOfWhitespace(final String string, final int startindex, final int endindex) { for (int i = startindex; i < endindex; i++) { if (CharUtil.isWhitespace(string.charAt(i))) { return i; } } return -1; } \n### Response:", "ground_truth": "Returns first index of a whitespace character, starting from specified index offset.", "predict": "indexOfWhitespace returns the index of the first whitespace character in a string.\n\nThis method returns -1 if no whitespace character is found.\n\n@param string The string to search for whitespace characters in. (required)\n@param startindex The starting index of the search. (required)\n@param endindex The ending index of the search. (required)\n@return The index of the first whitespace character in the string."}, {"ID": 1084, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (conn *Conn) writeMessage(code int, message string) (wrote int, err error) { conn.logger.PrintResponse(conn.sessionID, code, message) line := fmt.Sprintf(\"%d %s\\r\\n\", code, message) wrote, err = conn.controlWriter.WriteString(line) conn.controlWriter.Flush() return }. \n### Response: // writeMessage will send a standard FTP response back to the client..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String stripLeadingChar(final String string, final char c) { if (string.length() > 0) { if (string.charAt(0) == c) { return string.substring(1); } } return string; } \n### Response:", "ground_truth": "Strips leading char if string starts with one.", "predict": "// stripLeadingChar returns the first character of a string, or the string if it is empty.."}, {"ID": 1085, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function getSeedLifespan() { if (!$this->seed_lifespan && $this->getSpecies()) { return $this->getSpecies()->getSeedLifeSpan(); } return $this->seed_lifespan; }. \n### Response: Get seedLifespan.\n\n@return int.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String stripTrailingChar(final String string, final char c) { if (string.length() > 0) { if (string.charAt(string.length() - 1) == c) { return string.substring(0, string.length() - 1); } } return string; } \n### Response:", "ground_truth": "Strips trailing char if string ends with one.", "predict": "stripTrailingChar.\n\n@param string String to be modified.\n@param c Character to be removed from the beginning of the string.\n@return String with the character c removed from the beginning of the string."}, {"ID": 1086, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function add_submission_form_elements(MoodleQuickForm $mform, stdClass $data) { global $USER; $userid = $data->userid; // Team submissions. if ($this->get_instance()->teamsubmission) { $submission = $this->get_group_submission($userid, 0, false); } else { $submission = $this->get_user_submission($userid, false); } // Submission statement. $adminconfig = $this->get_admin_config(); $requiresubmissionstatement = $this->get_instance()->requiresubmissionstatement; $draftsenabled = $this->get_instance()->submissiondrafts; $submissionstatement = ''; if ($requiresubmissionstatement) { $submissionstatement = $this->get_submissionstatement($adminconfig, $this->get_instance(), $this->get_context()); } // If we get back an empty submission statement, we have to set $requiredsubmisisonstatement to false to prevent // that the submission statement checkbox will be displayed. if (empty($submissionstatement)) { $requiresubmissionstatement = false; } // Only show submission statement if we are editing our own submission. if ($requiresubmissionstatement && !$draftsenabled && $userid == $USER->id) { $mform->addElement('checkbox', 'submissionstatement', '', $submissionstatement); $mform->addRule('submissionstatement', get_string('required'), 'required', null, 'client'); } $this->add_plugin_submission_elements($submission, $mform, $data, $userid); // Hidden params. $mform->addElement('hidden', 'id', $this->get_course_module()->id); $mform->setType('id', PARAM_INT); $mform->addElement('hidden', 'userid', $userid); $mform->setType('userid', PARAM_INT); $mform->addElement('hidden', 'action', 'savesubmission'); $mform->setType('action', PARAM_ALPHA); }. \n### Response: Add elements to submission form.\n@param MoodleQuickForm $mform\n@param stdClass $data\n@return void.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String stripChar(final String string, final char c) { if (string.length() == 0) { return string; } if (string.length() == 1) { if (string.charAt(0) == c) { return StringPool.EMPTY; } return string; } int left = 0; int right = string.length(); if (string.charAt(left) == c) { left++; } if (string.charAt(right - 1) == c) { right--; } return string.substring(left, right); } \n### Response:", "ground_truth": "Strips leading and trailing char from given string.", "predict": "stripChar method removes a character from a string.\n@param String string\n@param char c\n@return String with character removed."}, {"ID": 1087, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function draw (ctx, score) { console.log(score) drawStripes(box, ctx) forEachTime(function (time, note) { var midi = toMidi(note.pitch) console.log(time, note, midi) ctx.fillRect(box.x(time), box.y(midi), box.nw(note.duration), box.nh()) }, null, score) }. \n### Response: Draw a piano roll.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String stripToChar(final String string, final char c) { int ndx = string.indexOf(c); if (ndx == -1) { return string; } return string.substring(ndx); } \n### Response:", "ground_truth": "Strips everything up to the first appearance of given char.\nCharacter IS included in the returned string.", "predict": "This method takes a string and returns a new string with the characters that are different from the given character."}, {"ID": 1088, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def createEvenlySpreadSDRs(numSDRs, n, w): \"\"\" Return a set of ~random SDRs that use every available bit an equal number of times, +- 1. \"\"\" assert w <= n available = np.arange(n) np.random.shuffle(available) SDRs = [] for _ in xrange(numSDRs): selected = available[:w] available = available[w:] if available.size == 0: remainderSelected = np.random.choice( np.setdiff1d(np.arange(n), selected), size=(w - selected.size), replace= False) selected = np.append(selected, remainderSelected) available = np.setdiff1d(np.arange(n), remainderSelected) np.random.shuffle(available) selected.sort() SDRs.append(selected) return SDRs. \n### Response: Return a set of ~random SDRs that use every available bit\n  an equal number of times, +- 1..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String stripFromChar(final String string, final char c) { int ndx = string.indexOf(c); if (ndx == -1) { return string; } return string.substring(0, ndx); } \n### Response:", "ground_truth": "Strips everything from the first appearance of given char.\nCharacter IS NOT included in the returned string.", "predict": "Method: `stripFromChar`\n\nDescription: Retrieves a substring from a given string starting at the index of a specified character.\n\n"}, {"ID": 1089, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def fill_hdf5_file(h5file, data): \"\"\"Fills an HDF5 file in a H5PYDataset-compatible manner. Parameters ---------- h5file : :class:`h5py.File` File handle for an HDF5 file. data : tuple of tuple One element per split/source pair. Each element consists of a tuple of (split_name, source_name, data_array, comment), where * 'split_name' is a string identifier for the split name * 'source_name' is a string identifier for the source name * 'data_array' is a :class:`numpy.ndarray` containing the data for this split/source pair * 'comment' is a comment string for the split/source pair The 'comment' element can optionally be omitted. \"\"\" # Check that all sources for a split have the same length split_names = set(split_tuple[0] for split_tuple in data) for name in split_names: lengths = [len(split_tuple[2]) for split_tuple in data if split_tuple[0] == name] if not all(le == lengths[0] for le in lengths): raise ValueError(\"split '{}' has sources that \".format(name) + \"vary in length\") # Initialize split dictionary split_dict = dict([(split_name, {}) for split_name in split_names]) # Compute total source lengths and check that splits have the same dtype # across a source source_names = set(split_tuple[1] for split_tuple in data) for name in source_names: splits = [s for s in data if s[1] == name] indices = numpy.cumsum([0] + [len(s[2]) for s in splits]) if not all(s[2].dtype == splits[0][2].dtype for s in splits): raise ValueError(\"source '{}' has splits that \".format(name) + \"vary in dtype\") if not all(s[2].shape[1:] == splits[0][2].shape[1:] for s in splits): raise ValueError(\"source '{}' has splits that \".format(name) + \"vary in shapes\") dataset = h5file.create_dataset( name, (sum(len(s[2]) for s in splits),) + splits[0][2].shape[1:], dtype=splits[0][2].dtype) dataset[...] = numpy.concatenate([s[2] for s in splits], axis=0) for i, j, s in zip(indices[:-1], indices[1:], splits): if len(s) == 4: split_dict[s[0]][name] = (i, j, None, s[3]) else: split_dict[s[0]][name] = (i, j) h5file.attrs['split'] = H5PYDataset.create_split_array(split_dict). \n### Response: Fills an HDF5 file in a H5PYDataset-compatible manner.\n\n    Parameters\n    ----------\n    h5file : :class:`h5py.File`\n        File handle for an HDF5 file.\n    data : tuple of tuple\n        One element per split/source pair. Each element consists of a\n        tuple of (split_name, source_name, data_array, comment), where\n\n        * 'split_name' is a string identifier for the split name\n        * 'source_name' is a string identifier for the source name\n        * 'data_array' is a :class:`numpy.ndarray` containing the data\n          for this split/source pair\n        * 'comment' is a comment string for the split/source pair\n\n        The 'comment' element can optionally be omitted..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void cropAll(final String... strings) { for (int i = 0; i < strings.length; i++) { String string = strings[i]; if (string != null) { string = crop(strings[i]); } strings[i] = string; } } \n### Response:", "ground_truth": "Crops all elements of string array.", "predict": "Crops all strings in the given array.\n\n    Parameters\n    ----------\n    strings : String...\n        A array of strings.\n\n    Returns\n    -------\n    String...\n        TheCroppedArray with all strings removed.\n\n    Example\n    -------\n    >>> strings = [\"string1\", \"string2\", \"string3\", \"string4\", \"string5\"]\n    >>> cropAll(strings)\n    \"string4\", \"string5\"\n\n    Note\n    -----\n    The crop() method is used to remove unwanted characters from a string.\n    It returns a new string with the unwanted characters removed.\n    The original string is not modified."}, {"ID": 1090, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function appendJSValue(token) { builder.add('(') if (options.compileDebug) { builder.add(`${compile._getDebugMarker(token)},`) } builder.addToken(token) builder.add(')') }. \n### Response: Append ejs expression, with position update\n@param {Token} token - ejs-escaped token.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String trimLeft(final String src) { int len = src.length(); int st = 0; while ((st < len) && (CharUtil.isWhitespace(src.charAt(st)))) { st++; } return st > 0 ? src.substring(st) : src; } \n### Response:", "ground_truth": "Trim whitespaces from the left.", "predict": "Trim left string from the beginning\n@return the trimmed string."}, {"ID": 1091, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void register(String table, String column, Class<?> javaType) { register(table, column, javaTypeMapping.getType(javaType)); }. \n### Response: Register the given javaType for the given table and column\n\n@param table table\n@param column column\n@param javaType java type.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String trimRight(final String src) { int len = src.length(); int count = len; while ((len > 0) && (CharUtil.isWhitespace(src.charAt(len - 1)))) { len--; } return (len < count) ? src.substring(0, len) : src; } \n### Response:", "ground_truth": "Trim whitespaces from the right.", "predict": "trimRight() method trims the rightmost whitespace from the given String src.\n\n@param src the String to be trimmed.\n\nThis method performs a simple operation of removing the rightmost whitespace from the given String.\n\nNote: This method is a utility method and should not be used directly. It is typically used in conjunction with other methods that perform string manipulation."}, {"ID": 1092, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def patch(self, *args, **kwargs): \"\"\"Update a relationship\"\"\" json_data = request.get_json() or {} relationship_field, model_relationship_field, related_type_, related_id_field = self._get_relationship_data() if 'data' not in json_data: raise BadRequest('You must provide data with a \"data\" route node', source={'pointer': '/data'}) if isinstance(json_data['data'], dict): if 'type' not in json_data['data']: raise BadRequest('Missing type in \"data\" node', source={'pointer': '/data/type'}) if 'id' not in json_data['data']: raise BadRequest('Missing id in \"data\" node', source={'pointer': '/data/id'}) if json_data['data']['type'] != related_type_: raise InvalidType('The type field does not match the resource type', source={'pointer': '/data/type'}) if isinstance(json_data['data'], list): for obj in json_data['data']: if 'type' not in obj: raise BadRequest('Missing type in \"data\" node', source={'pointer': '/data/type'}) if 'id' not in obj: raise BadRequest('Missing id in \"data\" node', source={'pointer': '/data/id'}) if obj['type'] != related_type_: raise InvalidType('The type provided does not match the resource type', source={'pointer': '/data/type'}) self.before_patch(args, kwargs, json_data=json_data) obj_, updated = self._data_layer.update_relationship(json_data, model_relationship_field, related_id_field, kwargs) status_code = 200 result = {'meta': {'message': 'Relationship successfully updated'}} if updated is False: result = '' status_code = 204 final_result = self.after_patch(result, status_code) return final_result. \n### Response: Update a relationship.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static int[] indexOfRegion(final String string, final String leftBoundary, final String rightBoundary, final int offset) { int ndx = offset; int[] res = new int[4]; ndx = string.indexOf(leftBoundary, ndx); if (ndx == -1) { return null; } res[0] = ndx; ndx += leftBoundary.length(); res[1] = ndx; ndx = string.indexOf(rightBoundary, ndx); if (ndx == -1) { return null; } res[2] = ndx; res[3] = ndx + rightBoundary.length(); return res; } \n### Response:", "ground_truth": "Returns indexes of the first region without escaping character.\n@see #indexOfRegion(String, String, String, char, int)", "predict": "This code defines a method `indexOfRegion` in a Java class that returns the index of a region in a string. The method takes four parameters: the string to search, the left boundary of the region, the right boundary of the region, and an offset. The method returns an array of four integers that represent the index of the region in the string."}, {"ID": 1093, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def time_multiplier(suffix) u = { s: 1, m: 60, h: 3600, d: 86_400, w: 604_800, y: 31_536_000 } return u[suffix.to_sym] if u.key?(suffix.to_sym) raise Wavefront::Exception::InvalidTimeUnit end. \n### Response: naively return the number of seconds from the given\n multiplier. This makes absolutely no attempt to compensate for\n any kind of daylight savings or calendar adjustment. A day is\n always going to 60 seconds x 60 minutes x 24 hours, and a\n year will always have 365 days.\n\n @param suffix [Symbol, String]\n @return [Integer] the number of seconds in one unit of the\n   given suffix\n @raise InvalidTimeUnit if the suffix is unknown.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String join(final Collection collection, final char separator) { if (collection == null) { return null; } if (collection.size() == 0) { return StringPool.EMPTY; } final StringBuilder sb = new StringBuilder(collection.size() * 16); final Iterator it = collection.iterator(); for (int i = 0; i < collection.size(); i++) { if (i > 0) { sb.append(separator); } sb.append(it.next()); } return sb.toString(); } \n### Response:", "ground_truth": "Joins an collection of objects into one string with separator.", "predict": "This method joins a collection of strings using a specified separator. It creates a new StringBuilder object with the size of the collection multiplied by 16, and then iterates over the collection using an iterator. For each string in the collection, it appends the separator to the StringBuilder and then appends the next string in the collection. Finally, it returns the resulting string as a new string.\n\n @param collection [Collection of strings]\n @return [String] a concatenated string of the given collection of strings\n @raise NoElementsException if the collection is empty.\n\nNote that this method does not take into account any edge cases such as the case where the collection contains only one string or a string that is not a separator. It also does not handle null values or missing elements properly."}, {"ID": 1094, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def path_iter(self, include_self=True): \"\"\"Yields back the path from this node to the root node.\"\"\" if include_self: node = self else: node = self.parent while node is not None: yield node node = node.parent. \n### Response: Yields back the path from this node to the root node..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String join(final Object[] array, final String separator) { if (array == null) { return null; } if (array.length == 0) { return StringPool.EMPTY; } if (array.length == 1) { return String.valueOf(array[0]); } final StringBuilder sb = new StringBuilder(array.length * 16); for (int i = 0; i < array.length; i++) { if (i > 0) { sb.append(separator); } sb.append(array[i]); } return sb.toString(); } \n### Response:", "ground_truth": "Joins an array of objects into one string with separator.", "predict": "This method joins an array of objects using a separator string. It first checks if the array is null, 0, or 1. If it is, it returns null, StringPool.EMPTY, or String.valueOf(array[0]), respectively. If the array has at least 1 element, it creates a StringBuilder with the length of the array multiplied by 16 and iterates through the array, appends the separator string to each element and to the StringBuilder, and returns the resulting string."}, {"ID": 1095, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public OperationFuture<DataCenter> claim(DataCenter dataCenter) { NetworkLink response = networkClient.claim( dataCenterService.findByRef(dataCenter).getId() ); return new OperationFuture<>( dataCenter, response.getOperationId(), queueClient ); }. \n### Response: Claim a network for datacenter\n\n@param dataCenter datacenter reference\n@return OperationFuture wrapper for dataCenter.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String convertCharset(final String source, final String srcCharsetName, final String newCharsetName) { if (srcCharsetName.equals(newCharsetName)) { return source; } return StringUtil.newString(StringUtil.getBytes(source, srcCharsetName), newCharsetName); } \n### Response:", "ground_truth": "Converts string charset. If charset names are the same, the same string is returned.", "predict": "Convert a string to a charset\n\n@param source the string to convert\n@param srcCharsetName the charset name to use\n@param newCharsetName the new charset name to use\n@return the converted string\n\nNote: This method is useful for converting a string to a charset that is not supported by the original charset."}, {"ID": 1096, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def install_plugin(username, repo): \"\"\"Installs a Blended plugin from GitHub\"\"\" print(\"Installing plugin from \" + username + \"/\" + repo) pip.main(['install', '-U', \"git+git://github.com/\" + username + \"/\" + repo + \".git\"]). \n### Response: Installs a Blended plugin from GitHub.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static boolean isCharAtEqual(final String string, final int index, final char charToCompare) { if ((index < 0) || (index >= string.length())) { return false; } return string.charAt(index) == charToCompare; } \n### Response:", "ground_truth": "Safely compares provided char with char on given location.", "predict": "This method compares two characters and returns true if they are equal, and false otherwise."}, {"ID": 1097, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public Revision getRevision(final int revisionID) throws WikiApiException { try { if (revisionID < 1) { throw new IllegalArgumentException(); } int fullRevPK = -1; int limit = 1; PreparedStatement statement = null; ResultSet result = null; try { statement = this.connection.prepareStatement(\"SELECT FullRevisionPK, RevisionPK \" + \"FROM index_revisionID \" + \"WHERE revisionID=? LIMIT 1\"); statement.setInt(1, revisionID); result = statement.executeQuery(); if (result.next()) { fullRevPK = result.getInt(1); limit = (result.getInt(2) - fullRevPK) + 1; } else { throw new WikiPageNotFoundException(\"The revision with the ID \" + revisionID + \" was not found.\"); } } finally { if (statement != null) { statement.close(); } if (result != null) { result.close(); } } return buildRevisionMetaData(fullRevPK, limit); } catch (WikiPageNotFoundException e) { throw e; } catch (Exception e) { throw new WikiApiException(e); } }. \n### Response: Returns the by the id specified revision.\n\n@param revisionID\nID of the revision\n@return Revision\n\n@throws WikiApiException\nif an error occurs or the revision does not exists..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String surround(String string, final String prefix, final String suffix) { if (!string.startsWith(prefix)) { string = prefix + string; } if (!string.endsWith(suffix)) { string += suffix; } return string; } \n### Response:", "ground_truth": "Surrounds the string with provided prefix and suffix if such missing from string.", "predict": "This method returns a new string that is the surrounded by the specified prefix and suffix.\n\n@param string\nThe string to be surrounded\n\n@return The new string\n\n@throws IllegalArgumentException\nIf the input string is not in the correct format."}, {"ID": 1098, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def bluemix(cls, vcap_services, instance_name=None, service_name=None, **kwargs): \"\"\" Create a Cloudant session using a VCAP_SERVICES environment variable. :param vcap_services: VCAP_SERVICES environment variable :type vcap_services: dict or str :param str instance_name: Optional Bluemix instance name. Only required if multiple Cloudant instances are available. :param str service_name: Optional Bluemix service name. Example usage: .. code-block:: python import os from cloudant.client import Cloudant client = Cloudant.bluemix(os.getenv('VCAP_SERVICES'), 'Cloudant NoSQL DB') print client.all_dbs() \"\"\" service_name = service_name or 'cloudantNoSQLDB' # default service try: service = CloudFoundryService(vcap_services, instance_name=instance_name, service_name=service_name) except CloudantException: raise CloudantClientException(103) if hasattr(service, 'iam_api_key'): return Cloudant.iam(service.username, service.iam_api_key, url=service.url, **kwargs) return Cloudant(service.username, service.password, url=service.url, **kwargs). \n### Response: Create a Cloudant session using a VCAP_SERVICES environment variable.\n\n        :param vcap_services: VCAP_SERVICES environment variable\n        :type vcap_services: dict or str\n        :param str instance_name: Optional Bluemix instance name. Only required\n            if multiple Cloudant instances are available.\n        :param str service_name: Optional Bluemix service name.\n\n        Example usage:\n\n        .. code-block:: python\n\n            import os\n            from cloudant.client import Cloudant\n\n            client = Cloudant.bluemix(os.getenv('VCAP_SERVICES'),\n                                      'Cloudant NoSQL DB')\n\n            print client.all_dbs().\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String prefix(String string, final String prefix) { if (!string.startsWith(prefix)) { string = prefix + string; } return string; } \n### Response:", "ground_truth": "Inserts prefix if doesn't exist.", "predict": "This method is used to check if a given string starts with a specified prefix. If it does not, it adds the string to the end of the prefix and returns the modified string. If it does start with the prefix, it returns the original string."}, {"ID": 1099, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (r *Render) toPos(cursor int) (x, y int) { col := int(r.col) return cursor % col, cursor / col }. \n### Response: // toPos returns the relative position from the beginning of the string..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String suffix(String string, final String suffix) { if (!string.endsWith(suffix)) { string += suffix; } return string; } \n### Response:", "ground_truth": "Appends suffix if doesn't exist.", "predict": "// suffix returns the last character of the given string if it ends with the specified suffix, or the original string if it doesn't.."}, {"ID": 1100, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func HasFuzzySearch(ctx context.Context) bool { _, ok := ctx.Value(ctxKeyFuzzySearch).(bool) return ok }. \n### Response: // HasFuzzySearch returns true if a value for FuzzySearch has been set in this context.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String cutToIndexOf(String string, final String substring) { int i = string.indexOf(substring); if (i != -1) { string = string.substring(0, i); } return string; } \n### Response:", "ground_truth": "Cuts the string from beginning to the first index of provided substring.", "predict": "// CutToIndexOf returns the substring of a string that starts at the specified index and ends at the end of the string."}, {"ID": 1101, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function execute(Observer $observer) { $quote = $observer->getQuote(); $order = $observer->getOrder(); $order ->setGabrielqsInstallmentsQty($quote->getGabrielqsInstallmentsQty()) ->setGabrielqsInstallmentsInterestRate($quote->getGabrielqsInstallmentsInterestRate()) ->setGabrielqsInstallmentsInterestAmount($quote->getGabrielqsInstallmentsInterestAmount()) ->setBaseGabrielqsInstallmentsInterestAmount($quote->getBaseGabrielqsInstallmentsInterestAmount()); }. \n### Response: Copies gabrielqs_installments fields from Quote to Order\n@param Observer $observer\n@return void.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String cutFromIndexOf(String string, final String substring) { int i = string.indexOf(substring); if (i != -1) { string = string.substring(i); } return string; } \n### Response:", "ground_truth": "Cuts the string from the first index of provided substring to the end.", "predict": "Cuts the given string from its index of the specified substring.\n@param string The string to be cut from its index of the specified substring.\n@return The cut string."}, {"ID": 1102, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def bcc( self, bcc_emails, global_substitutions=None, is_multiple=False, p=0): \"\"\"Adds Bcc objects to the Personalization object :param bcc_emails: An Bcc or list of Bcc objects :type bcc_emails: Bcc, list(Bcc), tuple :param global_substitutions: A dict of substitutions for all recipients :type global_substitutions: dict :param is_multiple: Create a new personilization for each recipient :type is_multiple: bool :param p: p is the Personalization object or Personalization object index :type p: Personalization, integer, optional \"\"\" if isinstance(bcc_emails, list): for email in bcc_emails: if isinstance(email, str): email = Bcc(email, None) if isinstance(email, tuple): email = Bcc(email[0], email[1]) self.add_bcc(email, global_substitutions, is_multiple, p) else: if isinstance(bcc_emails, str): bcc_emails = Bcc(bcc_emails, None) if isinstance(bcc_emails, tuple): bcc_emails = Bcc(bcc_emails[0], bcc_emails[1]) self.add_bcc(bcc_emails, global_substitutions, is_multiple, p). \n### Response: Adds Bcc objects to the Personalization object\n\n        :param bcc_emails: An Bcc or list of Bcc objects\n        :type bcc_emails: Bcc, list(Bcc), tuple\n        :param global_substitutions: A dict of substitutions for all recipients\n        :type global_substitutions: dict\n        :param is_multiple: Create a new personilization for each recipient\n        :type is_multiple: bool\n        :param p: p is the Personalization object or Personalization object\n                  index\n        :type p: Personalization, integer, optional.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String cutPrefix(String string, final String prefix) { if (string.startsWith(prefix)) { string = string.substring(prefix.length()); } return string; } \n### Response:", "ground_truth": "Cuts prefix if exists.", "predict": "Provides a method for cutting a string in prefix fashion and returning the substring.\n\n        :param string: The string to be cut\n        :param prefix: The prefix to be used as the starting point\n        :return: The substring of the string\n        :type string: String\n        :type prefix: String\n\n"}, {"ID": 1103, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public List getSortedEntries() { Map grouped = new HashMap(); for (int i = 0; i < indexentry.size(); i++) { Entry e = (Entry) indexentry.get(i); String key = e.getKey(); Entry master = (Entry) grouped.get(key); if (master != null) { master.addPageNumberAndTag(e.getPageNumber(), e.getTag()); } else { e.addPageNumberAndTag(e.getPageNumber(), e.getTag()); grouped.put(key, e); } } // copy to a list and sort it List sorted = new ArrayList(grouped.values()); Collections.sort(sorted, comparator); return sorted; }. \n### Response: Returns the sorted list with the entries and the collected page numbers.\n@return Returns the sorted list with the entries and the collected page numbers..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String cutSuffix(String string, final String suffix) { if (string.endsWith(suffix)) { string = string.substring(0, string.length() - suffix.length()); } return string; } \n### Response:", "ground_truth": "Cuts sufix if exists.", "predict": "Cuts the suffix of a string if it ends with it, and returns the modified string.\n@param string The string to be modified.\n@param suffix The suffix to be cut from the string.\n@return The modified string if it ends with the suffix, or the original string if it doesn't."}, {"ID": 1104, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func REPL(env *eval.SimpleEnv) { var err error // A place to store result values of expressions entered // interactively results := make([]interface{}, 0, 10) env.Vars[\"results\"] = reflect.ValueOf(&results) exprs := 0 in := bufio.NewReader(os.Stdin) line, err := readline(\"go> \", in) for line != \"quit\" { if err != nil { if err == io.EOF { break } panic(err) } if expr, err := parser.ParseExpr(line); err != nil { if pair := eval.FormatErrorPos(line, err.Error()); len(pair) == 2 { fmt.Println(pair[0]) fmt.Println(pair[1]) } fmt.Printf(\"parse error: %s\\n\", err) } else if cexpr, errs := eval.CheckExpr(expr, env); len(errs) != 0 { for _, cerr := range errs { fmt.Printf(\"check error: %v\\n\", cerr) } } else if vals, err := eval.EvalExpr(cexpr, env); err != nil { fmt.Printf(\"panic: %s\\n\", err) } else if len(vals) == 0 { fmt.Printf(\"Kind=Slice\\nvoid\\n\") } else if len(vals) == 1 { value := (vals)[0] if value.IsValid() { kind := value.Kind().String() typ := value.Type().String() if typ != kind { fmt.Printf(\"Kind = %v\\n\", kind) fmt.Printf(\"Type = %v\\n\", typ) } else { fmt.Printf(\"Kind = Type = %v\\n\", kind) } fmt.Printf(\"results[%d] = %s\\n\", exprs, eval.Inspect(value)) exprs += 1 results = append(results, (vals)[0].Interface()) } else { fmt.Printf(\"%s\\n\", value) } } else { fmt.Printf(\"Kind = Multi-Value\\n\") size := len(vals) for i, v := range vals { fmt.Printf(\"%s\", eval.Inspect(v)) if i < size-1 { fmt.Printf(\", \") } } fmt.Printf(\"\\n\") exprs += 1 results = append(results, vals) } line, err = readline(\"go> \", in) } }. \n### Response: // REPL is the a read, eval, and print loop..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String cutSurrounding(final String string, final String prefix, final String suffix) { int start = 0; int end = string.length(); if (string.startsWith(prefix)) { start = prefix.length(); } if (string.endsWith(suffix)) { end -= suffix.length(); } if (end <= start) { return StringPool.EMPTY; } return string.substring(start, end); } \n### Response:", "ground_truth": "Removes surrounding prefix and suffixes.", "predict": "// Cut the surrounding string from the given string.."}, {"ID": 1105, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function update(message) { clearLine(stdout, 0); // Clear current STDOUT line cursorTo(stdout, 0); // Place cursor at the start stdout.write(message.toString()); }. \n### Response: Update current STDOUT line\n@param  {String} message\nno return value.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String insert(final String src, final String insert, int offset) { if (offset < 0) { offset = 0; } if (offset > src.length()) { offset = src.length(); } StringBuilder sb = new StringBuilder(src); sb.insert(offset, insert); return sb.toString(); } \n### Response:", "ground_truth": "Inserts a string on provided offset.", "predict": "Inserts the specified insert string at the specified offset in the src string.\n@param  {String} src\nThe string to be inserted.\n@param  {String} insert\nThe insert string to be inserted.\n@return\nThe updated src string.\n\n"}, {"ID": 1106, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func determinePublicKey(sig, pubkeyX []byte) ([]byte, error) { for v := 0; v < 2; v++ { sig[64] = byte(v) pubkey, err := crypto.Ecrecover(DerivationSignatureHash[:], sig) if err == nil { if bytes.Equal(pubkey, pubkeyX) { return pubkey, nil } } else if v == 1 || err != secp256k1.ErrRecoverFailed { return nil, err } } return nil, ErrPubkeyMismatch }. \n### Response: // determinePublicKey uses a signature and the X component of a public key to\n// recover the entire public key..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String repeat(final String source, int count) { StringBand result = new StringBand(count); while (count > 0) { result.append(source); count--; } return result.toString(); } \n### Response:", "ground_truth": "Creates a new string that contains the provided string a number of times.", "predict": "// repeat returns the source string repeated count times."}, {"ID": 1107, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function store( $account_id = null, $identifier = null, $username = null, $address, $verified = null, $upstream_app_name = null, $verification_callback = null, $confirmation_from = null ) { $fields = []; //@todo validate params, throw exception when they are missing if (!is_null($account_id)) $fields['account_id'] = $account_id; if (!is_null($identifier)) $fields['identifier'] = $identifier; if (!is_null($username)) $fields['username'] = $username; $fields['address'] = $address; if (!is_null($verified)) $fields['verified'] = $verified; if (!is_null($upstream_app_name)) $fields['upstream_app_name'] = $upstream_app_name; if (!is_null($verification_callback)) $fields['verification_callback'] = $verification_callback; if (!is_null($confirmation_from)) $fields['confirmation_from'] = $confirmation_from; return $this->_post($fields); }. \n### Response: Create An Email\n\nCreate an email by supplying either an account_id, identifier, or username.\n\n@param int $account_id\n@param string $identifier\n@param string $username\n@param string $address\n@param boolean $verified\n@param string $upstream_app_name\n@param string $verification_callback\n@param string $confirmation_from\n@return \\Unirest\\Response.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String reverse(final String s) { StringBuilder result = new StringBuilder(s.length()); for (int i = s.length() -1; i >= 0; i--) { result.append(s.charAt(i)); } return result.toString(); } \n### Response:", "ground_truth": "Reverse a string.", "predict": "### Method: reverse\n```java\npublic static String reverse(final String s) {\n    StringBuilder result = new StringBuilder(s.length());\n    for (int i = s.length() - 1; i >= 0; i--) {\n        result.append(s.charAt(i));\n    }\n    return result.toString();\n}\n```\nThis method takes a string as input and returns a new string with the reverse of the original string. The method uses a for loop to iterate through the characters of the input string and append them to a new StringBuilder. Finally, the method returns the new string as a final result."}, {"ID": 1108, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (f HandlerFunc) HandleMeasures(time time.Time, measures ...Measure) { f(time, measures...) }. \n### Response: // HandleMeasures calls f, satisfies the Handler interface..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String maxCommonPrefix(final String one, final String two) { final int minLength = Math.min(one.length(), two.length()); final StringBuilder sb = new StringBuilder(minLength); for (int pos = 0; pos < minLength; pos++) { final char currentChar = one.charAt(pos); if (currentChar != two.charAt(pos)) { break; } sb.append(currentChar); } return sb.toString(); } \n### Response:", "ground_truth": "Returns max common prefix of two strings.", "predict": "// maxCommonPrefix returns the longest common prefix of two strings one and two.."}, {"ID": 1109, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function oldJson(json, local, namePrefix){ if (namePrefix) { utils.assertString(namePrefix, 'namePrefix'); namePrefix = namePrefix.val; } else { namePrefix = ''; } local = local ? local.toBoolean() : new nodes.Boolean(local); var scope = local.isTrue ? this.currentScope : this.global.scope; convert(json); return; function convert(obj, prefix){ prefix = prefix ? prefix + '-' : ''; for (var key in obj){ var val = obj[key]; var name = prefix + key; if ('object' == typeof val) { convert(val, name); } else { val = utils.coerce(val); if ('string' == val.nodeName) val = utils.parseString(val.string); scope.add({ name: namePrefix + name, val: val }); } } } }. \n### Response: Old `json` BIF.\n\n@api private.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String findCommonPrefix(final String... strings) { StringBuilder prefix = new StringBuilder(); int index = 0; char c = 0; loop: while (true) { for (int i = 0; i < strings.length; i++) { String s = strings[i]; if (index == s.length()) { break loop; } if (i == 0) { c = s.charAt(index); } else { if (s.charAt(index) != c) { break loop; } } } index++; prefix.append(c); } return prefix.length() == 0 ? StringPool.EMPTY : prefix.toString(); } \n### Response:", "ground_truth": "Finds common prefix for several strings. Returns an empty string if\narguments do not have a common prefix.", "predict": "Find common prefix method."}, {"ID": 1110, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public synchronized void start() throws ManagedProcessException { logger.info(\"Starting up the database...\"); boolean ready = false; try { mysqldProcess = startPreparation(); ready = mysqldProcess.startAndWaitForConsoleMessageMaxMs(getReadyForConnectionsTag(), dbStartMaxWaitInMS); } catch (Exception e) { logger.error(\"failed to start mysqld\", e); throw new ManagedProcessException(\"An error occurred while starting the database\", e); } if (!ready) { if (mysqldProcess.isAlive()) mysqldProcess.destroy(); throw new ManagedProcessException(\"Database does not seem to have started up correctly? Magic string not seen in \" + dbStartMaxWaitInMS + \"ms: \" + getReadyForConnectionsTag() + mysqldProcess.getLastConsoleLines()); } logger.info(\"Database startup complete.\"); }. \n### Response: Starts up the database, using the data directory and port specified in the configuration.\n\n@throws ManagedProcessException if something fatal went wrong.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String shorten(String s, int length, final String suffix) { length -= suffix.length(); if (s.length() > length) { for (int j = length; j >= 0; j--) { if (CharUtil.isWhitespace(s.charAt(j))) { length = j; break; } } String temp = s.substring(0, length); s = temp.concat(suffix); } return s; } \n### Response:", "ground_truth": "Shorten string to given length.", "predict": "shortens a string by removing excess characters and adding the suffix.\n\n@return the shorter version of the input string.\n\n@param s the input string to shorten.\n@param length the length of the input string to shorten.\n@param suffix the string to add to the shortened string."}, {"ID": 1111, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function () { var that = this; return that.suggestions.length > 1 || (that.suggestions.length === 1 && (!that.selection || $.trim(that.suggestions[0].value) !== $.trim(that.selection.value)) ); }. \n### Response: Shows if there are any suggestions besides currently selected\n@returns {boolean}.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String toUpperCase(final String s, Locale locale) { if (s == null) { return null; } StringBuilder sb = null; for (int i = 0; i < s.length(); i++) { char c = s.charAt(i); if (c > 127) { // found non-ascii char, fallback to the slow unicode detection if (locale == null) { locale = Locale.getDefault(); } return s.toUpperCase(locale); } if ((c >= 'a') && (c <= 'z')) { if (sb == null) { sb = new StringBuilder(s); } sb.setCharAt(i, (char)(c - 32)); } } if (sb == null) { return s; } return sb.toString(); } \n### Response:", "ground_truth": "Converts all of the characters in the string to upper case, based on the\nlocale.\n\n@param  s the string to convert\n@param  locale apply this locale's rules\n@return the string, converted to upper case, or null if the\nstring is null", "predict": "This method returns thetoUpperCase() method of a String object, which converts a given String to its uppercase version. It first checks if the input String is null, and if so, it returns null. It then iterates through the characters in the input String, and for each character it checks if it is greater than 127 (which indicates that it is not a ASCII character), and if so, it falls back to the slow unicode detection. If the unicode detection is successful, it converts the character to its uppercase version and returns the result. If the unicode detection is not successful, it returns the original input String. Finally, if the input String is null, it returns the original input String.\n@method {java.lang.String}\n@param {String} s The input String to convert to its uppercase version.\n@param {Locale} locale The Locale to use for the conversion.\n@return {String} The uppercase version of the input String."}, {"ID": 1112, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static function sendHttpRequest($aUrl, $timeout, $userAgent = null, $destinationPath = null, $followDepth = 0, $acceptLanguage = false, $byteRange = false, $getExtendedInfo = false, $httpMethod = 'GET', $httpUsername = null, $httpPassword = null) { // create output file $file = self::ensureDestinationDirectoryExists($destinationPath); $acceptLanguage = $acceptLanguage ? 'Accept-Language: ' . $acceptLanguage : ''; return self::sendHttpRequestBy(self::getTransportMethod(), $aUrl, $timeout, $userAgent, $destinationPath, $file, $followDepth, $acceptLanguage, $acceptInvalidSslCertificate = false, $byteRange, $getExtendedInfo, $httpMethod, $httpUsername, $httpPassword); }. \n### Response: Sends an HTTP request using best available transport method.\n\n@param string $aUrl The target URL.\n@param int $timeout The number of seconds to wait before aborting the HTTP request.\n@param string|null $userAgent The user agent to use.\n@param string|null $destinationPath If supplied, the HTTP response will be saved to the file specified by\nthis path.\n@param int|null $followDepth Internal redirect count. Should always pass `null` for this parameter.\n@param bool $acceptLanguage The value to use for the `'Accept-Language'` HTTP request header.\n@param array|bool $byteRange For `Range:` header. Should be two element array of bytes, eg, `array(0, 1024)`\nDoesn't work w/ `fopen` transport method.\n@param bool $getExtendedInfo If true returns the status code, headers & response, if false just the response.\n@param string $httpMethod The HTTP method to use. Defaults to `'GET'`.\n@param string $httpUsername HTTP Auth username\n@param string $httpPassword HTTP Auth password\n\n@throws Exception if the response cannot be saved to `$destinationPath`, if the HTTP response cannot be sent,\nif there are more than 5 redirects or if the request times out.\n@return bool|string If `$destinationPath` is not specified the HTTP response is returned on success. `false`\nis returned on failure.\nIf `$getExtendedInfo` is `true` and `$destinationPath` is not specified an array with\nthe following information is returned on success:\n\n- **status**: the HTTP status code\n- **headers**: the HTTP headers\n- **data**: the HTTP response data\n\n`false` is still returned on failure.\n@api.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String removeQuotes(final String string) { if ( (startsWithChar(string, '\\'') && endsWithChar(string, '\\'')) || (startsWithChar(string, '\"') && endsWithChar(string, '\"')) || (startsWithChar(string, '`') && endsWithChar(string, '`')) ) { return substring(string, 1, -1); } return string; } \n### Response:", "ground_truth": "Removes starting and ending single or double quotes.", "predict": "Removes any double quotes from a string.\n\n@param string The string to remove quotes from.\n@return The modified string without quotes.\n@api."}, {"ID": 1113, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private long getFormatId(String formatCode) { long ret = 0L; if(formatCode != null && formatCode.length() > 0) { if(numFmts != null) { Iterator it = numFmts.entrySet().iterator(); while(it.hasNext() && ret == 0L) { java.util.Map.Entry entry = (java.util.Map.Entry)it.next(); Long id = (Long)entry.getKey(); String code = (String)entry.getValue(); if(code != null && code.equals(formatCode)) ret = id.longValue(); } } // If not found, also search // the built-in formats if(ret == 0L) { Long l = (Long)builtinNumFmts.get(formatCode); if(l != null) ret = l.longValue(); } // If still not found, // create a new format if(ret == 0L) { CTNumFmts numFmts = stylesheet.getNumFmts(); if(numFmts == null) { numFmts = new CTNumFmts(); stylesheet.setNumFmts(numFmts); } List list = numFmts.getNumFmt(); CTNumFmt numFmt = new CTNumFmt(); numFmt.setNumFmtId(getMaxNumFmtId()+1); numFmt.setFormatCode(formatCode); list.add(numFmt); numFmts.setCount((long)list.size()); addFormatCode(numFmt); ret = numFmt.getNumFmtId(); } } return ret; }. \n### Response: Returns the id for the given number format from the cache.\n@param formatCode The number format code to be checked\n@return The id for the given number format from the cache.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String toHexString(final byte[] bytes) { char[] chars = new char[bytes.length * 2]; int i = 0; for (byte b : bytes) { chars[i++] = CharUtil.int2hex((b & 0xF0) >> 4); chars[i++] = CharUtil.int2hex(b & 0x0F); } return new String(chars); } \n### Response:", "ground_truth": "Converts bytes to hex string.", "predict": "This method converts a byte array to a hexadecimal string.\n@param bytes The byte array to be converted to a hexadecimal string\n@return The hexadecimal string representation of the byte array.\n\n"}, {"ID": 1114, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void progressUpdate(String layerId, String status, String progressMessage) { if (!batchMode && log.isInfoEnabled() && StringUtils.isNotEmpty(layerId)) { if (useAnsi) { updateAnsiProgress(layerId, status, progressMessage); } else { updateNonAnsiProgress(layerId); } flush(); } }. \n### Response: Update the progress.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static byte[] getBytes(final String string) { try { return string.getBytes(JoddCore.encoding); } catch (UnsupportedEncodingException e) { throw new RuntimeException(e); } } \n### Response:", "ground_truth": "Returns String bytes using Jodds default encoding.", "predict": "`getBytes()` method returns the bytes of a string in the specified encoding."}, {"ID": 1115, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def _construct_X(self, omega, weighted=True, **kwargs): \"\"\"Construct the design matrix for the problem\"\"\" t = kwargs.get('t', self.t) dy = kwargs.get('dy', self.dy) fit_offset = kwargs.get('fit_offset', self.fit_offset) if fit_offset: offsets = [np.ones(len(t))] else: offsets = [] cols = sum(([np.sin((i + 1) * omega * t), np.cos((i + 1) * omega * t)] for i in range(self.Nterms)), offsets) if weighted: return np.transpose(np.vstack(cols) / dy) else: return np.transpose(np.vstack(cols)). \n### Response: Construct the design matrix for the problem.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static char detectQuoteChar(final String str) { if (str.length() < 2) { return 0; } final char c = str.charAt(0); if (c != str.charAt(str.length() - 1)) { return 0; } if (c == '\\'' || c == '\"' || c == '`') { return c; } return 0; } \n### Response:", "ground_truth": "Detects quote character or return 0.", "predict": "DetectQuoteChar"}, {"ID": 1116, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def _create_dmnd_database(self, unaligned_sequences_path, daa_output): ''' Build a diamond database using diamond makedb Parameters ---------- unaligned_sequences_path: str path to a FASTA file containing unaligned sequences daa_output: str Name of output database. ''' logging.debug(\"Building diamond database\") cmd = \"diamond makedb --in '%s' -d '%s'\" % (unaligned_sequences_path, daa_output) extern.run(cmd). \n### Response: Build a diamond database using diamond makedb\n\n        Parameters\n        ----------\n        unaligned_sequences_path: str\n            path to a FASTA file containing unaligned sequences\n        daa_output: str\n            Name of output database..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void visit(final String name, final Object value) { if (av != null) { av.visit(name, value); } } \n### Response:", "ground_truth": "Visits a primitive value of the annotation.\n\n@param name the value name.\n@param value the actual value, whose type must be {@link Byte}, {@link Boolean}, {@link\nCharacter}, {@link Short}, {@link Integer} , {@link Long}, {@link Float}, {@link Double},\n{@link String} or {@link Type} of {@link Type#OBJECT} or {@link Type#ARRAY} sort. This\nvalue can also be an array of byte, boolean, short, char, int, long, float or double values\n(this is equivalent to using {@link #visitArray} and visiting each array element in turn,\nbut is more convenient).", "predict": "Visits all elements in the array and their corresponding values.\n\n        Method\n        ---\n        public void visit(final String name, final Object value)\n             visits all elements in the array and their corresponding values.\n           ...\n        }"}, {"ID": 1117, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function copyBulk($class, array $data, array $options = []) { $this->om->startFlushSuite(); $copies = []; foreach ($data as $el) { //get the element $copies[] = $this->copy($el, $options); } $this->om->endFlushSuite(); return $copies; }. \n### Response: Copy a list of entries of `class`.\n\n@param string $class   - the class of the entries to copy\n@param array  $data    - the list of entries to copy\n@param array  $options - additional copy options.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void visitEnum(final String name, final String descriptor, final String value) { if (av != null) { av.visitEnum(name, descriptor, value); } } \n### Response:", "ground_truth": "Visits an enumeration value of the annotation.\n\n@param name the value name.\n@param descriptor the class descriptor of the enumeration class.\n@param value the actual enumeration value.", "predict": "Visit an enum constant.\n\n@param string $name - the name of the enum constant\n@param string $ descriptor - the description of the enum constant\n@param string $ value - the value of the enum constant.\n\n"}, {"ID": 1118, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (q *Query) Delete(values ...interface{}) (Result, error) { if q.hasModel() { table := q.model.Table() if table.SoftDeleteField != nil { q.model.setSoftDeleteField() columns := q.columns q.columns = nil res, err := q.Column(table.SoftDeleteField.SQLName).Update(values...) q.columns = columns return res, err } } return q.ForceDelete(values...) }. \n### Response: // Delete deletes the model. When model has deleted_at column the row\n// is soft deleted instead..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public AnnotationVisitor visitAnnotation(final String name, final String descriptor) { if (av != null) { return av.visitAnnotation(name, descriptor); } return null; } \n### Response:", "ground_truth": "Visits a nested annotation value of the annotation.\n\n@param name the value name.\n@param descriptor the class descriptor of the nested annotation class.\n@return a visitor to visit the actual nested annotation value, or {@literal null} if this\nvisitor is not interested in visiting this nested annotation. The nested annotation\nvalue must be fully visited before calling other methods on this annotation visitor.", "predict": "// Visits an annotation. If the visitor is not null, returns its visitAnnotation method\n// to handle the annotation."}, {"ID": 1119, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (c *FakeLeases) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1beta1.Lease, err error) { obj, err := c.Fake. Invokes(testing.NewPatchSubresourceAction(leasesResource, c.ns, name, pt, data, subresources...), &v1beta1.Lease{}) if obj == nil { return nil, err } return obj.(*v1beta1.Lease), err }. \n### Response: // Patch applies the patch and returns the patched lease..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public <E> DbEntityDescriptor<E> registerType(final Class<E> type) { DbEntityDescriptor<E> ded = createDbEntityDescriptor(type); DbEntityDescriptor<E> existing = descriptorsMap.put(type, ded); if (log.isDebugEnabled()) { log.debug(\"Register \" + type.getName() + \" as \" + ded.getTableName()); } if (existing != null) { if (ded.getType() == type) { return ded; } throw new DbOomException(\"Type already registered: \" + existing.getType()); } existing = entityNamesMap.put(ded.getEntityName(), ded); if (existing != null) { throw new DbOomException(\"Name '\" + ded.getEntityName() + \"' already mapped to an entity: \" + existing.getType()); } return ded; } \n### Response:", "ground_truth": "Registers just type and entity names. Enough for most usages.", "predict": "// Registers the specified type with the database."}, {"ID": 1120, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private int readChar(Reader source) throws ParseException { int c; try { c = source.read(); } catch (IOException e) { throw new ParseException(\"Failed to read input source\", e); } return c; }. \n### Response: Read a single char from an Reader source.\n\n@param source the input to read from\n@return the char read\n@throws ParseException in case of reading error.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public <E> DbEntityDescriptor<E> registerEntity(final Class<E> type, final boolean force) { if (force) { removeEntity(type); } return registerEntity(type); } \n### Response:", "ground_truth": "Registers entity. Existing entity will be removed if exist, so no exception will be thrown.", "predict": "Registers an entity in the Db.\n\n@param type the class of the entity to register\n@param force if true, removes the existing entity before registering it\n@return the DbEntityDescriptor for the registered entity.\n\nNote: This method is used in conjunction with the removeEntity() method to register an entity in the Db. If force is set to true, the existing entity will be removed before the new entity is registered."}, {"ID": 1121, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def range(cls, dataset, dimension): \"\"\" Computes the range along a particular dimension. \"\"\" dim = dataset.get_dimension(dimension, strict=True) values = dataset.dimension_values(dim.name, False) return (np.nanmin(values), np.nanmax(values)). \n### Response: Computes the range along a particular dimension..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public <E> DbEntityDescriptor<E> removeEntity(final Class<E> type) { DbEntityDescriptor<E> ded = descriptorsMap.remove(type); if (ded == null) { ded = createDbEntityDescriptor(type); } entityNamesMap.remove(ded.getEntityName()); tableNamesMap.remove(ded.getTableName()); return ded; } \n### Response:", "ground_truth": "Removes entity and returns removed descriptor.", "predict": "Removes an entity from the database.."}, {"ID": 1122, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def _compile_signature(self, iexec, call_name): \"\"\"Compiles the signature for the specified executable and returns as a dictionary.\"\"\" if iexec is not None: summary = iexec.summary if isinstance(iexec, Function): summary = iexec.returns + \"| \" + iexec.summary elif isinstance(iexec, Subroutine) and len(iexec.modifiers) > 0: summary = \", \".join(iexec.modifiers) + \" | \" + iexec.summary elif isinstance(iexec, Interface): summary = iexec.describe() else: summary = iexec.summary #Add the name of the module who owns the method. Useful in case the #same executable is defined in multiple modules, but only one is #referenced in the current context. if iexec.parent is not None: summary += \" | MODULE: {}\".format(iexec.module.name) else: summary += \" | BUILTIN\" return dict( params=[p.name for p in iexec.ordered_parameters], index=0, call_name=call_name, description=summary, ) else: return []. \n### Response: Compiles the signature for the specified executable and returns\n        as a dictionary..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public <E> E createEntityInstance(final Class<E> type) { try { return ClassUtil.newInstance(type); } catch (Exception ex) { throw new DbOomException(ex); } } \n### Response:", "ground_truth": "Creates new entity instances.", "predict": "This method creates an instance of the specified entity type using the ClassUtil.newInstance() method and throws an exception if any errors occur."}, {"ID": 1123, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function getItem() { $sourceObject = $this->sourceObject; if ($this->value !== null) { $item = $sourceObject::get()->byID($this->value); } else { $item = $sourceObject::create(); } return $item; }. \n### Response: Get the currently selected object\n@return DataObject.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public WrapperProxettaFactory setTargetInterface(final Class targetInterface) { if (!targetInterface.isInterface()) { throw new ProxettaException(\"Not an interface: \" + targetInterface.getName()); } this.targetInterface = targetInterface; return this; } \n### Response:", "ground_truth": "Defines the interface of the resulting class.", "predict": "Set the target interface\n@param targetInterface the target interface\n@return this instance of WrapperProxettaFactory\n@throw ProxettaException if the target interface is not an interface."}, {"ID": 1124, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def run_initializer(initializer, initargs): \"\"\"Runs the Pool initializer dealing with errors.\"\"\" try: initializer(*initargs) return True except Exception as error: logging.exception(error) return False. \n### Response: Runs the Pool initializer dealing with errors..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void injectTargetIntoWrapper(final Object target, final Object wrapper) { ProxettaUtil.injectTargetIntoWrapper(target, wrapper, targetFieldName); } \n### Response:", "ground_truth": "Injects target into wrapper.", "predict": "Injects the target object into the wrapper object using ProxettaUtil."}, {"ID": 1125, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function Listings (options) { options = options || {}; EventEmitter.call(this); this.accessToken = options.accessToken; this.steamid64 = options.steamid64; this.waitTime = options.waitTime || 1000; this.cap = -1; this.promotes = -1; this.listings = []; this.actions = { create: [], remove: [] }; this.items = options.items || new Items({ apiKey: options.apiKey }); this.ready = false; }. \n### Response: Creates a new instance of bptf-listings\n@class\n@param {object} options Optional settings.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected PropertyDescriptor[] lookupAnnotatedProperties(final Class type) { PropertyDescriptor[] properties = annotatedProperties.get(type); if (properties != null) { return properties; } ClassDescriptor cd = ClassIntrospector.get().lookup(type); PropertyDescriptor[] allProperties = cd.getAllPropertyDescriptors(); List<PropertyDescriptor> list = new ArrayList<>(); for (PropertyDescriptor propertyDescriptor : allProperties) { Annotation ann = null; if (propertyDescriptor.getFieldDescriptor() != null) { ann = propertyDescriptor.getFieldDescriptor().getField().getAnnotation(annotations); } if (ann == null && propertyDescriptor.getWriteMethodDescriptor() != null) { ann = propertyDescriptor.getWriteMethodDescriptor().getMethod().getAnnotation(annotations); } if (ann == null && propertyDescriptor.getReadMethodDescriptor() != null) { ann = propertyDescriptor.getReadMethodDescriptor().getMethod().getAnnotation(annotations); } if (ann != null) { list.add(propertyDescriptor); } } if (list.isEmpty()) { properties = EMPTY; } else { properties = list.toArray(new PropertyDescriptor[0]); } annotatedProperties.put(type, properties); return properties; } \n### Response:", "ground_truth": "Lookups for annotated properties. Caches all annotated properties on the first\naction class scan.", "predict": "Provides access to the annotated properties of a given class.\n@param {Class} type The class to look up the annotated properties for.\n@return A list of PropertyDescriptor objects representing the annotated properties of the given type.\n\nNote: This method is used by the `lookupAnnotatedProperties` method in the `B tf-listings` class."}, {"ID": 1126, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (c *commitSweepResolver) ResolverKey() []byte { key := newResolverID(c.commitResolution.SelfOutPoint) return key[:] }. \n### Response: // ResolverKey returns an identifier which should be globally unique for this\n// particular resolver within the chain the original contract resides within..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public DbServer detectDatabaseAndConfigureDbOom( final ConnectionProvider cp, final DbOomConfig dbOomConfig) { cp.init(); final Connection connection = cp.getConnection(); final DbServer dbServer = detectDatabase(connection); cp.closeConnection(connection); dbServer.accept(dbOomConfig); return dbServer; } \n### Response:", "ground_truth": "Detects database and configure DbOom engine.", "predict": "// Detects the database and configures DbOom for the given ConnectionProvider and DbOomConfig. \n// Initializes the ConnectionProvider, obtains a connection, and then calls the \n// detectDatabase method to determine the database to use. Finally, closes the connection \n// and accepts the DbOomConfig. Returns the DbServer object to be used for subsequent \n// database operations."}, {"ID": 1127, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (a Values) InfluxQLType() (influxql.DataType, error) { if len(a) == 0 { return influxql.Unknown, fmt.Errorf(\"no values to infer type\") } switch a[0].(type) { case FloatValue: return influxql.Float, nil case IntegerValue: return influxql.Integer, nil case UnsignedValue: return influxql.Unsigned, nil case BooleanValue: return influxql.Boolean, nil case StringValue: return influxql.String, nil } return influxql.Unknown, fmt.Errorf(\"unsupported value type %T\", a[0]) }. \n### Response: // InfluxQLType returns the influxql.DataType the values map to..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public void close() throws IOException { if (closed) { return; } if (gzipstream != null) { flushToGZip(); gzipstream.close(); gzipstream = null; } else { if (bufferCount > 0) { output.write(buffer, 0, bufferCount); bufferCount = 0; } } output.close(); closed = true; } \n### Response:", "ground_truth": "Closes this output stream, causing any buffered data to be flushed and any\nfurther output data to throw an IOException.", "predict": "// Closes the gzip stream and the output file if one is present, and sets the closed flag.."}, {"ID": 1128, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected function _utf8encode($utf8_string, $length) { $unicode = ''; $values = array(); $num_octets = 1; $unicode_length = 0; mbstring_binary_safe_encoding(); $string_length = strlen($utf8_string); reset_mbstring_encoding(); for ($i = 0; $i < $string_length; $i++) { $value = ord($utf8_string[ $i ]); if ($value < 128) { if ($length && ($unicode_length >= $length)) { break; } $unicode .= chr($value); $unicode_length++; } else { if (count($values) == 0) { if ($value < 224) { $num_octets = 2; } elseif ($value < 240) { $num_octets = 3; } else { $num_octets = 4; } } $values[] = $value; if ($length && ($unicode_length + ($num_octets * 3)) > $length) { break; } if (count($values) == $num_octets) { for ($j = 0; $j < $num_octets; $j++) { $unicode .= '%' . dechex($values[ $j ]); } $unicode_length += $num_octets * 3; $values = array(); $num_octets = 1; } } } return $unicode; }. \n### Response: Encode the Unicode values to be used in the URI.\nThis method is take from Wodpress formatting.php method utf8_uri_encode.\n\n@param string $string The string to be encoded in utf-8\n@param int    $length The max length\n\n@return string Return the utf-8 encoded string.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public void write(final int b) throws IOException { if (closed) { throw new IOException(\"Cannot write to a closed output stream\"); } if (bufferCount >= buffer.length) { flushToGZip(); } buffer[bufferCount++] = (byte) b; } \n### Response:", "ground_truth": "Writes the specified byte to our output stream.", "predict": "This method is used to write data to the output stream. It is marked as `@Override` which means that it is a method that is overriden by another method in the same class.\n\nThe method takes a `int` parameter `b` and throws an `IOException` if the output stream is closed. It also checks if the buffer is full and calls `flushToGZip()` if necessary. Finally, it writes the data to the buffer and increments the buffer count.\n\nThis method is used to write data to the output stream in a gzip-compressed format, which can improve the performance of the method."}, {"ID": 1129, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (r *AddressRange) String() string { return fmt.Sprintf(\"Sub: %s, range [%d, %d]\", r.Sub, r.Start, r.End) }. \n### Response: // String returns the string form of the AddressRange object.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public void doFilter(final ServletRequest request, final ServletResponse response, final FilterChain chain) throws IOException, ServletException { HttpServletRequest httpRequest = (HttpServletRequest) request; HttpServletResponse httpResponse = (HttpServletResponse) response; if (isRequestedSessionIdFromURL(httpRequest)) { HttpSession session = httpRequest.getSession(false); if (session != null) { session.invalidate(); // clear session if session id in URL } } // wrap response to remove URL encoding HttpServletResponseWrapper wrappedResponse = new HttpServletResponseWrapper(httpResponse) { @Override public String encodeRedirectUrl(final String url) { return url; } @Override public String encodeRedirectURL(final String url) { return url; } @Override public String encodeUrl(final String url) { return url; } @Override public String encodeURL(final String url) { return url; } }; chain.doFilter(request, wrappedResponse); } \n### Response:", "ground_truth": "Filters requests to remove URL-based session identifiers.", "predict": "// doFilter method handles HTTP requests and responses, and validate and wrap the response."}, {"ID": 1130, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function (params) { console.log('ecInterface.paymentmethod.update'); return this.request({ url: this._buildUri(this.uri), method: corbel.request.method.PUT, data: params }) .then(function (res) { return corbel.Services.getLocationId(res); }); }. \n### Response: Updates a current payment method for the logged user.\n\n@method\n@memberOf corbel.Ec.PaymentMethodBuilder\n\n@param {Object} params                 The params filter\n@param {String} params.data            The card data encrypted\n(@see https://github.com/adyenpayments/client-side-encryption)\n@param {String} params.name            User identifier related with de payment method\n\n@return {Promise}                      Q promise that resolves to a Payment {Object} or rejects with a\n{@link SilkRoadError}.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public String getEncodedName() { if (name == null) { return null; } try { return MimeUtility.encodeText(name); } catch (final UnsupportedEncodingException ueex) { throw new MailException(ueex); } } \n### Response:", "ground_truth": "Returns encoded attachment name.\n\n@return encoded attachment name. Value may be {@code null}.", "predict": "Returns the encoded name of the given name.\n\n@method\n@memberOf java.util.MimeUtility\n\n@param {String} name                The name to encode\n\n@return {String}                    The encoded name\n\n@throws {MailException}            thrown if the encoding process fails"}, {"ID": 1131, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func DecodeAndConvert(bech string) (string, []byte, error) { hrp, data, err := bech32.Decode(bech) if err != nil { return \"\", nil, errors.Wrap(err, \"decoding bech32 failed\") } converted, err := bech32.ConvertBits(data, 5, 8, false) if err != nil { return \"\", nil, errors.Wrap(err, \"decoding bech32 failed\") } return hrp, converted, nil }. \n### Response: //DecodeAndConvert decodes a bech32 encoded string and converts to base64 encoded bytes.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public byte[] toByteArray() { final FastByteArrayOutputStream out; if (size != -1) { out = new FastByteArrayOutputStream(size); } else { out = new FastByteArrayOutputStream(); } writeToStream(out); return out.toByteArray(); } \n### Response:", "ground_truth": "Returns byte content of the attachment.\n\n@return byte array with content of the attachment.", "predict": "//ToByteArray returns a byte array representation of the stream."}, {"ID": 1132, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function execute() { // Check connection $this->hasConnectionOrFail(); // Capture the start time $start = microtime(true); // Execute the query try { $this->statement->execute(); } catch (\\PDOException $e) { // @FIXME: this should honor error reporting settings throw new QueryFailedException($e->getMessage(), 500, $e); } if ($this->debug) { // Log it $this->log(microtime(true) - $start); } return $this; }. \n### Response: Executes the SQL statement\n\n@return  $this\n@since   2.0.0\n@throws  QueryFailedException.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void writeToFile(final File destination) { InputStream input = null; final OutputStream output; try { input = getDataSource().getInputStream(); output = new FileOutputStream(destination); StreamUtil.copy(input, output); } catch (final IOException ioex) { throw new MailException(ioex); } finally { StreamUtil.close(input); } } \n### Response:", "ground_truth": "Saves attachment to a file.\n\n@param destination The destination file to be written.", "predict": "Writes data to a file\n\n@return  void\n@since   2.0.0\n@throws  IOException."}, {"ID": 1133, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def custom_actions(options) self.resources_configuration[:self][:custom_actions] = options options.each do | resource_or_collection, actions | [*actions].each do | action | create_custom_action(resource_or_collection, action) end end create_resources_url_helpers! [*options[:resource]].each do | action | helper_method \"#{action}_resource_path\", \"#{action}_resource_url\" end [*options[:collection]].each do | action | helper_method \"#{action}_resources_path\", \"#{action}_resources_url\" end end. \n### Response: Defines custom restful actions by resource or collection basis.\n\n   custom_actions :resource => [:delete, :transit], :collection => :search\n\n == Options\n\n * :resource -  Allows you to specify resource actions.\n     custom_actions :resource => :delete\n                         This macro creates 'delete' method in controller and defines\n                         delete_resource_{path,url} helpers. The body of generated 'delete'\n                         method is same as 'show' method. So you can override it if need\n\n * :collection - Allows you to specify collection actions.\n     custom_actions :collection => :search\n                         This macro creates 'search' method in controller and defines\n                         search_resources_{path,url} helpers. The body of generated 'search'\n                         method is same as 'index' method. So you can override it if need.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void writeToStream(final OutputStream out) { InputStream input = null; try { input = getDataSource().getInputStream(); StreamUtil.copy(input, out); } catch (final IOException ioex) { throw new MailException(ioex); } finally { StreamUtil.close(input); } } \n### Response:", "ground_truth": "Saves attachment to the output stream.\n\n@param out OutputStream where attachment should be copied to.", "predict": "Writes data to a stream.\n\n == Parameters\n\n * out - The output stream to write to.\n\n == Exceptions\n\n * IOException - An IOException is thrown if there is an error reading from the input stream or writing to the output stream.\n * MailException - An MailException is thrown if there is a problem sending a mail.\n\n == Methods\n\n * getDataSource - Returns a DataSource object that provides the data source.\n * getInputStream - Returns a InputStream object that provides the data source's input.\n * StreamUtil.copy - Copys the input stream to the output stream.\n * StreamUtil.close - Closes the input stream."}, {"ID": 1134, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static function ForceDirectories($pathname, $mode = 0777) { // Crawl up the directory tree $next_pathname = substr($pathname,0, strrpos($pathname, self::Slash())); if ($next_pathname != \"\") { self::ForceDirectories($next_pathname, $mode); } if (!file_exists($pathname)) { FileUtil::CreateDirectory($pathname, $mode); } }. \n### Response: Create a directory structure recursively\n\n@author Aidan Lister  (original name mkdirr)\n@version 1.0.0\n@param string $pathname - The directory structure to create\n@param int $mode - Security mode apply in directorys\n@return bool - Returns TRUE on success, FALSE on failure.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected static String appendArgument(final String desc, final String type) { int ndx = desc.indexOf(')'); return desc.substring(0, ndx) + type + desc.substring(ndx); } \n### Response:", "ground_truth": "Appends argument to the existing description.", "predict": "Add a parameter to a method\n\n@author Aidan Lister  (original name mkdirr)\n@version 1.0.0\n@param string $desc - Description of the parameter\n@param string $type - Type of the parameter\n@return string - Returns the appended parameter"}, {"ID": 1135, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function(data) { return this.request({ url: this._buildUri(this.uri), method: corbel.request.method.POST, data: data }). then(function(res) { return corbel.Services.getLocationId(res); }); }. \n### Response: Creates a new asset\n@memberof corbel.Assets.AssetsBuilder.prototype\n@param {object}  data            Contains the data of the new asset\n@param {string}  data.userId     The user id\n@param {string}  data.name       The asset name\n@param {date}    data.expire     Expire date\n@param {boolean} data.active     If asset is active\n@param {array}   data.scopes     Scopes of the asset\n@return {Promise}                Promise that resolves in the new asset id or rejects with a {@link CorbelError}.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected static String prependArgument(final String desc, final String type) { int ndx = desc.indexOf('('); ndx++; return desc.substring(0, ndx) + type + desc.substring(ndx); } \n### Response:", "ground_truth": "Prepends argument to the existing description.", "predict": "prependArgument is a protected static method in the Corbel library that takes a description and a type as arguments and returns a new string that includes the description and the type. The method uses theindexOf method to find the index of the parentheses, and then increments the index by 1. After finding the index of the parentheses, the method uses thesubstring method to extract the first and last characters of the description and then concatenate them with the type. This method is useful for prepending arguments to a function or method."}, {"ID": 1136, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def delete_user_favorite(self, series_id): \"\"\" Deletes the series of the provided id from the favorites list of the current user. :param series_id: The TheTVDB id of the series. :return: a python dictionary with either the result of the search or an error from TheTVDB. \"\"\" return self.parse_raw_response(requests_util.run_request('delete', self.API_BASE_URL + '/user/favorites/%d' % series_id, headers=self.__get_header_with_auth())). \n### Response: Deletes the series of the provided id from the favorites list of the current user.\n\n        :param series_id: The TheTVDB id of the series.\n        :return: a python dictionary with either the result of the search or an error from TheTVDB..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected static String changeReturnType(final String desc, final String type) { int ndx = desc.indexOf(')'); return desc.substring(0, ndx + 1) + type; } \n### Response:", "ground_truth": "Changes return type.", "predict": "ChangeReturnType method is a static method that takes in two parameters, desc and type, and returns a new string that contains the result of the comparison.\n\nThe method uses the indexOf() method to find the index of the closing parenthesis of the desc string. It then uses the substring() method to extract the first character after the closing parenthesis and appends the type parameter to the end of the string.\n\nThis method is useful for returning a new string that contains the result of a comparison that may involve parentheses."}, {"ID": 1137, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def execute_sql(self, sql): \"\"\"Executes SQL and returns cursor for it\"\"\" cursor = self.get_cursor() cursor.execute(sql) return cursor. \n### Response: Executes SQL and returns cursor for it.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public void text(final CharSequence text) { if (!strip) { super.text(text); return; } int textLength = text.length(); char[] dest = new char[textLength]; int ndx = 0; boolean regularChar = true; for (int i = 0; i < textLength; i++) { char c = text.charAt(i); if (CharUtil.isWhitespace(c)) { if (regularChar) { regularChar = false; c = ' '; } else { continue; } } else { regularChar = true; } dest[ndx] = c; ndx++; } if (regularChar || (ndx != 1)) { super.text(CharBuffer.wrap(dest, 0, ndx)); strippedCharsCount += textLength - ndx; } else { strippedCharsCount += textLength; } } \n### Response:", "ground_truth": "Cleans unnecessary whitespaces.", "predict": "This method is an override of the `text` method in the `AbstractDocument` class, and it performs the following actions:\n\n* It checks if the `strip` flag is set to `true`, and if so, it returns immediately.\n* It initializes an array `dest` of size `textLength` to hold the characters that should be removed, and an integer `ndx` to keep track of the number of characters that have been removed.\n* It iterates through the characters in the `text` sequence, and for each character it checks if it is whitespace. If it is, it sets the `regularChar` flag to `false` and moves the character to the beginning of the array. If it is not whitespace, it sets the `regularChar` flag to `true` and moves the character to the end of the array.\n* If the `regularChar` flag is `true` or the `ndx` is not equal to `1`, it calls the `super.text` method with a `CharBuffer` that wraps the array `dest`. It then adds the characters that have been removed to the `strippedCharsCount` variable and returns.\n* If the `regularChar` flag is `false` or the `ndx` is equal to `1`, it adds the characters that have been removed to the `strippedCharsCount` variable and returns.\n\nOverall, this method is used to remove whitespace characters from the beginning and end of a `text` sequence, and it returns the number of removed characters."}, {"ID": 1138, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (section *Section) GetBoolean(name string) (bool, error) { value, err := section.Get(name) if err != nil { return false, err } switch value.(type) { case *Primative: return value.(*Primative).AsBoolean() case *Section: return true, nil } return false, errors.New(\"could not convert unknown value to boolean\") }. \n### Response: // GetBoolean will try to get the value stored under name as a bool\n// will respond with an error if the value does not exist or cannot be converted to a bool.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public <T> void register(final Class<T> type, final TypeConverter<T> typeConverter) { converters.put(type, typeConverter); } \n### Response:", "ground_truth": "Registers a converter for specified type.\nUser must register converter for all super-classes as well.\n\n@param type\t\tclass that converter is for\n@param typeConverter\tconverter for provided class", "predict": "// Register registers a TypeConverter<T> for the given Class<T>\n// and adds it to the converters map for that type."}, {"ID": 1139, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (u *UploadSessionLookupError) UnmarshalJSON(body []byte) error { type wrap struct { dropbox.Tagged // IncorrectOffset : The specified offset was incorrect. See the value // for the correct offset. This error may occur when a previous request // was received and processed successfully but the client did not // receive the response, e.g. due to a network error. IncorrectOffset json.RawMessage `json:\"incorrect_offset,omitempty\"` } var w wrap var err error if err = json.Unmarshal(body, &w); err != nil { return err } u.Tag = w.Tag switch u.Tag { case \"incorrect_offset\": err = json.Unmarshal(body, &u.IncorrectOffset) if err != nil { return err } } return nil }. \n### Response: // UnmarshalJSON deserializes into a UploadSessionLookupError instance.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public <T> TypeConverter<T> lookup(final Class<T> type) { return converters.get(type); } \n### Response:", "ground_truth": "Retrieves converter for provided type. Only registered types are matched,\ntherefore subclasses must be also registered.\n\n@return founded converter or null", "predict": "// Returns the TypeConverter for the given type."}, {"ID": 1140, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (args Arguments) Is(objects ...interface{}) bool { for i, obj := range args { if obj != objects[i] { return false } } return true }. \n### Response: // Is gets whether the objects match the arguments specified..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public List<Node> select(final String query) { Collection<List<CssSelector>> selectorsCollection = CSSelly.parse(query); return select(selectorsCollection); } \n### Response:", "ground_truth": "Selects nodes using CSS3 selector query.", "predict": "// Selects the nodes based on the query passed in.."}, {"ID": 1141, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (s *Service) TeamInvitationAccept(ctx context.Context, teamInvitationToken string) (*TeamInvitationAcceptResult, error) { var teamInvitation TeamInvitationAcceptResult return &teamInvitation, s.Post(ctx, &teamInvitation, fmt.Sprintf(\"/teams/invitations/%v/accept\", teamInvitationToken), nil) }. \n### Response: // Accept Team Invitation.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public List<Node> select(final Collection<List<CssSelector>> selectorsCollection) { List<Node> results = new ArrayList<>(); for (List<CssSelector> selectors : selectorsCollection) { processSelectors(results, selectors); } return results; } \n### Response:", "ground_truth": "Selected nodes using pre-parsed CSS selectors. Take in consideration\ncollection type for results grouping order.", "predict": "// Select all nodes based on given selectors collection."}, {"ID": 1142, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected function ftpRawlist($options, $path) { $connection = $this->getConnection(); if ($this->isPureFtpd) { $path = str_replace(' ', '\\ ', $path); } return ftp_rawlist($connection, $options . ' ' . $path); }. \n### Response: The ftp_rawlist function with optional escaping.\n\n@param string $options\n@param string $path\n\n@return array.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void processSelectors(final List<Node> results, final List<CssSelector> selectors) { List<Node> selectedNodes = select(rootNode, selectors); for (Node selectedNode : selectedNodes) { if (!results.contains(selectedNode)) { results.add(selectedNode); } } } \n### Response:", "ground_truth": "Process selectors and keep adding results.", "predict": "The processSelectors method processes CSS selectors and adds them to the results list.\n\n@param List<Node> $results\n@param List<CssSelector> $selectors\n\n@return void."}, {"ID": 1143, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def on(self, speed, brake=True, block=False): \"\"\" Rotate the motor at ``speed`` for forever ``speed`` can be a percentage or a :class:`ev3dev2.motor.SpeedValue` object, enabling use of other units. Note that `block` is False by default, this is different from the other `on_for_XYZ` methods. \"\"\" speed = self._speed_native_units(speed) self.speed_sp = int(round(speed)) self._set_brake(brake) self.run_forever() if block: self.wait_until('running', timeout=WAIT_RUNNING_TIMEOUT) self.wait_until_not_moving(). \n### Response: Rotate the motor at ``speed`` for forever\n\n        ``speed`` can be a percentage or a :class:`ev3dev2.motor.SpeedValue`\n        object, enabling use of other units.\n\n        Note that `block` is False by default, this is different from the\n        other `on_for_XYZ` methods..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public Node selectFirst(final String query) { List<Node> selectedNodes = select(query); if (selectedNodes.isEmpty()) { return null; } return selectedNodes.get(0); } \n### Response:", "ground_truth": "Selects nodes using CSS3 selector query and returns the very first one.", "predict": "Select the first node in the list based on the given query.\n\n        Returns the first node in the list that matches the query. If the\n        list is empty, returns null."}, {"ID": 1144, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (c *Container) FromDisk() error { jsonSource, err := os.Open(c.StatePath()) if err != nil { return err } defer jsonSource.Close() dec := json.NewDecoder(jsonSource) return dec.Decode(c.state) }. \n### Response: // FromDisk restores container's state from disk.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void walkDescendantsIteratively(final LinkedList<Node> nodes, final CssSelector cssSelector, final List<Node> result) { while (!nodes.isEmpty()) { Node node = nodes.removeFirst(); selectAndAdd(node, cssSelector, result); // append children in walking order to be processed right after this node int childCount = node.getChildNodesCount(); for (int i = childCount - 1; i >= 0; i--) { nodes.addFirst(node.getChild(i)); } } } \n### Response:", "ground_truth": "Walks over the child notes, maintaining the tree order and not using recursion.", "predict": "// WalkDescendantsIteratively iterates through all descendants of a given CSS selector and returns a list of their nodes."}, {"ID": 1145, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function remove_current_products( $val ) { if ( 'theme' === $val['type'] ) { $exist = wp_get_theme( $val['slug'] ); return ! $exist->exists(); } else { $all_plugins = array_keys( get_plugins() ); foreach ( $all_plugins as $slug ) { if ( strpos( $slug, $val['slug'] ) !== false ) { return false; } } return true; } }. \n### Response: Either the current product is installed or not.\n\n@param array $val The current recommended product.\n\n@return bool Either we should exclude the plugin or not..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void walk(final Node rootNode, final CssSelector cssSelector, final List<Node> result) { // previous combinator determines the behavior CssSelector previousCssSelector = cssSelector.getPrevCssSelector(); Combinator combinator = previousCssSelector != null ? previousCssSelector.getCombinator() : Combinator.DESCENDANT; switch (combinator) { case DESCENDANT: LinkedList<Node> nodes = new LinkedList<>(); int childCount = rootNode.getChildNodesCount(); for (int i = 0; i < childCount; i++) { nodes.add(rootNode.getChild(i)); // recursive // selectAndAdd(node, cssSelector, result); // walk(node, cssSelector, result); } walkDescendantsIteratively(nodes, cssSelector, result); break; case CHILD: childCount = rootNode.getChildNodesCount(); for (int i = 0; i < childCount; i++) { Node node = rootNode.getChild(i); selectAndAdd(node, cssSelector, result); } break; case ADJACENT_SIBLING: Node node = rootNode.getNextSiblingElement(); if (node != null) { selectAndAdd(node, cssSelector, result); } break; case GENERAL_SIBLING: node = rootNode; while (true) { node = node.getNextSiblingElement(); if (node == null) { break; } selectAndAdd(node, cssSelector, result); } break; } } \n### Response:", "ground_truth": "Finds nodes in the tree that matches single selector.", "predict": "This method walks through the nodes of a CSS selector and adds them to a list of results. It uses a switch statement to handle different types of nodes, such as child, adjacent sibling, and general sibling nodes. The method also uses a while loop to continue walking through the nodes until it reaches the root node."}, {"ID": 1146, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def sort_protein_group(pgroup, sortfunctions, sortfunc_index): \"\"\"Recursive function that sorts protein group by a number of sorting functions.\"\"\" pgroup_out = [] subgroups = sortfunctions[sortfunc_index](pgroup) sortfunc_index += 1 for subgroup in subgroups: if len(subgroup) > 1 and sortfunc_index < len(sortfunctions): pgroup_out.extend(sort_protein_group(subgroup, sortfunctions, sortfunc_index)) else: pgroup_out.extend(subgroup) return pgroup_out. \n### Response: Recursive function that sorts protein group by a number of sorting\n    functions..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void selectAndAdd(final Node node, final CssSelector cssSelector, final List<Node> result) { // ignore all nodes that are not elements if (node.getNodeType() != Node.NodeType.ELEMENT) { return; } boolean matched = cssSelector.accept(node); if (matched) { // check for duplicates if (result.contains(node)) { return; } // no duplicate found, add it to the results result.add(node); } } \n### Response:", "ground_truth": "Selects single node for single selector and appends it to the results.", "predict": "Method to select and add nodes based on CSS selector. Ignores all nodes that are not elements. Finds matching nodes and adds them to the result list if duplicates are not found."}, {"ID": 1147, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def validate_address!(addr) ip = IPAddr.new(addr) unless ip.ipv4? raise NotImplementedError, 'Only IPv4 is supported by this library' end if addr.include?('/') raise ArgumentError, 'Please specify a host IP address (without mask)' end addr.to_s end. \n### Response: Validate that the given string is a valid IP address.\n\n @raises ArgumentError, NotImplementedError.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected boolean filter(final List<Node> currentResults, final Node node, final CssSelector cssSelector, final int index) { return cssSelector.accept(currentResults, node, index); } \n### Response:", "ground_truth": "Filter nodes.", "predict": "This method filters a list of nodes based on a CSS selector and a given index. It returns true if the CSS selector is accepted by the selector, and false otherwise.\n\n @param currentResults The list of nodes to filter.\n @param node The node to filter.\n @param cssSelector The CSS selector to filter.\n @param index The index of the node to filter.\n @return The boolean value indicating whether the CSS selector is accepted by the selector.\n @raises NotImplementedError If the method is not implemented in the current version of the library."}, {"ID": 1148, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private function _prepareJoinCondition(array $condition) { if(count($condition) === 1) { return $this->condition = '(' . $condition[0]->getColumnName() . ')'; } return $this->condition = $condition[0]->getTableName() . '.' . $condition[0]->getColumnName() . ' = ' . $condition[1]->getTableName() . '.' . $condition[1]->getColumnName(); }. \n### Response: Validate the columns array to a string.\n\n@param ColumnInterface[] $condition\n\n@return string.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private static char [] zzUnpackCMap(final String packed) { char [] map = new char[0x110000]; int i = 0; /* index in packed string */ int j = 0; /* index in unpacked array */ while (i < 128) { int count = packed.charAt(i++); char value = packed.charAt(i++); do map[j++] = value; while (--count > 0); } return map; } \n### Response:", "ground_truth": "Unpacks the compressed character translation table.\n\n@param packed   the packed character translation table\n@return         the unpacked character translation table", "predict": "Implement a method to unpack a packed CMap.\n\n@param String packed\n\n@return char array."}, {"ID": 1149, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private static boolean hasSelfPermissions(Context context, String... permissions) { for (String permission : permissions) { if (checkSelfPermission(context, permission) == PackageManager.PERMISSION_GRANTED) { return true; } } return false; }. \n### Response: Returns true if the context has access to any given permissions..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private boolean zzRefill() { if (zzBuffer == null) { zzBuffer = zzChars; zzEndRead += zzChars.length; return false; } return true; } \n### Response:", "ground_truth": "Refills the input buffer.\n\n@return      false, iff there was new input.", "predict": "This method fills the `zzBuffer` with the contents of the `zzChars` array and advances the `zzEndRead` position by the length of the `zzChars` array. It returns `true` if the operation was successful, and `false` if there is no more data to read."}, {"ID": 1150, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function getConnectionState() { $directory = Google::make('directory'); try { $r = $directory->users->get($email = config('users.google_apps_user_email_to_check_connection')); if($r) { $state = 'connected'; } else { echo 'User does not exists: $email<br/>'; } } catch (\\Exception $e) { $state = 'error'; $message = json_decode($e->getMessage()); } $result = [ 'state' => $state ]; if ($state != 'connected') $result['message'] = $message; return $result; }. \n### Response: Get connection state.\n\n@return string.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected <T> PageData<T> page(String sql, final Map params, final int page, final int pageSize, final String sortColumnName, final boolean ascending, final Class[] target) { if (sortColumnName != null) { sql = buildOrderSql(sql, sortColumnName, ascending); } int from = (page - 1) * pageSize; String pageSql = buildPageSql(sql, from, pageSize); DbSqlBuilder dbsql = sql(pageSql); DbOomQuery query = query(dbsql); query.setMaxRows(pageSize); query.setFetchSize(pageSize); query.setMap(params); List<T> list = query.list(pageSize, target); query.close(); String countSql = buildCountSql(sql); dbsql = sql(countSql); query = query(dbsql); query.setMap(params); long count = query.executeCount(); query.close(); return new PageData<>(page, (int) count, pageSize, list); } \n### Response:", "ground_truth": "Pages given page.\n\n@param sql sql query that lists all items\n@param params map of SQL parameters\n@param page current page to show\n@param pageSize number of items to show\n@param sortColumnName name of sorting column, null for no sorting\n@param ascending true for ascending order\n@param target db entities for mapping (sa usual in DbOom)", "predict": "Page data for the specified page.\n\n@param sql - SQL query to execute.\n@param params - Map of parameters to pass to the query.\n@param page - Page number.\n@param pageSize - pageSize of records to retrieve.\n@param sortColumnName - Name of the column to sort by.\n@param ascending - Whether to sort ascending or descending.\n@param target - Class of the data to retrieve.\n@return PageData object.\n\nNote: This method retrieves data from a database and returns it as a PageData object. The PageData object contains the page number, number of records, and the data retrieved."}, {"ID": 1151, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function getCrawlerClient() { if (is_null($this->_crawlerClient)) { $this->_crawlerClient = new Varien_Http_Client(null, array( 'useragent' => sprintf( 'Nexcessnet_Turpentine/%s Magento/%s Varien_Http_Client', Mage::helper('turpentine/data')->getVersion(), Mage::getVersion() ), 'keepalive' => true, )); $this->_crawlerClient->setCookie('frontend', 'crawler-session'); } return $this->_crawlerClient; }. \n### Response: Get the crawler http client\n\n@return Varien_Http_Client.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected String removeSelect(String sql) { int ndx = StringUtil.indexOfIgnoreCase(sql, \"select\"); if (ndx != -1) { sql = sql.substring(ndx + 6); // select.length() } return sql; } \n### Response:", "ground_truth": "Removes the first 'select' from the sql query.", "predict": "Remove the \"select\" from the given SQL statement\n\n@return the modified SQL statement."}, {"ID": 1152, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static synchronized void setTextDestination(String location, boolean enablePurgeBySize, boolean enablePurgeByTime, boolean enableFileSwitch, boolean enableBuffering, long maxRepositorySize, long retentionTime, int fileSwitchHour, String outOfSpaceAction, String outputFormat, boolean includeTrace) { // F001340-16890 if (svSuperPid != null) { // No TextLog for children sub-processes yet. return; } if (location == null && textHandler == null) { throw new IllegalArgumentException( \"Argument 'location' can't be null if text logging is not enabled.\"); } // Let it fail with IllegalArgumentException here HpelFormatter.getFormatter(outputFormat); boolean addedHere = false; if (textHandler == null) { textHandler = new LogRecordTextHandler(TRACE_THRESHOLD) ; // F001340-16890 // ManagerAdmin.getWsHandlerManager().addWsHandler(textHandler, false); Logger.getLogger(\"\").addHandler(textHandler); addedHere = true; } try { TEXT_DESTINATION_CHANGER.setDirectoryDestination(location, enablePurgeBySize, enablePurgeByTime, enableFileSwitch, enableBuffering, maxRepositorySize, retentionTime, fileSwitchHour, outOfSpaceAction, LogRepositoryBaseImpl.TEXTLOGTYPE); } catch (RuntimeException ex) { // Handle any runtime exception, not just the IllegalArgumentException if (addedHere) { disableTextDestination(); } throw ex; } // These last settings should not fail textHandler.setFormat(outputFormat); textHandler.setIncludeTrace(includeTrace) ; // F001340-16890 }. \n### Response: Sets directory destination for text logging.\n\n@param location the base directory to use for text log files. Value 'null' means to keep using current directory.\n@param enablePurgeBySize true if record purging due to the size constraint should be enabled.\n@param enablePurgeByTime true if record purging due to the the age should be enabled.\n@param enableFileSwitch true if file switching at a given hour of day should be enabled\n@param enableBuffering true if buffering of file writing should be enabled.\n@param maxRepositorySize the maximum size of the repository in bytes.\n@param retentionTime the mininum time to store log records in milliseconds.\n@param fileSwitchHour the hour of day the file switching is to occur value range: 0-23 where 0=midnight\n@param outOfSpaceAction the action to do in case of IOException during text file write. values: \"StopLogging\", \"PurgeOld\", \"StopServer\".\n@param outputFormat the output format to use. Supported values 'Advanced' and 'Basic'. Value 'null' means to keep that value unchanged.\n@param includeTrace the indicator if trace printed in the text log..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected String removeToFrom(String sql) { int from = 0; int fromCount = 1; int selectCount = 0; int lastNdx = 0; while (true) { int ndx = StringUtil.indexOfIgnoreCase(sql, \"from\", from); if (ndx == -1) { break; } // count selects in left part String left = sql.substring(lastNdx, ndx); selectCount += StringUtil.countIgnoreCase(left, \"select\"); if (fromCount >= selectCount) { sql = sql.substring(ndx); break; } // find next 'from' lastNdx = ndx; from = ndx + 4; fromCount++; } return sql; } \n### Response:", "ground_truth": "Removes the first part of the sql up to the relevant 'from'.\nTries to detect sub-queries in the 'select' part.", "predict": "This method removes the 'from' and 'to' keywords from a given SQL statement.\n\n@param sql the SQL statement to be modified.\n@return the modified SQL statement without the 'from' and 'to' keywords.\n\nThis method uses a while loop to iterate through the SQL statement and remove the 'from' and 'to' keywords as they are found. The loop continues until the 'from' keyword is found or the loop is interrupted by a break statement. The modified SQL statement is then returned."}, {"ID": 1153, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function(options) { options = options || {}; if (!('pull' in options)) options.pull = true; // no pull means no extra stream processing... if (!options.pull) return this._run(); return new Promise(function(accept, reject) { // pull the image (or use on in the cache and output status in stdout) var pullStream = utils.pullImageIfMissing(this.docker, this._createConfig.Image); // pipe the pull stream into stdout but don't end pullStream.pipe(this.stdout, { end: false }); pullStream.once('error', reject); pullStream.once('end', function() { pullStream.removeListener('error', reject); this._run().then(accept, reject); }.bind(this)); }.bind(this)); }. \n### Response: Run the docker process and resolve the promise on complete.\n\n@param {Object} options for running the container.\n@param {Boolean} [options.pull=true] when true pull the image and prepend the\ndownload details to stdout..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected String removeLastOrderBy(String sql) { int ndx = StringUtil.lastIndexOfIgnoreCase(sql, \"order by\"); if (ndx != -1) { int ndx2 = sql.lastIndexOf(sql, ')'); if (ndx > ndx2) { sql = sql.substring(0, ndx); } } return sql; } \n### Response:", "ground_truth": "Removes everything from last \"order by\".", "predict": "Remove the last \"order by\" from a SQL query.\n\n@param {String} sql the SQL query to be modified.\n@return the modified SQL query without the last \"order by\"."}, {"ID": 1154, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def WriteFromFD(self, src_fd, arcname=None, compress_type=None, st=None): \"\"\"Write a zip member from a file like object. Args: src_fd: A file like object, must support seek(), tell(), read(). arcname: The name in the archive this should take. compress_type: Compression type (zipfile.ZIP_DEFLATED, or ZIP_STORED) st: An optional stat object to be used for setting headers. Raises: ArchiveAlreadyClosedError: If the zip if already closed. Yields: Chunks of binary data. \"\"\" yield self.WriteFileHeader( arcname=arcname, compress_type=compress_type, st=st) while 1: buf = src_fd.read(1024 * 1024) if not buf: break yield self.WriteFileChunk(buf) yield self.WriteFileFooter(). \n### Response: Write a zip member from a file like object.\n\n    Args:\n      src_fd: A file like object, must support seek(), tell(), read().\n      arcname: The name in the archive this should take.\n      compress_type: Compression type (zipfile.ZIP_DEFLATED, or ZIP_STORED)\n      st: An optional stat object to be used for setting headers.\n\n    Raises:\n      ArchiveAlreadyClosedError: If the zip if already closed.\n\n    Yields:\n      Chunks of binary data..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String decode(final String html) { int ndx = html.indexOf('&'); if (ndx == -1) { return html; } StringBuilder result = new StringBuilder(html.length()); int lastIndex = 0; int len = html.length(); mainloop: while (ndx != -1) { result.append(html.substring(lastIndex, ndx)); lastIndex = ndx; while (html.charAt(lastIndex) != ';') { lastIndex++; if (lastIndex == len) { lastIndex = ndx; break mainloop; } } if (html.charAt(ndx + 1) == '#') { // decimal/hex char c = html.charAt(ndx + 2); int radix; if ((c == 'x') || (c == 'X')) { radix = 16; ndx += 3; } else { radix = 10; ndx += 2; } String number = html.substring(ndx, lastIndex); int i = Integer.parseInt(number, radix); result.append((char) i); lastIndex++; } else { // token String encodeToken = html.substring(ndx + 1, lastIndex); char[] replacement = ENTITY_MAP.get(encodeToken); if (replacement == null) { result.append('&'); lastIndex = ndx + 1; } else { result.append(replacement); lastIndex++; } } ndx = html.indexOf('&', lastIndex); } result.append(html.substring(lastIndex)); return result.toString(); } \n### Response:", "ground_truth": "Decodes HTML text. Assumes that all character references are properly closed with semi-colon.", "predict": "Decodes HTML content into a string.\n\n    Args:\n      html: The HTML content to decode.\n\n    Returns:\n      The decoded HTML content as a String.\n\n    mainloop:\n      Iterates through the HTML content and extracts the necessary information.\n      First, it searches for the start of the entity reference (&) using the indexOf() method.\n      If the entity reference is not found, the function returns the original HTML content.\n      Next, it searches for the start of the character reference (#) and checks if it is a decimal or hex number.\n      If it is a decimal or hex number, it extracts the number and converts it to an integer using parseInt().\n      Then, it uses the character map to find the corresponding character.\n      If the character is not found, it appends an ampersand (&) to the end of the HTML content.\n      If the character is found, it appends it to the result string.\n      Finally, it searches for the end of the entity reference (&) and the character reference (#) and appends the results to the result string.\n      Returns the decoded HTML content as a String.\n```"}, {"ID": 1155, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def execute_internal(_result) item = LogMessage.new parser = LogParser.new(@source, @sequence) sequences = {} # keep track of sequences, and when you complete one, then print out the # entire thing at once. while parser.next(item) if item.kind?(ActionCommand::LOG_KIND_COMMAND_OUTPUT) && item.root? process_output(sequences, item) else process_other(sequences, item) end item = LogMessage.new end # print out any incomplete sequences print_sequences(sequences) end. \n### Response: Say hello to the specified person..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String detectName(final char[] input, int ndx) { final Ptr ptr = new Ptr(); int firstIndex = 0; int lastIndex = ENTITY_NAMES.length - 1; int len = input.length; char[] lastName = null; final BinarySearchBase binarySearch = new BinarySearchBase() { @Override protected int compare(final int index) { char[] name = ENTITY_NAMES[index]; if (ptr.offset >= name.length) { return -1; } return name[ptr.offset] - ptr.c; } }; while (true) { ptr.c = input[ndx]; if (!CharUtil.isAlphaOrDigit(ptr.c)) { return lastName != null ? new String(lastName) : null; } firstIndex = binarySearch.findFirst(firstIndex, lastIndex); if (firstIndex < 0) { return lastName != null ? new String(lastName) : null; } char[] element = ENTITY_NAMES[firstIndex]; if (element.length == ptr.offset + 1) { // total match, remember position, continue for finding the longer name lastName = ENTITY_NAMES[firstIndex]; } lastIndex = binarySearch.findLast(firstIndex, lastIndex); if (firstIndex == lastIndex) { // only one element found, check the rest for (int i = ptr.offset; i < element.length; i++) { if (element[i] != input[ndx]) { return lastName != null ? new String(lastName) : null; } ndx++; } return new String(element); } ptr.offset++; ndx++; if (ndx == len) { return lastName != null ? new String(lastName) : null; } } } \n### Response:", "ground_truth": "Detects the longest character reference name on given position in char array.", "predict": "This method is used to detect the name of a person in a given input string. It uses a binary search algorithm to find the first and last name of the person in the input string. If it finds a match, it returns the full name of the person. If it does not find a match, it continues to search for the longer name of the person. The method takes an input string and an integer index as parameters and returns a String containing the full name of the person if a match is found, or null if no match is found."}, {"ID": 1156, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function themeIsDefault($key = null) : bool { if ($key instanceof Theme) { return $key->getKey() === $this->getDefaultTheme()->getKey(); } return $this->getTheme($key)->getKey() === $this->getDefaultTheme()->getKey(); }. \n### Response: Check if active theme is default theme\n\n@param Theme|string|null $key\n@return bool.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override protected String buildOrderSql(String sql, final String column, final boolean ascending) { sql += \" order by \" + column; if (!ascending) { sql += \" desc\"; } return sql; } \n### Response:", "ground_truth": "Appends ORDER BY keyword.", "predict": "This method is overridden in a subclass to provide custom SQL generation for the `buildOrderSql` method.\n\n@param String sql The SQL query to be generated.\n@param String column The column name to be used in the SQL query.\n@param boolean ascending The direction in which to sort the results (true for ascending, false for descending).\n@return The generated SQL query."}, {"ID": 1157, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function scopeExpression(expression) { return expression.replace(expressionRE, (match, name) => ( name === undefined || name[0] === \"$\" || globals.indexOf(name) !== -1 ) ? match : \"data.\" + name ); }. \n### Response: Scope an expression to use variables within the `data` object.\n\n@param {string} expression.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override protected String buildPageSql(String sql, final int from, final int pageSize) { sql = removeSelect(sql); return \"select LIMIT \" + from + ' ' + pageSize + sql; } \n### Response:", "ground_truth": "Builds page sql using LIMIT keyword after the SELECT.", "predict": "Implement a method to build the SQL query for a page, removing the \"select\" keyword from the beginning of the query.\n\n@param {String} sql The SQL query to build.\n@return {String} The modified SQL query."}, {"ID": 1158, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def hide_file(path): \"\"\" Set the hidden attribute on a file or directory. From http://stackoverflow.com/questions/19622133/ `path` must be text. \"\"\" __import__('ctypes.wintypes') SetFileAttributes = ctypes.windll.kernel32.SetFileAttributesW SetFileAttributes.argtypes = ctypes.wintypes.LPWSTR, ctypes.wintypes.DWORD SetFileAttributes.restype = ctypes.wintypes.BOOL FILE_ATTRIBUTE_HIDDEN = 0x02 ret = SetFileAttributes(path, FILE_ATTRIBUTE_HIDDEN) if not ret: raise ctypes.WinError(). \n### Response: Set the hidden attribute on a file or directory.\n\n    From http://stackoverflow.com/questions/19622133/\n\n    `path` must be text..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private void resolveColumnsAndProperties(final Class type) { PropertyDescriptor[] allProperties = ClassIntrospector.get().lookup(type).getAllPropertyDescriptors(); List<DbEntityColumnDescriptor> decList = new ArrayList<>(allProperties.length); int idcount = 0; HashSet<String> names = new HashSet<>(allProperties.length); for (PropertyDescriptor propertyDescriptor : allProperties) { DbEntityColumnDescriptor dec = DbMetaUtil.resolveColumnDescriptors(this, propertyDescriptor, isAnnotated, columnNamingStrategy); if (dec != null) { if (!names.add(dec.getColumnName())) { throw new DbOomException(\"Duplicate column name: \" + dec.getColumnName()); } decList.add(dec); if (dec.isId) { idcount++; } } } if (decList.isEmpty()) { throw new DbOomException(\"No column mappings in entity: \" + type); } columnDescriptors = decList.toArray(new DbEntityColumnDescriptor[0]); Arrays.sort(columnDescriptors); // extract ids from sorted list if (idcount > 0) { idColumnDescriptors = new DbEntityColumnDescriptor[idcount]; idcount = 0; for (DbEntityColumnDescriptor dec : columnDescriptors) { if (dec.isId) { idColumnDescriptors[idcount++] = dec; } } } } \n### Response:", "ground_truth": "Resolves list of all columns and properties.", "predict": "resolveColumnsAndProperties(final Class type)\n\nThis method is used to resolve the columns and properties of an entity type in a DbML file. It retrieves all the property descriptors for the given entity type and stores them in a list. It also increments the count of unique column names in the list. Finally, it sorts the list of column descriptors by name and extracts the unique ID columns from the sorted list.\n\nNote: This method is used in the context of a DbML file, so it should be used with caution. It is recommended to use other methods such as DbMetaUtil.getEntityType() and DbMetaUtil.getEntityColumns() to retrieve the actual entity type and columns, respectively."}, {"ID": 1159, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function updatePackages(InstallerInterface $installer) { $decode = $this->config->getBowerFileContent(); if (!empty($decode['dependencies'])) { foreach ($decode['dependencies'] as $packageName => $requiredVersion) { $this->updatePackage(new Package($packageName, $requiredVersion), $installer); } } }. \n### Response: Update all dependencies\n\n@param InstallerInterface $installer.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public DbEntityColumnDescriptor findByColumnName(final String columnName) { if (columnName == null) { return null; } init(); for (DbEntityColumnDescriptor columnDescriptor : columnDescriptors) { if (columnDescriptor.columnName.equalsIgnoreCase(columnName)) { return columnDescriptor; } } return null; } \n### Response:", "ground_truth": "Finds column descriptor by column name. Case is ignored.", "predict": "findByColumnName(): This method retrieves the DbEntityColumnDescriptor for a given columnName. It initializes the method by calling the init() method. The method iterates through the columnDescriptors array and returns the DbEntityColumnDescriptor if the columnName is found in the columnDescriptors array. If no columnName is found, the method returns null.\n\n@return DbEntityColumnDescriptor the DbEntityColumnDescriptor for the given columnName."}, {"ID": 1160, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (rp *Ringpop) HandleOrForward(key string, request []byte, response *[]byte, service, endpoint string, format tchannel.Format, opts *forward.Options) (bool, error) { if !rp.Ready() { return false, ErrNotBootstrapped } dest, err := rp.Lookup(key) if err != nil { return false, err } address, err := rp.WhoAmI() if err != nil { return false, err } if dest == address { return true, nil } res, err := rp.Forward(dest, []string{key}, request, service, endpoint, format, opts) *response = res return false, err }. \n### Response: //= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =\n//\n//\tForwarding\n//\n//= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =\n// HandleOrForward returns true if the request should be handled locally, or false\n// if it should be forwarded to a different node. If false is returned, forwarding\n// is taken care of internally by the method, and, if no error has occured, the\n// response is written in the provided response field..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public DbEntityColumnDescriptor findByPropertyName(final String propertyName) { if (propertyName == null) { return null; } init(); for (DbEntityColumnDescriptor columnDescriptor : columnDescriptors) { if (columnDescriptor.propertyName.equals(propertyName)) { return columnDescriptor; } } return null; } \n### Response:", "ground_truth": "Finds column descriptor by property name.", "predict": "//= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =\n//\n//\tfindByPropertyName\n//\n//= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =\n// This method returns the DbEntityColumnDescriptor for the specified column name. If the column name is\n// null, the method returns null. It initializes the method by calling the init() method. The method\n// iterates through all the DbEntityColumnDescriptors in the columnDescriptors array and returns the\n// one that matches the specified column name. If no matching column descriptor is found, the method\n// returns null.\n\n"}, {"ID": 1161, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public final void doWrites(QueuedMediaData[] slice) { // empty the queue for (QueuedMediaData queued : slice) { int tmpTs = queued.getTimestamp(); if (lastWrittenTs <= tmpTs) { if (queued.hasData()) { // write the data write(queued); lastWrittenTs = tmpTs; // clear the data, because we're done with it queued.dispose(); } else { if (log.isTraceEnabled()) { log.trace(\"Queued data was not available\"); } } } else { // clear the data, since its too old queued.dispose(); } } // clear and null-out slice = null; }. \n### Response: Write a slice of the queued items to the writer.\n\n@param slice\nset of queued data.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public String getPropertyName(final String columnName) { DbEntityColumnDescriptor dec = findByColumnName(columnName); return dec == null ? null : dec.propertyName; } \n### Response:", "ground_truth": "Returns property name for specified column name.", "predict": "Get the name of the column associated with the specified column name.\n\n@return The name of the column."}, {"ID": 1162, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private function start() { # Starting session. # Here making session active to every request. new Session(); $this->setBaseURL(); $this->setRequestURI(); $this->fetchRouteRules(); $this->establishConnection(); $this->locateMethod(); $this->invokeMethod(); }. \n### Response: Starts system by first loading configuration then processing request.\nLocates module,controller and method based request set and calls it.\nConnects to database before invoking located method if configured..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public String getColumnName(final String propertyName) { DbEntityColumnDescriptor dec = findByPropertyName(propertyName); return dec == null ? null : dec.columnName; } \n### Response:", "ground_truth": "Returns column name for specified property name..", "predict": "Method-level comment for `getColumnName(String propertyName)`:\n\nThis method retrieves the column name associated with a given property name from a DbEntityColumnDescriptor object. It does this by calling the `findByPropertyName()` method and returning the result if it exists, or null if it does not. This method is useful for accessing column information in a database table."}, {"ID": 1163, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (elb *FakeELBV2) DescribeTargetHealth(input *elbv2.DescribeTargetHealthInput) (*elbv2.DescribeTargetHealthOutput, error) { panic(\"Not implemented\") }. \n### Response: // DescribeTargetHealth is not implemented but is required for interface\n// conformance.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public Object getIdValue(final E object) { final String propertyName = getIdPropertyName(); return BeanUtil.declared.getProperty(object, propertyName); } \n### Response:", "ground_truth": "Returns ID value for given entity instance.", "predict": "// getIdValue is a public method that returns the value of the specified\n// property name of the given E object."}, {"ID": 1164, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (groups *Groups) AddGroup(newGroup *Group) { if newGroup.GroupID != \"\" { for key, group := range groups.Groups.Items { if group.GroupID == newGroup.GroupID { groups.Groups.Items[key] = newGroup return } } } newGroup.parent = groups groups.Groups.Items = append(groups.Groups.Items, newGroup) }. \n### Response: // AddGroup adds a group to a Groups collection.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void setIdValue(final E object, final Object value) { final String propertyName = getIdPropertyName(); BeanUtil.declared.setProperty(object, propertyName, value); } \n### Response:", "ground_truth": "Sets ID value for given entity.", "predict": "// setIdValue sets the property name and value for an object."}, {"ID": 1165, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function File(data, callback) { stream.Duplex.call(this); this._header = new Header(); this._tracks = []; if (data && buffer.Buffer.isBuffer(data)) { this.setData(data, callback || noop); } }. \n### Response: Construct a new File\n\n@class File\n@extends stream.Duplex\n@classdesc Parse and encode MIDI data\n\n@param {Buffer} [data] Shortcut for calling setData()\n@param {Function} [callback] Callback for setData() shortcut.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public String getKeyValue(final E object) { Object idValue = getIdValue(object); String idValueString = idValue == null ? StringPool.NULL : idValue.toString(); return type.getName().concat(StringPool.COLON).concat(idValueString); } \n### Response:", "ground_truth": "Returns unique key for this entity. Returned key\nis built from entity class and id value.", "predict": "Construct a new Header object\n\n@param {Object} [object] The object to get the key-value pair for.\n\n@return The key-value pair for the given object.\n\n@Note: This method retrieves the key-value pair for the given object using the getIdValue() method and returns the resulting string using the StringPool.NULL and StringPool.COLON conventions."}, {"ID": 1166, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func FindMatchingFiles(regex *regexp.Regexp, directories []string) (result []string, errs []error) { for _, dir := range directories { files, readErr := ioutil.ReadDir(dir) if readErr != nil { errs = append(errs, readErr) continue } for _, file := range files { if file.IsDir() { continue } baseName := file.Name() if regex.MatchString(baseName) { result = append(result, path.Join(dir, baseName)) } } } return }. \n### Response: // FindPrefixedFiles reads the contents of all given directories and returns a list of\n// files with a basename that matches the given regex. It is intended to find\n// plugin executables. All directories are processed, and a list of all encountered errors is returned..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public StringBand append(String s) { if (s == null) { s = StringPool.NULL; } if (index >= array.length) { expandCapacity(); } array[index++] = s; length += s.length(); return this; } \n### Response:", "ground_truth": "Appends a string.", "predict": "// append adds a new string to the end of the StringBand array. It does not modify the array itself.\n// If the index of the new string is greater than the length of the array, it expands the capacity of the array and increases the index by one.\n// If the length of the new string is greater than the length of the array, it returns a new StringBand with the same length as the original array.\n// Otherwise, it returns the original StringBand with the modified length and index.\n```"}, {"ID": 1167, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def createExternalTable(self, tableName, path=None, source=None, schema=None, **options): \"\"\"Creates an external table based on the dataset in a data source. It returns the DataFrame associated with the external table. The data source is specified by the ``source`` and a set of ``options``. If ``source`` is not specified, the default data source configured by ``spark.sql.sources.default`` will be used. Optionally, a schema can be provided as the schema of the returned :class:`DataFrame` and created external table. :return: :class:`DataFrame` \"\"\" return self.sparkSession.catalog.createExternalTable( tableName, path, source, schema, **options). \n### Response: Creates an external table based on the dataset in a data source.\n\n        It returns the DataFrame associated with the external table.\n\n        The data source is specified by the ``source`` and a set of ``options``.\n        If ``source`` is not specified, the default data source configured by\n        ``spark.sql.sources.default`` will be used.\n\n        Optionally, a schema can be provided as the schema of the returned :class:`DataFrame` and\n        created external table.\n\n        :return: :class:`DataFrame`.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void setIndex(final int newIndex) { if (newIndex < 0) { throw new ArrayIndexOutOfBoundsException(newIndex); } if (newIndex > array.length) { String[] newArray = new String[newIndex]; System.arraycopy(array, 0, newArray, 0, index); array = newArray; } if (newIndex > index) { for (int i = index; i < newIndex; i++) { array[i] = StringPool.EMPTY; } } else if (newIndex < index) { for (int i = newIndex; i < index; i++) { array[i] = null; } } index = newIndex; length = calculateLength(); } \n### Response:", "ground_truth": "Specifies the new index.", "predict": "sets the new index value for the given array.\n\n        It throws an ArrayIndexOutOfBoundsException if the new index is negative or if the array size is greater than the new index.\n        It copies the array from the beginning to the new index and assigns it back to the array.\n        It calculates the length of the array by dividing the current index by the number of elements in the array.\n\n        :param newIndex: The new index value to set.\n        :return: None.\n\n"}, {"ID": 1168, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function onClose(TransportInterface $transport) { Logger::debug($this, 'onClose from ' . json_encode($transport->getTransportDetails())); $this->sessions->detach($transport); }. \n### Response: Handle close transport\n\n@param \\Thruway\\Transport\\TransportInterface $transport.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void expandCapacity() { String[] newArray = new String[array.length << 1]; System.arraycopy(array, 0, newArray, 0, index); array = newArray; } \n### Response:", "ground_truth": "Expands internal string array by multiplying its size by 2.", "predict": "Expands the capacity of an array by copying elements and shifting them to the right.\n\n@param String[] $array The array to expand."}, {"ID": 1169, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function getFilePathHeader() { if($this->filePathHeader === null){ throw new InvalidArgumentException(sprintf(\"The filePathContent must be setter.\")); } $path = $this->filePathHeader; if($this->container){ $path = $this->container->get(\"kernel\")->locateResource($path); } if(!$this->chainModel->getExporterManager()->getFs()->exists($path)){ throw new InvalidArgumentException(sprintf(\"The filePathHeader '%s' does not exist.\",$path)); } return $path; }. \n### Response: Busca la ruta del archivo que se usara como encabezado\n@return type\n@throws InvalidArgumentException.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected int calculateLength() { int len = 0; for (int i = 0; i < index; i++) { len += array[i].length(); } return len; } \n### Response:", "ground_truth": "Calculates string length.", "predict": "Calculate the length of an array\n@return type\n@throws RuntimeException."}, {"ID": 1170, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def get_piis_for_date(query_str, date): \"\"\"Search ScienceDirect with a query string constrained to a given year. Parameters ---------- query_str : str The query string to search with date : str The year to constrain the search to Returns ------- piis : list[str] The list of PIIs identifying the papers returned by the search \"\"\" count = 200 params = {'query': query_str, 'count': count, 'start': 0, 'sort': '-coverdate', 'date': date, 'field': 'pii'} all_piis = [] while True: res = requests.get(elsevier_search_url, params, headers=ELSEVIER_KEYS) if not res.status_code == 200: logger.info('Got status code: %d' % res.status_code) break res_json = res.json() entries = res_json['search-results']['entry'] logger.info(res_json['search-results']['opensearch:totalResults']) if entries == [{'@_fa': 'true', 'error': 'Result set was empty'}]: logger.info('Search result was empty') return [] piis = [entry['pii'] for entry in entries] all_piis += piis # Get next batch links = res_json['search-results'].get('link', []) cont = False for link in links: if link.get('@ref') == 'next': logger.info('Found link to next batch of results.') params['start'] += count cont = True break if not cont: break return all_piis. \n### Response: Search ScienceDirect with a query string constrained to a given year.\n\n    Parameters\n    ----------\n    query_str : str\n        The query string to search with\n    date : str\n        The year to constrain the search to\n\n    Returns\n    -------\n    piis : list[str]\n        The list of PIIs identifying the papers returned by the search.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected String createMixingMessage(final BeanDefinition targetBeanDefinition, final BeanDefinition refBeanDefinition) { return \"Scopes mixing detected: \" + refBeanDefinition.name + \"@\" + refBeanDefinition.scope.getClass().getSimpleName() + \" -> \" + targetBeanDefinition.name + \"@\" + targetBeanDefinition.scope.getClass().getSimpleName(); } \n### Response:", "ground_truth": "Creates mixed scope message.", "predict": "Scopes mixing detected: \"MyBean\" -> \"MyScope\"\n\nThis method creates a mixing message for a given target bean definition and a reference bean definition. The message includes information about the scopes that have been mixed."}, {"ID": 1171, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function sum($alias, $field = null, $script = null) { $aggregation = new SumAggregation($alias, $field, $script); $this->append($aggregation); }. \n### Response: Add an sum aggregate.\n\n@param $alias\n@param string      $field\n@param string|null $script.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected Object createScopedProxyBean(final PetiteContainer petiteContainer, final BeanDefinition refBeanDefinition) { Class beanType = refBeanDefinition.type; Class proxyClass = proxyClasses.get(beanType); if (proxyClass == null) { // create proxy class only once if (refBeanDefinition instanceof ProxettaBeanDefinition) { // special case, double proxy! ProxettaBeanDefinition pbd = (ProxettaBeanDefinition) refBeanDefinition; ProxyProxetta proxetta = Proxetta.proxyProxetta().withAspects(ArraysUtil.insert(pbd.proxyAspects, aspect, 0)); proxetta.setClassNameSuffix(\"$ScopedProxy\"); proxetta.setVariableClassName(true); ProxyProxettaFactory builder = proxetta.proxy().setTarget(pbd.originalTarget); proxyClass = builder.define(); proxyClasses.put(beanType, proxyClass); } else { ProxyProxetta proxetta = Proxetta.proxyProxetta().withAspect(aspect); proxetta.setClassNameSuffix(\"$ScopedProxy\"); proxetta.setVariableClassName(true); ProxyProxettaFactory builder = proxetta.proxy().setTarget(beanType); proxyClass = builder.define(); proxyClasses.put(beanType, proxyClass); } } Object proxy; try { proxy = ClassUtil.newInstance(proxyClass); Field field = proxyClass.getField(\"$__petiteContainer$0\"); field.set(proxy, petiteContainer); field = proxyClass.getField(\"$__name$0\"); field.set(proxy, refBeanDefinition.name); } catch (Exception ex) { throw new PetiteException(ex); } return proxy; } \n### Response:", "ground_truth": "Creates scoped proxy bean for given bean definition.", "predict": "This Java code defines a protected method named `createScopedProxyBean` that creates a new proxy bean for a specific target bean type. The method takes three parameters:\n\n* `final PetiteContainer petiteContainer`: The target PetiteContainer object for the proxy bean.\n* `final BeanDefinition refBeanDefinition`: The definition of the target bean.\n* `Object proxy`: The new proxy bean instance.\n\nThe method first checks if a proxy class for the target bean type is already defined. If not, it creates a new proxy class by following the steps outlined in the comment for the special case of double proxying if the target bean definition is of type `ProxettaBeanDefinition`. The proxy class is then defined and added to the `proxyClasses` list. Finally, the method creates a new instance of the proxy class and sets its properties based on the fields of the target PetiteContainer object and the name of the target bean definition.\n\nThe method also throws an exception if there is an error creating the proxy bean."}, {"ID": 1172, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function hasCustomController() { $controllerName = ucfirst(str_replace('post_', '', $this->slug)); if(File::exists(Theme::getPath().'/controllers/'.$controllerName.'Controller.php')) { return true; } return false; }. \n### Response: Check if a post type has a custom controller.\n\n@return bool.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void loopBody() throws JspException { JspFragment body = getJspBody(); if (body == null) { return; } LoopIterator loopIterator = new LoopIterator(start, end, step, modulus); if (status != null) { getJspContext().setAttribute(status, loopIterator); } while (loopIterator.next()) { TagUtil.invokeBody(body); } if (status != null) { getJspContext().removeAttribute(status); } } \n### Response:", "ground_truth": "Loops body.", "predict": "Iterates through the JspBody of a page and performs a loop through the content.\n\n@param JspFragment body The JspBody to iterate through.\n@param LoopIterator loopIterator The loop iterator to use for the iteration.\n@throw JspException If an exception occurs during the iteration.\n@return void."}, {"ID": 1173, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def add_virtualip(self, lb, vip): \"\"\"Adds the VirtualIP to the specified load balancer.\"\"\" resp, body = self.api.method_post(\"/loadbalancers/%s/virtualips\" % lb.id, body=vip.to_dict()) return resp, body. \n### Response: Adds the VirtualIP to the specified load balancer..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void init() { File[] filesArray = dir.listFiles(); filesCount = 0; if (filesArray != null) { filesCount = filesArray.length; for (File file : filesArray) { if (!acceptFile(file)) { continue; } map.put(file, new MutableLong(file.lastModified())); } } } \n### Response:", "ground_truth": "Initializes dir watcher by reading all files\nfrom watched folder.", "predict": "Initializes the directory.."}, {"ID": 1174, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: NullSafeAccumulator dotAccess(FieldAccess access, boolean nullSafe) { if (access instanceof ProtoCall) { ProtoCall protoCall = (ProtoCall) access; Expression maybeUnpack = protoCall.unpackFunction(); if (maybeUnpack != null) { Preconditions.checkState( unpackFunction == null, \"this chain will already unpack with %s\", unpackFunction); unpackFunction = maybeUnpack; accessType = protoCall.accessType(); } } chain.add(access.toChainAccess(nullSafe)); return this; }. \n### Response: Extends the access chain with a dot access to the given value.\n\n@param nullSafe If true, code will be generated to ensure the chain is non-null before\ndereferencing {@code access}..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected boolean acceptFile(final File file) { if (!file.isFile()) { return false; // ignore non-files } String fileName = file.getName(); if (ignoreDotFiles) { if (fileName.startsWith(StringPool.DOT)) { return false; // ignore hidden files } } if (patterns == null) { return true; } return Wildcard.matchOne(fileName, patterns) != -1; } \n### Response:", "ground_truth": "Accepts if a file is going to be watched.", "predict": "Provides a method to accept a file based on its name and any specified patterns.\n\n@param file The file to be processed.\n@return A boolean indicating whether the file was accepted.\n\nThis method first checks if the input file is a file, and if not, it returns false. Then, it checks if the file name starts with the \"..\" string pool, and if so, returns false to ignore hidden files. If no patterns are specified, it returns true. Finally, it uses  wildcard matching to check if the file name matches any of the specified patterns, and returns true if it does."}, {"ID": 1175, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def parse_chains(data): \"\"\" Parse the chain definitions. \"\"\" chains = odict() for line in data.splitlines(True): m = re_chain.match(line) if m: policy = None if m.group(2) != '-': policy = m.group(2) chains[m.group(1)] = { 'policy': policy, 'packets': int(m.group(3)), 'bytes': int(m.group(4)), } return chains. \n### Response: Parse the chain definitions..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public DirWatcher useWatchFile(final String name) { watchFile = new File(dir, name); if (!watchFile.isFile() || !watchFile.exists()) { try { FileUtil.touch(watchFile); } catch (IOException ioex) { throw new DirWatcherException(\"Invalid watch file: \" + name, ioex); } } watchFileLastAccessTime = watchFile.lastModified(); return this; } \n### Response:", "ground_truth": "Enables usage of provided watch file.", "predict": "UseWatchFile method returns a FileWatcher object that watches the specified file.."}, {"ID": 1176, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public boolean isCompactable(long index) { Map.Entry<Long, JournalSegment<E>> segmentEntry = segments.floorEntry(index); return segmentEntry != null && segments.headMap(segmentEntry.getValue().index()).size() > 0; }. \n### Response: Returns a boolean indicating whether a segment can be removed from the journal prior to the given index.\n\n@param index the index from which to remove segments\n@return indicates whether a segment can be removed from the journal.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void start(final long pollingInterval) { if (timer == null) { if (!startBlank) { init(); } timer = new Timer(true); timer.schedule(new WatchTask(), 0, pollingInterval); } } \n### Response:", "ground_truth": "Starts the watcher.", "predict": "Starts the journal timer and schedules the WatchTask to poll the journal for compactability.\n\n@param pollingInterval the time in milliseconds to poll the journal for compactability\n@return void\n\n"}, {"ID": 1177, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def metop20kmto1km(lons20km, lats20km): \"\"\"Getting 1km geolocation for metop avhrr from 20km tiepoints. \"\"\" cols20km = np.array([0] + list(range(4, 2048, 20)) + [2047]) cols1km = np.arange(2048) lines = lons20km.shape[0] rows20km = np.arange(lines) rows1km = np.arange(lines) along_track_order = 1 cross_track_order = 3 satint = SatelliteInterpolator((lons20km, lats20km), (rows20km, cols20km), (rows1km, cols1km), along_track_order, cross_track_order) return satint.interpolate(). \n### Response: Getting 1km geolocation for metop avhrr from 20km tiepoints..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void onChange(final DirWatcherEvent.Type type, final File file) { listeners.accept(new DirWatcherEvent(type, file)); } \n### Response:", "ground_truth": "Triggers listeners on file change.", "predict": "onChange(): Implement a method that listens for DirWatcherEvent.Type events and accepts a new DirWatcherEvent object."}, {"ID": 1178, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def create_exception_by_error_code( errorCode, detailCode='0', description='', traceInformation=None, identifier=None, nodeId=None, ): \"\"\"Create a DataONE Exception object by errorCode. See Also: For args, see: ``DataONEException()`` \"\"\" try: dataone_exception = ERROR_CODE_TO_EXCEPTION_DICT[errorCode] except LookupError: dataone_exception = ServiceFailure return dataone_exception( detailCode, description, traceInformation, identifier, nodeId ). \n### Response: Create a DataONE Exception object by errorCode.\n\n    See Also:   For args, see: ``DataONEException()``.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void add(final Enumeration<T> enumeration) { if (allEnumerations.contains(enumeration)) { throw new IllegalArgumentException(\"Duplicate enumeration\"); } allEnumerations.add(enumeration); } \n### Response:", "ground_truth": "Adds an enumeration to this composite.", "predict": "Adds an enumeration to the list of all enumerations.\n\n    This method adds an enumeration to the list of all enumerations,\n    and does not throw an exception if the enumeration already exists in the list."}, {"ID": 1179, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function withNumericFilter($name, $values, $logicalOperator = 'and') { if (!is_array($values)) { $values = [$values]; } $numericalFilterArray = array_map(function ($value) use ($name) { return \"{$name}={$value}\"; }, $values); $numericalFilter = implode(',', $numericalFilterArray); if ($logicalOperator == self::LOGICAL_OPERATOR_OR) { $numericalFilter = \"({$numericalFilter})\"; } $this->numericFilters[] = $numericalFilter; return $this; }. \n### Response: Set a numeric filter.\n\n@param string       $name\n@param string|array $values\n@param string       $logicalOperator\n\n@return $this.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: int computeFieldInfoSize() { // The access_flags, name_index, descriptor_index and attributes_count fields use 8 bytes. int size = 8; // For ease of reference, we use here the same attribute order as in Section 4.7 of the JVMS. if (constantValueIndex != 0) { // ConstantValue attributes always use 8 bytes. symbolTable.addConstantUtf8(Constants.CONSTANT_VALUE); size += 8; } // Before Java 1.5, synthetic fields are represented with a Synthetic attribute. if ((accessFlags & Opcodes.ACC_SYNTHETIC) != 0 && symbolTable.getMajorVersion() < Opcodes.V1_5) { // Synthetic attributes always use 6 bytes. symbolTable.addConstantUtf8(Constants.SYNTHETIC); size += 6; } if (signatureIndex != 0) { // Signature attributes always use 8 bytes. symbolTable.addConstantUtf8(Constants.SIGNATURE); size += 8; } // ACC_DEPRECATED is ASM specific, the ClassFile format uses a Deprecated attribute instead. if ((accessFlags & Opcodes.ACC_DEPRECATED) != 0) { // Deprecated attributes always use 6 bytes. symbolTable.addConstantUtf8(Constants.DEPRECATED); size += 6; } if (lastRuntimeVisibleAnnotation != null) { size += lastRuntimeVisibleAnnotation.computeAnnotationsSize( Constants.RUNTIME_VISIBLE_ANNOTATIONS); } if (lastRuntimeInvisibleAnnotation != null) { size += lastRuntimeInvisibleAnnotation.computeAnnotationsSize( Constants.RUNTIME_INVISIBLE_ANNOTATIONS); } if (lastRuntimeVisibleTypeAnnotation != null) { size += lastRuntimeVisibleTypeAnnotation.computeAnnotationsSize( Constants.RUNTIME_VISIBLE_TYPE_ANNOTATIONS); } if (lastRuntimeInvisibleTypeAnnotation != null) { size += lastRuntimeInvisibleTypeAnnotation.computeAnnotationsSize( Constants.RUNTIME_INVISIBLE_TYPE_ANNOTATIONS); } if (firstAttribute != null) { size += firstAttribute.computeAttributesSize(symbolTable); } return size; } \n### Response:", "ground_truth": "Returns the size of the field_info JVMS structure generated by this FieldWriter. Also adds the\nnames of the attributes of this field in the constant pool.\n\n@return the size in bytes of the field_info JVMS structure.", "predict": "Compute the size of fields.\n\n@param symbolTable\n\n@return The size of fields."}, {"ID": 1180, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def get_app_iter(self, environ): \"\"\"Returns the application iterator for the given environ. Depending on the request method and the current status code the return value might be an empty response rather than the one from the response. If the request method is `HEAD` or the status code is in a range where the HTTP specification requires an empty response, an empty iterable is returned. .. versionadded:: 0.6 :param environ: the WSGI environment of the request. :return: a response iterable. \"\"\" status = self.status_code if environ['REQUEST_METHOD'] == 'HEAD' or \\ 100 <= status < 200 or status in (204, 304): iterable = () elif self.direct_passthrough: if __debug__: _warn_if_string(self.response) return self.response else: iterable = self.iter_encoded() return ClosingIterator(iterable, self.close). \n### Response: Returns the application iterator for the given environ.  Depending\n        on the request method and the current status code the return value\n        might be an empty response rather than the one from the response.\n\n        If the request method is `HEAD` or the status code is in a range\n        where the HTTP specification requires an empty response, an empty\n        iterable is returned.\n\n        .. versionadded:: 0.6\n\n        :param environ: the WSGI environment of the request.\n        :return: a response iterable..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: void putFieldInfo(final ByteVector output) { boolean useSyntheticAttribute = symbolTable.getMajorVersion() < Opcodes.V1_5; // Put the access_flags, name_index and descriptor_index fields. int mask = useSyntheticAttribute ? Opcodes.ACC_SYNTHETIC : 0; output.putShort(accessFlags & ~mask).putShort(nameIndex).putShort(descriptorIndex); // Compute and put the attributes_count field. // For ease of reference, we use here the same attribute order as in Section 4.7 of the JVMS. int attributesCount = 0; if (constantValueIndex != 0) { ++attributesCount; } if ((accessFlags & Opcodes.ACC_SYNTHETIC) != 0 && useSyntheticAttribute) { ++attributesCount; } if (signatureIndex != 0) { ++attributesCount; } if ((accessFlags & Opcodes.ACC_DEPRECATED) != 0) { ++attributesCount; } if (lastRuntimeVisibleAnnotation != null) { ++attributesCount; } if (lastRuntimeInvisibleAnnotation != null) { ++attributesCount; } if (lastRuntimeVisibleTypeAnnotation != null) { ++attributesCount; } if (lastRuntimeInvisibleTypeAnnotation != null) { ++attributesCount; } if (firstAttribute != null) { attributesCount += firstAttribute.getAttributeCount(); } output.putShort(attributesCount); // Put the field_info attributes. // For ease of reference, we use here the same attribute order as in Section 4.7 of the JVMS. if (constantValueIndex != 0) { output .putShort(symbolTable.addConstantUtf8(Constants.CONSTANT_VALUE)) .putInt(2) .putShort(constantValueIndex); } if ((accessFlags & Opcodes.ACC_SYNTHETIC) != 0 && useSyntheticAttribute) { output.putShort(symbolTable.addConstantUtf8(Constants.SYNTHETIC)).putInt(0); } if (signatureIndex != 0) { output .putShort(symbolTable.addConstantUtf8(Constants.SIGNATURE)) .putInt(2) .putShort(signatureIndex); } if ((accessFlags & Opcodes.ACC_DEPRECATED) != 0) { output.putShort(symbolTable.addConstantUtf8(Constants.DEPRECATED)).putInt(0); } if (lastRuntimeVisibleAnnotation != null) { lastRuntimeVisibleAnnotation.putAnnotations( symbolTable.addConstantUtf8(Constants.RUNTIME_VISIBLE_ANNOTATIONS), output); } if (lastRuntimeInvisibleAnnotation != null) { lastRuntimeInvisibleAnnotation.putAnnotations( symbolTable.addConstantUtf8(Constants.RUNTIME_INVISIBLE_ANNOTATIONS), output); } if (lastRuntimeVisibleTypeAnnotation != null) { lastRuntimeVisibleTypeAnnotation.putAnnotations( symbolTable.addConstantUtf8(Constants.RUNTIME_VISIBLE_TYPE_ANNOTATIONS), output); } if (lastRuntimeInvisibleTypeAnnotation != null) { lastRuntimeInvisibleTypeAnnotation.putAnnotations( symbolTable.addConstantUtf8(Constants.RUNTIME_INVISIBLE_TYPE_ANNOTATIONS), output); } if (firstAttribute != null) { firstAttribute.putAttributes(symbolTable, output); } } \n### Response:", "ground_truth": "Puts the content of the field_info JVMS structure generated by this FieldWriter into the given\nByteVector.\n\n@param output where the field_info structure must be put.", "predict": "This method puts the field information for the given WSGI environment into the ByteVector output. It first checks if the symbol table version is less than 1.5, and if so, it puts the access flags, name index, and descriptor index fields in the output. It then computes and puts the attributes count field, and finally it puts the field info attributes in the output. The order of the attributes is the same as in Section 4.7 of the JVMS. If there are any constant value index, signature index, last runtime visible annotation, last runtime invisible annotation, last runtime visible type annotation, and last runtime invisible type annotation, they are added to the attributes count. If there is any first attribute, it is added to the attributes count. The method returns nothing, but it may be used as an iterator for the given WSGI environment."}, {"ID": 1181, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def _aggregations(search, definitions): \"\"\"Add aggregations to query.\"\"\" if definitions: for name, agg in definitions.items(): search.aggs[name] = agg if not callable(agg) else agg() return search. \n### Response: Add aggregations to query..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static Target ofValue(final Object value, final ScopeData scopeData) { return new Target(value, null, scopeData, null, VALUE_INSTANCE_CREATOR); } \n### Response:", "ground_truth": "Creates a common target over a value, with known scope data.", "predict": "public static Target ofValue(final Object value, final ScopeData scopeData) {\n\t// Return a new Target object with the given value and scopeData\n\t// and a default constructor that sets the value and any other\n\t// default properties to null and the VALUE_INSTANCE_CREATOR constant,\n\t// respectively.\n\treturn new Target(value, scopeData, null, VALUE_INSTANCE_CREATOR);\n}"}, {"ID": 1182, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function isLoopback(): bool { if ($this->is_loopback === null) { $this->is_loopback = $this->isIn(static::$loopback_range); } return $this->is_loopback; }. \n### Response: Return true if the address is within the loopback range.\n\n@return bool.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void writeValue(final InjectionPoint injectionPoint, final Object propertyValue, final boolean silent) { writeValue(injectionPoint.targetName(), propertyValue, silent); } \n### Response:", "ground_truth": "Writes value to this target. Depending on a flag, writing the value can be\ncompletely silent, when no exception is thrown and with top performances.\nOtherwise, an exception is thrown on a failure.", "predict": "Writes the specified property value to the target object.\n\n@param InjectionPoint injectionPoint The injection point object.\n@param Object propertyValue The property value to write.\n@param boolean silent Whether to silent the injection or not.\n\n"}, {"ID": 1183, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def sbd_to_steem(self, sbd=0, price=0, account=None): ''' Uses the ticker to get the lowest ask and moves the sbd at that price. ''' if not account: account = self.mainaccount if self.check_balances(account): if sbd == 0: sbd = self.sbdbal elif sbd > self.sbdbal: self.msg.error_message(\"INSUFFICIENT FUNDS. CURRENT SBD BAL: \" + str(self.sbdbal)) return False if price == 0: price = 1 / self.dex_ticker()['lowest_ask'] try: self.dex.sell(sbd, \"SBD\", price, account=account) except Exception as e: self.msg.error_message(\"COULD NOT SELL SBD FOR STEEM: \" + str(e)) return False else: self.msg.message(\"TRANSFERED \" + str(sbd) + \" SBD TO STEEM AT THE PRICE OF: $\" + str(price)) return True else: return False. \n### Response: Uses the ticker to get the lowest ask\n        and moves the sbd at that price..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void decorate(final Writer writer, final char[] pageContent, final char[] decoraContent) throws IOException { DecoraTag[] decoraTags = parseDecorator(decoraContent); parsePage(pageContent, decoraTags); writeDecoratedPage(writer, decoraContent, pageContent, decoraTags); } \n### Response:", "ground_truth": "Decorates page content with decorator template and outputs the result.", "predict": "decorated the page with the specified decorators.."}, {"ID": 1184, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (p *peer) RequestProofs(reqID, cost uint64, reqs []ProofReq) error { p.Log().Debug(\"Fetching batch of proofs\", \"count\", len(reqs)) return sendRequest(p.rw, GetProofsV2Msg, reqID, cost, reqs) }. \n### Response: // RequestProofs fetches a batch of merkle proofs from a remote node..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void parsePage(final char[] pageContent, final DecoraTag[] decoraTags) { LagartoParser lagartoParser = new LagartoParser(pageContent); PageRegionExtractor writer = new PageRegionExtractor(decoraTags); lagartoParser.parse(writer); } \n### Response:", "ground_truth": "Parses target page and extracts Decora regions for replacements.", "predict": "// parsePage parses a page in the Lagarto format and extracts its regions.."}, {"ID": 1185, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func generalizedWhereLabel(funcName string, containers Context, label string, test func(string, bool) bool) (Context, error) { selection := make([]*RuntimeContainer, 0) for i := 0; i < len(containers); i++ { container := containers[i] value, ok := container.Labels[label] if test(value, ok) { selection = append(selection, container) } } return selection, nil }. \n### Response: // generalized whereLabel function.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void writeDecoratedPage(final Writer out, final char[] decoratorContent, final char[] pageContent, final DecoraTag[] decoraTags) throws IOException { int ndx = 0; for (DecoraTag decoraTag : decoraTags) { // [1] just copy content before the Decora tag int decoratorLen = decoraTag.getStartIndex() - ndx; if (decoratorLen <= 0) { continue; } out.write(decoratorContent, ndx, decoratorLen); ndx = decoraTag.getEndIndex(); // [2] now write region at the place of Decora tag int regionLen = decoraTag.getRegionLength(); if (regionLen == 0) { if (decoraTag.hasDefaultValue()) { out.write(decoratorContent, decoraTag.getDefaultValueStart(), decoraTag.getDefaultValueLength()); } } else { writeRegion(out, pageContent, decoraTag, decoraTags); } } // write remaining content out.write(decoratorContent, ndx, decoratorContent.length - ndx); } \n### Response:", "ground_truth": "Writes decorated content.", "predict": "// write decorated page method."}, {"ID": 1186, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function exitOnFailure(AfterScenarioTested $event) { if (!$this->resultInterpretation->isFailure($event->getTestResult())) { return; } $this->eventDispatcher->dispatch(SuiteTested::AFTER, new AfterSuiteAborted($event->getEnvironment())); $this->eventDispatcher->dispatch(ExerciseCompleted::AFTER, new AfterExerciseAborted()); exit(1); }. \n### Response: Exits if scenario is a failure and if stopper is enabled.\n\n@param AfterScenarioTested $event.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void writeRegion(final Writer out, final char[] pageContent, final DecoraTag decoraTag, final DecoraTag[] decoraTags) throws IOException { int regionStart = decoraTag.getRegionStart(); int regionLen = decoraTag.getRegionLength(); int regionEnd = regionStart + regionLen; for (DecoraTag innerDecoraTag : decoraTags) { if (decoraTag == innerDecoraTag) { continue; } if (decoraTag.isRegionUndefined()) { continue; } if (innerDecoraTag.isInsideOtherTagRegion(decoraTag)) { // write everything from region start to the inner Decora tag out.write(pageContent, regionStart, innerDecoraTag.getRegionTagStart() - regionStart); regionStart = innerDecoraTag.getRegionTagEnd(); } } // write remaining content of the region out.write(pageContent, regionStart, regionEnd - regionStart); } \n### Response:", "ground_truth": "Writes region to output, but extracts all inner regions.", "predict": "This method writes the contents of a region to the output writer. It iterates through the tags of the decora tag array and checks if the current decora tag is a region tag. If it is, it continues to the next iteration. If it is not a region tag, it checks if the decora tag is undefined. If it is, it continues to the next iteration. If the decora tag is inside another tag region, it writes everything from the region start to the inner decora tag. It then writes the remaining content of the region. Finally, it writes the contents of the region to the output writer.\n\n@param Writer out the output writer to write the contents of the region to.\n@param char[] pageContent the contents of the page to write the region to.\n@param DecoraTag decoraTag the decora tag to check for.\n@param DecoraTag[] decoraTags the array of decora tags to check for."}, {"ID": 1187, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void removeListener(byte[] listenerId) { boolean removed = listeners.removeIf(id -> Arrays.equals(id, listenerId)); if (trace) { log.tracef(\"Decoder %08X removed? %s listener %s\", hashCode(), Boolean.toString(removed), Util.printArray(listenerId)); } }. \n### Response: must be called from event loop thread!.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void start() throws IOException { serverSocket = new ServerSocket(listenPort, socketBacklog); serverSocket.setReuseAddress(true); executorService = Executors.newFixedThreadPool(threadPoolSize); running = true; while (running) { Socket socket = serverSocket.accept(); socket.setKeepAlive(false); executorService.execute(onSocketConnection(socket)); } executorService.shutdown(); } \n### Response:", "ground_truth": "Starts HTTP tunnel. Method ends when the tunnel is stopped.", "predict": "This method starts a server by creating a new ServerSocket, setting it to accept connections from clients, and creating an Executor Service with a fixed thread pool size. It sets the initial socket backlog to the maximum value allowed by the system, and sets the keep alive flag for the socket to prevent it from being closed after a short period of inactivity. The method then enters a while loop that repeatedly accepts a new connection from a client and executes the onSocketConnection() method, which is responsible for handling the connection and sending data to the client. Finally, the method shuts down the Executor Service."}, {"ID": 1188, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public com.liferay.commerce.account.service.persistence.CommerceAccountUserRelPK getPrimaryKey() { return _commerceAccountUserRel.getPrimaryKey(); }. \n### Response: Returns the primary key of this commerce account user rel.\n\n@return the primary key of this commerce account user rel.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static ProcessResult run(final Process process) throws InterruptedException { final ByteArrayOutputStream baos = new ByteArrayOutputStream(); final StreamGobbler outputGobbler = new StreamGobbler(process.getInputStream(), baos, OUTPUT_PREFIX); final StreamGobbler errorGobbler = new StreamGobbler(process.getErrorStream(), baos, ERROR_PREFIX); outputGobbler.start(); errorGobbler.start(); final int result = process.waitFor(); outputGobbler.waitFor(); errorGobbler.waitFor(); return new ProcessResult(result, baos.toString()); } \n### Response:", "ground_truth": "Executes a process and returns the process output and exit code.", "predict": "This method runs the specified process and returns a ProcessResult object containing the result of the process execution. It creates two StreamGobblers, one to read the input stream of the process and one to read the error stream, and starts both streams. Finally, it waits for the process to complete and returns the result and the output stream content as a ProcessResult object.\n\n@param process the process to run\n@throw InterruptedException if the process is interrupted\n@return a ProcessResult object containing the result of the process execution and the output stream content\n\nThis method runs the specified process and returns a ProcessResult object containing the result of the process execution and the output stream content as a string."}, {"ID": 1189, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (s *ServerMethods) ServerConnectionInfo() (*ServerConnectionInfo, error) { r := &ServerConnectionInfo{} if _, err := s.ExecCmd(NewCmd(\"serverrequestconnectioninfo\").WithResponse(&r)); err != nil { return nil, err } return r, nil }. \n### Response: // ServerConnectionInfo returns detailed bandwidth and transfer information about the selected instance..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override protected IMAPSSLStore getStore(final Session session) { SimpleAuthenticator simpleAuthenticator = (SimpleAuthenticator) authenticator; final URLName url; if (simpleAuthenticator == null) { url = new URLName( PROTOCOL_IMAP, host, port, StringPool.EMPTY, null, null); } else { final PasswordAuthentication pa = simpleAuthenticator.getPasswordAuthentication(); url = new URLName( PROTOCOL_IMAP, host, port, StringPool.EMPTY, pa.getUserName(), pa.getPassword()); } return new IMAPSSLStore(session, url); } \n### Response:", "ground_truth": "Returns email store.\n\n@param session {@link Session}\n@return {@link com.sun.mail.imap.IMAPSSLStore}", "predict": "// Returns the IMAPSSLStore for the specified session."}, {"ID": 1190, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def rlmb_ppo_base(): \"\"\"HParams for PPO base.\"\"\" hparams = _rlmb_base() ppo_params = dict( base_algo=\"ppo\", base_algo_params=\"ppo_original_params\", # Number of real environments to train on simultaneously. real_batch_size=1, # Number of simulated environments to train on simultaneously. simulated_batch_size=16, eval_batch_size=32, # Unused; number of PPO epochs is calculated from the real frame limit. real_ppo_epochs_num=0, # Number of frames that can be taken from the simulated environment before # it diverges, used for training the agent. ppo_epochs_num=1000, # This should be enough to see something # Should be equal to simulated_rollout_length. # TODO(koz4k): Uncouple this by outputing done from SimulatedBatchEnv. ppo_epoch_length=hparams.simulated_rollout_length, # Do not eval since simulated batch env does not produce dones ppo_eval_every_epochs=0, ppo_learning_rate_constant=1e-4, # Will be changed, just so it exists. # This needs to be divisible by real_ppo_effective_num_agents. real_ppo_epoch_length=16 * 200, real_ppo_learning_rate_constant=1e-4, real_ppo_effective_num_agents=16, real_ppo_eval_every_epochs=0, simulation_flip_first_random_for_beginning=True, ) update_hparams(hparams, ppo_params) return hparams. \n### Response: HParams for PPO base..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public ServletOutputStream createOutputStream() throws IOException { GzipResponseStream gzstream = new GzipResponseStream(origResponse); gzstream.setBuffer(threshold); return gzstream; } \n### Response:", "ground_truth": "Creates and returns a ServletOutputStream to write the content associated\nwith this Response.", "predict": "Method-level comment for `createOutputStream()`:\n```\npublic ServletOutputStream createOutputStream() throws IOException {\n    // Create a new GzipResponseStream object and set the buffer threshold to the specified value.\n    // Return the GzipResponseStream object.\n    GzipResponseStream gzstream = new GzipResponseStream( origResponse );\n    gzstream.setBuffer( threshold );\n    // Return the GzipResponseStream object.\n    return gzstream;\n}\n```"}, {"ID": 1191, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static function updateConfig( Event $event ) { $event->getIO()->write( 'Ensure existing config and routing for the shop bundle' ); $options = self::getOptions( $event ); if( isset( $options['symfony-app-dir'] ) ) { self::updateConfigFile( $options['symfony-app-dir'] . '/config/config.yml' ); self::updateRoutingFile( $options['symfony-app-dir'] . '/config/routing.yml' ); } }. \n### Response: Ensure existing config and routing for the shop bundle.\n\n@param Event $event Event instance\n@throws \\RuntimeException If an error occured.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public void init(final TemplateData templateData) { super.init(templateData); if (hint != null) { templateData.incrementHintsCount(); } } \n### Response:", "ground_truth": "Counts actual real hints.", "predict": "This method is part of the `ShopBundle` class and is used to initialize the template data for the bundle. It overrides the `init` method of the base `TemplateData` class and adds an `incrementHintsCount` method to the template data. This method is used to count the number of hints provided by the bundle.\n\n@param TemplateData $templateData The template data instance.\n@return void The method returns nothing.\n\n"}, {"ID": 1192, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def _Parse(self, template): \"\"\"Parses template file for FSM structure. Args: template: Valid template file. Raises: TextFSMTemplateError: If template file syntax is invalid. \"\"\" if not template: raise TextFSMTemplateError('Null template.') # Parse header with Variables. self._ParseFSMVariables(template) # Parse States. while self._ParseFSMState(template): pass # Validate destination states. self._ValidateFSM(). \n### Response: Parses template file for FSM structure.\n\n    Args:\n      template: Valid template file.\n\n    Raises:\n      TextFSMTemplateError: If template file syntax is invalid..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void appendAlias(final StringBuilder query, final DbEntityDescriptor ded, final DbEntityColumnDescriptor dec) { final ColumnAliasType columnAliasType = templateData.getColumnAliasType(); if (columnAliasType == null || columnAliasType == ColumnAliasType.TABLE_REFERENCE) { final String tableName = ded.getTableName(); final String columnName = dec.getColumnNameForQuery(); templateData.registerColumnDataForTableRef(tableRef, tableName); query.append(tableRef).append(columnAliasSeparator).append(columnName); } else if (columnAliasType == ColumnAliasType.COLUMN_CODE) { final String tableName = ded.getTableName(); final String columnName = dec.getColumnName(); final String code = templateData.registerColumnDataForColumnCode(tableName, columnName); query.append(code); } else if (columnAliasType == ColumnAliasType.TABLE_NAME) { final String tableName = ded.getTableNameForQuery(); final String columnName = dec.getColumnNameForQuery(); query.append(tableName).append(columnAliasSeparator).append(columnName); } } \n### Response:", "ground_truth": "Appends alias.", "predict": "Appends alias information to the query string.\n\n    Args:\n      query: StringBuilder to append alias information to.\n      ded: DbEntityDescriptor for the entity being queried.\n      dec: DbEntityColumnDescriptor for the column being queried.\n\n    Raises:\n      None.\n\nNote: The code uses the `ColumnAliasType` enum to determine the type of the alias information to append."}, {"ID": 1193, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func isInstanceID(serviceID string) bool { slash := strings.LastIndexAny(serviceID, \"/\") if slash >= 0 && slash < len(serviceID)-1 { if isInstance, _ := regexp.MatchString(\"^[0-9]+$\", serviceID[slash+1:]); isInstance { return true } } return false }. \n### Response: // isInstanceID determines whether a service ID specifies an individual instance.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void appendColumnName(final StringBuilder query, final DbEntityDescriptor ded, final DbEntityColumnDescriptor dec) { query.append(resolveTable(tableRef, ded)).append('.').append(dec.getColumnName()); if (templateData.getColumnAliasType() != null) { // create column aliases query.append(AS); switch (templateData.getColumnAliasType()) { case TABLE_NAME: { final String tableName = ded.getTableNameForQuery(); query.append(tableName).append(columnAliasSeparator).append(dec.getColumnNameForQuery()); break; } case TABLE_REFERENCE: { final String tableName = ded.getTableName(); templateData.registerColumnDataForTableRef(tableRef, tableName); query.append(tableRef).append(columnAliasSeparator).append(dec.getColumnNameForQuery()); break; } case COLUMN_CODE: { final String tableName = ded.getTableName(); final String code = templateData.registerColumnDataForColumnCode(tableName, dec.getColumnName()); query.append(code); break; } } } } \n### Response:", "ground_truth": "Simply appends column name with optional table reference and alias.", "predict": "// append column information to the query string."}, {"ID": 1194, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void addProfile(KeyDecodingProfile profile) { for (CharacterPattern pattern : profile.getPatterns()) { synchronized(bytePatterns) { //If an equivalent pattern already exists, remove it first bytePatterns.remove(pattern); bytePatterns.add(pattern); } } }. \n### Response: Adds another key decoding profile to this InputDecoder, which means all patterns from the profile will be used\nwhen decoding input.\n@param profile Profile to add.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void addRule(final D ruleDefinition, final boolean include) { if (rules == null) { rules = new ArrayList<>(); } if (include) { includesCount++; } else { excludesCount++; } Rule<R> newRule = new Rule<>(makeRule(ruleDefinition), include); if (rules.contains(newRule)) { return; } rules.add(newRule); } \n### Response:", "ground_truth": "Adds a rule. Duplicates are not allowed and will be ignored.", "predict": "Adds a new rule to the rules collection.\n@param ruleDefinition Defines the rule.\n@param include Indicates whether to include the rule in the rules collection.\n\n"}, {"ID": 1195, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function implode(?string $glue = null, ?callable $callback = null): string { if ($glue === null) { $glue = ''; } if ($callback !== null) { return implode($glue, $this->map($callback)->all()); } return implode($glue, $this->all()); }. \n### Response: Concatenates values into a string\n\nOptional callback should return a string value for concatenation.\n\nCallback signature:\n\n\nfunction ($value, $key): string {}\n\n\n@param string|null   $glue     The string to join around\n@param callable|null $callback The callback function\n\n@return string.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public boolean apply(final V value, final boolean blacklist, boolean flag) { if (rules == null) { return flag; } if (blacklist) { flag = processExcludes(value, flag); flag = processIncludes(value, flag); } else { flag = processIncludes(value, flag); flag = processExcludes(value, flag); } return flag; } \n### Response:", "ground_truth": "Applies rules on given flag. Flag is only changed if at least one rule\nmatched. Otherwise, the same value is returned. This way you can\nchain several rules and have the rule engine change the flag\nonly when a rule is matched.", "predict": "Applys a rule to a given value and returns the result.\n\nRule signature:\n\n\nfunction (V $value, boolean $blacklist): boolean\n\n\n@param V $value The value to apply the rule to\n@param boolean $blacklist The black list of values to exclude\n\n@return boolean."}, {"ID": 1196, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (rs *Registrations) Validate(internalcfg *kubeadmapi.ClusterConfiguration) field.ErrorList { allErrs := field.ErrorList{} for kind, registration := range *rs { allErrs = append(allErrs, registration.ValidateFunc(internalcfg, field.NewPath(string(kind)))...) } return allErrs }. \n### Response: // Validate validates the ComponentConfig parts of the internal kubeadm API type.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected boolean processIncludes(final V value, boolean include) { if (includesCount > 0) { if (!include) { for (Rule<R> rule : rules) { if (!rule.include) { continue; } if (inExRuleMatcher.accept(value, rule.value, true)) { include = true; break; } } } } return include; } \n### Response:", "ground_truth": "Process includes rules.", "predict": "// Process includes and determine if they should be included."}, {"ID": 1197, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def process_IN_CREATE(self, raw_event): \"\"\" If the event affects a directory and the auto_add flag of the targetted watch is set to True, a new watch is added on this new directory, with the same attribute values than those of this watch. \"\"\" if raw_event.mask & IN_ISDIR: watch_ = self._watch_manager.get_watch(raw_event.wd) created_dir = os.path.join(watch_.path, raw_event.name) if watch_.auto_add and not watch_.exclude_filter(created_dir): addw = self._watch_manager.add_watch # The newly monitored directory inherits attributes from its # parent directory. addw_ret = addw(created_dir, watch_.mask, proc_fun=watch_.proc_fun, rec=False, auto_add=watch_.auto_add, exclude_filter=watch_.exclude_filter) # Trick to handle mkdir -p /d1/d2/t3 where d1 is watched and # d2 and t3 (directory or file) are created. # Since the directory d2 is new, then everything inside it must # also be new. created_dir_wd = addw_ret.get(created_dir) if ((created_dir_wd is not None) and (created_dir_wd > 0) and os.path.isdir(created_dir)): try: for name in os.listdir(created_dir): inner = os.path.join(created_dir, name) if self._watch_manager.get_wd(inner) is not None: continue # Generate (simulate) creation events for sub- # directories and files. if os.path.isfile(inner): # symlinks are handled as files. flags = IN_CREATE elif os.path.isdir(inner): flags = IN_CREATE | IN_ISDIR else: # This path should not be taken. continue rawevent = _RawEvent(created_dir_wd, flags, 0, name) self._notifier.append_event(rawevent) except OSError, err: msg = \"process_IN_CREATE, invalid directory %s: %s\" log.debug(msg % (created_dir, str(err))) return self.process_default(raw_event). \n### Response: If the event affects a directory and the auto_add flag of the\n        targetted watch is set to True, a new watch is added on this\n        new directory, with the same attribute values than those of\n        this watch..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected boolean processExcludes(final V value, boolean include) { if (excludesCount > 0) { if (include) { for (Rule<R> rule : rules) { if (rule.include) { continue; } if (inExRuleMatcher.accept(value, rule.value, false)) { include = false; break; } } } } return include; } \n### Response:", "ground_truth": "Process excludes rules.", "predict": "This method processes exclude rules for a given value (V). It first checks if there are any exclude rules defined for the value. If there are, it iterates over the rules and checks if any of them include the value. If a rule includes the value, the method sets the include flag to false and breaks out of the loop. If no rule includes the value, the method returns true."}, {"ID": 1198, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function before($methods, $pattern, $func) { $pattern = $this->setBaseRoute($pattern); foreach (explode('|', $methods) as $method) { $this->before[$method][] = ['pattern' => $pattern, 'fn' => $func]; } }. \n### Response: Store a before middle-ware route and a handling function to be executed\nwhen accessed using one of the specified methods.\n\n@param string $methods Allowed methods, | delimited\n@param string $pattern A route pattern such as /home/system\n@param object $func    The handling function to be executed\n\n@return mixed|void.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public String getPseudoClassName() { String name = getClass().getSimpleName().toLowerCase(); name = name.replace('_', '-'); return name; } \n### Response:", "ground_truth": "Returns pseudo-class name from simple class name.", "predict": "Get the pseudo-class name of the current class.\n\n@return the pseudo-class name\n@since Java 5."}, {"ID": 1199, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def getCitiesDrawingXML(points): ''' Build an XML string that contains a square for each city''' xml = \"\" for p in points: x = str(p.x) z = str(p.y) xml += '<DrawBlock x=\"' + x + '\" y=\"7\" z=\"' + z + '\" type=\"beacon\"/>' xml += '<DrawItem x=\"' + x + '\" y=\"10\" z=\"' + z + '\" type=\"ender_pearl\"/>' return xml. \n### Response: Build an XML string that contains a square for each city.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public boolean addAll(final Collection<? extends E> c) { Iterator<? extends E> i = c.iterator(); boolean changed = false; while (i.hasNext()) { boolean ret = add(i.next()); if (!changed) { changed = ret; } } return changed; } \n### Response:", "ground_truth": "Add all of the elements in the given collection to this list.", "predict": "addAll() method implements the Collection interface and adds all elements in the given collection to the current object."}, {"ID": 1200, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def disassemble(bytecode: bytes) -> list: \"\"\"Disassembles evm bytecode and returns a list of instructions. :param bytecode: :return: \"\"\" instruction_list = [] address = 0 length = len(bytecode) if \"bzzr\" in str(bytecode[-43:]): # ignore swarm hash length -= 43 while address < length: try: op_code = opcodes[bytecode[address]] except KeyError: instruction_list.append(EvmInstruction(address, \"INVALID\")) address += 1 continue op_code_name = op_code[0] current_instruction = EvmInstruction(address, op_code_name) match = re.search(regex_PUSH, op_code_name) if match: argument_bytes = bytecode[address + 1 : address + 1 + int(match.group(1))] current_instruction.argument = \"0x\" + argument_bytes.hex() address += int(match.group(1)) instruction_list.append(current_instruction) address += 1 # We use a to_dict() here for compatibility reasons return [element.to_dict() for element in instruction_list]. \n### Response: Disassembles evm bytecode and returns a list of instructions.\n\n    :param bytecode:\n    :return:.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected int findInsertionPoint(final E o, int low, int high) { while (low <= high) { int mid = (low + high) >>> 1; int delta = compare(get(mid), o); if (delta > 0) { high = mid - 1; } else { low = mid + 1; } } return low; } \n### Response:", "ground_truth": "Conducts a binary search to find the index where Object\nshould be inserted.", "predict": "Provides a method to find the insertion point of an object `o` in a list of objects, taking into account the order of the objects.\n\n    :param o:\n    :param low:\n    :param high:\n    :return:\n    :rtype: int."}, {"ID": 1201, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function AvailableApplications() { if (!is_array($this->_AvailableApplications)) { $ApplicationInfo = array(); $AppFolders = Gdn_FileSystem::Folders(PATH_APPLICATIONS); // Get an array of all application folders $ApplicationAboutFiles = Gdn_FileSystem::FindAll(PATH_APPLICATIONS, 'settings' . DS . 'about.php', $AppFolders); // Now look for about files within them. // Include them all right here and fill the application info array $ApplicationCount = count($ApplicationAboutFiles); for ($i = 0; $i < $ApplicationCount; ++$i) { include($ApplicationAboutFiles[$i]); // Define the folder name for the newly added item foreach ($ApplicationInfo as $ApplicationName => $Info) { if (array_key_exists('Folder', $ApplicationInfo[$ApplicationName]) === FALSE) { $Folder = substr($ApplicationAboutFiles[$i], strlen(PATH_APPLICATIONS)); if (substr($Folder, 0, 1) == DS) $Folder = substr($Folder, 1); $Folder = substr($Folder, 0, strpos($Folder, DS)); $ApplicationInfo[$ApplicationName]['Folder'] = $Folder; } } } // Add all of the indexes to the applications. foreach ($ApplicationInfo as $Index => &$Info) { $Info['Index'] = $Index; } $this->_AvailableApplications = $ApplicationInfo; } return $this->_AvailableApplications; }. \n### Response: Looks through the root Garden directory for valid applications and\nreturns them as an associative array of \"Application Name\" =>\n\"Application Info Array\". It also adds a \"Folder\" definition to the\nApplication Info Array for each application..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void bindAnnotationConfig(final Class<? extends Annotation> annotationType, final Class<? extends ActionConfig> actionConfigClass) { final ActionConfig actionConfig = registerNewActionConfiguration(actionConfigClass); actionConfigs.put(annotationType, actionConfig); for (final AnnotationParser annotationParser : annotationParsers) { if (annotationType.equals(annotationParser.getAnnotationType())) { // parser already exists return; } } annotationParsers = ArraysUtil.append(annotationParsers, new AnnotationParser(annotationType, Action.class)); } \n### Response:", "ground_truth": "Binds action annotation and the action config. This can overwrite the default annotation\nconfiguration of an annotation.", "predict": "Binds the specified annotation type and action configuration class to the ActionConfig class. Registers the new action configuration and adds it to the ActionConfig array. Iterates through the AnnotationParser array and adds a new AnnotationParser for the specified annotation type and Action class if it does not already exist."}, {"ID": 1202, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function parse() { preg_match_all(\"#\\{(\\w+)\\}#\", $this->uri, $params); $replace = []; foreach ($params[1] as $param) { $replace['{'.$param.'}'] = '(?<'.$param.'>'. (isset($this->filters[$param]) ? $this->filters[$param] : '[a-zA-Z+0-9-.]+') .')'; } $this->parsedRoute = str_replace(array_keys($replace), array_values($replace), $this->uri); }. \n### Response: Parse route uri\n\n@return void.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected ActionConfig registerNewActionConfiguration(final Class<? extends ActionConfig> actionConfigClass) { final ActionConfig newActionConfig = createActionConfig(actionConfigClass); actionConfigs.put(actionConfigClass, newActionConfig); return newActionConfig; } \n### Response:", "ground_truth": "Registers action configuration for given type.", "predict": "RegisterNewActionConfiguration\n\n@param actionConfigClass the class to register the new action configuration for\n@return the new action configuration"}, {"ID": 1203, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def gen_txn_path(self, txn): \"\"\"Return path to state as 'str' type or None\"\"\" txn_type = get_type(txn) if txn_type not in self.state_update_handlers: logger.error('Cannot generate id for txn of type {}'.format(txn_type)) return None if txn_type == NYM: nym = get_payload_data(txn).get(TARGET_NYM) binary_digest = domain.make_state_path_for_nym(nym) return hexlify(binary_digest).decode() elif txn_type == ATTRIB: path = domain.prepare_attr_for_state(txn, path_only=True) return path.decode() elif txn_type == SCHEMA: path = domain.prepare_schema_for_state(txn, path_only=True) return path.decode() elif txn_type == CLAIM_DEF: path = domain.prepare_claim_def_for_state(txn, path_only=True) return path.decode() elif txn_type == REVOC_REG_DEF: path = domain.prepare_revoc_def_for_state(txn, path_only=True) return path.decode() elif txn_type == REVOC_REG_ENTRY: path = domain.prepare_revoc_reg_entry_for_state(txn, path_only=True) return path.decode() raise NotImplementedError(\"path construction is not implemented for type {}\".format(txn_type)). \n### Response: Return path to state as 'str' type or None.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public ActionConfig lookup(final Class actionTypeOrAnnotationType) { final ActionConfig actionConfig = actionConfigs.get(actionTypeOrAnnotationType); if (actionConfig == null) { throw new MadvocException(\"ActionConfiguration not registered:\" + actionTypeOrAnnotationType.getName()); } return actionConfig; } \n### Response:", "ground_truth": "Lookup for the action configuration. Typically, the input argument is either the action type or annotation type.", "predict": "Retrieve an ActionConfig from the registered ActionConfigurations for the given actionTypeOrAnnotationType. If no ActionConfig is found, throw a MadvocException with the specified actionTypeOrAnnotationType name."}, {"ID": 1204, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function validateUniques(array $rules = array(), array $customMessages = array()) { $rules = $this->buildUniqueExclusionRules($rules); return $this->validate($rules, $customMessages); }. \n### Response: Validates a model with unique rules properly treated.\n\n@param array $rules Validation rules\n@param array $customMessages Custom error messages\n@return bool\n@see SmartModel::validate().\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public <T extends ActionConfig> void with(final Class<T> actionConfigType, final Consumer<T> actionConfigConsumer) { final T actionConfig = (T) lookup(actionConfigType); actionConfigConsumer.accept(actionConfig); } \n### Response:", "ground_truth": "Fetch some action config and consumes it.", "predict": "This method is used to apply a specific action configuration to a particular type of action.\n\n@param Class<T> actionConfigType The type of action configuration to apply\n@param Consumer<T> actionConfigConsumer The consumer interface to access the action configuration for the given type\n@return void\n@see ActionConfig::get().\n\n"}, {"ID": 1205, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (r *Router) HandleFunc(event string, fn func(http.ResponseWriter, *http.Request)) { r.Handle(event, http.HandlerFunc(fn)) }. \n### Response: // HandleFunc maps a github event to an http.HandlerFunc..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected static void setupSystemMailProperties() { System.setProperty(\"mail.mime.encodefilename\", Boolean.valueOf(Defaults.mailMimeEncodefilename).toString()); System.setProperty(\"mail.mime.decodefilename\", Boolean.valueOf(Defaults.mailMimeDecodefilename).toString()); } \n### Response:", "ground_truth": "Setups the system email properties.", "predict": "// Set system mail properties."}, {"ID": 1206, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def perform_saved_searches_actions(context, params={}) get_saved_searches(context) save_or_update_saved_search(params.merge(context: context)) get_params_to_search(context) end. \n### Response: Perform saved searches actions to provide full functionality with one method.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void validateWithin(final ValidationContext vctx, final Object value) { vtor.validate(vctx, value, name); } \n### Response:", "ground_truth": "Validates provided context and value withing this constraint content.", "predict": "Validates the specified object within the given validation context and name."}, {"ID": 1207, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function getPlayback($playbackId) { $uri = \"playbacks/$playbackId\"; try { $response = $this->client->getEndpoint()->get($uri); } catch (RequestException $e) { $this->processRequestException($e); } return new Playback($this->client, \\GuzzleHttp\\json_decode($response->getBody())); }. \n### Response: Get a playback's details.\n\n@param string $playbackId Playback's id\n@return Playback\n@throws NotFoundException.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected Element findLastTable(final Node node) { Node tableNode = node; while (tableNode != null) { if (tableNode.getNodeType() == Node.NodeType.ELEMENT) { String tableNodeName = tableNode.getNodeName().toLowerCase(); if (tableNodeName.equals(\"table\")) { break; } } tableNode = tableNode.getParentNode(); } return (Element) tableNode; } \n### Response:", "ground_truth": "Finds the last table in stack of open elements.", "predict": "Find the last table element in a node.\n\n@param Node node The node to search for the last table element in.\n@return Element The last table element in the node, or null if not found.\n@throws NotFoundException If the table element is not found."}, {"ID": 1208, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function setRepository($url) { if (false !== strpos($url, '@')) { list($url, $branch) = explode('@', $url); $this->branch = $branch; } $this->repository = $url; return $this; }. \n### Response: Sets the project repository URL.\n\n@param string $url The project repository URL.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void fixElements() { for (Element fosterElement : fosterElements) { // find parent table Element lastTable = findLastTable(fosterElement); Node fosterElementParent = fosterElement.getParentNode(); // filter our foster element Node[] fosterChilds = fosterElement.getChildNodes(); for (Node fosterChild : fosterChilds) { if (fosterChild.getNodeType() == Node.NodeType.ELEMENT) { if (isOneOfTableElements((Element) fosterChild)) { // move all child table elements outside // the foster element fosterChild.detachFromParent(); fosterElementParent.insertBefore(fosterChild, fosterElement); } } } // finally, move foster element above the table fosterElement.detachFromParent(); lastTable.getParentNode().insertBefore(fosterElement, lastTable); } } \n### Response:", "ground_truth": "Performs the fix for elements.", "predict": "This method is used to fix the elements in a list of foster elements. It iterates through each element in the list and checks if it is a table element. If it is, it finds the last table element in the list and moves all of its child table elements outside of the element. Finally, it moves the element above the last table element."}, {"ID": 1209, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def enable_torque(self, ids): \"\"\" Enables torque of the motors with the specified ids. \"\"\" self._set_torque_enable(dict(zip(ids, itertools.repeat(True)))). \n### Response: Enables torque of the motors with the specified ids..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected Map<String, BeanData> registerSessionBeans(final HttpSession httpSession) { SessionBeans sessionBeans = new SessionBeans(); httpSession.setAttribute(SESSION_BEANS_NAME, sessionBeans); return sessionBeans.getBeanMap(); } \n### Response:", "ground_truth": "Registers new session destroy callback if not already registered.", "predict": "Registers session beans with the specified name in the HttpSession."}, {"ID": 1210, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def _cdist_scipy(x, y, exponent=1): \"\"\"Pairwise distance between the points in two sets.\"\"\" metric = 'euclidean' if exponent != 1: metric = 'sqeuclidean' distances = _spatial.distance.cdist(x, y, metric=metric) if exponent != 1: distances **= exponent / 2 return distances. \n### Response: Pairwise distance between the points in two sets..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @SuppressWarnings(\"unchecked\") protected Map<String, BeanData> getSessionMap(final HttpSession session) { SessionBeans sessionBeans = (SessionBeans) session.getAttribute(SESSION_BEANS_NAME); if (sessionBeans == null) { return null; } return sessionBeans.getBeanMap(); } \n### Response:", "ground_truth": "", "predict": "Method-level comment for `getSessionMap`:\n```\n protected Map<String, BeanData> getSessionMap(final HttpSession session) {\n    // Implement your method here\n    //...\n    // Return the result\n }\n```"}, {"ID": 1211, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: void announceMPStarted(int startMode) { if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled()) SibTr.entry(tc, \"announceMPStarted\"); DestinationTypeFilter destFilter = new DestinationTypeFilter(); SIMPIterator itr = destinationIndex.iterator(destFilter); while (itr.hasNext()) { DestinationHandler dh = (DestinationHandler) itr.next(); dh.announceMPStarted(); } itr.finished(); LinkTypeFilter linkFilter = new LinkTypeFilter(); linkFilter.LOCAL = Boolean.TRUE; itr = linkIndex.iterator(linkFilter); while (itr.hasNext()) { DestinationHandler dh = (DestinationHandler) itr.next(); dh.announceMPStarted(); } itr.finished(); itr = foreignBusIndex.iterator(); while (itr.hasNext()) { DestinationHandler dh = (DestinationHandler) itr.next(); dh.announceMPStarted(); } itr.finished(); // Iterate over the MQLinks, calling the MQLink component to // alert it that MP has started LinkTypeFilter mqLinkFilter = new LinkTypeFilter(); mqLinkFilter.MQLINK = Boolean.TRUE; itr = linkIndex.iterator(mqLinkFilter); while (itr.hasNext()) { MQLinkHandler mqLinkHandler = (MQLinkHandler) itr.next(); try { mqLinkHandler. announceMPStarted(startMode, messageProcessor.getMessagingEngine()); } catch (SIResourceException e) { // No FFDC code needed SibTr.exception(tc, e); // The MQLink component will have FFDC'd we'll trace // the problem but allow processing to continue } catch (SIException e) { // No FFDC code needed SibTr.exception(tc, e); // The MQLink component will have FFDC'd we'll trace // the problem but allow processing to continue } } itr.finished(); //Allow the async deletion thread to start up now if it wants. setIsAsyncDeletionThreadStartable(true); // Explicitly start the async deletion thread if there is anything to do. startAsynchDeletion(); //start DeletePubSubMsgsThread. startDeletePubSubMsgsThread(); if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled()) SibTr.exit(tc, \"announceMPStarted\"); }. \n### Response: Find the mediated destinations and tell them that the MP is now ready\nfor mediations to start work. In addition alert the MQLink component\nthat MP has started and set the flag to allow asynch deletion.\n\nFeature 176658.3.8.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void init(String name, final String superName, final String suffix, final String reqProxyClassName) { int lastSlash = name.lastIndexOf('/'); this.targetPackage = lastSlash == -1 ? StringPool.EMPTY : name.substring(0, lastSlash).replace('/', '.'); this.targetClassname = name.substring(lastSlash + 1); this.nextSupername = superName; this.superName = name; // create proxy name if (reqProxyClassName != null) { if (reqProxyClassName.startsWith(DOT)) { name = name.substring(0, lastSlash) + '/' + reqProxyClassName.substring(1); } else if (reqProxyClassName.endsWith(DOT)) { name = reqProxyClassName.replace('.', '/') + this.targetClassname; } else { name = reqProxyClassName.replace('.', '/'); } } // add optional suffix if (suffix != null) { name += suffix; } this.thisReference = name; this.superReference = this.superName; } \n### Response:", "ground_truth": "Work data initialization.", "predict": "Initialize the target package, class name, next super name, and super name of the proxy class. If the required proxy class name is not provided, it is created by concatenating the last slash of the target class name and the required prefix or suffix. If the optional suffix is provided, it is added to the name. This method also sets the thisReference and superReference variables to the provided names.\n\nFeature 176658.3.9."}, {"ID": 1212, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def __marshal_matches(matched): \"\"\"Convert matches to JSON format. :param matched: a list of matched identities :returns json_matches: a list of matches in JSON format \"\"\" json_matches = [] for m in matched: identities = [i.uuid for i in m] if len(identities) == 1: continue json_match = { 'identities': identities, 'processed': False } json_matches.append(json_match) return json_matches. \n### Response: Convert matches to JSON format.\n\n        :param matched: a list of matched identities\n\n        :returns json_matches: a list of matches in JSON format.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: void addAdviceInitMethod(final String name) { if (adviceInits == null) { adviceInits = new ArrayList<>(); } adviceInits.add(name); } \n### Response:", "ground_truth": "Saves used constructors of advices.", "predict": "Adds a method to the adviceInits list.\n\n        :param name: the name of the adviceInit method to add\n\n        :return: None\n```csharp\n```"}, {"ID": 1213, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def execute_and_handle_webdriver_exceptions(self, function_to_execute, timeout=None, locator=None, failure_message=None): \"\"\" Executor for wait functions @type function_to_execute: types.FunctionType @param function_to_execute: wait function specifying the type of wait @type timeout: int @param timeout: the maximum number of seconds the driver will wait before timing out @type locator: webdriverwrapper.support.locator.Locator @param locator: locator used to find element @type failure_message: str @param failure_message: message shown in exception if wait fails @rtype: webdriverwrapper.WebElementWrapper @return: Returns the element found \"\"\" logger = logging.getLogger(__name__) try: val = function_to_execute() for cb in self.action_callbacks: cb.__call__(self) return val except TimeoutException: raise WebDriverTimeoutException.WebDriverTimeoutException(self, timeout, locator, failure_message) except httplib.BadStatusLine, e: logger.error('BadStatusLine error raised on WebDriver action (line: {}, args:{}, message: {})'.format( e.line, e.args, e.message )) raise except httplib.CannotSendRequest: logger.error('CannotSendRequest error raised on WebDriver action') raise except UnexpectedAlertPresentException: # NOTE: handling alerts in this way expects that WebDriver does not dismiss unexpected alerts. That # setting can be changed by modifying the unexpectedAlertBehaviour setting msg = '<failed to parse message from alert>' try: a = self.driver.switch_to_alert() msg = a.text except Exception, e: msg = '<error parsing alert due to {} (note: parsing ' \\ 'alert text expects \"unexpectedAlertBehaviour\" to be set to \"ignore\")>'.format(e) logger.critical(msg) finally: logger.error('Unexpected alert raised on a WebDriver action; alert message was: {}'.format(msg)) raise UnexpectedAlertPresentException('Unexpected alert on page, alert message was: \"{}\"'.format(msg)). \n### Response: Executor for wait functions\n\n        @type function_to_execute:  types.FunctionType\n        @param function_to_execute: wait function specifying the type of wait\n        @type timeout:              int\n        @param timeout:             the maximum number of seconds the driver will wait before timing out\n        @type locator:              webdriverwrapper.support.locator.Locator\n        @param locator:             locator used to find element\n        @type failure_message:      str\n        @param failure_message:     message shown in exception if wait fails\n\n        @rtype:                 webdriverwrapper.WebElementWrapper\n        @return:                Returns the element found.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void end() { if (newAction) { bundleId = bundlesManager.registerBundle(contextPath, actionPath, bundleId, bundleContentType, sources); } } \n### Response:", "ground_truth": "Called on end of parsing.", "predict": "End method\n\nThis method ends the application and registers the bundle with the specified context path, action path, bundle ID, content type, and sources.\n\n### Resp Registers the bundle with the specified context path, action path, bundle ID, content type, and sources."}, {"ID": 1214, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function get_new_storage( $id, $object_type = null ) { $id = $id ?: $this->context->get_object_id(); return new Metadata_Storage( $id, $object_type ?: $this->mb_object_type() ); }. \n### Response: Returns new storage.\n\n@param  int         $id\n@param  string|null $object_type\n@return \\WPLibs\\Form\\Storages\\Metadata_Storage.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void add( final String section, final String key, final StringBuilder value, final boolean trim, final Operator operator) { // ignore lines without : or = if (key == null) { return; } String fullKey = key; if (section != null) { if (fullKey.length() != 0) { fullKey = section + '.' + fullKey; } else { fullKey = section; } } String v = value.toString(); if (trim) { if (valueTrimLeft && valueTrimRight) { v = v.trim(); } else if (valueTrimLeft) { v = StringUtil.trimLeft(v); } else { v = StringUtil.trimRight(v); } } if (v.length() == 0 && skipEmptyProps) { return; } extractProfilesAndAdd(fullKey, v, operator); } \n### Response:", "ground_truth": "Adds accumulated value to key and current section.", "predict": "Adds a new property to the metadata.\n\n* This method takes in a section, key, and value for the new property.\n* It checks if the key is null, and if not, it returns.\n* It then extracts the full key from the key.\n* If the section is not null, it adds the section and full key to the key.\n* If the value is trim, it removes any leading or trailing whitespace.\n* If the value is not trim, it uses the provided value's trim method.\n* If the value is empty and skipEmptyProps is true, it returns.\n* It then calls the extractProfilesAndAdd method to add the property to the metadata."}, {"ID": 1215, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public int lastIndexOf(final char ch, int startIndex) { startIndex = (startIndex >= size ? size - 1 : startIndex); if (startIndex < 0) { return -1; } for (int i = startIndex; i >= 0; i--) { if (buffer[i] == ch) { return i; } } return -1; }. \n### Response: Searches the string builder to find the last reference to the specified char.\n\n@param ch  the character to find\n@param startIndex  the index to start at, invalid index rounded to edge\n@return the last index of the character, or -1 if not found.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void extractProfilesAndAdd(final String key, final String value, final Operator operator) { String fullKey = key; int ndx = fullKey.indexOf(PROFILE_LEFT); if (ndx == -1) { justAdd(fullKey, value, null, operator); return; } // extract profiles ArrayList<String> keyProfiles = new ArrayList<>(); while (true) { ndx = fullKey.indexOf(PROFILE_LEFT); if (ndx == -1) { break; } final int len = fullKey.length(); int ndx2 = fullKey.indexOf(PROFILE_RIGHT, ndx + 1); if (ndx2 == -1) { ndx2 = len; } // remember profile final String profile = fullKey.substring(ndx + 1, ndx2); keyProfiles.add(profile); // extract profile from key ndx2++; final String right = (ndx2 == len) ? StringPool.EMPTY : fullKey.substring(ndx2); fullKey = fullKey.substring(0, ndx) + right; } if (fullKey.startsWith(StringPool.DOT)) { // check for special case when only profile is defined in section fullKey = fullKey.substring(1); } // add value to extracted profiles justAdd(fullKey, value, keyProfiles, operator); } \n### Response:", "ground_truth": "Extracts profiles from the key name and adds key-value to them.", "predict": "Extracts and adds values to the specified key, considering profiles.\n\n@param key  the key to extract and add values to\n@param value  the value to add\n@param keyProfiles  an ArrayList of key profiles to add\n@param operator  the operator to use when adding values\n@return the number of profiles extracted and added\n\nThis method extracts and adds values to the specified key, considering profiles. It starts by finding the first occurrence of PROFILE\\_LEFT in the key. If no such occurrence is found, it returns immediately.\n\nThen, it uses a while loop to extract profiles from the key. The loop continues until PROFILE\\_LEFT is found or the loop breaks due to a break statement in the while loop.\n\nAfter extracting all the profiles, the method uses the indexOf method to find the first occurrence of PROFILE\\_RIGHT in the key. If no such occurrence is found, it returns immediately.\n\nIf PROFILE\\_RIGHT is found after the while loop, the method extracts a profile from the key and adds it to the keyProfiles ArrayList.\n\nFinally, if the key starts with DOT, the method extracts the value and adds it to the extracted profiles ArrayList, using the operator specified.\n\nThe method returns the number of profiles extracted and added."}, {"ID": 1216, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def sort_by_list_order(sortlist, reflist, reverse=False, fltr=False, slemap=None): \"\"\" Sort a list according to the order of entries in a reference list. Parameters ---------- sortlist : list List to be sorted reflist : list Reference list defining sorting order reverse : bool, optional (default False) Flag indicating whether to sort in reverse order fltr : bool, optional (default False) Flag indicating whether to filter `sortlist` to remove any entries that are not in `reflist` slemap : function or None, optional (default None) Function mapping a sortlist entry to the form of an entry in `reflist` Returns ------- sortedlist : list Sorted (and possibly filtered) version of sortlist \"\"\" def keyfunc(entry): if slemap is not None: rle = slemap(entry) if rle in reflist: # Ordering index taken from reflist return reflist.index(rle) else: # Ordering index taken from sortlist, offset # by the length of reflist so that entries # that are not in reflist retain their order # in sortlist return sortlist.index(entry) + len(reflist) if fltr: if slemap: sortlist = filter(lambda x: slemap(x) in reflist, sortlist) else: sortlist = filter(lambda x: x in reflist, sortlist) return sorted(sortlist, key=keyfunc, reverse=reverse). \n### Response: Sort a list according to the order of entries in a reference list.\n\n    Parameters\n    ----------\n    sortlist : list\n      List to be sorted\n    reflist : list\n      Reference list defining sorting order\n    reverse : bool, optional (default False)\n      Flag indicating whether to sort in reverse order\n    fltr : bool, optional (default False)\n      Flag indicating whether to filter `sortlist` to remove any entries\n      that are not in `reflist`\n    slemap : function or None, optional (default None)\n       Function mapping a sortlist entry to the form of an entry in\n       `reflist`\n\n    Returns\n    -------\n    sortedlist : list\n      Sorted (and possibly filtered) version of sortlist.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void justAdd(final String key, final String value, final ArrayList<String> keyProfiles, final Operator operator) { if (operator == Operator.COPY) { HashMap<String,Object> target = new HashMap<>(); String[] profiles = null; if (keyProfiles != null) { profiles = keyProfiles.toArray(new String[0]); } String[] sources = StringUtil.splitc(value, ','); for (String source : sources) { source = source.trim(); // try to extract profile for parsing String[] lookupProfiles = profiles; String lookupProfilesString = null; int leftIndex = source.indexOf('<'); if (leftIndex != -1) { int rightIndex = source.indexOf('>'); lookupProfilesString = source.substring(leftIndex + 1, rightIndex); source = source.substring(0, leftIndex).concat(source.substring(rightIndex + 1)); lookupProfiles = StringUtil.splitc(lookupProfilesString, ','); StringUtil.trimAll(lookupProfiles); } String[] wildcards = new String[] {source + \".*\"}; propsData.extract(target, lookupProfiles, wildcards, null); for (Map.Entry<String, Object> entry : target.entrySet()) { String entryKey = entry.getKey(); String suffix = entryKey.substring(source.length()); String newKey = key + suffix; String newValue = \"${\" + entryKey; if (lookupProfilesString != null) { newValue += \"<\" + lookupProfilesString + \">\"; } newValue += \"}\"; if (profiles == null) { propsData.putBaseProperty(newKey, newValue, false); } else { for (final String p : profiles) { propsData.putProfileProperty(newKey, newValue, p, false); } } } } return; } boolean append = operator == Operator.QUICK_APPEND; if (keyProfiles == null) { propsData.putBaseProperty(key, value, append); return; } for (final String p : keyProfiles) { propsData.putProfileProperty(key, value, p, append); } } \n### Response:", "ground_truth": "Core key-value addition.", "predict": "```\nMethod-level comment:\n    Just Adds a new item to the propsData object based on the key, value, and keyProfiles.\n\n    Parameters\n    ----------\n    key : String\n        The key for which the item is being added\n    value : String\n        The value for which the item is being added\n    keyProfiles : ArrayList<String>\n        A list of strings representing the key profiles for the item\n    operator : Operator\n        The operator for which the item is being added (e.g. COPY, QuickAppend)\n\n    Returns\n    -------\n    void\n        A void method returning no value\n```\nNote: The method does not have any return statement, so it will not return any value."}, {"ID": 1217, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func EumSnippet(apiKey string, traceID string, meta map[string]string) string { if len(apiKey) == 0 || len(traceID) == 0 { return \"\" } b, err := ioutil.ReadFile(eumTemplate) if err != nil { return \"\" } var snippet = string(b) var metaBuffer bytes.Buffer snippet = strings.Replace(snippet, \"$apiKey\", apiKey, -1) snippet = strings.Replace(snippet, \"$traceId\", traceID, -1) for key, value := range meta { metaBuffer.WriteString(\" ineum('meta', '\" + key + \"', '\" + value + \"');\\n\") } snippet = strings.Replace(snippet, \"$meta\", metaBuffer.String(), -1) return snippet }. \n### Response: // EumSnippet generates javascript code to initialize JavaScript agent.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String typedesc2ClassName(final String desc) { String className = desc; switch (desc.charAt(0)) { case 'B': case 'C': case 'D': case 'F': case 'I': case 'J': case 'S': case 'Z': case 'V': if (desc.length() != 1) { throw new IllegalArgumentException(INVALID_BASE_TYPE + desc); } break; case 'L': className = className.substring(1, className.length() - 1); break; case '[': // uses less-known feature of class loaders for loading array types // using bytecode-like signatures. className = className.replace('/', '.'); break; default: throw new IllegalArgumentException(INVALID_TYPE_DESCRIPTION + desc); } return className; } \n### Response:", "ground_truth": "Converts bytecode-like description to java class name that can be loaded\nwith a classloader. Uses less-known feature of class loaders for loading\narray classes.\n\n@see #typedescToSignature(String, jodd.mutable.MutableInteger)", "predict": "// Typedesc2ClassName returns the class name based on the type description."}, {"ID": 1218, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (m _Map_ServiceID_Service_Zapper) MarshalLogArray(enc zapcore.ArrayEncoder) (err error) { for k, v := range m { err = multierr.Append(err, enc.AppendObject(_Map_ServiceID_Service_Item_Zapper{Key: k, Value: v})) } return err }. \n### Response: // MarshalLogArray implements zapcore.ArrayMarshaler, enabling\n// fast logging of _Map_ServiceID_Service_Zapper..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String typeref2Name(final String desc) { if (desc.charAt(0) != TYPE_REFERENCE) { throw new IllegalArgumentException(INVALID_TYPE_DESCRIPTION + desc); } String name = desc.substring(1, desc.length() - 1); return name.replace('/', '.'); } \n### Response:", "ground_truth": "Converts type reference to java-name.", "predict": "// Typeref2Name implements a utility method for converting\n// a description of a type reference to its name.\n// This method is useful for cases where the description of a\n// type reference is not sufficient for understanding its name."}, {"ID": 1219, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (p *PostPolicy) SetContentType(contentType string) error { if strings.TrimSpace(contentType) == \"\" || contentType == \"\" { return ErrInvalidArgument(\"No content type specified.\") } policyCond := policyCondition{ matchType: \"eq\", condition: \"$Content-Type\", value: contentType, } if err := p.addNewPolicy(policyCond); err != nil { return err } p.formData[\"Content-Type\"] = contentType return nil }. \n### Response: // SetContentType - Sets content-type of the object for this policy\n// based upload..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String typedescToSignature(final String desc, final MutableInteger from) { int fromIndex = from.get(); from.value++; // default usage for most cases switch (desc.charAt(fromIndex)) { case 'B': return \"byte\"; case 'C': return \"char\"; case 'D': return \"double\"; case 'F': return \"float\"; case 'I': return \"int\"; case 'J': return \"long\"; case 'S': return \"short\"; case 'Z': return \"boolean\"; case 'V': return \"void\"; case 'L': int index = desc.indexOf(';', fromIndex); if (index < 0) { throw new IllegalArgumentException(INVALID_TYPE_DESCRIPTION + desc); } from.set(index + 1); String str = desc.substring(fromIndex + 1, index); return str.replace('/', '.'); case 'T': return desc.substring(from.value); case '[': StringBuilder brackets = new StringBuilder(); int n = fromIndex; while (desc.charAt(n) == '[') { // count opening brackets brackets.append(\"[]\"); n++; } from.value = n; String type = typedescToSignature(desc, from); // the rest of the string denotes a `<field_type>' return type + brackets; default: if (from.value == 0) { throw new IllegalArgumentException(INVALID_TYPE_DESCRIPTION + desc); } // generics! return desc.substring(from.value); } } \n### Response:", "ground_truth": "Returns java-like signature of a bytecode-like description.\nOnly first description is parsed.\n\nThe field signature represents the value of an argument to a function or\nthe value of a variable. It is a series of bytes generated by the\nfollowing grammar:\n\n{@code\n ::= \n      ::= ||\n       ::= B|C|D|F|I|J|S|Z\n     ::= L;\n      ::= [\n\nThe meaning of the base types is as follows:\nB byte signed byte\nC char character\nD double double precision IEEE float\nF float single precision IEEE float\nI int integer\nJ long long integer\nL; ... an object of the given class\nS short signed short\nZ boolean true or false\n[ ... array\n}\n\nThis method converts this string into a Java type declaration such as\nString[].", "predict": "// typedescToSignature - Generates a signature for a given type description.."}, {"ID": 1220, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def _contour(f, vertexlabels=None, contourfunc=None, **kwargs): '''Workhorse function for the above, where ``contourfunc`` is the contour plotting function to use for actual plotting.''' if contourfunc is None: contourfunc = plt.tricontour if vertexlabels is None: vertexlabels = ('1','2','3') x = np.linspace(0, 1, 100) y = np.linspace(0, np.sqrt(3.0)/2.0, 100) points2d = np.transpose([np.tile(x, len(y)), np.repeat(y, len(x))]) points3d = barycentric(points2d) valid = (points3d.sum(axis=1) == 1.0) & ((0.0 <= points3d).all(axis=1)) points2d = points2d[np.where(valid),:][0] points3d = points3d[np.where(valid),:][0] z = f(points3d) contourfunc(points2d[:,0], points2d[:,1], z, **kwargs) _draw_axes(vertexlabels) return plt.gcf(). \n### Response: Workhorse function for the above, where ``contourfunc`` is the contour\n    plotting function to use for actual plotting..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String typeToTyperef(final Class type) { if (!type.isArray()) { if (!type.isPrimitive()) { return 'L' + typeToSignature(type) + ';'; } if (type == int.class) { return \"I\"; } if (type == long.class) { return \"J\"; } if (type == boolean.class) { return \"Z\"; } if (type == double.class) { return \"D\"; } if (type == float.class) { return \"F\"; } if (type == short.class) { return \"S\"; } if (type == void.class) { return \"V\"; } if (type == byte.class) { return \"B\"; } if (type == char.class) { return \"C\"; } } return type.getName(); } \n### Response:", "ground_truth": "Converts type to byteccode type ref.", "predict": "Method-level comment for the `typeToTyperef` method:\n\nThis method returns the refference string for the given Class object. It first checks if the object is an array, primitive, or a primitive array. If none of these conditions are met, it checks if the object is a primitive type (int, long, boolean, double, float, short, or void). If it is, it returns the refference string for that type. If the object is an array, it checks if it is an array of primitive types. If it is, it returns the refference string for the primitive type that is the first element of the array. If it is not an array, it returns the refference string for the type that is the last element of the array. If the object is a primitive array, it returns the refference string for the primitive type that is the first element of the array. If the object is not a primitive array, it returns the refference string for the type that is the last element of the array. Finally, if the object is a primitive type and it is not an array, it returns the refference string for the type that is the first element of the array."}, {"ID": 1221, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private static function getPlainBundleContent(\\stdClass $bundle, bool $includeNameComment = false): string { $bundleContent = ''; if (sizeof($bundle->files) == 0) { return $bundleContent; } $bundleContent = ''; foreach ($bundle->files as $preloaded) { if ($includeNameComment) { $bundleContent .= \"/* {$preloaded->name} */\" . CHAR_CRLF; } $content = File::getContent($preloaded->path); $bundleContent .= $content . CHAR_CRLF . CHAR_CRLF; } return $bundleContent; }. \n### Response: Get the full content of a bundle as is.\n\n@param \\stdClass $bundle\nThe bundle to get the content of.\n\n@param bool $includeNameComment\nWhether to include a comment in the \\\\/*  *\\/ format above each file that is included in the bundle.\n\n@return string The full content of a bundle as is..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public Consumers<T> addAll(final Consumer<T>... consumers) { Collections.addAll(consumerList, consumers); return this; } \n### Response:", "ground_truth": "Registers additional consumers.", "predict": "Add all consumers to the list of consumers.\n\n@param final Consumer<T>... consumers\nThe list of consumers to add.\n\n@return This method adds all the consumers to the list of consumers.."}, {"ID": 1222, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function(index, step, options) { var hideFirst = this.options.hideFirst; index += step; while (($.type(options[index]) === 'undefined') || options[index].disabled || (index === 0 && hideFirst)) { index += step; if (index >= options.length) { index = 0; } else if (index < 0) { index = options.length - 1; } } return index; }. \n### Response: Loop through the options and determine the index to\nSkip over missing options, disabled options, or hidden options.\n\n@private\n@param {Number} index\n@param {Number} step\n@param {jQuery} options\n@returns {Number}.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @SuppressWarnings(\"unchecked\") protected Collection<T> createCollection(final int length) { if (collectionType.isInterface()) { if (collectionType == List.class) { if (length > 0) { return new ArrayList<>(length); } else { return new ArrayList<>(); } } if (collectionType == Set.class) { if (length > 0) { return new HashSet<>(length); } else { return new HashSet<>(); } } throw new TypeConversionException(\"Unknown collection: \" + collectionType.getName()); } if (length > 0) { try { Constructor<Collection<T>> ctor = (Constructor<Collection<T>>) collectionType.getConstructor(int.class); return ctor.newInstance(Integer.valueOf(length)); } catch (Exception ex) { // ignore exception } } try { return collectionType.getDeclaredConstructor().newInstance(); } catch (Exception ex) { throw new TypeConversionException(ex); } } \n### Response:", "ground_truth": "Creates new collection of target component type.\nDefault implementation uses reflection to create\nan collection of target type. Override it for better performances.", "predict": "Implement a method named `createCollection` that takes an `int` length as a parameter and returns a `Collection<T>` object.\n\nThis method checks if the collection type is an interface, and if so, it checks if the type is List or Set. If it is List, it returns a new ArrayList with the length elements. If it is Set, it returns a new HashSet with the length elements. If the length is 0, it throws a TypeConversionException with the message \"Unknown collection: \" + collectionType.getName().\n\nIf the length is 0, it also tries to get a constructor from the collection type's interface, and if that constructor is not found, it returns a new HashSet with the length elements. If the constructor is found, it is called with the length as an argument and returns the result. If the collection type is not an interface, it throws a TypeConversionException with the message \"Unknown collection: \" + collectionType.getName().\n\nThis method is marked with the `@SuppressWarnings(\"unchecked\")` annotation, which suggests that it may contain unchecked code. However, it is important to note that this is a safe way to implement this method, as it only performs checks for the type of the collection and does not perform any actual type conversion."}, {"ID": 1223, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private function filter(string $class): bool { foreach ($this->patterns as $pattern) { if (preg_match($pattern, $class) === 1) { return false; } } return true; }. \n### Response: Return whether the given class name is not matching any pattern.\n\n@param string $class\n@return bool.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected Collection<T> convertToSingleElementCollection(final Object value) { Collection<T> collection = createCollection(0); //noinspection unchecked collection.add((T) value); return collection; } \n### Response:", "ground_truth": "Creates a collection with single element.", "predict": "This method converts a collection of objects to a single-element collection.\n\n@param object $value\n@return Collection<T>."}, {"ID": 1224, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def url_report(self, scan_url, apikey): \"\"\" Send URLS for list of past malicous associations \"\"\" url = self.base_url + \"url/report\" params = {\"apikey\": apikey, 'resource': scan_url} rate_limit_clear = self.rate_limit() if rate_limit_clear: response = requests.post(url, params=params, headers=self.headers) if response.status_code == self.HTTP_OK: json_response = response.json() return json_response elif response.status_code == self.HTTP_RATE_EXCEEDED: time.sleep(20) else: self.logger.error(\"sent: %s, HTTP: %d\", scan_url, response.status_code) time.sleep(self.public_api_sleep_time). \n### Response: Send URLS for list of past malicous associations.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected Collection<T> convertValueToCollection(Object value) { if (value instanceof Iterable) { Iterable iterable = (Iterable) value; Collection<T> collection = createCollection(0); for (Object element : iterable) { collection.add(convertType(element)); } return collection; } if (value instanceof CharSequence) { value = CsvUtil.toStringArray(value.toString()); } Class type = value.getClass(); if (type.isArray()) { // convert arrays Class componentType = type.getComponentType(); if (componentType.isPrimitive()) { return convertPrimitiveArrayToCollection(value, componentType); } else { Object[] array = (Object[]) value; Collection<T> result = createCollection(array.length); for (Object a : array) { result.add(convertType(a)); } return result; } } // everything else: return convertToSingleElementCollection(value); } \n### Response:", "ground_truth": "Converts non-collection value to collection.", "predict": "Converts an object to a collection of its values of a specific type."}, {"ID": 1225, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private static JsonParserIterator<TaskStatusPlus> getTasks( DruidLeaderClient indexingServiceClient, ObjectMapper jsonMapper, BytesAccumulatingResponseHandler responseHandler ) { Request request; try { request = indexingServiceClient.makeRequest( HttpMethod.GET, StringUtils.format(\"/druid/indexer/v1/tasks\"), false ); } catch (IOException e) { throw new RuntimeException(e); } ListenableFuture<InputStream> future = indexingServiceClient.goAsync( request, responseHandler ); final JavaType typeRef = jsonMapper.getTypeFactory().constructType(new TypeReference<TaskStatusPlus>() { }); return new JsonParserIterator<>( typeRef, future, request.getUrl().toString(), null, request.getUrl().getHost(), jsonMapper, responseHandler ); }. \n### Response: Note that overlord must be up to get tasks.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected Collection<T> convertCollectionToCollection(final Collection value) { Collection<T> collection = createCollection(value.size()); for (Object v : value) { collection.add(convertType(v)); } return collection; } \n### Response:", "ground_truth": "Converts collection value to target collection.\nEach element is converted to target component type.", "predict": "This method converts a collection of objects to a collection of T objects. It creates a new collection and adds each object to it, using the `convertType` method to convert each object to the desired type. The method returns the resulting collection."}, {"ID": 1226, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private function removeTrailingZeroesIfNeeded() { $exponent = $this->getExponent(); $coefficient = $this->getCoefficient(); // trim trailing zeroes from the fractional part // for example 1000e-1 => 100.0 if (0 < $exponent && '0' === substr($coefficient, -1)) { $fractionalPart = $this->getFractionalPart(); $trailingZeroesToRemove = 0; for ($i = $exponent - 1; $i >= 0; $i--) { if ('0' !== $fractionalPart[$i]) { break; } $trailingZeroesToRemove++; } if ($trailingZeroesToRemove > 0) { $this->coefficient = substr($coefficient, 0, -$trailingZeroesToRemove); $this->exponent = $exponent - $trailingZeroesToRemove; } } }. \n### Response: Removes trailing zeroes from the fractional part and adjusts the exponent accordingly.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @SuppressWarnings(\"AutoBoxing\") protected Collection<T> convertPrimitiveArrayToCollection(final Object value, final Class primitiveComponentType) { Collection<T> result = null; if (primitiveComponentType == int.class) { int[] array = (int[]) value; result = createCollection(array.length); for (int a : array) { result.add(convertType(a)); } } else if (primitiveComponentType == long.class) { long[] array = (long[]) value; result = createCollection(array.length); for (long a : array) { result.add(convertType(a)); } } else if (primitiveComponentType == float.class) { float[] array = (float[]) value; result = createCollection(array.length); for (float a : array) { result.add(convertType(a)); } } else if (primitiveComponentType == double.class) { double[] array = (double[]) value; result = createCollection(array.length); for (double a : array) { result.add(convertType(a)); } } else if (primitiveComponentType == short.class) { short[] array = (short[]) value; result = createCollection(array.length); for (short a : array) { result.add(convertType(a)); } } else if (primitiveComponentType == byte.class) { byte[] array = (byte[]) value; result = createCollection(array.length); for (byte a : array) { result.add(convertType(a)); } } else if (primitiveComponentType == char.class) { char[] array = (char[]) value; result = createCollection(array.length); for (char a : array) { result.add(convertType(a)); } } else if (primitiveComponentType == boolean.class) { boolean[] array = (boolean[]) value; result = createCollection(array.length); for (boolean a : array) { result.add(convertType(a)); } } return result; } \n### Response:", "ground_truth": "Converts primitive array to target collection.", "predict": "Converts an array of primitive types (int, long, float, double, short, byte, and char) to a collection. If the primitive component type is not one of the supported types, it returns an empty collection."}, {"ID": 1227, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function(title) { var todoId = counter++; todos[todoId] = { id: todoId, title: title, completed: false }; return todoId; }. \n### Response: Adds a todo\n@param {string} title The label of the todo\n@returns {number} The id of the new todo.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: final void addLineNumber(final int lineNumber) { if (this.lineNumber == 0) { this.lineNumber = (short) lineNumber; } else { if (otherLineNumbers == null) { otherLineNumbers = new int[LINE_NUMBERS_CAPACITY_INCREMENT]; } int otherLineNumberIndex = ++otherLineNumbers[0]; if (otherLineNumberIndex >= otherLineNumbers.length) { int[] newLineNumbers = new int[otherLineNumbers.length + LINE_NUMBERS_CAPACITY_INCREMENT]; System.arraycopy(otherLineNumbers, 0, newLineNumbers, 0, otherLineNumbers.length); otherLineNumbers = newLineNumbers; } otherLineNumbers[otherLineNumberIndex] = lineNumber; } } \n### Response:", "ground_truth": "Adds a source line number corresponding to this label.\n\n@param lineNumber a source line number (which should be strictly positive).", "predict": "Adds a line number to the document.\n@param {int} lineNumber The line number of the new line\n@return {void} None."}, {"ID": 1228, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (shardSwap *shardSchemaSwap) reparentFromMaster(masterTablet *topodatapb.Tablet) (err error) { shardSwap.markStepInProgress(shardSwap.reparentUINode) defer shardSwap.markStepDone(shardSwap.reparentUINode, &err) shardSwap.addShardLog(fmt.Sprintf(\"Reparenting away from master %v\", masterTablet.Alias)) if *mysqlctl.DisableActiveReparents { hk := &hook.Hook{ Name: \"reparent_away\", } hookResult, err := shardSwap.parent.tabletClient.ExecuteHook(shardSwap.parent.ctx, masterTablet, hk) if err != nil { return err } if hookResult.ExitStatus != hook.HOOK_SUCCESS { return fmt.Errorf(\"error executing 'reparent_away' hook: %v\", hookResult.String()) } } else { wr := wrangler.New(logutil.NewConsoleLogger(), shardSwap.parent.topoServer, shardSwap.parent.tabletClient) err = wr.PlannedReparentShard( shardSwap.parent.ctx, shardSwap.parent.keyspace, shardSwap.shardName, nil, /* masterElectTabletAlias */ masterTablet.Alias, /* avoidMasterAlias */ *reparentTimeout) if err != nil { return err } } return nil }. \n### Response: // propagateToMaster propagates the schema change to the master. If the master already has\n// the schema change applied then the method does nothing..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: final void accept(final MethodVisitor methodVisitor, final boolean visitLineNumbers) { methodVisitor.visitLabel(this); if (visitLineNumbers && lineNumber != 0) { methodVisitor.visitLineNumber(lineNumber & 0xFFFF, this); if (otherLineNumbers != null) { for (int i = 1; i <= otherLineNumbers[0]; ++i) { methodVisitor.visitLineNumber(otherLineNumbers[i], this); } } } } \n### Response:", "ground_truth": "Makes the given visitor visit this label and its source line numbers, if applicable.\n\n@param methodVisitor a method visitor.\n@param visitLineNumbers whether to visit of the label's source line numbers, if any.", "predict": "This method accepts a method visitor and checks if it should visit certain line numbers. It also checks for other line numbers that may be relevant."}, {"ID": 1229, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected function verifyPassword($login, $password, $spiUser) { // In case of bcrypt let php's password functionality do it's magic if ($spiUser->hashAlgorithm === APIUser::PASSWORD_HASH_BCRYPT || $spiUser->hashAlgorithm === APIUser::PASSWORD_HASH_PHP_DEFAULT) { return password_verify($password, $spiUser->passwordHash); } // Randomize login time to protect against timing attacks usleep(random_int(0, 30000)); $passwordHash = $this->createPasswordHash( $login, $password, $this->settings['siteName'], $spiUser->hashAlgorithm ); return $passwordHash === $spiUser->passwordHash; }. \n### Response: Verifies if the provided login and password are valid.\n\n@param string $login User login\n@param string $password User password\n@param \\eZ\\Publish\\SPI\\Persistence\\User $spiUser Loaded user handler\n\n@return bool return true if the login and password are sucessfully\nvalidate and false, if not..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: final void put( final ByteVector code, final int sourceInsnBytecodeOffset, final boolean wideReference) { if ((flags & FLAG_RESOLVED) == 0) { if (wideReference) { addForwardReference(sourceInsnBytecodeOffset, FORWARD_REFERENCE_TYPE_WIDE, code.length); code.putInt(-1); } else { addForwardReference(sourceInsnBytecodeOffset, FORWARD_REFERENCE_TYPE_SHORT, code.length); code.putShort(-1); } } else { if (wideReference) { code.putInt(bytecodeOffset - sourceInsnBytecodeOffset); } else { code.putShort(bytecodeOffset - sourceInsnBytecodeOffset); } } } \n### Response:", "ground_truth": "Puts a reference to this label in the bytecode of a method. If the bytecode offset of the label\nis known, the relative bytecode offset between the label and the instruction referencing it is\ncomputed and written directly. Otherwise, a null relative offset is written and a new forward\nreference is declared for this label.\n\n@param code the bytecode of the method. This is where the reference is appended.\n@param sourceInsnBytecodeOffset the bytecode offset of the instruction that contains the\nreference to be appended.\n@param wideReference whether the reference must be stored in 4 bytes (instead of 2 bytes).", "predict": "Provides a utility method to insert code into a ByteVector.\n\n@param ByteVector $code ByteVector to insert the code into\n@param int $sourceInsnBytecodeOffset Offset in the source code\n@param boolean $wideReference Whether to add a forward reference to the wide or short type\n\n@return void No return statement is provided\n\nNote: This method is likely used for debugging or testing purposes and should not be used for production code. The code inserted by this method may not be executed or may have unintended consequences."}, {"ID": 1230, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def len(self): \"\"\"Length of the data stream\"\"\" # The len property is needed for requests. # requests checks __len__, then len # Since we cannot implement __len__ because python 32-bit uses 32-bit # sizes, we implement this instead. def stream_len(stream): \"\"\"Stream length\"\"\" cur = stream.tell() try: stream.seek(0, 2) return stream.tell() - cur finally: stream.seek(cur) return sum(stream_len(s) for s in self.streams). \n### Response: Length of the data stream.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private void addForwardReference( final int sourceInsnBytecodeOffset, final int referenceType, final int referenceHandle) { if (forwardReferences == null) { forwardReferences = new int[FORWARD_REFERENCES_CAPACITY_INCREMENT]; } int lastElementIndex = forwardReferences[0]; if (lastElementIndex + 2 >= forwardReferences.length) { int[] newValues = new int[forwardReferences.length + FORWARD_REFERENCES_CAPACITY_INCREMENT]; System.arraycopy(forwardReferences, 0, newValues, 0, forwardReferences.length); forwardReferences = newValues; } forwardReferences[++lastElementIndex] = sourceInsnBytecodeOffset; forwardReferences[++lastElementIndex] = referenceType | referenceHandle; forwardReferences[0] = lastElementIndex; } \n### Response:", "ground_truth": "Adds a forward reference to this label. This method must be called only for a true forward\nreference, i.e. only if this label is not resolved yet. For backward references, the relative\nbytecode offset of the reference can be, and must be, computed and stored directly.\n\n@param sourceInsnBytecodeOffset the bytecode offset of the instruction that contains the\nreference stored at referenceHandle.\n@param referenceType either {@link #FORWARD_REFERENCE_TYPE_SHORT} or {@link\n#FORWARD_REFERENCE_TYPE_WIDE}.\n@param referenceHandle the offset in the bytecode where the forward reference value must be\nstored.", "predict": "AddForwardReference method adds a forward reference to the data stream."}, {"ID": 1231, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def parse_render(render): \"\"\"Parse render URL parameter. >>> parse_render(None) 'png' >>> parse_render('html') 'png' >>> parse_render('png') 'png' >>> parse_render('jpg') 'jpeg' >>> parse_render('gif') 'gif' \"\"\" formats = { 'jpeg': guess_all_extensions('image/jpeg'), 'png': guess_all_extensions('image/png'), 'gif': guess_all_extensions('image/gif'), 'bmp': guess_all_extensions('image/x-ms-bmp'), 'tiff': guess_all_extensions('image/tiff'), 'xbm': guess_all_extensions('image/x-xbitmap'), 'pdf': guess_all_extensions('application/pdf') } if not render: render = 'png' else: render = render.lower() for k, v in formats.items(): if '.%s' % render in v: render = k break else: render = 'png' return render. \n### Response: Parse render URL parameter.\n\n    >>> parse_render(None)\n    'png'\n    >>> parse_render('html')\n    'png'\n    >>> parse_render('png')\n    'png'\n    >>> parse_render('jpg')\n    'jpeg'\n    >>> parse_render('gif')\n    'gif'.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: final boolean resolve(final byte[] code, final int bytecodeOffset) { this.flags |= FLAG_RESOLVED; this.bytecodeOffset = bytecodeOffset; if (forwardReferences == null) { return false; } boolean hasAsmInstructions = false; for (int i = forwardReferences[0]; i > 0; i -= 2) { final int sourceInsnBytecodeOffset = forwardReferences[i - 1]; final int reference = forwardReferences[i]; final int relativeOffset = bytecodeOffset - sourceInsnBytecodeOffset; int handle = reference & FORWARD_REFERENCE_HANDLE_MASK; if ((reference & FORWARD_REFERENCE_TYPE_MASK) == FORWARD_REFERENCE_TYPE_SHORT) { if (relativeOffset < Short.MIN_VALUE || relativeOffset > Short.MAX_VALUE) { // Change the opcode of the jump instruction, in order to be able to find it later in // ClassReader. These ASM specific opcodes are similar to jump instruction opcodes, except // that the 2 bytes offset is unsigned (and can therefore represent values from 0 to // 65535, which is sufficient since the size of a method is limited to 65535 bytes). int opcode = code[sourceInsnBytecodeOffset] & 0xFF; if (opcode < Opcodes.IFNULL) { // Change IFEQ ... JSR to ASM_IFEQ ... ASM_JSR. code[sourceInsnBytecodeOffset] = (byte) (opcode + Constants.ASM_OPCODE_DELTA); } else { // Change IFNULL and IFNONNULL to ASM_IFNULL and ASM_IFNONNULL. code[sourceInsnBytecodeOffset] = (byte) (opcode + Constants.ASM_IFNULL_OPCODE_DELTA); } hasAsmInstructions = true; } code[handle++] = (byte) (relativeOffset >>> 8); code[handle] = (byte) relativeOffset; } else { code[handle++] = (byte) (relativeOffset >>> 24); code[handle++] = (byte) (relativeOffset >>> 16); code[handle++] = (byte) (relativeOffset >>> 8); code[handle] = (byte) relativeOffset; } } return hasAsmInstructions; } \n### Response:", "ground_truth": "Sets the bytecode offset of this label to the given value and resolves the forward references\nto this label, if any. This method must be called when this label is added to the bytecode of\nthe method, i.e. when its bytecode offset becomes known. This method fills in the blanks that\nwhere left in the bytecode by each forward reference previously added to this label.\n\n@param code the bytecode of the method.\n@param bytecodeOffset the bytecode offset of this label.\n@return {@literal true} if a blank that was left for this label was too small to store the\noffset. In such a case the corresponding jump instruction is replaced with an equivalent\nASM specific instruction using an unsigned two bytes offset. These ASM specific\ninstructions are later replaced with standard bytecode instructions with wider offsets (4\nbytes instead of 2), in ClassReader.", "predict": "Resolve method to handle forward references in the code.\n\nThis method resolve the forward references in the code by iterating through the forwardReferences array and checking the type of the reference and the offset of the reference in the bytecode. If the reference is of type FORWARD_REFERENCE_TYPE_SHORT and the offset is less than or equal to Short.MIN_VALUE or greater than or equal to Short.MAX_VALUE, it will change the opcode of the jump instruction to ASM_IFEQ... ASM_JSR, and set the relative offset to the absolute offset of the reference. If the reference is of type FORWARD_REFERENCE_TYPE_SHORT and the offset is less than or equal to Short.MIN_VALUE, it will change the opcode of the jump instruction to ASM_IFNULL and set the relative offset to the absolute offset of the reference. If the reference is of type FORWARD_REFERENCE_TYPE_SHORT and the offset is greater than or equal to Short.MAX_VALUE, it will change the opcode of the jump instruction to ASM_IFNONNULL and set the relative offset to the absolute offset of the reference.\n\nIt also check if there are any ASM specific instructions present in the code and change the opcode of the jump instruction accordingly.\n\nThis method is useful when the code is generated by ASM and the opcode of the jump instruction is not known at compile time."}, {"ID": 1232, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def write_probmodelxml(model, path, encoding='utf-8', prettyprint=True): \"\"\" Write model in ProbModelXML format to path. Parameters ---------- model : A NetworkX graph Bayesian network or Markov network path : file or string File or filename to write. Filenames ending in .gz or .bz2 will be compressed. encoding : string (optional) Encoding for text data. prettyprint : bool (optional) If True use line breaks and indenting in output XML. Examples -------- >>> G = nx.path_graph(4) >>> pgmpy.readwrite.write_probmodelxml(G, \"test.probmodelxml\") \"\"\" writer = ProbModelXMLWriter(model, path, encoding=encoding, prettyprint=prettyprint) writer.dump(path). \n### Response: Write model in ProbModelXML format to path.\n\n    Parameters\n    ----------\n    model : A NetworkX graph\n            Bayesian network or Markov network\n    path : file or string\n            File or filename to write.\n            Filenames ending in .gz or .bz2 will be compressed.\n    encoding : string (optional)\n            Encoding for text data.\n    prettyprint : bool (optional)\n            If True use line breaks and indenting in output XML.\n\n    Examples\n    --------\n    >>> G = nx.path_graph(4)\n    >>> pgmpy.readwrite.write_probmodelxml(G, \"test.probmodelxml\").\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: final void markSubroutine(final short subroutineId) { // Data flow algorithm: put this basic block in a list of blocks to process (which are blocks // belonging to subroutine subroutineId) and, while there are blocks to process, remove one from // the list, mark it as belonging to the subroutine, and add its successor basic blocks in the // control flow graph to the list of blocks to process (if not already done). Label listOfBlocksToProcess = this; listOfBlocksToProcess.nextListElement = EMPTY_LIST; while (listOfBlocksToProcess != EMPTY_LIST) { // Remove a basic block from the list of blocks to process. Label basicBlock = listOfBlocksToProcess; listOfBlocksToProcess = listOfBlocksToProcess.nextListElement; basicBlock.nextListElement = null; // If it is not already marked as belonging to a subroutine, mark it as belonging to // subroutineId and add its successors to the list of blocks to process (unless already done). if (basicBlock.subroutineId == 0) { basicBlock.subroutineId = subroutineId; listOfBlocksToProcess = basicBlock.pushSuccessors(listOfBlocksToProcess); } } } \n### Response:", "ground_truth": "Finds the basic blocks that belong to the subroutine starting with the basic block\ncorresponding to this label, and marks these blocks as belonging to this subroutine. This\nmethod follows the control flow graph to find all the blocks that are reachable from the\ncurrent basic block WITHOUT following any jsr target.\n\nNote: a precondition and postcondition of this method is that all labels must have a null\n{@link #nextListElement}.\n\n@param subroutineId the id of the subroutine starting with the basic block corresponding to\nthis label.", "predict": "Mark subroutine.\n\nThis method is a data flow algorithm that processes a basic block by putting it in a list of blocks to process and removing one from the list, marking it as belonging to a subroutine, and adding its successor basic blocks in the control flow graph to the list of blocks to process (unless already done). The algorithm continues until all blocks to process have been processed. The subroutineId is a short integer that identifies the subroutine being processed.\n\nThe method uses a label variable to keep track of the current basic block and a list variable to store the list of blocks to process. It uses the pushSuccessors method of the basic block to add its successors to the list of blocks to process.\n\nThe method is useful for implementing a subroutine in a data flow algorithm. It can be used to implement a simple subroutine that processes a list of blocks in a specific order."}, {"ID": 1233, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def read_interactions(path, comments=\"#\", directed=False, delimiter=None, nodetype=None, timestamptype=None, encoding='utf-8', keys=False): \"\"\"Read a DyNetx graph from interaction list format. Parameters ---------- path : basestring The desired output filename delimiter : character Column delimiter \"\"\" ids = None lines = (line.decode(encoding) for line in path) if keys: ids = read_ids(path.name, delimiter=delimiter, timestamptype=timestamptype) return parse_interactions(lines, comments=comments, directed=directed, delimiter=delimiter, nodetype=nodetype, timestamptype=timestamptype, keys=ids). \n### Response: Read a DyNetx graph from interaction list format.\n\n\n        Parameters\n        ----------\n\n        path : basestring\n            The desired output filename\n\n        delimiter : character\n            Column delimiter.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: final void addSubroutineRetSuccessors(final Label subroutineCaller) { // Data flow algorithm: put this basic block in a list blocks to process (which are blocks // belonging to a subroutine starting with this label) and, while there are blocks to process, // remove one from the list, put it in a list of blocks that have been processed, add a return // edge to the successor of subroutineCaller if applicable, and add its successor basic blocks // in the control flow graph to the list of blocks to process (if not already done). Label listOfProcessedBlocks = EMPTY_LIST; Label listOfBlocksToProcess = this; listOfBlocksToProcess.nextListElement = EMPTY_LIST; while (listOfBlocksToProcess != EMPTY_LIST) { // Move a basic block from the list of blocks to process to the list of processed blocks. Label basicBlock = listOfBlocksToProcess; listOfBlocksToProcess = basicBlock.nextListElement; basicBlock.nextListElement = listOfProcessedBlocks; listOfProcessedBlocks = basicBlock; // Add an edge from this block to the successor of the caller basic block, if this block is // the end of a subroutine and if this block and subroutineCaller do not belong to the same // subroutine. if ((basicBlock.flags & FLAG_SUBROUTINE_END) != 0 && basicBlock.subroutineId != subroutineCaller.subroutineId) { basicBlock.outgoingEdges = new Edge( basicBlock.outputStackSize, // By construction, the first outgoing edge of a basic block that ends with a jsr // instruction leads to the jsr continuation block, i.e. where execution continues // when ret is called (see {@link #FLAG_SUBROUTINE_CALLER}). subroutineCaller.outgoingEdges.successor, basicBlock.outgoingEdges); } // Add its successors to the list of blocks to process. Note that {@link #pushSuccessors} does // not push basic blocks which are already in a list. Here this means either in the list of // blocks to process, or in the list of already processed blocks. This second list is // important to make sure we don't reprocess an already processed block. listOfBlocksToProcess = basicBlock.pushSuccessors(listOfBlocksToProcess); } // Reset the {@link #nextListElement} of all the basic blocks that have been processed to null, // so that this method can be called again with a different subroutine or subroutine caller. while (listOfProcessedBlocks != EMPTY_LIST) { Label newListOfProcessedBlocks = listOfProcessedBlocks.nextListElement; listOfProcessedBlocks.nextListElement = null; listOfProcessedBlocks = newListOfProcessedBlocks; } } \n### Response:", "ground_truth": "Finds the basic blocks that end a subroutine starting with the basic block corresponding to\nthis label and, for each one of them, adds an outgoing edge to the basic block following the\ngiven subroutine call. In other words, completes the control flow graph by adding the edges\ncorresponding to the return from this subroutine, when called from the given caller basic\nblock.\n\nNote: a precondition and postcondition of this method is that all labels must have a null\n{@link #nextListElement}.\n\n@param subroutineCaller a basic block that ends with a jsr to the basic block corresponding to\nthis label. This label is supposed to correspond to the start of a subroutine.", "predict": "Adds a return edge to the successor of the caller basic block, if the block is the end of a subroutine and the block and subroutine caller do not belong to the same subroutine.\n\nThis method processes a basic block by moving it to the list of blocks to process, removing it from the list, adding a return edge to the successor of the caller if applicable, and adding its successors to the list of blocks to process if they exist. It resets the next list element of all processed blocks to null to allow the method to be called again with a different subroutine or subroutine caller.\n\nThis method is used to process a control flow graph of a DyNetx graph by adding edges to the graph based on the subroutine call. It is a data flow algorithm that helps in finding the correct path of execution for a given program."}, {"ID": 1234, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def customerMeetsRequirement(self, customer, danceRole=None, registration=None): ''' This method checks whether a given customer meets a given set of requirements. ''' cust_reqs = self.customerrequirement_set.filter(customer=customer,met=True) if customer: cust_priors = customer.eventregistration_set.filter(event__series__isnull=False) else: cust_priors = EventRegistration.objects.none() # If there's an explicit object stating that this customer meets the requirement, then we're done. if self.roleEnforced and danceRole and cust_reqs.filter(role=danceRole).exists(): return True elif not self.roleEnforced and cust_reqs.exists(): return True elif self.roleEnforced and not danceRole: return False # Go through each item for this requirement and see if the customer meets that item for item in self.requirementitem_set.all(): filter_dict = {} if item.requiredLevel: filter_dict['event__series__classDescription__danceTypeLevel'] = item.requiredLevel if item.requiredClass: filter_dict['event__series__classDescription'] = item.requiredClass if self.roleEnforced: filter_dict['role'] = danceRole current_matches = 0 overlap_matches = 0 nonconcurrent_filter = {'event__endTime__lte': timezone.now()} if registration: if isinstance(registration,Registration): current_matches = registration.eventregistration_set.filter(**filter_dict).count() elif isinstance(registration,TemporaryRegistration): current_matches = registration.temporaryeventregistration_set.filter(**filter_dict).count() nonconcurrent_filter = {'event__endTime__lte': registration.firstSeriesStartTime} overlap_matches = cust_priors.filter(**filter_dict).exclude(**nonconcurrent_filter).filter( event__startTime__lte=registration.lastSeriesEndTime, ).count() priors_matches = cust_priors.filter(**filter_dict).filter(**nonconcurrent_filter).count() # The number of matches depends on the concurrency rule for this item if item.concurrentRule == item.ConcurrencyRule.prohibited: matches = priors_matches elif item.concurrentRule == item.ConcurrencyRule.allowOneOverlapClass: matches = priors_matches + \\ cust_priors.filter(**filter_dict).exclude(**nonconcurrent_filter).filter( event__startTime__lte=registration.getTimeOfClassesRemaining(1) ).count() elif item.concurrentRule == item.ConcurrencyRule.allowTwoOverlapClasses: matches = priors_matches + \\ cust_priors.filter(**filter_dict).exclude(**nonconcurrent_filter).filter( event__startTime__lte=registration.getTimeOfClassesRemaining(2) ).count() elif item.concurrentRule == item.ConcurrencyRule.allowed: matches = priors_matches + overlap_matches + \\ (current_matches if isinstance(registration,TemporaryRegistration) else 0) elif item.concurrentRule == item.ConcurrencyRule.required: matches = overlap_matches + current_matches if matches >= item.quantity: # If this is an 'or' or a 'not' requirement, then we are done if self.booleanRule == self.BooleanChoice.booleanOr: return True if self.booleanRule == self.BooleanChoice.booleanNot: return False else: # If this is an 'and' requirement and we didn't meet, then we are done if self.booleanRule == self.BooleanChoice.booleanAnd: return False # If we got this far, then either all 'and' requirements were met, or all 'or' and 'not' requirements were not met if self.booleanRule == self.BooleanChoice.booleanOr or self.requirementitem_set.count() == 0: return False return True. \n### Response: This method checks whether a given customer meets a given set of requirements..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected int[] compareDigits(final String str1, int ndx1, final String str2, int ndx2) { // iterate all digits in the first string int zeroCount1 = 0; while (charAt(str1, ndx1) == '0') { zeroCount1++; ndx1++; } int len1 = 0; while (true) { final char char1 = charAt(str1, ndx1); final boolean isDigitChar1 = CharUtil.isDigit(char1); if (!isDigitChar1) { break; } len1++; ndx1++; } // iterate all digits in the second string and compare with the first int zeroCount2 = 0; while (charAt(str2, ndx2) == '0') { zeroCount2++; ndx2++; } int len2 = 0; int ndx1_new = ndx1 - len1; int equalNumbers = 0; while (true) { final char char2 = charAt(str2, ndx2); final boolean isDigitChar2 = CharUtil.isDigit(char2); if (!isDigitChar2) { break; } if (equalNumbers == 0 && (ndx1_new < ndx1)) { equalNumbers = charAt(str1, ndx1_new++) - char2; } len2++; ndx2++; } // compare if (len1 != len2) { // numbers are not equals size return new int[] {len1 - len2}; } if (equalNumbers != 0) { return new int[] {equalNumbers}; } // numbers are equal, but number of zeros is different return new int[] {0, zeroCount1 - zeroCount2, ndx1, ndx2}; } \n### Response:", "ground_truth": "Compare digits at certain position in two strings.\nThe longest run of digits wins. That aside, the greatest\nvalue wins.\n@return if numbers are different, only 1 element is returned.", "predict": "This method compares two strings and returns an array of integers representing the number of digits in each string that are equal."}, {"ID": 1235, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static Multipart multipart(String url, int connectTimeout, int readTimeout) { return new Multipart(url, connectTimeout, connectTimeout); }. \n### Response: Create multipart request\n\n@param url URL to send to\n@param connectTimeout connect timeout\n@param readTimeout read timeout\n@return new Multipart request.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private char fixAccent(final char c) { for (int i = 0; i < ACCENT_CHARS.length; i+=2) { final char accentChar = ACCENT_CHARS[i]; if (accentChar == c) { return ACCENT_CHARS[i + 1]; } } return c; } \n### Response:", "ground_truth": "Fixes accent char.", "predict": "Implement a method to fix accents in a character.\n\n@param c Character to be fixed\n@return Fixed accented character\n\nNote: This method is only applicable for characters with accents. It iterates through the characters in the input string and checks if the current character is an accented character. If it is, it returns the accented character with the next accent. If the current character is not an accented character, it returns the original character."}, {"ID": 1236, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def queue_status(queue_names, &block) return false unless connected? @queues.each do |q| if queue_names.include?(q.name) begin q.status { |messages, consumers| block.call(q.name, messages, consumers) if block } rescue StandardError => e logger.exception(\"Failed checking status of queue #{q.name} on broker #{@alias}\", e, :trace) @exception_stats.track(\"queue_status\", e) block.call(q.name, nil, nil) if block end end end true end. \n### Response: Check status of specified queues\n Silently ignore unknown queues\n If a queue whose status is being checked does not exist in the broker,\n this broker connection will fail and become unusable\n\n === Parameters\n queue_names(Array):: Names of queues previously subscribed to\n\n === Block\n Optional block to be called each time that status for a queue is retrieved with\n parameters queue name, message count, and consumer count; the counts are nil\n if there was a failure while trying to retrieve them; the block is not called\n for queues to which this client is not currently subscribed\n\n === Return\n (Boolean):: true if connected, otherwise false, in which case block never gets called.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public ByteVector putByte(final int byteValue) { int currentLength = length; if (currentLength + 1 > data.length) { enlarge(1); } data[currentLength++] = (byte) byteValue; length = currentLength; return this; } \n### Response:", "ground_truth": "Puts a byte into this byte vector. The byte vector is automatically enlarged if necessary.\n\n@param byteValue a byte.\n@return this byte vector.", "predict": "Implements the `putByte` method of the `ByteVector` class, which adds a single byte to the end of the vector.\n\n === Parameters\n byteValue(Integer):: The byte to be added to the end of the vector\n\n === Return\n ByteVector:: The updated vector with the byte added\n\n === Description\nThis method adds a single byte to the end of the `ByteVector` object. It first checks if the length of the vector has increased by one beyond the current data length, and if so, it enlarged the vector by 1. Then, it increments the current length and adds the byte to the end of the vector. Finally, it returns the updated vector.\n\nNote that the `putByte` method does not modify the original `ByteVector` object, but rather returns a new `ByteVector` object with the added byte. This means that the method can be used to add a single byte to the end of a vector without modifying the original object."}, {"ID": 1237, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (as *availabilitySet) GetPrimaryInterface(nodeName string) (network.Interface, error) { return as.getPrimaryInterfaceWithVMSet(nodeName, \"\") }. \n### Response: // GetPrimaryInterface gets machine primary network interface by node name..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: final ByteVector put11(final int byteValue1, final int byteValue2) { int currentLength = length; if (currentLength + 2 > data.length) { enlarge(2); } byte[] currentData = data; currentData[currentLength++] = (byte) byteValue1; currentData[currentLength++] = (byte) byteValue2; length = currentLength; return this; } \n### Response:", "ground_truth": "Puts two bytes into this byte vector. The byte vector is automatically enlarged if necessary.\n\n@param byteValue1 a byte.\n@param byteValue2 another byte.\n@return this byte vector.", "predict": "// Puts two bytes in a ByteVector."}, {"ID": 1238, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def update_attributes!(attributes) @api.patch(url, attributes.to_json) attributes.each do |method_name, value| invoke_name = \"#{override_raw_attributes[method_name] || method_name}=\" if respond_to?(invoke_name) send(invoke_name, value) else AnsibleTowerClient.logger.warn(\"Unknown attribute/method: #{invoke_name}. Skip updating it ...\") end end true end. \n### Response: Persist changes passed in as a Hash and return a\n representation of that object to the caller.\n\n Example:\n    project = connection.api.projects.find 2\n    project.update_attributes!(:name => 'test')\n\n    # The values passed to update_attributes! are available in calling object\n    project.name            # => 'test'\n Errors:\n    Any error raised by the API will be returned and logged.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public ByteVector putShort(final int shortValue) { int currentLength = length; if (currentLength + 2 > data.length) { enlarge(2); } byte[] currentData = data; currentData[currentLength++] = (byte) (shortValue >>> 8); currentData[currentLength++] = (byte) shortValue; length = currentLength; return this; } \n### Response:", "ground_truth": "Puts a short into this byte vector. The byte vector is automatically enlarged if necessary.\n\n@param shortValue a short.\n@return this byte vector.", "predict": "This method modifies the contents of a `ByteVector` object.\n\nExample:\n```\nByteVector v = new ByteVector(2);\nv.putShort(123);\nv.putShort(456);\n```\nThe method returns the modified `ByteVector` object.\n\nErrors:\nThe method does not raise any errors, but it may return an `IOException` if an error occurs during the modification.\n\n"}, {"ID": 1239, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static function processSingleColumn($column_name, $column_options, $data, $options = []) { $result = []; // process domain if (!empty($options['process_domains'])) { $temp = [$column_name => $column_options]; $temp = \\Object\\Data\\Common::processDomainsAndTypes($temp); $column_options = $temp[$column_name]; } // if we ignoring not set fields if (!empty($options['ignore_not_set_fields']) && !array_key_exists($column_name, $data)) { return $result; } // processing $value = $data[$column_name] ?? null; if (is_array($value)) { $result2 = []; foreach ($value as $k => $v) { $temp = self::processSingleColumnType($column_name, $column_options, $v, ['ignore_defaults' => $options['ignore_defaults'] ?? false]); if (array_key_exists($column_name, $temp) && $temp[$column_name] !== null) { $result2[] = $temp[$column_name]; } } $result[$column_name] = $result2; } else { $result = self::processSingleColumnType($column_name, $column_options, $value, ['ignore_defaults' => $options['ignore_defaults'] ?? false]); } return $result; }. \n### Response: Process single column\n\n@param string $column_name\n@param array $column_options\n@param array $data\n@param array $options\n@return array.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: final ByteVector put12(final int byteValue, final int shortValue) { int currentLength = length; if (currentLength + 3 > data.length) { enlarge(3); } byte[] currentData = data; currentData[currentLength++] = (byte) byteValue; currentData[currentLength++] = (byte) (shortValue >>> 8); currentData[currentLength++] = (byte) shortValue; length = currentLength; return this; } \n### Response:", "ground_truth": "Puts a byte and a short into this byte vector. The byte vector is automatically enlarged if\nnecessary.\n\n@param byteValue a byte.\n@param shortValue a short.\n@return this byte vector.", "predict": "Put 12\n\n@param int $byteValue\n@param int $shortValue\n@return ByteVector."}, {"ID": 1240, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function ( fn, state ) { state = state || \"all\"; return observer.add( global, \"message\", fn, \"message\", global, state ); }. \n### Response: Sets a handler for recieving a message\n\n@method recv\n@param  {Function} fn Callback function\n@return {Object}      abaaso.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: final ByteVector put112(final int byteValue1, final int byteValue2, final int shortValue) { int currentLength = length; if (currentLength + 4 > data.length) { enlarge(4); } byte[] currentData = data; currentData[currentLength++] = (byte) byteValue1; currentData[currentLength++] = (byte) byteValue2; currentData[currentLength++] = (byte) (shortValue >>> 8); currentData[currentLength++] = (byte) shortValue; length = currentLength; return this; } \n### Response:", "ground_truth": "Puts two bytes and a short into this byte vector. The byte vector is automatically enlarged if\nnecessary.\n\n@param byteValue1 a byte.\n@param byteValue2 another byte.\n@param shortValue a short.\n@return this byte vector.", "predict": "This method creates a ByteVector object and adds three integers and a short value to it. It also sets the length of the ByteVector to 5. The method returns the ByteVector object."}, {"ID": 1241, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def on_request(options = {}, method = :push, &block) raise BlockNotGiven unless block_given? _on_request.send(method, [block, options]) end. \n### Response: A callback that runs on each request, just after the proxy is initialized\n\n Parameters:\n  A block to contain logic for the callback\n   Block Parameters: |proxy|\n     proxy - The warden proxy object for the request\n\n Example:\n   user = \"A User\"\n   Warden::Manager.on_request do |proxy|\n     proxy.set_user = user\n   end\n\n :api: public.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public ByteVector putInt(final int intValue) { int currentLength = length; if (currentLength + 4 > data.length) { enlarge(4); } byte[] currentData = data; currentData[currentLength++] = (byte) (intValue >>> 24); currentData[currentLength++] = (byte) (intValue >>> 16); currentData[currentLength++] = (byte) (intValue >>> 8); currentData[currentLength++] = (byte) intValue; length = currentLength; return this; } \n### Response:", "ground_truth": "Puts an int into this byte vector. The byte vector is automatically enlarged if necessary.\n\n@param intValue an int.\n@return this byte vector.", "predict": "This method is part of the `ByteVector` class in the Java Standard Library. It is used to add an integer value to the end of a `ByteVector` object.\n\nThe method takes a single argument, `intValue`, which is the integer value to be added. It first sets the current length of the `ByteVector` to 4, and then checks if the current length + 4 is greater than the length of the `data` array. If it is, it enlarged the array by 4.\n\nThe method then allocates new space for the integer value by setting the current data to the value of the `intValue` and then adding it to the end of the `data` array. Finally, the method returns the `ByteVector` object.\n\nThis method is useful for adding integers to the end of a `ByteVector` object, which can be used to store a variety of data types, including characters and arrays.\n\n:api: public."}, {"ID": 1242, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function(str){ var retstr = str; if( ! us.isUndefined(str) && str.length > 2 ){ var end = str.length -1; if( str.charAt(0) == '\"' && str.charAt(end) == '\"' ){ retstr = str.substr(1, end -1); } } return retstr; }. \n### Response: Remove the quotes from a string.\n\n@param {string} str - the string to dequote\n@returns {string} the dequoted string (or the original string).\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: final ByteVector put122(final int byteValue, final int shortValue1, final int shortValue2) { int currentLength = length; if (currentLength + 5 > data.length) { enlarge(5); } byte[] currentData = data; currentData[currentLength++] = (byte) byteValue; currentData[currentLength++] = (byte) (shortValue1 >>> 8); currentData[currentLength++] = (byte) shortValue1; currentData[currentLength++] = (byte) (shortValue2 >>> 8); currentData[currentLength++] = (byte) shortValue2; length = currentLength; return this; } \n### Response:", "ground_truth": "Puts one byte and two shorts into this byte vector. The byte vector is automatically enlarged\nif necessary.\n\n@param byteValue a byte.\n@param shortValue1 a short.\n@param shortValue2 another short.\n@return this byte vector.", "predict": "This method creates a ByteVector from three integers and adds them together. It also modifies the original ByteVector by adding three new bytes at the specified index.\n\n@param {ByteVector} this - the ByteVector to add the data to\n@return {ByteVector} the new ByteVector with the added data.\n\nNote: This method modifies the original ByteVector, so it should be used with caution. It is recommended to create a new ByteVector instead of modifying the original one."}, {"ID": 1243, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def get_grp2code2nt(self): \"\"\"Return ordered dict for group to namedtuple\"\"\" grp2code2nt = cx.OrderedDict([(g, []) for g in self.grps]) for code, ntd in self.code2nt.items(): grp2code2nt[ntd.group].append((code, ntd)) for grp, nts in grp2code2nt.items(): grp2code2nt[grp] = cx.OrderedDict(nts) return grp2code2nt. \n### Response: Return ordered dict for group to namedtuple.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public ByteVector putLong(final long longValue) { int currentLength = length; if (currentLength + 8 > data.length) { enlarge(8); } byte[] currentData = data; int intValue = (int) (longValue >>> 32); currentData[currentLength++] = (byte) (intValue >>> 24); currentData[currentLength++] = (byte) (intValue >>> 16); currentData[currentLength++] = (byte) (intValue >>> 8); currentData[currentLength++] = (byte) intValue; intValue = (int) longValue; currentData[currentLength++] = (byte) (intValue >>> 24); currentData[currentLength++] = (byte) (intValue >>> 16); currentData[currentLength++] = (byte) (intValue >>> 8); currentData[currentLength++] = (byte) intValue; length = currentLength; return this; } \n### Response:", "ground_truth": "Puts a long into this byte vector. The byte vector is automatically enlarged if necessary.\n\n@param longValue a long.\n@return this byte vector.", "predict": "Method: putLong(final long longValue)\n\nPurpose: Adds the given long value to the current byte vector.\n\nComment: This method adds the given long value to the current byte vector. It first checks if the current length + 8 is greater than the length of the byte vector. If so, it enlarged the byte vector by 8 bytes. The currentData array is then initialized with the current length bytes of the byte vector, and the long value is calculated and added to each byte in the currentData array. Finally, the currentLength bytes of the currentData array are returned.\n\nNote: This method modifies the original byte vector, so it should be called with the same length as the original byte vector."}, {"ID": 1244, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function sortReflections(modules) { modules.sort(function (a, b) { if (a.flags.isExternal && !b.flags.isExternal) return 1; if (!a.flags.isExternal && b.flags.isExternal) return -1; return a.getFullName() < b.getFullName() ? -1 : 1; }); }. \n### Response: Sort the given list of modules by name, groups external modules at the bottom.\n\n@param modules  The list of modules that should be sorted..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public ByteVector putByteArray( final byte[] byteArrayValue, final int byteOffset, final int byteLength) { if (length + byteLength > data.length) { enlarge(byteLength); } if (byteArrayValue != null) { System.arraycopy(byteArrayValue, byteOffset, data, length, byteLength); } length += byteLength; return this; } \n### Response:", "ground_truth": "Puts an array of bytes into this byte vector. The byte vector is automatically enlarged if\nnecessary.\n\n@param byteArrayValue an array of bytes. May be {@literal null} to put {@code byteLength} null\nbytes into this byte vector.\n@param byteOffset index of the first byte of byteArrayValue that must be copied.\n@param byteLength number of bytes of byteArrayValue that must be copied.\n@return this byte vector.", "predict": "This method adds a new byte array to the given ByteVector. It checks if the length of the new byte array is greater than the length of the data, and if so, it enlarged the data by a specified amount. If the byteArrayValue is not null, it copies the contents of the byteArrayValue into the new byte array, and then adds the new byte array to the end of the data. Finally, the method returns the ByteVector.\n\n@param data  The existing byte vector to which the new byte array will be added.\n@param byteOffset  The starting index of the new byte array.\n@param byteLength  The length of the new byte array.\n@return The new ByteVector that contains the contents of the given byte array.."}, {"ID": 1245, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def account_balance_before(self): \"\"\"Get the balance of the account associated with this leg before the transaction\"\"\" # TODO: Consider moving to annotation, particularly once we can count on Django 1.11's subquery support transaction_date = self.transaction.date return self.account.balance( leg_query=( models.Q(transaction__date__lt=transaction_date) | ( models.Q(transaction__date=transaction_date) & models.Q(transaction_id__lt=self.transaction_id) ) ) ). \n### Response: Get the balance of the account associated with this leg before the transaction.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private void enlarge(final int size) { int doubleCapacity = 2 * data.length; int minimalCapacity = length + size; byte[] newData = new byte[doubleCapacity > minimalCapacity ? doubleCapacity : minimalCapacity]; System.arraycopy(data, 0, newData, 0, length); data = newData; } \n### Response:", "ground_truth": "Enlarges this byte vector so that it can receive 'size' more bytes.\n\n@param size number of additional bytes that this byte vector should be able to receive.", "predict": "Method-level comment for enlarged() method in Java:\n\nThis method enlarged the data array by 2x as much as the original array, and then copies the entire contents of the original array to the new array. This is useful when working with large data structures, as it allows for efficient memory usage. However, it is important to note that this method is not thread-safe, and should be used with caution."}, {"ID": 1246, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (s *ReferenceDataSourceUpdate) SetS3ReferenceDataSourceUpdate(v *S3ReferenceDataSourceUpdate) *ReferenceDataSourceUpdate { s.S3ReferenceDataSourceUpdate = v return s }. \n### Response: // SetS3ReferenceDataSourceUpdate sets the S3ReferenceDataSourceUpdate field's value..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected T authenticateUserViaHttpSession(final ActionRequest actionRequest) { final HttpServletRequest servletRequest = actionRequest.getHttpServletRequest(); final UserSession<T> userSession = UserSession.get(servletRequest); if (userSession == null) { return null; } final T authToken = userSession.getAuthToken(); if (authToken == null) { return null; } // granted final T newAuthToken = userAuth().rotateToken(authToken); if (newAuthToken != authToken) { final UserSession<T> newUserSesion = new UserSession<>(newAuthToken, userAuth().tokenValue(newAuthToken)); newUserSesion.start(servletRequest, actionRequest.getHttpServletResponse()); } return newAuthToken; } \n### Response:", "ground_truth": "Tries to authenticate user via HTTP session. Returns the token if user is authenticated.\nReturned token may be rotated.", "predict": "// Authenticates a user via HttpSession and returns the authenticated token.."}, {"ID": 1247, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (s *Bitset) Except(index ...uint) *Bitset { s.SetAll() for _, i := range index { s.Unset(i) } return s }. \n### Response: // Except set all bits except given index to 1, the except bits set to 0.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected T authenticateUserViaToken(final ActionRequest actionRequest) { final HttpServletRequest servletRequest = actionRequest.getHttpServletRequest(); // then try the auth token final String token = ServletUtil.resolveAuthBearerToken(servletRequest); if (token == null) { return null; } final T authToken = userAuth().validateToken(token); if (authToken == null) { return null; } // granted final T newAuthToken = userAuth().rotateToken(authToken); actionRequest.getHttpServletResponse().setHeader(\"Authentication\", \"Bearer: \" + userAuth().tokenValue(newAuthToken)); return newAuthToken; } \n### Response:", "ground_truth": "Tries to authenticate user via token. Returns the token if user is authenticated.\nReturned token may be rotated.", "predict": "// Authenticate the user via the auth token. \n// Try to resolve the auth token from the request. \n// If the token is not found, return null. \n// Validate the token using the userAuth() function. \n// If the token is invalid, return null. \n// Rotate the token using the userAuth() function. \n// Set the authentication header with the token value. \n// Return the new auth token."}, {"ID": 1248, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public BoundingBox getBoundingBox() { GenericRawResults<Object[]> results = null; Object[] values = null; try { results = geometryIndexDao.queryRaw(\"SELECT MIN(\" + GeometryIndex.COLUMN_MIN_X + \"), MIN(\" + GeometryIndex.COLUMN_MIN_Y + \"), MAX(\" + GeometryIndex.COLUMN_MAX_X + \"), MAX(\" + GeometryIndex.COLUMN_MAX_Y + \") FROM \" + GeometryIndex.TABLE_NAME + \" WHERE \" + GeometryIndex.COLUMN_TABLE_NAME + \" = ?\", new DataType[] { DataType.DOUBLE, DataType.DOUBLE, DataType.DOUBLE, DataType.DOUBLE }, tableName); values = results.getFirstResult(); } catch (SQLException e) { throw new GeoPackageException( \"Failed to query for indexed feature bounds: \" + tableName, e); } finally { if (results != null) { try { results.close(); } catch (IOException e) { logger.log(Level.WARNING, \"Failed to close bounds query results\", e); } } } BoundingBox boundingBox = new BoundingBox((double) values[0], (double) values[1], (double) values[2], (double) values[3]); return boundingBox; }. \n### Response: Query for the bounds of the feature table index\n\n@return bounding box\n@since 3.1.0.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected T authenticateUserViaBasicAuth(final ActionRequest actionRequest) { final HttpServletRequest servletRequest = actionRequest.getHttpServletRequest(); final String username = ServletUtil.resolveAuthUsername(servletRequest); if (username == null) { return null; } final String password = ServletUtil.resolveAuthPassword(servletRequest); final T authToken = userAuth().login(username, password); if (authToken == null) { return null; } return authToken; } \n### Response:", "ground_truth": "Tires to authenticate user via the basic authentication. Returns the token if user is authenticated.", "predict": "Authenticate a user via basic auth\n\n@param servletRequest the request object\n@return the auth token\n@since 4.0.0."}, {"ID": 1249, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function getEdgesIntersection($otherEdges) { $otherArray = self::factory($otherEdges)->getVector(); $edges = array(); foreach ($this->edges as $eid => $edge) { $i = array_search($edge, $otherArray, true); if ($i !== false) { // remove from other array in order to check for duplicate matches unset($otherArray[$i]); $edges[$eid] = $edge; } } return new static($edges); }. \n### Response: get intersection of Edges with given other Edges\n\nThe intersection contains all Edge instances that are present in BOTH\nthis set of Edges and the given set of other Edges.\n\nEdge index/keys will be preserved from original array.\n\nDuplicate Edge instances will be kept if the corresponding number of\nEdge instances is also found in $otherEdges.\n\n@param Edges|Edge[] $otherEdges\n@return Edges a new Edges set.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public String findDefaultMessage(final Locale locale, final String key) { String indexedKey = calcIndexKey(key); String msg = getMessage(fallbackBundlename, locale, key, indexedKey); if (msg != null) { return msg; } for (String bname : defaultBundles) { msg = getMessage(bname, locale, key, indexedKey); if (msg != null) { return msg; } } return null; } \n### Response:", "ground_truth": "Finds message in default bundles only, starting from fallback bundlename.", "predict": "findDefaultMessage\n\nFinds the default message for the given key in the specified locale.\n\n@param Locale $locale\n@param String $key\n@return String the default message for the given key, or null if no default message is found.\n\nNote: The default message is not included in the message cache, so it may be necessary to clear the message cache before searching for the default message."}, {"ID": 1250, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function getBlogUrl(secure) { var blogUrl; if (secure) { blogUrl = config.get('url').replace('http://', 'https://'); } else { blogUrl = config.get('url'); } if (!blogUrl.match(/\\/$/)) { blogUrl += '/'; } return blogUrl; }. \n### Response: Returns the base URL of the blog as set in the config.\n\nSecure:\nIf the request is secure, we want to force returning the blog url as https.\nImagine Ghost runs with http, but nginx allows SSL connections.\n\n@param {boolean} secure\n@return {string} URL returns the url as defined in config, but always with a trailing `/`.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected ResourceBundle getBundle(final String bundleName, final Locale locale, final ClassLoader classLoader) { return ResourceBundle.getBundle(bundleName, locale, classLoader); } \n### Response:", "ground_truth": "Returns specified bundle. Invoked every time if cache is disabled.\nInput arguments are always valid.", "predict": "Returns a ResourceBundle with the specified bundle name, locale, and classloader.\n\n@param {String} bundleName The name of the bundle to retrieve.\n@param {Locale} locale The locale to use for the bundle.\n@param {ClassLoader} classLoader The classloader to use for the bundle.\n@return {ResourceBundle} A ResourceBundle with the specified bundle name, locale, and classloader.\n\nNote: This method is used to retrieve a ResourceBundle from a classloader. It is typically used in situations where a classloader is responsible for loading resources, such as a Bundle.\n\n@see ResourceBundle#getBundle()\n\n"}, {"ID": 1251, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def _strip_object(key): \"\"\" Strips branch and version info if the given key supports those attributes. \"\"\" if hasattr(key, 'version_agnostic') and hasattr(key, 'for_branch'): return key.for_branch(None).version_agnostic() else: return key. \n### Response: Strips branch and version info if the given key supports those attributes..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected K get(final K[] array, final int index) { return (K) Array.get(array, index); } \n### Response:", "ground_truth": "Returns array's element at given index.", "predict": "This method retrieves the value of a specific key from an array of keys. It returns the value of the key at the specified index, using the Array.get() method."}, {"ID": 1252, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private function attachRequestPayload(&$ch, $data) { $encoded = json_encode($data); $this->last_request['body'] = $encoded; curl_setopt($ch, CURLOPT_POSTFIELDS, $encoded); }. \n### Response: Encode the data and attach it to the request\n\n@param   resource $ch   cURL session handle, used by reference\n@param   array    $data Assoc array of data to attach.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected <E, ID> void setEntityId(final DbEntityDescriptor<E> ded, final E entity, final ID newIdValue) { ded.setIdValue(entity, newIdValue); } \n### Response:", "ground_truth": "Sets new ID value for entity.", "predict": "Set the entity ID for the given DbEntityDescriptor object"}, {"ID": 1253, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def _drop_cascade_relation(self, dropped): \"\"\"Drop the given relation and cascade it appropriately to all dependent relations. :param _CachedRelation dropped: An existing _CachedRelation to drop. \"\"\" if dropped not in self.relations: logger.debug('dropped a nonexistent relationship: {!s}' .format(dropped)) return consequences = self.relations[dropped].collect_consequences() logger.debug( 'drop {} is cascading to {}'.format(dropped, consequences) ) self._remove_refs(consequences). \n### Response: Drop the given relation and cascade it appropriately to all\n        dependent relations.\n\n        :param _CachedRelation dropped: An existing _CachedRelation to drop..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void save(final Object entity) { final DbQuery q = query(dbOom.entities().insert(entity)); q.autoClose().executeUpdate(); } \n### Response:", "ground_truth": "Simply inserts object into the database.", "predict": "Saves an entity to the database using the provided DbQuery object.\n\nNote: This method should be thread-safe since it involves database operations.\n\nNote: This method is only used for simple entity save operations. For more complex operations, consider using a dedicated entity manager or a separate thread."}, {"ID": 1254, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (c *Config) Open(logger log.Logger) (storage.Storage, error) { cli, err := c.open(logger, false) if err != nil { return nil, err } return cli, nil }. \n### Response: // Open returns a storage using Kubernetes third party resource..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void update(final Object entity) { query(dbOom.entities().updateAll(entity)).autoClose().executeUpdate(); } \n### Response:", "ground_truth": "Updates single entity.", "predict": "// Update the given entity using the database. \n\n"}, {"ID": 1255, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (s *ServiceCache) Find(ip net.IP, port int, host string, local bool) interface{} { s.RLock() defer s.RUnlock() if host != \"\" { if data := s.findHost(host, port, local); data != nil { return data } } return s.findIP(ip, port, local) }. \n### Response: // Find searches for a matching service, given an IP and port. Caller must specify\n// the local or remote context..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public <E> E updateProperty(final E entity, final String name, final Object newValue) { query(dbOom.entities().updateColumn(entity, name, newValue)).autoClose().executeUpdate(); BeanUtil.declared.setProperty(entity, name, newValue); return entity; } \n### Response:", "ground_truth": "Updates single property in database and in the bean.", "predict": "// UpdateProperty updates a property in an entity, given the name and new value.\n// The entity is returned after the update is completed.\n\n// This method is useful for updating a single property in an entity,\n// without the need to call multiple methods."}, {"ID": 1256, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (c *Calendar) IsHoliday(date time.Time) bool { idx := date.Month() for i := range c.holidays[idx] { if c.holidays[idx][i].matches(date) { return true } } for i := range c.holidays[0] { if c.holidays[0][i].matches(date) { return true } } return false }. \n### Response: // IsHoliday reports whether a given date is a holiday. It does not account\n// for the observation of holidays on alternate days..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public <E> E updateProperty(final E entity, final String name) { Object value = BeanUtil.declared.getProperty(entity, name); query(dbOom.entities().updateColumn(entity, name, value)).autoClose().executeUpdate(); return entity; } \n### Response:", "ground_truth": "Updates property in the database by storing the current property value.", "predict": "// UpdateProperty updates the value of a given property in the given entity.\n// It does not perform any database queries.\n// It returns the updated entity."}, {"ID": 1257, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def error_handler(_, err, arg): \"\"\"Update the mutable integer `arg` with the error code.\"\"\" arg.value = err.error return libnl.handlers.NL_STOP. \n### Response: Update the mutable integer `arg` with the error code..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public <E, ID> E findById(final Class<E> entityType, final ID id) { return query(dbOom.entities().findById(entityType, id)).autoClose().find(entityType); } \n### Response:", "ground_truth": "Finds single entity by its id.", "predict": "public <E, ID> E findById(final Class<E> entityType, final ID id) {\n```\n// Return the entity with the specified id, if it exists, otherwise null.\n```\nreturn query(dbOom.entities().findById(entityType, id)).autoClose().find(entityType);\n}\n```"}, {"ID": 1258, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def _get_abs_corr_mat(self, X_filled, tolerance=1e-6): \"\"\"Get absolute correlation matrix between features. Parameters ---------- X_filled : ndarray, shape (n_samples, n_features) Input data with the most recent imputations. tolerance : float, optional (default=1e-6) ``abs_corr_mat`` can have nans, which will be replaced with ``tolerance``. Returns ------- abs_corr_mat : ndarray, shape (n_features, n_features) Absolute correlation matrix of ``X`` at the beginning of the current round. The diagonal has been zeroed out and each feature's absolute correlations with all others have been normalized to sum to 1. \"\"\" n_features = X_filled.shape[1] if (self.n_nearest_features is None or self.n_nearest_features >= n_features): return None abs_corr_mat = np.abs(np.corrcoef(X_filled.T)) # np.corrcoef is not defined for features with zero std abs_corr_mat[np.isnan(abs_corr_mat)] = tolerance # ensures exploration, i.e. at least some probability of sampling np.clip(abs_corr_mat, tolerance, None, out=abs_corr_mat) # features are not their own neighbors np.fill_diagonal(abs_corr_mat, 0) # needs to sum to 1 for np.random.choice sampling abs_corr_mat = normalize(abs_corr_mat, norm='l1', axis=0, copy=False) return abs_corr_mat. \n### Response: Get absolute correlation matrix between features.\n\n        Parameters\n        ----------\n        X_filled : ndarray, shape (n_samples, n_features)\n            Input data with the most recent imputations.\n\n        tolerance : float, optional (default=1e-6)\n            ``abs_corr_mat`` can have nans, which will be replaced\n            with ``tolerance``.\n\n        Returns\n        -------\n        abs_corr_mat : ndarray, shape (n_features, n_features)\n            Absolute correlation matrix of ``X`` at the beginning of the\n            current round. The diagonal has been zeroed out and each feature's\n            absolute correlations with all others have been normalized to sum\n            to 1..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public <E> E findOneByProperty(final Class<E> entityType, final String name, final Object value) { return query(dbOom.entities().findByColumn(entityType, name, value)).autoClose().find(entityType); } \n### Response:", "ground_truth": "Finds single entity by matching property.", "predict": "This method is used to retrieve an entity by its property value.\n\n        Parameters\n        ----------\n        entityType : Class<E>\n            The entity type to retrieve.\n\n        name : String\n            The name of the property to retrieve.\n\n        value : Object\n            The value of the property to retrieve.\n\n        Returns\n        -------\n        E\n            The entity with the specified property value.\n\n        Example\n        -------\n        E entity = findOneByProperty(EntityType.class, \"name\", \"John\");\n        System.out.println(entity);  // prints \"John\"\n        \n        E entity = findOneByProperty(EntityType.class, \"age\", 30);\n        System.out.println(entity);  // prints null\n        \n        E entity = findOneByProperty(EntityType.class, \"name\", \"Jane\");\n        System.out.println(entity);  // prints Jane\n        \n        E entity = findOneByProperty(EntityType.class, \"age\", 40);\n        System.out.println(entity);  // prints null\n        \n        E entity = findOneByProperty(EntityType.class, \"name\", \"Bob\");\n        System.out.println(entity);  // prints null\n        \n        E entity = findOneByProperty(EntityType.class, \"age\", 50);\n        System.out.println(entity);  // prints null\n        \n        E entity = findOneByProperty(EntityType.class, \"name\", \"Alice\");\n        System.out.println(entity);  // prints Alice\n        \n        E entity = findOneByProperty(EntityType.class, \"age\", 60);\n        System.out.println(entity);  // prints null\n        \n        E entity = findOneByProperty(EntityType.class, \"name\", \"Charlie\");\n        System.out.println(entity);  // prints null\n        \n        E entity = findOneByProperty(EntityType.class, \"age\", 70);\n        System.out.println(entity);  // prints null\n        \n        E entity = findOneByProperty(EntityType.class, \"name\", \"David\");\n        System.out.println(entity);  // prints David\n        \n        E entity = findOneByProperty(EntityType.class, \"age\", 80);\n        System.out.println(entity);  // prints null\n        \n        E entity = findOneByProperty(EntityType.class, \"name\", \"Eve\");\n        System.out.println(entity);  // prints null\n        \n        E entity = findOneByProperty(EntityType.class, \"age\", 90);\n        System.out.println(entity);  // prints null\n        \n        E entity = findOneByProperty(EntityType.class, \"name\", \"Bob\");\n        System.out.println(entity);  // prints null\n        \n        E entity = findOneByProperty(EntityType.class, \"age\", 100);\n        System.out.println(entity);  // prints null\n        \n        E entity = findOneByProperty(EntityType.class, \"name\", \"Alice\");\n        System.out.println(entity);  // prints Alice\n        \n        E entity = findOneByProperty(EntityType.class, \"age\", 110);\n        System.out.println(entity);  // prints null\n        \n        E entity = findOneByProperty(EntityType.class, \"name\", \"Charlie\");\n        System.out.println(entity);  // prints null\n        \n        E entity = findOneByProperty(EntityType.class, \"age\", 120);\n        System.out.println(entity);  // prints null\n        \n        E entity = findOneByProperty(EntityType.class, \"name\", \"David\");\n        System.out.println(entity);  // prints David\n        \n        E entity = findOneByProperty(EntityType.class, \"age\", 130);\n        System.out.println(entity);  // prints null"}, {"ID": 1259, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def hydrate(self, values): \"\"\" Convert PackStream values into native values. \"\"\" def hydrate_(obj): if isinstance(obj, Structure): try: f = self.hydration_functions[obj.tag] except KeyError: # If we don't recognise the structure type, just return it as-is return obj else: return f(*map(hydrate_, obj.fields)) elif isinstance(obj, list): return list(map(hydrate_, obj)) elif isinstance(obj, dict): return {key: hydrate_(value) for key, value in obj.items()} else: return obj return tuple(map(hydrate_, values)). \n### Response: Convert PackStream values into native values..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @SuppressWarnings({\"unchecked\"}) public <E> E findOne(final Object criteria) { return (E) query(dbOom.entities().find(criteria)).autoClose().find(criteria.getClass()); } \n### Response:", "ground_truth": "Finds one entity for given criteria.", "predict": "This method is used to retrieve an object from a database using a specific criteria. It is marked with the @SuppressWarnings({\"unchecked\"}) annotation to indicate that the method should not be used in a generic way. The method returns the first object that matches the criteria, cast to the appropriate type."}, {"ID": 1260, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def diri(table): \"\"\" from SparCC - \"randomly draw from the corresponding posterior Dirichlet distribution with a uniform prior\" \"\"\" t = [] for i in table: a = [j + 1 for j in i] t.append(np.ndarray.tolist(np.random.mtrand.dirichlet(a))) return t. \n### Response: from SparCC - \"randomly draw from the corresponding posterior\n    Dirichlet distribution with a uniform prior\".\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public <ID> void deleteById(final Class entityType, final ID id) { query(dbOom.entities().deleteById(entityType, id)).autoClose().executeUpdate(); } \n### Response:", "ground_truth": "Deleted single entity by its id.", "predict": "This method deletes an entity by its ID from the database using the ORM. It first retrieves the entity type and ID from the database and then calls the deleteById() method on the entity type and ID to delete the entity. The method is marked with the <ID> parameter, which indicates that the method takes an ID as an input. The method also uses the autoClose() method to automatically close the database connection after the method is called. The executeUpdate() method is used to actually delete the entity from the database."}, {"ID": 1261, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void existenceCheck(final Nodes nodes, final String nodeNameForDebugging) throws XMLParsingException { if (nodes.size() == 0) { throw new XMLParsingException(\"Message doesn't contain a \" + nodeNameForDebugging + \"node!\"); } }. \n### Response: Does nothing if nodes contains at least one node. Throws InvalidCfgDocException otherwise.\n\n@param nodes\n@param nodeNameForDebugging\n@throws XMLParsingException.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void deleteById(final Object entity) { if (entity != null) { int result = query(dbOom.entities().deleteById(entity)).autoClose().executeUpdate(); if (result != 0) { // now reset the ID value Class type = entity.getClass(); DbEntityDescriptor ded = dbOom.entityManager().lookupType(type); setEntityId(ded, entity, 0); } } } \n### Response:", "ground_truth": "Delete single object by its id. Resets ID value.", "predict": "This method deletes an entity by ID using the entityManager.deleteById() method. It checks if the entity being deleted has an ID by calling the query() method and then executing the autoClose().executeUpdate() method. If the result is not 0, it resets the ID value by calling the setEntityId() method with the DbEntityDescriptor and the entity as arguments.\n\n@param entity\n@return the result of the delete operation\n@throws DbException."}, {"ID": 1262, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected function hasGroupLoop($accessLevel, $modifiedUuid) { $parts = explode('\\\\', $accessLevel); if (count($parts) < 3 || $parts[1] !== 'Group') { return false; } if ($parts[2] === $modifiedUuid) { return true; } if ($this->hasPermissionForModifiedGroup($modifiedUuid, $parts[2])) { return true; } return false; }. \n### Response: Returns true if the given modified group id has a loop\nbetween two groups if we add the given access level.\n\n@param string $accessLevel\n@param string $modifiedUuid\n@return boolean.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public long count(final Class entityType) { return query(dbOom.entities().count(entityType)).autoClose().executeCount(); } \n### Response:", "ground_truth": "Counts number of all entities.", "predict": "This method returns the number of entities in the specified entity type.\n\n@param Class $entityType\n@return long."}, {"ID": 1263, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void useCleanPlugin(Element ... elements) throws MojoExecutionException { List<Element> tempElems = new ArrayList<>(Arrays.asList(elements)); tempElems.add(new Element(\"excludeDefaultDirectories\", \"true\")); // Configure the Maven Clean Plugin to clean working files executeMojo( plugin( groupId(\"org.apache.maven.plugins\"), artifactId(\"maven-clean-plugin\"), version(\"2.5\") ), goal(\"clean\"), configuration( tempElems.toArray(new Element[tempElems.size()]) ), executionEnvironment( project, session, pluginManager ) ); }. \n### Response: Utility method to use the clean plugin in the cleanup methods\n\n@param elements Elements to configure the clean plugin\n@throws MojoExecutionException Throws when error occurred in the clean plugin.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public <ID> void increaseProperty(final Class entityType, final ID id, final String name, final Number delta) { query(dbOom.entities().increaseColumn(entityType, id, name, delta, true)).autoClose().executeUpdate(); } \n### Response:", "ground_truth": "Increases a property.", "predict": "Method to increase a property in a database entity.\n\n@param entityType The class of the entity to be updated.\n@param id The ID of the entity to be updated.\n@param name The name of the property to be increased.\n@param delta The increase in value of the property.\n@return The ID of the updated entity.\n@throws MojoExecutionException Throws when error occurred in the query or update operation."}, {"ID": 1264, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func CreateNodeDialer(s completedServerRunOptions) (tunneler.Tunneler, *http.Transport, error) { // Setup nodeTunneler if needed var nodeTunneler tunneler.Tunneler var proxyDialerFn utilnet.DialFunc if len(s.SSHUser) > 0 { // Get ssh key distribution func, if supported var installSSHKey tunneler.InstallSSHKey cloud, err := cloudprovider.InitCloudProvider(s.CloudProvider.CloudProvider, s.CloudProvider.CloudConfigFile) if err != nil { return nil, nil, fmt.Errorf(\"cloud provider could not be initialized: %v\", err) } if cloud != nil { if instances, supported := cloud.Instances(); supported { installSSHKey = instances.AddSSHKeyToAllInstances } } if s.KubeletConfig.Port == 0 { return nil, nil, fmt.Errorf(\"must enable kubelet port if proxy ssh-tunneling is specified\") } if s.KubeletConfig.ReadOnlyPort == 0 { return nil, nil, fmt.Errorf(\"must enable kubelet readonly port if proxy ssh-tunneling is specified\") } // Set up the nodeTunneler // TODO(cjcullen): If we want this to handle per-kubelet ports or other // kubelet listen-addresses, we need to plumb through options. healthCheckPath := &url.URL{ Scheme: \"http\", Host: net.JoinHostPort(\"127.0.0.1\", strconv.FormatUint(uint64(s.KubeletConfig.ReadOnlyPort), 10)), Path: \"healthz\", } nodeTunneler = tunneler.New(s.SSHUser, s.SSHKeyfile, healthCheckPath, installSSHKey) // Use the nodeTunneler's dialer when proxying to pods, services, and nodes proxyDialerFn = nodeTunneler.Dial } // Proxying to pods and services is IP-based... don't expect to be able to verify the hostname proxyTLSClientConfig := &tls.Config{InsecureSkipVerify: true} proxyTransport := utilnet.SetTransportDefaults(&http.Transport{ DialContext: proxyDialerFn, TLSClientConfig: proxyTLSClientConfig, }) return nodeTunneler, proxyTransport, nil }. \n### Response: // CreateNodeDialer creates the dialer infrastructure to connect to the nodes..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public <ID> void decreaseProperty(final Class entityType, final ID id, final String name, final Number delta) { query(dbOom.entities().increaseColumn(entityType, id, name, delta, false)).autoClose().executeUpdate(); } \n### Response:", "ground_truth": "Decreases a property.", "predict": "// decreaseProperty updates the specified entity type by the specified ID, name, and delta. \n\n"}, {"ID": 1265, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def step(self): \"\"\"Prompt the environment to change.\"\"\" current_state = max(self.infos(type=State), key=attrgetter('creation_time')) current_contents = float(current_state.contents) new_contents = 1 - current_contents info_out = State(origin=self, contents=new_contents) transformations.Mutation(info_in=current_state, info_out=info_out). \n### Response: Prompt the environment to change..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public <E> List<E> findRelated(final Class<E> target, final Object source) { return query(dbOom.entities().findForeign(target, source)).autoClose().list(target); } \n### Response:", "ground_truth": "Finds related entity.", "predict": "public List<E> findRelated(final Class<E> target, final Object source) {\n```\n* Query the database to retrieve the related entities for the given target class and source object.\n* AutoClose() is used to ensure that the entities are properly closed after use.\n* Return the list of related entities.\n```\n}"}, {"ID": 1266, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static ObjectName getObjectName(String domain, Map<String,String> properties) throws MalformedObjectNameException { StringBuilder cb = new StringBuilder(); cb.append(domain); cb.append(':'); boolean isFirst = true; Pattern escapePattern = Pattern.compile(\"[,=:\\\"*?]\"); // sort type first String type = properties.get(\"type\"); if (type != null) { cb.append(\"type=\"); if (escapePattern.matcher(type).find()) type = ObjectName.quote(type); cb.append(type); isFirst = false; } for (String key : properties.keySet()) { if (key.equals(\"type\")) { continue; } if (! isFirst) cb.append(','); isFirst = false; cb.append(key); cb.append('='); String value = properties.get(key); if (value == null) { throw new NullPointerException(String.valueOf(key)); } if (value.length() == 0 || (escapePattern.matcher(value).find() && ! (value.startsWith(\"\\\"\") && value.endsWith(\"\\\"\")))) { value = ObjectName.quote(value); } cb.append(value); } return new ObjectName(cb.toString()); }. \n### Response: Creates the clean name.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public <E> List<E> listAll(final Class<E> target) { return query(dbOom.entities().from(target)).autoClose().list(target); } \n### Response:", "ground_truth": "List all entities.", "predict": "This method returns a list of all entities in the specified target class."}, {"ID": 1267, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void setActualImageFocusPoint(PointF focusPoint) { Preconditions.checkNotNull(focusPoint); getScaleTypeDrawableAtIndex(ACTUAL_IMAGE_INDEX).setFocusPoint(focusPoint); }. \n### Response: Sets the actual image focus point..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public void clear() { entries = null; Iterator<String> keys = getAttributeNames(); while (keys.hasNext()) { removeAttribute(keys.next()); } } \n### Response:", "ground_truth": "Removes all attributes from the request as well as clears entries in this map.", "predict": "Clears the entries in the attribute list.."}, {"ID": 1268, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (rec Record) Validate() error { if err := rec.Origin.Validate(); err != nil { return errors.Annotate(err, \"invalid Origin\") } if rec.Timestamp.IsZero() { return errors.NewNotValid(nil, \"empty Timestamp\") } // rec.Level may be anything, so we don't check it. if err := rec.Location.Validate(); err != nil { return errors.Annotate(err, \"invalid Location\") } // rec.Message may be anything, so we don't check it. return nil }. \n### Response: // Validate ensures that the record is correct..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public Set<Entry<String, Object>> entrySet() { if (entries == null) { entries = new HashSet<>(); Iterator<String> iterator = getAttributeNames(); while (iterator.hasNext()) { final String key = iterator.next(); final Object value = getAttribute(key); entries.add(new Entry<String, Object>() { @Override public boolean equals(final Object obj) { if (obj == null) { return false; } if (this.getClass() != obj.getClass()) { return false; } Entry entry = (Entry) obj; return ((key == null) ? (entry.getKey() == null) : key.equals(entry.getKey())) && ((value == null) ? (entry.getValue() == null) : value.equals(entry.getValue())); } @Override public int hashCode() { return ((key == null) ? 0 : key.hashCode()) ^ ((value == null) ? 0 : value.hashCode()); } @Override public String getKey() { return key; } @Override public Object getValue() { return value; } @Override public Object setValue(final Object obj) { setAttribute(key, obj); return value; } }); } } return entries; } \n### Response:", "ground_truth": "", "predict": "// entrySet returns a set of all entries in the record.."}, {"ID": 1269, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def editors(self, value): \"\"\"Update editors. DEPRECATED: use ``policy[\"roles/editors\"] = value`` instead.\"\"\" warnings.warn( _ASSIGNMENT_DEPRECATED_MSG.format(\"editors\", EDITOR_ROLE), DeprecationWarning, ) self[EDITOR_ROLE] = value. \n### Response: Update editors.\n\n        DEPRECATED:  use ``policy[\"roles/editors\"] = value`` instead..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public Object put(final String key, final Object value) { entries = null; Object previous = get(key); setAttribute(key, value); return previous; } \n### Response:", "ground_truth": "Saves an attribute in the request.", "predict": "Override the put method to add or update an entry in the entries array.\n\n        ():  Add or update an entry in the entries array.\n\n        ():  Return the previous object stored for the given key.\n\n        ():  The put method adds or updates an entry in the entries array based on the provided key and value.\n\n        ():  The method returns the previous object stored for the given key, or null if no previous object is found.\n\n        ():  Note: This method is deprecated and should be replaced with the policy[\"roles/editors\"] = value method.\n\n        ():  Note: This method is deprecated and should be replaced with the policy[\"roles/editors\"] = value method."}, {"ID": 1270, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function addListener($event, $method) { if (!isset($this->listeners[$event])) { $this->listeners[$event] = array(); } $this->listeners[$event][] = $method; }. \n### Response: Adds a listener for the specified event.\n@param string $event\n@param string $method.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public Object remove(final Object key) { entries = null; Object value = get(key); removeAttribute(key.toString()); return value; } \n### Response:", "ground_truth": "Removes the specified request attribute.", "predict": "Removes the specified key from the specified entries.\n\n@param object $key The key to remove.\n@param array $entries The array of entries to remove the key from."}, {"ID": 1271, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void init(OutputStream os) { this.os = os; _refs = null; if (_serializerFactory == null) _serializerFactory = new SerializerFactory(); }. \n### Response: Initializes the output.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @SuppressWarnings({\"ThrowCaughtLocally\"}) public static StackTraceElement[] getCurrentStackTrace() { StackTraceElement[] ste = new Exception().getStackTrace(); if (ste.length > 1) { StackTraceElement[] result = new StackTraceElement[ste.length - 1]; System.arraycopy(ste, 1, result, 0, ste.length - 1); return result; } else { return ste; } } \n### Response:", "ground_truth": "Returns current stack trace in form of array of stack trace elements.\nFirst stack trace element is removed.\nSince an exception is thrown internally, this method is slow.", "predict": "This method retrieves the current stack trace of an exception and returns it as a StackTraceElement[] array. It uses the getStackTrace() method of the Exception class to retrieve the stack trace, and if there is only one frame, it returns the entire stack trace as a single StackTraceElement[] array. Otherwise, it copies the first frame of the stack trace into a new array and returns that array. This method is useful for debugging, as it allows you to see the full context of the exception that was thrown."}, {"ID": 1272, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void setSelfMuted(long userId, boolean muted) { if (muted) { selfMuted.add(userId); } else { selfMuted.remove(userId); } }. \n### Response: Sets the self-muted state of the user with the given id.\n\n@param userId The id of the user.\n@param muted Whether the user with the given id is self-muted or not..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static StackTraceElement[] getStackTrace(final Throwable t, final String[] allow, final String[] deny) { StackTraceElement[] st = t.getStackTrace(); ArrayList<StackTraceElement> result = new ArrayList<>(st.length); elementLoop: for (StackTraceElement element : st) { String className = element.getClassName(); if (allow != null) { boolean validElemenet = false; for (String filter : allow) { if (className.contains(filter)) { validElemenet = true; break; } } if (!validElemenet) { continue; } } if (deny != null) { for (String filter : deny) { if (className.contains(filter)) { continue elementLoop; } } } result.add(element); } st = new StackTraceElement[result.size()]; return result.toArray(st); } \n### Response:", "ground_truth": "Returns stack trace filtered by class names.", "predict": "This method retrieves the stack trace of a givenThrowable object, and returns an array of StackTraceElement objects representing the stack trace. The method takes three arguments: theThrowable object being traced, an array of strings representing allowed filters for the stack trace, and an array of strings representing denied filters for the stack trace. The method iterates through the stack trace array, checking each element for the presence of the strings in the allowed or denied arrays. If an element is found, it is added to the result array. Finally, the method returns the result array as an array of StackTraceElement objects.\n\n@param Throwable The object being traced.\n@param allow The array of strings representing allowed filters for the stack trace.\n@param deny The array of strings representing denied filters for the stack trace."}, {"ID": 1273, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void countRegionPixels(GrayS32 labeled , int totalRegions , int counts[] ) { Arrays.fill(counts,0,totalRegions,0); for( int y = 0; y < labeled.height; y++ ) { int index = labeled.startIndex + y*labeled.stride; for( int x = 0; x < labeled.width; x++ ) { counts[labeled.data[index++]]++; } } }. \n### Response: Counts the number of pixels in all regions.  Regions must be have labels from 0 to totalRegions-1.\n\n@param labeled (Input) labeled image\n@param totalRegions Total number of regions\n@param counts Storage for pixel counts.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static StackTraceElement[][] getStackTraceChain(Throwable t, final String[] allow, final String[] deny) { ArrayList<StackTraceElement[]> result = new ArrayList<>(); while (t != null) { StackTraceElement[] stack = getStackTrace(t, allow, deny); result.add(stack); t = t.getCause(); } StackTraceElement[][] allStacks = new StackTraceElement[result.size()][]; for (int i = 0; i < allStacks.length; i++) { allStacks[i] = result.get(i); } return allStacks; } \n### Response:", "ground_truth": "Returns stack trace chain filtered by class names.", "predict": "Provides a method to get the stack trace of a given Throwable object.\n\n@param t (Input) Throwable object containing the stack trace.\n@param allow (Output) String array containing allowed methods to call.\n@param deny (Output) String array containing denied methods to call.\n@return StackTraceElement[][] array containing the stack trace of the Throwable object.\n\nNote: This method is used to check if a given method is accessible and callable."}, {"ID": 1274, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function setEmail($email) { if (!is_string($email) && filter_var($email, FILTER_VALIDATE_EMAIL) ) { throw new TypeException( '$email must valid and be of type string.' ); } $this->email = $email; }. \n### Response: Add the email setting on a BccSettings object\n\n@param string $email The email address that you would like\nto receive the BCC\n\n@throws TypeException.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static Throwable[] getExceptionChain(Throwable throwable) { ArrayList<Throwable> list = new ArrayList<>(); list.add(throwable); while ((throwable = throwable.getCause()) != null) { list.add(throwable); } Throwable[] result = new Throwable[list.size()]; return list.toArray(result); } \n### Response:", "ground_truth": "Returns exception chain starting from top up to root cause.", "predict": "This method retrieves the exception chain of a given Throwable throwable.\n\n@param Throwable throwable The Throwable to retrieve the exception chain from.\n\n@return An array of Throwable objects representing the exception chain."}, {"ID": 1275, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function () { function commons() {} commons.attachParentSelector = function (parentSelector, defaultSelector) { var customSelector = defaultSelector; if (parentSelector !== '' && parentSelector.length > 0) { if (parentSelector === defaultSelector) { customSelector = defaultSelector; } else if ($(parentSelector).hasClass(defaultSelector)) { customSelector = parentSelector + \"\" + defaultSelector; } else { customSelector = parentSelector + \" \" + defaultSelector; } } return customSelector; }; return commons; }. \n### Response: Attach Parent Selector.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String exceptionStackTraceToString(final Throwable t) { StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw, true); t.printStackTrace(pw); StreamUtil.close(pw); StreamUtil.close(sw); return sw.toString(); } \n### Response:", "ground_truth": "Prints stack trace into a String.", "predict": "Exception StackTraceToString."}, {"ID": 1276, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func updatePendingVolumeAttachment( ctx *context, id params.MachineStorageId, params storage.VolumeAttachmentParams, ) { if params.InstanceId == \"\" { watchMachine(ctx, params.Machine.(names.MachineTag)) } else if params.VolumeId != \"\" { delete(ctx.incompleteVolumeAttachmentParams, id) scheduleOperations(ctx, &attachVolumeOp{args: params}) return } ctx.incompleteVolumeAttachmentParams[id] = params }. \n### Response: // updatePendingVolumeAttachment adds the given volume attachment params to\n// either the incomplete set or the schedule. If the params are incomplete\n// due to a missing instance ID, updatePendingVolumeAttachment will request\n// that the machine be watched so its instance ID can be learned..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String exceptionChainToString(Throwable t) { StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw, true); while (t != null) { t.printStackTrace(pw); t = t.getCause(); } StreamUtil.close(pw); StreamUtil.close(sw); return sw.toString(); } \n### Response:", "ground_truth": "Prints full exception stack trace, from top to root cause, into a String.", "predict": "// exceptionChainToString formats the stack trace of all exceptions thrown by the method.\n// It returns the string \"Exception chain: <exception> <cause>\"."}, {"ID": 1277, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function migrate($to = null) { if (null === $to) { $to = $this->configuration->getLatestVersion(); } $from = $this->configuration->getCurrentVersion(); $from = (string) $from; $to = (string) $to; $migrations = $this->configuration->getMigrations(); if (!isset($migrations[$to]) && $to > 0) { throw new UnknownVersionException($to); } $direction = $from > $to ? 'down' : 'up'; $migrationsToExecute = $this->configuration->getMigrationsToExecute($direction, $to); if ($from === $to && empty($migrationsToExecute) && $migrations) { return; } $this->outputWriter->write(sprintf('Migrating <info>%s</info> to <comment>%s</comment> from <comment>%s</comment>', $direction, $to, $from)); if (empty($migrationsToExecute)) { throw new NoMigrationsToExecuteException('Could not find any migrations to execute.'); } $time = 0; foreach ($migrationsToExecute as $version) { $version->execute($direction); $time += $version->getTime(); } $this->outputWriter->write(\"\\n <comment>------------------------</comment>\\n\"); $this->outputWriter->write(sprintf(' <info>++</info> finished in %s', $time)); $this->outputWriter->write(sprintf(' <info>++</info> %s migrations executed', count($migrationsToExecute))); }. \n### Response: Run a migration to the current version or the given target version.\n\n@param string $to The version to migrate to\n\n@throws AntiMattr\\MongoDB\\Migrations\\Exception\\UnknownVersionException\n@throws AntiMattr\\MongoDB\\Migrations\\Exception\\NoMigrationsToExecuteException.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String buildMessage(final String message, Throwable cause) { if (cause != null) { cause = getRootCause(cause); StringBuilder buf = new StringBuilder(); if (message != null) { buf.append(message).append(\"; \"); } buf.append(\"<--- \").append(cause); return buf.toString(); } else { return message; } } \n### Response:", "ground_truth": "Build a message for the given base message and its cause.", "predict": "This method builds a message indicating the cause of the exception and the message itself.\n\n@param String message The message to display\n@param Throwable cause The cause of the exception\n@return A string containing the message and cause."}, {"ID": 1278, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private function download($currency, $date) { //use test data if running as test if ($this->runastest) { $results = file_get_contents(dirname(__FILE__) . '/../../tests/openExchangeTestData.json'); } else { if ($this->settings['use-ssl']) { $url = 'https'; } else { $url = 'http'; } if ($date === date('Y-m-d')) { $url .= '://openexchangerates.org/api/latest.json?app_id=' . $this->settings['openex-app-id'] . '&base=' . $currency; } else { $url .= '://openexchangerates.org/api/time-series.json?app_id=' . $this->settings['openex-app-id'] . '&start=' . $date . '&end=' . $date . '&base=' . $currency; } $this->url = $url; $results = $this->connect($url); } return $results; }. \n### Response: Get data from openExchange\n\n@param string $currency\n@param string $date\n\n@return array.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static Throwable unwrapThrowable(final Throwable wrappedThrowable) { Throwable unwrapped = wrappedThrowable; while (true) { if (unwrapped instanceof InvocationTargetException) { unwrapped = ((InvocationTargetException) unwrapped).getTargetException(); } else if (unwrapped instanceof UndeclaredThrowableException) { unwrapped = ((UndeclaredThrowableException) unwrapped).getUndeclaredThrowable(); } else { return unwrapped; } } } \n### Response:", "ground_truth": "Unwraps invocation and undeclared exceptions to real cause.", "predict": "unwrapThrowable()\n\nUnwraps aThrowable object.\n\n@return Throwable."}, {"ID": 1279, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private function getUser(TokenInterface $authenticationToken) { $user = $authenticationToken->getUser(); if (is_string($user)) { return $user; } elseif (method_exists($user, 'getAPIUser')) { return $user->getAPIUser()->id; } return $authenticationToken->getUsername(); }. \n### Response: Returns current username or ApiUser id.\n\n@param TokenInterface $authenticationToken\n\n@return int|string.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void registerAsConsumer(final ClassScanner classScanner) { classScanner.registerEntryConsumer(classPathEntry -> { final String entryName = classPathEntry.name(); if (entryName.endsWith(actionClassSuffix)) { try { acceptActionClass(classPathEntry.loadClass()); } catch (Exception ex) { log.debug(\"Invalid Madvoc action, ignoring: \" + entryName); } } else if (classPathEntry.isTypeSignatureInUse(MADVOC_COMPONENT_ANNOTATION)) { try { acceptMadvocComponentClass(classPathEntry.loadClass()); } catch (Exception ex) { log.debug(\"Invalid Madvoc component ignoring: {}\" + entryName); } } }); } \n### Response:", "ground_truth": "Parses class name that matches madvoc-related names.", "predict": "registers a consumer for each class path entry. Provides a way to register entry consumers for Madvoc components and action classes.\n\n@param ClassScanner $classScanner\n\n@return void."}, {"ID": 1280, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (l *list) Front() *element { if l.len == 0 { return nil } return l.root.next }. \n### Response: // Front returns the first element of list l or nil.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void acceptMadvocComponentClass(final Class componentClass) { if (componentClass == null) { return; } if (!checkClass(componentClass)) { return; } madvocComponents.add(() -> madvocContainer.registerComponent(componentClass)); } \n### Response:", "ground_truth": "Registers new Madvoc component.", "predict": "// AcceptMadvocComponentClass accepts a MadvocComponentClass object and registers it with the MadvocContainer."}, {"ID": 1281, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function putProductAction($id, $provider, Request $request) { return $this->handleWriteProduct($provider, $request, $id); }. \n### Response: Updates a product.\n\n@Put(\"/{provider}/products/{id}\")\n\n@ApiDoc(\nrequirements={\n{\"name\"=\"id\", \"dataType\"=\"integer\", \"requirement\"=\"\\d+\", \"description\"=\"product identifier\"},\n{\"name\"=\"provider\", \"dataType\"=\"string\", \"requirement\"=\"[A-Za-z0-9.]*\", \"description\"=\"product provider\"}\n},\ninput={\"class\"=\"sonata_product_api_form_product\", \"name\"=\"\", \"groups\"={\"sonata_api_write\"}},\noutput={\"class\"=\"Sonata\\ProductBundle\\Entity\\BaseProduct\", \"groups\"={\"sonata_api_read\"}},\nstatusCodes={\n200=\"Returned when successful\",\n400=\"Returned when an error has occurred while product update\",\n404=\"Returned when unable to find product\"\n}\n)\n\n@Route(requirements={\"provider\"=\"[A-Za-z0-9.]*\"})\n\n@param int     $id       A Product identifier\n@param string  $provider A product provider name\n@param Request $request  A Symfony request\n\n@throws NotFoundHttpException\n\n@return Product.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static ClassLoader getSystemClassLoader() { if (System.getSecurityManager() == null) { return ClassLoader.getSystemClassLoader(); } else { return AccessController.doPrivileged( (PrivilegedAction<ClassLoader>) ClassLoader::getSystemClassLoader); } } \n### Response:", "ground_truth": "Returns system class loader.", "predict": "This method is used to retrieve the system classloader. It is called if the system's security manager is null, otherwise it will be called with aPrivileged action. This method is useful for accessing system-level resources that are not accessible otherwise."}, {"ID": 1282, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public boolean exists(final FedoraSession session, final String path) { final Session jcrSession = getJcrSession(session); try { return jcrSession.nodeExists(path); } catch (final RepositoryException e) { throw new RepositoryRuntimeException(e); } }. \n### Response: test node existence at path\n\n@param session the session\n@param path the path\n@return whether T exists at the given path.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static InputStream getResourceAsStream(final String resourceName, final ClassLoader callingClass) throws IOException { URL url = getResourceUrl(resourceName, callingClass); if (url != null) { return url.openStream(); } return null; } \n### Response:", "ground_truth": "Opens a resource of the specified name for reading.\n@see #getResourceUrl(String, ClassLoader)", "predict": "This method returns an InputStream for a resource specified by the resourceName and the calling classloader.\n\n@param resourceName the name of the resource\n@param callingClass the classloader of the resource\n@return an InputStream for the specified resource.\n\nNote: This method is part of the Java Persistence API (JPA) and is used to access resources in a persistence unit (PU). It is typically used in conjunction with the PersistencePersistenceManager class."}, {"ID": 1283, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def artist_commentary_versions(self, post_id, updater_id): \"\"\"Return list of artist commentary versions. Parameters: updater_id (int): post_id (int): \"\"\" params = {'search[updater_id]': updater_id, 'search[post_id]': post_id} return self._get('artist_commentary_versions.json', params). \n### Response: Return list of artist commentary versions.\n\n        Parameters:\n            updater_id (int):\n            post_id (int):.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static InputStream getResourceAsStream(final String resourceName, final ClassLoader callingClass, final boolean useCache) throws IOException { URL url = getResourceUrl(resourceName, callingClass); if (url != null) { URLConnection urlConnection = url.openConnection(); urlConnection.setUseCaches(useCache); return urlConnection.getInputStream(); } return null; } \n### Response:", "ground_truth": "Opens a resource of the specified name for reading. Controls caching,\nthat is important when the same jar is reloaded using custom classloader.", "predict": "Provides an InputStream for a specified resource.\n\n        Parameters:\n            resourceName (String):\n            callingClass (Class):\n            useCache (boolean):."}, {"ID": 1284, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected function applyConfig(array $config) : void { $this->applyRules(ArrayHelper::get($config, 'rules', [])); $this->applyRoles(ArrayHelper::get($config, 'roles', [])); $this->applyPermissions(ArrayHelper::get($config, 'permissions', [])); }. \n### Response: Apply received config for rbac.\n@param array $config\n@return void.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static InputStream getClassAsStream(final Class clazz) throws IOException { return getResourceAsStream(ClassUtil.convertClassNameToFileName(clazz), clazz.getClassLoader()); } \n### Response:", "ground_truth": "Opens a class of the specified name for reading using class classloader.\n@see #getResourceAsStream(String, ClassLoader)", "predict": "Class clazz.\n@return InputStream."}, {"ID": 1285, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def drop_capabilities(keep=[]): \"\"\" Drop all capabilities this process has. @param keep: list of capabilities to not drop \"\"\" capdata = (libc.CapData * 2)() for cap in keep: capdata[0].effective |= (1 << cap) capdata[0].permitted |= (1 << cap) libc.capset(ctypes.byref(libc.CapHeader(version=libc.LINUX_CAPABILITY_VERSION_3, pid=0)), ctypes.byref(capdata)). \n### Response: Drop all capabilities this process has.\n    @param keep: list of capabilities to not drop.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static InputStream getClassAsStream(final String className, final ClassLoader classLoader) throws IOException { return getResourceAsStream(ClassUtil.convertClassNameToFileName(className), classLoader); } \n### Response:", "ground_truth": "Opens a class of the specified name for reading using provided class loader.", "predict": "getClassAsStream(className, classLoader)"}, {"ID": 1286, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private function importLine() { $import = false; $from = false; while (!$this->eol()) { $c = $this->peek(); $tok = null; $m = null; if ($c === '\\\\') { $m = $this->get(2); } elseif ($this->scan('/[,\\\\.;\\\\*]+/')) { $tok = 'OPERATOR'; } elseif ($this->scan(\"/[ \\t]+/\")) { } elseif (($m = $this->scan('/import\\\\b|from\\\\b/'))) { if ($m === 'import') { $import = true; } elseif ($m === 'from') { $from = true; } else { assert(0); } $tok = 'IDENT'; } elseif ($this->scan('/[_a-zA-Z]\\w*/')) { assert($from || $import); if ($import) { // from module import *item*, or just import *item* $tok = 'USER_FUNCTION'; $this->userDefs[$this->match()] = 'TYPE'; } else { // from *module* ...[import item], the module is not imported $tok = 'IDENT'; } } else { break; } $this->record(($m !== null) ? $m : $this->match(), $tok); } }. \n### Response: mini-scanner to handle highlighting module names in import lines.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public RouteChunk add(final String newValue) { RouteChunk routeChunk = new RouteChunk(routes, this, newValue); if (children == null) { children = new RouteChunk[] {routeChunk}; } else { children = ArraysUtil.append(children, routeChunk); } return routeChunk; } \n### Response:", "ground_truth": "Adds a new child to the tree.", "predict": "This method adds a new RouteChunk to the list of children of the given RouteChunk object. It creates a new RouteChunk object and appends it to the existing children array. Finally, it returns the new RouteChunk object."}, {"ID": 1287, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected function _cleanCurrent() { if($this->_current) { $current = $this->_current; $this->_current = null; return $this->formatTemplate($current.'End', []); } return ''; }. \n### Response: Cleans the current modal part and return necessary HTML closing elements.\n\n@return string An HTML string containing closing elements..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public RouteChunk findOrCreateChild(final String value) { if (children != null) { for (RouteChunk child : children) { if (child.get().equals(value)) { return child; } } } return add(value); } \n### Response:", "ground_truth": "Finds existing chunk or creates a new one if does not exist.", "predict": "Finds or creates a child route chunk based on the given value.\n\n@return RouteChunk The found or created child route chunk."}, {"ID": 1288, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function clear() { $this->currentOutput = ''; $this->accruedInput = ''; $this->accruedInputWithoutFormatting = ''; $this->formattingTemplate = ''; $this->lastMatchPosition = 0; $this->currentFormattingPattern = ''; $this->prefixBeforeNationalNumber = ''; $this->extractedNationalPrefix = ''; $this->nationalNumber = ''; $this->ableToFormat = true; $this->inputHasFormatting = false; $this->positionToRemember = 0; $this->originalPosition = 0; $this->isCompleteNumber = false; $this->isExpectingCountryCallingCode = false; $this->possibleFormats = array(); $this->shouldAddSpaceAfterNationalPrefix = false; if ($this->currentMetadata !== $this->defaultMetadata) { $this->currentMetadata = $this->getMetadataForRegion($this->defaultCountry); } }. \n### Response: Clears the internal state of the formatter, so it can be reused..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void parseRequest() throws IOException { if (ServletUtil.isMultipartRequest(request)) { parseRequestStream(request.getInputStream(), characterEncoding); } else { Enumeration names = request.getParameterNames(); while (names.hasMoreElements()) { String paramName = (String) names.nextElement(); String[] values = request.getParameterValues(paramName); putParameters(paramName, values); } } } \n### Response:", "ground_truth": "Checks if request if multi-part and parse it. If request is not multi-part it\ncopies all parameters, to make usage the same in both cases.\n\n@see MultipartRequestWrapper", "predict": "Parses the request and extracts the parameters. If multipart request is present, parses the request stream and extracts the parameters. Otherwise, extracts the parameters from the request parameters and puts them in the parameters array."}, {"ID": 1289, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function camo($url) { return $this->formatter->formatCamoUrl( $this->domain, $this->getDigest($url), $url ); }. \n### Response: Camoflauge all urls\n\n@param $url\n\n@return string.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @SuppressWarnings(\"unchecked\") protected Object convertToCollection(final Object value, final Class destinationType, final Class componentType) { return typeConverterManager.convertToCollection(value, destinationType, componentType); } \n### Response:", "ground_truth": "Converter to collection.", "predict": "Converts an object to a collection of components.\n\n@param value\n\n@return the converted object.\n\n@SuppressWarnings(\"unchecked\")"}, {"ID": 1290, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function setProxy($host, $port, $type = CURLPROXY_HTTP) { static $types_str = [ 'HTTP', 'SOCKS4', 'SOCKS5', 'SOCKS4A', 'SOCKS5_HOSTNAME' ]; $types = []; foreach ($types_str as $type_str) { if (defined('CURLPROXY_' . $type_str)) { $types[] = constant('CURLPROXY_' . $type_str); } } if (! in_array($type, $types)) { throw new \\Exception('Invalid proxy type specified.'); } $this->_proxy['host'] = $host; $this->_proxy['port'] = (int) $port; $this->_proxy['type'] = $type; }. \n### Response: Sets the proxy\n\n@param string       $host Proxy host\n@param int          $port Proxy port\n@param int optional $type Proxy type, defaults to HTTP\n\n@return void\n@throws \\Exception.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected Object invokeSetter(final Setter setter, final BeanProperty bp, Object value) { try { final MapperFunction setterMapperFunction = setter.getMapperFunction(); if (setterMapperFunction != null) { value = setterMapperFunction.apply(value); } final Class type = setter.getSetterRawType(); if (ClassUtil.isTypeOf(type, Collection.class)) { Class componentType = setter.getSetterRawComponentType(); value = convertToCollection(value, type, componentType); } else { // no collections value = convertType(value, type); } setter.invokeSetter(bp.bean, value); } catch (Exception ex) { if (isSilent) { return null; } throw new BeanException(\"Setter failed: \" + setter, ex); } return value; } \n### Response:", "ground_truth": "Invokes setter, but first converts type to match the setter type.", "predict": "Invokes the specified setter method for the given bean property and returns the result.\n\n@param Setter setter The setter method to invoke\n@param BeanProperty bp The bean property being modified\n@param Object value The object to be modified by the setter method\n@return The object that was returned by the setter method or null if the setter method failed.\n@throws BeanException If the setter method failed."}, {"ID": 1291, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void validateNotEmpty( String stringToCheck, String argumentName ) throws NullArgumentException { validateNotEmpty( stringToCheck, false, argumentName ); }. \n### Response: Validates that the string is not null and not an empty string without trimming the string.\n\n@param stringToCheck The object to be tested.\n@param argumentName  The name of the object, which is used to construct the exception message.\n\n@throws NullArgumentException if the stringToCheck is either null or zero characters long..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void arrayForcedSet(final BeanProperty bp, Object array, final int index, Object value) { Class componentType = array.getClass().getComponentType(); array = ensureArraySize(bp, array, componentType, index); value = convertType(value, componentType); Array.set(array, index, value); } \n### Response:", "ground_truth": "Sets the array element forced. If index is greater then arrays length, array will be expanded to the index.\nIf speed is critical, it is better to allocate an array with proper size before using this method.", "predict": "This method sets the value of an array property using the forced set method of the BeanProperty class. It first checks if the array is null or zero-length, and if so, it throws a NullArgumentException. It then ensures that the array has the correct size, converts the value to the correct type, and sets the value at the specified index.\n\n@param bp The BeanProperty object that represents the array property.\n@param array The object to be set in the array property.\n@param index The index of the array element to be set.\n@param value The object to be set in the array property.\n\n@throws NullArgumentException if the array is null or zero-length, or if the value is not of the correct type for the array element at the specified index.\n\n"}, {"ID": 1292, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def opendocs(where='index', how='default'): ''' Rebuild documentation and opens it in your browser. Use the first argument to specify how it should be opened: `d` or `default`: Open in new tab or new window, using the default method of your browser. `t` or `tab`: Open documentation in new tab. `n`, `w` or `window`: Open documentation in new window. ''' import webbrowser docs_dir = os.path.join( os.path.dirname(os.path.abspath(__file__)), 'docs') index = os.path.join(docs_dir, '_build/html/%s.html' % where) builddocs('html') url = 'file://%s' % os.path.abspath(index) if how in ('d', 'default'): webbrowser.open(url) elif how in ('t', 'tab'): webbrowser.open_new_tab(url) elif how in ('n', 'w', 'window'): webbrowser.open_new(url). \n### Response: Rebuild documentation and opens it in your browser.\n\n    Use the first argument to specify how it should be opened:\n\n        `d` or `default`: Open in new tab or new window, using the default\n        method of your browser.\n\n        `t` or `tab`: Open documentation in new tab.\n\n        `n`, `w` or `window`: Open documentation in new window..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected Object createBeanProperty(final BeanProperty bp) { Setter setter = bp.getSetter(true); if (setter == null) { return null; } Class type = setter.getSetterRawType(); Object newInstance; try { newInstance = ClassUtil.newInstance(type); } catch (Exception ex) { if (isSilent) { return null; } throw new BeanException(\"Invalid property: \" + bp.name, bp, ex); } newInstance = invokeSetter(setter, bp, newInstance); return newInstance; } \n### Response:", "ground_truth": "Creates new instance for current property name through its setter.\nIt uses default constructor!", "predict": "Create a new bean property.\n\n    This method creates a new bean property by calling the get setter method\n    with the true argument, and checking if the setter is null. If it is,\n    return null.\n\n    If the setter is not null, it retrieves the raw type of the setter and\n     checks if it is of the type expected. If it is not, it throws an\n    Exception with the message \"Invalid property: \" + bp.name.\n\n    Finally, it calls the invoke setter method with the setter and the new\n    newInstance object as arguments, and returns the new object.\n\n    If the method is called with an invalid property, an exception is thrown."}, {"ID": 1293, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def from_caller_module_root(): '''return a `Path` from module root which include the caller''' import inspect all_stack = list(inspect.stack()) curframe = inspect.currentframe() calframe = inspect.getouterframes(curframe, 2) module = inspect.getmodule(calframe[1].frame) if not module: raise RuntimeError('caller is not a module') root_module_name = module.__name__.partition('.')[0] fullpath = sys.modules[root_module_name].__file__ return Path(fullpath). \n### Response: return a `Path` from module root which include the caller.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected Class extractType(final BeanProperty bp) { Getter getter = bp.getGetter(isDeclared); if (getter != null) { if (bp.index != null) { Class type = getter.getGetterRawComponentType(); return type == null ? Object.class : type; } return getter.getGetterRawType(); } return null; // this should not happens } \n### Response:", "ground_truth": "Extracts type of current property.", "predict": "This method extracts the type of a `BeanProperty` using the `Getter` method and checks if the `isDeclared` flag is set to true. If it is, it returns the raw component type of the `Getter` method. If not, it returns the raw type of the `Getter` method. However, it should not happen that the method returns `null`."}, {"ID": 1294, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func NewClearScrollService(client *Client) *ClearScrollService { return &ClearScrollService{ client: client, scrollId: make([]string, 0), } }. \n### Response: // NewClearScrollService creates a new ClearScrollService..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void stop(final HttpServletRequest servletRequest, final HttpServletResponse servletResponse) { final HttpSession httpSession = servletRequest.getSession(false); if (httpSession != null) { httpSession.removeAttribute(AUTH_SESSION_NAME); } final Cookie cookie = ServletUtil.getCookie(servletRequest, AUTH_COOKIE_NAME); if (cookie == null) { return; } cookie.setMaxAge(0); cookie.setPath(\"/\"); servletResponse.addCookie(cookie); } \n### Response:", "ground_truth": "", "predict": "// Stop the application.."}, {"ID": 1295, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def update_fw_local_router(self, net_id, subnet_id, router_id, os_result): \"\"\"Update the FW with router attributes. \"\"\" fw_dict = self.get_fw_dict() fw_dict.update({'router_id': router_id, 'router_net_id': net_id, 'router_subnet_id': subnet_id}) self.store_dummy_router_net(net_id, subnet_id, router_id) self.update_fw_local_result(os_result=os_result). \n### Response: Update the FW with router attributes..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void start(final HttpServletRequest httpServletRequest, final HttpServletResponse httpServletResponse) { final HttpSession httpSession = httpServletRequest.getSession(true); httpSession.setAttribute(AUTH_SESSION_NAME, this); final Cookie cookie = new Cookie(AUTH_COOKIE_NAME, authTokenValue); //cookie.setDomain(SSORealm.SSO_DOMAIN); cookie.setMaxAge(cookieMaxAge); cookie.setPath(\"/\"); httpServletResponse.addCookie(cookie); } \n### Response:", "ground_truth": "Starts new user session.", "predict": "Start the session and set the auth cookie.."}, {"ID": 1296, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def add_logout_button_to_menu(menu, priority = 20, html_options = {}) if logout_link_path html_options = html_options.reverse_merge(method: logout_link_method || :get) menu.add id: 'logout', priority: priority, html_options: html_options, label: -> { I18n.t 'active_admin.logout' }, url: -> { render_or_call_method_or_proc_on self, active_admin_namespace.logout_link_path }, if: :current_active_admin_user? end end. \n### Response: The default logout menu item\n\n @param [ActiveAdmin::MenuItem] menu The menu to add the logout link to\n @param [Fixnum] priority The numeric priority for the order in which it appears\n @param [Hash] html_options An options hash to pass along to link_to.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static Date toDate(final LocalDate localDate) { return Date.from(localDate.atStartOfDay(ZoneId.systemDefault()).toInstant()); } \n### Response:", "ground_truth": "Converts local date to Date.", "predict": "The method returns a Date object representing the local date and time of the specified LocalDate.\n\n"}, {"ID": 1297, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected function setAuthorAttribute($items) { if (is_array($items) === false) { return $items; } return array_map(function ($item) { return $this->getNestedContext(Person::class, $item); }, $items); }. \n### Response: Set the authors\n\n@param array $items\n@return array.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static Calendar toCalendar(final LocalDateTime localDateTime) { return GregorianCalendar.from(ZonedDateTime.of(localDateTime, ZoneId.systemDefault())); } \n### Response:", "ground_truth": "Converts local date time to Calendar.", "predict": "Method-level comment for Calendar.toCalendar():\n\nThis method returns a Calendar object from a LocalDateTime. It is used to convert a LocalDateTime to a GregorianCalendar object.\n\n@param LocalDateTime localDateTime\n@return Calendar object."}, {"ID": 1298, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void putList(Collection<String> elements) { if (elements == null) { putNumber1(0); } else { Utils.checkArgument(elements.size() < 256, \"Collection has to be smaller than 256 elements\"); putNumber1(elements.size()); for (String string : elements) { putString(string); } } }. \n### Response: Put a collection of strings to the frame.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public Class defineProxy(final Class target) { ProxyProxettaFactory builder = proxetta.proxy(); builder.setTarget(target); return builder.define(); } \n### Response:", "ground_truth": "Generates new class.", "predict": "Define a proxy for the given target class."}, {"ID": 1299, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public boolean isValid() { if (this.cpuCores >= 0 && this.heapMemoryInMB >= 0 && this.directMemoryInMB >= 0 && this.nativeMemoryInMB >= 0 && this.stateSizeInMB >= 0) { for (Resource resource : extendedResources.values()) { if (resource.getValue() < 0) { return false; } } return true; } else { return false; } }. \n### Response: Check whether all the field values are valid.\n\n@return True if all the values are equal or greater than 0, otherwise false..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void add(final Check check) { String name = check.getName(); List<Check> list = map.computeIfAbsent(name, k -> new ArrayList<>()); list.add(check); } \n### Response:", "ground_truth": "Adds validation checks.", "predict": "Adds a new check object to the map.\n\n@param name The name of the check to add.\n@return The check object with the specified name if it exists, or null if it doesn't.\n\nNote: The `computeIfAbsent` method is used to dynamically add checks to the map based on their names. It takes a second argument, `k`, which is a lambda expression that returns a new `ArrayList` containing the checks with the specified name. This allows the code to add checks dynamically, without having to manually iterate over the map and add each check individually."}, {"ID": 1300, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected function validateRequiredParameters(array $required, array $params) { foreach ($required as $param) { if (!isset($params[$param])) { throw new MissingArgumentException(sprintf('The \"%s\" parameter is required.', $param)); } } }. \n### Response: Validate parameters array\n\n@param string[] $required required properties (array keys)\n@param array $params   array to check for existence of the required keys\n\n@throws MissingArgumentException if a required parameter is missing.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static ValidationContext resolveFor(final Class<?> target) { ValidationContext vc = new ValidationContext(); vc.addClassChecks(target); return vc; } \n### Response:", "ground_truth": "Resolve validation context for provided target class.\n@see #addClassChecks(Class)", "predict": "Resolve ValidationContext for target class\n\n@param Class<?> $target   target class to resolve validation context for\n\n@return ValidationContext with class checks enabled.\n\nNote: This method is used to resolve the ValidationContext for a given target class. It creates a new ValidationContext and adds class checks to it. The returned ValidationContext will have class checks enabled."}, {"ID": 1301, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public Set<SortedSet<T>> allSets() { final List<UBNode<T>> allEndOfPathNodes = getAllEndOfPathNodes(this.rootNodes); final Set<SortedSet<T>> allSets = new LinkedHashSet<>(); for (UBNode<T> endOfPathNode : allEndOfPathNodes) { allSets.add(endOfPathNode.set()); } return allSets; }. \n### Response: Returns all sets in this UBTree.\n@return all sets in this UBTree.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void addClassChecks(final Class target) { final List<Check> list = cache.get(target, () -> { final List<Check> newList = new ArrayList<>(); final ClassDescriptor cd = ClassIntrospector.get().lookup(target); final PropertyDescriptor[] allProperties = cd.getAllPropertyDescriptors(); for (PropertyDescriptor propertyDescriptor : allProperties) { collectPropertyAnnotationChecks(newList, propertyDescriptor); } return newList; }); addAll(list); } \n### Response:", "ground_truth": "Parses class annotations and adds all checks.\n@see #resolveFor(Class)", "predict": "Adds all checks to the cache.\n@return Adds all checks to the cache.\n\n"}, {"ID": 1302, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (p *Pod) getAppsHashes() ([]types.Hash, error) { apps, err := p.getApps() if err != nil { return nil, err } var hashes []types.Hash for _, a := range apps { hashes = append(hashes, a.Image.ID) } return hashes, nil }. \n### Response: // getAppsHashes returns a list of the app hashes in the pod.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void collectPropertyAnnotationChecks(final List<Check> annChecks, final PropertyDescriptor propertyDescriptor) { FieldDescriptor fd = propertyDescriptor.getFieldDescriptor(); if (fd != null) { Annotation[] annotations = fd.getField().getAnnotations(); collectAnnotationChecks(annChecks, propertyDescriptor.getType(), propertyDescriptor.getName(), annotations); } MethodDescriptor md = propertyDescriptor.getReadMethodDescriptor(); if (md != null) { Annotation[] annotations = md.getMethod().getAnnotations(); collectAnnotationChecks(annChecks, propertyDescriptor.getType(), propertyDescriptor.getName(), annotations); } md = propertyDescriptor.getWriteMethodDescriptor(); if (md != null) { Annotation[] annotations = md.getMethod().getAnnotations(); collectAnnotationChecks(annChecks, propertyDescriptor.getType(), propertyDescriptor.getName(), annotations); } } \n### Response:", "ground_truth": "Process all annotations of provided properties.", "predict": "// collectPropertyAnnotationChecks collects all the property annotation checks for the given property descriptor and its fields/methods."}, {"ID": 1303, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function format_datetime($field) { $d = $this->current_row[$field]; if (!$d) { $this->current_row[$field] = '-'; } else { if ($d instanceof MongoDate) { $this->current_row[$field] = date( $this->app->getConfig('locale/datetime', 'd/m/Y H:i:s'), $d->sec ); } elseif (is_numeric($d)) { $this->current_row[$field] = date( $this->app->getConfig('locale/datetime', 'd/m/Y H:i:s'), $d ); } elseif ($d instanceof \\DateTime) { $this->current_row[$field] = $d->format($this->app->getConfig('locale/datetime', 'd/m/Y H:i:s')); } else { $d = strtotime($d); $this->current_row[$field] = $d ? date( $this->app->getConfig('locale/datetime', 'd/m/Y H:i:s'), $d ) : '-'; } } }. \n### Response: Format field as datetime.\n\n@param string $field.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @SuppressWarnings({\"unchecked\"}) protected void collectAnnotationChecks(final List<Check> annChecks, final Class targetType, final String targetName, final Annotation[] annotations) { for (Annotation annotation : annotations) { Constraint c = annotation.annotationType().getAnnotation(Constraint.class); Class<? extends ValidationConstraint> constraintClass; if (c == null) { // if constraint is not available, try lookup String constraintClassName = annotation.annotationType().getName() + \"Constraint\"; try { constraintClass = ClassLoaderUtil.loadClass(constraintClassName, this.getClass().getClassLoader()); } catch (ClassNotFoundException ingore) { continue; } } else { constraintClass = c.value(); } ValidationConstraint vc; try { vc = newConstraint(constraintClass, targetType); } catch (Exception ex) { throw new VtorException(\"Invalid constraint: \" + constraintClass.getClass().getName(), ex); } vc.configure(annotation); Check check = new Check(targetName, vc); copyDefaultCheckProperties(check, annotation); annChecks.add(check); } } \n### Response:", "ground_truth": "Collect annotations for some target.", "predict": "Collects all validation checks for the specified target type, target name, and annotations.\n\n@param List<Check> annChecks The list of validation checks.\n\n@return The list of validation checks.\n\n@throws VtorException If any validation check fails to create."}, {"ID": 1304, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (bow *Browser) httpPOST(u *url.URL, ref *url.URL, contentType string, body io.Reader) error { req, err := bow.buildRequest(\"POST\", u.String(), ref, body) if err != nil { return err } req.Header.Set(\"Content-Type\", contentType) return bow.httpRequest(req) }. \n### Response: // httpPOST makes an HTTP POST request for the given URL.\n// When via is not nil, and AttributeSendReferer is true, the Referer header will\n// be set to ref..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void copyDefaultCheckProperties(final Check destCheck, final Annotation annotation) { Integer severity = (Integer) ClassUtil.readAnnotationValue(annotation, ANN_SEVERITY); destCheck.setSeverity(severity.intValue()); String[] profiles = (String[]) ClassUtil.readAnnotationValue(annotation, ANN_PROFILES); destCheck.setProfiles(profiles); String message = (String) ClassUtil.readAnnotationValue(annotation, ANN_MESSAGE); destCheck.setMessage(message); } \n### Response:", "ground_truth": "Copies default properties from annotation to the check.", "predict": "// Copy the default check properties of a Check object to a new Check object.\n// The destCheck parameter is the new Check object, and the annotation parameter\n// is the annotation to be copied."}, {"ID": 1305, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function getCurrentPermissionArray(ResourceNode $resourceNode) { $currentRoles = $this->tokenStorage->getToken()->getRoles(); $roleNames = array_map(function (RoleInterface $roleName) { return $roleName->getRole(); }, $currentRoles); $creatable = []; if ($this->isManager($resourceNode)) { /** @var ResourceType[] $resourceTypes */ $resourceTypes = $this->om->getRepository('ClarolineCoreBundle:Resource\\ResourceType')->findAll(); foreach ($resourceTypes as $resourceType) { $creatable[] = $resourceType->getName(); } $perms = array_fill_keys(array_values($this->maskManager->getPermissionMap($resourceNode->getResourceType())), true); } else { $creatable = $this->getCreatableTypes($roleNames, $resourceNode); $perms = $this->maskManager->decodeMask( $this->rightsRepo->findMaximumRights($roleNames, $resourceNode), $resourceNode->getResourceType() ); } return array_merge($perms, ['create' => $creatable]); }. \n### Response: maybe use that one in the voter later because it's going to be usefull.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private static String encodeUriComponent(final String source, final String encoding, final URIPart uriPart) { if (source == null) { return null; } byte[] bytes = encodeBytes(StringUtil.getBytes(source, encoding), uriPart); char[] chars = new char[bytes.length]; for (int i = 0; i < bytes.length; i++) { chars[i] = (char) bytes[i]; } return new String(chars); } \n### Response:", "ground_truth": "Encodes single URI component.", "predict": "This method encodes a URI component using the specified source, encoding, and URI part. It returns the encoded string. This method is useful for creating URLs or other URIs."}, {"ID": 1306, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function replace($id, $config = array(), $events = array()) { $out = \"\"; if (!$this->initialized) { $out .= $this->init(); } $_config = $this->configSettings($config, $events); $js = $this->returnGlobalEvents(); if (!empty($_config)) { $js .= \"CKEDITOR.replace('\".$id.\"', \".$this->jsEncode($_config).\");\"; } else { $js .= \"CKEDITOR.replace('\".$id.\"');\"; } $out .= $this->script($js); if (!$this->returnOutput) { print $out; $out = \"\"; } return $out; }. \n### Response: Replaces a &lt;textarea&gt; with a %CKEditor instance.\n\n@param $id (string) The id or name of textarea element.\n@param $config (array) The specific configurations to apply to this editor instance (optional).\n@param $events (array) Event listeners for this editor instance (optional).\n\nExample 1: adding %CKEditor to &lt;textarea name=\"article\"&gt;&lt;/textarea&gt; element:\n@code\n$CKEditor = new CKEditor();\n$CKEditor->replace(\"article\");\n@endcode.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String encode(final String string, final String encoding) { return encodeUriComponent(string, encoding, URIPart.UNRESERVED); } \n### Response:", "ground_truth": "Encodes string using default RFCP rules.", "predict": "Encodes a string using the specified encoding.\n\nExample:\n```java\nString encodedString = encode(\"hello world\");\n```\n@return The encoded string."}, {"ID": 1307, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void connect(String endpointID, String appID, boolean shouldReconnect, final Object initialPresence, Context context, final ConnectCompletionListener completionListener) { if ((endpointID != null) && (appID != null) && (endpointID.length() > 0) && (appID.length() > 0)) { connectionInProgress = true; reconnect = shouldReconnect; applicationID = appID; appContext = context; APIGetToken request = new APIGetToken(context, baseURL) { @Override public void transactionComplete() { super.transactionComplete(); if (success) { connect(this.token, initialPresence, appContext, new ConnectCompletionListener() { @Override public void onError(final String errorMessage) { connectionInProgress = false; postConnectError(completionListener, errorMessage); } }); } else { connectionInProgress = false; postConnectError(completionListener, this.errorMessage); } } }; request.appID = appID; request.endpointID = endpointID; request.go(); } else { postConnectError(completionListener, \"AppID and endpointID must be specified\"); } }. \n### Response: Connect to the Respoke infrastructure and authenticate in development mode using the specified endpoint ID and app ID.\nAttempt to obtain an authentication token automatically from the Respoke infrastructure.\n\n@param endpointID          The endpoint ID to use when connecting\n@param appID               Your Application ID\n@param shouldReconnect     Whether or not to automatically reconnect to the Respoke service when a disconnect occurs.\n@param initialPresence     The optional initial presence value to set for this client\n@param context             An application context with which to access system resources\n@param completionListener  A listener to be called when an error occurs, passing a string describing the error.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String encodeScheme(final String scheme, final String encoding) { return encodeUriComponent(scheme, encoding, URIPart.SCHEME); } \n### Response:", "ground_truth": "Encodes the given URI scheme with the given encoding.", "predict": "This method encodes a scheme and encoding parameter in a URI component.\n\n@param scheme           The scheme to use in the URI\n@param encoding          The encoding to use for the scheme and encoding parameter\n@return a URI component with the specified scheme and encoding\n\nThis method is useful for creating URIs that can be used in applications that require them to be formatted correctly."}, {"ID": 1308, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function setnx($key, $value) { try { return $this->getRedis()->setnx($key, $value); } catch (RedisException $ex) { throw new ConnectException(); } }. \n### Response: Set key value if not exists\n@param string $key key\n@param mixed $value value\n@return bool returns true, if operation complete succesfull, else false\n@throws ConnectException exception on connection to redis instance.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String encodeHost(final String host, final String encoding) { return encodeUriComponent(host, encoding, URIPart.HOST); } \n### Response:", "ground_truth": "Encodes the given URI host with the given encoding.", "predict": "Encodes the host information in a URI component.\n@param string $host host\n@param string $encoding encoding\n@return string encoded URI component\n@throws Exception any exception that may occur during the encoding process."}, {"ID": 1309, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def sort_snps(snps): \"\"\" Sort SNPs based on ordered chromosome list and position. \"\"\" sorted_list = sorted(snps[\"chrom\"].unique(), key=_natural_sort_key) # move PAR and MT to the end of the dataframe if \"PAR\" in sorted_list: sorted_list.remove(\"PAR\") sorted_list.append(\"PAR\") if \"MT\" in sorted_list: sorted_list.remove(\"MT\") sorted_list.append(\"MT\") # convert chrom column to category for sorting # https://stackoverflow.com/a/26707444 snps[\"chrom\"] = snps[\"chrom\"].astype( CategoricalDtype(categories=sorted_list, ordered=True) ) # sort based on ordered chromosome list and position snps = snps.sort_values([\"chrom\", \"pos\"]) # convert chromosome back to object snps[\"chrom\"] = snps[\"chrom\"].astype(object) return snps. \n### Response: Sort SNPs based on ordered chromosome list and position..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String encodePort(final String port, final String encoding) { return encodeUriComponent(port, encoding, URIPart.PORT); } \n### Response:", "ground_truth": "Encodes the given URI port with the given encoding.", "predict": "encodePort(port, encoding)"}, {"ID": 1310, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def discretize(self, contact_id=0, accuracy=0.004, dt=0.001): \"\"\" Sample this motion track into discretized motion events. Args: contact_id: contact point id accuracy: motion minimum difference in space dt: sample time difference \"\"\" if not self.event_points: return [] events = [] action_dt = accuracy / self.speed dt = dt or action_dt ep0 = self.event_points[0] for _ in range(int(ep0[0] / dt)): events.append(['s', dt]) events.append(['d', ep0[1], contact_id]) for i, ep in enumerate(self.event_points[1:]): prev_ts = self.event_points[i][0] curr_ts = ep[0] p0 = self.event_points[i][1] p1 = ep[1] if p0 == p1: # hold for _ in range(int((curr_ts - prev_ts) / dt)): events.append(['s', dt]) else: # move dpoints = track_sampling([p0, p1], accuracy) for p in dpoints: events.append(['m', p, contact_id]) for _ in range(int(action_dt / dt)): events.append(['s', dt]) events.append(['u', contact_id]) return events. \n### Response: Sample this motion track into discretized motion events.\n\n        Args:\n            contact_id: contact point id\n            accuracy: motion minimum difference in space\n            dt: sample time difference.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String encodePath(final String path, final String encoding) { return encodeUriComponent(path, encoding, URIPart.PATH); } \n### Response:", "ground_truth": "Encodes the given URI path with the given encoding.", "predict": "encodePath():\n```\n    \"\"\"Encode a path as a URI component.\n\n    Args:\n        path: the path to encode\n        encoding: the encoding to use for the URI component\n        URIPart.PATH: the part of the URI to use for the path\n\n    Returns:\n        the encoded path as a string\n    \"\"\"\n    return encodeUriComponent(path, encoding, URIPart.PATH);\n```"}, {"ID": 1311, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected function getDefaultTheme() { if (!is_null($this->default) && array_key_exists($this->default, $this->themes)) { return $this->themes[$this->default]; } return false; }. \n### Response: Gets the default theme.\n\n@return ThemeInterface.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String encodeQuery(final String query, final String encoding) { return encodeUriComponent(query, encoding, URIPart.QUERY); } \n### Response:", "ground_truth": "Encodes the given URI query with the given encoding.", "predict": "Encodes the given query string using the specified encoding."}, {"ID": 1312, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def wrap(self, starter_cls): \"\"\" If starter_cls is not a ProcessStarter, assume it's the legacy preparefunc and return it bound to a CompatStarter. \"\"\" if isinstance(starter_cls, type) and issubclass(starter_cls, ProcessStarter): return starter_cls depr_msg = 'Pass a ProcessStarter for preparefunc' warnings.warn(depr_msg, DeprecationWarning, stacklevel=3) return functools.partial(CompatStarter, starter_cls). \n### Response: If starter_cls is not a ProcessStarter, assume it's the legacy\n        preparefunc and return it bound to a CompatStarter..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String encodeQueryParam(final String queryParam, final String encoding) { return encodeUriComponent(queryParam, encoding, URIPart.QUERY_PARAM); } \n### Response:", "ground_truth": "Encodes the given URI query parameter with the given encoding.", "predict": "This method encodes a query parameter using the `encodeUriComponent` method and returns the result."}, {"ID": 1313, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def _make_destination_callable(dest): \"\"\"Creates a callable out of the destination. If it's already callable, the destination is returned. Instead, if the object is a string or a writable object, it's wrapped in a closure to be used later. \"\"\" if callable(dest): return dest elif hasattr(dest, 'write') or isinstance(dest, string_types): return _use_filehandle_to_save(dest) else: raise TypeError(\"Destination must be a string, writable or callable object.\"). \n### Response: Creates a callable out of the destination. If it's already callable,\n    the destination is returned. Instead, if the object is a string or a\n    writable object, it's wrapped in a closure to be used later..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String encodeFragment(final String fragment, final String encoding) { return encodeUriComponent(fragment, encoding, URIPart.FRAGMENT); } \n### Response:", "ground_truth": "Encodes the given URI fragment with the given encoding.", "predict": "This method encodes a fragment of a URI using the specified encoding.\nIt returns the encoded fragment.\n\n"}, {"ID": 1314, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: void fireNewEntry(AsteriskQueueEntryImpl entry) { synchronized (listeners) { for (AsteriskQueueListener listener : listeners) { try { listener.onNewEntry(entry); } catch (Exception e) { logger.warn(\"Exception in onNewEntry()\", e); } } } }. \n### Response: Notifies all registered listener that an entry joins the queue.\n\n@param entry that joins the queue.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected HashMap<String, PropertyDescriptor> inspectProperties() { boolean scanAccessible = classDescriptor.isScanAccessible(); Class type = classDescriptor.getType(); HashMap<String, PropertyDescriptor> map = new HashMap<>(); Method[] methods = scanAccessible ? ClassUtil.getAccessibleMethods(type) : ClassUtil.getSupportedMethods(type); for (int iteration = 0; iteration < 2; iteration++) { // first find the getters, and then the setters! for (Method method : methods) { if (Modifier.isStatic(method.getModifiers())) { continue; // ignore static methods } boolean add = false; boolean issetter = false; String propertyName; if (iteration == 0) { propertyName = ClassUtil.getBeanPropertyGetterName(method); if (propertyName != null) { add = true; issetter = false; } } else { propertyName = ClassUtil.getBeanPropertySetterName(method); if (propertyName != null) { add = true; issetter = true; } } if (add) { MethodDescriptor methodDescriptor = classDescriptor.getMethodDescriptor(method.getName(), method.getParameterTypes(), true); addProperty(map, propertyName, methodDescriptor, issetter); } } } if (classDescriptor.isIncludeFieldsAsProperties()) { FieldDescriptor[] fieldDescriptors = classDescriptor.getAllFieldDescriptors(); String[] prefix = classDescriptor.getPropertyFieldPrefix(); for (FieldDescriptor fieldDescriptor : fieldDescriptors) { Field field = fieldDescriptor.getField(); if (Modifier.isStatic(field.getModifiers())) { continue; // ignore static fields } String name = field.getName(); if (prefix != null) { for (String p : prefix) { if (!name.startsWith(p)) { continue; } name = name.substring(p.length()); break; } } if (!map.containsKey(name)) { // add missing field as a potential property map.put(name, createPropertyDescriptor(name, fieldDescriptor)); } } } return map; } \n### Response:", "ground_truth": "Inspects all properties of target type.", "predict": "Provides a method to inspect the properties of a given class, including its getters and setters, and their accessibility.\n\n@return a HashMap<String, PropertyDescriptor> containing all the properties of the given class.\n\nNote: This method assumes that the class is accessible and that it has been scanned for properties using the `ClassUtil.getAccessibleMethods()` and `ClassUtil.getSupportedMethods()` methods."}, {"ID": 1315, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function CommentFilter() { this.rules = []; this.modifiers = []; this.allowUnknownTypes = true; this.allowTypes = { '1': true, '2': true, '4': true, '5': true, '6': true, '7': true, '8': true, '17': true }; }. \n### Response: Constructor for CommentFilter\n@constructor.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public PropertyDescriptor[] getAllPropertyDescriptors() { if (allProperties == null) { PropertyDescriptor[] allProperties = new PropertyDescriptor[propertyDescriptors.size()]; int index = 0; for (PropertyDescriptor propertyDescriptor : propertyDescriptors.values()) { allProperties[index] = propertyDescriptor; index++; } Arrays.sort(allProperties, new Comparator<PropertyDescriptor>() { @Override public int compare(final PropertyDescriptor pd1, final PropertyDescriptor pd2) { return pd1.getName().compareTo(pd2.getName()); } }); this.allProperties = allProperties; } return allProperties; } \n### Response:", "ground_truth": "Returns all property descriptors.\nProperties are sorted by name.", "predict": "Method for getting all PropertyDescriptors\n@return allProperties.\n\n"}, {"ID": 1316, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def execute(input, negate) method = negate ? :reject : :select input.send(method) do |object| type_count(object).send(comparison.operator, comparison.amount) end end. \n### Response: Creates a new filter\n Not a part of the public API. Subject to change at any time.\n Filters the input models so that only the desired ones are returned.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public Cookie[] cookies() { List<String> newCookies = headers(\"set-cookie\"); if (newCookies == null) { return new Cookie[0]; } List<Cookie> cookieList = new ArrayList<>(newCookies.size()); for (String cookieValue : newCookies) { try { Cookie cookie = new Cookie(cookieValue); cookieList.add(cookie); } catch (Exception ex) { // ignore } } return cookieList.toArray(new Cookie[0]); } \n### Response:", "ground_truth": "Returns list of valid cookies sent from server.\nIf no cookie found, returns an empty array. Invalid cookies are ignored.", "predict": "This method returns a list of cookies from the headers. It first checks if the \"set-cookie\" header is present in the request. If it is not present, it returns an empty list. If it is present, it retrieves the list of cookies and iterates over them, creating new cookies and adding them to a list. Finally, it returns the list of cookies as an array of Cookie objects."}, {"ID": 1317, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected function preamble($size) { $preamble = $this->getPreamble($size); if ($preamble > 0) { $this->writeLines($preamble); } }. \n### Response: Prints newlines from the top to place the current element in the middle\nof the scoreboard.\n\n@param integer $size The size of the current element..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public HttpResponse unzip() { String contentEncoding = contentEncoding(); if (contentEncoding != null && contentEncoding().equals(\"gzip\")) { if (body != null) { headerRemove(HEADER_CONTENT_ENCODING); try { ByteArrayInputStream in = new ByteArrayInputStream(body.getBytes(StringPool.ISO_8859_1)); GZIPInputStream gzipInputStream = new GZIPInputStream(in); ByteArrayOutputStream out = new ByteArrayOutputStream(); StreamUtil.copy(gzipInputStream, out); body(out.toString(StringPool.ISO_8859_1)); } catch (IOException ioex) { throw new HttpException(ioex); } } } return this; } \n### Response:", "ground_truth": "Unzips GZip-ed body content, removes the content-encoding header\nand sets the new content-length value.", "predict": "This method retrieves the content encoding of the response body and, if it is \"gzip\", it removes the original content encoding header and creates a new one with the \"gzip\" content encoding. It then creates a new ByteArrayOutputStream to hold the compressed content and a new GZIPInputStream to read the compressed content. The compressed content is then written to the ByteArrayOutputStream and the original content encoding header is restored. Finally, the method returns the response as is.\n\n@return The response as is."}, {"ID": 1318, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected String removeQuotes( String text ) { assert text != null; if (text.length() > 2) { char first = text.charAt(0); // Need to remove these only if they are paired ... if (first == '\"' || first == '\\'') { int indexOfLast = text.length() - 1; char last = text.charAt(indexOfLast); if (last == first) { text = text.substring(1, indexOfLast); } } } return text; }. \n### Response: Remove any leading and trailing single-quotes or double-quotes from the supplied text.\n\n@param text the input text; may not be null\n@return the text without leading and trailing quotes, or text if there were no square brackets or quotes.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public HttpResponse close() { HttpConnection httpConnection = httpRequest.httpConnection; if (httpConnection != null) { httpConnection.close(); httpRequest.httpConnection = null; } return this; } \n### Response:", "ground_truth": "Closes requests connection if it was open.\nShould be called when using keep-alive connections.\nOtherwise, connection will be already closed.", "predict": "Closes the HTTP connection to the server.\n\n@return the HttpResponse object, which is the response from the server.\n\nNote: This method does not handle errors or exceptions. If an error occurs during the execution of this method, it will throw a HttpResponseException.\n\nNote 2: This method does not handle errors or exceptions. If an error occurs during the execution of this method, it will throw a HttpResponseException."}, {"ID": 1319, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function _getBlock (config, type, multi) { const options = { uri: _buildUrl(config, type, multi) } if (config.headers) { options['headers'] = config.headers } return request.get(options).then(result => { return { blockName: type, result: result } }) }. \n### Response: Gets the block based on the given config and type.\n@param {*} config the given config\n@param {*} type the block type eg. image\n@param {*} multi.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public boolean accept(final Scope referenceScope) { Class<? extends Scope> refScopeType = referenceScope.getClass(); if (refScopeType == ProtoScope.class) { return true; } if (refScopeType == SingletonScope.class) { return true; } if (refScopeType == ThreadLocalScope.class) { return true; } return false; } \n### Response:", "ground_truth": "Defines allowed referenced scopes that can be injected into the\nthread-local scoped bean.", "predict": "Provides an implementation for the `accept` method, which is used by the `java.util.concurrent.ExecutionException` class to determine if a thread should be blocked while waiting for an exception to be thrown. The method checks the class of the `referenceScope` object to determine if it is a `ProtoScope`, `SingletonScope`, or `ThreadLocalScope`, and returns `true` if it is. Otherwise, it returns `false`."}, {"ID": 1320, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (g *Group) Do(ctx context.Context, key string, fn func(ctx context.Context) (interface{}, error)) (v interface{}, err error) { var backoff time.Duration for { v, err = g.do(ctx, key, fn) if err == nil || errors.Cause(err) != errRetry { return v, err } // backoff logic if backoff >= 3*time.Second { err = errors.Wrapf(errRetryTimeout, \"flightcontrol\") return v, err } runtime.Gosched() if backoff > 0 { time.Sleep(backoff) backoff *= 2 } else { backoff = time.Millisecond } } }. \n### Response: // Do executes a context function syncronized by the key.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void printRoutes(final int width) { final ActionsManager actionsManager = webApp.madvocContainer().lookupComponent(ActionsManager.class); final List<ActionRuntime> actions = actionsManager.getAllActionRuntimes(); final Map<String, String> aliases = actionsManager.getAllAliases(); if (actions.isEmpty()) { return; } final Print print = new Print(); print.line(\"Routes\", width); actions.stream() .sorted(Comparator.comparing( actionRuntime -> actionRuntime.getActionPath() + ' ' + actionRuntime.getActionMethod())) .forEach(ar -> { final String actionMethod = ar.getActionMethod(); print.out(Chalk256.chalk().yellow(), actionMethod == null ? \"*\" : actionMethod, 7); print.space(); final String signature = ClassUtil.getShortClassName( ProxettaUtil.resolveTargetClass(ar.getActionClass()), 2) + '#' + ar.getActionClassMethod().getName(); print.outLeftRightNewLine( Chalk256.chalk().green(), ar.getActionPath(), Chalk256.chalk().blue(), signature, width - 7 - 1 ); }); if (!aliases.isEmpty()) { print.line(\"Aliases\", width); actions.stream() .sorted(Comparator.comparing( actionRuntime -> actionRuntime.getActionPath() + ' ' + actionRuntime.getActionMethod())) .forEach(ar -> { final String actionPath = ar.getActionPath(); for (final Map.Entry<String, String> entry : aliases.entrySet()) { if (entry.getValue().equals(actionPath)) { print.space(8); print.outLeftRightNewLine( Chalk256.chalk().green(), entry.getValue(), Chalk256.chalk().blue(), entry.getKey(), width - 8 ); } } }); } print.line(width); } \n### Response:", "ground_truth": "Prints routes to console.", "predict": "// Prints the routes in themadvocContainer().lookupComponent(ActionsManager.class).getAllActionRuntimes() and getAllAliases() lists."}, {"ID": 1321, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public boolean process() { boolean continueIterate = true; boolean found = false; String attempt = getCurrentAttempt(); while (continueIterate) { if (attempt.equals(toCheckAgainst)) { found = true; break; } attempt = getCurrentAttempt(); continueIterate = increment(); } return found; }. \n### Response: Processes the word list.\n\n@return true, if successful.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public byte[] encrypt(final byte[] content) { FastByteBuffer fbb = new FastByteBuffer(); int length = content.length + 1; int blockCount = length / blockSizeInBytes; int remaining = length; int offset = 0; for (int i = 0; i < blockCount; i++) { if (remaining == blockSizeInBytes) { break; } byte[] encrypted = encryptBlock(content, offset); fbb.append(encrypted); offset += blockSizeInBytes; remaining -= blockSizeInBytes; } if (remaining != 0) { // process remaining bytes byte[] block = new byte[blockSizeInBytes]; System.arraycopy(content, offset, block, 0, remaining - 1); block[remaining - 1] = TERMINATOR; byte[] encrypted = encryptBlock(block, 0); fbb.append(encrypted); } return fbb.toArray(); } \n### Response:", "ground_truth": "Encrypts complete content, block by block.", "predict": "Encrypts the given content.\n\n@param content the content to be encrypted.\n@return an array of bytes representing the encrypted content.\n\nThis method takes in a byte array of the content that needs to be encrypted and returns an array of bytes representing the encrypted content. It first calculates the length of the encrypted content by adding 1 to the length of the input content. It then calculates the number of blocks to be encrypted by dividing the length of the input content by the block size in bytes. It then allocates a FastByteBuffer object to hold the encrypted content and sets the length, offset, and remaining of the buffer to the calculated values. It then iterates through the blocks of the encrypted content and calls the `encryptBlock` method to encrypt each block. It then checks if there are any remaining bytes in the buffer and if so, it processes the remaining bytes by copying them into a new array and then calling the `encryptBlock` method again to encrypt the new array. Finally, it returns the array of bytes representing the encrypted content."}, {"ID": 1322, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def make_post_request(self, url, auth, json_payload): \"\"\"This function executes the request with the provided json payload and return the json response\"\"\" response = requests.post(url, auth=auth, json=json_payload) return response.json(). \n### Response: This function executes the request with the provided\n        json payload and return the json response.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public byte[] decrypt(final byte[] encryptedContent) { FastByteBuffer fbb = new FastByteBuffer(); int length = encryptedContent.length; int blockCount = length / blockSizeInBytes; int offset = 0; for (int i = 0; i < blockCount - 1; i++) { byte[] decrypted = decryptBlock(encryptedContent, offset); fbb.append(decrypted); offset += blockSizeInBytes; } // process last block byte[] decrypted = decryptBlock(encryptedContent, offset); // find terminator int ndx = blockSizeInBytes - 1; while (ndx >= 0) { if (decrypted[ndx] == TERMINATOR) { break; } ndx--; } fbb.append(decrypted, 0, ndx); return fbb.toArray(); } \n### Response:", "ground_truth": "Decrypts the whole content, block by block.", "predict": "This method decrypts the given encrypted content and returns the decrypted data as a byte array."}, {"ID": 1323, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (itr *SeriesIDSliceIterator) SeriesIDSet() *SeriesIDSet { s := NewSeriesIDSet() for _, id := range itr.ids { s.AddNoLock(id) } return s }. \n### Response: // SeriesIDSet returns a set of all remaining ids..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public Object map2bean(final Map map, Class targetType) { Object target = null; // create targets type String className = (String) map.get(classMetadataName); if (className == null) { if (targetType == null) { // nothing to do, no information about target type found target = map; } } else { checkClassName(jsonParser.classnameWhitelist, className); try { targetType = ClassLoaderUtil.loadClass(className); } catch (ClassNotFoundException cnfex) { throw new JsonException(cnfex); } } if (target == null) { target = jsonParser.newObjectInstance(targetType); } ClassDescriptor cd = ClassIntrospector.get().lookup(target.getClass()); boolean targetIsMap = target instanceof Map; for (Object key : map.keySet()) { String keyName = key.toString(); if (classMetadataName != null) { if (keyName.equals(classMetadataName)) { continue; } } PropertyDescriptor pd = cd.getPropertyDescriptor(keyName, declared); if (!targetIsMap && pd == null) { // target property does not exist, continue continue; } // value is one of JSON basic types, like Number, Map, List... Object value = map.get(key); Class propertyType = pd == null ? null : pd.getType(); Class componentType = pd == null ? null : pd.resolveComponentType(true); if (value != null) { if (value instanceof List) { if (componentType != null && componentType != String.class) { value = generifyList((List) value, componentType); } } else if (value instanceof Map) { // if the value we want to inject is a Map... if (!ClassUtil.isTypeOf(propertyType, Map.class)) { // ... and if target is NOT a map value = map2bean((Map) value, propertyType); } else { // target is also a Map, but we might need to generify it Class keyType = pd == null ? null : pd.resolveKeyType(true); if (keyType != String.class || componentType != String.class) { // generify value = generifyMap((Map) value, keyType, componentType); } } } } if (targetIsMap) { ((Map)target).put(keyName, value); } else { try { setValue(target, pd, value); } catch (Exception ignore) { ignore.printStackTrace(); } } } return target; } \n### Response:", "ground_truth": "Converts map to target type.", "predict": "// Map2bean method returns the value of the target property for the given JSON object and target type..\n// If the target type is not found, it returns the map itself.\n// If the target type is a list, it returns the value of the first element in the list.\n// If the target type is a map, it returns the value of the key with the given key name and the corresponding component type.\n// If the target type is not a valid JSON object or cannot be resolved, it throws a JsonException.\n// If the target is a list and the first element is not a valid JSON object, it returns null.\n// If the target is a map and the key with the given key name is not a valid JSON object, it returns null.\n// If the target is not a valid JSON object or cannot be resolved, it throws a JsonException.\n// If the value is not a valid JSON object or cannot be resolved, it throws a JsonException.\n// If the value is a list and the first element is not a valid JSON object, it returns null.\n// If the value is a map and the key with the given key name is not a valid JSON object, it returns null.\n// If the value is not a valid JSON object or cannot be resolved, it throws a JsonException.\n// If the value is a list and the first element is not a valid JSON object, it returns null.\n// If the value is a map and the key with the given key name is not a valid JSON object, it returns null.\n// If the value is not a valid JSON object or cannot be resolved, it throws a JsonException.\n// If the value is a list and the first element is not a valid JSON object, it returns null.\n// If the value is a map and the key with the given key name is not a valid JSON object, it returns null.\n// If the value is not a valid JSON object or cannot be resolved, it throws a JsonException.\n// If the value is a list and the first element is not a valid JSON object, it returns null.\n// If the value is a map and the key with the given key name is not a valid JSON object, it returns null.\n// If the value is not a valid JSON object or cannot be resolved, it throws a JsonException.\n// If the value is a list and the first element is not a valid JSON object, it returns null.\n// If the value is a map and the key with the given key name is not a valid JSON object, it returns null.\n// If the value is not a valid JSON object or cannot be resolved, it throws a JsonException.\n// If the value is a list and the first element is not a valid JSON object, it returns null.\n// If the value is a map and the key with the given key name is not a valid JSON object, it returns null.\n// If the value is not a valid JSON object or cannot be resolved, it throws a JsonException.\n// If the value is a list and the first element is not a valid JSON object, it returns null.\n// If the value is a map and the key with the given key name is not a valid JSON object, it returns null.\n// If the value is not a valid JSON object or cannot be resolved, it throws a JsonException.\n// If the value is a list and the first element is not a valid JSON object, it returns null.\n// If the value is a map and the key with the given key name is not a valid JSON object, it returns null.\n// If the value is not a valid JSON object or cannot be resolved, it throws a JsonException."}, {"ID": 1324, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function createReader(db, options) { if (options == null) options = {} var iterator = db.iterator(options) function _read(n) { // ignore n for now var self = this iterator.next(function (err, key, value) { if (err) { iterator.end(noop) self.emit(\"error\", err) return } if (key == null && value == null) { iterator.end(noop) self.push(null) return } var record = multibuffer.pack([key, value]) self.push(record) }) } return spigot(_read) }. \n### Response: Create a stream instance that streams data out of a level instance as multibuffers\n@param {LevelDOWN} db      A LevelDOWN instance\n@param {Object} options Read range options (start, end, reverse, limit).\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private Object generifyList(final List list, final Class componentType) { for (int i = 0; i < list.size(); i++) { Object element = list.get(i); if (element != null) { if (element instanceof Map) { Object bean = map2bean((Map) element, componentType); list.set(i, bean); } else { Object value = convert(element, componentType); list.set(i, value); } } } return list; } \n### Response:", "ground_truth": "Converts type of all list elements to match the component type.", "predict": "Generify a list of objects based on their component type.\n@param {List} list     A list of objects\n@param {Class} componentType A class representing the component of the object.\n\n@return A new list containing the transformed objects."}, {"ID": 1325, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def charge( self, amount, currency=None, application_fee=None, capture=None, description=None, destination=None, metadata=None, shipping=None, source=None, statement_descriptor=None, idempotency_key=None, ): \"\"\" Creates a charge for this customer. Parameters not implemented: * **receipt_email** - Since this is a charge on a customer, the customer's email address is used. :param amount: The amount to charge. :type amount: Decimal. Precision is 2; anything more will be ignored. :param currency: 3-letter ISO code for currency :type currency: string :param application_fee: A fee that will be applied to the charge and transfered to the platform owner's account. :type application_fee: Decimal. Precision is 2; anything more will be ignored. :param capture: Whether or not to immediately capture the charge. When false, the charge issues an authorization (or pre-authorization), and will need to be captured later. Uncaptured charges expire in 7 days. Default is True :type capture: bool :param description: An arbitrary string. :type description: string :param destination: An account to make the charge on behalf of. :type destination: Account :param metadata: A set of key/value pairs useful for storing additional information. :type metadata: dict :param shipping: Shipping information for the charge. :type shipping: dict :param source: The source to use for this charge. Must be a source attributed to this customer. If None, the customer's default source is used. Can be either the id of the source or the source object itself. :type source: string, Source :param statement_descriptor: An arbitrary string to be displayed on the customer's credit card statement. :type statement_descriptor: string \"\"\" if not isinstance(amount, decimal.Decimal): raise ValueError(\"You must supply a decimal value representing dollars.\") # TODO: better default detection (should charge in customer default) currency = currency or \"usd\" # Convert Source to id if source and isinstance(source, StripeModel): source = source.id stripe_charge = Charge._api_create( amount=int(amount * 100), # Convert dollars into cents currency=currency, application_fee=int(application_fee * 100) if application_fee else None, # Convert dollars into cents capture=capture, description=description, destination=destination, metadata=metadata, shipping=shipping, customer=self.id, source=source, statement_descriptor=statement_descriptor, idempotency_key=idempotency_key, ) return Charge.sync_from_stripe_data(stripe_charge). \n### Response: Creates a charge for this customer.\n\n\t\tParameters not implemented:\n\n\t\t* **receipt_email** - Since this is a charge on a customer, the customer's email address is used.\n\n\n\t\t:param amount: The amount to charge.\n\t\t:type amount: Decimal. Precision is 2; anything more will be ignored.\n\t\t:param currency: 3-letter ISO code for currency\n\t\t:type currency: string\n\t\t:param application_fee: A fee that will be applied to the charge and transfered to the platform owner's\n\t\t\taccount.\n\t\t:type application_fee: Decimal. Precision is 2; anything more will be ignored.\n\t\t:param capture: Whether or not to immediately capture the charge. When false, the charge issues an\n\t\t\tauthorization (or pre-authorization), and will need to be captured later. Uncaptured\n\t\t\tcharges expire in 7 days. Default is True\n\t\t:type capture: bool\n\t\t:param description: An arbitrary string.\n\t\t:type description: string\n\t\t:param destination: An account to make the charge on behalf of.\n\t\t:type destination: Account\n\t\t:param metadata: A set of key/value pairs useful for storing additional information.\n\t\t:type metadata: dict\n\t\t:param shipping: Shipping information for the charge.\n\t\t:type shipping: dict\n\t\t:param source: The source to use for this charge. Must be a source attributed to this customer. If None,\n\t\t\tthe customer's default source is used. Can be either the id of the source or the source object\n\t\t\titself.\n\t\t:type source: string, Source\n\t\t:param statement_descriptor: An arbitrary string to be displayed on the customer's credit card statement.\n\t\t:type statement_descriptor: string.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private void setValue(final Object target, final PropertyDescriptor pd, Object value) throws InvocationTargetException, IllegalAccessException { Class propertyType; Setter setter = pd.getSetter(true); if (setter != null) { if (value != null) { propertyType = setter.getSetterRawType(); value = jsonParser.convertType(value, propertyType); } setter.invokeSetter(target, value); } } \n### Response:", "ground_truth": "Sets the property value.", "predict": "This code defines a method named `charge` that takes in several parameters. The method creates a charge for the specified customer and stores the charge information in a `StripeModel` object.\n\nThe method has several comments at the top of the code that provide context and explain what the method does. For example, it notes that the method creates a charge for the customer, uses the customer's email address for receipt reporting, and specifies the currency, application fee, capture option, description, destination, metadata, shipping information, and source.\n\nThe method also has a comment that notes that it uses the `StripeModel` object to create the charge. This is likely done to interact with the Stripe API and perform the necessary charge processing.\n\nFinally, the method has a comment that notes that it returns the charge information to the caller. This is likely done to allow the caller to use the charge information in their own code or to display the charge information to the customer."}, {"ID": 1326, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def contains_key(self, key): \"\"\" Determines whether this multimap contains an entry with the key. **Warning: This method uses __hash__ and __eq__ methods of binary form of the key, not the actual implementations of __hash__ and __eq__ defined in key's class.** :param key: (object), the specified key. :return: (bool), ``true`` if this multimap contains an entry for the specified key. \"\"\" check_not_none(key, \"key can't be None\") key_data = self._to_data(key) return self._encode_invoke_on_key(multi_map_contains_key_codec, key_data, key=key_data, thread_id=thread_id()). \n### Response: Determines whether this multimap contains an entry with the key.\n\n        **Warning: This method uses __hash__ and __eq__ methods of binary form of the key, not the actual implementations\n        of __hash__ and __eq__ defined in key's class.**\n\n        :param key: (object), the specified key.\n        :return: (bool), ``true`` if this multimap contains an entry for the specified key..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected <K,V> Map<K, V> generifyMap(final Map<Object, Object> map, final Class<K> keyType, final Class<V> valueType) { if (keyType == String.class) { // only value type is changed, we can make value replacements for (Map.Entry<Object, Object> entry : map.entrySet()) { Object value = entry.getValue(); Object newValue = convert(value, valueType); if (value != newValue) { entry.setValue(newValue); } } return (Map<K, V>) map; } // key is changed too, we need a new map Map<K, V> newMap = new HashMap<>(map.size()); for (Map.Entry<Object, Object> entry : map.entrySet()) { Object key = entry.getKey(); Object newKey = convert(key, keyType); Object value = entry.getValue(); Object newValue = convert(value, valueType); newMap.put((K)newKey, (V)newValue); } return newMap; } \n### Response:", "ground_truth": "Change map elements to match key and value types.", "predict": "**protected Map<K, V> generifyMap(Map<Object, Object> map, Class<K> keyType, Class<V> valueType)**\n\n* Generify a map into a new map with the specified key type and value type.\n* If the key type is String.class, only the value type is changed and value replacements can be made.\n* Otherwise, the key and value are also changed and a new map is created.\n* Return the new map.\n\n**Note:** This method uses the `convert` method to convert between the original value and the new value type.\n\n**Note:** This method uses the `convert` method to convert between the original value and the new value type.\n\n:param map: the original map.\n:param keyType: the key type.\n:param valueType: the value type.\n:return: the new map.\n:Note: This method uses the `convert` method to convert between the original value and the new value type."}, {"ID": 1327, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def create_role(name): \"\"\" Create a new role. \"\"\" role = role_manager.create(name=name) if click.confirm(f'Are you sure you want to create {role!r}?'): role_manager.save(role, commit=True) click.echo(f'Successfully created {role!r}') else: click.echo('Cancelled.'). \n### Response: Create a new role..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public int compareTo(final Object o) { DbEntityColumnDescriptor that = (DbEntityColumnDescriptor) o; if (this.isId != that.isId) { return this.isId ? -1 : 1; // IDs should be the first in the array } return this.columnName.compareTo(that.columnName); } \n### Response:", "ground_truth": "Compares two column descriptors. Identity columns should be the first on the list.\nEach group then will be sorted by column name.", "predict": "compareTo() method in class DbEntityColumnDescriptor implements the compareTo() method in the Object class.\n\nThis method is used to compare two DbEntityColumnDescriptor objects. The compareTo() method returns an integer value, which indicates the relative order of the two objects. If the first object is greater than the second object, the return value will be -1. If the first object is less than the second object, the return value will be 1. If the two objects are equal, the return value will be 0. This method is used to compare the column names of two DbEntityColumnDescriptor objects."}, {"ID": 1328, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def plot(self, ifig=1, data_label='data', fit_label='fit', data_shape='o', fit_shape='-'): ''' plot the data and the fitted function. Parameters ---------- ifig : integer Figure window number. The default is 1. data_label : string Legend for data. The default is 'data'. fit_label : string Legend for fit. If fit_lable is 'fit', then substitute fit function type self.func_name. The default is 'fit'. data_shape : character Shape for data. The default is 'o'. fit_shape : character Shape for fit. The default is '-'. ''' if len(self.coef) is not len(self.fcoef): print(\"Warning: the fitted coefficient list is not same\") print(\" length as guessed list - still I will try ...\") pl.figure(ifig) pl.plot(self.x,self.y,data_shape,label=data_label) if fit_label is 'fit': fit_label=self.__name__ pl.plot(self.x,self.func(self.fcoef,self.x),fit_shape,label=fit_label) pl.legend(). \n### Response: plot the data and the fitted function.\n\n        Parameters\n        ----------\n        ifig : integer\n            Figure window number.  The default is 1.\n        data_label : string\n            Legend for data.  The default is 'data'.\n        fit_label : string\n            Legend for fit.  If fit_lable is 'fit', then substitute fit\n            function type self.func_name.  The default is 'fit'.\n        data_shape : character\n            Shape for data.  The default is 'o'.\n        fit_shape : character\n            Shape for fit.  The default is '-'..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public HttpBrowser setDefaultHeader(final String name, final String value) { defaultHeaders.addHeader(name, value); return this; } \n### Response:", "ground_truth": "Adds default header to all requests.", "predict": "setDefaultHeader(name, value)\n\nReturns\n-------\nthis\n\nDescription\n-----------\nThis method sets a default header for the HttpBrowser class. The name and value of the header are passed as arguments. The defaultHeaders object is used to add the header to the list of default headers for the browser. This method is typically used when creating an instance of HttpBrowser without specifying a custom header."}, {"ID": 1329, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function (cb) { // card key var url = options.url.replace(/light=true/i, ''), params = { legacyCardKey: Utils.getLegacyCardKey(url, process.env.CARD_SECRET), cardKey: Utils.getCardKey(url, process.env.CARD_SECRET) }; // extract input values _.each(_.keys(options.inputValues), function (key) { params[key] = options.inputValues[key]; }); if (options.inputValues.token) { // retrieve previously saved parameters. Add or replace params DB.unlock(options.packName, options.cardName, options.inputValues.token, process.env.LOCK_KEY, function (err, payload) { if (err) { // Ignore error and just return the params. cb(null, params); } else { if (payload && _.isObject(payload)) { _.each(_.keys(Card.inputs), function (key) { if (payload[key]) { params[key] = Base64.decode(payload[key]); } }); } cb(null, params); } }); } else { cb(null, params); } }. \n### Response: get required params.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public HttpResponse sendRequest(HttpRequest httpRequest) { elapsedTime = System.currentTimeMillis(); // send request httpRequest.followRedirects(false); while (true) { this.httpRequest = httpRequest; HttpResponse previousResponse = this.httpResponse; this.httpResponse = null; addDefaultHeaders(httpRequest); addCookies(httpRequest); // send request if (catchTransportExceptions) { try { this.httpResponse = _sendRequest(httpRequest, previousResponse); } catch (HttpException httpException) { httpResponse = new HttpResponse(); httpResponse.assignHttpRequest(httpRequest); httpResponse.statusCode(503); httpResponse.statusPhrase(\"Service unavailable. \" + ExceptionUtil.message(httpException)); } } else { this.httpResponse =_sendRequest(httpRequest, previousResponse); } readCookies(httpResponse); int statusCode = httpResponse.statusCode(); // 301: moved permanently if (statusCode == 301) { String newPath = httpResponse.location(); if (newPath == null) { break; } httpRequest = HttpRequest.get(newPath); continue; } // 302: redirect, 303: see other if (statusCode == 302 || statusCode == 303) { String newPath = httpResponse.location(); if (newPath == null) { break; } httpRequest = HttpRequest.get(newPath); continue; } // 307: temporary redirect, 308: permanent redirect if (statusCode == 307 || statusCode == 308) { String newPath = httpResponse.location(); if (newPath == null) { break; } String originalMethod = httpRequest.method(); httpRequest = new HttpRequest() .method(originalMethod) .set(newPath); continue; } break; } elapsedTime = System.currentTimeMillis() - elapsedTime; return this.httpResponse; } \n### Response:", "ground_truth": "Sends new request as a browser. Before sending,\nall browser cookies are added to the request.\nAfter sending, the cookies are read from the response.\nMoreover, status codes 301 and 302 are automatically\nhandled. Returns very last response.", "predict": "This method sends a request using the `sendRequest` method of the `HttpResponse` class. It follows redirects and sends the request until it reaches its destination or a timeout occurs. The method also adds cookies to the request and retrieves the response status code and location. Finally, it returns the response to the caller."}, {"ID": 1330, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function markEntityNotificationsAsRead(AccountInterface $account, Entity $entity) { // Retrieve all the activities referring this entity for this account. $ids = $this->getNotificationIds($account, [ACTIVITY_STATUS_RECEIVED, ACTIVITY_STATUS_SEEN], $entity); foreach ($ids as $activity_id) { $activity = Activity::load($activity_id); $this->changeStatusOfActivity($activity, ACTIVITY_STATUS_READ); } }. \n### Response: Mark Notifications as Read for given account and entity..\n\n@param \\Drupal\\Core\\Session\\AccountInterface $account\nAccount object.\n@param \\Drupal\\Core\\Entity\\Entity $entity\nEntity object..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected HttpResponse _sendRequest(final HttpRequest httpRequest, final HttpResponse previouseResponse) { if (!keepAlive) { httpRequest.open(httpConnectionProvider); } else { // keeping alive if (previouseResponse == null) { httpRequest.open(httpConnectionProvider).connectionKeepAlive(true); } else { httpRequest.keepAlive(previouseResponse, true); } } return httpRequest.send(); } \n### Response:", "ground_truth": "Opens connection and sends a response.", "predict": "This code defines a method named `_sendRequest` in a class named `HttpResponse` that is used to send a request to a server. The method takes two arguments: a `HttpRequest` object and a `HttpResponse` object.\n\nThe method first checks if there is no previous response, and if so, it opens the request with the specified connection provider. If there is no previous response, the method opens the request with the connection provider and sets the `connectionKeepAlive` property to `true`. If there is a previous response, the method sets the `connectionKeepAlive` property to `false` and sends the request.\n\nThe method then returns the `HttpResponse` object."}, {"ID": 1331, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private function namespaceBlock() { $node = new StatementBlockNode(); $this->matchHidden($node); while ($this->currentType !== NULL) { if ($this->currentType === T_NAMESPACE && !$this->isLookAhead(T_NS_SEPARATOR)) { break; } $node->addChild($this->topStatement()); $this->matchHidden($node); } $this->matchHidden($node); return $node; }. \n### Response: Parse a list of top level namespace statements.\n@return StatementBlockNode.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void addDefaultHeaders(final HttpRequest httpRequest) { for (Map.Entry<String, String> entry : defaultHeaders.entries()) { String name = entry.getKey(); if (!httpRequest.headers.contains(name)) { httpRequest.headers.add(name, entry.getValue()); } } } \n### Response:", "ground_truth": "Add default headers to the request. If request already has a header set,\ndefault header will be ignored.", "predict": "Adds default headers to the given HttpRequest.\n@param HttpRequest httpRequest The HttpRequest object to add the default headers to.\n@return void."}, {"ID": 1332, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function (template) { var pattern = _.template(template)(fileReplace); pattern = pattern.replace(/\\//g, '\\\\/'); pattern = pattern.replace(/\\s+/g, '\\\\s*'); pattern = '\\\\s*' + pattern + '\\\\s*'; return new RegExp(pattern); }. \n### Response: Convert the template into a RegExp that can capture the file name.\n@param {string} template\n@returns {RegExp} A regular expression that can capture the file name..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void readCookies(final HttpResponse httpResponse) { Cookie[] newCookies = httpResponse.cookies(); for (Cookie cookie : newCookies) { cookies.add(cookie.getName(), cookie); } } \n### Response:", "ground_truth": "Reads cookies from response and adds to cookies list.", "predict": "Read the cookies from the HTTP response.\n@param {HttpResponse} httpResponse\n@return {Cookie[]} An array of cookies.."}, {"ID": 1333, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function createResultRecord($record, $admin) { $resultRecord = array( 'label' => (string)$record, 'value' => (string)$record, 'url' => ($admin ? $admin->generateObjectUrl('edit', $record) : null), 'id' => ($admin ? $admin->id($record) : null) ); return $resultRecord; }. \n### Response: Creates result record\n\n@param object $record\n@param object $admin\n@return array.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void addCookies(final HttpRequest httpRequest) { // prepare all cookies List<Cookie> cookiesList = new ArrayList<>(); if (!cookies.isEmpty()) { for (Map.Entry<String, Cookie> cookieEntry : cookies) { cookiesList.add(cookieEntry.getValue()); } httpRequest.cookies(cookiesList.toArray(new Cookie[0])); } } \n### Response:", "ground_truth": "Add cookies to the request.", "predict": "Adds cookies to the request\n\n@param HttpRequest $httpRequest\n@return void.\n\n"}, {"ID": 1334, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected function getResponse( Request $request, Exception $exception, Exception $transformed ) { $id = UniversalBuilder::resolve( 'exceptions.identifier' )->identify( $exception ); $flattened = FlattenException::create( $transformed ); $code = $flattened->getStatusCode(); $headers = $flattened->getHeaders(); return $this->getDisplayer( $request, $exception, $transformed, $code )->display( $transformed, $id, $code, $headers ); }. \n### Response: Get the appropriate response object.\n\n@param Request $request\n@param \\Exception $transformed\n@param \\Exception $exception\n\n@return Response.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public String sendMail(final Email email) { try { final MimeMessage msg = createMessage(email); getService().sendMessage(msg, msg.getAllRecipients()); return msg.getMessageID(); } catch (final MessagingException msgexc) { throw new MailException(\"Failed to send email: \" + email, msgexc); } } \n### Response:", "ground_truth": "Prepares message and sends it. Returns Message ID of sent email.\n\n@param email {@link Email} to send.\n@return String representing message ID.", "predict": "Sends an email using the provided email address.\n\n@param Email email\n\n@return MimeMessage containing the email message.\n\n"}, {"ID": 1335, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def __add(self, val): \"\"\" Helper method for range addition. It is allowed to add only one compact subrange or ``range_t`` object at once. Parameters ---------- val : int or tuple or list or range Integer or range to add. Returns ------- __has : set ``self.__has`` extended by `val`. \"\"\" if not isinstance(val, range_t): #sanitize it val = {self.__val_convert(val)} # convert to a set, coz I like it that way. else: val = val.toset() __has = deepcopy(self.__has) # simply add to a set. __has.update(val) return __has. \n### Response: Helper method for range addition. It is allowed to add only one compact subrange or ``range_t`` object at once.\n\n        Parameters\n        ----------\n        val : int or tuple or list or range\n            Integer or range to add.\n\n        Returns\n        -------\n        __has : set\n            ``self.__has`` extended by `val`..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private void setSubject(final Email emailWithData, final MimeMessage msgToSet) throws MessagingException { if (emailWithData.subjectEncoding() != null) { msgToSet.setSubject(emailWithData.subject(), emailWithData.subjectEncoding()); } else { msgToSet.setSubject(emailWithData.subject()); } } \n### Response:", "ground_truth": "Sets subject in msgToSet from subject in emailWithData.\n\n@param emailWithData {@link Email} with data\n@param msgToSet      {@link MimeMessage} to set data into.\n@throws MessagingException if there is a failure", "predict": "Method for setting the subject of a MimeMessage object.\n\n        Parameters\n        ----------\n        emailWithData : Email\n            The email object with the subject data.\n        msgToSet : MimeMessage\n            The MimeMessage object to set the subject of.\n\n        Returns\n        -------\n        void\n            No change to the subject.\n\n        Exceptions\n        ----------\n        MessagingException\n            An exception is thrown if the subjectEncoding() method of the emailWithData object is not null."}, {"ID": 1336, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func softForkStatus(state blockchain.ThresholdState) (string, error) { switch state { case blockchain.ThresholdDefined: return \"defined\", nil case blockchain.ThresholdStarted: return \"started\", nil case blockchain.ThresholdLockedIn: return \"lockedin\", nil case blockchain.ThresholdActive: return \"active\", nil case blockchain.ThresholdFailed: return \"failed\", nil default: return \"\", fmt.Errorf(\"unknown deployment state: %v\", state) } }. \n### Response: // softForkStatus converts a ThresholdState state into a human readable string\n// corresponding to the particular state..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private void setSentDate(final Email emailWithData, final MimeMessage msgToSet) throws MessagingException { Date date = emailWithData.sentDate(); if (date == null) { date = new Date(); } msgToSet.setSentDate(date); } \n### Response:", "ground_truth": "Sets sent date in msgToSet with sent date from emailWithData.\n\n@param emailWithData {@link Email} with data\n@param msgToSet      {@link MimeMessage} to set data into.\n@throws MessagingException if there is a failure", "predict": "// Set the sent date of the email with data\n// @param emailWithData the email with data\n// @param msgToSet the MimeMessage\n// @throws MessagingException if an exception is thrown\n```"}, {"ID": 1337, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected function render_pix_emoticon(pix_emoticon $emoticon) { $system = \\core\\output\\icon_system::instance(\\core\\output\\icon_system::STANDARD); return $system->render_pix_icon($this, $emoticon); }. \n### Response: Return HTML to display an emoticon icon.\n\n@param pix_emoticon $emoticon\n@return string HTML fragment.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private void setHeaders(final Email emailWithData, final MimeMessage msgToSet) throws MessagingException { final Map<String, String> headers = emailWithData.headers(); if (headers != null) { for (final Map.Entry<String, String> entry : headers.entrySet()) { msgToSet.setHeader(entry.getKey(), entry.getValue()); } } } \n### Response:", "ground_truth": "Sets headers in msgToSet with headers from emailWithData.\n\n@param emailWithData {@link Email} with data\n@param msgToSet      {@link MimeMessage} to set data into.\n@throws MessagingException if there is a failure", "predict": "Set email headers.\n\n@param emailWithData email data\n@param msgToSet Mime message to set headers on."}, {"ID": 1338, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private static void convert(unificationXref uni, Model level2) { //We can not simply convert a class, so we need to remove the //uni and insert a new relationship xref //First get all the objects that refers to this uni Set<XReferrable> referrables = new HashSet<XReferrable>(uni.isXREFof()); //Create the new relationship xref in the model. relationshipXref relationshipXref = level2.addNew(relationshipXref.class, uni.getUri()); //Copy the fields from uni relationshipXref.setCOMMENT(uni.getCOMMENT()); relationshipXref.setDB(uni.getDB()); relationshipXref.setDB_VERSION(uni.getDB_VERSION()); relationshipXref.setID(uni.getID()); relationshipXref.setID_VERSION(uni.getID_VERSION()); relationshipXref.setRELATIONSHIP_TYPE( \"http://www.biopax.org/paxtools/convertedGOUnificationXREF\"); //Create a link to the new xref from all the owners. for (XReferrable referrable : referrables) { referrable.addXREF(relationshipXref); } //Remove the references to the old uni for (XReferrable referrable : referrables) { referrable.removeXREF(uni); } //Now remove it from the model. level2.remove(uni); //We are done! }. \n### Response: This method converts the given unification xref to a relationship xref\n@param uni xref to be converted\n@param level2 model containing the xref.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private void setPeople(final Email emailWithData, final MimeMessage msgToSet) throws MessagingException { msgToSet.setFrom(emailWithData.from().toInternetAddress()); msgToSet.setReplyTo(EmailAddress.convert(emailWithData.replyTo())); setRecipients(emailWithData, msgToSet); } \n### Response:", "ground_truth": "Sets FROM, REPLY-TO and recipients.\n\n@param emailWithData {@link Email} with data\n@param msgToSet      {@link MimeMessage} to set data into.\n@throws MessagingException if there is a failure", "predict": "This method sets the people in the given email to the recipients of the MimeMessage.\n@param emailWithData email with data\n@param msgToSet MimeMessage containing the recipients."}, {"ID": 1339, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def generate_ep_signature(self, pe, name, sig_length=512): \"\"\"Generate signatures for the entry point of a PE file. Creates a signature whose name will be the parameter 'name' and the section number and its name. \"\"\" offset = pe.get_offset_from_rva(pe.OPTIONAL_HEADER.AddressOfEntryPoint) return self.__generate_signature( pe, offset, name, ep_only=True, sig_length=sig_length). \n### Response: Generate signatures for the entry point of a PE file.\n\n        Creates a signature whose name will be the parameter 'name'\n        and the section number and its name..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private void setRecipients(final Email emailWithData, final MimeMessage msgToSet) throws MessagingException { // TO final InternetAddress[] to = EmailAddress.convert(emailWithData.to()); if (to.length > 0) { msgToSet.setRecipients(RecipientType.TO, to); } // CC final InternetAddress[] cc = EmailAddress.convert(emailWithData.cc()); if (cc.length > 0) { msgToSet.setRecipients(RecipientType.CC, cc); } // BCC final InternetAddress[] bcc = EmailAddress.convert(emailWithData.bcc()); if (bcc.length > 0) { msgToSet.setRecipients(RecipientType.BCC, bcc); } } \n### Response:", "ground_truth": "Sets TO, CC and BCC in msgToSet with TO, CC and BCC from emailWithData.\n\n@param emailWithData {@link Email} with data\n@param msgToSet      {@link MimeMessage} to set data into.\n@throws MessagingException if there is a failure.", "predict": "Set recipients for an email.\n\n        This method sets the recipient types for an email using the email data provided.\n\n        It first converts the email data to an InternetAddress[] array and then checks if any of the\n        addresses are present in the array. If so, it sets the recipient types for the message.\n\n        This method throws a MessagingException if an error occurs while setting the recipients.\n\n"}, {"ID": 1340, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def main(): \"\"\" Main function when running as a program. \"\"\" global args args = parse_args() if not args: return 1 state = MyState(args) for path in args.paths: if os.path.isdir(path): walk_dir(path, args, state) else: safe_process_files(os.path.dirname(path), [os.path.basename(path)], args, state) if state.should_quit(): break if state.failed_files: sys.stderr.write(\"error: %i/%i AEADs failed\\n\" % (len(state.failed_files), state.file_count)) return 1 if args.debug: sys.stderr.write(\"Successfully processed %i AEADs\\n\" % (state.file_count)). \n### Response: Main function when running as a program..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private void addBodyData(final Email emailWithData, final MimeMessage msgToSet) throws MessagingException { final List<EmailMessage> messages = emailWithData.messages(); final int totalMessages = messages.size(); // Need to use new list since filterEmbeddedAttachments(List) removes attachments from the source List final List<EmailAttachment<? extends DataSource>> attachments = new ArrayList<>(emailWithData.attachments()); if (attachments.isEmpty() && totalMessages == 1) { // special case: no attachments and just one content setContent(messages.get(0), msgToSet); } else { final MimeMultipart multipart = new MimeMultipart(); final MimeMultipart msgMultipart = new MimeMultipart(ALTERNATIVE); multipart.addBodyPart(getBaseBodyPart(msgMultipart)); for (final EmailMessage emailMessage : messages) { msgMultipart.addBodyPart(getBodyPart(emailMessage, attachments)); } addAnyAttachments(attachments, multipart); msgToSet.setContent(multipart); } } \n### Response:", "ground_truth": "Adds message data and attachments.\n\n@param emailWithData {@link Email} with data\n@param msgToSet      {@link MimeMessage} to set data into.\n@throws MessagingException if there is a failure.", "predict": "AddBodyData method..\n```java\nprivate void addBodyData(final Email emailWithData, final MimeMessage msgToSet) throws MessagingException {\n    final List<EmailMessage> messages = emailWithData.messages();\n    final int totalMessages = messages.size();\n    // Need to use new list since filterEmbeddedAttachments(List) removes attachments from the source List\n    final List<EmailAttachment<? extends DataSource>> attachments = new ArrayList<>(emailWithData.attachments());\n    if (attachments.isEmpty() && totalMessages == 1) {\n        // special case: no attachments and just one content\n        setContent(messages.get(0), msgToSet);\n    } else {\n        final MimeMultipart multipart = new MimeMultipart();\n        final MimeMultipart msgMultipart = new MimeMultipart(ALTERNATIVE);\n        multipart.addBodyPart(getBaseBodyPart(msgMultipart));\n        for (final EmailMessage emailMessage : messages) {\n            msgMultipart.addBodyPart(getBodyPart(emailMessage, attachments));\n        }\n        addAnyAttachments(attachments, multipart);\n        msgToSet.setContent(multipart);\n    }\n}\n```"}, {"ID": 1341, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function loadUserPayPalUser() { $result = false; if (($userId = \\OxidEsales\\Eshop\\Core\\Registry::getSession()->getVariable(\"oepaypal-userId\"))) { $result = $this->load($userId); } return $result; }. \n### Response: Returns user from session associated with current PayPal order.\n\n@return bool.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private void setContent(final EmailMessage emailWithData, final Part partToSet) throws MessagingException { partToSet.setContent(emailWithData.getContent(), emailWithData.getMimeType() + CHARSET + emailWithData.getEncoding()); } \n### Response:", "ground_truth": "Sets emailWithData content into msgToSet.\n\n@param emailWithData {@link EmailMessage} with data.\n@param partToSet     {@link Part} to set data into.\n@throws MessagingException if there is a failure.", "predict": "This method contains the logic for setting the content of an email message. It throws a MessagingException if an exception occurs during the execution of the method.\n\n@param EmailMessage emailWithData The email message to set the content of.\n@param Part partToSet The part to set the content of.\n@throws MessagingException If an exception occurs during the execution of the method, the method will throw a MessagingException."}, {"ID": 1342, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void mainUsage(PrintStream ps) { StringBuilder b = new StringBuilder(\"\\nUsage: java -jar [opentsdb.jar] [command] [args]\\nValid commands:\") .append(\"\\n\\ttsd: Starts a new TSDB instance\") .append(\"\\n\\tfsck: Searches for and optionally fixes corrupted data in a TSDB\") .append(\"\\n\\timport: Imports data from a file into HBase through a TSDB\") .append(\"\\n\\tmkmetric: Creates a new metric\") .append(\"\\n\\tquery: Queries time series data from a TSDB \") .append(\"\\n\\tscan: Dumps data straight from HBase\") .append(\"\\n\\tuid: Provides various functions to search or modify information in the tsdb-uid table. \") .append(\"\\n\\texportui: Exports the OpenTSDB UI static content\") .append(\"\\n\\n\\tUse help <command> for details on a command\\n\"); ps.println(b); }. \n### Response: Prints the main usage banner.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected MimeBodyPart createAttachmentBodyPart(final EmailAttachment<? extends DataSource> attachment) throws MessagingException { final MimeBodyPart part = new MimeBodyPart(); final String attachmentName = attachment.getEncodedName(); if (attachmentName != null) { part.setFileName(attachmentName); } part.setDataHandler(new DataHandler(attachment.getDataSource())); if (attachment.getContentId() != null) { part.setContentID(StringPool.LEFT_CHEV + attachment.getContentId() + StringPool.RIGHT_CHEV); } if (attachment.isInline()) { part.setDisposition(INLINE); } return part; } \n### Response:", "ground_truth": "Creates attachment body part. Handles regular and inline attachments.\n\n@param attachment Body part {@link EmailAttachment}.\n@return {@link MimeBodyPart} which represents body part attachment.\n@throws MessagingException if there is a failure.", "predict": "Creates a new MimeBodyPart for attachment."}, {"ID": 1343, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected function each(Builder $query, $count = 100): Generator { $query = $this->exportableQuery($query); // enforce order by statement. if (empty($query->orders) && empty($query->unionOrders)) { $query->orderBy($query->getModel()->getQualifiedKeyName(), 'asc'); } $page = 1; do { // We'll execute the query for the given page and get the results. If there are // no results we can just break and return from here. When there are results // we will call the callback with the current chunk of these results here. $results = $query->forPage($page, $count)->get(); $countResults = $results->count(); if (0 === $countResults) { break; } // On each chunk result set, we will pass them to the callback and then let the // developer take care of everything within the callback, which allows us to // keep the memory low for spinning through large result sets for working. foreach ($results as $index => $item) { yield $index = $item; } unset($results); ++$page; } while ($countResults === $count); }. \n### Response: Creates a all items generator.\n\n@param Builder $query\n@param int $count\n\n@return Generator.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private String getContentType(final String dataHeader) { String token = \"Content-Type:\"; int start = dataHeader.indexOf(token); if (start == -1) { return StringPool.EMPTY; } start += token.length(); return dataHeader.substring(start).trim(); } \n### Response:", "ground_truth": "Strips content type information from requests data header.\n@param dataHeader data header string\n@return content type or an empty string if no content type defined", "predict": "This method retrieves the content type header from the given data header. It starts by searching for the \"Content-Type:\" header token and then adds its length to the beginning of the data header string. Finally, it returns the substring of the data header that starts at the beginning of the token and is no longer the token itself."}, {"ID": 1344, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function RegisterHandler($HandlerClassName, $HandlerMethodName, $EventClassName = '', $EventName = '', $EventHandlerType = '') { $HandlerKey = $HandlerClassName.'.'.$HandlerMethodName; $EventKey = strtolower($EventClassName == '' ? $HandlerMethodName : $EventClassName.'_'.$EventName.'_'.$EventHandlerType); // Create a new array of handler class names if it doesn't exist yet. if (array_key_exists($EventKey, $this->_EventHandlerCollection) === FALSE) $this->_EventHandlerCollection[$EventKey] = array(); // Specify this class as a handler for this method if it hasn't been done yet. if (in_array($HandlerKey, $this->_EventHandlerCollection[$EventKey]) === FALSE) $this->_EventHandlerCollection[$EventKey][] = $HandlerKey; }. \n### Response: Registers a plugin method name as a handler.\n@param string $HandlerClassName The name of the plugin class that will handle the event.\n@param string $HandlerMethodName The name of the plugin method being registered to handle the event.\n@param string $EventClassName The name of the class that will fire the event.\n@param string $EventName The name of the event that will fire.\n@param string $EventHandlerType The type of event handler..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void saveResultSet(final ResultSet rs) { if (resultSets == null) { resultSets = new HashSet<>(); } resultSets.add(rs); } \n### Response:", "ground_truth": "Stores result set.", "predict": "Saves the contents of a ResultSet to a set of results.\n\n@param ResultSet rs The ResultSet object to save the contents to.\n\n@return The set of results saved."}, {"ID": 1345, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function getHeaders() { $result = []; foreach ($this->shadow as $reference => $index) { $result[$index] = $this->headers[$reference]; } return $result; }. \n### Response: Getter for headers.\n\n@author Benjamin Carl \n@return array The headers\n@access public.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public Q closeAllResultSets() { final SQLException sex = closeQueryResultSets(); if (sex != null) { throw new DbSqlException(\"Close associated ResultSets error\", sex); } return _this(); } \n### Response:", "ground_truth": "Closes all result sets created by this query. Query remains active.", "predict": "Method for closing all ResultSets.\n\n@author Benjamin Carl\n@return Q The object to be closed\n@access public."}, {"ID": 1346, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void updateUserLocale(HttpServletRequest request, String localeString) { IUserInstance ui = userInstanceManager.getUserInstance(request); IUserPreferencesManager upm = ui.getPreferencesManager(); final IUserProfile userProfile = upm.getUserProfile(); LocaleManager localeManager = userProfile.getLocaleManager(); if (localeString != null) { // build a new List<Locale> from the specified locale Locale userLocale = localeManagerFactory.parseLocale(localeString); List<Locale> locales = Collections.singletonList(userLocale); // set this locale in the session localeManager.setSessionLocales(locales); // if the current user is logged in, also update the persisted // user locale final IPerson person = ui.getPerson(); if (!person.isGuest()) { try { localeManager.setUserLocales(Collections.singletonList(userLocale)); localeStore.updateUserLocales(person, new Locale[] {userLocale}); // remove person layout framgent from session since it contains some of the data // in previous // translation and won't be cleared until next logout-login (applies when using // RDBMDistributedLayoutStore as user layout store). person.setAttribute(Constants.PLF, null); upm.getUserLayoutManager().loadUserLayout(true); } catch (Exception e) { throw new PortalException(e); } } } }. \n### Response: Update the current user's locale to match the selected locale. This implementation will\nupdate the session locale, and if the user is not a guest, will also update the locale in the\nuser's persisted preferences.\n\n@param request\n@param localeString.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected SQLException closeQuery() { SQLException sqlException = closeQueryResultSets(); if (statement != null) { try { statement.close(); } catch (SQLException sex) { if (sqlException == null) { sqlException = sex; } else { sqlException.setNextException(sex); } } statement = null; } query = null; queryState = CLOSED; return sqlException; } \n### Response:", "ground_truth": "Closes all assigned result sets and then closes the query. Query becomes closed.", "predict": "This methodcloseQuery() is used to close the ResultSet object that is used in a query. It is called when the query has completed and the ResultSet object is no longer needed. If a statement is still being executed, the method will try to close it first, and if that fails, it will set the next exception to be thrown as a SQLException. The method also sets the state of the ResultSet object to closed, so that it can be safely reused after the method has completed.\n\n@param sqlException."}, {"ID": 1347, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def render_region(widget=None, request=None, view=None, page=None, region=None): \"\"\"returns rendered content this is not too clear and little tricky, because external apps needs calling process method \"\"\" # change the request if not isinstance(request, dict): request.query_string = None request.method = \"GET\" if not hasattr(request, '_feincms_extra_context'): request._feincms_extra_context = {} leonardo_page = widget.parent if widget else page render_region = widget.region if widget else region # call processors for fn in reversed(list(leonardo_page.request_processors.values())): try: r = fn(leonardo_page, request) except: pass contents = {} for content in leonardo_page.content.all_of_type(tuple( leonardo_page._feincms_content_types_with_process)): try: r = content.process(request, view=view) except: pass else: # this is HttpResponse object or string if not isinstance(r, six.string_types): r.render() contents[content.fe_identifier] = getattr(r, 'content', r) else: contents[content.fe_identifier] = r from leonardo.templatetags.leonardo_tags import _render_content region_content = ''.join( contents[content.fe_identifier] if content.fe_identifier in contents else _render_content( content, request=request, context={}) for content in getattr(leonardo_page.content, render_region)) return region_content. \n### Response: returns rendered content\n    this is not too clear and little tricky,\n    because external apps needs calling process method.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override @SuppressWarnings({\"ClassReferencesSubclass\"}) public void close() { final SQLException sqlException = closeQuery(); connection = null; if (this.session != null) { this.session.detachQuery(this); } if (sqlException != null) { throw new DbSqlException(\"Close query error\", sqlException); } } \n### Response:", "ground_truth": "Closes the query and all created results sets and detaches itself from the session.", "predict": "Closed the query.\n\nNote: This method is marked as @Override and @SuppressWarnings({\"ClassReferencesSubclass\"}) to indicate that it is a overriden and customized method, and also to suppress the ClassReferencesSubclassException that may occur when closing a query."}, {"ID": 1348, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static function complete_tour_parameters() { return new external_function_parameters([ 'tourid' => new external_value(PARAM_INT, 'Tour ID'), 'context' => new external_value(PARAM_INT, 'Context ID'), 'pageurl' => new external_value(PARAM_LOCALURL, 'Page URL'), 'stepid' => new external_value(PARAM_INT, 'Step ID'), 'stepindex' => new external_value(PARAM_INT, 'Step Number'), ]); }. \n### Response: The parameters for complete_tour.\n\n@return external_function_parameters.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public Q setFetchSize(final int rows) { checkNotClosed(); this.fetchSize = rows; if (statement != null) { try { statement.setFetchSize(fetchSize); } catch (SQLException sex) { throw new DbSqlException(this, \"Unable to set fetch size: \" + fetchSize, sex); } } return _this(); } \n### Response:", "ground_truth": "Gives the JDBC driver a hint as to the number of rows that should be fetched from the database when\nmore rows are needed. The number of rows specified affects only result sets created using this statement.\nIf the value specified is zero, then the hint is ignored. The default value is zero.\n@see Statement#setFetchSize(int)", "predict": "The method sets the fetch size for the statement.\n\n@param rows The number of rows to fetch.\n\n@return The current DbSql object.\n\n"}, {"ID": 1349, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public Future<?> scheduleWithFixedDelay(Runnable task, long initialDelay, long delay, TimeUnit unit) { Preconditions.checkState(isOpen.get(), \"CloseableExecutorService is closed\"); ScheduledFuture<?> scheduledFuture = scheduledExecutorService.scheduleWithFixedDelay(task, initialDelay, delay, unit); return new InternalScheduledFutureTask(scheduledFuture); }. \n### Response: Creates and executes a periodic action that becomes enabled first\nafter the given initial delay, and subsequently with the\ngiven delay between the termination of one execution and the\ncommencement of the next.  If any execution of the task\nencounters an exception, subsequent executions are suppressed.\nOtherwise, the task will only terminate via cancellation or\ntermination of the executor.\n\n@param task      the task to execute\n@param initialDelay the time to delay first execution\n@param delay        the delay between the termination of one\nexecution and the commencement of the next\n@param unit         the time unit of the initialDelay and delay parameters\n@return a Future representing pending completion of\nthe task, and whose get() method will throw an\nexception upon cancellation.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public Q setMaxRows(final int maxRows) { checkNotClosed(); this.maxRows = maxRows; if (statement != null) { try { statement.setMaxRows(maxRows); } catch (SQLException sex) { throw new DbSqlException(this, \"Unable to set max rows: \" + maxRows, sex); } } return _this(); } \n### Response:", "ground_truth": "Sets the limit for the maximum number of rows that any ResultSet object can contain to the given number.\nIf the limit is exceeded, the excess rows are silently dropped. Zero means there is no limit.\n@see Statement#setMaxRows(int)", "predict": "This method sets the maximum number of rows that can be stored in the database table specified by the \"maxRows\" parameter. It first checks if the database connection is not closed, and if so, it is not closed. It then sets the \"maxRows\" parameter to the maximum number of rows that can be stored in the table. If a SQL exception is thrown when trying to set the \"maxRows\" parameter, a DbSqlException is thrown with the current object as the source of the exception. The method returns the current object."}, {"ID": 1350, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func TraceIDFromHex(h string) (t TraceID, err error) { if len(h) > 16 { if t.High, err = strconv.ParseUint(h[0:len(h)-16], 16, 64); err != nil { return } t.Low, err = strconv.ParseUint(h[len(h)-16:], 16, 64) return } t.Low, err = strconv.ParseUint(h, 16, 64) return }. \n### Response: // TraceIDFromHex returns the TraceID from a hex string..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected int executeUpdate(final boolean closeQuery) { start = System.currentTimeMillis(); init(); final int result; if (log.isDebugEnabled()) { log.debug(\"Executing update: \" + getQueryString()); } try { if (preparedStatement == null) { if (generatedColumns != null) { if (generatedColumns.length == 0) { result = statement.executeUpdate(query.sql, Statement.RETURN_GENERATED_KEYS); } else { result = statement.executeUpdate(query.sql, generatedColumns); } } else { result = statement.executeUpdate(query.sql); } } else { result = preparedStatement.executeUpdate(); } } catch (SQLException sex) { throw new DbSqlException(this, \"Query execution failed\", sex); } if (closeQuery) { close(); } elapsed = System.currentTimeMillis() - start; if (log.isDebugEnabled()) { log.debug(\"execution time: \" + elapsed + \"ms\"); } return result; } \n### Response:", "ground_truth": "Executes UPDATE, INSERT or DELETE queries and optionally closes the query.\n@see Statement#executeUpdate(String)", "predict": "// ExecuteUpdate method executes an update statement and returns the result.."}, {"ID": 1351, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function getConstantName() { // was it overridden in schema.xml ? if ($this->getTableMapName()) { return self::CONSTANT_PREFIX.strtoupper($this->getTableMapName()); } return self::CONSTANT_PREFIX.strtoupper($this->getName()); }. \n### Response: Returns the column constant name.\n\n@return string.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected long executeCount(final boolean close) { start = System.currentTimeMillis(); init(); ResultSet rs = null; if (log.isDebugEnabled()) { log.debug(\"Executing prepared count: \" + getQueryString()); } try { if (preparedStatement == null) { rs = statement.executeQuery(query.sql); } else { rs = preparedStatement.executeQuery(); } final long firstLong = DbUtil.getFirstLong(rs); elapsed = System.currentTimeMillis() - start; if (log.isDebugEnabled()) { log.debug(\"execution time: \" + elapsed + \"ms\"); } return firstLong; } catch (SQLException sex) { throw new DbSqlException(this, \"Count query failed\", sex); } finally { DbUtil.close(rs); if (close) { close(); } } } \n### Response:", "ground_truth": "Executes count queries and optionally closes query afterwards.", "predict": "This method executes the count query and returns the result. It initializes the method before executing the query, and it checks if the close flag is set to true. If it is, it calls the `close` method to release any resources. The method then executes the query using a prepared statement and a `ResultSet`. It retrieves the first long value from the result set and calculates the execution time. If the close flag is not set to true, it does not call the `close` method and releases any resources. Finally, it closes the `ResultSet` and any other resources that were created during the execution of the method.\n\n@param close boolean indicating whether to close the result set and any other resources after the method execution.\n\n@return long representing the count of rows affected by the count query."}, {"ID": 1352, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def print_bytes(byte_str): \"\"\"Prints a string or converts bytes to a string and then prints.\"\"\" if isinstance(byte_str, str): print(byte_str) else: print(str(byte_str, encoding='utf8')). \n### Response: Prints a string or converts bytes to a string and then prints..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public ResultSet getGeneratedColumns() { checkInitialized(); if (generatedColumns == null) { throw new DbSqlException(this, \"No column is specified as auto-generated\"); } final ResultSet rs; try { rs = statement.getGeneratedKeys(); } catch (SQLException sex) { throw new DbSqlException(this, \"No generated keys\", sex); } saveResultSet(rs); totalOpenResultSetCount++; return rs; } \n### Response:", "ground_truth": "Returns generated columns.", "predict": "This method retrieves the specified columns from the generated keys in a SQL statement and saves the result set to a ResultSet object. It then increments the number of open result sets and returns the result set."}, {"ID": 1353, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def SetCoreGRRKnowledgeBaseValues(kb, client_obj): \"\"\"Set core values from GRR into the knowledgebase.\"\"\" client_schema = client_obj.Schema kb.fqdn = utils.SmartUnicode(client_obj.Get(client_schema.FQDN, \"\")) if not kb.fqdn: kb.fqdn = utils.SmartUnicode(client_obj.Get(client_schema.HOSTNAME, \"\")) versions = client_obj.Get(client_schema.OS_VERSION) if versions and versions.versions: try: kb.os_major_version = versions.versions[0] kb.os_minor_version = versions.versions[1] except IndexError: # Some OSs don't have a minor version. pass client_os = client_obj.Get(client_schema.SYSTEM) if client_os: kb.os = utils.SmartUnicode(client_obj.Get(client_schema.SYSTEM)). \n### Response: Set core values from GRR into the knowledgebase..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public String getQueryString() { if (debug) { if ((callableStatement != null)) { if (preparedStatement instanceof LoggableCallableStatement) { return ((LoggableCallableStatement) callableStatement).getQueryString(); } } if (preparedStatement != null) { if (preparedStatement instanceof LoggablePreparedStatement) { return ((LoggablePreparedStatement) preparedStatement).getQueryString(); } } } if (query != null) { return query.sql; } return sqlString; } \n### Response:", "ground_truth": "Returns query SQL string. For prepared statements, returned sql string with quick-and-dirty replaced values.", "predict": "Get query string from the database.."}, {"ID": 1354, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def inserir(self, id_brand, name): \"\"\"Inserts a new Model and returns its identifier :param id_brand: Identifier of the Brand. Integer value and greater than zero. :param name: Model name. String with a minimum 3 and maximum of 100 characters :return: Dictionary with the following structure: :: {'model': {'id': < id_model >}} :raise InvalidParameterError: The identifier of Brand or name is null and invalid. :raise NomeMarcaModeloDuplicadoError: There is already a registered Model with the value of name and brand. :raise MarcaNaoExisteError: Brand not registered. :raise DataBaseError: Networkapi failed to access the database. :raise XMLError: Networkapi failed to generate the XML response \"\"\" model_map = dict() model_map['name'] = name model_map['id_brand'] = id_brand code, xml = self.submit({'model': model_map}, 'POST', 'model/') return self.response(code, xml). \n### Response: Inserts a new Model and returns its identifier\n\n        :param id_brand: Identifier of the Brand. Integer value and greater than zero.\n        :param name: Model name. String with a minimum 3 and maximum of 100 characters\n\n        :return: Dictionary with the following structure:\n\n        ::\n\n            {'model': {'id': }}\n\n        :raise InvalidParameterError: The identifier of Brand or name is null and invalid.\n        :raise NomeMarcaModeloDuplicadoError: There is already a registered Model with the value of name and brand.\n        :raise MarcaNaoExisteError: Brand not registered.\n        :raise DataBaseError: Networkapi failed to access the database.\n        :raise XMLError: Networkapi failed to generate the XML response.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @SuppressWarnings(\"unchecked\") public static <T> T proxyOf(final T target, final Class<? extends Aspect> aspectClass) { final Aspect aspect; try { aspect = ClassUtil.newInstance(aspectClass, target); } catch (Exception e) { throw new IllegalArgumentException(\"Can't create new instance of aspect class\", e); } return (T) newProxyInstance(target.getClass().getClassLoader(), aspect, target.getClass().getInterfaces()); } \n### Response:", "ground_truth": "Creates a proxy of given target and the aspect.", "predict": "Provides a proxy for a target object, allowing access to its methods and properties without creating a new instance of the target class.\n\n        :param target: The target object.\n        :param aspectClass: The aspect class to be used for the proxy.\n\n        :return: The proxy object, which can be used to access the methods and properties of the target object.\n        :raises: None\n\n        :raises: IllegalArgumentException: Can't create new instance of aspect class."}, {"ID": 1355, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func SpecializeCharmRepo(repo charmrepo.Interface, cfg *Config) charmrepo.Interface { type specializer interface { WithTestMode() charmrepo.Interface } if store, ok := repo.(specializer); ok { if cfg.TestMode() { return store.WithTestMode() } } return repo }. \n### Response: // SpecializeCharmRepo customizes a repository for a given configuration.\n// It returns a charm repository with test mode enabled if applicable..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static <T> Collection<T> collectionOf(final Iterator<? extends T> iterator) { final List<T> list = new ArrayList<>(); while (iterator.hasNext()) { list.add(iterator.next()); } return list; } \n### Response:", "ground_truth": "Returns a collection containing all elements of the iterator.", "predict": "// Returns a collection of all elements in the specified iterator.\n// The type of the returned collection is <T>, where T is the type of the elements in the iterator.\n\n"}, {"ID": 1356, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (i Interval) Union(other Interval) Interval { if i.IsEmpty() { return other } if other.IsEmpty() { return i } return Interval{math.Min(i.Lo, other.Lo), math.Max(i.Hi, other.Hi)} }. \n### Response: // Union returns the smallest interval that contains this interval and the given interval..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static <T> Stream<T> streamOf(final Iterator<T> iterator) { return StreamSupport.stream(((Iterable<T>) () -> iterator).spliterator(), false); } \n### Response:", "ground_truth": "Converts iterator to a stream.", "predict": "// Stream of elements from the given iterator.."}, {"ID": 1357, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void encodeThis() throws IOException { if (id == null && names == null && serialNum == null) { this.extensionValue = null; return; } DerOutputStream seq = new DerOutputStream(); DerOutputStream tmp = new DerOutputStream(); if (id != null) { DerOutputStream tmp1 = new DerOutputStream(); id.encode(tmp1); tmp.writeImplicit(DerValue.createTag(DerValue.TAG_CONTEXT, false, TAG_ID), tmp1); } try { if (names != null) { DerOutputStream tmp1 = new DerOutputStream(); names.encode(tmp1); tmp.writeImplicit(DerValue.createTag(DerValue.TAG_CONTEXT, true, TAG_NAMES), tmp1); } } catch (Exception e) { throw new IOException(e.toString()); } if (serialNum != null) { DerOutputStream tmp1 = new DerOutputStream(); serialNum.encode(tmp1); tmp.writeImplicit(DerValue.createTag(DerValue.TAG_CONTEXT, false, TAG_SERIAL_NUM), tmp1); } seq.write(DerValue.tag_Sequence, tmp); this.extensionValue = seq.toByteArray(); }. \n### Response: Encode only the extension value.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public int compare(final T o1, final T o2) { for (Comparator<T> comparator : comparators) { int result = comparator.compare(o1, o2); if (result != 0) { return result; } } return 0; } \n### Response:", "ground_truth": "Compares two objects starting with first comparator; if they are equals\nproceeds to the next comparator and so on.", "predict": "Implement a custom compare method for T."}, {"ID": 1358, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private ParseTree parseObjectLiteral() { SourcePosition start = getTreeStartLocation(); ImmutableList.Builder<ParseTree> result = ImmutableList.builder(); eat(TokenType.OPEN_CURLY); Token commaToken = null; while (peek(TokenType.SPREAD) || peekPropertyNameOrComputedProp(0) || peek(TokenType.STAR) || peekAccessibilityModifier()) { commaToken = null; result.add(parsePropertyAssignment()); commaToken = eatOpt(TokenType.COMMA); if (commaToken == null) { break; } } eat(TokenType.CLOSE_CURLY); maybeReportTrailingComma(commaToken); return new ObjectLiteralExpressionTree(getTreeLocation(start), result.build()); }. \n### Response: 11.1.4 Object Literal Expression.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public PetiteConfig setDefaultWiringMode(final WiringMode defaultWiringMode) { if ((defaultWiringMode == null) || (defaultWiringMode == WiringMode.DEFAULT)) { throw new PetiteException(\"Invalid default wiring mode: \" + defaultWiringMode); } this.defaultWiringMode = defaultWiringMode; return this; } \n### Response:", "ground_truth": "Specifies default wiring mode.", "predict": "11.1.5 setDefault WiringMode."}, {"ID": 1359, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def _cast_to_type(self, value): \"\"\" Convert the value to a datetime and raise error on failures\"\"\" if isinstance(value, datetime.datetime): return value if isinstance(value, datetime.date): value = datetime.datetime(value.year, value.month, value.day) return value try: value = date_parser(value) return value except ValueError: self.fail('invalid', value=value). \n### Response: Convert the value to a datetime and raise error on failures.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void print(final Level level, final String message, final Throwable throwable) { if (!isEnabled(level)) { return; } StringBuilder msg = new StringBuilder() .append(slf.getElapsedTime()).append(' ').append('[') .append(level).append(']').append(' ') .append(getCallerClass()).append(' ').append('-') .append(' ').append(message); System.out.println(msg.toString()); if (throwable != null) { throwable.printStackTrace(System.out); } } \n### Response:", "ground_truth": "Prints error message if level is enabled.", "predict": "This method prints a message to the console indicating the level at which the method was called, the message itself, and the caller's class and elapsed time in milliseconds since the epoch. If a throwable is thrown during the execution of the method, it is also printed to the console."}, {"ID": 1360, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function fetch($bucket, $flush = true) { // Ensure that the root node exists if (true === empty($_SESSION[self::ROOT_NODE])) { $_SESSION[self::ROOT_NODE] = []; } // Ensure that the bucket exists if (true === empty($_SESSION[self::ROOT_NODE][$bucket])) { $_SESSION[self::ROOT_NODE][$bucket] = []; } // Get the messages for the bucket $messages = $_SESSION[self::ROOT_NODE][$bucket]; // Flush the messages if applicable if (true === $flush) { $this->flush($bucket); } // Return the messages as an array return $messages; }. \n### Response: Fetch the notifications from the driver\n\n@param string $bucket\n@param bool $flush\n@return array.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected String getCallerClass() { Exception exception = new Exception(); StackTraceElement[] stackTrace = exception.getStackTrace(); for (StackTraceElement stackTraceElement : stackTrace) { String className = stackTraceElement.getClassName(); if (className.equals(SimpleLoggerProvider.class.getName())) { continue; } if (className.equals(SimpleLogger.class.getName())) { continue; } if (className.equals(Logger.class.getName())) { continue; } return shortenClassName(className) + '.' + stackTraceElement.getMethodName() + ':' + stackTraceElement.getLineNumber(); } return \"N/A\"; } \n### Response:", "ground_truth": "Returns called class.", "predict": "Retrieves the caller class name.\n\n@return string.\n\n"}, {"ID": 1361, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def file_remove(self, path, filename): \"\"\"Check if filename exists and remove \"\"\" if os.path.isfile(path + filename): os.remove(path + filename). \n### Response: Check if filename exists and remove.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected String shortenClassName(final String className) { int lastDotIndex = className.lastIndexOf('.'); if (lastDotIndex == -1) { return className; } StringBuilder shortClassName = new StringBuilder(className.length()); int start = 0; while(true) { shortClassName.append(className.charAt(start)); int next = className.indexOf('.', start); if (next == lastDotIndex) { break; } start = next + 1; shortClassName.append('.'); } shortClassName.append(className.substring(lastDotIndex)); return shortClassName.toString(); } \n### Response:", "ground_truth": "Returns shorten class name.", "predict": "This method shortens a given className by removing the last dot (.) and adding a period (.) at the end."}, {"ID": 1362, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func New(ctx context.Context, cfg Config) (*GPG, error) { // ensure created files don't have group or world perms set // this setting should be inherited by sub-processes umask(cfg.Umask) // make sure GPG_TTY is set (if possible) if gt := os.Getenv(\"GPG_TTY\"); gt == \"\" { if t := tty(); t != \"\" { _ = os.Setenv(\"GPG_TTY\", t) } } g := &GPG{ binary: \"gpg\", args: append(defaultArgs, cfg.Args...), } cache, err := lru.New2Q(1024) if err != nil { return nil, err } g.listCache = cache bin, err := Binary(ctx, cfg.Binary) if err != nil { return nil, err } g.binary = bin return g, nil }. \n### Response: // New creates a new GPG wrapper.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public JsonSerializer excludeTypes(final Class... types) { if (excludedTypes == null) { excludedTypes = types; } else { excludedTypes = ArraysUtil.join(excludedTypes, types); } return this; } \n### Response:", "ground_truth": "Excludes types. Supports interfaces and subclasses as well.", "predict": "// excludeTypes returns the JsonSerializer for excluding certain types from the JSON serialization process."}, {"ID": 1363, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void executeBatch(Results results, final List<String> queries) throws SQLException { if (!options.useBatchMultiSend) { String sql = null; SQLException exception = null; for (int i = 0; i < queries.size() && !isInterrupted(); i++) { try { sql = queries.get(i); writer.startPacket(0); writer.write(COM_QUERY); writer.write(sql); writer.flush(); getResult(results); } catch (SQLException sqlException) { if (exception == null) { exception = logQuery.exceptionWithQuery(sql, sqlException, explicitClosed); if (!options.continueBatchOnError) { throw exception; } } } catch (IOException e) { if (exception == null) { exception = handleIoException(e); if (!options.continueBatchOnError) { throw exception; } } } } stopIfInterrupted(); if (exception != null) { throw exception; } return; } initializeBatchReader(); new AbstractMultiSend(this, writer, results, queries) { @Override public void sendCmd(PacketOutputStream pos, Results results, List<ParameterHolder[]> parametersList, List<String> queries, int paramCount, BulkStatus status, PrepareResult prepareResult) throws IOException { String sql = queries.get(status.sendCmdCounter); pos.startPacket(0); pos.write(COM_QUERY); pos.write(sql); pos.flush(); } @Override public SQLException handleResultException(SQLException qex, Results results, List<ParameterHolder[]> parametersList, List<String> queries, int currentCounter, int sendCmdCounter, int paramCount, PrepareResult prepareResult) { String sql = queries.get(currentCounter + sendCmdCounter); return logQuery.exceptionWithQuery(sql, qex, explicitClosed); } @Override public int getParamCount() { return -1; } @Override public int getTotalExecutionNumber() { return queries.size(); } }.executeBatch(); }. \n### Response: Execute list of queries not rewritable.\n\n@param results result object\n@param queries list of queries\n@throws SQLException exception.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void serialize(final Object source, final Appendable target) { JsonContext jsonContext = createJsonContext(target); jsonContext.serialize(source); } \n### Response:", "ground_truth": "Serializes object into provided appendable.", "predict": "Serializes an object to a Appendable object.\n\n@param source object to be serialized\n@param target Appendable object to store the serialized data\n@return the serialized data\n@throws IOException exception if there is an error creating the JsonContext or serialize() method is called multiple times."}, {"ID": 1364, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static boolean validateFileType(final FileItemWrap newFile, final List<String> fileTypes) { // The newFile is null, then return false if (newFile == null) { return false; } // If fileTypes to validate is null or empty, then assume newFile is valid if (fileTypes == null || fileTypes.isEmpty()) { return true; } final List<String> fileExts = fileTypes.stream() .filter(fileType -> fileType.startsWith(\".\")) .collect(Collectors.toList()); // filter mime types from fileTypes. final List<String> fileMimes = fileTypes.stream() .filter(fileType -> !fileExts.contains(fileType)) .collect(Collectors.toList()); // First validate newFile against fileExts list // If extensions are supplied, then check if newFile has a name if (fileExts.size() > 0 && newFile.getName() != null) { // Then see if newFile has an extension String[] split = newFile.getName().split((\"\\\\.(?=[^\\\\.]+$)\")); // If it exists, then check if it matches supplied extension(s) if (split.length == 2 && fileExts.stream().anyMatch(fileExt -> fileExt.equals(\".\" + split[1]))) { return true; } } // If extension match is unsucessful, then move to fileMimes list if (fileMimes.size() > 0) { final String mimeType = getFileMimeType(newFile); LOG.debug(\"File mime-type is: \" + mimeType); for (String fileMime : fileMimes) { if (StringUtils.equals(mimeType, fileMime)) { return true; } if (fileMime.indexOf(\"*\") == fileMime.length() - 1) { fileMime = fileMime.substring(0, fileMime.length() - 1); if (mimeType.indexOf(fileMime) == 0) { return true; } } } } return false; }. \n### Response: Checks if the file item is one among the supplied file types.\nThis first checks against file extensions, then against file mime types\n\n@param newFile the file to be checked, if null then return false\notherwise validate\n@param fileTypes allowed file types, if null or empty return true,\notherwise validate\n@return {@code true} if either extension or mime-type match is successful.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public String serialize(final Object source) { FastCharBuffer fastCharBuffer = new FastCharBuffer(); serialize(source, fastCharBuffer); return fastCharBuffer.toString(); } \n### Response:", "ground_truth": "Serializes object into source.", "predict": "This method serializes an object into a character buffer.\n\n@param source the object to be serialized, must be a valid Object in this class\n@return the serialized object as a character buffer\n\nNote: This method is not used in the provided code snippet, but it is a good practice to add a comment for each method to explain its purpose and usage."}, {"ID": 1365, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def count_multiplicities(times, tmax=20): \"\"\"Calculate an array of multiplicities and corresponding coincidence IDs Note that this algorithm does not take care about DOM IDs, so it has to be fed with DOM hits. Parameters ---------- times: array[float], shape=(n,) Hit times for n hits dt: int [default: 20] Time window of a coincidence Returns ------- (array[int]), array[int]), shape=(n,) \"\"\" n = times.shape[0] mtp = np.ones(n, dtype='<i4') # multiplicities cid = np.zeros(n, '<i4') # coincidence id idx0 = 0 _mtp = 1 _cid = 0 t0 = times[idx0] for i in range(1, n): dt = times[i] - t0 if dt > tmax: mtp[idx0:i] = _mtp cid[idx0:i] = _cid _mtp = 0 _cid += 1 idx0 = i t0 = times[i] _mtp += 1 if i == n - 1: mtp[idx0:] = _mtp cid[idx0:] = _cid break return mtp, cid. \n### Response: Calculate an array of multiplicities and corresponding coincidence IDs\n\n    Note that this algorithm does not take care about DOM IDs, so it has to\n    be fed with DOM hits.\n\n    Parameters\n    ----------\n    times: array[float], shape=(n,)\n        Hit times for n hits\n    dt: int [default: 20]\n        Time window of a coincidence\n\n    Returns\n    -------\n    (array[int]), array[int]), shape=(n,).\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static <T extends Serializable> T cloneViaSerialization(final T obj) throws IOException, ClassNotFoundException { FastByteArrayOutputStream bos = new FastByteArrayOutputStream(); ObjectOutputStream out = null; ObjectInputStream in = null; Object objCopy = null; try { out = new ObjectOutputStream(bos); out.writeObject(obj); out.flush(); byte[] bytes = bos.toByteArray(); in = new ObjectInputStream(new ByteArrayInputStream(bytes)); objCopy = in.readObject(); } finally { StreamUtil.close(out); StreamUtil.close(in); } return (T) objCopy; } \n### Response:", "ground_truth": "Create object copy using serialization mechanism.", "predict": "Clone a object via serialization.\n\n    This method serializes an object and then deserializes it back into\n    a new object. The object is cloned, meaning that each instance of the\n    cloned object is a copy of the original object, with the same properties and\n    methods.\n\n    Parameters\n    ----------\n    obj: T [final object]\n        The object to be cloned.\n\n    Returns\n    -------\n    T [cloned object]."}, {"ID": 1366, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func matchLen(a, b []byte, max int) int { a = a[:max] b = b[:len(a)] for i, av := range a { if b[i] != av { return i } } return max }. \n### Response: // matchLen returns the number of matching bytes in a and b\n// up to length 'max'. Both slices must be at least 'max'\n// bytes in size..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void writeObject(final File dest, final Object object) throws IOException { FileOutputStream fos = null; BufferedOutputStream bos = null; ObjectOutputStream oos = null; try { fos = new FileOutputStream(dest); bos = new BufferedOutputStream(fos); oos = new ObjectOutputStream(bos); oos.writeObject(object); } finally { StreamUtil.close(oos); StreamUtil.close(bos); StreamUtil.close(fos); } } \n### Response:", "ground_truth": "Writes serializable object to a file. Existing file will be overwritten.", "predict": "// writeObject writes an object to a file\n// using the ObjectOutputStream class. It throws an IOException\n// if an error occurs. The object must be written in JSON format."}, {"ID": 1367, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def check_errors(self, response, data): \"\"\"Check for errors and raise an appropriate error if needed\"\"\" if \"error_id\" in data: error_id = data[\"error_id\"] if error_id in self.error_ids: raise self.error_ids[error_id](response) if \"error_code\" in data: error_code = data[\"error_code\"] if error_code in self.error_codes: raise self.error_codes[error_code](response) if \"error_code\" in data or \"error_id\" in data: raise AppNexusException(response). \n### Response: Check for errors and raise an appropriate error if needed.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static Object readObject(final File source) throws IOException, ClassNotFoundException { Object result = null; FileInputStream fis = null; BufferedInputStream bis = null; ObjectInputStream ois = null; try { fis = new FileInputStream(source); bis = new BufferedInputStream(fis); ois = new ObjectInputStream(bis); result = ois.readObject(); } finally { StreamUtil.close(ois); StreamUtil.close(bis); StreamUtil.close(fis); } return result; } \n### Response:", "ground_truth": "Reads serialized object from the file.", "predict": "This method reads an object from a file. It throws IOException and ClassNotFoundException if any of the inputs fail. It returns the object read."}, {"ID": 1368, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function casMember($member, $oldValue, $newValue) { $set = false; $this->lock(); if ($this[$member] == $oldValue) { $this[$member] = $newValue; $set = true; } $this->unlock(); return $set; }. \n### Response: Performs a compare and swap operation on a class member\n\n@param string $member\n@param mixed $oldValue\n@param mixed $newValue\n@return bool.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static byte[] objectToByteArray(final Object obj) throws IOException { FastByteArrayOutputStream bos = new FastByteArrayOutputStream(); ObjectOutputStream oos = null; try { oos = new ObjectOutputStream(bos); oos.writeObject(obj); } finally { StreamUtil.close(oos); } return bos.toByteArray(); } \n### Response:", "ground_truth": "Serialize an object to byte array.", "predict": "Provides a method to convert an object to a byte array.\n\n@param Object obj\n@return byte array of the object.\n\nNote: This method does not handle null values or objects that are not instances of the class being converted.\n\nNote: This method does not handle null values or objects that are not instances of the class being converted."}, {"ID": 1369, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def _execute_handler(self, p_command, p_todo_id=None, p_output=None): \"\"\" Executes a command, given as a string. \"\"\" p_output = p_output or self._output self._console_visible = False self._last_cmd = (p_command, p_output == self._output) try: p_command = shlex.split(p_command) except ValueError as verr: self._print_to_console('Error: ' + str(verr)) return try: subcommand, args = get_subcommand(p_command) except ConfigError as cerr: self._print_to_console( 'Error: {}. Check your aliases configuration.'.format(cerr)) return if subcommand is None: self._print_to_console(GENERIC_HELP) return env_args = (self.todolist, p_output, self._output, self._input) ids = None if '{}' in args: if self._has_marked_todos(): ids = self.marked_todos else: ids = {p_todo_id} if p_todo_id else set() invalid_ids = self._check_id_validity(ids) if invalid_ids: self._print_to_console('Error: ' + invalid_ids) return transaction = Transaction(subcommand, env_args, ids) transaction.prepare(args) label = transaction.label self._backup(subcommand, p_label=label) try: if transaction.execute(): post_archive_action = transaction.execute_post_archive_actions self._post_archive_action = post_archive_action self._post_execute() else: self._rollback() except TypeError: # TODO: show error message pass. \n### Response: Executes a command, given as a string..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static Object byteArrayToObject(final byte[] data) throws IOException, ClassNotFoundException { Object retObj = null; ByteArrayInputStream bais = new ByteArrayInputStream(data); ObjectInputStream ois = null; try { ois = new ObjectInputStream(bais); retObj = ois.readObject(); } finally { StreamUtil.close(ois); } return retObj; } \n### Response:", "ground_truth": "De-serialize an object from byte array.", "predict": "Returns a byte array as an Object.."}, {"ID": 1370, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def Convert(self, metadata, stat_entry, token=None): \"\"\"Converts StatEntry to ExportedFile. Does nothing if StatEntry corresponds to a registry entry and not to a file. Args: metadata: ExportedMetadata to be used for conversion. stat_entry: StatEntry to be converted. token: Security token. Returns: List or generator with resulting RDFValues. Empty list if StatEntry corresponds to a registry entry and not to a file. \"\"\" return self.BatchConvert([(metadata, stat_entry)], token=token). \n### Response: Converts StatEntry to ExportedFile.\n\n    Does nothing if StatEntry corresponds to a registry entry and not to a file.\n\n    Args:\n      metadata: ExportedMetadata to be used for conversion.\n      stat_entry: StatEntry to be converted.\n      token: Security token.\n\n    Returns:\n      List or generator with resulting RDFValues. Empty list if StatEntry\n      corresponds to a registry entry and not to a file..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected String[][] resolveMappedTypesTableNames(final Class[] types) { if (cachedMappedNames == null) { String[][] names = new String[types.length][]; for (int i = 0; i < types.length; i++) { Class type = types[i]; if (type != null) { DbEntityDescriptor ded = cachedDbEntityDescriptors[i]; if (ded != null) { Class[] mappedTypes = ded.getMappedTypes(); if (mappedTypes != null) { names[i] = createTypesTableNames(mappedTypes); } } } } cachedMappedNames = names; } return cachedMappedNames; } \n### Response:", "ground_truth": "Resolved mapped type names for each type.", "predict": "Resolves mapped typesTableNames for all types in the given Class[] array.\n\n    If the cached mapped names is null, it creates a new array of strings and\n    caches it for future use.\n\n    Returns the cached mapped names array."}, {"ID": 1371, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static function action_course_show_by_record($courserecordorid) { if (is_int($courserecordorid)) { $courserecordorid = get_course($courserecordorid); } $course = new \\core_course_list_element($courserecordorid); return self::action_course_show($course); }. \n### Response: Makes a course visible given a course id or a database record.\n\n@global \\moodle_database $DB\n@param int|\\stdClass $courserecordorid\n@return bool.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected String[] createTypesTableNames(final Class[] types) { String[] names = new String[types.length]; for (int i = 0; i < types.length; i++) { if (types[i] == null) { names[i] = null; continue; } DbEntityDescriptor ded = dbEntityManager.lookupType(types[i]); if (ded != null) { String tableName = ded.getTableName(); tableName = tableName.toUpperCase(); names[i] = tableName; } } return names; } \n### Response:", "ground_truth": "Creates table names for given types.", "predict": "This method creates a list of table names for DbEntityDescriptor objects related to the given types. It iterates through the array of types and if it doesn't find any, it sets the table name to null. Then, it lookups the DbEntityDescriptor for the given type and sets the table name to its uppercase version. Finally, it returns the list of table names.\n\n@param Class[] types The array of classes that define the DbEntityDescriptor objects to create.\n@return String[] The list of table names for the DbEntityDescriptor objects related to the given types."}, {"ID": 1372, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: static MD5Hash downloadImageToStorage(String fsName, long imageTxId, FSImage dstImage, boolean needDigest, boolean disableThrottle) throws IOException { String fileid = GetImageServlet.getParamStringForImage( imageTxId, dstImage.storage, disableThrottle); List<OutputStream> outputStreams = dstImage.getCheckpointImageOutputStreams(imageTxId); if (outputStreams.size() == 0) { throw new IOException(\"No targets in destination storage!\"); } MD5Hash hash = getFileClient(fsName, fileid, outputStreams, dstImage.storage, needDigest); LOG.info(\"Downloaded image files for txid: \" + imageTxId); return hash; }. \n### Response: Download image to local storage.\nThrottling can be disabled..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @SuppressWarnings({\"unchecked\"}) protected Object readColumnValue(final int colNdx, final Class destinationType, final Class<? extends SqlType> sqlTypeClass, final int columnDbSqlType) { if (colNdx != cachedColumnNdx) { try { SqlType sqlType; if (sqlTypeClass != null) { sqlType = SqlTypeManager.get().lookupSqlType(sqlTypeClass); } else { sqlType = SqlTypeManager.get().lookup(destinationType); } if (sqlType != null) { cachedColumnValue = sqlType.readValue(resultSet, colNdx + 1, destinationType, columnDbSqlType); } else { cachedColumnValue = resultSet.getObject(colNdx + 1); cachedColumnValue = TypeConverterManager.get().convertType(cachedColumnValue, destinationType); } } catch (SQLException sex) { throw new DbOomException(dbOomQuery, \"Invalid value for column #\" + (colNdx + 1), sex); } cachedColumnNdx = colNdx; } return cachedColumnValue; } \n### Response:", "ground_truth": "Reads column value from result set. Since this method may be called more then once for\nthe same column, it caches column values.", "predict": "Reads column value from a result set and cached it if possible."}, {"ID": 1373, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void init() { handle = TessBaseAPICreate(); StringArray sarray = new StringArray(configList.toArray(new String[0])); PointerByReference configs = new PointerByReference(); configs.setPointer(sarray); TessBaseAPIInit1(handle, datapath, language, ocrEngineMode, configs, configList.size()); if (psm > -1) { TessBaseAPISetPageSegMode(handle, psm); } }. \n### Response: Initializes Tesseract engine..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void cacheResultSetEntities(final Object[] result) { if (entitiesCache == null) { entitiesCache = new HashMap<>(); } for (int i = 0; i < result.length; i++) { Object object = result[i]; if (object == null) { continue; } DbEntityDescriptor ded = cachedDbEntityDescriptors[i]; if (ded == null) { // not a type, continue continue; } // calculate key Object key; if (ded.hasIdColumn()) { //noinspection unchecked key = ded.getKeyValue(object); } else { key = object; } Object cachedObject = entitiesCache.get(key); if (cachedObject == null) { // object is not in the cache, add it entitiesCache.put(key, object); } else { // object is in the cache, replace it result[i] = cachedObject; } } } \n### Response:", "ground_truth": "Caches returned entities. Replaces new instances with existing ones.", "predict": "caches the results of ResultSet entities based on the type of the object.."}, {"ID": 1374, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def validate_config(raise_=True): \"\"\" Verifies that all configuration values have a valid setting \"\"\" ELIBConfig.check() known_paths = set() duplicate_values = set() missing_values = set() for config_value in ConfigValue.config_values: if config_value.path not in known_paths: known_paths.add(config_value.path) else: duplicate_values.add(config_value.name) try: config_value() except MissingValueError: missing_values.add(config_value.name) if raise_ and duplicate_values: raise DuplicateConfigValueError(str(duplicate_values)) if raise_ and missing_values: raise MissingValueError(str(missing_values), 'missing config value(s)') return duplicate_values, missing_values. \n### Response: Verifies that all configuration values have a valid setting.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public ProviderDefinition[] resolve(final Class type, final String name) { ClassDescriptor cd = ClassIntrospector.get().lookup(type); MethodDescriptor[] methods = cd.getAllMethodDescriptors(); List<ProviderDefinition> list = new ArrayList<>(); for (MethodDescriptor methodDescriptor : methods) { Method method = methodDescriptor.getMethod(); PetiteProvider petiteProvider = method.getAnnotation(PetiteProvider.class); if (petiteProvider == null) { continue; } String providerName = petiteProvider.value(); if (StringUtil.isBlank(providerName)) { // default provider name providerName = method.getName(); if (providerName.endsWith(\"Provider\")) { providerName = StringUtil.substring(providerName, 0, -8); } } ProviderDefinition providerDefinition; if (Modifier.isStatic(method.getModifiers())) { providerDefinition = new ProviderDefinition(providerName, method); } else { providerDefinition = new ProviderDefinition(providerName, name, method); } list.add(providerDefinition); } ProviderDefinition[] providers; if (list.isEmpty()) { providers = ProviderDefinition.EMPTY; } else { providers = list.toArray(new ProviderDefinition[0]); } return providers; } \n### Response:", "ground_truth": "Resolves all providers in the class", "predict": "Resolves the provider definition for a given type and name.\n\nNote: This method lookups the method descriptor for the given type and name, and creates a list of provider definitions. It then iterates over the list and adds each provider definition to a new list. Finally, it returns the list of providers."}, {"ID": 1375, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function () { this.e.log&&this.e.log(\"Attaching default event's handlers...\",'system'); var events = this.getEvents(); for (e in events) { var eventName = e.split('-').pop(), event = this.getEvent(eventName), evtConfig = event.getConfig(); if (evtConfig.handler != null && this[evtConfig.handler] && typeof this[evtConfig.handler] == 'function') { event.addListener(this[evtConfig.handler]); event.setConfig({ handler: null }); } if (evtConfig.listenEvent != null && e.indexOf('event-module') == -1 && this.hasEvent(evtConfig.listenEvent)) { var listenTo = this.getEvent(evtConfig.listenEvent), listenName = evtConfig.listenEvent+''; listenTo.addListener(function (e) { if (typeof e == 'object' && e.stopPropagation == true) return false; this.event.emit.apply(this.event,arguments); }.bind({ event: event })); event.setConfig({ listenEvent: null }); } } }. \n### Response: Search for handlers and eventlisteners\nof all events of this component..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public String applyToTableName(final String tableName) { String entityName = convertTableNameToEntityName(tableName); return convertEntityNameToTableName(entityName); } \n### Response:", "ground_truth": "Applies table naming strategy to given table name hint.\nReturns full table name.", "predict": "Converts a table name to an entity name."}, {"ID": 1376, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function add_field(xmldb_table $xmldb_table, xmldb_field $xmldb_field) { // Check the field doesn't exist if ($this->field_exists($xmldb_table, $xmldb_field)) { throw new ddl_exception('ddlfieldalreadyexists', $xmldb_field->getName()); } // If NOT NULL and no default given (we ask the generator about the // *real* default that will be used) check the table is empty if ($xmldb_field->getNotNull() && $this->generator->getDefaultValue($xmldb_field) === NULL && $this->mdb->count_records($xmldb_table->getName())) { throw new ddl_exception('ddlunknownerror', null, 'Field ' . $xmldb_table->getName() . '->' . $xmldb_field->getName() . ' cannot be added. Not null fields added to non empty tables require default value. Create skipped'); } if (!$sqlarr = $this->generator->getAddFieldSQL($xmldb_table, $xmldb_field)) { throw new ddl_exception('ddlunknownerror', null, 'addfield sql not generated'); } $this->execute_sql_arr($sqlarr, array($xmldb_table->getName())); }. \n### Response: This function will add the field to the table passed as arguments\n\n@param xmldb_table $xmldb_table Table object (just the name is mandatory).\n@param xmldb_field $xmldb_field Index object (full specs are required).\n@return void.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private boolean isConnectionValid(final ConnectionData connectionData, final long now) { if (!validateConnection) { return true; } if (now < connectionData.lastUsed + validationTimeout) { return true; } Connection conn = connectionData.connection; if (validationQuery == null) { try { return !conn.isClosed(); } catch (SQLException sex) { return false; } } boolean valid = true; Statement st = null; try { st = conn.createStatement(); st.execute(validationQuery); } catch (SQLException sex) { valid = false; } finally { if (st != null) { try { st.close(); } catch (SQLException ignore) { } } } return valid; } \n### Response:", "ground_truth": "Checks if existing connection is valid and available. It may happens\nthat if connection is not used for a while it becomes inactive,\nalthough not technically closed.", "predict": "This method checks if the connection is valid and if the last used time is within the validation timeout. It also creates a statement and executes a validation query if necessary. Finally, it closes the statement and any open connections."}, {"ID": 1377, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected function replaceDefaultSymfonyLineDumpers() { HtmlDumper::$defaultOutput = CliDumper::$defaultOutput = function ($line, $depth, $indentPad) { if (-1 !== $depth) { echo str_repeat($indentPad, $depth).$line.PHP_EOL; } }; }. \n### Response: Replaces the default output stream of Symfony's\nCliDumper and HtmlDumper classes in order to\nbe able to run on Google App Engine.\n\n'php://stdout' is used by CliDumper,\n'php://output' is used by HtmlDumper,\nboth are not supported on GAE..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override protected void renderView(final ActionRequest actionRequest, final String target) throws Exception { HttpServletRequest request = actionRequest.getHttpServletRequest(); HttpServletResponse response = actionRequest.getHttpServletResponse(); RequestDispatcher dispatcher = request.getRequestDispatcher(target); if (dispatcher == null) { response.sendError(SC_NOT_FOUND, \"Result not found: \" + target); // should never happened return; } // If we're included, then include the view, otherwise do forward. // This allow the page to, for example, set content type. if (DispatcherUtil.isPageIncluded(request, response)) { dispatcher.include(request, response); } else { dispatcher.forward(request, response); } } \n### Response:", "ground_truth": "Renders the view by dispatching to the target JSP.", "predict": "Provides a method for rendering a view in a web application.\n\nThis method takes in an ActionRequest and a target string as arguments and throws an exception if the target string is not found.\n\nThe method first gets the request and response objects from the action request. It then gets the requestDispatcher object from the request.\n\nIf the requestDispatcher is null, it sends an error message with the specified error code (SC_NOT_FOUND) to the response object.\n\nIf the target string is included in the request, it includes the view by calling the dispatcher.include() method. Otherwise, it calls the dispatcher.forward() method to forward the request to the next step in the application.\n\nThis method allows for the setting of content type, for example, by allowing the page to be included."}, {"ID": 1378, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private static void addMBeanIdentifier(Query query, Result result, StringBuilder sb) { if (result.getKeyAlias() != null) { sb.append(result.getKeyAlias()); } else if (query.isUseObjDomainAsKey()) { sb.append(StringUtils.cleanupStr(result.getObjDomain(), query.isAllowDottedKeys())); } else { sb.append(StringUtils.cleanupStr(result.getClassName())); } }. \n### Response: Adds a key to the StringBuilder\n\nIt uses in order of preference:\n\n1. resultAlias if that was specified as part of the query\n2. The domain portion of the ObjectName in the query if useObjDomainAsKey is set to true\n3. else, the Class Name of the MBean. I.e. ClassName will be used by default if the\nuser doesn't specify anything special\n@param query\n@param result\n@param sb.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override protected String locateTarget(final ActionRequest actionRequest, String path) { String target; if (path.endsWith(StringPool.SLASH)) { path = path + defaultViewPageName; } for (final String ext : defaultViewExtensions) { target = path + ext; if (targetExists(actionRequest, target)) { return target; } } return null; } \n### Response:", "ground_truth": "Locates target using path with various extensions appended.", "predict": "Locates the target of a view in the specified path.\n\nIt first checks if the path ends with the StringPool.SLASH constant, and if so, it sets the path to the name of the default view page. It then iterates through the extensions specified in the defaultViewExtensions constant and appends the path and the extension to a target string. Finally, it checks if the target string already exists in the actionRequest.path variable, and if so, returns the target. If no target exists, it returns null.\n@param actionRequest\n@param path."}, {"ID": 1379, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (l *LatencyMetrics) Add(latency time.Duration) { l.init() if l.Total += latency; latency > l.Max { l.Max = latency } l.estimator.Add(float64(latency)) }. \n### Response: // Add adds the given latency to the latency metrics..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public PrintWriter getWriter() throws IOException { preResponseCommit(); if (buffer == null) { return getResponse().getWriter(); } return buffer.getWriter(); } \n### Response:", "ground_truth": "Returns buffered writer if buffering is enabled,\notherwise returns the original writer.", "predict": "// GetWriter returns the PrintWriter associated with the response, if one exists. \n\n"}, {"ID": 1380, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (s *Server) GetService(ctx context.Context, request *api.GetServiceRequest) (*api.GetServiceResponse, error) { if request.ServiceID == \"\" { return nil, status.Errorf(codes.InvalidArgument, errInvalidArgument.Error()) } var service *api.Service s.store.View(func(tx store.ReadTx) { service = store.GetService(tx, request.ServiceID) }) if service == nil { return nil, status.Errorf(codes.NotFound, \"service %s not found\", request.ServiceID) } if request.InsertDefaults { service.Spec = *defaults.InterpolateService(&service.Spec) } return &api.GetServiceResponse{ Service: service, }, nil }. \n### Response: // GetService returns a Service given a ServiceID.\n// - Returns `InvalidArgument` if ServiceID is not provided.\n// - Returns `NotFound` if the Service is not found..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public ServletOutputStream getOutputStream() throws IOException { preResponseCommit(); if (buffer == null) { return getResponse().getOutputStream(); } return buffer.getOutputStream(); } \n### Response:", "ground_truth": "Returns buffered output stream if buffering is enabled,\notherwise returns the original stream.", "predict": "// GetOutputStream returns the ServletOutputStream for the response.\n// It first commits the response before returning it.\n// If the buffer is null, it returns the response output stream.\n// Otherwise, it returns the buffer output stream."}, {"ID": 1381, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def mark_best_classifications(errors): \"\"\" Convenience wrapper around mark_best_classification. Finds the best match for each TextLogError in errors, handling no match meeting the cut off score and then mark_best_classification to save that information. \"\"\" for text_log_error in errors: best_match = get_best_match(text_log_error) if not best_match: continue mark_best_classification(text_log_error, best_match.classified_failure). \n### Response: Convenience wrapper around mark_best_classification.\n\n    Finds the best match for each TextLogError in errors, handling no match\n    meeting the cut off score and then mark_best_classification to save that\n    information..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void writeContentToResponse(final char[] content) throws IOException { if (buffer == null) { return; } if (buffer.isUsingStream()) { ServletOutputStream outputStream = getResponse().getOutputStream(); String encoding = getContentTypeEncoding(); if (encoding == null) { outputStream.write(CharUtil.toByteArray(content)); } else { outputStream.write(CharUtil.toByteArray(content, encoding)); } outputStream.flush(); } else { Writer out = getResponse().getWriter(); out.write(content); out.flush(); } } \n### Response:", "ground_truth": "Writes content to original output stream, using either output stream or writer, depending\non how the content was buffered. It is assumed that provided content is a modified\nwrapped content.", "predict": "Writes the content of the given char array to the response.\n\n    Writes the content of the given char array to the response, using the\n    ServletOutputStream and Writer to output the content to the client.\n    If the buffer is null, returns immediately.\n    If the buffer is using a stream, converts it to a byte array and\n    writes it to the response using the CharUtil.toByteArray() method.\n    Then, if the content type encoding is null, writes the byte array to\n    the response using the getContentTypeEncoding() method.\n    Finally, writes the content to the response using the Writer.write()\n    method and the Writer.flush() method to ensure that it is sent to the\n    client."}, {"ID": 1382, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String toHexString(byte[] data) { StringBuilder sb = new StringBuilder(data.length * 2); for (byte element : data) { sb.append(Integer.toHexString((element >> 4) & 15)); sb.append(Integer.toHexString(element & 15)); } return sb.toString(); }. \n### Response: Turn a bytearray into a printable form, representing each byte in hex.\n\n@param data the bytearray to stringize\n@return a hex-encoded printable representation of {@code data}.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public void setContentType(final String type) { super.setContentType(type); contentTypeResolver = new ContentTypeHeaderResolver(type); if (bufferContentType(type, contentTypeResolver.getMimeType(), contentTypeResolver.getEncoding())) { enableBuffering(); } else { disableBuffering(); } } \n### Response:", "ground_truth": "Sets the content type and enables or disables buffering.", "predict": "Set the content type of the response based on the specified type.\n\n@param type the content type to set\n@return void\n\nThis method sets the content type of the response based on the specified type. It creates a new ContentTypeHeaderResolver object and checks if the specified mime type and encoding are available. If they are, it enables buffering of the response. Otherwise, it disables buffering. This method is typically used in a server-side application to ensure that the response is properly formatted and can be easily parsed by the client."}, {"ID": 1383, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def add_bundle(self, prov_bundle, identifier): \"\"\" Verbose method of adding a bundle. Can also be done as: >>> api = Api() >>> document = api.document.get(148) >>> document.bundles['identifier'] = prov_bundle :param prov_bundle: The bundle to be added :param str identifier: URI or QName for this bundle :type prov_bundle: :py:class:`prov.model.ProvDocument` or :py:class:`str` \"\"\" if self.abstract: raise AbstractDocumentException() self._api.add_bundle(self.id, prov_bundle.serialize(), identifier). \n### Response: Verbose method of adding a bundle.\n\n        Can also be done as:\n          >>> api = Api()\n          >>> document = api.document.get(148)\n          >>> document.bundles['identifier'] = prov_bundle\n\n        :param prov_bundle: The bundle to be added\n        :param str identifier: URI or QName for this bundle\n        :type prov_bundle: :py:class:`prov.model.ProvDocument` or :py:class:`str`.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void print(final String string) throws IOException { if (isBufferStreamBased()) { String encoding = getContentTypeEncoding(); byte[] bytes; if (encoding == null) { bytes = string.getBytes(); } else { bytes = string.getBytes(encoding); } buffer.getOutputStream().write(bytes); return; } // make sure at least writer is initialized buffer.getWriter().write(string); } \n### Response:", "ground_truth": "Appends string to the buffer.", "predict": "Method for printing a string.\n\nThis method throws an IOException if the output stream is not buffer-based. It first checks if the content type encoding is null, and if so, it generates the byte array of the string. If the encoding is not null, it generates the byte array of the string and writes it to the output stream. Finally, it returns to allow the caller to continue writing to the output stream.\n\nThe method also initializes the writer if it has not been initialized before.\n\nNote that this method is only applicable if the output stream is not buffer-based. If the output stream is buffer-based, the method will not work as expected and will throw an exception."}, {"ID": 1384, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected String processLabel(String label, String name) { if (null != label) { if (Strings.isEmpty(label)) return null; else return getText(label); } else return getText(name); }. \n### Response: Process label,convert empty to null\n\n@param label\n@param name\n@return.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected JsonResult login() { T authToken; authToken = loginViaBasicAuth(servletRequest); if (authToken == null) { authToken = loginViaRequestParams(servletRequest); } if (authToken == null) { log.warn(\"Login failed.\"); return JsonResult.of(HttpStatus.error401().unauthorized(\"Login failed.\")); } log.info(\"login OK!\"); final UserSession<T> userSession = new UserSession<>(authToken, userAuth.tokenValue(authToken)); userSession.start(servletRequest, servletResponse); // return token return tokenAsJson(authToken); } \n### Response:", "ground_truth": "Authenticate user and start user session.", "predict": "### Login Method\n\n* Authenticates the user via Basic Authentication or Request Params and returns the authToken.\n* If authentication fails, returns an error 401 and logs a warning message.\n* If authentication is successful, creates a UserSession and starts it.\n* Returns the token as a JSON object.\n\n@return the authToken\n\n@paramservletRequest\n@paramservletResponse\n@return."}, {"ID": 1385, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (es *ExtraOptionSlice) String() string { s := []string{} for _, e := range *es { s = append(s, e.String()) } return strings.Join(s, \" \") }. \n### Response: // String converts the slice to a string value.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected JsonResult tokenAsJson(final T authToken) { final JsonObject jsonObject = new JsonObject(); jsonObject.put(\"token\", userAuth.tokenValue(authToken)); return JsonResult.of(jsonObject); } \n### Response:", "ground_truth": "Prepares the JSON payload that carries on the token value.", "predict": "// TokenAsJson returns a JsonResult with the token data as the content of the jsonObject."}, {"ID": 1386, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function bindTransformFeedbackInfo(gl, transformFeedbackInfo, bufferInfo) { if (transformFeedbackInfo.transformFeedbackInfo) { transformFeedbackInfo = transformFeedbackInfo.transformFeedbackInfo; } if (bufferInfo.attribs) { bufferInfo = bufferInfo.attribs; } for (const name in bufferInfo) { const varying = transformFeedbackInfo[name]; if (varying) { const buf = bufferInfo[name]; if (buf.offset) { gl.bindBufferRange(gl.TRANSFORM_FEEDBACK_BUFFER, varying.index, buf.buffer, buf.offset, buf.size); } else { gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, varying.index, buf.buffer); } } } }. \n### Response: Binds buffers for transform feedback.\n\n@param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n@param {(module:twgl.ProgramInfo|Object)} transformFeedbackInfo A ProgramInfo or TransformFeedbackInfo.\n@param {(module:twgl.BufferInfo|Object)} [bufferInfo] A BufferInfo or set of AttribInfos.\n@memberOf module:twgl.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected T loginViaBasicAuth(final HttpServletRequest servletRequest) { final String username = ServletUtil.resolveAuthUsername(servletRequest); if (username == null) { return null; } final String password = ServletUtil.resolveAuthPassword(servletRequest); return userAuth.login(username, password); } \n### Response:", "ground_truth": "Tries to login user with basic authentication.", "predict": "Logins the user via basic auth.\n\n@param {HttpServletRequest} servletRequest The HttpServletRequest to use for authentication.\n@returns The T object representing the authenticated user.\n@memberOf module:java.web.server.auth.BasicAuth.\n\n"}, {"ID": 1387, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def validate(self, name, value): \"\"\"Validate a cookie attribute with an appropriate validator. The value comes in already parsed (for example, an expires value should be a datetime). Called automatically when an attribute value is set. \"\"\" validator = self.attribute_validators.get(name, None) if validator: return True if validator(value) else False return True. \n### Response: Validate a cookie attribute with an appropriate validator.\n\n        The value comes in already parsed (for example, an expires value\n        should be a datetime). Called automatically when an attribute\n        value is set..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected JsonResult logout() { log.debug(\"logout user\"); UserSession.stop(servletRequest, servletResponse); return JsonResult.of(HttpStatus.ok()); } \n### Response:", "ground_truth": "Logout hook.", "predict": "Implement a method named \"logout\" that logs the user out and returns a JSON response with an HTTP status of \"OK\".\n\n        The user is logged out by stopping the current UserSession.\n        This method should also return a JSON response indicating that the\n        logout was successful."}, {"ID": 1388, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def nv_tuple_list_replace(l, v): \"\"\" replace a tuple in a tuple list \"\"\" _found = False for i, x in enumerate(l): if x[0] == v[0]: l[i] = v _found = True if not _found: l.append(v). \n### Response: replace a tuple in a tuple list.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static File toContainerFile(final URL url) { String protocol = url.getProtocol(); if (protocol.equals(FILE_PROTOCOL)) { return toFile(url); } String path = url.getPath(); return new File(URI.create( path.substring(ZERO, path.lastIndexOf(\"!/\")))); } \n### Response:", "ground_truth": "Returns a file of either a folder or a containing archive.", "predict": "This method returns a File object for a URL. It first checks if the protocol is FILE_PROTOCOL, and if so, it returns the File object associated with the URL. Otherwise, it returns a new File object with the specified path."}, {"ID": 1389, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func printVLANs(tsv bool, vlans ...*crimson.VLAN) { if len(vlans) > 0 { p := newStdoutPrinter(tsv) defer p.Flush() if !tsv { p.Row(\"ID\", \"Alias\", \"Description\", \"State\", \"CIDR Block\") } for _, v := range vlans { p.Row(v.Id, v.Alias, v.Description, v.State, v.CidrBlock) } } }. \n### Response: // printVLANs prints VLAN data to stdout in tab-separated columns..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static File mkdirs(final File dirs) throws IOException { if (dirs.exists()) { checkIsDirectory(dirs); return dirs; } return checkCreateDirectory(dirs); } \n### Response:", "ground_truth": "Creates all directories at once.\n\n@param dirs Directories to make.\n@throws IOException if cannot create directory.", "predict": "// mkdirs returns an error if the directory does not exist, or if creating it throws an exception.."}, {"ID": 1390, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func removePidFile(loadedConfig *config.GatewayConfig, logger log.Logger) { if loadedConfig != nil { log.IfErr(logger, os.Remove(*loadedConfig.PidFilename)) } }. \n### Response: // removePidFile removes the pid file for the gateway server.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static File mkdir(final File dir) throws IOException { if (dir.exists()) { checkIsDirectory(dir); return dir; } return checkCreateDirectory(dir); } \n### Response:", "ground_truth": "Creates single directory.\n\n@throws IOException if cannot create directory.", "predict": "// mkdir creates a directory if it already exists, or returns the directory if it doesn't."}, {"ID": 1391, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def post(self, uri, default_response=None, **kwargs): \"\"\" Call POST on the Gitlab server >>> gitlab = Gitlab(host='http://localhost:10080', verify_ssl=False) >>> gitlab.login(user='root', password='5iveL!fe') >>> password = 'MyTestPassword1' >>> email = 'example@example.com' >>> data = {'name': 'test', 'username': 'test1', 'password': password, 'email': email} >>> gitlab.post('/users/5', **data) :param uri: String with the URI for the endpoint to POST to :param default_response: Return value if JSONDecodeError :param kwargs: Key word arguments representing the data to use in the POST :return: Dictionary containing response data :raise: HttpError: If invalid response returned \"\"\" url = self.api_url + uri response = requests.post( url, headers=self.headers, data=kwargs, verify=self.verify_ssl, auth=self.auth, timeout=self.timeout) return self.success_or_raise(response, default_response=default_response). \n### Response: Call POST on the Gitlab server\n\n        >>> gitlab = Gitlab(host='http://localhost:10080', verify_ssl=False)\n        >>> gitlab.login(user='root', password='5iveL!fe')\n        >>> password = 'MyTestPassword1'\n        >>> email = 'example@example.com'\n        >>> data = {'name': 'test', 'username': 'test1', 'password': password, 'email': email}\n        >>> gitlab.post('/users/5', **data)\n\n        :param uri: String with the URI for the endpoint to POST to\n        :param default_response: Return value if JSONDecodeError\n        :param kwargs: Key word arguments representing the data to use in the POST\n        :return: Dictionary containing response data\n        :raise: HttpError: If invalid response returned.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private static void _copyFile(final File srcFile, final File destFile) throws IOException { if (destFile.exists()) { if (destFile.isDirectory()) { throw new IOException(\"Destination '\" + destFile + \"' is a directory\"); } } // do copy file FileInputStream input = null; FileOutputStream output = null; try { input = new FileInputStream(srcFile); output = new FileOutputStream(destFile, false); StreamUtil.copy(input, output); } finally { StreamUtil.close(output); StreamUtil.close(input); } // done if (srcFile.length() != destFile.length()) { throw new IOException(\"Copy file failed of '\" + srcFile + \"' to '\" + destFile + \"' due to different sizes\"); } destFile.setLastModified(srcFile.lastModified()); } \n### Response:", "ground_truth": "Internal file copy when most of the pre-checking has passed.\n\n@param srcFile  Source {@link File}.\n@param destFile Destination {@link File}.\n@throws IOException if cannot copy", "predict": "### Method-level comment:\nThis method is used to copy a file from one location to another. It throws an IOException if the destination file is a directory or if it exists but is not empty. It uses the StreamUtil class to copy the file data between the input and output streams.\n\n### Resp\nThis method is used to copy a file from one location to another. It checks if the destination file already exists, if it does it throws an IOException. If the destination file is a directory it also throws an IOException. The method uses the StreamUtil class to copy the file data between the input and output streams. It sets the last modified date of the destination file to the last modified date of the source file.\n\n"}, {"ID": 1392, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function destroy(Admin $admin, Media $media) { $admin->media()->where($media->getKeyName(), $media->getKey())->first()->delete(); return intend([ 'url' => route('adminarea.admins.edit', ['admin' => $admin]), 'with' => ['warning' => trans('cortex/foundation::messages.resource_deleted', ['resource' => trans('cortex/foundation::common.media'), 'identifier' => $media->getRouteKey()])], ]); }. \n### Response: Destroy given admin media.\n\n@param \\Cortex\\Auth\\Models\\Admin         $admin\n@param \\Spatie\\MediaLibrary\\Models\\Media $media\n\n@return \\Illuminate\\Http\\JsonResponse|\\Illuminate\\Http\\RedirectResponse.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void copyDir(final File srcDir, final File destDir) throws IOException { checkDirCopy(srcDir, destDir); _copyDirectory(srcDir, destDir); } \n### Response:", "ground_truth": "Copies directory with specified copy params.\n\n@see #_copyDirectory(File, File)", "predict": "Copy the specified directory from the source to the destination.\n\n@param File srcDir\n@param File destDir\n\n@throw IOException\n\nNote: This method is part of the Illuminate\\Foundation\\Console\\Kernel class and is used to perform file system operations."}, {"ID": 1393, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def insert_authentication_data(self, key): ''' Insert authentication data based on the current key-id and the given key. ''' correct_authentication_data = self.calculate_authentication_data(key) self.authentication_data = correct_authentication_data. \n### Response: Insert authentication data based on the current key-id and the given\n        key..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static File moveFileToDir(final File srcFile, final File destDir) throws IOException { checkExistsAndDirectory(destDir); return moveFile(srcFile, file(destDir, srcFile.getName())); } \n### Response:", "ground_truth": "Moves a file to a directory.\n\n@param srcFile Source {@link File}.\n@param destDir Destination directory.\n@throws IOException if there is an error during move.", "predict": "Moves the specified file to the specified directory.\n```\n        public static File moveFileToDir(File srcFile, File destDir) throws IOException {\n            checkExistsAndDirectory(destDir);\n            return moveFile(srcFile, file(destDir, srcFile.getName()));\n        }\n```"}, {"ID": 1394, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public int compare(final Orderable<T> orderable1, final Orderable<T> orderable2) { return orderable1.getOrder().compareTo(orderable2.getOrder()); }. \n### Response: Compares two Orderable objects to determine their relative order by their order property.\n\n@param orderable1 the first Orderable object in the order comparison.\n@param orderable2 the second Orderable object in the order comparison.\n@return an integer value indicating one Orderable object's order relative to another Orderable object..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private static void _moveDirectory(final File srcDest, File destDir) throws IOException { if (destDir.exists()) { checkIsDirectory(destDir); destDir = file(destDir, destDir.getName()); destDir.mkdir(); } final boolean rename = srcDest.renameTo(destDir); if (!rename) { _copyDirectory(srcDest, destDir); deleteDir(srcDest); } } \n### Response:", "ground_truth": "Moves a directory.\n\n@param srcDest Source directory\n@param destDir Destination directory.\n@throws IOException if there is an error during move.", "predict": "Moves the contents of the source directory to the destination directory, and possibly copies any existing files or directories.\n\n@param srcDest the source directory to be moved.\n@param destDir the destination directory to be created.\n@return a boolean value indicating whether the move was successful.\n@throw IOException if an I/O error occurs during the move operation.\n\nNote: This method is used to move a directory and its contents to a different location. It may not be suitable for moving large files or directories. It is recommended to use other methods for moving files or directories, such as `File.move()` or `File.mkdir()` and `File.renameTo()`."}, {"ID": 1395, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private function handleLineNotEmpty(File $phpcsFile, int $whitespacePtr): void { $fixSpaceNotScndLine = $phpcsFile->addFixableError( self::ERROR_LINE_NOT_EMPTY, $whitespacePtr, static::CODE_LINE_NOT_EMPTY ); if ($fixSpaceNotScndLine) { $phpcsFile->fixer->beginChangeset(); $phpcsFile->fixer->replaceToken( $whitespacePtr, '' ); $phpcsFile->fixer->endChangeset(); } }. \n### Response: Handles line after open tag not empty.\n\n@param File $phpcsFile The php cs file\n@param int $whitespacePtr Pointer to the line after the open tag\n\n@return void.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void cleanDir(final File destDir) throws IOException { checkExists(destDir); checkIsDirectory(destDir); File[] files = destDir.listFiles(); if (files == null) { throw new IOException(\"Failed to list contents of: \" + destDir); } IOException exception = null; for (File file : files) { try { if (file.isDirectory()) { deleteDir(file); } else { file.delete(); } } catch (IOException ioex) { exception = ioex; continue; } } if (exception != null) { throw exception; } } \n### Response:", "ground_truth": "Cleans a directory without deleting it.\n\n@param destDir destination to clean.\n@throws IOException if something went wrong.", "predict": "Cleans up files in the specified directory.\n\n@param File destDir The directory to clean up\n\n@return void."}, {"ID": 1396, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function callMe() { $output = $this->dispatchStartEvent(); // This is actually an array, we ara analysing. But We do not want to render // an array, so we need to process it like the return from an iterator. /** @var \\ReflectionClass $ref */ $ref = $this->parameters[static::PARAM_REF]; $refConst = $ref->getConstants(); if (empty($refConst) === true) { // Nothing to see here, return an empty string. return ''; } // We've got some values, we will dump them. $classname = '\\\\' . $ref->getName(); return $output . $this->pool->render->renderExpandableChild( $this->dispatchEventWithModel( static::EVENT_MARKER_ANALYSES_END, $this->pool->createClass('Brainworxx\\\\Krexx\\\\Analyse\\\\Model') ->setName('Constants') ->setType(static::TYPE_INTERNALS) ->setIsMetaConstants(true) ->addParameter(static::PARAM_DATA, $refConst) ->addParameter(static::PARAM_CLASSNAME, $classname) ->injectCallback( $this->pool->createClass('Brainworxx\\\\Krexx\\\\Analyse\\\\Callback\\\\Iterate\\\\ThroughConstants') ) ) ); }. \n### Response: Dumps the constants of a class,\n\n@return string\nThe generated markup..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static char[] readUTFChars(final File file) throws IOException { checkExists(file); checkIsFile(file); UnicodeInputStream in = unicodeInputStreamOf(file); try { return StreamUtil.readChars(in, detectEncoding(in)); } finally { StreamUtil.close(in); } } \n### Response:", "ground_truth": "Reads UTF file content as char array.\n\n@param file {@link File} to read.\n@return array of characters.\n@throws IOException if something went wrong.", "predict": "ReadsUTFChars from a file.\n\n@param File file to read from.\n\n@return an array of characters.\n\n@throws IOException If an error occurs while reading from the file.\n\nNote: This method is used for reading characters from a file in UTF-8 encoding. It first checks if the file exists, is a file, and if it is a regular file. Then it creates a UnicodeInputStream from the file and reads the characters using StreamUtil.readChars(). Finally, it closes the input stream."}, {"ID": 1397, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function fails() { if (!($this->validator instanceof \\Illuminate\\Validation\\Validator)) { throw new LogicException('No model was set. Nothing to validate.'); } return $this->getValidator()->fails(); }. \n### Response: Returns true if data model fails validation.\n\nMethod wraps laravel validator's method fails()\n\n@return bool\n@throws \\Exception.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static char[] readChars(final File file, final String encoding) throws IOException { checkExists(file); checkIsFile(file); InputStream in = streamOf(file, encoding); try { return StreamUtil.readChars(in, encoding); } finally { StreamUtil.close(in); } } \n### Response:", "ground_truth": "Reads file content as char array.\n\n@param file     {@link File} to read.\n@param encoding Encoding to use.\n@return array of characters.\n@throws IOException if something went wrong.", "predict": "Method reads characters from a file.\n\n@param file The file to read characters from.\n@param encoding The encoding of the file.\n@return An array of characters.\n@throws IOException If an error occurs while reading from the file."}, {"ID": 1398, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def market(self, accountID, **kwargs): \"\"\" Shortcut to create a Market Order in an Account Args: accountID : The ID of the Account kwargs : The arguments to create a MarketOrderRequest Returns: v20.response.Response containing the results from submitting the request \"\"\" return self.create( accountID, order=MarketOrderRequest(**kwargs) ). \n### Response: Shortcut to create a Market Order in an Account\n\n        Args:\n            accountID : The ID of the Account\n            kwargs : The arguments to create a MarketOrderRequest\n\n        Returns:\n            v20.response.Response containing the results from submitting\n            the request.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void writeChars(final File dest, final char[] data, final String encoding) throws IOException { outChars(dest, data, encoding, false); } \n### Response:", "ground_truth": "Write characters. append = false\n\n@see #outChars(File, char[], String, boolean)", "predict": "Writes characters to a file specified by the dest file path and encoding.\n\n        Args:\n            dest : The file to write the characters to\n            data : The character array to write\n            encoding : The encoding to use for writing\n\n        Returns:\n            void\n\n         throws:\n            IOException : An IOException is thrown if an error occurs while writing the characters."}, {"ID": 1399, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def configure(self, tc_config_files, is_selenium_test=True, behave_properties=None): \"\"\"Configure initial selenium instance using logging and properties files for Selenium or Appium tests :param tc_config_files: test case specific config files :param is_selenium_test: true if test is a selenium or appium test case :param behave_properties: dict with behave user data properties \"\"\" # Configure config and output directories DriverWrappersPool.configure_common_directories(tc_config_files) # Configure logger self.configure_logger(tc_config_files.config_log_filename, tc_config_files.output_log_filename) # Initialize the config object self.configure_properties(tc_config_files.config_properties_filenames, behave_properties) # Configure visual directories if is_selenium_test: driver_info = self.config.get('Driver', 'type') DriverWrappersPool.configure_visual_directories(driver_info) self.configure_visual_baseline(). \n### Response: Configure initial selenium instance using logging and properties files for Selenium or Appium tests\n\n        :param tc_config_files: test case specific config files\n        :param is_selenium_test: true if test is a selenium or appium test case\n        :param behave_properties: dict with behave user data properties.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void writeString(final File dest, final String data, final String encoding) throws IOException { outString(dest, data, encoding, false); } \n### Response:", "ground_truth": "Writes String. append = false\n\n@see #outString(File, String, String, boolean)", "predict": "Writes a string to a file.\n\n        :param dest: file to write the string to\n        :param data: string to write\n        :param encoding: encoding of the string\n        :param isFalse: whether to append the string to the end of the file or not."}, {"ID": 1400, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function(slot) { const hbAdIdTargeting = slot.getTargeting('hb_adid'); if (hbAdIdTargeting.length > 0) { const hbAdId = hbAdIdTargeting[0]; return typeof this.prebidWinnersCache[hbAdId] !== 'undefined'; } return false; }. \n### Response: Decides if the GPT slot contains prebid ad impression or not.\n\nWhen BID_WON event is emitted adid is added to prebidWinnersCache,\nthen we check if prebidWinnersCache contains slot.hb_adid.\n\nThis function is optional and used only when googlePublisherTag is provided.\n\nDefault implementation uses slot's `hb_adid` targeting parameter.\n\n@param slot the gpt slot.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void appendString(final File dest, final String data, final String encoding) throws IOException { outString(dest, data, encoding, true); } \n### Response:", "ground_truth": "Appends String. append = true\n\n@see #outString(File, String, String, boolean)", "predict": "Appends the given data to the specified file.\n\nThis method is used to append a string to a file. It throws an IOException if an error occurs while appending the data.\n\n@param dest the file to append the data to.\n@param data the data to append.\n@param encoding the character encoding used to write the data.\n@param true if the file should be written in append mode.\n\n"}, {"ID": 1401, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function getPrevious($modelForm, $auditId) { $query = new Query; $this->prepareCondition($query, $modelForm); $query->andWhere('audit_id < :auditId', ['auditId' => $auditId]); $query->orderBy('audit_id desc'); $columns = $this->getRelations($query, $modelForm->table); $columns[] = 'audit.*'; $query->select(join(', ', $columns))->from(\"audits.{$modelForm->table} audit\"); $row = $query->one(); return $this->unsetHiddenColumns($row); }. \n### Response: Gets previous element from database\n\n@param \\yii\\base\\Model $modelForm\n@param integer $auditId\n@return array.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static byte[] readBytes(final File file, final int count) throws IOException { checkExists(file); checkIsFile(file); long numToRead = file.length(); if (numToRead >= Integer.MAX_VALUE) { throw new IOException(\"File is larger then max array size\"); } if (count > NEGATIVE_ONE && count < numToRead) { numToRead = count; } byte[] bytes = new byte[(int) numToRead]; RandomAccessFile randomAccessFile = new RandomAccessFile(file, \"r\"); randomAccessFile.readFully(bytes); randomAccessFile.close(); return bytes; } \n### Response:", "ground_truth": "Read file and returns byte array with contents.\n\n@param file  {@link File} to read\n@param count number of bytes to read\n@return byte array from {@link File} contents.\n@throws IOException if not a {@link File} or {@link File} does not exist or file size is\nlarger than {@link Integer#MAX_VALUE}.", "predict": "Reads bytes from a file.\n\n@param File $file\n@param int $count\n@return byte array."}, {"ID": 1402, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static boolean contains3D(Coordinate[] coords, Coordinate coord) { for (Coordinate coordinate : coords) { if (coordinate.equals3D(coord)) { return true; } } return false; }. \n### Response: Check if a coordinate array contains a specific coordinate.\n\nThe equality is done in 3D (z values ARE checked).\n\n@param coords\n@param coord\n@return.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void writeBytes(final File dest, final byte[] data, final int off, final int len) throws IOException { outBytes(dest, data, off, len, false); } \n### Response:", "ground_truth": "Write bytes. append = false\n\n@see #outBytes(File, byte[], int, int, boolean)", "predict": "Writes a byte array to a file.\n\n@param dest\n@param data\n@param off\n@param len\n@param false to indicate that no compression is used.\n\nNote: This method does not compress the data before writing it to the file."}, {"ID": 1403, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static function create($baseFolder = null, $cropsFolder = null, $adaptor = null) { return new static( $baseFolder, $cropsFolder, $adaptor ); }. \n### Response: Staticly create instance\n\n@return Crophandler.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void appendBytes(final File dest, final byte[] data, final int off, final int len) throws IOException { outBytes(dest, data, off, len, true); } \n### Response:", "ground_truth": "Appends bytes. append = true\n\n@see #outBytes(File, byte[], int, int, boolean)", "predict": "Method-level comment: Append bytes to a file.\n\n@param dest The file to append the data to.\n@param data The data to append.\n@param off The starting index of the data to append.\n@param len The length of the data to append.\n@param true The flag to indicate that the data is being written in chunks.\n@return No comment needed."}, {"ID": 1404, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function when(callable $predicate): self { $layer = new self(); $layer->parent = $this; $layer->predicates[] = $predicate; $this->layers[] = $layer; return $layer; }. \n### Response: Creates a new matching layer with the given predicate and returns it.\n\nThe predicate must be a callable that accepts a {@see RequestInterface} instance as first parameter and returns a\nboolean that represents whether the request matches the predicate's criteria.\n\n@param callable $predicate\n\n@return self The new matching layer.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void copy(final File src, final File dest) throws IOException { if (src.isDirectory()) { copyDir(src, dest); return; } if (dest.isDirectory()) { copyFileToDir(src, dest); return; } copyFile(src, dest); } \n### Response:", "ground_truth": "Smart copy. If source is a directory, copy it to destination.\nOtherwise, if destination is directory, copy source file to it.\nOtherwise, try to copy source file to destination file.\n\n@param src  source {@link File}\n@param dest destination {@link File}\n@throws IOException if there is an error copying.\n@see #copyDir(File, File)\n@see #copyFileToDir(File, File)\n@see #copyFile(File, File)", "predict": "This method copies a file or directory from one file system location to another file system location. It checks if the source and destination files are directories before performing the copy. If both files are directories, it calls the copyDir() method to copy the directory. If either file or destination is a directory, it calls the copyFileToDir() method to copy the file.\n\n@param src The source file or directory to copy.\n@param dest The destination file or directory to copy to.\n\n@return None.\n\nNote that this method throws an IOException if any of the operations fail due to an error.\n\nNote that the file system operations are performed in the background and do not block the main thread."}, {"ID": 1405, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function setBindingStyle($style, $transport) { $this->bindingStyle['style'] = $style; $this->bindingStyle['transport'] = $transport; return $this; }. \n### Response: Set the binding style.\n\n@param string $style The style (rpc or document).\n@param string $transport The transport.\n@return PHPClass2WSDL.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void delete(final File dest) throws IOException { if (dest.isDirectory()) { deleteDir(dest); return; } deleteFile(dest); } \n### Response:", "ground_truth": "Smart delete of destination file or directory.\n\n@throws IOException if there is an issue deleting the file/directory.\n@see #deleteFile(File)\n@see #deleteDir(File)", "predict": "Delete a file or directory.\n\n@param File $dest The file or directory to delete.\n@throws IOException The exception thrown if the deletion fails.\n@return void."}, {"ID": 1406, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function formatText($text, $type = null) { switch ($type) { case 'text': break; case 'url': $text = $this->Url->build($text, true); break; case 'sms': $text = 'smsto:' . implode(':', (array)$text); break; case 'tel': $text = 'tel:' . $text; break; case 'email': $text = 'mailto:' . $text; break; case 'geo': $text = 'geo:' . implode(',', (array)$text); #like 77.1,11.8 break; case 'market': $text = 'market://search?q=pname:' . $text; } return $text; }. \n### Response: Format a text in a specific format\n- url, sms, tel, email, market, geo\n\n@param string|array $text\n@param string|null $type\n@return string formattedText.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static File createTempDirectory(final String prefix, final String suffix, final File tempDir) throws IOException { File file = createTempFile(prefix, suffix, tempDir); file.delete(); file.mkdir(); return file; } \n### Response:", "ground_truth": "Creates temporary directory.\n\n@see #createTempFile(String, String, File)", "predict": "Create a temporary directory using the specified prefix, suffix, and tempDir. Delete the existing directory and create a new one if it doesn't exist. Return the created file.\n\n@param String prefix\n@param String suffix\n@param File tempDir\n@return File createdTempDirectory."}, {"ID": 1407, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (s *SchemaAttributeType) SetDeveloperOnlyAttribute(v bool) *SchemaAttributeType { s.DeveloperOnlyAttribute = &v return s }. \n### Response: // SetDeveloperOnlyAttribute sets the DeveloperOnlyAttribute field's value..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static boolean isBinary(final File file) throws IOException { byte[] bytes = readBytes(file, 128); for (byte b : bytes) { if (b < 32 && b != 9 && b != 10 && b != 13) { return true; } } return false; } \n### Response:", "ground_truth": "Checks the start of the file for ASCII control characters\n\n@param file {@link File}\n@return true if the the start of the {@link File} is ASCII control characters.", "predict": "// Reads the contents of the specified file as bytes and returns a boolean indicating if it is binary.."}, {"ID": 1408, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def random_public_ip(self): \"\"\"Return a randomly generated, public IPv4 address. :return: ip address \"\"\" randomip = random_ip() while self.is_reserved_ip(randomip): randomip = random_ip() return randomip. \n### Response: Return a randomly generated, public IPv4 address.\n\n        :return: ip address.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private static void checkDirCopy(final File srcDir, final File destDir) throws IOException { checkExists(srcDir); checkIsDirectory(srcDir); if (equals(srcDir, destDir)) { throw new IOException(\"Source '\" + srcDir + \"' and destination '\" + destDir + \"' are equal\"); } } \n### Response:", "ground_truth": "Checks that srcDir exists, that it is a directory and if srcDir and destDir are not equal.\n\n@param srcDir  Source directory\n@param destDir Destination directory\n@throws IOException if any of the above conditions are not true.", "predict": "Checks if the specified files in the source and destination directories exist, are directories, and if they are equal.\n\n        :param srcDir: The source directory.\n        :param destDir: The destination directory.\n        :return: None.\n        : throws: IOException.\n\n"}, {"ID": 1409, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (s *SeveritySummary) SetInformationalCount(v int64) *SeveritySummary { s.InformationalCount = &v return s }. \n### Response: // SetInformationalCount sets the InformationalCount field's value..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private static void checkFileCopy(final File srcFile, final File destFile) throws IOException { checkExists(srcFile); checkIsFile(srcFile); if (equals(srcFile, destFile)) { throw new IOException(\"Files '\" + srcFile + \"' and '\" + destFile + \"' are equal\"); } File destParent = destFile.getParentFile(); if (destParent != null && !destParent.exists()) { checkCreateDirectory(destParent); } } \n### Response:", "ground_truth": "Checks that file copy can occur.\n\n@param srcFile  Source {@link File}\n@param destFile Destination {@link File}\n@throws IOException if srcFile does not exist or is not a file or\nsrcFile and destFile are equal or cannot create ancestor directories.", "predict": "// Checks if the source file exists, is a file, and if it is the same as the destination file.\n// If the files are equal, throws an IOException with a message indicating that they are equal.\n// Checks if the destination file has a parent and if it doesn't exist, creates a directory if it doesn't already exist.\n```csharp\n```"}, {"ID": 1410, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (r QueryRequest) Analyze() (*QueryAnalysis, error) { switch r.Type { case \"flux\": return r.analyzeFluxQuery() case \"influxql\": return r.analyzeInfluxQLQuery() } return nil, fmt.Errorf(\"unknown query request type %s\", r.Type) }. \n### Response: // Analyze attempts to parse the query request and returns any errors\n// encountered in a structured way..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void printUsage(final String commandName) { final StringBuilder usage = new StringBuilder(commandName); for (final Option option : options) { if (option.shortName != null) { usage.append(\" [-\").append(option.shortName).append(\"]\"); } else if (option.longName != null) { usage.append(\" [--\").append(option.longName).append(\"]\"); } } for (final Param param : params) { usage.append(\" \").append(param.label); } System.out.println(usage); } \n### Response:", "ground_truth": "Prints the usage line.", "predict": "// Prints the usage of the given command.\n// Usage is a list of options and parameters, with\n// short names and long names separated by hyphens.\n// The usage is printed in a human-readable format."}, {"ID": 1411, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func addApplicationUnits(backend Backend, modelType state.ModelType, args params.AddApplicationUnits) ([]Unit, error) { if args.NumUnits < 1 { return nil, errors.New(\"must add at least one unit\") } assignUnits := true if modelType != state.ModelTypeIAAS { // In a CAAS model, there are no machines for // units to be assigned to. assignUnits = false if len(args.AttachStorage) > 0 { return nil, errors.Errorf( \"AttachStorage may not be specified for %s models\", modelType, ) } if len(args.Placement) > 1 { return nil, errors.Errorf( \"only 1 placement directive is supported for %s models, got %d\", modelType, len(args.Placement), ) } } // Parse storage tags in AttachStorage. if len(args.AttachStorage) > 0 && args.NumUnits != 1 { return nil, errors.Errorf(\"AttachStorage is non-empty, but NumUnits is %d\", args.NumUnits) } attachStorage := make([]names.StorageTag, len(args.AttachStorage)) for i, tagString := range args.AttachStorage { tag, err := names.ParseStorageTag(tagString) if err != nil { return nil, errors.Trace(err) } attachStorage[i] = tag } application, err := backend.Application(args.ApplicationName) if err != nil { return nil, errors.Trace(err) } return addUnits( application, args.ApplicationName, args.NumUnits, args.Placement, attachStorage, assignUnits, ) }. \n### Response: // addApplicationUnits adds a given number of units to an application..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public Method resolveActionMethod(final Class<?> actionClass, final String methodName) { MethodDescriptor methodDescriptor = ClassIntrospector.get().lookup(actionClass).getMethodDescriptor(methodName, false); if (methodDescriptor == null) { throw new MadvocException(\"Public method not found: \" + actionClass.getSimpleName() + \"#\" + methodName); } return methodDescriptor.getMethod(); } \n### Response:", "ground_truth": "Resolves action method for given action class ane method name.", "predict": "// resolveActionMethod retrieves a public method from the action class and method name.."}, {"ID": 1412, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def get_requested_aosp_permissions_details(self): \"\"\" Returns requested aosp permissions with details. :rtype: dictionary \"\"\" l = {} for i in self.permissions: try: l[i] = self.permission_module[i] except KeyError: # if we have not found permission do nothing continue return l. \n### Response: Returns requested aosp permissions with details.\n\n        :rtype: dictionary.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public ActionRuntime registerAction(final Class actionClass, final String actionMethodName, final ActionDefinition actionDefinition) { Method actionMethod = resolveActionMethod(actionClass, actionMethodName); return registerAction(actionClass, actionMethod, actionDefinition); } \n### Response:", "ground_truth": "Registers action with provided action class and method name.\n@see #registerAction(Class, Method, ActionDefinition)", "predict": "Registers an action with the specified class, method name, and action definition.\n\n        :param actionClass: the class of the action to register\n        :param actionMethodName: the name of the action method to register\n        :param actionDefinition: the definition of the action to register\n        :return: the registered actionRuntime\n        \"\"\""}, {"ID": 1413, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (c *ToolsConfig) Prepare(ctx *interpolate.Context) []error { if c.ParallelsToolsMode == \"\" { c.ParallelsToolsMode = ParallelsToolsModeUpload } if c.ParallelsToolsGuestPath == \"\" { c.ParallelsToolsGuestPath = \"prl-tools-{{.Flavor}}.iso\" } validMode := false validModes := []string{ ParallelsToolsModeDisable, ParallelsToolsModeAttach, ParallelsToolsModeUpload, } for _, mode := range validModes { if c.ParallelsToolsMode == mode { validMode = true break } } var errs []error if !validMode { errs = append(errs, fmt.Errorf(\"parallels_tools_mode is invalid. Must be one of: %v\", validModes)) } if c.ParallelsToolsFlavor == \"\" { if c.ParallelsToolsMode != ParallelsToolsModeDisable { errs = append(errs, errors.New(\"parallels_tools_flavor must be specified\")) } } return errs }. \n### Response: // Prepare validates & sets up configuration options related to Parallels Tools..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void registerPathAlias(final String alias, final String path) { final String existing = pathAliases.put(alias, path); if (existing != null) { throw new MadvocException(\"Duplicated alias detected: [\" + alias + \"] for paths: \" + path + \", \" + existing); } } \n### Response:", "ground_truth": "Registers new path alias.", "predict": "// RegisterPathAlias adds a path alias to the pathAliases map.."}, {"ID": 1414, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: void findInsertPointInLeft( Object new1, NodeInsertPoint point) { int endp = endPoint(); findIndex(0, endp, new1, point); }. \n### Response: Find the insert point in the left half of the node for a new key.\n\n@param new1  New Object to be inserted\n@param point Found insertion point.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public boolean next() { if (!looping) { return false; } if (last) { return false; } if (count == 0) { value = start; first = true; } else { value += step; first = false; } count++; last = isLastIteration(value + step); return true; } \n### Response:", "ground_truth": "Iterates to next value at the beginning of the loop.", "predict": "Next method in the Node class to iterate through the nodes and return the next node.\n\n@return The next node in the iteration or `false` if the current node is the last node in the iteration.\n\n@param start The starting value of the iteration.\n@param step The incrementing value for the iteration.\n@param looping Whether to continue the iteration or stop after the current node.\n@param last The current value of the last node in the iteration.\n@param isLastIteration Whether the current value is the last value in the iteration."}, {"ID": 1415, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function watch(glob, taskName) { var watcher = chokidar.watch(glob, {persistent: true,}); watcher.on('ready', ()=> { watcher.on('all', (event, path)=> { invokeTask(taskName); }); }); }. \n### Response: Watch files and then invoke a task.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static CharArraySequence from(final char[] value, final int offset, final int len) { final char[] buffer = new char[value.length]; System.arraycopy(value, offset, buffer, 0, len); return new CharArraySequence(buffer); } \n### Response:", "ground_truth": "Static constructor that creates a char sequence by making a copy of provided char array.", "predict": "This method is used to create a new CharArraySequence from a given char array and its offset, length. It uses the System.arraycopy() method to copy the contents of the char array into a buffer, and then returns a new CharArraySequence with the contents of the buffer."}, {"ID": 1416, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function addPolyLineByAddress($address1,$address2,$id=false,$color='',$weight=0,$opacity=0) { if(($_geocode1 = $this->getGeocode($address1)) === false) return false; if(($_geocode2 = $this->getGeocode($address2)) === false) return false; return $this->addPolyLineByCoords($_geocode1['lon'],$_geocode1['lat'],$_geocode2['lon'],$_geocode2['lat'],$id,$color,$weight,$opacity); }. \n### Response: adds a map polyline by address\nif color, weight and opacity are not defined, use the google maps defaults\n\n@param string $address1 the map address to draw from\n@param string $address2 the map address to draw to\n@param string $id An array id to use to append coordinates to a line\n@param string $color the color of the line (format: #000000)\n@param string $weight the weight of the line in pixels\n@param string $opacity the line opacity (percentage)\n@return bool|int Array id of newly added point or false.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public Object execute() throws Exception { String methodName = ProxyTarget.targetMethodName(); Class[] argTypes = ProxyTarget.createArgumentsClassArray(); Object[] args = ProxyTarget.createArgumentsArray(); // lookup method on target object class (and not #targetClass!() Class type = _target.getClass(); Method method = type.getMethod(methodName, argTypes); // remember context classloader ClassLoader contextClassLoader = Thread.currentThread().getContextClassLoader(); Object result; try { // change class loader Thread.currentThread().setContextClassLoader(type.getClassLoader()); // invoke result = method.invoke(_target, args); } finally { // return context classloader Thread.currentThread().setContextClassLoader(contextClassLoader); } return ProxyTarget.returnValue(result); } \n### Response:", "ground_truth": "Looks up for method in target object and invokes it using reflection.", "predict": "Implements a Proxy-based method that executes a target method and returns the result.\n\n@param string $methodName the name of the method to execute\n@param Class[] $argTypes the types of the arguments to pass to the method\n@return Object the result of the executed method\n\nThis method lookups the target method by its name and arguments, and uses the context classloader to change the method execution to the target object's class. It then invokes the target method with the provided arguments, and returns the result.\n\nNote that this method is useful for implementing a proxy in Java, where you can intercept and modify the behavior of a target object without modifying its original implementation."}, {"ID": 1417, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void addUniqueFields(Set<FieldSet> uniqueFieldSets) { if (this.uniqueFields == null) { this.uniqueFields = new HashSet<FieldSet>(); } this.uniqueFields.addAll(uniqueFieldSets); }. \n### Response: Adds multiple FieldSets to be unique\n\n@param uniqueFieldSets A set of unique FieldSet.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public final boolean matchUpperCase(final char[] uppercaseTarget) { if (ndx + uppercaseTarget.length > total) { return false; } int j = ndx; for (int i = 0; i < uppercaseTarget.length; i++, j++) { final char c = CharUtil.toUpperAscii(input[j]); if (c != uppercaseTarget[i]) { return false; } } return true; } \n### Response:", "ground_truth": "Matches char buffer given in uppercase with content at current location, that will\nbe converted to upper case to make case-insensitive matching.", "predict": "matches the uppercase version of the target array\n\n@param uppercaseTarget The target array to match the uppercase version."}, {"ID": 1418, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def add_oid(self,oid,value,label=None): \"\"\"Short helper to add an object ID value to the MIB subtree.\"\"\" self.add_oid_entry(oid,'OBJECTID',value,label=label). \n### Response: Short helper to add an object ID value to the MIB subtree..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected final CharSequence charSequence(final int from, final int to) { if (from == to) { return CharArraySequence.EMPTY; } return CharArraySequence.of(input, from, to - from); } \n### Response:", "ground_truth": "Creates char sub-sequence from the input.", "predict": "This method returns a CharArraySequence containing the characters from the input range starting at the specified from index and ending at the specified to index, minus the from index."}, {"ID": 1419, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func TrimLinesInString(input string) string { return strings.Join(TrimLines(strings.Split(strings.TrimSpace(input), \"\\n\")), \"\\n\") }. \n### Response: // TrimLinesInString applies TrimSpace to each line in the given string, and returns the new trimmed string. Empty lines are not removed..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static URL[] of(ClassLoader classLoader, Class clazz) { if (clazz == null) { clazz = ClassPathURLs.class; } if (classLoader == null) { classLoader = clazz.getClassLoader(); } final Set<URL> urls = new LinkedHashSet<>(); while (classLoader != null) { if (classLoader instanceof URLClassLoader) { URLClassLoader urlClassLoader = (URLClassLoader) classLoader; URL[] allURLS = urlClassLoader.getURLs(); Collections.addAll(urls, allURLS); break; } URL classUrl = classModuleUrl(classLoader, clazz); if (classUrl != null) { urls.add(classUrl); } classUrl = classModuleUrl(classLoader, ClassPathURLs.class); if (classUrl != null) { urls.add(classUrl); } ModuleDescriptor moduleDescriptor = clazz.getModule().getDescriptor(); if (moduleDescriptor != null) { moduleDescriptor.requires().forEach(req -> { ModuleLayer.boot() .findModule(req.name()) .ifPresent(mod -> { ClassLoader moduleClassLoader = mod.getClassLoader(); if (moduleClassLoader != null) { URL url = moduleClassLoader.getResource(MANIFEST); if (url != null) { url = fixManifestUrl(url); urls.add(url); } } }); }); } classLoader = classLoader.getParent(); } return urls.toArray(new URL[0]); } \n### Response:", "ground_truth": "Returns urls for the classloader.\n\n@param classLoader classloader in which to find urls\n@return list of urls or {@code null} if not found", "predict": "// This method returns an array of URLs associated with the given class. \n// It starts by checking if the class is null, and if so, it returns an array of ClassPathURLs. \n// If the class is not null, it then checks if the classloader associated with the class is null. \n// If the classloader is null, it returns an array of ClassPathURLs. \n// The method then enters a while loop that continues as long as the classloader is not null. \n// Inside the loop, it checks if the classloader instanceof URLClassLoader. \n// If it does, it gets an array of all URLs associated with the classloader. \n// It then adds each URL to a set of URLs, and breaks out of the loop. \n// After adding all the URLs, it returns the set of URLs as an array of URLs. \n// The method then sets the classloader to the parent classloader of the current classloader. \n// Finally, it returns the array of URLs as an array of URL objects."}, {"ID": 1420, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def request_uri=(new_request_uri) if !new_request_uri.respond_to?(:to_str) raise TypeError, \"Can't convert #{new_request_uri.class} into String.\" end if self.absolute? && self.scheme !~ /^https?$/i raise InvalidURIError, \"Cannot set an HTTP request URI for a non-HTTP URI.\" end new_request_uri = new_request_uri.to_str path_component = new_request_uri[/^([^\\?]*)\\??(?:.*)$/, 1] query_component = new_request_uri[/^(?:[^\\?]*)\\?(.*)$/, 1] path_component = path_component.to_s path_component = (!path_component.empty? ? path_component : SLASH) self.path = path_component self.query = query_component # Reset dependent values remove_composite_values end. \n### Response: Sets the HTTP request URI for this URI.\n\n @param [String, #to_str] new_request_uri The new HTTP request URI..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public Email bcc(final EmailAddress... bccs) { this.bcc = ArraysUtil.join(this.bcc, valueOrEmptyArray(bccs)); return _this(); } \n### Response:", "ground_truth": "Appends one or more BCC addresses.\n\n@param bccs vararg of {@link EmailAddress}es to set.\n@return this", "predict": "This method joins the bcc field of the email object with the values of the bccs parameter, using the ArraysUtil class.\n\n @param [EmailAddress..., #join] bccs The bcc values to join with the bcc field.\n @return The updated email object with the bcc field joined with the bcc values."}, {"ID": 1421, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def edit_card_key(key, editfunc, hook_value = nil, out = Data.new) err = GPGME::gpgme_op_card_edit(self, key, editfunc, hook_value, out) exc = GPGME::error_to_exception(err) raise exc if exc end. \n### Response: Edit attributes of the key on the card..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void register(final Class type, final TypeJsonSerializer typeJsonSerializer) { map.put(type, typeJsonSerializer); cache.clear(); } \n### Response:", "ground_truth": "Registers new serializer.", "predict": "Registers a type in the map and clears the cache."}, {"ID": 1422, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func writeToStream(ctx context.Context, stream transport.Stream, message proto.Message) error { messageData, cleanup, err := marshal(stream.Request().Meta.Encoding, message) if err != nil { return err } return stream.SendMessage( ctx, &transport.StreamMessage{ Body: readCloser{Reader: bytes.NewReader(messageData), closer: cleanup}, }, ) }. \n### Response: // writeToStream writes a proto.Message to a stream..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected TypeJsonSerializer lookupSerializer(final Class type) { TypeJsonSerializer tjs = map.get(type); if (tjs == null) { if (defaultSerializerMap != null) { tjs = defaultSerializerMap.map.get(type); } } return tjs; } \n### Response:", "ground_truth": "Get type serializer from map. First the current map is used.\nIf element is missing, default map will be used, if exist.", "predict": "// lookupSerializer returns the TypeJsonSerializer for the given Class.."}, {"ID": 1423, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def get_state_paths(cls, impl, working_dir): \"\"\" Get the set of state paths that point to the current chain and state info. Returns a list of paths. \"\"\" return [config.get_db_filename(impl, working_dir), config.get_snapshots_filename(impl, working_dir)]. \n### Response: Get the set of state paths that point to the current chain and state info.\n        Returns a list of paths..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void parseRequestStream(final InputStream inputStream, final String encoding) throws IOException { setParsed(); MultipartRequestInputStream input = new MultipartRequestInputStream(inputStream); input.readBoundary(); while (true) { FileUploadHeader header = input.readDataHeader(encoding); if (header == null) { break; } if (header.isFile) { String fileName = header.fileName; if (fileName.length() > 0) { if (header.contentType.indexOf(\"application/x-macbinary\") > 0) { input.skipBytes(128); } } FileUpload newFile = fileUploadFactory.create(input); newFile.processStream(); if (fileName.length() == 0) { // file was specified, but no name was provided, therefore it was not uploaded if (newFile.getSize() == 0) { newFile.size = -1; } } putFile(header.formFieldName, newFile); } else { // no file, therefore it is regular form parameter. FastByteArrayOutputStream fbos = new FastByteArrayOutputStream(); input.copyAll(fbos); String value = encoding != null ? new String(fbos.toByteArray(), encoding) : new String(fbos.toByteArray()); putParameter(header.formFieldName, value); } input.skipBytes(1); input.mark(1); // read byte, but may be end of stream int nextByte = input.read(); if (nextByte == -1 || nextByte == '-') { input.reset(); break; } input.reset(); } } \n### Response:", "ground_truth": "Extracts uploaded files and parameters from the request data.", "predict": "parseRequestStream():\nThis method parses a multipart request stream and performs the following actions:\n\n* Creates a MultipartRequestInputStream object with the input stream.\n* Reads the boundary of the request stream.\n* While the method is running, it reads the data header of the request stream and checks if the header contains a file name. If it does, it creates a FileUpload object and processes the stream. If it does not, it creates a regular form parameter and copies the data to it.\n* If the file name is not provided, it sets the size of the file to -1 and does not upload it.\n* If the file size is 0, it does not upload the file.\n* If the file name is provided but no name is provided, it does not upload the file.\n* If the file size is 0, it sets the size of the file to the size of the data.\n* If the encoding is null, it sets the encoding to the default encoding of the platform.\n* Reads the data header of the request stream and reads the byte that represents the boundary.\n* Reads the next byte of data from the input stream.\n* If the next byte is -1 or the next byte is '-', it resets the input stream and breaks out of the loop.\n* Reads the next byte of data from the input stream.\n* If the next byte is -1 or the next byte is '-', it resets the input stream and breaks out of the loop.\n* Reads the next byte of data from the input stream.\n* If the next byte is -1 or the next byte is '-', it resets the input stream and breaks out of the loop.\n* Reads the next byte of data from the input stream.\n* If the next byte is -1 or the next byte is '-', it resets the input stream and breaks out of the loop.\n* Reads the next byte of data from the input stream.\n* If the next byte is -1 or the next byte is '-', it resets the input stream and breaks out of the loop.\n* Reads the next byte of data from the input stream.\n* If the next byte is -1 or the next byte is '-', it resets the input stream and breaks out of the loop.\n* Reads the next byte of data from the input stream.\n* If the next byte is -1 or the next byte is '-', it resets the input stream and breaks out of the loop.\n* Reads the next byte of data from the input stream.\n* If the next byte is -1 or the next byte is '-', it resets the input stream and breaks out of the loop.\n* Reads the next byte of data from the input stream.\n* If the next byte is -1 or the next byte is '-', it resets the input stream and breaks out of the loop.\n* Reads the next byte of data from the input stream.\n* If the next byte is -1 or the next byte is '-', it resets the input stream and breaks out of the loop.\n* Reads the next byte of data from the input stream.\n* If the next byte is -1 or the next byte is '-', it resets the input stream and breaks out of the loop.\n* Reads the next byte of data from the input stream.\n* If the next byte is -1 or the next byte is '-', it resets the input stream and breaks out of the loop.\n* Reads the next byte of data from the input stream.\n* If the next byte is -1 or the next byte is '-', it resets the input stream and breaks out of the loop.\n* Reads the next byte of data from the input stream.\n* If the next byte is -1 or the next byte is '-', it resets the input stream and breaks out of the loop.\n* Reads the next byte of data from the input stream.\n* If the next byte is -1 or the next byte is '-', it resets the input stream and breaks out of the loop.\n* Reads the next byte of data from the input stream.\n* If the next byte is -1 or the next byte is '-', it resets the input stream and breaks out of the loop.\n* Reads the next byte of data from the input stream.\n* If the next byte is -1 or the next byte is '-', it resets the input stream and breaks out of the loop.\n* Reads the next byte of data from the input stream.\n* If the next byte is -1 or the next byte is '-', it resets the input stream and breaks out of the loop.\n* Reads the next byte of data from the input stream.\n* If the next byte is -1 or the next byte is '-', it resets the input stream and breaks out of the loop.\n* Reads the next byte of data from the input stream.\n* If the next byte is -1 or the next byte is '-', it resets the input stream and breaks out of the loop.\n* Reads the next byte of data from the input stream.\n* If the next byte is -1 or the next byte is '-', it resets the input stream and breaks out of the loop.\n* Reads the next byte of data from the input stream.\n* If the next byte is -1 or the next byte is '-', it resets the input stream and breaks out of the loop.\n* Reads the next byte of data from the input stream.\n* If the next byte is -1 or the next byte is '-', it resets the input stream and breaks out of the loop.\n* Reads the next byte of data from the input stream.\n* If the next byte is -1 or the next byte is '-', it resets the input stream and breaks out of the loop.\n* Reads the next byte of data from the input stream.\n* If the next byte is -1 or the next byte is '-', it resets the input stream and breaks out of the loop.\n* Reads the next byte of data from the input stream.\n* If the next byte is -1 or the next byte is '-', it resets the input stream and breaks out of the loop.\n* Reads the next byte of data from the input stream.\n* If the next byte is -1 or the next byte is '-', it resets the input stream and breaks out of the loop.\n* Reads the next byte of data from the input stream.\n* If the next byte is -1 or the next byte is '-', it resets the input stream and breaks out of the loop."}, {"ID": 1424, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static function is_user_visible($cmorid, $userid = 0, $checkcourse = true) { global $USER, $DB, $CFG; // Evaluate user id. if (!$userid) { $userid = $USER->id; } // If this happens to be already called with a cm_info for the right user // then just return uservisible. if (($cmorid instanceof \\cm_info) && $cmorid->get_modinfo()->userid == $userid) { return $cmorid->uservisible; } // If the $cmorid isn't an object or doesn't have required fields, load it. if (is_object($cmorid) && isset($cmorid->course) && isset($cmorid->visible)) { $cm = $cmorid; } else { if (is_object($cmorid)) { $cmorid = $cmorid->id; } $cm = $DB->get_record('course_modules', array('id' => $cmorid)); if (!$cm) { // In some error cases, the course module may not exist. debugging('info_module::is_user_visible called with invalid cmid ' . $cmorid, DEBUG_DEVELOPER); return false; } } // If requested, check user can access the course. if ($checkcourse) { $coursecontext = \\context_course::instance($cm->course); if (!is_enrolled($coursecontext, $userid, '', true) && !has_capability('moodle/course:view', $coursecontext, $userid)) { return false; } } // If availability is disabled, then all we need to do is check the visible flag. if (!$CFG->enableavailability && $cm->visible) { return true; } // When availability is enabled, access can depend on 3 things: // 1. $cm->visible // 2. $cm->availability // 3. $section->availability (for activity section and possibly for // parent sections) // As a result we cannot take short cuts any longer and must get // standard modinfo. $modinfo = get_fast_modinfo($cm->course, $userid); $cms = $modinfo->get_cms(); if (!isset($cms[$cm->id])) { // In some cases this might get called with a cmid that is no longer // available, for example when a module is hidden at system level. debugging('info_module::is_user_visible called with invalid cmid ' . $cm->id, DEBUG_DEVELOPER); return false; } return $cms[$cm->id]->uservisible; }. \n### Response: Checks if an activity is visible to the given user.\n\nUnlike other checks in the availability system, this check includes the\n$cm->visible flag. It is equivalent to $cm->uservisible.\n\nIf you have already checked (or do not care whether) the user has access\nto the course, you can set $checkcourse to false to save it checking\ncourse access.\n\nWhen checking for the current user, you should generally not call\nthis function. Instead, use get_fast_modinfo to get a cm_info object,\nthen simply check the $cm->uservisible flag. This function is intended\nto obtain that information for a separate course-module object that\nwasn't loaded with get_fast_modinfo, or for a different user.\n\nThis function has a performance cost unless the availability system is\ndisabled, and you supply a $cm object with necessary fields, and you\ndon't check course access.\n\n@param int|\\stdClass|\\cm_info $cmorid Object or id representing activity\n@param int $userid User id (0 = current user)\n@param bool $checkcourse If true, checks whether the user has course access\n@return bool True if the activity is visible to the specified user\n@throws \\moodle_exception If the cmid doesn't exist.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public String getParameter(final String paramName) { if (requestParameters == null) { return null; } String[] values = requestParameters.get(paramName); if ((values != null) && (values.length > 0)) { return values[0]; } return null; } \n### Response:", "ground_truth": "Returns single value of a parameter. If parameter name is used for\nmore then one parameter, only the first one will be returned.\n\n@return parameter value, or null if not found", "predict": "Retrieves a parameter from the request.\n\nIf the parameter is not found in the request, return null.\n\nIf the parameter is found, return the value of the first element in the array returned by requestParameters.\n\nreturn null;"}, {"ID": 1425, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def collection get_collection_ivar || begin chain = end_of_association_chain # scopes chain = apply_scopes(chain) # search if params[:search] chain = chain.search(params[:search].to_s.downcase, match: :all) end # pagination if params[:page] per_page = params[:perPage] || 20 chain = chain.page(params[:page]).per(per_page) else chain = chain.all end set_collection_ivar(chain) end end. \n### Response: add support for scopes, search and pagination.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public String[] getParameterValues(final String paramName) { if (requestParameters == null) { return null; } return requestParameters.get(paramName); } \n### Response:", "ground_truth": "Returns all values all of the values the given request parameter has.", "predict": "add a comment explaining the purpose of the method."}, {"ID": 1426, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function getOffset(selector) { var rect, doc, docElem; var elem = document.querySelector(selector); if(!elem) { return false; } if(!elem.getClientRects().length) { return { top: 0, left: 0, width: 0, height: 0}; } rect = elem.getBoundingClientRect(); if(rect.width || rect.height) { doc = elem.ownerDocument; docElem = doc.documentElement; } return { top: rect.top + window.pageYOffset - docElem.clientTop, left: rect.left + window.pageXOffset - docElem.clientLeft, width: elem.offsetWidth, height: elem.offsetHeight } }. \n### Response: Get offset information with native methods\nBecause not everyone uses jQuery and QUnit does not depend on jQuery\n@param  {String} selector (.test, #test)\n@return {Object} position of the selector dom.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public FileUpload getFile(final String paramName) { if (requestFiles == null) { return null; } FileUpload[] values = requestFiles.get(paramName); if ((values != null) && (values.length > 0)) { return values[0]; } return null; } \n### Response:", "ground_truth": "Returns uploaded file.\n@param paramName parameter name of the uploaded file\n@return uploaded file or null if parameter name not found", "predict": "getFile method returns the first FileUpload element found in the requestFiles array based on the paramName parameter\nBecause the method is simple and easy to understand\n@param  {String} paramName the name of the parameter in the request\n@return {FileUpload} the first FileUpload element found in the requestFiles array, or null if not found."}, {"ID": 1427, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (s *TaskDefinition) SetCompatibilities(v []*string) *TaskDefinition { s.Compatibilities = v return s }. \n### Response: // SetCompatibilities sets the Compatibilities field's value..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public FileUpload[] getFiles(final String paramName) { if (requestFiles == null) { return null; } return requestFiles.get(paramName); } \n### Response:", "ground_truth": "Returns all uploaded files the given request parameter has.", "predict": "// GetFiles returns the FileUpload object with the specified file name.."}, {"ID": 1428, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void writeClassInfo(ClassInfo info) { Node currentNode = this.currentNode; Element tmp = doc.createElementNS(XML_URI, \"class\"); currentNode.appendChild(tmp); this.currentNode = tmp; addAccessFlags(info); if (info.getName() != null) tmp.setAttribute( \"name\", info.getName()); if (info.getSignature() != null) tmp.setAttribute( \"signature\", info.getSignature()); if (info.getSupername() != null) tmp.setAttribute( \"superclass\", info.getSupername()); String[] interfaces = info.getInterfaces(); for (int i = 0; i < interfaces.length; i++) { Element iface = doc.createElementNS(XML_URI, \"implements\"); tmp.appendChild(iface); iface.setAttribute( \"name\", interfaces[i]); } this.currentNode = currentNode; }. \n### Response: Write out information about a class.\nThis writes out a &lt;class&gt; node, which contains information about\nwhat interfaces are implemented each in a &lt;implements&gt; node.\n\n@param info Info about the class to write out..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public void init(final FilterConfig filterConfig) { this.filterConfig = filterConfig; this.encoding = filterConfig.getInitParameter(\"encoding\"); if (this.encoding == null) { this.encoding = JoddCore.encoding; } this.ignore = Converter.get().toBooleanValue(filterConfig.getInitParameter(\"ignore\"), true); } \n### Response:", "ground_truth": "Place this filter into service.\n\n@param filterConfig The filter configuration object", "predict": "Initialize the filter.\nThis initializes the filter with the given filter configuration.\n\n@param filterConfig Filter configuration..\n\n@Override public void finish() { } \n### Resp Finalize the filter.\nThis is not used in this example, but it is a common method to call after the filter has been initialized.\n\n"}, {"ID": 1429, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (r *crdHandler) removeDeadStorage() { allCustomResourceDefinitions, err := r.crdLister.List(labels.Everything()) if err != nil { utilruntime.HandleError(err) return } r.customStorageLock.Lock() defer r.customStorageLock.Unlock() storageMap := r.customStorage.Load().(crdStorageMap) // Copy because we cannot write to storageMap without a race // as it is used without locking elsewhere storageMap2 := storageMap.clone() for uid, s := range storageMap2 { found := false for _, crd := range allCustomResourceDefinitions { if crd.UID == uid { found = true break } } if !found { klog.V(4).Infof(\"Removing dead CRD storage for %s/%s\", s.spec.Group, s.spec.Names.Kind) for _, storage := range s.storages { // destroy only the main storage. Those for the subresources share cacher and etcd clients. storage.CustomResource.DestroyFunc() } delete(storageMap2, uid) } } r.customStorage.Store(storageMap2) }. \n### Response: // removeDeadStorage removes REST storage that isn't being used.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void parse(final DbSqlBuilder sqlBuilder, final String template) { int length = template.length(); int last = 0; while (true) { int mark = template.indexOf('$', last); if (mark == -1) { if (last < length) { sqlBuilder.appendRaw(template.substring(last)); } break; } int escapesCount = countEscapes(template, mark); // check if escaped if (escapesCount > 0) { boolean isEscaped = escapesCount % 2 != 0; int escapesToAdd = escapesCount >> 1; sqlBuilder.appendRaw(template.substring(last, mark - escapesCount + escapesToAdd) + '$'); if (isEscaped) { last = mark + 1; continue; } } else { sqlBuilder.appendRaw(template.substring(last, mark)); } int end; if (template.startsWith(MACRO_TABLE, mark)) { mark += MACRO_TABLE.length(); end = findMacroEnd(template, mark); onTable(sqlBuilder, template.substring(mark, end)); } else if (template.startsWith(MACRO_COLUMN, mark)) { mark += MACRO_COLUMN.length(); end = findMacroEnd(template, mark); onColumn(sqlBuilder, template.substring(mark, end)); } else if (template.startsWith(MACRO_MATCH, mark)) { mark += MACRO_MATCH.length(); end = findMacroEnd(template, mark); onMatch(sqlBuilder, template.substring(mark, end)); } else if (template.startsWith(MACRO_VALUE, mark)) { mark += MACRO_VALUE.length(); end = findMacroEnd(template, mark); onValue(sqlBuilder, template.substring(mark, end)); } else { mark++; // reference found end = mark; // find macro end while (end < length) { if (!isReferenceChar(template, end)) { break; } end++; } onReference(sqlBuilder, template.substring(mark, end)); end--; } end++; last = end; } } \n### Response:", "ground_truth": "Parses template and returns generated sql builder.", "predict": "// parse takes a string template and returns a SQL query based on the template.\n\nNote: This method is used to parse a string template into a SQL query. It uses regular expressions to match the various parts of the template and then calls the corresponding functions on the `DbSqlBuilder` to create the final SQL query."}, {"ID": 1430, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function find( $key, $disableLateLoading = null ) { // $disableLateLoading default value management if( !is_bool( $disableLateLoading ) ) { $disableLateLoading = false; } // empty key if( is_null( $key ) or !is_scalar( $key ) or strlen( trim( $key ) ) === 0 ) { return null; } $class = $this->entityClass; try { return $this->entityFactory( $key, $disableLateLoading ); } catch( \\Exception $e ) { return null; } }. \n### Response: Lookup a entity based on it's 'primary key' or key column\nThis will either return null or a Entity\n@param mixed $key\n@param bool $disableLateLoading.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected int findMacroEnd(final String template, final int fromIndex) { int endIndex = template.indexOf('}', fromIndex); if (endIndex == -1) { throw new DbSqlBuilderException(\"Template syntax error, some macros are not closed. Error at: '...\" + template.substring(fromIndex)); } return endIndex; } \n### Response:", "ground_truth": "Finds macros end.", "predict": "Find the end index of a macro in a template string. If no macro is found, throw a DbSqlBuilderException with an error message.\n@param String $template"}, {"ID": 1431, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function override_submenu_action( $parent_slug, $menu_slug, $function ) { global $submenu; $menu_slug = plugin_basename( $menu_slug ); $parent_slug = plugin_basename( $parent_slug ); if ( ! isset( $submenu[ $parent_slug ] ) ) { // Parent menu not exist. return false; } $found_submenu_item = false; foreach ( $submenu[ $parent_slug ] as $submenu_item ) { if ( $menu_slug === $submenu_item[2] ) { $found_submenu_item = $submenu_item; break; } } if ( false === $found_submenu_item ) { // Submenu item not found. return false; } // Remove current function. $hookname = get_plugin_page_hookname( $menu_slug, $parent_slug ); remove_all_actions( $hookname ); // Attach new action. add_action( $hookname, $function ); return $hookname; }. \n### Response: Override submenu's action.\n\n@author Vova Feldman (@svovaf)\n@since  1.1.0\n\n@param string   $parent_slug\n@param string   $menu_slug\n@param callable $function\n\n@return false|string If submenu exist, will return the hook name..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected int countEscapes(final String template, int macroIndex) { macroIndex--; int escapeCount = 0; while (macroIndex >= 0) { if (template.charAt(macroIndex) != ESCAPE_CHARACTER) { break; } escapeCount++; macroIndex--; } return escapeCount; } \n### Response:", "ground_truth": "Count escapes to the left.", "predict": "``` \n\n@author Vova Feldman (@svovaf)\n@since  1.1.0\n\n@param String   $template\n@param int    $macroIndex\n\n@return int\n```"}, {"ID": 1432, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function renderCommand(command) { if (!panel.buttonDiv) { var formGroup = addEle(panel.panelForm, 'div', 'form-group'); panel.buttonDiv = addEle(formGroup, 'div', indent ? 'col-sm-offset-3 col-sm-9' : 'col-sm-9'); } var cmdTheme = command.theme || 'default'; var button = addEle(panel.buttonDiv, 'button', 'btn btn-' + cmdTheme + ' btn-presentation', {type: 'button'}); var icon = command.icon; if (icon) { if (left(icon, 2) == 'fa') icon = '<i class=\"fa ' + icon + '\"></i>&nbsp;'; else icon = '<span class=\"glyphicon ' + icon + '\"></span>&nbsp;'; button.innerHTML = icon + command.name; } else { button.innerHTML = command.name; } $(button).on('click', function (event) { event.preventDefault(); bootstrapInterface.dispatch(new Request({type: 'Command', command: command})); }); panel.listeners.push(button); // so we can avoid leakage on deleting panel }. \n### Response: function to render Command.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String buildQuery(final HttpMultiMap<?> queryMap, final String encoding) { if (queryMap.isEmpty()) { return StringPool.EMPTY; } int queryMapSize = queryMap.size(); StringBand query = new StringBand(queryMapSize * 4); int count = 0; for (Map.Entry<String, ?> entry : queryMap) { String key = entry.getKey(); key = URLCoder.encodeQueryParam(key, encoding); Object value = entry.getValue(); if (value == null) { if (count != 0) { query.append('&'); } query.append(key); count++; } else { if (count != 0) { query.append('&'); } query.append(key); count++; query.append('='); String valueString = URLCoder.encodeQueryParam(value.toString(), encoding); query.append(valueString); } } return query.toString(); } \n### Response:", "ground_truth": "Builds a query string from given query map.", "predict": "Method to build query with HttpMultiMap<String, Object> and String encoding."}, {"ID": 1433, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def _try_reconnect(self): \"\"\"Try to recover an interrupted connection.\"\"\" try: if self.connection_interrupted: self.connect_direct(self.connection_string, force=True) self.connection_interrupted = False self.connected = True # Reenable streaming interface if that was open before as well if self._reports is not None: self._loop.run_coroutine(self.adapter.open_interface(0, 'streaming')) # Reenable tracing interface if that was open before as well if self._traces is not None: self._loop.run_coroutine(self.adapter.open_interface(0, 'tracing')) except HardwareError as exc: self._logger.exception(\"Error reconnecting to device after an unexpected disconnect\") raise HardwareError(\"Device disconnected unexpectedly and we could not reconnect\", reconnect_error=exc) from exc. \n### Response: Try to recover an interrupted connection..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static HttpMultiMap<String> parseQuery(final String query, final boolean decode) { final HttpMultiMap<String> queryMap = HttpMultiMap.newCaseInsensitiveMap(); if (StringUtil.isBlank(query)) { return queryMap; } int lastNdx = 0; while (lastNdx < query.length()) { int ndx = query.indexOf('&', lastNdx); if (ndx == -1) { ndx = query.length(); } final String paramAndValue = query.substring(lastNdx, ndx); ndx = paramAndValue.indexOf('='); if (ndx == -1) { queryMap.add(paramAndValue, null); } else { String name = paramAndValue.substring(0, ndx); if (decode) { name = URLDecoder.decodeQuery(name); } String value = paramAndValue.substring(ndx + 1); if (decode) { value = URLDecoder.decodeQuery(value); } queryMap.add(name, value); } lastNdx += paramAndValue.length() + 1; } return queryMap; } \n### Response:", "ground_truth": "Parses query from give query string. Values are optionally decoded.", "predict": "parseQuery():\n```\n    public static HttpMultiMap<String> parseQuery(final String query, final boolean decode) {\n        final HttpMultiMap<String> queryMap = HttpMultiMap.newCaseInsensitiveMap();\n        if (StringUtil.isBlank(query)) {\n            return queryMap;\n        }\n        int lastNdx = 0;\n        while (lastNdx < query.length()) {\n            int ndx = query.indexOf('&', lastNdx);\n            if (ndx == -1) {\n                ndx = query.length();\n            }\n            final String paramAndValue = query.substring(lastNdx, ndx);\n            ndx = paramAndValue.indexOf('=');\n            if (ndx == -1) {\n                queryMap.add(paramAndValue, null);\n            } else {\n                String name = paramAndValue.substring(0, ndx);\n                if (decode) {\n                    name = URLDecoder.decodeQuery(name);\n                }\n                String value = paramAndValue.substring(ndx + 1);\n                if (decode) {\n                    value = URLDecoder.decodeQuery(value);\n                }\n                queryMap.add(name, value);\n            }\n            lastNdx += paramAndValue.length() + 1;\n        }\n        return queryMap;\n    }\n```"}, {"ID": 1434, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def use_active_sequence_rule_view(self): \"\"\"Pass through to provider SequenceRuleLookupSession.use_active_sequence_rule_view\"\"\" self._operable_views['sequence_rule'] = ACTIVE # self._get_provider_session('sequence_rule_lookup_session') # To make sure the session is tracked for session in self._get_provider_sessions(): try: session.use_active_sequence_rule_view() except AttributeError: pass. \n### Response: Pass through to provider SequenceRuleLookupSession.use_active_sequence_rule_view.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String prepareHeaderParameterName(final String headerName) { // special cases if (headerName.equals(\"etag\")) { return HttpBase.HEADER_ETAG; } if (headerName.equals(\"www-authenticate\")) { return \"WWW-Authenticate\"; } char[] name = headerName.toCharArray(); boolean capitalize = true; for (int i = 0; i < name.length; i++) { char c = name[i]; if (c == '-') { capitalize = true; continue; } if (capitalize) { name[i] = Character.toUpperCase(c); capitalize = false; } else { name[i] = Character.toLowerCase(c); } } return new String(name); } \n### Response:", "ground_truth": "Makes nice header names.", "predict": "Prepares header parameter names for HTTP requests. Special cases include \"etag\" and \"www-authenticate\" with the \"WWW-Authenticate\" header, and capitalizes the first letter of each character in the \"name\" array if it is a '-' character. Returns a new string containing the prepared header parameter names."}, {"ID": 1435, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (p *Profile) Boundaries(src []byte) (boundaries []Boundary) { // Find maximum count. max := 0 for _, b := range p.Blocks { if b.Count > max { max = b.Count } } // Divisor for normalization. divisor := math.Log(float64(max)) // boundary returns a Boundary, populating the Norm field with a normalized Count. boundary := func(offset int, start bool, count int) Boundary { b := Boundary{Offset: offset, Start: start, Count: count} if !start || count == 0 { return b } if max <= 1 { b.Norm = 0.8 // Profile is in\"set\" mode; we want a heat map. Use cov8 in the CSS. } else if count > 0 { b.Norm = math.Log(float64(count)) / divisor } return b } line, col := 1, 2 // TODO: Why is this 2? for si, bi := 0, 0; si < len(src) && bi < len(p.Blocks); { b := p.Blocks[bi] if b.StartLine == line && b.StartCol == col { boundaries = append(boundaries, boundary(si, true, b.Count)) } if b.EndLine == line && b.EndCol == col || line > b.EndLine { boundaries = append(boundaries, boundary(si, false, 0)) bi++ continue // Don't advance through src; maybe the next block starts here. } if src[si] == '\\n' { line++ col = 0 } col++ si++ } sort.Sort(boundariesByPos(boundaries)) return }. \n### Response: // Boundaries returns a Profile as a set of Boundary objects within the provided src..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String extractMediaType(final String contentType) { int index = contentType.indexOf(';'); if (index == -1) { return contentType; } return contentType.substring(0, index); } \n### Response:", "ground_truth": "Extracts media-type from value of \"Content Type\" header.", "predict": "// Extracts the media type from a given contentType. \n// Returns the media type as a string."}, {"ID": 1436, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def effect_emd(d1, d2): \"\"\"Compute the EMD between two effect repertoires. Because the nodes are independent, the EMD between effect repertoires is equal to the sum of the EMDs between the marginal distributions of each node, and the EMD between marginal distribution for a node is the absolute difference in the probabilities that the node is OFF. Args: d1 (np.ndarray): The first repertoire. d2 (np.ndarray): The second repertoire. Returns: float: The EMD between ``d1`` and ``d2``. \"\"\" return sum(abs(marginal_zero(d1, i) - marginal_zero(d2, i)) for i in range(d1.ndim)). \n### Response: Compute the EMD between two effect repertoires.\n\n    Because the nodes are independent, the EMD between effect repertoires is\n    equal to the sum of the EMDs between the marginal distributions of each\n    node, and the EMD between marginal distribution for a node is the absolute\n    difference in the probabilities that the node is OFF.\n\n    Args:\n        d1 (np.ndarray): The first repertoire.\n        d2 (np.ndarray): The second repertoire.\n\n    Returns:\n        float: The EMD between ``d1`` and ``d2``..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public String toHtml(final Node node, final Appendable appendable) { NodeVisitor renderer = createRenderer(appendable); node.visit(renderer); return appendable.toString(); } \n### Response:", "ground_truth": "Renders node to appendable.", "predict": "public String toHtml(final Node node, final Appendable appendable) {\n\n    NodeVisitor renderer = createRenderer(appendable);\n    node.visit(renderer);\n    return appendable.toString();\n}\n\n    // NodeVisitor implementation\n    private static final class NodeVisitor extends Visitor {\n        private final NodeRenderer renderer;\n\n        public NodeVisitor(NodeRenderer renderer) {\n            this.renderer = renderer;\n        }\n\n        @Override\n        public void visit(Node node) {\n            renderer.visit(node);\n            node.accept(this);\n        }\n    }\n\n    // NodeRenderer implementation\n    private static final class NodeRenderer extends Renderer {\n        private Node node;\n\n        public NodeRenderer(Node node) {\n            this.node = node;\n        }\n\n        @Override\n        public void render(Appendable appendable) {\n            if (node!= null) {\n                appendable.append(node.toString());\n            }\n            super.render(appendable);\n        }\n    }\n}"}, {"ID": 1437, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def is_dicom_dir(datapath): \"\"\" Check if in dir is one or more dicom file. We use two methods. First is based on dcm extension detection. \"\"\" # Second tries open files # with dicom module. retval = False datapath = op.expanduser(datapath) for f in os.listdir(datapath): if f.endswith((\".dcm\", \".DCM\")): retval = True return True # @todo not working and I dont know why try: pydicom.read_file(os.path.join(datapath, f)) retval = True # except pydicom.errors.InvalidDicomError: # logger.debug(\"Invalid Dicom while reading file \" + str(f)) except Exception as e: logger.warning(\"Unable to read dicom file \" + str(f)) logger.warning(e) # import traceback # traceback.print_exc() if retval: return True return False. \n### Response: Check if in dir is one or more dicom file. We use two methods.\n    First is based on dcm extension detection..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public String toInnerHtml(final Node node, final Appendable appendable) { NodeVisitor renderer = createRenderer(appendable); node.visitChildren(renderer); return appendable.toString(); } \n### Response:", "ground_truth": "Renders node children to appendable.", "predict": "This method returns the inner HTML of a Node object, along with the appendable object. The method uses a NodeVisitor to render the children of the Node object, and then returns the rendered HTML. The renderer is created using the createRenderer() method, and the node.visitChildren() method is used to visit the children of the Node object. The appendable object is passed to the toInnerHtml() method as an argument, and it is used to store the rendered HTML."}, {"ID": 1438, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def process_allow_action(processors, action, argument): \"\"\"Process allow action.\"\"\" for processor in processors: processor(action, argument) db.session.commit(). \n### Response: Process allow action..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void configureWith(final ServletContext servletContext) { webAppClassName = servletContext.getInitParameter(PARAM_MADVOC_WEBAPP); paramsFiles = Converter.get().toStringArray(servletContext.getInitParameter(PARAM_MADVOC_PARAMS)); madvocConfiguratorClassName = servletContext.getInitParameter(PARAM_MADVOC_CONFIGURATOR); } \n### Response:", "ground_truth": "Configures Madvoc by reading context init parameters.", "predict": "Configure with ServletContext..\n\n"}, {"ID": 1439, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def encode(self, packet): \"\"\" Pushes a packet to the writer, encoding it on the internal buffer. \"\"\" id = identifier.get_packet_id(packet) if id is None: raise EncoderException('unknown packet') self._write_variunt(id) self._write(packet.SerializeToString()) return bytes(self.buffer). \n### Response: Pushes a packet to the writer, encoding it on the internal\n        buffer..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void reset() { this.ndx = 0; this.textLen = 0; this.path = new Path(); this.notFirstObject = false; if (useAltPaths) { path.altPath = new Path(); } if (classMetadataName != null) { mapToBean = createMapToBean(classMetadataName); } } \n### Response:", "ground_truth": "Resets JSON parser, so it can be reused.", "predict": "reset() method is used to reset the internal state of the object.."}, {"ID": 1440, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void closeEL(Object obj) { if (obj instanceof InputStream) IOUtil.closeEL((InputStream) obj); else if (obj instanceof OutputStream) IOUtil.closeEL((OutputStream) obj); else if (obj instanceof Writer) IOUtil.closeEL((Writer) obj); else if (obj instanceof Reader) IOUtil.closeEL((Reader) obj); else if (obj instanceof Closeable) IOUtil.closeEL((Closeable) obj); else if (obj instanceof ZipFile) IOUtil.closeEL((ZipFile) obj); else if (obj instanceof ResultSet) IOUtil.closeEL((ResultSet) obj); else if (obj instanceof Connection) IOUtil.closeEL((Connection) obj); else { try { Method method = obj.getClass().getMethod(\"close\", new Class[0]); method.invoke(obj, new Object[0]); } catch (Throwable e) { ExceptionUtil.rethrowIfNecessary(e); } } }. \n### Response: call close method from any Object with a close method.\n\n@param obj.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public JsonParser lazy(final boolean lazy) { this.lazy = lazy; this.mapSupplier = lazy ? LAZYMAP_SUPPLIER : HASHMAP_SUPPLIER; this.listSupplier = lazy ? LAZYLIST_SUPPLIER : ARRAYLIST_SUPPLIER; return this; } \n### Response:", "ground_truth": "Defines how JSON parser works. In non-lazy mode, the whole JSON is parsed as it is.\nIn the lazy mode, not everything is parsed, but some things are left lazy.\nThis way we gain performance, especially on partial usage of the whole JSON.\nHowever, be aware that parser holds the input memory until the returned\nobjects are disposed.", "predict": "Implement a \"lazy\" feature for the JsonParser class.\n\n@param lazy Whether to use a lazy or eager mapSupplier, listSupplier.\n\n@return The JsonParser instance with the lazy feature enabled."}, {"ID": 1441, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function isAvailable() { if (!empty($this->adapter)) { // adapter is already etablished return true; } $user = $this->getUser(); $sessionDataStored = $user->getAuthSession($this->providerKey); if (empty($sessionDataStored)) { // for this user no session has been stored return false; } $hybridAuth = $this->getHybridAuth(); $hybridAuth->restoreSessionData($sessionDataStored); if ($hybridAuth->isConnectedWith($this->providerKey)) { return true; } return false; }. \n### Response: for backend there is only one possibility to get a connection,\nand that is by stored Session\n@return bool.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected Class replaceWithMappedTypeForPath(final Class target) { if (mappings == null) { return target; } Class newType; // first try alt paths Path altPath = path.getAltPath(); if (altPath != null) { if (!altPath.equals(path)) { newType = mappings.get(altPath); if (newType != null) { return newType; } } } // now check regular paths newType = mappings.get(path); if (newType != null) { return newType; } return target; } \n### Response:", "ground_truth": "Replaces type with mapped type for current path.", "predict": "This method is used to replace a mapped type for a given path. It first checks if mappings is null, and if so, it returns the target class. If mappings is not null, it first tries to find the alt path by checking if the path is equal to the current path. If it finds a matching alt path, it then checks if the alt path is equal to the current path. If not, it tries to find the regular path by checking if the path is equal to the current path. If it finds a matching regular path, it then returns the new type. If none of the above paths match, it returns the target class."}, {"ID": 1442, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function Commit(events, sequenceID, sequenceSlot, aggregateType, metadata){ if(!Array.isArray(events)){ throw new Error('events must be an array while constructing Commit'); } if(typeof(sequenceID) !== 'string'){ throw new Error('sequenceID is not a string while constructing Commit'); } if(!sequenceSlot){ throw new Error('sequenceSlot not a number, or zero, while constructing Commit'); } this.events = events; this.sequenceID = sequenceID; this.sequenceSlot = sequenceSlot; this.aggregateType = aggregateType; this.metadata = metadata ? metadata : {}; }. \n### Response: Construct a new commit. A commit is an atomic group of events, handled in an all-or-nothing manner by an event sink. It is the basic unit of event storage in this framework.\n@constructor\n@param {module:esdf/core/Event.Event[]} events A list of events that the commit is composed of.\n@param {String} sequenceID Character-based ID (typically a GUID) of the stream to which this commit belongs.\n@param {Number} sequenceSlot The slot number this commit is meant to occupy within the sequence. Only one commit may take a particular slot.\n@param {String} aggregateType Name of the aggregate type, as reported by the proper EventSourcedAggregate.\n@param {Object} metadata The additional information, in a map format, associated with this commit..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public <T> List<T> parseAsList(final String string, final Class<T> componentType) { return new JsonParser() .map(JsonParser.VALUES, componentType) .parse(string); } \n### Response:", "ground_truth": "Parses input JSON to a list with specified component type.", "predict": "parseAsList(string, componentType)"}, {"ID": 1443, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected function parseDirectiveLine($line, \\SplFileObject $file, $lineBreaks) { $directive = new Directive(); $args = $this->directiveRegex($line); $name = array_shift($args); if ($name === null) { $lineNum = $file->key(); throw new SyntaxException($lineNum, $line, \"Could not parse the name of the directive\"); } $directive->setName($name) ->setArguments($args) ->setLineBreaks($lineBreaks); return $directive; }. \n### Response: Parse a Directive Line\n\n@param string $line\n@param \\SplFileObject $file\n@return Directive\n@throws SyntaxException.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public <K, V> Map<K, V> parseAsMap( final String string, final Class<K> keyType, final Class<V> valueType) { return new JsonParser() .map(JsonParser.KEYS, keyType) .map(JsonParser.VALUES, valueType) .parse(string); } \n### Response:", "ground_truth": "Parses input JSON to a list with specified key and value types.", "predict": "Parse a Map\n\n@param string $string\n@param Class<K> $keyType\n@param Class<V> $valueType\n@return Map<K, V>."}, {"ID": 1444, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function getMembers(index) { if (this._members === undefined) { this._members = _(getValue(this, 'member') || getValue(this, 'memberOf')) .split(/,\\s*/) .compact() .sort(util.compareNatural) .value(); } var result = this._members; return index === undefined ? result : result[index]; }. \n### Response: Extracts the entry's `member` data.\n\n@memberOf Entry\n@param {number} [index] The index of the array value to return.\n@returns {Array|string} Returns the entry's `member` data..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private Object resolveLazyValue(Object value) { if (value instanceof Supplier) { value = ((Supplier)value).get(); } return value; } \n### Response:", "ground_truth": "Resolves lazy value during the parsing runtime.", "predict": "Resolves a lazy value.\n\n@memberOf Entry\n@param {Object} [value] The value to resolve.\n@returns {Object} Returns the resolved value..\n\n"}, {"ID": 1445, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func CheckErrorValues(refvs []reflect.Value) (err error) { for _, refv := range refvs { if refv.IsValid() { refvi := refv.Interface() switch refvi.(type) { case error: return refvi.(error) } } } return }. \n### Response: // CheckErrorValues return error if refvs contains error.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private void skipObject() { int bracketCount = 1; boolean insideString = false; while (ndx < total) { final char c = input[ndx]; if (insideString) { if (c == '\\\"' && notPrecededByEvenNumberOfBackslashes()) { insideString = false; } } else if (c == '\\\"') { insideString = true; } else if (c == '{') { bracketCount++; } else if (c == '}') { bracketCount--; if (bracketCount == 0) { ndx++; return; } } ndx++; } } \n### Response:", "ground_truth": "Skips over complete object. It is not parsed, just skipped. It will be\nparsed later, but only if required.", "predict": "// skipObject implements a method that iterates through the input string and skips any objects."}, {"ID": 1446, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def cudaMallocPitch(pitch, rows, cols, elesize): \"\"\" Allocate pitched device memory. Allocate pitched memory on the device associated with the current active context. Parameters ---------- pitch : int Pitch for allocation. rows : int Requested pitched allocation height. cols : int Requested pitched allocation width. elesize : int Size of memory element. Returns ------- ptr : ctypes pointer Pointer to allocated device memory. \"\"\" ptr = ctypes.c_void_p() status = _libcudart.cudaMallocPitch(ctypes.byref(ptr), ctypes.c_size_t(pitch), cols*elesize, rows) cudaCheckStatus(status) return ptr, pitch. \n### Response: Allocate pitched device memory.\n\n    Allocate pitched memory on the device associated with the current active\n    context.\n\n    Parameters\n    ----------\n    pitch : int\n        Pitch for allocation.\n    rows : int\n        Requested pitched allocation height.\n    cols : int\n        Requested pitched allocation width.\n    elesize : int\n        Size of memory element.\n\n    Returns\n    -------\n    ptr : ctypes pointer\n        Pointer to allocated device memory..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected String parseString() { char quote = '\\\"'; if (looseMode) { quote = consumeOneOf('\\\"', '\\''); if (quote == 0) { return parseUnquotedStringContent(); } } else { consume(quote); } return parseStringContent(quote); } \n### Response:", "ground_truth": "Parses a string.", "predict": "parseString()\n```java\n    public String parseString()\n```\n* This method parses a string and returns a parsed version of it.\n* It uses the `parseStringContent()` method to parse the string, and if the string is unquoted, it returns a parsed version of the unquoted string content.\n* If the string is quoted, it first consumes all quotes and then parses the content of the quotes.\n* If the quote is 0, it returns the original unquoted string content.\n\n    Parameters\n    ----------\n    input : String\n        The input string to be parsed.\n\n    Returns\n    -------\n    parsedString : String\n        A parsed version of the input string.\n```"}, {"ID": 1447, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static function fillMissingKeys($array, $value, $keys) { foreach ($keys as $key) { if (! array_key_exists($key, $array)) { $array[$key] = $value; } } return $array; }. \n### Response: Fill the given array with the given value for any missing keys.\n\n@param  iterable  $array\n@param  mixed  $value\n@param  iterable  $keys\n@return iterable.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected String parseStringContent(final char quote) { final int startNdx = ndx; // roll-out until the end of the string or the escape char while (true) { final char c = input[ndx]; if (c == quote) { // no escapes found, just use existing string ndx++; return new String(input, startNdx, ndx - 1 - startNdx); } if (c == '\\\\') { break; } ndx++; } // escapes found, proceed differently textLen = ndx - startNdx; growEmpty(); // for (int i = startNdx, j = 0; j < textLen; i++, j++) { // text[j] = input[i]; // } System.arraycopy(input, startNdx, text, 0, textLen); // escape char, process everything until the end while (true) { char c = input[ndx]; if (c == quote) { // done ndx++; final String str = new String(text, 0, textLen); textLen = 0; return str; } if (c == '\\\\') { // escape char found ndx++; c = input[ndx]; switch (c) { case '\\\"' : c = '\\\"'; break; case '\\\\' : c = '\\\\'; break; case '/' : c = '/'; break; case 'b' : c = '\\b'; break; case 'f' : c = '\\f'; break; case 'n' : c = '\\n'; break; case 'r' : c = '\\r'; break; case 't' : c = '\\t'; break; case 'u' : ndx++; c = parseUnicode(); break; default: if (looseMode) { if (c != '\\'') { c = '\\\\'; ndx--; } } else { syntaxError(\"Invalid escape char: \" + c); } } } text[textLen] = c; textLen++; growAndCopy(); ndx++; } } \n### Response:", "ground_truth": "Parses string content, once when starting quote has been consumed.", "predict": "This method parseStringContent(final char quote) in the protected class parseStringContent is used to parse the input string content. It uses a while loop to roll-out the input string until the end of the string or the escape character is found. It also uses an arraycopy to copy the input string to a new array and a syntaxError to raise an error if the escape character is not valid. The method returns the parsed string content.\n\n@param  char  $quote\n@return  string\n\nNote: This method uses a while loop to roll-out the input string until the end of the string or the escape character is found. This is a common technique for parsing input strings."}, {"ID": 1448, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (d *Dogstatsd) WriteLoop(ctx context.Context, c <-chan time.Time, w io.Writer) { for { select { case <-c: if _, err := d.WriteTo(w); err != nil { d.logger.Log(\"during\", \"WriteTo\", \"err\", err) } case <-ctx.Done(): return } } }. \n### Response: // WriteLoop is a helper method that invokes WriteTo to the passed writer every\n// time the passed channel fires. This method blocks until ctx is canceled,\n// so clients probably want to run it in its own goroutine. For typical\n// usage, create a time.Ticker and pass its C channel to this method..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected char parseUnicode() { int i0 = CharUtil.hex2int(input[ndx++]); int i1 = CharUtil.hex2int(input[ndx++]); int i2 = CharUtil.hex2int(input[ndx++]); int i3 = CharUtil.hex2int(input[ndx]); return (char) ((i0 << 12) + (i1 << 8) + (i2 << 4) + i3); } \n### Response:", "ground_truth": "Parses 4 characters and returns unicode character.", "predict": "// parseUnicode is a protected method in a class that parses a Unicode character from a given input string.\n// It uses the CharUtil package to convert the hexadecimal values of the characters to their corresponding Unicode code points.\n// The method returns the Unicode character as a char, which is the primitive data type used in Java.\n// The method uses a loop to iterate over the input string, and each iteration uses the CharUtil.hex2int() method to convert the hexadecimal value of a character to its corresponding Unicode code point.\n// The Unicode code point is then returned as a char by casting the result to the appropriate data type.\n// This method is useful for parsing Unicode characters from input strings, and can be used in conjunction with other parsing methods."}, {"ID": 1449, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def destroy(self, id): \"\"\"Destroy a group. :param str id: a group ID :return: ``True`` if successful :rtype: bool \"\"\" path = '{}/destroy'.format(id) url = utils.urljoin(self.url, path) response = self.session.post(url) return response.ok. \n### Response: Destroy a group.\n\n        :param str id: a group ID\n        :return: ``True`` if successful\n        :rtype: bool.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected String parseUnquotedStringContent() { final int startNdx = ndx; while (true) { final char c = input[ndx]; if (c <= ' ' || CharUtil.equalsOne(c, UNQUOTED_DELIMETERS)) { final int currentNdx = ndx; // done skipWhiteSpaces(); return new String(input, startNdx, currentNdx - startNdx); } ndx++; } } \n### Response:", "ground_truth": "Parses un-quoted string content.", "predict": "**parseUnquotedStringContent()**\n\n* Provides a method to parse unquoted string content.\n* The input is a string that contains unquoted characters.\n* The method uses a while loop to iterate through the input string.\n* If the current character is a quote or a unquoted character that is equal to one of the UNQUOTED_DELIMETERS constant, the method skips white spaces and returns a new string with the start index and the current index minus the start index.\n* If the loop completes without encountering any unquoted characters, the method returns the input string.\n\n**Note:** This method is used to parse the content of a file that contains unquoted string. It is important to handle the input string properly to avoid any errors."}, {"ID": 1450, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def sshagent_run(cmd): \"\"\" Helper function. Runs a command with SSH agent forwarding enabled. Note:: Fabric (and paramiko) can't forward your SSH agent. This helper uses your system's ssh to do so. \"\"\" # Handle context manager modifications wrapped_cmd = _prefix_commands(_prefix_env_vars(cmd), 'remote') try: host, port = env.host_string.split(':') return local( u\"ssh -p %s -A -o StrictHostKeyChecking=no %s@%s '%s'\" % ( port, env.user, host, wrapped_cmd ) ) except ValueError: return local( u\"ssh -A -o StrictHostKeyChecking=no %s@%s '%s'\" % ( env.user, env.host_string, wrapped_cmd ) ). \n### Response: Helper function.\n    Runs a command with SSH agent forwarding enabled.\n\n    Note:: Fabric (and paramiko) can't forward your SSH agent.\n    This helper uses your system's ssh to do so..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected Number parseNumber() { final int startIndex = ndx; char c = input[ndx]; boolean isDouble = false; boolean isExp = false; if (c == '-') { ndx++; } while (true) { if (isEOF()) { break; } c = input[ndx]; if (c >= '0' && c <= '9') { ndx++; continue; } if (c <= 32) { // white space break; } if (c == ',' || c == '}' || c == ']') { // delimiter break; } if (c == '.') { isDouble = true; } else if (c == 'e' || c == 'E') { isExp = true; } ndx++; } final String value = new String(input, startIndex, ndx - startIndex); if (isDouble) { return Double.valueOf(value); } long longNumber; if (isExp) { longNumber = Double.valueOf(value).longValue(); } else { if (value.length() >= 19) { // if string is 19 chars and longer, it can be over the limit BigInteger bigInteger = new BigInteger(value); if (isGreaterThanLong(bigInteger)) { return bigInteger; } longNumber = bigInteger.longValue(); } else { longNumber = Long.parseLong(value); } } if ((longNumber >= Integer.MIN_VALUE) && (longNumber <= Integer.MAX_VALUE)) { return (int) longNumber; } return longNumber; } \n### Response:", "ground_truth": "Parses JSON numbers.", "predict": "Method parseNumber():\n\n* Provides the method to parse a number from the input string.\n* The method takes an integer startIndex and a number of characters to read from the input string.\n* It checks if the input string is a number by checking if it is '-', EOF, or a delimiter.\n* If it is a number, it checks if it is a double or an exp.\n* If it is a double, it returns the double value.\n* If it is an exp, it returns the double value.\n* If the input string is too long or is over the limit of 19 characters, it creates a BigInteger and returns the long value or the long value of the BigInteger.\n* If the input string is a int, it returns the int value.\n* The method returns the parsed number."}, {"ID": 1451, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected function getHeadFrag($html) { if (!($html = (string) $html)) { return []; // Nothing to do. } if (preg_match('/(?P<all>(?P<open_tag>\\<head(?:\\s+[^>]*?)?\\>)(?P<contents>.*?)(?P<closing_tag>\\<\\/head\\>))/uis', $html, $head_frag)) { return $this->removeNumericKeysDeep($head_frag); } return []; }. \n### Response: Build a head fragment from HTML source code.\n\n@since 140417 Initial release.\n\n@param string $html Raw HTML code.\n\n@return array A head fragment (if possible); else an empty array..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected Object parseArrayContent(Class targetType, Class componentType) { // detect special case if (targetType == Object.class) { targetType = List.class; } // continue targetType = replaceWithMappedTypeForPath(targetType); if (componentType == null && targetType != null && targetType.isArray()) { componentType = targetType.getComponentType(); } path.push(VALUES); componentType = replaceWithMappedTypeForPath(componentType); Collection<Object> target = newArrayInstance(targetType); boolean koma = false; mainloop: while (true) { skipWhiteSpaces(); char c = input[ndx]; if (c == ']') { if (koma) { syntaxError(\"Trailing comma\"); } ndx++; path.pop(); return target; } Object value = parseValue(componentType, null, null); target.add(value); skipWhiteSpaces(); c = input[ndx]; switch (c) { case ']': ndx++; break mainloop; case ',': ndx++; koma = true; break; default: syntaxError(\"Invalid char: expected ] or ,\"); } } path.pop(); if (targetType != null) { return convertType(target, targetType); } return target; } \n### Response:", "ground_truth": "Parses arrays, once when open bracket has been consumed.", "predict": "parseArrayContent():\n\n* Implement a method to parse an array content from the given target type and component type.\n* Detect the special case of targetType being Object and return List.class instead.\n* If componentType is null, check if it is an array and if so, return an instance of it.\n* If targetType is not null and is an array, parse the components and return the resulting array.\n* If componentType is null and targetType is not null, check if it is an array and if so, use replaceWithMappedTypeForPath() to map the components to the correct type.\n* Create a new ArrayInstance() instance and parse the values.\n* Handle trailing commas in the input and return the parsed array.\n* If targetType is not null, convert it to the correct type using convertType().\n* Return the parsed array.\n\n@since 140417 Initial release.\n\n@param Class $targetType The target type of the array content.\n@param Class $componentType The component type of the array content.\n\n@return Collection<Object> The parsed array content.\n\nNote: This method is only applicable for arrays and not for other data types like List."}, {"ID": 1452, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static function delete_template($id, $deleteplans = true) { $params = self::validate_parameters(self::delete_template_parameters(), array( 'id' => $id, 'deleteplans' => $deleteplans, )); $template = api::read_template($params['id']); self::validate_context($template->get_context()); return api::delete_template($params['id'], $params['deleteplans']); }. \n### Response: Delete a learning plan template\n\n@param int $id The learning plan template id\n@param boolean $deleteplans True to delete the plans associated to template or false to unlink them\n@return boolean.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void createEmptyCtor() { final MethodVisitor mv = wd.dest.visitMethod(AsmUtil.ACC_PUBLIC, INIT, \"()V\", null, null); mv.visitCode(); mv.visitVarInsn(Opcodes.ALOAD, 0); mv.visitMethodInsn( Opcodes.INVOKESPECIAL, AsmUtil.SIGNATURE_JAVA_LANG_OBJECT, INIT, \"()V\", false); mv.visitInsn(Opcodes.RETURN); mv.visitMaxs(1, 1); mv.visitEnd(); } \n### Response:", "ground_truth": "Created empty default constructor.", "predict": "This method creates an empty constructor for the class `LearningPlanTemplate`."}, {"ID": 1453, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function connect() { var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {}; var callback = arguments[1]; this.host = props.host || '127.0.0.1'; this.port = props.port || 21000; this.resultType = props.resultType || null; this.timeout = props.timeout || 1000; this.transport = props.transport || _thrift2.default.TBufferedTransport; this.protocol = props.protocol || _thrift2.default.TBinaryProtocol; this.options = { transport: this.transport, protocol: this.protocol, timeout: this.timeout }; var deferred = _thrift.Q.defer(); var connection = _thrift2.default.createConnection(this.host, this.port, this.options); var client = _thrift2.default.createClient(_ImpalaService2.default, connection); connection.on('error', ImpalaClient.onErrorDeferred(deferred)); connection.on('connect', function () { deferred.resolve('Connection is established.'); }); this.client = client; this.connection = connection; deferred.promise.nodeify(callback); return deferred.promise; }. \n### Response: Creates connection using given props.\n\n@param props {object}\n@param callback {function}\n@returns {function|promise}.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void createSimpleMethodWrapper(final MethodSignatureVisitor msign) { int access = msign.getAccessFlags(); access &= ~ACC_ABSTRACT; access &= ~ACC_NATIVE; MethodVisitor mv = wd.dest.visitMethod( access, msign.getMethodName(), msign.getDescription(), msign.getAsmMethodSignature(), msign.getExceptions()); mv.visitCode(); mv.visitVarInsn(ALOAD, 0); mv.visitFieldInsn(GETFIELD, wd.thisReference, wd.wrapperRef, wd.wrapperType); loadVirtualMethodArguments(mv, msign); if (wd.wrapInterface) { mv.visitMethodInsn( INVOKEINTERFACE, wd.wrapperType.substring(1, wd.wrapperType.length() - 1), msign.getMethodName(), msign.getDescription(), true); } else { mv.visitMethodInsn( INVOKEVIRTUAL, wd.wrapperType.substring(1, wd.wrapperType.length() - 1), msign.getMethodName(), msign.getDescription(), false); } ProxettaAsmUtil.prepareReturnValue(mv, msign, 0); visitReturn(mv, msign, true); mv.visitMaxs(0, 0); mv.visitEnd(); } \n### Response:", "ground_truth": "Creates simple method wrapper without proxy.", "predict": "Creates a simple method wrapper for the given method signature.\n\n@param msign {MethodSignatureVisitor}\n@return {void}.\n\nNote: This method uses the Visitor pattern to visit the method's code, arguments, and return type. It also loads virtual method arguments and prepares a return value using ProxettaAsmUtil."}, {"ID": 1454, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function attempt_state($attemptobj) { switch ($attemptobj->get_state()) { case quiz_attempt::IN_PROGRESS: return get_string('stateinprogress', 'quiz'); case quiz_attempt::OVERDUE: return get_string('stateoverdue', 'quiz') . html_writer::tag('span', get_string('stateoverduedetails', 'quiz', userdate($attemptobj->get_due_date())), array('class' => 'statedetails')); case quiz_attempt::FINISHED: return get_string('statefinished', 'quiz') . html_writer::tag('span', get_string('statefinisheddetails', 'quiz', userdate($attemptobj->get_submitted_date())), array('class' => 'statedetails')); case quiz_attempt::ABANDONED: return get_string('stateabandoned', 'quiz'); } }. \n### Response: Generate a brief textual desciption of the current state of an attempt.\n@param quiz_attempt $attemptobj the attempt\n@param int $timenow the time to use as 'now'.\n@return string the appropriate lang string to describe the state..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private String resolveRawTypeName(String typeName) { if (typeName == null) { return null; } boolean isArray = typeName.startsWith(StringPool.LEFT_SQ_BRACKET); if (isArray) { typeName = typeName.substring(1); } String rawTypeName; if (generics.containsKey(typeName)) { rawTypeName = generics.get(typeName); } else { rawTypeName = declaredTypeGeneric.getOrDefault(typeName, typeName); } if (isArray) { rawTypeName = '[' + rawTypeName; } return rawTypeName; } \n### Response:", "ground_truth": "Resolves raw type name using the generics information from the class\nor method information.", "predict": "This method resolves a raw type name from a string.\nIt checks if the string is a raw type name, if so it starts by checking if it starts with StringPool.LEFT_SQ_BRACKET. If it does, it extracts the first part of the string.\nIf it doesn't, it checks if the string contains the left square bracket. If it does, it extracts the second part of the string.\nIf the string is not a raw type name, it checks if the generics map contains the name of the type. If it does, it returns the value from the map. If it doesn't, it returns the default value of the type.\nIf the string is an array, it returns the raw type name as an array.\nIt's a private method, it's used to resolve the type name of a raw type."}, {"ID": 1455, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static function ensureConfig($config) { if ($config === null) { return new Config(); } if ($config instanceof Config) { return $config; } if (is_array($config)) { return new Config($config); } throw new LogicException('A config should either be an array or a Flysystem\\Config object.'); }. \n### Response: Ensure a Config instance.\n\n@param null|array|Config $config\n\n@return Config config instance\n\n@throw  LogicException.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public BeanReferences resolveReferenceFromValue(final PropertyDescriptor propertyDescriptor, final String refName) { BeanReferences references; if (refName == null || refName.isEmpty()) { references = buildDefaultReference(propertyDescriptor); } else { references = BeanReferences.of(refName); } references = references.removeDuplicateNames(); return references; } \n### Response:", "ground_truth": "Resolves reference from given values. Returns bean reference of given value or defaults\nif given name is blank.", "predict": "Resolve bean references from a value.\n\n@param PropertyDescriptor $propertyDescriptor\n@param String $refName\n\n@return BeanReferences bean references\n\n@throw Exception if refName is null or isEmpty.\n\n"}, {"ID": 1456, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def find_features @features = if params[ :only ] params[ :only ].to_s.split( \",\" ).collect( &:to_sym ).uniq elsif skip = params[ :skip ] || params[ :exclude ] monitored_features.keys - skip.to_s.split( \",\" ).collect( &:to_sym ) else monitored_features.keys end end. \n### Response: Skip features by appending skip=mongo,fun,etc\n Include features by appending feature=mongo,urban_airship,etc to filter.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public BeanReferences[] resolveReferenceFromValues(final Executable methodOrCtor, final String... parameterReferences) { BeanReferences[] references = convertRefToReferences(parameterReferences); if (references == null || references.length == 0) { references = buildDefaultReferences(methodOrCtor); } if (methodOrCtor.getParameterTypes().length != references.length) { throw new PetiteException(\"Different number of method parameters and references for: \" + methodOrCtor.getDeclaringClass().getName() + '#' + methodOrCtor.getName()); } removeAllDuplicateNames(references); return references; } \n### Response:", "ground_truth": "Takes given parameters references and returns reference set for given method or constructor.", "predict": "Resolve references from method parameters and return them as BeanReferences."}, {"ID": 1457, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def diagonal_dot(a, b): \"\"\" Dot product by row of a and b. There are a lot of ways to do this though performance varies very widely. This method uses the dot product to sum the row and avoids function calls if at all possible. Comparing performance of some equivalent versions: ``` In [1]: import numpy as np; import trimesh In [2]: a = np.random.random((10000, 3)) In [3]: b = np.random.random((10000, 3)) In [4]: %timeit (a * b).sum(axis=1) 1000 loops, best of 3: 181 us per loop In [5]: %timeit np.einsum('ij,ij->i', a, b) 10000 loops, best of 3: 62.7 us per loop In [6]: %timeit np.diag(np.dot(a, b.T)) 1 loop, best of 3: 429 ms per loop In [7]: %timeit np.dot(a * b, np.ones(a.shape[1])) 10000 loops, best of 3: 61.3 us per loop In [8]: %timeit trimesh.util.diagonal_dot(a, b) 10000 loops, best of 3: 55.2 us per loop ``` Parameters ------------ a : (m, d) float First array b : (m, d) float Second array Returns ------------- result : (m,) float Dot product of each row \"\"\" # make sure `a` is numpy array # doing it for `a` will force the multiplication to # convert `b` if necessary and avoid function call otherwise a = np.asanyarray(a) # 3x faster than (a * b).sum(axis=1) # avoiding np.ones saves 5-10% sometimes result = np.dot(a * b, [1.0] * a.shape[1]) return result. \n### Response: Dot product by row of a and b.\n\n    There are a lot of ways to do this though\n    performance varies very widely. This method\n    uses the dot product to sum the row and avoids\n    function calls if at all possible.\n\n    Comparing performance of some equivalent versions:\n    ```\n    In [1]: import numpy as np; import trimesh\n\n    In [2]: a = np.random.random((10000, 3))\n\n    In [3]: b = np.random.random((10000, 3))\n\n    In [4]: %timeit (a * b).sum(axis=1)\n    1000 loops, best of 3: 181 us per loop\n\n    In [5]: %timeit np.einsum('ij,ij->i', a, b)\n    10000 loops, best of 3: 62.7 us per loop\n\n    In [6]: %timeit np.diag(np.dot(a, b.T))\n    1 loop, best of 3: 429 ms per loop\n\n    In [7]: %timeit np.dot(a * b, np.ones(a.shape[1]))\n    10000 loops, best of 3: 61.3 us per loop\n\n    In [8]: %timeit trimesh.util.diagonal_dot(a, b)\n    10000 loops, best of 3: 55.2 us per loop\n    ```\n\n    Parameters\n    ------------\n    a : (m, d) float\n      First array\n    b : (m, d) float\n      Second array\n\n    Returns\n    -------------\n    result : (m,) float\n      Dot product of each row.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public BeanReferences[] readAllReferencesFromAnnotation(final Executable methodOrCtor) { PetiteInject petiteInject = methodOrCtor.getAnnotation(PetiteInject.class); final Parameter[] parameters = methodOrCtor.getParameters(); BeanReferences[] references; final boolean hasAnnotationOnMethodOrCtor; if (petiteInject != null) { references = convertAnnValueToReferences(petiteInject.value()); hasAnnotationOnMethodOrCtor = true; } else { references = new BeanReferences[parameters.length]; hasAnnotationOnMethodOrCtor = false; } int parametersWithAnnotationCount = 0; for (int i = 0; i < parameters.length; i++) { Parameter parameter = parameters[i]; petiteInject = parameter.getAnnotation(PetiteInject.class); if (petiteInject == null) { // no annotation on argument continue; } // there is annotation on argument, override values String annotationValue = readAnnotationValue(petiteInject); if (annotationValue != null) { references[i] = BeanReferences.of(annotationValue); } parametersWithAnnotationCount++; } if (!hasAnnotationOnMethodOrCtor) { if (parametersWithAnnotationCount == 0) { return null; } if (parametersWithAnnotationCount != parameters.length) { throw new PetiteException(\"All arguments must be annotated with PetiteInject\"); } } references = updateReferencesWithDefaultsIfNeeded(methodOrCtor, references); removeAllDuplicateNames(references); return references; } \n### Response:", "ground_truth": "Extracts references from method or constructor annotation.", "predict": "Method to read all references from an annotation.\n\nThis method takes a Executable method or Ctor and returns an array of BeanReferences. It first checks if the method or Ctor is annotated with PetiteInject, and if so, it converts the AnnValue to references. It then iterates over all parameters of the method or Ctor and checks if they are annotated with PetiteInject. If an argument is not annotated with PetiteInject, it is assumed to have no annotation and is not included in the array. If there are no parameters with an annotation, it returns null. If the method or Ctor is not annotated with PetiteInject, it returns an array of all default values for the parameters. The method also removeAllDuplicateNames()s the array.\n\nParameters\n------------\n\n* methodOrCtor : Executable method or Ctor\n*petiteInject : Annotation to convert AnnValue to references\n*parameters : Parameter[]\n*hasAnnotationOnMethodOrCtor : boolean\n\nReturns\n-------------\n\n* BeanReferences[] : array of BeanReferences\n\n### Resp Method to read all references from an annotation.\n\nThis method takes a Executable method or Ctor and returns an array of BeanReferences. It first checks if the method or Ctor is annotated with PetiteInject, and if so, it converts the AnnValue to references. It then iterates over all parameters of the method or Ctor and checks if they are annotated with PetiteInject. If an argument is not annotated with PetiteInject, it is assumed to have no annotation and is not included in the array. If there are no parameters with an annotation, it returns null. If the method or Ctor is not annotated with PetiteInject, it returns an array of all default values for the parameters. The method also removeAllDuplicateNames()s the array."}, {"ID": 1458, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (c *Client) DeleteSink(sinkID string) (*ct.Sink, error) { sink := &ct.Sink{} return sink, c.Delete(fmt.Sprintf(\"/sinks/%s\", sinkID), sink) }. \n### Response: // DeleteSink removes a log sink.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private BeanReferences[] buildDefaultReferences(final Executable methodOrCtor) { final boolean useParamo = petiteConfig.getUseParamo(); final PetiteReferenceType[] lookupReferences = petiteConfig.getLookupReferences(); MethodParameter[] methodParameters = null; if (useParamo) { methodParameters = Paramo.resolveParameters(methodOrCtor); } final Class[] paramTypes = methodOrCtor.getParameterTypes(); final BeanReferences[] references = new BeanReferences[paramTypes.length]; for (int j = 0; j < paramTypes.length; j++) { String[] ref = new String[lookupReferences.length]; references[j] = BeanReferences.of(ref); for (int i = 0; i < ref.length; i++) { switch (lookupReferences[i]) { case NAME: ref[i] = methodParameters != null ? methodParameters[j].getName() : null; break; case TYPE_SHORT_NAME: ref[i] = StringUtil.uncapitalize(paramTypes[j].getSimpleName()); break; case TYPE_FULL_NAME: ref[i] = paramTypes[j].getName(); break; } } } return references; } \n### Response:", "ground_truth": "Builds default method references.", "predict": "// BuildDefaultReferences retrieves default BeanReferences for a given Executable methodOrCtor."}, {"ID": 1459, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public int getFlowAt( Direction direction ) { switch( direction ) { case E: return eFlow; case W: return wFlow; case N: return nFlow; case S: return sFlow; case EN: return enFlow; case NW: return nwFlow; case WS: return wsFlow; case SE: return seFlow; default: throw new IllegalArgumentException(); } }. \n### Response: Get the value of the flow in one of the surrounding direction.\n\n@param direction the {@link Direction}.\n@return the flow value..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public BeanReferences buildDefaultReference(final PropertyDescriptor propertyDescriptor) { final PetiteReferenceType[] lookupReferences = petiteConfig.getLookupReferences(); final String[] references = new String[lookupReferences.length]; for (int i = 0; i < references.length; i++) { switch (lookupReferences[i]) { case NAME: references[i] = propertyDescriptor.getName(); break; case TYPE_SHORT_NAME: references[i] = StringUtil.uncapitalize(propertyDescriptor.getType().getSimpleName()); break; case TYPE_FULL_NAME: references[i] = propertyDescriptor.getType().getName(); break; } } return BeanReferences.of(references); } \n### Response:", "ground_truth": "Builds default field references.", "predict": "Builds a default bean reference for the given property descriptor.\n\n@param propertyDescriptor the {@link PropertyDescriptor} to use as a reference.\n@return a bean reference..\n\nNote: This method is used to build a default bean reference for a given property descriptor. It uses the lookup references provided by the petiteConfig object and iterates through the array of lookup references. For each reference, it checks the type and sets the corresponding reference string. Finally, it returns the bean reference."}, {"ID": 1460, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def get_posix(self, i): \"\"\"Get POSIX.\"\"\" index = i.index value = ['['] try: c = next(i) if c != ':': raise ValueError('Not a valid property!') else: value.append(c) c = next(i) if c == '^': value.append(c) c = next(i) while c != ':': if c not in _PROPERTY: raise ValueError('Not a valid property!') if c not in _PROPERTY_STRIP: value.append(c) c = next(i) value.append(c) c = next(i) if c != ']' or not value: raise ValueError('Unmatched ]') value.append(c) except Exception: i.rewind(i.index - index) value = [] return ''.join(value) if value else None. \n### Response: Get POSIX..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private void removeAllDuplicateNames(final BeanReferences[] allBeanReferences) { for (int i = 0; i < allBeanReferences.length; i++) { BeanReferences references = allBeanReferences[i]; allBeanReferences[i] = references.removeDuplicateNames(); } } \n### Response:", "ground_truth": "Removes duplicate names from bean references.", "predict": "removeAllDuplicateNames() method."}, {"ID": 1461, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func CheckData(data interface{}) error { if !structs.IsStruct(data) { return fmt.Errorf(\"interface must be struct type\") } st := structs.New(data) f, ok := st.FieldOk(\"Version\") if !ok { return fmt.Errorf(\"struct \u2018%s\u2019 must have field \u2018Version\u2019\", st.Name()) } if f.Kind() != reflect.String { return fmt.Errorf(\"\u2018Version\u2019 field in struct \u2018%s\u2019 must be a string type\", st.Name()) } return nil }. \n### Response: // CheckData - checks the validity of config data. Data should be of\n// type struct and contain a string type field called \"Version\"..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private BeanReferences[] convertRefToReferences(final String[] references) { if (references == null) { return null; } BeanReferences[] ref = new BeanReferences[references.length]; for (int i = 0; i < references.length; i++) { ref[i] = BeanReferences.of(references[i]); } return ref; } \n### Response:", "ground_truth": "Converts single string array to an array of bean references.", "predict": "// ConvertRefToReferences - converts a string array of references to a BeanReferences[]\n// array."}, {"ID": 1462, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void init(Record record, String strName, int iDataLength, String strDesc, Object strDefault) { super.init(record, strName, DBConstants.DEFAULT_FIELD_LENGTH, strDesc, strDefault); if (iDataLength == DBConstants.DEFAULT_FIELD_LENGTH) m_iFakeFieldLength = 24; else m_iFakeFieldLength = iDataLength; }. \n### Response: Initialize the member fields.\n@param record The parent record.\n@param strName The field name.\n@param iDataLength The maximum string length (pass -1 for default).\n@param strDesc The string description (usually pass null, to use the resource file desc).\n@param strDefault The default value (if object, this value is the default value, if string, the string is the default)..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private BeanReferences[] convertAnnValueToReferences(String value) { if (value == null) { return null; } value = value.trim(); if (value.length() == 0) { return null; } String[] refNames = Converter.get().toStringArray(value); BeanReferences[] references = new BeanReferences[refNames.length]; for (int i = 0; i < refNames.length; i++) { references[i] = BeanReferences.of(refNames[i].trim()); } return references; } \n### Response:", "ground_truth": "Converts comma-separated string into array of Bean references.", "predict": "Converts an AnnValue to a BeanReferences array.\n@param value The AnnValue to convert.\n@return The BeanReferences array containing the converted values.."}, {"ID": 1463, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def __parse_error(self, text): \"\"\"Parse an error received from the server. if text corresponds to a size indication, we grab the remaining content from the server. Otherwise, we try to match an error of the form \\(\\w+\\)?\\s*\".+\" On succes, the two public members errcode and errmsg are filled with the parsing results. :param text: the response to parse \"\"\" m = self.__size_expr.match(text) if m is not None: self.errcode = b\"\" self.errmsg = self.__read_block(int(m.group(1)) + 2) return m = self.__error_expr.match(text) if m is None: raise Error(\"Bad error message\") if m.group(1) is not None: self.errcode = m.group(1).strip(b\"()\") else: self.errcode = b\"\" self.errmsg = m.group(2).strip(b'\"'). \n### Response: Parse an error received from the server.\n\n        if text corresponds to a size indication, we grab the\n        remaining content from the server.\n\n        Otherwise, we try to match an error of the form \\(\\w+\\)?\\s*\".+\"\n\n        On succes, the two public members errcode and errmsg are\n        filled with the parsing results.\n\n        :param text: the response to parse.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void runJoy(final Consumer<JoddJoyRuntime> consumer) { final JoddJoy joddJoy = new JoddJoy(); final JoddJoyRuntime joyRuntime = joddJoy.startOnlyBackend(); joddJoy.withDb(joyDb -> setJtxManager(joyRuntime.getJtxManager())); final JtxTransaction tx = startRwTx(); final Print print = new Print(); try { print.line(\"START\", 80); print.newLine(); consumer.accept(joyRuntime); print.newLine(); print.line(\"END\", 80); if (tx != null) { tx.commit(); } } catch (Throwable throwable) { throwable.printStackTrace(); if (tx != null) { tx.rollback(); } } joddJoy.stop(); } \n### Response:", "ground_truth": "Runs JOY in standalone mode, with only backend.", "predict": "Run the Joy application.\n\n        Start the Joy application.\n\n        Accept the Joy runtime.\n\n        End the Joy application.\n\n        Start the RWTx transaction.\n\n        Commit the RWTx transaction.\n\n        Rollback the RWTx transaction.\n\n        Stop the Joy application."}, {"ID": 1464, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected function getDatabaseHandler(array $config) { return $this->app->make(PdoSessionHandler::class, [ $this->app->make(Connection::class)->getWrappedConnection(), [ 'db_table' => 'Sessions', 'db_id_col' => 'sessionID', 'db_data_col' => 'sessionValue', 'db_time_col' => 'sessionTime', 'db_lifetime_col' => 'sessionLifeTime', 'lock_mode' => PdoSessionHandler::LOCK_ADVISORY, ], ]); }. \n### Response: Create a new database session handler to handle session.\n\n@param array $config The `concrete.session` config item\n\n@return \\Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\PdoSessionHandler.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static Method findMethod(final Class c, final String methodName) { return findDeclaredMethod(c, methodName, true); } \n### Response:", "ground_truth": "Returns method from an object, matched by name. This may be considered as\na slow operation, since methods are matched one by one.\nReturns only accessible methods.\nOnly first method is matched.\n\n@param c          class to examine\n@param methodName Full name of the method.\n@return null if method not found", "predict": "Find the method with the specified name in the given class.\n\n@param Class $c The class to search for the method\n\n@param String $methodName The name of the method to find\n\n@return The found method or null if not found."}, {"ID": 1465, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func CreateBuildEnvironment(sourcePath string, cfgEnv api.EnvironmentList) []string { s2iEnv, err := scripts.GetEnvironment(filepath.Join(sourcePath, constants.Source)) if err != nil { glog.V(3).Infof(\"No user environment provided (%v)\", err) } return append(scripts.ConvertEnvironmentList(s2iEnv), scripts.ConvertEnvironmentList(cfgEnv)...) }. \n### Response: // CreateBuildEnvironment constructs the environment variables to be provided to the assemble\n// script and committed in the new image..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static <T> Constructor<T> findConstructor(final Class<T> clazz, final Class<?>... parameterTypes) { final Constructor<?>[] constructors = clazz.getConstructors(); Class<?>[] pts; for (Constructor<?> constructor : constructors) { pts = constructor.getParameterTypes(); if (isAllAssignableFrom(pts, parameterTypes)) { return (Constructor<T>) constructor; } } return null; } \n### Response:", "ground_truth": "Finds constructor with given parameter types. First matched ctor is returned.", "predict": "// Finds a constructor in the given class that has all the required parameter types.\n// If no constructor is found, returns null."}, {"ID": 1466, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private static DateTimeFormatter createFormatterForStyle(String style) { if (style == null || style.length() != 2) { throw new IllegalArgumentException(\"Invalid style specification: \" + style); } int dateStyle = selectStyle(style.charAt(0)); int timeStyle = selectStyle(style.charAt(1)); if (dateStyle == NONE && timeStyle == NONE) { throw new IllegalArgumentException(\"Style '--' is invalid\"); } return createFormatterForStyleIndex(dateStyle, timeStyle); }. \n### Response: Select a format from a two character style pattern. The first character\nis the date style, and the second character is the time style. Specify a\ncharacter of 'S' for short style, 'M' for medium, 'L' for long, and 'F'\nfor full. A date or time may be omitted by specifying a style character '-'.\n\n@param style  two characters from the set {\"S\", \"M\", \"L\", \"F\", \"-\"}\n@throws IllegalArgumentException if the style is invalid.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static Class[] resolveAllInterfaces(final Class type) { Set<Class> bag = new LinkedHashSet<>(); _resolveAllInterfaces(type, bag); return bag.toArray(new Class[0]); } \n### Response:", "ground_truth": "Resolves all interfaces of a type. No duplicates are returned.\nDirect interfaces are prior the interfaces of subclasses in\nthe returned array.", "predict": "Resolve all interfaces of a given type.\n\n@param type the type to resolve all interfaces for\n@return an array of the resolved interfaces\n\n@note This method is typically used in a type system to ensure that all\ninterfaces implemented by a given type are properly resolved.\n\n"}, {"ID": 1467, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected function fetchID(Request $request): ?string { $cookies = $request->getCookieParams(); if (empty($cookies[$this->config->getCookie()])) { return null; } return $cookies[$this->config->getCookie()]; }. \n### Response: Attempt to locate session ID in request.\n\n@param Request $request\n@return string|null.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static boolean compareParameters(final Class[] first, final Class[] second) { if (first.length != second.length) { return false; } for (int i = 0; i < first.length; i++) { if (first[i] != second[i]) { return false; } } return true; } \n### Response:", "ground_truth": "Compares classes, usually method or ctor parameters.", "predict": "Compare two parameters of the same type.\n\n@param Class[] first\n@param Class[] second"}, {"ID": 1468, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function getTemplates() { $templates = SSViewer::get_templates_by_class($this, '', __CLASS__); // Prefer any custom template if ($this->getTemplate()) { array_unshift($templates, $this->getTemplate()); } return $templates; }. \n### Response: Get list of templates to use\n\n@return array.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void forceAccess(final AccessibleObject accObject) { try { if (System.getSecurityManager() == null) accObject.setAccessible(true); else { AccessController.doPrivileged((PrivilegedAction) () -> { accObject.setAccessible(true); return null; }); } } catch (SecurityException sex) { // ignore } } \n### Response:", "ground_truth": "Suppress access check against a reflection object. SecurityException is silently ignored.\nChecks first if the object is already accessible.", "predict": "Force access to the object\n\n@param AccessibleObject object to access\n@return void\n\n"}, {"ID": 1469, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function getUserToken(string $userName) : string { if (isset($this->userToken[$userName])) { return $this->userToken[$userName]; } }. \n### Response: Returns the user token.\n\n@param string $userName\n\n@return string userToken.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @SuppressWarnings(\"unchecked\") public static <T> T newInstance(final Class<T> clazz, final Object... params) throws InstantiationException, IllegalAccessException, InvocationTargetException, NoSuchMethodException { if (params.length == 0) { return newInstance(clazz); } final Class<?>[] paramTypes = getClasses(params); final Constructor<?> constructor = findConstructor(clazz, paramTypes); if (constructor == null) { throw new InstantiationException(\"No constructor matched parameter types.\"); } return (T) constructor.newInstance(params); } \n### Response:", "ground_truth": "Creates new instance of given class with given optional arguments.", "predict": "This method is used to create a new instance of a class with specified parameters. It uses the getClasses() and findConstructor() methods to get the parameter types and constructor of the class, respectively. If no constructor matches the parameter types, it throws an InstantiationException. If a constructor is found, it returns the new instance by calling the newInstance() method with the specified parameters. The newInstance() method also throws IllegalAccessException, InvocationTargetException, and NoSuchMethodException if any of these exceptions are thrown."}, {"ID": 1470, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function delete() { global $CFG, $DB; require_once($CFG->libdir.'/gradelib.php'); require_once($CFG->dirroot.'/calendar/lib.php'); $cm = get_coursemodule_from_instance('lesson', $this->properties->id, $this->properties->course); $context = context_module::instance($cm->id); $this->delete_all_overrides(); grade_update('mod/lesson', $this->properties->course, 'mod', 'lesson', $this->properties->id, 0, null, array('deleted'=>1)); // We must delete the module record after we delete the grade item. $DB->delete_records(\"lesson\", array(\"id\"=>$this->properties->id)); $DB->delete_records(\"lesson_pages\", array(\"lessonid\"=>$this->properties->id)); $DB->delete_records(\"lesson_answers\", array(\"lessonid\"=>$this->properties->id)); $DB->delete_records(\"lesson_attempts\", array(\"lessonid\"=>$this->properties->id)); $DB->delete_records(\"lesson_grades\", array(\"lessonid\"=>$this->properties->id)); $DB->delete_records(\"lesson_timer\", array(\"lessonid\"=>$this->properties->id)); $DB->delete_records(\"lesson_branch\", array(\"lessonid\"=>$this->properties->id)); if ($events = $DB->get_records('event', array(\"modulename\"=>'lesson', \"instance\"=>$this->properties->id))) { $coursecontext = context_course::instance($cm->course); foreach($events as $event) { $event->context = $coursecontext; $event = calendar_event::load($event); $event->delete(); } } // Delete files associated with this module. $fs = get_file_storage(); $fs->delete_area_files($context->id); return true; }. \n### Response: Deletes this lesson from the database.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static Class[] getSuperclasses(final Class type) { int i = 0; for (Class x = type.getSuperclass(); x != null; x = x.getSuperclass()) { i++; } Class[] result = new Class[i]; i = 0; for (Class x = type.getSuperclass(); x != null; x = x.getSuperclass()) { result[i] = x; i++; } return result; } \n### Response:", "ground_truth": "Returns all superclasses.", "predict": "Returns an array of the superclasses of the given type."}, {"ID": 1471, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function getInstanceFromClassName($className, $name) { if (false === class_exists($className)) { throw ClassNotFoundException::wrongFormClassName($className); } if (false === in_array(FormInterface::class, class_implements($className))) { throw InvalidArgumentTypeException::wrongFormType($className); } $cacheIdentifier = $this->getCacheIdentifier($className, $name); if (false === isset($this->instances[$cacheIdentifier])) { $cacheInstance = CacheService::get()->getCacheInstance(); if ($cacheInstance->has($cacheIdentifier)) { $instance = $cacheInstance->get($cacheIdentifier); } else { $instance = $this->createInstance($className, $name); $cacheInstance->set($cacheIdentifier, $instance); } /** @var Configuration $formzConfigurationObject */ $formzConfigurationObject = $this->configurationFactory ->getFormzConfiguration() ->getObject(true); if (false === $formzConfigurationObject->hasForm($instance->getClassName(), $instance->getName())) { $formzConfigurationObject->addForm($instance); } $this->instances[$cacheIdentifier] = $instance; } return $this->instances[$cacheIdentifier]; }. \n### Response: Will create an instance of `FormObject` based on a class which implements\nthe interface `FormInterface`.\n\n@param string $className\n@param string $name\n@return FormObject\n@throws ClassNotFoundException\n@throws InvalidArgumentTypeException.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static Class<?> childClassOf(final Class<?> parentClass, final Object instance) { if (instance == null || instance == Object.class) { return null; } if (parentClass != null) { if (parentClass.isInterface()) { return null; } } Class<?> childClass = instance.getClass(); while (true) { Class<?> parent = childClass.getSuperclass(); if (parent == parentClass) { return childClass; } if (parent == null) { return null; } childClass = parent; } } \n### Response:", "ground_truth": "Returns the class of the immediate subclass of the given parent class for\nthe given object instance; or null if such immediate subclass cannot be\nuniquely identified for the given object instance.", "predict": "This method returns the child class of the given parent class, if it exists.\n\n@param Class<?> $parentClass\n@param Object $instance\n@return Class<?>\n@throws ClassNotFoundException\n@throws InvalidArgumentTypeException."}, {"ID": 1472, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def clustering_factory(clf): \"\"\"Embeds scikit-plot plotting methods in an sklearn clusterer instance. Args: clf: Scikit-learn clusterer instance Returns: The same scikit-learn clusterer instance passed in **clf** with embedded scikit-plot instance methods. Raises: ValueError: If **clf** does not contain the instance methods necessary for scikit-plot instance methods. \"\"\" required_methods = ['fit', 'fit_predict'] for method in required_methods: if not hasattr(clf, method): raise TypeError('\"{}\" is not in clf. Did you ' 'pass a clusterer instance?'.format(method)) additional_methods = { 'plot_silhouette': plot_silhouette, 'plot_elbow_curve': plot_elbow_curve } for key, fn in six.iteritems(additional_methods): if hasattr(clf, key): warnings.warn('\"{}\" method already in clf. ' 'Overriding anyway. This may ' 'result in unintended behavior.'.format(key)) setattr(clf, key, types.MethodType(fn, clf)) return clf. \n### Response: Embeds scikit-plot plotting methods in an sklearn clusterer instance.\n\n    Args:\n        clf: Scikit-learn clusterer instance\n\n    Returns:\n        The same scikit-learn clusterer instance passed in **clf** with\n        embedded scikit-plot instance methods.\n\n    Raises:\n        ValueError: If **clf** does not contain the instance methods necessary\n            for scikit-plot instance methods..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static JarFile jarFileOf(final Class<?> klass) { URL url = klass.getResource( \"/\" + klass.getName().replace('.', '/') + \".class\"); if (url == null) { return null; } String s = url.getFile(); int beginIndex = s.indexOf(\"file:\") + \"file:\".length(); int endIndex = s.indexOf(\".jar!\"); if (endIndex == -1) { return null; } endIndex += \".jar\".length(); String f = s.substring(beginIndex, endIndex); // decode URL string - it may contain encoded chars (e.g. whitespaces) which are not supported for file-instances f = URLDecoder.decode(f, \"UTF-8\"); File file = new File(f); try { return file.exists() ? new JarFile(file) : null; } catch (IOException e) { throw new IllegalStateException(e); } } \n### Response:", "ground_truth": "Returns the jar file from which the given class is loaded; or null\nif no such jar file can be located.", "predict": "Returns a JarFile instance for the given Class<?> klass, which contains the class file for the specified class.\n\n    Args:\n        klass: Class<?> for the class to be loaded\n\n    Returns:\n        A JarFile instance for the given Class<?> klass, which contains the class file for the specified class.\n\n    Raises:\n        IllegalStateException: If the class file cannot be found or if there is an error loading the class.\n\n    Example:\n        java -jar myjar.jar MyClass\n\n"}, {"ID": 1473, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (c *imageResolutionCache) resolveImageStreamImage(namespace, name, id string) (*rules.ImagePolicyAttributes, error) { attrs := &rules.ImagePolicyAttributes{IntegratedRegistry: true} resolved, err := c.imageClient.ImageStreamImages(namespace).Get(imageapi.JoinImageStreamImage(name, id), metav1.GetOptions{}) if err != nil { return attrs, err } ref, err := imageapi.ParseDockerImageReference(resolved.Image.DockerImageReference) if err != nil { return attrs, fmt.Errorf(\"ImageStreamTag could not be resolved: %v\", err) } now := now() c.cache.Add(resolved.Image.Name, imageCacheEntry{expires: now.Add(c.expiration), image: &resolved.Image}) attrs.Name = ref attrs.Image = &resolved.Image return attrs, nil }. \n### Response: // resolveImageStreamImage loads an image stream image if it exists, or returns an error..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void sleep(final long ms) { try { Thread.sleep(ms); } catch (InterruptedException iex) { Thread.currentThread().interrupt(); } } \n### Response:", "ground_truth": "Puts a thread to sleep, without throwing an InterruptedException.\n\n@param ms     the length of time to sleep in milliseconds", "predict": "// sleep takes a long time to execute and causes the program to pause for the specified amount of time.."}, {"ID": 1474, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function loginAction(Request $request) { if ($this->get('security.authorization_checker')->isGranted('IS_AUTHENTICATED_REMEMBERED')) { return $this->redirectToRoute('campaignchain_core_homepage'); } return parent::loginAction($request); }. \n### Response: redirect to home when already authenticated\n@param Request $request\n@return \\Symfony\\Component\\HttpFoundation\\RedirectResponse|\\Symfony\\Component\\HttpFoundation\\Response.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void sleep() { try { Thread.sleep(Long.MAX_VALUE); } catch (InterruptedException iex) { Thread.currentThread().interrupt(); } } \n### Response:", "ground_truth": "Puts a thread to sleep forever.", "predict": "This method is used to pause the execution of the current thread for a specified amount of time. It is typically used in situations where there is a need to wait for a specific condition to be met before continuing.\n\n@param Long.MAX_VALUE the maximum amount of time to wait\n@return void."}, {"ID": 1475, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def items(sanitize=False): ''' Return all of the minion's grains CLI Example: .. code-block:: bash salt '*' grains.items Sanitized CLI Example: .. code-block:: bash salt '*' grains.items sanitize=True ''' if salt.utils.data.is_true(sanitize): out = dict(__grains__) for key, func in six.iteritems(_SANITIZERS): if key in out: out[key] = func(out[key]) return out else: return __grains__. \n### Response: Return all of the minion's grains\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' grains.items\n\n    Sanitized CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' grains.items sanitize=True.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void wait(final Object obj) { synchronized (obj) { try { obj.wait(); } catch (InterruptedException inex) { Thread.currentThread().interrupt(); } } } \n### Response:", "ground_truth": "Waits for a object for synchronization purposes.", "predict": "Waits for the specified object to be ready before returning.\n\n    CLI Example:\n\n   .. code-block:: bash\n\n        salt '*' grains.items.wait(10);\n\n    Interrupted CLI Example:\n\n   .. code-block:: bash\n\n        salt '*' grains.items.wait(10);\n        Thread.currentThread().interrupt();\n\n     Sanitized CLI Example:\n\n   .. code-block:: bash\n\n        salt '*' grains.items.wait(10);\n        salt '*' grains.items.wait(10);\n        Thread.currentThread().interrupt();"}, {"ID": 1476, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def raw_cube_array(self): \"\"\"Return read-only ndarray of measure values from cube-response. The shape of the ndarray mirrors the shape of the (raw) cube response. Specifically, it includes values for missing elements, any MR_CAT dimensions, and any prunable rows and columns. \"\"\" array = np.array(self._flat_values).reshape(self._all_dimensions.shape) # ---must be read-only to avoid hard-to-find bugs--- array.flags.writeable = False return array. \n### Response: Return read-only ndarray of measure values from cube-response.\n\n        The shape of the ndarray mirrors the shape of the (raw) cube\n        response. Specifically, it includes values for missing elements, any\n        MR_CAT dimensions, and any prunable rows and columns..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static ThreadFactory daemonThreadFactory(final String name, final int priority) { return new ThreadFactory() { private AtomicInteger count = new AtomicInteger(); @Override public Thread newThread(final Runnable r) { Thread thread = new Thread(r); thread.setName(name + '-' + count.incrementAndGet()); thread.setDaemon(true); thread.setPriority(priority); return thread; } }; } \n### Response:", "ground_truth": "Creates new daemon thread factory.", "predict": "Return a daemon thread factory with a name and priority based on the given parameters.\n\n        The daemon thread priority is set to  priority.\n        The name is generated by incrementing the count by 1."}, {"ID": 1477, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def add(self, pane): \"\"\" Adds new panes to the window \"\"\" if isinstance(pane, list): initialised_panes = [] for p in pane: initialised_panes.append(self.init_pane(p)) self.panes.append(initialised_panes) else: pane = self.init_pane(pane) self.panes.append(pane). \n### Response: Adds new panes to the window.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public T get() { if (!initialized) { synchronized (this) { if (!initialized) { final T t = supplier.get(); value = t; initialized = true; supplier = null; return t; } } } return value; } \n### Response:", "ground_truth": "Returns the value. Value will be computed on first call.", "predict": "Provides an implementation for the `get()` method of the `Window` class, which returns the value of the given pane. The method synchronizes access to the `this` object to ensure that only one thread can access the method at a time, and initializes the value of the `initialized` flag to `false` before calling the `supplier.get()` method. If the `supplier.get()` method returns `null`, the `initialized` flag is set to `true`, and the ` supplier` is set to `null`. Finally, the method returns the value of the `value` variable, which is initialized to the value returned by the `supplier.get()` method."}, {"ID": 1478, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def get_imagery(cls, lat, lon, date=None, dim=None, cloud_score=False): \"\"\" Returns satellite image Args: lat: latitude float lon: longitude float date: date instance of available date from `get_assets` dim: width and height of image in degrees as float cloud_score: boolean to calculate the percentage of the image covered by clouds Returns: json \"\"\" instance = cls('planetary/earth/imagery') filters = { 'lat': lat, 'lon': lon, 'date': date, 'dim': dim, 'cloud_score': cloud_score } return instance.get_resource(**filters). \n### Response: Returns satellite image\n\n        Args:\n            lat: latitude float\n            lon: longitude float\n            date: date instance of available date from `get_assets`\n            dim: width and height of image in degrees as float\n            cloud_score: boolean to calculate the percentage of the image covered by clouds\n\n        Returns:\n            json.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void visitParameter(final String name, final int access) { if (api < Opcodes.ASM5) { throw new UnsupportedOperationException(REQUIRES_ASM5); } if (mv != null) { mv.visitParameter(name, access); } } \n### Response:", "ground_truth": "Visits a parameter of this method.\n\n@param name parameter name or null if none is provided.\n@param access the parameter's access flags, only {@code ACC_FINAL}, {@code ACC_SYNTHETIC}\nor/and {@code ACC_MANDATED} are allowed (see {@link Opcodes}).", "predict": "Visits the specified parameter in the method's metadata view.\n\n        Args:\n            name: name of the parameter\n            access: access level of the parameter (read/write/execute)\n\n        Returns:\n            void."}, {"ID": 1479, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function deploy(params, cb) { params.resourcePath = config.addURIParams(constants.SERVICES_BASE_PATH + \"/:guid/deploy\", params); params.method = \"POST\"; params.data = params.service; mbaasRequest.admin(params, cb); }. \n### Response: Deploying A Service Definition To An Mbaas.\n\n@param params\n@param cb.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public AnnotationVisitor visitAnnotation(final String descriptor, final boolean visible) { if (mv != null) { return mv.visitAnnotation(descriptor, visible); } return null; } \n### Response:", "ground_truth": "Visits an annotation of this method.\n\n@param descriptor the class descriptor of the annotation class.\n@param visible {@literal true} if the annotation is visible at runtime.\n@return a visitor to visit the annotation values, or {@literal null} if this visitor is not\ninterested in visiting this annotation.", "predict": "Visits an annotation and returns its metadata.\n\n@param descriptor\n@param visible"}, {"ID": 1480, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def requirements(ctx): \"\"\"Write the `requirements-agent-release.txt` file at the root of the repo listing all the Agent-based integrations pinned at the version they currently have in HEAD. \"\"\" echo_info('Freezing check releases') checks = get_valid_checks() checks.remove('datadog_checks_dev') entries = [] for check in checks: if check in AGENT_V5_ONLY: echo_info('Check `{}` is only shipped with Agent 5, skipping'.format(check)) continue try: version = get_version_string(check) entries.append('{}\\n'.format(get_agent_requirement_line(check, version))) except Exception as e: echo_failure('Error generating line: {}'.format(e)) continue lines = sorted(entries) req_file = get_agent_release_requirements() write_file_lines(req_file, lines) echo_success('Successfully wrote to `{}`!'.format(req_file)). \n### Response: Write the `requirements-agent-release.txt` file at the root of the repo\n    listing all the Agent-based integrations pinned at the version they currently\n    have in HEAD..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public AnnotationVisitor visitTypeAnnotation( final int typeRef, final TypePath typePath, final String descriptor, final boolean visible) { if (api < Opcodes.ASM5) { throw new UnsupportedOperationException(REQUIRES_ASM5); } if (mv != null) { return mv.visitTypeAnnotation(typeRef, typePath, descriptor, visible); } return null; } \n### Response:", "ground_truth": "Visits an annotation on a type in the method signature.\n\n@param typeRef a reference to the annotated type. The sort of this type reference must be\n{@link TypeReference#METHOD_TYPE_PARAMETER}, {@link\nTypeReference#METHOD_TYPE_PARAMETER_BOUND}, {@link TypeReference#METHOD_RETURN}, {@link\nTypeReference#METHOD_RECEIVER}, {@link TypeReference#METHOD_FORMAL_PARAMETER} or {@link\nTypeReference#THROWS}. See {@link TypeReference}.\n@param typePath the path to the annotated type argument, wildcard bound, array element type, or\nstatic inner type within 'typeRef'. May be {@literal null} if the annotation targets\n'typeRef' as a whole.\n@param descriptor the class descriptor of the annotation class.\n@param visible {@literal true} if the annotation is visible at runtime.\n@return a visitor to visit the annotation values, or {@literal null} if this visitor is not\ninterested in visiting this annotation.", "predict": "This method implements the `AnnotationVisitor` interface and visits the type annotations of a given type reference, type path, and descriptor. If the API is less than Opcodes.ASM5, an `UnsupportedOperationException` is thrown. If an instance of the `AnnotationVisitor` is provided, the method visits the type annotations of the given type reference, type path, and descriptor. If no `AnnotationVisitor` instance is provided, the method returns null."}, {"ID": 1481, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def _find_mapreduce_yaml(start, checked): \"\"\"Traverse the directory tree identified by start until a directory already in checked is encountered or the path of mapreduce.yaml is found. Checked is present both to make loop termination easy to reason about and so that the same directories do not get rechecked. Args: start: the path to start in and work upward from checked: the set of already examined directories Returns: the path of mapreduce.yaml file or None if not found. \"\"\" dir = start while dir not in checked: checked.add(dir) for mr_yaml_name in MR_YAML_NAMES: yaml_path = os.path.join(dir, mr_yaml_name) if os.path.exists(yaml_path): return yaml_path dir = os.path.dirname(dir) return None. \n### Response: Traverse the directory tree identified by start until a directory already\n  in checked is encountered or the path of mapreduce.yaml is found.\n\n  Checked is present both to make loop termination easy to reason about and so\n  that the same directories do not get rechecked.\n\n  Args:\n    start: the path to start in and work upward from\n    checked: the set of already examined directories\n\n  Returns:\n    the path of mapreduce.yaml file or None if not found..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public AnnotationVisitor visitParameterAnnotation( final int parameter, final String descriptor, final boolean visible) { if (mv != null) { return mv.visitParameterAnnotation(parameter, descriptor, visible); } return null; } \n### Response:", "ground_truth": "Visits an annotation of a parameter this method.\n\n@param parameter the parameter index. This index must be strictly smaller than the number of\nparameters in the method descriptor, and strictly smaller than the parameter count\nspecified in {@link #visitAnnotableParameterCount}. Important note: a parameter index i\nis not required to correspond to the i'th parameter descriptor in the method\ndescriptor", "predict": "This method visits the `ParameterAnnotation` of an `Annotation` object.\n\nIt checks if a `AnnotationVisitor` object `mv` is not null and returns its `visitParameterAnnotation` method to be called.\n\nIt does not return anything in this case.\n\n"}, {"ID": 1482, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function (inputs) { var props = { }; // Create a function to call with simple and hard types // This is done so simple types don't need to check for hard types var generateProps = function (types, hard) { for (var t in types) { if (types.hasOwnProperty(t)) { (function (prop) { Object.defineProperty(props, prop, { get: function () { for (var i = 0; i < inputs.length; ++i) { if (!checkType(prop, inputs[i], hard)) { return false; } } return true; } }); }(t)); } } }; generateProps(simpleTypes, false); generateProps(harderTypes, true); // Check whether the specified inputs even exist Object.defineProperty(props, \"there\", { get: function () { for (var i = 0; i < inputs.length; ++i) { if (inputs[i] === undefined || inputs[i] === null) { return false; } } return true; } }); // Check whether a passed in input is considered empty or not Object.defineProperty(props, \"empty\", { get: function () { for (var i = 0; i < inputs.length; ++i) { if (!checkEmpty(getType(inputs[i]), inputs[i])) { return false; } } return true; } }); return props; }. \n### Response: Bulld the properties that the is function returns for testing values.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void visitFieldInsn( final int opcode, final String owner, final String name, final String descriptor) { if (mv != null) { mv.visitFieldInsn(opcode, owner, name, descriptor); } } \n### Response:", "ground_truth": "Visits a field instruction. A field instruction is an instruction that loads or stores the\nvalue of a field of an object.\n\n@param opcode the opcode of the type instruction to be visited. This opcode is either\nGETSTATIC, PUTSTATIC, GETFIELD or PUTFIELD.\n@param owner the internal name of the field's owner class (see {@link Type#getInternalName()}).\n@param name the field's name.\n@param descriptor the field's descriptor (see {@link Type}).", "predict": "This method visits field instructions (in\u53f2) in the object (mv) and returns the result."}, {"ID": 1483, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public Statistics combine(Statistics other) { return new Statistics( this.loadCount + other.getLoadCount(), this.loadErrorCount + other.getLoadErrorCount(), this.batchInvokeCount + other.getBatchInvokeCount(), this.batchLoadCount + other.getBatchLoadCount(), this.batchLoadExceptionCount + other.getBatchLoadExceptionCount(), this.cacheHitCount + other.getCacheHitCount() ); }. \n### Response: This will combine this set of statistics with another set of statistics so that they become the combined count of each\n\n@param other the other statistics to combine\n\n@return a new statistics object of the combined counts.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void visitMethodInsn( final int opcode, final String owner, final String name, final String descriptor, final boolean isInterface) { if (api < Opcodes.ASM5) { if (isInterface != (opcode == Opcodes.INVOKEINTERFACE)) { throw new IllegalArgumentException(\"INVOKESPECIAL/STATIC on interfaces requires ASM5\"); } visitMethodInsn(opcode, owner, name, descriptor); return; } if (mv != null) { mv.visitMethodInsn(opcode, owner, name, descriptor, isInterface); } } \n### Response:", "ground_truth": "Visits a method instruction. A method instruction is an instruction that invokes a method.\n\n@param opcode the opcode of the type instruction to be visited. This opcode is either\nINVOKEVIRTUAL, INVOKESPECIAL, INVOKESTATIC or INVOKEINTERFACE.\n@param owner the internal name of the method's owner class (see {@link\nType#getInternalName()}).\n@param name the method's name.\n@param descriptor the method's descriptor (see {@link Type}).\n@param isInterface if the method's owner class is an interface.", "predict": "This method visits the methods of a class and performs various operations on the method inputs and outputs. It checks the version of the Java Compiler (API) it is running on and throws an exception if it is not version ASM5. If the API is version ASM5 or greater, the method visits the method insns of the class."}, {"ID": 1484, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static function getPermission($app, $key, $userID = 0) { //TODO $userID me mujt me i marr permissions e nje useri specifik return (isset(self::$permissions[$app][$key]) ? self::$permissions[$app][$key] : false); }. \n### Response: Get a particular permission.\n\n@param  int $userID Default: Authenticated User\n@return mixed.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void visitInvokeDynamicInsn( final String name, final String descriptor, final Handle bootstrapMethodHandle, final Object... bootstrapMethodArguments) { if (api < Opcodes.ASM5) { throw new UnsupportedOperationException(REQUIRES_ASM5); } if (mv != null) { mv.visitInvokeDynamicInsn(name, descriptor, bootstrapMethodHandle, bootstrapMethodArguments); } } \n### Response:", "ground_truth": "Visits an invokedynamic instruction.\n\n@param name the method's name.\n@param descriptor the method's descriptor (see {@link Type}).\n@param bootstrapMethodHandle the bootstrap method.\n@param bootstrapMethodArguments the bootstrap method constant arguments. Each argument must be\nan {@link Integer}, {@link Float}, {@link Long}, {@link Double}, {@link String}, {@link\nType}, {@link Handle} or {@link ConstantDynamic} value. This method is allowed to modify\nthe content of the array so a caller should expect that this array may change.", "predict": "Visit the invoke dynamic instruction.\n\n@param  String name The name of the instruction to visit.\n@param  String descriptor The descriptor of the instruction to visit.\n@param  Handle bootstrapMethodHandle The handle to the bootstrap method.\n@param  Object... bootstrapMethodArguments The arguments to the bootstrap method.\n@return void."}, {"ID": 1485, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static function parametrize($str, $params) { $keys = array_keys($params); $vals = array_values($params); array_walk($keys, function(&$key) { $key = '%' . $key . '%'; }); return str_replace($keys, $vals, $str); }. \n### Response: Parametrize string using array of params.\n\n@param string $str\n@param string[] $params\n@return string.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void visitJumpInsn(final int opcode, final Label label) { if (mv != null) { mv.visitJumpInsn(opcode, label); } } \n### Response:", "ground_truth": "Visits a jump instruction. A jump instruction is an instruction that may jump to another\ninstruction.\n\n@param opcode the opcode of the type instruction to be visited. This opcode is either IFEQ,\nIFNE, IFLT, IFGE, IFGT, IFLE, IF_ICMPEQ, IF_ICMPNE, IF_ICMPLT, IF_ICMPGE, IF_ICMPGT,\nIF_ICMPLE, IF_ACMPEQ, IF_ACMPNE, GOTO, JSR, IFNULL or IFNONNULL.\n@param label the operand of the instruction to be visited. This operand is a label that\ndesignates the instruction to which the jump instruction may jump.", "predict": "Visit jump instruction.\n\n@param int opcode\n@param Label label\n@return void."}, {"ID": 1486, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function sendPartnerRequestToManager(array $mailVars, $sendFrom, $sendTo) { $mailTemplate = $this->createMailTemplate('partner-request-manager', $mailVars); if (!empty($mailTemplate)) { $subject = $mailTemplate->getSubject(); $bodyParams = ['bodyContent' => $mailTemplate->getBody()]; $this->sendMessage($sendFrom, $sendTo, $subject, $bodyParams); } }. \n### Response: Sends mail about partner request to manager\n@param array $mailVars\n@param $sendFrom\n@param $sendTo.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void visitMultiANewArrayInsn(final String descriptor, final int numDimensions) { if (mv != null) { mv.visitMultiANewArrayInsn(descriptor, numDimensions); } } \n### Response:", "ground_truth": "Visits a MULTIANEWARRAY instruction.\n\n@param descriptor an array type descriptor (see {@link Type}).\n@param numDimensions the number of dimensions of the array to allocate.", "predict": "Visits the MultiANewArrayInsn instruction.\n\n@param String descriptor\n@param int numDimensions."}, {"ID": 1487, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static function fromGet ($key, $default=null, $filter=null, $args=array()) { if (!$key) { return self::filterArray ($_GET, $filter, $args); } return self::getPassedValue ($key, $default, 'G', $filter, $args); }. \n### Response: Wrapper for GET input\n\n@param string $key     The input field to return.\n@param mixed  $default The value to return if the requested field is not found (optional) (default=false).\n@param string $filter  The filter directive to apply to the retrieved input (optional) (default=null)\n@param array  $args    The filter processing args to apply (optional) (default=array())\n\n@return array|mixed\n@throws \\Exception.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void visitTryCatchBlock( final Label start, final Label end, final Label handler, final String type) { if (mv != null) { mv.visitTryCatchBlock(start, end, handler, type); } } \n### Response:", "ground_truth": "Visits a try catch block.\n\n@param start the beginning of the exception handler's scope (inclusive).\n@param end the end of the exception handler's scope (exclusive).\n@param handler the beginning of the exception handler's code.\n@param type the internal name of the type of exceptions handled by the handler, or {@literal\nnull} to catch any exceptions (for \"finally\" blocks).\n@throws IllegalArgumentException if one of the labels has already been visited by this visitor\n(by the {@link #visitLabel} method).", "predict": "Visits a try-catch block and adds a label for the start and end labels.\n\n@param Label start The start label of the try-catch block.\n@param Label end The end label of the try-catch block.\n@param Label handler The label that contains the handler method.\n@param String type The type of exception that is thrown by the handler method.\n\n@return void."}, {"ID": 1488, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public Boundary getObservanceBoundary(Date date) { utcCalendar.setTime(date); int year = utcCalendar.get(Calendar.YEAR); int month = utcCalendar.get(Calendar.MONTH) + 1; int day = utcCalendar.get(Calendar.DATE); int hour = utcCalendar.get(Calendar.HOUR); int minute = utcCalendar.get(Calendar.MINUTE); int second = utcCalendar.get(Calendar.SECOND); return getObservanceBoundary(year, month, day, hour, minute, second); }. \n### Response: Gets the timezone information of a date.\n@param date the date\n@return the timezone information.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public AnnotationVisitor visitLocalVariableAnnotation( final int typeRef, final TypePath typePath, final Label[] start, final Label[] end, final int[] index, final String descriptor, final boolean visible) { if (api < Opcodes.ASM5) { throw new UnsupportedOperationException(REQUIRES_ASM5); } if (mv != null) { return mv.visitLocalVariableAnnotation( typeRef, typePath, start, end, index, descriptor, visible); } return null; } \n### Response:", "ground_truth": "Visits an annotation on a local variable type.\n\n@param typeRef a reference to the annotated type. The sort of this type reference must be\n{@link TypeReference#LOCAL_VARIABLE} or {@link TypeReference#RESOURCE_VARIABLE}. See {@link\nTypeReference}.\n@param typePath the path to the annotated type argument, wildcard bound, array element type, or\nstatic inner type within 'typeRef'. May be {@literal null} if the annotation targets\n'typeRef' as a whole.\n@param start the fist instructions corresponding to the continuous ranges that make the scope\nof this local variable (inclusive).\n@param end the last instructions corresponding to the continuous ranges that make the scope of\nthis local variable (exclusive). This array must have the same size as the 'start' array.\n@param index the local variable's index in each range. This array must have the same size as\nthe 'start' array.\n@param descriptor the class descriptor of the annotation class.\n@param visible {@literal true} if the annotation is visible at runtime.\n@return a visitor to visit the annotation values, or {@literal null} if this visitor is not\ninterested in visiting this annotation.", "predict": "Visits the local variable annotation of a type.\n@param typeRef the type reference\n@param typePath the type path\n@param start the start label\n@param end the end label\n@param index the index label\n@param descriptor the descriptor\n@param visible the visible flag.\n\n"}, {"ID": 1489, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void setSdParams(List<SDParam> sdParams) { if (null == sdParams) { throw new IllegalArgumentException(\"sdParams list cannot be null\"); } this.sdParams.addAll(sdParams); }. \n### Response: Set the value of sdParams\n\n@param sdParams new value of sdParams.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: void convertToWriter(final Writer writer, final Properties properties, final Map<String, Properties> profiles) throws IOException { final BufferedWriter bw = getBufferedWriter(writer); writeBaseAndProfileProperties(bw, properties, profiles); writeProfilePropertiesThatAreNotInTheBase(bw, properties, profiles); bw.flush(); } \n### Response:", "ground_truth": "Convert Java Properties to Jodd Props format\n\n@param writer     Writer to write Props formatted file content to\n@param properties Properties to convert to Props format\n@param profiles   Properties per profile to convert and add to the Props format\n@throws IOException On any I/O error when writing to the writer", "predict": "Convert the given Writer, Properties, and Map<String, Properties> to a BufferedWriter and write the base and profile properties. Write the profile properties that are not in the base. Finally, flush the buffer.\n\n@param writer the target Writer to convert\n@param properties the target Properties to write\n@param profiles the target Map<String, Properties> to write\n@return void the method returns nothing.\n\nNote: The method writeBaseAndProfileProperties and writeProfilePropertiesThatAreNotInTheBase are used to write the base and profile properties respectively."}, {"ID": 1490, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def _get_running_apps(self, instance, requests_config): \"\"\" Determine what mode was specified \"\"\" tags = instance.get('tags', []) if tags is None: tags = [] master_address = self._get_master_address(instance) # Get the cluster name from the instance configuration cluster_name = instance.get('cluster_name') if cluster_name is None: raise Exception('The cluster_name must be specified in the instance configuration') tags.append('cluster_name:%s' % cluster_name) tags = list(set(tags)) # Determine the cluster mode cluster_mode = instance.get(SPARK_CLUSTER_MODE) if cluster_mode is None: self.log.warning( 'The value for `spark_cluster_mode` was not set in the configuration. ' 'Defaulting to \"%s\"' % SPARK_YARN_MODE ) cluster_mode = SPARK_YARN_MODE if cluster_mode == SPARK_STANDALONE_MODE: # check for PRE-20 pre20 = is_affirmative(instance.get(SPARK_PRE_20_MODE, False)) return self._standalone_init(master_address, pre20, requests_config, tags) elif cluster_mode == SPARK_MESOS_MODE: running_apps = self._mesos_init(instance, master_address, requests_config, tags) return self._get_spark_app_ids(running_apps, requests_config, tags) elif cluster_mode == SPARK_YARN_MODE: running_apps = self._yarn_init(master_address, requests_config, tags) return self._get_spark_app_ids(running_apps, requests_config, tags) else: raise Exception('Invalid setting for %s. Received %s.' % (SPARK_CLUSTER_MODE, cluster_mode)). \n### Response: Determine what mode was specified.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public void processStream() throws IOException { FastByteArrayOutputStream out = new FastByteArrayOutputStream(); size = 0; if (maxFileSize == -1) { size += input.copyAll(out); } else { size += input.copyMax(out, maxFileSize + 1); // one more byte to detect larger files if (size > maxFileSize) { fileTooBig = true; valid = false; input.skipToBoundary(); return; } } data = out.toByteArray(); size = data.length; valid = true; } \n### Response:", "ground_truth": "Reads data from input stream into byte array and stores file size.", "predict": "This method processes a stream of data and stores it in a FastByteArrayOutputStream. It checks the maximum file size of the input and if it is -1, it copies all the data from the input to the output. If the maximum file size is not -1, it copies the maximum file size + 1 byte to detect larger files. Finally, it converts the data to a ByteArray and sets the size and valid flag."}, {"ID": 1491, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static function create($gateway = null) { $email_gateway_manager = new EmailGatewayManager; if ($gateway) { return $email_gateway_manager->create($gateway); } else { return $email_gateway_manager->create($email_gateway_manager->getDefaultGateway()); } }. \n### Response: Returns the EmailGateway to send emails with.\nCalling this function multiple times will return unique objects.\n\n@param string $gateway\nThe name of the gateway to use. Please only supply if specific\ngateway functions are being used.\nIf the gateway is not found, it will throw an EmailException\n@throws Exception\n@return EmailGateway.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public T next() { if (hasNext == null) { hasNext = Boolean.valueOf(moveToNext()); } if (hasNext == false) { throw new NoSuchElementException(); } if (!entityAwareMode) { hasNext = null; return newElement; } count++; T result = previousElement; previousElement = newElement; hasNext = null; return result; } \n### Response:", "ground_truth": "Returns next mapped object.", "predict": "This method returns the next element in the sequence, based on the moveToNext() method and the entityAwareMode property. If no more elements are available, a NoSuchElementException is thrown. If the entityAwareMode property is not set to true, the method returns the first element in the sequence."}, {"ID": 1492, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function run(TestResult $result) { $this->eventEmitter->emit('suite.start', [$this]); $this->eventEmitter->on('suite.halt', [$this, 'halt']); foreach ($this->getTestsToRun() as $test) { if ($this->halted) { break; } $this->runTest($test, $result); } $this->eventEmitter->emit('suite.end', [$this]); }. \n### Response: Run all the specs belonging to the suite\n\n@param TestResult $result.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private boolean moveToNext() { if (last) { // last has been set to true, so no more rows to iterate - close everything if (closeOnEnd) { query.close(); } else { query.closeResultSet(resultSetMapper.getResultSet()); } return false; } while (true) { if (!resultSetMapper.next()) { // no more rows, no more parsing, previousElement is the last one to iterate last = true; return entityAwareMode; } // parse row Object[] objects = resultSetMapper.parseObjects(types); Object row = query.resolveRowResults(objects); newElement = (T) row; if (entityAwareMode) { if (count == 0 && previousElement == null) { previousElement = newElement; continue; } if (previousElement != null && newElement != null) { boolean equals; if (newElement.getClass().isArray()) { equals = Arrays.equals((Object[]) previousElement, (Object[]) newElement); } else { equals = previousElement.equals(newElement); } if (equals) { continue; } } } break; } return true; } \n### Response:", "ground_truth": "Moves to next element.", "predict": "This code defines a private method named `moveToNext` that is used to move to the next element in a ResultSet. The method first checks if there are any more rows to iterate by checking if the `last` flag is set to true. If there are no more rows, the method closes the ResultSet and returns false. If there are still rows to iterate, the method continues to the next iteration by calling the `resultSetMapper.next()` method and parsing the rows. After the rows have been parsed, the method checks if there are any more elements to iterate by calling the `resultSetMapper.parseObjects()` method and parsing the rows. If there are no more elements to iterate, the method returns the `entityAwareMode` flag. If there are still elements to iterate, the method checks if the previous and new elements are the same type and if they are, the method continues to the next iteration. If there are no more elements to iterate, the method returns true."}, {"ID": 1493, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public Future<?> scheduleWithFixedDelay(Runnable task, long initialDelay, long delay, TimeUnit unit) { Preconditions.checkState(isOpen.get(), \"CloseableExecutorService is closed\"); ScheduledFuture<?> scheduledFuture = scheduledExecutorService.scheduleWithFixedDelay(task, initialDelay, delay, unit); return new InternalScheduledFutureTask(scheduledFuture); }. \n### Response: Creates and executes a periodic action that becomes enabled first\nafter the given initial delay, and subsequently with the\ngiven delay between the termination of one execution and the\ncommencement of the next.  If any execution of the task\nencounters an exception, subsequent executions are suppressed.\nOtherwise, the task will only terminate via cancellation or\ntermination of the executor.\n\n@param task      the task to execute\n@param initialDelay the time to delay first execution\n@param delay        the delay between the termination of one\nexecution and the commencement of the next\n@param unit         the time unit of the initialDelay and delay parameters\n@return a Future representing pending completion of\nthe task, and whose get() method will throw an\nexception upon cancellation.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @SuppressWarnings({\"unchecked\"}) public static <T> T[] join(T[]... arrays) { Class<T> componentType = (Class<T>) arrays.getClass().getComponentType().getComponentType(); return join(componentType, arrays); } \n### Response:", "ground_truth": "Joins arrays. Component type is resolved from the array argument.", "predict": "This method joins multiple arrays of the same type and returns an array of the resulting elements. The type of the returned array is determined by the component type of the arrays passed as arguments. This method is safe to use without unchecked warnings.\n\n@param arrays   the arrays to join\n@return an array of the resulting elements, determined by the component type of the arrays passed as arguments\n\n"}, {"ID": 1494, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def associate(self, floating_ip_id, port_id): \"\"\"Associates the floating IP to the port. ``port_id`` represents a VNIC of an instance. ``port_id`` argument is different from a normal neutron port ID. A value passed as ``port_id`` must be one of target_id returned by ``list_targets``, ``get_target_by_instance`` or ``list_targets_by_instance`` method. \"\"\" # NOTE: In Neutron Horizon floating IP support, port_id is # \"<port_id>_<ip_address>\" format to identify multiple ports. pid, ip_address = port_id.split('_', 1) update_dict = {'port_id': pid, 'fixed_ip_address': ip_address} self.client.update_floatingip(floating_ip_id, {'floatingip': update_dict}). \n### Response: Associates the floating IP to the port.\n\n        ``port_id`` represents a VNIC of an instance.\n        ``port_id`` argument is different from a normal neutron port ID.\n        A value passed as ``port_id`` must be one of target_id returned by\n        ``list_targets``, ``get_target_by_instance`` or\n        ``list_targets_by_instance`` method..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @SuppressWarnings({\"unchecked\"}) public static <T> T[] join(Class<T> componentType, T[][] arrays) { if (arrays.length == 1) { return arrays[0]; } int length = 0; for (T[] array : arrays) { length += array.length; } T[] result = (T[]) Array.newInstance(componentType, length); length = 0; for (T[] array : arrays) { System.arraycopy(array, 0, result, length, array.length); length += array.length; } return result; } \n### Response:", "ground_truth": "Joins arrays using provided component type.", "predict": "Method-level comment:\n\nThis method is a utility method that joins two arrays of type T. The first argument is a class type of T, and the second argument is an array of T[][]. The method first checks if the array is only one element, if so, it returns the first element of the array. If the array is not one element, it iterates through the array and adds the length of each element to a running total. Finally, it creates a new array of type T with the same length as the original array and copies each element of the original array into the new array, adding the length of each element to the running total. The method returns the resulting array."}, {"ID": 1495, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def insert_json(table=None, bulk_size=1000, concurrency=25, hosts=None, output_fmt=None): \"\"\"Insert JSON lines fed into stdin into a Crate cluster. If no hosts are specified the statements will be printed. Args: table: Target table name. bulk_size: Bulk size of the insert statements. concurrency: Number of operations to run concurrently. hosts: hostname:port pairs of the Crate nodes \"\"\" if not hosts: return print_only(table) queries = (to_insert(table, d) for d in dicts_from_stdin()) bulk_queries = as_bulk_queries(queries, bulk_size) print('Executing inserts: bulk_size={} concurrency={}'.format( bulk_size, concurrency), file=sys.stderr) stats = Stats() with clients.client(hosts, concurrency=concurrency) as client: f = partial(aio.measure, stats, client.execute_many) try: aio.run_many(f, bulk_queries, concurrency) except clients.SqlException as e: raise SystemExit(str(e)) try: print(format_stats(stats.get(), output_fmt)) except KeyError: if not stats.sampler.values: raise SystemExit('No data received via stdin') raise. \n### Response: Insert JSON lines fed into stdin into a Crate cluster.\n\n    If no hosts are specified the statements will be printed.\n\n    Args:\n        table: Target table name.\n        bulk_size: Bulk size of the insert statements.\n        concurrency: Number of operations to run concurrently.\n        hosts: hostname:port pairs of the Crate nodes.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static <T> T[] resize(T[] buffer, int newSize) { Class<T> componentType = (Class<T>) buffer.getClass().getComponentType(); T[] temp = (T[]) Array.newInstance(componentType, newSize); System.arraycopy(buffer, 0, temp, 0, buffer.length >= newSize ? newSize : buffer.length); return temp; } \n### Response:", "ground_truth": "Resizes an array.", "predict": "Resize an array to a new size.\n\nArgs:\n\t* buffer: The array to resize.\n\t* newSize: The new size of the array.\n\nReturns:\n\t* The resized array."}, {"ID": 1496, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (i *Instances) NodeAddresses(name types.NodeName) ([]v1.NodeAddress, error) { glog.V(4).Infof(\"NodeAddresses(%v) called\", name) addrs, err := getAddressesByName(i.compute, name) if err != nil { return nil, err } glog.V(4).Infof(\"NodeAddresses(%v) => %v\", name, addrs) return addrs, nil }. \n### Response: // NodeAddresses gets node addresses.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static <T> T[] append(T[] buffer, T newElement) { T[] t = resize(buffer, buffer.length + 1); t[buffer.length] = newElement; return t; } \n### Response:", "ground_truth": "Appends an element to array.", "predict": "// append resizes the buffer to the end and adds the new element."}, {"ID": 1497, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected int checkMapping(final int articleID, final int revisionCounter) throws SQLException { PreparedStatement statement = null; ResultSet result = null; // Check for the correct revisionCounter mapping try { statement = this.connection.prepareStatement(\"SELECT Mapping \" + \"FROM index_chronological \" + \"WHERE ArticleID=? LIMIT 1\"); statement.setInt(1, articleID); result = statement.executeQuery(); if (result.next()) { String mapping = result.getString(1); return getMapping(mapping, revisionCounter); } } finally { if (statement != null) { statement.close(); } if (result != null) { result.close(); } } return revisionCounter; }. \n### Response: This method maps the chronological order to the revisionCounter.\n\n@param articleID\nID of the article\n@param revisionCounter\nchronological position\n\n@return position in the chronological order\n\n@throws SQLException\nif an error occurs while accesing the database..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @SuppressWarnings({\"unchecked\"}) public static <T> T[] remove(T[] buffer, int offset, int length, Class<T> componentType) { int len2 = buffer.length - length; T[] temp = (T[]) Array.newInstance(componentType, len2); System.arraycopy(buffer, 0, temp, 0, offset); System.arraycopy(buffer, offset + length, temp, offset, len2 - offset); return temp; } \n### Response:", "ground_truth": "Removes sub-array.", "predict": "This method removes elements from a buffer and returns a new array with the removed elements.\n\n@param buffer\narray to be modified\n@param offset\nindex of the first element to be removed\n@param length\nnumber of elements to be removed\n@param componentType\ntype of the elements to be removed\n\n@return new array with the removed elements\n\n@SuppressWarnings({\"unchecked\"})\nThis code is using a generic type parameter T to specify the type of the elements to be removed. This can be useful when working with arrays, but it can also make the code more difficult to understand and maintain if the type of the elements to be removed changes in the future. The use of @SuppressWarnings({\"unchecked\"}) is to indicate that the code is safe to run without checking for any unchecked types."}, {"ID": 1498, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func AddModule(id string, m ModuleLoader) { globalMu.Lock() globalModules[id] = m globalMu.Unlock() }. \n### Response: // AddModule registers global module.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static int indexOf(char[] array, char value) { for (int i = 0; i < array.length; i++) { if (array[i] == value) { return i; } } return -1; } \n### Response:", "ground_truth": "Finds the first occurrence of an element in an array.", "predict": "// indexOf returns -1 when no match is found."}, {"ID": 1499, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function (options) { var Router, args; if (this.get('parent')) { throw new Error('Only the root route may be exported as an Ember router.'); } args = slice.call(arguments); if (!args.length || args[args.length - 1] instanceof Ember.Mixin) { args.push(options = {}); } else { options = args[args.length - 1]; } options._enhancedRouterRootMeta = this; Router = Ember.Router.extend.apply(Ember.Router, args); Router.map(this.get('mapFunction')); return Router; }. \n### Response: Transforms this RouteMeta into an Ember router\n\n@method toRouter\n@param {Object} options\n@return {Ember.Router}.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static int indexOf(Object[] array, Object value) { for (int i = 0; i < array.length; i++) { if (array[i].equals(value)) { return i; } } return -1; } \n### Response:", "ground_truth": "Finds the first occurrence in an array.", "predict": "This method returns -1 because it loops through the array and does not find the specified value in the array.\n\n@method indexOf\n@param {Object[]} array\n@param {Object} value\n@return {int}."}, {"ID": 1500, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function getDecoratorTypeFromArguments(args) { 'use strict'; if (args.length === 0 || args.length > 3) { return DecoratorType.None; } var kind = typeof (args.length === 1 ? args[0] : args[2]); switch (kind) { case 'function': return DecoratorType.Class; case 'number': return DecoratorType.Parameter; case 'undefined': return DecoratorType.Property; case 'object': return DecoratorType.Method; default: return DecoratorType.None; } }. \n### Response: Guesses which kind of decorator from its functional arguments\n@param args\n@returns {DecoratorType}.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static int indexOf(byte[] array, byte[] sub, int startIndex) { return indexOf(array, sub, startIndex, array.length); } \n### Response:", "ground_truth": "Finds the first occurrence in an array from specified given position.", "predict": "indexOf is a static method that returns the index of the first occurrence of a specified byte array within another byte array.\n@param array {byte[]} the array to search\n@param sub {byte[]} the subarray to search within\n@param startIndex {int} the starting index of the subarray\n@return {int} the index of the first occurrence of the specified byte array\n@static"}, {"ID": 1501, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (pm *PluginManager) Activate(m Plugins, b *BuildConfig, c chan bool) { br := pm.plugins.Get(m.Tag) if br != nil { if bx, ok := br.(PluginMux); ok { fmt.Printf(\"--> Plugin: Initializing Plugin: '%s' \\n\", m.Tag) bx(b, m, c) } } }. \n### Response: // Activate activates a specific plugin.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public LagartoDOMBuilder enableXhtmlMode() { config.ignoreWhitespacesBetweenTags = false; // collect all whitespaces config.setCaseSensitive(true); // XHTML is case sensitive config.setEnableRawTextModes(false); // all tags are parsed in the same way config.enabledVoidTags = true; // list of void tags config.selfCloseVoidTags = true; // self close void tags config.impliedEndTags = false; // no implied tag ends config.setEnableConditionalComments(false); // don't enable IE conditional comments config.setParseXmlTags(false); // enable XML mode in parsing return this; } \n### Response:", "ground_truth": "Enables XHTML mode.", "predict": "// EnableXhtmlMode enables XHTML mode in the parser."}, {"ID": 1502, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (j *JsonQuery) ArrayOfBools(s ...string) ([]bool, error) { array, err := j.Array(s...) if err != nil { return []bool{}, err } toReturn := make([]bool, len(array)) for index, val := range array { toReturn[index], err = boolFromInterface(val) if err != nil { return toReturn, err } } return toReturn, nil }. \n### Response: // ArrayOfBools extracts an array of bools from some json.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public Document parse(final char[] content) { LagartoParser lagartoParser = new LagartoParser(content); return doParse(lagartoParser); } \n### Response:", "ground_truth": "Creates DOM tree from provided content.", "predict": "// This method parses the content of a JSON document using the Lagarto parser."}, {"ID": 1503, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def manage_component_path(component) current_params = try(:params) || {} EngineRouter.admin_proxy(component).root_path(locale: current_params[:locale]) end. \n### Response: Returns the defined admin root path for a given component.\n\n component - the Component we want to find the root path for.\n\n Returns a relative url..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected Document doParse(final LagartoParser lagartoParser) { lagartoParser.setConfig(config); LagartoDOMBuilderTagVisitor domBuilderTagVisitor = new LagartoDOMBuilderTagVisitor(this); lagartoParser.parse(domBuilderTagVisitor); return domBuilderTagVisitor.getDocument(); } \n### Response:", "ground_truth": "Parses the content using provided lagarto parser.", "predict": "This method parses a document using the Lagarto parser and returns the resulting DOM document.\n\nThis method is used in the `AdminController` to parse the admin proxy for a given component. The admin proxy is a representation of the admin interface for a given component, and it is used to access the component's functionality through the admin API.\n\nThis method sets the configuration for the parser and creates a new instance of the `LagartoDOMBuilderTagVisitor` class. It then parses the document using the parser and returns the resulting DOM document.\n\nNote that this method is only used in the `AdminController` and is not intended to be used directly. It is primarily used to parse the admin proxy for a given component and to access the component's functionality through the admin API."}, {"ID": 1504, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def commit(self, session): \"\"\"Commit phase for session. :param session: sqlalchemy session \"\"\" sp_key, sp_hkey = self._keygen(session) with self.r.pipeline(transaction=False) as p: p.srem(sp_key, session.meepo_unique_id) p.expire(sp_hkey, 60 * 60) p.execute(). \n### Response: Commit phase for session.\n\n        :param session: sqlalchemy session.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private void endCurrentBasicBlockWithNoSuccessor() { if (compute == COMPUTE_ALL_FRAMES) { Label nextBasicBlock = new Label(); nextBasicBlock.frame = new Frame(nextBasicBlock); nextBasicBlock.resolve(code.data, code.length); lastBasicBlock.nextBasicBlock = nextBasicBlock; lastBasicBlock = nextBasicBlock; currentBasicBlock = null; } else if (compute == COMPUTE_MAX_STACK_AND_LOCAL) { currentBasicBlock.outputStackMax = (short) maxRelativeStackSize; currentBasicBlock = null; } } \n### Response:", "ground_truth": "Ends the current basic block. This method must be used in the case where the current basic\nblock does not have any successor.\n\nWARNING: this method must be called after the currently visited instruction has been put in\n{@link #code} (if frames are computed, this method inserts a new Label to start a new basic\nblock after the current instruction).", "predict": "End current basic block with no successor.\n\n        :param compute: Compute type, COMPUTE_ALL_FRAMES for all frames, COMPUTE_MAX_STACK_AND_LOCAL for max stack and local."}, {"ID": 1505, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void setPixels(int view , List<Point2D_F64> pixelsInView ) { if( pixelsInView.size() != pixels.numCols ) throw new IllegalArgumentException(\"Pixel count must be constant and match \"+pixels.numCols); int row = view*2; for (int i = 0; i < pixelsInView.size(); i++) { Point2D_F64 p = pixelsInView.get(i); pixels.set(row,i,p.x); pixels.set(row+1,i,p.y); pixelScale = Math.max(Math.abs(p.x),Math.abs(p.y)); } }. \n### Response: Sets pixel observations for a paricular view\n@param view the view\n@param pixelsInView list of 2D pixel observations.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: final void collectAttributePrototypes(final Attribute.Set attributePrototypes) { attributePrototypes.addAttributes(firstAttribute); attributePrototypes.addAttributes(firstCodeAttribute); } \n### Response:", "ground_truth": "Collects the attributes of this method into the given set of attribute prototypes.\n\n@param attributePrototypes a set of attribute prototypes.", "predict": "Collects all attributes and their prototypes for a given set.\n@param attributePrototypes the set of attribute prototypes.\n\nNote: This method is used to collect all attributes and their prototypes for a given set, and it is typically used in a framework or library that provides a way to add and retrieve attributes from an application."}, {"ID": 1506, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def Send(self, data, status=200, ctype=\"application/octet-stream\", additional_headers=None, last_modified=0): \"\"\"Sends a response to the client.\"\"\" if additional_headers: additional_header_strings = [ \"%s: %s\\r\\n\" % (name, val) for name, val in iteritems(additional_headers) ] else: additional_header_strings = [] header = \"\" header += \"HTTP/1.0 %s\\r\\n\" % self.statustext[status] header += \"Server: GRR Server\\r\\n\" header += \"Content-type: %s\\r\\n\" % ctype header += \"Content-Length: %d\\r\\n\" % len(data) header += \"Last-Modified: %s\\r\\n\" % self.date_time_string(last_modified) header += \"\".join(additional_header_strings) header += \"\\r\\n\" self.wfile.write(header.encode(\"utf-8\")) self.wfile.write(data). \n### Response: Sends a response to the client..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void injectContext(final Object targetObject) { final Class targetType = targetObject.getClass(); final ScopeData scopeData = scopeDataInspector.inspectClassScopesWithCache(targetType); final Targets targets = new Targets(targetObject, scopeData); // inject no context scopeResolver.forEachScope(madvocScope -> madvocScope.inject(targets)); // inject special case scopeResolver.forScope(ParamsScope.class, scope -> scope.inject(targets)); // inject servlet context final ServletContext servletContext = madvocController.getApplicationContext(); if (servletContext != null) { scopeResolver.forEachScope(madvocScope -> madvocScope.inject(servletContext, targets)); } } \n### Response:", "ground_truth": "Inject context into target.", "predict": "Injects the servlet context and all other scopes.."}, {"ID": 1507, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func Convert_v1alpha1_ServiceReference_To_auditregistration_ServiceReference(in *v1alpha1.ServiceReference, out *auditregistration.ServiceReference, s conversion.Scope) error { return autoConvert_v1alpha1_ServiceReference_To_auditregistration_ServiceReference(in, out, s) }. \n### Response: // Convert_v1alpha1_ServiceReference_To_auditregistration_ServiceReference is an autogenerated conversion function..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void registerPseudoClass(final Class<? extends PseudoClass> pseudoClassType) { PseudoClass pseudoClass; try { pseudoClass = ClassUtil.newInstance(pseudoClassType); } catch (Exception ex) { throw new CSSellyException(ex); } PSEUDO_CLASS_MAP.put(pseudoClass.getPseudoClassName(), pseudoClass); } \n### Response:", "ground_truth": "Registers pseudo class.", "predict": "// Registers a pseudo-class with the pseudo-class map."}, {"ID": 1508, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected function versionablePostSave() { /** * We'll save new versions on updating and first creation */ if ( ( $this->versioningEnabled === true && $this->updating && $this->isValidForVersioning() ) || ( $this->versioningEnabled === true && !$this->updating && !is_null($this->versionableDirtyData) && count($this->versionableDirtyData)) ) { // Save a new version $class = $this->getVersionClass(); $version = new $class(); $version->versionable_id = $this->getKey(); $version->versionable_type = get_class($this); $version->user_id = $this->getAuthUserId(); $version->model_data = serialize($this->getAttributes()); if (!empty( $this->reason )) { $version->reason = $this->reason; } $version->save(); $this->purgeOldVersions(); } }. \n### Response: Save a new version.\n@return void.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static PseudoClass lookupPseudoClass(final String pseudoClassName) { PseudoClass pseudoClass = PSEUDO_CLASS_MAP.get(pseudoClassName); if (pseudoClass == null) { throw new CSSellyException(\"Unsupported pseudo class: \" + pseudoClassName); } return pseudoClass; } \n### Response:", "ground_truth": "Lookups pseudo class for given pseudo class name.", "predict": "lookup PseudoClass method returns the supported pseudo class for the given pseudo class name."}, {"ID": 1509, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function copy($destination) { if (!$this->exists()) { throw new Exception('Source from copy does not exist: '.$this); } if ($destination instanceof Dir) { $destination = $destination->getFile($this->getName()); } elseif (!($destination instanceof File)) { throw new InvalidArgumentException('Invalid Argument. $destination must be file or dir'); } if (!$destination->getDirectory()->exists()) { throw new Exception('The directory from the destination file does not exist: '.$destination); } $ret = @copy((string) $this, (string) $destination); if (!$ret) { throw new Exception('PHP Error while copying '.$this.' onto '.$destination); } return $this; }. \n### Response: Copys the file to another file or into an directory\n\n@param File|Dir $fileDestination\n@chainable.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void invoke(final ActionRequest actionRequest) { if (executorService == null) { throw new MadvocException(\"No action is marked as async!\"); } final HttpServletRequest servletRequest = actionRequest.getHttpServletRequest(); log.debug(() -> \"Async call to: \" + actionRequest); final AsyncContext asyncContext = servletRequest.startAsync(); executorService.submit(() -> { try { actionRequest.invoke(); } catch (Exception ex) { log.error(\"Invoking async action path failed: \" , ExceptionUtil.unwrapThrowable(ex)); } finally { asyncContext.complete(); } }); } \n### Response:", "ground_truth": "Invokes an action asynchronously by submitting it to the thread pool.", "predict": "Invokes the specified action and starts an asynchronous execution.\n\n@param ActionRequest $actionRequest\n@return void."}, {"ID": 1510, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func loadBundle(id, path, workdir string) *bundle { return &bundle{ id: id, path: path, workDir: workdir, } }. \n### Response: // loadBundle loads an existing bundle from disk.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected String[] getAllBeanPropertyNames(final Class type, final boolean declared) { ClassDescriptor classDescriptor = ClassIntrospector.get().lookup(type); PropertyDescriptor[] propertyDescriptors = classDescriptor.getAllPropertyDescriptors(); ArrayList<String> names = new ArrayList<>(propertyDescriptors.length); for (PropertyDescriptor propertyDescriptor : propertyDescriptors) { MethodDescriptor getter = propertyDescriptor.getReadMethodDescriptor(); if (getter != null) { if (getter.matchDeclared(declared)) { names.add(propertyDescriptor.getName()); } } else if (includeFields) { FieldDescriptor field = propertyDescriptor.getFieldDescriptor(); if (field != null) { if (field.matchDeclared(declared)) { names.add(field.getName()); } } } } return names.toArray(new String[0]); } \n### Response:", "ground_truth": "Returns all bean property names.", "predict": "// getAllBeanPropertyNames returns a list of all Bean property names for the given class type and whether they are declared."}, {"ID": 1511, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void drawAttributedString(Graphics2D g, int x, int y, String text) { if (!ctx.getTextDecoration().isEmpty()) { AttributedString as = new AttributedString(text); as.addAttribute(TextAttribute.FONT, ctx.getFont()); if (ctx.getTextDecoration().contains(CSSProperty.TextDecoration.UNDERLINE)) as.addAttribute(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_ON); if (ctx.getTextDecoration().contains(CSSProperty.TextDecoration.LINE_THROUGH)) as.addAttribute(TextAttribute.STRIKETHROUGH, TextAttribute.STRIKETHROUGH_ON); g.drawString(as.getIterator(), x, y + getBaselineOffset()); } else g.drawString(text, x, y + getBaselineOffset()); }. \n### Response: Draws a single string with eventual attributes based on the current visual context..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void visit() { String[] properties = resolveProperties(source, declared); for (String name : properties) { if (name == null) { continue; } if (!rules.match(name, blacklist)) { continue; } Object value; String propertyName = name; if (isSourceMap) { propertyName = LEFT_SQ_BRACKET + name + RIGHT_SQ_BRACKET; } if (declared) { value = BeanUtil.declared.getProperty(source, propertyName); } else { value = BeanUtil.pojo.getProperty(source, propertyName); } if (value == null && ignoreNullValues) { continue; } if (value instanceof String && StringUtil.isEmpty((String) value)) { continue; } visitProperty(name, value); } } \n### Response:", "ground_truth": "Starts visiting properties.", "predict": "Visits all properties of the given source and declares the corresponding pojo or source map properties.."}, {"ID": 1512, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def insert(self, index, value): \"\"\"Insert an instance of User into the collection.\"\"\" self.check(value) self._user_list.insert(index, value). \n### Response: Insert an instance of User into the collection..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public boolean accept(final String propertyName, final String rule, final boolean include) { return propertyName.equals(rule); } \n### Response:", "ground_truth": "Compares property name to the rules.", "predict": "Method-level comment for `accept` method:\n```\n@Override\npublic boolean accept(final String propertyName, final String rule, final boolean include) {\n    // Return true if the given propertyName matches the given rule,\n    // otherwise return false.\n    return propertyName.equals(rule);\n}\n```"}, {"ID": 1513, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def show_inputs(self, varnames=None, nids=None, wslice=None, stream=sys.stdout): \"\"\" Print the input of the tasks to the given stream. Args: varnames: List of Abinit variables. If not None, only the variable in varnames are selected and printed. nids: List of node identifiers. By defaults all nodes are shown wslice: Slice object used to select works. stream: File-like object, Default: sys.stdout \"\"\" if varnames is not None: # Build dictionary varname --> [(task1, value), (task2, value), ...] varnames = [s.strip() for s in list_strings(varnames)] dlist = collections.defaultdict(list) for task in self.select_tasks(nids=nids, wslice=wslice): dstruct = task.input.structure.as_dict(fmt=\"abivars\") for vname in varnames: value = task.input.get(vname, None) if value is None: # maybe in structure? value = dstruct.get(vname, None) if value is not None: dlist[vname].append((task, value)) for vname in varnames: tv_list = dlist[vname] if not tv_list: stream.write(\"[%s]: Found 0 tasks with this variable\\n\" % vname) else: stream.write(\"[%s]: Found %s tasks with this variable\\n\" % (vname, len(tv_list))) for i, (task, value) in enumerate(tv_list): stream.write(\" %s --> %s\\n\" % (str(value), task)) stream.write(\"\\n\") else: lines = [] for task in self.select_tasks(nids=nids, wslice=wslice): s = task.make_input(with_header=True) # Add info on dependencies. if task.deps: s += \"\\n\\nDependencies:\\n\" + \"\\n\".join(str(dep) for dep in task.deps) else: s += \"\\n\\nDependencies: None\" lines.append(2*\"\\n\" + 80 * \"=\" + \"\\n\" + s + 2*\"\\n\") stream.writelines(lines). \n### Response: Print the input of the tasks to the given stream.\n\n        Args:\n            varnames:\n                List of Abinit variables. If not None, only the variable in varnames\n                are selected and printed.\n            nids:\n                List of node identifiers. By defaults all nodes are shown\n            wslice:\n                Slice object used to select works.\n            stream:\n                File-like object, Default: sys.stdout.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public MethodInjectionPoint[] resolve(final Class type) { // lookup methods ClassDescriptor cd = ClassIntrospector.get().lookup(type); List<MethodInjectionPoint> list = new ArrayList<>(); MethodDescriptor[] allMethods = cd.getAllMethodDescriptors(); for (MethodDescriptor methodDescriptor : allMethods) { Method method = methodDescriptor.getMethod(); if (ClassUtil.isBeanPropertySetter(method)) { // ignore setters continue; } if (method.getParameterTypes().length == 0) { // ignore methods with no argument continue; } BeanReferences[] references = referencesResolver.readAllReferencesFromAnnotation(method); if (references != null) { MethodInjectionPoint methodInjectionPoint = new MethodInjectionPoint(method, references); list.add(methodInjectionPoint); } } final MethodInjectionPoint[] methodInjectionPoints; if (list.isEmpty()) { methodInjectionPoints = MethodInjectionPoint.EMPTY; } else { methodInjectionPoints = list.toArray(new MethodInjectionPoint[0]); } return methodInjectionPoints; } \n### Response:", "ground_truth": "Resolve method injection points in given class.", "predict": "### Method-level comment\n\nThis method resolves method injection points for the given class. It first lookups all methods of the class and then iterates over them. For each method, it checks if it has any bean property setters or methods with no arguments. If so, it creates a new MethodInjectionPoint and adds it to the list. Finally, the method returns the list of method injection points.\n\n### Code\n```java\npublic MethodInjectionPoint[] resolve(final Class type) {\n    // lookup methods\n    ClassDescriptor cd = ClassIntrospector.get().lookup(type);\n    List<MethodInjectionPoint> list = new ArrayList<>();\n    MethodDescriptor[] allMethods = cd.getAllMethodDescriptors();\n    for (MethodDescriptor methodDescriptor : allMethods) {\n        Method method = methodDescriptor.getMethod();\n        if (ClassUtil.isBeanPropertySetter(method)) { // ignore setters\n            continue;\n        }\n        if (method.getParameterTypes().length == 0) { // ignore methods with no argument\n            continue;\n        }\n        BeanReferences[] references = referencesResolver.readAllReferencesFromAnnotation(method);\n        if (references!= null) {\n            MethodInjectionPoint methodInjectionPoint = new MethodInjectionPoint(method, references);\n            list.add(methodInjectionPoint);\n        }\n    }\n    final MethodInjectionPoint[] methodInjectionPoints;\n    if (list.isEmpty()) {\n        methodInjectionPoints = MethodInjectionPoint.EMPTY;\n    } else {\n        methodInjectionPoints = list.toArray(new MethodInjectionPoint[0]);\n    }\n    return methodInjectionPoints;\n}\n```"}, {"ID": 1514, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function setDefaultOption($keyOrPath, $value) { $keyOrPath = self::REQUEST_OPTIONS . '/' . $keyOrPath; $this->config->setPath($keyOrPath, $value); return $this; }. \n### Response: Set a default request option on the client that will be used as a default for each request\n\n@param string $keyOrPath request.options key (e.g. allow_redirects) or path to a nested key (e.g. headers/foo)\n@param mixed  $value     Value to set\n\n@return $this.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void readFilterConfigParameters(final FilterConfig filterConfig, final Object target, final String... parameters) { for (String parameter : parameters) { String value = filterConfig.getInitParameter(parameter); if (value != null) { BeanUtil.declared.setProperty(target, parameter, value); } } } \n### Response:", "ground_truth": "Reads filter config parameters and set into destination target.", "predict": "Read the configuration parameters for a filter and set any necessary properties for the target object.\n\n@param FilterConfig filterConfig The configuration for the filter\n@param Object target The target object to apply the filter to\n@param String... parameters The configuration parameters for the filter\n\n@return void."}, {"ID": 1515, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (c *MessageConnection) Close(closeCode int) error { // Call close on the base connection c.log(\"Closing websocket connection\", LogLevelDebug) err := c.Connection.Close(closeCode) if err != nil { return err } // Do not close the receiver here since it would send nil // Just let go c.log(\"Connection closed\", LogLevelInfo) return nil }. \n### Response: // Close the Message connection. Closes the send goroutine and all channels used\n// Except for the send channel, since it should be closed by the handler sending on it..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void sendBundleFile(final HttpServletResponse resp, final File bundleFile) throws IOException { OutputStream out = resp.getOutputStream(); FileInputStream fileInputStream = new FileInputStream(bundleFile); try { StreamUtil.copy(fileInputStream, out); } finally { StreamUtil.close(fileInputStream); } } \n### Response:", "ground_truth": "Outputs bundle file to the response.", "predict": "// Send the specified file as a response to the client. Copy the file from the input stream\n// to the output stream and close the input and output streams. This method does not return a\n// response, but it may return a status code to indicate the success or failure of the operation."}, {"ID": 1516, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private boolean isSoilAnalysisExist(ArrayList<HashMap> icSubArr) { for (HashMap icSubData : icSubArr) { if (!getValueOr(icSubData, \"slsc\", \"\").equals(\"\")) { return true; } } return false; }. \n### Response: To check if there is soil analysis info data existed in the experiment\n\n@param expData initial condition layer data array\n@return the boolean value for if soil analysis info exists.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public File lookupBundleFile(String bundleId) { if ((mirrors != null) && (!mirrors.isEmpty())) { String realBundleId = mirrors.remove(bundleId); if (realBundleId != null) { bundleId = realBundleId; } } return createBundleFile(bundleId); } \n### Response:", "ground_truth": "Lookups for bundle file.", "predict": "To find the real bundle ID for the given bundle ID.\n\n@param bundleId the bundle ID to look up\n@return the real bundle ID or null if not found.\n\n"}, {"ID": 1517, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func Extract(ctx context.Context) *zap.Logger { l, ok := ctx.Value(ctxMarkerKey).(*ctxLogger) if !ok || l == nil { return nullLogger } // Add grpc_ctxtags tags metadata until now. fields := TagsToFields(ctx) // Add zap fields added until now. fields = append(fields, l.fields...) return l.logger.With(fields...) }. \n### Response: // Extract takes the call-scoped Logger from grpc_zap middleware.\n//\n// It always returns a Logger that has all the grpc_ctxtags updated..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public File lookupGzipBundleFile(final File file) throws IOException { String path = file.getPath() + ZipUtil.GZIP_EXT; File gzipFile = new File(path); if (!gzipFile.exists()) { if (log.isDebugEnabled()) { log.debug(\"gzip bundle to \" + path); } ZipUtil.gzip(file); } return gzipFile; } \n### Response:", "ground_truth": "Locates gzipped version of bundle file. If gzip file\ndoes not exist, it will be created.", "predict": "// This method lookupGzipBundleFile(File file) throws IOException returns the gzip file associated with the given file.\n// It first calculates the path to the gzip file by adding the GZIP_EXT extension to the file path.\n// If the gzip file does not exist, it is created using ZipUtil.gzip() and then returned.\n// If a debug log is enabled, it is logged with the path to the gzip file.\n// This method is useful for compressing and decompressing files using the gzip compression format."}, {"ID": 1518, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function add($identifiable) { if ($identifiable instanceof Named) { return $this->set($identifiable->getId(), $identifiable); } $id = $identifiable instanceof Identifiable ? $identifiable->getId() : $identifiable; $title = $this->getTitleFromProvider($id); $resourceName = $identifiable instanceof AppliesToResource ? $identifiable->resourceName : $this->resourceName; return $this->set($id, $this->createItem($id, $title, $resourceName)); }. \n### Response: Add a identifiable object or just an id.\n\n@param mixed $identifiable\n\n@return $this.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public synchronized String registerBundle(final String contextPath, final String actionPath, final String tempBundleId, final String bundleContentType, final List<String> sources) { if (tempBundleId == null || sources.isEmpty()) { if (strategy == Strategy.ACTION_MANAGED) { // page does not include any resource source file actionBundles.put(actionPath, StringPool.EMPTY); } return null; } // create unique digest from the collected sources String[] sourcesArray = sources.toArray(new String[0]); for (int i = 0, sourcesArrayLength = sourcesArray.length; i < sourcesArrayLength; i++) { sourcesArray[i] = sourcesArray[i].trim().toLowerCase(); } if (sortResources) { Arrays.sort(sourcesArray); } StringBand sb = new StringBand(sourcesArray.length); for (String src : sourcesArray) { sb.append(src); } String sourcesString = sb.toString(); String bundleId = createDigest(sourcesString); bundleId += '.' + bundleContentType; // bundle appears for the first time, create the bundle if (strategy == Strategy.ACTION_MANAGED) { actionBundles.put(actionPath, bundleId); mirrors.put(tempBundleId, bundleId); } try { createBundle(contextPath, actionPath, bundleId, sources); } catch (IOException ioex) { throw new HtmlStaplerException(\"Can't create bundle\", ioex); } return bundleId; } \n### Response:", "ground_truth": "Registers new bundle that consist of provided list of source paths.\nReturns the real bundle id, as provided one is just a temporary bundle id.", "predict": "Registers a new bundle with the given context path, action path, temp bundle ID, bundle content type, and list of sources. If the temp bundle ID is null or the sources list is empty, returns null. Otherwise, creates a unique digest from the collected sources, adds it to the action bundle, and returns the resulting bundle ID. If the strategy is Strategy.ACTION_MANAGED, also adds the current temp bundle to the action bundle list and mirrors. If an error occurs during the registration process, throws an HtmlStaplerException with the error message."}, {"ID": 1519, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (e EXCEPINFO) String() string { var src, desc, hlp string if e.bstrSource == nil { src = \"<nil>\" } else { src = BstrToString(e.bstrSource) } if e.bstrDescription == nil { desc = \"<nil>\" } else { desc = BstrToString(e.bstrDescription) } if e.bstrHelpFile == nil { hlp = \"<nil>\" } else { hlp = BstrToString(e.bstrHelpFile) } return fmt.Sprintf( \"wCode: %#x, bstrSource: %v, bstrDescription: %v, bstrHelpFile: %v, dwHelpContext: %#x, scode: %#x\", e.wCode, src, desc, hlp, e.dwHelpContext, e.scode, ) }. \n### Response: // String convert EXCEPINFO to string..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected String createDigest(final String source) { final DigestEngine digestEngine = DigestEngine.sha256(); final byte[] bytes = digestEngine.digest(CharUtil.toSimpleByteArray(source)); String digest = Base32.encode(bytes); if (uniqueDigestKey != null) { digest += uniqueDigestKey; } return digest; } \n### Response:", "ground_truth": "Creates digest i.e. bundle id from given string.\nReturned digest must be filename safe, for all platforms.", "predict": "// Create SHA-256 digest of source string.."}, {"ID": 1520, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function setName( $value ) { if ( $value == $this->getName() ) { return; } $this->_values['name'] = (string) $value; $this->setModified(); }. \n### Response: Sets the localized name of the product.\n\n@param string $value Localized name of the product.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void createBundle(final String contextPath, final String actionPath, final String bundleId, final List<String>sources) throws IOException { final File bundleFile = createBundleFile(bundleId); if (bundleFile.exists()) { return; } StringBand sb = new StringBand(sources.size() * 2); for (String src : sources) { if (sb.length() != 0) { sb.append(StringPool.NEWLINE); } String content; if (isExternalResource(src)) { content = downloadString(src); } else { if (!downloadLocal) { // load local resource from file system String localFile = webRoot; if (src.startsWith(contextPath + '/')) { src = src.substring(contextPath.length()); } if (src.startsWith(StringPool.SLASH)) { // absolute path localFile += src; } else { // relative path localFile += '/' + FileNameUtil.getPathNoEndSeparator(actionPath) + '/' + src; } // trim link parameters, if any int qmndx = localFile.indexOf('?'); if (qmndx != -1) { localFile = localFile.substring(0, qmndx); } try { content = FileUtil.readString(localFile); } catch (IOException ioex) { if (notFoundExceptionEnabled) { throw ioex; } if (log.isWarnEnabled()) { log.warn(ioex.getMessage()); } content = null; } } else { // download local resource String localUrl = localAddressAndPort; if (src.startsWith(StringPool.SLASH)) { localUrl += contextPath + src; } else { localUrl += contextPath + FileNameUtil.getPath(actionPath) + '/' + src; } content = downloadString(localUrl); } if (content != null) { if (isCssResource(src)) { content = fixCssRelativeUrls(content, src); } } } if (content != null) { content = onResourceContent(content); sb.append(content); } } FileUtil.writeString(bundleFile, sb.toString()); if (log.isInfoEnabled()) { log.info(\"Bundle created: \" + bundleId); } } \n### Response:", "ground_truth": "Creates bundle file by loading resource files content. If bundle file already\nexist it will not be recreated!", "predict": "This method creates a bundle for a product in a web application. It takes in several parameters such as the context path, action path, bundle ID, and a list of sources for the product.\n\nThe method first creates a file for the bundle by calling `createBundleFile(bundleId)`. If the file already exists, it will return.\n\nNext, it loops through the list of sources and downloads the content of each source if it is an external resource or if it is a local resource. If the source is a local resource, it is loaded from the file system.\n\nIf the source is an external resource, it is downloaded using the `downloadString()` method. If the download is successful, it is stored in a string band.\n\nNext, it checks if the local file for the source exists. If it does not exist, it is created using the `webRoot` and the `FileNameUtil.getPathNoEndSeparator()` method.\n\nIf the local file exists, it is trimmed to remove any link parameters that may be present.\n\nNext, it checks if the CSS resource for the source exists. If it does, it is fixed using the `fixCssRelativeUrls()` method.\n\nFinally, the content is written to the file system using the `onResourceContent()` method.\n\nFinally, the method logs information about the bundle creation using the `log.info()` method."}, {"ID": 1521, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function getIssuesCount (ContextSpecificationInterface $filter = null) { $count = count($this->issues); foreach ($this->getChildren($filter) as $child) { $count += $child->getIssuesCount($filter); } return $count; }. \n### Response: Counts all issues recursively\n@param ContextSpecificationInterface $filter\n@return array.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public synchronized void reset() { if (strategy == Strategy.ACTION_MANAGED) { actionBundles.clear(); mirrors.clear(); } final FindFile ff = new FindFile(); ff.includeDirs(false); ff.searchPath(new File(bundleFolder, staplerPath)); File f; int count = 0; while ((f = ff.nextFile()) != null) { f.delete(); count++; } if (log.isInfoEnabled()) { log.info(\"reset: \" + count + \" bundle files deleted.\"); } } \n### Response:", "ground_truth": "Clears all settings and removes all created bundle files from file system.", "predict": "resets the state of the action management strategy and clears the actionBundles, mirrors, and any remaining bundle files in the bundle folder.\n@param Strategy.ACTION_MANAGED\n@return void."}, {"ID": 1522, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static List<Category> flattenCategories(List<Category> categoryLst) { if (categoryLst == null) { return null; } List<Category> flatCategoryLst = new ArrayList<>(); flattenCategories(flatCategoryLst, categoryLst); return flatCategoryLst; }. \n### Response: Puts all categories and their respective children recursively flattened into a list.\n\n@param categoryLst list of parent categories\n@return list of all parent categories and respective recursive children categories.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected String fixCssRelativeUrls(final String content, final String src) { final String path = FileNameUtil.getPath(src); final Matcher matcher = CSS_URL_PATTERN.matcher(content); final StringBuilder sb = new StringBuilder(content.length()); int start = 0; while (matcher.find()) { sb.append(content, start, matcher.start()); final String matchedUrl = StringUtil.removeChars(matcher.group(1), \"'\\\"\"); final String url; if (matchedUrl.startsWith(\"https://\") || matchedUrl.startsWith(\"http://\") || matchedUrl.startsWith(\"data:\")) { url = \"url('\" + matchedUrl + \"')\"; } else { url = fixRelativeUrl(matchedUrl, path); } sb.append(url); start = matcher.end(); } sb.append(content.substring(start)); return sb.toString(); } \n### Response:", "ground_truth": "Returns the content with all relative URLs fixed.", "predict": "Flattens a list of categories and returns a list of the parent categories and their respective recursive children.\n\n@param categoryLst list of parent categories\n@return list of all parent categories and respective recursive children categories."}, {"ID": 1523, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected function generate_message($subscriptionid, \\stdClass $eventobj) { try { $subscription = subscription_manager::get_subscription($subscriptionid); } catch (\\dml_exception $e) { // Race condition, someone deleted the subscription. return false; } $user = \\core_user::get_user($subscription->userid); if (empty($user)) { // User doesn't exist. Should never happen, nothing to do return. return false; } $context = \\context_user::instance($user->id, IGNORE_MISSING); if ($context === false) { // User context doesn't exist. Should never happen, nothing to do return. return false; } $template = $subscription->template; $template = $this->replace_placeholders($template, $subscription, $eventobj, $context); $htmlmessage = format_text($template, $subscription->templateformat, array('context' => $context)); $msgdata = new \\core\\message\\message(); $msgdata->courseid = empty($subscription->courseid) ? SITEID : $subscription->courseid; $msgdata->component = 'tool_monitor'; // Your component name. $msgdata->name = 'notification'; // This is the message name from messages.php. $msgdata->userfrom = \\core_user::get_noreply_user(); $msgdata->userto = $user; $msgdata->subject = $subscription->get_name($context); $msgdata->fullmessage = html_to_text($htmlmessage); $msgdata->fullmessageformat = FORMAT_PLAIN; $msgdata->fullmessagehtml = $htmlmessage; $msgdata->smallmessage = ''; $msgdata->notification = 1; // This is only set to 0 for personal messages between users. return $msgdata; }. \n### Response: Generates the message object for a give subscription and event.\n\n@param int $subscriptionid Subscription instance\n@param \\stdClass $eventobj Event data\n\n@return false|\\stdClass message object.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public DbSqlBuilder updateColumn(final Object entity, final String columnRef) { final Object value = BeanUtil.pojo.getProperty(entity, columnRef); return updateColumn(entity, columnRef, value); } \n### Response:", "ground_truth": "Reads property value and updates the DB.", "predict": "This method updates a column in a database table based on a given entity and a specified column reference.\n\n@param Object entity The entity to be updated.\n@param String columnRef The column reference to be updated.\n@return DbSqlBuilder The DbSqlBuilder object used to execute the update statement."}, {"ID": 1524, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static function canSetupContinue($systemRequirementsInfo) { $iterator = static::iterateThroughSystemRequirementsInfo($systemRequirementsInfo); foreach ($iterator as list($groupId, $moduleId, $moduleState)) { if ($moduleState === static::MODULE_STATUS_BLOCKS_SETUP) { return false; } } return true; }. \n### Response: Returns true if given module state is acceptable for setup process to continue.\n\n@param array $systemRequirementsInfo\n@return bool.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected static String createTableRefName(final Object entity) { Class type = entity.getClass(); type = (type == Class.class ? (Class) entity : type); return (type.getSimpleName() + '_'); } \n### Response:", "ground_truth": "Creates table reference name from entity type.\nAlways appends an underscore to reference name in order\nto circumvent SQL compatibility issues when entity class name\nequals to a reserved word.", "predict": "Creates a table reference name for the given entity.\n\n@param object $entity\n@return string."}, {"ID": 1525, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function setInis($inis) { foreach ($inis as $name => $value) { ini_set('session.' . $name, $value); } $this->inis = $inis + $this->inis; return $this; }. \n### Response: Set session configuration options\n\n@param array $inis\n@return $this.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public DbSession getDbSession() { log.debug(\"Requesting db TX manager session\"); final DbJtxTransaction jtx = (DbJtxTransaction) jtxTxManager.getTransaction(); if (jtx == null) { throw new DbSqlException( \"No transaction is in progress and DbSession can't be provided. \" + \"It seems that transaction manager is not used to begin a transaction.\"); } return jtx.requestResource(); } \n### Response:", "ground_truth": "Returns session from JTX transaction manager and started transaction.", "predict": "Get the database transaction manager session\n\n@return DbSession object\n@param DbJtxTransaction transaction manager"}, {"ID": 1526, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public boolean isMainMenu() { boolean bIsMainMenu = false; if (m_strMenu != null) { if (this.getTask() != null) if (HtmlConstants.MAIN_MENU_KEY.equalsIgnoreCase(this.getTask().getProperty(DBParams.MENU))) bIsMainMenu = true; if (m_strMenu.equalsIgnoreCase(HtmlConstants.MAIN_MENU_KEY)) bIsMainMenu = true; else if (((this.getProperty(DBParams.HOME) == null) || (this.getProperty(DBParams.HOME).length() == 0)) && (DBConstants.ANON_USER_ID.equals(this.getProperty(DBParams.USER_ID)))) bIsMainMenu = true; } return bIsMainMenu; }. \n### Response: Is this the user's main menu?\n@return true if this is the main menu..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected T[] convertToSingleElementArray(final Object value) { T[] singleElementArray = createArray(1); singleElementArray[0] = convertType(value); return singleElementArray; } \n### Response:", "ground_truth": "Creates an array with single element.", "predict": "This method converts an object to a single-element array of the specified type.\n\n@param value the object to be converted to a single-element array.\n@return a single-element array of the specified type containing the converted value."}, {"ID": 1527, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (s *receiveStream) Read(p []byte) (int, error) { s.mutex.Lock() completed, n, err := s.readImpl(p) s.mutex.Unlock() if completed { s.streamCompleted() } return n, err }. \n### Response: // Read implements io.Reader. It is not thread safe!.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public Map<String, String> parseSignatureForGenerics(final String signature, final boolean isInterface) { if (signature == null) { return Collections.emptyMap(); } final Map<String, String> genericsMap = new HashMap<>(); SignatureReader sr = new SignatureReader(signature); StringBuilder sb = new StringBuilder(); TraceSignatureVisitor v = new TraceSignatureVisitor(sb, isInterface) { String genericName; @Override public void visitFormalTypeParameter(final String name) { genericName = name; super.visitFormalTypeParameter(name); } @Override public void visitClassType(final String name) { if (genericName != null) { genericsMap.put(genericName, 'L' + name + ';'); genericName = null; } super.visitClassType(name); } }; sr.accept(v); return genericsMap; } \n### Response:", "ground_truth": "Parses signature for generic information and returns a map where key is generic name\nand value is raw type. Returns an empty map if signature does not define any generics.", "predict": "// This method parses the signature for generics in a given signature string and returns a map of class names to their generic parameters. It uses a TraceSignatureVisitor to traverse the signature and add the generic names to the map. This method is not thread-safe."}, {"ID": 1528, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void nextStage(final String stageName) { assertNotNull(\"Cannot move to a null stage\", stageName); execs.forEach(consumer(StageExec::preserve)); stage = stage.nextStage(stageName); prepare(); }. \n### Response: Moves to the next stage in the staged test run. @param stageName the next\nstage name.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public SetInjectionPoint[] resolve(final Class type, final boolean autowire) { ClassDescriptor cd = ClassIntrospector.get().lookup(type); List<SetInjectionPoint> list = new ArrayList<>(); PropertyDescriptor[] allProperties = cd.getAllPropertyDescriptors(); for (PropertyDescriptor propertyDescriptor : allProperties) { if (propertyDescriptor.isGetterOnly()) { continue; } Class propertyType = propertyDescriptor.getType(); if (!ClassUtil.isTypeOf(propertyType, Collection.class)) { continue; } MethodDescriptor writeMethodDescriptor = propertyDescriptor.getWriteMethodDescriptor(); FieldDescriptor fieldDescriptor = propertyDescriptor.getFieldDescriptor(); PetiteInject ref = null; if (writeMethodDescriptor != null) { ref = writeMethodDescriptor.getMethod().getAnnotation(PetiteInject.class); } if (ref == null && fieldDescriptor != null) { ref = fieldDescriptor.getField().getAnnotation(PetiteInject.class); } if ((!autowire) && (ref == null)) { continue; } list.add(new SetInjectionPoint(propertyDescriptor)); } SetInjectionPoint[] fields; if (list.isEmpty()) { fields = SetInjectionPoint.EMPTY; } else { fields = list.toArray(new SetInjectionPoint[0]); } return fields; } \n### Response:", "ground_truth": "Resolves all collections for given type.", "predict": "Resolves the specified type and determines if it can be autowired. @param type the type to resolve. @param autowire the flag indicating if the type should be autowired. @return a list of SetInjectionPoint objects representing the resolved type."}, {"ID": 1529, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected function validateResponse($response) { if (isset($response->code) && isset($response->message)) { if ($response->code == $this->validResponseCode && $response->message == $this->validResponseMessage ) { // serial keys are valid $valid = true; } else { // serial keys are not valid $this->setErrorMessage(\\OxidEsales\\Eshop\\Core\\Registry::getLang()->translateString('OLC_ERROR_SERIAL_NOT_VALID')); $valid = false; } } else { // validation result is unknown throw new \\OxidEsales\\Eshop\\Core\\Exception\\StandardException('OLC_ERROR_RESPONSE_NOT_VALID'); } return $valid; }. \n### Response: Performs a check of the response code and message.\n\n@param \\OxidEsales\\Eshop\\Core\\OnlineLicenseCheckResponse $response\n\n@throws \\OxidEsales\\Eshop\\Core\\Exception\\StandardException\n\n@return bool.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public boolean matchIgnoredPropertyTypes(final Class propertyType, final boolean excludeMaps, final boolean include) { if (!include) { return false; } if (propertyType != null) { if (!jsonSerializer.deep) { ClassDescriptor propertyTypeClassDescriptor = ClassIntrospector.get().lookup(propertyType); if (propertyTypeClassDescriptor.isArray()) { return false; } if (propertyTypeClassDescriptor.isCollection()) { return false; } if (excludeMaps) { if (propertyTypeClassDescriptor.isMap()) { return false; } } } // still not excluded, continue with excluded types and type names // + excluded types if (jsonSerializer.excludedTypes != null) { for (Class excludedType : jsonSerializer.excludedTypes) { if (ClassUtil.isTypeOf(propertyType, excludedType)) { return false; } } } // + exclude type names final String propertyTypeName = propertyType.getName(); if (jsonSerializer.excludedTypeNames != null) { for (String excludedTypeName : jsonSerializer.excludedTypeNames) { if (Wildcard.match(propertyTypeName, excludedTypeName)) { return false; } } } } return true; } \n### Response:", "ground_truth": "Matches property types that are ignored by default.", "predict": "This method matches the ignored property types in the given property type, exclude maps and all other types that are not excluded by the jsonSerializer. It uses the wildcard class wildcard.match() method to match the property type with the excluded types and type names.\n\n@param Class $propertyType\n\n@param boolean $excludeMaps\n\n@param boolean $include\n\n@return boolean."}, {"ID": 1530, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (d *ResourceDiff) getChange(key string) (getResult, getResult, bool) { old := d.get(strings.Split(key, \".\"), \"state\") var new getResult for p := range d.updatedKeys { if childAddrOf(key, p) { new = d.getExact(strings.Split(key, \".\"), \"newDiff\") return old, new, true } } new = d.get(strings.Split(key, \".\"), \"newDiff\") return old, new, false }. \n### Response: // getChange gets values from two different levels, designed for use in\n// diffChange, HasChange, and GetChange.\n//\n// This implementation differs from ResourceData's in the way that we first get\n// results from the exact levels for the new diff, then from state and diff as\n// per normal..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void openConnectionForQuery() { if (connection == null) { connection = connectionProvider.getConnection(); txActive = false; // txAction should already be false try { connection.setAutoCommit(true); } catch (SQLException sex) { throw new DbSqlException(\"Failed to open non-TX connection\", sex); } } } \n### Response:", "ground_truth": "Opens connection in auto-commit mode, if already not opened.", "predict": "// Open a connection for query.\n//\n// This method checks if a connection is already set, and if not, it creates a new one using the provided connection provider.\n// It also sets the transaction active flag to false, as txAction should already be false.\n// It then attempts to set the autoCommit to true, which should open the connection in a non-TX mode.\n// If the connection cannot be opened, it throws a SQLException with a message indicating the failure.\n//\n// This method is typically called by the main thread when starting a query.\n//\n// @param connection - the connection to use for the query.\n// @param txActive - the transaction active flag.\n// @return the connection object, or null if the connection could not be opened."}, {"ID": 1531, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def addup_fluxes(self): \"\"\"Add up the sum of the fluxes calculated so far. >>> from hydpy.models.test_v1 import * >>> parameterstep() >>> fluxes.fastaccess._q_sum = 1.0 >>> fluxes.q(2.0) >>> model.addup_fluxes() >>> fluxes.fastaccess._q_sum 3.0 \"\"\" fluxes = self.sequences.fluxes for flux in fluxes.numerics: sum_ = getattr(fluxes.fastaccess, '_%s_sum' % flux.name) sum_ += flux if flux.NDIM == 0: setattr(fluxes.fastaccess, '_%s_sum' % flux.name, sum_). \n### Response: Add up the sum of the fluxes calculated so far.\n\n        >>> from hydpy.models.test_v1 import *\n        >>> parameterstep()\n        >>> fluxes.fastaccess._q_sum = 1.0\n        >>> fluxes.q(2.0)\n        >>> model.addup_fluxes()\n        >>> fluxes.fastaccess._q_sum\n        3.0.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void openTx() { if (connection == null) { connection = connectionProvider.getConnection(); } txActive = true; try { connection.setAutoCommit(false); if (txMode.getIsolation() != DbTransactionMode.ISOLATION_DEFAULT) { connection.setTransactionIsolation(txMode.getIsolation()); } connection.setReadOnly(txMode.isReadOnly()); } catch (SQLException sex) { throw new DbSqlException(\"Open TX failed\", sex); } } \n### Response:", "ground_truth": "Opens a transaction.", "predict": "Open a transaction.\n\n        >>> protected void openTx()\n        >>> ^\n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>> \n        >>>"}, {"ID": 1532, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def __format_occurence(self, occurence): \"\"\" Formats the given occurence and returns the matching rich html text. :param occurence: Occurence to format. :type occurence: Occurence :return: Rich text. :rtype: unicode \"\"\" color = \"rgb({0}, {1}, {2})\" span_format = \"<span style=\\\"color: {0};\\\">{{0}}</span>\".format(color.format(self.__default_line_color.red(), self.__default_line_color.green(), self.__default_line_color.blue())) line = foundations.strings.to_string(occurence.text) start = span_format.format(line[:occurence.column]) pattern = \"<b>{0}</b>\".format(line[occurence.column:occurence.column + occurence.length]) end = span_format.format(line[occurence.column + occurence.length:]) return \"\".join((start, pattern, end)). \n### Response: Formats the given occurence and returns the matching rich html text.\n\n        :param occurence: Occurence to format.\n        :type occurence: Occurence\n        :return: Rich text.\n        :rtype: unicode.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void closeTx() { txActive = false; try { connection.setAutoCommit(true); } catch (SQLException sex) { throw new DbSqlException(\"Close TX failed\", sex); } } \n### Response:", "ground_truth": "Closes current transaction.", "predict": "```\n        protected void closeTx()\n        {\n            txActive = false;\n            try {\n                connection.setAutoCommit(true);\n            } catch (SQLException sex) {\n                throw new DbSqlException(\"Close TX failed\", sex);\n            }\n        }\n```"}, {"ID": 1533, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def eqdate(y): \"\"\" Like eq but compares datetime with y,m,d tuple. Also accepts magic string 'TODAY'. \"\"\" y = datetime.date.today() if y == 'TODAY' else datetime.date(*y) return lambda x: x == y. \n### Response: Like eq but compares datetime with y,m,d tuple.\n    Also accepts magic string 'TODAY'..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void commitTransaction() { log.debug(\"Committing transaction\"); assertTxIsActive(); try { connection.commit(); } catch (SQLException sex) { throw new DbSqlException(\"Commit TX failed\", sex); } finally { closeTx(); } } \n### Response:", "ground_truth": "Commit the current transaction, writing any unflushed changes to the database.\nTransaction mode is closed.", "predict": "Committing transaction.\n\nassertTxIsActive():\nThis method checks if the transaction is active by checking the status of the transaction object.\n\ntry-catch block:\nThis block of code is used to handle exceptions that may occur during the transaction commit process.\n\nfinally block:\nThis block of code is used to ensure that any resources that were acquired during the transaction are released.\n\nCloseTx():\nThis method is used to close the transaction object."}, {"ID": 1534, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def find_end(self, text, start_token, end_token, ignore_end_token=None): '''find the of a token. Returns the offset in the string immediately after the matching end_token''' if not text.startswith(start_token): raise MAVParseError(\"invalid token start\") offset = len(start_token) nesting = 1 while nesting > 0: idx1 = text[offset:].find(start_token) idx2 = text[offset:].find(end_token) # Check for false positives due to another similar token # For example, make sure idx2 points to the second '}' in ${{field: ${name}}} if ignore_end_token: combined_token = ignore_end_token + end_token if text[offset+idx2:offset+idx2+len(combined_token)] == combined_token: idx2 += len(ignore_end_token) if idx1 == -1 and idx2 == -1: raise MAVParseError(\"token nesting error\") if idx1 == -1 or idx1 > idx2: offset += idx2 + len(end_token) nesting -= 1 else: offset += idx1 + len(start_token) nesting += 1 return offset. \n### Response: find the of a token.\n        Returns the offset in the string immediately after the matching end_token.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void rollbackTransaction() { log.debug(\"Rolling-back transaction\"); assertTxIsActive(); try { connection.rollback(); } catch (SQLException sex) { throw new DbSqlException(\"Rollback TX failed\", sex); } finally { closeTx(); } } \n### Response:", "ground_truth": "Roll back the current transaction. Transaction mode is closed.", "predict": "rollbackTransaction():\n\nRollback the current transaction.\n\nThis method is typically used when a transaction is rolled back due to an error, such as a SQLException. It logs a debug message, asserts that the transaction is active, attempts to rollback the transaction using the connection object, and finally closes the transaction object."}, {"ID": 1535, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (d *Domain) ToStrArray() []string { var domains []string if len(d.Main) > 0 { domains = []string{d.Main} } return append(domains, d.SANs...) }. \n### Response: // ToStrArray convert a domain into an array of strings..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static Properties createFromFile(final File file) throws IOException { Properties prop = new Properties(); loadFromFile(prop, file); return prop; } \n### Response:", "ground_truth": "Create properties from the file.\n\n@param file properties file to load", "predict": "// CreateFromFile creates a new Properties object and loads it from a file.."}, {"ID": 1536, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (sb *storageBackend) AllStorageInstances() ([]StorageInstance, error) { storageInstances, err := sb.storageInstances(nil) if err != nil { return nil, errors.Trace(err) } out := make([]StorageInstance, len(storageInstances)) for i, s := range storageInstances { out[i] = s } return out, nil }. \n### Response: // AllStorageInstances lists all storage instances currently in state\n// for this Juju model..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static Properties createFromString(final String data) throws IOException { Properties p = new Properties(); loadFromString(p, data); return p; } \n### Response:", "ground_truth": "Creates properties from string.", "predict": "// CreateFromString creates a new Properties object from a string data.\n// It throws an IOException if the data could not be loaded.\n//\n// This method is useful for creating objects that require a string data,\n// such as a Configuration object.\n```\n```"}, {"ID": 1537, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def register_column(self, column, expr, deltas=None, checkpoints=None, odo_kwargs=None): \"\"\"Explicitly map a single bound column to a collection of blaze expressions. The expressions need to have ``timestamp`` and ``as_of`` columns. Parameters ---------- column : BoundColumn The pipeline dataset to map to the given expressions. expr : Expr The baseline values. deltas : Expr, optional The deltas for the data. checkpoints : Expr, optional The forward fill checkpoints for the data. odo_kwargs : dict, optional The keyword arguments to forward to the odo calls internally. See Also -------- :func:`zipline.pipeline.loaders.blaze.from_blaze` \"\"\" self._table_expressions[column] = ExprData( expr, deltas, checkpoints, odo_kwargs, ). \n### Response: Explicitly map a single bound column to a collection of blaze\n        expressions. The expressions need to have ``timestamp`` and ``as_of``\n        columns.\n\n        Parameters\n        ----------\n        column : BoundColumn\n            The pipeline dataset to map to the given expressions.\n        expr : Expr\n            The baseline values.\n        deltas : Expr, optional\n            The deltas for the data.\n        checkpoints : Expr, optional\n            The forward fill checkpoints for the data.\n        odo_kwargs : dict, optional\n            The keyword arguments to forward to the odo calls internally.\n\n        See Also\n        --------\n        :func:`zipline.pipeline.loaders.blaze.from_blaze`.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void loadFromString(final Properties p, final String data) throws IOException { try (ByteArrayInputStream is = new ByteArrayInputStream(data.getBytes(StringPool.ISO_8859_1))) { p.load(is); } } \n### Response:", "ground_truth": "Loads properties from string.", "predict": "Loads a string from a ByteArrayInputStream.\n\n"}, {"ID": 1538, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static function executeStoredProcOne($db, $proc, $params) { if (!is_array($params)) { $params = array($params); } $rs = self::executeStoredProc($db, $proc, $params); $row = $rs->getFirst(); return current($row); }. \n### Response: Execute a stored procedure that returns a single value\n\nConvenience method to execute a stored procedure that returns a single\nvalue.\n\n@param MDB2_Driver_Common $db The database connection.\n\n@param string $proc The name of the stored procedure to execute.\n\n@param mixed $params The parameters to pass to the stored procedure.\nUse an array for more than one parameter.\n\n@return mixed The value returned by the stored procedure.\n\n@throws SwatDBException.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static Properties subset(final Properties p, String prefix, final boolean stripPrefix) { if (StringUtil.isBlank(prefix)) { return p; } if (!prefix.endsWith(StringPool.DOT)) { prefix += '.'; } Properties result = new Properties(); int baseLen = prefix.length(); for (Object o : p.keySet()) { String key = (String) o; if (key.startsWith(prefix)) { result.setProperty(stripPrefix ? key.substring(baseLen) : key, p.getProperty(key)); } } return result; } \n### Response:", "ground_truth": "Creates new Properties object from the original one, by copying\nthose properties that have specified first part of the key name.\nPrefix may be optionally stripped during this process.\n\n@param p         source properties, from which new object will be created\n@param prefix    key names prefix\n\n@return subset properties", "predict": "subsets a properties object based on a prefix.\n\nThis method subsets the properties object based on a given prefix and removes the prefix from the beginning of the properties object.\n\n@param Properties $p The properties object to subset.\n\n@param String $prefix The prefix to use for subset.\n\n@param boolean $stripPrefix Whether to remove the prefix from the beginning of the properties object.\n\n@return The subsetted properties object.\n\n@throws IllegalArgumentException if the prefix is not a valid string.\n\nNote: This method is used to subset the properties object based on a given prefix, and it removes the prefix from the beginning of the properties object. If the prefix is not a valid string, an IllegalArgumentException will be thrown."}, {"ID": 1539, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (ns *Namespace) HasSuffix(s, suffix interface{}) (bool, error) { ss, err := cast.ToStringE(s) if err != nil { return false, err } sx, err := cast.ToStringE(suffix) if err != nil { return false, err } return _strings.HasSuffix(ss, sx), nil }. \n### Response: // HasSuffix tests whether the input s begins with suffix..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static Properties createFromClasspath(final String... rootTemplate) { Properties p = new Properties(); return loadFromClasspath(p, rootTemplate); } \n### Response:", "ground_truth": "Creates properties from classpath.", "predict": "// CreateFrom classpath returns a new Properties object with the specified root template.."}, {"ID": 1540, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def store_edges(self, edges): \"\"\"Store the temporary network edges input file with re-mapped Ids.\"\"\" with open(self.get_path(OslomRunner.TMP_EDGES_FILE), \"w\") as writer: for edge in edges: writer.write(\"{}\\t{}\\t{}\\n\".format( self.id_remapper.get_int_id(edge[0]), self.id_remapper.get_int_id(edge[1]), edge[2])). \n### Response: Store the temporary network edges input file with re-mapped Ids..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String getProperty(final Map map, final String key, final String defaultValue) { Object val = map.get(key); return (val instanceof String) ? (String) val : defaultValue; } \n### Response:", "ground_truth": "Returns String property from a map.\n@see #getProperty(java.util.Map, String)", "predict": "Method-level comment for `getProperty` method:\n```\n// Method to retrieve a value from a Map, returning the first instance of the specified key or defaultValue if no such key is found.\n```"}, {"ID": 1541, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private function getConfigFile($configFile, $environment = 'default') { // Normalize config file $configFile = $configFile ?: 'config'; // Check if there is an environment-specific config file $envConfigFile = $this->app->getConfigPath() . DIRECTORY_SEPARATOR . $configFile . '-' . $environment . '.php'; if (!is_file($envConfigFile)) { $envConfigFile = $this->app->getConfigPath() . DIRECTORY_SEPARATOR . $configFile . '.php'; } return $envConfigFile; }. \n### Response: Get the configuration file according to the given environment, if any.\n\n@param string $configFile\n@param string $environment\n\n@return string.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void resolveAllVariables(final Properties prop) { for (Object o : prop.keySet()) { String key = (String) o; String value = resolveProperty(prop, key); prop.setProperty(key, value); } } \n### Response:", "ground_truth": "Resolves all variables.", "predict": "Resolve all variables from a Properties object.\n\n@param Properties prop\n\n@return void."}, {"ID": 1542, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public final double min(final AbstractMeter meter) { checkIfMeterExists(meter); final AbstractUnivariateStatistic min = new Min(); final CollectionDoubleCollection doubleColl = new CollectionDoubleCollection(this.meterResults.get(meter)); return min.evaluate(doubleColl.toArray(), 0, doubleColl.toArray().length); }. \n### Response: Computes the minimum.\n\n@param meter the meter of the mean\n@return the minimum result value..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String resolveProperty(final Map map, final String key) { String value = getProperty(map, key); if (value == null) { return null; } value = stp.parse(value, macroName -> getProperty(map, macroName)); return value; } \n### Response:", "ground_truth": "Returns property with resolved variables.", "predict": "Resolves a property from a map.\n\n@param map the map of properties\n@return the resolved property value.."}, {"ID": 1543, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function getByEnabled($enabled = true) { $disabledPluggables = []; $enabledPluggables = []; $pluggables = $this->all(); // Iterate through each pluggable foreach ($pluggables as $pluggable) { if ($this->isEnabled($pluggable['slug'])) { $enabledPluggables[] = $pluggable; } else { $disabledPluggables[] = $pluggable; } } if ($enabled === true) { return $this->sortByOrder($enabledPluggables); } return $this->sortByOrder($disabledPluggables); }. \n### Response: Find a pluggable with enabled status given.\n\n@param bool $enabled\n\n@return array.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public String resolveScope(final Class type, final String methodName) { if (scopePattern == null) { return null; } String ctx = scopePattern; ctx = StringUtil.replace(ctx, JTXCTX_PATTERN_CLASS, type.getName()); ctx = StringUtil.replace(ctx, JTXCTX_PATTERN_METHOD, methodName); return ctx; } \n### Response:", "ground_truth": "Resolves tx scope from scope pattern.", "predict": "Resolve the scope of a class and method.\n\n@param Class $type\n\n@param String $methodName\n\n@return String."}, {"ID": 1544, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function saveMultiple(array $objects) { array_walk($objects, [$this, 'assertObjectInstance']); return $this->manager ->getDriver() ->inTransaction( function (Driver $driver, array $objects) { return array_map([$this, 'save'], $objects); }, $objects ); }. \n### Response: Save multiple objects into database\n\n@param array $objects\n\n@return array The ids of the given objects\n\n@throws \\PDOException if the transaction fails.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public synchronized JtxTransactionMode getTxMode(final Class type, final String methodName, final Class[] methodArgTypes, final String unique) { String signature = type.getName() + '#' + methodName + '%' + unique; JtxTransactionMode txMode = txmap.get(signature); if (txMode == null) { if (!txmap.containsKey(signature)) { final Method m; try { m = type.getMethod(methodName, methodArgTypes); } catch (NoSuchMethodException nsmex) { throw new ProxettaException(nsmex); } final TransactionAnnotationValues txAnn = readTransactionAnnotation(m); if (txAnn != null) { txMode = new JtxTransactionMode( txAnn.propagation(), txAnn.isolation(), txAnn.readOnly(), txAnn.timeout() ); } else { txMode = defaultTransactionMode; } txmap.put(signature, txMode); } } return txMode; } \n### Response:", "ground_truth": "Reads transaction mode from method annotation. Annotations are cached for better performances.\n@param type target class\n@param methodName target method name over which the transaction should be wrapped\n@param methodArgTypes types of arguments, used to find the method\n@param unique unique method fingerprint that contains return and arguments type information", "predict": "Retrieves the transaction mode for the specified type, method name, argument types, and unique identifier.\n\n@param type The class that defines the method to retrieve the transaction mode for.\n\n@param methodName The name of the method to retrieve the transaction mode for.\n\n@param methodArgTypes The argument types of the method to retrieve the transaction mode for.\n\n@param unique The unique identifier for the transaction mode to retrieve.\n\n@return The transaction mode for the specified type, method name, argument types, and unique identifier.\n\n@throws ProxettaException If the transaction mode cannot be retrieved.\n\n@synchronized ensures that only one thread can access this method at a time."}, {"ID": 1545, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static boolean delQuota(ZooKeeper zk, String path, boolean bytes, boolean numNodes) throws KeeperException, IOException, InterruptedException { String parentPath = Quotas.quotaZookeeper + path; String quotaPath = Quotas.quotaZookeeper + path + \"/\" + Quotas.limitNode; if (zk.exists(quotaPath, false) == null) { System.out.println(\"Quota does not exist for \" + path); return true; } byte[] data = null; try { data = zk.getData(quotaPath, false, new Stat()); } catch (KeeperException.NoNodeException ne) { System.err.println(\"quota does not exist for \" + path); return true; } StatsTrack strack = new StatsTrack(new String(data)); if (bytes && !numNodes) { strack.setBytes(-1L); zk.setData(quotaPath, strack.toString().getBytes(), -1); } else if (!bytes && numNodes) { strack.setCount(-1); zk.setData(quotaPath, strack.toString().getBytes(), -1); } else if (bytes && numNodes) { // delete till you can find a node with more than // one child List<String> children = zk.getChildren(parentPath, false); // / delete the direct children first for (String child : children) { zk.delete(parentPath + \"/\" + child, -1); } // cut the tree till their is more than one child trimProcQuotas(zk, parentPath); } return true; }. \n### Response: this method deletes quota for a node.\n\n@param zk\nthe zookeeper client\n@param path\nthe path to delete quota for\n@param bytes\ntrue if number of bytes needs to be unset\n@param numNodes\ntrue if number of nodes needs to be unset\n@return true if quota deletion is successful\n@throws KeeperException\n@throws IOException\n@throws InterruptedException.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @SuppressWarnings( {\"unchecked\"}) public void registerAnnotations(final Class<? extends Annotation>[] annotations) { this.annotations = annotations; this.annotationParsers = new AnnotationParser[annotations.length]; for (int i = 0; i < annotations.length; i++) { annotationParsers[i] = TransactionAnnotationValues.parserFor(annotations[i]); } } \n### Response:", "ground_truth": "Registers new TX annotations.", "predict": "This method registers annotations for a specific class.\n\n@param annotations\nthe list of annotations to register\n@return void\n@throws InterruptedException.\n\nNote: This code is not using any specific zookeeper library or any other library, it is just a simple method to register annotations for a specific class."}, {"ID": 1546, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def call_antlr4(arg): \"calls antlr4 on grammar file\" # pylint: disable=unused-argument, unused-variable antlr_path = os.path.join(ROOT_DIR, \"java\", \"antlr-4.7-complete.jar\") classpath = os.pathsep.join([\".\", \"{:s}\".format(antlr_path), \"$CLASSPATH\"]) generated = os.path.join(ROOT_DIR, 'src', 'pymoca', 'generated') cmd = \"java -Xmx500M -cp \\\"{classpath:s}\\\" org.antlr.v4.Tool {arg:s}\" \\ \" -o {generated:s} -visitor -Dlanguage=Python3\".format(**locals()) print(cmd) proc = subprocess.Popen(cmd.split(), cwd=os.path.join(ROOT_DIR, 'src', 'pymoca')) proc.communicate() with open(os.path.join(generated, '__init__.py'), 'w') as fid: fid.write(''). \n### Response: calls antlr4 on grammar file.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected TransactionAnnotationValues readTransactionAnnotation(final Method method) { for (AnnotationParser annotationParser : annotationParsers) { TransactionAnnotationValues tad = TransactionAnnotationValues.of(annotationParser, method); if (tad != null) { return tad; } } return null; } \n### Response:", "ground_truth": "Finds TX annotation.", "predict": "This method reads the transaction annotation for a specific method. It iterates through all the annotationParsers associated with the given method and returns the TransactionAnnotationValues if it finds any. If no transaction annotation is found, it returns null."}, {"ID": 1547, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void clear(final short vbucket) { final Queue<BufferedEvent> queue = partitionQueues.get(vbucket); synchronized (queue) { LOGGER.debug(\"Clearing stream event buffer for partition {}\", vbucket); for (BufferedEvent bufferedEvent : queue) { bufferedEvent.discard(); } queue.clear(); } }. \n### Response: Discard all buffered events in the given vbucket..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public boolean accept(final Node node) { // match element name with node name if (!matchElement(node)) { return false; } // match attributes int totalSelectors = selectorsCount(); for (int i = 0; i < totalSelectors; i++) { Selector selector = getSelector(i); // just attr name existence switch (selector.getType()) { case ATTRIBUTE: if (!((AttributeSelector) selector).accept(node)) { return false; } break; case PSEUDO_CLASS: if (!((PseudoClassSelector) selector).accept(node)) { return false; } break; case PSEUDO_FUNCTION: if (!((PseudoFunctionSelector) selector).accept(node)) { return false; } break; } } return true; } \n### Response:", "ground_truth": "Accepts single node.", "predict": "This method accepts a node by matching it with the specified selectors based on its element name and attributes. It then iterates through the selectors and checks if each selector supports the accept method for the corresponding type. If any selector does not support the accept method, it returns false. Finally, it returns true if all selectors support the accept method and the node is accepted."}, {"ID": 1548, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function squareCenterCrop(array $options = []) { if (empty($options['size'])) { throw new \\InvalidArgumentException(__d('imagine', 'You have to pass size in the options!')); } $imageSize = $this->getImageSize($this->_image); $width = $imageSize[0]; $height = $imageSize[1]; if ($width > $height) { $x2 = $height; $y2 = $height; $x = ($width - $height) / 2; $y = 0; } else { $x2 = $width; $y2 = $width; $x = 0; $y = ($height - $width) / 2; } $this->_image->crop(new \\Imagine\\Image\\Point($x, $y), new \\Imagine\\Image\\Box($x2, $y2)); $this->_image->resize(new \\Imagine\\Image\\Box($options['size'], $options['size'])); return $this; }. \n### Response: Crops an image based on its widht or height, crops it to a square and resizes it to the given size\n\n@param array Array of options for processing the image.\n@throws \\InvalidArgumentException\n@return $this.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected boolean matchElement(final Node node) { if (node.getNodeType() != Node.NodeType.ELEMENT) { return false; } String element = getElement(); String nodeName = node.getNodeName(); return element.equals(StringPool.STAR) || element.equals(nodeName); } \n### Response:", "ground_truth": "Matches element to css selector. All non-element types are ignored.", "predict": "matches the element in the given node"}, {"ID": 1549, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def _wrap_callback_errors(callback, message): \"\"\"Wraps a user callback so that if an exception occurs the message is nacked. Args: callback (Callable[None, Message]): The user callback. message (~Message): The Pub/Sub message. \"\"\" try: callback(message) except Exception: # Note: the likelihood of this failing is extremely low. This just adds # a message to a queue, so if this doesn't work the world is in an # unrecoverable state and this thread should just bail. _LOGGER.exception( \"Top-level exception occurred in callback while processing a \" \"message\" ) message.nack(). \n### Response: Wraps a user callback so that if an exception occurs the message is\n    nacked.\n\n    Args:\n        callback (Callable[None, Message]): The user callback.\n        message (~Message): The Pub/Sub message..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public boolean accept(final List<Node> currentResults, final Node node, final int index) { // match attributes int totalSelectors = selectorsCount(); for (int i = 0; i < totalSelectors; i++) { Selector selector = getSelector(i); // just attr name existence switch (selector.getType()) { case PSEUDO_FUNCTION: if (!((PseudoFunctionSelector) selector).accept(currentResults, node, index)) { return false; } break; case PSEUDO_CLASS: if (!((PseudoClassSelector) selector).accept(currentResults, node, index)) { return false; } break; default: } } return true; } \n### Response:", "ground_truth": "Accepts node within current results.", "predict": "Method-level comment:\n\nThis method accepts a list of nodes, a node, and an index, and checks if the node is a pseudo-class or a pseudo-function by matching the selector's type. It then returns true or false based on the selector's type."}, {"ID": 1550, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (r *AutoVXLANCfgResource) ReadAll() ([]core.State, error) { return r.StateDriver.ReadAllState(vXLANResourceConfigPathPrefix, r, json.Unmarshal) }. \n### Response: // ReadAll reads all the state from the resource..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected String unescape(final String value) { if (value.indexOf('\\\\') == -1) { return value; } return StringUtil.remove(value, '\\\\'); } \n### Response:", "ground_truth": "Unescapes CSS string by removing all backslash characters from it.", "predict": "// unescape removes backslashes from a string.."}, {"ID": 1551, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private static void overwriteMembersIfPresent( List<MemberDefinition> list, List<MemberDefinition> newMembers) { for (MemberDefinition newMember : newMembers) { for (MemberDefinition member : list) { if (member.name.getString().equals(newMember.name.getString())) { list.remove(member); break; } } list.add(newMember); } }. \n### Response: Appends a list of new MemberDefinitions to the end of a list and removes any previous\nMemberDefinition in the list which has the same name as the new member..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private String[] buildJrePackages(final int javaVersionNumber) { final ArrayList<String> packages = new ArrayList<>(); switch (javaVersionNumber) { case 9: case 8: case 7: case 6: case 5: // in Java1.5, the apache stuff moved packages.add(\"com.sun.org.apache\"); // fall through... case 4: if (javaVersionNumber == 4) { packages.add(\"org.apache.crimson\"); packages.add(\"org.apache.xalan\"); packages.add(\"org.apache.xml\"); packages.add(\"org.apache.xpath\"); } packages.add(\"org.ietf.jgss\"); packages.add(\"org.w3c.dom\"); packages.add(\"org.xml.sax\"); // fall through... case 3: packages.add(\"org.omg\"); packages.add(\"com.sun.corba\"); packages.add(\"com.sun.jndi\"); packages.add(\"com.sun.media\"); packages.add(\"com.sun.naming\"); packages.add(\"com.sun.org.omg\"); packages.add(\"com.sun.rmi\"); packages.add(\"sunw.io\"); packages.add(\"sunw.util\"); // fall through... case 2: packages.add(\"com.sun.java\"); packages.add(\"com.sun.image\"); // fall through... case 1: default: // core stuff packages.add(\"sun\"); packages.add(\"java\"); packages.add(\"javax\"); break; } return packages.toArray(new String[0]); } \n### Response:", "ground_truth": "Builds a set of java core packages.", "predict": "This method builds the Java Runtime Packages for the specified Java version number. It uses a switch statement to handle different versions of Java and adds the necessary packages to the list. The method returns an array of strings containing the list of packages."}, {"ID": 1552, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def disconnect(self): \"\"\"Disconnect a connected client from the broker.\"\"\" self._state_mutex.acquire() self._state = mqtt_cs_disconnecting self._state_mutex.release() self._backoffCore.stopStableConnectionTimer() if self._sock is None and self._ssl is None: return MQTT_ERR_NO_CONN return self._send_disconnect(). \n### Response: Disconnect a connected client from the broker..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected <T extends Node> T cloneTo(final T dest) { // dest.nodeValue = nodeValue; // already in clone implementations! dest.parentNode = parentNode; if (attributes != null) { dest.attributes = new ArrayList<>(attributes.size()); for (int i = 0, attributesSize = attributes.size(); i < attributesSize; i++) { Attribute attr = attributes.get(i); dest.attributes.add(attr.clone()); } } if (childNodes != null) { dest.childNodes = new ArrayList<>(childNodes.size()); for (int i = 0, childNodesSize = childNodes.size(); i < childNodesSize; i++) { Node child = childNodes.get(i); Node childClone = child.clone(); childClone.parentNode = dest; // fix parent! dest.childNodes.add(childClone); } } return dest; } \n### Response:", "ground_truth": "Copies all non-final values to the empty cloned object.\nCache-related values are not copied.", "predict": "This method cloneTo() is used to clone a Node object to another object. It first sets the nodeValue of the destination object to the value of the nodeValue of the original object. It then sets the parentNode of the destination object to the parentNode of the original object. It also creates an ArrayList of attributes of the destination object and adds all the clone of attributes of the original object. It also creates an ArrayList of childNodes of the destination object and adds all the clone of childNodes of the original object. Finally, it returns the destination object."}, {"ID": 1553, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void read (byte[] bytes, long storageIndex) throws IOException { long filePos = storageIndex / mFileSize; int storageOffset = (int) (storageIndex % mFileSize); byte[] cachedBytes = mCache.getIfPresent(filePos); File fileAtPos = new File(mBaseDir + File.separator + filePos); if (!fileAtPos.exists()) { fileAtPos.createNewFile(); cachedBytes = new byte[mFileSize]; Files.write(fileAtPos.toPath(), cachedBytes); } else if (cachedBytes == null) { cachedBytes = Files.readAllBytes(fileAtPos.toPath()); mCache.put((int) filePos, cachedBytes); } if ((storageOffset + bytes.length) > mFileSize) { System.arraycopy(cachedBytes, storageOffset, bytes, 0, mFileSize - storageOffset); byte[] nextStep = new byte[bytes.length - (mFileSize - storageOffset)]; read(nextStep, storageIndex + (mFileSize - storageOffset)); System.arraycopy(nextStep, 0, bytes, mFileSize - storageOffset, nextStep.length); } else { System.arraycopy(cachedBytes, storageOffset, bytes, 0, bytes.length); } }. \n### Response: Reading bytes from file\n\n@param bytes\n@param storageIndex\n@throws IOException.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void detachFromParent() { if (parentNode == null) { return; } if (parentNode.childNodes != null) { parentNode.childNodes.remove(siblingIndex); parentNode.reindexChildren(); } parentNode = null; } \n### Response:", "ground_truth": "Removes this node from DOM tree.", "predict": "Detaching from the parent node\n\n@return True if the parentNode was successfully detached, false otherwise.\n\n@param parentNode The parent node to detach from.\n\n@param siblingIndex The index of the next sibling node to detach from.\n\n@throws parentNodeException If any errors occur during the detach process."}, {"ID": 1554, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func newCrawlErrorMessage(ctx *URLContext, msg string, kind CrawlErrorKind) *CrawlError { return &CrawlError{ctx, nil, kind, msg} }. \n### Response: // Create a new CrawlError with the specified message..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void addChild(final Node... nodes) { if (nodes.length == 0) { return; // nothing to add } for (Node node : nodes) { node.detachFromParent(); node.parentNode = this; initChildNodes(node); childNodes.add(node); } reindexChildrenOnAdd(nodes.length); } \n### Response:", "ground_truth": "Appends several child nodes at once.\nReindex is done only once, after all children are added.", "predict": "// Add all child nodes to the current node.."}, {"ID": 1555, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def move_item_behind(self, item_id, assessment_part_id, reference_id): \"\"\"Reorders items in an assessment part by moving the specified item behind of a reference item. arg: item_id (osid.id.Id): ``Id`` of the ``Item`` arg: assessment_part_id (osid.id.Id): ``Id of the AssessmentPartId`` arg: reference_id (osid.id.Id): ``Id`` of the reference ``Item`` raise: NotFound - ``item_id`` or ``reference_id`` ``not found in assessment_part_id`` raise: NullArgument - ``item_id, reference_id`` or ``assessment_part_id`` is ``null`` raise: OperationFailed - unable to complete request raise: PermissionDenied - authorization fauilure *compliance: mandatory -- This method must be implemented.* \"\"\" if (not isinstance(assessment_part_id, ABCId) and assessment_part_id.get_identifier_namespace() != 'assessment_authoring.AssessmentPart'): raise errors.InvalidArgument('the argument is not a valid OSID Id') assessment_part_map, collection = self._get_assessment_part_collection(assessment_part_id) assessment_part_map['itemIds'] = move_id_behind(item_id, reference_id, assessment_part_map['itemIds']) collection.save(assessment_part_map). \n### Response: Reorders items in an assessment part by moving the specified item behind of a reference item.\n\n        arg:    item_id (osid.id.Id): ``Id`` of the ``Item``\n        arg:    assessment_part_id (osid.id.Id): ``Id of the\n                AssessmentPartId``\n        arg:    reference_id (osid.id.Id): ``Id`` of the reference\n                ``Item``\n        raise:  NotFound - ``item_id`` or ``reference_id``  ``not found\n                in assessment_part_id``\n        raise:  NullArgument - ``item_id, reference_id`` or\n                ``assessment_part_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization fauilure\n        *compliance: mandatory -- This method must be implemented.*.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void insertChild(final Node node, final int index) { node.detachFromParent(); node.parentNode = this; try { initChildNodes(node); childNodes.add(index, node); } catch (IndexOutOfBoundsException ignore) { throw new LagartoDOMException(\"Invalid node index: \" + index); } reindexChildren(); } \n### Response:", "ground_truth": "Inserts node at given index.", "predict": "This method inserts a child node at the specified index in the parent node.\n\n        arg:    node (Node): the node to insert the child\n                node at the specified index\n        arg:    index (int): the index of the child node to insert\n        *compliance: mandatory -- This method must be implemented.*."}, {"ID": 1556, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func Verbose(levelSet int, format string, args ...interface{}) { if Opts.Verbose >= levelSet { fmt.Fprintf(os.Stderr, \"[%s] \", color.White(progname)) fmt.Fprintf(os.Stderr, format+\"\\n\", args...) } }. \n### Response: // verbose will print info to stderr according to the verbose level setting.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void insertBefore(final Node newChild, final Node refChild) { int siblingIndex = refChild.getSiblingIndex(); refChild.parentNode.insertChild(newChild, siblingIndex); } \n### Response:", "ground_truth": "Inserts node before provided node.", "predict": "// This method inserts a new child node into the specified refChild, relative to its parent node, at the specified sibling index."}, {"ID": 1557, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function setHost($h) { $this->_host = $h; // clear the temporary result cache and last result $this->_lastResult = null; unset($this->_resultCache); $this->_resultCache = array(); return $this; }. \n### Response: Sets the target host for SNMP queries.\n\n@param string $h The target host for SNMP queries.\n@return \\Cityware\\Snmp\\SNMP An instance of $this (for fluent interfaces).\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void insertBefore(final Node[] newChilds, final Node refChild) { if (newChilds.length == 0) { return; } int siblingIndex = refChild.getSiblingIndex(); refChild.parentNode.insertChild(newChilds, siblingIndex); } \n### Response:", "ground_truth": "Inserts several child nodes before provided node.", "predict": "insertBefore adds a new child node to a parent node, replacing the existing child node at the specified index.\n\n@param Node[] newChilds The new child nodes to insert before the existing child node.\n@param Node refChild The existing child node to be replaced.\n@return void An empty method.\n\nNote: This method is used in the CitywareSnmp library to insert a new child node before an existing child node in a parent node."}, {"ID": 1558, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def to_bytes(self, exclude=tuple(), disable=None, **kwargs): \"\"\"Serialize the current state to a binary string. exclude (list): Names of components or serialization fields to exclude. RETURNS (bytes): The serialized form of the `Language` object. DOCS: https://spacy.io/api/language#to_bytes \"\"\" if disable is not None: deprecation_warning(Warnings.W014) exclude = disable serializers = OrderedDict() serializers[\"vocab\"] = lambda: self.vocab.to_bytes() serializers[\"tokenizer\"] = lambda: self.tokenizer.to_bytes(exclude=[\"vocab\"]) serializers[\"meta.json\"] = lambda: srsly.json_dumps(self.meta) for name, proc in self.pipeline: if name in exclude: continue if not hasattr(proc, \"to_bytes\"): continue serializers[name] = lambda proc=proc: proc.to_bytes(exclude=[\"vocab\"]) exclude = util.get_serialization_exclude(serializers, exclude, kwargs) return util.to_bytes(serializers, exclude). \n### Response: Serialize the current state to a binary string.\n\n        exclude (list): Names of components or serialization fields to exclude.\n        RETURNS (bytes): The serialized form of the `Language` object.\n\n        DOCS: https://spacy.io/api/language#to_bytes.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void insertAfter(final Node newChild, final Node refChild) { int siblingIndex = refChild.getSiblingIndex() + 1; if (siblingIndex == refChild.parentNode.getChildNodesCount()) { refChild.parentNode.addChild(newChild); } else { refChild.parentNode.insertChild(newChild, siblingIndex); } } \n### Response:", "ground_truth": "Inserts node after provided node.", "predict": "Inserts the new child node after the specified `refChild` in the parent node.\n\n        siblingIndex (int): The index of the next sibling node of `refChild`.\n        refChild.parentNode.getChildNodesCount(): The number of child nodes of the parent node.\n        refChild.parentNode.addChild(newChild): Adds the new child node to the end of the child nodes of the parent node.\n        refChild.parentNode.insertChild(newChild, siblingIndex): Inserts the new child node at the specified index in the child nodes of the parent node.\n\n        DOCS: https://spacy.io/api/language#insert_after."}, {"ID": 1559, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function nextMiddleware() { // Get the next middleware var next = _mappings[middleware.names[middleware.index++]]; // If there is middleware, then invoke it, binding request if ( next ) $injector.invoke(next, request); }. \n### Response: Attempt to invoke the next middleware\n\n@returns {void}.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void insertAfter(final Node[] newChilds, final Node refChild) { if (newChilds.length == 0) { return; } int siblingIndex = refChild.getSiblingIndex() + 1; if (siblingIndex == refChild.parentNode.getChildNodesCount()) { refChild.parentNode.addChild(newChilds); } else { refChild.parentNode.insertChild(newChilds, siblingIndex); } } \n### Response:", "ground_truth": "Inserts several child nodes after referent node.", "predict": "This method inserts a new child node after the specified child node of the given parent node.\n\n@param {Node} newChilds The new child nodes to insert.\n@param {Node} refChild The target child node to insert the new child node after.\n@return {void}."}, {"ID": 1560, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function getSidForWidget() { $oSession = $this->getSession(); $sid = null; if (!$oSession->isActualSidInCookie()) { $sid = $oSession->getId(); } return $sid; }. \n### Response: Returns session ID, but only in case it is needed to be included for widget calls.\nThis basically happens on session change,\nwhen session cookie is not equals to the actual session ID.\n\n@return string|null.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void removeAllChilds() { List<Node> removedNodes = childNodes; childNodes = null; childElementNodes = null; childElementNodesCount = 0; if (removedNodes != null) { for (int i = 0, removedNodesSize = removedNodes.size(); i < removedNodesSize; i++) { Node removedNode = removedNodes.get(i); removedNode.detachFromParent(); } } } \n### Response:", "ground_truth": "Removes all child nodes. Each child node will be detached from this parent.", "predict": "Removes all child nodes from the specified parent node.\n\n@param Node the parent node to remove child nodes from.\n@return true if all child nodes were removed, false otherwise.\n@since Java 5."}, {"ID": 1561, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def is_any_down(self): \"\"\"Is any button depressed?\"\"\" for key in range(len(self.current_state.key_states)): if self.is_down(key): return True return False. \n### Response: Is any button depressed?.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public Node findChildNodeWithName(final String name) { if (childNodes == null) { return null; } for (final Node childNode : childNodes) { if (childNode.getNodeName().equals(name)) { return childNode; } } return null; } \n### Response:", "ground_truth": "Finds the first child node with given node name.", "predict": "Finds the first child node with the specified name in the given node."}, {"ID": 1562, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private function connection_result($errno = null) { static $countfailures = array(); $sess = sesskey(); if (!array_key_exists($sess, $countfailures)) { $countfailures[$sess] = 0; } if ($errno !== null) { if ($errno == 0) { // reset count of failed connections $countfailures[$sess] = 0; } else if ($errno == 7 /*CURLE_COULDNT_CONNECT*/ || $errno == 9 /*CURLE_REMOTE_ACCESS_DENIED*/) { // problems with server $countfailures[$sess]++; } } return ($countfailures[$sess] < 3); }. \n### Response: Counts the number of failed connections.\n\nIf we received the connection timeout more than 3 times in a row, we don't attemt to\nconnect to the server any more during this request.\n\nThis function is used by {@link repository_equella::sync_reference()} that\nsynchronises the file size of referenced files.\n\n@param int $errno omit if we just want to know the return value, the last curl_errno otherwise\n@return bool true if we had less than 3 failed connections, false if no more connections\nattempts recommended.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public Node[] filterChildNodes(final Predicate<Node> nodePredicate) { if (childNodes == null) { return new Node[0]; } return childNodes.stream() .filter(nodePredicate) .toArray(Node[]::new); } \n### Response:", "ground_truth": "Filters child nodes.", "predict": "Filter all child nodes of a given node and return an array of them.\n\nThis method is used to filter out specific child nodes based on a given node predicate. It is often used in conjunction with other methods, such as {@link Node#appendChild(Node)}, to modify the content of a node.\n\n@param Predicate<Node> nodePredicate the node predicate to filter the child nodes by\n@return an array of the filtered child nodes\n\nNote: This method is part of the Node.js library and is used to filter and manipulate child nodes of a Node.js node."}, {"ID": 1563, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function set_status($status = self::STATUS_ACTIVE) { $this->statusactive = $status == static::STATUS_ACTIVE; $this->statussuspended = $status == static::STATUS_SUSPENDED; $this->statusnotcurrent = $status == static::STATUS_NOT_CURRENT; return $this; }. \n### Response: Status setter.\n\n@param int $status The user enrolment status representing one of this class' STATUS_* constants.\n@return status_field This class' instance. Useful for chaining..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public boolean check() { if (childNodes == null) { return true; } // children int siblingElementIndex = 0; for (int i = 0, childNodesSize = childNodes.size(); i < childNodesSize; i++) { Node childNode = childNodes.get(i); if (childNode.siblingIndex != i) { return false; } if (childNode.getNodeType() == NodeType.ELEMENT) { if (childNode.siblingElementIndex != siblingElementIndex) { return false; } siblingElementIndex++; } } if (childElementNodesCount != siblingElementIndex) { return false; } // child element nodes if (childElementNodes != null) { if (childElementNodes.length != childElementNodesCount) { return false; } int childCount = getChildNodesCount(); for (int i = 0; i < childCount; i++) { Node child = getChild(i); if (child.siblingElementIndex >= 0) { if (childElementNodes[child.siblingElementIndex] != child) { return false; } } } } // sibling names if (siblingNameIndex != -1) { List<Node> siblings = parentNode.childNodes; int index = 0; for (int i = 0, siblingsSize = siblings.size(); i < siblingsSize; i++) { Node sibling = siblings.get(i); if (sibling.siblingNameIndex == -1 && nodeType == NodeType.ELEMENT && nodeName.equals(sibling.getNodeName())) { if (sibling.siblingNameIndex != index++) { return false; } } } } // process children for (Node childNode : childNodes) { if (!childNode.check()) { return false; } } return true; } \n### Response:", "ground_truth": "Checks the health of child nodes. Useful during complex tree manipulation,\nto check if everything is OK. Not optimized for speed, should be used just\nfor testing purposes.", "predict": "Method for checking the children of a node.\n\n* Validates the childNodes object by checking if it is null and iterates through its elements.\n* Checks the sibling index and element type of each child node and increments the sibling index if necessary.\n* Checks the child element nodes and sibling names if present.\n* Validates the child count and element nodes if present.\n* Iterates through the child elements and checks their siblings.\n* Returns false if any of the checks fail.\n\nNote: This method is used to check if a node has any children and is necessary for the correct processing of the node."}, {"ID": 1564, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def thread_data(name, value=NOTHING, ct=None): '''Set or retrieve an attribute ``name`` from thread ``ct``. If ``ct`` is not given used the current thread. If ``value`` is None, it will get the value otherwise it will set the value. ''' ct = ct or current_thread() if is_mainthread(ct): loc = process_data() elif not hasattr(ct, '_pulsar_local'): ct._pulsar_local = loc = {} else: loc = ct._pulsar_local if value is not NOTHING: if name in loc: if loc[name] is not value: raise RuntimeError( '%s is already available on this thread' % name) else: loc[name] = value return loc.get(name). \n### Response: Set or retrieve an attribute ``name`` from thread ``ct``.\n\n    If ``ct`` is not given used the current thread. If ``value``\n    is None, it will get the value otherwise it will set the value..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void initChildElementNodes() { if (childElementNodes == null) { childElementNodes = new Element[childElementNodesCount]; int childCount = getChildNodesCount(); for (int i = 0; i < childCount; i++) { Node child = getChild(i); if (child.siblingElementIndex >= 0) { childElementNodes[child.siblingElementIndex] = (Element) child; } } } } \n### Response:", "ground_truth": "Initializes list of child elements.", "predict": "Initializes child element nodes in the specified child element tree.\n\n    If the child element nodes are null, they are created.\n    The number of child element nodes is determined by getChildNodesCount().\n    For each child node, it checks if its sibling element index is >= 0.\n    If it is, it assigns the specified child element to the child element nodes.\n\n    The child element nodes are assigned to the specified child element tree."}, {"ID": 1565, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void setPlaceholderImageFocusPoint(PointF focusPoint) { Preconditions.checkNotNull(focusPoint); getScaleTypeDrawableAtIndex(PLACEHOLDER_IMAGE_INDEX).setFocusPoint(focusPoint); }. \n### Response: Sets the placeholder image focus point..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void initSiblingNames() { if (siblingNameIndex == -1) { List<Node> siblings = parentNode.childNodes; int index = 0; for (int i = 0, siblingsSize = siblings.size(); i < siblingsSize; i++) { Node sibling = siblings.get(i); if (sibling.siblingNameIndex == -1 && nodeType == NodeType.ELEMENT && nodeName.equals(sibling.getNodeName())) { sibling.siblingNameIndex = index++; } } } } \n### Response:", "ground_truth": "Initializes siblings elements of the same name.", "predict": "Initializes the sibling names for the parent node.."}, {"ID": 1566, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def update(self): \"\"\"Update quicklook stats using the input method.\"\"\" # Init new stats stats = self.get_init_value() # Grab quicklook stats: CPU, MEM and SWAP if self.input_method == 'local': # Get the latest CPU percent value stats['cpu'] = cpu_percent.get() stats['percpu'] = cpu_percent.get(percpu=True) # Use the psutil lib for the memory (virtual and swap) stats['mem'] = psutil.virtual_memory().percent stats['swap'] = psutil.swap_memory().percent elif self.input_method == 'snmp': # Not available pass # Optionnaly, get the CPU name/frequency # thanks to the cpuinfo lib: https://github.com/workhorsy/py-cpuinfo if cpuinfo_tag: cpu_info = cpuinfo.get_cpu_info() # Check cpu_info (issue #881) if cpu_info is not None: stats['cpu_name'] = cpu_info.get('brand', 'CPU') if 'hz_actual_raw' in cpu_info: stats['cpu_hz_current'] = cpu_info['hz_actual_raw'][0] if 'hz_advertised_raw' in cpu_info: stats['cpu_hz'] = cpu_info['hz_advertised_raw'][0] # Update the stats self.stats = stats return self.stats. \n### Response: Update quicklook stats using the input method..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void initChildNodes(final Node newNode) { if (childNodes == null) { childNodes = new ArrayList<>(); } if (ownerDocument != null) { if (newNode.ownerDocument != ownerDocument) { changeOwnerDocument(newNode, ownerDocument); } } } \n### Response:", "ground_truth": "Initializes child nodes list when needed.\nAlso fix owner document for new node, if needed.", "predict": "Initializes child nodes of the given Node."}, {"ID": 1567, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function divide($r): Rational { if (is_int($r)) { return $this->divideInt($r); } elseif ($r instanceof Rational) { return $this->divideRational($r); } else { throw new Exception\\IncorrectTypeException('Argument must be an integer or RationalNumber'); } }. \n### Response: Divide\nReturn the result of dividing two rational numbers, or a rational number by an integer.\n\n@param Rational|int $r\n\n@return Rational\n\n@throws Exception\\IncorrectTypeException if the argument is not numeric or Rational..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void changeOwnerDocument(final Node node, final Document ownerDocument) { node.ownerDocument = ownerDocument; int childCount = node.getChildNodesCount(); for (int i = 0; i < childCount; i++) { Node child = node.getChild(i); changeOwnerDocument(child, ownerDocument); } } \n### Response:", "ground_truth": "Changes owner document for given node and all its children.", "predict": "Change owner document of a node\n\n@param Node $node\n\n@param Document $ownerDocument\n\n@return void\n\n@throws DocumentException if the document cannot be modified.."}, {"ID": 1568, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function resetPassword($token = null, $options = []) { $options = Hash::merge($this->getConfig('resetPassword'), $options); $tokenParam = $this->_getRequest()->getQuery($options['queryParam']); if (!empty($tokenParam)) { $token = $tokenParam; } // Check of the token exists try { $entity = $this->UserTable->verifyPasswordResetToken($token, $options['tokenOptions']); } catch (RecordNotFoundException $e) { if (empty($options['errorMessage']) && $options['errorMessage'] !== false) { $options['errorMessage'] = $e->getMessage(); } $redirect = $this->handleFlashAndRedirect('invalidError', $options); if ($redirect instanceof Response) { return $redirect; } $entity = $this->UserTable->newEntity(); } // Check if the token has expired if ($entity->get('token_is_expired') === true) { if (empty($options['invalidErrorMessage'])) { $options['invalidErrorMessage'] = $e->getMessage(); } $redirect = $this->handleFlashAndRedirect('expiredError', $options); if ($redirect instanceof Response) { return $redirect; } } // Handle the POST if ($this->_getRequest()->is('post')) { $entity = $this->UserTable->patchEntity($entity, $this->_getRequest()->getData()); if ($this->UserTable->resetPassword($entity)) { $redirect = $this->handleFlashAndRedirect('success', $options); } else { $redirect = $this->handleFlashAndRedirect('error', $options); } if ($redirect instanceof Response) { return $redirect; } } else { $entity = $this->UserTable->newEntity(); } $this->_setViewVar('entity', $entity); }. \n### Response: Allows the user to enter a new password.\n\n@param string|null $token Token\n@param array $options Options\n@return null|\\Cake\\Http\\Response.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public Node getPreviousSiblingName() { if (nodeName == null) { return null; } initSiblingNames(); int index = siblingNameIndex -1; for (int i = siblingIndex; i >= 0; i--) { Node sibling = parentNode.childNodes.get(i); if ((index == sibling.siblingNameIndex) && nodeName.equals(sibling.getNodeName())) { return sibling; } } return null; } \n### Response:", "ground_truth": "Returns this node's previous sibling element with the same name.", "predict": "This method retrieves the previous sibling name of a node in the DOM. It first initializes the sibling name index and then iterates through the siblings of the current node. If the previous sibling name of the current node matches the name of the node being retrieved, it returns that node. Otherwise, it returns null.\n\n@return the previous sibling name of the current node.\n\nNote: This method is used to retrieve the previous sibling name of a node in the DOM, it may have some performance implications and should be used with caution."}, {"ID": 1569, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def sg_regularizer_loss(scale=1.0): r\"\"\" Get regularizer losss Args: scale: A scalar. A weight applied to regularizer loss \"\"\" return scale * tf.reduce_mean(tf.get_collection(tf.GraphKeys.REGULARIZATION_LOSSES)). \n### Response: r\"\"\" Get regularizer losss\n\n    Args:\n      scale: A scalar. A weight applied to regularizer loss.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public String getTextContent() { StringBuilder sb = new StringBuilder(getChildNodesCount() + 1); appendTextContent(sb); return sb.toString(); } \n### Response:", "ground_truth": "Returns the text content of this node and its descendants.\n@see #appendTextContent(Appendable)", "predict": "r\"\"\" Get text content\n\n    Returns:\n      sb: A StringBuilder object containing the text content.\n    \"\"\""}, {"ID": 1570, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function searchableColumnIndex() { $searchable = []; for ($i = 0, $c = count($this->request->input('columns')); $i < $c; $i++) { if ($this->isColumnSearchable($i, false)) { $searchable[] = $i; } } return $searchable; }. \n### Response: Get searchable column indexes.\n\n@return array.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public String getHtml() { LagartoDomBuilderConfig lagartoDomBuilderConfig; if (ownerDocument == null) { lagartoDomBuilderConfig = ((Document) this).getConfig(); } else { lagartoDomBuilderConfig = ownerDocument.getConfig(); } LagartoHtmlRenderer lagartoHtmlRenderer = lagartoDomBuilderConfig.getLagartoHtmlRenderer(); return lagartoHtmlRenderer.toHtml(this, new StringBuilder()); } \n### Response:", "ground_truth": "Generates HTML.", "predict": "Get the HTML content.\n\n@return String.\n\n"}, {"ID": 1571, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function update($id, array $params) { $defaults = [ 'id' => $id, 'login' => null, 'password' => null, 'lastname' => null, 'firstname' => null, 'mail' => null, ]; $params = $this->sanitizeParams($defaults, $params); $xml = new \\SimpleXMLElement('<?xml version=\"1.0\"?><user></user>'); foreach ($params as $k => $v) { if ('custom_fields' === $k) { $this->attachCustomFieldXML($xml, $v); } else { $xml->addChild($k, $v); } } return $this->put('/users/'.$id.'.xml', $xml->asXML()); }. \n### Response: Update user's information.\n\n@see http://www.redmine.org/projects/redmine/wiki/Rest_Users#PUT\n\n@param string $id     the user id\n@param array  $params\n\n@return string|false.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public String getInnerHtml() { LagartoDomBuilderConfig lagartoDomBuilderConfig; if (ownerDocument == null) { lagartoDomBuilderConfig = ((Document) this).getConfig(); } else { lagartoDomBuilderConfig = ownerDocument.getConfig(); } LagartoHtmlRenderer lagartoHtmlRenderer = lagartoDomBuilderConfig.getLagartoHtmlRenderer(); return lagartoHtmlRenderer.toInnerHtml(this, new StringBuilder()); } \n### Response:", "ground_truth": "Generates inner HTML.", "predict": "Get the inner HTML of the object.\n\n@see http://www.w3schools.com/js/js_obj_getinnerhtml.asp\n\n@param object $this\n\n@return string."}, {"ID": 1572, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function formatKey(key) { key = key.toLowerCase() // Don't capitalize -ms- prefix if (/^-ms-/.test(key)) key = key.substr(1) return t.identifier(hyphenToCamelCase(key)) }. \n### Response: Format style key into JSX style object key.\n\n@param {string} key\n@return {string}.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void visitChildren(final NodeVisitor nodeVisitor) { if (childNodes != null) { for (int i = 0, childNodesSize = childNodes.size(); i < childNodesSize; i++) { Node childNode = childNodes.get(i); childNode.visit(nodeVisitor); } } } \n### Response:", "ground_truth": "Visits children nodes.", "predict": "Visit all child nodes of the root node.\n\n@param {NodeVisitor} nodeVisitor\n@return void."}, {"ID": 1573, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (vschema *VSchema) FindTablesOrVindex(keyspace, name string, tabletType topodatapb.TabletType) ([]*Table, Vindex, error) { tables, err := vschema.findTables(keyspace, name, tabletType) if err != nil { return nil, nil, err } if tables != nil { return tables, nil, nil } v, err := vschema.FindVindex(keyspace, name) if err != nil { return nil, nil, err } if v != nil { return nil, v, nil } return nil, nil, fmt.Errorf(\"table %s not found\", name) }. \n### Response: // FindTablesOrVindex finds a table or a Vindex by name using Find and FindVindex..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public String getCssPath() { StringBuilder path = new StringBuilder(); Node node = this; while (node != null) { String nodeName = node.getNodeName(); if (nodeName != null) { StringBuilder sb = new StringBuilder(); sb.append(' ').append(nodeName); String id = node.getAttribute(\"id\"); if (id != null) { sb.append('#').append(id); } path.insert(0, sb); } node = node.getParentNode(); } if (path.charAt(0) == ' ') { return path.substring(1); } return path.toString(); } \n### Response:", "ground_truth": "Returns CSS path to this node from document root.", "predict": "// getCssPath returns the CSS path of a node in the tree. This method iterates through all nodes in the tree and appends the node name and its id attributes to a StringBuilder. If the node is the root node, it returns the entire CSS path."}, {"ID": 1574, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (t *Transaction) LockTimeout(lockTimeout int) *Transaction { t.lockTimeout = &lockTimeout return t }. \n### Response: // LockTimeout sets the optional lockTimeout value..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void onDecoraTag(final Tag tag) { String tagName = tag.getName().toString(); if (tag.getType() == TagType.SELF_CLOSING) { checkNestedDecoraTags(); decoraTagName = tagName.substring(7); decoraTagStart = tag.getTagPosition(); decoraTagEnd = tag.getTagPosition() + tag.getTagLength(); defineDecoraTag(); return; } if (tag.getType() == TagType.START) { checkNestedDecoraTags(); decoraTagName = tagName.substring(7); decoraTagStart = tag.getTagPosition(); decoraTagDefaultValueStart = tag.getTagPosition() + tag.getTagLength(); return; } // closed tag type decoraTagEnd = tag.getTagPosition() + tag.getTagLength(); decoraTagDefaultValueEnd = tag.getTagPosition(); defineDecoraTag(); } \n### Response:", "ground_truth": "Handle Decora tags.", "predict": "// OnDecoraTag method handles a tag object passed in.."}, {"ID": 1575, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function getFoldersToCheck(src) { var folders = []; src.forEach(function (entry) { if (entry.charAt(0) === '!') { folders.push(path.join('!' + mainFolder, entry.substring(1, entry.length))); } else { if (entry.charAt(0) === '/') { folders.push(entry); } else { folders.push(path.join(mainFolder, entry)); } } }); return folders; }. \n### Response: Return all the folders that the plugin have to check. Because the plugin is inside the node_modules\nfolder, we prepended to all the path the absolute path of the main context of execution.\n\n@param {object} src - Path of the files you want to be checked by the plugin.\n\n@returns {string[]} Path of the files you want to be checked by the plugin with the absolute path of the context prepended..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void onIdAttrStart(final Tag tag) { String id = tag.getId().toString().substring(7); String tagName; String idName; int dashIndex = id.indexOf('-'); if (dashIndex == -1) { tagName = id; idName = null; } else { tagName = id.substring(0, dashIndex); idName = id.substring(dashIndex + 1); } if (tag.getType() == TagType.SELF_CLOSING) { checkNestedDecoraTags(); decoraTagName = tagName; decoraIdName = idName; decoraTagStart = tag.getTagPosition(); decoraTagEnd = tag.getTagPosition() + tag.getTagLength(); defineDecoraTag(); return; } if (tag.getType() == TagType.START) { checkNestedDecoraTags(); decoraTagName = tagName; decoraIdName = idName; decoraTagStart = tag.getTagPosition(); decoraTagDefaultValueStart = tag.getTagPosition() + tag.getTagLength(); closingTagName = tag.getName().toString(); closingTagDeepLevel = tag.getDeepLevel(); } } \n### Response:", "ground_truth": "Handle open and empty ID attribute tags.", "predict": "Implement a method `onIdAttrStart` in the class `Tag` that handles the start of an attribute tag.\n\nThis method takes a `Tag` object as input and checks the type of the tag. If the tag is a self-closing tag, it checks the nested tags and defines the decora tag. If the tag is a start tag, it checks the nested tags and calculates the start and end positions of the decora tag. It then defines the decora tag and returns.\n\n@param {Tag} tag - The tag object you want to handle in the method.\n\n@return {void} None.\n\nNote: This method is only called for self-closing and start tags. For other types of tags, the `onIdAttrStart` method should handle the appropriate logic.."}, {"ID": 1576, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def get_user(self): \"\"\"Access basic account information.\"\"\" method = 'GET' endpoint = '/rest/v1/users/{}'.format(self.client.sauce_username) return self.client.request(method, endpoint). \n### Response: Access basic account information..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void defineDecoraTag() { DecoraTag decoraTag = decoraTagDefaultValueStart == 0 ? new DecoraTag(decoraTagName, decoraIdName, decoraTagStart, decoraTagEnd) : new DecoraTag( decoraTagName, decoraIdName, decoraTagStart, decoraTagEnd, decoraTagDefaultValueStart, decoraTagDefaultValueEnd - decoraTagDefaultValueStart); decoraTags.add(decoraTag); decoraTagName = null; decoraIdName = null; closingTagName = null; decoraTagDefaultValueStart = 0; } \n### Response:", "ground_truth": "Defines Decora tag position inside decorator content.\nResets current Decora tag tracking.", "predict": "Defines a DecoraTag object and adds it to the decoraTags list."}, {"ID": 1577, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void remove(ItemState item) { if (item.isNode()) { remove(item.getData().getQPath()); } else { removeProperty(item, -1); } }. \n### Response: Removes the property or node and all descendants from the log\n\n@param item\nitem.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public JoyProxetta addProxyAspect(final ProxyAspect proxyAspect) { requireNotStarted(proxetta); this.proxyAspects.add(proxyAspect); return this; } \n### Response:", "ground_truth": "Adds a proxy aspect.", "predict": "Adds the specified ProxyAspect to the JoyProxetta object.\n\n@param proxyAspect\nthe ProxyAspect to add.\n\n@Override\npublic JoyProxetta\n```vbnet\n    // method-level comment\n    // requiresNotStarted(proxetta)\n    // checks if the JoyProxetta object is not yet started\n    // adds the specified proxyAspect to the proxyAspects list\n    // returns the JoyProxetta object\n```"}, {"ID": 1578, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (t TimeRange) IsZero() bool { return t.Min.IsZero() && t.Max.IsZero() }. \n### Response: // IsZero is true if the min and max of the time range are zero..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void addRootPackage(final String rootPackage, String mapping) { if (packages == null) { packages = new String[0]; } if (mappings == null) { mappings = new String[0]; } // fix mapping if (mapping.length() > 0) { // mapping must start with the slash if (!mapping.startsWith(StringPool.SLASH)) { mapping = StringPool.SLASH + mapping; } // mapping must NOT end with the slash if (mapping.endsWith(StringPool.SLASH)) { mapping = StringUtil.substring(mapping, 0, -1); } } // detect duplicates for (int i = 0; i < packages.length; i++) { if (packages[i].equals(rootPackage)) { if (mappings[i].equals(mapping)) { // both package and the mappings are the same return; } throw new MadvocException(\"Different mappings for the same root package: \" + rootPackage); } } packages = ArraysUtil.append(packages, rootPackage); mappings = ArraysUtil.append(mappings, mapping); } \n### Response:", "ground_truth": "Adds root package and its path mapping. Duplicate root packages\nare ignored, if mapping path is equals, otherwise exception is thrown.", "predict": "// Adds the root package to the packages array and the mappings array.\n// If the root package is not found in the array, it throws a MadvocException.\n// Detects duplicates and adds the root package and its mappings if they are the same.\n// The packages and mappings arrays are appended to the end of the arrays using ArraysUtil."}, {"ID": 1579, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public final String decode(String toDecode) { CEntityCoDec codec = new CEntityCoDec(new HashMap()); return codec.decode(toDecode); }. \n### Response: decode entity in the string\n\n@param toDecode the string to decode\n\n@return the decoded string.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void addRootPackageOf(final Class actionClass, final String mapping) { addRootPackage(actionClass.getPackage().getName(), mapping); } \n### Response:", "ground_truth": "Sets root package to package of given class.", "predict": "Adds the root package of the given action class to the mapping.\n\n@param actionClass the action class to add the root package of\n@param mapping the mapping to add the root package to\n\nNote: This method is used in the Spring Framework's @Controller and @Service annotations. It is used to specify the root package of the action class that is being mapped. The root package is used to identify the package that contains all the sub-packages of the action class."}, {"ID": 1580, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static int convertToDip(DisplayMetrics displayMetrics, int sizeInPixels) { return (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, sizeInPixels, displayMetrics); }. \n### Response: Converts the number in pixels to the number in dips.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public String findRootPackageForActionPath(final String actionPath) { if (mappings == null) { return null; } int ndx = -1; int delta = Integer.MAX_VALUE; for (int i = 0; i < mappings.length; i++) { String mapping = mappings[i]; boolean found = false; if (actionPath.equals(mapping)) { found = true; } else { mapping += StringPool.SLASH; if (actionPath.startsWith(mapping)) { found = true; } } if (found) { int distance = actionPath.length() - mapping.length(); if (distance < delta) { ndx = i; delta = distance; } } } if (ndx == -1) { return null; } return packages[ndx]; } \n### Response:", "ground_truth": "Finds closest root package for the given action path.", "predict": "This method finds the root package for the given action path by iterating through all the mappings and checking if the action path matches any of the mappings. If no matching package is found, it returns null. Otherwise, it finds the first package that starts with the action path and returns it. If no such package is found, it returns null."}, {"ID": 1581, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def indicator_body(indicators): \"\"\"Generate the appropriate dictionary content for POST of an File indicator Args: indicators (list): A list of one or more hash value(s). \"\"\" hash_patterns = { 'md5': re.compile(r'^([a-fA-F\\d]{32})$'), 'sha1': re.compile(r'^([a-fA-F\\d]{40})$'), 'sha256': re.compile(r'^([a-fA-F\\d]{64})$'), } body = {} for indicator in indicators: if indicator is None: continue if hash_patterns['md5'].match(indicator): body['md5'] = indicator elif hash_patterns['sha1'].match(indicator): body['sha1'] = indicator elif hash_patterns['sha256'].match(indicator): body['sha256'] = indicator return body. \n### Response: Generate the appropriate dictionary content for POST of an File indicator\n\n        Args:\n            indicators (list): A list of one or more hash value(s)..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String resolveValidationMessage(final HttpServletRequest request, final Violation violation) { ValidationConstraint vc = violation.getConstraint(); String key = vc != null ? vc.getClass().getName() : violation.getName(); String msg = LocalizationUtil.findMessage(request, key); if (msg != null) { return beanTemplateParser.parseWithBean(msg, violation); } return null; } \n### Response:", "ground_truth": "Prepares validation messages.\nKey is either validation constraint class name or violation name.", "predict": "Resolve validation message\n\nReturns:\nThe validation message or null if no message is found..\n\n"}, {"ID": 1582, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def copy(self): \"\"\" Return a copy of the current TextureVisuals object. Returns ---------- copied : TextureVisuals Contains the same information in a new object \"\"\" uv = self.uv if uv is not None: uv = uv.copy() copied = TextureVisuals( uv=uv, material=copy.deepcopy(self.material)) return copied. \n### Response: Return a copy of the current TextureVisuals object.\n\n        Returns\n        ----------\n        copied : TextureVisuals\n          Contains the same information in a new object.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public BeanReferences removeDuplicateNames() { if (names.length < 2) { return this; } int nullCount = 0; for (int i = 1; i < names.length; i++) { String thisRef = names[i]; if (thisRef == null) { nullCount++; continue; } for (int j = 0; j < i; j++) { if (names[j] == null) { continue; } if (thisRef.equals(names[j])) { names[i] = null; break; } } } if (nullCount == 0) { return this; } String[] newRefs = new String[names.length - nullCount]; int ndx = 0; for (String name : names) { if (name == null) { continue; } newRefs[ndx] = name; ndx++; } return new BeanReferences(newRefs); } \n### Response:", "ground_truth": "Removes later duplicated references in an array.\nReturns new instance of BeanReferences if there was changes,\notherwise returns the same instance.", "predict": "Removes duplicate names from the given list of bean references.\n\n        Returns\n        ----------\n        BeanReferences\n          A new bean reference with no duplicate names.\n\nNote: The code uses two nested for loops to iterate over the list of names and check for duplicates. If the list is empty, it returns the original list of names. If the list has at least two elements, it creates a new list of unique names and returns that. The method also creates a new bean reference with no duplicate names by using a for loop to iterate over the list of names and setting each name to null if it is not already in the list."}, {"ID": 1583, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (s *LDAPService) NewLdapRemoveParams() *LdapRemoveParams { p := &LdapRemoveParams{} p.p = make(map[string]interface{}) return p }. \n### Response: // You should always use this function to get a new LdapRemoveParams instance,\n// as then you are sure you have configured all required params.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public JoyProps addPropsFile(final String namePattern) { requireNotStarted(props); this.propsNamePatterns.add(namePattern); return this; } \n### Response:", "ground_truth": "Adds props files or patterns.", "predict": "// This method is an override of the default addPropsFile method,\n// which is used to add a new property file to the JoyProps object.\n// It first requires that the JoyProps object is not yet started,\n// and then adds the specified name pattern to the list of property files.\n// Finally, it returns the modified JoyProps object."}, {"ID": 1584, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected function getAllSlugs() { $pluggables = $this->all(); $slugs = []; foreach ($pluggables as $plug) { $slugs[] = $plug['slug']; } return $slugs; }. \n### Response: Get all pluggable slugs.\n\n@return array.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void forEachTarget(final Consumer<Target> targetConsumer) { for (final Target target : targets) { targetConsumer.accept(target); } } \n### Response:", "ground_truth": "Iterates all targets.", "predict": "Iterate through the targets and call the targetConsumer.accept() method for each target.\n\n@param Consumer<Target> targetConsumer the consumer object to accept the target."}, {"ID": 1585, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def dict_to_binary(val) saved_object_count = @written_object_count @written_object_count += 1 #@object_refs += val.value.keys.size * 2 keys_and_values = val.value.keys.map { |k| CFString.new(k).to_binary(self) } keys_and_values.concat(val.value.values.map { |v| v.to_binary(self) }) bdata = Binary.type_bytes(0b1101,val.value.size) << Binary.pack_int_array_with_size(object_ref_size(@object_refs), keys_and_values) @object_table[saved_object_count] = bdata return saved_object_count end. \n### Response: Convert dictionary to binary format and add it to the object table.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void forEachTargetAndIn(final MadvocScope scope, final BiConsumer<Target, InjectionPoint> biConsumer) { for (final Target target : targets) { final ScopeData scopeData = target.scopeData(); if (scopeData.in() == null) { continue; } for (final InjectionPoint in : scopeData.in()) { if (in.scope() != scope) { continue; } biConsumer.accept(target, in); } } } \n### Response:", "ground_truth": "Iterates all targets and for each target iterates all IN injection points of given scope.", "predict": "Iterate over all targets and their associated scopes and perform aforEachTargetAndIn operation. This operation may involve processing the scope data for each target and injection point, and may continue until all targets and injection points have been processed."}, {"ID": 1586, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Fix(IssueCodes.CLASS_EXPECTED) public void fixClassExpected(final Issue issue, IssueResolutionAcceptor acceptor) { ExtendedTypeRemoveModification.accept(this, issue, acceptor); }. \n### Response: Quick fix for \"Class expected\".\n\n@param issue the issue.\n@param acceptor the quick fix acceptor..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void forEachTargetAndOut(final MadvocScope scope, final BiConsumer<Target, InjectionPoint> biConsumer) { for (final Target target : targets) { final ScopeData scopeData = target.scopeData(); if (scopeData.out() == null) { continue; } for (final InjectionPoint out : scopeData.out()) { if (out.scope() != scope) { continue; } biConsumer.accept(target, out); } } } \n### Response:", "ground_truth": "Iterates all targets and for each target iterates all OUT injection points of given scope.", "predict": "This method iterates through the targets and their corresponding scope data, and applies a biConsumer to each target and its corresponding injection point. It continues as long as the target's out() method is not null and the injection point's scope() method is the same as the current scope.\n\n@param scope the MadvocScope object to iterate through.\n@param biConsumer theBiConsumer object to apply to each target and its corresponding injection point.\n\nNote: This method is part of the MadvocScope class, which is used to manage injection points and their corresponding scope data. It is used to iterate through the targets and their corresponding scope data and apply a biConsumer to each target and its corresponding injection point."}, {"ID": 1587, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected function getTokenColumn($column) { if (! array_key_exists($column, $this->tokenColumns)) { // This should never happen. If it does, then it means // that someone is a moron and has removed required // settings from the config files. Better safe than sorry. throw new BadRequestHttpException; } return $this->tokenColumns[$column]; }. \n### Response: Retrieve token columns.\n\n@author Morten Rugaard \n@param  string $column\n@return string.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public Object[] extractParametersValues() { final Object[] values = new Object[targets.length - 1]; for (int i = 1; i < targets.length; i++) { values[i - 1] = targets[i].value(); } return values; } \n### Response:", "ground_truth": "Collects all parameters from target into an array.", "predict": "Extracts the values of the specified targets.\n\n@author Morten Rugaard\n@param  Array<String> $targets\n@return Array<Object>."}, {"ID": 1588, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static function simpleQuery($sql) { self::$sql_hits++; try { $res = self::getDBLink()->query($sql); } catch (PDOException $e) { throw new Exception($e->getMessage()); } return $res; }. \n### Response: returns a PDO resultset\n\n@param string $sql\n@return \\PDOStatement.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected Target[] makeTargets(final Target actionTarget, final MethodParam[] methodParams) { if (methodParams == null) { // action does not have method parameters, so there is just one target return new Target[]{actionTarget}; } // action has method arguments, so there is more then one target final Target[] target = new Target[methodParams.length + 1]; target[0] = actionTarget; final Object action = actionTarget.value(); for (int i = 0; i < methodParams.length; i++) { final MethodParam methodParam = methodParams[i]; final Class paramType = methodParam.type(); final Target paramTarget; if (methodParam.annotationType() == null) { // parameter is NOT annotated, create new value for the target // the class itself will be a base class, and should be scanned final ScopeData newScopeData = methodParam.scopeData().inspector().inspectClassScopesWithCache(paramType); paramTarget = Target.ofValue(createActionMethodArgument(paramType, action), newScopeData); } else if (methodParam.annotationType() == Out.class) { // parameter is annotated with *only* OUT annotation // create the output value now AND to save the type paramTarget = Target.ofMethodParam(methodParam, createActionMethodArgument(paramType, action)); } else { // parameter is annotated with any IN annotation // create target with NO value, as the value will be created later paramTarget = Target.ofMethodParam(methodParam, type -> createActionMethodArgument(type, action)); } target[i + 1] = paramTarget; } return target; } \n### Response:", "ground_truth": "Joins action and parameters into one single array of Targets.", "predict": "This method is used to create targets for a given action and method parameters. It takes two arguments, `actionTarget` and `methodParams`, which are arrays of objects representing the action and its method parameters, respectively.\n\nThe method first checks if `methodParams` is null, which means that the action does not have any method parameters. If this is the case, it returns a single target object representing the action itself.\n\nIf `methodParams` is not null, the method loops through each method parameter and checks if it is annotated with any annotation. If the parameter is not annotated, it creates a new value for the target. If the parameter is annotated with only one annotation, such as `Out`, it creates the output value now and saves it to a variable. If the parameter is annotated with any other annotation, it creates a target object with no value and passes it to the `ofMethodParam` method to create the output value.\n\nFinally, the method returns an array of targets, with the first element being the action itself and the second element being the target created for each method parameter."}, {"ID": 1589, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def mcast_sender(mcgroup=MC_GROUP): \"\"\"Non-object interface for sending multicast messages. \"\"\" sock = socket(AF_INET, SOCK_DGRAM) sock.setsockopt(SOL_SOCKET, SO_REUSEADDR, 1) if _is_broadcast_group(mcgroup): group = '<broadcast>' sock.setsockopt(SOL_SOCKET, SO_BROADCAST, 1) elif((int(mcgroup.split(\".\")[0]) > 239) or (int(mcgroup.split(\".\")[0]) < 224)): raise IOError(\"Invalid multicast address.\") else: group = mcgroup ttl = struct.pack('b', TTL_LOCALNET) # Time-to-live sock.setsockopt(IPPROTO_IP, IP_MULTICAST_TTL, ttl) return sock, group. \n### Response: Non-object interface for sending multicast messages..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @SuppressWarnings({\"unchecked\", \"NullArgumentToVariableArgMethod\"}) protected Object createActionMethodArgument(final Class type, final Object action) { try { if (type.getEnclosingClass() == null || Modifier.isStatic(type.getModifiers())) { // regular or static class return ClassUtil.newInstance(type); } else { // member class Constructor ctor = type.getDeclaredConstructor(type.getDeclaringClass()); ctor.setAccessible(true); return ctor.newInstance(action); } } catch (Exception ex) { throw new MadvocException(ex); } } \n### Response:", "ground_truth": "Creates action method arguments.", "predict": "@SuppressWarnings({\"unchecked\", \"NullArgumentToVariableArgMethod\"}) protected Object createActionMethodArgument(final Class type, final Object action)"}, {"ID": 1590, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function renderWidget(Twig_Environment $env, PermissionAdmin $permissionAdmin, FormView $form, array $parameters = array()) { $template = $env->loadTemplate('KunstmaanAdminBundle:PermissionsAdminTwigExtension:widget.html.twig'); return $template->render(array_merge(array( 'form' => $form, 'permissionadmin' => $permissionAdmin, 'recursiveSupport' => true, ), $parameters)); }. \n### Response: Renders the permission admin widget.\n\n@param \\Twig_Environment $env\n@param PermissionAdmin   $permissionAdmin The permission admin\n@param FormView          $form            The form\n@param array             $parameters      Extra parameters\n\n@return string.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public void sessionCreated(final HttpSessionEvent httpSessionEvent) { HttpSession session = httpSessionEvent.getSession(); sessionMap.putIfAbsent(session.getId(), session); for (HttpSessionListener listener : listeners) { listener.sessionCreated(httpSessionEvent); } } \n### Response:", "ground_truth": "Stores session in map and broadcasts event to registered listeners.", "predict": "Implements the session creation event.\n\n@param HttpSessionEvent $httpSessionEvent The HttpSessionEvent object.\n\n@return void."}, {"ID": 1591, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected function generateAutoloader(array $list_files) : bool { $file = $this->getObfuscatedPath() . DIRECTORY_SEPARATOR . 'autoloader.php'; $contents = \"<?php \\n\\n\"; // Array de includes $contents .= \"\\$includes = array(\\n\"; $contents .= \" '\" . implode(\"',\\n '\", $list_files) . \"'\\n\"; $contents .= \");\\n\\n\"; // Loop nos includes // TODO: incluir uma fun\u00e7\u00e3o ofuscada para fazer o loop // contendo as fun\u00e7\u00f5es de desempacotamento $contents .= \"foreach(\\$includes as \\$file) {\\n\"; $contents .= \" require_once(\\$file);\\n\"; $contents .= \"}\\n\\n\"; return (file_put_contents($file, $contents) !== false); }. \n### Response: Gera um carregador para os arquivos ofuscados.\n\n@param  array $list_files\n@return bool.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public void sessionDestroyed(final HttpSessionEvent httpSessionEvent) { HttpSession session = httpSessionEvent.getSession(); sessionMap.remove(session.getId()); for (HttpSessionListener listener : listeners) { listener.sessionDestroyed(httpSessionEvent); } } \n### Response:", "ground_truth": "Removes session from a map and broadcasts event to registered listeners.", "predict": "Determina o enderezo de session e remove o enderezo de session de todos os listeners de session."}, {"ID": 1592, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def _contains_yieldpoint(children): \"\"\"Returns True if ``children`` contains any YieldPoints. ``children`` may be a dict or a list, as used by `MultiYieldPoint` and `multi_future`. \"\"\" if isinstance(children, dict): return any(isinstance(i, YieldPoint) for i in children.values()) if isinstance(children, list): return any(isinstance(i, YieldPoint) for i in children) return False. \n### Response: Returns True if ``children`` contains any YieldPoints.\n\n    ``children`` may be a dict or a list, as used by `MultiYieldPoint`\n    and `multi_future`..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public JsonArray add(Object value) { Objects.requireNonNull(value); value = JsonObject.resolveValue(value); list.add(value); return this; } \n### Response:", "ground_truth": "Adds an object to the JSON array.", "predict": "Adds the given value to the `list` of `JsonArray` objects.\n\n    This method adds the specified value to the end of the\n    current `list` of `JsonArray` objects.\n\n    ``value`` is a `Object` representing the value to be added,\n    ``value`` must not be `null` and must be a valid `JsonArray`\n    object.\n\n    The returned `JsonArray` object is the updated `list` of\n    `JsonArray` objects."}, {"ID": 1593, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private function createErrorHtml(bool $dismissable = false) { $html = ' <div class=\"alert alert-danger' . ($dismissable == true ? ' alert-dismissible' : '') . '\" role=\"alert\" id=\"core-error-' . $this->throwable->getCode() . '\">'; if ($dismissable) { $html .= '<button type=\"button\" class=\"close\" data-dismiss=\"alert\"><span aria-hidden=\"true\">&times;</span><span class=\"sr-only\">Close</span></button>'; } switch (true) { case $this->public: $html .= $this->getHeadline(); $html .= $this->getMessage(); $html .= $this->getFileinfo(); $html .= $this->getTrace(); break; default: $html .= ' <h3 class=\"no-top-margin\">Error</h3> <p>Sorry for that! Webmaster has been informed. Please try again later.</p>'; } $html .= ' </div>'; return $html; }. \n### Response: Creates html error message.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public JsonArray addAll(final JsonArray array) { Objects.requireNonNull(array); list.addAll(array.list); return this; } \n### Response:", "ground_truth": "Appends all of the elements in the specified array to the end of this JSON array.", "predict": "This method adds all elements of the given JSON array to a `JsonArray` object. It requires that the array is not null and iterates over the elements of the array and adds them to the `list` property of the `JsonArray` object. The method returns the `JsonArray` object."}, {"ID": 1594, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static function formatIniParamSize(string $res): int { $res = trim($res); $measure = strtolower($res[strlen($res) - 1]); $res = (int)$res; // No breaks in switch, because we need multiple calculations switch ($measure) { /** @noinspection PhpMissingBreakStatementInspection */ case 'g': $res *= 1024; /** @noinspection PhpMissingBreakStatementInspection */ case 'm': $res *= 1024; case 'k': $res *= 1024; } return $res; }. \n### Response: Get size from formatted ini params string\n\n@param string $res\n\n@return int - size in bytes.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public Object remove(final int pos) { Object removed = list.remove(pos); if (removed instanceof Map) { return new JsonObject((Map) removed); } if (removed instanceof ArrayList) { return new JsonArray((List) removed); } return removed; } \n### Response:", "ground_truth": "Removes the value at the specified position in the JSON array.", "predict": "Remove an item from a list\n\n@param list $list\n\n@return the removed item or null if no item was removed."}, {"ID": 1595, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def bucket_type_key(bucket_type): \"\"\" Registers a function that calculates test item key for the specified bucket type. \"\"\" def decorator(f): @functools.wraps(f) def wrapped(item, session): key = f(item) if session is not None: for handler in session.random_order_bucket_type_key_handlers: key = handler(item, key) return key bucket_type_keys[bucket_type] = wrapped return wrapped return decorator. \n### Response: Registers a function that calculates test item key for the specified bucket type..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected String resolveTarget(final ActionRequest actionRequest, final String resultValue) { String resultBasePath = actionRequest.getActionRuntime().getResultBasePath(); ResultPath resultPath = resultMapper.resolveResultPath(resultBasePath, resultValue); String actionPath = resultPath.path(); String path = actionPath; String value = resultPath.value(); if (StringUtil.isEmpty(value)) { value = null; } String target; while (true) { // variant #1: with value if (value != null) { if (path == null) { // only value remains int lastSlashNdx = actionPath.lastIndexOf('/'); if (lastSlashNdx != -1) { target = actionPath.substring(0, lastSlashNdx + 1) + value; } else { target = '/' + value; } } else { target = path + '.' + value; } target = locateTarget(actionRequest, target); if (target != null) { break; } } if (path != null) { // variant #2: without value target = locateTarget(actionRequest, path); if (target != null) { break; } } // continue if (path == null) { // path not found return null; } int dotNdx = MadvocUtil.lastIndexOfDotAfterSlash(path); if (dotNdx == -1) { path = null; } else { path = path.substring(0, dotNdx); } } return target; } \n### Response:", "ground_truth": "Locates the target file from action path and the result value.", "predict": "This method resolves the target of an action in a given request by searching for a specific value within the result path. It uses two variants to handle different scenarios: either finding the value with a path, or without the value and finding the path. The method returns the final target."}, {"ID": 1596, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def modify_log_destinations(self, settings): \"\"\"Modifies the debug or release logger destinations. in settings of type str The destination settings string. See iprt/log.h for details. To target the release logger, prefix the string with \"release:\". \"\"\" if not isinstance(settings, basestring): raise TypeError(\"settings can only be an instance of type basestring\") self._call(\"modifyLogDestinations\", in_p=[settings]). \n### Response: Modifies the debug or release logger destinations.\n\n        in settings of type str\n            The destination settings string. See iprt/log.h for details. To target the\n            release logger, prefix the string with \"release:\"..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void targetNotFound(final ActionRequest actionRequest, final String actionAndResultPath) throws IOException { final HttpServletResponse response = actionRequest.getHttpServletResponse(); if (!response.isCommitted()) { response.sendError(SC_NOT_FOUND, \"Result not found: \" + actionAndResultPath); } } \n### Response:", "ground_truth": "Called when target not found. By default sends 404 to the response.", "predict": "### Targeting a specific action and result path\n\nThis method targets a specific action and result path, and sends an error message if the response is not committed.\n\n### Exception handling\n\nThis method throws IOException for any input/output errors.\n\n### HttpServletResponse\n\nThis method uses the HttpServletResponse object to send the error message.\n\n### ActionRequest\n\nThis method is used to get the ActionRequest object, which is used to handle the request.\n\n### SC_NOT_FOUND\n\nThis constant represents the error code for the SC_NOT_FOUND error message.\n\n### Response\n\nThis method returns a response to the action request, which includes the error message.\n\n### Conclusion\n\nThis method targets a specific action and result path, and sends an error message if the response is not committed. It also uses the HttpServletResponse object to send the error message. The method throws IOException for any input/output errors, and uses the SC_NOT_FOUND constant for the error code. The method returns a response to the action request, which includes the error message."}, {"ID": 1597, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (prof *Profiler) CPUList(path string) (string, error) { p, err := ioutil.ReadFile(filepath.Join(path, CPUList)) if err != nil { return \"\", err } // the list is everything except for the trailing new line return string(p[:len(p)-1]), nil }. \n### Response: // CPUList returns the string found in the CPUList file or any error that\n// occurs..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected String valueToString(final String name, final Object valueObject) { if (!valueObject.getClass().isArray()) { return valueObject.toString(); } // array String[] array = (String[]) valueObject; if (valueNameIndexes == null) { valueNameIndexes = new HashMap<>(); } MutableInteger index = valueNameIndexes.get(name); if (index == null) { index = new MutableInteger(0); valueNameIndexes.put(name, index); } if (index.value >= array.length) { return null; } String result = array[index.value]; index.value++; return result; } \n### Response:", "ground_truth": "Converts value to a string.", "predict": "// valueToString returns the value of the given name in the given valueObject,\n// including any applicable name indexes, and without the trailing new line.\n// If the valueObject is not an array, it is converted to an array using the given\n// class's toArray method.\n\n// If valueNameIndexes is null, it is created using the given HashMap.\n// If valueNameIndexes.get(name) is null, it is created using the default\n// implementation of get.\n// If valueNameIndexes.put(name, index) is not implemented, it is assumed to\n// return the value of the given name in the given valueObject, including any\n// applicable name indexes, and without the trailing new line.\n// If index.value >= array.length, it returns null.\n// If array[index.value] is not found in the array, it returns null.\n// Finally, it returns the result of the last expression evaluated."}, {"ID": 1598, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def build_specfile_sections(spec): \"\"\" Builds the sections of a rpm specfile. \"\"\" str = \"\" mandatory_sections = { 'DESCRIPTION' : '\\n%%description\\n%s\\n\\n', } str = str + SimpleTagCompiler(mandatory_sections).compile( spec ) optional_sections = { 'DESCRIPTION_' : '%%description -l %s\\n%s\\n\\n', 'CHANGELOG' : '%%changelog\\n%s\\n\\n', 'X_RPM_PREINSTALL' : '%%pre\\n%s\\n\\n', 'X_RPM_POSTINSTALL' : '%%post\\n%s\\n\\n', 'X_RPM_PREUNINSTALL' : '%%preun\\n%s\\n\\n', 'X_RPM_POSTUNINSTALL' : '%%postun\\n%s\\n\\n', 'X_RPM_VERIFY' : '%%verify\\n%s\\n\\n', # These are for internal use but could possibly be overridden 'X_RPM_PREP' : '%%prep\\n%s\\n\\n', 'X_RPM_BUILD' : '%%build\\n%s\\n\\n', 'X_RPM_INSTALL' : '%%install\\n%s\\n\\n', 'X_RPM_CLEAN' : '%%clean\\n%s\\n\\n', } # Default prep, build, install and clean rules # TODO: optimize those build steps, to not compile the project a second time if 'X_RPM_PREP' not in spec: spec['X_RPM_PREP'] = '[ -n \"$RPM_BUILD_ROOT\" -a \"$RPM_BUILD_ROOT\" != / ] && rm -rf \"$RPM_BUILD_ROOT\"' + '\\n%setup -q' if 'X_RPM_BUILD' not in spec: spec['X_RPM_BUILD'] = '[ ! -e \"$RPM_BUILD_ROOT\" -a \"$RPM_BUILD_ROOT\" != / ] && mkdir \"$RPM_BUILD_ROOT\"' if 'X_RPM_INSTALL' not in spec: spec['X_RPM_INSTALL'] = 'scons --install-sandbox=\"$RPM_BUILD_ROOT\" \"$RPM_BUILD_ROOT\"' if 'X_RPM_CLEAN' not in spec: spec['X_RPM_CLEAN'] = '[ -n \"$RPM_BUILD_ROOT\" -a \"$RPM_BUILD_ROOT\" != / ] && rm -rf \"$RPM_BUILD_ROOT\"' str = str + SimpleTagCompiler(optional_sections, mandatory=0).compile( spec ) return str. \n### Response: Builds the sections of a rpm specfile..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @SuppressWarnings(\"unchecked\") public <T extends ActionFilter> MadvocRouter filter(final Class<T> actionFilterClass) { filtersManager.resolve(actionFilterClass); return this; } \n### Response:", "ground_truth": "Returns action filter instance for further configuration.", "predict": "This method is a MadvocRouter implementation that resolves an action filter for a given class. It returns the current MadvocRouter instance."}, {"ID": 1599, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def ConvertToTemplate(server,template,password=None,alias=None): \"\"\"Converts an existing server into a template. http://www.centurylinkcloud.com/api-docs/v1/#server-convert-server-to-template :param server: source server to convert :param template: name of destination template :param password: source server password (optional - will lookup password if None) :param alias: short code for a particular account. If none will use account's default alias \"\"\" if alias is None: alias = clc.v1.Account.GetAlias() if password is None: password = clc.v1.Server.GetCredentials([server,],alias)[0]['Password'] r = clc.v1.API.Call('post','Server/ConvertServerToTemplate', { 'AccountAlias': alias, 'Name': server, 'Password': password, 'TemplateAlias': template }) return(r). \n### Response: Converts an existing server into a template.\n\n\t\thttp://www.centurylinkcloud.com/api-docs/v1/#server-convert-server-to-template\n\n\t\t:param server: source server to convert\n\t\t:param template: name of destination template\n\t\t:param password: source server password (optional - will lookup password if None)\n\t\t:param alias: short code for a particular account.  If none will use account's default alias.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public String getPseudoFunctionName() { String name = getClass().getSimpleName().toLowerCase(); name = name.replace('_', '-'); return name; } \n### Response:", "ground_truth": "Returns pseudo-function name.", "predict": "This method returns the pseudo-function name of the current class.\n\n\t* The name istoLowerCaseed to make it case-insensitive.\n\t* The _ character is replaced with '-' to create the pseudo-function name."}, {"ID": 1600, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected function doUpdateKstrukturs(Skill $model, $data) { // remove all relationships before KstrukturQuery::create()->filterBySkill($model)->delete(); // add them $errors = []; foreach ($data as $entry) { if (!isset($entry['id'])) { $errors[] = 'Missing id for Kstruktur'; } else { $related = KstrukturQuery::create()->findOneById($entry['id']); $model->addKstruktur($related); } } if (count($errors) > 0) { throw new ErrorsException($errors); } }. \n### Response: Internal update mechanism of Kstrukturs on Skill\n\n@param Skill $model\n@param mixed $data.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public PropertyInjectionPoint[] resolve(Class type, final boolean autowire) { final List<PropertyInjectionPoint> list = new ArrayList<>(); final Set<String> usedPropertyNames = new HashSet<>(); // lookup fields while (type != Object.class) { final ClassDescriptor cd = ClassIntrospector.get().lookup(type); final PropertyDescriptor[] allPropertyDescriptors = cd.getAllPropertyDescriptors(); for (PropertyDescriptor propertyDescriptor : allPropertyDescriptors) { if (propertyDescriptor.isGetterOnly()) { continue; } if (usedPropertyNames.contains(propertyDescriptor.getName())) { continue; } Class propertyType = propertyDescriptor.getType(); if (ClassUtil.isTypeOf(propertyType, Collection.class)) { continue; } BeanReferences reference = referencesResolver.readReferenceFromAnnotation(propertyDescriptor); if (reference == null) { if (!autowire) { continue; } else { reference = referencesResolver.buildDefaultReference(propertyDescriptor); } } list.add(new PropertyInjectionPoint(propertyDescriptor, reference)); usedPropertyNames.add(propertyDescriptor.getName()); } // go to the supertype type = type.getSuperclass(); } final PropertyInjectionPoint[] fields; if (list.isEmpty()) { fields = PropertyInjectionPoint.EMPTY; } else { fields = list.toArray(new PropertyInjectionPoint[0]); } return fields; } \n### Response:", "ground_truth": "Resolves all properties for given type.", "predict": "Resolve method for the Class type to access its properties and BeanReferences.\n\n@param Class $type\n@param boolean $autowire\n\nThis method is used to resolve the properties and BeanReferences of a given Class type. It starts by lookuping the properties of the type using the ClassIntrospector and all its property descriptors. If the type is not an Object class, it continues to the supertype. If the type is an Object class, it returns the empty fields array. If the list of fields is isEmpty, it returns an empty array. Otherwise, it returns the list of resolved fields."}, {"ID": 1601, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (ri *readerOffsetsIterator) Delete() { ri.del = true if offset := ri.Offset(); offset&(1<<31) == 0 { atomic.StoreUint32(&ri.r.offsets[ri.i], offset|(1<<31)) } }. \n### Response: // Delete flags the entry to be deleted on the next call to Done. Is safe for\n// concurrent use under a read lock, but Done must be called under a write lock..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private Socket createSocks4ProxySocket(final String host, final int port) { Socket socket = null; final String proxyHost = proxy.getProxyAddress(); final int proxyPort = proxy.getProxyPort(); final String user = proxy.getProxyUsername(); try { socket = Sockets.connect(proxyHost, proxyPort, connectionTimeout); final InputStream in = socket.getInputStream(); final OutputStream out = socket.getOutputStream(); socket.setTcpNoDelay(true); byte[] buf = new byte[1024]; // 1) CONNECT int index = 0; buf[index++] = 4; buf[index++] = 1; buf[index++] = (byte) (port >>> 8); buf[index++] = (byte) (port & 0xff); InetAddress addr = InetAddress.getByName(host); byte[] byteAddress = addr.getAddress(); for (byte byteAddres : byteAddress) { buf[index++] = byteAddres; } if (user != null) { System.arraycopy(user.getBytes(), 0, buf, index, user.length()); index += user.length(); } buf[index++] = 0; out.write(buf, 0, index); // 2) RESPONSE int len = 6; int s = 0; while (s < len) { int i = in.read(buf, s, len - s); if (i <= 0) { throw new HttpException(ProxyInfo.ProxyType.SOCKS4, \"stream is closed\"); } s += i; } if (buf[0] != 0) { throw new HttpException(ProxyInfo.ProxyType.SOCKS4, \"proxy returned VN \" + buf[0]); } if (buf[1] != 90) { try { socket.close(); } catch (Exception ignore) { } throw new HttpException(ProxyInfo.ProxyType.SOCKS4, \"proxy returned CD \" + buf[1]); } byte[] temp = new byte[2]; in.read(temp, 0, 2); return socket; } catch (RuntimeException rtex) { closeSocket(socket); throw rtex; } catch (Exception ex) { closeSocket(socket); throw new HttpException(ProxyInfo.ProxyType.SOCKS4, ex.toString(), ex); } } \n### Response:", "ground_truth": "Connects to the SOCKS4 proxy and returns proxified socket.", "predict": "// Create a SOCKS4 proxy socket using the specified host and port. This method is safe for concurrent use\n// under a read lock, as it does not modify the underlying socket. However, it must be called under a write lock to ensure\n// that the socket is properly closed.\n```\n```"}, {"ID": 1602, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def request_stats(options) # Determine candidate agents agent_names = if options[:agent_name] [options[:agent_name]] else AgentConfig.cfg_agents end fail(\"No agents configured\") if agent_names.empty? # Request stats from agents count = 0 agent_names.each do |agent_name| begin count += 1 if request_agent_stats(agent_name, options) rescue Exception => e $stderr.puts \"Command to #{agent_name} agent failed (#{e})\" unless e.is_a?(SystemExit) end end $stderr.puts(\"No agents running\") if count == 0 end. \n### Response: Request and display statistics for agents\n\n === Parameters\n options(Hash):: Command line options\n\n === Return\n true:: Always return true.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: final int getAttributeCount() { int count = 0; Attribute attribute = this; while (attribute != null) { count += 1; attribute = attribute.nextAttribute; } return count; } \n### Response:", "ground_truth": "Returns the number of attributes of the attribute list that begins with this attribute.\n\n@return the number of attributes of the attribute list that begins with this attribute.", "predict": "This method returns the number of attributes in the current Attribute object.\n\n === Parameters\n attribute(Attribute):: The current Attribute object.\n\n === Return\n int:: The number of attributes in the current Attribute object.\n\n"}, {"ID": 1603, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected function refreshSession() { // Get the user; be wary of admin's logged in as other people $oSession = Factory::service('Session', 'nails/module-auth'); if ($this->wasAdmin()) { $recoveryData = $this->getAdminRecoveryData(); if (!empty($recoveryData->newUserId)) { $me = $recoveryData->newUserId; } else { $me = $oSession->getUserData('id'); } } else { $me = $oSession->getUserData('id'); } // Is anybody home? Hello...? if (!$me) { $me = $this->me; if (!$me) { return false; } } $me = $this->getById($me); // -------------------------------------------------------------------------- /** * If the user is isn't found (perhaps deleted) or has been suspended then * obviously don't proceed with the log in */ if (!$me || !empty($me->is_suspended)) { $this->clearRememberCookie(); $this->clearActiveUser(); $this->clearLoginData(); $this->bIsLoggedIn = false; return false; } // -------------------------------------------------------------------------- // Store this entire user in memory $this->setActiveUser($me); // -------------------------------------------------------------------------- // Set the user's logged in flag $this->bIsLoggedIn = true; // -------------------------------------------------------------------------- // Update user's `last_seen` and `last_ip` properties $oDb = Factory::service('Database'); $oInput = Factory::service('Input'); $oDb->set('last_seen', 'NOW()', false); $oDb->set('last_ip', $oInput->ipAddress()); $oDb->where('id', $me->id); $oDb->update($this->table); return true; }. \n### Response: Refresh the user's session from the database\n\n@return boolean.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public Set<ActionResult> getAllActionResults() { final Set<ActionResult> set = new HashSet<>(allResults.size()); allResults.forEachValue(set::add); return set; } \n### Response:", "ground_truth": "Returns all action results as new set.", "predict": "This method retrieves all the action results from the database and returns a set of them.\n\n@return Set<ActionResult> allActionResults."}, {"ID": 1604, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function UpdateOrderById($iId) { $this->sqlData['shop_module_articlelist_orderby_id'] = $iId; $this->fieldShopModuleArticlelistOrderbyId = $iId; $oItem = null; $this->SetInternalCache('oLookupshop_module_articlelist_orderby_id', $oItem); }. \n### Response: set a new order by id - we need to do this using a method so that we can\nreset the internal cache for the connected lookup.\n\n@param int $iId.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static boolean equalsOne(final char c, final CharSequence match) { for (int i = 0; i < match.length(); i++) { char aMatch = match.charAt(i); if (c == aMatch) { return true; } } return false; } \n### Response:", "ground_truth": "Match if one character equals to any of the given character.\n\n@return true if characters match any character from given array,\notherwise false", "predict": "This method is used for comparing two characters. It iterates through the characters of the first string and compares them to the characters in the second string. If any of the characters are the same, the method returns true. Otherwise, it returns false.\n\n@param char $c and CharSequence $match.\n\n"}, {"ID": 1605, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function remove_remaining($base_id, $n = 1) { $this->load_rights_bas(); if (!$this->has_access_to_base($base_id)) { return false; } $this->_rights_bas[$base_id]['remain_dwnld'] = max(0, $this->_rights_bas[$base_id]['remain_dwnld'] - (int) $n); return $this; }. \n### Response: Remove n download from the remainings\n\n@param  int $base_id\n@param  int $n\n@return ACL\n\ntodo : wtf direct cache modification, where is sql ?.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static int findFirstEqual(final CharSequence source, final int index, final CharSequence match) { for (int i = index; i < source.length(); i++) { if (equalsOne(source.charAt(i), match)) { return i; } } return -1; } \n### Response:", "ground_truth": "Finds index of the first character in given charsequence the matches any from the\ngiven set of characters.\n\n@return index of matched character or -1", "predict": "Find the first character that is equal to the specified match.\n\n@param  CharSequence $source\n@param  int $index\n@param  CharSequence $match\n@return int\n\ntodo: implement equalsOne() method.\n\nNote: This method is used in a utility class, so it may not need to be implemented in every use case."}, {"ID": 1606, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function mount() { /** * Collection of navigation HTML elements. * * @private * @type {HTMLCollection} */ this._n = Components.Html.root.querySelectorAll(NAV_SELECTOR); /** * Collection of controls HTML elements. * * @private * @type {HTMLCollection} */ this._c = Components.Html.root.querySelectorAll(CONTROLS_SELECTOR); this.addBindings(); }. \n### Response: Inits arrows. Binds events listeners\nto the arrows HTML elements.\n\n@return {Void}.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static int findFirstEqual(final char[] source, final int index, final char match) { for (int i = index; i < source.length; i++) { if (source[i] == match) { return i; } } return -1; } \n### Response:", "ground_truth": "Finds index of the first character in given array the matches any from the\ngiven set of characters.\n\n@return index of matched character or -1", "predict": "Finds the first character that is equal to the specified match.\n\n@return {int} the index of the first character that is equal to the match.\n\nNote: This method is used for character matching and is not suitable for use in a production environment. It is recommended to use more robust methods for matching characters in a production environment."}, {"ID": 1607, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def next_frame_glow_bair_qual(): \"\"\"Hparams for qualitative video generation results.\"\"\" hparams = next_frame_glow_bair_quant() hparams.coupling = \"additive\" hparams.temperature = 0.5 hparams.coupling_width = 392 return hparams. \n### Response: Hparams for qualitative video generation results..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public CommandLine args(final String... arguments) { if (arguments != null && arguments.length > 0) { Collections.addAll(cmdLine, arguments); } return this; } \n### Response:", "ground_truth": "Adds several arguments.", "predict": "This method takes in a list of String arguments and adds them to the command line arguments passed to the method."}, {"ID": 1608, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private boolean isScheduled(JobInProgress job) { return ((job.pendingMaps() < job.desiredMaps()) || (job.pendingReduces() < job.desiredReduces())); }. \n### Response: Convenience method to check if job has been scheduled or not.\n\nThe method may return false in case of job which has failure but\nhas not failed the tip.\n@param job\n@return.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public CommandLine env(final String key, final String value) { if (env == null) { env = new HashMap<>(); } env.put(key, value); return this; } \n### Response:", "ground_truth": "Sets environment variable.", "predict": "This method returns the current CommandLine object, which represents the command line interface for the application.\n\nThe method sets the value of a key in the environment map, and then returns the current CommandLine object. This method is useful for accessing command line options and arguments that are passed to the application.\n\n@param key\n@param value\n@return."}, {"ID": 1609, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public int addPTableOwner(ThinPhysicalTableOwner pTableOwner) { if (pTableOwner != null) { m_lTimeLastUsed = System.currentTimeMillis(); m_setPTableOwners.add(pTableOwner); pTableOwner.setPTable(this); } return m_setPTableOwners.size(); }. \n### Response: Bump the use count.\nThis doesn't have to be synchronized because getPTable in PDatabase is.\n@param pTableOwner The table owner to add.\n@return The new use count..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public ProcessRunner.ProcessResult run() { ByteArrayOutputStream baos = new ByteArrayOutputStream(); out = err = baos; try { baos.write(StringUtil.join(cmdLine, ' ').getBytes()); baos.write(StringPool.BYTES_NEW_LINE); } catch (IOException ignore) { } ProcessBuilder processBuilder = new ProcessBuilder(); processBuilder.command(cmdLine); if (cleanEnvironment) { processBuilder.environment().clear(); } if (env != null) { processBuilder.environment().putAll(env); } processBuilder.directory(workingDirectory); Process process = null; try { process = processBuilder.start(); } catch (IOException ioex) { return writeException(baos, ioex); } StreamGobbler outputGobbler = new StreamGobbler(process.getInputStream(), out, outPrefix); StreamGobbler errorGobbler = new StreamGobbler(process.getErrorStream(), err, errPrefix); outputGobbler.start(); errorGobbler.start(); int result; try { result = process.waitFor(); } catch (InterruptedException iex) { return writeException(baos, iex); } outputGobbler.waitFor(); errorGobbler.waitFor(); return new ProcessRunner.ProcessResult(result, baos.toString()); } \n### Response:", "ground_truth": "Runs command and returns process result.", "predict": "This method runs the specified command and starts a new process. It also writes the command line to a ByteArrayOutputStream and streams the output and error streams to separate ByteArrayOutputStreams. It then waits for the process to complete and returns the result and the ByteArrayOutputStream contents as a ProcessRunner.ProcessResult object. This method is useful for running external commands and is not necessary to be synchronized as the PDatabase class has a method to add a new process owner."}, {"ID": 1610, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static DescriptorProperties normalizeYaml(Map<String, Object> yamlMap) { final Map<String, String> normalized = new HashMap<>(); yamlMap.forEach((k, v) -> normalizeYamlObject(normalized, k, v)); final DescriptorProperties properties = new DescriptorProperties(true); properties.putProperties(normalized); return properties; }. \n### Response: Normalizes key-value properties from Yaml in the normalized format of the Table API..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void invoke(final Object listener, final Class listenerType) { if (listenerType == Init.class) { ((Init) listener).init(); return; } if (listenerType == Start.class) { ((Start) listener).start(); return; } if (listenerType == Ready.class) { ((Ready) listener).ready(); return; } if (listenerType == Stop.class) { ((Stop) listener).stop(); return; } throw new MadvocException(\"Invalid listener\"); } \n### Response:", "ground_truth": "Invoke the listener based on type.\nNot very OOP, but works.", "predict": "Invokes the specified listener and throws an exception if the listener type is not valid.."}, {"ID": 1611, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (p *PodContainer) EmptyEnvs() *PodContainer { p.Env = make(map[string]string) return p }. \n### Response: // EmptyEnvs initialized env to empty.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: final void copyFrom(final Frame frame) { inputLocals = frame.inputLocals; inputStack = frame.inputStack; outputStackStart = 0; outputLocals = frame.outputLocals; outputStack = frame.outputStack; outputStackTop = frame.outputStackTop; initializationCount = frame.initializationCount; initializations = frame.initializations; } \n### Response:", "ground_truth": "Sets this frame to the value of the given frame.\n\nWARNING: after this method is called the two frames share the same data structures. It is\nrecommended to discard the given frame to avoid unexpected side effects.\n\n@param frame The new frame value.", "predict": "// Copy from frame."}, {"ID": 1612, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def get_fields(cls): \"\"\" Returns a dictionary of fields and field instances for this schema. \"\"\" fields = {} for field_name in dir(cls): if isinstance(getattr(cls, field_name), Field): field = getattr(cls, field_name) field_name = field.field_name or field_name fields[field_name] = field return fields. \n### Response: Returns a dictionary of fields and field instances for this schema..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: static int getAbstractTypeFromApiFormat(final SymbolTable symbolTable, final Object type) { if (type instanceof Integer) { return CONSTANT_KIND | ((Integer) type).intValue(); } else if (type instanceof String) { String descriptor = Type.getObjectType((String) type).getDescriptor(); return getAbstractTypeFromDescriptor(symbolTable, descriptor, 0); } else { return UNINITIALIZED_KIND | symbolTable.addUninitializedType(\"\", ((Label) type).bytecodeOffset); } } \n### Response:", "ground_truth": "Returns the abstract type corresponding to the given public API frame element type.\n\n@param symbolTable the type table to use to lookup and store type {@link Symbol}.\n@param type a frame element type described using the same format as in {@link\nMethodVisitor#visitFrame}, i.e. either {@link Opcodes#TOP}, {@link Opcodes#INTEGER}, {@link\nOpcodes#FLOAT}, {@link Opcodes#LONG}, {@link Opcodes#DOUBLE}, {@link Opcodes#NULL}, or\n{@link Opcodes#UNINITIALIZED_THIS}, or the internal name of a class, or a Label designating\na NEW instruction (for uninitialized types).\n@return the abstract type corresponding to the given frame element type.", "predict": "This method returns the abstract type from the API format based on the type object passed in. It first checks if the type is an integer, then if it is, it returns the constant\\_kind and the integer value. If it's a string, it retrieves the descriptor for the type and returns the abstract type from the descriptor. If it's not an integer or a string, it adds an uninitialized type with the given code offset to the symbol table."}, {"ID": 1613, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function run() { // Setup connection $resource = curl_init(); // Set cURL options foreach ($this->settings as $option => $setting) { curl_setopt($resource, $option, $setting); } // Process headers $headers = []; foreach ($this->headers as $key => $value) { if (!empty($value)) { $headers[] = implode(' : ', [$key, $value]); } else { $this->headers[] = $key; } } // Add the headers curl_setopt($resource, CURLOPT_HTTPHEADER, $headers); // Execute cURL $response = curl_exec($resource); // Get the size of the header $header_size = curl_getinfo($resource, CURLINFO_HEADER_SIZE); // Get the header from the result $headers = substr($response, 0, $header_size); // Get the body from the result $body = substr($response, $header_size); // Get the HTTP response code from the result $responseCode = curl_getinfo($resource, CURLINFO_HTTP_CODE); // Close the connection curl_close($resource); // Create Result instance $this->result = new Result($body, $responseCode, $headers); return $this->result; }. \n### Response: Actually executes the cURL request\n\n@return Result.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private static int getAbstractTypeFromDescriptor( final SymbolTable symbolTable, final String buffer, final int offset) { String internalName; switch (buffer.charAt(offset)) { case 'V': return 0; case 'Z': case 'C': case 'B': case 'S': case 'I': return INTEGER; case 'F': return FLOAT; case 'J': return LONG; case 'D': return DOUBLE; case 'L': internalName = buffer.substring(offset + 1, buffer.length() - 1); return REFERENCE_KIND | symbolTable.addType(internalName); case '[': int elementDescriptorOffset = offset + 1; while (buffer.charAt(elementDescriptorOffset) == '[') { ++elementDescriptorOffset; } int typeValue; switch (buffer.charAt(elementDescriptorOffset)) { case 'Z': typeValue = BOOLEAN; break; case 'C': typeValue = CHAR; break; case 'B': typeValue = BYTE; break; case 'S': typeValue = SHORT; break; case 'I': typeValue = INTEGER; break; case 'F': typeValue = FLOAT; break; case 'J': typeValue = LONG; break; case 'D': typeValue = DOUBLE; break; case 'L': internalName = buffer.substring(elementDescriptorOffset + 1, buffer.length() - 1); typeValue = REFERENCE_KIND | symbolTable.addType(internalName); break; default: throw new IllegalArgumentException(); } return ((elementDescriptorOffset - offset) << DIM_SHIFT) | typeValue; default: throw new IllegalArgumentException(); } } \n### Response:", "ground_truth": "Returns the abstract type corresponding to the given type descriptor.\n\n@param symbolTable the type table to use to lookup and store type {@link Symbol}.\n@param buffer a string ending with a type descriptor.\n@param offset the start offset of the type descriptor in buffer.\n@return the abstract type corresponding to the given type descriptor.", "predict": "This method is used to retrieve the abstract type from a descriptor. It takes in a SymbolTable, a String buffer, and an int offset as input. The method first checks if the buffer contains a 'V', 'Z', 'C', 'B', 'S', 'I', 'F', 'J', 'D', or 'L' character at the given offset. If it does, it returns the corresponding integer value. If not, it checks the next character in the buffer and continues to the next case. If the buffer is empty, it throws an IllegalArgumentException. The method then checks the character at the given offset and continues to the next case. If the character is not a '[', it retrieves the element descriptor offset and continues to the next case. If the character is a '[', it retrieves the element descriptor offset and continues to the next case. If the character is not a '[', it throws an IllegalArgumentException. The method then retrieves the type value from the element descriptor offset and returns it along with the abstract type index. If the element descriptor offset is empty, it throws an IllegalArgumentException. The method returns the abstract type index and the corresponding type value."}, {"ID": 1614, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def ungrab_key(conn, wid, modifiers, key): \"\"\" Ungrabs a key that was grabbed by ``grab_key``. Similarly, it will return True on success and False on failure. When ungrabbing a key, the parameters to this function should be *precisely* the same as the parameters to ``grab_key``. :param wid: A window identifier. :type wid: int :param modifiers: A modifier mask. :type modifiers: int :param key: A keycode. :type key: int :rtype: bool \"\"\" try: for mod in TRIVIAL_MODS: conn.core.UngrabKeyChecked(key, wid, modifiers | mod).check() return True except xproto.BadAccess: return False. \n### Response: Ungrabs a key that was grabbed by ``grab_key``. Similarly, it will return\n    True on success and False on failure.\n\n    When ungrabbing a key, the parameters to this function should be\n    *precisely* the same as the parameters to ``grab_key``.\n\n    :param wid: A window identifier.\n    :type wid: int\n    :param modifiers: A modifier mask.\n    :type modifiers: int\n    :param key: A keycode.\n    :type key: int\n    :rtype: bool.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: final void setInputFrameFromApiFormat( final SymbolTable symbolTable, final int numLocal, final Object[] local, final int numStack, final Object[] stack) { int inputLocalIndex = 0; for (int i = 0; i < numLocal; ++i) { inputLocals[inputLocalIndex++] = getAbstractTypeFromApiFormat(symbolTable, local[i]); if (local[i] == Opcodes.LONG || local[i] == Opcodes.DOUBLE) { inputLocals[inputLocalIndex++] = TOP; } } while (inputLocalIndex < inputLocals.length) { inputLocals[inputLocalIndex++] = TOP; } int numStackTop = 0; for (int i = 0; i < numStack; ++i) { if (stack[i] == Opcodes.LONG || stack[i] == Opcodes.DOUBLE) { ++numStackTop; } } inputStack = new int[numStack + numStackTop]; int inputStackIndex = 0; for (int i = 0; i < numStack; ++i) { inputStack[inputStackIndex++] = getAbstractTypeFromApiFormat(symbolTable, stack[i]); if (stack[i] == Opcodes.LONG || stack[i] == Opcodes.DOUBLE) { inputStack[inputStackIndex++] = TOP; } } outputStackTop = 0; initializationCount = 0; } \n### Response:", "ground_truth": "Sets the input frame from the given public API frame description.\n\n@param symbolTable the type table to use to lookup and store type {@link Symbol}.\n@param numLocal the number of local variables.\n@param local the local variable types, described using the same format as in {@link\nMethodVisitor#visitFrame}.\n@param numStack the number of operand stack elements.\n@param stack the operand stack types, described using the same format as in {@link\nMethodVisitor#visitFrame}.", "predict": "Set input frames from the API format.\n\nThis method takes in a SymbolTable, the number of local variables, the type of each local variable, and the number of stack variables, and sets the input local and stack frames based on the API format.\n\nIt initializes the output stack to the top and sets the initialization count to 0.\n\n:param symbolTable: A SymbolTable object.\n:type symbolTable: java.lang.Class<T>\n:param numLocal: The number of local variables.\n:type numLocal: int\n:param local: An array of AbstractType objects representing the type of each local variable.\n:type local: java.lang.Object[]\n:param numStack: The number of stack variables.\n:type numStack: int\n:param stack: An array of AbstractType objects representing the type of each stack variable.\n:type stack: java.lang.Object[]\n:param inputLocalIndex: An integer variable to store the index of the input local array.\n:type inputLocalIndex: int\n:param inputStackIndex: An integer variable to store the index of the input stack array.\n:type inputStackIndex: int\n:param numStackTop: An integer variable to store the number of top elements in the input stack array.\n:type numStackTop: int\n:param outputStackTop: An integer variable to store the top element of the output stack array.\n:type outputStackTop: int\n:rtype: void."}, {"ID": 1615, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void readDefinitions() { for (MapRow row : m_tables.get(\"TTL\")) { Integer id = row.getInteger(\"DEFINITION_ID\"); List<MapRow> list = m_definitions.get(id); if (list == null) { list = new ArrayList<MapRow>(); m_definitions.put(id, list); } list.add(row); } List<MapRow> rows = m_definitions.get(WBS_FORMAT_ID); if (rows != null) { m_wbsFormat = new SureTrakWbsFormat(rows.get(0)); } }. \n### Response: Extract definition records from the table and divide into groups..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private int getLocal(final int localIndex) { if (outputLocals == null || localIndex >= outputLocals.length) { // If this local has never been assigned in this basic block, it is still equal to its value // in the input frame. return LOCAL_KIND | localIndex; } else { int abstractType = outputLocals[localIndex]; if (abstractType == 0) { // If this local has never been assigned in this basic block, so it is still equal to its // value in the input frame. abstractType = outputLocals[localIndex] = LOCAL_KIND | localIndex; } return abstractType; } } \n### Response:", "ground_truth": "Returns the abstract type stored at the given local variable index in the output frame.\n\n@param localIndex the index of the local variable whose value must be returned.\n@return the abstract type stored at the given local variable index in the output frame.", "predict": "Retrieves the value of a local variable in the basic block."}, {"ID": 1616, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def checkForeignKeys(self, engine: Engine) -> None: \"\"\" Check Foreign Keys Log any foreign keys that don't have indexes assigned to them. This is a performance issue. \"\"\" missing = (sqlalchemy_utils.functions .non_indexed_foreign_keys(self._metadata, engine=engine)) for table, keys in missing.items(): for key in keys: logger.warning(\"Missing index on ForeignKey %s\" % key.columns). \n### Response: Check Foreign Keys\n\n        Log any foreign keys that don't have indexes assigned to them.\n        This is a performance issue..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private void setLocal(final int localIndex, final int abstractType) { // Create and/or resize the output local variables array if necessary. if (outputLocals == null) { outputLocals = new int[10]; } int outputLocalsLength = outputLocals.length; if (localIndex >= outputLocalsLength) { int[] newOutputLocals = new int[Math.max(localIndex + 1, 2 * outputLocalsLength)]; System.arraycopy(outputLocals, 0, newOutputLocals, 0, outputLocalsLength); outputLocals = newOutputLocals; } // Set the local variable. outputLocals[localIndex] = abstractType; } \n### Response:", "ground_truth": "Replaces the abstract type stored at the given local variable index in the output frame.\n\n@param localIndex the index of the output frame local variable that must be set.\n@param abstractType the value that must be set.", "predict": "Set Local\n\n        This method sets the local variable at the given index and abstract type.\n\n        It creates and/or resizes the output local variables array if necessary and sets\n        the local variable at the given index and abstract type."}, {"ID": 1617, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void onConnected(int serverSessionTimeout, String sessionId, byte[] sessionPassword, int serverId) { if (serverSessionTimeout <= 0) { closeSession(); LOGGER.error(\"Unable to reconnect to Directory Server, session 0x\" + sessionId + \" has expired\"); return; } boolean reopen = session.id == null || session.id.equals(\"\") ? false : true; session.timeOut = serverSessionTimeout; session.id = sessionId; session.password = sessionPassword; session.serverId = serverId; if(getStatus().isAlive()){ setStatus(ConnectionStatus.CONNECTED); } if(reopen){ eventThread.queueClientEvent(new ClientSessionEvent(SessionEvent.REOPEN)); } else { eventThread.queueClientEvent(new ClientSessionEvent(SessionEvent.CREATED)); } LOGGER.info(\"Session establishment complete on server \" + this.clientSocket.getRemoteSocketAddress() + \", sessionid = 0x\" + sessionId + \", session timeout = \" + session.timeOut + \", serverId=\" + session.serverId); }. \n### Response: On the DirectoryConnection setup connection to DirectoryServer.\n\n@param serverSessionTimeout\nthe session timeout.\n@param sessionId\nthe session id.\n@param sessionPassword\nthe session password.\n@param serverId\nthe remote server id..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private void push(final int abstractType) { // Create and/or resize the output stack array if necessary. if (outputStack == null) { outputStack = new int[10]; } int outputStackLength = outputStack.length; if (outputStackTop >= outputStackLength) { int[] newOutputStack = new int[Math.max(outputStackTop + 1, 2 * outputStackLength)]; System.arraycopy(outputStack, 0, newOutputStack, 0, outputStackLength); outputStack = newOutputStack; } // Pushes the abstract type on the output stack. outputStack[outputStackTop++] = abstractType; // Updates the maximum size reached by the output stack, if needed (note that this size is // relative to the input stack size, which is not known yet). short outputStackSize = (short) (outputStackStart + outputStackTop); if (outputStackSize > owner.outputStackMax) { owner.outputStackMax = outputStackSize; } } \n### Response:", "ground_truth": "Pushes the given abstract type on the output frame stack.\n\n@param abstractType an abstract type.", "predict": "Pushes an abstract type on the output stack.\n\n@param abstractType\nthe abstract type to be pushed on the output stack.\n\nNote: This method updates the maximum size reached by the output stack, if needed, based on the input stack size (which is not known yet)."}, {"ID": 1618, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private function applyQueryFilters() { if (is_array($this->queryFilter())) { $this->createQueryFilter(); } else { $this->queryFilter(); } $this->queryFilterRequest(); }. \n### Response: Apply the Query Filters.\n\n@return.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private void push(final SymbolTable symbolTable, final String descriptor) { int typeDescriptorOffset = descriptor.charAt(0) == '(' ? descriptor.indexOf(')') + 1 : 0; int abstractType = getAbstractTypeFromDescriptor(symbolTable, descriptor, typeDescriptorOffset); if (abstractType != 0) { push(abstractType); if (abstractType == LONG || abstractType == DOUBLE) { push(TOP); } } } \n### Response:", "ground_truth": "Pushes the abstract type corresponding to the given descriptor on the output frame stack.\n\n@param symbolTable the type table to use to lookup and store type {@link Symbol}.\n@param descriptor a type or method descriptor (in which case its return type is pushed).", "predict": "Pushes the specified symbol table and descriptor to the stack.\n\n@param symbolTable The symbol table to use for storing the symbols.\n@param descriptor The descriptor for the symbol.\n@return None."}, {"ID": 1619, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected function setDeliverLibs($conf) { foreach ($conf as $name => $optName) { $options = $optName; $dl = $name; if (! is_array($optName)) { // we have an deliverance service without options /* array ( 'cdn', )*/ $dl = $optName; $options = array(); } $dl = str_replace(' ', '', ucwords(str_replace('-', ' ', $dl))); $service = 'YimaJquery\\Deliveries\\\\'.$dl; if (! $this->serviceManager->has($service)) { trigger_error('Service '.$service.' not found.', E_USER_WARNING); continue; } $service = $this->serviceManager->get($service); $service->setOptions($options); $this->helper->addLibDeliver($service); } }. \n### Response: Set Deliverance library service\n\n@param array $conf Config.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private void pop(final int elements) { if (outputStackTop >= elements) { outputStackTop -= elements; } else { // If the number of elements to be popped is greater than the number of elements in the output // stack, clear it, and pop the remaining elements from the input stack. outputStackStart -= elements - outputStackTop; outputStackTop = 0; } } \n### Response:", "ground_truth": "Pops the given number of abstract types from the output frame stack.\n\n@param elements the number of abstract types that must be popped.", "predict": "Pop the elements from the output stack.\n\n@param int elements The number of elements to be popped from the stack."}, {"ID": 1620, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function action_setup_theme_wp_cli_skip_themes() { $wp_cli_filter_active_theme = function( $value ) { $skipped_themes = WP_CLI::get_runner()->config['skip-themes']; if ( true === $skipped_themes ) { return ''; } if ( ! is_array( $skipped_themes ) ) { $skipped_themes = explode( ',', $skipped_themes ); } $checked_value = $value; // Always check against the stylesheet value // This ensures a child theme can be skipped when template differs if ( false !== stripos( current_filter(), 'option_template' ) ) { $checked_value = get_option( 'stylesheet' ); } if ( '' === $checked_value || in_array( $checked_value, $skipped_themes, true ) ) { return ''; } return $value; }; $hooks = array( 'pre_option_template', 'option_template', 'pre_option_stylesheet', 'option_stylesheet', ); foreach ( $hooks as $hook ) { add_filter( $hook, $wp_cli_filter_active_theme, 999 ); } // Clean up after the TEMPLATEPATH and STYLESHEETPATH constants are defined WP_CLI::add_wp_hook( 'after_setup_theme', function() use ( $hooks, $wp_cli_filter_active_theme ) { foreach ( $hooks as $hook ) { remove_filter( $hook, $wp_cli_filter_active_theme, 999 ); } }, 0 ); }. \n### Response: Set up the filters to skip the loaded theme.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private void pop(final String descriptor) { char firstDescriptorChar = descriptor.charAt(0); if (firstDescriptorChar == '(') { pop((Type.getArgumentsAndReturnSizes(descriptor) >> 2) - 1); } else if (firstDescriptorChar == 'J' || firstDescriptorChar == 'D') { pop(2); } else { pop(1); } } \n### Response:", "ground_truth": "Pops as many abstract types from the output frame stack as described by the given descriptor.\n\n@param descriptor a type or method descriptor (in which case its argument types are popped).", "predict": "This method is used to pop the first character of a descriptor string. It checks if the first character is a '(', if so it pops the next two characters ((Type.getArgumentsAndReturnSizes(descriptor) >> 2) - 1), else if it's a 'J' or 'D' it pops the next two characters (2), and otherwise it pops the first character (1)."}, {"ID": 1621, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (t *SessionTimers) StopAll() { t.Lock() defer t.Unlock() for _, tm := range t.m { tm.Stop() } t.m = make(map[string]*time.Timer) }. \n### Response: // StopAll stops and removes all registered timers..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private void addInitializedType(final int abstractType) { // Create and/or resize the initializations array if necessary. if (initializations == null) { initializations = new int[2]; } int initializationsLength = initializations.length; if (initializationCount >= initializationsLength) { int[] newInitializations = new int[Math.max(initializationCount + 1, 2 * initializationsLength)]; System.arraycopy(initializations, 0, newInitializations, 0, initializationsLength); initializations = newInitializations; } // Store the abstract type. initializations[initializationCount++] = abstractType; } \n### Response:", "ground_truth": "Adds an abstract type to the list of types on which a constructor is invoked in the basic\nblock.\n\n@param abstractType an abstract type on a which a constructor is invoked.", "predict": "// AddInitializedType adds a new initialized type to the initializations array.."}, {"ID": 1622, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def _from_dict(cls, _dict): \"\"\"Initialize a QueryEntitiesResponse object from a json dictionary.\"\"\" args = {} if 'entities' in _dict: args['entities'] = [ QueryEntitiesResponseItem._from_dict(x) for x in (_dict.get('entities')) ] return cls(**args). \n### Response: Initialize a QueryEntitiesResponse object from a json dictionary..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private int getInitializedType(final SymbolTable symbolTable, final int abstractType) { if (abstractType == UNINITIALIZED_THIS || (abstractType & (DIM_MASK | KIND_MASK)) == UNINITIALIZED_KIND) { for (int i = 0; i < initializationCount; ++i) { int initializedType = initializations[i]; int dim = initializedType & DIM_MASK; int kind = initializedType & KIND_MASK; int value = initializedType & VALUE_MASK; if (kind == LOCAL_KIND) { initializedType = dim + inputLocals[value]; } else if (kind == STACK_KIND) { initializedType = dim + inputStack[inputStack.length - value]; } if (abstractType == initializedType) { if (abstractType == UNINITIALIZED_THIS) { return REFERENCE_KIND | symbolTable.addType(symbolTable.getClassName()); } else { return REFERENCE_KIND | symbolTable.addType(symbolTable.getType(abstractType & VALUE_MASK).value); } } } } return abstractType; } \n### Response:", "ground_truth": "Returns the \"initialized\" abstract type corresponding to the given abstract type.\n\n@param symbolTable the type table to use to lookup and store type {@link Symbol}.\n@param abstractType an abstract type.\n@return the REFERENCE_KIND abstract type corresponding to abstractType if it is\nUNINITIALIZED_THIS or an UNINITIALIZED_KIND abstract type for one of the types on which a\nconstructor is invoked in the basic block. Otherwise returns abstractType.", "predict": "This method retrieves the initialized type of the given abstract type and returns it. It checks if the abstract type is already initialized and if not, it iterates through the initializations of the abstract type and checks if each initialization is of the correct type. If it is, it returns the initialized type and if not, it adds the type to the symbol table and returns it."}, {"ID": 1623, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def _get_centroid_time(self, time_diff): \"\"\" Calculates the time difference between the date-time classes \"\"\" source_time = datetime.datetime.combine(self.date, self.time) second_diff = floor(fabs(time_diff)) microsecond_diff = int(1000. * (time_diff - second_diff)) if time_diff < 0.: source_time = source_time - datetime.timedelta( seconds=int(second_diff), microseconds=microsecond_diff) else: source_time = source_time + datetime.timedelta( seconds=int(second_diff), microseconds=microsecond_diff) self.time = source_time.time() self.date = source_time.date(). \n### Response: Calculates the time difference between the date-time classes.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: static void putAbstractType( final SymbolTable symbolTable, final int abstractType, final ByteVector output) { int arrayDimensions = (abstractType & Frame.DIM_MASK) >> DIM_SHIFT; if (arrayDimensions == 0) { int typeValue = abstractType & VALUE_MASK; switch (abstractType & KIND_MASK) { case CONSTANT_KIND: output.putByte(typeValue); break; case REFERENCE_KIND: output .putByte(ITEM_OBJECT) .putShort(symbolTable.addConstantClass(symbolTable.getType(typeValue).value).index); break; case UNINITIALIZED_KIND: output.putByte(ITEM_UNINITIALIZED).putShort((int) symbolTable.getType(typeValue).data); break; default: throw new AssertionError(); } } else { // Case of an array type, we need to build its descriptor first. StringBuilder typeDescriptor = new StringBuilder(); while (arrayDimensions-- > 0) { typeDescriptor.append('['); } if ((abstractType & KIND_MASK) == REFERENCE_KIND) { typeDescriptor .append('L') .append(symbolTable.getType(abstractType & VALUE_MASK).value) .append(';'); } else { switch (abstractType & VALUE_MASK) { case Frame.ITEM_ASM_BOOLEAN: typeDescriptor.append('Z'); break; case Frame.ITEM_ASM_BYTE: typeDescriptor.append('B'); break; case Frame.ITEM_ASM_CHAR: typeDescriptor.append('C'); break; case Frame.ITEM_ASM_SHORT: typeDescriptor.append('S'); break; case Frame.ITEM_INTEGER: typeDescriptor.append('I'); break; case Frame.ITEM_FLOAT: typeDescriptor.append('F'); break; case Frame.ITEM_LONG: typeDescriptor.append('J'); break; case Frame.ITEM_DOUBLE: typeDescriptor.append('D'); break; default: throw new AssertionError(); } } output .putByte(ITEM_OBJECT) .putShort(symbolTable.addConstantClass(typeDescriptor.toString()).index); } } \n### Response:", "ground_truth": "Put the given abstract type in the given ByteVector, using the JVMS verification_type_info\nformat used in StackMapTable attributes.\n\n@param symbolTable the type table to use to lookup and store type {@link Symbol}.\n@param abstractType an abstract type, restricted to {@link Frame#CONSTANT_KIND}, {@link\nFrame#REFERENCE_KIND} or {@link Frame#UNINITIALIZED_KIND} types.\n@param output where the abstract type must be put.\n@see JVMS\n4.7.4", "predict": "Implements a method `putAbstractType` that adds an abstract type to the symbol table. The method takes in three arguments: `symbolTable`, `abstractType`, and `ByteVector` output.\n\nThe method first checks if the abstract type has an array dimension. If so, it determines the type value and switch to the appropriate array type. If the abstract type is not an array type, it checks if it is an object type and if so, it builds the descriptor for the array type and adds it to the output. If the abstract type is not an object type, it checks if it is an array type and if so, it adds the descriptor for the array type to the output.\n\nThe method also adds the index of the constant class for the abstract type to the output if the abstract type is a constant type. If the abstract type is not a constant type, it adds the index of the constant class for the type value to the output.\n\nOverall, this method adds abstract types to the symbol table in a consistent and efficient manner."}, {"ID": 1624, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func fastAppendEncodeBase62(dst []byte, src []byte) []byte { dst = reserve(dst, stringEncodedLength) n := len(dst) fastEncodeBase62(dst[n:n+stringEncodedLength], src) return dst[:n+stringEncodedLength] }. \n### Response: // This function appends the base 62 representation of the KSUID in src to dst,\n// and returns the extended byte slice.\n// The result is left-padded with '0' bytes to always append 27 bytes to the\n// destination buffer..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override protected int pruneCache() { int count = 0; Iterator<CacheObject<K,V>> values = cacheMap.values().iterator(); while (values.hasNext()) { CacheObject co = values.next(); if (co.isExpired()) { values.remove(); count++; } } return count; } \n### Response:", "ground_truth": "Prunes expired elements from the cache. Returns the number of removed objects.", "predict": "// This method pruning the cache of all expired objects from the cache map.\n// It returns the number of expired objects.\n\nNote: The method is marked with the @Override annotation, which indicates that it is a protected method in the class that implements the interface. This means that it can be accessed from outside the class, but it is not intended to be used by other classes."}, {"ID": 1625, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func Compile(sel string) (Selector, error) { p := &parser{s: sel} compiled, err := p.parseSelectorGroup() if err != nil { return nil, err } if p.i < len(sel) { return nil, fmt.Errorf(\"parsing %q: %d bytes left over\", sel, len(sel)-p.i) } return compiled, nil }. \n### Response: // Compile parses a selector and returns, if successful, a Selector object\n// that can be used to match against html.Node objects..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void schedulePrune(final long delay) { if (pruneTimer != null) { pruneTimer.cancel(); } pruneTimer = new Timer(); pruneTimer.schedule( new TimerTask() { @Override public void run() { prune(); } }, delay, delay ); } \n### Response:", "ground_truth": "Schedules prune.", "predict": "// SchedulePrune schedules a timer to prune all nodes after a specified delay.\n// If a prune timer is already set, it is canceled and the current nodes are not updated.\n// The prune() method is called on each scheduled timer task to prune the nodes.\n\nNote: The above code is for scheduling a timer to prune all nodes after a specified delay. It does not have any method-level comments as it is a simple method that performs its task."}, {"ID": 1626, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (r *ActionResource) Register(container *restful.Container, config smolder.APIConfig, context smolder.APIContextFactory) { r.Name = \"ActionResource\" r.TypeName = \"action\" r.Endpoint = \"actions\" r.Doc = \"Manage actions\" r.Config = config r.Context = context r.Init(container, r) }. \n### Response: // Register this resource with the container to setup all the routes.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public ModuleVisitor visitModule(final String name, final int access, final String version) { if (api < Opcodes.ASM6) { throw new UnsupportedOperationException(\"This feature requires ASM6\"); } if (cv != null) { return cv.visitModule(name, access, version); } return null; } \n### Response:", "ground_truth": "Visit the module corresponding to the class.\n\n@param name the fully qualified name (using dots) of the module.\n@param access the module access flags, among {@code ACC_OPEN}, {@code ACC_SYNTHETIC} and {@code\nACC_MANDATED}.\n@param version the module version, or {@literal null}.\n@return a visitor to visit the module values, or {@literal null} if this visitor is not\ninterested in visiting this module.", "predict": "// Visit the module specified by name, access, and version. This feature requires ASM6."}, {"ID": 1627, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func Disable() { disableStats() sampler = trace.NeverSample() if traceExporter != nil { trace.UnregisterExporter(traceExporter) } enabled = false }. \n### Response: // Disable will disable instrumentation for metrics and traces..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void visitNestHost(final String nestHost) { if (api < Opcodes.ASM7) { throw new UnsupportedOperationException(\"This feature requires ASM7\"); } if (cv != null) { cv.visitNestHost(nestHost); } } \n### Response:", "ground_truth": "Visits the nest host class of the class. A nest is a set of classes of the same package that\nshare access to their private members. One of these classes, called the host, lists the other\nmembers of the nest, which in turn should link to the host of their nest. This method must be\ncalled only once and only if the visited class is a non-host member of a nest. A class is\nimplicitly its own nest, so it's invalid to call this method with the visited class name as\nargument.\n\n@param nestHost the internal name of the host class of the nest.", "predict": "// This method visits the NestHost node in the stack trace. It requires ASM7 support."}, {"ID": 1628, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def get_metadata(self): \"\"\" Build the metadata needed for importing the build :return: tuple, the metadata and the list of Output instances \"\"\" try: metadata = get_build_json()[\"metadata\"] self.build_id = metadata[\"name\"] except KeyError: self.log.error(\"No build metadata\") raise for image in self.workflow.tag_conf.unique_images: self.pullspec_image = image break for image in self.workflow.tag_conf.primary_images: # dash at first/last postition does not count if '-' in image.tag[1:-1]: self.pullspec_image = image break if not self.pullspec_image: raise RuntimeError('Unable to determine pullspec_image') metadata_version = 0 buildroot = self.get_buildroot(build_id=self.build_id) output_files = self.get_output(buildroot['id']) output = [output.metadata for output in output_files] koji_metadata = { 'metadata_version': metadata_version, 'buildroots': [buildroot], 'output': output, } self.update_buildroot_koji(buildroot, output) return koji_metadata, output_files. \n### Response: Build the metadata needed for importing the build\n\n        :return: tuple, the metadata and the list of Output instances.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void visitOuterClass(final String owner, final String name, final String descriptor) { if (cv != null) { cv.visitOuterClass(owner, name, descriptor); } } \n### Response:", "ground_truth": "Visits the enclosing class of the class. This method must be called only if the class has an\nenclosing class.\n\n@param owner internal name of the enclosing class of the class.\n@param name the name of the method that contains the class, or {@literal null} if the class is\nnot enclosed in a method of its enclosing class.\n@param descriptor the descriptor of the method that contains the class, or {@literal null} if\nthe class is not enclosed in a method of its enclosing class.", "predict": "Visit outer class\n\n        :param owner: class owner\n        :param name: class name\n        :param descriptor: class descriptor\n        :return: void\n        \"\"\"\n        if cv!= null:\n            cv.visitOuterClass(owner, name, descriptor);\n        }\n    }"}, {"ID": 1629, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def get_or_build_image(self, name: str, tag: str, dockerfile: Union[str, Callable[..., str]], *, pull=True, build_context: Optional[Path]=None): \"\"\" A proxy for commonly built images, returns them from the local system if they exist, tries to pull them if pull isn't disabled, otherwise builds them by the definition in ``dockerfile``. :param name: Name of the image :param tag: Image tag :param dockerfile: Dockerfile text or a callable (no arguments) that produces Dockerfile text :param pull: If the image is not present locally, allow pulling from registry (default is ``True``) :param build_context: A path to a folder. If it's provided, docker will build the image in the context of this folder. (eg. if ``ADD`` is needed) \"\"\" if self.image_exists(name, tag): logger.info(\"Image %s:%s exists\", name, tag) return elif pull: logger.info(\"Trying to pull image %s:%s\", name, tag) try: self.client.images.pull(name, tag=tag) logger.info(\"The image %s:%s was pulled from registry\", name, tag) return except docker.errors.APIError: logger.info(\"The image %s:%s can't be pulled, building locally.\", name, tag) if callable(dockerfile): dockerfile = dockerfile() try: if build_context is None: fileobj = BytesIO(bytes(dockerfile, \"utf-8\")) # required by the docker library self.client.images.build( fileobj=fileobj, tag=f\"{name}:{tag}\" ) else: dockerfile_file = build_context / \"dockerfile\" dockerfile_file.write_text(dockerfile) self.client.images.build( path=str(build_context.resolve()), dockerfile=dockerfile_file.name, tag=f\"{name}:{tag}\" ) dockerfile_file.unlink() except docker.errors.BuildError as e: for line in e.build_log: if isinstance(line, dict) and line.get(\"errorDetail\") and line[\"errorDetail\"].get(\"code\") in {124, 143}: raise BuildTimeoutError(f\"Installing of requirements timeouted after \" f\"{self.requirements_timeout} seconds.\") logger.exception(e) raise BuildError(\"Building docker image failed, see extra info for details.\", extra_info={ \"build_log\": e.build_log }). \n### Response: A proxy for commonly built images, returns them from the local system if they exist, tries to pull them if\n        pull isn't disabled, otherwise builds them by the definition in ``dockerfile``.\n\n        :param name: Name of the image\n        :param tag: Image tag\n        :param dockerfile: Dockerfile text or a callable (no arguments) that produces Dockerfile text\n        :param pull: If the image is not present locally, allow pulling from registry (default is ``True``)\n        :param build_context: A path to a folder. If it's provided, docker will build the image in the context\n            of this folder. (eg. if ``ADD`` is needed).\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public AnnotationVisitor visitAnnotation(final String descriptor, final boolean visible) { if (cv != null) { return cv.visitAnnotation(descriptor, visible); } return null; } \n### Response:", "ground_truth": "Visits an annotation of the class.\n\n@param descriptor the class descriptor of the annotation class.\n@param visible {@literal true} if the annotation is visible at runtime.\n@return a visitor to visit the annotation values, or {@literal null} if this visitor is not\ninterested in visiting this annotation.", "predict": "The method visitAnnotation(String descriptor, boolean visible) is a method that visits annotations on a Java object.\n\nThe method takes two arguments:\n\n* descriptor: The annotation descriptor, which is a string that contains the name and value of the annotation.\n* visible: The boolean indicating whether the annotation is visible or not.\n\nThe method returns a AnnotationVisitor object, which can be used to visit other annotations.\n\nThe method implementation is as follows:\n\n* If the object is an instance of Annotation, the method returns the AnnotationVisitor object that is associated with it.\n* If the object is not an instance of Annotation, the method returns null.\n\nThe method is useful for visiting annotations on Java objects, such as fields, methods, and constructors."}, {"ID": 1630, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function (position) { /** @type {?} */ var positionChangeData = new PositionChangeData(position, this.limitRoles); /** @type {?} */ var limitException = this.limitsService.exceedsLimit(positionChangeData); if (limitException.exceeds) { // if exceeds limits, reposition this.resetPosition = limitException.resetCoordinates; } else { this.limitsService.positionChange(positionChangeData); this._currentPosition = position; } }. \n### Response: registers a position change on the limits service, and adjusts position if necessary\n@param {?} position - the current position of the point\n@return {?}.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void visitNestMember(final String nestMember) { if (api < Opcodes.ASM7) { throw new UnsupportedOperationException(\"This feature requires ASM7\"); } if (cv != null) { cv.visitNestMember(nestMember); } } \n### Response:", "ground_truth": "Visits a member of the nest. A nest is a set of classes of the same package that share access\nto their private members. One of these classes, called the host, lists the other members of the\nnest, which in turn should link to the host of their nest. This method must be called only if\nthe visited class is the host of a nest. A nest host is implicitly a member of its own nest, so\nit's invalid to call this method with the visited class name as argument.\n\n@param nestMember the internal name of a nest member.", "predict": "This method visits the NestMember node in the ASM7 syntax tree.\n@param {String} nestMember - the name of the nested member to visit.\n@return void."}, {"ID": 1631, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func NewReferenceFromStrings(name, target string) *Reference { n := ReferenceName(name) if strings.HasPrefix(target, symrefPrefix) { target := ReferenceName(target[len(symrefPrefix):]) return NewSymbolicReference(n, target) } return NewHashReference(n, NewHash(target)) }. \n### Response: // NewReferenceFromStrings creates a reference from name and target as string,\n// the resulting reference can be a SymbolicReference or a HashReference base\n// on the target provided.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void visitInnerClass( final String name, final String outerName, final String innerName, final int access) { if (cv != null) { cv.visitInnerClass(name, outerName, innerName, access); } } \n### Response:", "ground_truth": "Visits information about an inner class. This inner class is not necessarily a member of the\nclass being visited.\n\n@param name the internal name of an inner class (see {@link Type#getInternalName()}).\n@param outerName the internal name of the class to which the inner class belongs (see {@link\nType#getInternalName()}). May be {@literal null} for not member classes.\n@param innerName the (simple) name of the inner class inside its enclosing class. May be\n{@literal null} for anonymous inner classes.\n@param access the access flags of the inner class as originally declared in the enclosing\nclass.", "predict": "// VisitInnerClass visits the inner class of a class,\n// including its name, outer class name, and inner class name.\n\n"}, {"ID": 1632, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (r *Response) Decode(resource interface{}) error { if r.BodyClosed { return errors.New(\"Body is already closed\") } if r.MediaType == nil { return errors.New(\"No media type for this response\") } if r.ResponseError != nil { return errors.New(\"Existing Response error\") } defer r.Body.Close() r.BodyClosed = true r.ResponseError = r.DecodeFrom(resource, r.Body) if r.ResponseError == nil { rels := hypermedia.Rels(resource) if err := r.Cacher.SetRels(r.Request, rels); err == nil { if cachedResource, ok := resource.(hypermedia.CachedResource); ok { cachedResource.CacheRels(rels) } } } return r.ResponseError }. \n### Response: // Decode will decode the body into the given resource, and parse the hypermedia\n// relations.  This is meant to be called after an HTTP request, and will close\n// the response body.  The decoder is set from the response's MediaType..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public FieldVisitor visitField( final int access, final String name, final String descriptor, final String signature, final Object value) { if (cv != null) { return cv.visitField(access, name, descriptor, signature, value); } return null; } \n### Response:", "ground_truth": "Visits a field of the class.\n\n@param access the field's access flags (see {@link Opcodes}). This parameter also indicates if\nthe field is synthetic and/or deprecated.\n@param name the field's name.\n@param descriptor the field's descriptor (see {@link Type}).\n@param signature the field's signature. May be {@literal null} if the field's type does not use\ngeneric types.\n@param value the field's initial value. This parameter, which may be {@literal null} if the\nfield does not have an initial value, must be an {@link Integer}, a {@link Float}, a {@link\nLong}, a {@link Double} or a {@link String} (for {@code int}, {@code float}, {@code long}\nor {@code String} fields respectively). This parameter is only used for static\nfields. Its value is ignored for non static fields, which must be initialized through\nbytecode instructions in constructors or methods.\n@return a visitor to visit field annotations and attributes, or {@literal null} if this class\nvisitor is not interested in visiting these annotations and attributes.", "predict": "// Visit each field in the current object, returning the visitor to visit the next field.\n// This method is used for object visitor interfaces such as FieldVisitor."}, {"ID": 1633, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def get_ipv6_neighbors_table(self): \"\"\"Return the IPv6 neighbors table.\"\"\" ipv6_neighbors_table = [] ipv6_neighbors_table_raw = junos_views.junos_ipv6_neighbors_table(self.device) ipv6_neighbors_table_raw.get() ipv6_neighbors_table_items = ipv6_neighbors_table_raw.items() for ipv6_table_entry in ipv6_neighbors_table_items: ipv6_entry = {elem[0]: elem[1] for elem in ipv6_table_entry[1]} ipv6_entry[\"mac\"] = napalm.base.helpers.mac(ipv6_entry.get(\"mac\")) ipv6_entry[\"ip\"] = napalm.base.helpers.ip(ipv6_entry.get(\"ip\")) ipv6_neighbors_table.append(ipv6_entry) return ipv6_neighbors_table. \n### Response: Return the IPv6 neighbors table..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static DbThreadSession getThreadSession() { DbThreadSession session = (DbThreadSession) ThreadDbSessionHolder.get(); if (session == null) { session = new DbThreadSession(); } return session; } \n### Response:", "ground_truth": "Returns existing thread session, or new one if already not exist. If session doesn't exist, it will be created\nusing default connection provider.", "predict": "public static DbThreadSession getThreadSession() {\n\tDbThreadSession session = ThreadDbSessionHolder.get();\n\tif (session == null) {\n\t\tsession = new DbThreadSession();\n\t}\n\treturn session;\n}"}, {"ID": 1634, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected function getModulesArray(\\OxidEsales\\Eshop\\Core\\Module\\ModuleVariablesLocator $variablesLocator) { $modules = (array) $variablesLocator->getModuleVariable('aModules'); return $modules; }. \n### Response: Getter for module array.\n\n@param \\OxidEsales\\Eshop\\Core\\Module\\ModuleVariablesLocator $variablesLocator\n\n@return array.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void closeThreadSession() { DbThreadSession session = (DbThreadSession) ThreadDbSessionHolder.get(); if (session != null) { session.closeSession(); } } \n### Response:", "ground_truth": "Closes thread session.", "predict": "Method for closing a DbThreadSession.\n\n@return void\n\n@param ThreadDbSessionHolder $threadDbSessionHolder\n\nNote: This method is not used directly, but it is part of the class's interface and provides a way for other methods to access the current DbThreadSession. The `ThreadDbSessionHolder` is a static variable that holds a reference to the session, and it is accessed using the `get()` method. The `if` statement checks if the session is not null, and if it is, the session is closed using the `closeSession()` method."}, {"ID": 1635, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function protectCDataSectionsFromParser($templateSource) { $parts = preg_split('/(\\<\\!\\[CDATA\\[|\\]\\]\\>)/', $templateSource, -1, PREG_SPLIT_DELIM_CAPTURE); $balance = 0; $content = ''; $resultingParts = []; foreach ($parts as $index => $part) { unset($parts[$index]); if ($balance === 0 && $part === '<![CDATA[') { $balance++; continue; } if ($balance === 0) { $resultingParts[] = $part; continue; } if ($balance === 1 && $part === ']]>') { $balance--; } if ($balance > 0 && $part === '<![CDATA[') { $balance++; } if ($balance > 0 && $part === ']]>') { $balance--; } if ($balance > 0) { $content .= $part; } if ($balance === 0 && $content !== '') { $resultingParts[] = '<f:format.base64Decode>' . base64_encode($content) . '</f:format.base64Decode>'; $content = ''; } } return implode('', $resultingParts); }. \n### Response: Encodes areas enclosed in CDATA to prevent further parsing by the Fluid engine.\nCDATA sections will appear as they are in the final rendered result.\n\n@param string $templateSource\n@return mixed.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected ActionWrapper[] createExecutionArray() { int totalInterceptors = (this.actionRuntime.getInterceptors() != null ? this.actionRuntime.getInterceptors().length : 0); int totalFilters = (this.actionRuntime.getFilters() != null ? this.actionRuntime.getFilters().length : 0); ActionWrapper[] executionArray = new ActionWrapper[totalFilters + 1 + totalInterceptors + 1]; // filters int index = 0; if (totalFilters > 0) { System.arraycopy(actionRuntime.getFilters(), 0, executionArray, index, totalFilters); index += totalFilters; } // result is executed AFTER the action AND interceptors executionArray[index++] = actionRequest -> { Object actionResult = actionRequest.invoke(); ActionRequest.this.madvocController.render(ActionRequest.this, actionResult); return actionResult; }; // interceptors if (totalInterceptors > 0) { System.arraycopy(actionRuntime.getInterceptors(), 0, executionArray, index, totalInterceptors); index += totalInterceptors; } // action executionArray[index] = actionRequest -> { actionResult = invokeActionMethod(); return actionResult; }; return executionArray; } \n### Response:", "ground_truth": "Creates execution array that will invoke all filters, actions and results\nin correct order.", "predict": "This method creates an array of ActionWrapper objects that will be executed in the order they are specified. It also includes an array of interceptors that will be executed after the actions and filters.\n\n@param ActionWrapper[] $executionArray\n@return ActionWrapper[]."}, {"ID": 1636, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def check_for_executable(supernova_args, env_vars): \"\"\" It's possible that a user might set their custom executable via an environment variable. If we detect one, we should add it to supernova's arguments ONLY IF an executable wasn't set on the command line. The command line executable must take priority. \"\"\" exe = supernova_args.get('executable', 'default') if exe != 'default': return supernova_args if 'OS_EXECUTABLE' in env_vars.keys(): supernova_args['executable'] = env_vars['OS_EXECUTABLE'] return supernova_args supernova_args['executable'] = 'nova' return supernova_args. \n### Response: It's possible that a user might set their custom executable via an\n    environment variable.  If we detect one, we should add it to supernova's\n    arguments ONLY IF an executable wasn't set on the command line.  The\n    command line executable must take priority..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected Object invokeActionMethod() throws Exception { if (actionRuntime.isActionHandlerDefined()) { actionRuntime.getActionHandler().handle(this); return null; } final Object[] params = targets.extractParametersValues(); try { return actionRuntime.getActionClassMethod().invoke(action, params); } catch(InvocationTargetException itex) { throw wrapToException(unwrapThrowable(itex)); } } \n### Response:", "ground_truth": "Invokes action method after starting all interceptors.\nAfter method invocation, all interceptors will finish, in opposite order.", "predict": "Invokes the action method and returns the result, if any.  If no action handler is defined, returns null.  If an invocation target exception is thrown, wraps it in a custom exception and throws it again.."}, {"ID": 1637, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void initialize(FacesContext context) { if (context.isProjectStage(ProjectStage.Production)) { boolean initialize = true; String elMode = WebConfigParamUtils.getStringInitParameter( context.getExternalContext(), FaceletCompositionContextImpl.INIT_PARAM_CACHE_EL_EXPRESSIONS, ELExpressionCacheMode.noCache.name()); if (!elMode.equals(ELExpressionCacheMode.alwaysRecompile.name())) { Logger.getLogger(ViewPoolProcessor.class.getName()).log( Level.INFO, FaceletCompositionContextImpl.INIT_PARAM_CACHE_EL_EXPRESSIONS + \" web config parameter is set to \\\"\" + ( (elMode == null) ? \"none\" : elMode) + \"\\\". To enable view pooling this param\"+ \" must be set to \\\"alwaysRecompile\\\". View Pooling disabled.\"); initialize = false; } long refreshPeriod = WebConfigParamUtils.getLongInitParameter(context.getExternalContext(), FaceletViewDeclarationLanguage.PARAMS_REFRESH_PERIOD, FaceletViewDeclarationLanguage.DEFAULT_REFRESH_PERIOD_PRODUCTION); if (refreshPeriod != -1) { Logger.getLogger(ViewPoolProcessor.class.getName()).log( Level.INFO, ViewHandler.FACELETS_REFRESH_PERIOD_PARAM_NAME + \" web config parameter is set to \\\"\" + Long.toString(refreshPeriod) + \"\\\". To enable view pooling this param\"+ \" must be set to \\\"-1\\\". View Pooling disabled.\"); initialize = false; } if (MyfacesConfig.getCurrentInstance(context.getExternalContext()).isStrictJsf2FaceletsCompatibility()) { Logger.getLogger(ViewPoolProcessor.class.getName()).log( Level.INFO, MyfacesConfig.INIT_PARAM_STRICT_JSF_2_FACELETS_COMPATIBILITY + \" web config parameter is set to \\\"\" + \"true\" + \"\\\". To enable view pooling this param \"+ \" must be set to \\\"false\\\". View Pooling disabled.\"); initialize = false; } if (initialize) { ViewPoolProcessor processor = new ViewPoolProcessor(context); context.getExternalContext(). getApplicationMap().put(INSTANCE, processor); } } }. \n### Response: This method should be called at startup to decide if a view processor should be\nprovided or not to the runtime.\n\n@param context.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public String readRequestBody() { if (requestBody == null) { try { requestBody = ServletUtil.readRequestBodyFromStream(getHttpServletRequest()); } catch (IOException ioex) { requestBody = StringPool.EMPTY; } } return requestBody; } \n### Response:", "ground_truth": "Reads request body only once and returns it to user.", "predict": "This method reads the request body from the HttpServletRequest and returns it as a string. It is used to parse the request body in a web application that uses Java Servlets.\n\n@param HttpServletRequest.\n\n"}, {"ID": 1638, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function op($channel, $nickname, $priority = SMARTIRC_MEDIUM) { return $this->mode($channel, '+o '.$nickname, $priority); }. \n### Response: ops an user in the given channel\n\n@param string $channel\n@param string $nickname\n@param integer $priority message priority, default is SMARTIRC_MEDIUM\n@return Net_SmartIRC\n@api.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static int calcFirstItemIndexOfPage(int page, final int pageSize, final int total) { if (total == 0) { return 0; } if (page < 1) { page = 1; } int first = (page - 1) * pageSize; if (first >= total) { first = ((total - 1) / pageSize) * pageSize; // first item on the last page } return first; } \n### Response:", "ground_truth": "Calculates the first item index of requested page.", "predict": "Calculates the index of the first item in the given page of a list.\n\n@param int page The page number, starting at 1.\n@param int pageSize The maximum number of items in the list.\n@param int total The total number of items in the list.\n@return The index of the first item in the given page, starting at 1.\n@api."}, {"ID": 1639, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function isTokenValid(string $tokenName = null): bool { // We must fetch the client here. A client will automatically refresh the stored access token. $client = $this->getClient($tokenName); if (null === $accessToken = $client->getAccessToken()) { return false; } // Get the token string from access token $token = \\json_decode($accessToken)->access_token; $url = \\sprintf('https://www.google.com/accounts/AuthSubTokenInfo?bearer_token=%s', $token); if (false === @\\file_get_contents($url)) { return false; } // Retrieve HTTP status code list($version, $statusCode, $msg) = \\explode(' ', $http_response_header[0], 3); return 200 === (int) $statusCode; }. \n### Response: Check if a token is valid.\nThis is an expensive operation that makes multiple API calls..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static int calcFirstItemIndexOfPage(final PageRequest pageRequest, final int total) { return calcFirstItemIndexOfPage(pageRequest.getPage(), pageRequest.getSize(), total); } \n### Response:", "ground_truth": "Calculates first item index of the page.", "predict": "This method calculates the first item index of the page in the given page request."}, {"ID": 1640, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function isTethered(): bool { $parent = $this->getParent(); if ($parent === null) { return false; } if (array_key_exists($this->getName(), $parent->getNodeType()->getAutoCreatedChildNodes())) { return true; } return false; }. \n### Response: Whether or not this node is tethered to its parent, fka auto created child node\n\n@return bool.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public boolean match(final int value) { if (a == 0) { return value == b; } if (a > 0) { if (value < b) { return false; } return (value - b) % a == 0; } if (value > b) { return false; } return (b - value) % (-a) == 0; } \n### Response:", "ground_truth": "Matches expression with the value.", "predict": "This method matches an integer value between two given values. It performs the following steps:\n\n1. If both values are equal to 0, the method returns true.\n2. If one of the values is greater than 0, the method checks if the other value is less than the first value. If true, the method returns false.\n3. If both values are less than or equal to 0, the method returns the difference between the two values divided by the smaller of the two values.\n4. If one of the values is greater than the other value, the method returns false.\n5. If the two values are not equal, the method returns the difference between the two values divided by the absolute value of the smaller value.\n\n@return boolean."}, {"ID": 1641, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (s *GetResourceConfigHistoryInput) SetEarlierTime(v time.Time) *GetResourceConfigHistoryInput { s.EarlierTime = &v return s }. \n### Response: // SetEarlierTime sets the EarlierTime field's value..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static byte[] toRawByteArray(final char[] carr) { byte[] barr = new byte[carr.length << 1]; for (int i = 0, bpos = 0; i < carr.length; i++) { char c = carr[i]; barr[bpos++] = (byte) ((c & 0xFF00) >> 8); barr[bpos++] = (byte) (c & 0x00FF); } return barr; } \n### Response:", "ground_truth": "Converts char array into byte array by replacing each character with two bytes.", "predict": "// ToRawByteArray returns a raw byte array containing the characters in the given char array.."}, {"ID": 1642, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private Bucket getCachedBucket(final String name) { Bucket cachedBucket = bucketCache.get(name); if(cachedBucket != null) { if (cachedBucket.isClosed()) { LOGGER.debug(\"Not returning cached bucket \\\"{}\\\", because it is closed.\", name); bucketCache.remove(name); } else { LOGGER.debug(\"Returning still open, cached bucket \\\"{}\\\"\", name); return cachedBucket; } } return null; }. \n### Response: Helper method to get a bucket instead of opening it if it is cached already.\n\n@param name the name of the bucket\n@return the cached bucket if found, null if not..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static int findFirstDiff(final char[] source, final int index, final char[] match) { for (int i = index; i < source.length; i++) { if (!equalsOne(source[i], match)) { return i; } } return -1; } \n### Response:", "ground_truth": "Finds index of the first character in given array the differs from the\ngiven set of characters.\n\n@return index of matched character or -1", "predict": "This is a static method that finds the first difference between two characters in a string.\n\n@param source the input string\n@param index the starting index of the input string\n@param match the input string\n@return the index of the first difference, or -1 if no difference is found.\n\nThis method uses a for loop to iterate through the input string and compare each character with the corresponding character in the match string. If a match is found, the method returns the index of the first difference. If no match is found, the method returns -1."}, {"ID": 1643, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function fill($attributes) { // Some context types have varying types if ($this->hasGetMutator('type')) { $this->type = $this->mutateAttribute('type', $this->getArrValue($attributes, 'type', $this->type)); } // Set properties $properties = array_merge([ '@context' => 'http://schema.org', '@type' => $this->type, 'sameAs' => null ], $this->structure, $this->extendStructure); // Set properties from attributes foreach ($properties as $key => $property) { $this->setProperty($key, $property, $this->getArrValue($attributes, $key, '')); } // After fill event $this->afterFill($attributes); }. \n### Response: Creates an array of schema.org attribute from attributes.\n\n@param array $attributes.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected String resolveNodeName(final Node node) { switch (tagCase) { case DEFAULT: return node.getNodeName(); case RAW: return node.getNodeRawName(); case LOWERCASE: return node.getNodeRawName().toLowerCase(); case UPPERCASE: return node.getNodeRawName().toUpperCase(); } return null; } \n### Response:", "ground_truth": "Renders node name.", "predict": "This method is used to resolve the name of a node in a graph. It uses a switch statement to handle different cases based on the tag of the node. The method returns null in case the node has no name or if the tag case is not handled.\n\n@param Node $node."}, {"ID": 1644, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def posterior_marginal(self, idx_param=0, res=100, smoothing=0, range_min=None, range_max=None): \"\"\" Returns an estimate of the marginal distribution of a given model parameter, based on taking the derivative of the interpolated cdf. :param int idx_param: Index of parameter to be marginalized. :param int res1: Resolution of of the axis. :param float smoothing: Standard deviation of the Gaussian kernel used to smooth; same units as parameter. :param float range_min: Minimum range of the output axis. :param float range_max: Maximum range of the output axis. .. seealso:: :meth:`SMCUpdater.plot_posterior_marginal` \"\"\" # We need to sort the particles to get cumsum to make sense. # interp1d would do it anyways (using argsort, too), so it's not a waste s = np.argsort(self.particle_locations[:,idx_param]) locs = self.particle_locations[s,idx_param] # relevant axis discretization r_min = np.min(locs) if range_min is None else range_min r_max = np.max(locs) if range_max is None else range_max ps = np.linspace(r_min, r_max, res) # interpolate the cdf of the marginal distribution using cumsum interp = scipy.interpolate.interp1d( np.append(locs, r_max + np.abs(r_max-r_min)), np.append(np.cumsum(self.particle_weights[s]), 1), #kind='cubic', bounds_error=False, fill_value=0, assume_sorted=True ) # get distribution from derivative of cdf, and smooth it pr = np.gradient(interp(ps), ps[1]-ps[0]) if smoothing > 0: gaussian_filter1d(pr, res*smoothing/(np.abs(r_max-r_min)), output=pr) del interp return ps, pr. \n### Response: Returns an estimate of the marginal distribution of a given model parameter, based on\n        taking the derivative of the interpolated cdf.\n\n        :param int idx_param: Index of parameter to be marginalized.\n        :param int res1: Resolution of of the axis.\n        :param float smoothing: Standard deviation of the Gaussian kernel\n            used to smooth; same units as parameter.\n        :param float range_min: Minimum range of the output axis.\n        :param float range_max: Maximum range of the output axis.\n\n        .. seealso::\n\n            :meth:`SMCUpdater.plot_posterior_marginal`.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected String resolveAttributeName(final Node node, final Attribute attribute) { switch (attributeCase) { case DEFAULT: return attribute.getName(); case RAW: return attribute.getRawName(); case LOWERCASE: return attribute.getRawName().toLowerCase(); case UPPERCASE: return attribute.getRawName().toUpperCase(); } return null; } \n### Response:", "ground_truth": "Renders attribute name.", "predict": "```\n    protected String resolveAttributeName(final Node node, final Attribute attribute) {\n        switch (attributeCase) {\n            case DEFAULT: return attribute.getName();\n            case RAW: return attribute.getRawName();\n            case  LowerCase: return attribute.getRawName().toLowerCase();\n            case UpperCase: return attribute.getRawName().toUpperCase();\n            default:\n                return null;\n        }\n    }\n```"}, {"ID": 1645, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function(joint){ var remove=joint; var prev=remove.prev; var next=remove.next; if(prev!==null)prev.next=next; if(next!==null)next.prev=prev; if(this.joints==remove)this.joints=next; remove.prev=null; remove.next=null; this.numJoints--; remove.awake(); remove.detach(); remove.parent=null; }. \n### Response: I will remove the joint from the world.\nJoint that has been added will be the operands of each step.\n@param  shape Joint to be deleted.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void renderAttribute(final Node node, final Attribute attribute, final Appendable appendable) throws IOException { String name = resolveAttributeName(node, attribute); String value = attribute.getValue(); appendable.append(name); if (value != null) { appendable.append('='); appendable.append('\\\"'); appendable.append(HtmlEncoder.attributeDoubleQuoted(value)); appendable.append('\\\"'); } } \n### Response:", "ground_truth": "Renders attribute.", "predict": "This method renders an attribute of a node. It first resolves the name of the attribute using `resolveAttributeName(node, attribute)`. It then retrieves the value of the attribute using `attribute.getValue()`. If the value is not null, it appends it to the appendable using `append(name)`. Finally, it adds a double-quote character before and after the value to indicate that it is an attribute value."}, {"ID": 1646, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def mimetype(wobj) s = @epub.mimetype if !s.nil? && !wobj.nil? wobj.print s end end. \n### Response: Write mimetype file to IO object +wobj+..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public Props load(final File file) throws IOException { final String extension = FileNameUtil.getExtension(file.getAbsolutePath()); final String data; if (extension.equalsIgnoreCase(\"properties\")) { data = FileUtil.readString(file, StringPool.ISO_8859_1); } else { data = FileUtil.readString(file); } parse(data); return this; } \n### Response:", "ground_truth": "Loads props from the file. Assumes UTF8 encoding unless\nthe file ends with '.properties', than it uses ISO 8859-1.", "predict": "Loads the contents of the specified file as Props object.."}, {"ID": 1647, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: async def check_permission(bot: NoneBot, ctx: Context_T, permission_required: int) -> bool: \"\"\" Check if the context has the permission required. :param bot: NoneBot instance :param ctx: message context :param permission_required: permission required :return: the context has the permission \"\"\" min_ctx_kwargs = {} for field in _min_context_fields: if field in ctx: min_ctx_kwargs[field] = ctx[field] else: min_ctx_kwargs[field] = None min_ctx = _MinContext(**min_ctx_kwargs) return await _check(bot, min_ctx, permission_required). \n### Response: Check if the context has the permission required.\n\n    :param bot: NoneBot instance\n    :param ctx: message context\n    :param permission_required: permission required\n    :return: the context has the permission.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public Props load(final File file, final String encoding) throws IOException { parse(FileUtil.readString(file, encoding)); return this; } \n### Response:", "ground_truth": "Loads properties from the file in provided encoding.", "predict": "public Props load(final File file, final String encoding) throws IOException {\n    parse(FileUtil.readString(file, encoding));\n    return this;\n}"}, {"ID": 1648, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public int writeMultipleRegisters(int unitId, int ref, Register[] registers) throws ModbusException { checkTransaction(); if (writeMultipleRegistersRequest == null) { writeMultipleRegistersRequest = new WriteMultipleRegistersRequest(); } writeMultipleRegistersRequest.setUnitID(unitId); writeMultipleRegistersRequest.setReference(ref); writeMultipleRegistersRequest.setRegisters(registers); transaction.setRequest(writeMultipleRegistersRequest); transaction.execute(); return ((WriteMultipleRegistersResponse) transaction.getResponse()).getWordCount(); }. \n### Response: Writes a number of registers to the slave.\n\n@param unitId    the slave unit id.\n@param ref       the offset of the register to start writing to.\n@param registers a Register[] holding the values of\nthe registers to be written.\n\n@return the number of registers that have been written.\n\n@throws ModbusException if an I/O error, a slave exception or\na transaction error occurs..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public Props load(final InputStream in) throws IOException { final Writer out = new FastCharArrayWriter(); StreamUtil.copy(in, out); parse(out.toString()); return this; } \n### Response:", "ground_truth": "Loads properties from input stream. Stream is not closed at the end.", "predict": "Loads a Props object from the input stream.\n\n@param in   the input stream to read the Props from.\n\n@return the loaded Props object.\n\n@throws IOException if the input stream is not readable or writable."}, {"ID": 1649, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def version(self): \"\"\"Fetch version information from all plugins and store in the report version file\"\"\" versions = [] versions.append(\"sosreport: %s\" % __version__) for plugname, plug in self.loaded_plugins: versions.append(\"%s: %s\" % (plugname, plug.version)) self.archive.add_string(content=\"\\n\".join(versions), dest='version.txt'). \n### Response: Fetch version information from all plugins and store in the report\n        version file.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public Props load(final Map<?, ?> p) { for (final Map.Entry<?, ?> entry : p.entrySet()) { final String name = entry.getKey().toString(); final Object value = entry.getValue(); if (value == null) { continue; } data.putBaseProperty(name, value.toString(), false); } return this; } \n### Response:", "ground_truth": "Loads base properties from the provided java properties.\nNull values are ignored.", "predict": "Loads the properties data from the specified map and stores it in the `Props` object. Returns the `Props` object."}, {"ID": 1650, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def build_plans(self): \"\"\" Gets the Build Plans API client. Returns: BuildPlans: \"\"\" if not self.__build_plans: self.__build_plans = BuildPlans(self.__connection) return self.__build_plans. \n### Response: Gets the Build Plans API client.\n\n        Returns:\n            BuildPlans:.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @SuppressWarnings(\"unchecked\") public Props load(final Map<?, ?> map, final String prefix) { String realPrefix = prefix; realPrefix += '.'; for (final Map.Entry entry : map.entrySet()) { final String name = entry.getKey().toString(); final Object value = entry.getValue(); if (value == null) { continue; } data.putBaseProperty(realPrefix + name, value.toString(), false); } return this; } \n### Response:", "ground_truth": "Loads base properties from java Map using provided prefix.\nNull values are ignored.", "predict": "Loads the Props data from the specified map and prefix.\n\n        Loads the Props data from the specified map and prefix.\n\n"}, {"ID": 1651, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def num_species(self): \"\"\" Returns the number of species found over all records \"\"\" all_headers = reduce(lambda x, y: set(x) | set(y), (rec.get_names() for rec in self.records)) return len(all_headers). \n### Response: Returns the number of species found over all records.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public Props loadFromClasspath(final String... patterns) { ClassScanner.create() .registerEntryConsumer(entryData -> { String usedEncoding = JoddCore.encoding; if (StringUtil.endsWithIgnoreCase(entryData.name(), \".properties\")) { usedEncoding = StringPool.ISO_8859_1; } final String encoding = usedEncoding; UncheckedException.runAndWrapException(() -> load(entryData.openInputStream(), encoding)); }) .includeResources(true) .ignoreException(true) .excludeCommonJars() .excludeAllEntries(true) .includeEntries(patterns) .scanDefaultClasspath() .start(); return this; } \n### Response:", "ground_truth": "Loads props and properties from the classpath.", "predict": "Loads properties from the classpath and scans for specified patterns."}, {"ID": 1652, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function handler(notification) { debug('summoner received a mention notification!'); return notification.getUser() .then((user) => { debug(`summoner responding to summons by ${user.name}`); const index = Math.floor(Math.random() * messages.length); const message = messages[index].replace(/%(\\w+)%/g, (_, key) => { let value = user[key]; if (key === 'name' && !value) { value = user.username; } value = value || `%${key}%`; if (typeof value !== 'string') { value = `%${key}%`; } return value; }); debug(`summoner replying with: ${message}`); return forum.Post.reply(notification.topicId, notification.postId, message); }).catch((err) => { forum.emit('error', err); return Promise.reject(err); }); }. \n### Response: Handle a mention notification.\n\nChoose a random message and reply with it\n\n@param {Notification} notification Notification event to handle\n@returns {Promise} Resolves when event is processed.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public String getValueOrDefault(final String key, final String defaultValue) { initialize(); final String value = data.lookupValue(key, activeProfiles); if (value == null) { return defaultValue; } return value; } \n### Response:", "ground_truth": "Returns value of property, using active profiles or default value if not found.", "predict": "Retrieves the value of a key from the data object.\n\n@param {String} key The key to retrieve the value from.\n@param {String} defaultValue The default value to return if the key is not found in the data object.\n@return {String} The value of the key or the default value if the key is not found.\n\n"}, {"ID": 1653, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def infer_declared(ms, namespace=None): '''Retrieves any declared information from the given macaroons and returns it as a key-value map. Information is declared with a first party caveat as created by declared_caveat. If there are two caveats that declare the same key with different values, the information is omitted from the map. When the caveats are later checked, this will cause the check to fail. namespace is the Namespace used to retrieve the prefix associated to the uri, if None it will use the STD_NAMESPACE only. ''' conditions = [] for m in ms: for cav in m.caveats: if cav.location is None or cav.location == '': conditions.append(cav.caveat_id_bytes.decode('utf-8')) return infer_declared_from_conditions(conditions, namespace). \n### Response: Retrieves any declared information from the given macaroons and returns\n    it as a key-value map.\n    Information is declared with a first party caveat as created by\n    declared_caveat.\n\n    If there are two caveats that declare the same key with different values,\n    the information is omitted from the map. When the caveats are later\n    checked, this will cause the check to fail.\n    namespace is the Namespace used to retrieve the prefix associated to the\n    uri, if None it will use the STD_NAMESPACE only..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void setValue(final String key, final String value, final String profile) { if (profile == null) { data.putBaseProperty(key, value, false); } else { data.putProfileProperty(key, value, profile, false); } initialized = false; } \n### Response:", "ground_truth": "Sets value on some profile.", "predict": "setValue() sets the value of a property in the data object.\n\nIt checks if the profile is null and if so, it sets the base property with the value and sets the initialized flag to false. If the profile is not null, it sets the profile property with the value and sets the initialized flag to true.\n\nNote that this method only sets the value of the property and does not update any other properties in the data object.\n\nNote that this method is used in the putBaseProperty() and putProfileProperty() methods of the data object."}, {"ID": 1654, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func MinAbs(x ...*decimal.Big) *decimal.Big { m := x[0] for _, v := range x[1:] { if v.CmpAbs(m) < 0 { m = v } } return m }. \n### Response: // MinAbs returns the lesser of the absolute value of the provided values. The\n// result is undefined if no values are provided..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void extractProps(final Map target) { initialize(); data.extract(target, activeProfiles, null, null); } \n### Response:", "ground_truth": "Extracts props belonging to active profiles.", "predict": "// Extracts properties from the specified target map and adds them to the active profiles.\n// Initializes the data extractor by calling the `initialize()` method.\n// The `extract()` method calls the `data.extract()` method with the specified arguments.\n// The `activeProfiles` argument is optional and is used to specify which profiles to include in the\n// extracted properties. The `null` arguments are used to specify any additional context or\n// information that may be relevant for the extracted properties."}, {"ID": 1655, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function hasSub($name, $ns = null) { foreach ($this->subs as $sub) { if (($name === \"*\" or $sub->name === $name) and ($ns === null or $sub->ns === $ns)) { return true; } } return false; }. \n### Response: Has this XML Object the given sub?\n\n@param string $name\n@return boolean.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void extractProps(final Map target, final String... profiles) { initialize(); data.extract(target, profiles, null, null); } \n### Response:", "ground_truth": "Extract props of given profiles.", "predict": "Extracts properties from the given data and stores them in the target map.\n\n@param Map $target\n@param String... $profiles\n@return void."}, {"ID": 1656, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public MonitoringPoint getRelatedMonitoringPoint( String pfafStetter ) { if (pfafStetter != null) { return pfafRelatedMonitoringPointsTable.get(pfafStetter); } else { Set<String> keySet = pfafRelatedMonitoringPointsTable.keySet(); for( String key : keySet ) { return pfafRelatedMonitoringPointsTable.get(key); } return null; } }. \n### Response: Get the related monitoringpoint. If there are more than one, the pfafstetter number is used\nto chose.\n\n@param pfafStetter used to chose in the points table. Can be null, in which case the first\nfound is taken (should be used only if there is only one point in the table)\n@return the related point.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void extractSubProps(final Map target, final String... wildcardPatterns) { initialize(); data.extract(target, activeProfiles, wildcardPatterns, null); } \n### Response:", "ground_truth": "Extracts subset of properties that matches given wildcards.", "predict": "Extracts sub-properties from the given target and specifies the wildcard patterns to match.\n\n@param target the map to extract sub-properties from.\n@param wildcardPatterns the list of wildcard patterns to match against the target.\n@return void.\n\nNote: This method is used for extracting sub-properties from the given target and wildcard patterns. It initializes the data object and then calls the extract method with the target, activeProfiles, and wildcard patterns as arguments. The extract method then extracts the sub-properties from the target and returns them. If there are any sub-properties to be extracted, they will be added to the data object."}, {"ID": 1657, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function fetchObject( $class = null, $table, $fields, $where = null, $options = [] ) { if (is_null($class)) { $class = 'StdClass'; } elseif (is_object($class)) { $class = get_class($class); } if (is_scalar($fields)) { $fields = explode(',', $fields); } $query = new Select( $this, $table, $fields, new Where($where), new Options($options) ); $stmt = $this->prepare($query->__toString()); $stmt->execute($query->getBindings()); $result = $stmt->fetchObject($class); if (!$result) { throw new SelectException($stmt->queryString); } return $result; }. \n### Response: Retrieve a single row as an object.\n\n@param mixed $class Classname, object or null (defaults to StdClass) to\nselect into.\n@param string $table The table(s) to query.\n@param string $field The field (column) to query.\n@param array $where An SQL where-array.\n@param array $options Array of options.\n@return mixed An object of the desired class initialized with the row's\nvalues.\n@throws Dabble\\Query\\SelectException when no row was found.\n@throws Dabble\\Query\\SqlException on error..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @SuppressWarnings(\"unchecked\") public Map<String, Object> innerMap(final String prefix) { initialize(); return data.extract(null, activeProfiles, null, prefix); } \n### Response:", "ground_truth": "Returns inner map from the props with given prefix. Keys in returned map\nwill not have the prefix.", "predict": "Retrieve a map with the specified prefix.\n\n@param string $prefix The prefix to store the map keys.\n@return Map<string, Object> with the keys stored in the specified prefix.\n@throws Dabble\\Query\\Exception\\KeyException when the key is not found.\n@throws Dabble\\Query\\Exception\\ValueException when the value is not found.\n@throws Dabble\\Query\\Exception\\QueryException on error.\n\nNote: This method is unchecked because it uses the extract method of the data class, which may not be thread-safe."}, {"ID": 1658, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def hasattrs(object, *names): \"\"\" Takes in an object and a variable length amount of named attributes, and checks to see if the object has each property. If any of the attributes are missing, this returns false. :param object: an object that may or may not contain the listed attributes :param names: a variable amount of attribute names to check for :return: True if the object contains each named attribute, false otherwise \"\"\" for name in names: if not hasattr(object, name): return False return True. \n### Response: Takes in an object and a variable length amount of named attributes,\n    and checks to see if the object has each property. If any of the\n    attributes are missing, this returns false.\n\n    :param object: an object that may or may not contain the listed attributes\n    :param names: a variable amount of attribute names to check for\n    :return: True if the object contains each named attribute, false otherwise.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void addInnerMap(String prefix, final Map<?, ?> map, final String profile) { if (!StringUtil.endsWithChar(prefix, '.')) { prefix += StringPool.DOT; } for (Map.Entry<?, ?> entry : map.entrySet()) { String key = entry.getKey().toString(); key = prefix + key; setValue(key, entry.getValue().toString(), profile); } } \n### Response:", "ground_truth": "Adds child map to the props on given prefix.", "predict": "Adds an inner map to the specified prefix, and sets the values of each key-value pair in the map to the corresponding string value, as well as the specified profile.\n\n    :param prefix: the prefix to add the inner map to\n    :param map: a Map<String, String> that contains the key-value pairs to add the inner map to\n    :param profile: the profile to use for the values in the inner map\n    :return: None\n\n    If the prefix is not already ends with a dot, it is added one.\n    If the map is empty, it is added with the key \".\"\n    If the key-value pair is not found in the map, it is added with the key \".\" and the value \"\"\n    If the key-value pair is not found in the map, it is added with the key \".\" and the value \"\" and the profile is set to the value of the key."}, {"ID": 1659, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def draw(self): \"\"\"Draws cell content to context\"\"\" # Content is only rendered within rect self.context.save() self.context.rectangle(*self.rect) self.context.clip() content = self.get_cell_content() pos_x, pos_y = self.rect[:2] self.context.translate(pos_x + 2, pos_y + 2) cell_attributes = self.code_array.cell_attributes # Do not draw cell content if cell is too small # This allows blending out small cells by reducing height to 0 if self.rect[2] < cell_attributes[self.key][\"borderwidth_right\"] or \\ self.rect[3] < cell_attributes[self.key][\"borderwidth_bottom\"]: self.context.restore() return if self.code_array.cell_attributes[self.key][\"button_cell\"]: # Render a button instead of the cell label = self.code_array.cell_attributes[self.key][\"button_cell\"] self.draw_button(1, 1, self.rect[2]-5, self.rect[3]-5, label) elif isinstance(content, wx._gdi.Bitmap): # A bitmap is returned --> Draw it! self.draw_bitmap(content) elif pyplot is not None and isinstance(content, pyplot.Figure): # A matplotlib figure is returned --> Draw it! self.draw_matplotlib_figure(content) elif isinstance(content, basestring) and is_svg(content): # The content is a vaid SVG xml string self.draw_svg(content) elif content is not None: self.draw_text(content) self.context.translate(-pos_x - 2, -pos_y - 2) # Remove clipping to rect self.context.restore(). \n### Response: Draws cell content to context.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void resolveActiveProfiles() { if (activeProfilesProp == null) { activeProfiles = null; return; } final PropsEntry pv = data.getBaseProperty(activeProfilesProp); if (pv == null) { // no active profile set as the property, exit return; } final String value = pv.getValue(); if (StringUtil.isBlank(value)) { activeProfiles = null; return; } activeProfiles = StringUtil.splitc(value, ','); StringUtil.trimAll(activeProfiles); } \n### Response:", "ground_truth": "Resolves active profiles from special property.\nThis property can be only a base property!\nIf default active property is not defined, nothing happens.\nOtherwise, it will replace currently active profiles.", "predict": "Resolves the active profiles property based on the value set in the activeProfilesProp field."}, {"ID": 1660, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @NonNull @Override public List<Object> toList() { final List<Object> array = new ArrayList<>(); for (int i = 0; i < count(); i++) { array.add(values.get(i).asObject()); } return array; }. \n### Response: Gets all values as an List. The value types of the values contained\nin the returned List object are Array, Blob, Dictionary, Number types, String, and null.\n\n@return The List representing all values..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public String[] getAllProfiles() { String[] profiles = new String[data.profileProperties.size()]; int index = 0; for (String profileName : data.profileProperties.keySet()) { profiles[index] = profileName; index++; } return profiles; } \n### Response:", "ground_truth": "Returns all profiles names.", "predict": "This method returns an array of all the profile names stored in the \"data.profileProperties\" object.\n\n@return An array of all the profile names stored in the \"data.profileProperties\" object.\n\n"}, {"ID": 1661, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function isRequestingSingleDataTable() { $requestArray = $this->request->getRequestArray() + $_GET + $_POST; $date = Common::getRequestVar('date', null, 'string', $requestArray); $period = Common::getRequestVar('period', null, 'string', $requestArray); $idSite = Common::getRequestVar('idSite', null, 'string', $requestArray); if (Period::isMultiplePeriod($date, $period) || strpos($idSite, ',') !== false || $idSite == 'all' ) { return false; } return true; }. \n### Response: Returns `true` if this instance will request a single DataTable, `false` if requesting\nmore than one.\n\n@return bool.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public String[] getProfilesFor(final String propKeyNameWildcard) { HashSet<String> profiles = new HashSet<>(); profile: for (Map.Entry<String, Map<String, PropsEntry>> entries : data.profileProperties.entrySet()) { String profileName = entries.getKey(); Map<String, PropsEntry> value = entries.getValue(); for (String propKeyName : value.keySet()) { if (Wildcard.equalsOrMatch(propKeyName, propKeyNameWildcard)) { profiles.add(profileName); continue profile; } } } return profiles.toArray(new String[0]); } \n### Response:", "ground_truth": "Returns all the profiles that define certain prop's key name.\nKey name is given as a wildcard, or it can be matched fully.", "predict": "Returns an array of profiles for the specified wildcard property.\n\n@return String[].\n\n"}, {"ID": 1662, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def all_valid(formsets): \"\"\"Returns true if every formset in formsets is valid.\"\"\" valid = True for formset in formsets: if not formset.is_valid(): valid = False return valid. \n### Response: Returns true if every formset in formsets is valid..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void addPropertyInjectionPoint(final PropertyInjectionPoint pip) { if (properties == null) { properties = new PropertyInjectionPoint[1]; properties[0] = pip; } else { properties = ArraysUtil.append(properties, pip); } } \n### Response:", "ground_truth": "Adds property injection point.", "predict": "Adds a new PropertyInjectionPoint to the properties array if it is not already present."}, {"ID": 1663, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def send(self, message): \"\"\"Send a handover request message to the remote server.\"\"\" log.debug(\"sending '{0}' message\".format(message.type)) send_miu = self.socket.getsockopt(nfc.llcp.SO_SNDMIU) try: data = str(message) except nfc.llcp.EncodeError as e: log.error(\"message encoding failed: {0}\".format(e)) else: return self._send(data, send_miu). \n### Response: Send a handover request message to the remote server..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void addSetInjectionPoint(final SetInjectionPoint sip) { if (sets == null) { sets = new SetInjectionPoint[1]; sets[0] = sip; } else { sets = ArraysUtil.append(sets, sip); } } \n### Response:", "ground_truth": "Adds set injection point.", "predict": "Add a method named \"addSetInjectionPoint\" to a class named \"SetInjectionPoint\" that takes a \"sip\" parameter and adds it to a \"sets\" array. The method should be marked with a method-level comment explaining what it does."}, {"ID": 1664, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (j *TableJoin) HandlesFieldName(fieldName string) bool { for _, t := range j.PrefixActivators { if strings.HasPrefix(fieldName, t) { return true } } return false }. \n### Response: // HandlesFieldName returns true if the given field name should be handled by\n// this table join..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void addMethodInjectionPoint(final MethodInjectionPoint mip) { if (methods == null) { methods = new MethodInjectionPoint[1]; methods[0] = mip; } else { methods = ArraysUtil.append(methods, mip); } } \n### Response:", "ground_truth": "Adds method injection point.", "predict": "// AddMethodInjectionPoint adds a new method injection point to the methods array."}, {"ID": 1665, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def alignextend(args): \"\"\" %prog alignextend ref.fasta read.1.fastq read.2.fastq Wrapper around AMOS alignextend. \"\"\" choices = \"prepare,align,filter,rmdup,genreads\".split(\",\") p = OptionParser(alignextend.__doc__) p.add_option(\"--nosuffix\", default=False, action=\"store_true\", help=\"Do not add /1/2 suffix to the read [default: %default]\") p.add_option(\"--rc\", default=False, action=\"store_true\", help=\"Reverse complement the reads before alignment\") p.add_option(\"--len\", default=100, type=\"int\", help=\"Extend to this length\") p.add_option(\"--stage\", default=\"prepare\", choices=choices, help=\"Start from certain stage\") p.add_option(\"--dup\", default=10, type=\"int\", help=\"Filter duplicates with coordinates within this distance\") p.add_option(\"--maxdiff\", default=1, type=\"int\", help=\"Maximum number of differences\") p.set_home(\"amos\") p.set_cpus() opts, args = p.parse_args(args) if len(args) != 3: sys.exit(not p.print_help()) ref, r1, r2 = args pf = op.basename(r1).split(\".\")[0] cmd = op.join(opts.amos_home, \"src/Experimental/alignextend.pl\") if not opts.nosuffix: cmd += \" -suffix\" bwa_idx = \"{0}.ref.fa.sa\".format(pf) if not need_update(ref, bwa_idx): cmd += \" -noindex\" cmd += \" -threads {0}\".format(opts.cpus) offset = guessoffset([r1]) if offset == 64: cmd += \" -I\" if opts.rc: cmd += \" -rc\" cmd += \" -allow -len {0} -dup {1}\".format(opts.len, opts.dup) cmd += \" -min {0} -max {1}\".format(2 * opts.len, 20 * opts.len) cmd += \" -maxdiff {0}\".format(opts.maxdiff) cmd += \" -stage {0}\".format(opts.stage) cmd += \" \".join((\"\", pf, ref, r1, r2)) sh(cmd). \n### Response: %prog alignextend ref.fasta read.1.fastq read.2.fastq\n\n    Wrapper around AMOS alignextend..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void addInitMethodPoints(final InitMethodPoint[] methods) { if (initMethods == null) { initMethods = methods; } else { initMethods = ArraysUtil.join(initMethods, methods); } } \n### Response:", "ground_truth": "Adds init methods.", "predict": "```\n    protected void addInitMethodPoints(final InitMethodPoint[] methods)\n    {\n        if (initMethods == null)\n        {\n            initMethods = methods;\n        }\n        else\n        {\n            initMethods = ArraysUtil.join(initMethods, methods);\n        }\n    }\n```\n### Resp Adds the given InitMethodPoint[] array to the list of initMethodPoints for this class.\n```\n    protected void addInitMethodPoints(final InitMethodPoint[] methods)\n```"}, {"ID": 1666, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func prepareMethod(method reflect.Method) *methodType { mtype := method.Type mname := method.Name var replyType, argType, contextType reflect.Type stream := false // Method must be exported. if method.PkgPath != \"\" { return nil } switch mtype.NumIn() { case 3: // normal method argType = mtype.In(1) replyType = mtype.In(2) contextType = nil case 4: // method that takes a context argType = mtype.In(2) replyType = mtype.In(3) contextType = mtype.In(1) default: log.Println(\"method\", mname, \"of\", mtype, \"has wrong number of ins:\", mtype.NumIn()) return nil } // First arg need not be a pointer. if !isExportedOrBuiltinType(argType) { log.Println(mname, \"argument type not exported:\", argType) return nil } // the second argument will tell us if it's a streaming call // or a regular call if replyType == typeOfStream { // this is a streaming call stream = true } else if replyType.Kind() != reflect.Ptr { log.Println(\"method\", mname, \"reply type not a pointer:\", replyType) return nil } // Reply type must be exported. if !isExportedOrBuiltinType(replyType) { log.Println(\"method\", mname, \"reply type not exported:\", replyType) return nil } // Method needs one out. if mtype.NumOut() != 1 { log.Println(\"method\", mname, \"has wrong number of outs:\", mtype.NumOut()) return nil } // The return type of the method must be error. if returnType := mtype.Out(0); returnType != typeOfError { log.Println(\"method\", mname, \"returns\", returnType.String(), \"not error\") return nil } return &methodType{method: method, ArgType: argType, ReplyType: replyType, ContextType: contextType, stream: stream} }. \n### Response: // prepareMethod returns a methodType for the provided method or nil\n// in case if the method was unsuitable..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void addDestroyMethodPoints(final DestroyMethodPoint[] methods) { if (destroyMethods == null) { destroyMethods = methods; } else { destroyMethods = ArraysUtil.join(destroyMethods, methods); } } \n### Response:", "ground_truth": "Adds destroy methods.", "predict": "// addDestroyMethodPoints adds the given DestroyMethodPoint[] to the destroyMethods array if it's not null else it creates a new array and joins the elements of the array using the ArraysUtil.join() method.."}, {"ID": 1667, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function exists(file) { try { fs.lstatSync(file); return true; } catch (e) { if (e.code === 'ENOENT' || e.code === 'ENOTDIR') { return false; } else { throw e; } } }. \n### Response: Check whether a file exists or not\n@memberof $file\n@param {string} file\n@returns {boolean}\n@example\n// Check if file exists\n$file.exists('/opt/bitnami/properties.ini')\n// => true.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static Class resolveTargetClass(final Class proxy) { final String name = proxy.getName(); if (name.endsWith(ProxettaNames.proxyClassNameSuffix)) { return proxy.getSuperclass(); } if (name.endsWith(ProxettaNames.wrapperClassNameSuffix)) { return getTargetWrapperType(proxy); } return proxy; } \n### Response:", "ground_truth": "Returns target class if proxetta applied on given class.\nIf not, returns given class as result.", "predict": "Resolve the target class of a proxy object\n@memberof $resolveTargetClass\n@param {Class} proxy\n@returns {Class} the target class\n@example\n// Resolve the target class of a proxy object\n$resolveTargetClass(Proxy.class)\n// => java.lang.Object.class.\n\n@end example"}, {"ID": 1668, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def _read_dict(self, f): \"\"\" Converts h5 groups to dictionaries \"\"\" d = {} for k, item in f.items(): if type(item) == h5py._hl.dataset.Dataset: v = item.value if type(v) == np.string_: v = str(v) if type(v) == str and v == \"NONE\": d[k] = None elif type(v) == str and v == \"EMPTYARR\": d[k] = np.array([]) elif isinstance(v, bytes): d[k] = v.decode('utf-8') else: d[k] = v elif k[:5] == \"DICT_\": d[k[5:]] = self._read_dict(item) elif k[:5] == \"LIST_\": tmpD = self._read_dict(item) d[k[5:]] = [tmpD[str(i)] for i in range(len(tmpD))] return d. \n### Response: Converts h5 groups to dictionaries.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void injectTargetIntoWrapper(final Object target, final Object wrapper) { injectTargetIntoWrapper(target, wrapper, ProxettaNames.wrapperTargetFieldName); } \n### Response:", "ground_truth": "Injects target instance into proxy using default target field name.\n@see #injectTargetIntoWrapper(Object, Object, String)", "predict": "Provides a method to inject an object into a wrapper object."}, {"ID": 1669, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public JSONObject delete(String url, HashMap<String, String> params) throws JSONException { return sendPostRequest(url, METHOD_DELETE, params); }. \n### Response: Send signed OAuth DELETE request\n\n@param\turl Relative URL\n@param\tparams Hash of parameters\n@throws\tJSONException If JSON object is invalid or request was abnormal\n@return\t{@link JSONObject} JSON Object that contains data from response.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static Class getTargetWrapperType(final Class wrapperClass) { try { final Field field = wrapperClass.getDeclaredField(ProxettaNames.wrapperTargetFieldName); return field.getType(); } catch (NoSuchFieldException nsfex) { throw new ProxettaException(nsfex); } } \n### Response:", "ground_truth": "Returns wrapper target type.", "predict": "This method retrieves the wrapper type of a given class. It uses the getDeclaredField method to access the field of the wrapper class, and returns the type of the field. If the field cannot be found, it throws a NoSuchFieldException.\n\n@param\twrapperClass The class to retrieve the wrapper type for.\n@return\tThe wrapper type of the given class.\n\n"}, {"ID": 1670, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def makeImages(self): \"\"\"Make spiral images in sectors and steps. Plain, reversed, sectorialized, negative sectorialized outline, outline reversed, lonely only nodes, only edges, both \"\"\" # make layout self.makeLayout() self.setAgraph() # make function that accepts a mode, a sector # and nodes and edges True and False self.plotGraph() self.plotGraph(\"reversed\",filename=\"tgraphR.png\") agents=n.concatenate(self.np.sectorialized_agents__) for i, sector in enumerate(self.np.sectorialized_agents__): self.plotGraph(\"plain\", sector,\"sector{:02}.png\".format(i)) self.plotGraph(\"reversed\",sector,\"sector{:02}R.png\".format(i)) self.plotGraph(\"plain\", n.setdiff1d(agents,sector),\"sector{:02}N.png\".format(i)) self.plotGraph(\"reversed\",n.setdiff1d(agents,sector),\"sector{:02}RN.png\".format(i)) self.plotGraph(\"plain\", [],\"BLANK.png\"). \n### Response: Make spiral images in sectors and steps.\n\n        Plain, reversed,\n        sectorialized, negative sectorialized\n        outline, outline reversed, lonely\n        only nodes, only edges, both.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected FieldDescriptor findField(final String fieldName) { FieldDescriptor fieldDescriptor = classDescriptor.getFieldDescriptor(fieldName, true); if (fieldDescriptor != null) { return fieldDescriptor; } // field descriptor not found in this class // try to locate it in the superclasses Class[] superclasses = classDescriptor.getAllSuperclasses(); for (Class superclass : superclasses) { ClassDescriptor classDescriptor = ClassIntrospector.get().lookup(superclass); fieldDescriptor = classDescriptor.getFieldDescriptor(fieldName, true); if (fieldDescriptor != null) { return fieldDescriptor; } } // nothing found return null; } \n### Response:", "ground_truth": "Locates property field. Field is being searched also in all\nsuperclasses of current class.", "predict": "Locates a field in the class and returns its field descriptor if found.\n\n        None, // field descriptor not found in this class\n        try to locate it in the superclasses.\n        Class[] superclasses = classDescriptor.getAllSuperclasses();\n        for (Class superclass : superclasses) {\n            ClassDescriptor classDescriptor = ClassIntrospector.get().lookup(superclass);\n            fieldDescriptor = classDescriptor.getFieldDescriptor(fieldName, true);\n            if (fieldDescriptor!= null) {\n                return fieldDescriptor;\n            }\n        }\n        return null;\n    }."}, {"ID": 1671, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func AuthTokenNonBlocking() (string, error) { cond.RLock() defer cond.RUnlock() if currentToken == \"\" { return \"\", ErrNotAuthenticated } if expired() { return \"\", ErrIdentityTokenExpired } return currentToken, nil }. \n### Response: // A non-blocking call to get an unexpired auth token.  Returns an error\n//  If no token exists or if the token is expired.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public Class getType() { if (type == null) { if (fieldDescriptor != null) { type = fieldDescriptor.getRawType(); } else if (readMethodDescriptor != null) { type = getGetter(true).getGetterRawType(); //type = readMethodDescriptor.getGetterRawType(); } else if (writeMethodDescriptor != null) { type = getSetter(true).getSetterRawType(); //type = writeMethodDescriptor.getSetterRawType(); } } return type; } \n### Response:", "ground_truth": "Returns property type. Raw types are detected.", "predict": "// Returns the raw type of the specified field or method, or null if the type is not found.\n// This method is useful for identifying the underlying type of a Java object."}, {"ID": 1672, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (n *Node) processRaftMessageLogger(ctx context.Context, msg *api.ProcessRaftMessageRequest) *logrus.Entry { fields := logrus.Fields{ \"method\": \"(*Node).ProcessRaftMessage\", } if n.IsMember() { fields[\"raft_id\"] = fmt.Sprintf(\"%x\", n.Config.ID) } if msg != nil && msg.Message != nil { fields[\"from\"] = fmt.Sprintf(\"%x\", msg.Message.From) } return log.G(ctx).WithFields(fields) }. \n### Response: // processRaftMessageLogger is used to lazily create a logger for\n// ProcessRaftMessage. Usually nothing will be logged, so it is useful to avoid\n// formatting strings and allocating a logger when it won't be used..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public Class resolveKeyType(final boolean declared) { Class keyType = null; Getter getter = getGetter(declared); if (getter != null) { keyType = getter.getGetterRawKeyComponentType(); } if (keyType == null) { FieldDescriptor fieldDescriptor = getFieldDescriptor(); if (fieldDescriptor != null) { keyType = fieldDescriptor.getRawKeyComponentType(); } } return keyType; } \n### Response:", "ground_truth": "Resolves key type for given property descriptor.", "predict": "// resolveKeyType is a utility method that resolves the key type of a given object, based on its declared type.\n// It uses the getGetter() and getFieldDescriptor() methods to retrieve the raw key component type, and then returns the resulting key type.\n// This method is useful for resolving key types when working with objects that have a declared type, and for avoiding the need to manually check for raw key component types."}, {"ID": 1673, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function callMe() { $output = $this->dispatchStartEvent(); // This is actually an array, we ara analysing. But We do not want to render // an array, so we need to process it like the return from an iterator. /** @var \\ReflectionClass $ref */ $ref = $this->parameters[static::PARAM_REF]; $refConst = $ref->getConstants(); if (empty($refConst) === true) { // Nothing to see here, return an empty string. return ''; } // We've got some values, we will dump them. $classname = '\\\\' . $ref->getName(); return $output . $this->pool->render->renderExpandableChild( $this->dispatchEventWithModel( static::EVENT_MARKER_ANALYSES_END, $this->pool->createClass('Brainworxx\\\\Krexx\\\\Analyse\\\\Model') ->setName('Constants') ->setType(static::TYPE_INTERNALS) ->setIsMetaConstants(true) ->addParameter(static::PARAM_DATA, $refConst) ->addParameter(static::PARAM_CLASSNAME, $classname) ->injectCallback( $this->pool->createClass('Brainworxx\\\\Krexx\\\\Analyse\\\\Callback\\\\Iterate\\\\ThroughConstants') ) ) ); }. \n### Response: Dumps the constants of a class,\n\n@return string\nThe generated markup..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public Class resolveComponentType(final boolean declared) { Class componentType = null; Getter getter = getGetter(declared); if (getter != null) { componentType = getter.getGetterRawComponentType(); } if (componentType == null) { FieldDescriptor fieldDescriptor = getFieldDescriptor(); if (fieldDescriptor != null) { componentType = fieldDescriptor.getRawComponentType(); } } return componentType; } \n### Response:", "ground_truth": "Resolves component type for given property descriptor.", "predict": "Resolves the component type of a given declaration.\n\n@param declared\nThe boolean indicating whether the component type should be resolved.\n\n@return\nThe component type of the given declaration, or null if not found."}, {"ID": 1674, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public List<Link> getConnectedLinks(PhysicalElement pe) { List<Link> myLinks = new ArrayList<>(); for (Link l : this.links) { if (l.getElement().equals(pe)) { myLinks.add(l); } else if (l.getSwitch().equals(pe)) { myLinks.add(l); } } return myLinks; }. \n### Response: Get the list of links connected to a given physical element\n\n@param pe    the physical element\n@return the list of links.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static JsonResult of(final Object object) { final String json = JsonSerializer.create().deep(true).serialize(object); return new JsonResult(json); } \n### Response:", "ground_truth": "Creates JSON result from given object. The object will be serialized to JSON.", "predict": "Serialize an object to a JSON string\n\n@param object the object to be serialized\n@return a JsonResult object\n\n"}, {"ID": 1675, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function setEmail($email) { $this->email = $email; $this->referenceId = null; $this->executed = false; return $this; }. \n### Response: Sets email of the user\n\n@param string $email Email\n\n@return \\Ukey1\\Endpoints\\Authentication\\ExtranetUsers.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static JsonResult of(final Exception exception) { final HashMap<String, Object> errorMap = new HashMap<>(); errorMap.put(\"message\", ExceptionUtil.message(exception)); errorMap.put(\"error\", exception.getClass().getName()); errorMap.put(\"cause\", exception.getCause() != null ? exception.getCause().getClass().getName() : null); final ArrayList<String> details = new ArrayList<>(); final StackTraceElement[] ste = ExceptionUtil.getStackTrace(exception, null, null); for (StackTraceElement stackTraceElement : ste) { details.add(stackTraceElement.toString()); } errorMap.put(\"details\", details); final String json = JsonSerializer.create().deep(true).serialize(errorMap); return new JsonResult(json).status(HttpStatus.error500().internalError()); } \n### Response:", "ground_truth": "Creates a JSON response from an exception. Response body will have information about the\nexception and response status will be set to 500.", "predict": "This method returns a JsonResult object containing the error details for the given exception.\n\n@return JsonResult<Map<String, Object>>.\n\nThis method is used to return a JsonResult object containing the error details for the given exception. The exception is first converted to a Map object containing the error message, error class name, and cause class name. Then, the details of the exception are added to the errorMap object. Finally, the json object is serialized using JsonSerializer.create() and deep() method, and returned as JsonResult with status code 500 and internal error."}, {"ID": 1676, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def set_mapping(self, x0, x1, update=True): \"\"\"Configure this transform such that it maps points x0 => x1 Parameters ---------- x0 : array-like, shape (2, 2) or (2, 3) Start location. x1 : array-like, shape (2, 2) or (2, 3) End location. update : bool If False, then the update event is not emitted. Examples -------- For example, if we wish to map the corners of a rectangle:: >>> p1 = [[0, 0], [200, 300]] onto a unit cube:: >>> p2 = [[-1, -1], [1, 1]] then we can generate the transform as follows:: >>> tr = STTransform() >>> tr.set_mapping(p1, p2) >>> assert tr.map(p1)[:,:2] == p2 # test \"\"\" # if args are Rect, convert to array first if isinstance(x0, Rect): x0 = x0._transform_in()[:3] if isinstance(x1, Rect): x1 = x1._transform_in()[:3] x0 = np.asarray(x0) x1 = np.asarray(x1) if (x0.ndim != 2 or x0.shape[0] != 2 or x1.ndim != 2 or x1.shape[0] != 2): raise TypeError(\"set_mapping requires array inputs of shape \" \"(2, N).\") denom = x0[1] - x0[0] mask = denom == 0 denom[mask] = 1.0 s = (x1[1] - x1[0]) / denom s[mask] = 1.0 s[x0[1] == x0[0]] = 1.0 t = x1[0] - s * x0[0] s = as_vec4(s, default=(1, 1, 1, 1)) t = as_vec4(t, default=(0, 0, 0, 0)) self._set_st(scale=s, translate=t, update=update). \n### Response: Configure this transform such that it maps points x0 => x1\n\n        Parameters\n        ----------\n        x0 : array-like, shape (2, 2) or (2, 3)\n            Start location.\n        x1 : array-like, shape (2, 2) or (2, 3)\n            End location.\n        update : bool\n            If False, then the update event is not emitted.\n\n        Examples\n        --------\n        For example, if we wish to map the corners of a rectangle::\n\n            >>> p1 = [[0, 0], [200, 300]]\n\n        onto a unit cube::\n\n            >>> p2 = [[-1, -1], [1, 1]]\n\n        then we can generate the transform as follows::\n\n            >>> tr = STTransform()\n            >>> tr.set_mapping(p1, p2)\n            >>> assert tr.map(p1)[:,:2] == p2  # test.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected String resolveHttpMethodFromMethodName(final String methodName) { int i = 0; while (i < methodName.length()) { if (CharUtil.isUppercaseAlpha(methodName.charAt(i))) { break; } i++; } final String name = methodName.substring(0, i).toUpperCase(); for (final HttpMethod httpMethod : HttpMethod.values()) { if (httpMethod.equalsName(name)) { return httpMethod.name(); } } return null; } \n### Response:", "ground_truth": "Resolves HTTP method name from method name.\nIf method name or first camel-case word of a method equals to\na HTTP method, it will be used as that HTTP methods.", "predict": "```\n    protected String resolveHttpMethodFromMethodName(final String methodName)\n    {\n        int i = 0;\n        while (i < methodName.length())\n        {\n            if (CharUtil.isUppercaseAlpha(methodName.charAt(i)))\n            {\n                break;\n            }\n            i++;\n        }\n        final String name = methodName.substring(0, i).toUpperCase();\n        for (final HttpMethod httpMethod : HttpMethod.values())\n        {\n            if (httpMethod.equalsName(name))\n            {\n                return httpMethod.name();\n            }\n        }\n        return null;\n    }\n```\n    Method(resolveHttpMethodFromMethodName, String.class)\n```"}, {"ID": 1677, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func setError(o Option, value string, err error) *Error { return &Error{ ErrorCode: Invalid, Name: o.Name(), Parameter: value, Err: err, } }. \n### Response: // setError returns an Error inidicating option o and the specified\n// error while setting it to value..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private static boolean match(final CharSequence string, final CharSequence pattern, int sNdx, int pNdx) { int pLen = pattern.length(); if (pLen == 1) { if (pattern.charAt(0) == '*') { // speed-up return true; } } int sLen = string.length(); boolean nextIsNotWildcard = false; while (true) { // check if end of string and/or pattern occurred if ((sNdx >= sLen)) { // end of string still may have pending '*' in pattern while ((pNdx < pLen) && (pattern.charAt(pNdx) == '*')) { pNdx++; } return pNdx >= pLen; } if (pNdx >= pLen) { // end of pattern, but not end of the string return false; } char p = pattern.charAt(pNdx); // pattern char // perform logic if (!nextIsNotWildcard) { if (p == '\\\\') { pNdx++; nextIsNotWildcard = true; continue; } if (p == '?') { sNdx++; pNdx++; continue; } if (p == '*') { char pNext = 0; // next pattern char if (pNdx + 1 < pLen) { pNext = pattern.charAt(pNdx + 1); } if (pNext == '*') { // double '*' have the same effect as one '*' pNdx++; continue; } int i; pNdx++; // find recursively if there is any substring from the end of the // line that matches the rest of the pattern !!! for (i = string.length(); i >= sNdx; i--) { if (match(string, pattern, i, pNdx)) { return true; } } return false; } } else { nextIsNotWildcard = false; } // check if pattern char and string char are equals if (p != string.charAt(sNdx)) { return false; } // everything matches for now, continue sNdx++; pNdx++; } } \n### Response:", "ground_truth": "Internal matching recursive function.", "predict": "// This method matches a string against a pattern using a recursive // approach. It checks if the end of the string or the pattern has // occurred, and if so, it returns false. Otherwise, it checks if a wildcard // can be found in the pattern at the current position, and if so, it // recursively searches for a matching substring from the end of the // line. If a wildcard is not found, it returns true."}, {"ID": 1678, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function run(key, selfie) { if (!options[key]) return; if ('string' === typeof options[key]) options[key] = options[key].split(split); if ('function' === typeof options[key]) return options[key].call(selfie); for (var i = 0, type, what; i < options[key].length; i++) { what = options[key][i]; type = typeof what; if ('function' === type) { what.call(selfie); } else if ('string' === type && 'function' === typeof selfie[what]) { selfie[what](); } } }. \n### Response: Run addition cleanup hooks.\n\n@param {String} key Name of the clean up hook to run.\n@param {Mixed} selfie Reference to the instance we're cleaning up.\n@api private.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected Loading resolveLoading(final boolean parentFirstStrategy, final String className) { boolean withParent = true; boolean withLoader = true; if (parentFirstStrategy) { if (isMatchingRules(className, loaderOnlyRules)) { withParent = false; } else if (isMatchingRules(className, parentOnlyRules)) { withLoader = false; } } else { if (isMatchingRules(className, parentOnlyRules)) { withLoader = false; } else if (isMatchingRules(className, loaderOnlyRules)) { withParent = false; } } return new Loading(withParent, withLoader); } \n### Response:", "ground_truth": "Resolves loading rules.", "predict": "Resolve loading for the given parentFirstStrategy and className.\n\n@param {boolean} parentFirstStrategy The strategy to use for the parent class.\n@param {String} className The class to resolve the loading for.\n@api protected."}, {"ID": 1679, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function setLocalRecord($nick, $checkpoints) { if (count($checkpoints) > 0) { $this->updateValue($this->playerGroup, 'LocalRecordCheckpoints', Builder::getArray($checkpoints, true)); $this->updateValue($this->playerGroup, 'LocalRecordHolder', Builder::escapeText($nick)); } else { $this->updateValue($this->playerGroup, 'LocalRecordCheckpoints', \"Integer[Integer]\"); $this->updateValue($this->playerGroup, 'LocalRecordHolder', Builder::escapeText(\"-\")); } }. \n### Response: Update with new local record.\n\n@param array $checkpoints.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected Loading resolveResourceLoading(final boolean parentFirstStrategy, String resourceName) { if (matchResourcesAsPackages) { resourceName = StringUtil.replaceChar(resourceName, '/', '.'); } return resolveLoading(parentFirstStrategy, resourceName); } \n### Response:", "ground_truth": "Resolves resources.", "predict": "Resolve resource loading based on parent first strategy and resource name.\n\n@param boolean parentFirstStrategy.\n\n"}, {"ID": 1680, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function() { var $this = $(this); var cell = $this.find('td').get($this.treegrid('getSetting', 'treeColumn')); var tpl = $this.treegrid('getSetting', 'expanderTemplate'); var expander = $this.treegrid('getSetting', 'getExpander').apply(this); if (expander) { expander.remove(); } $(tpl).prependTo(cell).click(function() { $($(this).closest('tr')).treegrid('toggle'); }); return $this; }. \n### Response: Initialize expander for node\n\n@returns {Node}.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override protected synchronized Class<?> loadClass(final String className, final boolean resolve) throws ClassNotFoundException { // check first if the class has already been loaded Class<?> c = findLoadedClass(className); if (c != null) { if (resolve) { resolveClass(c); } return c; } // class not loaded yet Loading loading = resolveLoading(parentFirst, className); if (parentFirst) { // PARENT FIRST if (loading.withParent) { try { c = parentClassLoader.loadClass(className); } catch (ClassNotFoundException ignore) { } } if (c == null) { if (loading.withLoader) { c = this.findClass(className); } else { throw new ClassNotFoundException(\"Class not found: \" + className); } } } else { // THIS FIRST if (loading.withLoader) { try { c = this.findClass(className); } catch (ClassNotFoundException ignore) { } } if (c == null) { if (loading.withParent) { c = parentClassLoader.loadClass(className); } else { throw new ClassNotFoundException(\"Class not found: \" + className); } } } if (resolve) { resolveClass(c); } return c; } \n### Response:", "ground_truth": "Loads class using parent-first or parent-last strategy.", "predict": "Provides a method to load a class using the ClassNotFoundException.\n\n@param className - the class to load\n@param resolve - whether to resolve the class or throw a ClassNotFoundException\n@return the loaded class\n\nThis method first checks if the class has already been loaded by calling `findLoadedClass(className)`. If the class is already loaded, the method returns the class. If the class is not loaded yet, the method calls `resolveLoading(parentFirst, className)` to determine if the class should be loaded from the parent classloader or the current classloader. If the class should be loaded from the parent classloader, the method attempts to load the class using the parent classloader's `loadClass()` method. If the class cannot be loaded, the method throws a ClassNotFoundException with a message indicating which class was not found. If the class should be loaded from the current classloader, the method attempts to load the class using the current classloader's `findClass()` method. If the class cannot be loaded, the method throws a ClassNotFoundException with a message indicating which class was not found. If `resolve` is true and `parentFirst` is true, the method attempts to load the class from the parent classloader. If `resolve` is false and `parentFirst` is true, the method throws a ClassNotFoundException with a message indicating which class was not found. If `resolve` is false and `parentFirst` is false, the method returns the loaded class."}, {"ID": 1681, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def cost(self): \"\"\"Get the approximate cost of this filter. Cost is the total cost of the exclusion rules in this filter. The cost of family-specific filters is divided by 10. Returns: float: The approximate cost of the filter. \"\"\" total = 0.0 for family, rules in self._excludes.iteritems(): cost = sum(x.cost() for x in rules) if family: cost = cost / float(10) total += cost return total. \n### Response: Get the approximate cost of this filter.\n\n        Cost is the total cost of the exclusion rules in this filter. The cost\n        of family-specific filters is divided by 10.\n\n        Returns:\n            float: The approximate cost of the filter..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public URL getResource(final String resourceName) { URL url = null; Loading loading = resolveResourceLoading(parentFirst, resourceName); if (parentFirst) { // PARENT FIRST if (loading.withParent) { url = parentClassLoader.getResource(resourceName); } if (url == null) { if (loading.withLoader) { url = this.findResource(resourceName); } } } else { // THIS FIRST if (loading.withLoader) { url = this.findResource(resourceName); } if (url == null) { if (loading.withParent) { url = parentClassLoader.getResource(resourceName); } } } return url; } \n### Response:", "ground_truth": "Returns a resource using parent-first or parent-last strategy.", "predict": "```\n@Override\npublic URL getResource(final String resourceName)\n{\n    URL url = null;\n    Loading loading = resolveResourceLoading(parentFirst, resourceName);\n    if (parentFirst) { // PARENT FIRST\n        if (loading.withParent) {\n            url = parentClassLoader.getResource(resourceName);\n        }\n        if (url == null) {\n            if (loading.withLoader) {\n                url = this.findResource(resourceName);\n            }\n        }\n    } else { // THIS FIRST\n        if (loading.withLoader) {\n            url = this.findResource(resourceName);\n        }\n        if (url == null) {\n            if (loading.withParent) {\n                url = parentClassLoader.getResource(resourceName);\n            }\n        }\n    }\n    return url;\n}\n```\n\n```\n// Resolve resource loading based on parentFirst and resourceName\n// If parentFirst is true, use parentClassLoader.getResource(resourceName)\n// If parentFirst is false, use this.findResource(resourceName)\n```\n\n```\n// Find the resource in the parent classloader or this classloader\n// If the resource is not found, use parentClassLoader.getResource(resourceName)\n```\n\n```\n// Return the URL of the resource\n```"}, {"ID": 1682, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void parseSoap11Fault(Document soapMessage, PrintWriter logger) throws Exception { Element envelope = soapMessage.getDocumentElement(); Element element = DomUtils.getElementByTagName(envelope, \"faultcode\"); if (element == null) { element = DomUtils.getElementByTagNameNS(envelope, SOAP_11_NAMESPACE, \"faultcode\"); } String faultcode = element.getTextContent(); element = DomUtils.getElementByTagName(envelope, \"faultstring\"); if (element == null) { element = DomUtils.getElementByTagNameNS(envelope, SOAP_11_NAMESPACE, \"faultstring\"); } String faultstring = element.getTextContent(); String msg = \"SOAP Fault received - [code:\" + faultcode + \"][fault string:\" + faultstring + \"]\"; logger.println(msg); }. \n### Response: A method to parse a SOAP 1.1 fault message.\n\n@param soapMessage\nthe SOAP 1.1 fault message to parse\n\n@param logger\nthe PrintWriter to log all results to\n\n@return void\n\n@author Simone Gianfranceschi.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void waitFor() { try { synchronized (lock) { if (!end) { lock.wait(); } } } catch (InterruptedException ignore) { Thread.currentThread().interrupt(); } } \n### Response:", "ground_truth": "Waits for gobbler to end.", "predict": "A method to wait for a specific condition to be met before continuing.\n\n@param lock\nthe object used to synchronize access to the shared resource\n\n@return void\n\n@author Simone Gianfranceschi."}, {"ID": 1683, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func IsErrorLimitExceeded(err error) bool { if isForbidden := apierrs.IsForbidden(err); isForbidden || apierrs.IsInvalid(err) { lowered := strings.ToLower(err.Error()) // the limit error message can be accompanied only by Invalid reason if strings.Contains(lowered, errLimitsMessageString) { return true } } return false }. \n### Response: // IsErrorLimitExceeded returns true if the given error is a limit error..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public Class<? extends Annotation> detectAnnotationType(final Annotation[] annotations) { for (final Annotation annotation : annotations) { if (annotation instanceof In) { return annotation.annotationType(); } else if (annotation instanceof Out) { return annotation.annotationType(); } } return null; } \n### Response:", "ground_truth": "Scans annotation and returns type of Madvoc annotations.", "predict": "// detectAnnotationType returns the class of the annotated element, if any, in the given array of annotations.."}, {"ID": 1684, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def classes_in_module(module) -> List: \"\"\" Return all classes with super class ExtractionModule Args: module: Returns: List of classes \"\"\" md = module.__dict__ return [ md[c] for c in md if ( isinstance(md[c], type) and issubclass(md[c], ETKModule ) and md[c].__module__ == module.__name__) ]. \n### Response: Return all classes with super class ExtractionModule\n\n        Args:\n            module:\n\n        Returns: List of classes.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected InjectionPoint buildInjectionPoint( final String annotationValue, final String propertyName, final Class propertyType, final Class<? extends MadvocScope> scope) { final String value = annotationValue.trim(); final String name, targetName; if (StringUtil.isNotBlank(value)) { name = value; targetName = propertyName; } else { name = propertyName; targetName = null; } return new InjectionPoint(propertyType, name, targetName, scopeResolver.defaultOrScopeType(scope)); } \n### Response:", "ground_truth": "Builds injection point.", "predict": "Build injection point for given annotation value, propertyName, property type, and MadvocScope scope.\n\n        Args:\n            annotationValue:\n\n            propertyName:\n\n            propertyType:\n\n            scope:\n\n        Returns:\n             InjectionPoint:\n\n            name:\n\n            targetName:\n\n            targetName:\n\n            scopeResolver:"}, {"ID": 1685, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function diffInWeeks(Date $dt = null, $abs = true) { return (int) ($this->diffInDays($dt, $abs) / static::DAYS_PER_WEEK); }. \n### Response: Get the difference in weeks.\n\n@param Date|null $dt\n@param bool      $abs Get the absolute of the difference\n\n@return int.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void visit() { ClassDescriptor classDescriptor = ClassIntrospector.get().lookup(type); if (classMetadataName != null) { // process first 'meta' fields 'class' onProperty(classMetadataName, null, false); } PropertyDescriptor[] propertyDescriptors = classDescriptor.getAllPropertyDescriptors(); for (PropertyDescriptor propertyDescriptor : propertyDescriptors) { Getter getter = propertyDescriptor.getGetter(declared); if (getter != null) { String propertyName = propertyDescriptor.getName(); boolean isTransient = false; // check for transient flag FieldDescriptor fieldDescriptor = propertyDescriptor.getFieldDescriptor(); if (fieldDescriptor != null) { isTransient = Modifier.isTransient(fieldDescriptor.getField().getModifiers()); } onProperty(propertyName, propertyDescriptor, isTransient); } } } \n### Response:", "ground_truth": "Visits a type.", "predict": "Visits the specified class and processes any meta-fields (i.e. fields that don't have a getter).\n\n@param propertyName   The name of the property to visit\n@param propertyDescriptor The property descriptor to visit\n@param isTransient    The flag indicating whether the field is transient or not\n\n@return The result of visiting the specified property."}, {"ID": 1686, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function groupData(data, fieldIndex) { const hashMap = new Map(); const groupedData = []; data.forEach((datum) => { const fieldVal = datum[fieldIndex]; if (hashMap.has(fieldVal)) { groupedData[hashMap.get(fieldVal)][1].push(datum); } else { groupedData.push([fieldVal, [datum]]); hashMap.set(fieldVal, groupedData.length - 1); } }); return groupedData; }. \n### Response: Groups the data according to the specified target field.\n\n@param {Array} data - The input data array.\n@param {number} fieldIndex - The target field index within schema array.\n@return {Array} Returns an array containing the grouped data..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static URL[] of(ClassLoader classLoader, Class clazz) { if (clazz == null) { clazz = ClassPathURLs.class; } if (classLoader == null) { classLoader = clazz.getClassLoader(); } final Set<URL> urls = new LinkedHashSet<>(); while (classLoader != null) { if (classLoader instanceof URLClassLoader) { final URLClassLoader urlClassLoader = (URLClassLoader) classLoader; return urlClassLoader.getURLs(); } final URL url = classModuleUrl(classLoader, clazz); if (url != null) { urls.add(url); } classLoader = classLoader.getParent(); } return urls.toArray(new URL[0]); } \n### Response:", "ground_truth": "Returns urls for the classloader\n\n@param classLoader classloader in which to find urls\n@return list of urls or {@code null} if not found", "predict": "Provides an implementation for the `of` method, which returns a set of URLs for a given class.\n\n@param {ClassLoader} classLoader - The ClassLoader for the class to be loaded.\n@param {Class} clazz - The class to be loaded.\n@return {Set<URL>} A set of URLs for the given class..\n\n"}, {"ID": 1687, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static byte[] mergeLocalFileDataData(List<ZipExtraField> data) { int regularExtraFieldCount = data.size(); int sum = WORD * regularExtraFieldCount; for (ZipExtraField element : data) { sum += element.getLocalFileDataLength().getValue(); } byte[] result = new byte[sum]; int start = 0; for (ZipExtraField element : data) { System.arraycopy(element.getHeaderId().getBytes(), 0, result, start, 2); System.arraycopy(element.getLocalFileDataLength().getBytes(), 0, result, start + 2, 2); byte[] local = element.getLocalFileDataData(); System.arraycopy(local, 0, result, start + WORD, local.length); start += (local.length + WORD); } return result; }. \n### Response: Merges the local file data fields of the given ZipExtraFields.\n\n@param data an array of ExtraFiles\n@return an array of bytes\n@since 1.1.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private void setBean(final Object bean) { this.bean = bean; this.cd = (bean == null ? null : introspector.lookup(bean.getClass())); this.first = false; this.updateProperty = true; } \n### Response:", "ground_truth": "Sets new bean instance.", "predict": "Set the value of the bean property.\n\n@param bean an object to set the property value on\n@return void\n@since 4.0.0"}, {"ID": 1688, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function isElementHidden($elementName) { if( $this->settingExists($elementName) ? $settings = $this->getSetting($elementName) : false) { if(isset($settings['hidden']) && $settings['hidden'] == true) { return true; } } return false; }. \n### Response: Is element hidden\n\n@param $elementName\n@return bool.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void updateBean(final Object bean) { this.setBean(bean); if (this.cd != null && this.cd.isSupplier()) { final Object newBean = ((Supplier)this.bean).get(); setBean(newBean); } } \n### Response:", "ground_truth": "Updates the bean. Detects special case of suppliers.", "predict": "Update bean\n\n@param bean\n@return void.\n\n"}, {"ID": 1689, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def get_input_node(cls, value): \"\"\"Return a `Node` of a given class and given value. If a `Node` of the given type and value already exists, that will be returned, otherwise a new one will be created, stored and returned. :param cls: the `Node` class :param value: the value of the `Node` \"\"\" from aiida import orm if cls in (orm.Bool, orm.Float, orm.Int, orm.Str): result = orm.QueryBuilder().append(cls, filters={'attributes.value': value}).first() if result is None: node = cls(value).store() else: node = result[0] elif cls is orm.Dict: result = orm.QueryBuilder().append(cls, filters={'attributes': {'==': value}}).first() if result is None: node = cls(dict=value).store() else: node = result[0] else: raise NotImplementedError return node. \n### Response: Return a `Node` of a given class and given value.\n\n    If a `Node` of the given type and value already exists, that will be returned, otherwise a new one will be created,\n    stored and returned.\n\n    :param cls: the `Node` class\n    :param value: the value of the `Node`.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private void loadPropertyDescriptor() { if (updateProperty) { if (cd == null) { propertyDescriptor = null; } else { propertyDescriptor = cd.getPropertyDescriptor(name, true); } updateProperty = false; } } \n### Response:", "ground_truth": "Loads property descriptor, if property was updated.", "predict": "Load property descriptor for the given property name.\n\n    If the property is already present in the property descriptor, it will be loaded and stored.\n    If the property is not present, a new property descriptor will be created and stored.\n    The update property flag is set to false before loading the property descriptor.\n\n    :param name: the name of the property\n    :param updateProperty: the flag indicating whether the property has been updated or not\n    :return: None\n    :Note: This method is used to load the property descriptor for a specific property. It is important to\n        check if the property has been updated before loading it, otherwise it may cause unexpected behavior."}, {"ID": 1690, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def tuple_to_string(prog_tuple): \"\"\"Create a string from tuples returned by parse_string.\"\"\" (roman, acc, suff) = prog_tuple if acc > 6: acc = 0 - acc % 6 elif acc < -6: acc = acc % 6 while acc < 0: roman = 'b' + roman acc += 1 while acc > 0: roman = '#' + roman acc -= 1 return roman + suff. \n### Response: Create a string from tuples returned by parse_string..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public Getter getGetter(final boolean declared) { loadPropertyDescriptor(); return propertyDescriptor != null ? propertyDescriptor.getGetter(declared) : null; } \n### Response:", "ground_truth": "Returns getter.", "predict": "Get getter method for a boolean property.."}, {"ID": 1691, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def _parse_name(self, team_data): \"\"\" Parses the team's name. On the pages being parsed, the team's name doesn't follow the standard parsing algorithm that we use for the fields, and requires a special one-off algorithm. The name is attached in the 'title' attribute from within 'team_ID'. A few simple regex subs captures the team name. The '_name' attribute is applied with the captured team name from this function. Parameters ---------- team_data : string A string containing all of the rows of stats for a given team. If multiple tables are being referenced, this will be comprised of multiple rows in a single string. \"\"\" name = team_data('td[data-stat=\"team_ID\"]:first') name = re.sub(r'.*title=\"', '', str(name)) name = re.sub(r'\".*', '', name) setattr(self, '_name', name). \n### Response: Parses the team's name.\n\n        On the pages being parsed, the team's name doesn't follow the standard\n        parsing algorithm that we use for the fields, and requires a special\n        one-off algorithm. The name is attached in the 'title' attribute from\n        within 'team_ID'. A few simple regex subs captures the team name. The\n        '_name' attribute is applied with the captured team name from this\n        function.\n\n        Parameters\n        ----------\n        team_data : string\n            A string containing all of the rows of stats for a given team. If\n            multiple tables are being referenced, this will be comprised of\n            multiple rows in a single string..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public Setter getSetter(final boolean declared) { loadPropertyDescriptor(); return propertyDescriptor != null ? propertyDescriptor.getSetter(declared) : null; } \n### Response:", "ground_truth": "Returns setter.", "predict": "Returns the Setter object for the specified property declared.\n\n        This method is used to retrieve the Setter object for a specific\n        property from a property descriptor. It first loads the property\n        Descriptor and then returns the Setter object if it is found, or null if\n        it is not found.\n\n        Parameters\n        ----------\n        declare : boolean\n            The boolean indicating whether the Setter object for the property\n            should be returned.\n\n### Resp Returns the Setter object for the specified property declared.\n\n        This method is used to retrieve the Setter object for a specific\n        property from a property descriptor. It first loads the property\n        Descriptor and then returns the Setter object if it is found, or null if\n        it is not found.\n\n        Parameters\n        ----------\n        declare : boolean\n            The boolean indicating whether the Setter object for the property\n            should be returned."}, {"ID": 1692, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def view(self, tempname='/tmp/tempimage'): \"\"\"Display the image using casaviewer. If the image is not persistent, a copy will be made that the user has to delete once viewing has finished. The name of the copy can be given in argument `tempname`. Default is '/tmp/tempimage'. \"\"\" import os # Test if casaviewer can be found. # On OS-X 'which' always returns 0, so use test on top of it. if os.system('test -x `which casaviewer` > /dev/null 2>&1') == 0: six.print_(\"Starting casaviewer in the background ...\") self.unlock() if self.ispersistent(): os.system('casaviewer ' + self.name() + ' &') elif len(tempname) > 0: six.print_(\" making a persistent copy in \" + tempname) six.print_(\" which should be deleted after the viewer has ended\") self.saveas(tempname) os.system('casaviewer ' + tempname + ' &') else: six.print_(\"Cannot view because the image is in memory only.\") six.print_(\"You can browse a persistent copy of the image like:\") six.print_(\" t.view('/tmp/tempimage')\") else: six.print_(\"casaviewer cannot be found\"). \n### Response: Display the image using casaviewer.\n\n        If the image is not persistent, a copy will be made that the user\n        has to delete once viewing has finished. The name of the copy can be\n        given in argument `tempname`. Default is '/tmp/tempimage'..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public DbOom connect() { connectionProvider.init(); final DbDetector dbDetector = new DbDetector(); dbDetector.detectDatabaseAndConfigureDbOom(connectionProvider, dbOomConfig); return this; } \n### Response:", "ground_truth": "Initializes the DbOom by connecting to the database. Database will be detected\nand DbOom will be configured to match it.", "predict": "Connect to the database using the provided connection provider and configure the DbOom client.\n\n        return this to return the DbOom object to be used in the current method."}, {"ID": 1693, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public QueryBuilder union() { this.firstQuery = query(); this.firstQuerySetOperation = Operation.UNION; this.firstQueryAll = false; clear(false); return this; }. \n### Response: Perform a UNION between the query as defined prior to this method and the query that will be defined following this method.\n\n@return this builder object, for convenience in method chaining.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void add(final Iterator<T> iterator) { if (allIterators.contains(iterator)) { throw new IllegalArgumentException(\"Duplicate iterator\"); } allIterators.add(iterator); } \n### Response:", "ground_truth": "Adds an iterator to this composite.", "predict": "Adds an element to the set of elements returned by the allIterators collection.\n\n@param iterator the element to add to the set of elements.\n@return true if the add operation was successful, false otherwise."}, {"ID": 1694, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def histogram(self, bmus=None): \"\"\"\\ Return a 2D histogram of bmus. :param bmus: the best-match units indexes for underlying data. :type bmus: :class:`numpy.ndarray` :returns: the computed 2D histogram of bmus. :rtype: :class:`numpy.ndarray` \"\"\" if bmus is None: assert self._bmus is not None, 'not trained' bmus = self._bmus arr = np.zeros((self._som.nrows, self._som.ncols)) for i,j in bmus: arr[i,j] += 1 return arr. \n### Response: \\\n        Return a 2D histogram of bmus.\n\n        :param bmus: the best-match units indexes for underlying data.\n        :type bmus: :class:`numpy.ndarray`\n        :returns: the computed 2D histogram of bmus.\n        :rtype: :class:`numpy.ndarray`.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private void printLogo() { System.out.println(Chalk256.chalk().yellow().on(Jodd.JODD)); } \n### Response:", "ground_truth": "Prints a logo.", "predict": "\\\n        Print the yellow logo on Jodd.\n\n        :return: None\n        :rtype: void."}, {"ID": 1695, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def _pwl1_to_poly(self, generators): \"\"\" Converts single-block piecewise-linear costs into linear polynomial. \"\"\" for g in generators: if (g.pcost_model == PW_LINEAR) and (len(g.p_cost) == 2): g.pwl_to_poly() return generators. \n### Response: Converts single-block piecewise-linear costs into linear\n        polynomial..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void stop() { joyProps.stop(); try { joyDb.stop(); joyPetite.stop(); } catch (Exception ignore) { } if (log != null) { log.info(\"Joy is down. Bye, bye!\"); } } \n### Response:", "ground_truth": "Stops the Joy.", "predict": "This method stops all the joy components, JoyProps, joyDb, and joyPetite, and prints a message indicating that Joy is down."}, {"ID": 1696, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def from_name(cls, name): \"\"\"Build a Color from a CSS color name.\"\"\" self = cls.__new__(cls) # TODO self.original_literal = name r, g, b, a = COLOR_NAMES[name] self.value = r, g, b, a return self. \n### Response: Build a Color from a CSS color name..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected Socket createSocket(final String host, final int port, final int connectionTimeout) throws IOException { final SocketFactory socketFactory = getSocketFactory(proxy, false, false, connectionTimeout); if (connectionTimeout < 0) { return socketFactory.createSocket(host, port); } else { // creates unconnected socket Socket socket = socketFactory.createSocket(); socket.connect(new InetSocketAddress(host, port), connectionTimeout); return socket; } } \n### Response:", "ground_truth": "Creates a socket using socket factory.", "predict": "Create a Socket.."}, {"ID": 1697, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def lint return if target_files.empty? bin = textlint_path result_json = run_textlint(bin, target_files) errors = parse(result_json) send_comment(errors) end. \n### Response: Execute textlint and send comment\n @return [void].\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected SSLSocket createSSLSocket( final String host, final int port, final int connectionTimeout, final boolean trustAll, final boolean verifyHttpsHost) throws IOException { final SocketFactory socketFactory = getSocketFactory(proxy, true, trustAll, connectionTimeout); final Socket socket; if (connectionTimeout < 0) { socket = socketFactory.createSocket(host, port); } else { // creates unconnected socket // unfortunately, this does not work always // sslSocket = (SSLSocket) socketFactory.createSocket(); // sslSocket.connect(new InetSocketAddress(host, port), connectionTimeout); // // Note: SSLSocketFactory has several create() methods. // Those that take arguments all connect immediately // and have no options for specifying a connection timeout. // // So, we have to create a socket and connect it (with a // connection timeout), then have the SSLSocketFactory wrap // the already-connected socket. // socket = Sockets.connect(host, port, connectionTimeout); //sock.setSoTimeout(readTimeout); //socket.connect(new InetSocketAddress(host, port), connectionTimeout); // continue to wrap this plain socket with ssl socket... } // wrap plain socket in an SSL socket SSLSocket sslSocket; if (socket instanceof SSLSocket) { sslSocket = (SSLSocket) socket; } else { if (socketFactory instanceof SSLSocketFactory) { sslSocket = (SSLSocket) ((SSLSocketFactory)socketFactory).createSocket(socket, host, port, true); } else { sslSocket = (SSLSocket) (getDefaultSSLSocketFactory(trustAll)).createSocket(socket, host, port, true); } } // sslSocket is now ready if (secureEnabledProtocols != null) { final String[] values = StringUtil.splitc(secureEnabledProtocols, ','); StringUtil.trimAll(values); sslSocket.setEnabledProtocols(values); } // set SSL parameters to allow host name verifier if (verifyHttpsHost) { final SSLParameters sslParams = new SSLParameters(); sslParams.setEndpointIdentificationAlgorithm(\"HTTPS\"); sslSocket.setSSLParameters(sslParams); } return sslSocket; } \n### Response:", "ground_truth": "Creates a SSL socket. Enables default secure enabled protocols if specified.", "predict": "`protected SSLSocket createSSLSocket(final String host, final int port, final int connectionTimeout, final boolean trustAll, final boolean verifyHttpsHost) throws IOException {`\n\n* Method name: `createSSLSocket`\n* Arguments: `host`, `port`, `connectionTimeout`, `trustAll`, `verifyHttpsHost`\n* Return type: `SSLSocket`\n* Description: Creates an SSLSocket for a given host, port, connection timeout, trustAll, and verifyHttpsHost.\n```\n// Create a new SSLSocket for the given host, port, and connection timeout.\nSSLSocket sslSocket = createSSLSocket(host, port, connectionTimeout);\n```\n* Method-level comment: This method creates an SSLSocket for the given host, port, and connection timeout.\n@return [SSLSocket]."}, {"ID": 1698, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def RdatabasesBM(host=rbiomart_host): \"\"\" Lists BioMart databases through a RPY2 connection. :param host: address of the host server, default='www.ensembl.org' :returns: nothing \"\"\" biomaRt = importr(\"biomaRt\") print(biomaRt.listMarts(host=host)). \n### Response: Lists BioMart databases through a RPY2 connection.\n\n    :param host: address of the host server, default='www.ensembl.org'\n\n    :returns: nothing.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected SSLSocketFactory getDefaultSSLSocketFactory(final boolean trustAllCertificates) throws IOException { if (trustAllCertificates) { try { SSLContext sc = SSLContext.getInstance(sslProtocol); sc.init(null, TrustManagers.TRUST_ALL_CERTS, new java.security.SecureRandom()); return sc.getSocketFactory(); } catch (NoSuchAlgorithmException | KeyManagementException e) { throw new IOException(e); } } else { return (SSLSocketFactory) SSLSocketFactory.getDefault(); } } \n### Response:", "ground_truth": "Returns default SSL socket factory allowing setting trust managers.", "predict": "Provides the default SSLSocketFactory for the application, if trustAllCertificates is specified.\n\n    :param trustAllCertificates: if true, uses the default SSLSocketFactory, if false, uses the specified SSLSocketFactory.\n\n    :returns: the default SSLSocketFactory or the specified SSLSocketFactory if trustAllCertificates is false."}, {"ID": 1699, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void populatePartialRow(PartialRow row, EntityMetadata entityMetadata, Object entity) { MetamodelImpl metaModel = (MetamodelImpl) kunderaMetadata.getApplicationMetadata() .getMetamodel(entityMetadata.getPersistenceUnit()); Class entityClazz = entityMetadata.getEntityClazz(); EntityType entityType = metaModel.entity(entityClazz); Set<Attribute> attributes = entityType.getAttributes(); Iterator<Attribute> iterator = attributes.iterator(); iterateAndPopulateRow(row, entity, metaModel, iterator); }. \n### Response: Populate partial row.\n\n@param row\nthe row\n@param entityMetadata\nthe entity metadata\n@param entity\nthe entity.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected SocketFactory getSocketFactory( final ProxyInfo proxy, final boolean ssl, final boolean trustAllCertificates, final int connectionTimeout) throws IOException { switch (proxy.getProxyType()) { case NONE: if (ssl) { return getDefaultSSLSocketFactory(trustAllCertificates); } else { return SocketFactory.getDefault(); } case HTTP: return new HTTPProxySocketFactory(proxy, connectionTimeout); case SOCKS4: return new Socks4ProxySocketFactory(proxy, connectionTimeout); case SOCKS5: return new Socks5ProxySocketFactory(proxy, connectionTimeout); default: return null; } } \n### Response:", "ground_truth": "Returns socket factory based on proxy type and SSL requirements.", "predict": "Provides the default socket factory for the specified proxy type.\n\n@param proxy\nthe proxy information\n@param ssl\nthe\u662f\u5426\u4f7f\u7528ssl\n@param trustAllCertificates\nthe\u662f\u5426\u4fe1\u4efb\u6240\u6709\u8bc1\u4e66\n@param connectionTimeout\nthe\u8fde\u63a5\u8d85\u65f6\u65f6\u95f4\n@return\nthe socket factory."}, {"ID": 1700, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static function overrideAuth(Auth $override): callable { return function (callable $handler) use ($override) { return function (RequestInterface $request, array $options = null) use ($handler, $override) { return $handler($override->authenticateRequest($request), $options ?? []); }; }; }. \n### Response: Adds custom authentication to a request.\n\n@param \\Kreait\\Firebase\\Http\\Auth $override\n\n@return callable.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public String random(int count, final char[] chars) { if (count == 0) { return StringPool.EMPTY; } final char[] result = new char[count]; while (count-- > 0) { result[count] = chars[rnd.nextInt(chars.length)]; } return new String(result); } \n### Response:", "ground_truth": "Creates random string whose length is the number of characters specified.\nCharacters are chosen from the set of characters specified.", "predict": "This method generates a random character string using the random number generator from the Random class.\n\n@param count the number of characters to generate\n@param chars the array of characters to randomize\n@return the generated random character string."}, {"ID": 1701, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function closingComment() { if (!empty($this->attributes['id'])) { $hint = '#'.$this->attributes['id']; } elseif (!empty($this->classes)) { $hint = '.'.$this->classes[0]; } else { return false; } Generator::call('il_comment', array($hint)); }. \n### Response: Adds the closing comment containing the tag id or class.\n\n@return void.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public String random(int count, final char start, final char end) { if (count == 0) { return StringPool.EMPTY; } final char[] result = new char[count]; final int len = end - start + 1; while (count-- > 0) { result[count] = (char) (rnd.nextInt(len) + start); } return new String(result); } \n### Response:", "ground_truth": "Creates random string whose length is the number of characters specified.\nCharacters are chosen from the provided range.", "predict": "This method generates a random character string from a specified range. It takes three arguments: a count of the number of characters to generate, a starting character (start), and an ending character (end). The method creates an array of length count, and then generates a random character from the end of the array to the start. Finally, it returns a new string that is the result of generating the random characters."}, {"ID": 1702, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function loadResources() { var resources = {}; var resourcesDir = path.join(this.injector.rootDir, this.injector.servicesDir + '/resources'); if (!fs.existsSync(resourcesDir)) { return resources; } var me = this; var resourceNames = fs.readdirSync(resourcesDir); _.each(resourceNames, function (resourceName) { if (resourceName.substring(resourceName.length - 3) !== '.js') { // only dirs, not js files resources[resourceName] = me.injector.loadModule(utils.getCamelCase(resourceName + '.resource')); } }); return resources; }. \n### Response: Load all resources into an object that can be injected\n@returns {{}}.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public String randomRanges(int count, final char... ranges) { if (count == 0) { return StringPool.EMPTY; } int i = 0; int len = 0; final int[] lens = new int[ranges.length]; while (i < ranges.length) { int gap = ranges[i + 1] - ranges[i] + 1; len += gap; lens[i] = len; i += 2; } final char[] result = new char[count]; while (count-- > 0) { char c = 0; int r = rnd.nextInt(len); for (i = 0; i < ranges.length; i += 2) { if (r < lens[i]) { r += ranges[i]; if (i != 0) { r -= lens[i - 2]; } c = (char) r; break; } } result[count] = c; } return new String(result); } \n### Response:", "ground_truth": "Creates random string whose length is the number of characters specified.\nCharacters are chosen from the multiple sets defined by range pairs.\nAll ranges must be in acceding order.", "predict": "Randomly generates a set of ranges for a given number of characters.\n@method public String randomRanges(int count, final char... ranges)\n@param count The number of characters to generate.\n@param ranges The set of character ranges to generate.\n@return A string that contains the randomly generated ranges."}, {"ID": 1703, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected function setup() { // Check if a valid access token exists. if (!$this->accessToken || $this->accessToken->expired()) { // Refresh is successful unless explicitly set to false. $refreshSuccess = true; // Check if a valid refresh token exists. if ($this->refreshToken && $this->refreshToken->getToken()) { // Attempt to use the refresh token. try { $this->refresh(); } catch (RequestException $e) { // Check if the exception is due to an HTTP 403. if ($e->getCode() == 403) { $response = $e->getResponse(); $json = json_decode($response->getBody()); $body = $json->{'nl.divide.iq'}; // Check if the error is indeed a \"TokenExpired\" error, // as expected. if ($body->answer == 'TokenExpired') { // Token is expired; refreshing unsuccessful. $refreshSuccess = false; } else { // Unexpected error. Pass it up the stack. This // might be a \"TokenEmpty\" error, but that would // still be unexpected, because the token value was // checked beforehand. throw $e; } } else { // Unexpected error. Pass it up the stack. throw $e; } } } else { // There is no refresh token to use; refreshing unsuccessful. $refreshSuccess = false; } // If refreshing failed, login from scratch and then authenticate. if (!$refreshSuccess) { $this->login()->authenticate(); } } // Request the settings if needed. if (!$this->settings) { $response = $this->client->get('settings', [ 'headers' => ['Authentication' => $this->accessToken->getToken()], ]); $json = json_decode($response->getBody()); $body = $json->{'nl.divide.iq'}; $services = []; foreach ($body->services as $service) { $services[] = $service->code; } // Create new settings object. $this->settings = new Settings($services, $body->settings_updated); } }. \n### Response: Sets up a connection with the Divide.IQ server..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @SuppressWarnings(\"unchecked\") protected Collection<Object> newArrayInstance(final Class targetType) { if (targetType == null || targetType == List.class || targetType == Collection.class || targetType.isArray()) { return listSupplier.get(); } if (targetType == Set.class) { return new HashSet<>(); } try { return (Collection<Object>) targetType.getDeclaredConstructor().newInstance(); } catch (Exception e) { throw new JsonException(e); } } \n### Response:", "ground_truth": "Creates new type for JSON array objects.\nIt returns a collection.\nLater, the collection will be converted into the target type.", "predict": "Creates a new instance of the specified array type using the provided supplier."}, {"ID": 1704, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def get_file_id(credentials, gfile, write_access=False): \"\"\" Get file ID by provided path. If file does not exist and `write_access` is true, it will create whole path for you. :param credentials: provide own credentials :param gfile: path to Google Spreadsheet :param write_access: allows to create full path if file does not exist :type credentials: class 'oauth2client.client.OAuth2Credentials' :type gfile: str :type write_access: boolean :returns: file ID :rtype: str :Example: >>> from df2gspread.gfiles import get_file_id >>> from df2gspread.utils import get_credentials >>> gfile = '/some/folder/with/file' >>> credentials = get_credentials() >>> get_file_id(credentials=credentials, gfile=gfile, write_access=True) u'78asbcsSND8sdSACNsa7ggcasca8shscaSACVD' \"\"\" # auth for apiclient http = credentials.authorize(Http()) service = discovery.build('drive', 'v3', http=http, cache_discovery=False) file_id = service.files().get(fileId='root', fields='id').execute().get('id') # folder/folder/folder/spreadsheet pathway = gfile.strip('/').split('/') for idx, name in enumerate(pathway): files = service.files().list( q=\"name = '{}' and trashed = false and '{}' in parents\".format(name, file_id)).execute()['files'] if len(files) > 0: # Why do you ever need to use several folders with the same name?! file_id = files[0].get('id') elif write_access == True: body = { 'mimeType': 'application/vnd.google-apps.' + ('spreadsheet' if idx == len(pathway)-1 else 'folder'), 'name': name, 'parents': [file_id] } file_id = service.files().create(body=body, fields='id').execute().get('id') else: return None return file_id. \n### Response: Get file ID by provided path. If file does not exist and\n        `write_access` is true, it will create whole path for you.\n\n        :param credentials: provide own credentials\n        :param gfile: path to Google Spreadsheet\n        :param write_access: allows to create full path if file does not exist\n        :type credentials: class 'oauth2client.client.OAuth2Credentials'\n        :type gfile: str\n        :type write_access: boolean\n        :returns: file ID\n        :rtype: str\n\n        :Example:\n\n            >>> from df2gspread.gfiles import get_file_id\n            >>> from df2gspread.utils import get_credentials\n            >>> gfile = '/some/folder/with/file'\n            >>> credentials = get_credentials()\n            >>> get_file_id(credentials=credentials, gfile=gfile, write_access=True)\n            u'78asbcsSND8sdSACNsa7ggcasca8shscaSACVD'.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void injectValueIntoObject(final Object target, final PropertyDescriptor pd, final Object value) { Object convertedValue = value; if (value != null) { Class targetClass = pd.getType(); convertedValue = convertType(value, targetClass); } try { Setter setter = pd.getSetter(true); if (setter != null) { setter.invokeSetter(target, convertedValue); } } catch (Exception ex) { throw new JsonException(ex); } } \n### Response:", "ground_truth": "Injects value into the targets property.", "predict": "### injectValueIntoObject\n```java\nprotected void injectValueIntoObject(final Object target, final PropertyDescriptor pd, final Object value)\n```\n### Resp Inject value into object\n\n:target: Object\n:pd: PropertyDescriptor\n:value: Object\n:type: Object\n:Example:\n```java\nprotected void injectValueIntoObject(final Object target, final PropertyDescriptor pd, final Object value)\n```"}, {"ID": 1705, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (t *TerminalHandler) streamEvents(ws *websocket.Conn, tc *client.TeleportClient) { for { select { // Send push events that come over the events channel to the web client. case event := <-tc.EventsChannel(): data, err := json.Marshal(event) if err != nil { t.log.Errorf(\"Unable to marshal audit event %v: %v.\", event.GetType(), err) continue } t.log.Debugf(\"Sending audit event %v to web client.\", event.GetType()) // UTF-8 encode the error message and then wrap it in a raw envelope. encodedPayload, err := t.encoder.String(string(data)) if err != nil { t.log.Debugf(\"Unable to send audit event %v to web client: %v.\", event.GetType(), err) continue } envelope := &Envelope{ Version: defaults.WebsocketVersion, Type: defaults.WebsocketAudit, Payload: encodedPayload, } envelopeBytes, err := proto.Marshal(envelope) if err != nil { t.log.Debugf(\"Unable to send audit event %v to web client: %v.\", event.GetType(), err) continue } // Send bytes over the websocket to the web client. err = websocket.Message.Send(ws, envelopeBytes) if err != nil { t.log.Errorf(\"Unable to send audit event %v to web client: %v.\", event.GetType(), err) continue } // Once the terminal stream is over (and the close envelope has been sent), // close stop streaming envelopes. case <-t.terminalContext.Done(): return } } }. \n### Response: // streamEvents receives events over the SSH connection and forwards them to\n// the web client..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected Object convertType(final Object value, final Class targetType) { final Class valueClass = value.getClass(); if (valueClass == targetType) { return value; } try { return TypeConverterManager.get().convertType(value, targetType); } catch (Exception ex) { if (!strictTypes) { return null; } throw new JsonException(\"Type conversion failed\", ex); } } \n### Response:", "ground_truth": "Converts type of the given value.", "predict": "// Converts an object to the specified target type. \n// If the target type is not found, returns null. \n// If the conversion fails due to strict types, throws a JsonException."}, {"ID": 1706, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public void libraryNotification() { // Notify the application recycle coordinator of an incompatible change that requires restarting the application if (!applications.isEmpty()) { if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) Tr.debug(this, tc, \"recycle applications\", applications); ApplicationRecycleCoordinator appRecycleCoord = (ApplicationRecycleCoordinator) componentContext.locateService(\"appRecycleCoordinator\"); Set<String> members = new HashSet<String>(applications); applications.removeAll(members); appRecycleCoord.recycleApplications(members); } }. \n### Response: Received when library is changed, for example by altering the files in the library..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void visitProvide(final String service, final String... providers) { if (mv != null) { mv.visitProvide(service, providers); } } \n### Response:", "ground_truth": "Visit an implementation of a service.\n\n@param service the internal name of the service.\n@param providers the internal names of the implementations of the service (there is at least\none provider).", "predict": "This method is used to visit the Provide method of amv object."}, {"ID": 1707, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public Message getOrCreateMessage(TextChannel channel, JsonNode data) { long id = Long.parseLong(data.get(\"id\").asText()); synchronized (messages) { return getCachedMessageById(id).orElseGet(() -> new MessageImpl(this, channel, data)); } }. \n### Response: Gets or creates a new message object.\n\n@param channel The channel of the message.\n@param data The data of the message.\n@return The message for the given json object..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @SuppressWarnings(\"unchecked\") public static <A> TypeCache<A> createDefault() { return (TypeCache<A>)Defaults.implementation.get(); } \n### Response:", "ground_truth": "Creates default implementation of the type cache.", "predict": "Creates a default TypeCache implementation.\n\n@param Defaults The default implementation.\n@return The default TypeCache implementation..\n\n"}, {"ID": 1708, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function reduce($start, $length = null) { $this->_string = \\mb_substr($this->_string, $start, $length); return $this; }. \n### Response: Reduce the strings.\n\n@param   int $start  Position of first character.\n@param   int $length Maximum number of characters.\n\n@return  self.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public T put(final Class<?> type, final T value) { return map.put(type, value); } \n### Response:", "ground_truth": "Add values to the map.", "predict": "Puts a value into the specified key in the map.\n\n@param   Class<?> type  The type of the key.\n@param   T value  The value to put into the key.\n\n@return  The value put into the key or null if the key was not found."}, {"ID": 1709, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (api *RemoteRelationsAPI) SaveMacaroons(args params.EntityMacaroonArgs) (params.ErrorResults, error) { results := params.ErrorResults{ Results: make([]params.ErrorResult, len(args.Args)), } for i, arg := range args.Args { entityTag, err := names.ParseTag(arg.Tag) if err != nil { results.Results[i].Error = common.ServerError(err) continue } err = api.st.SaveMacaroon(entityTag, arg.Macaroon) results.Results[i].Error = common.ServerError(err) } return results, nil }. \n### Response: // SaveMacaroons saves the macaroons for the given entities..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public MethodDescriptor[] getAllMethodDescriptors() { if (allMethods == null) { final List<MethodDescriptor> allMethodsList = new ArrayList<>(); for (MethodDescriptor[] methodDescriptors : methodsMap.values()) { Collections.addAll(allMethodsList, methodDescriptors); } final MethodDescriptor[] allMethods = allMethodsList.toArray(new MethodDescriptor[0]); Arrays.sort(allMethods, Comparator.comparing(md -> md.getMethod().getName())); this.allMethods = allMethods; } return allMethods; } \n### Response:", "ground_truth": "Returns all methods. Cached. Lazy.", "predict": "// getAllMethodDescriptors returns all the method descriptors for the given methods and their associated metadata.."}, {"ID": 1710, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def get_layout(self): \"\"\"Returns classes for the workflow element in template. The returned classes are determied based on the workflow characteristics. \"\"\" if self.request.is_ajax(): layout = ['modal', ] else: layout = ['static_page', ] if self.workflow_class.wizard: layout += ['wizard', ] return layout. \n### Response: Returns classes for the workflow element in template.\n\n        The returned classes are determied based on\n        the workflow characteristics..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String resolveIpAddress(final String hostname) { try { InetAddress netAddress; if (hostname == null || hostname.equalsIgnoreCase(LOCAL_HOST)) { netAddress = InetAddress.getLocalHost(); } else { netAddress = Inet4Address.getByName(hostname); } return netAddress.getHostAddress(); } catch (UnknownHostException ignore) { return null; } } \n### Response:", "ground_truth": "Resolves IP address from a hostname.", "predict": "Resolves the IP address of the host specified in the hostname parameter.\n\n        This method attempts to resolve the IP address of the host by using\n        InetAddress.getByName() and Inet4Address.getByName() to get the IP address\n        of the host, if it can be found. If either of these methods fails, it\n        will throw anUnknownHostException, which is caught and returned. If the\n        hostname is null or it does not match the local host, it will return\n        null."}, {"ID": 1711, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static function reset_course_muc($courseid) { if (empty($courseid)) { return; } $cache = \\cache::make('mod_glossary', 'concepts'); $cache->delete((int)$courseid); }. \n### Response: Reset the cache for course concepts.\n@param int $courseid.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static int getIpAsInt(final String ipAddress) { int ipIntValue = 0; String[] tokens = StringUtil.splitc(ipAddress, '.'); for (String token : tokens) { if (ipIntValue > 0) { ipIntValue <<= 8; } ipIntValue += Integer.parseInt(token); } return ipIntValue; } \n### Response:", "ground_truth": "Returns IP address as integer.", "predict": "Get the IP address as an integer.\n@param String $ipAddress."}, {"ID": 1712, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static function createFromRawConfig(string $rootPath, string $psr4RootPath) : Composer { $composerConfigPath = \"$rootPath/composer.json\"; if (file_exists($composerConfigPath)) { return new Composer(json_decode(file_get_contents($composerConfigPath), true), $rootPath, $psr4RootPath); } return new Composer([], $rootPath, $psr4RootPath); }. \n### Response: Creates an instance of this class from a raw Composer config file\n\n@param string $rootPath The path to the roof of the project\n@param string $psr4RootPath The path to the PSR-4 source directory\n@return Composer An instance of this class.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static boolean validateAgaintIPAdressV4Format(final String input) { if (input == null) { return false; } int hitDots = 0; char[] data = input.toCharArray(); for (int i = 0; i < data.length; i++) { char c = data[i]; int b = 0; do { if (c < '0' || c > '9') { return false; } b = (b * 10 + c) - 48; if (++i >= data.length) { break; } c = data[i]; } while (c != '.'); if (b > 255) { return false; } hitDots++; } return hitDots == 4; } \n### Response:", "ground_truth": "Checks given string against IP address v4 format.\n\n@param input an ip address - may be null\n@return true if param has a valid ip v4 format false otherwise\n@see ip address v4", "predict": "Validates the IP address format using the V4 format.\n\n@param String input The input IP address\n@return boolean True if the IP address is valid, false otherwise.\n\nNote: This method is used to validate the IP address input. It checks if the input is in the V4 format and if it has 4 dots in the end. If the input is not in the V4 format or if it does not have 4 dots in the end, the method returns false."}, {"ID": 1713, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private function sortInitializers(): array { $sortedInitializers = []; krsort($this->initializers); foreach ($this->initializers as $initializers) { $sortedInitializers = array_merge($sortedInitializers, $initializers); } return $sortedInitializers; }. \n### Response: Sort initializers by priority.\n\nThe highest priority number is the highest priority (reverse sorting).\n\n@return InitializerInterface[].\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String resolveHostName(final byte[] ip) { try { InetAddress address = InetAddress.getByAddress(ip); return address.getHostName(); } catch (UnknownHostException ignore) { return null; } } \n### Response:", "ground_truth": "Resolves host name from IP address bytes.", "predict": "Resolve host name from IP address.\n\n@param ip byte[] of IP address\n@return host name or null if unable to resolve"}, {"ID": 1714, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static function tr( string $content = null, array $attributes = [] ) : string { return self::tag(\"tr\", $content, $attributes); }. \n### Response: Create tr tag\n\n@param string $content content\n@param array $attributes further attributes\n@return HTML Code.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static byte[] downloadBytes(final String url) throws IOException { try (InputStream inputStream = new URL(url).openStream()) { return StreamUtil.readBytes(inputStream); } } \n### Response:", "ground_truth": "Downloads resource as byte array.", "predict": "Download data from a URL\n\n@param string $url URL to download\n@return bytes of data downloaded\n@throws IOException IOException thrown if the download is failed.\n\nNote: This method uses the `URL` class to open the stream for the specified URL, and the `StreamUtil` class to read the bytes from the stream."}, {"ID": 1715, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def findlayer(self, z): ''' Returns layer-number, layer-type and model-layer-number''' if z > self.z[0]: modellayer, ltype = -1, 'above' layernumber = None elif z < self.z[-1]: modellayer, ltype = len(self.layernumber), 'below' layernumber = None else: modellayer = np.argwhere((z <= self.z[:-1]) & (z >= self.z[1:]))[0, 0] layernumber = self.layernumber[modellayer] ltype = self.ltype[modellayer] return layernumber, ltype, modellayer. \n### Response: Returns layer-number, layer-type and model-layer-number.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String downloadString(final String url, final String encoding) throws IOException { try (InputStream inputStream = new URL(url).openStream()) { return new String(StreamUtil.readChars(inputStream, encoding)); } } \n### Response:", "ground_truth": "Downloads resource as String.", "predict": "DownloadString():\n```java\npublic static String downloadString(String url, String encoding) throws IOException {\n    try (InputStream inputStream = new URL(url).openStream()) {\n        return new String(StreamUtil.readChars(inputStream, encoding));\n    }\n}\n```"}, {"ID": 1716, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (nk *Nick) Equals(other *Nick) bool { return reflect.DeepEqual(nk, other) }. \n### Response: // Tests Nick equality..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void downloadFile(final String url, final File file) throws IOException { try ( InputStream inputStream = new URL(url).openStream(); ReadableByteChannel rbc = Channels.newChannel(inputStream); FileChannel fileChannel = FileChannel.open( file.toPath(), StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING, StandardOpenOption.WRITE) ) { fileChannel.transferFrom(rbc, 0, Long.MAX_VALUE); } } \n### Response:", "ground_truth": "Downloads resource to a file, potentially very efficiently.", "predict": "// Download a file from a URL using the provided file path and InputStream."}, {"ID": 1717, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (m *MockTransactional) BeginTX(arg0 context.Context) (context.Context, error) { ret := m.ctrl.Call(m, \"BeginTX\", arg0) ret0, _ := ret[0].(context.Context) ret1, _ := ret[1].(error) return ret0, ret1 }. \n### Response: // BeginTX mocks base method.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void inject(final ActionRequest actionRequest) { final Targets targets = actionRequest.getTargets(); final ServletContext servletContext = actionRequest.getHttpServletRequest().getServletContext(); scopeResolver.forEachScope(madvocScope -> madvocScope.inject(servletContext, targets)); scopeResolver.forEachScope(madvocScope -> madvocScope.inject(actionRequest, targets)); } \n### Response:", "ground_truth": "Performs injection.", "predict": "// injects targets for each scope in the mock service."}, {"ID": 1718, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def load_page(self, payload): \"\"\" Parses the collection of records out of a list payload. :param dict payload: The JSON-loaded content. :return list: The list of records. \"\"\" if 'meta' in payload and 'key' in payload['meta']: return payload[payload['meta']['key']] else: keys = set(payload.keys()) key = keys - self.META_KEYS if len(key) == 1: return payload[key.pop()] raise TwilioException('Page Records can not be deserialized'). \n### Response: Parses the collection of records out of a list payload.\n\n        :param dict payload: The JSON-loaded content.\n        :return list: The list of records..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void outject(final ActionRequest actionRequest) { final Targets targets = actionRequest.getTargets(); scopeResolver.forEachScope(madvocScope -> madvocScope.outject(actionRequest, targets)); } \n### Response:", "ground_truth": "Performs outjection.", "predict": "```\n        protected void outject(final ActionRequest actionRequest)\n```\n### Resp Outjects the targets of the action request.\n\n        final Targets targets = actionRequest.getTargets();\n        scopeResolver.forEachScope(madvocScope -> madvocScope.outject(actionRequest, targets));\n```\n"}, {"ID": 1719, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def get_new_driver(self, browser=None, headless=None, servername=None, port=None, proxy=None, agent=None, switch_to=True, cap_file=None, disable_csp=None): \"\"\" This method spins up an extra browser for tests that require more than one. The first browser is already provided by tests that import base_case.BaseCase from seleniumbase. If parameters aren't specified, the method uses the same as the default driver. @Params browser - the browser to use. (Ex: \"chrome\", \"firefox\") headless - the option to run webdriver in headless mode servername - if using a Selenium Grid, set the host address here port - if using a Selenium Grid, set the host port here proxy - if using a proxy server, specify the \"host:port\" combo here switch_to - the option to switch to the new driver (default = True) \"\"\" if self.browser == \"remote\" and self.servername == \"localhost\": raise Exception('Cannot use \"remote\" browser driver on localhost!' ' Did you mean to connect to a remote Grid server' ' such as BrowserStack or Sauce Labs? In that' ' case, you must specify the \"server\" and \"port\"' ' parameters on the command line! ' 'Example: ' '--server=user:key@hub.browserstack.com --port=80') browserstack_ref = ( 'https://browserstack.com/automate/capabilities') sauce_labs_ref = ( 'https://wiki.saucelabs.com/display/DOCS/Platform+Configurator#/') if self.browser == \"remote\" and not self.cap_file: raise Exception('Need to specify a desired capabilities file when ' 'using \"--browser=remote\". Add \"--cap_file=FILE\". ' 'File should be in the Python format used by: ' '%s OR ' '%s ' 'See SeleniumBase/examples/sample_cap_file_BS.py ' 'and SeleniumBase/examples/sample_cap_file_SL.py' % (browserstack_ref, sauce_labs_ref)) if browser is None: browser = self.browser browser_name = browser if headless is None: headless = self.headless if servername is None: servername = self.servername if port is None: port = self.port use_grid = False if servername != \"localhost\": # Use Selenium Grid (Use \"127.0.0.1\" for localhost Grid) use_grid = True proxy_string = proxy if proxy_string is None: proxy_string = self.proxy_string user_agent = agent if user_agent is None: user_agent = self.user_agent if disable_csp is None: disable_csp = self.disable_csp if self.demo_mode or self.masterqa_mode: disable_csp = True if cap_file is None: cap_file = self.cap_file valid_browsers = constants.ValidBrowsers.valid_browsers if browser_name not in valid_browsers: raise Exception(\"Browser: {%s} is not a valid browser option. \" \"Valid options = {%s}\" % (browser, valid_browsers)) # Launch a web browser from seleniumbase.core import browser_launcher new_driver = browser_launcher.get_driver(browser_name=browser_name, headless=headless, use_grid=use_grid, servername=servername, port=port, proxy_string=proxy_string, user_agent=user_agent, cap_file=cap_file, disable_csp=disable_csp) self._drivers_list.append(new_driver) if switch_to: self.driver = new_driver if self.headless: # Make sure the invisible browser window is big enough try: self.set_window_size(1440, 1080) self.wait_for_ready_state_complete() except Exception: # This shouldn't fail, but in case it does, # get safely through setUp() so that # WebDrivers can get closed during tearDown(). pass else: if self.browser == 'chrome' or self.browser == 'opera': try: self.driver.set_window_size(1250, 840) self.wait_for_ready_state_complete() except Exception: pass # Keep existing browser resolution elif self.browser == 'edge': try: self.driver.maximize_window() self.wait_for_ready_state_complete() except Exception: pass # Keep existing browser resolution return new_driver. \n### Response: This method spins up an extra browser for tests that require\n            more than one. The first browser is already provided by tests\n            that import base_case.BaseCase from seleniumbase. If parameters\n            aren't specified, the method uses the same as the default driver.\n            @Params\n            browser - the browser to use. (Ex: \"chrome\", \"firefox\")\n            headless - the option to run webdriver in headless mode\n            servername - if using a Selenium Grid, set the host address here\n            port - if using a Selenium Grid, set the host port here\n            proxy - if using a proxy server, specify the \"host:port\" combo here\n            switch_to - the option to switch to the new driver (default = True).\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static Socket connect(final String hostname, final int port) throws IOException { final Socket socket = new Socket(); socket.connect(new InetSocketAddress(hostname, port)); return socket; } \n### Response:", "ground_truth": "Creates a socket.", "predict": "This method connects to a remote host at the specified hostname and port. It throws an IOException if an error occurs during the connection process."}, {"ID": 1720, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def axis_rotation(axis, angle, vectors, axis_shift=(0, 0, 0)): \"\"\"Rotate a vector or an array of vectors around an axis in 3d. The rotation is computed by `Rodrigues' rotation formula`_. Parameters ---------- axis : `array-like`, shape ``(3,)`` Rotation axis, assumed to be a unit vector. angle : float Angle of the counter-clockwise rotation. vectors : `array-like`, shape ``(3,)`` or ``(N, 3)`` The vector(s) to be rotated. axis_shift : `array_like`, shape ``(3,)``, optional Shift the rotation center by this vector. Note that only shifts perpendicular to ``axis`` matter. Returns ------- rot_vec : `numpy.ndarray` The rotated vector(s). References ---------- .. _Rodrigues' rotation formula: https://en.wikipedia.org/wiki/Rodrigues'_rotation_formula Examples -------- Rotating around the third coordinate axis by and angle of 90 degrees: >>> axis = (0, 0, 1) >>> rot1 = axis_rotation(axis, angle=np.pi / 2, vectors=(1, 0, 0)) >>> np.allclose(rot1, (0, 1, 0)) True >>> rot2 = axis_rotation(axis, angle=np.pi / 2, vectors=(0, 1, 0)) >>> np.allclose(rot2, (-1, 0, 0)) True The rotation can be performed with shifted rotation center. A shift along the axis does not matter: >>> rot3 = axis_rotation(axis, angle=np.pi / 2, vectors=(1, 0, 0), ... axis_shift=(0, 0, 2)) >>> np.allclose(rot3, (0, 1, 0)) True The distance between the rotation center and the vector to be rotated determines the radius of the rotation circle: >>> # Rotation center in the point to be rotated, should do nothing >>> rot4 = axis_rotation(axis, angle=np.pi / 2, vectors=(1, 0, 0), ... axis_shift=(1, 0, 0)) >>> np.allclose(rot4, (1, 0, 0)) True >>> # Distance 2, thus rotates to (0, 2, 0) in the shifted system, >>> # resulting in (-1, 2, 0) from shifting back after rotating >>> rot5 = axis_rotation(axis, angle=np.pi / 2, vectors=(1, 0, 0), ... axis_shift=(-1, 0, 0)) >>> np.allclose(rot5, (-1, 2, 0)) True Rotation of multiple vectors can be done in bulk: >>> vectors = [[1, 0, 0], [0, 1, 0]] >>> rot = axis_rotation(axis, angle=np.pi / 2, vectors=vectors) >>> np.allclose(rot[0], (0, 1, 0)) True >>> np.allclose(rot[1], (-1, 0, 0)) True \"\"\" rot_matrix = axis_rotation_matrix(axis, angle) vectors = np.asarray(vectors, dtype=float) if vectors.shape == (3,): vectors = vectors[None, :] elif vectors.ndim == 2 and vectors.shape[1] == 3: pass else: raise ValueError('`vectors` must have shape (3,) or (N, 3), got array ' 'with shape {}'.format(vectors.shape)) # Get `axis_shift` part that is perpendicular to `axis` axis_shift = np.asarray(axis_shift, dtype=float) axis = np.asarray(axis, dtype=float) axis_shift = axis_shift - axis.dot(axis_shift) * axis # Shift vectors with the negative of the axis shift to move the rotation # center to the origin. Then rotate and shift back. centered_vecs = vectors - axis_shift[None, :] # Need to transpose the vectors to make the axis of length 3 come first rot_vecs = rot_matrix.dot(centered_vecs.T).T return axis_shift[None, :] + rot_vecs. \n### Response: Rotate a vector or an array of vectors around an axis in 3d.\n\n    The rotation is computed by `Rodrigues' rotation formula`_.\n\n    Parameters\n    ----------\n    axis : `array-like`, shape ``(3,)``\n        Rotation axis, assumed to be a unit vector.\n    angle : float\n        Angle of the counter-clockwise rotation.\n    vectors : `array-like`, shape ``(3,)`` or ``(N, 3)``\n        The vector(s) to be rotated.\n    axis_shift : `array_like`, shape ``(3,)``, optional\n        Shift the rotation center by this vector. Note that only shifts\n        perpendicular to ``axis`` matter.\n\n    Returns\n    -------\n    rot_vec : `numpy.ndarray`\n        The rotated vector(s).\n\n    References\n    ----------\n    .. _Rodrigues' rotation formula:\n        https://en.wikipedia.org/wiki/Rodrigues'_rotation_formula\n\n    Examples\n    --------\n    Rotating around the third coordinate axis by and angle of 90 degrees:\n\n    >>> axis = (0, 0, 1)\n    >>> rot1 = axis_rotation(axis, angle=np.pi / 2, vectors=(1, 0, 0))\n    >>> np.allclose(rot1, (0, 1, 0))\n    True\n    >>> rot2 = axis_rotation(axis, angle=np.pi / 2, vectors=(0, 1, 0))\n    >>> np.allclose(rot2, (-1, 0, 0))\n    True\n\n    The rotation can be performed with shifted rotation center. A shift\n    along the axis does not matter:\n\n    >>> rot3 = axis_rotation(axis, angle=np.pi / 2, vectors=(1, 0, 0),\n    ...                      axis_shift=(0, 0, 2))\n    >>> np.allclose(rot3, (0, 1, 0))\n    True\n\n    The distance between the rotation center and the vector to be rotated\n    determines the radius of the rotation circle:\n\n    >>> # Rotation center in the point to be rotated, should do nothing\n    >>> rot4 = axis_rotation(axis, angle=np.pi / 2, vectors=(1, 0, 0),\n    ...                      axis_shift=(1, 0, 0))\n    >>> np.allclose(rot4, (1, 0, 0))\n    True\n    >>> # Distance 2, thus rotates to (0, 2, 0) in the shifted system,\n    >>> # resulting in (-1, 2, 0) from shifting back after rotating\n    >>> rot5 = axis_rotation(axis, angle=np.pi / 2, vectors=(1, 0, 0),\n    ...                      axis_shift=(-1, 0, 0))\n    >>> np.allclose(rot5, (-1, 2, 0))\n    True\n\n    Rotation of multiple vectors can be done in bulk:\n\n    >>> vectors = [[1, 0, 0], [0, 1, 0]]\n    >>> rot = axis_rotation(axis, angle=np.pi / 2, vectors=vectors)\n    >>> np.allclose(rot[0], (0, 1, 0))\n    True\n    >>> np.allclose(rot[1], (-1, 0, 0))\n    True.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static Socket connect(final String hostname, final int port, final int connectionTimeout) throws IOException { final Socket socket = new Socket(); if (connectionTimeout <= 0) { socket.connect(new InetSocketAddress(hostname, port)); } else { socket.connect(new InetSocketAddress(hostname, port), connectionTimeout); } return socket; } \n### Response:", "ground_truth": "Creates a socket with a timeout.", "predict": "This code defines a method named `axis_rotation` that performs an axis-based rotation of a vector or an array of vectors in 3D. The rotation is computed using the `Rodrigues' rotation formula`, and the parameters are as follows:\n\n* `axis`: an `array-like` of shape `(3,)` representing the rotation axis, assumed to be a unit vector.\n* `angle`: a float representing the angle"}, {"ID": 1721, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def _get_mapping(self, schema): \"\"\"Get mapping for given resource or item schema. :param schema: resource or dict/list type item schema \"\"\" properties = {} for field, field_schema in schema.items(): field_mapping = self._get_field_mapping(field_schema) if field_mapping: properties[field] = field_mapping return {'properties': properties}. \n### Response: Get mapping for given resource or item schema.\n\n        :param schema: resource or dict/list type item schema.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private static int getPrimitiveClassNameIndex(final String className) { int dotIndex = className.indexOf('.'); if (dotIndex != -1) { return -1; } return Arrays.binarySearch(PRIMITIVE_TYPE_NAMES, className); } \n### Response:", "ground_truth": "Detects if provided class name is a primitive type.\nReturns >= 0 number if so.", "predict": "private static int getPrimitiveClassNameIndex(final String className) {\n        int dotIndex = className.indexOf('.');\n        if (dotIndex!= -1) {\n            return -1;\n        }\n        return Arrays.binarySearch(PRIMITIVE_TYPE_NAMES, className);\n    }"}, {"ID": 1722, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func ReadInt64(file string) (int64, error) { f, err := os.Open(file) if err != nil { return 0, err } defer f.Close() buf := make([]byte, 19) n, err := f.Read(buf) if err != nil { return 0, err } p := strings.Split(string(buf[0:n]), \"\\n\") v, err := strconv.ParseInt(p[0], 10, 64) if err != nil { return 0, err } return v, nil }. \n### Response: // ReadInt64 reads one int64 number from the first line of a file..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public Class loadClass(final String className, final ClassLoader classLoader) throws ClassNotFoundException { String arrayClassName = prepareArrayClassnameForLoading(className); if ((className.indexOf('.') == -1) && (arrayClassName == null)) { // maybe a primitive int primitiveNdx = getPrimitiveClassNameIndex(className); if (primitiveNdx >= 0) { return PRIMITIVE_TYPES[primitiveNdx]; } } // try #1 - using provided class loader if (classLoader != null) { Class klass = loadClass(className, arrayClassName, classLoader); if (klass != null) { return klass; } } // try #2 - using thread class loader ClassLoader currentThreadClassLoader = Thread.currentThread().getContextClassLoader(); if ((currentThreadClassLoader != null) && (currentThreadClassLoader != classLoader)) { Class klass = loadClass(className, arrayClassName, currentThreadClassLoader); if (klass != null) { return klass; } } // try #3 - using caller classloader, similar as Class.forName() //Class callerClass = ReflectUtil.getCallerClass(2); Class callerClass = ClassUtil.getCallerClass(); ClassLoader callerClassLoader = callerClass.getClassLoader(); if ((callerClassLoader != classLoader) && (callerClassLoader != currentThreadClassLoader)) { Class klass = loadClass(className, arrayClassName, callerClassLoader); if (klass != null) { return klass; } } // try #4 - everything failed, try alternative array loader if (arrayClassName != null) { try { return loadArrayClassByComponentType(className, classLoader); } catch (ClassNotFoundException ignore) { } } throw new ClassNotFoundException(\"Class not found: \" + className); } \n### Response:", "ground_truth": "Loads class by name.", "predict": "// @Override public Class loadClass(final String className, final ClassLoader classLoader) throws ClassNotFoundException {\n//    String arrayClassName = prepareArrayClassnameForLoading(className);\n//    if ((className.indexOf('.') == -1) && (arrayClassName == null)) {\n//        // maybe a primitive\n//    } else {\n//        // try #1 - using provided class loader\n//        if (classLoader!= null) {\n//            Class klass = loadClass(className, arrayClassName, classLoader);\n//            if (klass!= null) {\n//                return klass;\n//            }\n//        }\n//        // try #2 - using thread class loader\n//        ClassLoader currentThreadClassLoader = Thread.currentThread().getContextClassLoader();\n//        if ((currentThreadClassLoader!= null) && (currentThreadClassLoader!= classLoader)) {\n//            Class klass = loadClass(className, arrayClassName, currentThreadClassLoader);\n//            if (klass!= null) {\n//                return klass;\n//            }\n//        }\n//        // try #3 - using caller classloader, similar as Class.forName()\n//        Class callerClass = ReflectUtil.getCallerClass(2);\n//        Class callerClass = ClassUtil.getCallerClass();\n//        ClassLoader callerClassLoader = callerClass.getClassLoader();\n//        if ((callerClassLoader!= classLoader) && (callerClassLoader!= currentThreadClassLoader)) {\n//            Class klass = loadClass(className, arrayClassName, callerClassLoader);\n//            if (klass!= null) {\n//                return klass;\n//            }\n//        }\n//        // try #4 - everything failed, try alternative array loader\n//        if (arrayClassName!= null) {\n//            try {\n//                return loadArrayClassByComponentType(className, classLoader);\n//            } catch (ClassNotFoundException ignore) {\n//                // everything failed, try alternative array loader\n//            }\n//        }\n//        throw new ClassNotFoundException(\"Class not found: \" + className);\n//    }\n// }\n```"}, {"ID": 1723, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def _get_local_dirs(sub): \"\"\" Get all the directories \"\"\" path = os.environ.get(\"SPARK_LOCAL_DIRS\", \"/tmp\") dirs = path.split(\",\") if len(dirs) > 1: # different order in different processes and instances rnd = random.Random(os.getpid() + id(dirs)) random.shuffle(dirs, rnd.random) return [os.path.join(d, \"python\", str(os.getpid()), sub) for d in dirs]. \n### Response: Get all the directories.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected Class loadArrayClassByComponentType(final String className, final ClassLoader classLoader) throws ClassNotFoundException { int ndx = className.indexOf('['); int multi = StringUtil.count(className, '['); String componentTypeName = className.substring(0, ndx); Class componentType = loadClass(componentTypeName, classLoader); if (multi == 1) { return Array.newInstance(componentType, 0).getClass(); } int[] multiSizes; if (multi == 2) { multiSizes = new int[] {0, 0}; } else if (multi == 3) { multiSizes = new int[] {0, 0, 0}; } else { multiSizes = (int[]) Array.newInstance(int.class, multi); } return Array.newInstance(componentType, multiSizes).getClass(); } \n### Response:", "ground_truth": "Loads array class using component type.", "predict": "This method loads an array class by component type using the specified classloader. It first searches for the \"[\" character in the className string and extracts the component type name. If the component type name is not found, it returns the first class that matches the component type. If the component type is found, it loads an array of the specified size and returns the resulting class. If multiple component types are found, it returns an array of classes that match all component types."}, {"ID": 1724, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def trusted?(pem) if cert = OpenSSL::X509::Certificate.new(pem) rescue nil @store.verify(cert).tap do |trusted| @store.add_cert(cert) if trusted rescue nil end end end. \n### Response: Return true if the certificate is signed by a CA certificate in the\n store. If the certificate can be trusted, it's added to the store so\n it can be used to trust other certs..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public void shutdown() { for (final BeanData beanData : instances.values()) { beanData.callDestroyMethods(); } instances.clear(); } \n### Response:", "ground_truth": "Iterate all beans and invokes registered destroy methods.", "predict": "Implement a shutdown method in the class that manages the instances. This method will iterate over all the BeanData objects in the instances collection and call their destroy methods. Finally, it will clear the instances collection to prepare for shutdown."}, {"ID": 1725, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func newHTTPConnection(endpoint string, config ConnectionConfig) (driver.Connection, error) { if config.ConnLimit == 0 { config.ConnLimit = DefaultConnLimit } endpoint = util.FixupEndpointURLScheme(endpoint) u, err := url.Parse(endpoint) if err != nil { return nil, driver.WithStack(err) } var httpTransport *http.Transport if config.Transport != nil { httpTransport, _ = config.Transport.(*http.Transport) } else { httpTransport = &http.Transport{ // Copy default values from http.DefaultTransport Proxy: http.ProxyFromEnvironment, DialContext: (&net.Dialer{ Timeout: 30 * time.Second, KeepAlive: 30 * time.Second, DualStack: true, }).DialContext, MaxIdleConns: 100, IdleConnTimeout: 90 * time.Second, TLSHandshakeTimeout: 10 * time.Second, ExpectContinueTimeout: 1 * time.Second, } config.Transport = httpTransport } if httpTransport != nil { if httpTransport.MaxIdleConnsPerHost == 0 { // Raise the default number of idle connections per host since in a database application // it is very likely that you want more than 2 concurrent connections to a host. // We raise it to avoid the extra concurrent connections being closed directly // after use, resulting in a lot of connection in `TIME_WAIT` state. httpTransport.MaxIdleConnsPerHost = DefaultMaxIdleConnsPerHost } defaultMaxIdleConns := 3 * DefaultMaxIdleConnsPerHost if httpTransport.MaxIdleConns > 0 && httpTransport.MaxIdleConns < defaultMaxIdleConns { // For a cluster scenario we assume the use of 3 coordinators (don't know the exact number here) // and derive the maximum total number of idle connections from that. httpTransport.MaxIdleConns = defaultMaxIdleConns } if config.TLSConfig != nil { httpTransport.TLSClientConfig = config.TLSConfig } } httpClient := &http.Client{ Transport: config.Transport, } if config.DontFollowRedirect { httpClient.CheckRedirect = func(req *http.Request, via []*http.Request) error { return http.ErrUseLastResponse // Do not wrap, standard library will not understand } } else if config.FailOnRedirect { httpClient.CheckRedirect = func(req *http.Request, via []*http.Request) error { return driver.ArangoError{ HasError: true, Code: http.StatusFound, ErrorNum: 0, ErrorMessage: \"Redirect not allowed\", } } } var connPool chan int if config.ConnLimit > 0 { connPool = make(chan int, config.ConnLimit) // Fill with available tokens for i := 0; i < config.ConnLimit; i++ { connPool <- i } } c := &httpConnection{ endpoint: *u, contentType: config.ContentType, client: httpClient, connPool: connPool, } return c, nil }. \n### Response: // newHTTPConnection creates a new HTTP connection for a single endpoint and the remainder of the given configuration settings..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static <T extends Comparable> BinarySearch<T> forArray(final T[] array) { return new BinarySearch<T>() { @Override @SuppressWarnings( {\"unchecked\"}) protected int compare(final int index, final T element) { return array[index].compareTo(element); } @Override protected int getLastIndex() { return array.length - 1; } }; } \n### Response:", "ground_truth": "Creates binary search wrapper over an array.", "predict": "// BinarySearch<T> returns the index of the first element that is greater than or equal to the given element, or the last index of the first element that is less than the given element.."}, {"ID": 1726, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func NewDeviceChangeIpDesktopType(Description string) *DeviceChangeIpDesktopType { s := new(DeviceChangeIpDesktopType) s.Description = Description return s }. \n### Response: // NewDeviceChangeIpDesktopType returns a new DeviceChangeIpDesktopType instance.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static <T> BinarySearch<T> forArray(final T[] array, final Comparator<T> comparator) { return new BinarySearch<T>() { @Override @SuppressWarnings( {\"unchecked\"}) protected int compare(final int index, final T element) { return comparator.compare(array[index], element); } @Override protected int getLastIndex() { return array.length - 1; } }; } \n### Response:", "ground_truth": "Creates binary search wrapper over an array with given comparator.", "predict": "// BinarySearch<T> returns a binary search implementation for an array."}, {"ID": 1727, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: void outputComplementDirect(StringBuffer buf) { if (!surrogatesDirect && getContainsBmp() == NONE) buf.append(\"[\\u0000-\\uFFFF]\"); else { buf.append(\"[^\"); inClassOutputDirect(buf); buf.append(']'); } }. \n### Response: must not call if containsBmp == ALL && !surrogatesDirect.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public T exclude(final String... excludes) { for (String ex : excludes) { rules.exclude(ex); } return _this(); } \n### Response:", "ground_truth": "Defines excluded property names.", "predict": "\"This method exclude(String...) is used to exclude certain strings from the rules. It iterates through the specified excludes array and calls the rules.exclude() method for each string in the array. The method returns the excluded T object.\""}, {"ID": 1728, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static function dashesToCamelCase($dashes) { $words = explode('-', $dashes); $camelCase = ''; foreach ($words as $word) { $camelCase .= ucfirst($word); } return $camelCase; }. \n### Response: Convert a lowercase dash-separated name to a camel case class-name.\nE.g.\nfrom \"camel-case\" to \"CamelCase\".\n\n@param string $dashes\nDash-separated string\n@return string A camel case string.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public T include(final String... includes) { for (String in : includes) { rules.include(in); } return _this(); } \n### Response:", "ground_truth": "Defines included property names.", "predict": "This method is used to include all the elements in the given array of includes. It iterates over the array and calls the include method on each element, which is then added to the existing rules array. The returned value is the entire rules array.\n\n@param String... includes\nArray of includes to be included\n@return T The current object."}, {"ID": 1729, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected function _create($postdata = array()) { if (!$this->is_create || $this->table_ro) return self::error('Forbidden'); $this->primary_val = null; $this->result_row = array_merge($this->defaults, $postdata); if ($this->before_create) { $path = $this->check_file($this->before_create['path'], 'before_create'); include_once ($path); if (is_callable($this->before_create['callable'])) { $postdata = new Fruit_postdata($this->result_row, $this); call_user_func_array($this->before_create['callable'], array($postdata, $this)); $this->result_row = $postdata->to_array(); } } $this->_set_field_names(); /** conditions process */ if ($this->condition) { foreach ($this->condition as $params) { if (!isset($params['mode']['create'])) continue; $params['value'] = $this->replace_text_variables($params['value'], $this->result_row); if (array_key_exists($params['field'], $this->result_row) && $this->_compare($this->result_row[$params['field']], $params['operator'], $params['value'])) { if (is_array($params['method']) && is_callable($params['method'])) { call_user_func_array($params['method'], $params['params']); } elseif (is_callable(array($this, $params['method']))) { $this->condition_backup($params['method']); call_user_func_array(array($this, $params['method']), $params['params']); } elseif (is_callable($params['method'])) { call_user_func_array($params['method'], $params['params']); } } } } return $this->_render_details('create'); }. \n### Response: creates fieldlist for adding record.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public T includeAs(final Class template) { blacklist = false; String[] properties = getAllBeanPropertyNames(template, false); include(properties); return _this(); } \n### Response:", "ground_truth": "Defines included property names as public properties\nof given template class. Sets to black list mode.", "predict": "This method is used to include a class in a list of classes that can be used as a template for creating objects. It first sets a boolean flag called \"blacklist\" to indicate whether to include the class in the list or not. It then uses the \"getAllBeanPropertyNames\" method to get a list of all the Bean property names of the given template, and includes them in the list using the \"include\" method. Finally, it returns the modified list of classes."}, {"ID": 1730, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private static <T extends MPBase> JsonObject generatePayload(HttpMethod httpMethod, T resource) { JsonObject payload = null; if (httpMethod.equals(HttpMethod.POST) || (httpMethod.equals(HttpMethod.PUT) && resource._lastKnownJson == null)) { payload = MPCoreUtils.getJsonFromResource(resource); } else if (httpMethod.equals(HttpMethod.PUT)) { JsonObject actualJson = MPCoreUtils.getJsonFromResource(resource); Type mapType = new TypeToken<Map<String, Object>>(){}.getType(); Gson gson = new Gson(); Map<String, Object> oldMap = gson.fromJson(resource._lastKnownJson, mapType); Map<String, Object> newMap = gson.fromJson(actualJson, mapType); MapDifference<String, Object> mapDifferences = Maps.difference(oldMap, newMap); payload = new JsonObject(); for (Map.Entry<String, MapDifference.ValueDifference<Object>> entry : mapDifferences.entriesDiffering().entrySet()) { if (entry.getValue().rightValue() instanceof LinkedTreeMap) { JsonElement jsonObject = gson.toJsonTree(entry.getValue().rightValue()).getAsJsonObject(); payload.add(entry.getKey(), jsonObject); } else { if (entry.getValue().rightValue() instanceof Boolean) { payload.addProperty(entry.getKey(), (Boolean)entry.getValue().rightValue()); } else if (entry.getValue().rightValue() instanceof Number) { payload.addProperty(entry.getKey(), (Number)entry.getValue().rightValue()); } else { payload.addProperty(entry.getKey(), entry.getValue().rightValue().toString()); } } } for (Map.Entry<String, Object> entry : mapDifferences.entriesOnlyOnRight().entrySet()) { if (entry.getValue() instanceof Boolean) { payload.addProperty(entry.getKey(), (Boolean)entry.getValue()); } else if (entry.getValue() instanceof Number) { payload.addProperty(entry.getKey(), (Number)entry.getValue()); } else { payload.addProperty(entry.getKey(), entry.getValue().toString()); } } } return payload; }. \n### Response: Transforms all attributes members of the instance in a JSON String. Only for POST and PUT methods.\nPOST gets the full object in a JSON object.\nPUT gets only the differences with the last known state of the object.\n\n@return                  a JSON Object with the attributes members of the instance. Null for GET and DELETE methods.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void start(final int startIndex) { this.tagStartIndex = startIndex; this.name = null; this.idNdx = -1; this.attributesCount = 0; this.tagLength = 0; this.modified = false; this.type = TagType.START; this.rawTag = false; } \n### Response:", "ground_truth": "Starts the tag with the index of first '<'.\nResets all tag data.", "predict": "This method starts a tag.\nIt sets the start index of the tag to the given startIndex.\nIt sets various properties of the tag object.\nIt sets the modified flag to false, indicating that the tag has not been modified.\nIt sets the type to TagType.START, indicating that this is a start tag.\nIt sets the raw tag flag to false, indicating that this is not a raw tag.\n\n@param startIndex   the starting index of the tag.\n@return             a tag object with the start index of the tag.\n\nNote: This method only sets properties of the tag object, it does not create or return a tag object."}, {"ID": 1731, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function $initializeCodesMap() { var k = null, code = null; // validate codes mapping for(k in CODES) { code = CODES[k]; if (code.map !== undefined) { if (CODES[code.map] === undefined) { throw new Error(\"Invalid mapping for code = '\" + k + \"'\"); } } else if (code.keyCode === undefined) { throw new Error(\"unknown keyCode for code = '\" + k + \"'\"); } } // build codes map table for the cases when \"code\" property CODES_MAP = {}; for(k in CODES) { code = CODES[k]; if (code.map !== undefined) { if (code.keyCode !== undefined) { CODES_MAP[code.keyCode] = code.map; } } else { CODES_MAP[code.keyCode] = k; } } }. \n### Response: codes to that are not the same for different browsers.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public <T> void registerComponent(final String name, final Class<T> component, final Consumer<T> consumer) { log.debug(() -> \"Madvoc WebApp component: [\" + name + \"] --> \" + component.getName()); madpc.removeBean(name); madpc.registerPetiteBean(component, name, null, null, false, consumer); } \n### Response:", "ground_truth": "Registers Madvoc component with given name.", "predict": "This method registers a component in the Madvoc WebApp, specifying the name, class of the component, a consumer for the component, and various options for registering the component. It also removes a previously registered component with the same name. The consumer is used to register the component with Madvoc. The options used for registration are not specified in the code snippet provided."}, {"ID": 1732, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function upvoters() { return $this->morphToMany(config('follow.user_model'), config('follow.morph_prefix'), config('follow.followable_table')) ->wherePivot('relation', '=', Follow::RELATION_UPVOTE) ->withPivot('followable_type', 'relation', 'created_at'); }. \n### Response: Return upvoters.\n\n@return \\Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void resolveColumnDbSqlType(final Connection connection, final DbEntityColumnDescriptor dec) { if (dec.dbSqlType != SqlType.DB_SQLTYPE_UNKNOWN) { return; } ResultSet rs = null; DbEntityDescriptor ded = dec.getDbEntityDescriptor(); try { DatabaseMetaData dmd = connection.getMetaData(); rs = dmd.getColumns(null, ded.getSchemaName(), ded.getTableName(), dec.getColumnName()); if (rs.next()) { dec.dbSqlType = rs.getInt(\"DATA_TYPE\"); } else { dec.dbSqlType = SqlType.DB_SQLTYPE_NOT_AVAILABLE; if (log.isWarnEnabled()) { log.warn(\"Column SQL type not available: \" + ded.toString() + '.' + dec.getColumnName()); } } } catch (SQLException sex) { dec.dbSqlType = SqlType.DB_SQLTYPE_NOT_AVAILABLE; if (log.isWarnEnabled()) { log.warn(\"Column SQL type not resolved: \" + ded.toString() + '.' + dec.getColumnName(), sex); } } finally { DbUtil.close(rs); } } \n### Response:", "ground_truth": "Resolves column db sql type and populates it in column descriptor if missing.", "predict": "Resolves the SQL type of a column in a database table.\n\n@param Connection connection The connection to the database.\n@param DbEntityColumnDescriptor dec The DbEntityColumnDescriptor representing the column.\n\nThis method is used to resolve the SQL type of a column in a database table. It first checks if the column has a unknown SQL type, and if so, returns. If the column has a known but not available SQL type, it logs the error and returns. If the column has a known but not available SQL type, it logs the error and returns. If the column has a known but not available SQL type, it attempts to resolve the SQL type using the ResultSet. If the column is not found in the database, it logs an error and returns. Finally, it closes the ResultSet and any other resources used by the method."}, {"ID": 1733, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private function splitConfiguration(array $options) { $return_array = [ 'method' => 'GET', 'arguments' => [], 'options' => [], ]; // Request method passed? if (isset($options['method'])) { $return_array['method'] = $options['method']; } // URL arguments passed? if (isset($options['arguments'])) { $return_array['arguments'] = $options['arguments']; }; // Request options passed? if (isset($options['options'])) { $return_array['options'] = $options['options']; } return array_values($return_array); }. \n### Response: Splits API request options array into main buckets.\n\n@param array $options\nKey/Value array of api request options.\n\n@return array.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected String preprocessSql(String sqlString) { // detects callable statement if (sqlString.charAt(0) == '{') { return sqlString; } // quickly detect if SQL string is a key if (!CharUtil.isAlpha(sqlString.charAt(0))) { sqlString = sqlString.substring(1); } else if (sqlString.indexOf(' ') != -1) { return sqlString; } final String sqlFromMap = dbOom.queryMap().getQuery(sqlString); if (sqlFromMap != null) { sqlString = sqlFromMap.trim(); } return sqlString; } \n### Response:", "ground_truth": "Pre-process SQL before using it. If string starts with a non-ascii char\nor it has no spaces, it will be loaded from the query map.", "predict": "preprocessSql(String sqlString)\n\nThis method is used to preprocess a SQL string. It detects if the SQL string is a callable statement, quickly detects if it is a key, and thentrims the SQL string if it is a key.\n\n@param string $sqlString\nThe SQL string to preprocess.\n\n@return string."}, {"ID": 1734, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private function convertItemStatus(Shipping $shipping, $shippingStatusId) { foreach ($shipping->getItems() as $shippingItem) { // get item $item = $shippingItem->getItem(); // set item status based on current shipping status switch ($shippingStatusId) { // created case ShippingStatusEntity::STATUS_CREATED: // TODO: REMOVE PREVIOUS STATE $this->itemManager->addStatus($item, Item::STATUS_CREATED); break; // delivery note case ShippingStatusEntity::STATUS_DELIVERY_NOTE: if ($this->isPartiallyItem($shippingItem, true)) { $itemStatus = Item::STATUS_SHIPPING_NOTE_PARTIALLY; } else { $itemStatus = Item::STATUS_SHIPPING_NOTE; } $this->itemManager->addStatus($item, $itemStatus); break; // shipped case ShippingStatusEntity::STATUS_SHIPPED: if ($this->isPartiallyItem($shippingItem, false)) { $itemStatus = Item::STATUS_SHIPPED_PARTIALLY; } else { $itemStatus = Item::STATUS_SHIPPED; } $this->itemManager->addStatus($item, $itemStatus); break; case ShippingStatusEntity::STATUS_CANCELED: // TODO: check if still fully shipped $this->itemManager->removeStatus($item, Item::STATUS_SHIPPED); // TODO: check if partially shipped break; } } }. \n### Response: converts the status of an item\n@param Shipping $shipping\n@param $shippingStatusId.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected ResultSetMapper createResultSetMapper(final ResultSet resultSet) { final Map<String, ColumnData> columnAliases = sqlgen != null ? sqlgen.getColumnData() : null; return new DefaultResultSetMapper(dbOom, resultSet, columnAliases, cacheEntities, this); } \n### Response:", "ground_truth": "Factory for result sets mapper.", "predict": "Creates a ResultSetMapper instance.\n@return a DefaultResultSetMapper instance.\n\n"}, {"ID": 1735, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (m *memberlist) CountMembers(predicates ...MemberPredicate) int { count := 0 m.members.RLock() for _, member := range m.members.list { if MemberMatchesPredicates(*member, predicates...) { count++ } } m.members.RUnlock() return count }. \n### Response: // CountMembers returns the number of members maintained by the swim membership\n// protocol for all members that match the predicates.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public <T> T findGeneratedKey(final Class<T> type) { return find(new Class[] {type}, false, getGeneratedColumns()); } \n### Response:", "ground_truth": "Finds generated key column of given type.", "predict": "// FindGeneratedKey returns the first key generated for the given type.\n// It uses the find method with a new array of types, and a false\n// predicate to exclude the generated keys. The getGeneratedColumns()\n// method is used to retrieve the generated columns for the key."}, {"ID": 1736, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public int addSpaceContact(int spaceId, ContactCreate create, boolean silent) { return getResourceFactory().getApiResource(\"/contact/space/\" + spaceId + \"/\") .queryParam(\"silent\", silent ? \"1\" : \"0\") .entity(create, MediaType.APPLICATION_JSON_TYPE) .post(ContactCreateResponse.class).getId(); }. \n### Response: Adds a new contact to the given space.\n\n@param spaceId\nThe id of the space the contact should be added to\n@param create\nThe data for the new contact\n@param silent\nTrue if the create should be silent, false otherwise\n@return The id of the newly created contact.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void populateGeneratedKeys(final Object entity) { final String[] generatedColumns = getGeneratedColumnNames(); if (generatedColumns == null) { return; } DbEntityDescriptor ded = dbOom.entityManager().lookupType(entity.getClass()); // prepare key types Class[] keyTypes = new Class[generatedColumns.length]; String[] properties = new String[generatedColumns.length]; for (int i = 0; i < generatedColumns.length; i++) { String column = generatedColumns[i]; DbEntityColumnDescriptor decd = ded.findByColumnName(column); if (decd != null) { keyTypes[i] = decd.getPropertyType(); properties[i] = decd.getPropertyName(); } } final Object keyValues = findGeneratedColumns(keyTypes); if (!keyValues.getClass().isArray()) { BeanUtil.declared.setProperty(entity, properties[0], keyValues); } else { for (int i = 0; i < properties.length; i++) { BeanUtil.declared.setProperty(entity, properties[i], ((Object[]) keyValues)[i]); } } } \n### Response:", "ground_truth": "Populates entity with generated column values from executed query.", "predict": "Populates the generated keys for the given entity.\n\n@param entity\nThe entity to populate the generated keys for\n@return None\n\nNote: This method is used to populate the generated keys for the given entity. The generated keys are used to generate the keys for the entity during the entity generation process. The method first retrieves the generated column names and then prepares the key types. It then finds the generated column descriptors and populates the generated keys with the column names and values. If the entity is not an object, it creates an array of the appropriate type and populates it with the property values. Finally, it returns None to indicate that no key values were found."}, {"ID": 1737, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public ArrayList<String> dedicated_server_serviceName_traffic_GET(String serviceName, OvhTrafficOrderEnum traffic) throws IOException { String qPath = \"/order/dedicated/server/{serviceName}/traffic\"; StringBuilder sb = path(qPath, serviceName); query(sb, \"traffic\", traffic); String resp = exec(qPath, \"GET\", sb.toString(), null); return convertTo(resp, t1); }. \n### Response: Get allowed durations for 'traffic' option\n\nREST: GET /order/dedicated/server/{serviceName}/traffic\n@param traffic [required] amount of traffic to allocate\n@param serviceName [required] The internal name of your dedicated server.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override protected <R extends ActionInterceptor> R createWrapper(final Class<R> wrapperClass) { return petiteContainer.createBean(wrapperClass); } \n### Response:", "ground_truth": "Acquires interceptor from Petite container.", "predict": "Create a new instance of the ActionInterceptor class.\n\nREST: Create a new instance of the ActionInterceptor class with the given wrapperClass.\n\n@param wrapperClass [required] The class of the ActionInterceptor to create.\n\n"}, {"ID": 1738, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def load_file(self, filename): \"\"\"Read in file contents and set the current string.\"\"\" with open(filename, 'r') as sourcefile: self.set_string(sourcefile.read()). \n### Response: Read in file contents and set the current string..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public Q setBean(final String beanName, final Object bean) { if (bean == null) { return _this(); } init(); final String beanNamePrefix = beanName + '.'; query.forEachNamedParameter(p -> { final String paramName = p.name; if (paramName.startsWith(beanNamePrefix)) { final String propertyName = paramName.substring(beanNamePrefix.length()); if (BeanUtil.declared.hasRootProperty(bean, propertyName)) { final Object value = BeanUtil.declared.getProperty(bean, propertyName); setObject(paramName, value); } } }); return _this(); } \n### Response:", "ground_truth": "Sets bean parameters from bean. Non-existing bean properties are ignored.", "predict": "This code defines a method `setBean` in the class `Q` that sets the value of an object based on its name. The method first checks if the object is null and returns `_this()` if it is. It then initializes the object.\n\nNext, the method iterates through the named parameters of a query object and checks if the parameter name starts with the name of the bean. If it does, the method extracts the name of the property and sets the value of the object based on that property.\n\nFinally, the method returns the object itself."}, {"ID": 1739, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func ToUnixMilli(t time.Time) int64 { return t.UnixNano() / (int64(time.Millisecond) / int64(time.Nanosecond)) }. \n### Response: // ToUnixMilli returns milliseconds since epoch from time.Time.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public Q setMap(final Map parameters) { if (parameters == null) { return _this(); } init(); query.forEachNamedParameter(p -> { final String paramName = p.name; setObject(paramName, parameters.get(paramName)); }); return _this(); } \n### Response:", "ground_truth": "Sets properties from the map.", "predict": "// Initialize the map and call the init method for each named parameter in the query."}, {"ID": 1740, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function(date, allDay) { // this function is called when something is dropped // retrieve the dropped element's stored Event Object var originalEventObject = $(this).data('eventObject'); var $extraEventClass = $(this).attr('data-class'); // we need to copy it, so that multiple events don't have a reference to the same object var copiedEventObject = $.extend({}, originalEventObject); // assign it the date that was reported copiedEventObject.start = date; copiedEventObject.allDay = allDay; if($extraEventClass) copiedEventObject['className'] = [$extraEventClass]; // render the event on the calendar // the last `true` argument determines if the event \"sticks\" (http://arshaw.com/fullcalendar/docs/event_rendering/renderEvent/) $('#calendar').fullCalendar('renderEvent', copiedEventObject, true); // is the \"remove after drop\" checkbox checked? if ($('#drop-remove').is(':checked')) { // if so, remove the element from the \"Draggable Events\" list $(this).remove(); } }. \n### Response: this allows things to be dropped onto the calendar !!!.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public Q setObjects(final Object... objects) { int index = 1; for (final Object object : objects) { setObject(index++, object); } return _this(); } \n### Response:", "ground_truth": "Sets an array of objects parameters in given order.", "predict": "This method sets the objects in an array passed as an argument to it. It iterates over the objects and calls the `setObject` method with the index++ and the object passed as an argument. Finally, it returns the  object itself."}, {"ID": 1741, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func HTTPError(w http.ResponseWriter, logMsg string, err string, errCode int) { if logMsg != \"\" { log.Println(logMsg) } http.Error(w, err, errCode) }. \n### Response: // HTTPError is a convenience method for logging a message and writing the provided error message\n// and error code to the HTTP response..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void insertChunkAfter(final SqlChunk previous) { SqlChunk next = previous.nextChunk; previous.nextChunk = this; this.previousChunk = previous; if (next != null) { next.previousChunk = this; this.nextChunk = next; } } \n### Response:", "ground_truth": "Appends chunk to previous one and maintains the double-linked list of the previous chunk.\nCurrent surrounding connections of this chunk will be cut-off.", "predict": "// insertChunkAfter inserts a new SqlChunk after the given previousSqlChunk.\n// It updates the previousChunk and nextChunk properties and assigns the newSqlChunk to the nextChunk property."}, {"ID": 1742, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function () { var args = [], len = arguments.length; while ( len-- ) args[ len ] = arguments[ len ]; if (!settings$2.debug) { return; } args.unshift('DEBUG'); settings$2.logger.output.apply(null, args); }. \n### Response: console debug output\n@param {*} args.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected DbEntityDescriptor lookupType(final Class entity) { final DbEntityDescriptor ded = dbEntityManager.lookupType(entity); if (ded == null) { throw new DbSqlBuilderException(\"Invalid or not-persistent entity: \" + entity.getName()); } return ded; } \n### Response:", "ground_truth": "Lookups for entity name and throws an exception if entity type is invalid.", "predict": "This method lookupType(final Class entity) is a protected method in the DbEntityDescriptor class. It is used to retrieve the DbEntityDescriptor for a specific entity type. If the entity is not found, a DbSqlBuilderException is thrown with an error message. The returned DbEntityDescriptor is then used to retrieve any associated entity manager."}, {"ID": 1743, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def update(key, definition, options = {}) custom_params = options[:dc] ? use_named_parameter('dc', options[:dc]) : nil ret = send_put_request(@conn, [\"/v1/query/#{key}\"], options, definition, custom_params) ret.status == 200 end. \n### Response: Update a prepared query or prepared query template\n @param key [String] the prepared query ID\n @param definition [Hash] Hash containing updated definition of prepared query\n @param options [Hash] :dc Consul datacenter to query\n @return [Boolean].\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected DbEntityDescriptor findColumnRef(final String columnRef) { DbEntityDescriptor ded = templateData.findTableDescriptorByColumnRef(columnRef); if (ded == null) { throw new DbSqlBuilderException(\"Invalid column reference: [\" + columnRef + \"]\"); } return ded; } \n### Response:", "ground_truth": "Finds a table that contains given column.", "predict": "Find the table descriptor for a given column reference.\n\n"}, {"ID": 1744, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def makeMNBaseURL(url): \"\"\"Attempt to create a valid MN BaseURL when one or more sections of the URL are missing.\"\"\" o = urllib.parse.urlparse(url, scheme=d1_common.const.DEFAULT_MN_PROTOCOL) if o.netloc and o.path: netloc = o.netloc path = o.path elif o.netloc: netloc = o.netloc path = d1_common.const.DEFAULT_MN_PATH elif o.path: s = o.path.split('/', 1) netloc = s[0] if len(s) == 1: path = d1_common.const.DEFAULT_MN_PATH else: path = s[1] else: netloc = d1_common.const.DEFAULT_MN_HOST path = d1_common.const.DEFAULT_MN_PATH return urllib.parse.urlunparse( (o.scheme, netloc, path, o.params, o.query, o.fragment) ). \n### Response: Attempt to create a valid MN BaseURL when one or more sections of the URL are\n    missing..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected String resolveTable(final String tableRef, final DbEntityDescriptor ded) { String tableAlias = templateData.getTableAlias(tableRef); if (tableAlias != null) { return tableAlias; } return ded.getTableNameForQuery(); } \n### Response:", "ground_truth": "Resolves table name or alias that will be used in the query.", "predict": "```\n    protected String resolveTable(final String tableRef, final DbEntityDescriptor ded)\n    {\n        String tableAlias = templateData.getTableAlias(tableRef);\n        if (tableAlias!= null) {\n            return tableAlias;\n        }\n        return ded.getTableNameForQuery();\n    }\n```"}, {"ID": 1745, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public InputStream openSource(String packageName, String fileName) throws IOException { SourceFile sourceFile = findSourceFile(packageName, fileName); return sourceFile.getInputStream(); }. \n### Response: Open an input stream on a source file in given package.\n\n@param packageName\nthe name of the package containing the class whose source file\nis given\n@param fileName\nthe unqualified name of the source file\n@return an InputStream on the source file\n@throws IOException\nif a matching source file cannot be found.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected static Class resolveClass(final Object object) { Class type = object.getClass(); return type == Class.class ? (Class) object : type; } \n### Response:", "ground_truth": "Resolves object to a class.", "predict": "Resolve the class of an object.\n\n@param object\nthe object to resolve the class of\n@return the resolved class, or Class.class if the object is not a class\n\nNote: This method is only available in Java versions prior to Java 7.\n\n"}, {"ID": 1746, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def get_digests(self): \"\"\" Returns a map of images to their digests \"\"\" try: pulp = get_manifests_in_pulp_repository(self.workflow) except KeyError: pulp = None digests = {} # repository -> digests for registry in self.workflow.push_conf.docker_registries: for image in self.workflow.tag_conf.images: image_str = image.to_str() if image_str in registry.digests: image_digests = registry.digests[image_str] if pulp is None: digest_list = [image_digests.default] else: # If Pulp is enabled, only report digests that # were synced into Pulp. This may not be all # of them, depending on whether Pulp has # schema 2 support. digest_list = [digest for digest in (image_digests.v1, image_digests.v2) if digest in pulp] digests[image.to_str(registry=False)] = digest_list return digests. \n### Response: Returns a map of images to their digests.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void appendMissingSpace(final StringBuilder out) { int len = out.length(); if (len == 0) { return; } len--; if (!CharUtil.isWhitespace(out.charAt(len))) { out.append(' '); } } \n### Response:", "ground_truth": "Appends missing space if the output doesn't end with whitespace.", "predict": "Appends a space character to the end of the StringBuilder if there is no space before it."}, {"ID": 1747, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def cancel(self): \"\"\"Cancel the future if possible. Returns True if the future was cancelled, False otherwise. A future cannot be cancelled if it is running or has already completed. \"\"\" with self._condition: if self._state in [RUNNING, FINISHED]: return False if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]: return True self._state = CANCELLED self._condition.notify_all() self._invoke_callbacks() return True. \n### Response: Cancel the future if possible.\n\n        Returns True if the future was cancelled, False otherwise. A future\n        cannot be cancelled if it is running or has already completed..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public Enumeration<String> getFileParameterNames() { if (mreq == null) { return null; } return Collections.enumeration(mreq.getFileParameterNames()); } \n### Response:", "ground_truth": "Get an enumeration of the parameter names for uploaded files", "predict": "getFileParameterNames()\n\nReturns an enumeration of the file parameter names for the given request.\n\nIf mreq is null, returns null.\n\nIf the request has no file parameters, returns an empty enumeration.\n\nIf the request has multiple file parameters, returns an enumeration of the file parameter names for each file."}, {"ID": 1748, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def ionic_radius(self): \"\"\" Ionic radius of specie. Returns None if data is not present. \"\"\" if self._oxi_state in self.ionic_radii: return self.ionic_radii[self._oxi_state] d = self._el.data oxstr = str(int(self._oxi_state)) if oxstr in d.get(\"Ionic radii hs\", {}): warnings.warn(\"No default ionic radius for %s. Using hs data.\" % self) return d[\"Ionic radii hs\"][oxstr] elif oxstr in d.get(\"Ionic radii ls\", {}): warnings.warn(\"No default ionic radius for %s. Using ls data.\" % self) return d[\"Ionic radii ls\"][oxstr] warnings.warn(\"No ionic radius for {}!\".format(self)) return None. \n### Response: Ionic radius of specie. Returns None if data is not present..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static boolean include(final ServletRequest request, final ServletResponse response, final String page) throws IOException, ServletException { RequestDispatcher dispatcher = request.getRequestDispatcher(page); if (dispatcher != null) { dispatcher.include(request, response); return true; } return false; } \n### Response:", "ground_truth": "Include page which path is relative to the current HTTP request.", "predict": "Include method for the Servlet. Returns true if the page is included, false otherwise."}, {"ID": 1749, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def cleanup(config=None, path=None): \"\"\"Cleanup by removing paths added during earlier in configuration.\"\"\" if config is None: config = parse() if path is None: path = os.getcwd() root = config.get('root', 'path') root = os.path.join(path, root) if sys.path[0] == root: sys.path.remove(root). \n### Response: Cleanup by removing paths added during earlier in configuration..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String getUrl(final HttpServletRequest request) { String servletPath = request.getServletPath(); String query = request.getQueryString(); if ((query != null) && (query.length() != 0)) { servletPath += '?' + query; } return servletPath; } \n### Response:", "ground_truth": "Returns url, without context path, convenient for request dispatcher.", "predict": "Method-level comment for getUrl():\n```\npublic static String getUrl(final HttpServletRequest request) {\n    // Return theServletPath and query string from the request\n    String servletPath = request.getServletPath();\n    String query = request.getQueryString();\n    // If query is not null and query string is not empty, append it to the servletPath\n    servletPath += '?' + query;\n    // Return the servletPath\n    return servletPath;\n}\n```"}, {"ID": 1750, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected function getServersFromDns() { $servers = $this->dns->getRecord(LdapUtilities::SRV_PREFIX.$this->config->getDomainName(), DNS_SRV); if ($servers === false || empty($servers)) { throw new LdapConnectionException(sprintf( 'No LDAP servers found via DNS for \"%s\".', $this->config->getDomainName() )); } array_multisort( array_column($servers, 'pri'), SORT_ASC|SORT_NUMERIC, array_column($servers, 'weight'), SORT_DESC|SORT_NUMERIC, $servers ); return array_column($servers, 'target'); }. \n### Response: Attempt to lookup the LDAP servers from the DNS name.\n\n@return array The LDAP servers.\n@throws LdapConnectionException.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String getRequestUri(final HttpServletRequest request) { String result = getIncludeRequestUri(request); if (result == null) { result = request.getRequestURI(); } return result; } \n### Response:", "ground_truth": "Get current request uri.", "predict": "Get the request URI including any included URIs.\n\n@return The request URI including any included URIs.\n@throws HttpServletRequestException."}, {"ID": 1751, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def get_show_id(self, series, year=None, country_code=None): \"\"\"Get the best matching show id for `series`, `year` and `country_code`. First search in the result of :meth:`_get_show_ids` and fallback on a search with :meth:`_search_show_id`. :param str series: series of the episode. :param year: year of the series, if any. :type year: int :param country_code: country code of the series, if any. :type country_code: str :return: the show id, if found. :rtype: int \"\"\" series_sanitized = sanitize(series).lower() show_ids = self._get_show_ids() show_id = None # attempt with country if not show_id and country_code: logger.debug('Getting show id with country') show_id = show_ids.get('%s %s' % (series_sanitized, country_code.lower())) # attempt with year if not show_id and year: logger.debug('Getting show id with year') show_id = show_ids.get('%s %d' % (series_sanitized, year)) # attempt clean if not show_id: logger.debug('Getting show id') show_id = show_ids.get(series_sanitized) # search as last resort if not show_id: logger.warning('Series not found in show ids') show_id = self._search_show_id(series) return show_id. \n### Response: Get the best matching show id for `series`, `year` and `country_code`.\n\n        First search in the result of :meth:`_get_show_ids` and fallback on a search with :meth:`_search_show_id`.\n\n        :param str series: series of the episode.\n        :param year: year of the series, if any.\n        :type year: int\n        :param country_code: country code of the series, if any.\n        :type country_code: str\n        :return: the show id, if found.\n        :rtype: int.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public String[] resolveParamNames(final Method actionClassMethod) { MethodParameter[] methodParameters = Paramo.resolveParameters(actionClassMethod); String[] names = new String[methodParameters.length]; for (int i = 0; i < methodParameters.length; i++) { names[i] = methodParameters[i].getName(); } return names; } \n### Response:", "ground_truth": "Returns method parameter names.", "predict": "Resolve parameter names for the given method.\n\n        Returns the names of the method parameters as a String array.\n\n        :param Method actionClassMethod: the method to resolve parameter names for.\n        :return: the resolved parameter names as a String array.\n        :rtype: String[]."}, {"ID": 1752, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def event_return(events): ''' Return events to Elasticsearch Requires that the `event_return` configuration be set in master config. ''' options = _get_options() index = options['master_event_index'] doc_type = options['master_event_doc_type'] if options['index_date']: index = '{0}-{1}'.format(index, datetime.date.today().strftime('%Y.%m.%d')) _ensure_index(index) for event in events: data = { 'tag': event.get('tag', ''), 'data': event.get('data', '') } ret = __salt__['elasticsearch.document_create'](index=index, doc_type=doc_type, id=uuid.uuid4(), body=salt.utils.json.dumps(data)). \n### Response: Return events to Elasticsearch\n\n    Requires that the `event_return` configuration be set in master config..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public void start() { initLogger(); log.info(\"PETITE start ----------\"); petiteContainer = createPetiteContainer(); if (externalsCache) { petiteContainer.setExternalsCache(TypeCache.createDefault()); } log.info(\"Web application? \" + isWebApplication); if (!isWebApplication) { // make session scope to act as singleton scope // if this is not a web application (and http session is not available). petiteContainer.registerScope(SessionScope.class, new SingletonScope(petiteContainer)); } // load parameters from properties files petiteContainer.defineParameters(joyPropsSupplier.get().getProps()); // automagic configuration if (autoConfiguration) { final AutomagicPetiteConfigurator automagicPetiteConfigurator = new AutomagicPetiteConfigurator(petiteContainer); automagicPetiteConfigurator.registerAsConsumer(joyScannerSupplier.get().getClassScanner()); } petiteContainerConsumers.accept(this.petiteContainer); log.info(\"PETITE OK!\"); } \n### Response:", "ground_truth": "Creates and initializes Petite container.\nIt will be auto-magically configured by scanning the classpath.", "predict": "Start method\n\n    initLogger();\n    log.info(\"PETITE start ----------\");\n    petiteContainer = createPetiteContainer();\n    if (externalsCache) {\n        petiteContainer.setExternalsCache(TypeCache.createDefault());\n    }\n    log.info(\"Web application? \" + isWebApplication);\n    if (!isWebApplication) {\n        // make session scope to act as singleton scope\n        petiteContainer.registerScope(SessionScope.class, new SingletonScope(petiteContainer));\n    }\n    // load parameters from properties files\n    petiteContainer.defineParameters(joyPropsSupplier.get().getProps());\n    // automagic configuration\n    if (autoConfiguration) {\n        final AutomagicPetiteConfigurator automagicPetiteConfigurator = new AutomagicPetiteConfigurator(petiteContainer);\n        automagicPetiteConfigurator.registerAsConsumer(joyScannerSupplier.get().getClassScanner());\n    }\n    petiteContainerConsumers.accept(this.petiteContainer);\n    log.info(\"PETITE OK!\");\n}"}, {"ID": 1753, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def log_summary(self): \"\"\"Log a summary of all the participants' status codes.\"\"\" participants = Participant.query.with_entities(Participant.status).all() counts = Counter([p.status for p in participants]) sorted_counts = sorted(counts.items(), key=itemgetter(0)) self.log(\"Status summary: {}\".format(str(sorted_counts))) return sorted_counts. \n### Response: Log a summary of all the participants' status codes..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public void stop() { if (log != null) { log.info(\"PETITE stop\"); } if (petiteContainer != null) { petiteContainer.shutdown(); } petiteContainer = null; } \n### Response:", "ground_truth": "Stops Petite container.", "predict": "Stop the application."}, {"ID": 1754, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func Has(pred func(Triple) bool) *Stepper { return &Stepper{SPO, SPO, SPO, Triple{}, pred, make([]func(Path), 0, 0), nil} }. \n### Response: // Has returns a stepper that will follow edges for which pred returns true..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public EmailFilter subject(final String subject) { final SearchTerm subjectTerm = new SubjectTerm(subject); concat(subjectTerm); return this; } \n### Response:", "ground_truth": "Defines filter for SUBJECT field.\n\n@param subject The SUBJECT.\n@return this", "predict": "// This method returns an EmailFilter object with the subject field set to the given subject.."}, {"ID": 1755, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def extend(self, source, new_image_name, s2i_args=None): \"\"\" extend this s2i-enabled image using provided source, raises ConuException if `s2i build` fails :param source: str, source used to extend the image, can be path or url :param new_image_name: str, name of the new, extended image :param s2i_args: list of str, additional options and arguments provided to `s2i build` :return: S2Image instance \"\"\" s2i_args = s2i_args or [] c = self._s2i_command([\"build\"] + s2i_args + [source, self.get_full_name()]) if new_image_name: c.append(new_image_name) try: run_cmd(c) except subprocess.CalledProcessError as ex: raise ConuException(\"s2i build failed: %s\" % ex) return S2IDockerImage(new_image_name). \n### Response: extend this s2i-enabled image using provided source, raises ConuException if\n        `s2i build` fails\n\n        :param source: str, source used to extend the image, can be path or url\n        :param new_image_name: str, name of the new, extended image\n        :param s2i_args: list of str, additional options and arguments provided to `s2i build`\n        :return: S2Image instance.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public EmailFilter messageId(final String messageId) { final SearchTerm msgIdTerm = new MessageIDTerm(messageId); concat(msgIdTerm); return this; } \n### Response:", "ground_truth": "Defines filter for message id.\n\n@param messageId The message ID.\n@return this", "predict": "public EmailFilter messageId(final String messageId) {\n        final SearchTerm msgIdTerm = new MessageIDTerm(messageId);\n        concat(msgIdTerm);\n        return this;\n    }\n\n    // Concatenate the given SearchTerm object with the current EmailFilter object\n    // to create a new EmailFilter object with the messageId parameter set to the\n    // concatenated SearchTerm object.\n    private void concat(SearchTerm msgIdTerm) {\n        this.messageId = msgIdTerm.getTerm();\n    }\n\n    // Return the current EmailFilter object with the messageId parameter set to the\n    // concatenated SearchTerm object.\n    public EmailFilter concat() {\n        return this;\n    }"}, {"ID": 1756, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private function showAspectInfo(SymfonyStyle $io, Aspect $aspect): void { $refAspect = new ReflectionObject($aspect); $aspectName = $refAspect->getName(); $io->section($aspectName); $io->writeln('Defined in: <info>' . $refAspect->getFileName() . '</info>'); $docComment = $refAspect->getDocComment(); if ($docComment) { $io->writeln($this->getPrettyText($docComment)); } $this->showAspectPointcutsAndAdvisors($io, $aspect); }. \n### Response: Displays an information about single aspect.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public EmailFilter from(final String fromAddress) { final SearchTerm fromTerm = new FromStringTerm(fromAddress); concat(fromTerm); return this; } \n### Response:", "ground_truth": "Defines filter for FROM field.\n\n@param fromAddress The FROM address\n@return this", "predict": "This method returns an instance of the EmailFilter class, which is used to filter email messages based on their content. The method takes a single argument, the from address, which is obtained using the FromStringTerm() method. The fromTerm is then concatenated to the EmailFilter instance, which is returned."}, {"ID": 1757, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public String getComponent() { if (ProcessingStep_Type.featOkTst && ((ProcessingStep_Type)jcasType).casFeat_component == null) jcasType.jcas.throwFeatMissing(\"component\", \"edu.cmu.lti.oaqa.framework.types.ProcessingStep\"); return jcasType.ll_cas.ll_getStringValue(addr, ((ProcessingStep_Type)jcasType).casFeatCode_component);}. \n### Response: getter for component - gets\n@generated.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public EmailFilter to(final String toAddress) { final SearchTerm toTerm = new RecipientStringTerm(RecipientType.TO, toAddress); concat(toTerm); return this; } \n### Response:", "ground_truth": "Defines filter for TO field.\n\n@param toAddress The TO address.\n@return this", "predict": "Method for sending email using EmailFilter - sets the recipient email address and returns the EmailFilter object.\n@generated."}, {"ID": 1758, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: void setArrayExpression(BSHArrayInitializer init) { this.isArrayExpression = true; if (parent instanceof BSHAssignment) { BSHAssignment ass = (BSHAssignment) parent; if ( null != ass.operator && ass.operator == ParserConstants.ASSIGN ) this.isMapExpression = true; if ( this.isMapExpression && init.jjtGetParent() instanceof BSHArrayInitializer ) init.setMapInArray(true); } }. \n### Response: Called from BSHArrayInitializer during node creation informing us\nthat we are an array expression.\nIf parent BSHAssignment has an ASSIGN operation then this is a map\nexpression. If the initializer reference has multiple dimensions\nit gets configure as being a map in array.\n@param init reference to the calling array initializer.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public EmailFilter cc(final String ccAddress) { final SearchTerm toTerm = new RecipientStringTerm(RecipientType.CC, ccAddress); concat(toTerm); return this; } \n### Response:", "ground_truth": "Defines filter for CC field.\n\n@param ccAddress CC addreses.\n@return this", "predict": "This method returns an instance of the EmailFilter class and concatenates the SearchTerm \"toTerm\" with the given \"ccAddress\".\n\n@param ccAddress the cc address to concatenate with the search term.\n\n"}, {"ID": 1759, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func generateTLSConfig() *tls.Config { key, err := rsa.GenerateKey(rand.Reader, 1024) if err != nil { panic(err) } template := x509.Certificate{SerialNumber: big.NewInt(1)} certDER, err := x509.CreateCertificate(rand.Reader, &template, &template, &key.PublicKey, key) if err != nil { panic(err) } keyPEM := pem.EncodeToMemory(&pem.Block{Type: \"RSA PRIVATE KEY\", Bytes: x509.MarshalPKCS1PrivateKey(key)}) certPEM := pem.EncodeToMemory(&pem.Block{Type: \"CERTIFICATE\", Bytes: certDER}) tlsCert, err := tls.X509KeyPair(certPEM, keyPEM) if err != nil { panic(err) } return &tls.Config{Certificates: []tls.Certificate{tlsCert}} }. \n### Response: // Setup a bare-bones TLS config for the server.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public EmailFilter bcc(final String bccAddress) { final SearchTerm toTerm = new RecipientStringTerm(RecipientType.BCC, bccAddress); concat(toTerm); return this; } \n### Response:", "ground_truth": "Defines filter for BCC field.\n\n@param bccAddress BCC address.\n@return this", "predict": "// Create a new RecipientStringTerm object with the given recipient type and bcc address."}, {"ID": 1760, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function getInstanceFromClassName($className, $name) { if (false === class_exists($className)) { throw ClassNotFoundException::wrongFormClassName($className); } if (false === in_array(FormInterface::class, class_implements($className))) { throw InvalidArgumentTypeException::wrongFormType($className); } $cacheIdentifier = $this->getCacheIdentifier($className, $name); if (false === isset($this->instances[$cacheIdentifier])) { $cacheInstance = CacheService::get()->getCacheInstance(); if ($cacheInstance->has($cacheIdentifier)) { $instance = $cacheInstance->get($cacheIdentifier); } else { $instance = $this->createInstance($className, $name); $cacheInstance->set($cacheIdentifier, $instance); } /** @var Configuration $formzConfigurationObject */ $formzConfigurationObject = $this->configurationFactory ->getFormzConfiguration() ->getObject(true); if (false === $formzConfigurationObject->hasForm($instance->getClassName(), $instance->getName())) { $formzConfigurationObject->addForm($instance); } $this->instances[$cacheIdentifier] = $instance; } return $this->instances[$cacheIdentifier]; }. \n### Response: Will create an instance of `FormObject` based on a class which implements\nthe interface `FormInterface`.\n\n@param string $className\n@param string $name\n@return FormObject\n@throws ClassNotFoundException\n@throws InvalidArgumentTypeException.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public EmailFilter flags(final Flags flags, final boolean value) { final SearchTerm flagTerm = new FlagTerm(flags, value); concat(flagTerm); return this; } \n### Response:", "ground_truth": "Defines filter for many flags at once.\n\n@param flags The {@link Flags} to filter on.\n@param value The {@link Flag} setting to check for.\n@return this", "predict": "This method concatenates the given `Flags` and `boolean` values into a single `SearchTerm` object.\n\n@param Flags flags\n@param boolean value\n@return SearchTerm\n@throws IllegalArgumentException."}, {"ID": 1761, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def get(self, instance, **kwargs): \"\"\"retrieves the value of the same named field on the proxy object \"\"\" # The default value default = self.getDefault(instance) # Retrieve the proxy object proxy_object = self.get_proxy(instance) # Return None if we could not find a proxied object, e.g. through # the proxy expression 'context.getSample()' on an AR if proxy_object is None: logger.debug(\"Expression '{}' did not return a valid Proxy Object on {}\" .format(self.proxy, instance)) return default # Lookup the proxied field by name field_name = self.getName() field = proxy_object.getField(field_name) # Bail out if the proxy object has no identical named field if field is None: raise KeyError(\"Object '{}' with id '{}' has no field named '{}'\".format( proxy_object.portal_type, proxy_object.getId(), field_name)) # return the value of the proxy field return field.get(proxy_object). \n### Response: retrieves the value of the same named field on the proxy object.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public EmailFilter flag(final Flag flag, final boolean value) { final Flags flags = new Flags(); flags.add(flag); return flags(flags, value); } \n### Response:", "ground_truth": "Defines filter for single flag.\n\n@param flag  The flag to filter on.\n@param value The {@link Flag} setting to check for.\n@return this", "predict": "This method returns a new instance of the `Flags` class, which represents the flags for the `EmailFilter` class. It adds a new flag to the list of flags, and then returns a new instance of the `Flags` class that contains the added flag and the boolean value `value`."}, {"ID": 1762, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function isInstalled($installPath) { $manifest = Util::getPackageManifest($installPath); if ($manifest === false) { return false; } $xml = simplexml_load_file($manifest); if($xml instanceof \\SimpleXMLElement) { $type = (string) $xml->attributes()->type; $element = Util::getNameFromManifest($installPath); if (empty($element)) { return false; } $extension = $this->getExtension($element, $type); if (!is_object($extension)) { return false; } return isset($extension->id) && $extension->id > 0; } return false; }. \n### Response: Check if the Composer package located at the given path is installed or not.\n\nThis method will look for the package manifest at the given\ndirectory. It will extract the extension name from the manifest\nand see if that element is installed in the database.\n\n@param string $installPath Path to Composer package\n@return bool.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public EmailFilter receivedDate(final Operator operator, final long milliseconds) { final SearchTerm term = new ReceivedDateTerm(operator.value, new Date(milliseconds)); concat(term); return this; } \n### Response:", "ground_truth": "Defines filter for received date.\n\n@return this", "predict": "This method returns the current email filter object and concatenates the received date term with the current date and time.\n\n@param Operator $operator The operator to apply to the email filter\n@param long $milliseconds The number of milliseconds since the Unix epoch to use as the date and time for the search term\n@return EmailFilter The current email filter object.\n\nThis method is used to search for email filters that match the given operator and a specified number of milliseconds since the Unix epoch. The method creates a new ReceivedDateTerm object with the operator value and the current date and time, and then concatenates it with the current date and time returned by the EmailFilter class. The resulting search term is then returned by the method.\n\nNote that this method is only used within the EmailFilter class and is not intended for use by other classes."}, {"ID": 1763, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected function getPreferenceOrFail(string $key) { if (!$this->registry->has($key)) { throw new UnregisteredPreferenceException( sprintf( 'There\\'s no setting registered with key `%s`', $key ) ); } return $this->registry->get($key); }. \n### Response: Returns the preference registered with the given key and throws an exception if not found\n\n@param string $key\n\n@return \\Konekt\\Gears\\Contracts\\Preference\n@throws UnregisteredPreferenceException.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public EmailFilter sentDate(final Operator operator, final long milliseconds) { final SearchTerm term = new SentDateTerm(operator.value, new Date(milliseconds)); concat(term); return this; } \n### Response:", "ground_truth": "Defines filter for sent date.\n\n@param operator     {@link Operator} to use.\n@param milliseconds the milliseconds since January 1, 1970, 00:00:00 GMT.\n@return this", "predict": "This method returns an instance of the EmailFilter class and concatenates the given SearchTerm with the current instance.\n\n@param Operator $operator\n\n@return EmailFilter\n@throws IllegalArgumentException."}, {"ID": 1764, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static function createFromConfig($config, $rpcHelper = null) { $clientId = $config['clientId']; $projectId = $config['projectId']; if (!isset($clientId) && !isset($projectId)) { throw new Gitkit_ClientException(\"Missing projectId or clientId in server configuration.\"); } if (!isset($config['widgetUrl'])) { throw new Gitkit_ClientException(\"\\\"widgetUrl\\\" should be configured\"); } if (isset($config[\"cookieName\"])) { $cookieName = $config['cookieName']; } else { $cookieName = self::$DEFAULT_COOKIE_NAME; } if (!$rpcHelper) { if (!isset($config['serviceAccountEmail'])) { throw new Gitkit_ClientException( \"\\\"serviceAccountEmail\\\" should be configured\"); } if (!isset($config['serviceAccountPrivateKeyFile'])) { throw new Gitkit_ClientException( \"\\\"serviceAccountPrivateKeyFile\\\" should be configured\"); } $p12Key = file_get_contents($config[\"serviceAccountPrivateKeyFile\"]); if ($p12Key === false) { throw new Gitkit_ClientException( \"Can not read file \" . $config[\"serviceAccountPrivateKeyFile\"]); } if (isset($config['serverApiKey'])) { $serverApiKey = $config['serverApiKey']; } else { $serverApiKey = null; } $rpcHelper = new Gitkit_RpcHelper( $config[\"serviceAccountEmail\"], $p12Key, self::$GITKIT_API_BASE, new Google_Auth_OAuth2(new Google_Client()), $serverApiKey); } return new Gitkit_Client($clientId, $config['widgetUrl'], $cookieName, $rpcHelper, $projectId); }. \n### Response: Creates a Gitkit client from the config array.\n\n@param array $config config parameters\n@param null|Gitkit_RpcHelper $rpcHelper Gitkit Rpc helper object\n@return Gitkit_Client created Gitkit client\n@throws Gitkit_ClientException if required config is missing.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public EmailFilter size(final Operator comparison, final int size) { final SearchTerm term = new SizeTerm(comparison.value, size); concat(term); return this; } \n### Response:", "ground_truth": "Defines filter for message size.\n\n@param comparison {@link Operator}.\n@param size       size of message.\n@return this", "predict": "This method is part of the EmailFilter class and it performs the size check of an email filter.\n\n@param Operator comparison the operator to use for the comparison of the email address\n@param int size the size of the email address in characters\n@return the EmailFilter object to perform the size check\n@throws Gitkit_Exception if there is an error during the size check."}, {"ID": 1765, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def read_tabular(table_file, sheetname='Sheet1'): \"\"\" Reads a vensim syntax model which has been formatted as a table. This is useful in contexts where model building is performed without the aid of Vensim. Parameters ---------- table_file: .csv, .tab or .xls(x) file Table should have columns titled as in the table below | Variable | Equation | Units | Min | Max | Comment | | :------- | :------- | :---- | :-- | :-- | :--------------- | | Age | 5 | Yrs | 0 | inf | How old are you? | | ... | ... | ... | ... | ... | ... | sheetname: basestring if the model is specified in an excel file, what sheet? Returns ------- PySD Model Object Notes ----- Creates an intermediate file in vensim `.mdl` syntax, just so that the existing vensim parsing machinery can be used. \"\"\" if isinstance(table_file, str): extension = table_file.split('.')[-1] if extension in ['xls', 'xlsx']: table = pd.read_excel(table_file, sheetname=sheetname) elif extension == 'csv': table = pd.read_csv(table_file, encoding='UTF-8') elif extension == 'tab': table = pd.read_csv(table_file, sep='\\t', encoding='UTF-8') else: raise ValueError('Unknown file or table type') else: raise ValueError('Unknown file or table type') if not set(table.columns).issuperset({'Variable', 'Equation'}): raise ValueError('Table must contain at least columns \"Variable\" and \"Equation\"') if \"Units\" not in set(table.columns): warnings.warn('Column for \"Units\" not found', RuntimeWarning, stacklevel=2) table['Units'] = '' if \"Min\" not in set(table.columns): warnings.warn('Column for \"Min\" not found', RuntimeWarning, stacklevel=2) table['Min'] = '' if \"Max\" not in set(table.columns): warnings.warn('Column for \"Max\" not found', RuntimeWarning, stacklevel=2) table['Max'] = '' mdl_file = table_file.replace(extension, 'mdl') with open(mdl_file, 'w', encoding='UTF-8') as outfile: for element in table.to_dict(orient='records'): outfile.write( \"%(Variable)s = \\n\" \"\\t %(Equation)s \\n\" \"\\t~\\t %(Units)s [%(Min)s, %(Max)s] \\n\" \"\\t~\\t %(Comment)s \\n\\t|\\n\\n\" % element ) outfile.write(u'\\\\\\---/// Sketch information - this is where sketch stuff would go.') return read_vensim(mdl_file). \n### Response: Reads a vensim syntax model which has been formatted as a table.\n\n    This is useful in contexts where model building is performed\n    without the aid of Vensim.\n\n    Parameters\n    ----------\n    table_file: .csv, .tab or .xls(x) file\n\n    Table should have columns titled as in the table below\n\n\n    | Variable | Equation | Units | Min | Max | Comment          |\n    | :------- | :------- | :---- | :-- | :-- | :--------------- |\n    | Age      | 5        | Yrs   | 0   | inf | How old are you? |\n    | ...      | ...      | ...   | ... | ... | ...              |\n\n    sheetname: basestring\n        if the model is specified in an excel file, what sheet?\n\n    Returns\n    -------\n    PySD Model Object\n\n    Notes\n    -----\n    Creates an intermediate file in vensim `.mdl` syntax, just so that\n    the existing vensim parsing machinery can be used..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public EmailFilter and(final EmailFilter... emailFilters) { final SearchTerm[] searchTerms = new SearchTerm[emailFilters.length]; for (int i = 0; i < emailFilters.length; i++) { searchTerms[i] = emailFilters[i].searchTerm; } concat(new AndTerm(searchTerms)); return this; } \n### Response:", "ground_truth": "Defines AND group of filters.\n\n@param emailFilters array of {@link EmailFilter}s to AND.\n@return this", "predict": "This method is used to combine multiple email filters into a single email filter.\n\n    Parameters\n    ----------\n    emailFilters: EmailFilter[]\n\n    Returns\n    -------\n    EmailFilter\n\n    Notes\n    -----\n    This method concatenates all the email filters into a single email filter using the concat() method."}, {"ID": 1766, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (c *Connector) CreateScope(ctx context.Context, md *dosa.ScopeMetadata) error { if c.Next == nil { return NewErrNoMoreConnector() } return c.Next.CreateScope(ctx, md) }. \n### Response: // CreateScope calls Next.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public EmailFilter or(final EmailFilter... emailFilters) { final SearchTerm[] searchTerms = new SearchTerm[emailFilters.length]; for (int i = 0; i < emailFilters.length; i++) { searchTerms[i] = emailFilters[i].searchTerm; } concat(new OrTerm(searchTerms)); return this; } \n### Response:", "ground_truth": "Defines OR group of filters.\n\n@param emailFilters array of {@link EmailFilter}s to OR.\n@return this", "predict": "// This method returns the result of calling the or() method on the EmailFilter object with the emailFilters array."}, {"ID": 1767, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function pageStart() { $config = \\OxidEsales\\Eshop\\Core\\Registry::getConfig(); $config->setConfigParam('iMaxMandates', $config->getConfigParam('IMS')); $config->setConfigParam('iMaxArticles', $config->getConfigParam('IMA')); }. \n### Response: Creates and starts session object, sets default currency..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public EmailFilter not(final EmailFilter emailFilter) { final SearchTerm searchTerm = new NotTerm(emailFilter.searchTerm); concat(searchTerm); return this; } \n### Response:", "ground_truth": "Appends single filter as NOT.\n\n@param emailFilter {@link EmailFilter} to append.\n@return this", "predict": "This method creates a new `EmailFilter` object and passes it to the `not` method of the `EmailFilter` class. The `concat` method is used to concatenate the `searchTerm` object with the `emailFilter` object. The `not` method returns the new `EmailFilter` object."}, {"ID": 1768, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func SignSDKRequest(req *request.Request) { // If the request does not need to be signed ignore the signing of the // request if the AnonymousCredentials object is used. if req.Config.Credentials == credentials.AnonymousCredentials { return } if req.HTTPRequest.Method != \"POST\" && req.HTTPRequest.Method != \"GET\" { // The V2 signer only supports GET and POST req.Error = errInvalidMethod return } v2 := signer{ Request: req.HTTPRequest, Time: req.Time, Credentials: req.Config.Credentials, Debug: req.Config.LogLevel.Value(), Logger: req.Config.Logger, } req.Error = v2.Sign() if req.Error != nil { return } if req.HTTPRequest.Method == \"POST\" { // Set the body of the request based on the modified query parameters req.SetStringBody(v2.Query.Encode()) // Now that the body has changed, remove any Content-Length header, // because it will be incorrect req.HTTPRequest.ContentLength = 0 req.HTTPRequest.Header.Del(\"Content-Length\") } else { req.HTTPRequest.URL.RawQuery = v2.Query.Encode() } }. \n### Response: // SignSDKRequest requests with signature version 2.\n//\n// Will sign the requests with the service config's Credentials object\n// Signing is skipped if the credentials is the credentials.AnonymousCredentials\n// object..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void concat(SearchTerm searchTerm) { if (nextIsNot) { searchTerm = new NotTerm(searchTerm); nextIsNot = false; } if (operatorAnd) { and(searchTerm); } else { or(searchTerm); } } \n### Response:", "ground_truth": "Concatenates last search term with new one.\n\n@param searchTerm searchTerm {@link SearchTerm} concatenate.\n@see #and(SearchTerm)\n@see #or(SearchTerm)", "predict": "// Concatenate search terms and set nextIsNot to false if not nextIsNot.\n//\n// Replace \"NotTerm\" with the appropriate class name for the term you're using.\n// This method is used to combine search terms in a query.\n// It will only work if the \"nextIsNot\" flag is set to true before calling this method.\n//\n// If you want to use a different term, you can replace \"NotTerm\" with the appropriate class name.\n//\n// Example:\n// searchTerm = new Term(\"apple\", \"banana\", \"orange\");\n// nextIsNot = true;\n// concat(\"apple\");\n// nextIsNot = false;"}, {"ID": 1769, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void lazyLoad() { if (_major > 0) return; try { if (_url == null) throw new IllegalStateException(); try (InputStream is = _url.openStream()) { //ReadStream rs = VfsOld.openRead(is); _major = 1; ByteCodeParser parser = new ByteCodeParser(); parser.setClassLoader(_loader); parser.setJavaClass(this); parser.parse(is); } } catch (RuntimeException e) { throw e; } catch (Exception e) { throw new RuntimeException(e); } }. \n### Response: Lazily load the class..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String encode(final byte[] bytes) { StringBuilder base32 = new StringBuilder((bytes.length * 8 + 4) / 5); int currByte, digit, i = 0; while (i < bytes.length) { // STEP 0; insert new 5 bits, leave 3 bits currByte = bytes[i++] & 255; base32.append(CHARS[currByte >> 3]); digit = (currByte & 7) << 2; if (i >= bytes.length) { base32.append(CHARS[digit]); break; } // STEP 3: insert 2 new bits, then 5 bits, leave 1 bit currByte = bytes[i++] & 255; base32.append(CHARS[digit | (currByte >> 6)]); base32.append(CHARS[(currByte >> 1) & 31]); digit = (currByte & 1) << 4; if (i >= bytes.length) { base32.append(CHARS[digit]); break; } // STEP 1: insert 4 new bits, leave 4 bit currByte = bytes[i++] & 255; base32.append(CHARS[digit | (currByte >> 4)]); digit = (currByte & 15) << 1; if (i >= bytes.length) { base32.append(CHARS[digit]); break; } // STEP 4: insert 1 new bit, then 5 bits, leave 2 bits currByte = bytes[i++] & 255; base32.append(CHARS[digit | (currByte >> 7)]); base32.append(CHARS[(currByte >> 2) & 31]); digit = (currByte & 3) << 3; if (i >= bytes.length) { base32.append(CHARS[digit]); break; } // STEP 2: insert 3 new bits, then 5 bits, leave 0 bit currByte = bytes[i++] & 255; base32.append(CHARS[digit | (currByte >> 5)]); base32.append(CHARS[currByte & 31]); } return base32.toString(); } \n### Response:", "ground_truth": "Encode an array of binary bytes into a Base32 string.", "predict": "This method encodes a byte array into a string using base32 encoding. It uses a while loop to iterate through the byte array and insert each byte into the base32 string in the appropriate sequence. The encoding process includes 5 bits for the first byte, 2 bits for the second byte, 4 bits for the third byte, 1 bit for the fourth byte, and 4 bits for the final byte. The encoding process also includes shifting the bytes to the left by 3 bits for each step, and adding the appropriate digits to the base32 string. Finally, the method returns the base32 string."}, {"ID": 1770, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public void updateScale(float verticalDragOffset) { layoutParams.width = (int) (getOriginalWidth() * (1 - verticalDragOffset / getXScaleFactor())); layoutParams.height = (int) (getOriginalHeight() * (1 - verticalDragOffset / getYScaleFactor())); getView().setLayoutParams(layoutParams); }. \n### Response: Changes view scale using view's LayoutParam.\n\n@param verticalDragOffset used to calculate the new size..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected byte[] convertValueToArray(final Object value) { if (value instanceof Blob) { final Blob blob = (Blob) value; try { final long length = blob.length(); if (length > Integer.MAX_VALUE) { throw new TypeConversionException(\"Blob is too big.\"); } return blob.getBytes(1, (int) length); } catch (SQLException sex) { throw new TypeConversionException(value, sex); } } if (value instanceof File) { try { return FileUtil.readBytes((File) value); } catch (IOException ioex) { throw new TypeConversionException(value, ioex); } } if (value instanceof Collection) { final Collection collection = (Collection) value; final byte[] target = new byte[collection.size()]; int i = 0; for (final Object element : collection) { target[i] = convertType(element); i++; } return target; } if (value instanceof Iterable) { final Iterable iterable = (Iterable) value; final ArrayList<Byte> byteArrayList = new ArrayList<>(); for (final Object element : iterable) { final byte convertedValue = convertType(element); byteArrayList.add(Byte.valueOf(convertedValue)); } final byte[] array = new byte[byteArrayList.size()]; for (int i = 0; i < byteArrayList.size(); i++) { final Byte b = byteArrayList.get(i); array[i] = b.byteValue(); } return array; } if (value instanceof CharSequence) { final String[] strings = StringUtil.splitc(value.toString(), ArrayConverter.NUMBER_DELIMITERS); return convertArrayToArray(strings); } // everything else: return convertToSingleElementArray(value); } \n### Response:", "ground_truth": "Converts non-array value to array. Detects various\ntypes and collections, iterates them to make conversion\nand to create target array.", "predict": "This method converts an object of various types to a byte array. It is used by the `convertValueToArray` method in another class.\n\n@param value the object to convert to a byte array.\n\n@return a byte array representation of the object.\n\nThis method is useful for converting various types of objects to byte arrays for storage or transmission purposes. It is important to handle the different types of objects correctly and ensure that the resulting byte array is large enough to hold the data.\n\nNote: The `convertValueToArray` method may throw different type of exceptions depending on the type of object being converted. It is important to handle these exceptions appropriately and log them for debugging purposes."}, {"ID": 1771, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def discovery(self, discovery_address: Address) -> Discovery: \"\"\" Return a proxy to interact with the discovery. \"\"\" if not is_binary_address(discovery_address): raise ValueError('discovery_address must be a valid address') with self._discovery_creation_lock: if discovery_address not in self.address_to_discovery: self.address_to_discovery[discovery_address] = Discovery( jsonrpc_client=self.client, discovery_address=discovery_address, contract_manager=self.contract_manager, ) return self.address_to_discovery[discovery_address]. \n### Response: Return a proxy to interact with the discovery..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected boolean isGzipEligible(final HttpServletRequest request) { // request parameter name if (requestParameterName.length() != 0) { String forceGzipString = request.getParameter(requestParameterName); if (forceGzipString != null) { return Converter.get().toBooleanValue(forceGzipString, false); } } // extract uri String uri = request.getRequestURI(); if (uri == null) { return false; } uri = uri.toLowerCase(); boolean result = false; // check uri if (matches == null) { // match == * if (extensions == null) { // extensions == * return true; } // extension String extension = FileNameUtil.getExtension(uri); if (extension.length() > 0) { extension = extension.toLowerCase(); if (StringUtil.equalsOne(extension, extensions) != -1) { result = true; } } } else { if (wildcards) { result = Wildcard.matchPathOne(uri, matches) != -1; } else { for (String match : matches) { if (uri.contains(match)) { result = true; break; } } } } if ((result) && (excludes != null)) { if (wildcards) { if (Wildcard.matchPathOne(uri, excludes) != -1) { result = false; } } else { for (String exclude : excludes) { if (uri.contains(exclude)) { result = false; // excludes founded break; } } } } return result; } \n### Response:", "ground_truth": "Determine if request is eligible for GZipping.", "predict": "``` \n protected boolean isGzipEligible(final HttpServletRequest request) \n { \n   // request parameter name \n   if (requestParameterName.length()!= 0) \n   { \n     String forceGzipString = request.getParameter(requestParameterName); \n     if (forceGzipString!= null) \n     { \n       return Converter.get().toBooleanValue(forceGzipString, false); \n     } \n   } \n   // extract uri \n   String uri = request.getRequestURI(); \n   if (uri == null) \n   { \n     return false; \n   } \n   uri = uri.toLowerCase(); \n   boolean result = false; \n   // check uri \n   if (matches == null) \n   { \n     // match == * \n     if (extensions == null) \n     { \n       return true; \n     } \n     // extension \n     String extension = FileNameUtil.getExtension(uri); \n     if (extension.length() > 0) \n     { \n       extension = extension.toLowerCase(); \n       if (StringUtil.equalsOne(extension, extensions)!= -1) \n       { \n         result = true; \n       } \n     } \n   } \n   else \n   { \n     if (wildcards) \n     { \n       result = wildcards.matchPathOne(uri, matches)!= -1; \n     } \n     else \n     { \n       for (String match : matches) \n       { \n         if (uri.contains(match)) \n         { \n           result = true; \n           break; \n         } \n       } \n     } \n   } \n   // if (result) \n   // and (excludes!= null) \n   // { \n   // if (wildcards) \n   // { \n   //   result = wildcards.matchPathOne(uri, excludes)!= -1; \n   // } \n   // else \n   // { \n   //   for (String exclude : excludes) \n   //   { \n   //     if (uri.contains(exclude)) \n   //     { \n   //       result = false; \n   //       // excludes founded \n   //     } \n   //   } \n   // } \n   // } \n   // return result; \n   return result; \n } \n```"}, {"ID": 1772, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: final public function loadMapperFor(IObjectMapper $sourceObjectMapper) : ReadModelMapper { $map = new ReadMapperDefinition($sourceObjectMapper->getDefinition()->getOrm()); $map->from($sourceObjectMapper); $this->define($map); return new ReadModelMapper($map); }. \n### Response: Constructs a read model mapper for the supplied entity mapper.\n\n@param IObjectMapper $sourceObjectMapper\n\n@return ReadModelMapper.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public List<Violation> validate(final Object target) { return validate(ValidationContext.resolveFor(target.getClass()), target); } \n### Response:", "ground_truth": "Validate object using context from the annotations.", "predict": "Validates the specified target object.\n\n@param ValidationContext $validationContext\n\n@return List<Violation>."}, {"ID": 1773, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func NewPriorityClassInformer(client kubernetes.Interface, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer { return NewFilteredPriorityClassInformer(client, resyncPeriod, indexers, nil) }. \n### Response: // NewPriorityClassInformer constructs a new informer for PriorityClass type.\n// Always prefer using an informer factory to get a shared informer instead of getting an independent\n// one. This reduces memory footprint and number of connections to the server..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public List<Violation> validate(final ValidationContext ctx, final Object target, final String targetName) { for (Map.Entry<String, List<Check>> entry : ctx.map.entrySet()) { String name = entry.getKey(); Object value = BeanUtil.declaredSilent.getProperty(target, name); String valueName = targetName != null ? (targetName + '.' + name) : name; // move up ValidationConstraintContext vcc = new ValidationConstraintContext(this, target, valueName); for (Check check : entry.getValue()) { String[] checkProfiles = check.getProfiles(); if (!matchProfiles(checkProfiles)) { continue; } if (check.getSeverity() < severity) { continue; } ValidationConstraint constraint = check.getConstraint(); if (!constraint.isValid(vcc, value)) { addViolation(new Violation(valueName, target, value, check)); } } } return getViolations(); } \n### Response:", "ground_truth": "Performs validation of provided validation context and appends violations.", "predict": "// validate method validates the specified target object and its properties using the provided validation context.\n// It iterates over the map entries and checks the name, value and target object properties.\n// If the check is valid, it adds the violation to the list of violations.\n// If the check is invalid, it returns an empty list of violations.\n// This method is useful for validating complex objects that may have multiple properties and properties with different types.\n// It is recommended to use an informer factory to get a shared informer instead of getting an independent one, as it reduces memory footprint and number of connections to the server.\n```\n```"}, {"ID": 1774, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func Min(values []int64) int64 { if len(values) == 0 { return 0 } if isSorted(values) { return values[0] } min := values[0] for i := 1; i < len(values); i++ { v := values[i] if min > v { min = v } } return min }. \n### Response: // Min returns minimun value of the given sample..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void useProfile(final String profile) { if (profile == null) { return; } if (this.enabledProfiles == null) { this.enabledProfiles = new HashSet<>(); } this.enabledProfiles.add(profile); } \n### Response:", "ground_truth": "Enables single profile.", "predict": "// Use the specified profile."}, {"ID": 1775, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static function prettySeconds( $seconds = 0.0 ) { $_remain = $seconds; $_hours = floor( $_remain / Enums\\DateTime::SecondsPerHour ); $_remain -= $_hours * Enums\\DateTime::SecondsPerHour; $_minutes = floor( $_remain / Enums\\DateTime::SecondsPerMinute ); $_remain -= $_minutes * Enums\\DateTime::SecondsPerMinute; return $_hours . 'h ' . $_minutes . 'm ' . number_format( $_remain, 2 ) . 's'; }. \n### Response: Coverts a number of seconds into a pretty string (i.e. 0d 0h 0m 0.00s\n\n@param float $seconds\n\n@return string.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void useProfiles(final String... enabledProfiles) { if (enabledProfiles == null) { return; } if (this.enabledProfiles == null) { this.enabledProfiles = new HashSet<>(); } Collections.addAll(this.enabledProfiles, enabledProfiles); } \n### Response:", "ground_truth": "Enables list of profiles.", "predict": "Uses the specified enabledProfiles list.\n\n@param String... enabledProfiles\n\n@return void."}, {"ID": 1776, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def register_neurite_feature(name, func): '''Register a feature to be applied to neurites Parameters: name: name of the feature, used for access via get() function. func: single parameter function of a neurite. ''' if name in NEURITEFEATURES: raise NeuroMError('Attempt to hide registered feature %s' % name) def _fun(neurites, neurite_type=_ntype.all): '''Wrap neurite function from outer scope and map into list''' return list(func(n) for n in _ineurites(neurites, filt=_is_type(neurite_type))) NEURONFEATURES[name] = _fun. \n### Response: Register a feature to be applied to neurites\n\n    Parameters:\n        name: name of the feature, used for access via get() function.\n        func: single parameter function of a neurite..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected boolean matchProfiles(final String[] checkProfiles) { // test for all profiles if ((checkProfiles != null) && (checkProfiles.length == 1) && checkProfiles[0].equals(ALL_PROFILES)) { return true; } if (enabledProfiles == null || enabledProfiles.isEmpty()) { if (validateAllProfilesByDefault) { return true; // all profiles are considered as enabled } // only default profile is enabled if ((checkProfiles == null) || (checkProfiles.length == 0)) { return true; } for (String profile : checkProfiles) { if (StringUtil.isEmpty(profile)) { return true; // default profile } if (profile.equals(DEFAULT_PROFILE)) { return true; } } return false; } // there are enabled profiles if ((checkProfiles == null) || (checkProfiles.length == 0)) { return enabledProfiles.contains(DEFAULT_PROFILE); } boolean result = false; for (String profile : checkProfiles) { boolean b = true; boolean must = false; if (StringUtil.isEmpty(profile)) { profile = DEFAULT_PROFILE; } else if (profile.charAt(0) == '-') { profile = profile.substring(1); b = false; } else if (profile.charAt(0) == '+') { profile = profile.substring(1); must = true; } if (enabledProfiles.contains(profile)) { if (!b) { return false; } result = true; } else { if (must) { return false; } } } return result; } \n### Response:", "ground_truth": "Determine if any of checks profiles is among enabled profiles.", "predict": "Match profiles function\n\nThis function tests for all profiles and returns true if all profiles are enabled. It also checks if there are any enabled profiles and returns false if there are no enabled profiles.\n\nParameters:\n\n* checkProfiles: a String array containing the profiles to be tested.\n\nReturns:\n\n* a boolean value indicating whether all profiles are enabled or not.\n* a boolean value indicating whether any enabled profiles are present or not."}, {"ID": 1777, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function setAttr($name, $value = null) { $wrapper = $this->getWrapper(); // set attribute. $wrapper[$name] = $value; return $this->setWrapper($wrapper); }. \n### Response: Set specified Attr of a Wrapper container\n\n@param string $name Attribute name, ex. 'class'.\n@param string|null $value Attribute value, ex. 'my-class'.\n\n@return FieldBuilder.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected Object parseRequestBody(final String body, final Class targetType) { return JsonParser.create().parse(body, targetType); } \n### Response:", "ground_truth": "Parses request body into the target type.", "predict": "Parses a JSON body into a target object of the specified class.\n\n@param String body The JSON body to parse.\n@param Class targetType The class to which the parsed object should be assigned.\n@return The parsed object."}, {"ID": 1778, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public String serviceName_email_request_POST(String serviceName, OvhActionEnum action) throws IOException { String qPath = \"/hosting/web/{serviceName}/email/request\"; StringBuilder sb = path(qPath, serviceName); HashMap<String, Object>o = new HashMap<String, Object>(); addBody(o, \"action\", action); String resp = exec(qPath, \"POST\", sb.toString(), o); return convertTo(resp, String.class); }. \n### Response: Request specific operation for your email\n\nREST: POST /hosting/web/{serviceName}/email/request\n@param action [required] Action you want to request\n@param serviceName [required] The internal name of your hosting.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public long toMilliseconds() { double then = (fraction - JD_1970.fraction) * MILLIS_IN_DAY; then += (integer - JD_1970.integer) * MILLIS_IN_DAY; then += then > 0 ? 1.0e-6 : -1.0e-6; return (long) then; } \n### Response:", "ground_truth": "Converts to milliseconds.", "predict": "This method calculates the number of milliseconds since the Unix epoch (JD_1970.fraction and JD_1970.integer are used to determine the starting point of the day) and returns it as a long value.\n\nThe method first calculates the difference between the fraction and the current day's fraction using the JD_1970.fraction and JD_1970.integer values. It then multiplies this difference by the number of milliseconds in a day (MILLIS_IN_DAY) and adds a constant value (then) to the result. Finally, the method returns the result as a long value."}, {"ID": 1779, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public SpaceDimension spaceDimension() throws Exception { String[] items; items = getItems(); return new ListSpaceDimension(0, items.length - 1, items, getProperty()); }. \n### Response: Returns the parameter as space dimensions.\n\n@return\t\tthe dimension\n@throws Exception\tif instantiation of dimension fails.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public JulianDate add(final JulianDate jds) { int i = this.integer + jds.integer; double f = this.fraction + jds.fraction; return new JulianDate(i, f); } \n### Response:", "ground_truth": "Adds a JD to current instance.", "predict": "Adds the JulianDate parameter to the current JulianDate object.\n\n@param jds\tthe JulianDate to add\n@return\tthe new JulianDate object\n\nNote: This method is used for adding JulianDate objects together. It does not modify the original JulianDate object in any way."}, {"ID": 1780, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def method_not_allowed(cls, errors=None): \"\"\"Shortcut API for HTTP 405 `Method not allowed` response. Args: errors (list): Response key/value data. Returns: WSResponse Instance. \"\"\" if cls.expose_status: # pragma: no cover cls.response.content_type = 'application/json' cls.response._status_line = '405 Method Not Allowed' return cls(405, None, errors).to_json. \n### Response: Shortcut API for HTTP 405 `Method not allowed` response.\n\n        Args:\n            errors (list): Response key/value data.\n\n        Returns:\n            WSResponse Instance..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public JulianDate sub(final JulianDate jds) { int i = this.integer - jds.integer; double f = this.fraction -jds.fraction; return new JulianDate(i, f); } \n### Response:", "ground_truth": "Subtracts a JD from current instance.", "predict": "Method-level comment for the `sub` method:\n```\npublic JulianDate sub(final JulianDate jds)\n```\n"}, {"ID": 1781, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def add_error(self, property_name, message): \"\"\"Add an error for the given property.\"\"\" if property_name not in self.errors: self.errors[property_name] = [] self.errors[property_name].append(message). \n### Response: Add an error for the given property..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private void set(final int i, double f) { integer = i; int fi = (int) f; f -= fi; integer += fi; if (f < 0) { f += 1; integer--; } this.fraction = f; } \n### Response:", "ground_truth": "Sets integer and fractional part with normalization.\nNormalization means that if double is out of range,\nvalues will be correctly fixed.", "predict": "Set the integer value based on the double value.."}, {"ID": 1782, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public com.google.api.ads.admanager.axis.v201805.InventoryTargeting getInventoryTargeting() { return inventoryTargeting; }. \n### Response: Gets the inventoryTargeting value for this Targeting.\n\n@return inventoryTargeting   * Specifies what inventory is targeted by the {@link LineItem}.\nThis attribute is required. The\nline item must target at least one ad unit or placement..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override protected void initialize(final char[] input) { super.initialize(input); this.tag = new ParsedTag(); this.doctype = new ParsedDoctype(); this.text = new char[1024]; this.textLen = 0; this.parsingTime = -1; } \n### Response:", "ground_truth": "Initializes parser.", "predict": "Initializes the parser and sets various properties.\n\n@Override protected void initialize(final char[] input)   * Initializes the parser and sets various properties.\nThis method is called by the superclass when the parser is initialized.\nIt sets the tag,doctype and text properties of the parser.\nIt also sets the parsingTime property to -1 to indicate that no parsing has occurred..\n\nNote: This method is only called by the superclass when the parser is initialized. It is not used by the subclass."}, {"ID": 1783, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private function format_float($value) { if (is_numeric($value)) { if ($value > 0) { $decimals = strlen($value) - strlen(floor($value)) - 1; } else { $decimals = strlen($value) - strlen(ceil($value)) - 1; } $value = format_float($value, $decimals); } return $value; }. \n### Response: Given a float, prints it nicely.\nThis function reserves the number of decimal places.\n\n@param float|null $value The float number to format\n@return string Localised float.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void emitComment(final int from, final int to) { if (config.enableConditionalComments) { // CC: downlevel-hidden starting if (match(CC_IF, from)) { int endBracketNdx = find(']', from + 3, to); CharSequence expression = charSequence(from + 1, endBracketNdx); ndx = endBracketNdx + 1; char c = input[ndx]; if (c != '>') { errorInvalidToken(); } visitor.condComment(expression, true, true, false); state = DATA_STATE; return; } if (to > CC_ENDIF2.length && match(CC_ENDIF2, to - CC_ENDIF2.length)) { // CC: downlevel-hidden ending visitor.condComment(_ENDIF, false, true, true); state = DATA_STATE; return; } } CharSequence comment = charSequence(from, to); visitor.comment(comment); commentStart = -1; } \n### Response:", "ground_truth": "Emits a comment. Also checks for conditional comments!", "predict": "This method emits a comment starting from the specified from position and ending at the specified to position.\n\n@param int $from The starting position of the comment\n@param int $to The ending position of the comment\n@return CharSequence The comment text\n\nNote: This method is used in a conditional comment block, which is enabled by the configuration parameter `enableConditionalComments`. The method checks if the condition is met at the specified from position and if the end bracket of the comment is found at the specified to position. If the condition is met, the comment is emitted and the state is set to DATA\\_STATE. If the condition is not met, the comment is not emitted and the state is set to DATA\\_STATE. The method returns the comment text."}, {"ID": 1784, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def trigger_deleted(self, filepath): \"\"\"Triggers deleted event if the flie doesn't exist.\"\"\" if not os.path.exists(filepath): self._trigger('deleted', filepath). \n### Response: Triggers deleted event if the flie doesn't exist..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void _error(String message) { if (config.calculatePosition) { Position currentPosition = position(ndx); message = message .concat(StringPool.SPACE) .concat(currentPosition.toString()); } else { message = message .concat(\" [@\") .concat(Integer.toString(ndx)) .concat(StringPool.RIGHT_SQ_BRACKET); } visitor.error(message); } \n### Response:", "ground_truth": "Prepares error message and reports it to the visitor.", "predict": "Provides error handling for the visitor.."}, {"ID": 1785, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function renderDebug() { $html = ''; foreach (static::DEBUG_ELEMENTS as $element) { $html .= $this->consoleLog('\"Checking element binding of ' . $element . '...\"'); $html .= $this->consoleLog($element . '!==undefined'); } return $html; }. \n### Response: Get debug javascript code.\n\n@return string.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public String createHash(final char[] password) { // Generate a random salt SecureRandom random = new SecureRandom(); byte[] salt = new byte[saltBytes]; random.nextBytes(salt); // Hash the password byte[] hash = pbkdf2(password, salt, pbkdf2Iterations, hashBytes); // format iterations:salt:hash return pbkdf2Iterations + \":\" + StringUtil.toHexString(salt) + \":\" + StringUtil.toHexString(hash); } \n### Response:", "ground_truth": "Returns a salted PBKDF2 hash of the password.\n\n@param password the password to hash\n@return a salted PBKDF2 hash of the password", "predict": "This method creates a hash of a password using the PBKDF2 algorithm and generates a random salt. It then hashes the password using the specified parameters and returns the result in the format of iterations:salt:hash."}, {"ID": 1786, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function head() : Box { // keep track of visited boxes for cycle detection $touched = []; for ($b = $this; $b->prev !== null; $b = $b->visit($touched)->prev); return $b; }. \n### Response: Return the head of the list..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private static byte[] pbkdf2(final char[] password, final byte[] salt, final int iterations, final int bytes) { PBEKeySpec spec = new PBEKeySpec(password, salt, iterations, bytes * 8); try { SecretKeyFactory skf = SecretKeyFactory.getInstance(PBKDF2_ALGORITHM); return skf.generateSecret(spec).getEncoded(); } catch (NoSuchAlgorithmException ignore) { return null; } catch (InvalidKeySpecException e) { throw new IllegalArgumentException(e); } } \n### Response:", "ground_truth": "Computes the PBKDF2 hash of a password.\n\n@param password the password to hash.\n@param salt the salt\n@param iterations the iteration count (slowness factor)\n@param bytes the length of the hash to compute in bytes\n@return the PBDKF2 hash of the password", "predict": "This method calculates the password hash using the PBKDF2 algorithm and stores the result in a byte array. It also handles any exceptions that may occur during the calculation."}, {"ID": 1787, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def wrap(self, methodName, types, skip=2): \"\"\" Create a message handler that invokes a wrapper method with the in-order message fields as parameters, skipping over the first ``skip`` fields, and parsed according to the ``types`` list. \"\"\" def handler(fields): try: args = [ field if typ is str else int(field or 0) if typ is int else float(field or 0) if typ is float else bool(int(field or 0)) for (typ, field) in zip(types, fields[skip:])] method(*args) except Exception: self.logger.exception(f'Error for {methodName}:') method = getattr(self.wrapper, methodName, None) return handler if method else lambda *args: None. \n### Response: Create a message handler that invokes a wrapper method\n        with the in-order message fields as parameters, skipping over\n        the first ``skip`` fields, and parsed according to the ``types`` list..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private static byte[] fromHex(final String hex) { final byte[] binary = new byte[hex.length() / 2]; for (int i = 0; i < binary.length; i++) { binary[i] = (byte) Integer.parseInt(hex.substring(2 * i, 2 * i + 2), 16); } return binary; } \n### Response:", "ground_truth": "Converts a string of hexadecimal characters into a byte array.\n\n@param hex the hex string\n@return the hex string decoded into a byte array", "predict": "private static byte[] fromHex(final String hex)\n        This method returns a byte array representing the Hex\n        value of the given string. It uses a two-dimensional\n        for loop to parse the Hex value and convert it to a\n        byte array.\n\n       ..\n        Note: This method is used for parsing Hex values and\n        returning a byte array, it is not intended for use in\n        any other way.\n       ..\n        Returns:\n            byte[]\n       .."}, {"ID": 1788, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def compile(stream_spec, cmd='ffmpeg', overwrite_output=False): \"\"\"Build command-line for invoking ffmpeg. The :meth:`run` function uses this to build the commnad line arguments and should work in most cases, but calling this function directly is useful for debugging or if you need to invoke ffmpeg manually for whatever reason. This is the same as calling :meth:`get_args` except that it also includes the ``ffmpeg`` command as the first argument. \"\"\" if isinstance(cmd, basestring): cmd = [cmd] elif type(cmd) != list: cmd = list(cmd) return cmd + get_args(stream_spec, overwrite_output=overwrite_output). \n### Response: Build command-line for invoking ffmpeg.\n\n    The :meth:`run` function uses this to build the commnad line\n    arguments and should work in most cases, but calling this function\n    directly is useful for debugging or if you need to invoke ffmpeg\n    manually for whatever reason.\n\n    This is the same as calling :meth:`get_args` except that it also\n    includes the ``ffmpeg`` command as the first argument..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public ProviderDefinition[] resolveProviderDefinitions(final Class type, final String name) { return providerResolver.resolve(type, name); } \n### Response:", "ground_truth": "Resolves provider definition defined in a bean.", "predict": "resolveProviderDefinitions(final Class type, final String name)\n\nThis method returns a list of ProviderDefinition objects that match the given Class type and name.\n\nThe method uses the providerResolver object to resolve the ProviderDefinition objects. This object is typically obtained from a configuration or database, and is used to map the Class type and name to the actual Provider Definition objects.\n\nThe method returns a list of ProviderDefinition objects, each of which represents a provider for the given Class type and name. The list is sorted in descending order by the provider's cost, which is determined by the cost of creating a new instance of the provider for each Class object it is used to resolve.\n\nNote that this method may return null if the providerResolver is unable to resolve the ProviderDefinition objects for the given Class type and name.\n\n"}, {"ID": 1789, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func archiveTask(task *taskqueue.Task) (*logdog.ArchiveTask, error) { result := logdog.ArchiveTask{} err := proto.Unmarshal(task.Payload, &result) result.TaskName = task.Name return &result, err }. \n### Response: // archiveTask creates a archiveTask proto from a taskqueue task..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public EmailAttachmentBuilder name(final String name) { if (name != null && !name.trim().isEmpty()) { this.name = name; } return this; } \n### Response:", "ground_truth": "Sets file name.\n\n@param name File name to set.\n@return this", "predict": "// name() returns the name field of the EmailAttachmentBuilder object.."}, {"ID": 1790, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected function generatePhpIni($appId, $bucketId, $filePath) { if (file_exists($filePath)) { $overwrite = $this->myCommand->confirm( 'Overwrite the existing \"php.ini\" file?', false ); if (! $overwrite) { return; } } $storageBucket = \"{$appId}.appspot.com\"; if ($bucketId !== null) { $storageBucket = $bucketId; } $contents = <<<EOT ; enable function that are disabled by default in the App Engine PHP runtime google_app_engine.enable_functions = \"php_sapi_name, php_uname, getmypid\" google_app_engine.allow_include_gs_buckets = \"{$storageBucket}\" allow_url_include = 1 EOT; file_put_contents($filePath, $contents); $this->myCommand->info('Generated the \"php.ini\" file.'); }. \n### Response: Generates a \"php.ini\" file for a GAE app.\n\n@param string $appId the GAE app id.\n@param string $bucketId the GAE gs-bucket id.\n@param string $filePath the 'php.ini' file path..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected EmailAttachmentBuilder setContentIdFromNameIfMissing() { if (contentId == null) { if (name != null) { contentId(FileNameUtil.getName(name)); } else { contentId(NO_NAME); } } return this; } \n### Response:", "ground_truth": "Set content ID if it is missing.\n\n@return this\n@see #contentId(String)", "predict": "This method returns the `EmailAttachmentBuilder` object and sets the content ID based on the name if it is missing.\n\n@return the EmailAttachmentBuilder object.\n\n@param string $name the name of the attachment to set as the content ID."}, {"ID": 1791, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function header($s, $replace = true, $code = false) { if ($code) { $this->status($code); } if ($this->headers_sent) { throw new RequestHeadersAlreadySent; } $s = strtr($s, \"\\r\\n\", ' '); $e = explode(':', $s, 2); if (!isset($e[1])) { $e[0] = 'STATUS'; if (strncmp($s, 'HTTP/', 5) === 0) { $s = substr($s, 9); } } $k = strtr(strtoupper($e[0]), Generic::$htr); if ($k === 'CONTENT_TYPE') { Generic::parseStr(strtolower($e[1]), $ctype, true); if (!isset($ctype['charset'])) { $ctype['charset'] = $this->upstream->pool->config->defaultcharset->value; $s = $e[0] . ': '; $i = 0; foreach ($ctype as $k => $v) { $s .= ($i > 0 ? '; ' : '') . $k . ($v !== '' ? '=' . $v : ''); ++$i; } } } if ($k === 'SET_COOKIE') { $k .= '_' . ++$this->cookieNum; } elseif (!$replace && isset($this->headers[$k])) { return false; } $this->headers[$k] = $s; if ($k === 'CONTENT_LENGTH') { $this->contentLength = (int)$e[1]; } elseif ($k === 'LOCATION') { $this->status(301); } if (Daemon::$compatMode) { is_callable('header_native') ? header_native($s) : header($s); } return true; }. \n### Response: Send the header\n@param  string $s Header. Example: 'Location: http://php.net/'\n@param  boolean $replace Optional. Replace?\n@param  boolean $code Optional. HTTP response code\n@throws \\PHPDaemon\\Request\\RequestHeadersAlreadySent\n@return boolean          Success.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected String resolveContentType(final String contentType) { if (contentType != null) { return contentType; } if (name == null) { return MimeTypes.MIME_APPLICATION_OCTET_STREAM; } final String extension = FileNameUtil.getExtension(name); return MimeTypes.getMimeType(extension); } \n### Response:", "ground_truth": "Resolves content type from all data.\n\n@param contentType Content type if we know it. {@code null} is fine to use.\n@return content type", "predict": "This method resolve the content type of a file name by using the MIME type and extension.\n\n@param  string $contentType MIME type of the file.\n@return string MIME type or application/octet-stream."}, {"ID": 1792, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def queue_purge(self, queue, **kwargs): \"\"\"Discard all messages in the queue. This will delete the messages and results in an empty queue.\"\"\" return self.channel.queue_purge(queue=queue).message_count. \n### Response: Discard all messages in the queue. This will delete the messages\n        and results in an empty queue..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: int computeAttributesSize() { symbolTable.addConstantUtf8(Constants.MODULE); // 6 attribute header bytes, 6 bytes for name, flags and version, and 5 * 2 bytes for counts. int size = 22 + requires.length + exports.length + opens.length + usesIndex.length + provides.length; if (packageCount > 0) { symbolTable.addConstantUtf8(Constants.MODULE_PACKAGES); // 6 attribute header bytes, and 2 bytes for package_count. size += 8 + packageIndex.length; } if (mainClassIndex > 0) { symbolTable.addConstantUtf8(Constants.MODULE_MAIN_CLASS); // 6 attribute header bytes, and 2 bytes for main_class_index. size += 8; } return size; } \n### Response:", "ground_truth": "Returns the size of the Module, ModulePackages and ModuleMainClass attributes generated by this\nModuleWriter. Also add the names of these attributes in the constant pool.\n\n@return the size in bytes of the Module, ModulePackages and ModuleMainClass attributes.", "predict": "This method computes the size of the module by adding the constantUtf8 bytes for the attribute header, including the name, flags and version, and the counts of the required, exported, opens, usesIndex, and provides attributes. It then calculates the total size of the module by adding the sizes of the required, exported, opens, usesIndex, and provides attributes, and if there is a package index it also adds the size of the package index. Finally, it returns the total size of the module."}, {"ID": 1793, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private static <T extends Storable> int commonOrderingCount(OrderingList<T> orderingA, OrderingList<T> orderingB) { int commonCount = Math.min(orderingA.size(), orderingB.size()); for (int i=0; i<commonCount; i++) { if (!orderingA.get(i).equals(orderingB.get(i))) { return i; } } return commonCount; }. \n### Response: Returns the count of exactly matching properties from the two\norderings. The match must be consecutive and start at the first\nproperty..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: void putAttributes(final ByteVector output) { // 6 bytes for name, flags and version, and 5 * 2 bytes for counts. int moduleAttributeLength = 16 + requires.length + exports.length + opens.length + usesIndex.length + provides.length; output .putShort(symbolTable.addConstantUtf8(Constants.MODULE)) .putInt(moduleAttributeLength) .putShort(moduleNameIndex) .putShort(moduleFlags) .putShort(moduleVersionIndex) .putShort(requiresCount) .putByteArray(requires.data, 0, requires.length) .putShort(exportsCount) .putByteArray(exports.data, 0, exports.length) .putShort(opensCount) .putByteArray(opens.data, 0, opens.length) .putShort(usesCount) .putByteArray(usesIndex.data, 0, usesIndex.length) .putShort(providesCount) .putByteArray(provides.data, 0, provides.length); if (packageCount > 0) { output .putShort(symbolTable.addConstantUtf8(Constants.MODULE_PACKAGES)) .putInt(2 + packageIndex.length) .putShort(packageCount) .putByteArray(packageIndex.data, 0, packageIndex.length); } if (mainClassIndex > 0) { output .putShort(symbolTable.addConstantUtf8(Constants.MODULE_MAIN_CLASS)) .putInt(2) .putShort(mainClassIndex); } } \n### Response:", "ground_truth": "Puts the Module, ModulePackages and ModuleMainClass attributes generated by this ModuleWriter\nin the given ByteVector.\n\n@param output where the attributes must be put.", "predict": "This method puts attributes of a module in a ByteVector. It takes a ByteVector output as an argument. The method calculates the length of the module attributes by adding the lengths of the required, exported, open, uses, and provides attributes. It then puts the attribute values in the output ByteVector in the specified order, including the name, flags, version, requiresCount, exportsCount, opensCount, usesCount, and providesCount bytes. It also includes any package and main class index bytes if applicable."}, {"ID": 1794, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected function removeElement($element, $contents) { $newContents = preg_replace('@'.$element->regex.'@xi', '', $contents); if ($newContents !== $contents && isset($element->elements)) { foreach ($element->elements as $element) { $newContents = $this->removeElement($element, $newContents); } } return $newContents; }. \n### Response: Remove an optional element.\n\n@param object $element\n@param string $contents\n\n@return string.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String decode(final String source, final String encoding) { return decode(source, encoding, false); } \n### Response:", "ground_truth": "Decodes URL elements. This method may be used for all\nparts of URL, except for the query parts, since it does\nnot decode the '+' character.\n@see #decodeQuery(String, String)", "predict": "Decode a string.\n\n@param string $source\n@param string $encoding\n@return string."}, {"ID": 1795, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (s *Stack) EnableNIC(id tcpip.NICID) *tcpip.Error { s.mu.RLock() defer s.mu.RUnlock() nic := s.nics[id] if nic == nil { return tcpip.ErrUnknownNICID } nic.attachLinkEndpoint() return nil }. \n### Response: // EnableNIC enables the given NIC so that the link-layer endpoint can start\n// delivering packets to it..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String decodeQuery(final String source, final String encoding) { return decode(source, encoding, true); } \n### Response:", "ground_truth": "Decodes query name or value.", "predict": "// decodeQuery decodes the given query string and returns the result.."}, {"ID": 1796, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static StringBuilder durationConfigString(Duration duration) { Duration remainder = duration; long days = remainder.getStandardDays(); remainder = remainder.minus(Duration.standardDays(days)); long hours = remainder.getStandardHours(); remainder = remainder.minus(Duration.standardHours(hours)); long minutes = remainder.getStandardMinutes(); remainder = remainder.minus(Duration.standardMinutes(minutes)); long seconds = remainder.getStandardSeconds(); remainder = remainder.minus(Duration.standardSeconds(seconds)); if (!remainder.isEqual(Duration.ZERO)) Logger.getLogger(ConfigSupport.class.getName()).log(Level.WARNING, \"Duration is more precise than configuration will handle: {0}, dropping remainder: {1}\", new Object[]{duration, remainder}); StringBuilder result = new StringBuilder(); if (days != 0) { if (result.length() != 0) result.append(' '); result.append(days).append('d'); } if (hours != 0) { if (result.length() != 0) result.append(' '); result.append(hours).append('h'); } if (minutes != 0) { if (result.length() != 0) result.append(' '); result.append(minutes).append('m'); } if (result.length() == 0 || seconds != 0) { if (result.length() != 0) result.append(' '); result.append(seconds).append('s'); } return result; }. \n### Response: Convert duration to an representation accepted by Configuration parser.\n@param duration A duration.\n@return A StringBuilder with the string representation of the duration..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override @SuppressWarnings(\"unchecked\") public void start() { initLogger(); if (!databaseEnabled) { log.info(\"DB not enabled.\"); return; } log.info(\"DB start ----------\"); final PetiteContainer petiteContainer = joyPetiteSupplier.get().getPetiteContainer(); // connection pool connectionProvider = createConnectionProviderIfNotSupplied(); petiteContainer.addBean(beanNamePrefix() + \"pool\", connectionProvider); if (connectionProvider instanceof CoreConnectionPool) { final CoreConnectionPool pool = (CoreConnectionPool) connectionProvider; if (pool.getDriver() == null) { databaseEnabled = false; log.warn(\"DB configuration not set (\" + beanNamePrefix() + \"pool.*). DB will be disabled.\"); return; } } connectionProvider.init(); checkConnectionProvider(); // transactions manager jtxManager = createJtxTransactionManager(connectionProvider); jtxManager.setValidateExistingTransaction(true); final AnnotationTxAdviceManager annTxAdviceManager = new AnnotationTxAdviceManager(new LeanJtxWorker(jtxManager), jtxScopePattern); AnnotationTxAdviceSupport.manager = annTxAdviceManager; // create proxy joyProxettaSupplier.get().getProxetta().withAspect(createTxProxyAspects(annTxAdviceManager.getAnnotations())); final DbSessionProvider sessionProvider = new DbJtxSessionProvider(jtxManager); // querymap final long startTime = System.currentTimeMillis(); final QueryMap queryMap = new DbPropsQueryMap(); log.debug(\"Queries loaded in \" + (System.currentTimeMillis() - startTime) + \"ms.\"); log.debug(\"Total queries: \" + queryMap.size()); // dboom dbOom = DbOom.create() .withConnectionProvider(connectionProvider) .withSessionProvider(sessionProvider) .withQueryMap(queryMap) .get(); dbOom.connect(); final DbEntityManager dbEntityManager = dbOom.entityManager(); dbEntityManager.reset(); petiteContainer.addBean(beanNamePrefix() + \"query\", dbOom.queryConfig()); petiteContainer.addBean(beanNamePrefix() + \"oom\", dbOom.config()); // automatic configuration if (autoConfiguration) { final AutomagicDbOomConfigurator automagicDbOomConfigurator = new AutomagicDbOomConfigurator(dbEntityManager, true); automagicDbOomConfigurator.registerAsConsumer( joyScannerSupplier.get().getClassScanner()); } dbEntityManagerConsumers.accept(dbEntityManager); log.info(\"DB OK!\"); } \n### Response:", "ground_truth": "Initializes database. First, creates connection pool.\nand transaction manager. Then, Jodds DbEntityManager is\nconfigured. It is also configured automagically, by scanning\nthe class path for entities.", "predict": "Implement a start method in your class that starts the database and initializes any necessary components. This method should also check if the database is enabled and if not, log a warning message and return. Additionally, it should initialize the connection pool and check if it is already initialized. If it is not, it should create it if it is not provided. Finally, it should start the transaction manager and register the TxAdviceSupport.manager with the joyScannerSupplier.get().getClassScanner() method to automatically configure the database when it is accessed."}, {"ID": 1797, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String getDocbookFileName(final RESTImageV1 source) { checkArgument(source != null, \"The source parameter can not be null\"); if (source.getLanguageImages_OTM() != null && source.getLanguageImages_OTM().getItems() != null) { final List<RESTLanguageImageV1> langImages = source.getLanguageImages_OTM().returnItems(); for (final RESTLanguageImageV1 langImage : langImages) { final String filename = langImage.getFilename(); if (filename != null) { final int indexOfExtension = filename.lastIndexOf('.'); if (indexOfExtension != -1 && indexOfExtension < filename.length() - 1) { final String extension = filename.substring(indexOfExtension, filename.length()); return source.getId() + extension; } } } } return \"\"; }. \n### Response: The docbook file name for an image is the ID of the image and the\nextension of the first language image. This does imply that you can not\nmix and match image formats within a single image.\n\n@param source The RESTImageV1 object to get the docbook filename for\n@return The docbook file name.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void checkConnectionProvider() { final Connection connection = connectionProvider.getConnection(); try { final DatabaseMetaData databaseMetaData = connection.getMetaData(); String name = databaseMetaData.getDatabaseProductName(); String version = databaseMetaData.getDatabaseProductVersion(); if (log.isInfoEnabled()) { log.info(\"Connected to database: \" + name + \" v\" + version); } } catch (SQLException sex) { log.error(\"DB connection failed: \", sex); } finally { connectionProvider.closeConnection(connection); } } \n### Response:", "ground_truth": "Checks if connection provider can return a connection.", "predict": "This method checks the connection provider and ensures that a connection is established to the database. It then attempts to retrieve information about the database, such as its name and version. If a connection is successful, the method logs a message indicating the connection details. If a connection is not successful, it logs an error message indicating the reason for the failure. Finally, the method closes the connection to the database.\n\n@return A boolean indicating whether the connection was established successfully.\n\n@param connectionProvider The connection provider to check for a connection to the database.\n@param connection The connection to be checked.\n@return A boolean indicating whether the connection was established successfully."}, {"ID": 1798, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def taskotron_task_outcome(config, message, outcome=None): \"\"\" Particular taskotron task outcome With this rule, you can limit messages to only those of particular `taskotron <https://taskotron.fedoraproject.org/>`_ task outcome. You can specify several outcomes by separating them with a comma ',', i.e.: ``PASSED,FAILED``. The full list of supported outcomes can be found in the libtaskotron `documentation <https://docs.qadevel.cloud.fedoraproject.org/ libtaskotron/latest/resultyaml.html#minimal-version>`_. \"\"\" # We only operate on taskotron messages, first off. if not taskotron_result_new(config, message): return False if not outcome: return False outcomes = [item.strip().lower() for item in outcome.split(',')] return message['msg']['result'].get('outcome').lower() in outcomes. \n### Response: Particular taskotron task outcome\n\n    With this rule, you can limit messages to only those of particular\n    `taskotron `_ task outcome.\n\n    You can specify several outcomes by separating them with a comma ',',\n    i.e.: ``PASSED,FAILED``.\n\n    The full list of supported outcomes can be found in the libtaskotron\n    `documentation `_..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public MethodVisitor visitMethod(final int access, final String name, final String desc, final String signature, final String[] exceptions) { // if ((access & AsmUtil.ACC_FINAL) != 0) { // return null; // skip finals // } MethodSignatureVisitor msign = createMethodSignature(access, name, desc, signature, exceptions, thisReference, this.generics); String key = ProxettaAsmUtil.createMethodSignaturesKey(access, name, desc, thisReference); methodSignatures.put(key, msign); allMethodSignatures.add(msign.getCleanSignature()); return new MethodAnnotationReader(msign); } \n### Response:", "ground_truth": "Stores method signature for target method.", "predict": "MethodVisitor visitMethod\n\n    Overrides the `visitMethod` method of the `MethodVisitor` interface.\n\n    This method is called on methods, and it is responsible for performing\n    the necessary steps to visit the method.\n\n    The method takes several parameters:\n\n    - `access`: an `int` representing the access level of the method.\n    - `name`: a `String` representing the name of the method.\n    - `desc`: a `String` representing the description of the method.\n    - `signature`: a `String` representing the signature of the method.\n    - `exceptions`: a `String` array representing the exceptions thrown by the method.\n    - `thisReference`: a reference to the `this` object of the method.\n    - `generics`: a reference to the generic type parameters of the method.\n\n    The method returns a `MethodSignatureVisitor` object, which is used to\n    process the method signature."}, {"ID": 1799, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static <E, S extends Set<E>> UnmodifiableMutableSet<E> of(S set) { if (set == null) { throw new IllegalArgumentException(\"cannot create an UnmodifiableMutableSet for null\"); } return new UnmodifiableMutableSet<E>(SetAdapter.adapt(set)); }. \n### Response: This method will take a MutableSet and wrap it directly in a UnmodifiableMutableSet.  It will\ntake any other non-GS-set and first adapt it will a SetAdapter, and then return a\nUnmodifiableMutableSet that wraps the adapter..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public void visitEnd() { // prepare class annotations if (classAnnotations != null) { annotations = classAnnotations.toArray(new AnnotationInfo[0]); classAnnotations = null; } List<String> superList = new ArrayList<>(); Set<String> allInterfaces = new HashSet<>(); if (nextInterfaces != null) { allInterfaces.addAll(nextInterfaces); } // check all public super methods that are not overridden in superclass while (nextSupername != null) { InputStream inputStream = null; ClassReader cr; try { inputStream = ClassLoaderUtil.getClassAsStream(nextSupername, classLoader); cr = new ClassReader(inputStream); } catch (IOException ioex) { throw new ProxettaException(\"Unable to inspect super class: \" + nextSupername, ioex); } finally { StreamUtil.close(inputStream); } superList.add(nextSupername); superClassReaders.add(cr); // remember the super class reader cr.accept(new SuperClassVisitor(), 0); if (cr.getInterfaces() != null) { Collections.addAll(allInterfaces, cr.getInterfaces()); } } superClasses = superList.toArray(new String[0]); // check all interface methods that are not overridden in super-interface Set<String> todoInterfaces = new HashSet<>(allInterfaces); Set<String> newCollectedInterfaces = new HashSet<>(); while (true) { for (String next : todoInterfaces) { InputStream inputStream = null; ClassReader cr; try { inputStream = ClassLoaderUtil.getClassAsStream(next, classLoader); cr = new ClassReader(inputStream); } catch (IOException ioex) { throw new ProxettaException(\"Unable to inspect super interface: \" + next, ioex); } finally { StreamUtil.close(inputStream); } superClassReaders.add(cr); // remember the super class reader cr.accept(new SuperClassVisitor(), 0); if (cr.getInterfaces() != null) { for (String newInterface : cr.getInterfaces()) { if (!allInterfaces.contains(newInterface) && !todoInterfaces.contains(newInterface)) { // new interface found newCollectedInterfaces.add(newInterface); } } } } // perform collection allInterfaces.addAll(todoInterfaces); if (newCollectedInterfaces.isEmpty()) { // no new interface found break; } todoInterfaces.clear(); todoInterfaces.addAll(newCollectedInterfaces); newCollectedInterfaces.clear(); } } \n### Response:", "ground_truth": "Stores signatures for all super public methods not already overridden by target class.\nAll this methods will be accepted for proxyfication.", "predict": "This method visits the end of the superclass and checks for all public super methods that are not overridden in the superclass. It also checks for all interfaces that are not overridden in the super-interface. It then checks all super classes and interfaces and collects them into a Set of all interfaces. Finally, it performs a collection of all interfaces and clears any existing collections."}, {"ID": 1800, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void adaptElevationShadow() { setImageBitmap( createElevationShadow(getContext(), elevation, orientation, emulateParallelLight)); setScaleType(orientation == Orientation.LEFT || orientation == Orientation.TOP || orientation == Orientation.RIGHT || orientation == Orientation.BOTTOM ? ScaleType.FIT_XY : ScaleType.FIT_CENTER); }. \n### Response: Adapts the shadow, which is visualized by the view, depending on its current attributes..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected MethodSignatureVisitor createMethodSignature( final int access, final String methodName, final String description, final String signature, final String[] exceptions, final String classname, final Map<String, String> declaredTypeGenerics) { MethodSignatureVisitor v = new MethodSignatureVisitor(methodName, access, classname, description, exceptions, signature, declaredTypeGenerics, this); new SignatureReader(signature != null ? signature : description).accept(v); return v; } \n### Response:", "ground_truth": "Creates method signature from method name.", "predict": "Creates a MethodSignatureVisitor that can be used to analyze the signature of a method.."}, {"ID": 1801, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function cannot($permissionName, $params = [], $allowCaching = TRUE) { return !$this->can($permissionName, $params, $allowCaching); }. \n### Response: Checks if the user cannot perform the operation as specified by the given permission.\n\nNote that you must configure \"authManager\" application component in order to use this method.\nOtherwise it will always return false.\n\n@param string|array $permissionName the name(s) of the permission (e.g. \"edit post\") that needs access check.\n@param array        $params         name-value pairs that would be passed to the rules associated\nwith the roles and permissions assigned to the user.\n@param boolean      $allowCaching   whether to allow caching the result of access check.\nWhen this parameter is true (default), if the access check of an operation\nwas performed before, its result will be directly returned when calling this\nmethod to check the same operation. If this parameter is false, this method\nwill always call\n[[\\yii\\rbac\\CheckAccessInterface::checkAccess()]] to obtain the up-to-date\naccess result. Note that this caching is effective only within the same\nrequest and only works when `$params = []`.\n\n@return boolean whether the user cannot perform the operation as specified by the given permission..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String toCsvString(final Object... elements) { StringBuilder line = new StringBuilder(); int last = elements.length -1; for (int i = 0; i < elements.length; i++) { if (elements[i] == null) { if (i != last) { line.append(FIELD_SEPARATOR); } continue; } String field = elements[i].toString(); // check for special cases int ndx = field.indexOf(FIELD_SEPARATOR); if (ndx == -1) { ndx = field.indexOf(FIELD_QUOTE); } if (ndx == -1) { if (field.startsWith(StringPool.SPACE) || field.endsWith(StringPool.SPACE)) { ndx = 1; } } if (ndx == -1) { ndx = StringUtil.indexOfChars(field, SPECIAL_CHARS); } // add field if (ndx != -1) { line.append(FIELD_QUOTE); } field = StringUtil.replace(field, StringPool.QUOTE, DOUBLE_QUOTE); line.append(field); if (ndx != -1) { line.append(FIELD_QUOTE); } // last if (i != last) { line.append(FIELD_SEPARATOR); } } return line.toString(); } \n### Response:", "ground_truth": "Parse fields as csv string,", "predict": "This method returns a CSV string representation of an array of objects.\n\nIt uses the `StringBuilder` class to build a string representation of the array elements, and then uses various methods to format the string in a CSV-like manner.\n\nThe method also handles some special cases and adds quotes and double quotes to the fields if necessary.\n\nThe method is useful for generating a CSV file that can be used to store data in a spreadsheet or other format.\n\nNote that this method requires the `StringUtil` class to be installed in the application."}, {"ID": 1802, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function getAccount() { $mainAccount = $this->entity->getMainAccount(); if (!is_null($mainAccount)) { return new Account($mainAccount, $this->locale); } return; }. \n### Response: Returns main account.\n\n@VirtualProperty\n@SerializedName(\"account\")\n@Groups({\"fullContact\"}).\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String[] toStringArray(final String line) { List<String> row = new ArrayList<>(); boolean inQuotedField = false; int fieldStart = 0; final int len = line.length(); for (int i = 0; i < len; i++) { char c = line.charAt(i); if (c == FIELD_SEPARATOR) { if (!inQuotedField) { // ignore we are quoting addField(row, line, fieldStart, i, inQuotedField); fieldStart = i + 1; } } else if (c == FIELD_QUOTE) { if (inQuotedField) { if (i + 1 == len || line.charAt(i + 1) == FIELD_SEPARATOR) { // we are already quoting - peek to see if this is the end of the field addField(row, line, fieldStart, i, inQuotedField); fieldStart = i + 2; i++; // and skip the comma inQuotedField = false; } } else if (fieldStart == i) { inQuotedField = true; // this is a beginning of a quote fieldStart++; // move field start } } } // add last field - but only if string was not empty if (len > 0 && fieldStart <= len) { addField(row, line, fieldStart, len, inQuotedField); } return row.toArray(new String[0]); } \n### Response:", "ground_truth": "Converts CSV line to string array.", "predict": "This method returns a string array containing the fields of a line of text. It starts by getting the main account from the entity, and then checks if it is null. If it is not null, it creates an Account object and returns it. If the main account is null, it returns an empty string array. The method then iterates over the line of text, and for each character, it checks if it is a field separator or quote character. If it is a field separator, it adds a field to the array and increments the field start variable. If it is a quote character, it checks if the current character is the beginning of a quote, and if so, it increments the field start variable and skips over the comma. If the current character is not the beginning of a quote, it checks if the next character is a field separator or quote character, and if so, it adds a field to the array and increments the field start variable. The method then adds the last field if it is not empty, and returns the array."}, {"ID": 1803, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def has_option(self, option_name=None): \"\"\" Check whether configuration selection has the specified option. :param option_name: option name to check. If no option is specified, then check is made for this option :return: bool \"\"\" if option_name is None: option_name = '' return self.config().has_option(self.section(), self.option_prefix() + option_name). \n### Response: Check whether configuration selection has the specified option.\n\n\t\t:param option_name: option name to check. If no option is specified, then check is made for this option\n\n\t\t:return: bool.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public CtorInjectionPoint resolve(final Class type, final boolean useAnnotation) { // lookup methods ClassDescriptor cd = ClassIntrospector.get().lookup(type); CtorDescriptor[] allCtors = cd.getAllCtorDescriptors(); Constructor foundedCtor = null; Constructor defaultCtor = null; BeanReferences[] references = null; for (CtorDescriptor ctorDescriptor : allCtors) { Constructor<?> ctor = ctorDescriptor.getConstructor(); Class<?>[] paramTypes = ctor.getParameterTypes(); if (paramTypes.length == 0) { defaultCtor = ctor; // detects default ctors } if (!useAnnotation) { continue; } BeanReferences[] ctorReferences = referencesResolver.readAllReferencesFromAnnotation(ctor); if (ctorReferences == null) { continue; } if (foundedCtor != null) { throw new PetiteException(\"Two or more constructors are annotated as injection points in the bean: \" + type.getName()); } foundedCtor = ctor; references = ctorReferences; } if (foundedCtor == null) { // there is no annotated constructor if (allCtors.length == 1) { foundedCtor = allCtors[0].getConstructor(); } else { foundedCtor = defaultCtor; } if (foundedCtor == null) { // no matching ctor found // still this is not an error if bean is already instantiated. return CtorInjectionPoint.EMPTY; } references = referencesResolver.readAllReferencesFromAnnotation(foundedCtor); if (references == null) { references = new BeanReferences[0]; } } return new CtorInjectionPoint(foundedCtor, references); } \n### Response:", "ground_truth": "Resolves constructor injection point from type. Looks for single annotated constructor.\nIf no annotated constructors found, the total number of constructors will be checked.\nIf there is only one constructor, that one will be used as injection point. If more\nconstructors exist, the default one will be used as injection point. Otherwise, exception\nis thrown.", "predict": "This method resolve() is a public method in the class CtorInjectionPoint that takes in two parameters: type and useAnnotation. It uses the ClassIntrospector.get() method to lookup the annotated constructor of the given type. It then iterates through all the constructors of the type and checks if they are annotated with the useAnnotation parameter. If two or more constructors are annotated as injection points in the bean, it throws a PetiteException with the message \"Two or more constructors are annotated as injection points in the bean: \" + type.getName(). If no matching constructor is found, it returns CtorInjectionPoint.EMPTY. If a matching constructor is found, it reads all the references from the annotation and returns them as a new CtorInjectionPoint object."}, {"ID": 1804, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static function fromArray(array $server) { $uri = new self(''); if (isset($server['HTTPS'])) { $uri->scheme = $server['HTTPS'] === 'on' ? 'https' : 'http'; } [$host, $port] = Helpers::getHostAndPortFromArray($server); $uri->host = \\strtolower($host); $uri->port = $uri->filterPort($port); $path = Helpers::getRequestUri($server); $fragment = ''; if (\\strpos($path, '#') !== false) { [$path, $fragment] = \\explode('#', $path, 2); } $uri->path = $uri->filterPath(\\explode('?', $path, 2)[0]); $uri->fragment = $uri->filterFragment($fragment); if (isset($server['QUERY_STRING'])) { $uri->query = $uri->filterQuery($server['QUERY_STRING']); } return $uri; }. \n### Response: Get a Uri populated with values from server variables.\n\n@param array $server Typically $_SERVER or similar structure.\n\n@return UriInterface\n@throws \\InvalidArgumentException.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private ClassReader createAdviceClassReader(final Class<? extends ProxyAdvice> advice) { InputStream inputStream = null; try { inputStream = ClassLoaderUtil.getClassAsStream(advice); return new ClassReader(inputStream); } catch (IOException ioex) { throw new ProxettaException(ioex); } finally { StreamUtil.close(inputStream); } } \n### Response:", "ground_truth": "Creates advice's class reader.", "predict": "Create a ClassReader for the advice class.\n\n@param Class<? extends ProxyAdvice> advice The advice class to create a ClassReader for.\n\n@return ClassReader\n@throws ProxettaException."}, {"ID": 1805, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def endpoint(value: Any) -> Any: \"\"\" Convert a endpoint string to the corresponding Endpoint instance type :param value: Endpoint string or subclass :return: \"\"\" if issubclass(type(value), Endpoint): return value elif isinstance(value, str): for api, cls in MANAGED_API.items(): if value.startswith(api + \" \"): return cls.from_inline(value) return UnknownEndpoint.from_inline(value) else: raise TypeError(\"Cannot convert {0} to endpoint\".format(value)). \n### Response: Convert a endpoint string to the corresponding Endpoint instance type\n\n    :param value: Endpoint string or subclass\n    :return:.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private ClassReader getCachedAdviceClassReader(final Class<? extends ProxyAdvice> advice) { if (adviceClassReaderCache == null) { adviceClassReaderCache = TypeCache.createDefault(); } ClassReader adviceReader = adviceClassReaderCache.get(advice); if (adviceReader == null) { adviceReader = createAdviceClassReader(advice); adviceClassReaderCache.put(advice, adviceReader); } return adviceReader; } \n### Response:", "ground_truth": "Returns class reader for advice.", "predict": "Retrieve a cached advice class reader for the given advice class.\n\n    :param advice: Class<? extends ProxyAdvice>\n    :return: A cached advice class reader."}, {"ID": 1806, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def get_package_sources(self): \"\"\"Make remote python packages available for local use.\"\"\" # Checkout local modules for config in self.sources.get('local', []): self.fetch_local_package(config=config) # Checkout S3 repositories specified in config for config in self.sources.get('s3', []): self.fetch_s3_package(config=config) # Checkout git repositories specified in config for config in self.sources.get('git', []): self.fetch_git_package(config=config). \n### Response: Make remote python packages available for local use..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public String encrypt(final String str) { try { byte[] utf8 = StringUtil.getBytes(str); // encode the string into bytes using utf-8 byte[] enc = ecipher.doFinal(utf8); // encrypt return Base64.encodeToString(enc); // encode bytes to base64 to get a string } catch (Throwable ignore) { return null; } } \n### Response:", "ground_truth": "Symmetrically encrypts the string.", "predict": "Encrypt a string using a ecipher."}, {"ID": 1807, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function writeString(&$string) { $len = strlen($string); if(!$len){ $this->writeInteger(0x01); return $this; } $ref = array_key_exists($string, $this->_referenceStrings) ? $this->_referenceStrings[$string] : false; if ($ref === false){ $this->_referenceStrings[$string] = count($this->_referenceStrings); $this->writeBinaryString($string); } else { $ref <<= 1; $this->writeInteger($ref); } return $this; }. \n### Response: Send string to output stream\n\n@param  string $string\n@return Zend_Amf_Parse_Amf3_Serializer.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public String decrypt(String str) { try { str = StringUtil.replaceChar(str, ' ', '+'); // replace spaces with chars. byte[] dec = Base64.decode(str); // decode base64 to get bytes byte[] utf8 = dcipher.doFinal(dec); // decrypt return new String(utf8, UTF_8); // decode using utf-8 } catch (Throwable ignore) { return null; } } \n### Response:", "ground_truth": "Symmetrically decrypts the string.", "predict": "Decrypt string using Base64 decode and utf-8 encoding\n\n@param  string $str\n@return String.\n\nNote: This method uses Base64 encoding to decode a string, which may not be suitable for all use cases. It is recommended to use a more secure encryption method, such as AES, if possible."}, {"ID": 1808, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function resolveBase(app) { const paths = [ { name: 'base', path: path.resolve(cwd, 'node_modules/base') }, { name: 'base-app', path: path.resolve(cwd, 'node_modules/base-app') }, { name: 'assemble-core', path: path.resolve(cwd, 'node_modules/assemble-core') }, { name: 'assemble', path: path.resolve(cwd, 'node_modules/assemble') }, { name: 'generate', path: path.resolve(cwd, 'node_modules/generate') }, { name: 'update', path: path.resolve(cwd, 'node_modules/update') }, { name: 'verb', path: path.resolve(cwd, 'node_modules/verb') }, { name: 'core', path: path.resolve(__dirname, '..') } ]; for (const file of paths) { if (opts.app && file.name === opts.app && (app = resolveApp(file))) { return app; } } if (opts.app) { app = resolveApp({ name: opts.app, path: path.resolve(cwd, 'node_modules', opts.app) }); } return app; }. \n### Response: Resolve the \"app\" to use.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static Logger getLogger(final String name) { if (loggers == null) { return loggerProvider.apply(name); } return loggers.computeIfAbsent(name, loggerProvider); } \n### Response:", "ground_truth": "Returns logger for given name. Repeated calls to this method with the\nsame argument should return the very same instance of the logger.", "predict": "This method retrieves the logger for a given name using the `loggers` and `loggerProvider` objects. It first checks if `loggers` is null, and if so, it returns the logger provider's apply method for the given name. If `loggers` is not null, it computes the logger for the given name using the `loggers.computeIfAbsent` method, which returns the first logger with the given name or null if no such logger is found. Finally, it returns the retrieved logger."}, {"ID": 1809, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def populate(self): \"\"\" Sync changes from the API to the local object. Note: syncs ip_addresses and storage_devices too (/server/uuid endpoint) \"\"\" server, IPAddresses, storages = self.cloud_manager.get_server_data(self.uuid) self._reset( server, ip_addresses=IPAddresses, storage_devices=storages, populated=True ) return self. \n### Response: Sync changes from the API to the local object.\n\n        Note: syncs ip_addresses and storage_devices too (/server/uuid endpoint).\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private void setName(final String name) { if (name.contains(\";\") || name.contains(\",\") || name.startsWith(\"$\")) { throw new IllegalArgumentException(\"Invalid cookie name:\" + name); } for (int n = 0; n < name.length(); n++) { char c = name.charAt(n); if (c <= 0x20 || c >= 0x7f) { throw new IllegalArgumentException(\"Invalid cookie name:\" + name); } } this.name = name; } \n### Response:", "ground_truth": "Sets the cookie name and checks for validity.", "predict": "```\n// Method comment for setName()\nprivate void setName(final String name) {\n    if (name.contains(\";\") || name.contains(\",\") || name.startsWith(\"$\")) {\n        throw new IllegalArgumentException(\"Invalid cookie name:\" + name);\n    }\n    for (int n = 0; n < name.length(); n++) {\n        char c = name.charAt(n);\n        if (c <= 0x20 || c >= 0x7f) {\n            throw new IllegalArgumentException(\"Invalid cookie name:\" + name);\n        }\n    }\n    this.name = name;\n}\n```\n### Resp This method sets the name of the cookie.\n\n"}, {"ID": 1810, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def set_ylim(self, ylim): \"\"\" Set y-axis limits. Accepts a two-element list to set the y-axis limits. Args: ylim (list): lower and upper bounds Raises: ValueError: ylim must contain two elements ValueError: Min must be less than max \"\"\" if len(ylim) != 2: raise ValueError(\"ylim must contain two elements\") if ylim[1] < ylim[0]: raise ValueError(\"Min must be less than Max\") self.options[\"min_y\"] = ylim[0] self.options[\"max_y\"] = ylim[1]. \n### Response: Set y-axis limits.\n\n            Accepts a two-element list to set the y-axis limits.\n\n            Args:\n                ylim (list): lower and upper bounds\n\n            Raises:\n                ValueError: ylim must contain two elements\n                ValueError: Min must be less than max.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected ActionRequest createActionRequest( final String actionPath, final String[] actionPathChunks, final ActionRuntime actionRuntime, final Object action, final HttpServletRequest servletRequest, final HttpServletResponse servletResponse) { return new ActionRequest(this, actionPath, actionPathChunks, actionRuntime, action, servletRequest, servletResponse); } \n### Response:", "ground_truth": "", "predict": "Create an instance of the ActionRequest class.\n\n            Args:\n                this (Object): instance of the ServletActionContext\n                actionPath (String): path of the action\n                actionPathChunks (String[]): array of chunked action path\n                actionRuntime (ActionRuntime): runtime of the action\n                action (Object): the action to perform\n                 servletRequest (HttpServletRequest): request of theServlet\n                 servletResponse (HttpServletResponse): response of theServlet\n\n            Returns:\n                ActionRequest: instance of the ActionRequest class"}, {"ID": 1811, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static long sum(long[] array) { if (array == null) { return 0L; } long sum = 0; for (int i = 0; i < array.length; i++) { sum += array[i]; } return sum; }. \n### Response: Return the sum of values in the array\n@param array the array to sum\n@return the sum.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override protected <R extends ActionFilter> R createWrapper(final Class<R> wrapperClass) { return petiteContainer.createBean(wrapperClass); } \n### Response:", "ground_truth": "Acquires filter from Petite container.", "predict": "Create a new instance of the wrapper class using the petiteContainer.\n@param wrapperClass the class to create a wrapper instance for\n@return the new wrapper instance."}, {"ID": 1812, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def make_logger logger = Logger.new(STDOUT) logger.level = Logger::ERROR logger end. \n### Response: Options for lock\n name       - The uuid of the lock\n timeout    - The time that waits to acquire the lock, default 20 seconds\n expiration - Lock expires in given seconds if not refreshed, default 10 seconds\n logger     - The logger..\n ttl        - The max time that a thread can acquire the lock, default 600 seconds. Lock raise +JOB_TIMEOUT+ error once the ttl is exceeded..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void destroyBean(final BeanData beanData) { if (destroyableBeans == null) { return; } if (!isBeanDestroyable(beanData)) { return; } if (destroyableBeans.remove(beanData)) { beanData.callDestroyMethods(); } } \n### Response:", "ground_truth": "Removes destroyable bean from the list and calls it destroy methods.\nIf bean is not destroyable, does nothing. Bean gets destroyed only once.", "predict": "Destroys a bean and calls its destroy methods.\n\nNote: This method is protected, so only authorized beans can call it."}, {"ID": 1813, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def get_filtered_vts_list(self, vts, vt_filter): \"\"\" Gets a collection of vulnerability test from the vts dictionary, which match the filter. Arguments: vt_filter (string): Filter to apply to the vts collection. vts (dictionary): The complete vts collection. Returns: Dictionary with filtered vulnerability tests. \"\"\" if not vt_filter: raise RequiredArgument('vt_filter: A valid filter is required.') filters = self.parse_filters(vt_filter) if not filters: return None _vts_aux = vts.copy() for _element, _oper, _filter_val in filters: for vt_id in _vts_aux.copy(): if not _vts_aux[vt_id].get(_element): _vts_aux.pop(vt_id) continue _elem_val = _vts_aux[vt_id].get(_element) _val = self.format_filter_value(_element, _elem_val) if self.filter_operator[_oper](_val, _filter_val): continue else: _vts_aux.pop(vt_id) return _vts_aux. \n### Response: Gets a collection of vulnerability test from the vts dictionary,\n        which match the filter.\n\n        Arguments:\n            vt_filter (string): Filter to apply to the vts collection.\n            vts (dictionary): The complete vts collection.\n\n        Returns:\n            Dictionary with filtered vulnerability tests..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public void shutdown() { if (destroyableBeans == null) { return; } for (final BeanData destroyableBean : destroyableBeans) { destroyableBean.callDestroyMethods(); } destroyableBeans.clear(); } \n### Response:", "ground_truth": "Shutdowns the scope and calls all collected destroyable beans.", "predict": "@Override\npublic void shutdown() {\nif (destroyableBeans == null) {\nreturn;\n}\nfor (final BeanData destroyableBean : destroyableBeans) {\ndestroyableBean.callDestroyMethods();\n}\ndestroyableBeans.clear();\n}\n\nThis method is part of the Java class \"BeanData\" and is called when the object is being destroyed. It iterates through all the BeanData objects in the \"destroyableBeans\" list and calls their \"callDestroyMethods()\" method to destroy them. The \"clear()\" method is also called to clear the \"destroyableBeans\" list.\n\nThis method is important because it ensures that all the BeanData objects in the \"destroyableBeans\" list are properly destroyed before the object is destroyed. This ensures that any resources that the object may have used are properly released."}, {"ID": 1814, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func ExtractForwardToReplicas(opts ...interface{}) *opt.ForwardToReplicasOption { for _, o := range opts { if v, ok := o.(*opt.ForwardToReplicasOption); ok { return v } } return nil }. \n### Response: // ExtractForwardToReplicas returns the first found ForwardToReplicasOption from the\n// given variadic arguments or nil otherwise..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public ReceivedEmail[] get() { if (fromFolder != null) { session.useFolder(fromFolder); } return session.receiveMessages(filter, flagsToSet, flagsToUnset, envelopeOnly, messages -> { if (targetFolder != null) { try { session.folder.copyMessages(messages, session.getFolder(targetFolder)); } catch (MessagingException e) { throw new MailException(\"Copying messages failed\"); } } }); } \n### Response:", "ground_truth": "Receives the emails as specified by the builder.", "predict": "// This method retrieves the ReceivedEmail[] array from the session and returns it.\n// It first checks if a fromFolder is not null and uses it to set the session.useFolder(fromFolder);\n// If fromFolder is not null, it then calls the session.receiveMessages() method with the given filters, flagsToSet, flagsToUnset, and envelopeOnly arguments.\n// The messages parameter is passed to a lambda function that copies the messages from the session.folder to the targetFolder if it is not null.\n// If the copyMessages() method fails, it throws a MailException with a message indicating that copying messages failed.\n// Finally, the method returns the ReceivedEmail[] array without setting a new instance of it."}, {"ID": 1815, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function getBlockManager($idBlock) { $info = $this->getManagerInfoByBlockId($idBlock); return (null !== $info) ? $info['manager'] : null; }. \n### Response: Retrieves the block manager by the block's id\n\n@param  int                          $idBlock The id of the block to retrieve\n@return null|BlockManagerInterface\n\n@api.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void main(final String[] args) { loadPropertiesFiles(args); try (ClusteredServiceContainer container = launch()) { container.context().shutdownSignalBarrier().await(); System.out.println(\"Shutdown ClusteredServiceContainer...\"); } } \n### Response:", "ground_truth": "Launch the clustered service container and await a shutdown signal.\n\n@param args command line argument which is a list for properties files as URLs or filenames.", "predict": "Shutdown the ClusteredServiceContainer.\n\n@param  ClusteredServiceContainer container The ClusteredServiceContainer to shutdown\n@return void\n\n@api."}, {"ID": 1816, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected function checkRequiredOptions(array $options) { array_walk( $this->supportedOptions, function ($supportedOptionData, $supportedOptionName, $options) { if (isset($supportedOptionData[1]) && true === $supportedOptionData[1] && empty($supportedOptionData[0]) && !array_key_exists($supportedOptionName, $options) ) { throw new InvalidServiceOptionsException( 'Required validation option not set: ' . $supportedOptionName, 1456397839 ); } }, $options ); }. \n### Response: Will check if the required options are correctly filled.\n\n@param array $options\n@throws InvalidServiceOptionsException.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void run() { do { LockSupport.parkNanos(parkNs); final long currentTotalMessages = totalMessages; final long currentTotalBytes = totalBytes; final long currentTimestamp = System.nanoTime(); final long timeSpanNs = currentTimestamp - lastTimestamp; final double messagesPerSec = ((currentTotalMessages - lastTotalMessages) * (double)reportIntervalNs) / (double)timeSpanNs; final double bytesPerSec = ((currentTotalBytes - lastTotalBytes) * (double)reportIntervalNs) / (double)timeSpanNs; reportingFunc.onReport(messagesPerSec, bytesPerSec, currentTotalMessages, currentTotalBytes); lastTotalBytes = currentTotalBytes; lastTotalMessages = currentTotalMessages; lastTimestamp = currentTimestamp; } while (!halt); } \n### Response:", "ground_truth": "Run loop for the rate reporter", "predict": "This method runs a loop until the program is stopped. It uses the LockSupport class to park Nanoseconds and the System.nanoTime() method to get the current timestamp. It then calculates the number of Nanoseconds between the last timestamp and the current timestamp, and the number of messages per second and bytes per second. It then updates the values of lastTotalBytes, lastTotalMessages, and lastTimestamp. Finally, it calls the reportingFunc.onReport() method to report the values of messagesPerSec, bytesPerSec, and currentTotalMessages and currentTotalBytes."}, {"ID": 1817, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void setUploadTempDir(File uploadTempDir) throws IOException { if (!uploadTempDir.exists() && !uploadTempDir.mkdirs()) { String message = \"Given uploadTempDir [\" + uploadTempDir + \"] could not be created.\"; throw new IllegalArgumentException(message); } this.mFileItemFactory.setRepository(uploadTempDir); }. \n### Response: Set the temporary directory where uploaded files get stored..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @SuppressWarnings(\"unused\") public static void printError( final String channel, final int streamId, final int sessionId, final String message, final HeaderFlyweight cause) { System.out.println(message); } \n### Response:", "ground_truth": "Generic error handler that just prints message to stdout.\n\n@param channel   for the error\n@param streamId  for the error\n@param sessionId for the error, if source\n@param message   indicating what the error was\n@param cause     of the error", "predict": "Prints the error message associated with the given parameters."}, {"ID": 1818, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def show(self, job_id, return_dict=False): \"\"\" Describe the job. :param job_id: \"\"\" rtn = self.execute_command('SHOW', job_id) if return_dict: grouped = self._grouper(rtn, 2) rtn = dict((a, b) for a, b in grouped) return rtn. \n### Response: Describe the job.\n\n        :param job_id:.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void printRate( final double messagesPerSec, final double bytesPerSec, final long totalMessages, final long totalBytes) { System.out.println(String.format( \"%.02g msgs/sec, %.02g payload bytes/sec, totals %d messages %d MB\", messagesPerSec, bytesPerSec, totalMessages, totalBytes / (1024 * 1024))); } \n### Response:", "ground_truth": "Print the rates to stdout\n\n@param messagesPerSec being reported\n@param bytesPerSec    being reported\n@param totalMessages  being reported\n@param totalBytes     being reported", "predict": "This method prints the rate of messages per second, bytes per second, and total messages and bytes in a message."}, {"ID": 1819, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def clean(self): \"\"\"Clean queue items from a previous session. In case a previous session crashed and there are still some running entries in the queue ('running', 'stopping', 'killing'), we clean those and enqueue them again. \"\"\" for _, item in self.queue.items(): if item['status'] in ['paused', 'running', 'stopping', 'killing']: item['status'] = 'queued' item['start'] = '' item['end'] = ''. \n### Response: Clean queue items from a previous session.\n\n        In case a previous session crashed and there are still some running\n        entries in the queue ('running', 'stopping', 'killing'), we clean those\n        and enqueue them again..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static MappedByteBuffer mapExistingFileReadOnly(final File location) { if (!location.exists()) { final String msg = \"file not found: \" + location.getAbsolutePath(); throw new IllegalStateException(msg); } MappedByteBuffer mappedByteBuffer = null; try (RandomAccessFile file = new RandomAccessFile(location, \"r\"); FileChannel channel = file.getChannel()) { mappedByteBuffer = channel.map(READ_ONLY, 0, channel.size()); } catch (final IOException ex) { LangUtil.rethrowUnchecked(ex); } return mappedByteBuffer; } \n### Response:", "ground_truth": "Map an existing file as a read only buffer.\n\n@param location of file to map.\n@return the mapped file.", "predict": "mappedByteBuffer mapExistingFileReadOnly(File location)\n```java\n    public static MappedByteBuffer mapExistingFileReadOnly(File location)\n        throws IOException\n    {\n        if (!location.exists())\n            throw new IllegalStateException(\"file not found: \" + location.getAbsolutePath());\n        try (RandomAccessFile file = new RandomAccessFile(location, \"r\"); FileChannel channel = file.getChannel())\n        {\n            MappedByteBuffer mappedByteBuffer = null;\n            try (ChannelFuture future = channel.map(READ_ONLY, 0, channel.size()))\n            {\n                mappedByteBuffer = future.get();\n            }\n            catch (IOException ex)\n            {\n                 LangUtil.rethrowUnchecked(ex);\n            }\n            return mappedByteBuffer;\n        }\n    }\n```"}, {"ID": 1820, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public Iterable<DContact> queryByLinkedIn(Object parent, java.lang.String linkedIn) { return queryByField(parent, DContactMapper.Field.LINKEDIN.getFieldName(), linkedIn); }. \n### Response: query-by method for field linkedIn\n@param linkedIn the specified attribute\n@return an Iterable of DContacts for the specified linkedIn.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void close() { final State state = this.state; if (State.CLOSED != state) { if (isReplayActive) { isReplayActive = false; archive.stopReplay(replaySessionId); } if (State.MERGED != state) { subscription.removeDestination(replayDestination); } state(State.CLOSED); } } \n### Response:", "ground_truth": "Close the merge and stop any active replay. Will remove the replay destination from the subscription. Will\nNOT remove the live destination if it has been added.", "predict": "Close method\n@return void\n@param state the state to check\n@see State\n\nThis method is called when the application is closing. It checks the current state of the application and performs the necessary actions to close it. The method first checks if the state is closed or merged. If it is closed, it stops any replays and removes the destination for replays. If it is merged, it removes the destination for replays and sets the state to closed. Finally, it calls the state method to determine the final state of the application."}, {"ID": 1821, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function existence ( filepath ) { var does = grunt.file.exists ( filepath ); if ( !does ) { grunt.log.warn ( filepath + \" not found.\" ); } return does; }. \n### Response: Check file existence.\n@param {String} filepath\n@returns {boolean}.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public int doWork() { int workCount = 0; switch (state) { case AWAIT_INITIAL_RECORDING_POSITION: workCount += awaitInitialRecordingPosition(); break; case AWAIT_REPLAY: workCount += awaitReplay(); break; case AWAIT_CATCH_UP: workCount += awaitCatchUp(); break; case AWAIT_CURRENT_RECORDING_POSITION: workCount += awaitUpdatedRecordingPosition(); break; case AWAIT_STOP_REPLAY: workCount += awaitStopReplay(); break; } return workCount; } \n### Response:", "ground_truth": "Process the operation of the merge. Do not call the processing of fragments on the subscription.\n\n@return indication of work done processing the merge.", "predict": "This method performs work based on the current state of the task. It uses a switch statement to handle different cases and adds the corresponding work to the workCount variable. The method returns the total number of work items completed.\n@param {int} state\n@return {int} the number of work items completed."}, {"ID": 1822, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def validate(self, graph): \"\"\" Validate the graph by checking whether it is a directed acyclic graph. Args: graph (DiGraph): Reference to a DiGraph object from NetworkX. Raises: DirectedAcyclicGraphInvalid: If the graph is not a valid dag. \"\"\" if not nx.is_directed_acyclic_graph(graph): raise DirectedAcyclicGraphInvalid(graph_name=self._name). \n### Response: Validate the graph by checking whether it is a directed acyclic graph.\n\n        Args:\n            graph (DiGraph): Reference to a DiGraph object from NetworkX.\n\n        Raises:\n            DirectedAcyclicGraphInvalid: If the graph is not a valid dag..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public long position() { if (isClosed) { return CLOSED; } final long rawTail = rawTailVolatile(logMetaDataBuffer); final int termOffset = termOffset(rawTail, termBufferLength); return computePosition(termId(rawTail), termOffset, positionBitsToShift, initialTermId); } \n### Response:", "ground_truth": "Get the current position to which the publication has advanced for this stream.\n\n@return the current position to which the publication has advanced for this stream or {@link #CLOSED}.", "predict": "Method-level comment for the `position()` method:\n\n* This method returns the position of a term in the metadata buffer.\n* It first checks if the buffer is closed. If it is, it returns CLOSED.\n* It then extracts the raw tail of the metadata buffer and calculates the term offset by calling the `termOffset()` method with the raw tail and the length of the metadata buffer.\n* It then calls the `computePosition()` method with the term ID of the raw tail, the term offset, the number of bits to shift, and the initial term ID to calculate the position of the term in the metadata buffer.\n\nNote: The `rawTailVolatile()` and `rawTailVolatile(logMetaDataBuffer)` methods are used to make a volatile copy of the raw tail of the metadata buffer so that the method can be called multiple times without affecting the previous results."}, {"ID": 1823, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public O withForwardedFields(String... forwardedFields) { if (this.udfSemantics == null) { // extract semantic properties from function annotations setSemanticProperties(extractSemanticAnnotations(getFunction().getClass())); } if (this.udfSemantics == null || this.analyzedUdfSemantics) { // discard analyzed semantic properties setSemanticProperties(new SingleInputSemanticProperties()); SemanticPropUtil.getSemanticPropsSingleFromString(this.udfSemantics, forwardedFields, null, null, this.getInputType(), this.getResultType()); } else { if (udfWithForwardedFieldsAnnotation(getFunction().getClass())) { // refuse semantic information as it would override the function annotation throw new SemanticProperties.InvalidSemanticAnnotationException(\"Forwarded field information \" + \"has already been added by a function annotation for this operator. \" + \"Cannot overwrite function annotations.\"); } else { SemanticPropUtil.getSemanticPropsSingleFromString(this.udfSemantics, forwardedFields, null, null, this.getInputType(), this.getResultType()); } } @SuppressWarnings(\"unchecked\") O returnType = (O) this; return returnType; }. \n### Response: Adds semantic information about forwarded fields of the user-defined function.\nThe forwarded fields information declares fields which are never modified by the function and\nwhich are forwarded at the same position to the output or unchanged copied to another position in the output.\n\nFields that are forwarded at the same position are specified by their position.\nThe specified position must be valid for the input and output data type and have the same type.\nFor example withForwardedFields(\"f2\") declares that the third field of a Java input tuple is\ncopied to the third field of an output tuple.\n\nFields which are unchanged copied to another position in the output are declared by specifying the\nsource field reference in the input and the target field reference in the output.\n{@code withForwardedFields(\"f0->f2\")} denotes that the first field of the Java input tuple is\nunchanged copied to the third field of the Java output tuple. When using a wildcard (\"*\") ensure that\nthe number of declared fields and their types in input and output type match.\n\nMultiple forwarded fields can be annotated in one ({@code withForwardedFields(\"f2; f3->f0; f4\")})\nor separate Strings ({@code withForwardedFields(\"f2\", \"f3->f0\", \"f4\")}).\nPlease refer to the JavaDoc of {@link org.apache.flink.api.common.functions.Function} or Flink's documentation for\ndetails on field references such as nested fields and wildcard.\n\nIt is not possible to override existing semantic information about forwarded fields which was\nfor example added by a {@link org.apache.flink.api.java.functions.FunctionAnnotation.ForwardedFields} class annotation.\n\nNOTE: Adding semantic information for functions is optional!\nIf used correctly, semantic information can help the Flink optimizer to generate more efficient execution plans.\nHowever, incorrect semantic information can cause the optimizer to generate incorrect execution plans which compute wrong results!\nSo be careful when adding semantic information.\n\n\n@param forwardedFields A list of field forward expressions.\n@return This operator with annotated forwarded field information.\n\n@see org.apache.flink.api.java.functions.FunctionAnnotation\n@see org.apache.flink.api.java.functions.FunctionAnnotation.ForwardedFields.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public long offer(final DirectBufferVector[] vectors, final ReservedValueSupplier reservedValueSupplier) { final int length = DirectBufferVector.validateAndComputeLength(vectors); long newPosition = CLOSED; if (!isClosed) { final long limit = positionLimit.getVolatile(); final ExclusiveTermAppender termAppender = termAppenders[activePartitionIndex]; final long position = termBeginPosition + termOffset; if (position < limit) { final int result; if (length <= maxPayloadLength) { result = termAppender.appendUnfragmentedMessage( termId, termOffset, headerWriter, vectors, length, reservedValueSupplier); } else { checkMaxMessageLength(length); result = termAppender.appendFragmentedMessage( termId, termOffset, headerWriter, vectors, length, maxPayloadLength, reservedValueSupplier); } newPosition = newPosition(result); } else { newPosition = backPressureStatus(position, length); } } return newPosition; } \n### Response:", "ground_truth": "Non-blocking publish by gathering buffer vectors into a message.\n\n@param vectors               which make up the message.\n@param reservedValueSupplier {@link ReservedValueSupplier} for the frame.\n@return The new stream position, otherwise a negative error value of {@link #NOT_CONNECTED},\n{@link #BACK_PRESSURED}, {@link #ADMIN_ACTION}, {@link #CLOSED}, or {@link #MAX_POSITION_EXCEEDED}.", "predict": "Provides a method to offer a sequence of DirectBufferVectors to a Flink Appender.\nThis method validates and computes the length of the vectors, and sets the new position to CLOSED if the input is closed.\nIf the input is not closed, it checks if the position limit is volatile and if the input has a maximum message length.\nIf the position limit is not volatile and the input has a maximum message length, it appends unfragmented or Fragmented messages to the Appender, depending on the maximum message length.\nIf the input has no maximum message length, it checks if the length of the vectors is less than the maximum message length, and appends a Fragmented message if it is.\nIf the length of the vectors is greater than the maximum message length, it sets the new position to the backpressure status of the position, length combination.\n\n@param vectors A sequence of DirectBufferVectors.\n@return The position of the Appender in the sequence of DirectBufferVectors.\n\n@see org.apache.flink.api.common.functions.DirectBufferVector\n@see org.apache.flink.api.common.functions.Appender\n@see org.apache.flink.api.common.functions.Function\n@see org.apache.flink.api.common.functions.FunctionAnnotation\n@see org.apache.flink.api.common.functions.FunctionAnnotation.ForwardedFields."}, {"ID": 1824, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def raw(self, raw): \"\"\"Sets the raw of this RuntimeRawExtension. Raw is the underlying serialization of this object. # noqa: E501 :param raw: The raw of this RuntimeRawExtension. # noqa: E501 :type: str \"\"\" if raw is None: raise ValueError(\"Invalid value for `raw`, must not be `None`\") # noqa: E501 if raw is not None and not re.search(r'^(?:[A-Za-z0-9+\\/]{4})*(?:[A-Za-z0-9+\\/]{2}==|[A-Za-z0-9+\\/]{3}=)?$', raw): # noqa: E501 raise ValueError(r\"Invalid value for `raw`, must be a follow pattern or equal to `/^(?:[A-Za-z0-9+\\/]{4})*(?:[A-Za-z0-9+\\/]{2}==|[A-Za-z0-9+\\/]{3}=)?$/`\") # noqa: E501 self._raw = raw. \n### Response: Sets the raw of this RuntimeRawExtension.\n\n        Raw is the underlying serialization of this object.  # noqa: E501\n\n        :param raw: The raw of this RuntimeRawExtension.  # noqa: E501\n        :type: str.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public long appendPadding(final int length) { checkMaxMessageLength(length); long newPosition = CLOSED; if (!isClosed) { final long limit = positionLimit.getVolatile(); final ExclusiveTermAppender termAppender = termAppenders[activePartitionIndex]; final long position = termBeginPosition + termOffset; if (position < limit) { checkPositiveLength(length); final int result = termAppender.appendPadding(termId, termOffset, headerWriter, length); newPosition = newPosition(result); } else { newPosition = backPressureStatus(position, length); } } return newPosition; } \n### Response:", "ground_truth": "Append a padding record log of a given length to make up the log to a position.\n\n@param length of the range to claim, in bytes..\n@return The new stream position, otherwise a negative error value of {@link #NOT_CONNECTED},\n{@link #BACK_PRESSURED}, {@link #ADMIN_ACTION}, {@link #CLOSED}, or {@link #MAX_POSITION_EXCEEDED}.\n@throws IllegalArgumentException if the length is greater than {@link #maxMessageLength()}.", "predict": "Appends padding to the message.\n\n        Checks if the message is too long and sets the new position to CLOSED.  # noqa: E501\n\n        If the message is not closed, sets the limit and termAppender to check if the position is within the limit.  # noqa: E501\n\n        If the position is within the limit, appends padding to the message using the termAppender.  # noqa: E501\n\n        Returns the new position.  # noqa: E501\n\n        :param length: The length of the message to append padding to.  # noqa: E501\n        :type: int."}, {"ID": 1825, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def _split_cell(cell, module): \"\"\" Split a hybrid %%sql cell into the Python code and the queries. Populates a module with the queries. Args: cell: the contents of the %%sql cell. module: the module that the contents will populate. Returns: The default (last) query for the module. \"\"\" lines = cell.split('\\n') code = None last_def = -1 name = None define_wild_re = re.compile('^DEFINE\\s+.*$', re.IGNORECASE) define_re = re.compile('^DEFINE\\s+QUERY\\s+([A-Z]\\w*)\\s*?(.*)$', re.IGNORECASE) select_re = re.compile('^SELECT\\s*.*$', re.IGNORECASE) standard_sql_re = re.compile('^(CREATE|WITH|INSERT|DELETE|UPDATE)\\s*.*$', re.IGNORECASE) # TODO(gram): a potential issue with this code is if we have leading Python code followed # by a SQL-style comment before we see SELECT/DEFINE. When switching to the tokenizer see # if we can address this. for i, line in enumerate(lines): define_match = define_re.match(line) select_match = select_re.match(line) standard_sql_match = standard_sql_re.match(line) if i: prior_content = ''.join(lines[:i]).strip() if select_match: # Avoid matching if previous token was '(' or if Standard SQL is found # TODO: handle the possibility of comments immediately preceding SELECT select_match = len(prior_content) == 0 or \\ (prior_content[-1] != '(' and not standard_sql_re.match(prior_content)) if standard_sql_match: standard_sql_match = len(prior_content) == 0 or not standard_sql_re.match(prior_content) if define_match or select_match or standard_sql_match: # If this is the first query, get the preceding Python code. if code is None: code = ('\\n'.join(lines[:i])).strip() if len(code): code += '\\n' elif last_def >= 0: # This is not the first query, so gather the previous query text. query = '\\n'.join([line for line in lines[last_def:i] if len(line)]).strip() if select_match and name != datalab.data._utils._SQL_MODULE_MAIN and len(query) == 0: # Avoid DEFINE query name\\nSELECT ... being seen as an empty DEFINE followed by SELECT continue # Save the query statement = datalab.data.SqlStatement(query, module) module.__dict__[name] = statement # And set the 'last' query to be this too module.__dict__[datalab.data._utils._SQL_MODULE_LAST] = statement # Get the query name and strip off our syntactic sugar if appropriate. if define_match: name = define_match.group(1) lines[i] = define_match.group(2) else: name = datalab.data._utils._SQL_MODULE_MAIN # Save the starting line index of the new query last_def = i else: define_wild_match = define_wild_re.match(line) if define_wild_match: raise Exception('Expected \"DEFINE QUERY <name>\"') if last_def >= 0: # We were in a query so save this tail query. query = '\\n'.join([line for line in lines[last_def:] if len(line)]).strip() statement = datalab.data.SqlStatement(query, module) module.__dict__[name] = statement module.__dict__[datalab.data._utils._SQL_MODULE_LAST] = statement if code is None: code = '' module.__dict__[datalab.data._utils._SQL_MODULE_ARGPARSE] = _arguments(code, module) return module.__dict__.get(datalab.data._utils._SQL_MODULE_LAST, None). \n### Response: Split a hybrid %%sql cell into the Python code and the queries.\n\n    Populates a module with the queries.\n\n  Args:\n    cell: the contents of the %%sql cell.\n    module: the module that the contents will populate.\n\n  Returns:\n    The default (last) query for the module..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void close() { lock.lock(); try { if (!isClosed) { isClosed = true; archiveProxy.closeSession(controlSessionId); if (!context.ownsAeronClient()) { CloseHelper.close(controlResponsePoller.subscription()); CloseHelper.close(archiveProxy.publication()); } context.close(); } } finally { lock.unlock(); } } \n### Response:", "ground_truth": "Notify the archive that this control session is closed so it can promptly release resources then close the\nlocal resources associated with the client.", "predict": "Close the connection.\n\nThis method closes the connection to the specified archive proxy and context. It also closes any subscriptions and publications associated with the control response poller and archiveProxy, respectively. Finally, it unlocks the lock used to protect the method."}, {"ID": 1826, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (a *S3Store) uploadPart(ctx context.Context, task *UploadTask, b job, previous *AttachmentInfo, previousParts map[int]s3.Part, multi s3.MultiInt, retCh chan s3.Part) (err error) { defer a.Trace(ctx, func() error { return err }, fmt.Sprintf(\"uploadPart(%d)\", b.index))() // check to see if this part has already been uploaded. // for job `b` to be here, it has already passed local stash verification. if previous != nil { // check s3 previousParts for this block p, ok := previousParts[b.index] if ok && int(p.Size) == len(b.block) && p.ETag == b.etag() { a.Debug(ctx, \"uploadPart: part %d already uploaded to s3\", b.index) // part already uploaded, so put it in the retCh unless the context // has been canceled select { case retCh <- p: case <-ctx.Done(): return ctx.Err() } // nothing else to do return nil } if p.Size > 0 { // only abort if the part size from s3 is > 0. a.Debug(ctx, \"uploadPart: part %d s3 mismatch: size %d != expected %d or etag %s != expected %s\", b.index, p.Size, len(b.block), p.ETag, b.etag()) return ErrAbortOnPartMismatch } // this part doesn't exist on s3, so it needs to be uploaded a.Debug(ctx, \"uploadPart: part %d not uploaded to s3 by previous upload attempt\", b.index) } // stash part info locally before attempting S3 put // doing this before attempting the S3 put is important // for security concerns. if err := a.stash.RecordPart(task.stashKey(), b.index, b.hash); err != nil { a.Debug(ctx, \"uploadPart: StashRecordPart error: %s\", err) } part, putErr := multi.PutPart(ctx, b.index, bytes.NewReader(b.block)) if putErr != nil { return NewErrorWrapper(fmt.Sprintf(\"failed to put part %d\", b.index), putErr) } // put the successfully uploaded part information in the retCh // unless the context has been canceled. select { case retCh <- part: case <-ctx.Done(): a.Debug(ctx, \"uploadPart: upload part %d, context canceled\", b.index) return ctx.Err() } return nil }. \n### Response: // uploadPart handles uploading a job to S3.  The job `b` has already passed local stash verification.\n// If this is a resumed upload, it checks the previous parts reported by S3 and will skip uploading\n// any that already exist..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public String pollForErrorResponse() { lock.lock(); try { ensureOpen(); if (controlResponsePoller.poll() != 0 && controlResponsePoller.isPollComplete()) { if (controlResponsePoller.controlSessionId() == controlSessionId && controlResponsePoller.templateId() == ControlResponseDecoder.TEMPLATE_ID && controlResponsePoller.code() == ControlResponseCode.ERROR) { return controlResponsePoller.errorMessage(); } } return null; } finally { lock.unlock(); } } \n### Response:", "ground_truth": "Poll the response stream once for an error. If another message is present then it will be skipped over\nso only call when not expecting another response.\n\n@return the error String otherwise null if no error is found.", "predict": "This method pollForErrorResponse() is responsible for checking the error response from the control response poller. It locks the lock to ensure that only one thread is accessing the method at a time. It then checks the poll() method and the isPollComplete() method to determine if the poll is complete. If it is, it checks the controlSessionId, templateId, and code methods to determine if the error response is from S3 or another component. If it is from S3, it returns the error message. If it is from another component, it returns null. Finally, it unlocks the lock."}, {"ID": 1827, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public ByteBuffer getBytes() { ByteBuffer bb = ByteBuffer.allocate(HEADER_LENGTH + getTotalbody()); bb.put(magic.getMagic()); bb.put(opcode.getOpcode()); bb.putShort(keylength); bb.put(extralength); bb.put(datatype); bb.putShort(vbucket); bb.putInt(totalbody); bb.putInt(opaque); bb.putLong(cas); if (hasFlags) { int flag = 0; for (int i = 0; i < flagList.size(); i++) { flag |= flagList.get(i).getFlags(); } bb.putInt(flag); } bb.put(name.getBytes()); if (hasBackfill) { bb.putLong(backfilldate); } if (hasVBucketList) { bb.putShort((short) vblist.length); for (int i = 0; i < vblist.length; i++) { bb.putShort(vblist[i]); } } if (hasVBucketCheckpoints) { bb.putShort((short)vBucketCheckpoints.size()); for (Short vBucket : vBucketCheckpoints.keySet()) { bb.putShort(vBucket); bb.putLong(vBucketCheckpoints.get(vBucket)); } } return (ByteBuffer) bb.flip(); }. \n### Response: Encodes the message into binary..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void stopReplay(final long replaySessionId) { lock.lock(); try { ensureOpen(); final long correlationId = aeron.nextCorrelationId(); if (!archiveProxy.stopReplay(replaySessionId, correlationId, controlSessionId)) { throw new ArchiveException(\"failed to send stop replay request\"); } pollForResponse(correlationId); } finally { lock.unlock(); } } \n### Response:", "ground_truth": "Stop a replay session.\n\n@param replaySessionId to stop replay for.", "predict": "stops the replay and waits for a response.."}, {"ID": 1828, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def update_url(self, url=None, regex=None): \"\"\" Accepts a fully-qualified url, or regex. Returns True if successful, False if not successful. \"\"\" if not url and not regex: raise ValueError(\"Neither a url or regex was provided to update_url.\") headers = { 'X-Prerender-Token': self.token, 'Content-Type': 'application/json', } data = { 'prerenderToken': settings.PRERENDER_TOKEN, } if url: data[\"url\"] = url if regex: data[\"regex\"] = regex r = self.session.post(self.RECACHE_URL, headers=headers, data=data) return r.status_code < 500. \n### Response: Accepts a fully-qualified url, or regex.\n        Returns True if successful, False if not successful..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void eventAvailableImage(final Image image) { final Subscription subscription = image.subscription(); System.out.format( \"new image on %s streamId %x sessionId %x from %s%n\", subscription.channel(), subscription.streamId(), image.sessionId(), image.sourceIdentity()); } \n### Response:", "ground_truth": "Print the information for an available image to stdout.\n\n@param image that has been created", "predict": "This method eventAvailableImage() is a public static method in the Image class, which is part of the Spring Boot application. It is used to notify the application that a new image has been available on a particular channel, streamId, sessionId, and sourceIdentity. The method formats the output to the console and prints it out."}, {"ID": 1829, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def get_subj_alt_name(peer_cert): \"\"\" Given an PyOpenSSL certificate, provides all the subject alternative names. \"\"\" # Pass the cert to cryptography, which has much better APIs for this. if hasattr(peer_cert, \"to_cryptography\"): cert = peer_cert.to_cryptography() else: # This is technically using private APIs, but should work across all # relevant versions before PyOpenSSL got a proper API for this. cert = _Certificate(openssl_backend, peer_cert._x509) # We want to find the SAN extension. Ask Cryptography to locate it (it's # faster than looping in Python) try: ext = cert.extensions.get_extension_for_class( x509.SubjectAlternativeName ).value except x509.ExtensionNotFound: # No such extension, return the empty list. return [] except (x509.DuplicateExtension, UnsupportedExtension, x509.UnsupportedGeneralNameType, UnicodeError) as e: # A problem has been found with the quality of the certificate. Assume # no SAN field is present. log.warning( \"A problem was encountered with the certificate that prevented \" \"urllib3 from finding the SubjectAlternativeName field. This can \" \"affect certificate validation. The error was %s\", e, ) return [] # We want to return dNSName and iPAddress fields. We need to cast the IPs # back to strings because the match_hostname function wants them as # strings. # Sadly the DNS names need to be idna encoded and then, on Python 3, UTF-8 # decoded. This is pretty frustrating, but that's what the standard library # does with certificates, and so we need to attempt to do the same. # We also want to skip over names which cannot be idna encoded. names = [ ('DNS', name) for name in map(_dnsname_to_stdlib, ext.get_values_for_type(x509.DNSName)) if name is not None ] names.extend( ('IP Address', str(name)) for name in ext.get_values_for_type(x509.IPAddress) ) return names. \n### Response: Given an PyOpenSSL certificate, provides all the subject alternative names..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void eventUnavailableImage(final Image image) { final Subscription subscription = image.subscription(); System.out.format( \"inactive image on %s streamId %d sessionId %x%n\", subscription.channel(), subscription.streamId(), image.sessionId()); } \n### Response:", "ground_truth": "This handler is called when image is unavailable\n\n@param image that has gone inactive", "predict": "This method is used to inform the user that an inactive image is currently available on the specified subscription channel and stream ID. The method formats a message to be displayed to the user."}, {"ID": 1830, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def _decorate_axes(ax, freq, kwargs): \"\"\"Initialize axes for time-series plotting\"\"\" if not hasattr(ax, '_plot_data'): ax._plot_data = [] ax.freq = freq xaxis = ax.get_xaxis() xaxis.freq = freq if not hasattr(ax, 'legendlabels'): ax.legendlabels = [kwargs.get('label', None)] else: ax.legendlabels.append(kwargs.get('label', None)) ax.view_interval = None ax.date_axis_info = None. \n### Response: Initialize axes for time-series plotting.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static StatusIndicatorReader sendChannelStatus(final CountersReader countersReader, final String channel) { StatusIndicatorReader statusReader = null; final MutableInteger id = new MutableInteger(-1); countersReader.forEach( (counterId, typeId, keyBuffer, label) -> { if (typeId == SendChannelStatus.SEND_CHANNEL_STATUS_TYPE_ID) { if (channel.startsWith(keyBuffer.getStringAscii(ChannelEndpointStatus.CHANNEL_OFFSET))) { id.value = counterId; } } }); if (Aeron.NULL_VALUE != id.value) { statusReader = new UnsafeBufferStatusIndicator(countersReader.valuesBuffer(), id.value); } return statusReader; } \n### Response:", "ground_truth": "Return the read-only status indicator for the given send channel URI.\n\n@param countersReader that holds the status indicator.\n@param channel        for the send channel.\n@return read-only status indicator that can be used to query the status of the send channel or null\n@see ChannelEndpointStatus for status values and indications.", "predict": "This method sends the status of a channel in the CountersReader to the status indicator. It first creates a new MutableInteger variable called `id` and initializes it to -1. It then iterates through the countersReader and checks if the type of the counter is equal to SendChannelStatus.SEND_CHANNEL_STATUS_TYPE_ID. If it is, it checks if the channel starts with the keyBuffer.getStringAscii(ChannelEndpointStatus.CHANNEL_OFFSET). If it is, it sets the `id` variable to the counterId. Finally, it creates a new UnsafeBufferStatusIndicator using the valuesBuffer of the countersReader and sets the `id` variable to the value. It then returns the statusReader object."}, {"ID": 1831, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private function fromArrayToXmlString(array $array) { $string = ''; foreach ($array as $key => $value) { $string .= '<' . $key . '>' . ((is_array($value)) ? $this->fromArrayToXmlString($value) : $value) . '</' . $key . '>'; } return $string; }. \n### Response: Builds xml string from provided array.\n\n@param array $array\n@return string\n@author stev leibelt \n@since 2013-06-03.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static StatusIndicatorReader receiveChannelStatus(final CountersReader countersReader, final String channel) { StatusIndicatorReader statusReader = null; final MutableInteger id = new MutableInteger(-1); countersReader.forEach( (counterId, typeId, keyBuffer, label) -> { if (typeId == ReceiveChannelStatus.RECEIVE_CHANNEL_STATUS_TYPE_ID) { if (channel.startsWith(keyBuffer.getStringAscii(ChannelEndpointStatus.CHANNEL_OFFSET))) { id.value = counterId; } } }); if (Aeron.NULL_VALUE != id.value) { statusReader = new UnsafeBufferStatusIndicator(countersReader.valuesBuffer(), id.value); } return statusReader; } \n### Response:", "ground_truth": "Return the read-only status indicator for the given receive channel URI.\n\n@param countersReader that holds the status indicator.\n@param channel        for the receive channel.\n@return read-only status indicator that can be used to query the status of the receive channel or null.\n@see ChannelEndpointStatus for status values and indications.", "predict": "Receives channel status for the specified channel.\n\n@param CountersReader countersReader\n@param String channel\n@return StatusIndicatorReader statusReader\n@author aeron \n@since 2018-01-01."}, {"ID": 1832, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function data($data) { // Ensure recipients have been set if ($this->_rcpt !== true) { /** * @see Zend_Mail_Protocol_Exception */ // require_once 'Zend/Mail/Protocol/Exception.php'; throw new Zend_Mail_Protocol_Exception('No recipient forward path has been supplied'); } $this->_send('DATA'); $this->_expect(354, 120); // Timeout set for 2 minutes as per RFC 2821 4.5.3.2 foreach (explode(Zend_Mime::LINEEND, $data) as $line) { if (strpos($line, '.') === 0) { // Escape lines prefixed with a '.' $line = '.' . $line; } $this->_send($line); } $this->_send('.'); $this->_expect(250, 600); // Timeout set for 10 minutes as per RFC 2821 4.5.3.2 $this->_data = true; }. \n### Response: Issues DATA command\n\n@param  string $data\n@throws Zend_Mail_Protocol_Exception\n@return void.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void limit(final int limit) { if (limit < 0 || limit >= buffer.capacity()) { throw new IllegalArgumentException( \"limit outside range: capacity=\" + buffer.capacity() + \" limit=\" + limit); } this.limit = limit; } \n### Response:", "ground_truth": "Set this limit for this buffer as the position at which the next append operation will occur.\n\n@param limit to be the new value.", "predict": "limits the buffer size to a specified limit\n\n@param  int $limit\n@return void."}, {"ID": 1833, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static function getActiveTheme() { if (static::$_activeTheme === null) { foreach (static::getThemes() as $index => $theme) { if ($theme['active']) { return static::$_activeTheme = [$index => $theme]; } } return false; } return static::$_activeTheme; }. \n### Response: Gets the active theme.\n\n@return array|false the active theme or false if no any active theme exist.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public BufferBuilder append(final DirectBuffer srcBuffer, final int srcOffset, final int length) { ensureCapacity(length); buffer.putBytes(limit, srcBuffer, srcOffset, length); limit += length; return this; } \n### Response:", "ground_truth": "Append a source buffer to the end of the internal buffer, resizing the internal buffer as required.\n\n@param srcBuffer from which to copy.\n@param srcOffset in the source buffer from which to copy.\n@param length    in bytes to copy from the source buffer.\n@return the builder for fluent API usage.", "predict": "This method appends data to the buffer.\n\n@param DirectBuffer srcBuffer The data to be appended to the buffer.\n@param int srcOffset The starting index of the data to be appended.\n@param int length The length of the data to be appended.\n@return The buffer builder object.\n\nThis method ensures that the buffer is large enough to hold the specified length of data and then appends the data to the buffer using the buffer's putBytes() method. The limit variable is used to track the current position of the buffer and the return value is the buffer builder object itself."}, {"ID": 1834, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @SuppressWarnings(\"unchecked\") public static <T> T create(T target) { if (target instanceof WestCacheCglib) return target; val in = new CglibCacheMethodInterceptor(target); return (T) Cglibs.proxy(target.getClass(), in, WestCacheCglib.class); }. \n### Response: Create a proxied object of target object.\n\n@param target target object.\n@param     target class.\n@return proxied object..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public int poll() { controlSessionId = -1; correlationId = -1; relevantId = -1; templateId = -1; errorMessage = null; pollComplete = false; return subscription.controlledPoll(fragmentAssembler, fragmentLimit); } \n### Response:", "ground_truth": "Poll for control response events.\n\n@return the number of fragments read during the operation. Zero if no events are available.", "predict": "This method performs a controlled poll of the subscription.\n\n@return the poll result.\n\n@param fragmentAssembler a method that returns a sequence of fragment objects.\n@param fragmentLimit the maximum number of fragment objects to return in the poll.\n\nThis method sets various properties of the subscription and returns the poll result.\n\nControlling the poll is done by setting the properties of the subscription using the `subscription.controlledPoll()` method."}, {"ID": 1835, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected function bCrypt($password) { if ($this->isSamePasswordOption()) { $result = $this->gameDataService->hashPassword($password); } else { $bCrypt = new Bcrypt(); $result = $bCrypt->create($password); } return $result; }. \n### Response: We want to crypt a password =)\n\n@param $password\n\n@return string.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static MappedByteBuffer mapLossReport(final String aeronDirectoryName, final int reportFileLength) { return mapNewFile(file(aeronDirectoryName), reportFileLength, false); } \n### Response:", "ground_truth": "Map a new loss report in the Aeron directory for a given length.\n\n@param aeronDirectoryName in which to create the file.\n@param reportFileLength   for the file.\n@return the newly mapped buffer for the file.", "predict": "We want to map a loss report file.\n\n@param aeronDirectoryName\n\n@param reportFileLength\n\n@return MappedByteBuffer."}, {"ID": 1836, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function setBcc($bcc) { if ($bcc instanceof Email) { $bcc = [$bcc]; } foreach ($bcc as $email) { if (!$email instanceof Email) { throw new MailerException('Email must be an instance of \\Webiny\\Component\\Mailer\\Email.'); } $this->addBcc($email); } return $this; }. \n### Response: Specifies the addresses of recipients who the message will be blind-copied to.\nOther recipients will not be aware of these copies.\n\n@param array|Email $bcc\n\n@return $this\n@throws MailerException.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public Map<StreamCompositeKey, List<StreamPosition>> snapshot() { final Map<StreamCompositeKey, List<StreamPosition>> streams = new HashMap<>(); counters.forEach( (counterId, typeId, keyBuffer, label) -> { if ((typeId >= PUBLISHER_LIMIT_TYPE_ID && typeId <= RECEIVER_POS_TYPE_ID) || typeId == SENDER_LIMIT_TYPE_ID || typeId == PER_IMAGE_TYPE_ID || typeId == PUBLISHER_POS_TYPE_ID) { final StreamCompositeKey key = new StreamCompositeKey( keyBuffer.getInt(SESSION_ID_OFFSET), keyBuffer.getInt(STREAM_ID_OFFSET), keyBuffer.getStringAscii(CHANNEL_OFFSET)); final StreamPosition position = new StreamPosition( keyBuffer.getLong(REGISTRATION_ID_OFFSET), counters.getCounterValue(counterId), typeId); streams .computeIfAbsent(key, (ignore) -> new ArrayList<>()) .add(position); } }); return streams; } \n### Response:", "ground_truth": "Take a snapshot of all the counters and group them by streams.\n\n@return a snapshot of all the counters and group them by streams.", "predict": "This method returns a map of StreamCompositeKey to List<StreamPosition>, which represents the state of the counter at each position. The map is created by iterating over the counters and checking if the typeId is one of the specified types. If it is, the key is created with the appropriate values, and the position is added to the list. The method returns the map.\n\n@return Map<StreamCompositeKey, List<StreamPosition>>."}, {"ID": 1837, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (c *Conn) KillUnit(name string, signal int32) { c.sysobj.Call(\"org.freedesktop.systemd1.Manager.KillUnit\", 0, name, \"all\", signal).Store() }. \n### Response: // KillUnit takes the unit name and a UNIX signal number to send.  All of the unit's\n// processes are killed..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static UnsafeBuffer createDefaultHeader(final int sessionId, final int streamId, final int termId) { final UnsafeBuffer buffer = new UnsafeBuffer( BufferUtil.allocateDirectAligned(HEADER_LENGTH, CACHE_LINE_LENGTH)); buffer.putByte(VERSION_FIELD_OFFSET, CURRENT_VERSION); buffer.putByte(FLAGS_FIELD_OFFSET, (byte)BEGIN_AND_END_FLAGS); buffer.putShort(TYPE_FIELD_OFFSET, (short)HDR_TYPE_DATA, LITTLE_ENDIAN); buffer.putInt(SESSION_ID_FIELD_OFFSET, sessionId, LITTLE_ENDIAN); buffer.putInt(STREAM_ID_FIELD_OFFSET, streamId, LITTLE_ENDIAN); buffer.putInt(TERM_ID_FIELD_OFFSET, termId, LITTLE_ENDIAN); buffer.putLong(RESERVED_VALUE_OFFSET, DEFAULT_RESERVE_VALUE); return buffer; } \n### Response:", "ground_truth": "Return an initialised default Data Frame Header.\n\n@param sessionId for the header\n@param streamId  for the header\n@param termId    for the header\n@return byte array containing the header", "predict": "// CreateDefaultHeader creates a default header for a session.  It includes the current version, flags,\n// type, session ID, stream ID, and term ID.  The reserved value is set to the default reserved value."}, {"ID": 1838, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public boolean isControlPressed(int button, int controller) { if (controllerPressed[controller][button]) { controllerPressed[controller][button] = false; return true; } return false; }. \n### Response: Check if a controller button has been pressed since last\ntime\n\n@param controller The index of the controller to check\n@param button The button to check for (note that this includes directional controls first)\n@return True if the button has been pressed since last time.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public CounterMessageFlyweight keyBuffer(final DirectBuffer keyBuffer, final int keyOffset, final int keyLength) { buffer.putInt(KEY_LENGTH_OFFSET, keyLength); if (null != keyBuffer && keyLength > 0) { buffer.putBytes(keyBufferOffset(), keyBuffer, keyOffset, keyLength); } return this; } \n### Response:", "ground_truth": "Fill the key buffer.\n\n@param keyBuffer containing the optional key for the counter.\n@param keyOffset within the keyBuffer at which the key begins.\n@param keyLength of the key in the keyBuffer.\n@return flyweight", "predict": "Create a new key buffer\n\n@param keyBuffer The key buffer to create\n@param keyOffset The offset in the key buffer to start at\n@param keyLength The length of the key in bytes\n@return The new key buffer object."}, {"ID": 1839, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected function createServicesFromArray( array $services, string $path ) : void { if (!isset($services[\"services\"])) { throw new Exception(\"The configuration array is missing the key 'services' in file '$path'.\"); } foreach ($services[\"services\"] as $name => $service) { try { $this->createService($name, $service); } catch (Exception $e) { throw new Exception($e->getMessage() . \" In configuration file '$path'.\"); } } }. \n### Response: Create services from an array containing a list of services.\n\n@param array  $service details to use when creating the service.\n\n@throws Exception when configuration is corrupt.\n\n@return void.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public CounterMessageFlyweight labelBuffer( final DirectBuffer labelBuffer, final int labelOffset, final int labelLength) { buffer.putInt(labelOffset(), labelLength); buffer.putBytes(labelBufferOffset(), labelBuffer, labelOffset, labelLength); return this; } \n### Response:", "ground_truth": "Fill the label buffer.\n\n@param labelBuffer containing the mandatory label for the counter.\n@param labelOffset within the labelBuffer at which the label begins.\n@param labelLength of the label in the labelBuffer.\n@return flyweight", "predict": "This method creates a new CounterMessageFlyweight object by loading the label buffer from the DirectBuffer and updating its contents.\n\n@param DirectBuffer  the label buffer to load the contents from.\n\n@return the CounterMessageFlyweight object.\n\nNote: This method is used to load the label buffer for a specific counter message."}, {"ID": 1840, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def packed_data(self): \"\"\"Pack the data for the SCP packet.\"\"\" # Pack the header scp_header = struct.pack(\"<2H\", self.cmd_rc, self.seq) # Potential loop intentionally unrolled if self.arg1 is not None: scp_header += struct.pack('<I', self.arg1) if self.arg2 is not None: scp_header += struct.pack('<I', self.arg2) if self.arg3 is not None: scp_header += struct.pack('<I', self.arg3) # Return the SCP header and the rest of the data return scp_header + self.data. \n### Response: Pack the data for the SCP packet..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public boolean connect(final String responseChannel, final int responseStreamId, final long correlationId) { connectRequestEncoder .wrapAndApplyHeader(buffer, 0, messageHeaderEncoder) .correlationId(correlationId) .responseStreamId(responseStreamId) .version(AeronArchive.Configuration.SEMANTIC_VERSION) .responseChannel(responseChannel); return offerWithTimeout(connectRequestEncoder.encodedLength(), null); } \n### Response:", "ground_truth": "Connect to an archive on its control interface providing the response stream details.\n\n@param responseChannel  for the control message responses.\n@param responseStreamId for the control message responses.\n@param correlationId    for this request.\n@return true if successfully offered otherwise false.", "predict": "Connect method..\n```\n* Connect to the specified response channel and response stream ID.\n* correlationId is used to identify the request.\n* Version is used to specify the expected protocol version.\n```"}, {"ID": 1841, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void initializePreferenceScreenElevation(final SharedPreferences sharedPreferences) { String key = getString(R.string.preference_screen_elevation_preference_key); String defaultValue = getString(R.string.preference_screen_elevation_preference_default_value); int elevation = Integer.valueOf(sharedPreferences.getString(key, defaultValue)); setCardViewElevation(elevation); }. \n### Response: Initializes the elevation of the preference screen.\n\n@param sharedPreferences\nThe shared preferences, which should be used, as an instance of the type {@link\nSharedPreferences}.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public boolean tryConnect(final String responseChannel, final int responseStreamId, final long correlationId) { connectRequestEncoder .wrapAndApplyHeader(buffer, 0, messageHeaderEncoder) .correlationId(correlationId) .responseStreamId(responseStreamId) .version(AeronArchive.Configuration.SEMANTIC_VERSION) .responseChannel(responseChannel); final int length = MessageHeaderEncoder.ENCODED_LENGTH + connectRequestEncoder.encodedLength(); return publication.offer(buffer, 0, length) > 0; } \n### Response:", "ground_truth": "Try Connect to an archive on its control interface providing the response stream details. Only one attempt will\nbe made to offer the request.\n\n@param responseChannel  for the control message responses.\n@param responseStreamId for the control message responses.\n@param correlationId    for this request.\n@return true if successfully offered otherwise false.", "predict": "Provides a method to try to connect to the specified response channel, response stream ID, and correlation ID.\n\n@param responseChannel\nThe response channel, which should be specified in the request.\n\n@param responseStreamId\nThe response stream ID, which should be specified in the request.\n\n@param correlationId\nThe correlation ID, which should be specified in the request.\n\n@return\nReturns true if the connection was successful, otherwise false.\n\n"}, {"ID": 1842, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (r *ChannelRouter) notifyTopologyChange(topologyDiff *TopologyChange) { r.RLock() numClients := len(r.topologyClients) r.RUnlock() // Do not reacquire the lock twice unnecessarily. if numClients == 0 { return } log.Tracef(\"Sending topology notification to %v clients %v\", numClients, newLogClosure(func() string { return spew.Sdump(topologyDiff) }), ) r.RLock() for _, client := range r.topologyClients { client.wg.Add(1) go func(c *topologyClient) { defer c.wg.Done() select { // In this case we'll try to send the notification // directly to the upstream client consumer. case c.ntfnChan <- topologyDiff: // If the client cancels the notifications, then we'll // exit early. case <-c.exit: // Similarly, if the ChannelRouter itself exists early, // then we'll also exit ourselves. case <-r.quit: } }(client) } r.RUnlock() }. \n### Response: // notifyTopologyChange notifies all registered clients of a new change in\n// graph topology in a non-blocking..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public boolean closeSession(final long controlSessionId) { closeSessionRequestEncoder .wrapAndApplyHeader(buffer, 0, messageHeaderEncoder) .controlSessionId(controlSessionId); return offer(closeSessionRequestEncoder.encodedLength()); } \n### Response:", "ground_truth": "Close this control session with the archive.\n\n@param controlSessionId with the archive.\n@return true if successfully offered otherwise false.", "predict": "// Close a session by sending a request to the client and returning true if the session was successfully closed."}, {"ID": 1843, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def execute(self, program, start=None, stop=None, resolution=None, max_delay=None, persistent=False, immediate=False, disable_all_metric_publishes=None): \"\"\"Execute the given SignalFlow program and stream the output back.\"\"\" params = self._get_params(start=start, stop=stop, resolution=resolution, maxDelay=max_delay, persistent=persistent, immediate=immediate, disableAllMetricPublishes=disable_all_metric_publishes) def exec_fn(since=None): if since: params['start'] = since return self._transport.execute(program, params) c = computation.Computation(exec_fn) self._computations.add(c) return c. \n### Response: Execute the given SignalFlow program and stream the output back..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public boolean startRecording( final String channel, final int streamId, final SourceLocation sourceLocation, final long correlationId, final long controlSessionId) { startRecordingRequestEncoder .wrapAndApplyHeader(buffer, 0, messageHeaderEncoder) .controlSessionId(controlSessionId) .correlationId(correlationId) .streamId(streamId) .sourceLocation(sourceLocation) .channel(channel); return offer(startRecordingRequestEncoder.encodedLength()); } \n### Response:", "ground_truth": "Start recording streams for a given channel and stream id pairing.\n\n@param channel          to be recorded.\n@param streamId         to be recorded.\n@param sourceLocation   of the publication to be recorded.\n@param correlationId    for this request.\n@param controlSessionId for this request.\n@return true if successfully offered otherwise false.", "predict": "Start recording from the specified channel, stream ID, source location, correlation ID, and control session ID. Encode the request and return the length."}, {"ID": 1844, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (agent *ActionAgent) ExecuteFetchAsApp(ctx context.Context, query []byte, maxrows int) (*querypb.QueryResult, error) { // get a connection conn, err := agent.MysqlDaemon.GetAppConnection(ctx) if err != nil { return nil, err } defer conn.Recycle() result, err := conn.ExecuteFetch(string(query), maxrows, true /*wantFields*/) return sqltypes.ResultToProto3(result), err }. \n### Response: // ExecuteFetchAsApp will execute the given query..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public boolean stopRecording( final String channel, final int streamId, final long correlationId, final long controlSessionId) { stopRecordingRequestEncoder .wrapAndApplyHeader(buffer, 0, messageHeaderEncoder) .controlSessionId(controlSessionId) .correlationId(correlationId) .streamId(streamId) .channel(channel); return offer(stopRecordingRequestEncoder.encodedLength()); } \n### Response:", "ground_truth": "Stop an active recording.\n\n@param channel          to be stopped.\n@param streamId         to be stopped.\n@param correlationId    for this request.\n@param controlSessionId for this request.\n@return true if successfully offered otherwise false.", "predict": "// stopRecording is a method that stops recording.."}, {"ID": 1845, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def to_pascal_case(s): \"\"\"Transform underscore separated string to pascal case \"\"\" return re.sub(r'(?!^)_([a-zA-Z])', lambda m: m.group(1).upper(), s.capitalize()). \n### Response: Transform underscore separated string to pascal case.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public boolean replay( final long recordingId, final long position, final long length, final String replayChannel, final int replayStreamId, final long correlationId, final long controlSessionId) { replayRequestEncoder .wrapAndApplyHeader(buffer, 0, messageHeaderEncoder) .controlSessionId(controlSessionId) .correlationId(correlationId) .recordingId(recordingId) .position(position) .length(length) .replayStreamId(replayStreamId) .replayChannel(replayChannel); return offer(replayRequestEncoder.encodedLength()); } \n### Response:", "ground_truth": "Replay a recording from a given position.\n\n@param recordingId      to be replayed.\n@param position         from which the replay should be started.\n@param length           of the stream to be replayed. Use {@link Long#MAX_VALUE} to follow a live stream.\n@param replayChannel    to which the replay should be sent.\n@param replayStreamId   to which the replay should be sent.\n@param correlationId    for this request.\n@param controlSessionId for this request.\n@return true if successfully offered otherwise false.", "predict": "Replay request encoder."}, {"ID": 1846, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function hydrateBorders($country) { $country['borders'] = isset($country['borders']) ? $country['borders'] = countriesCollect($country['borders'])->map(function ($border) { return $this->repository->call('where', ['cca3', $border])->first(); }) : countriesCollect(); return $country; }. \n### Response: Hydrate borders.\n\n@param $country\n@return mixed.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public boolean stopReplay(final long replaySessionId, final long correlationId, final long controlSessionId) { stopReplayRequestEncoder .wrapAndApplyHeader(buffer, 0, messageHeaderEncoder) .controlSessionId(controlSessionId) .correlationId(correlationId) .replaySessionId(replaySessionId); return offer(replayRequestEncoder.encodedLength()); } \n### Response:", "ground_truth": "Stop an existing replay session.\n\n@param replaySessionId  that should be stopped.\n@param correlationId    for this request.\n@param controlSessionId for this request.\n@return true if successfully offered otherwise false.", "predict": "Stop replay.\n\n@param replaySessionId, correlationId, controlSessionId\n@return boolean."}, {"ID": 1847, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function query(string $query, array $params = []): bool { return $this->execute($this->prepare($query, $params)); }. \n### Response: Executes the query and returns TRUE on success or FALSE on failure.\n\n@param  string $query  SQL query\n@param  array  $params Query parameters\n@return bool.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public boolean listRecordings( final long fromRecordingId, final int recordCount, final long correlationId, final long controlSessionId) { listRecordingsRequestEncoder .wrapAndApplyHeader(buffer, 0, messageHeaderEncoder) .controlSessionId(controlSessionId) .correlationId(correlationId) .fromRecordingId(fromRecordingId) .recordCount(recordCount); return offer(listRecordingsRequestEncoder.encodedLength()); } \n### Response:", "ground_truth": "List a range of recording descriptors.\n\n@param fromRecordingId  at which to begin listing.\n@param recordCount      for the number of descriptors to be listed.\n@param correlationId    for this request.\n@param controlSessionId for this request.\n@return true if successfully offered otherwise false.", "predict": "Lists the recording information and returns the length of the encoded request.\n\n@param  long  fromRecordingId  Recording ID\n@param  int  recordCount  Record number\n@param  long  correlationId  Recording correlation ID\n@param  long  controlSessionId  Control session ID\n@return long."}, {"ID": 1848, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def callConfirmed(RepeatIndicator_presence=0, BearerCapability_presence=0, BearerCapability_presence1=0, Cause_presence=0, CallControlCapabilities_presence=0): \"\"\"CALL CONFIRMED Section 9.3.2\"\"\" a = TpPd(pd=0x3) b = MessageType(mesType=0x8) # 00001000 packet = a / b if RepeatIndicator_presence is 1: c = RepeatIndicatorHdr(ieiRI=0xD, eightBitRI=0x0) packet = packet / c if BearerCapability_presence is 1: d = BearerCapabilityHdr(ieiBC=0x04, eightBitBC=0x0) packet = packet / d if BearerCapability_presence1 is 1: e = BearerCapabilityHdr(ieiBC=0x04, eightBitBC=0x0) packet = packet / e if Cause_presence is 1: f = CauseHdr(ieiC=0x08, eightBitC=0x0) packet = packet / f if CallControlCapabilities_presence is 1: g = CallControlCapabilitiesHdr(ieiCCC=0x15, eightBitCCC=0x0) packet = packet / g return packet. \n### Response: CALL CONFIRMED Section 9.3.2.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public boolean listRecordingsForUri( final long fromRecordingId, final int recordCount, final String channelFragment, final int streamId, final long correlationId, final long controlSessionId) { listRecordingsForUriRequestEncoder .wrapAndApplyHeader(buffer, 0, messageHeaderEncoder) .controlSessionId(controlSessionId) .correlationId(correlationId) .fromRecordingId(fromRecordingId) .recordCount(recordCount) .streamId(streamId) .channel(channelFragment); return offer(listRecordingsForUriRequestEncoder.encodedLength()); } \n### Response:", "ground_truth": "List a range of recording descriptors which match a channel URI fragment and stream id.\n\n@param fromRecordingId  at which to begin listing.\n@param recordCount      for the number of descriptors to be listed.\n@param channelFragment  to match recordings on from the original channel URI in the archive descriptor.\n@param streamId         to match recordings on.\n@param correlationId    for this request.\n@param controlSessionId for this request.\n@return true if successfully offered otherwise false.", "predict": "listRecordingsForUri"}, {"ID": 1849, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def _jstype(self, stype, sval): \"\"\"Get JavaScript name for given data type, called by `_build_schema`. \"\"\" if stype == self.IS_LIST: return \"array\" if stype == self.IS_DICT: return \"object\" if isinstance(sval, Scalar): return sval.jstype # it is a Schema, so return type of contents v = sval._schema return self._jstype(self._whatis(v), v). \n### Response: Get JavaScript name for given data type, called by `_build_schema`..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public boolean listRecording(final long recordingId, final long correlationId, final long controlSessionId) { listRecordingRequestEncoder .wrapAndApplyHeader(buffer, 0, messageHeaderEncoder) .controlSessionId(controlSessionId) .correlationId(correlationId) .recordingId(recordingId); return offer(listRecordingRequestEncoder.encodedLength()); } \n### Response:", "ground_truth": "List a recording descriptor for a given recording id.\n\n@param recordingId      at which to begin listing.\n@param correlationId    for this request.\n@param controlSessionId for this request.\n@return true if successfully offered otherwise false.", "predict": "List recording method.."}, {"ID": 1850, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (p *packetQueue) AddPkt(pkt *htlcPacket) { // First, we'll lock the condition, and add the message to the end of // the message queue, and increment the internal atomic for tracking // the queue's length. p.queueCond.L.Lock() p.queue = append(p.queue, pkt) atomic.AddInt32(&p.queueLen, 1) atomic.AddInt64(&p.totalHtlcAmt, int64(pkt.amount)) p.queueCond.L.Unlock() // With the message added, we signal to the msgConsumer that there are // additional messages to consume. p.queueCond.Signal() }. \n### Response: // AddPkt adds the referenced packet to the overflow queue, preserving ordering\n// of the existing items..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public boolean extendRecording( final String channel, final int streamId, final SourceLocation sourceLocation, final long recordingId, final long correlationId, final long controlSessionId) { extendRecordingRequestEncoder .wrapAndApplyHeader(buffer, 0, messageHeaderEncoder) .controlSessionId(controlSessionId) .correlationId(correlationId) .recordingId(recordingId) .streamId(streamId) .sourceLocation(sourceLocation) .channel(channel); return offer(extendRecordingRequestEncoder.encodedLength()); } \n### Response:", "ground_truth": "Extend an existing, non-active, recorded stream for a the same channel and stream id.\n\nThe channel must be configured for the initial position from which it will be extended. This can be done\nwith {@link ChannelUriStringBuilder#initialPosition(long, int, int)}. The details required to initialise can\nbe found by calling {@link #listRecording(long, long, long)}.\n\n@param channel          to be recorded.\n@param streamId         to be recorded.\n@param sourceLocation   of the publication to be recorded.\n@param recordingId      to be extended.\n@param correlationId    for this request.\n@param controlSessionId for this request.\n@return true if successfully offered otherwise false.", "predict": "// extendRecording extends the recording by the specified parameters,\n// and returns true if the extension was successful, false otherwise.\n// This method is used to extend the recording by adding new packets to the queue.\n\n// This method uses the message header encoder to wrap and apply the specified header,\n// and then adds the packet to the recording queue. It also sets the control session ID,\n// correlation ID, recording ID, stream ID, source location, and channel.\n\n// The method returns the length of the extended recording request, which is the encoded length of the packet.\n// If the extension was successful, this method returns true; otherwise, it returns false.\n```"}, {"ID": 1851, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def begin(self): \"\"\" At the start of the run, we want to record the test execution information in the database. \"\"\" exec_payload = ExecutionQueryPayload() exec_payload.execution_start_time = int(time.time() * 1000) self.execution_start_time = exec_payload.execution_start_time exec_payload.guid = self.execution_guid exec_payload.username = getpass.getuser() self.testcase_manager.insert_execution_data(exec_payload). \n### Response: At the start of the run, we want to record the test\n            execution information in the database..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public boolean getRecordingPosition(final long recordingId, final long correlationId, final long controlSessionId) { recordingPositionRequestEncoder .wrapAndApplyHeader(buffer, 0, messageHeaderEncoder) .controlSessionId(controlSessionId) .correlationId(correlationId) .recordingId(recordingId); return offer(recordingPositionRequestEncoder.encodedLength()); } \n### Response:", "ground_truth": "Get the recorded position of an active recording.\n\n@param recordingId      of the active recording that the position is being requested for.\n@param correlationId    for this request.\n@param controlSessionId for this request.\n@return true if successfully offered otherwise false.", "predict": "Get recording position.\n\n"}, {"ID": 1852, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected void recoverRegistryData() { for (ProviderConfig providerConfig : providerUrls.keySet()) { registerProviderUrls(providerConfig); } for (ConsumerConfig consumerConfig : consumerUrls.keySet()) { subscribeConsumerUrls(consumerConfig); } }. \n### Response: recover data when connect with zk again..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public boolean getStopPosition(final long recordingId, final long correlationId, final long controlSessionId) { stopPositionRequestEncoder .wrapAndApplyHeader(buffer, 0, messageHeaderEncoder) .controlSessionId(controlSessionId) .correlationId(correlationId) .recordingId(recordingId); return offer(stopPositionRequestEncoder.encodedLength()); } \n### Response:", "ground_truth": "Get the stop position of a recording.\n\n@param recordingId      of the recording that the stop position is being requested for.\n@param correlationId    for this request.\n@param controlSessionId for this request.\n@return true if successfully offered otherwise false.", "predict": "This method retrieves the stop position for a recording by sending a request to the ZooKeeper to retrieve the position of the recording. It does this by encoding the request using the `messageHeaderEncoder` and passing it to the `offer` method of the `StopPositionRequest` object. The method returns `true` if the stop position was successfully retrieved, and `false` otherwise."}, {"ID": 1853, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected LabeledTextAreaPanel<String, DeregistrationModelBean> newMotivation(final String id, final IModel<DeregistrationModelBean> model) { final IModel<String> labelModel = ResourceModelFactory.newResourceModel( ResourceBundleKey.builder().key(\"sem.main.feedback.deregistration.user.label\") .defaultValue(\"Please confirm the deregistration\") .parameters(ListExtensions.toObjectArray(getDomainName())).build(), this); final IModel<String> placeholderModel = ResourceModelFactory.newResourceModel( \"global.enter.your.deregistration.motivation.label\", this, \"Enter here your deregistration motivation.\"); final LabeledTextAreaPanel<String, DeregistrationModelBean> description = new LabeledTextAreaPanel<String, DeregistrationModelBean>( id, model, labelModel) { /** The Constant serialVersionUID. */ private static final long serialVersionUID = 1L; /** * {@inheritDoc} */ @Override protected TextArea<String> newTextArea(final String id, final IModel<DeregistrationModelBean> model) { final TextArea<String> textArea = super.newTextArea(id, model); if (placeholderModel != null) { textArea.add(new AttributeAppender(\"placeholder\", placeholderModel)); } return textArea; } }; return description; }. \n### Response: Factory method for creating the LabeledTextAreaPanel. This method is invoked in the\nconstructor from the derived classes and can be overridden so users can provide their own\nversion of a Form.\n\n@param id\nthe id\n@param model\nthe model\n@return the form.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public boolean listRecordingSubscriptions( final int pseudoIndex, final int subscriptionCount, final String channelFragment, final int streamId, final boolean applyStreamId, final long correlationId, final long controlSessionId) { listRecordingSubscriptionsRequestEncoder .wrapAndApplyHeader(buffer, 0, messageHeaderEncoder) .controlSessionId(controlSessionId) .correlationId(correlationId) .pseudoIndex(pseudoIndex) .subscriptionCount(subscriptionCount) .applyStreamId(applyStreamId ? BooleanType.TRUE : BooleanType.FALSE) .streamId(streamId) .channel(channelFragment); return offer(listRecordingSubscriptionsRequestEncoder.encodedLength()); } \n### Response:", "ground_truth": "List registered subscriptions in the archive which have been used to record streams.\n\n@param pseudoIndex       in the list of active recording subscriptions.\n@param subscriptionCount for the number of descriptors to be listed.\n@param channelFragment   for a contains match on the stripped channel used with the registered subscription.\n@param streamId          for the subscription.\n@param applyStreamId     when matching.\n@param correlationId     for this request.\n@param controlSessionId  for this request.\n@return true if successfully offered otherwise false.", "predict": "Method for listing recording subscriptions.\n\n@param pseudoIndex\nthe pseudo index\n@param subscriptionCount\nthe subscription count\n@param channelFragment\nthe channel fragment\n@param streamId\nthe streamId\n@param applyStreamId\nthe apply streamId\n@param correlationId\nthe correlationId\n@param controlSessionId\nthe controlSessionId\n@return the boolean value indicating whether to continue or stop the offer.\n\nThis method wraps and applies the necessary headers to a list recording subscriptions request and returns the offer with the encoded length. It also sets the appropriate values for the control session ID, correlation ID, pseudo index, subscription count, apply streamId, streamId, and channel fragment."}, {"ID": 1854, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function projectName() { $name = $this->name(); if (null === $name) { return null; } $atoms = explode(static::NAME_SEPARATOR, $name); return array_pop($atoms); }. \n### Response: Get the project name, without the vendor prefix.\n\n@return string|null The project name..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public boolean matchesTag(final UdpChannel udpChannel) { if (!hasTag || !udpChannel.hasTag() || tag != udpChannel.tag()) { return false; } if (udpChannel.remoteData().getAddress().isAnyLocalAddress() && udpChannel.remoteData().getPort() == 0 && udpChannel.localData().getAddress().isAnyLocalAddress() && udpChannel.localData().getPort() == 0) { return true; } throw new IllegalArgumentException(\"matching tag has set endpoint or control address\"); } \n### Response:", "ground_truth": "Does this channel have a tag match to another channel including endpoints.\n\n@param udpChannel to match against.\n@return true if there is a match otherwise false.", "predict": "matchesTag(final UdpChannel udpChannel)\n```java\npublic boolean matchesTag(final UdpChannel udpChannel)\n```\nThis method takes in a UdpChannel object and returns a boolean indicating whether the tag matches.\n\n* If the UdpChannel object has no tag, or if the UdpChannel object has no tag and the tag is not the same as the current tag, the method will return false.\n* If the remoteData and localData properties of the UdpChannel object match any local address and port, and the endpoint and control address of the UdpChannel object match any local address and port, the method will return true.\n* If an exception is thrown, the method will return false.\n\n@return boolean The tag matches.."}, {"ID": 1855, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void registerAspectComponents() throws Exception { Debug.logVerbose(\"[JdonFramework] note: registe aspect components \", module); try { InterceptorsChain existedInterceptorsChain = (InterceptorsChain) containerWrapper.lookup(ComponentKeys.INTERCEPTOR_CHAIN); Iterator iter = aspectConfigComponents.iterator(); Debug.logVerbose(\"[JdonFramework] 3 aspectConfigComponents size:\" + aspectConfigComponents.size(), module); while (iter.hasNext()) { String name = (String) iter.next(); AspectComponentsMetaDef componentMetaDef = (AspectComponentsMetaDef) aspectConfigComponents.getComponentMetaDef(name); // registe into container xmlcontainerRegistry.registerAspectComponentMetaDef(componentMetaDef); // got the interceptor instance; // add interceptor instance into InterceptorsChain object existedInterceptorsChain.addInterceptor(componentMetaDef.getPointcut(), name); } } catch (Exception ex) { Debug.logError(\"[JdonFramework] registerAspectComponents error:\" + ex, module); throw new Exception(ex); } }. \n### Response: register all apsect components in aspect.xml.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static InetSocketAddress destinationAddress(final ChannelUri uri) { try { validateConfiguration(uri); return getEndpointAddress(uri); } catch (final Exception ex) { throw new InvalidChannelException(ErrorCode.INVALID_CHANNEL, ex); } } \n### Response:", "ground_truth": "Get the endpoint address from the URI.\n\n@param uri to check\n@return endpoint address for URI", "predict": "validateConfiguration(uri); return getEndpointAddress(uri);"}, {"ID": 1856, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function generate($key, Context $context = null) { return md5($key.$this->serializer->serialize($context)); }. \n### Response: Generate storage key for a given key and context.\n\n@param string $key\n@param \\Krucas\\Settings\\Context $context\n@return string.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public String description() { final StringBuilder builder = new StringBuilder(\"UdpChannel - \"); if (null != localInterface) { builder .append(\"interface: \") .append(localInterface.getDisplayName()) .append(\", \"); } builder .append(\"localData: \").append(localData) .append(\", remoteData: \").append(remoteData) .append(\", ttl: \").append(multicastTtl); return builder.toString(); } \n### Response:", "ground_truth": "Used for debugging to get a human readable description of the channel.\n\n@return a human readable description of the channel.", "predict": "Description of UdpChannel class.\n\n@class UdpChannel\n@constructor\npublic UdpChannel(\n@param string $localInterface\n@param string $displayname\n@param string $localData\n@param string $remoteData\n@param string $ttl\n@param string $multicastTtl\n) {}\n\nThis method returns a description of the UdpChannel object. It first creates a StringBuilder to hold the description, and then checks if the local interface is not null. If it is, it appends the interface name to theStringBuilder. If not, it appends the local data, remote data, and ttl to theStringBuilder. Finally, it returns the resulting string."}, {"ID": 1857, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function getClasses() { $classes = $this->getAttribute(\"class\"); return (strlen($classes) > 0) ? trim($this->removeMultipleSpaces($classes)) : \"\"; }. \n### Response: Returns a space separated string of classes belonging to the tag.\n@return  string\n@throws  HTMLTagException.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: void addDestination(final int transportIndex, final ReceiveDestinationUdpTransport transport) { imageConnections = ArrayUtil.ensureCapacity(imageConnections, transportIndex + 1); if (transport.isMulticast()) { imageConnections[transportIndex] = new ImageConnection( cachedNanoClock.nanoTime(), transport.udpChannel().remoteControl()); } else if (transport.hasExplicitControl()) { imageConnections[transportIndex] = new ImageConnection( cachedNanoClock.nanoTime(), transport.explicitControlAddress()); } } \n### Response:", "ground_truth": "Add a destination to this image so it can merge streams.\n\n@param transportIndex from which packets will arrive.\n@param transport      from which packets will arrive.", "predict": "Adds a destination to the list of image connections.\n@param  int  transportIndex  Index of the transport to add the destination to.\n@param  ReceiveDestinationUdpTransport  transport  The udp transport for the destination.\n@return  void\n@throws  ImageConnectionException."}, {"ID": 1858, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def elasticsearch(delete, index_name): \"\"\"Setup Elasticsearch namespace indexes This will by default only create the indexes and run the namespace index mapping if the indexes don't exist. The --delete option will force removal of the index if it exists. The index_name should be aliased to the index 'terms' when it's ready\"\"\" if delete: bel.db.elasticsearch.get_client(delete=True) else: bel.db.elasticsearch.get_client(). \n### Response: Setup Elasticsearch namespace indexes\n\n    This will by default only create the indexes and run the namespace index mapping\n    if the indexes don't exist.  The --delete option will force removal of the\n    index if it exists.\n\n    The index_name should be aliased to the index 'terms' when it's ready.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: int insertPacket( final int termId, final int termOffset, final UnsafeBuffer buffer, final int length, final int transportIndex, final InetSocketAddress srcAddress) { final boolean isHeartbeat = DataHeaderFlyweight.isHeartbeat(buffer, length); final long packetPosition = computePosition(termId, termOffset, positionBitsToShift, initialTermId); final long proposedPosition = isHeartbeat ? packetPosition : packetPosition + length; if (!isFlowControlUnderRun(packetPosition) && !isFlowControlOverRun(proposedPosition)) { trackConnection(transportIndex, srcAddress, lastPacketTimestampNs); if (isHeartbeat) { if (DataHeaderFlyweight.isEndOfStream(buffer) && !isEndOfStream && allEos(transportIndex)) { LogBufferDescriptor.endOfStreamPosition(rawLog.metaData(), proposedPosition); isEndOfStream = true; } heartbeatsReceived.incrementOrdered(); } else { final UnsafeBuffer termBuffer = termBuffers[indexByPosition(packetPosition, positionBitsToShift)]; TermRebuilder.insert(termBuffer, termOffset, buffer, length); } lastPacketTimestampNs = cachedNanoClock.nanoTime(); hwmPosition.proposeMaxOrdered(proposedPosition); } return length; } \n### Response:", "ground_truth": "Insert frame into term buffer.\n\n@param termId         for the data packet to insert into the appropriate term.\n@param termOffset     for the start of the packet in the term.\n@param buffer         for the data packet to insert into the appropriate term.\n@param length         of the data packet\n@param transportIndex which the packet came from.\n@param srcAddress     which the packet came from.\n@return number of bytes applied as a result of this insertion.", "predict": "Insert packet method\n\nThis method inserts a packet into the Elasticsearch index specified by the transportIndex and srcAddress parameters. It first checks if a heartbeat packet is being sent, and if so, it updates the last packet timestamp and increments the heartbeatsReceived counter.\n\nIt then determines the position of the packet by computing the position bits to shift and the initial termId. If the position is not under flow control and the index is empty, it is the position of the first packet. If the position is under flow control and the index is not empty, it is the position of the last packet.\n\nIf the proposed position is greater than the maximum ordered position, it proposes the maximum ordered position to the hwmPosition object. Finally, the length of the packet is returned.\n\nNote: This method is used to insert a packet into the Elasticsearch index, it's not a real usage of Elasticsearch.\n\nNote 2: This method is used to insert a packet into the Elasticsearch index, it's not a real usage of Elasticsearch."}, {"ID": 1859, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def shapesides(inputtocheck, inputtype='shape'): \"\"\" Get the sides of a shape. inputtocheck: The amount of sides or the shape to be checked, depending on the value of inputtype. inputtype: The type of input provided. Can be: 'shape', 'sides'. \"\"\" # Define the array of sides to a shape shapestosides = { 'triangle': 3, 'square': 4, 'pentagon': 5, 'hexagon': 6, 'heptagon': 7, 'octagon': 8, 'nonagon': 9, 'decagon': 10, 'hendecagon': 11, 'dodecagon': 12, 'triskaidecagon': 13, 'tetrakaidecagon': 14, 'pentadecagon': 15, 'hexakaidecagon': 16, 'heptadecagon': 17, 'octakaidecagon': 18, 'enneadecagon': 19, 'icosagon': 20, 'triacontagon': 30, 'tetracontagon': 40, 'pentacontagon': 50, 'hexacontagon': 60, 'heptacontagon': 70, 'octacontagon': 80, 'enneacontagon': 90, 'hectagon': 100, 'chiliagon': 1000, 'myriagon': 10000, 'megagon': 1000000, 'googolgon': pow(10, 100), 'ngon': 'n' } # Define an array with the flipped version of the sides to a shape sidestoshapes = dictflip(shapestosides) # If the lowercase version of the input type is 'shape' if inputtype.lower() == 'shape': # If the lowercase version of the shape is in the array if inputtocheck.lower() in shapestosides: # Return the corresponding sides return shapestosides[inputtocheck.lower()] # Return 'n' return shapestosides['n'] if inputtype.lower() == 'sides': # If the lowercase version of the shape is in the array if inputtocheck.lower() in sidestoshapes: # Return the corresponding sides return sidestoshapes[inputtocheck.lower()] # Return 'ngon' return sidestoshapes['ngon'] # Raise a warning raise ValueError(\"Invalid input type.\"). \n### Response: Get the sides of a shape.\n\n    inputtocheck:\n    The amount of sides or the shape to be checked,\n    depending on the value of inputtype.\n\n    inputtype:\n    The type of input provided.\n    Can be: 'shape', 'sides'..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static AtomicCounter findControlToggle(final CountersReader counters) { final AtomicBuffer buffer = counters.metaDataBuffer(); for (int i = 0, size = counters.maxCounterId(); i < size; i++) { final int recordOffset = CountersReader.metaDataOffset(i); if (counters.getCounterState(i) == RECORD_ALLOCATED && buffer.getInt(recordOffset + TYPE_ID_OFFSET) == CONTROL_TOGGLE_TYPE_ID) { return new AtomicCounter(counters.valuesBuffer(), i, null); } } return null; } \n### Response:", "ground_truth": "Find the control toggle counter or return null if not found.\n\n@param counters to search for the control toggle.\n@return the control toggle counter or return null if not found.", "predict": "Find the control toggle for a given CountersReader.\n\n    CountersReader counters: The CountersReader object used to read the data.\n\n    metaDataBuffer: The buffer used to store the meta-data for the counter.\n\n    maxCounterId: The maximum counter ID that has been read so far.\n\n    recordOffset: The offset in the buffer where the record for the current counter is stored.\n\n    TYPE_ID_OFFSET: The offset where the type ID of the control toggle is stored.\n\n    controlToggleTypeID: The type ID of the control toggle to find.\n\n    return:\n    The AtomicCounter object representing the control toggle, or null if not found."}, {"ID": 1860, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (d *driver) CloudBackupSchedDelete(input *api.CloudBackupSchedDeleteRequest) error { d.kv.Delete(schedPrefix + \"/\" + input.UUID) return nil }. \n### Response: // CloudBackupSchedDelete delete a volume backup schedule to cloud.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public String put(final String key, final String value) { return params.put(key, value); } \n### Response:", "ground_truth": "Put a key and value pair in the map of params.\n\n@param key   of the param to be put.\n@param value of the param to be put.\n@return the existing value otherwise null.", "predict": "// Put a new value for the specified key."}, {"ID": 1861, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def check_length(value, length): \"\"\" Checks length of value @param value: value to check @type value: C{str} @param length: length checking for @type length: C{int} @return: None when check successful @raise ValueError: check failed \"\"\" _length = len(value) if _length != length: raise ValueError(\"length must be %d, not %d\" % \\ (length, _length)). \n### Response: Checks length of value\n\n    @param value: value to check\n    @type value: C{str}\n\n    @param length: length checking for\n    @type length: C{int}\n\n    @return: None when check successful\n\n    @raise ValueError: check failed.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public String channelTag() { return (null != tags && tags.length > CHANNEL_TAG_INDEX) ? tags[CHANNEL_TAG_INDEX] : null; } \n### Response:", "ground_truth": "Get the channel tag, if it exists, that refers to an another channel.\n\n@return channel tag if it exists or null if not in this URI.\n@see CommonContext#TAGS_PARAM_NAME\n@see CommonContext#TAG_PREFIX", "predict": "This method returns the channel tag of the given list of tags.\n\n    @return: The channel tag of the given list of tags\n\n    @param tags: The list of tags to check for the channel tag\n    @type tags: C{List<C{str>>}\n    @param CHANNEL_TAG_INDEX: The index of the channel tag to return\n    @type CHANNEL_TAG_INDEX: C{int}\n\n    @param null: A boolean indicating whether to return the null value or not\n    @type null: C{boolean}\n\n    @raise ValueError: If the list of tags is not empty or the index of the channel tag is out of range."}, {"ID": 1862, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function(opts) { if (!opts) opts = {}; this.port_offset = opts.port_offset ? parseInt(opts.port_offset) : 10001; this.task_list = {}; this.can_accept_queries = false; this.can_local_compute = true; this.app_folder = opts.app_folder; var pm2_opts = {}; if (process.env.NODE_ENV == 'test') { pm2_opts = { independent : true, daemon_mode : true }; } this.pm2 = new PM2.custom(pm2_opts); // Defaults values this.task_meta = { instances : 0, json_conf : null, task_folder : 'tasks', env : {} }; if (opts.task_meta) this.task_meta = opts.task_meta; this.controller = Controller; }. \n### Response: The Task Manager manage Tasks and PM2\n@constructor\n@param {Object}  opts options\n@param {Integer} opts.port_offset Port to start on\n@param {String}  opts.app_folder application to cwd to.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public String entityTag() { return (null != tags && tags.length > ENTITY_TAG_INDEX) ? tags[ENTITY_TAG_INDEX] : null; } \n### Response:", "ground_truth": "Get the entity tag, if it exists, that refers to an entity such as subscription or publication.\n\n@return entity tag if it exists or null if not in this URI.\n@see CommonContext#TAGS_PARAM_NAME\n@see CommonContext#TAG_PREFIX", "predict": "The entity tag method returns the entity tag for a given tag.\n@return The entity tag for a given tag.\n\nNote: This method is used in the Elasticsearch API to retrieve the entity tag for a given document. The tag is a unique identifier for the document and is used to filter and sort the documents in Elasticsearch."}, {"ID": 1863, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def get_mem(device_handle): \"\"\"Get GPU device memory consumption in percent.\"\"\" try: memory_info = pynvml.nvmlDeviceGetMemoryInfo(device_handle) return memory_info.used * 100.0 / memory_info.total except pynvml.NVMLError: return None. \n### Response: Get GPU device memory consumption in percent..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String addSessionId(final String channel, final int sessionId) { final ChannelUri channelUri = ChannelUri.parse(channel); channelUri.put(CommonContext.SESSION_ID_PARAM_NAME, Integer.toString(sessionId)); return channelUri.toString(); } \n### Response:", "ground_truth": "Add a sessionId to a given channel.\n\n@param channel   to add sessionId to.\n@param sessionId to add to channel.\n@return new string that represents channel with sessionId added.", "predict": "Add session ID.."}, {"ID": 1864, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def if_match(self): \"\"\" Get the If-Match option of a request. :return: the If-Match values or [] if not specified by the request :rtype : list \"\"\" value = [] for option in self.options: if option.number == defines.OptionRegistry.IF_MATCH.number: value.append(option.value) return value. \n### Response: Get the If-Match option of a request.\n\n        :return: the If-Match values or [] if not specified by the request\n        :rtype : list.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static long getTag(final String paramValue) { return isTagged(paramValue) ? AsciiEncoding.parseLongAscii(paramValue, 4, paramValue.length() - 4) : INVALID_TAG; } \n### Response:", "ground_truth": "Get the value of the tag from a given parameter value.\n\n@param paramValue to extract the tag value from.\n@return the value of the tag or {@link #INVALID_TAG} if not tagged.\n@see CommonContext#TAGS_PARAM_NAME\n@see CommonContext#TAG_PREFIX", "predict": "```\n        :paramValue :String\n        :return: long\n        :rtype: long\n```"}, {"ID": 1865, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function create($key, $data) { $data = Values::of(array('Key' => $key, 'Data' => Serialize::jsonObject($data), )); $payload = $this->version->create( 'POST', $this->uri, array(), $data ); return new SyncMapItemInstance( $this->version, $payload, $this->solution['serviceSid'], $this->solution['mapSid'] ); }. \n### Response: Create a new SyncMapItemInstance\n\n@param string $key The key\n@param array $data The data\n@return SyncMapItemInstance Newly created SyncMapItemInstance\n@throws TwilioException When an HTTP error occurs..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public int appendPadding( final int termId, final int termOffset, final HeaderWriter header, final int length) { final int frameLength = length + HEADER_LENGTH; final int alignedLength = align(frameLength, FRAME_ALIGNMENT); final UnsafeBuffer termBuffer = this.termBuffer; final int termLength = termBuffer.capacity(); int resultingOffset = termOffset + alignedLength; putRawTailOrdered(termId, resultingOffset); if (resultingOffset > termLength) { resultingOffset = handleEndOfLogCondition(termBuffer, termOffset, header, termLength, termId); } else { header.write(termBuffer, termOffset, frameLength, termId); frameType(termBuffer, termOffset, PADDING_FRAME_TYPE); frameLengthOrdered(termBuffer, termOffset, frameLength); } return resultingOffset; } \n### Response:", "ground_truth": "Pad a length of the term buffer with a padding record.\n\n@param termId     for the current term.\n@param termOffset in the term at which to append.\n@param header     for writing the default header.\n@param length     of the padding to be written.\n@return the resulting offset of the term after success otherwise {@link #FAILED}.", "predict": "Append padding to the frame.\n\n@param int termId The term ID\n@param int termOffset The term offset\n@param HeaderWriter header The HeaderWriter object\n@param int length The length of the frame\n@return int The number of bytes added to the frame.\n@throws InterruptedException When the thread is interrupted.."}, {"ID": 1866, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (in *TLS) DeepCopy() *TLS { if in == nil { return nil } out := new(TLS) in.DeepCopyInto(out) return out }. \n### Response: // DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TLS..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: final int updatePublisherLimit() { int workCount = 0; final long senderPosition = this.senderPosition.getVolatile(); if (hasReceivers || (spiesSimulateConnection && spyPositions.length > 0)) { long minConsumerPosition = senderPosition; for (final ReadablePosition spyPosition : spyPositions) { minConsumerPosition = Math.min(minConsumerPosition, spyPosition.getVolatile()); } final long proposedPublisherLimit = minConsumerPosition + termWindowLength; if (publisherLimit.proposeMaxOrdered(proposedPublisherLimit)) { cleanBuffer(proposedPublisherLimit); workCount = 1; } } else if (publisherLimit.get() > senderPosition) { publisherLimit.setOrdered(senderPosition); } return workCount; } \n### Response:", "ground_truth": "Update the publishers limit for flow control as part of the conductor duty cycle.\n\n@return 1 if the limit has been updated otherwise 0.", "predict": "// This method updates the limit for the publisher. It first gets the current sender position and any existing receiver positions. If there are any, it calculates the minimum consumer position. Then, it iterates through all the spyPositions and calculates the proposed limit. If the proposed limit is greater than the current sender position, it updates the workCount and cleans the buffer. Finally, it returns the workCount."}, {"ID": 1867, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def draw(self, milliseconds, surface): \"\"\"Render each of the collision objects onto the specified surface.\"\"\" if self.is_visible: global collidable_objects for obj in collidable_objects: if obj.is_visible: obj.draw(milliseconds, surface) super(CollisionManager, self).draw(milliseconds, surface). \n### Response: Render each of the collision objects onto the specified surface..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static UnsafeBufferPosition allocate( final MutableDirectBuffer tempBuffer, final String name, final int typeId, final CountersManager countersManager, final long registrationId, final int sessionId, final int streamId, final String channel) { return new UnsafeBufferPosition( (UnsafeBuffer)countersManager.valuesBuffer(), allocateCounterId(tempBuffer, name, typeId, countersManager, registrationId, sessionId, streamId, channel), countersManager); } \n### Response:", "ground_truth": "Allocate a counter for tracking a position on a stream of messages.\n\n@param tempBuffer      to be used for labels and key.\n@param name            of the counter for the label.\n@param typeId          of the counter for classification.\n@param countersManager from which to allocated the underlying storage.\n@param registrationId  to be associated with the counter.\n@param sessionId       for the stream of messages.\n@param streamId        for the stream of messages.\n@param channel         for the stream of messages.\n@return a new {@link UnsafeBufferPosition} for tracking the stream.", "predict": "Allocates a new UnsafeBufferPosition object that represents the memory location of a counter in the specified tempBuffer, name, typeId, CountersManager, registrationId, sessionId, streamId, and channel.."}, {"ID": 1868, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func sumUntilIndex(s []uint32, idx int) uint64 { var cumSum uint64 var i int for i = idx - 1; i >= 3; i -= 4 { cumSum += uint64(s[i]) cumSum += uint64(s[i-1]) cumSum += uint64(s[i-2]) cumSum += uint64(s[i-3]) } for ; i >= 0; i-- { cumSum += uint64(s[i]) } return cumSum }. \n### Response: // A simple loop unroll saves a surprising amount of time..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String labelName(final int typeId) { switch (typeId) { case PublisherLimit.PUBLISHER_LIMIT_TYPE_ID: return PublisherLimit.NAME; case SenderPos.SENDER_POSITION_TYPE_ID: return SenderPos.NAME; case ReceiverHwm.RECEIVER_HWM_TYPE_ID: return ReceiverHwm.NAME; case SubscriberPos.SUBSCRIBER_POSITION_TYPE_ID: return SubscriberPos.NAME; case ReceiverPos.RECEIVER_POS_TYPE_ID: return ReceiverPos.NAME; case SenderLimit.SENDER_LIMIT_TYPE_ID: return SenderLimit.NAME; case PublisherPos.PUBLISHER_POS_TYPE_ID: return PublisherPos.NAME; case SenderBpe.SENDER_BPE_TYPE_ID: return SenderBpe.NAME; default: return \"<unknown>\"; } } \n### Response:", "ground_truth": "Return the label name for a counter type identifier.\n\n@param typeId of the counter.\n@return the label name as a String.", "predict": "// Implement a switch statement to return the appropriate label name for given typeId."}, {"ID": 1869, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected function loadMigrationsFrom($paths): void { $options = \\is_array($paths) ? $paths : ['--path' => $paths]; if (isset($options['--realpath']) && \\is_string($options['--realpath'])) { $options['--path'] = [$options['--realpath']]; } $options['--realpath'] = true; $migrator = new MigrateProcessor($this, $options); $migrator->up(); $this->beforeApplicationDestroyed(function () use ($migrator) { $migrator->rollback(); }); }. \n### Response: Define hooks to migrate the database before and after each test.\n\n@param  string|array  $paths\n\n@return void.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static long scanForAvailability(final UnsafeBuffer termBuffer, final int offset, final int maxLength) { final int limit = Math.min(maxLength, termBuffer.capacity() - offset); int available = 0; int padding = 0; do { final int termOffset = offset + available; final int frameLength = frameLengthVolatile(termBuffer, termOffset); if (frameLength <= 0) { break; } int alignedFrameLength = align(frameLength, FRAME_ALIGNMENT); if (isPaddingFrame(termBuffer, termOffset)) { padding = alignedFrameLength - HEADER_LENGTH; alignedFrameLength = HEADER_LENGTH; } available += alignedFrameLength; if (available > limit) { available -= alignedFrameLength; padding = 0; break; } } while (0 == padding && available < limit); return pack(padding, available); } \n### Response:", "ground_truth": "Scan the term buffer for availability of new message fragments from a given offset up to a maxLength of bytes.\n\n@param termBuffer to be scanned for new message fragments.\n@param offset     at which the scan should begin.\n@param maxLength  in bytes of how much should be scanned.\n@return resulting status of the scan which packs the available bytes and padding into a long.", "predict": "This method is used to scan for available frames in the term buffer and return the number of frames available.\n\n@param  UnsafeBuffer  $termBuffer\n\n@return long  Number of available frames."}, {"ID": 1870, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function doReAuthorization(array $array) { $WSRequest = array( 'transactionID' => $array['transactionID'], 'payment' => $this->payment($array['payment']), 'order' => $this->order($array['order']), 'privateDataList' => $this->privateData ); return $this->webServiceRequest($array, $WSRequest, self::DIRECT_API, 'doReAuthorization'); }. \n### Response: calls doReAuthorization web service\n\n@param array $array\nassociative array containing doReAuthorization parameters.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public ChannelUriStringBuilder clear() { prefix = null; media = null; endpoint = null; networkInterface = null; controlEndpoint = null; controlMode = null; tags = null; alias = null; reliable = null; ttl = null; mtu = null; termLength = null; initialTermId = null; termId = null; termOffset = null; sessionId = null; linger = null; sparse = null; eos = null; tether = null; isSessionIdTagged = false; return this; } \n### Response:", "ground_truth": "Clear out all the values thus setting back to the initial state.\n\n@return this for a fluent API.", "predict": "This method clears the attributes of the ChannelUriStringBuilder object.\n\n@return ChannelUriStringBuilder object with all attributes cleared."}, {"ID": 1871, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function (name, table, condition, opts) { opts = opts || {}; if (name) { name = sql.stringToIdentifier(name); if (table && condition) { opts = comb.merge({joinType: \"left\", table: table, condition: condition, column: name}, opts); this._mappedColumns[name] = opts; } else { throw new ModelError(\"mapped column requires a table and join condition\"); } } return this; }. \n### Response: Add a mapped column from another table. This is useful if there columns on\nanother table but you do not want to load the association every time.\n\n\nFor example assume we have an employee and works table. Well we might want the salary from the works table,\nbut do not want to add it to the employee table.\n\nNOTE: mapped columns are READ ONLY.\n\n{@code\npatio.addModel(\"employee\")\n.oneToOne(\"works\")\n.mappedColumn(\"salary\", \"works\", {employeeId : patio.sql.identifier(\"id\")});\n}\n\nYou can also change the name of the of the column\n\n{@code\npatio.addModel(\"employee\")\n.oneToOne(\"works\")\n.mappedColumn(\"mySalary\", \"works\", {employeeId : patio.sql.identifier(\"id\")}, {\ncolumn : \"salary\"\n});\n}\n\nIf you want to prevent the mapped columns from being reloaded after a save or update you can set the\nfetchMappedColumnsOnUpdate or fetchMappedColumnsOnSave to false.\n\n{@code\n\nvar Employee = patio.addModel(\"employee\")\n.oneToOne(\"works\")\n.mappedColumn(\"mySalary\", \"works\", {employeeId : patio.sql.identifier(\"id\")}, {\ncolumn : \"salary\"\n});\n\n//prevent the mapped columns from being fetched after a save.\nEmployee.fetchMappedColumnsOnSave = false;\n\n//prevent the mapped columns from being re-fetched after an update.\nEmployee.fetchMappedColumnsOnUpdate = false;\n}\n\nYou can also override prevent the properties from being reloaded by setting the reload or reloadMapped options when saving or updating.\n\n{@code\n//prevents entire model from being reloaded including mapped columns\nemployee.save(null, {reload : false});\nemployee.update(null, {reload : false});\n\n//just prevents just the mapped columns from being reloaded\nemployee.save(null, {reloadMapped : false});\nemployee.update(null, {reloadMapped : false});\n}\n\n@param {String} name the name you want the column represented as on the model.\n@param {String|patio.Model} table the table or model you want the property mapped from\n@param condition the join condition. See {@link patio.Dataset#joinTable}.\n@param {Object} [opts={}] additional options\n@param {String} [opts.joinType=\"left\"] the join type to use when gathering the properties.\n@param {String|patio.sql.Identifer} [opts.column=null] the column on the remote table that should be used\nas the local copy.\n\n@return {patio.Model} returns the model for chaining..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public ChannelUriStringBuilder validate() { if (null == media) { throw new IllegalStateException(\"media type is mandatory\"); } if (CommonContext.UDP_MEDIA.equals(media) && (null == endpoint && null == controlEndpoint)) { throw new IllegalStateException(\"either 'endpoint' or 'control' must be specified for UDP.\"); } int count = 0; count += null == initialTermId ? 0 : 1; count += null == termId ? 0 : 1; count += null == termOffset ? 0 : 1; if (count > 0) { if (count < 3) { throw new IllegalStateException( \"if any of then a complete set of 'initialTermId', 'termId', and 'termOffset' must be provided\"); } if (termId - initialTermId < 0) // lgtm [java/dereferenced-value-may-be-null] { throw new IllegalStateException( \"difference greater than 2^31 - 1: termId=\" + termId + \" - initialTermId=\" + initialTermId); } if (null != termLength && termOffset > termLength) // lgtm [java/dereferenced-value-may-be-null] { throw new IllegalStateException(\"termOffset=\" + termOffset + \" > termLength=\" + termLength); } } return this; } \n### Response:", "ground_truth": "Validates that the collection of set parameters are valid together.\n\n@return this for a fluent API.\n@throws IllegalStateException if the combination of params is invalid.", "predict": "This method validate() checks if the media type is specified, if not it throws an exception. It also checks if both endpoint and control endpoint are specified and if the count of terms provided is 3 or more. If any of the conditions are not met it throws an exception. This method returns the ChannelUriStringBuilder object which is used to construct ChannelUris."}, {"ID": 1872, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def dim_lower_extent(self, *args, **kwargs): \"\"\" Returns the lower extent of the dimensions in args. .. code-block:: python t_ex, bl_ex, ch_ex = cube.dim_lower_extent('ntime', 'nbl', 'nchan') or .. code-block:: python t_ex, bl_ex, ch_ex, src_ex = cube.dim_lower_extent('ntime,nbl:nchan nsrc') \"\"\" # The lower extent of any integral dimension is 0 by default args = tuple(0 if isinstance(a, (int, np.integer)) else a for a in args) return self._dim_attribute('lower_extent', *args, **kwargs). \n### Response: Returns the lower extent of the dimensions in args.\n\n        .. code-block:: python\n\n            t_ex, bl_ex, ch_ex = cube.dim_lower_extent('ntime', 'nbl', 'nchan')\n\n        or\n\n        .. code-block:: python\n\n            t_ex, bl_ex, ch_ex, src_ex = cube.dim_lower_extent('ntime,nbl:nchan nsrc').\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public ChannelUriStringBuilder prefix(final String prefix) { if (null != prefix && !prefix.equals(\"\") && !prefix.equals(SPY_QUALIFIER)) { throw new IllegalArgumentException(\"invalid prefix: \" + prefix); } this.prefix = prefix; return this; } \n### Response:", "ground_truth": "Set the prefix for taking an addition action such as spying on an outgoing publication with \"aeron-spy\".\n\n@param prefix to be applied to the URI before the the scheme.\n@return this for a fluent API.\n@see ChannelUri#SPY_QUALIFIER", "predict": "This method is a public method of a class named \"ChannelUriStringBuilder\". It takes a single argument, \"prefix\", which is a string.\n\nThe method first checks if the argument is not null and if it is not empty and if it is not equal to the \"SPY_QUALIFIER\" constant. If all of these conditions are met, it throws an exception with a message indicating that the prefix is invalid.\n\nAfter checking the prefix, the method sets the value of the \"prefix\" attribute to the argument and returns the same object.\n\nThis method is used to set the prefix of a ChannelUri object.\n\n.. code-block:: python\n\n        c = ChannelUriStringBuilder(\"http://example.com\")\n        c.prefix = \"http://example.com/sy\"\n        print(c.toString())\n\n        c = ChannelUriStringBuilder(\"http://example.com/sy\")\n        print(c.toString())\n```"}, {"ID": 1873, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function renderData() { $columns = $this->table->getTableColumns(); $types = []; $structure = []; foreach ($columns as $column) { $structure[] = snake_case(str_replace('ID', 'Id', $column->getName())); $type = $column->getType()->getName(); switch ($type) { case Type::INTEGER: case Type::SMALLINT: case Type::BIGINT: $types[$column->getName()] = 'int'; break; case Type::FLOAT: $types[$column->getName()] = 'float'; break; case Type::DECIMAL: $types[$column->getName()] = 'decimal'; break; case Type::BOOLEAN: $types[$column->getName()] = 'boolean'; break; default: $types[$column->getName()] = 'string'; break; } } $data = $this->table->getData(); $tableData = []; foreach ($data as $row) { $modelData = []; foreach ($row as $column => $value) { switch ($types[$column]) { case 'int': $value = (int)$value; break; case 'float': $value = (float)$value; break; case 'decimal': $value = (double)$value; break; case 'boolean': // boolean type can be TINYINT(1) but doctrine map TINYINT(1+) as boolean type $value = (int)$value; break; case 'string': $value = (string)$value; break; } $modelData[] = var_export($value, true); } $tableData[] = '[' . implode(',', $modelData) . ']'; } return [$structure, '[' . implode(',', $tableData) . ']', count($data)]; }. \n### Response: Get database table data rendered in model create\n\n@return array[].\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public ChannelUriStringBuilder media(final String media) { switch (media) { case CommonContext.UDP_MEDIA: case CommonContext.IPC_MEDIA: break; default: throw new IllegalArgumentException(\"invalid media: \" + media); } this.media = media; return this; } \n### Response:", "ground_truth": "Set the media for this channel. Valid values are \"udp\" and \"ipc\".\n\n@param media for this channel.\n@return this for a fluent API.", "predict": "This method takes a String argument \"media\" and returns a ChannelUriStringBuilder object. It uses a switch statement to determine the type of media passed in and returns the appropriate ChannelUriStringBuilder object. If the media argument is not valid, a IllegalArgumentException is thrown."}, {"ID": 1874, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def validate_tag(self, key, value): \"\"\"Check whether a tag value is valid Args: key: A tag key value: A tag value Returns: `(True or False)` A boolean indicating whether or not the value is valid \"\"\" if key == 'owner': return validate_email(value, self.partial_owner_match) elif key == self.gdpr_tag: return value in self.gdpr_tag_values else: return True. \n### Response: Check whether a tag value is valid\n\n        Args:\n            key: A tag key\n            value: A tag value\n\n        Returns:\n            `(True or False)`\n            A boolean indicating whether or not the value is valid.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public ChannelUriStringBuilder controlMode(final String controlMode) { if (null != controlMode && !controlMode.equals(CommonContext.MDC_CONTROL_MODE_MANUAL) && !controlMode.equals(CommonContext.MDC_CONTROL_MODE_DYNAMIC)) { throw new IllegalArgumentException(\"invalid control mode: \" + controlMode); } this.controlMode = controlMode; return this; } \n### Response:", "ground_truth": "Set the control mode for multi-destination-cast. Set to \"manual\" for allowing control from the publication API.\n\n@param controlMode for taking control of MDC.\n@return this for a fluent API.\n@see Publication#addDestination(String)\n@see Publication#removeDestination(String)\n@see CommonContext#MDC_CONTROL_MODE_PARAM_NAME\n@see CommonContext#MDC_CONTROL_MODE_MANUAL\n@see CommonContext#MDC_CONTROL_MODE_DYNAMIC", "predict": "Validates the specified control mode.\n\n        Args:\n            controlMode: The control mode to be validated\n\n        Returns:\n            `this`\n            A ChannelUriStringBuilder instance."}, {"ID": 1875, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def get_reports(): \"\"\" Returns energy data from 1960 to 2014 across various factors. \"\"\" if False: # If there was a Test version of this method, it would go here. But alas. pass else: rows = _Constants._DATABASE.execute(\"SELECT data FROM energy\".format( hardware=_Constants._HARDWARE)) data = [r[0] for r in rows] data = [_Auxiliary._byteify(_json.loads(r)) for r in data] return _Auxiliary._byteify(data). \n### Response: Returns energy data from 1960 to 2014 across various factors..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public ChannelUriStringBuilder termLength(final Integer termLength) { if (null != termLength) { LogBufferDescriptor.checkTermLength(termLength); } this.termLength = termLength; return this; } \n### Response:", "ground_truth": "Set the length of buffer used for each term of the log. Valid values are powers of 2 in the 64K - 1G range.\n\n@param termLength of the buffer used for each term of the log.\n@return this for a fluent API.\n@see CommonContext#TERM_LENGTH_PARAM_NAME", "predict": "This method returns a `ChannelUriStringBuilder` object with the specified term length. It first checks if the term length is not null and then sets it to the passed in value. It then returns the `ChannelUriStringBuilder` object."}, {"ID": 1876, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (s *DescribeAutoScalingNotificationTypesOutput) SetAutoScalingNotificationTypes(v []*string) *DescribeAutoScalingNotificationTypesOutput { s.AutoScalingNotificationTypes = v return s }. \n### Response: // SetAutoScalingNotificationTypes sets the AutoScalingNotificationTypes field's value..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public ChannelUriStringBuilder termOffset(final Integer termOffset) { if (null != termOffset) { if ((termOffset < 0 || termOffset > LogBufferDescriptor.TERM_MAX_LENGTH)) { throw new IllegalArgumentException(\"term offset not in range 0-1g: \" + termOffset); } if (0 != (termOffset & (FRAME_ALIGNMENT - 1))) { throw new IllegalArgumentException(\"term offset not multiple of FRAME_ALIGNMENT: \" + termOffset); } } this.termOffset = termOffset; return this; } \n### Response:", "ground_truth": "Set the offset within a term at which a publication will start. This when combined with the term id can establish\na starting position.\n\n@param termOffset within a term at which a publication will start.\n@return this for a fluent API.\n@see CommonContext#TERM_OFFSET_PARAM_NAME", "predict": "// termOffset returns the current term offset value.."}, {"ID": 1877, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (s *State) Unlock(id string) error { s.mu.Lock() defer s.mu.Unlock() if s.disableLocks { return nil } if c, ok := s.Client.(ClientLocker); ok { return c.Unlock(id) } return nil }. \n### Response: // Unlock calls the Client's Unlock method if it's implemented..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public ChannelUriStringBuilder linger(final Long lingerNs) { if (null != lingerNs && lingerNs < 0) { throw new IllegalArgumentException(\"linger value cannot be negative: \" + lingerNs); } this.linger = lingerNs; return this; } \n### Response:", "ground_truth": "Set the time a network publication will linger in nanoseconds after being drained. This time is so that tail loss\ncan be recovered.\n\n@param lingerNs time for the publication after it is drained.\n@return this for a fluent API.\n@see CommonContext#LINGER_PARAM_NAME", "predict": "// linger returns a new ChannelUriStringBuilder with the given lingerNs.."}, {"ID": 1878, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void process(final String beanName, final HttpServletRequest request, final HttpServletResponse response) throws ServletException, IOException { InputStream is = request.getInputStream(); OutputStream os = response.getOutputStream(); Hessian2Input in = new Hessian2Input(is); AbstractHessianOutput out; SerializerFactory serializerFactory = new SerializerFactory(); serializerFactory.setAllowNonSerializable(true); serializerFactory.addFactory(new JdonSerializerFactory()); in.setSerializerFactory(serializerFactory); int code = in.read(); if (code != 'c') { // XXX: deflate throw new IOException(\"expected 'c' in hessian input at \" + code); } int major = in.read(); in.read(); if (major >= HESSIAN_PROTOCOL_MAJOR_VERSION) { out = new Hessian2Output(os); } else { out = new HessianOutput(os); } out.setSerializerFactory(serializerFactory); // backward compatibility for some frameworks that don't read // the call type first in.skipOptionalCall(); out.startReply(); readHeaders(in); // read headers from call try { out.writeObject(makeCall(in, beanName, request)); } catch (Exception e) { writeException(out, e); } // The complete call needs to be after the invoke to handle a // trailing InputStream in.completeCall(); out.completeReply(); out.close(); }. \n### Response: Process servlet requests and writes bean's method result to output\n\n@param beanName\nString\n@param request\nHttpServletRequest\n@param response\nHttpServletResponse\n@throws javax.servlet.ServletException\nIf error occur\n@throws java.io.IOException\nIf error occur.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void openDatagramChannel(final AtomicCounter statusIndicator) { try { sendDatagramChannel = DatagramChannel.open(udpChannel.protocolFamily()); receiveDatagramChannel = sendDatagramChannel; if (udpChannel.isMulticast()) { if (null != connectAddress) { receiveDatagramChannel = DatagramChannel.open(udpChannel.protocolFamily()); } receiveDatagramChannel.setOption(StandardSocketOptions.SO_REUSEADDR, true); receiveDatagramChannel.bind(new InetSocketAddress(endPointAddress.getPort())); receiveDatagramChannel.join(endPointAddress.getAddress(), udpChannel.localInterface()); sendDatagramChannel.setOption(StandardSocketOptions.IP_MULTICAST_IF, udpChannel.localInterface()); if (udpChannel.isHasMulticastTtl()) { sendDatagramChannel.setOption(StandardSocketOptions.IP_MULTICAST_TTL, udpChannel.multicastTtl()); multicastTtl = sendDatagramChannel.getOption(StandardSocketOptions.IP_MULTICAST_TTL); } else if (context.socketMulticastTtl() != 0) { sendDatagramChannel.setOption(StandardSocketOptions.IP_MULTICAST_TTL, context.socketMulticastTtl()); multicastTtl = sendDatagramChannel.getOption(StandardSocketOptions.IP_MULTICAST_TTL); } } else { sendDatagramChannel.bind(bindAddress); } if (null != connectAddress) { sendDatagramChannel.connect(connectAddress); } if (0 != context.socketSndbufLength()) { sendDatagramChannel.setOption(SO_SNDBUF, context.socketSndbufLength()); } if (0 != context.socketRcvbufLength()) { receiveDatagramChannel.setOption(SO_RCVBUF, context.socketRcvbufLength()); } sendDatagramChannel.configureBlocking(false); receiveDatagramChannel.configureBlocking(false); } catch (final IOException ex) { if (null != statusIndicator) { statusIndicator.setOrdered(ChannelEndpointStatus.ERRORED); } CloseHelper.quietClose(sendDatagramChannel); if (receiveDatagramChannel != sendDatagramChannel) { CloseHelper.quietClose(receiveDatagramChannel); } sendDatagramChannel = null; receiveDatagramChannel = null; throw new AeronException( \"channel error - \" + ex.getMessage() + \" (at \" + ex.getStackTrace()[0].toString() + \"): \" + udpChannel.originalUriString(), ex); } } \n### Response:", "ground_truth": "Create the underlying channel for reading and writing.\n\n@param statusIndicator to set for error status", "predict": "Opens a datagram channel.\n\n@param udpChannel\nThe datagram channel to open.\n@param sendDatagramChannel\nThe send datagram channel to open.\n@param receiveDatagramChannel\nThe receive datagram channel to open.\n@param statusIndicator\nA counter to track the status of the channel.\n@return\nThe datagram channel object.\n@throws IOException\nIf an error occurs while opening the channel."}, {"ID": 1879, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def checkgrad(self, target_param=None, verbose=False, step=1e-6, tolerance=1e-3, block_indices=None, plot=False): \"\"\" Overwrite checkgrad method to check whole block instead of looping through Shows diagnostics using matshow instead :param verbose: If True, print a \"full\" checking of each parameter :type verbose: bool :param step: The size of the step around which to linearise the objective :type step: float (default 1e-6) :param tolerance: the tolerance allowed (see note) :type tolerance: float (default 1e-3) Note:- The gradient is considered correct if the ratio of the analytical and numerical gradients is within <tolerance> of unity. \"\"\" try: import numdifftools as nd except: raise ImportError(\"Don't have numdifftools package installed, it is not a GPy dependency as of yet, it is only used for hessian tests\") if target_param: raise NotImplementedError('Only basic functionality is provided with this gradchecker') #Repeat for each parameter, not the nicest but shouldn't be many cases where there are many #variables current_index = 0 for name, shape in zip(self.names, self.shapes): current_size = numpy.prod(shape) x = self.optimizer_array.copy() #x = self._get_params_transformed().copy() x = x[current_index:current_index + current_size].reshape(shape) # Check gradients analytic_hess = self._ddf(x) if analytic_hess.shape[1] == 1: analytic_hess = numpy.diagflat(analytic_hess) #From the docs: #x0 : vector location #at which to differentiate fun #If x0 is an N x M array, then fun is assumed to be a function #of N*M variables., thus we must have it flat, not (N,1), but just (N,) #numeric_hess_partial = nd.Hessian(self._f, vectorized=False) numeric_hess_partial = nd.Jacobian(self._df, vectorized=False) #numeric_hess_partial = nd.Derivative(self._df, vectorized=True) numeric_hess = numeric_hess_partial(x) check_passed = self.checkgrad_block(analytic_hess, numeric_hess, verbose=verbose, step=step, tolerance=tolerance, block_indices=block_indices, plot=plot) current_index += current_size return check_passed. \n### Response: Overwrite checkgrad method to check whole block instead of looping through\n\n        Shows diagnostics using matshow instead\n\n        :param verbose: If True, print a \"full\" checking of each parameter\n        :type verbose: bool\n        :param step: The size of the step around which to linearise the objective\n        :type step: float (default 1e-6)\n        :param tolerance: the tolerance allowed (see note)\n        :type tolerance: float (default 1e-3)\n\n        Note:-\n           The gradient is considered correct if the ratio of the analytical\n           and numerical gradients is within  of unity..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void close() { if (!isClosed) { isClosed = true; try { if (null != selectionKey) { selectionKey.cancel(); } if (null != transportPoller) { transportPoller.cancelRead(this); transportPoller.selectNowWithoutProcessing(); } if (null != sendDatagramChannel) { sendDatagramChannel.close(); } if (receiveDatagramChannel != sendDatagramChannel && null != receiveDatagramChannel) { receiveDatagramChannel.close(); } if (null != transportPoller) { transportPoller.selectNowWithoutProcessing(); } } catch (final IOException ex) { errorLog.record(ex); } } } \n### Response:", "ground_truth": "Close transport, canceling any pending read operations and closing channel", "predict": "Close method to ensure all resources are closed properly\n\n        Cancel selection key\n        Cancel transport poller\n        Close send datagram channel\n        Close receive datagram channel\n        Close transport poller\n        Record IOException if any\n\nNote:- This method should handle all possible cases and close all resources properly."}, {"ID": 1880, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function scan($table, Context\\Scan $context = null) { if (null !== $this->logger) { $this->log('Scan on table '.$table); } $parameters = array( 'TableName' => $table ); if (null !== $context) { $parameters += $context->getForDynamoDB(); } if (null !== $this->logger) { $this->log('Scan request paramaters : '.print_r($parameters, true), Logger::DEBUG); } $response = $this->connector->scan($parameters); if (null !== $this->logger) { $this->log('Scan request response : '.print_r($response, true), Logger::DEBUG); $this->log($response['ScannedCount'].' scanned items'); } $this->addConsumedReadUnits($table, floatval($response['ConsumedCapacityUnits'])); if (isset($response['LastEvaluatedKey'])) { if (null === $context) { $nextContext = new Context\\Scan(); } else { $nextContext = clone $context; } $nextContext->setExclusiveStartKey($response['LastEvaluatedKey']); if (null !== $this->logger) { $this->log('More Items to retrieve'); } } else { $nextContext = null; } $items = new Collection( $nextContext, $response['Count'] ); if (!empty($response['Items'])) { foreach ($response['Items'] as $responseItem) { $item = new Item($table); $item->populateFromDynamoDB($responseItem); $items->add($item); } } if (null !== $this->logger) { $this->log('Find '.count($items).' Items'); } return $items; }. \n### Response: Get items via the scan call\n@param string $table The item table\n@param Context\\Scan|null $context The call context\n@return Collection.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public boolean isValidFrame(final UnsafeBuffer buffer, final int length) { boolean isFrameValid = true; if (frameVersion(buffer, 0) != HeaderFlyweight.CURRENT_VERSION) { isFrameValid = false; invalidPackets.increment(); } else if (length < HeaderFlyweight.MIN_HEADER_LENGTH) { isFrameValid = false; invalidPackets.increment(); } return isFrameValid; } \n### Response:", "ground_truth": "Is the received frame valid. This method will do some basic checks on the header and can be\noverridden in a subclass for further validation.\n\n@param buffer containing the frame.\n@param length of the frame.\n@return true if the frame is believed valid otherwise false.", "predict": "This method is used to check if a given buffer is valid for use as a header. It first checks if the buffer version is equal to the current version of the header weight library, and if not, it increments an internal counter of invalid packets. If the buffer length is less than the minimum header length specified by the library, it also returns false and increments the invalid packet counter. Finally, it returns true if the buffer is valid and no invalid packets have been encountered."}, {"ID": 1881, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def who_has(self, subid): \"\"\"Return a list of names who own subid in their id range set.\"\"\" answer = [] for name in self.__map: if subid in self.__map[name] and not name in answer: answer.append(name) return answer. \n### Response: Return a list of names who own subid in their id range set..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public InetSocketAddress receive(final ByteBuffer buffer) { buffer.clear(); InetSocketAddress address = null; try { if (receiveDatagramChannel.isOpen()) { address = (InetSocketAddress)receiveDatagramChannel.receive(buffer); } } catch (final PortUnreachableException ignored) { } catch (final Exception ex) { LangUtil.rethrowUnchecked(ex); } return address; } \n### Response:", "ground_truth": "Receive a datagram from the media layer.\n\n@param buffer into which the datagram will be received.\n@return the source address of the datagram if one is available otherwise false.", "predict": "This method receives datagram packets from a datagram channel. It clears the buffer and initializes the address to null. It then attempts to receive datagram packets from the datagram channel. If the channel is open, it returns the address as an InetSocketAddress. If any exception is thrown, it is rethrown without checking for checked exceptions."}, {"ID": 1882, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private static List<AlluxioURI> getAlluxioURIs(FileSystem alluxioClient, AlluxioURI inputURI, AlluxioURI parentDir) throws IOException { List<AlluxioURI> res = new ArrayList<>(); List<URIStatus> statuses; try { statuses = alluxioClient.listStatus(parentDir); } catch (AlluxioException e) { throw new IOException(e); } for (URIStatus status : statuses) { AlluxioURI fileURI = new AlluxioURI(inputURI.getScheme(), inputURI.getAuthority(), status.getPath()); if (match(fileURI, inputURI)) { // if it matches res.add(fileURI); } else { if (status.isFolder()) { // if it is a folder, we do it recursively AlluxioURI dirURI = new AlluxioURI(inputURI.getScheme(), inputURI.getAuthority(), status.getPath()); String prefix = inputURI.getLeadingPath(dirURI.getDepth()); if (prefix != null && match(dirURI, new AlluxioURI(prefix))) { res.addAll(getAlluxioURIs(alluxioClient, inputURI, dirURI)); } } } } return res; }. \n### Response: The utility function used to implement getAlluxioURIs.\n\nBasically, it recursively iterates through the directory from the parent directory of inputURI\n(e.g., for input \"/a/b/*\", it will start from \"/a/b\") until it finds all the matches;\nIt does not go into a directory if the prefix mismatches\n(e.g., for input \"/a/b/*\", it won't go inside directory \"/a/c\")\n\n@param alluxioClient the client used to fetch metadata of Alluxio files\n@param inputURI the input URI (could contain wildcards)\n@param parentDir the {@link AlluxioURI} of the directory in which we are searching matched\nfiles\n@return a list of {@link AlluxioURI}s of the files that match the inputURI in parentDir.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void onNak( final int termId, final int termOffset, final int length, final int termLength, final RetransmitSender retransmitSender) { if (!isInvalid(termOffset, termLength)) { if (null == activeRetransmitsMap.get(termId, termOffset) && activeRetransmitsMap.size() < MAX_RETRANSMITS_DEFAULT) { final RetransmitAction action = assignRetransmitAction(); action.termId = termId; action.termOffset = termOffset; action.length = Math.min(length, termLength - termOffset); final long delay = delayGenerator.generateDelay(); if (0 == delay) { retransmitSender.resend(termId, termOffset, action.length); action.linger(lingerTimeoutGenerator.generateDelay(), nanoClock.nanoTime()); } else { action.delay(delay, nanoClock.nanoTime()); } activeRetransmitsMap.put(termId, termOffset, action); } } } \n### Response:", "ground_truth": "Called on reception of a NAK to start retransmits handling.\n\n@param termId           from the NAK and the term id of the buffer to retransmit from\n@param termOffset       from the NAK and the offset of the data to retransmit\n@param length           of the missing data\n@param termLength       of the term buffer.\n@param retransmitSender to call if an immediate retransmit is required", "predict": "The method used to handle the nack event for a term in Alluxio.\n\nIt checks if the nack event is valid (i.e., if the term offset and length are valid) and then it assigns a new RetransmitAction to the activeRetransmitsMap.\n\nIt also checks if the current activeRetransmitsMap has less than MAX_RETRANSMITS_DEFAULT retransmits and if so, it assigns a new RetransmitAction with a minimum length of length and a delay of delay.\n\nIt also updates the activeRetransmitsMap with the new action if the current action is not retransmittable.\n\n@param termId the unique identifier of the term\n@param termOffset the offset of the term in the file\n@param length the length of the term in the file\n@param termLength the length of the term in the file\n@param retransmitSender the sender of the retransmit request\n@return void\n\nNote: This method is called by the onNack method of the AlluxioClient, which is the client that is responsible for handling the nack event."}, {"ID": 1883, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def _recipient_to_cloud(self, recipient): \"\"\" Transforms a Recipient object to a cloud dict \"\"\" data = None if recipient: data = {self._cc('emailAddress'): { self._cc('address'): recipient.address}} if recipient.name: data[self._cc('emailAddress')][ self._cc('name')] = recipient.name return data. \n### Response: Transforms a Recipient object to a cloud dict.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void processTimeouts(final long nowNs, final RetransmitSender retransmitSender) { if (activeRetransmitsMap.size() > 0) { for (final RetransmitAction action : retransmitActionPool) { if (DELAYED == action.state && (action.expireNs - nowNs < 0)) { retransmitSender.resend(action.termId, action.termOffset, action.length); action.linger(lingerTimeoutGenerator.generateDelay(), nanoClock.nanoTime()); } else if (LINGERING == action.state && (action.expireNs - nowNs < 0)) { action.cancel(); activeRetransmitsMap.remove(action.termId, action.termOffset); } } } } \n### Response:", "ground_truth": "Called to process any outstanding timeouts.\n\n@param nowNs            time in nanoseconds\n@param retransmitSender to call on retransmissions", "predict": "This method processes timeouts for RetransmitActionPool actions and removes any active retransmits if the expireNs are less than the current timeNs."}, {"ID": 1884, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def layer_from_combo(combo): \"\"\"Get the QgsMapLayer currently selected in a combo. Obtain QgsMapLayer id from the userrole of the QtCombo and return it as a QgsMapLayer. :returns: The currently selected map layer a combo. :rtype: QgsMapLayer \"\"\" index = combo.currentIndex() if index < 0: return None layer_id = combo.itemData(index, Qt.UserRole) layer = QgsProject.instance().mapLayer(layer_id) return layer. \n### Response: Get the QgsMapLayer currently selected in a combo.\n\n    Obtain QgsMapLayer id from the userrole of the QtCombo and return it as a\n    QgsMapLayer.\n\n    :returns: The currently selected map layer a combo.\n    :rtype: QgsMapLayer.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String status(final long status) { if (INITIALIZING == status) { return \"INITIALIZING\"; } if (ERRORED == status) { return \"ERRORED\"; } if (ACTIVE == status) { return \"ACTIVE\"; } if (CLOSING == status) { return \"CLOSING\"; } return \"unknown id=\" + status; } \n### Response:", "ground_truth": "String representation of the channel status.\n\n@param status to be converted.\n@return representation of the channel status.", "predict": "Returns the status of the given long status.\n\n:param status: The status of the operation to be returned.\n:return: The status of the operation.\n:rtype: String.\n\nNote: This method only handles the following status codes: INITIALIZING, ERRORED, ACTIVE, and CLOSING.\n\n"}, {"ID": 1885, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (s *SetInstanceHealthInput) SetShouldRespectGracePeriod(v bool) *SetInstanceHealthInput { s.ShouldRespectGracePeriod = &v return s }. \n### Response: // SetShouldRespectGracePeriod sets the ShouldRespectGracePeriod field's value..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static AtomicCounter allocate( final MutableDirectBuffer tempBuffer, final String name, final int typeId, final CountersManager countersManager, final String channel) { final int keyLength = tempBuffer.putStringWithoutLengthAscii( CHANNEL_OFFSET + SIZE_OF_INT, channel, 0, MAX_CHANNEL_LENGTH); tempBuffer.putInt(CHANNEL_OFFSET, keyLength); int labelLength = 0; labelLength += tempBuffer.putStringWithoutLengthAscii(keyLength + labelLength, name); labelLength += tempBuffer.putStringWithoutLengthAscii(keyLength + labelLength, \": \"); labelLength += tempBuffer.putStringWithoutLengthAscii( keyLength + labelLength, channel, 0, MAX_LABEL_LENGTH - labelLength); return countersManager.newCounter(typeId, tempBuffer, 0, keyLength, tempBuffer, keyLength, labelLength); } \n### Response:", "ground_truth": "Allocate an indicator for tracking the status of a channel endpoint.\n\n@param tempBuffer      to be used for labels and metadata.\n@param name            of the counter for the label.\n@param typeId          of the counter for classification.\n@param countersManager from which to allocated the underlying storage.\n@param channel         for the stream of messages.\n@return a new {@link AtomicCounter} for tracking the status.", "predict": "// Allocates an AtomicCounter and returns it."}, {"ID": 1886, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected static function getErrorMessage($code) { $string = socket_strerror($code); // search constant starting with SOCKET_ for this error code foreach (get_defined_constants() as $key => $value) { if($value === $code && strpos($key, 'SOCKET_') === 0) { $string .= ' (' . $key . ')'; break; } } return $string; }. \n### Response: get error message for given error code\n\n@param int $code error code\n@return string\n@uses socket_strerror() to translate error code to error message\n@uses get_defined_constants() to check for related error constant.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public DirectBufferVector reset(final DirectBuffer buffer, final int offset, final int length) { this.buffer = buffer; this.offset = offset; this.length = length; return this; } \n### Response:", "ground_truth": "Reset the values.\n\n@param buffer which is the super set.\n@param offset at which the vector begins.\n@param length of the vector.\n@return this for a fluent API.", "predict": "reset() method for DirectBufferVector\n\n@param DirectBuffer $buffer buffer to reset\n@param int $offset offset in the buffer\n@param int $length length of the buffer\n@return DirectBufferVector\n@uses DirectBuffer, offset, and length properties\n@uses getDirectBuffers() to get a list of DirectBuffers.\n\n"}, {"ID": 1887, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (c *Client) CreateNewAccount(account string) error { return c.CreateNewAccountAsync(account).Receive() }. \n### Response: // CreateNewAccount creates a new wallet account..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public DirectBufferVector validate() { final int capacity = buffer.capacity(); if (offset < 0 || offset >= capacity) { throw new IllegalArgumentException(\"offset=\" + offset + \" capacity=\" + capacity); } if (length < 0 || length > (capacity - offset)) { throw new IllegalArgumentException(\"offset=\" + offset + \" capacity=\" + capacity + \" length=\" + length); } return this; } \n### Response:", "ground_truth": "Ensure the vector is valid for the buffer.\n\n@throws NullPointerException if the buffer is null.\n@throws IllegalArgumentException if the offset is out of range for the buffer.\n@throws IllegalArgumentException if the length is out of range for the buffer.\n@return this for a fluent API.", "predict": "// validate() method of DirectBufferVector checks the capacity and length of the buffer.."}, {"ID": 1888, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (c *Commit) Decode(o plumbing.EncodedObject) (err error) { if o.Type() != plumbing.CommitObject { return ErrUnsupportedObject } c.Hash = o.Hash() reader, err := o.Reader() if err != nil { return err } defer ioutil.CheckClose(reader, &err) r := bufPool.Get().(*bufio.Reader) defer bufPool.Put(r) r.Reset(reader) var message bool var pgpsig bool for { line, err := r.ReadBytes('\\n') if err != nil && err != io.EOF { return err } if pgpsig { if len(line) > 0 && line[0] == ' ' { line = bytes.TrimLeft(line, \" \") c.PGPSignature += string(line) continue } else { pgpsig = false } } if !message { line = bytes.TrimSpace(line) if len(line) == 0 { message = true continue } split := bytes.SplitN(line, []byte{' '}, 2) var data []byte if len(split) == 2 { data = split[1] } switch string(split[0]) { case \"tree\": c.TreeHash = plumbing.NewHash(string(data)) case \"parent\": c.ParentHashes = append(c.ParentHashes, plumbing.NewHash(string(data))) case \"author\": c.Author.Decode(data) case \"committer\": c.Committer.Decode(data) case headerpgp: c.PGPSignature += string(data) + \"\\n\" pgpsig = true } } else { c.Message += string(line) } if err == io.EOF { return nil } } }. \n### Response: // Decode transforms a plumbing.EncodedObject into a Commit struct..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static int validateAndComputeLength(final DirectBufferVector[] vectors) { int messageLength = 0; for (final DirectBufferVector vector : vectors) { vector.validate(); messageLength += vector.length; if (messageLength < 0) { throw new IllegalStateException(\"length overflow: \" + Arrays.toString(vectors)); } } return messageLength; } \n### Response:", "ground_truth": "Validate an array of vectors to make up a message and compute the total length.\n\n@param vectors to be validated summed.\n@return the sum of the vector lengths.", "predict": "// validateAndComputeLength validates and computes the length of a DirectBufferVector array.."}, {"ID": 1889, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function(dbg, raFn, subName, g, name, argv_, context, outerCallback, callback) { var argv = _.extend({}, argv_); g[name] = {}; return raFn(argv, context, function(err, result_) { if (err) { return sg.die(err, outerCallback, 'fetching '+name); } var result = subName ? result_[subName] : result_; if (_.isArray(result)) { g[name] = []; _.each(result, function(value) { g[name].push(value); }); } else { _.each(result, function(value, key) { g[name][key] = value; }); } // Get from prod var argv2 = _.extend({}, argv_, jsaws.getAcct('pub', process.env.JSAWS_AWS_ACCT_EXTRA_CREDS), {session:'prod'}); return raFn(argv2, context, function(err, result_) { if (err) { return sg.die(err, outerCallback, 'fetching '+name); } var result = subName ? result_[subName] : result_; if (_.isArray(result)) { _.each(result, function(value) { g[name].push(value); }); } else { _.each(result, function(value, key) { g[name][key] = value; }); } return callback.apply(this, arguments); }); }); }. \n### Response: fetch, using creds, not contacting server in the other acct.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static int producerWindowLength(final int termBufferLength, final int defaultTermWindowLength) { int termWindowLength = termBufferLength / 2; if (0 != defaultTermWindowLength) { termWindowLength = Math.min(defaultTermWindowLength, termWindowLength); } return termWindowLength; } \n### Response:", "ground_truth": "How far ahead a producer can get from a consumer position.\n\n@param termBufferLength        for when default is not set and considering an appropriate minimum.\n@param defaultTermWindowLength to take priority.\n@return the length to be used for the producer window.", "predict": "This method calculates the optimal producer window length based on the given term buffer length and default term window length. It divides the term buffer length into 2 equal parts and sets the second part as the optimal term window length."}, {"ID": 1890, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function postSubmit() { $rules = [ 'first_name' => 'required', 'last_name' => 'required', 'email' => 'required', 'message' => 'required', ]; $input = Binput::only(array_keys($rules)); $val = Validator::make($input, $rules); if ($val->fails()) { return Redirect::to($this->path)->withInput()->withErrors($val); } $this->throttler->hit(); Mailer::send($input['first_name'], $input['last_name'], $input['email'], $input['message']); return Redirect::to('/')->with('success', 'Your message was sent successfully. Thank you for contacting us.'); }. \n### Response: Submit the contact form.\n\n@return \\Illuminate\\Http\\Response.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void validateSocketBufferLengths(final MediaDriver.Context ctx) { try (DatagramChannel probe = DatagramChannel.open()) { final int defaultSoSndBuf = probe.getOption(StandardSocketOptions.SO_SNDBUF); probe.setOption(StandardSocketOptions.SO_SNDBUF, Integer.MAX_VALUE); final int maxSoSndBuf = probe.getOption(StandardSocketOptions.SO_SNDBUF); if (maxSoSndBuf < ctx.socketSndbufLength()) { System.err.format( \"WARNING: Could not get desired SO_SNDBUF, adjust OS to allow %s: attempted=%d, actual=%d%n\", SOCKET_SNDBUF_LENGTH_PROP_NAME, ctx.socketSndbufLength(), maxSoSndBuf); } probe.setOption(StandardSocketOptions.SO_RCVBUF, Integer.MAX_VALUE); final int maxSoRcvBuf = probe.getOption(StandardSocketOptions.SO_RCVBUF); if (maxSoRcvBuf < ctx.socketRcvbufLength()) { System.err.format( \"WARNING: Could not get desired SO_RCVBUF, adjust OS to allow %s: attempted=%d, actual=%d%n\", SOCKET_RCVBUF_LENGTH_PROP_NAME, ctx.socketRcvbufLength(), maxSoRcvBuf); } final int soSndBuf = 0 == ctx.socketSndbufLength() ? defaultSoSndBuf : ctx.socketSndbufLength(); if (ctx.mtuLength() > soSndBuf) { throw new ConfigurationException(String.format( \"MTU greater than socket SO_SNDBUF, adjust %s to match MTU: mtuLength=%d, SO_SNDBUF=%d\", SOCKET_SNDBUF_LENGTH_PROP_NAME, ctx.mtuLength(), soSndBuf)); } if (ctx.initialWindowLength() > maxSoRcvBuf) { throw new ConfigurationException(\"window length greater than socket SO_RCVBUF, increase '\" + Configuration.INITIAL_WINDOW_LENGTH_PROP_NAME + \"' to match window: windowLength=\" + ctx.initialWindowLength() + \", SO_RCVBUF=\" + maxSoRcvBuf); } } catch (final IOException ex) { throw new AeronException(\"probe socket: \" + ex.toString(), ex); } } \n### Response:", "ground_truth": "Validate that the socket buffer lengths are sufficient for the media driver configuration.\n\n@param ctx to be validated.", "predict": "This method is part of the `MediaDriver` class in the Laravel framework. It validate the socket buffer lengths of the media driver context with the given input. The method opens a datagram channel and checks the default, set, and maximum socket buffer lengths. If any of the lengths are not within the allowed range, an exception is thrown with a message indicating the reason. Additionally, if the MTU of the system is greater than the socket buffer length, an exception is thrown with a message indicating the reason. Finally, if the initial window length is greater than the maximum socket buffer length, an exception is thrown with a message indicating the reason. The method is designed to ensure that the media driver context is properly configured and that the input is within the allowed range.\n\n@return \\Illuminate\\Http\\Response."}, {"ID": 1891, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func nextComposed(i *Iter) []byte { outp, startp := 0, i.p var prevCC uint8 ss := mkStreamSafe(i.info) for { if !i.info.isYesC() { goto doNorm } prevCC = i.info.tccc sz := int(i.info.size) if sz == 0 { sz = 1 // illegal rune: copy byte-by-byte } p := outp + sz if p > len(i.buf) { break } outp = p i.p += sz if i.p >= i.rb.nsrc { i.setDone() break } else if i.rb.src._byte(i.p) < utf8.RuneSelf { i.next = i.asciiF break } i.info = i.rb.f.info(i.rb.src, i.p) if v := ss.next(i.info); v == ssStarter { break } else if v == ssOverflow { i.next = nextCGJCompose break } if i.info.ccc < prevCC { goto doNorm } } return i.returnSlice(startp, i.p) doNorm: i.p = startp i.info = i.rb.f.info(i.rb.src, i.p) if i.info.multiSegment() { d := i.info.Decomposition() info := i.rb.f.info(input{bytes: d}, 0) i.rb.insertUnsafe(input{bytes: d}, 0, info) i.multiSeg = d[int(info.size):] i.next = nextMultiNorm return nextMultiNorm(i) } i.rb.ss.first(i.info) i.rb.insertUnsafe(i.rb.src, i.p, i.info) return doNormComposed(i) }. \n### Response: // nextComposed is the implementation of Next for forms NFC and NFKC..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void validatePageSize(final int pageSize) { if (pageSize < PAGE_MIN_SIZE) { throw new ConfigurationException( \"page size less than min size of \" + PAGE_MIN_SIZE + \": \" + pageSize); } if (pageSize > PAGE_MAX_SIZE) { throw new ConfigurationException( \"page size greater than max size of \" + PAGE_MAX_SIZE + \": \" + pageSize); } if (!BitUtil.isPowerOfTwo(pageSize)) { throw new ConfigurationException(\"page size not a power of 2: \" + pageSize); } } \n### Response:", "ground_truth": "Validate that page size is valid and alignment is valid.\n\n@param pageSize to be checked.\n@throws ConfigurationException if the size is not as expected.", "predict": "// validatePageSize validate the page size"}, {"ID": 1892, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private int getMaxStructSize() { final int leafSize = (createLeafNode().getStructMaxSize()); final int internalSize = (createInternalNode().getStructMaxSize()); return Math.max(leafSize, internalSize); }. \n### Response: Get the maximal size for a node\n\n@return integer with the max size of a leaf / internal node.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void validateSessionIdRange(final int low, final int high) { if (low > high) { throw new ConfigurationException(\"low session id value \" + low + \" must be <= high value \" + high); } if (Math.abs((long)high - low) > Integer.MAX_VALUE) { throw new ConfigurationException(\"reserved range to too large\"); } } \n### Response:", "ground_truth": "Validate the range of session ids based on a high and low value provided which accounts for the values wrapping.\n\n@param low  value in the range.\n@param high value in the range.\n@throws ConfigurationException if the values are not valid.", "predict": "Validates the session id range\n\n@param low / high session id values to validate\n@param low / high values must be <= high value\n@throw ConfigurationException if low > high or high - low is greater than Integer.MAX_VALUE\n\nNote: This method is used to validate the session id range, it checks if the low and high session id values are within the specified range and if not, it throws an exception."}, {"ID": 1893, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static function typecast(&$value, $type) { switch ($type) { case Validate::TYPE_INT: case Validate::TYPE_UINT: $value = intval($value); break; case Validate::TYPE_FLOAT: $value = floatval($value); break; case Validate::TYPE_DOUBLE: $value = doubleval($value); break; case Validate::TYPE_BOOLEAN: $value = boolval($value); break; case Validate::TYPE_UNIX_TIMESTAMP: //Add the timezone offset (in minutes) $value = intval($value) + (\\Phramework\\Phramework::getTimezoneOffset()*60); break; } }. \n### Response: Typecast a value\n@param mixed $value\n@param string $type\n@return mixed The typecasted value\n@deprecated since 1.1.0.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void validateUnblockTimeout( final long publicationUnblockTimeoutNs, final long clientLivenessTimeoutNs, final long timerIntervalNs) { if (publicationUnblockTimeoutNs <= clientLivenessTimeoutNs) { throw new ConfigurationException( \"publicationUnblockTimeoutNs=\" + publicationUnblockTimeoutNs + \" <= clientLivenessTimeoutNs=\" + clientLivenessTimeoutNs); } if (clientLivenessTimeoutNs <= timerIntervalNs) { throw new ConfigurationException( \"clientLivenessTimeoutNs=\" + clientLivenessTimeoutNs + \" <= timerIntervalNs=\" + timerIntervalNs); } } \n### Response:", "ground_truth": "Validate that the timeouts for unblocking publications from a client are valid.\n\n@param publicationUnblockTimeoutNs after which an uncommitted publication will be unblocked.\n@param clientLivenessTimeoutNs     after which a client will be considered not alive.\n@param timerIntervalNs             interval at which the driver will check timeouts.\n@throws ConfigurationException if the values are not valid.", "predict": "Validates the unblock timeouts of the publications and clients.\n@param long publicationUnblockTimeoutNs The publication unblock timeout in seconds.\n@param long clientLivenessTimeoutNs The client liveness timeout in seconds.\n@param long timerIntervalNs The timer interval in seconds.\n@return void\n@deprecated since 1.1.0. Use the validateTimeouts method instead."}, {"ID": 1894, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def get_api_version(base_url, api_version=None, timeout=10, verify=True): \"\"\" Get the API version specified or resolve the latest version :return api version :rtype: float \"\"\" versions = available_api_versions(base_url, timeout, verify) newest_version = max([float(i) for i in versions]) if api_version is None: # Use latest api_version = newest_version else: if api_version not in versions: api_version = newest_version return api_version. \n### Response: Get the API version specified or resolve the latest version\n\n    :return api version\n    :rtype: float.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public ErrorResponseFlyweight errorCode(final ErrorCode code) { buffer.putInt(offset + ERROR_CODE_OFFSET, code.value()); return this; } \n### Response:", "ground_truth": "Set the error code for the command.\n\n@param code for the error\n@return flyweight", "predict": "errorCode():\n\nThis method returns the error code associated with the given code.\n\n:param code: The error code to be returned. :return: The error code associated with the given code.\n:rtype: int.\n\nNote: This method is part of the ErrorResponseFlyweight class, which is used to handle errors in a RESTful API. It is used to store the error code in the response buffer and return it to the client."}, {"ID": 1895, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @SuppressWarnings({\"unused\", \"WeakerAccess\"}) public void enableDeviceNetworkInfoReporting(boolean value){ enableNetworkInfoReporting = value; StorageHelper.putBoolean(context,storageKeyWithSuffix(Constants.NETWORK_INFO),enableNetworkInfoReporting); getConfigLogger().verbose(getAccountId(), \"Device Network Information reporting set to \" + enableNetworkInfoReporting); }. \n### Response: Use this method to enable device network-related information tracking, including IP address.\nThis reporting is disabled by default.  To re-disable tracking call this method with enabled set to false.\n\n@param value  boolean Whether device network info reporting should be enabled/disabled..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void reset() { isBallotSent = false; isLeader = false; hasRequestedJoin = false; hasSentTerminationAck = false; vote = null; candidateTermId = Aeron.NULL_VALUE; leadershipTermId = Aeron.NULL_VALUE; logPosition = NULL_POSITION; } \n### Response:", "ground_truth": "Reset the state of a cluster member so it can be canvassed and reestablished.", "predict": "This method resets the state of various election-related variables to their default values.\n\n@return void The method sets the state of variables to their default values.\n\nNote: This method is used to reset the state of election-related variables after an election has ended. It is typically called by an election administrator to clear out any remaining data or to prepare for a new election."}, {"ID": 1896, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def guessImageMetadataFromData(img_data): \"\"\" Identify an image format and size from its first bytes. \"\"\" format, width, height = None, None, None img_stream = io.BytesIO(img_data) try: img = PIL.Image.open(img_stream) except IOError: format = imghdr.what(None, h=img_data) format = SUPPORTED_IMG_FORMATS.get(format, None) else: format = img.format.lower() format = SUPPORTED_IMG_FORMATS.get(format, None) width, height = img.size return format, width, height. \n### Response: Identify an image format and size from its first bytes..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static String encodeAsString(final ClusterMember[] clusterMembers) { final StringBuilder builder = new StringBuilder(); for (int i = 0, length = clusterMembers.length; i < length; i++) { final ClusterMember member = clusterMembers[i]; builder .append(member.id()) .append(',') .append(member.endpointsDetail()); if ((length - 1) != i) { builder.append('|'); } } return builder.toString(); } \n### Response:", "ground_truth": "Encode member details from a cluster members array to a string.\n\n@param clusterMembers to fill the details from\n@return String representation suitable for use with {@link ClusterMember#parse}", "predict": "encodeAsString(final ClusterMember[] clusterMembers)"}, {"ID": 1897, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func serializeScriptAddress(encryptedHash, encryptedScript []byte) []byte { // The serialized script address raw data format is: // <encscripthashlen><encscripthash><encscriptlen><encscript> // // 4 bytes encrypted script hash len + encrypted script hash + 4 bytes // encrypted script len + encrypted script hashLen := uint32(len(encryptedHash)) scriptLen := uint32(len(encryptedScript)) rawData := make([]byte, 8+hashLen+scriptLen) binary.LittleEndian.PutUint32(rawData[0:4], hashLen) copy(rawData[4:4+hashLen], encryptedHash) offset := 4 + hashLen binary.LittleEndian.PutUint32(rawData[offset:offset+4], scriptLen) offset += 4 copy(rawData[offset:offset+scriptLen], encryptedScript) return rawData }. \n### Response: // serializeScriptAddress returns the serialization of the raw data field for\n// a script address..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void addMemberStatusPublications( final ClusterMember[] members, final ClusterMember exclude, final ChannelUri channelUri, final int streamId, final Aeron aeron) { for (final ClusterMember member : members) { if (member != exclude) { channelUri.put(ENDPOINT_PARAM_NAME, member.memberFacingEndpoint()); member.publication = aeron.addExclusivePublication(channelUri.toString(), streamId); } } } \n### Response:", "ground_truth": "Add the publications for sending status messages to the other members of the cluster.\n\n@param members    of the cluster.\n@param exclude    this member when adding publications.\n@param channelUri for the publication.\n@param streamId   for the publication.\n@param aeron      to add the publications to.", "predict": "// addMemberStatusPublications returns a method that adds member status publications to the channel.."}, {"ID": 1898, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (d *Death) WaitForDeath(closable ...io.Closer) (err error) { d.wg.Wait() d.log.Info(\"Shutdown started...\") count := len(closable) d.log.Debug(\"Closing \", count, \" objects\") if count > 0 { return d.closeInMass(closable...) } return nil }. \n### Response: // WaitForDeath wait for signal and then kill all items that need to die. If they fail to\n// die when instructed we return an error.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void closeMemberPublications(final ClusterMember[] clusterMembers) { for (final ClusterMember member : clusterMembers) { CloseHelper.close(member.publication); } } \n### Response:", "ground_truth": "Close the publications associated with members of the cluster.\n\n@param clusterMembers to close the publications for.", "predict": "// CloseMemberPublications closes all member publications in the given cluster members."}, {"ID": 1899, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func parse(text []byte) (t *tree, err error) { t = &tree{ text: text, } err = t.Parse(text) return }. \n### Response: // Parse returns a Tree, created by parsing the configuration described in the\n// argument string. If an error is encountered, parsing stops and an empty Tree\n// is returned with the error..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static boolean hasActiveQuorum( final ClusterMember[] clusterMembers, final long nowMs, final long timeoutMs) { int threshold = quorumThreshold(clusterMembers.length); for (final ClusterMember member : clusterMembers) { if (member.isLeader() || nowMs <= (member.timeOfLastAppendPositionMs() + timeoutMs)) { if (--threshold <= 0) { return true; } } } return false; } \n### Response:", "ground_truth": "Check if the cluster leader has an active quorum of cluster followers.\n\n@param clusterMembers for the current cluster.\n@param nowMs          for the current time.\n@param timeoutMs      after which a follower is not considered active.\n@return true if quorum of cluster members are considered active.", "predict": "// Has active quorum for the cluster.\n// Return true if there is a leader and the current time is within the timeout,\n// otherwise return false.\n\n// Quorum threshold is calculated based on the number of members in the cluster.\n// For each member, check if it is the leader and if the current time is within the timeout.\n// If any member is a leader and the current time is within the timeout, return true.\n// Otherwise, return false."}, {"ID": 1900, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void updateDatabase() { if (getMainConfig().getInt(\"Database.dbVersion\") == 0) { alertOldDbVersion(0, 1); //We first check if we have the DB version in the database. If we do, we have a old layout in our hands String value = getStorageHandler().getStorageEngine().getConfigEntry(\"dbVersion\"); if (value != null) { //We have a old database, do the whole conversion try { new OldFormatConverter().run(); getMainConfig().setValue(\"Database.dbVersion\", 1); sendConsoleMessage(Level.INFO, \"Updated to Revision 1!\"); } catch (SQLException e) { e.printStackTrace(); } catch (IOException e) { e.printStackTrace(); } catch (ParseException e) { e.printStackTrace(); } } else { getMainConfig().setValue(\"Database.dbVersion\", 1); sendConsoleMessage(Level.INFO, \"Updated to Revision 1!\"); } } else if (getMainConfig().getInt(\"Database.dbVersion\") == -1) { alertOldDbVersion(-1,1); try { new OldFormatConverter().step2(); getMainConfig().setValue(\"Database.dbVersion\", 1); sendConsoleMessage(Level.INFO, \"Updated to Revision 1!\"); } catch (SQLException e) { e.printStackTrace(); } catch (IOException e) { e.printStackTrace(); } catch (ParseException e) { e.printStackTrace(); } } }. \n### Response: Run a database update..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static long quorumPosition(final ClusterMember[] members, final long[] rankedPositions) { final int length = rankedPositions.length; for (int i = 0; i < length; i++) { rankedPositions[i] = 0; } for (final ClusterMember member : members) { long newPosition = member.logPosition; for (int i = 0; i < length; i++) { final long rankedPosition = rankedPositions[i]; if (newPosition > rankedPosition) { rankedPositions[i] = newPosition; newPosition = rankedPosition; } } } return rankedPositions[length - 1]; } \n### Response:", "ground_truth": "Calculate the position reached by a quorum of cluster members.\n\n@param members         of the cluster.\n@param rankedPositions temp array to be used for sorting the positions to avoid allocation.\n@return the position reached by a quorum of cluster members.", "predict": "This method calculates the quorum position of a cluster by iterating through all members and updating the rankedPositions array accordingly. It also returns the last rankedPosition in the array."}, {"ID": 1901, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function isDimensionsEqual() { if($this->image1->getImageWidth() !== $this->image2->getImageWidth() || $this->image1->getImageHeight() !== $this->image2->getImageHeight()) { return FALSE; } return TRUE; }. \n### Response: Check if dimensions of images is equal.\n@return bool.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void resetLogPositions(final ClusterMember[] clusterMembers, final long logPosition) { for (final ClusterMember member : clusterMembers) { member.logPosition(logPosition); } } \n### Response:", "ground_truth": "Reset the log position of all the members to the provided value.\n\n@param clusterMembers to be reset.\n@param logPosition    to set for them all.", "predict": "Resets log position information for all cluster members.\n@param ClusterMember[] clusterMembers The array of cluster members to reset the log position information for.\n@param long logPosition The long value representing the log position to reset the information for."}, {"ID": 1902, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected synchronized void deleteFinalizedObjects () { if (_finalizedSources != null) { IntBuffer idbuf = BufferUtils.createIntBuffer(_finalizedSources.length); idbuf.put(_finalizedSources).rewind(); AL10.alDeleteSources(idbuf); _finalizedSources = null; } if (_finalizedBuffers != null) { IntBuffer idbuf = BufferUtils.createIntBuffer(_finalizedBuffers.length); idbuf.put(_finalizedBuffers).rewind(); AL10.alDeleteBuffers(idbuf); _finalizedBuffers = null; } }. \n### Response: Deletes all finalized objects..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static boolean haveVotersReachedPosition( final ClusterMember[] clusterMembers, final long position, final long leadershipTermId) { for (final ClusterMember member : clusterMembers) { if (member.vote != null && (member.logPosition < position || member.leadershipTermId != leadershipTermId)) { return false; } } return true; } \n### Response:", "ground_truth": "Has the members of the cluster the voted reached the provided position in their log.\n\n@param clusterMembers   to check.\n@param position         to compare the {@link #logPosition()} against.\n@param leadershipTermId expected of the members.\n@return true if all members have reached this position otherwise false.", "predict": "This method checks if any cluster member has a vote and has a position that is less than the given position or has a leadership termId that is different from the given leadershipTermId. It iterates through the cluster members and returns false if any of the conditions are met. Returns true if all conditions are met."}, {"ID": 1903, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: async def wait(self, need_pts=False) -> dict: \"\"\"Send long poll request :param need_pts: need return the pts field \"\"\" if not self.base_url: await self._get_long_poll_server(need_pts) params = { 'ts': self.ts, 'key': self.key, } params.update(self.base_params) # invalid mimetype from server code, response = await self.api._session.driver.get_text( self.base_url, params, timeout=2 * self.base_params['wait'] ) if code == 403: raise VkLongPollError(403, 'smth weth wrong', self.base_url + '/', params) response = json.loads(response) failed = response.get('failed') if not failed: self.ts = response['ts'] return response if failed == 1: self.ts = response['ts'] elif failed == 4: raise VkLongPollError( 4, 'An invalid version number was passed in the version parameter', self.base_url + '/', params ) else: self.base_url = None return await self.wait(). \n### Response: Send long poll request\n\n        :param need_pts: need return the pts field.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static boolean hasWonVoteOnFullCount(final ClusterMember[] members, final long candidateTermId) { int votes = 0; for (final ClusterMember member : members) { if (null == member.vote || member.candidateTermId != candidateTermId) { return false; } votes += member.vote ? 1 : 0; } return votes >= ClusterMember.quorumThreshold(members.length); } \n### Response:", "ground_truth": "Has the candidate got unanimous support of the cluster?\n\n@param members         to check for votes.\n@param candidateTermId for the vote.\n@return false if any member has not voted for the candidate.", "predict": "Method-level comment:\n```\n* This method returns the boolean value indicating whether the candidate has won the vote on full count for each member in the given cluster.\n* The method iterates through the members of the given cluster and checks if any of them have a null vote or a different candidateTermId than the candidateTermId passed in. If such a member is found, the method returns false.\n* The method then increments the votes variable for each member and returns the total number of votes greater than thequorumThreshold(members.length) which is a constant defined in the method.\n```"}, {"ID": 1904, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def add_self_service_category(new_cat, display_in: true, feature_in: false) new_cat = JSS::Category.map_all_ids_to(:name, api: @api)[new_cat] if new_cat.is_a? Integer feature_in = false if display_in == false raise JSS::NoSuchItemError, \"No category '#{new_cat}' in the JSS\" unless JSS::Category.all_names(:refresh, api: @api).include? new_cat raise JSS::InvalidDataError, 'display_in must be true or false' unless display_in.jss_boolean? raise JSS::InvalidDataError, 'feature_in must be true or false' unless feature_in.jss_boolean? new_data = { name: new_cat } new_data[:display_in] = display_in if @self_service_data_config[:can_display_in_categories] new_data[:feature_in] = feature_in if @self_service_data_config[:can_feature_in_categories] # see if this category is already among our categories. idx = @self_service_categories.index { |c| c[:name] == new_cat } if idx @self_service_categories[idx] = new_data else @self_service_categories << new_data end @need_to_update = true end. \n### Response: Add or change one of the categories for this item in self service\n\n @param new_cat[String, Integer] the name or id of a category where this\n   object should appear in SelfSvc\n\n @param display_in[Boolean] should this item appear in the SelfSvc page for\n  the category? Only meaningful in applicable classes\n\n @param feature_in[Boolean] should this item be featured in the SelfSvc page\n   for the category? Only meaningful in applicable classes.\n   NOTE: this will always be false if display_in is false.\n\n @return [void].\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static boolean hasMajorityVote(final ClusterMember[] clusterMembers, final long candidateTermId) { int votes = 0; for (final ClusterMember member : clusterMembers) { if (Boolean.TRUE.equals(member.vote) && member.candidateTermId == candidateTermId) { ++votes; } } return votes >= ClusterMember.quorumThreshold(clusterMembers.length); } \n### Response:", "ground_truth": "Has sufficient votes being counted for a majority?\n\n@param clusterMembers  to check for votes.\n@param candidateTermId for the vote.\n@return true if a majority of positive votes.", "predict": "This method checks if a majority of the cluster members have cast a vote for a particular candidate termId.\n\n @param clusterMembers[ClusterMember[]] the cluster members to check for a majority vote\n @param candidateTermId[Long] the candidate termId to check for a majority vote\n\n @return [Boolean] true if a majority of the cluster members have cast a vote for the specified candidate termId, otherwise false.\n\nNote: This method iterates through each cluster member and checks if they have cast a vote and if the candidate termId is equal to the specified candidate termId. If it finds a majority of the cluster members have cast a vote, it returns true. If not, it returns false."}, {"ID": 1905, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function sort(array $data) { foreach ($data['item'] as $position => $item) { $page = $this->find($item['id']); $sortData = $this->getSortData($position + 1, $item); $page->update($sortData); if ($data['moved'] == $item['id']) { $this->fireResetChildrenUriEvent($page); } } $this->forgetCache(); }. \n### Response: Sort models.\n\n@param array $data updated data\n\n@return null.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static ClusterMember determineMember( final ClusterMember[] clusterMembers, final int memberId, final String memberEndpoints) { ClusterMember member = NULL_VALUE != memberId ? ClusterMember.findMember(clusterMembers, memberId) : null; if ((null == clusterMembers || 0 == clusterMembers.length) && null == member) { member = ClusterMember.parseEndpoints(NULL_VALUE, memberEndpoints); } else { if (null == member) { throw new ClusterException(\"memberId=\" + memberId + \" not found in clusterMembers\"); } if (!\"\".equals(memberEndpoints)) { ClusterMember.validateMemberEndpoints(member, memberEndpoints); } } return member; } \n### Response:", "ground_truth": "Determine which member of a cluster this is and check endpoints.\n\n@param clusterMembers  for the current cluster which can be null.\n@param memberId        for this member.\n@param memberEndpoints for this member.\n@return the {@link ClusterMember} determined.", "predict": "Determines the member with the given ID and endpoint strings from the cluster Members array.\n\n@param ClusterMember[] clusterMembers array of cluster Members\n@param int memberId the ID of the member to find\n@param String memberEndpoints the endpoint strings of the member to validate\n@return the found or parsed member or null if not found.\n\nNote: This method is used to determine the member with the given ID and endpoint strings from the cluster Members array. It first checks if the member with the given ID is already present in the cluster Members array. If not, it uses the `findMember` method to find the member. If the member is not found, it uses the `parseEndpoints` method to parse the endpoint strings of the member and then uses the `validateMemberEndpoints` method to validate the endpoint strings. If the endpoint strings are valid, it returns the member. If the endpoint strings are invalid, it throws a `ClusterException` with the message \"memberId=\" + memberId + \" not found in clusterMembers\"."}, {"ID": 1906, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def _read_bks_key(cls, data, pos, store_type): \"\"\"Given a data stream, attempt to parse a stored BKS key entry at the given position, and return it as a BksKeyEntry.\"\"\" key_type = b1.unpack_from(data, pos)[0]; pos += 1 key_format, pos = BksKeyStore._read_utf(data, pos, kind=\"key format\") key_algorithm, pos = BksKeyStore._read_utf(data, pos, kind=\"key algorithm\") key_enc, pos = BksKeyStore._read_data(data, pos) entry = BksKeyEntry(key_type, key_format, key_algorithm, key_enc, store_type=store_type) return entry, pos. \n### Response: Given a data stream, attempt to parse a stored BKS key entry at the given position, and return it as a BksKeyEntry..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void validateMemberEndpoints(final ClusterMember member, final String memberEndpoints) { final ClusterMember endpointMember = ClusterMember.parseEndpoints(Aeron.NULL_VALUE, memberEndpoints); if (!areSameEndpoints(member, endpointMember)) { throw new ClusterException( \"clusterMembers and memberEndpoints differ: \" + member.endpointsDetail() + \" != \" + memberEndpoints); } } \n### Response:", "ground_truth": "Check the member with the memberEndpoints\n\n@param member          to check memberEndpoints against\n@param memberEndpoints to check member against\n@see ConsensusModule.Context#memberEndpoints()\n@see ConsensusModule.Context#clusterMembers()", "predict": "validateMemberEndpoints():\nValidates the member endpoints of a given cluster member.\n\n* Parses the member endpoints from the given string and stores them in the endpointMember object.\n* If the member and endpointMember do not have the same endpoints, throws a ClusterException with a message indicating the difference.\n\nNote: This method is used to validate the member endpoints of a given cluster member, ensuring that they are the same as those specified in the memberEndpoints string."}, {"ID": 1907, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (m *MockConnector) Nats() *go_nats.Conn { ret := m.ctrl.Call(m, \"Nats\") ret0, _ := ret[0].(*go_nats.Conn) return ret0 }. \n### Response: // Nats mocks base method.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static boolean areSameEndpoints(final ClusterMember lhs, final ClusterMember rhs) { return lhs.clientFacingEndpoint().equals(rhs.clientFacingEndpoint()) && lhs.memberFacingEndpoint().equals(rhs.memberFacingEndpoint()) && lhs.logEndpoint().equals(rhs.logEndpoint()) && lhs.transferEndpoint().equals(rhs.transferEndpoint()) && lhs.archiveEndpoint().equals(rhs.archiveEndpoint()); } \n### Response:", "ground_truth": "Are two cluster members using the same endpoints?\n\n@param lhs to check\n@param rhs to check\n@return true if both are using the same endpoints or false if not.", "predict": "// Are same endpoints true or false."}, {"ID": 1908, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public ResultMatcher isPresent() { return new AbstractResultMatcher(path, configuration) { public void doMatch(Object actual) { isPresent(actual); } }; }. \n### Response: Fails if the node is missing..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static boolean isUnanimousCandidate(final ClusterMember[] clusterMembers, final ClusterMember candidate) { for (final ClusterMember member : clusterMembers) { if (NULL_POSITION == member.logPosition || compareLog(candidate, member) < 0) { return false; } } return true; } \n### Response:", "ground_truth": "Has the member achieved a unanimous view to be a suitable candidate in an election.\n\n@param clusterMembers to compare the candidate against.\n@param candidate      for leadership.\n@return true if the candidate is suitable otherwise false.", "predict": "This method checks if a given candidate is a UnanimousCandidate, which means that all cluster members must agree on its position. It does this by iterating through all cluster members in the given array and comparing their logPosition to the candidate's logPosition. If any member's logPosition is NULL or its compareLog method returns a negative value, it means that the candidate is not a UnanimousCandidate and the method returns false. If all members agree on the candidate's position, the method returns true."}, {"ID": 1909, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def parent_of(self, name): \"\"\" go to parent of node with name, and set as cur_node. Useful for creating new paragraphs \"\"\" if not self._in_tag(name): return node = self.cur_node while node.tag != name: node = node.getparent() self.cur_node = node.getparent(). \n### Response: go to parent of node with name, and set as cur_node.  Useful\n        for creating new paragraphs.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static boolean isQuorumCandidate(final ClusterMember[] clusterMembers, final ClusterMember candidate) { int possibleVotes = 0; for (final ClusterMember member : clusterMembers) { if (NULL_POSITION == member.logPosition || compareLog(candidate, member) < 0) { continue; } ++possibleVotes; } return possibleVotes >= ClusterMember.quorumThreshold(clusterMembers.length); } \n### Response:", "ground_truth": "Has the member achieved a quorum view to be a suitable candidate in an election.\n\n@param clusterMembers to compare the candidate against.\n@param candidate      for leadership.\n@return true if the candidate is suitable otherwise false.", "predict": "This method determines if a candidate is aquorum candidate by iterating through all cluster members and checking if they have a NULL_POSITION and if their logPosition is less than zero. It then increments a possibleVotes variable and returns true if it reaches thequorumThreshold(clusterMembers.length) value. This method is useful for checking if a candidate is eligible to be selected as the leader."}, {"ID": 1910, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function setDefaultValue($defaultValue): FieldInterface { if (!is_scalar($defaultValue) && !is_null($defaultValue)) { throw new \\InvalidArgumentException( \"invalid value provided for 'defaultValue'; \". \"expecting either a scalar or null value\" ); } $this->defaultValue = $defaultValue; return $this; }. \n### Response: Set the default value for the field\n\n@param mixed $defaultValue A scalar value\n@return \\sndsgd\\form\\field\\ValueField\n@throws \\InvalidArgumentException.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static boolean isNotDuplicateEndpoints(final ClusterMember[] members, final String memberEndpoints) { for (final ClusterMember member : members) { if (member.endpointsDetail().equals(memberEndpoints)) { return false; } } return true; } \n### Response:", "ground_truth": "Is the string of member endpoints not duplicated in the members.\n\n@param members         to check if the provided endpoints have a duplicate.\n@param memberEndpoints to check for duplicates.\n@return true if no duplicate is found otherwise false.", "predict": "Method to check if there are no duplicate endpoints for a given cluster member array and member endpoint string.\n\n@param ClusterMember[] members The array of cluster members\n@param String memberEndpoints The member endpoint string\n@return boolean True if no duplicate endpoints are found, otherwise false."}, {"ID": 1911, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def _get_site(self, url, headers, cookies, timeout, driver_args, driver_kwargs): \"\"\" Try and return page content in the requested format using selenium \"\"\" try: # **TODO**: Find what exception this will throw and catch it and call # self.driver.execute_script(\"window.stop()\") # Then still try and get the source from the page self.driver.set_page_load_timeout(timeout) self.driver.get(url) header_data = self.get_selenium_header() status_code = header_data['status-code'] # Set data to access from script self.status_code = status_code self.url = self.driver.current_url except TimeoutException: logger.warning(\"Page timeout: {}\".format(url)) try: scraper_monitor.failed_url(url, 'Timeout') except (NameError, AttributeError): # Happens when scraper_monitor is not being used/setup pass except Exception: logger.exception(\"Unknown problem with scraper_monitor sending a failed url\") except Exception as e: raise e.with_traceback(sys.exc_info()[2]) else: # If an exception was not thrown then check the http status code if status_code < 400: # If the http status code is not an error return self.driver.page_source else: # If http status code is 400 or greater raise SeleniumHTTPError(\"Status code >= 400\", status_code=status_code). \n### Response: Try and return page content in the requested format using selenium.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static int findMemberIndex(final ClusterMember[] clusterMembers, final int memberId) { final int length = clusterMembers.length; int index = ArrayUtil.UNKNOWN_INDEX; for (int i = 0; i < length; i++) { if (clusterMembers[i].id() == memberId) { index = i; } } return index; } \n### Response:", "ground_truth": "Find the index at which a member id is present.\n\n@param clusterMembers to be searched.\n@param memberId       to search for.\n@return the index at which the member id is found otherwise {@link ArrayUtil#UNKNOWN_INDEX}.", "predict": "Find member index for given memberId in clusterMembers array."}, {"ID": 1912, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (c *CORS) generatePatterns() { if c.AllowOrigins != nil { for _, origin := range c.AllowOrigins { pattern := regexp.QuoteMeta(origin) pattern = strings.Replace(pattern, \"\\\\*\", \".*\", -1) pattern = strings.Replace(pattern, \"\\\\?\", \".\", -1) c.allowOriginPatterns = append(c.allowOriginPatterns, \"^\"+pattern+\"$\") } } }. \n### Response: // generatePatterns generates regex expression for AllowOrigins.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static ClusterMember[] removeMember(final ClusterMember[] oldMembers, final int memberId) { return ArrayUtil.remove(oldMembers, findMemberIndex(oldMembers, memberId)); } \n### Response:", "ground_truth": "Remove a member from an array if found, otherwise return the array unmodified.\n\n@param oldMembers to remove a member from.\n@param memberId   of the member to remove.\n@return a new array with the member removed or the existing array if not found.", "predict": "// Remove a member from the old Members array and return the modified array."}, {"ID": 1913, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected function maybe_show_password_form() { if ( $this->password_required() ) { $show_pw = false; $show_pw = apply_filters('timber/post/content/show_password_form_for_protected', $show_pw); if ( $show_pw ) { return apply_filters('timber/post/content/password_form', get_the_password_form($this->ID), $this); } } }. \n### Response: If the Password form is to be shown, show it!\n@return string|void.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static int highMemberId(final ClusterMember[] clusterMembers) { int highId = Aeron.NULL_VALUE; for (final ClusterMember member : clusterMembers) { highId = Math.max(highId, member.id()); } return highId; } \n### Response:", "ground_truth": "Find the highest member id in an array of members.\n\n@param clusterMembers to search for the highest id.\n@return the highest id otherwise {@link Aeron#NULL_VALUE} if empty.", "predict": "This method returns the maximum member ID from a list of cluster Members.\n@return int."}, {"ID": 1914, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def _read(self): \"\"\"Read the kube config file. \"\"\" stream = self.path.read_text() data = yaml.load(stream) return data. \n### Response: Read the kube config file..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public MappedByteBuffer mapExistingCncFile(final Consumer<String> logger) { final File cncFile = new File(aeronDirectory, CncFileDescriptor.CNC_FILE); if (cncFile.exists() && cncFile.length() > 0) { if (null != logger) { logger.accept(\"INFO: Aeron CnC file exists: \" + cncFile); } return IoUtil.mapExistingFile(cncFile, CncFileDescriptor.CNC_FILE); } return null; } \n### Response:", "ground_truth": "Map the CnC file if it exists.\n\n@param logger for feedback\n@return a new mapping for the file if it exists otherwise null;", "predict": "This method maps existing Cnc files in the Aeron directory to MappedByteBuffers using the IoUtil class. It takes a consumer of a string as a parameter, which is used to log information about the mapping process. If the Cnc file exists and has at least one byte, the method returns it as a MappedByteBuffer. If the logger is not null, it logs an info message about the existing CnC file. If the logger is null, the method does not log anything."}, {"ID": 1915, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private function getFiles() { $file = $this->event->get('document'); $response = $this->http->get($this->buildApiUrl('getFile'), [ 'file_id' => $file['file_id'], ]); $responseData = json_decode($response->getContent()); if ($response->getStatusCode() !== 200) { throw new TelegramAttachmentException('Error retrieving file url: '.$responseData->description); } $url = $this->buildFileApiUrl($responseData->result->file_path); return [new File($url, $file)]; }. \n### Response: Retrieve a file from an incoming message.\n@return array A download for the files.\n@throws TelegramAttachmentException.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static boolean isDriverActive( final File directory, final long driverTimeoutMs, final Consumer<String> logger) { final File cncFile = new File(directory, CncFileDescriptor.CNC_FILE); if (cncFile.exists() && cncFile.length() > 0) { logger.accept(\"INFO: Aeron CnC file exists: \" + cncFile); final MappedByteBuffer cncByteBuffer = IoUtil.mapExistingFile(cncFile, \"CnC file\"); try { return isDriverActive(driverTimeoutMs, logger, cncByteBuffer); } finally { IoUtil.unmap(cncByteBuffer); } } return false; } \n### Response:", "ground_truth": "Is a media driver active in the given directory?\n\n@param directory       to check\n@param driverTimeoutMs for the driver liveness check.\n@param logger          for feedback as liveness checked.\n@return true if a driver is active or false if not.", "predict": "Implement a method to check if a driver is active in the system.\n@param directory The root directory for the driver's workspace.\n@param driverTimeoutMs The maximum amount of time the driver should wait for a response from the server.\n@param logger The logger for the method.\n@return Whether the driver is active or not.\n@throws CncException If there is an error while checking the driver's status."}, {"ID": 1916, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected function getTableConstraintDeclarationSQL(Constraint $constraint, $name = null) { if ($constraint instanceof ForeignKeyConstraint) { return $this->getForeignKeyDeclarationSQL($constraint); } if (! $constraint instanceof Index) { throw new InvalidArgumentException('Unsupported constraint type: ' . get_class($constraint)); } if (! $constraint->isPrimary() && ! $constraint->isUnique()) { throw new InvalidArgumentException( 'Can only create primary, unique or foreign key constraint declarations, no common index declarations ' . 'with getTableConstraintDeclarationSQL().' ); } $constraintColumns = $constraint->getQuotedColumns($this); if (empty($constraintColumns)) { throw new InvalidArgumentException(\"Incomplete definition. 'columns' required.\"); } $sql = ''; $flags = ''; if (! empty($name)) { $name = new Identifier($name); $sql .= 'CONSTRAINT ' . $name->getQuotedName($this) . ' '; } if ($constraint->hasFlag('clustered')) { $flags = 'CLUSTERED '; } if ($constraint->isPrimary()) { return $sql . 'PRIMARY KEY ' . $flags . '(' . $this->getIndexFieldDeclarationListSQL($constraintColumns) . ')'; } return $sql . 'UNIQUE ' . $flags . '(' . $this->getIndexFieldDeclarationListSQL($constraintColumns) . ')'; }. \n### Response: Returns the SQL snippet for creating a table constraint.\n\n@param Constraint  $constraint The table constraint to create the SQL snippet for.\n@param string|null $name       The table constraint name to use if any.\n\n@return string\n\n@throws InvalidArgumentException If the given table constraint type is not supported by this method..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public boolean isDriverActive(final long driverTimeoutMs, final Consumer<String> logger) { final MappedByteBuffer cncByteBuffer = mapExistingCncFile(logger); try { return isDriverActive(driverTimeoutMs, logger, cncByteBuffer); } finally { IoUtil.unmap(cncByteBuffer); } } \n### Response:", "ground_truth": "Is a media driver active in the current Aeron directory?\n\n@param driverTimeoutMs for the driver liveness check.\n@param logger          for feedback as liveness checked.\n@return true if a driver is active or false if not.", "predict": "Returns the status of the nc driver.\n\n@param long driverTimeoutMs The maximum amount of time the nc driver should wait for a connection.\n@param Consumer<String> logger The logger to use for logging.\n@return boolean\n\n@try {\n    // Map the existing nc file\n    //...\n    // Unmap the nc buffer\n    //...\n} finally {\n    // Unmap the buffer\n    //...\n}\n}\n\n"}, {"ID": 1917, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function getConfigFromLS() { var configStr = localStorage[getFullBSKey(browser_storage_config_1.browserStorageConfig.DB_CONFIG_KEY)]; if (typeof configStr === 'undefined') { return null; } else { return JSON.parse(configStr); } }. \n### Response: get config from browser storage and deserialize to JSON.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static boolean isDriverActive( final long driverTimeoutMs, final Consumer<String> logger, final ByteBuffer cncByteBuffer) { if (null == cncByteBuffer) { return false; } final UnsafeBuffer cncMetaDataBuffer = CncFileDescriptor.createMetaDataBuffer(cncByteBuffer); final long startTimeMs = System.currentTimeMillis(); int cncVersion; while (0 == (cncVersion = cncMetaDataBuffer.getIntVolatile(CncFileDescriptor.cncVersionOffset(0)))) { if (System.currentTimeMillis() > (startTimeMs + driverTimeoutMs)) { throw new DriverTimeoutException(\"CnC file is created but not initialised.\"); } sleep(1); } if (CNC_VERSION != cncVersion) { throw new AeronException( \"Aeron CnC version does not match: required=\" + CNC_VERSION + \" version=\" + cncVersion); } final ManyToOneRingBuffer toDriverBuffer = new ManyToOneRingBuffer( CncFileDescriptor.createToDriverBuffer(cncByteBuffer, cncMetaDataBuffer)); final long timestamp = toDriverBuffer.consumerHeartbeatTime(); final long now = System.currentTimeMillis(); final long timestampAge = now - timestamp; logger.accept(\"INFO: Aeron toDriver consumer heartbeat is (ms): \" + timestampAge); return timestampAge <= driverTimeoutMs; } \n### Response:", "ground_truth": "Is a media driver active in the current mapped CnC buffer? If the driver is mid start then it will wait for\nup to the driverTimeoutMs by checking for the cncVersion being set.\n\n@param driverTimeoutMs for the driver liveness check.\n@param logger          for feedback as liveness checked.\n@param cncByteBuffer   for the existing CnC file.\n@return true if a driver is active or false if not.", "predict": "This method is used to determine if the driver is active and has not expired its driver timeout. It first checks if the cncByteBuffer is null, and if so, it returns false. If the cncByteBuffer is not null, it creates a UnsafeBuffer and a CncFileDescriptor for the cncByteBuffer. It then starts a loop that checks the cncVersion of the cncByteBuffer and the CNC_VERSION of the required Aeron CnC version. If the cncVersion does not match, it throws an exception. It then creates a ManyToOneRingBuffer for the cncByteBuffer and a ToDriverBuffer. It then checks the consumerHeartbeatTime of the ToDriverBuffer and returns true if it is within the driverTimeoutMs. Finally, it logs an info message and returns the timestampAge <= driverTimeoutMs."}, {"ID": 1918, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private boolean useNetworkInterface(NetworkInterface networkInterface) throws HarvestException { try { return !networkInterface.isLoopback() && networkInterface.isUp(); } catch (SocketException e) { throw new HarvestException(\"Could not evaluate whether network interface is loopback.\", e); } }. \n### Response: Decides whether a certain network interface can be used as a host\ncandidate.\n\n@param networkInterface\nThe network interface to evaluate\n@return true if the interface can be used. Returns\nfalse, otherwise.\n@throws HarvestException\nWhen an error occurs while inspecting the interface..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static boolean requestDriverTermination( final File directory, final DirectBuffer tokenBuffer, final int tokenOffset, final int tokenLength) { final File cncFile = new File(directory, CncFileDescriptor.CNC_FILE); if (cncFile.exists() && cncFile.length() > 0) { final MappedByteBuffer cncByteBuffer = IoUtil.mapExistingFile(cncFile, \"CnC file\"); try { final UnsafeBuffer cncMetaDataBuffer = CncFileDescriptor.createMetaDataBuffer(cncByteBuffer); final int cncVersion = cncMetaDataBuffer.getIntVolatile(cncVersionOffset(0)); if (CncFileDescriptor.CNC_VERSION != cncVersion) { throw new AeronException( \"Aeron CnC version does not match: required=\" + CNC_VERSION + \" version=\" + cncVersion); } final ManyToOneRingBuffer toDriverBuffer = new ManyToOneRingBuffer( CncFileDescriptor.createToDriverBuffer(cncByteBuffer, cncMetaDataBuffer)); final long clientId = toDriverBuffer.nextCorrelationId(); final DriverProxy driverProxy = new DriverProxy(toDriverBuffer, clientId); return driverProxy.terminateDriver(tokenBuffer, tokenOffset, tokenLength); } finally { IoUtil.unmap(cncByteBuffer); } } return false; } \n### Response:", "ground_truth": "Request a driver to run its termination hook.\n\n@param directory for the driver.\n@param tokenBuffer containing the optional token for the request.\n@param tokenOffset within the tokenBuffer at which the token begins.\n@param tokenLength of the token in the tokenBuffer.\n@return true if request was sent or false if request could not be sent.", "predict": "Requests the termination of a driver using the specified token buffer, directory, offset, and length.\n\n@param directory\nThe directory to search for CnC files\n@param tokenBuffer\nThe token buffer to use for termination\n@param tokenOffset\nThe offset in the token buffer to start looking for CnC files\n@param tokenLength\nThe length in bytes of the token buffer to use for termination\n@return true if a CnC file was found, false otherwise\n@throws AeronException\nWhen an error occurs while searching for CnC files."}, {"ID": 1919, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def cli_info(data, title='Info'): ''' Prints an info on CLI with the title. Useful for infos, general errors etc. :param data: :param title: :return: ''' wrapper = textwrap.TextWrapper() wrapper.initial_indent = ' ' * 4 wrapper.subsequent_indent = wrapper.initial_indent return '{title}:\\n\\n{text}'.format(title=title, text=wrapper.fill(data)). \n### Response: Prints an info on CLI with the title.\n    Useful for infos, general errors etc.\n\n    :param data:\n    :param title:\n    :return:.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static int frameLengthVolatile(final UnsafeBuffer buffer, final int termOffset) { int frameLength = buffer.getIntVolatile(termOffset); if (ByteOrder.nativeOrder() != LITTLE_ENDIAN) { frameLength = Integer.reverseBytes(frameLength); } return frameLength; } \n### Response:", "ground_truth": "Get the length of a frame from the header as a volatile read.\n\n@param buffer     containing the frame.\n@param termOffset at which a frame begins.\n@return the value for the frame length.", "predict": "This method returns the length of a frame in bytes, stored in a volatile UnsafeBuffer. It first retrieves the length of the frame from the buffer, and then checks if the byte order of the native order is Little Endian or Big Endian. If the byte order is not the same as the expected, it reverses the bytes to match the expected order. The method returns the length of the reversed frame."}, {"ID": 1920, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function configValidator(ops) { let renderError = false; const { vuescroll } = ops; // validate modes if (!~modes.indexOf(vuescroll.mode)) { error( `Unknown mode: ${ vuescroll.mode },the vuescroll's option \"mode\" should be one of the ${modes}` ); renderError = true; } return renderError; }. \n### Response: validate the options\n@export\n@param {any} ops.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void frameLengthOrdered(final UnsafeBuffer buffer, final int termOffset, final int frameLength) { int length = frameLength; if (ByteOrder.nativeOrder() != LITTLE_ENDIAN) { length = Integer.reverseBytes(frameLength); } buffer.putIntOrdered(termOffset, length); } \n### Response:", "ground_truth": "Write the length header for a frame in a memory ordered fashion.\n\n@param buffer      containing the frame.\n@param termOffset  at which a frame begins.\n@param frameLength field to be set for the frame.", "predict": "This method is used to set the frame length in an UnsafeBuffer. It first calculates the length of the frame, and then if the byte order of the system is not Little Endian, it reverses the bytes. Finally, it calls the putIntOrdered method on the buffer to set the length.\n\n@static\n@param {UnsafeBuffer} buffer The UnsafeBuffer to set the frame length in.\n@param {int} termOffset The starting index of the term in the buffer.\n@param {int} frameLength The length of the frame in the buffer.\n@return None."}, {"ID": 1921, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def find_mapping(es_url, index): \"\"\" Find the mapping given an index \"\"\" mapping = None backend = find_perceval_backend(es_url, index) if backend: mapping = backend.get_elastic_mappings() if mapping: logging.debug(\"MAPPING FOUND:\\n%s\", json.dumps(json.loads(mapping['items']), indent=True)) return mapping. \n### Response: Find the mapping given an index.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void frameType(final UnsafeBuffer buffer, final int termOffset, final int type) { buffer.putShort(typeOffset(termOffset), (short)type, LITTLE_ENDIAN); } \n### Response:", "ground_truth": "Write the type field for a frame.\n\n@param buffer     containing the frame.\n@param termOffset at which a frame begins.\n@param type       type value for the frame.", "predict": "Method-level comment for `frameType`:\n```\npublic static void frameType(final UnsafeBuffer buffer, final int termOffset, final int type)\n```"}, {"ID": 1922, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void setRefreshDelayInSeconds(int refreshDelayInSeconds) { ValueOutOfRangeException.checkRange(Integer.valueOf(refreshDelayInSeconds), MIN_DELAY, Integer.valueOf(Integer.MAX_VALUE), getClass().getSimpleName() + \".refreshDelayInSeconds\"); this.refreshDelayInSeconds = refreshDelayInSeconds; }. \n### Response: This method sets the refresh-delay in seconds. A reasonable value should be at least 5 seconds but better in the\nrange of minutes.\n\n@param refreshDelayInSeconds is the refreshDelayInSeconds to set.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void frameFlags(final UnsafeBuffer buffer, final int termOffset, final byte flags) { buffer.putByte(flagsOffset(termOffset), flags); } \n### Response:", "ground_truth": "Write the flags field for a frame.\n\n@param buffer     containing the frame.\n@param termOffset at which a frame begins.\n@param flags      value for the frame.", "predict": "This method sets the frame flags for the given UnsafeBuffer and termOffset.\n\n@return This method returns void.\n\n"}, {"ID": 1923, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected function processCSSConfig($config) { if (!ArrayLib::is_associative($config)) { return array_fill_keys(array_values($config), null); } return $config; }. \n### Response: Processes the given CSS config and answers an array suitable for loading requirements.\n\n@param array $config\n\n@return array.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void frameTermOffset(final UnsafeBuffer buffer, final int termOffset) { buffer.putInt(termOffsetOffset(termOffset), termOffset, LITTLE_ENDIAN); } \n### Response:", "ground_truth": "Write the term offset field for a frame.\n\n@param buffer     containing the frame.\n@param termOffset at which a frame begins.", "predict": "Provides the frame term offset.\n\n@param UnsafeBuffer buffer\n\n@param int termOffset."}, {"ID": 1924, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public boolean update(){ boolean b = getForecast(String.valueOf(getLatitude()), String.valueOf(getLongitude())); return b; }. \n### Response: Does another query to the API and updates the data\nThis only updates the data in ForecastIO class\n@return True if successful.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void frameTermId(final UnsafeBuffer buffer, final int termOffset, final int termId) { buffer.putInt(termIdOffset(termOffset), termId, LITTLE_ENDIAN); } \n### Response:", "ground_truth": "Write the term id field for a frame.\n\n@param buffer     containing the frame.\n@param termOffset at which a frame begins.\n@param termId     value for the frame.", "predict": "This method performs a frame term ID calculation and writes the result to a UnsafeBuffer.\n@param buffer The UnsafeBuffer to write the result to.\n@param termOffset The offset in terms of the frame term ID.\n@param termId The frame term ID to calculate.\n@return The result of the frame term ID calculation.\n\nNote: This method is used for performance optimization by using UnsafeBuffer.putInt() method which is optimized for performance."}, {"ID": 1925, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def get_access_token(self, request): \"\"\" Get the access token based on a request. Returns None if no authentication details were provided. Raises AuthenticationFailed if the token is incorrect. \"\"\" header = authentication.get_authorization_header(request) if not header: return None header = header.decode(authentication.HTTP_HEADER_ENCODING) auth = header.split() if auth[0].lower() != 'bearer': return None if len(auth) == 1: msg = 'Invalid \"bearer\" header: No credentials provided.' raise exceptions.AuthenticationFailed(msg) elif len(auth) > 2: msg = 'Invalid \"bearer\" header: Credentials string should not contain spaces.' raise exceptions.AuthenticationFailed(msg) return auth[1]. \n### Response: Get the access token based on a request.\n\n        Returns None if no authentication details were provided. Raises\n        AuthenticationFailed if the token is incorrect..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static int findCounterIdByRecording(final CountersReader countersReader, final long recordingId) { final DirectBuffer buffer = countersReader.metaDataBuffer(); for (int i = 0, size = countersReader.maxCounterId(); i < size; i++) { if (countersReader.getCounterState(i) == RECORD_ALLOCATED) { final int recordOffset = CountersReader.metaDataOffset(i); if (buffer.getInt(recordOffset + TYPE_ID_OFFSET) == RECORDING_POSITION_TYPE_ID && buffer.getLong(recordOffset + KEY_OFFSET + RECORDING_ID_OFFSET) == recordingId) { return i; } } } return NULL_COUNTER_ID; } \n### Response:", "ground_truth": "Find the active counter id for a stream based on the recording id.\n\n@param countersReader to search within.\n@param recordingId    for the active recording.\n@return the counter id if found otherwise {@link CountersReader#NULL_COUNTER_ID}.", "predict": "FindCounterIdByRecording method returns the counter ID for the given recording ID.\n\n        It iterates through the countersReader and checks if the\n        counter state is RECORD_ALLOCATED. If it is, it checks if the\n        counter ID is within the range of the maximum counter ID and\n        record offset is within the meta data offset. If it finds a match,\n        it returns the counter ID. If no match is found, it returns NULL_COUNTER_ID.\n\n        Note: This method assumes that the countersReader has a meta data buffer\n        and that the recordingId is within the buffer's range.\n\n        Note 2: This method is a static method, so it can be called directly\n        on the CountersReader class without creating an instance of it."}, {"ID": 1926, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (re *JSRE) Bind(name string, v interface{}) error { return re.Set(name, v) }. \n### Response: // Bind assigns value v to a variable in the JS environment\n// This method is deprecated, use Set..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static int findCounterIdBySession(final CountersReader countersReader, final int sessionId) { final DirectBuffer buffer = countersReader.metaDataBuffer(); for (int i = 0, size = countersReader.maxCounterId(); i < size; i++) { if (countersReader.getCounterState(i) == RECORD_ALLOCATED) { final int recordOffset = CountersReader.metaDataOffset(i); if (buffer.getInt(recordOffset + TYPE_ID_OFFSET) == RECORDING_POSITION_TYPE_ID && buffer.getInt(recordOffset + KEY_OFFSET + SESSION_ID_OFFSET) == sessionId) { return i; } } } return NULL_COUNTER_ID; } \n### Response:", "ground_truth": "Find the active counter id for a stream based on the session id.\n\n@param countersReader to search within.\n@param sessionId      for the active recording.\n@return the counter id if found otherwise {@link CountersReader#NULL_COUNTER_ID}.", "predict": "// FindCounterIdBySession retrieves the counter ID for the specified sessionId from the CountersReader\n// This method returns NULL_COUNTER_ID if no matching counter ID is found\n\n// This method is a wrapper around the CountersReader.metaDataBuffer() method,\n// which retrieves the meta data for the specified counterId and sessionId.\n// It iterates through the counterId and sessionId, and returns the first matching counterId if found.\n// If no matching counterId is found, it returns NULL_COUNTER_ID.\n```csharp\n// findCounterIdBySession retrieves the counter ID for the specified sessionId from the CountersReader\n// This method returns NULL_COUNTER_ID if no matching counter ID is found\n```"}, {"ID": 1927, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (r *Resampler) SetRatio(ratio float64) { r.pos = int(float64(r.pos) * r.ratio / ratio) r.ratio = ratio }. \n### Response: // SetRatio sets the resampling ratio. This does not cause any glitches in the stream..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static long getRecordingId(final CountersReader countersReader, final int counterId) { final DirectBuffer buffer = countersReader.metaDataBuffer(); if (countersReader.getCounterState(counterId) == RECORD_ALLOCATED) { final int recordOffset = CountersReader.metaDataOffset(counterId); if (buffer.getInt(recordOffset + TYPE_ID_OFFSET) == RECORDING_POSITION_TYPE_ID) { return buffer.getLong(recordOffset + KEY_OFFSET + RECORDING_ID_OFFSET); } } return NULL_RECORDING_ID; } \n### Response:", "ground_truth": "Get the recording id for a given counter id.\n\n@param countersReader to search within.\n@param counterId      for the active recording.\n@return the counter id if found otherwise {@link #NULL_RECORDING_ID}.", "predict": "// GetRecordingId retrieves the recording ID from the meta-data buffer of the counter. This method does not cause any glitches in the stream."}, {"ID": 1928, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function compile() { $nodesVisited = []; /** * Checking the configuration. */ $this ->checkTransitionsConfiguration($this->configuration) ->checkPointOfEntry( $this->configuration, $this->pointOfEntry ) ->checkCycles( $this->configuration, $this->pointOfEntry, $nodesVisited ); /** * Once checked we compile the structure. */ $this->transitionChain = $this->compileTransitions($this->configuration); /** * We check the compilation. */ $this ->checkTransitionDuplicates($this->transitionChain) ->checkStates($this->transitionChain); $machine = $this ->machineFactory ->generate( $this->machineId, $this->transitionChain, $this->pointOfEntry ); return $machine; }. \n### Response: Compile machine.\n\n@throws TransitionNotValidException                  Transition not valid\n@throws StateNotValidException                       state is not valid\n@throws CyclesNotAllowedException                    Cycles found not allowed\n@throws InvalidPointOfEntryException                 Invalid point of entry\n@throws InconsistentTransitionConfigurationException Duplicated pair of\nstate-transition.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static boolean isActive(final CountersReader countersReader, final int counterId, final long recordingId) { final DirectBuffer buffer = countersReader.metaDataBuffer(); if (countersReader.getCounterState(counterId) == RECORD_ALLOCATED) { final int recordOffset = CountersReader.metaDataOffset(counterId); return buffer.getInt(recordOffset + TYPE_ID_OFFSET) == RECORDING_POSITION_TYPE_ID && buffer.getLong(recordOffset + KEY_OFFSET + RECORDING_ID_OFFSET) == recordingId; } return false; } \n### Response:", "ground_truth": "Is the recording counter still active.\n\n@param countersReader to search within.\n@param counterId      to search for.\n@param recordingId    to confirm it is still the same value.\n@return true if the counter is still active otherwise false.", "predict": "isActive() method for CountersReader class\n\n@return true if counter is active, false otherwise\n\n@throws RECORD_ALLOCATEDException    If counter is already allocated\n@throws RECORDING_POSITION_TYPE_IDException If type ID is not valid\n@throws RECORDING_ID_OFFSETException  If key offset is not valid\n\n@throws InconsistentTransitionConfigurationException If there are duplicate state transitions."}, {"ID": 1929, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def to_cartesian(r, theta, theta_units=\"radians\"): \"\"\" Converts polar r, theta to cartesian x, y. \"\"\" assert theta_units in ['radians', 'degrees'],\\ \"kwarg theta_units must specified in radians or degrees\" # Convert to radians if theta_units == \"degrees\": theta = to_radians(theta) theta = to_proper_radians(theta) x = r * cos(theta) y = r * sin(theta) return x, y. \n### Response: Converts polar r, theta to cartesian x, y..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public StatusMessageFlyweight applicationSpecificFeedback(final byte[] source, final int offset, final int length) { frameLength(HEADER_LENGTH + length); putBytes(APP_SPECIFIC_FEEDBACK_FIELD_OFFSET, source, offset, length); return this; } \n### Response:", "ground_truth": "Set the Application Specific Feedback for the Status Message.\n\n@param source of the feedback to set\n@param offset of the feedback in the source\n@param length of the feedback in bytes\n@return flyweight", "predict": "This method returns a StatusMessageFlyweight object and sets the source, offset, and length of the feedback field. It also sets the frameLength variable to calculate the total length of the message. The method uses the putBytes() method to set the source, offset, and length of the feedback field and returns the StatusMessageFlyweight object."}, {"ID": 1930, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public String getMimeType(final String name) { String mimeType = null; if (name != null && name.length() > 0 && name.contains(\".\")) { final String[] segments = name.split(\"\\\\.\"); mimeType = mimeMappings.get(segments[segments.length - 1]); } if (mimeType == null) { mimeType = httpContext.getMimeType(name); } return mimeType; }. \n### Response: Find the mime type in the mime mappings. If not found delegate to wrapped\nhttp context.\n\n@see org.osgi.service.http.HttpContext#getMimeType(String).\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void reload() { entries.clear(); indexByLeadershipTermIdMap.clear(); indexByLeadershipTermIdMap.compact(); nextEntryIndex = 0; byteBuffer.clear(); try { while (true) { final int bytes = fileChannel.read(byteBuffer); if (byteBuffer.remaining() == 0) { byteBuffer.flip(); captureEntriesFromBuffer(byteBuffer, buffer, entries); byteBuffer.clear(); } if (-1 == bytes) { if (byteBuffer.position() > 0) { byteBuffer.flip(); captureEntriesFromBuffer(byteBuffer, buffer, entries); byteBuffer.clear(); } break; } } } catch (final IOException ex) { LangUtil.rethrowUnchecked(ex); } } \n### Response:", "ground_truth": "Reload the log from disk.", "predict": "Reloads the entries in the index by term ID.\n\n@see org.osgi.service.http.FileChannel#read(byteBuffer)"}, {"ID": 1931, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def state_by_node2state_by_state(tpm): \"\"\"Convert a state-by-node TPM to a state-by-state TPM. .. important:: A nondeterministic state-by-node TPM can have more than one representation as a state-by-state TPM. However, the mapping can be made to be one-to-one if we assume the TPMs to be conditionally independent. Therefore, **this function returns the corresponding conditionally independent state-by-state TPM.** .. note:: The indices of the rows of the state-by-node TPM are assumed to follow the little-endian convention, while the indices of the columns follow the big-endian convention. The indices of the rows and columns of the resulting state-by-state TPM both follow the big-endian convention. See the documentation on PyPhi :ref:`tpm-conventions` for more info. Args: tpm (list[list] or np.ndarray): A state-by-node TPM with row indices following the little-endian convention and column indices following the big-endian convention. Returns: np.ndarray: A state-by-state TPM, with both row and column indices following the big-endian convention. >>> tpm = np.array([[1, 1, 0], ... [0, 0, 1], ... [0, 1, 1], ... [1, 0, 0], ... [0, 0, 1], ... [1, 0, 0], ... [1, 1, 1], ... [1, 0, 1]]) >>> state_by_node2state_by_state(tpm) array([[0., 0., 0., 1., 0., 0., 0., 0.], [0., 0., 0., 0., 1., 0., 0., 0.], [0., 0., 0., 0., 0., 0., 1., 0.], [0., 1., 0., 0., 0., 0., 0., 0.], [0., 0., 0., 0., 1., 0., 0., 0.], [0., 1., 0., 0., 0., 0., 0., 0.], [0., 0., 0., 0., 0., 0., 0., 1.], [0., 0., 0., 0., 0., 1., 0., 0.]]) \"\"\" # Cast to np.array. tpm = np.array(tpm) # Convert to multidimensional form. tpm = to_multidimensional(tpm) # Get the number of nodes from the last dimension of the TPM. N = tpm.shape[-1] # Get the number of states. S = 2**N # Initialize the state-by-state TPM. sbs_tpm = np.zeros((S, S)) if not np.any(np.logical_and(tpm < 1, tpm > 0)): # TPM is deterministic. for previous_state_index in range(S): # Use the little-endian convention to get the row and column # indices. previous_state = le_index2state(previous_state_index, N) current_state_index = state2le_index(tpm[previous_state]) sbs_tpm[previous_state_index, current_state_index] = 1 else: # TPM is nondeterministic. for previous_state_index in range(S): # Use the little-endian convention to get the row and column # indices. previous_state = le_index2state(previous_state_index, N) marginal_tpm = tpm[previous_state] for current_state_index in range(S): current_state = np.array( [i for i in le_index2state(current_state_index, N)]) sbs_tpm[previous_state_index, current_state_index] = ( np.prod(marginal_tpm[current_state == 1]) * np.prod(1 - marginal_tpm[current_state == 0])) return sbs_tpm. \n### Response: Convert a state-by-node TPM to a state-by-state TPM.\n\n    .. important::\n        A nondeterministic state-by-node TPM can have more than one\n        representation as a state-by-state TPM. However, the mapping can be\n        made to be one-to-one if we assume the TPMs to be conditionally\n        independent. Therefore, **this function returns the corresponding\n        conditionally independent state-by-state TPM.**\n\n    .. note::\n        The indices of the rows of the state-by-node TPM are assumed to follow\n        the little-endian convention, while the indices of the columns follow\n        the big-endian convention. The indices of the rows and columns of the\n        resulting state-by-state TPM both follow the big-endian convention. See\n        the documentation on PyPhi :ref:`tpm-conventions` for more info.\n\n    Args:\n        tpm (list[list] or np.ndarray): A state-by-node TPM with row indices\n            following the little-endian convention and column indices following\n            the big-endian convention.\n\n    Returns:\n        np.ndarray: A state-by-state TPM, with both row and column indices\n        following the big-endian convention.\n\n    >>> tpm = np.array([[1, 1, 0],\n    ...                 [0, 0, 1],\n    ...                 [0, 1, 1],\n    ...                 [1, 0, 0],\n    ...                 [0, 0, 1],\n    ...                 [1, 0, 0],\n    ...                 [1, 1, 1],\n    ...                 [1, 0, 1]])\n    >>> state_by_node2state_by_state(tpm)\n    array([[0., 0., 0., 1., 0., 0., 0., 0.],\n           [0., 0., 0., 0., 1., 0., 0., 0.],\n           [0., 0., 0., 0., 0., 0., 1., 0.],\n           [0., 1., 0., 0., 0., 0., 0., 0.],\n           [0., 0., 0., 0., 1., 0., 0., 0.],\n           [0., 1., 0., 0., 0., 0., 0., 0.],\n           [0., 0., 0., 0., 0., 0., 0., 1.],\n           [0., 0., 0., 0., 0., 1., 0., 0.]]).\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public Entry findLastTerm() { for (int i = entries.size() - 1; i >= 0; i--) { final Entry entry = entries.get(i); if (ENTRY_TYPE_TERM == entry.type) { return entry; } } return null; } \n### Response:", "ground_truth": "Find the last leadership term in the recording log.\n\n@return the last leadership term in the recording log.", "predict": "`public Entry findLastTerm()`\n```java\n   .. method-level comment...\n    public Entry findLastTerm()\n        This method returns the last entry in the given array of Entry objects.\n       .. important...\n            The method assumes that the input array is sorted in increasing order.\n       .. note...\n            The method uses a for loop to iterate through the array and retrieves\n            the last entry. If the array is not sorted in increasing order, the\n            method may return the last element in the array, which is not the\n            last term in the TPM.\n```"}, {"ID": 1932, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (in *List) DeepCopy() *List { if in == nil { return nil } out := new(List) in.DeepCopyInto(out) return out }. \n### Response: // DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new List..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public RecoveryPlan createRecoveryPlan(final AeronArchive archive, final int serviceCount) { final ArrayList<Snapshot> snapshots = new ArrayList<>(); final ArrayList<Log> logs = new ArrayList<>(); planRecovery(snapshots, logs, entries, archive, serviceCount); long lastLeadershipTermId = NULL_VALUE; long lastTermBaseLogPosition = 0; long committedLogPosition = -1; long appendedLogPosition = 0; final int snapshotStepsSize = snapshots.size(); if (snapshotStepsSize > 0) { final Snapshot snapshot = snapshots.get(0); lastLeadershipTermId = snapshot.leadershipTermId; lastTermBaseLogPosition = snapshot.termBaseLogPosition; appendedLogPosition = snapshot.logPosition; committedLogPosition = snapshot.logPosition; } if (!logs.isEmpty()) { final Log log = logs.get(0); lastLeadershipTermId = log.leadershipTermId; lastTermBaseLogPosition = log.termBaseLogPosition; appendedLogPosition = log.stopPosition; committedLogPosition = log.logPosition; } return new RecoveryPlan( lastLeadershipTermId, lastTermBaseLogPosition, appendedLogPosition, committedLogPosition, snapshots, logs); } \n### Response:", "ground_truth": "Create a recovery plan for the cluster that when the steps are replayed will bring the cluster back to the\nlatest stable state.\n\n@param archive      to lookup recording descriptors.\n@param serviceCount of services that may have snapshots.\n@return a new {@link RecoveryPlan} for the cluster.", "predict": "// This is a public method in a Java class called RecoveryPlan that creates a new RecoveryPlan object..\n// The method takes in a single argument, an AeronArchive object and an integer value for the number of services..\n// It creates an ArrayList of Snapshot objects and an ArrayList of Log objects, and then uses the planRecovery() method to create a new RecoveryPlan object..\n// The method also initializes some default values for the lastLeadershipTermId, lastTermBaseLogPosition, committedLogPosition, and appendedLogPosition variables..\n// It then iterates through the snapshots and logs lists, and if there are any snapshots, it creates a new Snapshot object and assigns its leadershipTermId, termBaseLogPosition, logPosition, and logPosition to the lastLeadershipTermId, lastTermBaseLogPosition, appendedLogPosition, and committedLogPosition variables..\n// If there are no snapshots, it creates a new Log object and assigns its leadershipTermId, termBaseLogPosition, stopPosition, and logPosition to the lastLeadershipTermId, lastTermBaseLogPosition, appendedLogPosition, and committedLogPosition variables..\n// Finally, it returns the new RecoveryPlan object with the lastLeadershipTermId, lastTermBaseLogPosition, appendedLogPosition, committedLogPosition, snapshots, and logs variables set.."}, {"ID": 1933, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def unwatch_zone(self, zone_id): \"\"\" Remove a zone from the watchlist. \"\"\" self._watched_zones.remove(zone_id) return (yield from self._send_cmd(\"WATCH %s OFF\" % (zone_id.device_str(), ))). \n### Response: Remove a zone from the watchlist..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static RecoveryPlan createRecoveryPlan(final ArrayList<RecordingLog.Snapshot> snapshots) { long lastLeadershipTermId = NULL_VALUE; long lastTermBaseLogPosition = 0; long committedLogPosition = -1; long appendedLogPosition = 0; final int snapshotStepsSize = snapshots.size(); if (snapshotStepsSize > 0) { final Snapshot snapshot = snapshots.get(0); lastLeadershipTermId = snapshot.leadershipTermId; lastTermBaseLogPosition = snapshot.termBaseLogPosition; appendedLogPosition = snapshot.logPosition; committedLogPosition = snapshot.logPosition; } return new RecoveryPlan( lastLeadershipTermId, lastTermBaseLogPosition, appendedLogPosition, committedLogPosition, snapshots, new ArrayList<>()); } \n### Response:", "ground_truth": "Create a recovery plan that has only snapshots. Used for dynamicJoin snapshot load.\n\n@param snapshots to construct plan from\n@return a new {@link RecoveryPlan} for the cluster", "predict": "This method creates a RecoveryPlan for a list of RecordingLog.Snapshot objects. It initializes several long variables to hold the values of the lastLeadershipTermId, lastTermBaseLogPosition, committedLogPosition, and appendedLogPosition of each snapshot in the list.\n\nIt then checks if there are any snapshots in the list. If there are, it retrieves the first snapshot in the list and assigns the values of lastLeadershipTermId, lastTermBaseLogPosition, appendedLogPosition, and committedLogPosition to the corresponding variables.\n\nFinally, it creates a new RecoveryPlan object by passing the values of lastLeadershipTermId, lastTermBaseLogPosition, appendedLogPosition, committedLogPosition, and the list of snapshots as arguments to the constructor.\n\nThe method returns the new RecoveryPlan object."}, {"ID": 1934, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected function getLocation($method, $database = null, array $arguments = null) { $location = \"http://{$this->server}/$method\"; if ($database) { $location .= '/' . rawurlencode($database); } if ($arguments) { $location .= '/' . implode('/', array_map('rawurlencode', $arguments)); } return $location; }. \n### Response: Creates a relative URL for the specified OrientDB method call.\n\n@param string $method\n@param string $database\n@param array $arguments\n@return string.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void appendTerm( final long recordingId, final long leadershipTermId, final long termBaseLogPosition, final long timestamp) { final int size = entries.size(); if (size > 0) { final Entry lastEntry = entries.get(size - 1); if (lastEntry.type != NULL_VALUE && lastEntry.leadershipTermId >= leadershipTermId) { throw new ClusterException(\"leadershipTermId out of sequence: previous \" + lastEntry.leadershipTermId + \" this \" + leadershipTermId); } } indexByLeadershipTermIdMap.put(leadershipTermId, nextEntryIndex); append( ENTRY_TYPE_TERM, recordingId, leadershipTermId, termBaseLogPosition, NULL_POSITION, timestamp, NULL_VALUE); } \n### Response:", "ground_truth": "Append a log entry for a leadership term.\n\n@param recordingId         of the log.\n@param leadershipTermId    for the current term.\n@param termBaseLogPosition reached at the beginning of the term.\n@param timestamp           at the beginning of the term.", "predict": "Appends a new term to the log.\n\n@param long $ RecordingId\n@param long $ leadershipTermId\n@param long $ termBaseLogPosition\n@param long $ timestamp\n@return void."}, {"ID": 1935, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (s *PortableIPService) CreatePortableIpRange(p *CreatePortableIpRangeParams) (*CreatePortableIpRangeResponse, error) { resp, err := s.cs.newRequest(\"createPortableIpRange\", p.toURLValues()) if err != nil { return nil, err } var r CreatePortableIpRangeResponse if err := json.Unmarshal(resp, &r); err != nil { return nil, err } // If we have a async client, we need to wait for the async result if s.cs.async { b, err := s.cs.GetAsyncJobResult(r.JobID, s.cs.timeout) if err != nil { if err == AsyncTimeoutErr { return &r, err } return nil, err } b, err = getRawValue(b) if err != nil { return nil, err } if err := json.Unmarshal(b, &r); err != nil { return nil, err } } return &r, nil }. \n### Response: // adds a range of portable public IP's to a region.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void appendSnapshot( final long recordingId, final long leadershipTermId, final long termBaseLogPosition, final long logPosition, final long timestamp, final int serviceId) { final int size = entries.size(); if (size > 0) { final Entry entry = entries.get(size - 1); if (entry.type == ENTRY_TYPE_TERM && entry.leadershipTermId != leadershipTermId) { throw new ClusterException(\"leadershipTermId out of sequence: previous \" + entry.leadershipTermId + \" this \" + leadershipTermId); } } append( ENTRY_TYPE_SNAPSHOT, recordingId, leadershipTermId, termBaseLogPosition, logPosition, timestamp, serviceId); } \n### Response:", "ground_truth": "Append a log entry for a snapshot.\n\n@param recordingId         in the archive for the snapshot.\n@param leadershipTermId    for the current term\n@param termBaseLogPosition at the beginning of the leadership term.\n@param logPosition         for the position in the current term or length so far for that term.\n@param timestamp           at which the snapshot was taken.\n@param serviceId           for which the snapshot is recorded.", "predict": "```\n// Append a snapshot entry to the log.\n```"}, {"ID": 1936, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private function set_client_extension() { $ext = \\pathinfo($this->client_name, PATHINFO_EXTENSION); if (!empty($ext)) { return $ext; } return null; }. \n### Response: Get the client ext of the uploaded file.\n\n@since 1.0.0.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void commitLogPosition(final long leadershipTermId, final long logPosition) { final int index = getLeadershipTermEntryIndex(leadershipTermId); commitEntryValue(index, logPosition, LOG_POSITION_OFFSET); final Entry entry = entries.get(index); entries.set(index, new Entry( entry.recordingId, entry.leadershipTermId, entry.termBaseLogPosition, logPosition, entry.timestamp, entry.serviceId, entry.type, entry.entryIndex)); } \n### Response:", "ground_truth": "Commit the position reached in a leadership term before a clean shutdown.\n\n@param leadershipTermId for committing the term position reached.\n@param logPosition      reached in the leadership term.", "predict": "Commit the log position of the leader"}, {"ID": 1937, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function LeaseRevoke(LeaseRevokeRequest $argument, $metadata = [], $options = []) { return $this->_simpleRequest('/etcdserverpb.Lease/LeaseRevoke', $argument, ['\\Etcdserverpb\\LeaseRevokeResponse', 'decode'], $metadata, $options ); }. \n### Response: LeaseRevoke revokes a lease. All keys attached to the lease will expire and be deleted.\n@param LeaseRevokeRequest $argument input argument\n@param array $metadata metadata\n@param array $options call options\n@return UnaryCall.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void tombstoneEntry(final long leadershipTermId, final int entryIndex) { int index = -1; for (int i = 0, size = entries.size(); i < size; i++) { final Entry entry = entries.get(i); if (entry.leadershipTermId == leadershipTermId && entry.entryIndex == entryIndex) { index = entry.entryIndex; if (ENTRY_TYPE_TERM == entry.type) { indexByLeadershipTermIdMap.remove(leadershipTermId); } break; } } if (-1 == index) { throw new ClusterException(\"unknown entry index: \" + entryIndex); } buffer.putInt(0, NULL_VALUE, LITTLE_ENDIAN); byteBuffer.limit(SIZE_OF_INT).position(0); final long filePosition = (index * (long)ENTRY_LENGTH) + ENTRY_TYPE_OFFSET; try { if (SIZE_OF_INT != fileChannel.write(byteBuffer, filePosition)) { throw new ClusterException(\"failed to write field atomically\"); } } catch (final Exception ex) { LangUtil.rethrowUnchecked(ex); } } \n### Response:", "ground_truth": "Tombstone an entry in the log so it is no longer valid.\n\n@param leadershipTermId to match for validation.\n@param entryIndex       reached in the leadership term.", "predict": "tombstoneEntry implements the Cluster API to mark an entry as tombstone. This method takes a leadershipTermId and an entryIndex as input arguments and writes the entry index to the file. It also sets the value of NULL\\_VALUE to 0 and sets the length of the byte buffer to SIZE\\_OF\\_INT. Finally, it attempts to write the file position to the file channel. If the write operation fails, it throws a ClusterException.\n@param long leadershipTermId input argument\n@param int entryIndex input argument\n@return void."}, {"ID": 1938, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public void reportError(NodeT faulted, Throwable throwable) { faulted.setPreparer(true); String dependency = faulted.key(); for (String dependentKey : nodeTable.get(dependency).dependentKeys()) { DAGNode<DataT, NodeT> dependent = nodeTable.get(dependentKey); dependent.lock().lock(); try { dependent.onFaultedResolution(dependency, throwable); if (dependent.hasAllResolved()) { queue.add(dependent.key()); } } finally { dependent.lock().unlock(); } } }. \n### Response: Reports that a node is faulted.\n\n@param faulted the node faulted\n@param throwable the reason for fault.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void close() { if (null != publication && publication.isConnected()) { closeSession(); } if (!ctx.ownsAeronClient()) { CloseHelper.close(subscription); CloseHelper.close(publication); } ctx.close(); } \n### Response:", "ground_truth": "Close session and release associated resources.", "predict": "Closes the application.\n\n@param publication the publication\n@param ctx the application context.\n\n"}, {"ID": 1939, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function getRoleAsString() { $options = self::getRoleOptions(); return isset($options[$this->role]) ? $options[$this->role] : ''; }. \n### Response: Returns a string representation of the model's role\n\n@return string The role of this model as a string.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public long offer(final DirectBufferVector[] vectors) { if (headerVector != vectors[0]) { vectors[0] = headerVector; } return publication.offer(vectors, null); } \n### Response:", "ground_truth": "Non-blocking publish by gathering buffer vectors into a message. The first vector will be replaced by the cluster\ningress header so must be left unused.\n\n@param vectors which make up the message.\n@return the same as {@link Publication#offer(DirectBufferVector[])}.\n@see Publication#offer(DirectBufferVector[])", "predict": "Offers the publication with the given DirectBufferVector[] vectors.\n\n@param DirectBufferVector[] vectors The DirectBufferVector[] to offer the publication with.\n@return long The number of bytes sent with the offer.\n\nNote: This method is used to offer the publication with the given DirectBufferVector[] vectors. It checks if the first vector in the array is the header vector and if not, it assigns it to the first vector. Finally, it returns the number of bytes sent with the offer. This method is useful when you want to send data with a publication that already has data in it."}, {"ID": 1940, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function(ctx) { var node = ctx.node; // FT.debug(\"nodeRemoveChildMarkup()\", node.toString()); // TODO: Unlink attr.ftnode to support GC if(node.ul){ if( node.isRoot() ) { $(node.ul).empty(); } else { $(node.ul).remove(); node.ul = null; } node.visit(function(n){ n.li = n.ul = null; }); } }. \n### Response: Remove HTML markup for all descendents of ctx.node.\n@param {EventData} ctx.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static boolean unblock( final UnsafeBuffer[] termBuffers, final UnsafeBuffer logMetaDataBuffer, final long blockedPosition, final int termLength) { final int positionBitsToShift = LogBufferDescriptor.positionBitsToShift(termLength); final int blockedTermCount = (int)(blockedPosition >> positionBitsToShift); final int blockedOffset = (int)blockedPosition & (termLength - 1); final int activeTermCount = activeTermCount(logMetaDataBuffer); if (activeTermCount == (blockedTermCount - 1) && blockedOffset == 0) { final int currentTermId = termId(rawTailVolatile(logMetaDataBuffer, indexByTermCount(activeTermCount))); return rotateLog(logMetaDataBuffer, activeTermCount, currentTermId); } final int blockedIndex = indexByTermCount(blockedTermCount); final long rawTail = rawTailVolatile(logMetaDataBuffer, blockedIndex); final int termId = termId(rawTail); final int tailOffset = termOffset(rawTail, termLength); final UnsafeBuffer termBuffer = termBuffers[blockedIndex]; switch (TermUnblocker.unblock(logMetaDataBuffer, termBuffer, blockedOffset, tailOffset, termId)) { case UNBLOCKED_TO_END: rotateLog(logMetaDataBuffer, blockedTermCount, termId); // fall through case UNBLOCKED: return true; } return false; } \n### Response:", "ground_truth": "Attempt to unblock a log buffer at given position\n\n@param termBuffers       for current blockedOffset\n@param logMetaDataBuffer for log buffer\n@param blockedPosition   to attempt to unblock\n@param termLength        of the buffer for each term in the log\n@return whether unblocked or not", "predict": "Rotate log buffer to ensure that all terms are processed.\n\n@param {UnsafeBuffer[]} termBuffers - The term buffer array.\n@param {UnsafeBuffer} logMetaDataBuffer - The log metadata buffer.\n@param {long} blockedPosition - The position of the blocked term in the log metadata buffer.\n@param {int} termLength - The length of the term in the log metadata buffer.\n@param {int} activeTermCount - The number of active terms in the log metadata buffer.\n@return {boolean} - Returns true if the unblock operation is successful, false otherwise."}, {"ID": 1941, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void init(Symtab syms, boolean definitive) { if (classes != null) return; if (definitive) { Assert.check(packages == null || packages == syms.packages); packages = syms.packages; Assert.check(classes == null || classes == syms.classes); classes = syms.classes; } else { packages = new HashMap<Name, PackageSymbol>(); classes = new HashMap<Name, ClassSymbol>(); } packages.put(names.empty, syms.rootPackage); syms.rootPackage.completer = thisCompleter; syms.unnamedPackage.completer = thisCompleter; }. \n### Response: Initialize classes and packages, optionally treating this as\nthe definitive classreader..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public String channel() { final int length = buffer.getInt(offset + CHANNEL_OFFSET); lengthOfChannel = SIZE_OF_INT + length; return buffer.getStringAscii(offset + CHANNEL_OFFSET, length); } \n### Response:", "ground_truth": "Get the channel field as ASCII\n\n@return channel field", "predict": "This method returns the contents of a channel in ASCII format."}, {"ID": 1942, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected function fireMoveEvent( $event, $halt = true ) { // Basically the same as \\Illuminate\\Database\\Eloquent\\Model->fireModelEvent // but we relay the event into the node instance. $event = \"eloquent.{$event}: \" . get_class( $this->model ); $method = $halt ? 'until' : 'fire'; Hooks::trigger( $event, ['model' => $this->model] ); }. \n### Response: Fire the given move event for the model.\n\n@param  string $event\n@param  bool $halt\n@return mixed.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public ImageMessageFlyweight channel(final String channel) { lengthOfChannel = buffer.putStringAscii(offset + CHANNEL_OFFSET, channel); return this; } \n### Response:", "ground_truth": "Set the channel field as ASCII\n\n@param channel field value\n@return flyweight", "predict": "This method returns the current ImageMessageFlyweight instance for the given channel.\n\n@param  string $channel\n@return ImageMessageFlyweight."}, {"ID": 1943, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func NewMapOpts(values map[string]string, validator ValidatorFctType) *MapOpts { if values == nil { values = make(map[string]string) } return &MapOpts{ values: values, validator: validator, } }. \n### Response: // NewMapOpts creates a new MapOpts with the specified map of values and a validator..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void checkTermLength(final int termLength) { if (termLength < TERM_MIN_LENGTH) { throw new IllegalStateException( \"Term length less than min length of \" + TERM_MIN_LENGTH + \": length=\" + termLength); } if (termLength > TERM_MAX_LENGTH) { throw new IllegalStateException( \"Term length more than max length of \" + TERM_MAX_LENGTH + \": length=\" + termLength); } if (!BitUtil.isPowerOfTwo(termLength)) { throw new IllegalStateException(\"Term length not a power of 2: length=\" + termLength); } } \n### Response:", "ground_truth": "Check that term length is valid and alignment is valid.\n\n@param termLength to be checked.\n@throws IllegalStateException if the length is not as expected.", "predict": "// checkTermLength checks the term length of the input argument and throws an exception if it is not within the specified min, max, and power of two lengths.."}, {"ID": 1944, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def from_utf8_col(self, line, utf8_column): \"\"\" Given a 1-based line number and 0-based utf8 column, returns a 0-based unicode column. \"\"\" offsets = self._utf8_offset_cache.get(line) if offsets is None: end_offset = self._line_offsets[line] if line < len(self._line_offsets) else self._text_len line_text = self._text[self._line_offsets[line - 1] : end_offset] offsets = [i for i,c in enumerate(line_text) for byte in c.encode('utf8')] offsets.append(len(line_text)) self._utf8_offset_cache[line] = offsets return offsets[max(0, min(len(offsets)-1, utf8_column))]. \n### Response: Given a 1-based line number and 0-based utf8 column, returns a 0-based unicode column..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void checkPageSize(final int pageSize) { if (pageSize < PAGE_MIN_SIZE) { throw new IllegalStateException( \"Page size less than min size of \" + PAGE_MIN_SIZE + \": page size=\" + pageSize); } if (pageSize > PAGE_MAX_SIZE) { throw new IllegalStateException( \"Page size more than max size of \" + PAGE_MAX_SIZE + \": page size=\" + pageSize); } if (!BitUtil.isPowerOfTwo(pageSize)) { throw new IllegalStateException(\"Page size not a power of 2: page size=\" + pageSize); } } \n### Response:", "ground_truth": "Check that page size is valid and alignment is valid.\n\n@param pageSize to be checked.\n@throws IllegalStateException if the size is not as expected.", "predict": "Checks the page size of the system. If it is not a power of 2, throws an exception."}, {"ID": 1945, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (actor Actor) GetSpaceRoutes(spaceGUID string) ([]Route, Warnings, error) { var allWarnings Warnings ccv2Routes, warnings, err := actor.CloudControllerClient.GetSpaceRoutes(spaceGUID) allWarnings = append(allWarnings, warnings...) if err != nil { return nil, allWarnings, err } routes, domainWarnings, err := actor.applyDomain(ccv2Routes) return routes, append(allWarnings, domainWarnings...), err }. \n### Response: // GetSpaceRoutes returns a list of routes associated with the provided Space\n// GUID..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static boolean casActiveTermCount( final UnsafeBuffer metadataBuffer, final int expectedTermCount, final int updateTermCount) { return metadataBuffer.compareAndSetInt(LOG_ACTIVE_TERM_COUNT_OFFSET, expectedTermCount, updateTermCount); } \n### Response:", "ground_truth": "Compare and set the value of the current active term count.\n\n@param metadataBuffer    containing the meta data.\n@param expectedTermCount value of the active term count expected in the log\n@param updateTermCount   value of the active term count to be updated in the log\n@return true if successful otherwise false.", "predict": "// casActiveTermCount compares and sets the expected and updated term count in the metadata buffer, returning\n// true if the changes were successful and false otherwise."}, {"ID": 1946, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def update_current_tags(self, tags): \"\"\"Set a new set of tags for this executable. Update the set of tags that this job will use. This updated default file naming and shared options. It will *not* update the pegasus profile, which belong to the executable and cannot be different for different nodes. Parameters ----------- tags : list The new list of tags to consider. \"\"\" if tags is None: tags = [] tags = [tag.upper() for tag in tags] self.tags = tags if len(tags) > 6: warn_msg = \"This job has way too many tags. \" warn_msg += \"Current tags are {}. \".format(' '.join(tags)) warn_msg += \"Current executable {}.\".format(self.name) logging.info(warn_msg) if len(tags) != 0: self.tagged_name = \"{0}-{1}\".format(self.name, '_'.join(tags)) else: self.tagged_name = self.name if self.ifo_string is not None: self.tagged_name = \"{0}-{1}\".format(self.tagged_name, self.ifo_string) # Determine the sections from the ini file that will configure # this executable sections = [self.name] if self.ifo_list is not None: if len(self.ifo_list) > 1: sec_tags = tags + self.ifo_list + [self.ifo_string] else: sec_tags = tags + self.ifo_list else: sec_tags = tags for sec_len in range(1, len(sec_tags)+1): for tag_permutation in permutations(sec_tags, sec_len): joined_name = '-'.join(tag_permutation) section = '{0}-{1}'.format(self.name, joined_name.lower()) if self.cp.has_section(section): sections.append(section) self.sections = sections # Do some basic sanity checking on the options for sec1, sec2 in combinations(sections, 2): self.cp.check_duplicate_options(sec1, sec2, raise_error=True) # collect the options and profile information # from the ini file section(s) self.common_options = [] self.common_raw_options = [] self.common_input_files = [] for sec in sections: if self.cp.has_section(sec): self.add_ini_opts(self.cp, sec) else: warn_string = \"warning: config file is missing section \" warn_string += \"[{0}]\".format(sec) logging.warn(warn_string). \n### Response: Set a new set of tags for this executable.\n\n        Update the set of tags that this job will use. This updated default\n        file naming and shared options. It will *not* update the pegasus\n        profile, which belong to the executable and cannot be different for\n        different nodes.\n\n        Parameters\n        -----------\n        tags : list\n            The new list of tags to consider..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static long computePosition( final int activeTermId, final int termOffset, final int positionBitsToShift, final int initialTermId) { final long termCount = activeTermId - initialTermId; // copes with negative activeTermId on rollover return (termCount << positionBitsToShift) + termOffset; } \n### Response:", "ground_truth": "Compute the current position in absolute number of bytes.\n\n@param activeTermId        active term id.\n@param termOffset          in the term.\n@param positionBitsToShift number of times to left shift the term count\n@param initialTermId       the initial term id that this stream started on\n@return the absolute position in bytes", "predict": "Compute the position of a term in a document.\n\nThis method calculates the position of a term in a document by subtracting the initial term ID from the active term ID and then shifting the position bits to the left by the specified position bits to shift the term to the correct position in the document.\n\nParameters\n-----------\n\n* activeTermId : int\n* termOffset : int\n* positionBitsToShift : int\n* initialTermId : int\n\nReturns\n-------\n\n* long\n\n"}, {"ID": 1947, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function (value, encoding) { encoding = (typeof encoding === 'undefined') ? 'utf8' : encoding if (Buffer.isBuffer(value)) { value = value.toString(encoding) } return value }. \n### Response: Decodes the specified value and returns it.\n@param {Buffer|String} value - The value.\n@param {String} encoding - The encoding.\n@returns {String} The decoded value.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static long computeLogLength(final int termLength, final int filePageSize) { if (termLength < (1024 * 1024 * 1024)) { return align((termLength * PARTITION_COUNT) + LOG_META_DATA_LENGTH, filePageSize); } return (PARTITION_COUNT * (long)termLength) + align(LOG_META_DATA_LENGTH, filePageSize); } \n### Response:", "ground_truth": "Compute the total length of a log file given the term length.\n\nAssumes {@link #TERM_MAX_LENGTH} is 1GB and that filePageSize is 1GB or less and a power of 2.\n\n@param termLength   on which to base the calculation.\n@param filePageSize to use for log.\n@return the total length of the log file.", "predict": "Calculates the log length of the specified term length and filepageSize.\n\n@param {int} termLength - The term length.\n@param {int} filepageSize - The filepageSize.\n@return {long} The calculated log length."}, {"ID": 1948, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public final int drainTo(int queueIndex, Collection<? super E> drain) { return drain(queues[queueIndex], drain, Integer.MAX_VALUE); }. \n### Response: Drains a batch of items from the queue at the supplied index into the\nsupplied collection.\n\n@return the number of items drained.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void storeDefaultFrameHeader(final UnsafeBuffer metadataBuffer, final DirectBuffer defaultHeader) { if (defaultHeader.capacity() != HEADER_LENGTH) { throw new IllegalArgumentException( \"Default header length not equal to HEADER_LENGTH: length=\" + defaultHeader.capacity()); } metadataBuffer.putInt(LOG_DEFAULT_FRAME_HEADER_LENGTH_OFFSET, HEADER_LENGTH); metadataBuffer.putBytes(LOG_DEFAULT_FRAME_HEADER_OFFSET, defaultHeader, 0, HEADER_LENGTH); } \n### Response:", "ground_truth": "Store the default frame header to the log meta data buffer.\n\n@param metadataBuffer into which the default headers should be stored.\n@param defaultHeader  to be stored.\n@throws IllegalArgumentException if the defaultHeader larger than {@link #LOG_DEFAULT_FRAME_HEADER_MAX_LENGTH}", "predict": "Stores the default frame header in the metadata buffer.\n\n@param metadataBuffer the metadata buffer to store the default frame header in.\n@param defaultHeader the direct buffer to store the default frame header in.\n@param HEADER_LENGTH the length of the default frame header in bytes.\n@return the number of bytes written to the metadata buffer.\n\nNote: This method may throw an IllegalArgumentException if the default header length is not equal to HEADER_LENGTH."}, {"ID": 1949, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def download_queue(self, job_ids): \"\"\"Downloads data of completed jobs.\"\"\" if self.skip: return None url = \"{}?jobtype=completed&jobIds={}\".format( self.queue_url, \",\".join(str(x) for x in job_ids) ) try: response = self.session.get(url, headers={\"Accept\": \"application/json\"}) if response: response = response.json() else: response = None # pylint: disable=broad-except except Exception as err: logger.error(err) response = None return response. \n### Response: Downloads data of completed jobs..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void applyDefaultHeader( final UnsafeBuffer metadataBuffer, final UnsafeBuffer termBuffer, final int termOffset) { termBuffer.putBytes(termOffset, metadataBuffer, LOG_DEFAULT_FRAME_HEADER_OFFSET, HEADER_LENGTH); } \n### Response:", "ground_truth": "Apply the default header for a message in a term.\n\n@param metadataBuffer containing the default headers.\n@param termBuffer     to which the default header should be applied.\n@param termOffset     at which the default should be applied.", "predict": "Apply default header.."}, {"ID": 1950, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private Expr parseAdditiveExpression(EnclosingScope scope, boolean terminated) { int start = index; Expr lhs = parseMultiplicativeExpression(scope, terminated); Token lookahead; while ((lookahead = tryAndMatch(terminated, Plus, Minus)) != null) { Expr rhs = parseMultiplicativeExpression(scope, terminated); switch (lookahead.kind) { case Plus: lhs = new Expr.IntegerAddition(Type.Void, lhs, rhs); break; case Minus: lhs = new Expr.IntegerSubtraction(Type.Void, lhs, rhs); break; default: throw new RuntimeException(\"deadcode\"); // dead-code } lhs = annotateSourceLocation(lhs, start); } return lhs; }. \n### Response: Parse an additive expression.\n\n@param scope\nThe enclosing scope for this statement, which determines the\nset of visible (i.e. declared) variables and also the current\nindentation level.\n@param terminated\nThis indicates that the expression is known to be terminated\n(or not). An expression that's known to be terminated is one\nwhich is guaranteed to be followed by something. This is\nimportant because it means that we can ignore any newline\ncharacters encountered in parsing this expression, and that\nwe'll never overrun the end of the expression (i.e. because\nthere's guaranteed to be something which terminates this\nexpression). A classic situation where terminated is true is\nwhen parsing an expression surrounded in braces. In such case,\nwe know the right-brace will always terminate this expression.\n\n@return.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static boolean rotateLog(final UnsafeBuffer metadataBuffer, final int termCount, final int termId) { final int nextTermId = termId + 1; final int nextTermCount = termCount + 1; final int nextIndex = indexByTermCount(nextTermCount); final int expectedTermId = nextTermId - PARTITION_COUNT; long rawTail; do { rawTail = rawTail(metadataBuffer, nextIndex); if (expectedTermId != termId(rawTail)) { break; } } while (!casRawTail(metadataBuffer, nextIndex, rawTail, packTail(nextTermId, 0))); return casActiveTermCount(metadataBuffer, termCount, nextTermCount); } \n### Response:", "ground_truth": "Rotate the log and update the tail counter for the new term.\n\nThis method is safe for concurrent use.\n\n@param metadataBuffer for the log.\n@param termCount      from which to rotate.\n@param termId         to be used in the default headers.\n@return true if log was rotated.", "predict": "Rotate the log.\n\n@param metadataBuffer\nThe UnsafeBuffer containing the log data, which is used to store the current state of the log.\n@param termCount\nThe number of terms in the current log entry.\n@param termId\nThe ID of the current term in the log.\n@return\nWhether the log has been rotated or not.\n\n@private\n```java\nprivate static int indexByTermCount(int nextTermCount) {\n    int[] nextTermCounts = new int[nextTermCount + 1];\n    nextTermCounts[nextTermCount] = 0;\n    return nextTermCounts.length;\n}\n\nprivate static int termId(long rawTail) {\n    int termId = 0;\n    long rawTail = rawTail;\n    while (rawTail!= 0) {\n        int index = rawTail % PARTITION_COUNT;\n        long tail = rawTail / PARTITION_COUNT;\n        long start = index * PARTITION_COUNT + tail;\n        long end = start + PARTITION_COUNT;\n        long id = getTermId(start, end);\n        termId = id;\n        rawTail = end + PARTITION_COUNT;\n    }\n    return termId;\n}\n\nprivate static long rawTail(UnsafeBuffer metadataBuffer, int nextIndex) {\n    long rawTail = metadataBuffer.getLong(nextIndex * PARTITION_COUNT + nextIndex);\n    return rawTail;\n}\n\nprivate static long termId(long rawTail) {\n    long termId = 0;\n    long rawTail = rawTail;\n    while (rawTail!= 0) {\n        int index = rawTail % PARTITION_COUNT;\n        long tail = rawTail / PARTITION_COUNT;\n        long start = index * PARTITION_COUNT + tail;\n        long end = start + PARTITION_COUNT;\n        long id = getTermId(start, end);\n        termId = id;\n        rawTail = end + PARTITION_COUNT;\n    }\n    return termId;\n}\n```\nRotate the log.\n\n@param metadataBuffer\nThe UnsafeBuffer containing the log data, which is used to store the current state of the log.\n@param termCount\nThe number of terms in the current log entry.\n@param termId\nThe ID of the current term in the log.\n@return\nWhether the log has been rotated or not.\n\n@private\n```java\nprivate static long rawTail(UnsafeBuffer metadataBuffer, int nextIndex) {\n    long rawTail = metadataBuffer.getLong(nextIndex * PARTITION_COUNT + nextIndex);\n    return rawTail;\n}\n\nprivate static long termId(long rawTail) {\n    long termId = 0;\n    long rawTail = rawTail;\n    while (rawTail!= 0) {\n        int index = rawTail % PARTITION_COUNT;\n        long tail = rawTail / PARTITION_COUNT;\n        long start = index * PARTITION_COUNT + tail;\n        long end = start + PARTITION_COUNT;\n        long id = getTermId(start, end);\n        termId = id;\n        rawTail = end + PARTITION_COUNT;\n    }\n    return termId;\n}\n```"}, {"ID": 1951, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public Position get(Position pos, Map<K, Event<V>> map) { ArrayList<Event<K>> list = new ArrayList<Event<K>>(1000); Position nextPos = get(pos, list); for(Event<K> evt : list) { K key = evt.getValue(); if(key != null) { try { V value = get(key); map.put(key, new SimpleEvent<V>(value, evt.getClock())); } catch(Exception e) { logger.warn(e.getMessage()); } } } return nextPos; }. \n### Response: Gets a number of value events starting from a give position in the Retention.\nThe number of events is determined internally by the Retention and it is\nup to the batch size.\n\n@param pos - the retention position from where events will be read\n@param map - the result map (keys to value events) to fill in\n@return the next position from where new events will be read..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void initialiseTailWithTermId( final UnsafeBuffer metadataBuffer, final int partitionIndex, final int termId) { metadataBuffer.putLong(TERM_TAIL_COUNTERS_OFFSET + (partitionIndex * SIZE_OF_LONG), packTail(termId, 0)); } \n### Response:", "ground_truth": "Set the initial value for the termId in the upper bits of the tail counter.\n\n@param metadataBuffer contain the tail counter.\n@param partitionIndex to be initialised.\n@param termId         to be set.", "predict": "Initializes the metadata buffer with the tail term ID and a pack of tail counters.\n\n@param metadataBuffer - the metadata buffer to initialize\n@param partitionIndex - the partition index of the metadata buffer\n@param termId - the term ID of the tail term\n@return nothing.\n\nNote: This method is used to initialize the metadata buffer with the tail term ID and a pack of tail counters. The partition index and term ID are passed as arguments to packTail() function which is responsible for packing the tail counters into the metadata buffer."}, {"ID": 1952, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function enqueue_core_assets() { wp_enqueue_style( 'hogan-core', HOGAN_CORE_URL . 'assets/css/hogan-core.css', [], $this->assets_version ); /** * Filters the content width of the modules * * @param int $content_width Width. */ $content_width = (int) apply_filters( 'hogan/frontend/content_width', 1360 ); wp_add_inline_style( 'hogan-core', sprintf( '.hogan-module-inner { max-width: %spx; }', $content_width ) ); }. \n### Response: Load plugin core assets.\n\n@return void.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static int termOffset(final long rawTail, final long termLength) { final long tail = rawTail & 0xFFFF_FFFFL; return (int)Math.min(tail, termLength); } \n### Response:", "ground_truth": "Read the termOffset from a packed raw tail value.\n\n@param rawTail    containing the termOffset.\n@param termLength that the offset cannot exceed.\n@return the termOffset value.", "predict": "Method-level comment for termOffset():\n\nThis method calculates the position in the term sequence where the given tail of the raw term sequence and the given term length can be found. It does this by first checking if the tail is a multiple of the term length, and if so, it is the minimum of the raw tail and the term length. This method is used by theogan/parser/term-parser.js library to position the parser in the correct position in the term sequence when parsing a term.\n\n@return int The position in the term sequence."}, {"ID": 1953, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: static function isValidName( $packageName, &$transformedPackageName = null ) { $trans = eZCharTransform::instance(); $transformedPackageName = $trans->transformByGroup( $packageName, 'identifier' ); return $transformedPackageName === $packageName; }. \n### Response: Checks if a package name is valid\n\n@param string $packageName the package name\n@param string $transformedPackageName the package name, transformed to be valid\n@return boolean true if the package name is valid, false if not.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static long rawTailVolatile(final UnsafeBuffer metadataBuffer) { final int partitionIndex = indexByTermCount(activeTermCount(metadataBuffer)); return metadataBuffer.getLongVolatile(TERM_TAIL_COUNTERS_OFFSET + (SIZE_OF_LONG * partitionIndex)); } \n### Response:", "ground_truth": "Get the raw value of the tail for the current active partition.\n\n@param metadataBuffer containing the tail counters.\n@return the raw value of the tail for the current active partition.", "predict": "This method returns the raw tail position of a metadata buffer in long format.\n\n@param UnsafeBuffer $metadataBuffer the metadata buffer\n@return the raw tail position of the metadata buffer in long format\n@Note This method is used to retrieve the raw tail position of a metadata buffer, which is useful for efficiently accessing the last few positions of a large buffer."}, {"ID": 1954, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static boolean isUnderDirectory(File child, File parent) { if (child == null || parent == null) return false; URI childUri = child.toURI(); URI relativeUri = parent.toURI().relativize(childUri); return relativeUri.equals(childUri) ? false : true; }. \n### Response: If child is under parent, will return true, otherwise, return false.\n\n@param child\n@param parent\n@return.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static boolean casRawTail( final UnsafeBuffer metadataBuffer, final int partitionIndex, final long expectedRawTail, final long updateRawTail) { final int index = TERM_TAIL_COUNTERS_OFFSET + (SIZE_OF_LONG * partitionIndex); return metadataBuffer.compareAndSetLong(index, expectedRawTail, updateRawTail); } \n### Response:", "ground_truth": "Compare and set the raw value of the tail for the given partition.\n\n@param metadataBuffer  containing the tail counters.\n@param partitionIndex  for the tail counter.\n@param expectedRawTail expected current value.\n@param updateRawTail   to be applied.\n@return true if the update was successful otherwise false.", "predict": "This method compares and sets the raw tail of a metadata buffer to the expected value at the specified index, based on the partition index.\n\n@param metadataBuffer\n@param partitionIndex\n@param expectedRawTail\n@param updateRawTail\n@return."}, {"ID": 1955, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (s *ChannelSpecification) SetSupportedInputModes(v []*string) *ChannelSpecification { s.SupportedInputModes = v return s }. \n### Response: // SetSupportedInputModes sets the SupportedInputModes field's value..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public TerminateDriverFlyweight tokenBuffer( final DirectBuffer tokenBuffer, final int tokenOffset, final int tokenLength) { buffer.putInt(TOKEN_LENGTH_OFFSET, tokenLength); if (null != tokenBuffer && tokenLength > 0) { buffer.putBytes(tokenBufferOffset(), tokenBuffer, tokenOffset, tokenLength); } return this; } \n### Response:", "ground_truth": "Fill the token buffer.\n\n@param tokenBuffer containing the optional token for the request.\n@param tokenOffset within the tokenBuffer at which the token begins.\n@param tokenLength of the token in the tokenBuffer.\n@return flyweight", "predict": "// TokenBuffer initializes the DirectBuffer tokenBuffer with the given offset, length, and buffer.."}, {"ID": 1956, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected function create($id, $instanceName, $content) { $this->getConnection()->table($this->getTableName()) ->insert([ 'id' => $id, 'instance' => $instanceName, 'content' => $content, ]); }. \n### Response: Create shopping cart instance.\n\n@param $id\n@param $instanceName\n@param $content.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static Counter allocate( final Aeron aeron, final MutableDirectBuffer tempBuffer, final long leadershipTermId, final long logPosition, final long timestamp, final boolean hasReplay, final long... snapshotRecordingIds) { tempBuffer.putLong(LEADERSHIP_TERM_ID_OFFSET, leadershipTermId); tempBuffer.putLong(LOG_POSITION_OFFSET, logPosition); tempBuffer.putLong(TIMESTAMP_OFFSET, timestamp); tempBuffer.putInt(REPLAY_FLAG_OFFSET, hasReplay ? 1 : 0); final int serviceCount = snapshotRecordingIds.length; tempBuffer.putInt(SERVICE_COUNT_OFFSET, serviceCount); final int keyLength = SNAPSHOT_RECORDING_IDS_OFFSET + (serviceCount * SIZE_OF_LONG); if (keyLength > MAX_KEY_LENGTH) { throw new ClusterException(keyLength + \" exceeds max key length \" + MAX_KEY_LENGTH); } for (int i = 0; i < serviceCount; i++) { tempBuffer.putLong(SNAPSHOT_RECORDING_IDS_OFFSET + (i * SIZE_OF_LONG), snapshotRecordingIds[i]); } final int labelOffset = BitUtil.align(keyLength, SIZE_OF_INT); int labelLength = 0; labelLength += tempBuffer.putStringWithoutLengthAscii(labelOffset + labelLength, NAME); labelLength += tempBuffer.putLongAscii(keyLength + labelLength, leadershipTermId); labelLength += tempBuffer.putStringWithoutLengthAscii(labelOffset + labelLength, \" logPosition=\"); labelLength += tempBuffer.putLongAscii(labelOffset + labelLength, logPosition); labelLength += tempBuffer.putStringWithoutLengthAscii(labelOffset + labelLength, \" hasReplay=\" + hasReplay); return aeron.addCounter(RECOVERY_STATE_TYPE_ID, tempBuffer, 0, keyLength, tempBuffer, labelOffset, labelLength); } \n### Response:", "ground_truth": "Allocate a counter to represent the snapshot services should load on start.\n\n@param aeron                to allocate the counter.\n@param tempBuffer           to use for building the key and label without allocation.\n@param leadershipTermId     at which the snapshot was taken.\n@param logPosition          at which the snapshot was taken.\n@param timestamp            the snapshot was taken.\n@param hasReplay            flag is true if all or part of the log must be replayed.\n@param snapshotRecordingIds for the services to use during recovery indexed by service id.\n@return the {@link Counter} for the recovery state.", "predict": "Allocates a new Counter object for the shopping cart instance.\n\n@param Aeron aeron\n@param MutableDirectBuffer tempBuffer\n@param long leadershipTermId\n@param long logPosition\n@param long timestamp\n@param boolean hasReplay\n@param long... snapshotRecordingIds.\n\nThis method allocates a new Counter object for the specified Aeron, MutableDirectBuffer, leadershipTermId, logPosition, timestamp, and hasReplay values. It also adds the snapshotRecordingIds to the key length and labels. The returned Counter object is managed by the Aeron class."}, {"ID": 1957, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function execute(Request $request) { if (!$this->requireProvider(\"Executing cache request\")) return null; $cacheKey = $request->getCacheKey(); if (empty($cacheKey)) { if (!empty($this->log)) $this->log->error(\"Invalid or missing cache key.\"); return null; } $cacheRefresh = $request->getForceRefresh(); if (!$cacheRefresh) { $cacheData = $this->cacheProvider->get($cacheKey); if (!empty($cacheData)) { if (!empty($this->log)) $this->log->debug(\"Cache hit on key \" . $cacheKey); return $cacheData; } } if (!empty($this->log)) $this->log->debug(\"CACHE\", \"Cache miss on key \" . $cacheKey); $value = $request->executeCallback(); if (!empty($value)) { $this->cacheProvider->set($cacheKey, $value, $request->getCacheTTL()); } return $value; }. \n### Response: Do a cache request\n\n@param Request $request\n@return mixed.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static int findCounterId(final CountersReader counters) { final DirectBuffer buffer = counters.metaDataBuffer(); for (int i = 0, size = counters.maxCounterId(); i < size; i++) { if (counters.getCounterState(i) == RECORD_ALLOCATED) { final int recordOffset = CountersReader.metaDataOffset(i); if (buffer.getInt(recordOffset + TYPE_ID_OFFSET) == RECOVERY_STATE_TYPE_ID) { return i; } } } return NULL_COUNTER_ID; } \n### Response:", "ground_truth": "Find the active counter id for recovery state.\n\n@param counters to search within.\n@return the counter id if found otherwise {@link CountersReader#NULL_COUNTER_ID}.", "predict": "Find the counter ID for the given CountersReader.\n\n@param CountersReader counters\n@return int counter ID or NULL_COUNTER_ID."}, {"ID": 1958, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static function sortMultisigKeys(array $pubKeys) { $result = array_values($pubKeys); usort($result, function (PublicKeyInterface $a, PublicKeyInterface $b) { $av = $a->getHex(); $bv = $b->getHex(); return $av == $bv ? 0 : $av > $bv ? 1 : -1; }); return $result; }. \n### Response: sort public keys for multisig script\n\n@param PublicKeyInterface[] $pubKeys\n@return PublicKeyInterface[].\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static boolean hasReplay(final CountersReader counters, final int counterId) { final DirectBuffer buffer = counters.metaDataBuffer(); if (counters.getCounterState(counterId) == RECORD_ALLOCATED) { final int recordOffset = CountersReader.metaDataOffset(counterId); if (buffer.getInt(recordOffset + TYPE_ID_OFFSET) == RECOVERY_STATE_TYPE_ID) { return buffer.getInt(recordOffset + KEY_OFFSET + REPLAY_FLAG_OFFSET) == 1; } } return false; } \n### Response:", "ground_truth": "Has the recovery process got a log to replay?\n\n@param counters  to search within.\n@param counterId for the active recovery counter.\n@return true if a replay is required.", "predict": "hasReplay method for checking replay flag in counter data\n\n@param CountersReader counters\n@param int counterId\n@return boolean"}, {"ID": 1959, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function getRecipeById($id) { $result = [ 'className' => (isset($this->classNameById[$id])) ? $this->classNameById[$id] : null, 'arguments' => (isset($this->argumentsById[$id])) ? $this->argumentsById[$id] : null, 'constructor' => (isset($this->constructorById[$id])) ? $this->constructorById[$id] : null, 'dependencies' => (isset($this->dependenciesById[$id])) ? $this->dependenciesById[$id] : null, ]; return $result; }. \n### Response: Returns the recipe by id.\n\n@param string $id The name of the class to return recipe for\n\n@author Benjamin Carl \n\n@return mixed Arguments as array, or NULL if no arguments set.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static long getSnapshotRecordingId(final CountersReader counters, final int counterId, final int serviceId) { final DirectBuffer buffer = counters.metaDataBuffer(); if (counters.getCounterState(counterId) == RECORD_ALLOCATED) { final int recordOffset = CountersReader.metaDataOffset(counterId); if (buffer.getInt(recordOffset + TYPE_ID_OFFSET) == RECOVERY_STATE_TYPE_ID) { final int serviceCount = buffer.getInt(recordOffset + KEY_OFFSET + SERVICE_COUNT_OFFSET); if (serviceId < 0 || serviceId >= serviceCount) { throw new ClusterException(\"invalid serviceId \" + serviceId + \" for count of \" + serviceCount); } return buffer.getLong( recordOffset + KEY_OFFSET + SNAPSHOT_RECORDING_IDS_OFFSET + (serviceId * SIZE_OF_LONG)); } } throw new ClusterException(\"Active counter not found \" + counterId); } \n### Response:", "ground_truth": "Get the recording id of the snapshot for a service.\n\n@param counters  to search within.\n@param counterId for the active recovery counter.\n@param serviceId for the snapshot required.\n@return the count of replay terms if found otherwise {@link Aeron#NULL_VALUE}.", "predict": "Provides a static method for retrieving the snapshot recording ID for a given counter and its associated service ID.\n\n@param CountersReader counters The CountersReader object used to retrieve the state of the counter.\n\n@return long The snapshot recording ID.\n\n@throws ClusterException If the counter is not found or the service ID is invalid.\n\nNote: This method assumes that the CountersReader object is already created and configured."}, {"ID": 1960, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static systemuser_systemcmdpolicy_binding[] get(nitro_service service, String username) throws Exception{ systemuser_systemcmdpolicy_binding obj = new systemuser_systemcmdpolicy_binding(); obj.set_username(username); systemuser_systemcmdpolicy_binding response[] = (systemuser_systemcmdpolicy_binding[]) obj.get_resources(service); return response; }. \n### Response: Use this API to fetch systemuser_systemcmdpolicy_binding resources of given name ..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static char[] flagsToChars(final short flags) { final char[] chars = new char[]{ '0', '0', '0', '0', '0', '0', '0', '0' }; final int length = chars.length; short mask = (short)(1 << (length - 1)); for (int i = 0; i < length; i++) { if ((flags & mask) == mask) { chars[i] = '1'; } mask >>= 1; } return chars; } \n### Response:", "ground_truth": "Convert header flags to an array of chars to be human readable.\n\n@param flags to be converted.\n@return header flags converted to an array of chars to be human readable.", "predict": "This method converts a short flags value into a character array of the appropriate length. It does this by using a bitwise AND operation to combine the flags with a mask, and then using a loop to iterate through the characters in the array and set each one to '1' if the corresponding bit in the flags is set. The resulting character array is returned."}, {"ID": 1961, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (v *Vendorer) walkSource(pkgPath string) ([]string, error) { // clean pkgPath since we access v.newRules directly pkgPath = filepath.Clean(pkgPath) for _, r := range v.skippedPaths { if r.Match([]byte(pkgPath)) { return nil, nil } } files, err := ioutil.ReadDir(pkgPath) if err != nil { return nil, err } // Find any children packages we need to include in an all-srcs rule. var children []string for _, f := range files { if f.IsDir() { c, err := v.walkSource(filepath.Join(pkgPath, f.Name())) if err != nil { return nil, err } children = append(children, c...) } } // This path is a package either if we've added rules or if a BUILD file already exists. _, hasRules := v.newRules[pkgPath] isPkg := hasRules if !isPkg { isPkg, _ = findBuildFile(pkgPath) } if !isPkg { // This directory isn't a package (doesn't contain a BUILD file), // but there might be subdirectories that are packages, // so pass that up to our parent. return children, nil } // Enforce formatting the BUILD file, even if we're not adding srcs rules if !hasRules { v.addRules(pkgPath, nil) } if !v.cfg.AddSourcesRules { return nil, nil } pkgSrcsExpr := &bzl.LiteralExpr{Token: `glob([\"**\"])`} if pkgPath == \".\" { pkgSrcsExpr = &bzl.LiteralExpr{Token: `glob([\"**\"], exclude=[\"bazel-*/**\", \".git/**\"])`} } v.addRules(pkgPath, []*bzl.Rule{ newRule(RuleTypeFileGroup, func(_ ruleType) string { return pkgSrcsTarget }, map[string]bzl.Expr{ \"srcs\": pkgSrcsExpr, \"visibility\": asExpr([]string{\"//visibility:private\"}), }), newRule(RuleTypeFileGroup, func(_ ruleType) string { return allSrcsTarget }, map[string]bzl.Expr{ \"srcs\": asExpr(append(children, fmt.Sprintf(\":%s\", pkgSrcsTarget))), }), }) return []string{fmt.Sprintf(\"//%s:%s\", pkgPath, allSrcsTarget)}, nil }. \n### Response: // walkSource walks the source tree recursively from pkgPath, adding\n// any BUILD files to v.newRules to be formatted.\n//\n// If AddSourcesRules is enabled in the kazel config, then we additionally add\n// package-sources and recursive all-srcs filegroups rules to every BUILD file.\n//\n// Returns the list of children all-srcs targets that should be added to the\n// all-srcs rule of the enclosing package..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public PublicationMessageFlyweight channel(final String channel) { lengthOfChannel = buffer.putStringAscii(offset + CHANNEL_OFFSET, channel); return this; } \n### Response:", "ground_truth": "Set the channel field in ASCII\n\n@param channel field value\n@return flyweight", "predict": "// This method returns the publication messageFlyweight for the given channel.\n//\n// It uses the buffer to write the channel's contents to the given offset, and\n// returns theFlyweight object itself.\n//\n// CHANNEL_OFFSET is the offset at which the buffer should start writing the\n// channel's contents.\n//\n// If the channel is empty, the method will return an empty publication messageFlyweight.\n//\n// Returns a publication messageFlyweight object with the given channel's contents written to the buffer.\npublic PublicationMessageFlyweight channel(final String channel) {\n    lengthOfChannel = buffer.putStringAscii(offset + CHANNEL_OFFSET, channel);\n    return this;\n}."}, {"ID": 1962, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function addGlobalHandler(eventType, handler, thisObject){ var handlers = globalHandlers[eventType]; if (handlers) { // search for similar handler, returns if found (prevent for handler dublicates) for (var i = 0, item; item = handlers[i]; i++) if (item.handler === handler && item.thisObject === thisObject) return; } else { if (noCaptureScheme) // nothing to do, but it will provide observeGlobalEvents calls if other one doesn't addHandler(document, eventType, $null); else document.addEventListener(eventType, observeGlobalEvents, true); handlers = globalHandlers[eventType] = []; } // add new handler handlers.push({ handler: handler, thisObject: thisObject }); }. \n### Response: Adds global handler for some event type.\n@param {string} eventType\n@param {function(event)} handler\n@param {object=} thisObject Context for handler.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public long offer(final DirectBuffer buffer, final int offset, final int length) { return cluster.offer(id, responsePublication, buffer, offset, length); } \n### Response:", "ground_truth": "Non-blocking publish of a partial buffer containing a message to a cluster.\n\n@param buffer containing message.\n@param offset offset in the buffer at which the encoded message begins.\n@param length in bytes of the encoded message.\n@return the same as {@link Publication#offer(DirectBuffer, int, int)} when in {@link Cluster.Role#LEADER}\notherwise {@link #MOCKED_OFFER}.", "predict": "Offers a DirectBuffer to a cluster.\n@param {DirectBuffer} buffer The DirectBuffer to offer.\n@param {int} offset The offset within the buffer to start offering.\n@param {int} length The length of the buffer to offer.\n@return The long value representing the offer."}, {"ID": 1963, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def start_event_loop(self, timeout=0): \"\"\" Start an event loop. This is used to start a blocking event loop so that interactive functions, such as ginput and waitforbuttonpress, can wait for events. This should not be confused with the main GUI event loop, which is always running and has nothing to do with this. Call signature:: start_event_loop(self,timeout=0) This call blocks until a callback function triggers stop_event_loop() or *timeout* is reached. If *timeout* is <=0, never timeout. Raises RuntimeError if event loop is already running. \"\"\" if hasattr(self, '_event_loop'): raise RuntimeError(\"Event loop already running\") id = wx.NewId() timer = wx.Timer(self, id=id) if timeout > 0: timer.Start(timeout*1000, oneShot=True) bind(self, wx.EVT_TIMER, self.stop_event_loop, id=id) # Event loop handler for start/stop event loop self._event_loop = wx.EventLoop() self._event_loop.Run() timer.Stop(). \n### Response: Start an event loop.  This is used to start a blocking event\n        loop so that interactive functions, such as ginput and\n        waitforbuttonpress, can wait for events.  This should not be\n        confused with the main GUI event loop, which is always running\n        and has nothing to do with this.\n\n        Call signature::\n\n        start_event_loop(self,timeout=0)\n\n        This call blocks until a callback function triggers\n        stop_event_loop() or *timeout* is reached.  If *timeout* is\n        <=0, never timeout.\n\n        Raises RuntimeError if event loop is already running..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public final void wrap(final AtomicBuffer buffer, final int offset, final int length) { this.buffer.wrap(buffer, offset, length); } \n### Response:", "ground_truth": "Wrap a region of an underlying log buffer so can can represent a claimed space for use by a publisher.\n\n@param buffer to be wrapped.\n@param offset at which the claimed region begins including space for the header.\n@param length length of the underlying claimed region including space for the header.", "predict": "Method-level comment:\n\nWraps the given AtomicBuffer in a new buffer with the specified offset and length.\n\nThis method does not have any parameters, so it can be assumed to take an AtomicBuffer as its argument.\n\nIt uses the `this.buffer.wrap(buffer, offset, length)` method to accomplish this task.\n\nNote that this method modifies the original AtomicBuffer, so it should be called with caution and with the understanding that it may affect the original buffer's state."}, {"ID": 1964, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func MakeClient(frontend base.ClientFacade, backend base.FacadeCaller, client *httprequest.Client) *Client { return &Client{ ClientFacade: frontend, facade: backend, client: client, } }. \n### Response: // MakeClient is a direct constructor function for a backups client..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public final void commit() { int frameLength = buffer.capacity(); if (ByteOrder.nativeOrder() != LITTLE_ENDIAN) { frameLength = Integer.reverseBytes(frameLength); } buffer.putIntOrdered(FRAME_LENGTH_FIELD_OFFSET, frameLength); } \n### Response:", "ground_truth": "Commit the message to the log buffer so that is it available to subscribers.", "predict": "// This method commits the HTTP request frame."}, {"ID": 1965, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function main(array $args = array()) { Garp_Cli::lineOut('Welcome to the Garp interactive shell.', Garp_Cli::YELLOW); Garp_Cli::lineOut('Use Ctrl-C to quit.'); $this->_setErrorHandler(); $this->_tick(); }. \n### Response: Main starting point\n\n@param array $args\n@return void.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public final void abort() { int frameLength = buffer.capacity(); if (ByteOrder.nativeOrder() != LITTLE_ENDIAN) { frameLength = Integer.reverseBytes(frameLength); } buffer.putShort(TYPE_FIELD_OFFSET, (short)HDR_TYPE_PAD, LITTLE_ENDIAN); buffer.putIntOrdered(FRAME_LENGTH_FIELD_OFFSET, frameLength); } \n### Response:", "ground_truth": "Abort a claim of the message space to the log buffer so that the log can progress by ignoring this claim.", "predict": "abort() method is used to abort the program.\n\n@return void\nThis method does not return anything.\n\n"}, {"ID": 1966, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private function scrapeUrl($url) { if (!parse_url($url, PHP_URL_HOST)) { $url = 'http://' . $url; } try { $client = new Client(); $response = $client->get($url); } catch(\\Exception $e) { return []; } $crawler = new Crawler($response->getBody()->getContents()); $description = ''; foreach ($crawler->filter('meta') as $node) { if ($node->getAttribute('name') == 'description') { $description = $node->getAttribute('content'); } } $title = ''; if (count($crawler->filter('title'))) { $title = trim($crawler->filter('title')->text()); } return [ 'title' => $title, 'description' => $description, ]; }. \n### Response: Extract title and description from the URL\n\n@param $url\n@return array.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void main(final String[] args) { loadPropertiesFiles(args); final ShutdownSignalBarrier barrier = new ShutdownSignalBarrier(); final MediaDriver.Context ctx = new MediaDriver.Context(); ctx.terminationHook(barrier::signal); try (MediaDriver ignore = MediaDriver.launch(ctx)) { barrier.await(); System.out.println(\"Shutdown Driver...\"); } } \n### Response:", "ground_truth": "Start Media Driver as a stand-alone process.\n\n@param args command line arguments", "predict": "Launch the MediaDriver and create a ShutdownSignalBarrier\n\n@param MediaDriver.Context ctx\n@return void\n\n"}, {"ID": 1967, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function getAttributeNameForColumn($columnName) { if (!empty($this->mappings)) { if (isset($this->mappings[$columnName])) { return $this->mappings[$columnName]; } } return $columnName; }. \n### Response: Gets the entity attribute name of a given column in a table.\n\n@param string $columnName\n\n@return string.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void close() { CloseHelper.close(sharedRunner); CloseHelper.close(sharedNetworkRunner); CloseHelper.close(receiverRunner); CloseHelper.close(senderRunner); CloseHelper.close(conductorRunner); CloseHelper.close(sharedInvoker); if (ctx.useWindowsHighResTimer() && SystemUtil.osName().startsWith(\"win\")) { if (!wasHighResTimerEnabled) { HighResolutionTimer.disable(); } } } \n### Response:", "ground_truth": "Shutdown the media driver by stopping all threads and freeing resources.", "predict": "Closes all the objects associated with the current context and ensures that any resources are properly closed.\n\n@param object $sharedRunner\n\n@return void.\n\n"}, {"ID": 1968, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (diskManager virtualDiskManager) Create(ctx context.Context, datastore *vclib.Datastore) (canonicalDiskPath string, err error) { if diskManager.volumeOptions.SCSIControllerType == \"\" { diskManager.volumeOptions.SCSIControllerType = vclib.LSILogicControllerType } // Create virtual disk diskFormat := vclib.DiskFormatValidType[diskManager.volumeOptions.DiskFormat] // Create a virtual disk manager vdm := object.NewVirtualDiskManager(datastore.Client()) // Create specification for new virtual disk vmDiskSpec := &types.FileBackedVirtualDiskSpec{ VirtualDiskSpec: types.VirtualDiskSpec{ AdapterType: diskManager.volumeOptions.SCSIControllerType, DiskType: diskFormat, }, CapacityKb: int64(diskManager.volumeOptions.CapacityKB), } requestTime := time.Now() // Create virtual disk task, err := vdm.CreateVirtualDisk(ctx, diskManager.diskPath, datastore.Datacenter.Datacenter, vmDiskSpec) if err != nil { vclib.RecordvSphereMetric(vclib.APICreateVolume, requestTime, err) klog.Errorf(\"Failed to create virtual disk: %s. err: %+v\", diskManager.diskPath, err) return \"\", err } taskInfo, err := task.WaitForResult(ctx, nil) vclib.RecordvSphereMetric(vclib.APICreateVolume, requestTime, err) if err != nil { klog.Errorf(\"Failed to complete virtual disk creation: %s. err: %+v\", diskManager.diskPath, err) return \"\", err } canonicalDiskPath = taskInfo.Result.(string) return canonicalDiskPath, nil }. \n### Response: // Create implements Disk's Create interface\n// Contains implementation of virtualDiskManager based Provisioning.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public final long position() { final int resultingOffset = BitUtil.align(termOffset() + frameLength(), FRAME_ALIGNMENT); return computePosition(termId(), resultingOffset, positionBitsToShift, initialTermId); } \n### Response:", "ground_truth": "Get the current position to which the image has advanced on reading this message.\n\n@return the current position to which the image has advanced on reading this message.", "predict": "// Position method returns the position of the current term in the document.\n// It aligns the current term offset and frame length to the specified frame alignment and returns the resulting offset.\n\nNote: The method is part of the Document class and is used to calculate the position of the current term in the document."}, {"ID": 1969, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function getList($search = '', $start = 0, $limit = 0, $orderBy = '', $orderByDir = 'ASC', $publishedOnly = false, $minimal = false) { $parameters = array( 'search' => $search, 'start' => $start, 'limit' => $limit, 'orderBy' => $orderBy, 'orderByDir' => $orderByDir, 'publishedOnly' => $publishedOnly, 'minimal' => $minimal ); $parameters = array_filter($parameters); return $this->makeRequest($this->endpoint, $parameters); }. \n### Response: Get a list of items\n\n@param string $search\n@param int    $start\n@param int    $limit\n@param string $orderBy\n@param string $orderByDir\n@param bool   $publishedOnly\n@param bool   $minimal\n\n@return array|mixed.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static Counter allocate( final Aeron aeron, final MutableDirectBuffer tempBuffer, final int serviceId) { tempBuffer.putInt(SERVICE_ID_OFFSET, serviceId); final int labelOffset = BitUtil.align(KEY_LENGTH, SIZE_OF_INT); int labelLength = 0; labelLength += tempBuffer.putStringWithoutLengthAscii(labelOffset + labelLength, NAME); labelLength += tempBuffer.putIntAscii(labelOffset + labelLength, serviceId); return aeron.addCounter( SERVICE_HEARTBEAT_TYPE_ID, tempBuffer, 0, KEY_LENGTH, tempBuffer, labelOffset, labelLength); } \n### Response:", "ground_truth": "Allocate a counter to represent the heartbeat of a clustered service.\n\n@param aeron           to allocate the counter.\n@param tempBuffer      to use for building the key and label without allocation.\n@param serviceId       of the service heartbeat.\n@return the {@link Counter} for the commit position.", "predict": "Allocates a counter for a specific service.\n\n@param Aeron aeron\n@param MutableDirectBuffer tempBuffer\n@param int serviceId\n\n@return Counter."}, {"ID": 1970, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func manifestDeployError(err *error, upgrading bool) { if *err != nil { if upgrading { // We now treat any failure to overwrite the charm -- or otherwise // manipulate the charm directory -- as a conflict, because it's // actually plausible for a user (or at least a charm author, who // is the real audience for this case) to get in there and fix it. logger.Errorf(\"cannot upgrade charm: %v\", *err) *err = ErrConflict } else { // ...but if we can't install at all, we just fail out as the old // gitDeployer did, because I'm not willing to mess around with // the uniter to enable ErrConflict handling on install. We've // never heard of it actually happening, so this is probably not // a big deal. *err = fmt.Errorf(\"cannot install charm: %v\", *err) } } }. \n### Response: // manifestDeployError annotates or replaces the supplied error according\n// to whether or not an upgrade operation is in play. It was extracted from\n// Deploy to aid that method's readability..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static int findCounterId(final CountersReader counters, final int serviceId) { final DirectBuffer buffer = counters.metaDataBuffer(); for (int i = 0, size = counters.maxCounterId(); i < size; i++) { if (counters.getCounterState(i) == RECORD_ALLOCATED) { final int recordOffset = CountersReader.metaDataOffset(i); if (buffer.getInt(recordOffset + TYPE_ID_OFFSET) == SERVICE_HEARTBEAT_TYPE_ID && buffer.getInt(recordOffset + KEY_OFFSET + SERVICE_ID_OFFSET) == serviceId) { return i; } } } return NULL_COUNTER_ID; } \n### Response:", "ground_truth": "Find the active counter id for heartbeat of a given service id.\n\n@param counters  to search within.\n@param serviceId to search for.\n@return the counter id if found otherwise {@link CountersReader#NULL_COUNTER_ID}.", "predict": "// findCounterId retrieves the counter ID for the given CountersReader and serviceId. It iterates through the counters and checks if the state is RECORD_ALLOCATED. If it is, it retrieves the meta data offset and checks if the type ID and service ID match. If they do, it returns the counter ID. If not, it returns NULL_COUNTER_ID. This method is useful for finding specific counters within a CountersReader."}, {"ID": 1971, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def get_shifted_holidays(self, dates): \"\"\" Taking a list of existing holidays, yield a list of 'shifted' days if the holiday falls on SUN. \"\"\" for holiday, label in dates: if holiday.weekday() == SUN: yield ( holiday + timedelta(days=1), label + ' shift' ). \n### Response: Taking a list of existing holidays, yield a list of 'shifted' days if\n        the holiday falls on SUN..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public Map<StreamCompositeKey, StreamBacklog> snapshot() { final Map<StreamCompositeKey, StreamBacklog> streams = new HashMap<>(); counters.forEach( (counterId, typeId, keyBuffer, label) -> { if ((typeId >= PUBLISHER_LIMIT_TYPE_ID && typeId <= RECEIVER_POS_TYPE_ID) || typeId == SENDER_LIMIT_TYPE_ID || typeId == PER_IMAGE_TYPE_ID || typeId == PUBLISHER_POS_TYPE_ID) { final StreamCompositeKey key = new StreamCompositeKey( keyBuffer.getInt(SESSION_ID_OFFSET), keyBuffer.getInt(STREAM_ID_OFFSET), keyBuffer.getStringAscii(CHANNEL_OFFSET)); final StreamBacklog streamBacklog = streams.computeIfAbsent(key, (ignore) -> new StreamBacklog()); final long registrationId = keyBuffer.getLong(REGISTRATION_ID_OFFSET); final long value = counters.getCounterValue(counterId); switch (typeId) { case PublisherLimit.PUBLISHER_LIMIT_TYPE_ID: streamBacklog.createPublisherIfAbsent().registrationId(registrationId); streamBacklog.createPublisherIfAbsent().limit(value); break; case PublisherPos.PUBLISHER_POS_TYPE_ID: streamBacklog.createPublisherIfAbsent().registrationId(registrationId); streamBacklog.createPublisherIfAbsent().position(value); break; case SenderPos.SENDER_POSITION_TYPE_ID: streamBacklog.createSenderIfAbsent().registrationId(registrationId); streamBacklog.createSenderIfAbsent().position(value); break; case SenderLimit.SENDER_LIMIT_TYPE_ID: streamBacklog.createSenderIfAbsent().registrationId(registrationId); streamBacklog.createSenderIfAbsent().limit(value); break; case ReceiverHwm.RECEIVER_HWM_TYPE_ID: streamBacklog.createReceiverIfAbsent().registrationId(registrationId); streamBacklog.createReceiverIfAbsent().highWaterMark(value); break; case ReceiverPos.RECEIVER_POS_TYPE_ID: streamBacklog.createReceiverIfAbsent().registrationId(registrationId); streamBacklog.createReceiverIfAbsent().position(value); break; case SubscriberPos.SUBSCRIBER_POSITION_TYPE_ID: streamBacklog.subscriberBacklogs().put(registrationId, new Subscriber(value)); break; } } }); return streams; } \n### Response:", "ground_truth": "Take a snapshot of all the backlog information and group by stream.\n\n@return a snapshot of all the backlog information and group by stream.", "predict": "public Map<StreamCompositeKey, StreamBacklog> snapshot() {\n```\n    final Map<StreamCompositeKey, StreamBacklog> streams = new HashMap<>();\n     counters.forEach( (counterId, typeId, keyBuffer, label) -> {\n        if ((typeId >= PUBLISHER_LIMIT_TYPE_ID\n```"}, {"ID": 1972, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def exists(self, filename): \"\"\"Report whether a file exists on the distribution point. Determines file type by extension. Args: filename: Filename you wish to check. (No path! e.g.: \"AdobeFlashPlayer-14.0.0.176.pkg\") \"\"\" if is_package(filename): filepath = os.path.join(self.connection[\"mount_point\"], \"Packages\", filename) else: filepath = os.path.join(self.connection[\"mount_point\"], \"Scripts\", filename) return os.path.exists(filepath). \n### Response: Report whether a file exists on the distribution point.\n\n        Determines file type by extension.\n\n        Args:\n            filename: Filename you wish to check. (No path! e.g.:\n                \"AdobeFlashPlayer-14.0.0.176.pkg\").\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static AtomicCounter allocate( final MutableDirectBuffer tempBuffer, final String name, final int typeId, final CountersManager countersManager, final long registrationId) { return new AtomicCounter( countersManager.valuesBuffer(), allocateCounterId(tempBuffer, name, typeId, countersManager, registrationId), countersManager); } \n### Response:", "ground_truth": "Allocate a counter for tracking the last heartbeat of an entity.\n\n@param tempBuffer      to be used for labels and key.\n@param name            of the counter for the label.\n@param typeId          of the counter for classification.\n@param countersManager from which to allocated the underlying storage.\n@param registrationId  to be associated with the counter.\n@return a new {@link AtomicCounter} for tracking the last heartbeat.", "predict": "Allocates an AtomicCounter object and sets its values based on the given parameters.\n\n        Returns:\n            An AtomicCounter object.\n\n        Args:\n            tempBuffer: MutableDirectBuffer to store the counter values.\n            name: The name of the counter.\n            typeId: The type of the counter.\n            countersManager: The CountersManager object to use for managing the counter.\n            registrationId: The registration ID of the counter.\n\n"}, {"ID": 1973, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private static function discoverPackages(string $vendorPath, string $manifestPath): void { $installedPackages = []; if (file_exists($path = $vendorPath . '/composer/installed.json')) { $installedPackages = json_decode(file_get_contents($path), true); } $discoverPackages = []; foreach ($installedPackages as $package) { if (! empty($package['extra']['chiron'])) { $packageInfo = $package['extra']['chiron']; $discoverPackages[$package['name']] = $packageInfo; } } if (! is_writable(dirname($manifestPath))) { throw new \\RuntimeException('The directory \"' . dirname($manifestPath) . '\" must be present and writable.'); } file_put_contents($manifestPath, '<?php return ' . var_export($discoverPackages, true) . ';'); }. \n### Response: Discover and Write the found packages in a manifest array file to disk.\n\n@param string $manifestPath\n@param array  $manifest\n\n@throws \\RuntimeException.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void close() { final MappedByteBuffer cncByteBuffer = this.cncByteBuffer; this.cncByteBuffer = null; IoUtil.unmap(cncByteBuffer); super.close(); } \n### Response:", "ground_truth": "Clean up all resources that the client uses to communicate with the Media Driver.", "predict": "This method is called by the super class and is responsible for closing any resources that were opened by the class.\n\n@return void\n\n@throws IOException."}, {"ID": 1974, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private function addRole(Group $group, $roleData) { if (isset($roleData['id'])) { $role = $this->get('sulu.repository.role')->findRoleById($roleData['id']); if (!$role) { throw new EntityNotFoundException($this->get('sulu.repository.role')->getClassName(), $roleData['id']); } if (!$group->getRoles()->contains($role)) { $group->addRole($role); } } return true; }. \n### Response: Adds the given role to the group.\n\n@param Group $group\n@param array $roleData\n\n@return bool\n\n@throws \\Sulu\\Component\\Rest\\Exception\\EntityNotFoundException.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void dispatchDescriptor( final RecordingDescriptorDecoder decoder, final RecordingDescriptorConsumer consumer) { consumer.onRecordingDescriptor( decoder.controlSessionId(), decoder.correlationId(), decoder.recordingId(), decoder.startTimestamp(), decoder.stopTimestamp(), decoder.startPosition(), decoder.stopPosition(), decoder.initialTermId(), decoder.segmentFileLength(), decoder.termBufferLength(), decoder.mtuLength(), decoder.sessionId(), decoder.streamId(), decoder.strippedChannel(), decoder.originalChannel(), decoder.sourceIdentity()); } \n### Response:", "ground_truth": "Dispatch a descriptor message to a consumer by reading the fields in the correct order.\n\n@param decoder  which wraps the encoded message ready for reading.\n@param consumer to which the decoded fields should be passed.", "predict": "Dispatches the given recording descriptor and invokes the recording descriptor consumer.\n\n@param RecordingDescriptorDecoder $decoder\n@param RecordingDescriptorConsumer $consumer\n\n@return void."}, {"ID": 1975, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function getWord($number) { if(is_numeric($number)) { $number = strval($number); } if(strlen($number) > 39){ throw new InvalidArgumentException('Number max lenght 36 digit'); } $formated = $this->number_format(strval($number), 0, '.', ','); $groups = explode(',', $formated); $steps = count($groups); $parts = array(); foreach ($groups as $step => $group) { $group_words = $this->groupToWords($group); if ($group_words) { $part = implode(' ' . $this->number_word['and'] . ' ', $group_words); if (isset($this->number_word['step'][$steps - $step - 1])) { $part .= ' ' . $this->number_word['step'][$steps - $step - 1]; } $parts[] = $part; } } return implode(' ' . $this->number_word['and'] . ' ', $parts); }. \n### Response: return string of number\n\n@param string $number\n@return string.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private void addSlab(int minimumSize) { int nextSlabSize; if (bytesUsed == 0) { nextSlabSize = initialSlabSize; } else if (bytesUsed > maxCapacityHint / 5) { // to avoid an overhead of up to twice the needed size, we get linear when approaching target page size nextSlabSize = maxCapacityHint / 5; } else { // double the size every time nextSlabSize = bytesUsed; } if (nextSlabSize < minimumSize) { LOG.debug(\"slab size {} too small for value of size {}. Bumping up slab size\", nextSlabSize, minimumSize); nextSlabSize = minimumSize; } LOG.debug(\"used {} slabs, adding new slab of size {}\", slabs.size(), nextSlabSize); this.currentSlab = allocator.allocate(nextSlabSize); this.slabs.add(currentSlab); this.bytesAllocated += nextSlabSize; this.currentSlabIndex = 0; } \n### Response:", "ground_truth": "the new slab is guaranteed to be at least minimumSize\n@param minimumSize the size of the data we want to copy in the new slab", "predict": "This method adds a new slab to the allocator. It first checks if the current slab is already full, and if not, it sets the next slab size to the minimum size required. If the current slab is full, it checks if the bytes used is greater than the maximum capacity hint divided by 5. If so, it sets the next slab size to the maximum capacity hint divided by 5. If not, it sets the next slab size to the bytes used. It then checks if the next slab size is less than the minimum size required. If so, it logs a debug message and increases the size of the slab. It then allocates the new slab and adds it to the slab list. It also increments the bytesAllocated and currentSlabIndex variables."}, {"ID": 1976, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function run() { $this->executor->setActual($this->actual); $this->executor->setPeticion($this->peticion); $this->executor->setCallback($this->configure->getConfig()); $this->executor->exist(); $this->executor->compare(); $this->executor->execute(); return $this; }. \n### Response: Ejecutar peticion de un contralador..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void setByte(long index, byte value) { checkArgument(index < bytesUsed, \"Index: \" + index + \" is >= the current size of: \" + bytesUsed); long seen = 0; for (int i = 0; i < slabs.size(); i++) { ByteBuffer slab = slabs.get(i); if (index < seen + slab.limit()) { // ok found index slab.put((int)(index-seen), value); break; } seen += slab.limit(); } } \n### Response:", "ground_truth": "Replace the byte stored at position index in this stream with value\n\n@param index which byte to replace\n@param value the value to replace it with", "predict": "This method sets a byte value at the specified index in the slab table. It first checks that the index is within the bounds of the slab table by checking if the index is less than the number of bytes used by the slab table. It then iterates through the slab table and checks if the index is already seen. If it is, it simply adds the value to the existing byte at the index and breaks out of the loop. If the index is not already seen, it adds the value to the slab table at the index and increments the seen counter."}, {"ID": 1977, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (db *DB) Del(keys ...[]byte) (int64, error) { if len(keys) == 0 { return 0, nil } codedKeys := make([][]byte, len(keys)) for i, k := range keys { codedKeys[i] = db.encodeKVKey(k) } t := db.kvBatch t.Lock() defer t.Unlock() for i, k := range keys { t.Delete(codedKeys[i]) db.rmExpire(t, KVType, k) } err := t.Commit() return int64(len(keys)), err }. \n### Response: // Del deletes the data..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void add(Statistics<?> stats) { if (stats.hasNonNullValue()) { nullPages.add(false); Object min = stats.genericGetMin(); Object max = stats.genericGetMax(); addMinMax(min, max); pageIndexes.add(nextPageIndex); minMaxSize += sizeOf(min); minMaxSize += sizeOf(max); } else { nullPages.add(true); } nullCounts.add(stats.getNumNulls()); ++nextPageIndex; } \n### Response:", "ground_truth": "Adds the data from the specified statistics to this builder\n\n@param stats\nthe statistics to be added", "predict": "// Add adds the statistics to the page index and null pages.."}, {"ID": 1978, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public static void log(final Level level, final Throwable exception, final String message) { String nameOfException = exception.getClass().getName(); String messageOfException = exception.getMessage(); StringBuilder builder = new StringBuilder(BUFFER_SIZE); builder.append(level); builder.append(\": \"); builder.append(message); builder.append(\" (\"); builder.append(nameOfException); if (messageOfException != null && !messageOfException.isEmpty()) { builder.append(\": \"); builder.append(messageOfException); } builder.append(\")\"); System.err.println(builder); }. \n### Response: Logs a caught exception with a custom text message.\n\n@param level\nSeverity level\n@param message\nPlain text message\n@param exception\nCaught exception.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public static RowRanges calculateRowRanges(FilterCompat.Filter filter, ColumnIndexStore columnIndexStore, Set<ColumnPath> paths, long rowCount) { return filter.accept(new FilterCompat.Visitor<RowRanges>() { @Override public RowRanges visit(FilterPredicateCompat filterPredicateCompat) { try { return filterPredicateCompat.getFilterPredicate() .accept(new ColumnIndexFilter(columnIndexStore, paths, rowCount)); } catch (MissingOffsetIndexException e) { LOGGER.info(e.getMessage()); return RowRanges.createSingle(rowCount); } } @Override public RowRanges visit(UnboundRecordFilterCompat unboundRecordFilterCompat) { return RowRanges.createSingle(rowCount); } @Override public RowRanges visit(NoOpFilter noOpFilter) { return RowRanges.createSingle(rowCount); } }); } \n### Response:", "ground_truth": "Calculates the row ranges containing the indexes of the rows might match the specified filter.\n\n@param filter\nto be used for filtering the rows\n@param columnIndexStore\nthe store for providing column/offset indexes\n@param paths\nthe paths of the columns used in the actual projection; a column not being part of the projection will be\nhandled as containing {@code null} values only even if the column has values written in the file\n@param rowCount\nthe total number of rows in the row-group\n@return the ranges of the possible matching row indexes; the returned ranges will contain all the rows if any of\nthe required offset index is missing", "predict": "Calculates the row ranges for a given filter and index store.\n\n@param filter\nThe filter to apply to the data.\n@param columnIndexStore\nThe index store to use for the filter.\n@param paths\nThe set of column paths to filter by.\n@param rowCount\nThe number of rows to return.\n\n@return\nThe row ranges for the given filter and index store."}, {"ID": 1979, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function jsonSerialize() { $output = []; foreach ($this::getReflection()->getProperties() as $propertyName => $property) { $value = $this->{$propertyName}; if ($value instanceof Entity\\Collection || $value instanceof Entity) { $output[$propertyName] = $value->jsonSerialize(); } elseif ($value instanceof \\DateTime && $property->getType() === Entity\\Reflection\\Property::TYPE_DATE ) { $output[$propertyName] = (array) $value; $output[$propertyName][\"date\"] = $value->format(self::$dateFormat); } else { $output[$propertyName] = $value; } } return $output; }. \n### Response: Gets data which should be serialized to JSON\n\n@return array.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private static GroupType convertArrayType(final String name, final ListTypeInfo typeInfo) { final TypeInfo subType = typeInfo.getListElementTypeInfo(); return listWrapper(name, listType(), new GroupType(Repetition.REPEATED, ParquetHiveSerDe.ARRAY.toString(), convertType(\"array_element\", subType))); } \n### Response:", "ground_truth": "1 anonymous element \"array_element\"", "predict": "Converts a list type to a group type and returns it.\n\n@param name The name of the list type to convert.\n@param typeInfo The type information for the list type.\n@return The converted list type.\n\nprivate static GroupType listWrapper(String name, ListTypeInfo listTypeInfo, GroupType newGroupType) {\nreturn new GroupType(Repetition.REPEATED, ParquetHiveSerDe.ARRAY.toString(), convertType(name, listTypeInfo.getListElementTypeInfo()));\n}"}, {"ID": 1980, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: private void bindAttribute(Annotation annotation) { String fieldname = ((AttributeOverride) annotation).name(); Column column = ((AttributeOverride) annotation).column(); ((AbstractManagedType) this.superClazzType).columnBindings.put(fieldname, column); }. \n### Response: Bind attribute.\n\n@param annotation\nthe annotation.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private static GroupType convertStructType(final String name, final StructTypeInfo typeInfo) { final List<String> columnNames = typeInfo.getAllStructFieldNames(); final List<TypeInfo> columnTypes = typeInfo.getAllStructFieldTypeInfos(); return new GroupType(Repetition.OPTIONAL, name, convertTypes(columnNames, columnTypes)); } \n### Response:", "ground_truth": "An optional group containing multiple elements", "predict": "Converts a StructType to a GroupType.\n\n@param name\nthe name of the StructType to convert.\n@param typeInfo\nthe StructTypeInfo information about the StructType.\n\n"}, {"ID": 1981, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def post_mortem(tb=None, host='', port=5555, patch_stdstreams=False): \"\"\" Start post-mortem debugging for the provided traceback object If no traceback is provided the debugger tries to obtain a traceback for the last unhandled exception. Example:: try: # Some error-prone code assert ham == spam except: web_pdb.post_mortem() :param tb: traceback for post-mortem debugging :type tb: types.TracebackType :param host: web-UI hostname or IP-address :type host: str :param port: web-UI port. If ``port=-1``, choose a random port value between 32768 and 65536. :type port: int :param patch_stdstreams: redirect all standard input and output streams to the web-UI. :type patch_stdstreams: bool :raises ValueError: if no valid traceback is provided and the Python interpreter is not handling any exception \"\"\" # handling the default if tb is None: # sys.exc_info() returns (type, value, traceback) if an exception is # being handled, otherwise it returns (None, None, None) t, v, tb = sys.exc_info() exc_data = traceback.format_exception(t, v, tb) else: exc_data = traceback.format_tb(tb) if tb is None: raise ValueError('A valid traceback must be passed if no ' 'exception is being handled') pdb = WebPdb.active_instance if pdb is None: pdb = WebPdb(host, port, patch_stdstreams) else: pdb.remove_trace() pdb.console.writeline('*** Web-PDB post-mortem ***\\n') pdb.console.writeline(''.join(exc_data)) pdb.reset() pdb.interaction(None, tb). \n### Response: Start post-mortem debugging for the provided traceback object\n\n    If no traceback is provided the debugger tries to obtain a traceback\n    for the last unhandled exception.\n\n    Example::\n\n        try:\n            # Some error-prone code\n            assert ham == spam\n        except:\n            web_pdb.post_mortem()\n\n    :param tb: traceback for post-mortem debugging\n    :type tb: types.TracebackType\n    :param host: web-UI hostname or IP-address\n    :type host: str\n    :param port: web-UI port. If ``port=-1``, choose a random port value\n        between 32768 and 65536.\n    :type port: int\n    :param patch_stdstreams: redirect all standard input and output\n        streams to the web-UI.\n    :type patch_stdstreams: bool\n    :raises ValueError: if no valid traceback is provided and the Python\n        interpreter is not handling any exception.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private static String annotateMessage(String message, int pos) { StringBuilder sb = new StringBuilder(message); sb.append('\\n'); for (int i = 0; i < pos; i++) { sb.append('-'); } sb.append('^'); return sb.toString(); } \n### Response:", "ground_truth": "for pretty printing which character had the error", "predict": "private static String annotateMessage(String message, int pos) {\n        StringBuilder sb = new StringBuilder(message);\n        sb.append('\\n');\n        for (int i = 0; i < pos; i++) {\n            sb.append('-');\n        }\n        sb.append('^');\n        return sb.toString();\n    }\n\nThis method annotated a message with apostrophes at the position specified by `pos`."}, {"ID": 1982, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (c *StatsConnection) GetErrorStats(names ...string) (*api.ErrorStats, error) { var patterns []string if len(names) > 0 { patterns = make([]string, len(names)) for i, name := range names { patterns[i] = CounterStatsPrefix + name } } else { // retrieve all error counters by default patterns = []string{CounterStatsPrefix} } stats, err := c.statsClient.DumpStats(patterns...) if err != nil { return nil, err } var errorStats = &api.ErrorStats{} for _, stat := range stats { statName := strings.TrimPrefix(stat.Name, CounterStatsPrefix) /* TODO: deal with stats that contain '/' in node/counter name parts := strings.Split(statName, \"/\") var nodeName, counterName string switch len(parts) { case 2: nodeName = parts[0] counterName = parts[1] case 3: nodeName = parts[0] + parts[1] counterName = parts[2] }*/ errorStats.Errors = append(errorStats.Errors, api.ErrorCounter{ CounterName: statName, Value: errorStatToUint64(stat.Data), }) } return errorStats, nil }. \n### Response: // GetErrorStats retrieves VPP error stats..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private void endPreviousBitPackedRun() { if (bitPackedRunHeaderPointer == -1) { // we're not currently in a bit-packed-run return; } // create bit-packed-header, which needs to fit in 1 byte byte bitPackHeader = (byte) ((bitPackedGroupCount << 1) | 1); // update this byte baos.setByte(bitPackedRunHeaderPointer, bitPackHeader); // mark that this run is over bitPackedRunHeaderPointer = -1; // reset the number of groups bitPackedGroupCount = 0; } \n### Response:", "ground_truth": "If we are currently writing a bit-packed-run, update the\nbit-packed-header and consider this run to be over\n\ndoes nothing if we're not currently writing a bit-packed run", "predict": "// End previous bit-packed run. \n\nNote: This method is used to mark the end of a bit-packed run. It creates a bit-packed-header, which needs to fit in 1 byte, and updates it. It then marks that this run is over by setting bitPackedRunHeaderPointer to -1 and resetting the number of groups by setting bitPackedGroupCount to 0."}, {"ID": 1983, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public boolean isAnnotated(ExecutableElement method) { List<? extends AnnotationMirror> annotationMirrors = method.getAnnotationMirrors(); for (AnnotationMirror annotationMirror : annotationMirrors) { String typeName = annotationMirror.getAnnotationType().toString(); if (!AnnotationUtil.INTERNAL_ANNOTATION_NAMES.contains(typeName)) { return true; } } return false; }. \n### Response: Check whether the method is annotated.\n\n@param method The method\n@return True if it is annotated with non internal annotations.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public void readOne(TProtocol in, TProtocol out) throws TException { readOneStruct(in, out); } \n### Response:", "ground_truth": "reads one record from in and writes it to out\nexceptions are not recoverable as record might be halfway written\n@param in input protocol\n@param out output protocol\n@throws TException if there is an error while reading or writing", "predict": "Read one method from TProtocol in and TProtocol out.\n\n@param in The TProtocol object for input data\n@param out The TProtocol object for output data\n@Override public void readOne(TProtocol in, TProtocol out) throws TException { }"}, {"ID": 1984, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @Override public void purgeConstants() { buffersCache = new HashMap<>(); protector.purgeProtector(); resetHappened = true; logger.info(\"Resetting Constants...\"); for (Integer device : constantOffsets.keySet()) { constantOffsets.get(device).set(0); buffersCache.put(device, new ConcurrentHashMap<ArrayDescriptor, DataBuffer>()); } }. \n### Response: This method removes all cached constants.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @Deprecated public static List<Footer> readFooters(Configuration configuration, FileStatus pathStatus) throws IOException { return readFooters(configuration, pathStatus, false); } \n### Response:", "ground_truth": "this always returns the row groups\n@param configuration a configuration\n@param pathStatus a file status to read footers from\n@return a list of footers\n@throws IOException if an exception is thrown while reading the footers\n@deprecated will be removed in 2.0.0;\nuse {@link ParquetFileReader#open(InputFile, ParquetReadOptions)}", "predict": "This method returns a list of footers read from the specified configuration and file status. It has been deprecated and should be replaced by the new method `readFooters(Configuration configuration, FileStatus pathStatus, boolean isFooterFile)`."}, {"ID": 1985, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function download (data, filename) { const element = getElement(); const url = getObjectUrl(data); element.setAttribute('href', url); element.setAttribute('download', filename); document.body.appendChild(element); element.click(); document.body.removeChild(element); setTimeout(function () { URL.revokeObjectURL(url); }, 100); }. \n### Response: Download a Blob, a string or an ArrayBuffer as a file in the browser\n\n@param {string|ArrayBuffer} data The content of the file to download.\n@param {string} [filename] The name of the file to download..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @Deprecated public static List<Footer> readSummaryFile(Configuration configuration, FileStatus summaryStatus) throws IOException { final Path parent = summaryStatus.getPath().getParent(); ParquetMetadata mergedFooters = readFooter(configuration, summaryStatus, filter(false)); return footersFromSummaryFile(parent, mergedFooters); } \n### Response:", "ground_truth": "Specifically reads a given summary file\n@param configuration a configuration\n@param summaryStatus file status for a summary file\n@return the metadata translated for each file\n@throws IOException if an exception is thrown while reading the summary file\n@deprecated metadata files are not recommended and will be removed in 2.0.0", "predict": "This method is deprecated and will be removed in the future. Instead, use the ` ParquetFileReader` class to read the footers from the summary file.\n\n@ deprecated This method is deprecated and will be removed in the future. Instead, use the ` ParquetFileReader` class to read the footers from the summary file.\n\n@param {Configuration} [configuration] The configuration object for the Parquet file.\n@param {FileStatus} [summaryStatus] The status of the summary file.\n@param {boolean} [filter] The filter to apply to the footer metadata.\n@return The list of footers from the summary file."}, {"ID": 1986, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def to_json(object, use_alias = false) hash = to_hash(object, use_alias) JSON.dump(hash) end. \n### Response: This method is called to convert a ClassKit object into JSON..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: @Deprecated public static final ParquetMetadata readFooter(InputFile file, MetadataFilter filter) throws IOException { ParquetReadOptions options; if (file instanceof HadoopInputFile) { options = HadoopReadOptions.builder(((HadoopInputFile) file).getConfiguration()) .withMetadataFilter(filter).build(); } else { options = ParquetReadOptions.builder().withMetadataFilter(filter).build(); } try (SeekableInputStream in = file.newStream()) { return readFooter(file, options, in); } } \n### Response:", "ground_truth": "Reads the meta data block in the footer of the file using provided input stream\n@param file a {@link InputFile} to read\n@param filter the filter to apply to row groups\n@return the metadata blocks in the footer\n@throws IOException if an error occurs while reading the file\n@deprecated will be removed in 2.0.0;\nuse {@link ParquetFileReader#open(InputFile, ParquetReadOptions)}", "predict": "This method reads theFooter of an input file and returns it, using a specific filter if provided. It is deprecated and should be replaced by the `readFooter` method from the ` Parquet` library, which takes the same parameters but is more efficient."}, {"ID": 1987, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (lbc *loadBalancerController) sync(dryRun bool) error { if !lbc.epController.HasSynced() || !lbc.svcController.HasSynced() { time.Sleep(100 * time.Millisecond) return errDeferredSync } httpSvc, httpsTermSvc, tcpSvc := lbc.getServices() if len(httpSvc) == 0 && len(httpsTermSvc) == 0 && len(tcpSvc) == 0 { return nil } if err := lbc.cfg.write( map[string][]service{ \"http\": httpSvc, \"httpsTerm\": httpsTermSvc, \"tcp\": tcpSvc, }, dryRun); err != nil { return err } if dryRun { return nil } return lbc.cfg.reload() }. \n### Response: // sync all services with the loadbalancer..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public PageReadStore readNextRowGroup() throws IOException { if (currentBlock == blocks.size()) { return null; } BlockMetaData block = blocks.get(currentBlock); if (block.getRowCount() == 0) { throw new RuntimeException(\"Illegal row group of 0 rows\"); } this.currentRowGroup = new ColumnChunkPageReadStore(block.getRowCount()); // prepare the list of consecutive parts to read them in one scan List<ConsecutivePartList> allParts = new ArrayList<ConsecutivePartList>(); ConsecutivePartList currentParts = null; for (ColumnChunkMetaData mc : block.getColumns()) { ColumnPath pathKey = mc.getPath(); BenchmarkCounter.incrementTotalBytes(mc.getTotalSize()); ColumnDescriptor columnDescriptor = paths.get(pathKey); if (columnDescriptor != null) { long startingPos = mc.getStartingPos(); // first part or not consecutive => new list if (currentParts == null || currentParts.endPos() != startingPos) { currentParts = new ConsecutivePartList(startingPos); allParts.add(currentParts); } currentParts.addChunk(new ChunkDescriptor(columnDescriptor, mc, startingPos, (int)mc.getTotalSize())); } } // actually read all the chunks ChunkListBuilder builder = new ChunkListBuilder(); for (ConsecutivePartList consecutiveChunks : allParts) { consecutiveChunks.readAll(f, builder); } for (Chunk chunk : builder.build()) { currentRowGroup.addColumn(chunk.descriptor.col, chunk.readAllPages()); } // avoid re-reading bytes the dictionary reader is used after this call if (nextDictionaryReader != null) { nextDictionaryReader.setRowGroup(currentRowGroup); } advanceToNextBlock(); return currentRowGroup; } \n### Response:", "ground_truth": "Reads all the columns requested from the row group at the current file position.\n@throws IOException if an error occurs while reading\n@return the PageReadStore which can provide PageReaders for each column.", "predict": "// read the next row group of data from the block group.."}, {"ID": 1988, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (logger *Logger) parseFormat(format string) error { logger.runtime = false fts := strings.Split(format, \"\\n\") if len(fts) != 2 { return errors.New(\"logging format error\") } logger.recordFormat = fts[0] logger.recordArgs = strings.Split(fts[1], \",\") for k, v := range logger.recordArgs { tv := strings.TrimSpace(v) _, ok := fields[tv] if ok == false { return errors.New(\"logging format error\") } logger.recordArgs[k] = tv logger.runtime = logger.runtime || runtimeFields[tv] } return nil }. \n### Response: // parseFormat checks the legality of format and parses it to recordFormat and recordArgs.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public PageReadStore readNextFilteredRowGroup() throws IOException { if (currentBlock == blocks.size()) { return null; } if (!options.useColumnIndexFilter()) { return readNextRowGroup(); } BlockMetaData block = blocks.get(currentBlock); if (block.getRowCount() == 0) { throw new RuntimeException(\"Illegal row group of 0 rows\"); } ColumnIndexStore ciStore = getColumnIndexStore(currentBlock); RowRanges rowRanges = getRowRanges(currentBlock); long rowCount = rowRanges.rowCount(); if (rowCount == 0) { // There are no matching rows -> skipping this row-group advanceToNextBlock(); return readNextFilteredRowGroup(); } if (rowCount == block.getRowCount()) { // All rows are matching -> fall back to the non-filtering path return readNextRowGroup(); } this.currentRowGroup = new ColumnChunkPageReadStore(rowRanges); // prepare the list of consecutive parts to read them in one scan ChunkListBuilder builder = new ChunkListBuilder(); List<ConsecutivePartList> allParts = new ArrayList<ConsecutivePartList>(); ConsecutivePartList currentParts = null; for (ColumnChunkMetaData mc : block.getColumns()) { ColumnPath pathKey = mc.getPath(); ColumnDescriptor columnDescriptor = paths.get(pathKey); if (columnDescriptor != null) { OffsetIndex offsetIndex = ciStore.getOffsetIndex(mc.getPath()); OffsetIndex filteredOffsetIndex = filterOffsetIndex(offsetIndex, rowRanges, block.getRowCount()); for (OffsetRange range : calculateOffsetRanges(filteredOffsetIndex, mc, offsetIndex.getOffset(0))) { BenchmarkCounter.incrementTotalBytes(range.getLength()); long startingPos = range.getOffset(); // first part or not consecutive => new list if (currentParts == null || currentParts.endPos() != startingPos) { currentParts = new ConsecutivePartList(startingPos); allParts.add(currentParts); } ChunkDescriptor chunkDescriptor = new ChunkDescriptor(columnDescriptor, mc, startingPos, (int) range.getLength()); currentParts.addChunk(chunkDescriptor); builder.setOffsetIndex(chunkDescriptor, filteredOffsetIndex); } } } // actually read all the chunks for (ConsecutivePartList consecutiveChunks : allParts) { consecutiveChunks.readAll(f, builder); } for (Chunk chunk : builder.build()) { currentRowGroup.addColumn(chunk.descriptor.col, chunk.readAllPages()); } // avoid re-reading bytes the dictionary reader is used after this call if (nextDictionaryReader != null) { nextDictionaryReader.setRowGroup(currentRowGroup); } advanceToNextBlock(); return currentRowGroup; } \n### Response:", "ground_truth": "Reads all the columns requested from the row group at the current file position. It may skip specific pages based\non the column indexes according to the actual filter. As the rows are not aligned among the pages of the different\ncolumns row synchronization might be required. See the documentation of the class SynchronizingColumnReader for\ndetails.\n\n@return the PageReadStore which can provide PageReaders for each column\n@throws IOException\nif any I/O error occurs while reading", "predict": "// This method reads the next filtered row group from the current page.\n// It first checks if there are no matching rows, and if so, it skips the row group.\n// If the row group can be read, it creates a new ColumnChunkPageReadStore for it.\n// It prepares a list of consecutive parts to read them in one scan.\n// It reads all the chunks for the current row group, and adds them to the currentRowGroup.\n// It avoids re-reading bytes the dictionary reader is used after this call.\n// It advances to the next block and returns the currentRowGroup."}, {"ID": 1989, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function fromArray($data) { if ($data) { if (isset($data['tags'])) { $this->setTags($data['tags']); } if (isset($data['ts'])) { $this->setTimestamp($data['ts']); } if (isset($data['type'])) { $this->setType($data['type']); } if (isset($data['target'])) { $this->setTarget($data['target']); } } }. \n### Response: Imports the internal state from an array\n@param array $data.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: DictionaryPage readDictionary(ColumnChunkMetaData meta) throws IOException { if (!meta.getEncodings().contains(Encoding.PLAIN_DICTIONARY) && !meta.getEncodings().contains(Encoding.RLE_DICTIONARY)) { return null; } // TODO: this should use getDictionaryPageOffset() but it isn't reliable. if (f.getPos() != meta.getStartingPos()) { f.seek(meta.getStartingPos()); } PageHeader pageHeader = Util.readPageHeader(f); if (!pageHeader.isSetDictionary_page_header()) { return null; // TODO: should this complain? } DictionaryPage compressedPage = readCompressedDictionary(pageHeader, f); BytesInputDecompressor decompressor = options.getCodecFactory().getDecompressor(meta.getCodec()); return new DictionaryPage( decompressor.decompress(compressedPage.getBytes(), compressedPage.getUncompressedSize()), compressedPage.getDictionarySize(), compressedPage.getEncoding()); } \n### Response:", "ground_truth": "Reads and decompresses a dictionary page for the given column chunk.\n\nReturns null if the given column chunk has no dictionary page.\n\n@param meta a column's ColumnChunkMetaData to read the dictionary from\n@return an uncompressed DictionaryPage or null\n@throws IOException if there is an error while reading the dictionary", "predict": "This method reads a dictionary page from a file and returns it as a new DictionaryPage object. It first checks if the dictionary page can be read by checking if the encodings of the meta data contain PLAIN_DICTIONARY or RLE_DICTIONARY. If not, it returns null. It then reads the page header from the file and checks if the page header is set. If not, it returns null. It then reads the compressed page and decompresses it using the CodecFactory's decompressor and returns the result."}, {"ID": 1990, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function (section, skipInsertHTML, refreshArgs) { // PROFILING // var profilingId = this.$startMeasure(\"Inserting section in DOM from \" + // PROFILING // this.tplClasspath); var differed; var params = this._cfg; var tpl = this._tpl; var domElt = section.id ? section.getDom() : params.tplDiv; if (domElt) { if (!skipInsertHTML) { section.insertHTML(domElt, refreshArgs); } if (!section.id) { // the whole template is being refreshed; let's apply the correct size // to its DOM container ariaTemplatesLayout.setDivSize(domElt, tpl.$width, tpl.$height, 'hidden'); } // update expando of container ariaUtilsDelegate.addExpando(domElt, section.delegateId); differed = section.initWidgets(); this.__processDifferedItems(differed); } else { // TODO: LOG ERROR } if (!skipInsertHTML) { // Redundant, but makes sure that insertSection doesn't dispose the template this.$assert(743, params.tplDiv && tpl); ariaUtilsDom.refreshDomElt(params.tplDiv); } // PROFILING // this.$stopMeasure(profilingId); }. \n### Response: Insert the section's markup in the DOM.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: synchronized void addWriter(InternalParquetRecordWriter writer, Long allocation) { Long oldValue = writerList.get(writer); if (oldValue == null) { writerList.put(writer, allocation); } else { throw new IllegalArgumentException(\"[BUG] The Parquet Memory Manager should not add an \" + \"instance of InternalParquetRecordWriter more than once. The Manager already contains \" + \"the writer: \" + writer); } updateAllocation(); } \n### Response:", "ground_truth": "Add a new writer and its memory allocation to the memory manager.\n@param writer the new created writer\n@param allocation the requested buffer size", "predict": "Adds a new InternalParquetRecordWriter to the Parquet Memory Manager's writer list, allocates a new allocation, and updates the allocation status."}, {"ID": 1991, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function share($file) { $mapping = $this->config->get('remote.directories'); // Get path to current file and shared file $currentFile = $this->releasesManager->getCurrentReleasePath($file); $sharedFile = preg_replace('#'.$mapping['releases'].'/[0-9]+/#', $mapping['shared'].'/', $currentFile); // If no instance of the shared file exists, use current one if (!$this->modulable->fileExists($sharedFile)) { $this->modulable->move($currentFile, $sharedFile); } $this->explainer->line('Sharing file '.$currentFile); return $this->modulable->symlink($sharedFile, $currentFile); }. \n### Response: Share a file or folder between releases.\n\n@param string $file Path to the file in a release folder\n\n@return string.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: synchronized void removeWriter(InternalParquetRecordWriter writer) { if (writerList.containsKey(writer)) { writerList.remove(writer); } if (!writerList.isEmpty()) { updateAllocation(); } } \n### Response:", "ground_truth": "Remove the given writer from the memory manager.\n@param writer the writer that has been closed", "predict": "Remove a writer from the writer list.\n\n@param InternalParquetRecordWriter $writer The writer to remove from the writer list.\n\n@return void."}, {"ID": 1992, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: @GuardedBy(\"this\") private void rehashIfNeeded() { int currentSize = table.length; if (currentSize - count >= currentSize / (MAX_EXPECTED_COLLISION_COUNT + 1)) { // Still enough overhead. return; } Object[] oldTable = table; // Grow the table so it increases by 1 / GROWTH_DENOMINATOR. int newSize = currentSize + currentSize / GROWTH_DENOMINATOR; table = new Object[newSize]; count = 0; for (Object element : oldTable) { if (element != null) { intern(element); } } }. \n### Response: Doubles the table size..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: private void updateAllocation() { long totalAllocations = 0; for (Long allocation : writerList.values()) { totalAllocations += allocation; } if (totalAllocations <= totalMemoryPool) { scale = 1.0; } else { scale = (double) totalMemoryPool / totalAllocations; LOG.warn(String.format( \"Total allocation exceeds %.2f%% (%,d bytes) of heap memory\\n\" + \"Scaling row group sizes to %.2f%% for %d writers\", 100*memoryPoolRatio, totalMemoryPool, 100*scale, writerList.size())); for (Runnable callBack : callBacks.values()) { // we do not really want to start a new thread here. callBack.run(); } } int maxColCount = 0; for (InternalParquetRecordWriter w : writerList.keySet()) { maxColCount = Math.max(w.getSchema().getColumns().size(), maxColCount); } for (Map.Entry<InternalParquetRecordWriter, Long> entry : writerList.entrySet()) { long newSize = (long) Math.floor(entry.getValue() * scale); if(scale < 1.0 && minMemoryAllocation > 0 && newSize < minMemoryAllocation) { throw new ParquetRuntimeException(String.format(\"New Memory allocation %d bytes\" + \" is smaller than the minimum allocation size of %d bytes.\", newSize, minMemoryAllocation)){}; } entry.getKey().setRowGroupSizeThreshold(newSize); LOG.debug(String.format(\"Adjust block size from %,d to %,d for writer: %s\", entry.getValue(), newSize, entry.getKey())); } } \n### Response:", "ground_truth": "Update the allocated size of each writer based on the current allocations and pool size.", "predict": "This method updates the allocation of the specified writers in the Parquet file. It first calculates the total allocation that has been made by all the writers and then scales the row group sizes to maintain a certain percentage of memory usage. It also checks if the total memory usage of the system exceeds the maximum memory pool size and if so, it scales the row group sizes further. Finally, it logs any warnings or exceptions that may occur during the scaling process and adjust the block size of the writers accordingly."}, {"ID": 1993, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: function _buildPaths() { var home = os.homedir(); var path1 = path.resolve(home + '/Music/iTunes/iTunes Music Library.xml'); var path2 = path.resolve(home + '/Music/iTunes/iTunes Library.xml'); return [path1, path1]; }. \n### Response: return an array containing the two most likely iTunes XML filepaths.\n\n@param  null\n@return Array.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void registerScaleCallBack(String callBackName, Runnable callBack) { Preconditions.checkNotNull(callBackName, \"callBackName\"); Preconditions.checkNotNull(callBack, \"callBack\"); if (callBacks.containsKey(callBackName)) { throw new IllegalArgumentException(\"The callBackName \" + callBackName + \" is duplicated and has been registered already.\"); } else { callBacks.put(callBackName, callBack); } } \n### Response:", "ground_truth": "Register callback and deduplicate it if any.\n@param callBackName the name of callback. It should be identical.\n@param callBack the callback passed in from upper layer, such as Hive.", "predict": "Registers a callback for the scale call back.\n\n@param  String callBackName\n@param  Runnable callBack\n@return void."}, {"ID": 1994, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected function _hasBeenModified($file) { if (!isset($this->_cache_data[$file])) { return true; } if (filemtime($file) > $this->_cache_data['timestamp']) { return true; } $imports = $this->_cache_data[$file]['imports']; foreach ($imports as $import) { if ($this->_hasBeenModified($import)) { return true; } } return false; }. \n### Response: Check if the file or any of the imported files within it has been modified since\nthe last time it was cached.\n\n@param string $file The file to check\n\n@return bool.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void start() throws IOException { state = state.start(); LOG.debug(\"{}: start\", out.getPos()); out.write(MAGIC); } \n### Response:", "ground_truth": "start the file\n@throws IOException if there is an error while writing", "predict": "Start the application.\n\n@param IOException $io The I/O object to start the state\n\n@return void."}, {"ID": 1995, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: func (c *Target) SetAutoAttachWithParams(v *TargetSetAutoAttachParams) (*gcdmessage.ChromeResponse, error) { return gcdmessage.SendDefaultRequest(c.target, c.target.GetSendCh(), &gcdmessage.ParamRequest{Id: c.target.GetId(), Method: \"Target.setAutoAttach\", Params: v}) }. \n### Response: // SetAutoAttachWithParams - Controls whether to automatically attach to new targets which are considered to be related to this one. When turned on, attaches to all existing related targets as well. When turned off, automatically detaches from all currently attached targets..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void startBlock(long recordCount) throws IOException { state = state.startBlock(); LOG.debug(\"{}: start block\", out.getPos()); // out.write(MAGIC); // TODO: add a magic delimiter alignment.alignForRowGroup(out); currentBlock = new BlockMetaData(); currentRecordCount = recordCount; currentColumnIndexes = new ArrayList<>(); currentOffsetIndexes = new ArrayList<>(); } \n### Response:", "ground_truth": "start a block\n@param recordCount the record count in this block\n@throws IOException if there is an error while writing", "predict": "// startBlock - Starts a new block in the data grid.\n// This method is used to start a new block in the data grid.\n// The method starts a new block by calling the startBlock method on the state object.\n// The method logs a debug message to the console indicating that the method is starting a new block.\n// The method writes the magic number MAGIC to the output stream.\n// The method creates a new BlockMetaData object to store information about the current block.\n// The method sets the currentRecordCount and currentColumnIndexes to the value passed in as arguments.\n// The method sets the currentOffsetIndexes to an empty list.\n// The method returns nothing.\n```"}, {"ID": 1996, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected function makeTemplateFormWidget($type, $template, $alias = null) { $formConfigs = [ 'page' => '~/modules/cms/classes/page/fields.yaml', 'partial' => '~/modules/cms/classes/partial/fields.yaml', 'layout' => '~/modules/cms/classes/layout/fields.yaml', 'content' => '~/modules/cms/classes/content/fields.yaml', 'asset' => '~/modules/cms/classes/asset/fields.yaml' ]; if (!array_key_exists($type, $formConfigs)) { throw new ApplicationException(trans('cms::lang.template.not_found')); } $widgetConfig = $this->makeConfig($formConfigs[$type]); $widgetConfig->model = $template; $widgetConfig->alias = $alias ?: 'form'.studly_case($type).md5($template->getFileName()).uniqid(); return $this->makeWidget('Backend\\Widgets\\Form', $widgetConfig); }. \n### Response: Returns a form widget for a specified template type.\n@param string $type\n@param string $template\n@param string $alias\n@return Backend\\Widgets\\Form.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void startColumn(ColumnDescriptor descriptor, long valueCount, CompressionCodecName compressionCodecName) throws IOException { state = state.startColumn(); encodingStatsBuilder.clear(); currentEncodings = new HashSet<Encoding>(); currentChunkPath = ColumnPath.get(descriptor.getPath()); currentChunkType = descriptor.getPrimitiveType(); currentChunkCodec = compressionCodecName; currentChunkValueCount = valueCount; currentChunkFirstDataPage = out.getPos(); compressedLength = 0; uncompressedLength = 0; // The statistics will be copied from the first one added at writeDataPage(s) so we have the correct typed one currentStatistics = null; columnIndexBuilder = ColumnIndexBuilder.getBuilder(currentChunkType, columnIndexTruncateLength); offsetIndexBuilder = OffsetIndexBuilder.getBuilder(); firstPageOffset = -1; } \n### Response:", "ground_truth": "start a column inside a block\n@param descriptor the column descriptor\n@param valueCount the value count in this column\n@param compressionCodecName a compression codec name\n@throws IOException if there is an error while writing", "predict": "Starts the column data writing process.\n@param ColumnDescriptor $ descriptor\n@param long $ valueCount\n@param CompressionCodecName $ compressionCodecName\n@throw IOException\n@return void."}, {"ID": 1997, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected function sortGuardsByPriority() { usort($this->guards, function (GuardInterface $a, GuardInterface $b) { return $b->getPriority() - $a->getPriority(); }); }. \n### Response: Sort the guards list internally\n\n@return void.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void writeDictionaryPage(DictionaryPage dictionaryPage) throws IOException { state = state.write(); LOG.debug(\"{}: write dictionary page: {} values\", out.getPos(), dictionaryPage.getDictionarySize()); currentChunkDictionaryPageOffset = out.getPos(); int uncompressedSize = dictionaryPage.getUncompressedSize(); int compressedPageSize = (int)dictionaryPage.getBytes().size(); // TODO: fix casts metadataConverter.writeDictionaryPageHeader( uncompressedSize, compressedPageSize, dictionaryPage.getDictionarySize(), dictionaryPage.getEncoding(), out); long headerSize = out.getPos() - currentChunkDictionaryPageOffset; this.uncompressedLength += uncompressedSize + headerSize; this.compressedLength += compressedPageSize + headerSize; LOG.debug(\"{}: write dictionary page content {}\", out.getPos(), compressedPageSize); dictionaryPage.getBytes().writeAllTo(out); encodingStatsBuilder.addDictEncoding(dictionaryPage.getEncoding()); currentEncodings.add(dictionaryPage.getEncoding()); } \n### Response:", "ground_truth": "writes a dictionary page page\n@param dictionaryPage the dictionary page\n@throws IOException if there is an error while writing", "predict": "Writes the dictionary page to the output stream.\n\n@param dictionaryPage The dictionary page to be written.\n@throw IOException If an error occurs while writing the page.\n\n*/"}, {"ID": 1998, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: public function migrateToVersion($version, $up = true) { $this->createIfNotExists(); $currentVersion = $this->getCurrentVersion(); if ($up) { $this->up($version); } else { $this->down($version); } }. \n### Response: Migrare to given version.\n\n@param string $version Version of migration.\n\n@return void.\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void writeDataPage( int valueCount, int uncompressedPageSize, BytesInput bytes, Statistics statistics, long rowCount, Encoding rlEncoding, Encoding dlEncoding, Encoding valuesEncoding) throws IOException { long beforeHeader = out.getPos(); innerWriteDataPage(valueCount, uncompressedPageSize, bytes, statistics, rlEncoding, dlEncoding, valuesEncoding); offsetIndexBuilder.add((int) (out.getPos() - beforeHeader), rowCount); } \n### Response:", "ground_truth": "Writes a single page\n@param valueCount count of values\n@param uncompressedPageSize the size of the data once uncompressed\n@param bytes the compressed data for the page without header\n@param statistics the statistics of the page\n@param rowCount the number of rows in the page\n@param rlEncoding encoding of the repetition level\n@param dlEncoding encoding of the definition level\n@param valuesEncoding encoding of values\n@throws IOException if any I/O error occurs during writing the file", "predict": "Write data page to output stream.\n\n@param BytesInput bytes Input stream for data page.\n\n@param Statistics statistics  statistics for data page write operation.\n\n@param EncodingrlEncoding Encoding forrl data page.\n\n@param EncodingdlEncoding Encoding fordl data page.\n\n@param EncodingvaluesEncoding Encoding for values data page.\n\n@param IOException IOException thrown if there is an error while writing data page.\n\n@return void."}, {"ID": 1999, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: protected function insertCopyToChildren() { if ($this->getOption('copy_to_children', false)) { $options = $this->getOptions(); $options['children'] = array(); $options['copy_to_children'] = false; $options['title'] = $this->getOption('copy_to_children_title', $this->getTitle()); $this->addChildByData($this->getRouteName(), $options); } }. \n### Response: If the item is configured to insert itself as its first child, this will be done here..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: void writeColumnChunk(ColumnDescriptor descriptor, long valueCount, CompressionCodecName compressionCodecName, DictionaryPage dictionaryPage, BytesInput bytes, long uncompressedTotalPageSize, long compressedTotalPageSize, Statistics<?> totalStats, ColumnIndexBuilder columnIndexBuilder, OffsetIndexBuilder offsetIndexBuilder, Set<Encoding> rlEncodings, Set<Encoding> dlEncodings, List<Encoding> dataEncodings) throws IOException { startColumn(descriptor, valueCount, compressionCodecName); state = state.write(); if (dictionaryPage != null) { writeDictionaryPage(dictionaryPage); } LOG.debug(\"{}: write data pages\", out.getPos()); long headersSize = bytes.size() - compressedTotalPageSize; this.uncompressedLength += uncompressedTotalPageSize + headersSize; this.compressedLength += compressedTotalPageSize + headersSize; LOG.debug(\"{}: write data pages content\", out.getPos()); firstPageOffset = out.getPos(); bytes.writeAllTo(out); encodingStatsBuilder.addDataEncodings(dataEncodings); if (rlEncodings.isEmpty()) { encodingStatsBuilder.withV2Pages(); } currentEncodings.addAll(rlEncodings); currentEncodings.addAll(dlEncodings); currentEncodings.addAll(dataEncodings); currentStatistics = totalStats; this.columnIndexBuilder = columnIndexBuilder; this.offsetIndexBuilder = offsetIndexBuilder; endColumn(); } \n### Response:", "ground_truth": "Writes a column chunk at once\n@param descriptor the descriptor of the column\n@param valueCount the value count in this column\n@param compressionCodecName the name of the compression codec used for compressing the pages\n@param dictionaryPage the dictionary page for this column chunk (might be null)\n@param bytes the encoded pages including page headers to be written as is\n@param uncompressedTotalPageSize total uncompressed size (without page headers)\n@param compressedTotalPageSize total compressed size (without page headers)\n@param totalStats accumulated statistics for the column chunk\n@param columnIndexBuilder the builder object for the column index\n@param offsetIndexBuilder the builder object for the offset index\n@param rlEncodings the RL encodings used in this column chunk\n@param dlEncodings the DL encodings used in this column chunk\n@param dataEncodings the data encodings used in this column chunk\n@throws IOException if there is an error while writing", "predict": "This method writes a chunk of data to a column in a database table. It takes in various parameters such as the column descriptor, the value count, the compression codec name, the dictionary page, the bytes input, the uncompressed totalpageSize, the compressed totalpageSize, the statistics, the column index builder, the offset index builder, and the set of encodings.\n\nIt starts by calling the `startColumn()` method to start writing the data to the column. It then sets the state of the write operation to `state.write()`. If the dictionary page is not null, it writes the dictionary page to the output.\n\nAfter writing the data, it logs debug information about the write operation. It then writes the header size to the output and calculates the uncompressed and compressed lengths. It writes the data to the output and adds the encoding stats builder to add the data encodings. If therlEncodings and dlEncodings sets are empty, it adds the encoding stats builder with V2 pages.\n\nFinally, it calls the `endColumn()` method to end the write operation.\n\nThis method is used to write a single chunk of data to a column in a database table."}, {"ID": 2000, "prompt": "### Instruction: Generate the method-level comment for the following java Code. \nCode: def _maybe_add_conditions_to_implicit_api_paths(self, template): \"\"\" Add conditions to implicit API paths if necessary. Implicit API resource methods are constructed from API events on individual serverless functions within the SAM template. Since serverless functions can have conditions on them, it's possible to have a case where all methods under a resource path have conditions on them. If all of these conditions evaluate to false, the entire resource path should not be defined either. This method checks all resource paths' methods and if all methods under a given path contain a condition, a composite condition is added to the overall template Conditions section and that composite condition is added to the resource path. \"\"\" for api_id, api in template.iterate(SamResourceType.Api.value): if not api.properties.get('__MANAGE_SWAGGER'): continue swagger = api.properties.get(\"DefinitionBody\") editor = SwaggerEditor(swagger) for path in editor.iter_on_path(): all_method_conditions = set( [condition for method, condition in self.api_conditions[api_id][path].items()] ) at_least_one_method = len(all_method_conditions) > 0 all_methods_contain_conditions = None not in all_method_conditions if at_least_one_method and all_methods_contain_conditions: if len(all_method_conditions) == 1: editor.make_path_conditional(path, all_method_conditions.pop()) else: path_condition_name = self._path_condition_name(api_id, path) self._add_combined_condition_to_template( template.template_dict, path_condition_name, all_method_conditions) editor.make_path_conditional(path, path_condition_name) api.properties[\"DefinitionBody\"] = editor.swagger template.set(api_id, api). \n### Response: Add conditions to implicit API paths if necessary.\n\n        Implicit API resource methods are constructed from API events on individual serverless functions within the SAM\n        template. Since serverless functions can have conditions on them, it's possible to have a case where all methods\n        under a resource path have conditions on them. If all of these conditions evaluate to false, the entire resource\n        path should not be defined either. This method checks all resource paths' methods and if all methods under a\n        given path contain a condition, a composite condition is added to the overall template Conditions section and\n        that composite condition is added to the resource path..\n\n### Instruction: Generate the method-level comment for the following java Code. \nCode: public void endBlock() throws IOException { state = state.endBlock(); LOG.debug(\"{}: end block\", out.getPos()); currentBlock.setRowCount(currentRecordCount); blocks.add(currentBlock); columnIndexes.add(currentColumnIndexes); offsetIndexes.add(currentOffsetIndexes); currentColumnIndexes = null; currentOffsetIndexes = null; currentBlock = null; } \n### Response:", "ground_truth": "ends a block once all column chunks have been written\n@throws IOException if there is an error while writing", "predict": "End a block.\n\n        End a block by calling the endBlock method on the current state object.LOG.debug(\"{}: end block\", out.getPos()); This method sets the current block's row count to the current record count, and adds it to the list of blocks. It also sets the current column indexes and offset indexes to null, and the current block to null.\n\n        This method is typically called at the end of a block in a database or data storage system. It allows the system to know that the block has been successfully processed and can be used to retrieve or update the data in the block."}]