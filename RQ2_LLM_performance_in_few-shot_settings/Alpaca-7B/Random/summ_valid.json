[
    {
        "ID": 1,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function comparisons() { if (is_null($this->comparisonRequests)) { $this->comparisonRequests = new ComparisonRequests($this->client); } return $this->comparisonRequests; }\n\n    ### Response: Comparison requests accessor\n\n@return ComparisonRequests.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected final void fastPathOrderedEmit(U value, boolean delayError, Disposable disposable) { final Observer<? super V> observer = downstream; final SimplePlainQueue<U> q = queue; if (wip.get() == 0 && wip.compareAndSet(0, 1)) { if (q.isEmpty()) { accept(observer, value); if (leave(-1) == 0) { return; } } else { q.offer(value); } } else { q.offer(value); if (!enter()) { return; } } QueueDrainHelper.drainLoop(q, observer, delayError, disposable, this); }\n\n    ### Response:",
        "ground_truth": "Makes sure the fast-path emits in order.\n@param value the value to emit or queue up\n@param delayError if true, errors are delayed until the source has terminated\n@param disposable the resource to dispose if the drain terminates",
        "predict": " Comparison requests accessor\n\n@return ComparisonRequests.\n\n    "
    },
    {
        "ID": 2,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Path getNextPath(String prefix) { Path path; do { path = Paths.get(String.format(\"%s%s\", prefix, Integer.toString(nextDumpPathSuffix))); nextDumpPathSuffix++; } while (Files.exists(path)); return path; }\n\n    ### Response: Get the next sequential Path for a binary dump file, ensuring we don't overwrite any existing files.\n@param prefix The start of the file name\n@return Next sequential Path.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @CheckReturnValue @SchedulerSupport(SchedulerSupport.NONE) public static <T> Observable<T> wrap(ObservableSource<T> source) { ObjectHelper.requireNonNull(source, \"source is null\"); if (source instanceof Observable) { return RxJavaPlugins.onAssembly((Observable<T>)source); } return RxJavaPlugins.onAssembly(new ObservableFromUnsafeSource<T>(source)); }\n\n    ### Response:",
        "ground_truth": "Wraps an ObservableSource into an Observable if not already an Observable.\n\n\nScheduler:\n{@code wrap} does not operate by default on a particular {@link Scheduler}.\n\n\n@param  the value type\n@param source the source ObservableSource instance\n@return the new Observable instance or the same as the source\n@throws NullPointerException if source is null",
        "predict": " Get the next sequential Path for a binary dump file, ensuring we don't overwrite any existing files.\n@param prefix The start of the file name\n@return Next sequential Path.\n\n    "
    },
    {
        "ID": 3,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void clear() { Map<String, String> map = inheritableThreadLocal.get(); if (map != null) { map.clear(); inheritableThreadLocal.remove(); } }\n\n    ### Response: Clear all entries in the MDC..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @CheckReturnValue @SchedulerSupport(SchedulerSupport.NONE) public final Observable<T> sorted(Comparator<? super T> sortFunction) { ObjectHelper.requireNonNull(sortFunction, \"sortFunction is null\"); return toList().toObservable().map(Functions.listSorter(sortFunction)).flatMapIterable(Functions.<List<T>>identity()); }\n\n    ### Response:",
        "ground_truth": "Returns an Observable that emits the events emitted by source ObservableSource, in a\nsorted order based on a specified comparison function.\n\nNote that calling {@code sorted} with long, non-terminating or infinite sources\nmight cause {@link OutOfMemoryError}\n\n\nScheduler:\n{@code sorted} does not operate by default on a particular {@link Scheduler}.\n\n\n@param sortFunction\na function that compares two items emitted by the source ObservableSource and returns an Integer\nthat indicates their sort order\n@return an Observable that emits the items emitted by the source ObservableSource in sorted order",
        "predict": " Clear all entries in the MDC..\n\n    "
    },
    {
        "ID": 4,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function addDirectory($directory) { if (!file_exists($directory) || !is_dir($directory)) { throw new \\Exception('The configuration directory does not exist.'); } else { if (substr($directory, -1) != DIRECTORY_SEPARATOR) { $directory .= DIRECTORY_SEPARATOR; } foreach (glob($directory . '*.yml') as $file) { self::addFile($file); } } return self::getInstance(); }\n\n    ### Response: Parse .yml files in a given directory.\n\n@param string $directory\n\n@return self.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static <T> ConnectableObservable<T> observeOn(final ConnectableObservable<T> co, final Scheduler scheduler) { final Observable<T> observable = co.observeOn(scheduler); return RxJavaPlugins.onAssembly(new Replay<T>(co, observable)); }\n\n    ### Response:",
        "ground_truth": "Child Observers will observe the events of the ConnectableObservable on the\nspecified scheduler.\n@param  the value type\n@param co the connectable observable instance\n@param scheduler the target scheduler\n@return the new ConnectableObservable instance",
        "predict": " Parse .yml files in a given directory.\n\n@param string $directory\n\n@return self.\n\n    "
    },
    {
        "ID": 5,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function generateNewSeed($passphrase = \"\", $forceEntropy = null) { // generate master seed, retry if the generated private key isn't valid (FALSE is returned) do { $mnemonic = $this->generateNewMnemonic($forceEntropy); $seed = (new Bip39SeedGenerator)->getSeed($mnemonic, $passphrase); $key = null; try { $key = HierarchicalKeyFactory::fromEntropy($seed); } catch (\\Exception $e) { // try again } } while (!$key); return [$mnemonic, $seed, $key]; }\n\n    ### Response: create a new key;\n1) a BIP39 mnemonic\n2) a seed from that mnemonic with the password\n3) a private key from that seed\n\n@param string    $passphrase             the password to use in the BIP39 creation of the seed\n@param string    $forceEntropy           forced entropy instead of random entropy for testing purposes\n@return array.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @CheckReturnValue @NonNull public static <T> UnicastProcessor<T> create(int capacityHint) { return new UnicastProcessor<T>(capacityHint); }\n\n    ### Response:",
        "ground_truth": "Creates an UnicastProcessor with the given internal buffer capacity hint.\n@param  the value type\n@param capacityHint the hint to size the internal unbounded buffer\n@return an UnicastProcessor instance",
        "predict": " create a new key;\n1) a BIP39 mnemonic\n2) a seed from that mnemonic with the password\n3) a private key from that seed\n\n@param string    $passphrase             the password to use in the BIP39 creation of the seed\n@param string    $forceEntropy           forced entropy instead of random entropy for testing purposes\n@return array.\n\n    "
    },
    {
        "ID": 6,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SuppressWarnings(\"unchecked\") private Constructor<BDBRepository> getRepositoryConstructor() throws ClassCastException, ClassNotFoundException, NoSuchMethodException { String packageName; { String thisClassName = getClass().getName(); packageName = thisClassName.substring(0, thisClassName.lastIndexOf('.')); } String className = packageName + '.' + getBDBProduct().name() + \"_Repository\"; Class repoClass = Class.forName(className); if (BDBRepository.class.isAssignableFrom(repoClass)) { return repoClass.getDeclaredConstructor (AtomicReference.class, BDBRepositoryBuilder.class); } throw new ClassCastException(\"Not an instance of BDBRepository: \" + repoClass.getName()); }\n\n    ### Response: Looks up appropriate repository via reflection, whose name is derived\nfrom the BDB product string..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @CheckReturnValue @NonNull public static <T> UnicastProcessor<T> create(int capacityHint, Runnable onCancelled) { ObjectHelper.requireNonNull(onCancelled, \"onTerminate\"); return new UnicastProcessor<T>(capacityHint, onCancelled); }\n\n    ### Response:",
        "ground_truth": "Creates an UnicastProcessor with the given internal buffer capacity hint and a callback for\nthe case when the single Subscriber cancels its subscription.\n\nThe callback, if not null, is called exactly once and\nnon-overlapped with any active replay.\n\n@param  the value type\n@param capacityHint the hint to size the internal unbounded buffer\n@param onCancelled the non null callback\n@return an UnicastProcessor instance",
        "predict": " Looks up appropriate repository via reflection, whose name is derived\nfrom the BDB product string..\n\n    "
    },
    {
        "ID": 7,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def makeThumbnail(cls, inputFile, person, format, smaller): \"\"\" Make a thumbnail of a mugshot image and store it on disk. @param inputFile: The image to thumbnail. @type inputFile: C{file} @param person: The person this mugshot thumbnail is associated with. @type person: L{Person} @param format: The format of the data in C{inputFile}. @type format: C{str} (e.g. I{jpeg}) @param smaller: Thumbnails are available in two sizes. if C{smaller} is C{True}, then the thumbnail will be in the smaller of the two sizes. @type smaller: C{bool} @return: path to the thumbnail. @rtype: L{twisted.python.filepath.FilePath} \"\"\" dirsegs = ['mugshots', str(person.storeID)] if smaller: dirsegs.insert(1, 'smaller') size = cls.smallerSize else: size = cls.size atomicOutputFile = person.store.newFile(*dirsegs) makeThumbnail(inputFile, atomicOutputFile, size, format) atomicOutputFile.close() return atomicOutputFile.finalpath\n\n    ### Response: Make a thumbnail of a mugshot image and store it on disk.\n\n        @param inputFile: The image to thumbnail.\n        @type inputFile: C{file}\n\n        @param person: The person this mugshot thumbnail is associated with.\n        @type person: L{Person}\n\n        @param format: The format of the data in C{inputFile}.\n        @type format: C{str} (e.g. I{jpeg})\n\n        @param smaller: Thumbnails are available in two sizes.  if C{smaller}\n        is C{True}, then the thumbnail will be in the smaller of the two\n        sizes.\n        @type smaller: C{bool}\n\n        @return: path to the thumbnail.\n        @rtype: L{twisted.python.filepath.FilePath}.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SuppressWarnings(\"unchecked\") public static <T, R> boolean tryScalarXMapSubscribe(Publisher<T> source, Subscriber<? super R> subscriber, Function<? super T, ? extends Publisher<? extends R>> mapper) { if (source instanceof Callable) { T t; try { t = ((Callable<T>)source).call(); } catch (Throwable ex) { Exceptions.throwIfFatal(ex); EmptySubscription.error(ex, subscriber); return true; } if (t == null) { EmptySubscription.complete(subscriber); return true; } Publisher<? extends R> r; try { r = ObjectHelper.requireNonNull(mapper.apply(t), \"The mapper returned a null Publisher\"); } catch (Throwable ex) { Exceptions.throwIfFatal(ex); EmptySubscription.error(ex, subscriber); return true; } if (r instanceof Callable) { R u; try { u = ((Callable<R>)r).call(); } catch (Throwable ex) { Exceptions.throwIfFatal(ex); EmptySubscription.error(ex, subscriber); return true; } if (u == null) { EmptySubscription.complete(subscriber); return true; } subscriber.onSubscribe(new ScalarSubscription<R>(subscriber, u)); } else { r.subscribe(subscriber); } return true; } return false; }\n\n    ### Response:",
        "ground_truth": "Tries to subscribe to a possibly Callable source's mapped Publisher.\n@param  the input value type\n@param  the output value type\n@param source the source Publisher\n@param subscriber the subscriber\n@param mapper the function mapping a scalar value into a Publisher\n@return true if successful, false if the caller should continue with the regular path.",
        "predict": " Make a thumbnail of a mugshot image and store it on disk.\n\n        @param inputFile: The image to thumbnail.\n        @type inputFile: C{file}\n\n        @param person: The person this mugshot thumbnail is associated with.\n        @type person: L{Person}\n\n        @param format: The format of the data in C{inputFile}.\n        @type format: C{str} (e.g. I{jpeg})\n\n        @param smaller: Thumbnails are available in two sizes.  if C{smaller}\n        is C{True}, then the thumbnail will be in the smaller of the two\n        sizes.\n        @type smaller: C{bool}\n\n        @return: path to the thumbnail.\n        @rtype: L{twisted.python.filepath.FilePath}.\n\n    "
    },
    {
        "ID": 8,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void visit(BioPAXElement domain, Object range, Model model, PropertyEditor<?,?> editor) { // actions visit(range, domain, model, editor); }\n\n    ### Response: Calls the protected abstract method visit that is to be\nimplemented in subclasses of this abstract class.\n\n@param domain BioPAX Element\n@param range property value (can be BioPAX element, primitive, enum, string)\n@param model the BioPAX model of interest\n@param editor parent's property PropertyEditor.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static <T, U> Flowable<U> scalarXMap(final T value, final Function<? super T, ? extends Publisher<? extends U>> mapper) { return RxJavaPlugins.onAssembly(new ScalarXMapFlowable<T, U>(value, mapper)); }\n\n    ### Response:",
        "ground_truth": "Maps a scalar value into a Publisher and emits its values.\n\n@param  the scalar value type\n@param  the output value type\n@param value the scalar value to map\n@param mapper the function that gets the scalar value and should return\na Publisher that gets streamed\n@return the new Flowable instance",
        "predict": " Calls the protected abstract method visit that is to be\nimplemented in subclasses of this abstract class.\n\n@param domain BioPAX Element\n@param range property value (can be BioPAX element, primitive, enum, string)\n@param model the BioPAX model of interest\n@param editor parent's property PropertyEditor.\n\n    "
    },
    {
        "ID": 9,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _cost_method(self, *args, **kwargs): \"\"\"Calculate gradient component of the cost This method returns the l2 norm error of the difference between the original data and the data obtained after optimisation Returns ------- float gradient cost component \"\"\" cost_val = 0.5 * np.linalg.norm(self.obs_data - self.op(args[0])) ** 2 if 'verbose' in kwargs and kwargs['verbose']: print(' - DATA FIDELITY (X):', cost_val) return cost_val\n\n    ### Response: Calculate gradient component of the cost\n\n        This method returns the l2 norm error of the difference between the\n        original data and the data obtained after optimisation\n\n        Returns\n        -------\n        float gradient cost component.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void reset() { setErrorHandler(null); setScheduleHandler(null); setComputationSchedulerHandler(null); setInitComputationSchedulerHandler(null); setIoSchedulerHandler(null); setInitIoSchedulerHandler(null); setSingleSchedulerHandler(null); setInitSingleSchedulerHandler(null); setNewThreadSchedulerHandler(null); setInitNewThreadSchedulerHandler(null); setOnFlowableAssembly(null); setOnFlowableSubscribe(null); setOnObservableAssembly(null); setOnObservableSubscribe(null); setOnSingleAssembly(null); setOnSingleSubscribe(null); setOnCompletableAssembly(null); setOnCompletableSubscribe(null); setOnConnectableFlowableAssembly(null); setOnConnectableObservableAssembly(null); setOnMaybeAssembly(null); setOnMaybeSubscribe(null); setOnParallelAssembly(null); setFailOnNonBlockingScheduler(false); setOnBeforeBlocking(null); }\n\n    ### Response:",
        "ground_truth": "Removes all handlers and resets to default behavior.",
        "predict": " Calculate gradient component of the cost\n\n        This method returns the l2 norm error of the difference between the\n        original data and the data obtained after optimisation\n\n        Returns\n        -------\n        float gradient cost component.\n\n    "
    },
    {
        "ID": 10,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void encodeBytesBody(StringBuffer result, JsJmsBytesMessage msg) { if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled()) SibTr.entry(tc, \"encodeBytesBody\"); byte[] body = msg.getBytes(); if (body != null) { result.append('~'); HexString.binToHex(body, 0, body.length, result); } if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled()) SibTr.exit(tc, \"encodeBytesBody\"); }\n\n    ### Response: Encode a bytes message body.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @CheckReturnValue @NonNull @SchedulerSupport(SchedulerSupport.NONE) public static <T> Maybe<T> fromCompletable(CompletableSource completableSource) { ObjectHelper.requireNonNull(completableSource, \"completableSource is null\"); return RxJavaPlugins.onAssembly(new MaybeFromCompletable<T>(completableSource)); }\n\n    ### Response:",
        "ground_truth": "Wraps a CompletableSource into a Maybe.\n\n\nScheduler:\n{@code fromCompletable} does not operate by default on a particular {@link Scheduler}.\n\n@param  the target type\n@param completableSource the CompletableSource to convert from\n@return the new Maybe instance\n@throws NullPointerException if completable is null",
        "predict": " Encode a bytes message body.\n\n    "
    },
    {
        "ID": 11,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def transfer_funds(self, to, amount, denom, msg): ''' Transfer SBD or STEEM to the given account ''' try: self.steem_instance().commit.transfer(to, float(amount), denom, msg, self.mainaccount) except Exception as e: self.msg.error_message(e) return False else: return True\n\n    ### Response: Transfer SBD or STEEM to the given account.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @CheckReturnValue @NonNull @SchedulerSupport(SchedulerSupport.NONE) public static <T> Maybe<T> fromSingle(SingleSource<T> singleSource) { ObjectHelper.requireNonNull(singleSource, \"singleSource is null\"); return RxJavaPlugins.onAssembly(new MaybeFromSingle<T>(singleSource)); }\n\n    ### Response:",
        "ground_truth": "Wraps a SingleSource into a Maybe.\n\n\nScheduler:\n{@code fromSingle} does not operate by default on a particular {@link Scheduler}.\n\n@param  the target type\n@param singleSource the SingleSource to convert from\n@return the new Maybe instance\n@throws NullPointerException if single is null",
        "predict": " Transfer SBD or STEEM to the given account.\n\n    "
    },
    {
        "ID": 12,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def changed_bit_pos(a, b): \"\"\" Return the index of the first bit that changed between `a` an `b`. Return None if there are no changed bits. \"\"\" c = a ^ b n = 0 while c > 0: if c & 1 == 1: return n c >>= 1 n += 1 return None\n\n    ### Response: Return the index of the first bit that changed between `a` an `b`.\n    Return None if there are no changed bits..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @CheckReturnValue @SchedulerSupport(SchedulerSupport.NONE) public final Maybe<T> retry(long times, Predicate<? super Throwable> predicate) { return toFlowable().retry(times, predicate).singleElement(); }\n\n    ### Response:",
        "ground_truth": "Retries at most times or until the predicate returns false, whichever happens first.\n\n\nScheduler:\n{@code retry} does not operate by default on a particular {@link Scheduler}.\n\n@param times the number of times to resubscribe if the current Maybe fails\n@param predicate the predicate called with the failure Throwable and should return true to trigger a retry.\n@return the new Maybe instance",
        "predict": " Return the index of the first bit that changed between `a` an `b`.\n    Return None if there are no changed bits..\n\n    "
    },
    {
        "ID": 13,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def get_file_specs(self, filepath, keep_folders=False): \"\"\"Gather information on files needed for valid transfer. :param filepath: Path to file in question :param keep_folders: Whether or not to maintain folder structure :type keep_folders: bool :type filepath: str, unicode :rtype: ``dict`` \"\"\" path, filename = os.path.split(filepath) fileid = str(uuid4()).replace('-', '') if self.checksum: with open(filepath, 'rb') as f: md5hash = md5(f.read()).digest().encode('base64')[:-1] else: md5hash = None specs = { 'transferid': self.transfer_id, 'transferkey': self.transfer_info['transferkey'], 'fileid': fileid, 'filepath': filepath, 'thefilename': keep_folders and filepath or filename, 'totalsize': os.path.getsize(filepath), 'md5': md5hash, 'content-type': guess_type(filepath)[0] } return specs\n\n    ### Response: Gather information on files needed for valid transfer.\n\n        :param filepath: Path to file in question\n        :param keep_folders: Whether or not to maintain folder structure\n        :type keep_folders: bool\n        :type filepath: str, unicode\n        :rtype: ``dict``.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static <T> T requireNonNull(T object, String message) { if (object == null) { throw new NullPointerException(message); } return object; }\n\n    ### Response:",
        "ground_truth": "Verifies if the object is not null and returns it or throws a NullPointerException\nwith the given message.\n@param  the value type\n@param object the object to verify\n@param message the message to use with the NullPointerException\n@return the object itself\n@throws NullPointerException if object is null",
        "predict": " Gather information on files needed for valid transfer.\n\n        :param filepath: Path to file in question\n        :param keep_folders: Whether or not to maintain folder structure\n        :type keep_folders: bool\n        :type filepath: str, unicode\n        :rtype: ``dict``.\n\n    "
    },
    {
        "ID": 14,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def macronize_tags(self, text): \"\"\"Return macronized form along with POS tags. E.g. \"Gallia est omnis divisa in partes tres,\" -> [('gallia', 'n-s---fb-', 'galli\u0101'), ('est', 'v3spia---', 'est'), ('omnis', 'a-s---mn-', 'omnis'), ('divisa', 't-prppnn-', 'd\u012bv\u012bsa'), ('in', 'r--------', 'in'), ('partes', 'n-p---fa-', 'part\u0113s'), ('tres', 'm--------', 'tr\u0113s')] :param text: raw text :return: tuples of head word, tag, macronized form :rtype : list \"\"\" return [self._macronize_word(word) for word in self._retrieve_tag(text)]\n\n    ### Response: Return macronized form along with POS tags.\n\n        E.g. \"Gallia est omnis divisa in partes tres,\" ->\n        [('gallia', 'n-s---fb-', 'galli\u0101'), ('est', 'v3spia---', 'est'), ('omnis', 'a-s---mn-', 'omnis'),\n        ('divisa', 't-prppnn-', 'd\u012bv\u012bsa'), ('in', 'r--------', 'in'), ('partes', 'n-p---fa-', 'part\u0113s'),\n        ('tres', 'm--------', 'tr\u0113s')]\n\n        :param text: raw text\n        :return: tuples of head word, tag, macronized form\n        :rtype : list.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SuppressWarnings(\"unchecked\") public static <T> Function<T, T> identity() { return (Function<T, T>)IDENTITY; }\n\n    ### Response:",
        "ground_truth": "Returns an identity function that simply returns its argument.\n@param  the input and output value type\n@return the identity function",
        "predict": " Return macronized form along with POS tags.\n\n        E.g. \"Gallia est omnis divisa in partes tres,\" ->\n        [('gallia', 'n-s---fb-', 'galli\u0101'), ('est', 'v3spia---', 'est'), ('omnis', 'a-s---mn-', 'omnis'),\n        ('divisa', 't-prppnn-', 'd\u012bv\u012bsa'), ('in', 'r--------', 'in'), ('partes', 'n-p---fa-', 'part\u0113s'),\n        ('tres', 'm--------', 'tr\u0113s')]\n\n        :param text: raw text\n        :return: tuples of head word, tag, macronized form\n        :rtype : list.\n\n    "
    },
    {
        "ID": 15,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private int getSourcePixel(int x,int y) { x = Math.max(0,x); x = Math.min(width-1,x); y = Math.max(0,y); y = Math.min(height-1,y); return srcImage[x+(y*width)]; }\n\n    ### Response: Get a pixel from the source image. This handles bonds checks\nand resolves to edge pixels\n\n@param x The x location of the pixel to retrieve\n@param y The y location of the pixel to retrieve\n@return The pixel value at the specified location.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static <T> Callable<T> justCallable(T value) { return new JustValue<Object, T>(value); }\n\n    ### Response:",
        "ground_truth": "Returns a Callable that returns the given value.\n@param  the value type\n@param value the value to return\n@return the new Callable instance",
        "predict": " Get a pixel from the source image. This handles bonds checks\nand resolves to edge pixels\n\n@param x The x location of the pixel to retrieve\n@param y The y location of the pixel to retrieve\n@return The pixel value at the specified location.\n\n    "
    },
    {
        "ID": 16,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (v *VersionClient) GetDaemon(ctx context.Context) (*apitypes.Version, error) { version := &apitypes.Version{} err := v.client.DaemonRoundTrip(ctx, \"GET\", \"/version\", nil, nil, version, nil) return version, err }\n\n    ### Response: // GetDaemon returns the daemon's release version..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static <T, U> Function<T, U> justFunction(U value) { return new JustValue<T, U>(value); }\n\n    ### Response:",
        "ground_truth": "Returns a Function that ignores its parameter and returns the given value.\n@param  the function's input type\n@param  the value and return type of the function\n@param value the value to return\n@return the new Function instance",
        "predict": " // GetDaemon returns the daemon's release version..\n\n    "
    },
    {
        "ID": 17,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (s *ShapeIndex) addShapeInternal(shapeID int32, allEdges [][]faceEdge, t *tracker) { shape, ok := s.shapes[shapeID] if !ok { // This shape has already been removed. return } faceEdge := faceEdge{ shapeID: shapeID, hasInterior: shape.Dimension() == 2, } if faceEdge.hasInterior { t.addShape(shapeID, containsBruteForce(shape, t.focus())) } numEdges := shape.NumEdges() for e := 0; e < numEdges; e++ { edge := shape.Edge(e) faceEdge.edgeID = e faceEdge.edge = edge faceEdge.maxLevel = maxLevelForEdge(edge) s.addFaceEdge(faceEdge, allEdges) } }\n\n    ### Response: // addShapeInternal clips all edges of the given shape to the six cube faces,\n// adds the clipped edges to the set of allEdges, and starts tracking its\n// interior if necessary..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static <T, U> Function<T, U> castFunction(Class<U> target) { return new CastToClass<T, U>(target); }\n\n    ### Response:",
        "ground_truth": "Returns a function that cast the incoming values via a Class object.\n@param  the input value type\n@param  the output and target type\n@param target the target class\n@return the new Function instance",
        "predict": " // addShapeInternal clips all edges of the given shape to the six cube faces,\n// adds the clipped edges to the set of allEdges, and starts tracking its\n// interior if necessary..\n\n    "
    },
    {
        "ID": 18,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public boolean checkCondition(IValue test) throws FilterException { Iterator iter = values.iterator(); while (iter.hasNext()) { IValue value = (IValue) iter.next(); if (value.containedBy(test)) { return true; } } return false; }\n\n    ### Response: Loop through all of the values and see if any of them pass the equality test.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @CheckReturnValue @NonNull public static <T> UnicastSubject<T> create() { return new UnicastSubject<T>(bufferSize(), true); }\n\n    ### Response:",
        "ground_truth": "Creates an UnicastSubject with an internal buffer capacity hint 16.\n@param  the value type\n@return an UnicastSubject instance",
        "predict": " Loop through all of the values and see if any of them pass the equality test.\n\n    "
    },
    {
        "ID": 19,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (g *Git) PushPull(ctx context.Context, op, remote, branch string) error { if err := g.Pull(ctx, remote, branch); err != nil { if op == \"pull\" { return err } out.Yellow(ctx, \"Failed to pull before git push: %s\", err) } if op == \"pull\" { return nil } return g.Push(ctx, remote, branch) }\n\n    ### Response: // PushPull will first pull from the remote and then push any changes.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @CheckReturnValue @NonNull public static <T> UnicastSubject<T> create(int capacityHint) { return new UnicastSubject<T>(capacityHint, true); }\n\n    ### Response:",
        "ground_truth": "Creates an UnicastSubject with the given internal buffer capacity hint.\n@param  the value type\n@param capacityHint the hint to size the internal unbounded buffer\n@return an UnicastSubject instance",
        "predict": " // PushPull will first pull from the remote and then push any changes.\n\n    "
    },
    {
        "ID": 20,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function attachment( $filename, string $name = '', string $mime = 'application/octet-stream' ): ResponseInterface { if (empty($name)) { if (!is_string($filename)) { throw new ResponseException(\"Unable to resolve public filename\"); } $name = basename($filename); } $stream = $this->getStream($filename); $response = $this->responseFactory->createResponse(); $response = $response->withHeader('Content-Type', $mime); $response = $response->withHeader('Content-Length', (string)$stream->getSize()); $response = $response->withHeader( 'Content-Disposition', 'attachment; filename=\"' . addcslashes($name, '\"') . '\"' ); return $response->withBody($stream); }\n\n    ### Response: Configure response to send given attachment to client.\n\n@param string|StreamInterface|StreamableInterface $filename Local filename or stream or streamable or resource.\n@param string                                     $name     Public file name (in attachment), by default local\nfilename. Name is mandratory when filename supplied\nin a form of stream or resource.\n@param string                                     $mime\n\n@return ResponseInterface\n\n@throws ResponseException.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @CheckReturnValue @NonNull public static <T> UnicastSubject<T> create(int capacityHint, Runnable onTerminate) { return new UnicastSubject<T>(capacityHint, onTerminate, true); }\n\n    ### Response:",
        "ground_truth": "Creates an UnicastSubject with the given internal buffer capacity hint and a callback for\nthe case when the single Subscriber cancels its subscription.\n\nThe callback, if not null, is called exactly once and\nnon-overlapped with any active replay.\n\n@param  the value type\n@param capacityHint the hint to size the internal unbounded buffer\n@param onTerminate the callback to run when the Subject is terminated or cancelled, null not allowed\n@return an UnicastSubject instance",
        "predict": " Configure response to send given attachment to client.\n\n@param string|StreamInterface|StreamableInterface $filename Local filename or stream or streamable or resource.\n@param string                                     $name     Public file name (in attachment), by default local\nfilename. Name is mandratory when filename supplied\nin a form of stream or resource.\n@param string                                     $mime\n\n@return ResponseInterface\n\n@throws ResponseException.\n\n    "
    },
    {
        "ID": 21,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function setAllowedTypes($allowed_types) { foreach ($allowed_types as $pair) { list($assoc_type, $session_type) = $pair; if (!Auth_OpenID_checkSessionType($assoc_type, $session_type)) { return false; } } $this->allowed_types = $allowed_types; return true; }\n\n    ### Response: Set the allowed association types, checking to make sure each\ncombination is valid.\n\n@access private\n@param array $allowed_types\n@return bool.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @CheckReturnValue @NonNull public static <T> UnicastSubject<T> create(boolean delayError) { return new UnicastSubject<T>(bufferSize(), delayError); }\n\n    ### Response:",
        "ground_truth": "Creates an UnicastSubject with an internal buffer capacity hint 16 and given delay error flag.\n\nThe callback, if not null, is called exactly once and\nnon-overlapped with any active replay.\nHistory: 2.0.8 - experimental\n@param  the value type\n@param delayError deliver pending onNext events before onError\n@return an UnicastSubject instance\n@since 2.2",
        "predict": " Set the allowed association types, checking to make sure each\ncombination is valid.\n\n@access private\n@param array $allowed_types\n@return bool.\n\n    "
    },
    {
        "ID": 22,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void commitTransaction() throws MarkLogicTransactionException { if (isActiveTransaction()) { try { sync(); this.tx.commit(); this.tx=null; } catch (MarkLogicSesameException e) { logger.error(e.getLocalizedMessage()); throw new MarkLogicTransactionException(e); } }else{ throw new MarkLogicTransactionException(\"No active transaction to commit.\"); } }\n\n    ### Response: commits a transaction\n\n@throws MarkLogicTransactionException.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Throwable blockingGetError() { if (getCount() != 0) { try { BlockingHelper.verifyNonBlocking(); await(); } catch (InterruptedException ex) { dispose(); return ex; } } return error; }\n\n    ### Response:",
        "ground_truth": "Block until the latch is counted down and return the error received or null if no\nerror happened.\n@return the error received or null",
        "predict": " commits a transaction\n\n@throws MarkLogicTransactionException.\n\n    "
    },
    {
        "ID": 23,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _wavGetInfo(f:Union[IO, str]) -> Tuple[SndInfo, Dict[str, Any]]: \"\"\" Read the info of a wav file. taken mostly from scipy.io.wavfile if extended: returns also fsize and bigendian \"\"\" if isinstance(f, (str, bytes)): f = open(f, 'rb') needsclosing = True else: needsclosing = False fsize, bigendian = _wavReadRiff(f) fmt = \">i\" if bigendian else \"<i\" while (f.tell() < fsize): chunk_id = f.read(4) if chunk_id == b'fmt ': chunksize, sampfmt, chans, sr, byterate, align, bits = _wavReadFmt(f, bigendian) elif chunk_id == b'data': datasize = _struct.unpack(fmt, f.read(4))[0] nframes = int(datasize / (chans * (bits / 8))) break else: _warnings.warn(\"chunk not understood: %s\" % chunk_id) data = f.read(4) size = _struct.unpack(fmt, data)[0] f.seek(size, 1) encoding = _encoding(sampfmt, bits) if needsclosing: f.close() info = SndInfo(sr, nframes, chans, encoding, \"wav\") return info, {'fsize': fsize, 'bigendian': bigendian, 'datasize': datasize}\n\n    ### Response: Read the info of a wav file. taken mostly from scipy.io.wavfile\n\n    if extended: returns also fsize and bigendian.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Throwable blockingGetError(long timeout, TimeUnit unit) { if (getCount() != 0) { try { BlockingHelper.verifyNonBlocking(); if (!await(timeout, unit)) { dispose(); throw ExceptionHelper.wrapOrThrow(new TimeoutException(timeoutMessage(timeout, unit))); } } catch (InterruptedException ex) { dispose(); throw ExceptionHelper.wrapOrThrow(ex); } } return error; }\n\n    ### Response:",
        "ground_truth": "Block until the latch is counted down and return the error received or\nwhen the wait is interrupted or times out, null otherwise.\n@param timeout the timeout value\n@param unit the time unit\n@return the error received or null",
        "predict": " Read the info of a wav file. taken mostly from scipy.io.wavfile\n\n    if extended: returns also fsize and bigendian.\n\n    "
    },
    {
        "ID": 24,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (g *Generated) WithType(slicePtr interface{}) bool { found := false v, err := conversion.EnforcePtr(slicePtr) if err != nil || v.Kind() != reflect.Slice { // This should not happen at runtime. panic(\"need ptr to slice\") } t := v.Type().Elem() for i := range g.Items { obj := reflect.ValueOf(g.Items[i]).Elem() if !obj.Type().ConvertibleTo(t) { continue } found = true v.Set(reflect.Append(v, obj.Convert(t))) } return found }\n\n    ### Response: // WithType extracts a list of runtime objects with the specified type.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public boolean blockingAwait(long timeout, TimeUnit unit) { if (getCount() != 0) { try { BlockingHelper.verifyNonBlocking(); if (!await(timeout, unit)) { dispose(); return false; } } catch (InterruptedException ex) { dispose(); throw ExceptionHelper.wrapOrThrow(ex); } } Throwable ex = error; if (ex != null) { throw ExceptionHelper.wrapOrThrow(ex); } return true; }\n\n    ### Response:",
        "ground_truth": "Block until the observer terminates and return true; return false if\nthe wait times out.\n@param timeout the timeout value\n@param unit the time unit\n@return true if the observer terminated in time, false otherwise",
        "predict": " // WithType extracts a list of runtime objects with the specified type.\n\n    "
    },
    {
        "ID": 25,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _stamped_deps(stamp_directory, func, dependencies, *args, **kwargs): \"\"\"Run func, assumed to have dependencies as its first argument.\"\"\" if not isinstance(dependencies, list): jobstamps_dependencies = [dependencies] else: jobstamps_dependencies = dependencies kwargs.update({ \"jobstamps_cache_output_directory\": stamp_directory, \"jobstamps_dependencies\": jobstamps_dependencies }) return jobstamp.run(func, dependencies, *args, **kwargs)\n\n    ### Response: Run func, assumed to have dependencies as its first argument..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static <T, U> void drainMaxLoop(SimplePlainQueue<T> q, Subscriber<? super U> a, boolean delayError, Disposable dispose, QueueDrain<T, U> qd) { int missed = 1; for (;;) { for (;;) { boolean d = qd.done(); T v = q.poll(); boolean empty = v == null; if (checkTerminated(d, empty, a, delayError, q, qd)) { if (dispose != null) { dispose.dispose(); } return; } if (empty) { break; } long r = qd.requested(); if (r != 0L) { if (qd.accept(a, v)) { if (r != Long.MAX_VALUE) { qd.produced(1); } } } else { q.clear(); if (dispose != null) { dispose.dispose(); } a.onError(new MissingBackpressureException(\"Could not emit value due to lack of requests.\")); return; } } missed = qd.leave(-missed); if (missed == 0) { break; } } }\n\n    ### Response:",
        "ground_truth": "Drain the queue but give up with an error if there aren't enough requests.\n@param  the queue value type\n@param  the emission value type\n@param q the queue\n@param a the subscriber\n@param delayError true if errors should be delayed after all normal items\n@param dispose the disposable to call when termination happens and cleanup is necessary\n@param qd the QueueDrain instance that gives status information to the drain logic",
        "predict": " Run func, assumed to have dependencies as its first argument..\n\n    "
    },
    {
        "ID": 26,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func NewTeamController(service *goa.Service, app application.Application) *TeamController { return &TeamController{Controller: service.NewController(\"TeamController\"), app: app} }\n\n    ### Response: // NewTeamController creates a team controller..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void request(Subscription s, int prefetch) { s.request(prefetch < 0 ? Long.MAX_VALUE : prefetch); }\n\n    ### Response:",
        "ground_truth": "Requests Long.MAX_VALUE if prefetch is negative or the exact\namount if prefetch is positive.\n@param s the Subscription to request from\n@param prefetch the prefetch value",
        "predict": " // NewTeamController creates a team controller..\n\n    "
    },
    {
        "ID": 27,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func Convert_apps_DeploymentCauseImageTrigger_To_v1_DeploymentCauseImageTrigger(in *apps.DeploymentCauseImageTrigger, out *v1.DeploymentCauseImageTrigger, s conversion.Scope) error { return autoConvert_apps_DeploymentCauseImageTrigger_To_v1_DeploymentCauseImageTrigger(in, out, s) }\n\n    ### Response: // Convert_apps_DeploymentCauseImageTrigger_To_v1_DeploymentCauseImageTrigger is an autogenerated conversion function..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static <T> void postComplete(Subscriber<? super T> actual, Queue<T> queue, AtomicLong state, BooleanSupplier isCancelled) { if (queue.isEmpty()) { actual.onComplete(); return; } if (postCompleteDrain(state.get(), actual, queue, state, isCancelled)) { return; } for (; ; ) { long r = state.get(); if ((r & COMPLETED_MASK) != 0L) { return; } long u = r | COMPLETED_MASK; // (active, r) -> (complete, r) transition if (state.compareAndSet(r, u)) { // if the requested amount was non-zero, drain the queue if (r != 0L) { postCompleteDrain(u, actual, queue, state, isCancelled); } return; } } }\n\n    ### Response:",
        "ground_truth": "Signals the completion of the main sequence and switches to post-completion replay mode.\n\n\nDon't modify the queue after calling this method!\n\n\nPost-completion backpressure handles the case when a source produces values based on\nrequests when it is active but more values are available even after its completion.\nIn this case, the onComplete() can't just emit the contents of the queue but has to\ncoordinate with the requested amounts. This requires two distinct modes: active and\ncompleted. In active mode, requests flow through and the queue is not accessed but\nin completed mode, requests no-longer reach the upstream but help in draining the queue.\n\nThe algorithm utilizes the most significant bit (bit 63) of a long value (AtomicLong) since\nrequest amount only goes up to Long.MAX_VALUE (bits 0-62) and negative values aren't\nallowed.\n\n@param  the value type emitted\n@param actual the target Subscriber to send events to\n@param queue the queue to drain if in the post-complete state\n@param state holds the request amount and the post-completed flag\n@param isCancelled a supplier that returns true if the drain has been cancelled",
        "predict": " // Convert_apps_DeploymentCauseImageTrigger_To_v1_DeploymentCauseImageTrigger is an autogenerated conversion function..\n\n    "
    },
    {
        "ID": 28,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function build() { $this->say(\"Generating build artifact...\"); $this->say(\"For more detailed output, use the -v flag.\"); $commands = [ // Execute `blt source:build:frontend` to ensure that frontend artifact // are generated in source repo. 'source:build:frontend', // Execute `drupal:hash-salt:init` to ensure that salt.txt exists. // There's a slim chance this has never been generated. 'drupal:hash-salt:init', ]; if (!empty($this->tagName)) { $commands['drupal:deployment-identifier:init'] = ['--id' => $this->tagName]; } else { $commands[] = 'drupal:deployment-identifier:init'; } $this->invokeCommands($commands); $this->buildCopy(); $this->composerInstall(); $this->sanitize(); $this->deploySamlConfig(); $this->invokeHook(\"post-deploy-build\"); $this->say(\"<info>The deployment artifact was generated at {$this->deployDir}.</info>\"); }\n\n    ### Response: Builds deployment artifact.\n\n@command artifact:build\n@aliases ab deploy:build.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected final void complete(R n) { long p = produced; if (p != 0) { BackpressureHelper.produced(this, p); } for (;;) { long r = get(); if ((r & COMPLETE_MASK) != 0) { onDrop(n); return; } if ((r & REQUEST_MASK) != 0) { lazySet(COMPLETE_MASK + 1); downstream.onNext(n); downstream.onComplete(); return; } value = n; if (compareAndSet(0, COMPLETE_MASK)) { return; } value = null; } }\n\n    ### Response:",
        "ground_truth": "Signals the given value and an onComplete if the downstream is ready to receive the final value.\n@param n the value to emit",
        "predict": " Builds deployment artifact.\n\n@command artifact:build\n@aliases ab deploy:build.\n\n    "
    },
    {
        "ID": 29,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func NewPCMFloatBuffer(data []float64, format *Format) *PCMBuffer { return &PCMBuffer{ Format: format, DataType: Float, Floats: data, } }\n\n    ### Response: // NewPCMFloatBuffer returns a new PCM buffer backed by the passed float samples.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SuppressWarnings(\"unchecked\") @Nullable public T getValue() { Object o = value; if (o != null && !NotificationLite.isError(o)) { return (T)value; } return null; }\n\n    ### Response:",
        "ground_truth": "Returns the contained value if this notification is an onNext\nsignal, null otherwise.\n@return the value contained or null\n@see #isOnNext()",
        "predict": " // NewPCMFloatBuffer returns a new PCM buffer backed by the passed float samples.\n\n    "
    },
    {
        "ID": 30,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static function resolveUrl(AssetInterface $asset, $url) { // given URL is absolute URL if (false !== strpos($url, '://')) { return $url; } // source directory of the asset $root = dirname($asset->getSourceRoot().'/'.$asset->getTargetPath()); // path directory where asset is being copied $path = dirname($asset->getTargetPath()); if ('.' === $path) { $image = $url; } else { $image = $path.'/'.$url; } if (null !== $root) { $image = $root.'/'.$url; } // cleanup local URLs if (false === strpos($image, '://')) { $image = self::removeQueryString($image); $image = self::removeAnchor($image); return self::resolveUps($image); } return $image; }\n\n    ### Response: Resolves an URL from an asset.\n\n@param AssetInterface $asset the asset containing the URL\n@param string         $url   url read in file\n\n@return string an URL, a filepath.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Nullable public Throwable getError() { Object o = value; if (NotificationLite.isError(o)) { return NotificationLite.getError(o); } return null; }\n\n    ### Response:",
        "ground_truth": "Returns the container Throwable error if this notification is an onError\nsignal, null otherwise.\n@return the Throwable error contained or null\n@see #isOnError()",
        "predict": " Resolves an URL from an asset.\n\n@param AssetInterface $asset the asset containing the URL\n@param string         $url   url read in file\n\n@return string an URL, a filepath.\n\n    "
    },
    {
        "ID": 31,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Date getDateOfMinutesBack(final int minutesBack, final Date date) { return dateBack(Calendar.MINUTE, minutesBack, date); }\n\n    ### Response: Get specify minutes back form given date.\n\n@param minutesBack how many minutes want to be back.\n@param date date to be handled.\n@return a new Date object..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static boolean validate(Disposable upstream, Disposable next, Class<?> observer) { ObjectHelper.requireNonNull(next, \"next is null\"); if (upstream != null) { next.dispose(); if (upstream != DisposableHelper.DISPOSED) { reportDoubleSubscription(observer); } return false; } return true; }\n\n    ### Response:",
        "ground_truth": "Ensures that the upstream Disposable is null and returns true, otherwise\ndisposes the next Disposable and if the upstream is not the shared\ndisposed instance, reports a ProtocolViolationException due to\nmultiple subscribe attempts.\n@param upstream the upstream current value\n@param next the Disposable to check for nullness and dispose if necessary\n@param observer the class of the consumer to have a personalized\nerror message if the upstream already contains a non-cancelled Disposable.\n@return true if successful, false if the upstream was non null",
        "predict": " Get specify minutes back form given date.\n\n@param minutesBack how many minutes want to be back.\n@param date date to be handled.\n@return a new Date object..\n\n    "
    },
    {
        "ID": 32,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function addDocumentToDocumentPool(Document $document) { $documentId = (string) $document->getId(); if (!isset($this->documentPool[$documentId])) { $this->documentPool[$documentId] = $document; } else { // merging because document after // load and before getting in second place may be changed // and this changes must be preserved: // // 1. Document loads and modifies in current session // 2. Document loads modified in another session // 3. Document loads once again in current session. Changes from stage 2 merges as unmodified $this->documentPool[$documentId]->mergeUnmodified($document->toArray()); } return $this; }\n\n    ### Response: Store document to pool\n\n@param array $document\n@return \\Sokil\\Mongo\\Collection.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static boolean setOnce(AtomicReference<Disposable> upstream, Disposable next, Class<?> observer) { ObjectHelper.requireNonNull(next, \"next is null\"); if (!upstream.compareAndSet(null, next)) { next.dispose(); if (upstream.get() != DisposableHelper.DISPOSED) { reportDoubleSubscription(observer); } return false; } return true; }\n\n    ### Response:",
        "ground_truth": "Atomically updates the target upstream AtomicReference from null to the non-null\nnext Disposable, otherwise disposes next and reports a ProtocolViolationException\nif the AtomicReference doesn't contain the shared disposed indicator.\n@param upstream the target AtomicReference to update\n@param next the Disposable to set on it atomically\n@param observer the class of the consumer to have a personalized\nerror message if the upstream already contains a non-cancelled Disposable.\n@return true if successful, false if the content of the AtomicReference was non null",
        "predict": " Store document to pool\n\n@param array $document\n@return \\Sokil\\Mongo\\Collection.\n\n    "
    },
    {
        "ID": 33,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def loadPng(varNumVol, tplPngSize, strPathPng): \"\"\"Load PNG files. Parameters ---------- varNumVol : float Number of volumes, i.e. number of time points in all runs. tplPngSize : tuple Shape of the stimulus image (i.e. png). strPathPng: str Path to the folder cointaining the png files. Returns ------- aryPngData : 2d numpy array, shape [png_x, png_y, n_vols] Stack of stimulus data. \"\"\" print('------Load PNGs') # Create list of png files to load: lstPngPaths = [None] * varNumVol for idx01 in range(0, varNumVol): lstPngPaths[idx01] = (strPathPng + str(idx01) + '.png') # Load png files. The png data will be saved in a numpy array of the # following order: aryPngData[x-pixel, y-pixel, PngNumber]. The # sp.misc.imread function actually contains three values per pixel (RGB), # but since the stimuli are black-and-white, any one of these is sufficient # and we discard the others. aryPngData = np.zeros((tplPngSize[0], tplPngSize[1], varNumVol)) for idx01 in range(0, varNumVol): aryPngData[:, :, idx01] = np.array(Image.open(lstPngPaths[idx01])) # Convert RGB values (0 to 255) to integer ones and zeros: aryPngData = (aryPngData > 0).astype(int) return aryPngData\n\n    ### Response: Load PNG files.\n\n    Parameters\n    ----------\n    varNumVol : float\n        Number of volumes, i.e. number of time points in all runs.\n    tplPngSize : tuple\n        Shape of the stimulus image (i.e. png).\n    strPathPng: str\n        Path to the folder cointaining the png files.\n    Returns\n    -------\n    aryPngData : 2d numpy array, shape [png_x, png_y, n_vols]\n        Stack of stimulus data..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static boolean validate(Subscription upstream, Subscription next, Class<?> subscriber) { ObjectHelper.requireNonNull(next, \"next is null\"); if (upstream != null) { next.cancel(); if (upstream != SubscriptionHelper.CANCELLED) { reportDoubleSubscription(subscriber); } return false; } return true; }\n\n    ### Response:",
        "ground_truth": "Ensures that the upstream Subscription is null and returns true, otherwise\ncancels the next Subscription and if the upstream is not the shared\ncancelled instance, reports a ProtocolViolationException due to\nmultiple subscribe attempts.\n@param upstream the upstream current value\n@param next the Subscription to check for nullness and cancel if necessary\n@param subscriber the class of the consumer to have a personalized\nerror message if the upstream already contains a non-cancelled Subscription.\n@return true if successful, false if the upstream was non null",
        "predict": " Load PNG files.\n\n    Parameters\n    ----------\n    varNumVol : float\n        Number of volumes, i.e. number of time points in all runs.\n    tplPngSize : tuple\n        Shape of the stimulus image (i.e. png).\n    strPathPng: str\n        Path to the folder cointaining the png files.\n    Returns\n    -------\n    aryPngData : 2d numpy array, shape [png_x, png_y, n_vols]\n        Stack of stimulus data..\n\n    "
    },
    {
        "ID": 34,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def reentrancies(self): \"\"\" Return a mapping of variables to their re-entrancy count. A re-entrancy is when more than one edge selects a node as its target. These graphs are rooted, so the top node always has an implicit entrancy. Only nodes with re-entrancies are reported, and the count is only for the entrant edges beyond the first. Also note that these counts are for the interpreted graph, not for the linearized form, so inverted edges are always re-entrant. \"\"\" entrancies = defaultdict(int) entrancies[self.top] += 1 # implicit entrancy to top for t in self.edges(): entrancies[t.target] += 1 return dict((v, cnt - 1) for v, cnt in entrancies.items() if cnt >= 2)\n\n    ### Response: Return a mapping of variables to their re-entrancy count.\n\n        A re-entrancy is when more than one edge selects a node as its\n        target. These graphs are rooted, so the top node always has an\n        implicit entrancy. Only nodes with re-entrancies are reported,\n        and the count is only for the entrant edges beyond the first.\n        Also note that these counts are for the interpreted graph, not\n        for the linearized form, so inverted edges are always\n        re-entrant..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static boolean setOnce(AtomicReference<Subscription> upstream, Subscription next, Class<?> subscriber) { ObjectHelper.requireNonNull(next, \"next is null\"); if (!upstream.compareAndSet(null, next)) { next.cancel(); if (upstream.get() != SubscriptionHelper.CANCELLED) { reportDoubleSubscription(subscriber); } return false; } return true; }\n\n    ### Response:",
        "ground_truth": "Atomically updates the target upstream AtomicReference from null to the non-null\nnext Subscription, otherwise cancels next and reports a ProtocolViolationException\nif the AtomicReference doesn't contain the shared cancelled indicator.\n@param upstream the target AtomicReference to update\n@param next the Subscription to set on it atomically\n@param subscriber the class of the consumer to have a personalized\nerror message if the upstream already contains a non-cancelled Subscription.\n@return true if successful, false if the content of the AtomicReference was non null",
        "predict": " Return a mapping of variables to their re-entrancy count.\n\n        A re-entrancy is when more than one edge selects a node as its\n        target. These graphs are rooted, so the top node always has an\n        implicit entrancy. Only nodes with re-entrancies are reported,\n        and the count is only for the entrant edges beyond the first.\n        Also note that these counts are for the interpreted graph, not\n        for the linearized form, so inverted edges are always\n        re-entrant..\n\n    "
    },
    {
        "ID": 35,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static RowMapper getRowMapper(ResultSet rs, Class returnTypeClass, Calendar cal) { Class<? extends RowMapper> rm = _rowMappings.get(returnTypeClass); if (rm != null) { return getMapper(rm, rs, returnTypeClass, cal); } // // if we made it to here, check if the default XMLObject Mapper can be used, // otherwise use the default object mapper // if (XMLOBJ_CLASS != null && XMLOBJ_CLASS.isAssignableFrom(returnTypeClass)) { return getMapper(DEFAULT_XMLOBJ_ROWMAPPING, rs, returnTypeClass, cal); } else { return getMapper(DEFAULT_OBJ_ROWMAPPING, rs, returnTypeClass, cal); } }\n\n    ### Response: Get a RowMapper instance which knows how to map a ResultSet row to the given return type.\n\n@param rs              The ResultSet to map.\n@param returnTypeClass The class to map a ResultSet row to.\n@param cal             Calendar instance for mapping date/time values.\n@return A RowMapper instance..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static long addCap(long a, long b) { long u = a + b; if (u < 0L) { return Long.MAX_VALUE; } return u; }\n\n    ### Response:",
        "ground_truth": "Adds two long values and caps the sum at Long.MAX_VALUE.\n@param a the first value\n@param b the second value\n@return the sum capped at Long.MAX_VALUE",
        "predict": " Get a RowMapper instance which knows how to map a ResultSet row to the given return type.\n\n@param rs              The ResultSet to map.\n@param returnTypeClass The class to map a ResultSet row to.\n@param cal             Calendar instance for mapping date/time values.\n@return A RowMapper instance..\n\n    "
    },
    {
        "ID": 36,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static Capabilities dropCapabilities(Capabilities capabilities) { if (capabilities == null) { return new ImmutableCapabilities(); } MutableCapabilities caps; if (isLegacy(capabilities)) { final Set<String> toRemove = Sets.newHashSet(BINARY, PROFILE); caps = new MutableCapabilities( Maps.filterKeys(capabilities.asMap(), key -> !toRemove.contains(key))); } else { caps = new MutableCapabilities(capabilities); } // Ensure that the proxy is in a state fit to be sent to the extension Proxy proxy = Proxy.extractFrom(capabilities); if (proxy != null) { caps.setCapability(PROXY, proxy); } return caps; }\n\n    ### Response: Drops capabilities that we shouldn't send over the wire.\n\nUsed for capabilities which aren't BeanToJson-convertable, and are only used by the local\nlauncher..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static long multiplyCap(long a, long b) { long u = a * b; if (((a | b) >>> 31) != 0) { if (u / a != b) { return Long.MAX_VALUE; } } return u; }\n\n    ### Response:",
        "ground_truth": "Multiplies two long values and caps the product at Long.MAX_VALUE.\n@param a the first value\n@param b the second value\n@return the product capped at Long.MAX_VALUE",
        "predict": " Drops capabilities that we shouldn't send over the wire.\n\nUsed for capabilities which aren't BeanToJson-convertable, and are only used by the local\nlauncher..\n\n    "
    },
    {
        "ID": 37,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function renderTemplateString(string $template, array $variables = []): string { $output = $this->indexControlStructure($template, 'foreach'); $output = $this->indexControlStructure($output, 'if', ['else']); $output = $this->resolveLoops($output, $variables); $output = $this->resolveConditionals($output, $variables); return $this->replaceVariablesInTemplate($output, $variables); }\n\n    ### Response: Render a given template string\n\n@param string $template  The template string\n@param array  $variables The variables assigned to the template\n\n@return string\n@throws UndefinedSymbolException\n@throws SyntaxErrorException.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static long add(AtomicLong requested, long n) { for (;;) { long r = requested.get(); if (r == Long.MAX_VALUE) { return Long.MAX_VALUE; } long u = addCap(r, n); if (requested.compareAndSet(r, u)) { return r; } } }\n\n    ### Response:",
        "ground_truth": "Atomically adds the positive value n to the requested value in the AtomicLong and\ncaps the result at Long.MAX_VALUE and returns the previous value.\n@param requested the AtomicLong holding the current requested value\n@param n the value to add, must be positive (not verified)\n@return the original value before the add",
        "predict": " Render a given template string\n\n@param string $template  The template string\n@param array  $variables The variables assigned to the template\n\n@return string\n@throws UndefinedSymbolException\n@throws SyntaxErrorException.\n\n    "
    },
    {
        "ID": 38,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function _setIconOptions(array $options = [], array $iconOptions = []) { $icon = $options['icon']; if (Arr::key('iconInline', $options)) { $iconPrefix = $this->_configRead('iconPref'); $options = $this->_addClass($options, implode(' ', [ $this->_class('icon'), $iconPrefix, $iconPrefix . '-' . $icon ])); unset($options['icon']); } else { $options['escape'] = false; $iconOptions['createIcon'] = true; } return [$options, $iconOptions]; }\n\n    ### Response: Setup icon options.\n\n@param   array $options\n@param   array $iconOptions\n@return  array.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static NullPointerException toNpe(Throwable ex) { NullPointerException npe = new NullPointerException(\"Actually not, but can't pass out an exception otherwise...\"); npe.initCause(ex); return npe; }\n\n    ### Response:",
        "ground_truth": "Creates a NullPointerException instance and sets the given Throwable as its initial cause.\n@param ex the Throwable instance to use as cause, not null (not verified)\n@return the created NullPointerException",
        "predict": " Setup icon options.\n\n@param   array $options\n@param   array $iconOptions\n@return  array.\n\n    "
    },
    {
        "ID": 39,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (sba *sparseBitArray) Reset() { sba.blocks = sba.blocks[:0] sba.indices = sba.indices[:0] }\n\n    ### Response: // Reset erases all values from this bitarray..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void add(Object o) { // if no value yet, create the first array if (size == 0) { head = new Object[capacityHint + 1]; tail = head; head[0] = o; indexInTail = 1; size = 1; } else // if the tail is full, create a new tail and link if (indexInTail == capacityHint) { Object[] t = new Object[capacityHint + 1]; t[0] = o; tail[capacityHint] = t; tail = t; indexInTail = 1; size++; } else { tail[indexInTail] = o; indexInTail++; size++; } }\n\n    ### Response:",
        "ground_truth": "Adds a new element to this list.\n@param o the object to add, nulls are accepted",
        "predict": " // Reset erases all values from this bitarray..\n\n    "
    },
    {
        "ID": 40,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static function addTags($line,$tag) { $lineFinal = \"<\".$tag.\">\".preg_replace(\"/<[A-z0-9-_]{1,}>[^<]{1,}<\\/[A-z0-9-_]{1,}>/\",\"</\".$tag.\">$0<\".$tag.\">\",$line).\"</\".$tag.\">\"; return $lineFinal; }\n\n    ### Response: Modify a line to include the given tag by default\n@param  {String}        the content to be written out.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void shutdown() { ScheduledExecutorService exec = PURGE_THREAD.getAndSet(null); if (exec != null) { exec.shutdownNow(); } POOLS.clear(); }\n\n    ### Response:",
        "ground_truth": "Stops the purge thread.",
        "predict": " Modify a line to include the given tag by default\n@param  {String}        the content to be written out.\n\n    "
    },
    {
        "ID": 41,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static function indexOf($str, $search, $startPos = 0) { $result = self::validateIndexOf($str, $search, $startPos); if (true !== $result) { return $result; } if (true === self::isEmpty($search)) { return $startPos; } $pos = \\strpos($str, $search, $startPos); return (false === $pos) ? -1 : $pos; }\n\n    ### Response: Finds the first index within a `string` from a start position, handling\n`null`.\n\nA `null` or empty (`''`) `string` will return `-1`.\nA negative start position is treated as zero.\nA start position greater than the string length returns `-1`.\n\nStringUtils::indexOf(null, *, *);          // -1\nStringUtils::indexOf(*, null, *);          // -1\nStringUtils::indexOf('', '', 0);           // 0\nStringUtils::indexOf('aabaabaa', 'a', 0);  // 0\nStringUtils::indexOf('aabaabaa', 'b', 0);  // 2\nStringUtils::indexOf('aabaabaa', 'ab', 0); // 1\nStringUtils::indexOf('aabaabaa', 'b', 3);  // 5\nStringUtils::indexOf('aabaabaa', 'b', 9);  // -1\nStringUtils::indexOf('aabaabaa', 'b', -1); // 2\nStringUtils::indexOf('aabaabaa', '', 2);   // 2\nStringUtils::indexOf('abc', '', 9);        // 3\n\n@param string  $str      The `string` to check.\n@param string  $search   The `string` to find.\n@param integer $startPos The start position, negative treated as zero.\n\n@return integer The first index of the search character, `-1` if no match\nor `null` `string` input..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static ScheduledExecutorService create(ThreadFactory factory) { final ScheduledExecutorService exec = Executors.newScheduledThreadPool(1, factory); tryPutIntoPool(PURGE_ENABLED, exec); return exec; }\n\n    ### Response:",
        "ground_truth": "Creates a ScheduledExecutorService with the given factory.\n@param factory the thread factory\n@return the ScheduledExecutorService",
        "predict": " Finds the first index within a `string` from a start position, handling\n`null`.\n\nA `null` or empty (`''`) `string` will return `-1`.\nA negative start position is treated as zero.\nA start position greater than the string length returns `-1`.\n\nStringUtils::indexOf(null, *, *);          // -1\nStringUtils::indexOf(*, null, *);          // -1\nStringUtils::indexOf('', '', 0);           // 0\nStringUtils::indexOf('aabaabaa', 'a', 0);  // 0\nStringUtils::indexOf('aabaabaa', 'b', 0);  // 2\nStringUtils::indexOf('aabaabaa', 'ab', 0); // 1\nStringUtils::indexOf('aabaabaa', 'b', 3);  // 5\nStringUtils::indexOf('aabaabaa', 'b', 9);  // -1\nStringUtils::indexOf('aabaabaa', 'b', -1); // 2\nStringUtils::indexOf('aabaabaa', '', 2);   // 2\nStringUtils::indexOf('abc', '', 9);        // 3\n\n@param string  $str      The `string` to check.\n@param string  $search   The `string` to find.\n@param integer $startPos The start position, negative treated as zero.\n\n@return integer The first index of the search character, `-1` if no match\nor `null` `string` input..\n\n    "
    },
    {
        "ID": 42,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _apply_unix_permissions(self, request: Request, response: Response): '''Fetch and apply Unix permissions. Coroutine. ''' files = yield from self._fetch_parent_path(request) if not files: return filename = posixpath.basename(request.file_path) for file_entry in files: if file_entry.name == filename and file_entry.perm: _logger.debug( 'Set chmod {} o{:o}.', response.body.name, file_entry.perm ) os.chmod(response.body.name, file_entry.perm)\n\n    ### Response: Fetch and apply Unix permissions.\n\n        Coroutine..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public final void setSubscription(Subscription s) { if (cancelled) { s.cancel(); return; } ObjectHelper.requireNonNull(s, \"s is null\"); if (get() == 0 && compareAndSet(0, 1)) { Subscription a = actual; if (a != null && cancelOnReplace) { a.cancel(); } actual = s; long r = requested; if (decrementAndGet() != 0) { drainLoop(); } if (r != 0L) { s.request(r); } return; } Subscription a = missedSubscription.getAndSet(s); if (a != null && cancelOnReplace) { a.cancel(); } drain(); }\n\n    ### Response:",
        "ground_truth": "Atomically sets a new subscription.\n@param s the subscription to set, not null (verified)",
        "predict": " Fetch and apply Unix permissions.\n\n        Coroutine..\n\n    "
    },
    {
        "ID": 43,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def get_subgroupiteminsertion( cls, itemgroup, model, subgroup, indent) -> str: \"\"\"Return a string defining the required types for the given combination of an exchange item group and a specific variable subgroup of an application model or class |Node|. Note that for `setitems` and `getitems` `setitemType` and `getitemType` are referenced, respectively, and for all others the model specific `mathitemType`: >>> from hydpy import prepare_model >>> model = prepare_model('hland_v1') >>> from hydpy.auxs.xmltools import XSDWriter >>> print(XSDWriter.get_subgroupiteminsertion( # doctest: +ELLIPSIS ... 'setitems', model, model.parameters.control, 1)) <element name=\"control\" minOccurs=\"0\" maxOccurs=\"unbounded\"> <complexType> <sequence> <element ref=\"hpcb:selections\" minOccurs=\"0\"/> <element ref=\"hpcb:devices\" minOccurs=\"0\"/> <element name=\"area\" type=\"hpcb:setitemType\" minOccurs=\"0\" maxOccurs=\"unbounded\"/> <element name=\"nmbzones\" ... </sequence> </complexType> </element> >>> print(XSDWriter.get_subgroupiteminsertion( # doctest: +ELLIPSIS ... 'getitems', model, model.parameters.control, 1)) <element name=\"control\" ... <element name=\"area\" type=\"hpcb:getitemType\" minOccurs=\"0\" maxOccurs=\"unbounded\"/> ... >>> print(XSDWriter.get_subgroupiteminsertion( # doctest: +ELLIPSIS ... 'additems', model, model.parameters.control, 1)) <element name=\"control\" ... <element name=\"area\" type=\"hpcb:hland_v1_mathitemType\" minOccurs=\"0\" maxOccurs=\"unbounded\"/> ... For sequence classes, additional \"series\" elements are added: >>> print(XSDWriter.get_subgroupiteminsertion( # doctest: +ELLIPSIS ... 'setitems', model, model.sequences.fluxes, 1)) <element name=\"fluxes\" ... <element name=\"tmean\" type=\"hpcb:setitemType\" minOccurs=\"0\" maxOccurs=\"unbounded\"/> <element name=\"tmean.series\" type=\"hpcb:setitemType\" minOccurs=\"0\" maxOccurs=\"unbounded\"/> <element name=\"tc\" ... </sequence> </complexType> </element> \"\"\" blanks1 = ' ' * (indent * 4) blanks2 = ' ' * ((indent+5) * 4 + 1) subs = [ f'{blanks1}<element name=\"{subgroup.name}\"', f'{blanks1} minOccurs=\"0\"', f'{blanks1} maxOccurs=\"unbounded\">', f'{blanks1} <complexType>', f'{blanks1} <sequence>', f'{blanks1} <element ref=\"hpcb:selections\"', f'{blanks1} minOccurs=\"0\"/>', f'{blanks1} <element ref=\"hpcb:devices\"', f'{blanks1} minOccurs=\"0\"/>'] seriesflags = (False,) if subgroup.name == 'control' else (False, True) for variable in subgroup: for series in seriesflags: name = f'{variable.name}.series' if series else variable.name subs.append(f'{blanks1} <element name=\"{name}\"') if itemgroup == 'setitems': subs.append(f'{blanks2}type=\"hpcb:setitemType\"') elif itemgroup == 'getitems': subs.append(f'{blanks2}type=\"hpcb:getitemType\"') else: subs.append( f'{blanks2}type=\"hpcb:{model.name}_mathitemType\"') subs.append(f'{blanks2}minOccurs=\"0\"') subs.append(f'{blanks2}maxOccurs=\"unbounded\"/>') subs.extend([ f'{blanks1} </sequence>', f'{blanks1} </complexType>', f'{blanks1}</element>']) return '\\n'.join(subs)\n\n    ### Response: Return a string defining the required types for the given\n        combination of an exchange item group and a specific variable\n        subgroup of an application model or class |Node|.\n\n        Note that for `setitems` and `getitems` `setitemType` and\n        `getitemType` are referenced, respectively, and for all others\n        the model specific `mathitemType`:\n\n        >>> from hydpy import prepare_model\n        >>> model = prepare_model('hland_v1')\n        >>> from hydpy.auxs.xmltools import XSDWriter\n        >>> print(XSDWriter.get_subgroupiteminsertion(    # doctest: +ELLIPSIS\n        ...     'setitems', model, model.parameters.control, 1))\n            \n                \n                    \n                        \n                        \n                        \n                        \n                \n            \n\n        >>> print(XSDWriter.get_subgroupiteminsertion(    # doctest: +ELLIPSIS\n        ...     'getitems', model, model.parameters.control, 1))\n            \n        ...\n\n        >>> print(XSDWriter.get_subgroupiteminsertion(    # doctest: +ELLIPSIS\n        ...     'additems', model, model.parameters.control, 1))\n            \n        ...\n\n        For sequence classes, additional \"series\" elements are added:\n\n        >>> print(XSDWriter.get_subgroupiteminsertion(    # doctest: +ELLIPSIS\n        ...     'setitems', model, model.sequences.fluxes, 1))\n            \n                        \n                        \n                \n            .\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    void emitLoop() { for (;;) { AppendOnlyLinkedArrayList<Object> q; synchronized (this) { q = queue; if (q == null) { emitting = false; return; } queue = null; } q.forEachWhile(this); } }\n\n    ### Response:",
        "ground_truth": "Loops until all notifications in the queue has been processed.",
        "predict": " Return a string defining the required types for the given\n        combination of an exchange item group and a specific variable\n        subgroup of an application model or class |Node|.\n\n        Note that for `setitems` and `getitems` `setitemType` and\n        `getitemType` are referenced, respectively, and for all others\n        the model specific `mathitemType`:\n\n        >>> from hydpy import prepare_model\n        >>> model = prepare_model('hland_v1')\n        >>> from hydpy.auxs.xmltools import XSDWriter\n        >>> print(XSDWriter.get_subgroupiteminsertion(    # doctest: +ELLIPSIS\n        ...     'setitems', model, model.parameters.control, 1))\n            \n                \n                    \n                        \n                        \n                        \n                        \n                \n            \n\n        >>> print(XSDWriter.get_subgroupiteminsertion(    # doctest: +ELLIPSIS\n        ...     'getitems', model, model.parameters.control, 1))\n            \n        ...\n\n        >>> print(XSDWriter.get_subgroupiteminsertion(    # doctest: +ELLIPSIS\n        ...     'additems', model, model.parameters.control, 1))\n            \n        ...\n\n        For sequence classes, additional \"series\" elements are added:\n\n        >>> print(XSDWriter.get_subgroupiteminsertion(    # doctest: +ELLIPSIS\n        ...     'setitems', model, model.sequences.fluxes, 1))\n            \n                        \n                        \n                \n            .\n\n    "
    },
    {
        "ID": 44,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function resolveValues(obj) { var ret = {}; return Promise.all(Object.keys(obj).map(function (k) { var val = (0, _promisify2['default'])(obj[k]); return val.then(function (v) { return ret[k] = v; }); })).then(function () { return ret; }); }\n\n    ### Response: resolves all values if they are promises\nreturns equal object with resolved.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static RuntimeException wrapOrThrow(Throwable error) { if (error instanceof Error) { throw (Error)error; } if (error instanceof RuntimeException) { return (RuntimeException)error; } return new RuntimeException(error); }\n\n    ### Response:",
        "ground_truth": "If the provided Throwable is an Error this method\nthrows it, otherwise returns a RuntimeException wrapping the error\nif that error is a checked exception.\n@param error the error to wrap or throw\n@return the (wrapped) error",
        "predict": " resolves all values if they are promises\nreturns equal object with resolved.\n\n    "
    },
    {
        "ID": 45,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func pathParams(r *design.RouteDefinition) string { pnames := r.Params() params := make(design.Object, len(pnames)) for _, p := range pnames { params[p] = r.Parent.Params.Type.ToObject()[p] } return join(&design.AttributeDefinition{Type: params}, false, pnames) }\n\n    ### Response: // pathParams return the function signature of the path factory function for the given route..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static List<Throwable> flatten(Throwable t) { List<Throwable> list = new ArrayList<Throwable>(); ArrayDeque<Throwable> deque = new ArrayDeque<Throwable>(); deque.offer(t); while (!deque.isEmpty()) { Throwable e = deque.removeFirst(); if (e instanceof CompositeException) { CompositeException ce = (CompositeException) e; List<Throwable> exceptions = ce.getExceptions(); for (int i = exceptions.size() - 1; i >= 0; i--) { deque.offerFirst(exceptions.get(i)); } } else { list.add(e); } } return list; }\n\n    ### Response:",
        "ground_truth": "Returns a flattened list of Throwables from tree-like CompositeException chain.\n@param t the starting throwable\n@return the list of Throwables flattened in a depth-first manner",
        "predict": " // pathParams return the function signature of the path factory function for the given route..\n\n    "
    },
    {
        "ID": 46,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private Instance insertNewProp(final String _key, final String _value) { Instance ret = null; try { final Insert insert = new Insert(DBPropertiesUpdate.TYPE_PROPERTIES); insert.add(\"BundleID\", this.bundleInstance); insert.add(\"Key\", _key); insert.add(\"Default\", _value); insert.executeWithoutAccessCheck(); ret = insert.getInstance(); insert.close(); } catch (final EFapsException e) { DBPropertiesUpdate.LOG.error(\"InsertNew(String, String)\", e); } return ret; }\n\n    ### Response: Insert a new Property.\n\n@param _key      Key to insert\n@param _value    value to insert\n@return ID of the new Property.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SuppressWarnings(\"unchecked\") public static <E extends Throwable> Exception throwIfThrowable(Throwable e) throws E { if (e instanceof Exception) { return (Exception)e; } throw (E)e; }\n\n    ### Response:",
        "ground_truth": "Workaround for Java 6 not supporting throwing a final Throwable from a catch block.\n@param  the generic exception type\n@param e the Throwable error to return or throw\n@return the Throwable e if it is a subclass of Exception\n@throws E the generic exception thrown",
        "predict": " Insert a new Property.\n\n@param _key      Key to insert\n@param _value    value to insert\n@return ID of the new Property.\n\n    "
    },
    {
        "ID": 47,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Page getDiscussionPage(Page articlePage) throws WikiApiException{ String articleTitle = articlePage.getTitle().toString(); if(articleTitle.startsWith(WikiConstants.DISCUSSION_PREFIX)){ return articlePage; }else{ return new Page(this, WikiConstants.DISCUSSION_PREFIX+articleTitle); } }\n\n    ### Response: Gets the discussion page for the given article page\nThe provided page must not be a discussion page\n\n@param articlePage the article page for which a discussion page should be retrieved\n@return The discussion page object for the given article page object\n@throws WikiApiException If no page or redirect with this title exists or title could not be properly parsed..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void clear() { if (disposed) { return; } OpenHashSet<Disposable> set; synchronized (this) { if (disposed) { return; } set = resources; resources = null; } dispose(set); }\n\n    ### Response:",
        "ground_truth": "Atomically clears the container, then disposes all the previously contained Disposables.",
        "predict": " Gets the discussion page for the given article page\nThe provided page must not be a discussion page\n\n@param articlePage the article page for which a discussion page should be retrieved\n@return The discussion page object for the given article page object\n@throws WikiApiException If no page or redirect with this title exists or title could not be properly parsed..\n\n    "
    },
    {
        "ID": 48,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func CaptureDebugGCStats(r Registry, d time.Duration) { for range time.Tick(d) { CaptureDebugGCStatsOnce(r) } }\n\n    ### Response: // Capture new values for the Go garbage collector statistics exported in\n// debug.GCStats.  This is designed to be called as a goroutine..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public int size() { if (disposed) { return 0; } synchronized (this) { if (disposed) { return 0; } OpenHashSet<Disposable> set = resources; return set != null ? set.size() : 0; } }\n\n    ### Response:",
        "ground_truth": "Returns the number of currently held Disposables.\n@return the number of currently held Disposables",
        "predict": " // Capture new values for the Go garbage collector statistics exported in\n// debug.GCStats.  This is designed to be called as a goroutine..\n\n    "
    },
    {
        "ID": 49,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function withADistanceOf(int $distance): self { $clause = $this->clauses->last(); if (!$clause instanceof Clause\\PathAware) { throw new NonPathAwareClause; } $clause = $clause->withADistanceOf($distance); $query = new self; $query->clauses = $this ->clauses ->dropEnd(1) ->add($clause); return $query; }\n\n    ### Response: Define the deepness of the relationship\n\n@param int $distance\n\n@throws LogicException If no relationship in the path\n\n@return self.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SuppressWarnings(\"unchecked\") public static <T, R> boolean tryScalarXMapSubscribe(ObservableSource<T> source, Observer<? super R> observer, Function<? super T, ? extends ObservableSource<? extends R>> mapper) { if (source instanceof Callable) { T t; try { t = ((Callable<T>)source).call(); } catch (Throwable ex) { Exceptions.throwIfFatal(ex); EmptyDisposable.error(ex, observer); return true; } if (t == null) { EmptyDisposable.complete(observer); return true; } ObservableSource<? extends R> r; try { r = ObjectHelper.requireNonNull(mapper.apply(t), \"The mapper returned a null ObservableSource\"); } catch (Throwable ex) { Exceptions.throwIfFatal(ex); EmptyDisposable.error(ex, observer); return true; } if (r instanceof Callable) { R u; try { u = ((Callable<R>)r).call(); } catch (Throwable ex) { Exceptions.throwIfFatal(ex); EmptyDisposable.error(ex, observer); return true; } if (u == null) { EmptyDisposable.complete(observer); return true; } ScalarDisposable<R> sd = new ScalarDisposable<R>(observer, u); observer.onSubscribe(sd); sd.run(); } else { r.subscribe(observer); } return true; } return false; }\n\n    ### Response:",
        "ground_truth": "Tries to subscribe to a possibly Callable source's mapped ObservableSource.\n@param  the input value type\n@param  the output value type\n@param source the source ObservableSource\n@param observer the subscriber\n@param mapper the function mapping a scalar value into an ObservableSource\n@return true if successful, false if the caller should continue with the regular path.",
        "predict": " Define the deepness of the relationship\n\n@param int $distance\n\n@throws LogicException If no relationship in the path\n\n@return self.\n\n    "
    },
    {
        "ID": 50,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def cli(env, record, record_type, data, zone, ttl, priority, protocol, port, service, weight): \"\"\"Add resource record. Each resource record contains a RECORD and DATA property, defining a resource's name and it's target data. Domains contain multiple types of resource records so it can take one of the following values: A, AAAA, CNAME, MX, SPF, SRV, and PTR. About reverse records (PTR), the RECORD value must to be the public Ip Address of device you would like to manage reverse DNS. slcli dns record-add 10.10.8.21 PTR myhost.com --ttl=900 Examples: slcli dns record-add myhost.com A 192.168.1.10 --zone=foobar.com --ttl=900 slcli dns record-add myhost.com AAAA 2001:DB8::1 --zone=foobar.com slcli dns record-add 192.168.1.2 MX 192.168.1.10 --zone=foobar.com --priority=11 --ttl=1800 slcli dns record-add myhost.com TXT \"txt-verification=rXOxyZounZs87oacJSKvbUSIQ\" --zone=2223334 slcli dns record-add myhost.com SPF \"v=spf1 include:_spf.google.com ~all\" --zone=2223334 slcli dns record-add myhost.com SRV 192.168.1.10 --zone=2223334 --service=foobar --port=80 --protocol=TCP \"\"\" manager = SoftLayer.DNSManager(env.client) record_type = record_type.upper() if zone and record_type != 'PTR': zone_id = helpers.resolve_id(manager.resolve_ids, zone, name='zone') if record_type == 'MX': manager.create_record_mx(zone_id, record, data, ttl=ttl, priority=priority) elif record_type == 'SRV': manager.create_record_srv(zone_id, record, data, protocol, port, service, ttl=ttl, priority=priority, weight=weight) else: manager.create_record(zone_id, record, record_type, data, ttl=ttl) elif record_type == 'PTR': manager.create_record_ptr(record, data, ttl=ttl) else: raise exceptions.CLIAbort(\"%s isn't a valid record type or zone is missing\" % record_type) click.secho(\"%s record added successfully\" % record_type, fg='green')\n\n    ### Response: Add resource record.\n\n    Each resource record contains a RECORD and DATA property, defining a resource's name and it's target data.\n    Domains contain multiple types of resource records so it can take one of the following values: A, AAAA, CNAME,\n    MX, SPF, SRV, and PTR.\n\n    About reverse records (PTR), the RECORD value must to be the public Ip Address of device you would like to manage\n    reverse DNS.\n\n        slcli dns record-add 10.10.8.21 PTR myhost.com --ttl=900\n\n    Examples:\n\n        slcli dns record-add myhost.com A 192.168.1.10 --zone=foobar.com --ttl=900\n\n        slcli dns record-add myhost.com AAAA 2001:DB8::1 --zone=foobar.com\n\n        slcli dns record-add 192.168.1.2 MX 192.168.1.10 --zone=foobar.com --priority=11 --ttl=1800\n\n        slcli dns record-add myhost.com TXT \"txt-verification=rXOxyZounZs87oacJSKvbUSIQ\" --zone=2223334\n\n        slcli dns record-add myhost.com SPF \"v=spf1 include:_spf.google.com ~all\" --zone=2223334\n\n        slcli dns record-add myhost.com SRV 192.168.1.10 --zone=2223334 --service=foobar --port=80 --protocol=TCP.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static <T, U> Observable<U> scalarXMap(T value, Function<? super T, ? extends ObservableSource<? extends U>> mapper) { return RxJavaPlugins.onAssembly(new ScalarXMapObservable<T, U>(value, mapper)); }\n\n    ### Response:",
        "ground_truth": "Maps a scalar value into an Observable and emits its values.\n\n@param  the scalar value type\n@param  the output value type\n@param value the scalar value to map\n@param mapper the function that gets the scalar value and should return\nan ObservableSource that gets streamed\n@return the new Observable instance",
        "predict": " Add resource record.\n\n    Each resource record contains a RECORD and DATA property, defining a resource's name and it's target data.\n    Domains contain multiple types of resource records so it can take one of the following values: A, AAAA, CNAME,\n    MX, SPF, SRV, and PTR.\n\n    About reverse records (PTR), the RECORD value must to be the public Ip Address of device you would like to manage\n    reverse DNS.\n\n        slcli dns record-add 10.10.8.21 PTR myhost.com --ttl=900\n\n    Examples:\n\n        slcli dns record-add myhost.com A 192.168.1.10 --zone=foobar.com --ttl=900\n\n        slcli dns record-add myhost.com AAAA 2001:DB8::1 --zone=foobar.com\n\n        slcli dns record-add 192.168.1.2 MX 192.168.1.10 --zone=foobar.com --priority=11 --ttl=1800\n\n        slcli dns record-add myhost.com TXT \"txt-verification=rXOxyZounZs87oacJSKvbUSIQ\" --zone=2223334\n\n        slcli dns record-add myhost.com SPF \"v=spf1 include:_spf.google.com ~all\" --zone=2223334\n\n        slcli dns record-add myhost.com SRV 192.168.1.10 --zone=2223334 --service=foobar --port=80 --protocol=TCP.\n\n    "
    },
    {
        "ID": 51,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def confirm(self, token=None): \"\"\"Returns the status of the invoice STATUSES: pending, completed, cancelled \"\"\" _token = token if token else self._response.get(\"token\") return self._process('checkout-invoice/confirm/' + str(_token))\n\n    ### Response: Returns the status of the invoice\n\n        STATUSES: pending, completed, cancelled.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public <U> boolean accept(Subscriber<? super U> subscriber) { Object[] a = head; final int c = capacity; while (a != null) { for (int i = 0; i < c; i++) { Object o = a[i]; if (o == null) { break; } if (NotificationLite.acceptFull(o, subscriber)) { return true; } } a = (Object[])a[c]; } return false; }\n\n    ### Response:",
        "ground_truth": "Interprets the contents as NotificationLite objects and calls\nthe appropriate Subscriber method.\n\n@param  the target type\n@param subscriber the subscriber to emit the events to\n@return true if a terminal event has been reached",
        "predict": " Returns the status of the invoice\n\n        STATUSES: pending, completed, cancelled.\n\n    "
    },
    {
        "ID": 52,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static function get($key = null, $default = null) { if(null !== $key && isset(static :: $method['method'], static :: $method['data'])) { if(static :: isMethod(static :: $method['method'])) { $helper = new StringToArray(); $data = $helper -> execute($key, $default, static :: $method['data']); //Trim string if(true === isset(static :: $options[self :: TRIM_STRING])) { if(is_string($data) === 0) { $data = trim($data); } } //Convert empty string to NULL if(true === isset(static :: $options[self :: EMPTY_STRING_TO_NULL])) { if(is_string($data) && strlen($data) === 0) { $data = null; } } //Convert empty array to NULL if(true === isset(static :: $options[self :: EMPTY_ARRAY_TO_NULL])) { if(is_array($data) && count($data) === 0) { $data = null; } } $default = null === $data ? $default : $data; } static :: $method = []; } return $default; }\n\n    ### Response: Returns variable from source while converting an array from string\n@param mixed $key\n@param mixed $default\n@return mixed.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public <U> boolean accept(Observer<? super U> observer) { Object[] a = head; final int c = capacity; while (a != null) { for (int i = 0; i < c; i++) { Object o = a[i]; if (o == null) { break; } if (NotificationLite.acceptFull(o, observer)) { return true; } } a = (Object[])a[c]; } return false; }\n\n    ### Response:",
        "ground_truth": "Interprets the contents as NotificationLite objects and calls\nthe appropriate Observer method.\n\n@param  the target type\n@param observer the observer to emit the events to\n@return true if a terminal event has been reached",
        "predict": " Returns variable from source while converting an array from string\n@param mixed $key\n@param mixed $default\n@return mixed.\n\n    "
    },
    {
        "ID": 53,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def get_assessment_taken(self, assessment_taken_id): \"\"\"Gets the ``AssessmentTaken`` specified by its ``Id``. In plenary mode, the exact ``Id`` is found or a ``NotFound`` results. Otherwise, the returned ``AssessmentTaken`` may have a different ``Id`` than requested, such as the case where a duplicate ``Id`` was assigned to an ``AssessmentTaken`` and retained for compatibility. arg: assessment_taken_id (osid.id.Id): ``Id`` of the ``AssessmentTaken`` return: (osid.assessment.AssessmentTaken) - the assessment taken raise: NotFound - ``assessment_taken_id`` not found raise: NullArgument - ``assessment_taken_id`` is ``null`` raise: OperationFailed - unable to complete request raise: PermissionDenied - authorization failure occurred *compliance: mandatory -- This method is must be implemented.* \"\"\" # Implemented from template for # osid.resource.ResourceLookupSession.get_resource # NOTE: This implementation currently ignores plenary view collection = JSONClientValidated('assessment', collection='AssessmentTaken', runtime=self._runtime) result = collection.find_one( dict({'_id': ObjectId(self._get_id(assessment_taken_id, 'assessment').get_identifier())}, **self._view_filter())) return objects.AssessmentTaken(osid_object_map=result, runtime=self._runtime, proxy=self._proxy)\n\n    ### Response: Gets the ``AssessmentTaken`` specified by its ``Id``.\n\n        In plenary mode, the exact ``Id`` is found or a ``NotFound``\n        results. Otherwise, the returned ``AssessmentTaken`` may have a\n        different ``Id`` than requested, such as the case where a\n        duplicate ``Id`` was assigned to an ``AssessmentTaken`` and\n        retained for compatibility.\n\n        arg:    assessment_taken_id (osid.id.Id): ``Id`` of the\n                ``AssessmentTaken``\n        return: (osid.assessment.AssessmentTaken) - the assessment taken\n        raise:  NotFound - ``assessment_taken_id`` not found\n        raise:  NullArgument - ``assessment_taken_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred\n        *compliance: mandatory -- This method is must be implemented.*.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void start() { if (SubscriptionHelper.setOnce(upstream, EmptySubscription.INSTANCE)) { queue = new SpscArrayQueue<T>(bufferSize); } }\n\n    ### Response:",
        "ground_truth": "Initializes this Processor by setting an upstream Subscription that\nignores request amounts, uses a fixed buffer\nand allows using the onXXX and offer methods\nafterwards.",
        "predict": " Gets the ``AssessmentTaken`` specified by its ``Id``.\n\n        In plenary mode, the exact ``Id`` is found or a ``NotFound``\n        results. Otherwise, the returned ``AssessmentTaken`` may have a\n        different ``Id`` than requested, such as the case where a\n        duplicate ``Id`` was assigned to an ``AssessmentTaken`` and\n        retained for compatibility.\n\n        arg:    assessment_taken_id (osid.id.Id): ``Id`` of the\n                ``AssessmentTaken``\n        return: (osid.assessment.AssessmentTaken) - the assessment taken\n        raise:  NotFound - ``assessment_taken_id`` not found\n        raise:  NullArgument - ``assessment_taken_id`` is ``null``\n        raise:  OperationFailed - unable to complete request\n        raise:  PermissionDenied - authorization failure occurred\n        *compliance: mandatory -- This method is must be implemented.*.\n\n    "
    },
    {
        "ID": 54,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _match_by_norm_func(l1, l2, norm_fn, dist_fn, thresh): \"\"\"Matches elements in l1 and l2 using normalization functions. Splits the elements in each list into buckets given by the normalization function. If the same normalization value points to a bucket from the first list and a bucket from the second list, both with a single element we consider the elements in the list as matching if the distance between them is less (or equal) than the threshold. e.g. l1 = ['X1', 'Y1', 'Y2', 'Z5'], l2 = ['X1', 'Y3', 'Z1'] norm_fn = lambda x: x[0] dist_fn = lambda e1, e2: 0 if e1 == e2 else 1 thresh = 0 The buckets will then be: l1_bucket = {'X': ['X1'], 'Y': ['Y1', 'Y2'], 'Z': ['Z5']} l2_bucket = {'X': ['X1'], 'Y': ['Y3'], 'Z': ['Z1']} For each normalized value: 'X' -> consider 'X1' equal with 'X1' since the distance is equal with the thershold 'Y' -> skip the lists since we have multiple possible matches 'Z' -> consider 'Z1' and 'Z5' as different since the distance is greater than the threshold. Return: [('X1', 'X2')] \"\"\" common = [] l1_only_idx = set(range(len(l1))) l2_only_idx = set(range(len(l2))) buckets_l1 = _group_by_fn(enumerate(l1), lambda x: norm_fn(x[1])) buckets_l2 = _group_by_fn(enumerate(l2), lambda x: norm_fn(x[1])) for normed, l1_elements in buckets_l1.items(): l2_elements = buckets_l2.get(normed, []) if not l1_elements or not l2_elements: continue _, (_, e1_first) = l1_elements[0] _, (_, e2_first) = l2_elements[0] match_is_ambiguous = not ( len(l1_elements) == len(l2_elements) and ( all(e2 == e2_first for (_, (_, e2)) in l2_elements) or all(e1 == e1_first for (_, (_, e1)) in l1_elements) ) ) if match_is_ambiguous: continue for (e1_idx, e1), (e2_idx, e2) in zip(l1_elements, l2_elements): if dist_fn(e1, e2) > thresh: continue l1_only_idx.remove(e1_idx) l2_only_idx.remove(e2_idx) common.append((e1, e2)) l1_only = [l1[i] for i in l1_only_idx] l2_only = [l2[i] for i in l2_only_idx] return common, l1_only, l2_only\n\n    ### Response: Matches elements in l1 and l2 using normalization functions.\n\n    Splits the elements in each list into buckets given by the normalization\n    function. If the same normalization value points to a bucket from the\n    first list and a bucket from the second list, both with a single element\n    we consider the elements in the list as matching if the distance between\n    them is less (or equal) than the threshold.\n\n    e.g. l1 = ['X1', 'Y1', 'Y2', 'Z5'], l2 = ['X1', 'Y3', 'Z1']\n         norm_fn = lambda x: x[0]\n         dist_fn = lambda e1, e2: 0 if e1 == e2 else 1\n         thresh = 0\n\n    The buckets will then be:\n        l1_bucket = {'X': ['X1'], 'Y': ['Y1', 'Y2'], 'Z': ['Z5']}\n        l2_bucket = {'X': ['X1'], 'Y': ['Y3'], 'Z': ['Z1']}\n\n    For each normalized value:\n        'X' -> consider 'X1' equal with 'X1' since the distance is equal with\n               the thershold\n        'Y' -> skip the lists since we have multiple possible matches\n        'Z' -> consider 'Z1' and 'Z5' as different since the distance is\n               greater than the threshold.\n    Return:\n        [('X1', 'X2')].\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void startUnbounded() { if (SubscriptionHelper.setOnce(upstream, EmptySubscription.INSTANCE)) { queue = new SpscLinkedArrayQueue<T>(bufferSize); } }\n\n    ### Response:",
        "ground_truth": "Initializes this Processor by setting an upstream Subscription that\nignores request amounts, uses an unbounded buffer\nand allows using the onXXX and offer methods\nafterwards.",
        "predict": " Matches elements in l1 and l2 using normalization functions.\n\n    Splits the elements in each list into buckets given by the normalization\n    function. If the same normalization value points to a bucket from the\n    first list and a bucket from the second list, both with a single element\n    we consider the elements in the list as matching if the distance between\n    them is less (or equal) than the threshold.\n\n    e.g. l1 = ['X1', 'Y1', 'Y2', 'Z5'], l2 = ['X1', 'Y3', 'Z1']\n         norm_fn = lambda x: x[0]\n         dist_fn = lambda e1, e2: 0 if e1 == e2 else 1\n         thresh = 0\n\n    The buckets will then be:\n        l1_bucket = {'X': ['X1'], 'Y': ['Y1', 'Y2'], 'Z': ['Z5']}\n        l2_bucket = {'X': ['X1'], 'Y': ['Y3'], 'Z': ['Z1']}\n\n    For each normalized value:\n        'X' -> consider 'X1' equal with 'X1' since the distance is equal with\n               the thershold\n        'Y' -> skip the lists since we have multiple possible matches\n        'Z' -> consider 'Z1' and 'Z5' as different since the distance is\n               greater than the threshold.\n    Return:\n        [('X1', 'X2')].\n\n    "
    },
    {
        "ID": 55,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function getWidget($widget_id, $replicator_id) { $widget = null; if (isset($this->widgets[$replicator_id][$widget_id])) { $widget = $this->widgets[$replicator_id][$widget_id]; } return $widget; }\n\n    ### Response: Retrives a reference to a replicated widget\n\n@param string $widget_id the unique id of the original widget\n@param string $replicator_id the replicator id of the replicated widget\n\n@return SwatWidget a reference to the replicated widget, or null if the\nwidget is not found..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public boolean offer(T t) { if (once.get()) { return false; } ObjectHelper.requireNonNull(t, \"offer called with null. Null values are generally not allowed in 2.x operators and sources.\"); if (fusionMode == QueueSubscription.NONE) { if (queue.offer(t)) { drain(); return true; } } return false; }\n\n    ### Response:",
        "ground_truth": "Tries to offer an item into the internal queue and returns false\nif the queue is full.\n@param t the item to offer, not null\n@return true if successful, false if the queue is full",
        "predict": " Retrives a reference to a replicated widget\n\n@param string $widget_id the unique id of the original widget\n@param string $replicator_id the replicator id of the replicated widget\n\n@return SwatWidget a reference to the replicated widget, or null if the\nwidget is not found..\n\n    "
    },
    {
        "ID": 56,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func NewValidator() Validator { return &validator{ conflicts: make(map[string]set.Strings), vocab: make(map[string][]interface{}), } }\n\n    ### Response: // NewValidator returns a new constraints Validator instance..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Nullable public Disposable get() { Disposable d = resource.get(); if (d == DisposableHelper.DISPOSED) { return Disposables.disposed(); } return d; }\n\n    ### Response:",
        "ground_truth": "Returns the currently contained Disposable or null if this container is empty.\n@return the current Disposable, may be null",
        "predict": " // NewValidator returns a new constraints Validator instance..\n\n    "
    },
    {
        "ID": 57,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def endless_permutations(N, random_state=None): \"\"\" Generate an endless sequence of random integers from permutations of the set [0, ..., N). If we call this N times, we will sweep through the entire set without replacement, on the (N+1)th call a new permutation will be created, etc. Parameters ---------- N: int the length of the set random_state: int or RandomState, optional random seed Yields ------ int: a random int from the set [0, ..., N) \"\"\" generator = check_random_state(random_state) while True: batch_inds = generator.permutation(N) for b in batch_inds: yield b\n\n    ### Response: Generate an endless sequence of random integers from permutations of the\n    set [0, ..., N).\n\n    If we call this N times, we will sweep through the entire set without\n    replacement, on the (N+1)th call a new permutation will be created, etc.\n\n    Parameters\n    ----------\n    N: int\n        the length of the set\n    random_state: int or RandomState, optional\n        random seed\n\n    Yields\n    ------\n    int:\n        a random int from the set [0, ..., N).\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public final void complete(T value) { int state = get(); if ((state & (FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED)) != 0) { return; } Observer<? super T> a = downstream; if (state == FUSED_EMPTY) { this.value = value; lazySet(FUSED_READY); a.onNext(null); } else { lazySet(TERMINATED); a.onNext(value); } if (get() != DISPOSED) { a.onComplete(); } }\n\n    ### Response:",
        "ground_truth": "Complete the target with a single value or indicate there is a value available in\nfusion mode.\n@param value the value to signal, not null (not verified)",
        "predict": " Generate an endless sequence of random integers from permutations of the\n    set [0, ..., N).\n\n    If we call this N times, we will sweep through the entire set without\n    replacement, on the (N+1)th call a new permutation will be created, etc.\n\n    Parameters\n    ----------\n    N: int\n        the length of the set\n    random_state: int or RandomState, optional\n        random seed\n\n    Yields\n    ------\n    int:\n        a random int from the set [0, ..., N).\n\n    "
    },
    {
        "ID": 58,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function getInterfaceSlug(): string { $path = $this->getBasePath(); $subDir = App::$Properties->get('basePath'); if ($subDir !== '/') { $offset = (int)Str::length($subDir); $path = Str::sub($path, --$offset); } return $path; }\n\n    ### Response: Get base path from current environment without basePath of subdirectories\n@return string.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public final void error(Throwable t) { int state = get(); if ((state & (FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED)) != 0) { RxJavaPlugins.onError(t); return; } lazySet(TERMINATED); downstream.onError(t); }\n\n    ### Response:",
        "ground_truth": "Complete the target with an error signal.\n@param t the Throwable to signal, not null (not verified)",
        "predict": " Get base path from current environment without basePath of subdirectories\n@return string.\n\n    "
    },
    {
        "ID": 59,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (c *managedConnImpl) RawConn() net.Conn { h, _ := c.handle.Handle() return h.(net.Conn) }\n\n    ### Response: // See ManagedConn for documentation..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public final void complete() { int state = get(); if ((state & (FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED)) != 0) { return; } lazySet(TERMINATED); downstream.onComplete(); }\n\n    ### Response:",
        "ground_truth": "Complete the target without any value.",
        "predict": " // See ManagedConn for documentation..\n\n    "
    },
    {
        "ID": 60,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function Deb () { this.data = tar.pack() this.control = tar.pack() this.pkgSize = 0 this.controlFile = {} this.filesMd5 = [] this.dirs = {} }\n\n    ### Response: Class used for creating .deb packages.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @CheckReturnValue @BackpressureSupport(BackpressureKind.FULL) @SchedulerSupport(SchedulerSupport.NONE) public final <R> Flowable<R> concatMapDelayError(Function<? super T, ? extends Publisher<? extends R>> mapper) { return concatMapDelayError(mapper, 2, true); }\n\n    ### Response:",
        "ground_truth": "Maps each of the items into a Publisher, subscribes to them one after the other,\none at a time and emits their values in order\nwhile delaying any error from either this or any of the inner Publishers\ntill all of them terminate.\n\n\nBackpressure:\nThe operator honors backpressure from downstream. Both this and the inner {@code Publisher}s are\nexpected to honor backpressure as well. If the source {@code Publisher} violates the rule, the operator will\nsignal a {@code MissingBackpressureException}. If any of the inner {@code Publisher}s doesn't honor\nbackpressure, that may throw an {@code IllegalStateException} when that\n{@code Publisher} completes.\nScheduler:\n{@code concatMapDelayError} does not operate by default on a particular {@link Scheduler}.\n\n\n@param  the result value type\n@param mapper the function that maps the items of this Publisher into the inner Publishers.\n@return the new Publisher instance with the concatenation behavior",
        "predict": " Class used for creating .deb packages.\n\n    "
    },
    {
        "ID": 61,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def query_api(endpoint, log): \"\"\"Query the AppVeyor API. :raise HandledError: On non HTTP200 responses or invalid JSON response. :param str endpoint: API endpoint to query (e.g. '/projects/Robpol86/appveyor-artifacts'). :param logging.Logger log: Logger for this function. Populated by with_log() decorator. :return: Parsed JSON response. :rtype: dict \"\"\" url = API_PREFIX + endpoint headers = {'content-type': 'application/json'} response = None log.debug('Querying %s with headers %s.', url, headers) for i in range(QUERY_ATTEMPTS): try: try: response = requests.get(url, headers=headers, timeout=10) except (requests.exceptions.ConnectTimeout, requests.exceptions.ReadTimeout, requests.Timeout): log.error('Timed out waiting for reply from server.') raise HandledError except requests.ConnectionError: log.error('Unable to connect to server.') raise HandledError except HandledError: if i == QUERY_ATTEMPTS - 1: raise log.warning('Network error, retrying in 1 second...') time.sleep(1) else: break log.debug('Response status: %d', response.status_code) log.debug('Response headers: %s', str(response.headers)) log.debug('Response text: %s', response.text) if not response.ok: message = response.json().get('message') if message: log.error('HTTP %d: %s', response.status_code, message) else: log.error('HTTP %d: Unknown error: %s', response.status_code, response.text) raise HandledError try: return response.json() except ValueError: log.error('Failed to parse JSON: %s', response.text) raise HandledError\n\n    ### Response: Query the AppVeyor API.\n\n    :raise HandledError: On non HTTP200 responses or invalid JSON response.\n\n    :param str endpoint: API endpoint to query (e.g. '/projects/Robpol86/appveyor-artifacts').\n    :param logging.Logger log: Logger for this function. Populated by with_log() decorator.\n\n    :return: Parsed JSON response.\n    :rtype: dict.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @CheckReturnValue @BackpressureSupport(BackpressureKind.FULL) @SchedulerSupport(SchedulerSupport.NONE) public final <U> Flowable<U> concatMapIterable(Function<? super T, ? extends Iterable<? extends U>> mapper) { return concatMapIterable(mapper, 2); }\n\n    ### Response:",
        "ground_truth": "Returns a Flowable that concatenate each item emitted by the source Publisher with the values in an\nIterable corresponding to that item that is generated by a selector.\n\n\nBackpressure:\nThe operator honors backpressure from downstream. The source {@code Publisher}s is\nexpected to honor backpressure as well. If the source {@code Publisher} violates the rule, the operator will\nsignal a {@code MissingBackpressureException}.\nScheduler:\n{@code concatMapIterable} does not operate by default on a particular {@link Scheduler}.\n\n\n@param \nthe type of item emitted by the resulting Publisher\n@param mapper\na function that returns an Iterable sequence of values for when given an item emitted by the\nsource Publisher\n@return a Flowable that emits the results of concatenating the items emitted by the source Publisher with\nthe values in the Iterables corresponding to those items, as generated by {@code collectionSelector}\n@see ReactiveX operators documentation: FlatMap",
        "predict": " Query the AppVeyor API.\n\n    :raise HandledError: On non HTTP200 responses or invalid JSON response.\n\n    :param str endpoint: API endpoint to query (e.g. '/projects/Robpol86/appveyor-artifacts').\n    :param logging.Logger log: Logger for this function. Populated by with_log() decorator.\n\n    :return: Parsed JSON response.\n    :rtype: dict.\n\n    "
    },
    {
        "ID": 62,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected List<RenderedLink> createLinkToBundle( ResourceBundlesHandler handler, String path, String resourceType, Map<String, String> variantMap) throws IOException { ArrayList<RenderedLink> linksToBundle = new ArrayList<RenderedLink>(); BasicBundleRenderer bundleRenderer = new BasicBundleRenderer(handler, resourceType); StringWriter sw = new StringWriter(); // The gzip compression will be made by the CDN server // So we force it to false. boolean useGzip = false; // The generation of bundle is the same in SSL and non SSL mode boolean isSslRequest = false; // First deals with the production mode handler.getConfig().setDebugModeOn(false); handler.getConfig().setGzipResourcesModeOn(useGzip); BundleRendererContext ctx = new BundleRendererContext(\"\", variantMap, useGzip, isSslRequest); bundleRenderer.renderBundleLinks(path, ctx, sw); // Then take in account the debug mode handler.getConfig().setDebugModeOn(true); ctx = new BundleRendererContext(\"\", variantMap, useGzip, isSslRequest); bundleRenderer.renderBundleLinks(path, ctx, sw); List<RenderedLink> renderedLinks = bundleRenderer.getRenderedLinks(); // Remove context override path if it's defined. String contextPathOverride = handler.getConfig() .getContextPathOverride(); for (Iterator<RenderedLink> iterator = renderedLinks.iterator(); iterator .hasNext();) { RenderedLink renderedLink = iterator.next(); String renderedLinkPath = renderedLink.getLink(); // Remove the context path override if (StringUtils.isNotEmpty(contextPathOverride) && renderedLinkPath.startsWith(contextPathOverride)) { renderedLinkPath = renderedLinkPath .substring(contextPathOverride.length()); } renderedLink.setLink(PathNormalizer.asPath(renderedLinkPath)); linksToBundle.add(renderedLink); } return linksToBundle; }\n\n    ### Response: Returns the link to the bundle\n\n@param handler\nthe resource bundles handler\n@param path\nthe path\n@param variantKey\nthe local variant key\n@return the link to the bundle\n@throws IOException\nif an IO exception occurs.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @CheckReturnValue @NonNull @BackpressureSupport(BackpressureKind.FULL) @SchedulerSupport(SchedulerSupport.NONE) public final Flowable<T> sorted(Comparator<? super T> sortFunction) { ObjectHelper.requireNonNull(sortFunction, \"sortFunction\"); return toList().toFlowable().map(Functions.listSorter(sortFunction)).flatMapIterable(Functions.<List<T>>identity()); }\n\n    ### Response:",
        "ground_truth": "Returns a Flowable that emits the events emitted by source Publisher, in a\nsorted order based on a specified comparison function.\n\nNote that calling {@code sorted} with long, non-terminating or infinite sources\nmight cause {@link OutOfMemoryError}\n\n\nBackpressure:\nThe operator honors backpressure from downstream and consumes the source {@code Publisher} in an\nunbounded manner (i.e., without applying backpressure to it).\nScheduler:\n{@code sorted} does not operate by default on a particular {@link Scheduler}.\n\n\n@param sortFunction\na function that compares two items emitted by the source Publisher and returns an Integer\nthat indicates their sort order\n@return a Flowable that emits the items emitted by the source Publisher in sorted order",
        "predict": " Returns the link to the bundle\n\n@param handler\nthe resource bundles handler\n@param path\nthe path\n@param variantKey\nthe local variant key\n@return the link to the bundle\n@throws IOException\nif an IO exception occurs.\n\n    "
    },
    {
        "ID": 63,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function interleaveParagraphs( $updateNode, $likeNode ) { return $this->sql() ->menu_interleave_paragraph( (int) $updateNode, (int) $likeNode ); }\n\n    ### Response: Interleave paragraph-nodes\n\nUpdate $updateNode's descendant menu-paragraphs\nto be more like in $likeNode's.\n\n@param int $updateNode\n@param int $likeNode\n@return bool.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public PerfAsyncConsumer await(int count) { if (count <= 1000) { while (getCount() != 0) { } } else { try { await(); } catch (InterruptedException ex) { throw new RuntimeException(ex); } } return this; }\n\n    ### Response:",
        "ground_truth": "Wait for the terminal signal.\n@param count if less than 1001, a spin-wait is used\n@return this",
        "predict": " Interleave paragraph-nodes\n\nUpdate $updateNode's descendant menu-paragraphs\nto be more like in $likeNode's.\n\n@param int $updateNode\n@param int $likeNode\n@return bool.\n\n    "
    },
    {
        "ID": 64,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def print_cyjs_context(self): \"\"\"Return a list of node names and their respective context. Returns ------- cyjs_str_context : str A json string of the context dictionary. e.g. - {'CCLE' : {'bin_expression' : {'cell_line1' : {'gene1':'val1'} }, 'bin_expression' : {'cell_line' : {'gene1':'val1'} } }} \"\"\" context = self._context context_str = json.dumps(context, indent=1, sort_keys=True) return context_str\n\n    ### Response: Return a list of node names and their respective context.\n\n        Returns\n        -------\n        cyjs_str_context : str\n            A json string of the context dictionary. e.g. -\n            {'CCLE' : {'bin_expression' : {'cell_line1' : {'gene1':'val1'} },\n            'bin_expression' : {'cell_line' : {'gene1':'val1'} }\n            }}.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected final void request(long n) { Subscription s = this.upstream; if (s != null) { s.request(n); } }\n\n    ### Response:",
        "ground_truth": "Requests from the upstream Subscription.\n@param n the request amount, positive",
        "predict": " Return a list of node names and their respective context.\n\n        Returns\n        -------\n        cyjs_str_context : str\n            A json string of the context dictionary. e.g. -\n            {'CCLE' : {'bin_expression' : {'cell_line1' : {'gene1':'val1'} },\n            'bin_expression' : {'cell_line' : {'gene1':'val1'} }\n            }}.\n\n    "
    },
    {
        "ID": 65,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function replace(array $set) { if (empty($set)) { return null; } if ($this->map) { $set = $this->map->set($set); } if ($this->fake) { return $this->fake->replace($set); } $pattern = 'REPLACE INTO ?t (?cols) VALUES (?ln)'; $data = array($this->name, array_keys($set), array_values($set)); return $this->db->query($pattern, $data)->id(); }\n\n    ### Response: Replaces or inserts a row\n\n@param array $set\n@return int.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    boolean add(PublishDisposable<T> ps) { for (;;) { PublishDisposable<T>[] a = subscribers.get(); if (a == TERMINATED) { return false; } int n = a.length; @SuppressWarnings(\"unchecked\") PublishDisposable<T>[] b = new PublishDisposable[n + 1]; System.arraycopy(a, 0, b, 0, n); b[n] = ps; if (subscribers.compareAndSet(a, b)) { return true; } } }\n\n    ### Response:",
        "ground_truth": "Tries to add the given subscriber to the subscribers array atomically\nor returns false if the subject has terminated.\n@param ps the subscriber to add\n@return true if successful, false if the subject has terminated",
        "predict": " Replaces or inserts a row\n\n@param array $set\n@return int.\n\n    "
    },
    {
        "ID": 66,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def filter_words(tokenized_obj, valid_pos, stopwords, check_field_name='stem'): # type: (TokenizedSenetence, List[Tuple[text_type,...]], List[text_type],text_type) -> FilteredObject \"\"\"This function filter token that user don't want to take. Condition is stopword and pos. * Input - valid_pos - List of Tuple which has POS element to keep. - Keep in your mind, each tokenizer has different POS structure. >>> [('\u540d\u8a5e', '\u56fa\u6709\u540d\u8a5e'), ('\u52d5\u8a5e', )] - stopwords - List of str, which you'd like to remove >>> ['\u6b8b\u5ff5', '\u4eca\u65e5'] \"\"\" assert isinstance(tokenized_obj, TokenizedSenetence) assert isinstance(valid_pos, list) assert isinstance(stopwords, list) filtered_tokens = [] for token_obj in tokenized_obj.tokenized_objects: assert isinstance(token_obj, TokenizedResult) if check_field_name=='stem': res_stopwords = __is_sotpwords(token_obj.word_stem, stopwords) else: res_stopwords = __is_sotpwords(token_obj.word_surface, stopwords) res_pos_condition = __is_valid_pos(token_obj.tuple_pos, valid_pos) # case1: only pos filtering is ON if valid_pos != [] and stopwords == []: if res_pos_condition: filtered_tokens.append(token_obj) # case2: only stopwords filtering is ON if valid_pos == [] and stopwords != []: if res_stopwords is False: filtered_tokens.append(token_obj) # case3: both condition is ON if valid_pos != [] and stopwords != []: if res_stopwords is False and res_pos_condition: filtered_tokens.append(token_obj) filtered_object = FilteredObject( sentence=tokenized_obj.sentence, tokenized_objects=filtered_tokens, pos_condition=valid_pos, stopwords=stopwords ) return filtered_object\n\n    ### Response: This function filter token that user don't want to take.\n    Condition is stopword and pos.\n\n    * Input\n    - valid_pos\n        - List of Tuple which has POS element to keep.\n        - Keep in your mind, each tokenizer has different POS structure.\n         >>> [('\u540d\u8a5e', '\u56fa\u6709\u540d\u8a5e'), ('\u52d5\u8a5e', )]\n    - stopwords\n        - List of str, which you'd like to remove\n        >>> ['\u6b8b\u5ff5', '\u4eca\u65e5'].\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SuppressWarnings(\"unchecked\") void remove(PublishDisposable<T> ps) { for (;;) { PublishDisposable<T>[] a = subscribers.get(); if (a == TERMINATED || a == EMPTY) { return; } int n = a.length; int j = -1; for (int i = 0; i < n; i++) { if (a[i] == ps) { j = i; break; } } if (j < 0) { return; } PublishDisposable<T>[] b; if (n == 1) { b = EMPTY; } else { b = new PublishDisposable[n - 1]; System.arraycopy(a, 0, b, 0, j); System.arraycopy(a, j + 1, b, j, n - j - 1); } if (subscribers.compareAndSet(a, b)) { return; } } }\n\n    ### Response:",
        "ground_truth": "Atomically removes the given subscriber if it is subscribed to the subject.\n@param ps the subject to remove",
        "predict": " This function filter token that user don't want to take.\n    Condition is stopword and pos.\n\n    * Input\n    - valid_pos\n        - List of Tuple which has POS element to keep.\n        - Keep in your mind, each tokenizer has different POS structure.\n         >>> [('\u540d\u8a5e', '\u56fa\u6709\u540d\u8a5e'), ('\u52d5\u8a5e', )]\n    - stopwords\n        - List of str, which you'd like to remove\n        >>> ['\u6b8b\u5ff5', '\u4eca\u65e5'].\n\n    "
    },
    {
        "ID": 67,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function dataFormatoOrigemDestino($data, $formatoOrigem, $formatoDestino) { $data = $this->converterParaDateTime($data, $formatoOrigem); if (!$data) { return false; } return ($data->format($formatoDestino)); }\n\n    ### Response: Converter uma data de um formato origem para um formato destino.\n\n@param \\DateTime|string $data\n@param $formatoOrigem\n@param $formatoDestino\n@return false|string.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static <T> ConnectableFlowable<T> observeOn(final ConnectableFlowable<T> cf, final Scheduler scheduler) { final Flowable<T> flowable = cf.observeOn(scheduler); return RxJavaPlugins.onAssembly(new ConnectableFlowableReplay<T>(cf, flowable)); }\n\n    ### Response:",
        "ground_truth": "Child Subscribers will observe the events of the ConnectableObservable on the\nspecified scheduler.\n@param  the value type\n@param cf the ConnectableFlowable to wrap\n@param scheduler the target scheduler\n@return the new ConnectableObservable instance",
        "predict": " Converter uma data de um formato origem para um formato destino.\n\n@param \\DateTime|string $data\n@param $formatoOrigem\n@param $formatoDestino\n@return false|string.\n\n    "
    },
    {
        "ID": 68,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func GenerateFile(data interface{}, tmplFile, tmplName, filename string, override bool) error { if !override && isFileExist(filename) { log.Infof(\"file %v already exist and override=false, no need to regenerate\", filename) return nil } if err := checkCreateDir(filepath.Dir(filename)); err != nil { } // pass Go function to template funcMap := template.FuncMap{ \"ToLower\": strings.ToLower, } // all template files path is relative to current directory (./) // while go-bindata files exist in templates directory tmplFile = strings.Replace(tmplFile, \"./\", \"\", -1) byteData, err := templates.Asset(tmplFile) if err != nil { return err } t, err := template.New(tmplName).Funcs(funcMap).Parse(string(byteData)) if err != nil { return err } f, err := os.Create(filename) if err != nil { return err } defer f.Close() log.Infof(\"generating file %v\", filename) if err := t.ExecuteTemplate(f, tmplName, data); err != nil { return err } switch { case strings.HasSuffix(filename, \".go\"): return runGoFmt(filename) case strings.HasSuffix(filename, \".py\"): return runAutoPep8(filename) } return nil }\n\n    ### Response: // GenerateFile generates file from a template.\n// if file already exist and override==false, file won't be regenerated\n// funcMap = this parameter is used for passing go function to the template.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    static <ResponseT, ReturnT> HttpServiceMethod<ResponseT, ReturnT> parseAnnotations( Retrofit retrofit, Method method, RequestFactory requestFactory) { boolean isKotlinSuspendFunction = requestFactory.isKotlinSuspendFunction; boolean continuationWantsResponse = false; boolean continuationBodyNullable = false; Annotation[] annotations = method.getAnnotations(); Type adapterType; if (isKotlinSuspendFunction) { Type[] parameterTypes = method.getGenericParameterTypes(); Type responseType = Utils.getParameterLowerBound(0, (ParameterizedType) parameterTypes[parameterTypes.length - 1]); if (getRawType(responseType) == Response.class && responseType instanceof ParameterizedType) { // Unwrap the actual body type from Response<T>. responseType = Utils.getParameterUpperBound(0, (ParameterizedType) responseType); continuationWantsResponse = true; } else { // TODO figure out if type is nullable or not // Metadata metadata = method.getDeclaringClass().getAnnotation(Metadata.class) // Find the entry for method // Determine if return type is nullable or not } adapterType = new Utils.ParameterizedTypeImpl(null, Call.class, responseType); annotations = SkipCallbackExecutorImpl.ensurePresent(annotations); } else { adapterType = method.getGenericReturnType(); } CallAdapter<ResponseT, ReturnT> callAdapter = createCallAdapter(retrofit, method, adapterType, annotations); Type responseType = callAdapter.responseType(); if (responseType == okhttp3.Response.class) { throw methodError(method, \"'\" + getRawType(responseType).getName() + \"' is not a valid response body type. Did you mean ResponseBody?\"); } if (responseType == Response.class) { throw methodError(method, \"Response must include generic type (e.g., Response<String>)\"); } // TODO support Unit for Kotlin? if (requestFactory.httpMethod.equals(\"HEAD\") && !Void.class.equals(responseType)) { throw methodError(method, \"HEAD method must use Void as response type.\"); } Converter<ResponseBody, ResponseT> responseConverter = createResponseConverter(retrofit, method, responseType); okhttp3.Call.Factory callFactory = retrofit.callFactory; if (!isKotlinSuspendFunction) { return new CallAdapted<>(requestFactory, callFactory, responseConverter, callAdapter); } else if (continuationWantsResponse) { //noinspection unchecked Kotlin compiler guarantees ReturnT to be Object. return (HttpServiceMethod<ResponseT, ReturnT>) new SuspendForResponse<>(requestFactory, callFactory, responseConverter, (CallAdapter<ResponseT, Call<ResponseT>>) callAdapter); } else { //noinspection unchecked Kotlin compiler guarantees ReturnT to be Object. return (HttpServiceMethod<ResponseT, ReturnT>) new SuspendForBody<>(requestFactory, callFactory, responseConverter, (CallAdapter<ResponseT, Call<ResponseT>>) callAdapter, continuationBodyNullable); } }\n\n    ### Response:",
        "ground_truth": "Inspects the annotations on an interface method to construct a reusable service method that\nspeaks HTTP. This requires potentially-expensive reflection so it is best to build each service\nmethod only once and reuse it.",
        "predict": " // GenerateFile generates file from a template.\n// if file already exist and override==false, file won't be regenerated\n// funcMap = this parameter is used for passing go function to the template.\n\n    "
    },
    {
        "ID": 69,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def gaussian_smooth_eval(*vals, sigma_vec) npix = 7 raise \"npix must be odd\" if npix%2==0 case vals.size when 2 # delt0 = 3.0*0.999999*sigma_vec[0] / (npix-1) # delt1 = 3.0*0.999999*sigma_vec[1] / (npix-1) # sig3 = 3.0*sigma vals0 = GSL::Vector.linspace(vals[0] - 3.0* sigma_vec[0], vals[0] + 3.0* sigma_vec[0], npix) vals1 = GSL::Vector.linspace(vals[1] - 3.0* sigma_vec[1], vals[1] + 3.0* sigma_vec[1], npix) mat = GSL::Matrix.alloc(vals0.size, vals1.size) for i in 0...vals0.size for j in 0...vals1.size mat[i,j] = eval(vals0[i], vals1[j]) end end mat.gaussian_smooth(*sigma_vec.to_a) cent = (npix - 1) / 2 return mat[cent, cent] else raise 'Not supported for this number of dimensions yet' end end\n\n    ### Response: Evaluate the function,.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void setDelay(long amount, TimeUnit unit) { if (amount < 0) { throw new IllegalArgumentException(\"Amount must be positive value.\"); } this.delayMs = unit.toMillis(amount); }\n\n    ### Response:",
        "ground_truth": "Set the network round trip delay.",
        "predict": " Evaluate the function,.\n\n    "
    },
    {
        "ID": 70,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function getSites($force = false) { if ($force) { $this->nb_site_list->clear(); $this->nb_site_list->merge(CNabuSite::getAllSites($this)); } return $this->nb_site_list->getItems(); }\n\n    ### Response: Gets available Site instances in the list.\n@param bool $force If true, forces to merge complete list from the storage.\n@return array Returns an associative array where the index is the ID of each Site and the value is the instance..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Response<?> createErrorResponse() { Response<?> call; try { call = errorFactory.call(); } catch (Exception e) { throw new IllegalStateException(\"Error factory threw an exception.\", e); } if (call == null) { throw new IllegalStateException(\"Error factory returned null.\"); } if (call.isSuccessful()) { throw new IllegalStateException(\"Error factory returned successful response.\"); } return call; }\n\n    ### Response:",
        "ground_truth": "The HTTP error to be used when an error is triggered.",
        "predict": " Gets available Site instances in the list.\n@param bool $force If true, forces to merge complete list from the storage.\n@return array Returns an associative array where the index is the ID of each Site and the value is the instance..\n\n    "
    },
    {
        "ID": 71,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (s *AuthServer) GetOTPData(user string) (string, []byte, error) { // get otp key from backend otpSecret, err := s.GetTOTP(user) if err != nil { return \"\", nil, trace.Wrap(err) } // create otp url params := map[string][]byte{\"secret\": []byte(otpSecret)} otpURL := utils.GenerateOTPURL(\"totp\", user, params) // create the qr code otpQR, err := utils.GenerateQRCode(otpURL) if err != nil { return \"\", nil, trace.Wrap(err) } return otpURL, otpQR, nil }\n\n    ### Response: // GetOTPData returns the OTP Key, Key URL, and the QR code..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public long calculateDelay(TimeUnit unit) { float delta = variancePercent / 100f; // e.g., 20 / 100f == 0.2f float lowerBound = 1f - delta; // 0.2f --> 0.8f float upperBound = 1f + delta; // 0.2f --> 1.2f float bound = upperBound - lowerBound; // 1.2f - 0.8f == 0.4f float delayPercent = lowerBound + (random.nextFloat() * bound); // 0.8 + (rnd * 0.4) long callDelayMs = (long) (delayMs * delayPercent); return MILLISECONDS.convert(callDelayMs, unit); }\n\n    ### Response:",
        "ground_truth": "Get the delay that should be used for delaying a response in accordance with configured\nbehavior.",
        "predict": " // GetOTPData returns the OTP Key, Key URL, and the QR code..\n\n    "
    },
    {
        "ID": 72,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public BaseJsonBo setSubAttr(String attrName, String dPath, Object value) { if (value == null) { return removeSubAttr(attrName, dPath); } Lock lock = lockForWrite(); try { JsonNode attr = cacheJsonObjs.get(attrName); if (attr == null) { // initialize the first chunk String[] paths = DPathUtils.splitDpath(dPath); if (paths[0].matches(\"^\\\\[(.*?)\\\\]$\")) { setAttribute(attrName, \"[]\"); } else { setAttribute(attrName, \"{}\"); } attr = cacheJsonObjs.get(attrName); } JacksonUtils.setValue(attr, dPath, value, true); return (BaseJsonBo) setAttribute(attrName, SerializationUtils.toJsonString(attr), false); } finally { lock.unlock(); } }\n\n    ### Response: Set a sub-attribute.\n\n@param attrName\n@param value\n@return.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void createSampleData(String username, String password) { Assert.notNull(documentDao, \"DocumentDao required\"); Assert.hasText(username, \"Username required\"); Authentication auth = new UsernamePasswordAuthenticationToken(username, password); try { // Set the SecurityContextHolder ThreadLocal so any subclasses // automatically know which user is operating SecurityContextHolder.getContext().setAuthentication(auth); // Create the home directory first Directory home = new Directory(username, Directory.ROOT_DIRECTORY); documentDao.create(home); addPermission(documentDao, home, username, LEVEL_GRANT_ADMIN); addPermission(documentDao, home, \"ROLE_USER\", LEVEL_GRANT_READ); createFiles(documentDao, home); // Now create the confidential directory Directory confid = new Directory(\"confidential\", home); documentDao.create(confid); addPermission(documentDao, confid, \"ROLE_USER\", LEVEL_NEGATE_READ); createFiles(documentDao, confid); // Now create the shared directory Directory shared = new Directory(\"shared\", home); documentDao.create(shared); addPermission(documentDao, shared, \"ROLE_USER\", LEVEL_GRANT_READ); addPermission(documentDao, shared, \"ROLE_USER\", LEVEL_GRANT_WRITE); createFiles(documentDao, shared); } finally { // Clear the SecurityContextHolder ThreadLocal so future calls are // guaranteed to be clean SecurityContextHolder.clearContext(); } }\n\n    ### Response:",
        "ground_truth": "Creates a directory for the user, and a series of sub-directories. The root\ndirectory is the parent for the user directory. The sub-directories are\n\"confidential\" and \"shared\". The ROLE_USER will be given read and write access to\n\"shared\".",
        "predict": " Set a sub-attribute.\n\n@param attrName\n@param value\n@return.\n\n    "
    },
    {
        "ID": 73,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def html_body(input_string, source_path=None, destination_path=None, input_encoding='unicode', doctitle=1, initial_header_level=1): \"\"\" Given an input string, returns an HTML fragment as a string. The return value is the contents of the <body> element. Parameters (see `html_parts()` for the remainder): - `output_encoding`: The desired encoding of the output. If a Unicode string is desired, use the default value of \"unicode\" . \"\"\" parts = html_parts( input_string=input_string, source_path=source_path, destination_path=destination_path, input_encoding=input_encoding, doctitle=doctitle, initial_header_level=initial_header_level) fragment = parts['html_body'] return fragment\n\n    ### Response: Given an input string, returns an HTML fragment as a string.\n\n    The return value is the contents of the  element.\n\n    Parameters (see `html_parts()` for the remainder):\n\n    - `output_encoding`: The desired encoding of the output.  If a Unicode\n      string is desired, use the default value of \"unicode\" ..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static HttpMethod valueOf(String method) { try { return HttpMethod.valueOf(method); } catch (IllegalArgumentException e) { } return null; }\n\n    ### Response:",
        "ground_truth": "Provides a save way of obtaining the HttpMethod from a String. If the method is\ninvalid, returns null.\n\n@param method the HTTP method to use.\n\n@return the HttpMethod or null if method is invalid.",
        "predict": " Given an input string, returns an HTML fragment as a string.\n\n    The return value is the contents of the  element.\n\n    Parameters (see `html_parts()` for the remainder):\n\n    - `output_encoding`: The desired encoding of the output.  If a Unicode\n      string is desired, use the default value of \"unicode\" ..\n\n    "
    },
    {
        "ID": 74,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @DELETE @Path(\"/guid/{guid}\") @Consumes({Servlets.JSON_MEDIA_TYPE, MediaType.APPLICATION_JSON}) @Produces(Servlets.JSON_MEDIA_TYPE) public EntityMutationResponse deleteByGuid(@PathParam(\"guid\") final String guid) throws AtlasBaseException { AtlasPerfTracer perf = null; try { if (AtlasPerfTracer.isPerfTraceEnabled(PERF_LOG)) { perf = AtlasPerfTracer.getPerfTracer(PERF_LOG, \"EntityREST.deleteByGuid(\" + guid + \")\"); } return entitiesStore.deleteById(guid); } finally { AtlasPerfTracer.log(perf); } }\n\n    ### Response: Delete an entity identified by its GUID.\n@param  guid GUID for the entity\n@return EntityMutationResponse.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public DirContextOperations searchForUser(String username) { if (logger.isDebugEnabled()) { logger.debug(\"Searching for user '\" + username + \"', with user search \" + this); } SpringSecurityLdapTemplate template = new SpringSecurityLdapTemplate( contextSource); template.setSearchControls(searchControls); try { return template.searchForSingleEntry(searchBase, searchFilter, new String[] { username }); } catch (IncorrectResultSizeDataAccessException notFound) { if (notFound.getActualSize() == 0) { throw new UsernameNotFoundException(\"User \" + username + \" not found in directory.\"); } // Search should never return multiple results if properly configured, so just // rethrow throw notFound; } }\n\n    ### Response:",
        "ground_truth": "Return the LdapUserDetails containing the user's information\n\n@param username the username to search for.\n\n@return An LdapUserDetails object containing the details of the located user's\ndirectory entry\n\n@throws UsernameNotFoundException if no matching entry is found.",
        "predict": " Delete an entity identified by its GUID.\n@param  guid GUID for the entity\n@return EntityMutationResponse.\n\n    "
    },
    {
        "ID": 75,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def kde(data, grid, package, **kwargs): \"\"\" Kernel Density Estimation Parameters ---------- package : str Package whose kernel density estimation to use. Should be one of `['statsmodels-u', 'statsmodels-m', 'scipy', 'sklearn']`. data : numpy.array Data points used to compute a density estimator. It has `n x p` dimensions, representing n points and p variables. grid : numpy.array Data points at which the desity will be estimated. It has `m x p` dimensions, representing m points and p variables. Returns ------- out : numpy.array Density estimate. Has `m x 1` dimensions \"\"\" if package == 'statsmodels': package = 'statsmodels-m' func = KDE_FUNCS[package] return func(data, grid, **kwargs)\n\n    ### Response: Kernel Density Estimation\n\n    Parameters\n    ----------\n    package : str\n        Package whose kernel density estimation to use.\n        Should be one of\n        `['statsmodels-u', 'statsmodels-m', 'scipy', 'sklearn']`.\n    data : numpy.array\n        Data points used to compute a density estimator. It\n        has `n x p` dimensions, representing n points and p\n        variables.\n    grid : numpy.array\n        Data points at which the desity will be estimated. It\n        has `m x p` dimensions, representing m points and p\n        variables.\n\n    Returns\n    -------\n    out : numpy.array\n        Density estimate. Has `m x 1` dimensions.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String encode(CharSequence rawPassword) { String salt = PREFIX + this.saltGenerator.generateKey() + SUFFIX; return digest(salt, rawPassword); }\n\n    ### Response:",
        "ground_truth": "Encodes the rawPass using a MessageDigest. If a salt is specified it will be merged\nwith the password before encoding.\n\n@param rawPassword The plain text password\n@return Hex string of password digest (or base64 encoded string if\nencodeHashAsBase64 is enabled.",
        "predict": " Kernel Density Estimation\n\n    Parameters\n    ----------\n    package : str\n        Package whose kernel density estimation to use.\n        Should be one of\n        `['statsmodels-u', 'statsmodels-m', 'scipy', 'sklearn']`.\n    data : numpy.array\n        Data points used to compute a density estimator. It\n        has `n x p` dimensions, representing n points and p\n        variables.\n    grid : numpy.array\n        Data points at which the desity will be estimated. It\n        has `m x p` dimensions, representing m points and p\n        variables.\n\n    Returns\n    -------\n    out : numpy.array\n        Density estimate. Has `m x 1` dimensions.\n\n    "
    },
    {
        "ID": 76,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function _ConvertFieldType(&$fld, $ftype, $flen, $fscale, $fsubtype, $fprecision, $dialect3) { $fscale = abs($fscale); $fld->max_length = $flen; $fld->scale = null; switch($ftype){ case 7: case 8: if ($dialect3) { switch($fsubtype){ case 0: $fld->type = ($ftype == 7 ? 'smallint' : 'integer'); break; case 1: $fld->type = 'numeric'; $fld->max_length = $fprecision; $fld->scale = $fscale; break; case 2: $fld->type = 'decimal'; $fld->max_length = $fprecision; $fld->scale = $fscale; break; } // switch } else { if ($fscale !=0) { $fld->type = 'decimal'; $fld->scale = $fscale; $fld->max_length = ($ftype == 7 ? 4 : 9); } else { $fld->type = ($ftype == 7 ? 'smallint' : 'integer'); } } break; case 16: if ($dialect3) { switch($fsubtype){ case 0: $fld->type = 'decimal'; $fld->max_length = 18; $fld->scale = 0; break; case 1: $fld->type = 'numeric'; $fld->max_length = $fprecision; $fld->scale = $fscale; break; case 2: $fld->type = 'decimal'; $fld->max_length = $fprecision; $fld->scale = $fscale; break; } // switch } break; case 10: $fld->type = 'float'; break; case 14: $fld->type = 'char'; break; case 27: if ($fscale !=0) { $fld->type = 'decimal'; $fld->max_length = 15; $fld->scale = 5; } else { $fld->type = 'double'; } break; case 35: if ($dialect3) { $fld->type = 'timestamp'; } else { $fld->type = 'date'; } break; case 12: $fld->type = 'date'; break; case 13: $fld->type = 'time'; break; case 37: $fld->type = 'varchar'; break; case 40: $fld->type = 'cstring'; break; case 261: $fld->type = 'blob'; $fld->max_length = -1; break; } // switch }\n\n    ### Response: OPN STUFF start.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public boolean matches(CharSequence rawPassword, String encodedPassword) { String salt = extractSalt(encodedPassword); String rawPasswordEncoded = digest(salt, rawPassword); return PasswordEncoderUtils.equals(encodedPassword.toString(), rawPasswordEncoded); }\n\n    ### Response:",
        "ground_truth": "Takes a previously encoded password and compares it with a rawpassword after mixing\nin the salt and encoding that value\n\n@param rawPassword plain text password\n@param encodedPassword previously encoded password\n@return true or false",
        "predict": " OPN STUFF start.\n\n    "
    },
    {
        "ID": 77,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def add_view(self, *args, **kwargs): \"\"\" Add a new view Parameters ---------- uid: string The uid of new view width: int The width of this of view on a 12 unit grid height: int The height of the this view. The height is proportional to the height of all the views present. x: int The position of this view on the grid y: int The position of this view on the grid initialXDoamin: [int, int] The initial x range of the view initialYDomain: [int, int] The initial y range of the view \"\"\" new_view = View(*args, **kwargs) for view in self.views: if view.uid == new_view.uid: raise ValueError(\"View with this uid already exists\") self.views += [new_view] return new_view\n\n    ### Response: Add a new view\n\n        Parameters\n        ----------\n        uid: string\n            The uid of new view\n        width: int\n            The width of this of view on a 12 unit grid\n        height: int\n            The height of the this view. The height is proportional\n            to the height of all the views present.\n        x: int\n            The position of this view on the grid\n        y: int\n            The position of this view on the grid\n        initialXDoamin: [int, int]\n            The initial x range of the view\n        initialYDomain: [int, int]\n            The initial y range of the view.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static void performVersionChecks(String minSpringVersion) { if (minSpringVersion == null) { return; } // Check Spring Compatibility String springVersion = SpringVersion.getVersion(); String version = getVersion(); if (disableChecks(springVersion, version)) { return; } logger.info(\"You are running with Spring Security Core \" + version); if (new ComparableVersion(springVersion) .compareTo(new ComparableVersion(minSpringVersion)) < 0) { logger.warn(\"**** You are advised to use Spring \" + minSpringVersion + \" or later with this version. You are running: \" + springVersion); } }\n\n    ### Response:",
        "ground_truth": "Perform version checks with specific min Spring Version\n\n@param minSpringVersion",
        "predict": " Add a new view\n\n        Parameters\n        ----------\n        uid: string\n            The uid of new view\n        width: int\n            The width of this of view on a 12 unit grid\n        height: int\n            The height of the this view. The height is proportional\n            to the height of all the views present.\n        x: int\n            The position of this view on the grid\n        y: int\n            The position of this view on the grid\n        initialXDoamin: [int, int]\n            The initial x range of the view\n        initialYDomain: [int, int]\n            The initial y range of the view.\n\n    "
    },
    {
        "ID": 78,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def del_permission(self, role, name): \"\"\" revoke authorization of a group \"\"\" if not self.has_permission(role, name): return True targetGroup = AuthGroup.objects(role=role, creator=self.client).first() target = AuthPermission.objects(groups=targetGroup, name=name, creator=self.client).first() if not target: return True target.delete() return True\n\n    ### Response: revoke authorization of a group.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static boolean disableChecks(String springVersion, String springSecurityVersion) { if (springVersion == null || springVersion.equals(springSecurityVersion)) { return true; } return Boolean.getBoolean(DISABLE_CHECKS); }\n\n    ### Response:",
        "ground_truth": "Disable if springVersion and springSecurityVersion are the same to allow working\nwith Uber Jars.\n\n@param springVersion\n@param springSecurityVersion\n@return",
        "predict": " revoke authorization of a group.\n\n    "
    },
    {
        "ID": 79,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private String joinElements(int length) { StringBuilder sb = new StringBuilder(); for (int index = 0; index < length; index++) { sb.append(m_elements.get(index)); } return sb.toString(); }\n\n    ### Response: Joins the individual WBS elements to make the formated value.\n\n@param length number of elements to join\n@return formatted WBS value.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static String getSpringVersion() { Properties properties = new Properties(); try { properties.load(SpringSecurityCoreVersion.class.getClassLoader().getResourceAsStream(\"META-INF/spring-security.versions\")); } catch (IOException | NullPointerException e) { return null; } return properties.getProperty(\"org.springframework:spring-core\"); }\n\n    ### Response:",
        "ground_truth": "Loads the spring version or null if it cannot be found.\n@return",
        "predict": " Joins the individual WBS elements to make the formated value.\n\n@param length number of elements to join\n@return formatted WBS value.\n\n    "
    },
    {
        "ID": 80,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (c *thirdPartyResources) Get(name string) (result *extensions.ThirdPartyResource, err error) { result = &extensions.ThirdPartyResource{} err = c.r.Get().Namespace(c.ns).Resource(\"thirdpartyresources\").Name(name).Do().Into(result) return }\n\n    ### Response: // Get returns information about a particular daemon set..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public AttributeExchangeConfigurer attributeExchange(String identifierPattern) { AttributeExchangeConfigurer attributeExchangeConfigurer = new AttributeExchangeConfigurer( identifierPattern); this.attributeExchangeConfigurers.add(attributeExchangeConfigurer); return attributeExchangeConfigurer; }\n\n    ### Response:",
        "ground_truth": "",
        "predict": " // Get returns information about a particular daemon set..\n\n    "
    },
    {
        "ID": 81,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function getPortraitFile($size) { if (strpos($this->filename, '/')) { $filename = str_replace('/', '/avatars/'.$size, $this->filename); } else { $filename = $this->component.'/avatars/'.$size.$this->filename; } return $filename; }\n\n    ### Response: Return the avatar file for a size.\n\n@see LibBaseDomainBehaviorPortraitable\n\n@return string.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public OAuth2ClientConfigurer<HttpSecurity> oauth2Client() throws Exception { OAuth2ClientConfigurer<HttpSecurity> configurer = getOrApply(new OAuth2ClientConfigurer<>()); this.postProcess(configurer); return configurer; }\n\n    ### Response:",
        "ground_truth": "Configures OAuth 2.0 Client support.\n\n@since 5.1\n@see OAuth 2.0 Authorization Framework\n@return the {@link OAuth2ClientConfigurer} for further customizations\n@throws Exception",
        "predict": " Return the avatar file for a size.\n\n@see LibBaseDomainBehaviorPortraitable\n\n@return string.\n\n    "
    },
    {
        "ID": 82,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function getPayPalApiUrl() { $url = \\OxidEsales\\Eshop\\Core\\Registry::getConfig()->getConfigParam('sPayPalApiUrl'); if ($url) { $this->setPayPalApiUrl($url); } return $this->payPalApiUrl; }\n\n    ### Response: Api Url getter\n\n@return string.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public OAuth2ResourceServerConfigurer<HttpSecurity> oauth2ResourceServer() throws Exception { OAuth2ResourceServerConfigurer<HttpSecurity> configurer = getOrApply(new OAuth2ResourceServerConfigurer<>(getContext())); this.postProcess(configurer); return configurer; }\n\n    ### Response:",
        "ground_truth": "Configures OAuth 2.0 Resource Server support.\n\n@since 5.1\n@see OAuth 2.0 Authorization Framework\n@return the {@link OAuth2ResourceServerConfigurer} for further customizations\n@throws Exception",
        "predict": " Api Url getter\n\n@return string.\n\n    "
    },
    {
        "ID": 83,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static function label($for, $content = null, array $attributes = array()) { $attributes = array_merge(array('for' => $for), $attributes); return self::tag('label', $content, $attributes); }\n\n    ### Response: Create a label tag.\n\n@param  string $for        The name of the input the label is for\n@param  string $content    The content of the label, if any\n@param  array  $attributes An array of html attributes\n@return string The label tag.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public ChannelSecurityConfigurer<HttpSecurity>.ChannelRequestMatcherRegistry requiresChannel() throws Exception { ApplicationContext context = getContext(); return getOrApply(new ChannelSecurityConfigurer<>(context)) .getRegistry(); }\n\n    ### Response:",
        "ground_truth": "Configures channel security. In order for this configuration to be useful at least\none mapping to a required channel must be provided.\n\nExample Configuration\n\nThe example below demonstrates how to require HTTPs for every request. Only\nrequiring HTTPS for some requests is supported, but not recommended since an\napplication that allows for HTTP introduces many security vulnerabilities. For one\nsuch example, read about Firesheep.\n\n\n\n\n@return the {@link ChannelSecurityConfigurer} for further customizations\n@throws Exception",
        "predict": " Create a label tag.\n\n@param  string $for        The name of the input the label is for\n@param  string $content    The content of the label, if any\n@param  array  $attributes An array of html attributes\n@return string The label tag.\n\n    "
    },
    {
        "ID": 84,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _get_kwarg(self, name, kwargs): \"\"\" Helper to get value of a named attribute irrespective of whether it is passed with or without \"@\" prefix. \"\"\" at_name = '@{}'.format(name) if name in kwargs: if at_name in kwargs: raise ValueError('Both {!r} and {!r} specified in kwargs'.format(name, at_name)) return kwargs[name] if at_name in kwargs: return kwargs[at_name] return not_set\n\n    ### Response: Helper to get value of a named attribute irrespective of whether it is passed\n        with or without \"@\" prefix..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public boolean compare(final String dn, final String attributeName, final Object value) { final String comparisonFilter = \"(\" + attributeName + \"={0})\"; class LdapCompareCallback implements ContextExecutor { public Object executeWithContext(DirContext ctx) throws NamingException { SearchControls ctls = new SearchControls(); ctls.setReturningAttributes(NO_ATTRS); ctls.setSearchScope(SearchControls.OBJECT_SCOPE); NamingEnumeration<SearchResult> results = ctx.search(dn, comparisonFilter, new Object[] { value }, ctls); Boolean match = Boolean.valueOf(results.hasMore()); LdapUtils.closeEnumeration(results); return match; } } Boolean matches = (Boolean) executeReadOnly(new LdapCompareCallback()); return matches.booleanValue(); }\n\n    ### Response:",
        "ground_truth": "Performs an LDAP compare operation of the value of an attribute for a particular\ndirectory entry.\n\n@param dn the entry who's attribute is to be used\n@param attributeName the attribute who's value we want to compare\n@param value the value to be checked against the directory value\n\n@return true if the supplied value matches that in the directory",
        "predict": " Helper to get value of a named attribute irrespective of whether it is passed\n        with or without \"@\" prefix..\n\n    "
    },
    {
        "ID": 85,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function get($parameter) { return isset($this->credentials[$parameter]) ? $this->credentials[$parameter] : null; }\n\n    ### Response: Get a single credential parameter.\n\n@param string $parameter\n@return mixed|null.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public DirContextOperations retrieveEntry(final String dn, final String[] attributesToRetrieve) { return (DirContextOperations) executeReadOnly(new ContextExecutor() { public Object executeWithContext(DirContext ctx) throws NamingException { Attributes attrs = ctx.getAttributes(dn, attributesToRetrieve); // Object object = ctx.lookup(LdapUtils.getRelativeName(dn, ctx)); return new DirContextAdapter(attrs, new DistinguishedName(dn), new DistinguishedName(ctx.getNameInNamespace())); } }); }\n\n    ### Response:",
        "ground_truth": "Composes an object from the attributes of the given DN.\n\n@param dn the directory entry which will be read\n@param attributesToRetrieve the named attributes which will be retrieved from the\ndirectory entry.\n\n@return the object created by the mapper",
        "predict": " Get a single credential parameter.\n\n@param string $parameter\n@return mixed|null.\n\n    "
    },
    {
        "ID": 86,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func randUint32() uint32 { b := make([]byte, 4) _, err := rand.Read(b) if err != nil { panic(err) } return binary.BigEndian.Uint32(b) }\n\n    ### Response: // randUint32 returns a random 32bit uint from the CSPRNG.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Set<String> searchForSingleAttributeValues(final String base, final String filter, final Object[] params, final String attributeName) { String[] attributeNames = new String[] { attributeName }; Set<Map<String, List<String>>> multipleAttributeValues = searchForMultipleAttributeValues( base, filter, params, attributeNames); Set<String> result = new HashSet<>(); for (Map<String, List<String>> map : multipleAttributeValues) { List<String> values = map.get(attributeName); if (values != null) { result.addAll(values); } } return result; }\n\n    ### Response:",
        "ground_truth": "Performs a search using the supplied filter and returns the union of the values of\nthe named attribute found in all entries matched by the search. Note that one\ndirectory entry may have several values for the attribute. Intended for role\nsearches and similar scenarios.\n\n@param base the DN to search in\n@param filter search filter to use\n@param params the parameters to substitute in the search filter\n@param attributeName the attribute who's values are to be retrieved.\n\n@return the set of String values for the attribute as a union of the values found\nin all the matching entries.",
        "predict": " // randUint32 returns a random 32bit uint from the CSPRNG.\n\n    "
    },
    {
        "ID": 87,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function Summary($from, $to, $channelName = null, $interval = \\ElasticEmailEnums\\IntervalType::Summary, $transactionID = null) { return $this->sendRequest('log/summary', array( 'from' => $from, 'to' => $to, 'channelName' => $channelName, 'interval' => $interval, 'transactionID' => $transactionID )); }\n\n    ### Response: Loads summary information about activity in chosen date range.\n@param string $apikey ApiKey that gives you access to our SMTP and HTTP API's.\n@param DateTime $from Starting date for search in YYYY-MM-DDThh:mm:ss format.\n@param DateTime $to Ending date for search in YYYY-MM-DDThh:mm:ss format.\n@param string $channelName Name of selected channel.\n@param \\ElasticEmailEnums\\IntervalType $interval 'Hourly' for detailed information, 'summary' for daily overview\n@param string $transactionID ID number of transaction\n@return \\ElasticEmailEnums\\LogSummary.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Set<Map<String, List<String>>> searchForMultipleAttributeValues( final String base, final String filter, final Object[] params, final String[] attributeNames) { // Escape the params acording to RFC2254 Object[] encodedParams = new String[params.length]; for (int i = 0; i < params.length; i++) { encodedParams[i] = LdapEncoder.filterEncode(params[i].toString()); } String formattedFilter = MessageFormat.format(filter, encodedParams); logger.debug(\"Using filter: \" + formattedFilter); final HashSet<Map<String, List<String>>> set = new HashSet<Map<String, List<String>>>(); ContextMapper roleMapper = new ContextMapper() { public Object mapFromContext(Object ctx) { DirContextAdapter adapter = (DirContextAdapter) ctx; Map<String, List<String>> record = new HashMap<String, List<String>>(); if (attributeNames == null || attributeNames.length == 0) { try { for (NamingEnumeration ae = adapter.getAttributes().getAll(); ae .hasMore();) { Attribute attr = (Attribute) ae.next(); extractStringAttributeValues(adapter, record, attr.getID()); } } catch (NamingException x) { org.springframework.ldap.support.LdapUtils .convertLdapException(x); } } else { for (String attributeName : attributeNames) { extractStringAttributeValues(adapter, record, attributeName); } } record.put(DN_KEY, Arrays.asList(getAdapterDN(adapter))); set.add(record); return null; } }; SearchControls ctls = new SearchControls(); ctls.setSearchScope(searchControls.getSearchScope()); ctls.setReturningAttributes(attributeNames != null && attributeNames.length > 0 ? attributeNames : null); search(base, formattedFilter, ctls, roleMapper); return set; }\n\n    ### Response:",
        "ground_truth": "Performs a search using the supplied filter and returns the values of each named\nattribute found in all entries matched by the search. Note that one directory entry\nmay have several values for the attribute. Intended for role searches and similar\nscenarios.\n\n@param base the DN to search in\n@param filter search filter to use\n@param params the parameters to substitute in the search filter\n@param attributeNames the attributes' values that are to be retrieved.\n\n@return the set of String values for each attribute found in all the matching\nentries. The attribute name is the key for each set of values. In addition each map\ncontains the DN as a String with the key predefined key {@link #DN_KEY}.",
        "predict": " Loads summary information about activity in chosen date range.\n@param string $apikey ApiKey that gives you access to our SMTP and HTTP API's.\n@param DateTime $from Starting date for search in YYYY-MM-DDThh:mm:ss format.\n@param DateTime $to Ending date for search in YYYY-MM-DDThh:mm:ss format.\n@param string $channelName Name of selected channel.\n@param \\ElasticEmailEnums\\IntervalType $interval 'Hourly' for detailed information, 'summary' for daily overview\n@param string $transactionID ID number of transaction\n@return \\ElasticEmailEnums\\LogSummary.\n\n    "
    },
    {
        "ID": 88,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private function getValidation(string $name): validator\\Validation { if (!isset($this->validations[$name])) { if (isset($this->validationRegister[$name])) { $class = $this->validationRegister[$name]; } else { throw new exceptions\\ValidatorException(\"Validator [$name] not found\"); } $params = isset($this->validationData[$name]) ? $this->validationData[$name] : null; $this->validations[$name] = new $class($params); } return $this->validations[$name]; }\n\n    ### Response: Get an instance of a validation class.\n\n@param string $name\n@return validator\\Validation\n@throws exceptions\\ValidatorException.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static DirContextOperations searchForSingleEntryInternal(DirContext ctx, SearchControls searchControls, String base, String filter, Object[] params) throws NamingException { final DistinguishedName ctxBaseDn = new DistinguishedName( ctx.getNameInNamespace()); final DistinguishedName searchBaseDn = new DistinguishedName(base); final NamingEnumeration<SearchResult> resultsEnum = ctx.search(searchBaseDn, filter, params, buildControls(searchControls)); if (logger.isDebugEnabled()) { logger.debug(\"Searching for entry under DN '\" + ctxBaseDn + \"', base = '\" + searchBaseDn + \"', filter = '\" + filter + \"'\"); } Set<DirContextOperations> results = new HashSet<>(); try { while (resultsEnum.hasMore()) { SearchResult searchResult = resultsEnum.next(); DirContextAdapter dca = (DirContextAdapter) searchResult.getObject(); Assert.notNull(dca, \"No object returned by search, DirContext is not correctly configured\"); if (logger.isDebugEnabled()) { logger.debug(\"Found DN: \" + dca.getDn()); } results.add(dca); } } catch (PartialResultException e) { LdapUtils.closeEnumeration(resultsEnum); logger.info(\"Ignoring PartialResultException\"); } if (results.size() == 0) { throw new IncorrectResultSizeDataAccessException(1, 0); } if (results.size() > 1) { throw new IncorrectResultSizeDataAccessException(1, results.size()); } return results.iterator().next(); }\n\n    ### Response:",
        "ground_truth": "Internal method extracted to avoid code duplication in AD search.",
        "predict": " Get an instance of a validation class.\n\n@param string $name\n@return validator\\Validation\n@throws exceptions\\ValidatorException.\n\n    "
    },
    {
        "ID": 89,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (k *Key) InUint(defaultVal uint, candidates []uint) uint { val := k.MustUint() for _, cand := range candidates { if val == cand { return val } } return defaultVal }\n\n    ### Response: // InUint always returns value without error,\n// it returns default value if error occurs or doesn't fit into candidates..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static SearchControls buildControls(SearchControls originalControls) { return new SearchControls(originalControls.getSearchScope(), originalControls.getCountLimit(), originalControls.getTimeLimit(), originalControls.getReturningAttributes(), RETURN_OBJECT, originalControls.getDerefLinkFlag()); }\n\n    ### Response:",
        "ground_truth": "We need to make sure the search controls has the return object flag set to true, in\norder for the search to return DirContextAdapter instances.\n@param originalControls\n@return",
        "predict": " // InUint always returns value without error,\n// it returns default value if error occurs or doesn't fit into candidates..\n\n    "
    },
    {
        "ID": 90,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def get_arg_names(target) -> typing.List[str]: \"\"\" Gets the list of named arguments for the target function :param target: Function for which the argument names will be retrieved \"\"\" code = getattr(target, '__code__') if code is None: return [] arg_count = code.co_argcount kwarg_count = code.co_kwonlyargcount args_index = get_args_index(target) kwargs_index = get_kwargs_index(target) arg_names = list(code.co_varnames[:arg_count]) if args_index != -1: arg_names.append(code.co_varnames[args_index]) arg_names += list(code.co_varnames[arg_count:(arg_count + kwarg_count)]) if kwargs_index != -1: arg_names.append(code.co_varnames[kwargs_index]) if len(arg_names) > 0 and arg_names[0] in ['self', 'cls']: arg_count -= 1 arg_names.pop(0) return arg_names\n\n    ### Response: Gets the list of named arguments for the target function\n\n    :param target:\n        Function for which the argument names will be retrieved.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void lookupPrimaryKeys(final Map<Serializable, Acl> acls, final Set<Long> findNow, final List<Sid> sids) { Assert.notNull(acls, \"ACLs are required\"); Assert.notEmpty(findNow, \"Items to find now required\"); String sql = computeRepeatingSql(lookupPrimaryKeysWhereClause, findNow.size()); Set<Long> parentsToLookup = jdbcTemplate.query(sql, new PreparedStatementSetter() { public void setValues(PreparedStatement ps) throws SQLException { int i = 0; for (Long toFind : findNow) { i++; ps.setLong(i, toFind); } } }, new ProcessResultSet(acls, sids)); // Lookup the parents, now that our JdbcTemplate has released the database // connection (SEC-547) if (parentsToLookup.size() > 0) { lookupPrimaryKeys(acls, parentsToLookup, sids); } }\n\n    ### Response:",
        "ground_truth": "Locates the primary key IDs specified in \"findNow\", adding AclImpl instances with\nStubAclParents to the \"acls\" Map.\n\n@param acls the AclImpls (with StubAclParents)\n@param findNow Long-based primary keys to retrieve\n@param sids",
        "predict": " Gets the list of named arguments for the target function\n\n    :param target:\n        Function for which the argument names will be retrieved.\n\n    "
    },
    {
        "ID": 91,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def peak_in_power(events, dat, s_freq, method, value=None): \"\"\"Define peak in power of the signal. Parameters ---------- events : ndarray (dtype='int') N x 3 matrix with start, peak, end samples dat : ndarray (dtype='float') vector with the original data s_freq : float sampling frequency method : str or None 'peak' or 'interval'. If None, values will be all NaN value : float size of the window around peak, or nothing (for 'interval') Returns ------- ndarray (dtype='float') vector with peak frequency \"\"\" dat = diff(dat) # remove 1/f peak = empty(events.shape[0]) peak.fill(nan) if method is not None: for i, one_event in enumerate(events): if method == 'peak': x0 = one_event[1] - value / 2 * s_freq x1 = one_event[1] + value / 2 * s_freq elif method == 'interval': x0 = one_event[0] x1 = one_event[2] if x0 < 0 or x1 >= len(dat): peak[i] = nan else: f, Pxx = periodogram(dat[x0:x1], s_freq) idx_peak = Pxx[f < MAX_FREQUENCY_OF_INTEREST].argmax() peak[i] = f[idx_peak] return peak\n\n    ### Response: Define peak in power of the signal.\n\n    Parameters\n    ----------\n    events : ndarray (dtype='int')\n        N x 3 matrix with start, peak, end samples\n    dat : ndarray (dtype='float')\n        vector with the original data\n    s_freq : float\n        sampling frequency\n    method : str or None\n        'peak' or 'interval'. If None, values will be all NaN\n    value : float\n        size of the window around peak, or nothing (for 'interval')\n\n    Returns\n    -------\n    ndarray (dtype='float')\n        vector with peak frequency.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails buildDetails( HttpServletRequest context) { Collection<String> j2eeUserRoles = getUserRoles(context); Collection<? extends GrantedAuthority> userGas = j2eeUserRoles2GrantedAuthoritiesMapper .getGrantedAuthorities(j2eeUserRoles); if (logger.isDebugEnabled()) { logger.debug(\"J2EE roles [\" + j2eeUserRoles + \"] mapped to Granted Authorities: [\" + userGas + \"]\"); } PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails result = new PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails( context, userGas); return result; }\n\n    ### Response:",
        "ground_truth": "Builds the authentication details object.\n\n@see org.springframework.security.authentication.AuthenticationDetailsSource#buildDetails(Object)",
        "predict": " Define peak in power of the signal.\n\n    Parameters\n    ----------\n    events : ndarray (dtype='int')\n        N x 3 matrix with start, peak, end samples\n    dat : ndarray (dtype='float')\n        vector with the original data\n    s_freq : float\n        sampling frequency\n    method : str or None\n        'peak' or 'interval'. If None, values will be all NaN\n    value : float\n        size of the window around peak, or nothing (for 'interval')\n\n    Returns\n    -------\n    ndarray (dtype='float')\n        vector with peak frequency.\n\n    "
    },
    {
        "ID": 92,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def shift_dates(seconds) self.birthDatetime = (birthDatetime.utc.to_time + seconds.seconds).to_datetime dataElements.each { |element| element.shift_dates(seconds) } end\n\n    ### Response: Shift all data element fields that deal with dates by the given value.\n Given value should be in seconds. Positive values shift forward, negative\n values shift backwards.\n\n Note: This will shift dates of the birthdate and\n dates on the data elements that exist on the patient..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private RootBeanDefinition createEmbeddedServer(Element element, ParserContext parserContext) { Object source = parserContext.extractSource(element); String suffix = element.getAttribute(ATT_ROOT_SUFFIX); if (!StringUtils.hasText(suffix)) { suffix = OPT_DEFAULT_ROOT_SUFFIX; } String port = element.getAttribute(ATT_PORT); if (!StringUtils.hasText(port)) { port = getDefaultPort(); if (logger.isDebugEnabled()) { logger.debug(\"Using default port of \" + port); } } String url = \"ldap://127.0.0.1:\" + port + \"/\" + suffix; BeanDefinitionBuilder contextSource = BeanDefinitionBuilder .rootBeanDefinition(CONTEXT_SOURCE_CLASS); contextSource.addConstructorArgValue(url); contextSource.addPropertyValue(\"userDn\", \"uid=admin,ou=system\"); contextSource.addPropertyValue(\"password\", \"secret\"); RootBeanDefinition apacheContainer = new RootBeanDefinition( \"org.springframework.security.ldap.server.ApacheDSContainer\", null, null); apacheContainer.setSource(source); apacheContainer.getConstructorArgumentValues().addGenericArgumentValue(suffix); String ldifs = element.getAttribute(ATT_LDIF_FILE); if (!StringUtils.hasText(ldifs)) { ldifs = OPT_DEFAULT_LDIF_FILE; } apacheContainer.getConstructorArgumentValues().addGenericArgumentValue(ldifs); apacheContainer.getPropertyValues().addPropertyValue(\"port\", port); logger.info(\"Embedded LDAP server bean definition created for URL: \" + url); if (parserContext.getRegistry() .containsBeanDefinition(BeanIds.EMBEDDED_APACHE_DS)) { parserContext.getReaderContext().error( \"Only one embedded server bean is allowed per application context\", element); } parserContext.getRegistry().registerBeanDefinition(BeanIds.EMBEDDED_APACHE_DS, apacheContainer); return (RootBeanDefinition) contextSource.getBeanDefinition(); }\n\n    ### Response:",
        "ground_truth": "Will be called if no url attribute is supplied.\n\nRegisters beans to create an embedded apache directory server.\n\n@return the BeanDefinition for the ContextSource for the embedded server.\n\n@see ApacheDSContainer",
        "predict": " Shift all data element fields that deal with dates by the given value.\n Given value should be in seconds. Positive values shift forward, negative\n values shift backwards.\n\n Note: This will shift dates of the birthdate and\n dates on the data elements that exist on the patient..\n\n    "
    },
    {
        "ID": 93,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function answerWithDataProcessingCompleted(array $metadata = []) { $type = MessageNameUtils::getTypePartOfMessageName($this->messageName); $metadata = ArrayUtils::merge($this->metadata, $metadata); return new self( $this->payload, MessageNameUtils::getDataProcessedEventName($type), $this->target, //Previous target is now the origin of the answer $this->origin, //Previous origin is now the target of the answer $metadata, $this->processTaskListPosition, $this->version + 1 ); }\n\n    ### Response: Transforms current message to a data processed event\n\n@param array $metadata\n@return WorkflowMessage.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void createServletApiFilter(BeanReference authenticationManager) { final String ATT_SERVLET_API_PROVISION = \"servlet-api-provision\"; final String DEF_SERVLET_API_PROVISION = \"true\"; String provideServletApi = httpElt.getAttribute(ATT_SERVLET_API_PROVISION); if (!StringUtils.hasText(provideServletApi)) { provideServletApi = DEF_SERVLET_API_PROVISION; } if (\"true\".equals(provideServletApi)) { servApiFilter = GrantedAuthorityDefaultsParserUtils.registerWithDefaultRolePrefix(pc, SecurityContextHolderAwareRequestFilterBeanFactory.class); servApiFilter.getPropertyValues().add(\"authenticationManager\", authenticationManager); } }\n\n    ### Response:",
        "ground_truth": "Adds the servlet-api integration filter if required",
        "predict": " Transforms current message to a data processed event\n\n@param array $metadata\n@return WorkflowMessage.\n\n    "
    },
    {
        "ID": 94,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function KeysAnd(values) { var vals = this.values = {}; canReflect.eachKey(values, function(value, key) { if (canReflect.isPlainObject(value) && !set.isSpecial(value)) { vals[key] = new KeysAnd(value); } else { vals[key] = value; } }); }\n\n    ### Response: Define the sub-types that BasicQuery will use.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void createJaasApiFilter() { final String ATT_JAAS_API_PROVISION = \"jaas-api-provision\"; final String DEF_JAAS_API_PROVISION = \"false\"; String provideJaasApi = httpElt.getAttribute(ATT_JAAS_API_PROVISION); if (!StringUtils.hasText(provideJaasApi)) { provideJaasApi = DEF_JAAS_API_PROVISION; } if (\"true\".equals(provideJaasApi)) { jaasApiFilter = new RootBeanDefinition(JaasApiIntegrationFilter.class); } }\n\n    ### Response:",
        "ground_truth": "Adds the jaas-api integration filter if required",
        "predict": " Define the sub-types that BasicQuery will use.\n\n    "
    },
    {
        "ID": 95,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function AllNamespaces() { // In PHP 7.0 $this is passed to closure functions automatically but not in earlier versions $contexts = &$this->contexts; $instance = &$this->instance; $result = array_reduce( array_keys( $this->contexts ), function( $carry, $context ) use( &$contexts, &$instance ) { // The context may be invalid in which case exclude if ( ! isset( $contexts[ $context ]['entity']['segment']['explicitMember'] ) || count( $contexts[ $context ]['entity']['segment']['explicitMember'] ) == 0 ) return $carry; // Each context may have more than one segment. If the filter matches any one segment the context will be included. $context_segments = $instance->getElementsForContext( $context, true ); foreach ( $context_segments as $key => $segment ) { if ( ! isset( $segment['dimension']['namespace'] ) || isset( $carry[ $segment['dimension']['namespace'] ] ) ) continue; $carry[ $segment['dimension']['namespace'] ] = 1; if ( ! isset( $segment['member']['namespace'] ) || isset( $carry[ $segment['dimension']['namespace'] ] ) ) continue; $carry[ $segment['member']['namespace'] ] = 1; } return $carry; }, array() ); return array_keys( $result ); }\n\n    ### Response: Return an array of all namespaces used by the contexts\n@return array of strings.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static TypeResolverBuilder<? extends TypeResolverBuilder> createWhitelistedDefaultTyping() { TypeResolverBuilder<? extends TypeResolverBuilder> result = new WhitelistTypeResolverBuilder(ObjectMapper.DefaultTyping.NON_FINAL); result = result.init(JsonTypeInfo.Id.CLASS, null); result = result.inclusion(JsonTypeInfo.As.PROPERTY); return result; }\n\n    ### Response:",
        "ground_truth": "Creates a TypeResolverBuilder that performs whitelisting.\n@return a TypeResolverBuilder that performs whitelisting.",
        "predict": " Return an array of all namespaces used by the contexts\n@return array of strings.\n\n    "
    },
    {
        "ID": 96,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _traverse_dict(self, input_dict, resolution_data, resolver_method): \"\"\" Traverse a dictionary to resolve intrinsic functions on every value :param input_dict: Input dictionary to traverse :param resolution_data: Data that the `resolver_method` needs to operate :param resolver_method: Method that can actually resolve an intrinsic function, if it detects one :return: Modified dictionary with values resolved \"\"\" for key, value in input_dict.items(): input_dict[key] = self._traverse(value, resolution_data, resolver_method) return input_dict\n\n    ### Response: Traverse a dictionary to resolve intrinsic functions on every value\n\n        :param input_dict: Input dictionary to traverse\n        :param resolution_data: Data that the `resolver_method` needs to operate\n        :param resolver_method: Method that can actually resolve an intrinsic function, if it detects one\n        :return: Modified dictionary with values resolved.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void insertSpringSecurityFilterChain(ServletContext servletContext) { String filterName = DEFAULT_FILTER_NAME; DelegatingFilterProxy springSecurityFilterChain = new DelegatingFilterProxy( filterName); String contextAttribute = getWebApplicationContextAttribute(); if (contextAttribute != null) { springSecurityFilterChain.setContextAttribute(contextAttribute); } registerFilter(servletContext, true, filterName, springSecurityFilterChain); }\n\n    ### Response:",
        "ground_truth": "Registers the springSecurityFilterChain\n@param servletContext the {@link ServletContext}",
        "predict": " Traverse a dictionary to resolve intrinsic functions on every value\n\n        :param input_dict: Input dictionary to traverse\n        :param resolution_data: Data that the `resolver_method` needs to operate\n        :param resolver_method: Method that can actually resolve an intrinsic function, if it detects one\n        :return: Modified dictionary with values resolved.\n\n    "
    },
    {
        "ID": 97,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func Model() string { seps := []string{\"\", \" \", \"-\"} return CharactersN(r.Intn(3)+1) + seps[r.Intn(len(seps))] + Digits() }\n\n    ### Response: // Model generates model name that consists of letters and digits, optionally with a hyphen between them.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public PersistentRememberMeToken getTokenForSeries(String seriesId) { try { return getJdbcTemplate().queryForObject(tokensBySeriesSql, new RowMapper<PersistentRememberMeToken>() { public PersistentRememberMeToken mapRow(ResultSet rs, int rowNum) throws SQLException { return new PersistentRememberMeToken(rs.getString(1), rs .getString(2), rs.getString(3), rs.getTimestamp(4)); } }, seriesId); } catch (EmptyResultDataAccessException zeroResults) { if (logger.isDebugEnabled()) { logger.debug(\"Querying token for series '\" + seriesId + \"' returned no results.\", zeroResults); } } catch (IncorrectResultSizeDataAccessException moreThanOne) { logger.error(\"Querying token for series '\" + seriesId + \"' returned more than one value. Series\" + \" should be unique\"); } catch (DataAccessException e) { logger.error(\"Failed to load token for series \" + seriesId, e); } return null; }\n\n    ### Response:",
        "ground_truth": "Loads the token data for the supplied series identifier.\n\nIf an error occurs, it will be reported and null will be returned (since the result\nshould just be a failed persistent login).\n\n@param seriesId\n@return the token matching the series, or null if no match found or an exception\noccurred.",
        "predict": " // Model generates model name that consists of letters and digits, optionally with a hyphen between them.\n\n    "
    },
    {
        "ID": 98,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (ctx *VmContext) SendVmEvent(ev VmEvent) error { ctx.lock.RLock() defer ctx.lock.RUnlock() if ctx.handler == nil { return fmt.Errorf(\"VmContext(%s): event handler already shutdown.\", ctx.Id) } ctx.Hub <- ev return nil }\n\n    ### Response: // SendVmEvent enqueues a VmEvent onto the context. Returns an error if there is\n// no handler associated with the context. VmEvent handling happens in a\n// separate goroutine, so this is thread-safe and asynchronous..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public List<GrantedAuthority> getGrantedAuthorities(Collection<String> attributes) { List<GrantedAuthority> result = new ArrayList<>(attributes.size()); for (String attribute : attributes) { result.add(getGrantedAuthority(attribute)); } return result; }\n\n    ### Response:",
        "ground_truth": "Map the given list of string attributes one-to-one to Spring Security\nGrantedAuthorities.",
        "predict": " // SendVmEvent enqueues a VmEvent onto the context. Returns an error if there is\n// no handler associated with the context. VmEvent handling happens in a\n// separate goroutine, so this is thread-safe and asynchronous..\n\n    "
    },
    {
        "ID": 99,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func NewGroupRemoveExternalIdDetails(PreviousValue string) *GroupRemoveExternalIdDetails { s := new(GroupRemoveExternalIdDetails) s.PreviousValue = PreviousValue return s }\n\n    ### Response: // NewGroupRemoveExternalIdDetails returns a new GroupRemoveExternalIdDetails instance.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Cipher newCipher(String algorithm) { try { return Cipher.getInstance(algorithm); } catch (NoSuchAlgorithmException e) { throw new IllegalArgumentException(\"Not a valid encryption algorithm\", e); } catch (NoSuchPaddingException e) { throw new IllegalStateException(\"Should not happen\", e); } }\n\n    ### Response:",
        "ground_truth": "Constructs a new Cipher.",
        "predict": " // NewGroupRemoveExternalIdDetails returns a new GroupRemoveExternalIdDetails instance.\n\n    "
    },
    {
        "ID": 100,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private function stringToUtf($input) { if (is_array($input)) { $temp = array(); foreach ($input as $key => $value) { $temp[$this->stringToUtf($key)] = $this->stringToUtf($value); } $input = $temp; } elseif (is_string($input)) { $input = iconv('iso-8859-15', 'utf-8', $input); } return $input; }\n\n    ### Response: Converts input string to utf8.\n\n@param string $input String for conversion.\n\n@return array|string.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public void afterPropertiesSet() { try { super.afterPropertiesSet(); } catch (ServletException e) { // convert to RuntimeException for passivity on afterPropertiesSet signature throw new RuntimeException(e); } Assert.notNull(authenticationManager, \"An AuthenticationManager must be set\"); }\n\n    ### Response:",
        "ground_truth": "Check whether all required properties have been set.",
        "predict": " Converts input string to utf8.\n\n@param string $input String for conversion.\n\n@return array|string.\n\n    "
    },
    {
        "ID": 101,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (s *Scanner) Scan() (Block, error) { if err := s.init(); err != nil { return nil, err } switch s.peek() { case '<': // Special handling for component/attr blocks. if s.peekComponentStartBlock() { return s.scanComponentStartBlock() } else if s.peekComponentEndBlock() { return s.scanComponentEndBlock() } else if s.peekAttrStartBlock() { return s.scanAttrStartBlock() } else if s.peekAttrEndBlock() { return s.scanAttrEndBlock() } // Special handling for ego blocks. if s.peekN(4) == \"<%==\" { return s.scanRawPrintBlock() } else if s.peekN(3) == \"<%=\" { return s.scanPrintBlock() } else if s.peekN(2) == \"<%\" { return s.scanCodeBlock() } case eof: return nil, io.EOF } return s.scanTextBlock() }\n\n    ### Response: // Scan returns the next block from the reader..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException { if (logger.isDebugEnabled()) { logger.debug(\"Checking secure context token: \" + SecurityContextHolder.getContext().getAuthentication()); } if (requiresAuthentication((HttpServletRequest) request)) { doAuthenticate((HttpServletRequest) request, (HttpServletResponse) response); } chain.doFilter(request, response); }\n\n    ### Response:",
        "ground_truth": "Try to authenticate a pre-authenticated user with Spring Security if the user has\nnot yet been authenticated.",
        "predict": " // Scan returns the next block from the reader..\n\n    "
    },
    {
        "ID": 102,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def to_unix_ts(start_time): \"\"\"Given a datetime object, returns its value as a unix timestamp\"\"\" if isinstance(start_time, datetime): if is_timezone_aware(start_time): start_time = start_time.astimezone(pytz.utc) else: log.warning( \"Non timezone-aware datetime object passed to IncrementalEndpoint. \" \"The Zendesk API expects UTC time, if this is not the case results will be incorrect!\" ) unix_time = calendar.timegm(start_time.timetuple()) else: unix_time = start_time return int(unix_time)\n\n    ### Response: Given a datetime object, returns its value as a unix timestamp.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected boolean principalChanged(HttpServletRequest request, Authentication currentAuthentication) { Object principal = getPreAuthenticatedPrincipal(request); if ((principal instanceof String) && currentAuthentication.getName().equals(principal)) { return false; } if (principal != null && principal.equals(currentAuthentication.getPrincipal())) { return false; } if (logger.isDebugEnabled()) { logger.debug(\"Pre-authenticated principal has changed to \" + principal + \" and will be reauthenticated\"); } return true; }\n\n    ### Response:",
        "ground_truth": "Determines if the current principal has changed. The default implementation tries\n\n\nIf the {@link #getPreAuthenticatedPrincipal(HttpServletRequest)} is a String, the {@link Authentication#getName()} is compared against the pre authenticated principal\nOtherwise, the {@link #getPreAuthenticatedPrincipal(HttpServletRequest)} is compared against the {@link Authentication#getPrincipal()}\n\n\nSubclasses can override this method to determine when a principal has changed.\n\n\n@param request\n@param currentAuthentication\n@return true if the principal has changed, else false",
        "predict": " Given a datetime object, returns its value as a unix timestamp.\n\n    "
    },
    {
        "ID": 103,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def concatenate_json(source_folder, destination_file): \"\"\" Concatenate all the json files in a folder to one big JSON file. \"\"\" matches = [] for root, dirnames, filenames in os.walk(source_folder): for filename in fnmatch.filter(filenames, '*.json'): matches.append(os.path.join(root, filename)) with open(destination_file, \"wb\") as f: f.write(\"[\\n\") for m in matches[:-1]: f.write(open(m, \"rb\").read()) f.write(\",\\n\") f.write(open(matches[-1], \"rb\").read()) f.write(\"\\n]\")\n\n    ### Response: Concatenate all the json files in a folder to one big JSON file..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void doAuthenticate(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException { Authentication authResult; Object principal = getPreAuthenticatedPrincipal(request); Object credentials = getPreAuthenticatedCredentials(request); if (principal == null) { if (logger.isDebugEnabled()) { logger.debug(\"No pre-authenticated principal found in request\"); } return; } if (logger.isDebugEnabled()) { logger.debug(\"preAuthenticatedPrincipal = \" + principal + \", trying to authenticate\"); } try { PreAuthenticatedAuthenticationToken authRequest = new PreAuthenticatedAuthenticationToken( principal, credentials); authRequest.setDetails(authenticationDetailsSource.buildDetails(request)); authResult = authenticationManager.authenticate(authRequest); successfulAuthentication(request, response, authResult); } catch (AuthenticationException failed) { unsuccessfulAuthentication(request, response, failed); if (!continueFilterChainOnUnsuccessfulAuthentication) { throw failed; } } }\n\n    ### Response:",
        "ground_truth": "Do the actual authentication for a pre-authenticated user.",
        "predict": " Concatenate all the json files in a folder to one big JSON file..\n\n    "
    },
    {
        "ID": 104,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function transport(message) { return { header: message.header, request: message.request, response: message.response } }\n\n    ### Response: Only these properties of a message are sent and received..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void checkContentLength(long contentLengthToWrite) { this.contentWritten += contentLengthToWrite; boolean isBodyFullyWritten = this.contentLength > 0 && this.contentWritten >= this.contentLength; int bufferSize = getBufferSize(); boolean requiresFlush = bufferSize > 0 && this.contentWritten >= bufferSize; if (isBodyFullyWritten || requiresFlush) { doOnResponseCommitted(); } }\n\n    ### Response:",
        "ground_truth": "Adds the contentLengthToWrite to the total contentWritten size and checks to see if\nthe response should be written.\n\n@param contentLengthToWrite the size of the content that is about to be written.",
        "predict": " Only these properties of a message are sent and received..\n\n    "
    },
    {
        "ID": 105,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def honor_stop_request(self, site): \"\"\"Raises brozzler.CrawlStopped if stop has been requested.\"\"\" site.refresh() if (site.stop_requested and site.stop_requested <= doublethink.utcnow()): self.logger.info(\"stop requested for site %s\", site.id) raise brozzler.CrawlStopped if site.job_id: job = brozzler.Job.load(self.rr, site.job_id) if (job and job.stop_requested and job.stop_requested <= doublethink.utcnow()): self.logger.info(\"stop requested for job %s\", site.job_id) raise brozzler.CrawlStopped\n\n    ### Response: Raises brozzler.CrawlStopped if stop has been requested..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Set<GrantedAuthority> mapAuthorities( Collection<? extends GrantedAuthority> authorities) { HashSet<GrantedAuthority> mapped = new HashSet<>( authorities.size()); for (GrantedAuthority authority : authorities) { mapped.add(mapAuthority(authority.getAuthority())); } if (defaultAuthority != null) { mapped.add(defaultAuthority); } return mapped; }\n\n    ### Response:",
        "ground_truth": "Creates a mapping of the supplied authorities based on the case-conversion and\nprefix settings. The mapping will be one-to-one unless duplicates are produced\nduring the conversion. If a default authority has been set, this will also be\nassigned to each mapping.\n\n@param authorities the original authorities\n\n@return the converted set of authorities",
        "predict": " Raises brozzler.CrawlStopped if stop has been requested..\n\n    "
    },
    {
        "ID": 106,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function getResultDelete(array $cart) { $options = array( 'user_id' => $cart['user_id'], 'store_id' => $cart['store_id'], ); $content = $this->cart->getContent($options); return array( 'redirect' => '', 'severity' => 'success', 'quantity' => empty($content['quantity']) ? 0 : $content['quantity'], 'message' => $this->translation->text('Product has been deleted from cart') ); }\n\n    ### Response: Returns an array of resulting data after a product has been deleted from a cart\n@param array $cart\n@return array.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public T loginProcessingUrl(String loginProcessingUrl) { this.loginProcessingUrl = loginProcessingUrl; authFilter .setRequiresAuthenticationRequestMatcher(createLoginProcessingUrlMatcher(loginProcessingUrl)); return getSelf(); }\n\n    ### Response:",
        "ground_truth": "Specifies the URL to validate the credentials.\n\n@param loginProcessingUrl the URL to validate username and password\n@return the {@link FormLoginConfigurer} for additional customization",
        "predict": " Returns an array of resulting data after a product has been deleted from a cart\n@param array $cart\n@return array.\n\n    "
    },
    {
        "ID": 107,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function _hasOneOrMany($associated_class_name, $foreign_key_name = null, $foreign_key_name_in_current_models_table = null, $connection_name = null) { $base_table_name = self::_getTableName(get_class($this)); $foreign_key_name = self::_buildForeignKeyName($foreign_key_name, $base_table_name); $where_value = ''; //Value of foreign_table.{$foreign_key_name} we're //looking for. Where foreign_table is the actual //database table in the associated model. if(is_null($foreign_key_name_in_current_models_table)) { //Match foreign_table.{$foreign_key_name} with the value of //{$this->_table}.{$this->id()} $where_value = $this->id(); } else { //Match foreign_table.{$foreign_key_name} with the value of //{$this->_table}.{$foreign_key_name_in_current_models_table} $where_value = $this->$foreign_key_name_in_current_models_table; } return self::factory($associated_class_name, $connection_name)->where($foreign_key_name, $where_value); }\n\n    ### Response: Internal method to construct the queries for both the has_one and\nhas_many methods. These two types of association are identical; the\nonly difference is whether find_one or find_many is used to complete\nthe method chain.\n\n@param  string      $associated_class_name\n@param  null|string $foreign_key_name\n@param  null|string $foreign_key_name_in_current_models_table\n@param  null|string $connection_name\n@return OneWrapper.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected final void updateAuthenticationDefaults() { if (loginProcessingUrl == null) { loginProcessingUrl(loginPage); } if (failureHandler == null) { failureUrl(loginPage + \"?error\"); } final LogoutConfigurer<B> logoutConfigurer = getBuilder().getConfigurer( LogoutConfigurer.class); if (logoutConfigurer != null && !logoutConfigurer.isCustomLogoutSuccess()) { logoutConfigurer.logoutSuccessUrl(loginPage + \"?logout\"); } }\n\n    ### Response:",
        "ground_truth": "Updates the default values for authentication.\n\n@throws Exception",
        "predict": " Internal method to construct the queries for both the has_one and\nhas_many methods. These two types of association are identical; the\nonly difference is whether find_one or find_many is used to complete\nthe method chain.\n\n@param  string      $associated_class_name\n@param  null|string $foreign_key_name\n@param  null|string $foreign_key_name_in_current_models_table\n@param  null|string $connection_name\n@return OneWrapper.\n\n    "
    },
    {
        "ID": 108,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String escapeLikeExpression(String likeExpression) { String normalizeLikeExpression = likeExpression; if (likeExpression != null && !likeExpression.isEmpty()) { normalizeLikeExpression = normalizeLikeExpression.replace(ESCAPE_CHAR, DOUBLE_ESCAPE_CHAR); for (String charToEscape : currentSpecialCharsSet) { normalizeLikeExpression = normalizeLikeExpression.replace(charToEscape, ESCAPE_CHAR + charToEscape); } } return normalizeLikeExpression; }\n\n    ### Response: Escaping like expressions so wildcards will not be evaluated.\nThe HQL query should have the ESCAPE_EXPRESSION in it's suffix for this to work!!!\n\nThe method returns an escaped expression, which would behave the same of all SQL repositories when\nadding escape with the ESCAPE_CHAR to the query.\n\nNote: 'like' expression are evaluated differently in MS-SQL.\n'[]' behaves similar to regex expression and we do handle it specifically in MS-SQL.\n@param likeExpression The like expression to be escaped.\n@return The escaped expression..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected final void updateAccessDefaults(B http) { if (permitAll) { PermitAllSupport.permitAll(http, loginPage, loginProcessingUrl, failureUrl); } }\n\n    ### Response:",
        "ground_truth": "Updates the default values for access.",
        "predict": " Escaping like expressions so wildcards will not be evaluated.\nThe HQL query should have the ESCAPE_EXPRESSION in it's suffix for this to work!!!\n\nThe method returns an escaped expression, which would behave the same of all SQL repositories when\nadding escape with the ESCAPE_CHAR to the query.\n\nNote: 'like' expression are evaluated differently in MS-SQL.\n'[]' behaves similar to regex expression and we do handle it specifically in MS-SQL.\n@param likeExpression The like expression to be escaped.\n@return The escaped expression..\n\n    "
    },
    {
        "ID": 109,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    async def valid_token_set(self): \"\"\"Check for validity of token, and refresh if none or expired.\"\"\" is_valid = False if self._auth_client.token: # Account for a token near expiration now = datetime.datetime.utcnow() skew = datetime.timedelta(seconds=60) if self._auth_client.expiry > (now + skew): is_valid = True return is_valid\n\n    ### Response: Check for validity of token, and refresh if none or expired..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected String mapPassword(Object passwordValue) { if (!(passwordValue instanceof String)) { // Assume it's binary passwordValue = new String((byte[]) passwordValue); } return (String) passwordValue; }\n\n    ### Response:",
        "ground_truth": "Extension point to allow customized creation of the user's password from the\nattribute stored in the directory.\n\n@param passwordValue the value of the password attribute\n@return a String representation of the password.",
        "predict": " Check for validity of token, and refresh if none or expired..\n\n    "
    },
    {
        "ID": 110,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def getSendPath(self, volume): \"\"\" Get a path appropriate for sending the volume from this Store. The path may be relative or absolute in this Store. \"\"\" try: return self._fullPath(next(iter(self.getPaths(volume)))) except StopIteration: return None\n\n    ### Response: Get a path appropriate for sending the volume from this Store.\n\n        The path may be relative or absolute in this Store..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected String extractRememberMeCookie(HttpServletRequest request) { Cookie[] cookies = request.getCookies(); if ((cookies == null) || (cookies.length == 0)) { return null; } for (Cookie cookie : cookies) { if (cookieName.equals(cookie.getName())) { return cookie.getValue(); } } return null; }\n\n    ### Response:",
        "ground_truth": "Locates the Spring Security remember me cookie in the request and returns its\nvalue. The cookie is searched for by name and also by matching the context path to\nthe cookie path.\n\n@param request the submitted request which is to be authenticated\n@return the cookie value (if present), null otherwise.",
        "predict": " Get a path appropriate for sending the volume from this Store.\n\n        The path may be relative or absolute in this Store..\n\n    "
    },
    {
        "ID": 111,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function(matrix) { // if not square if (matrix.x != matrix.y) { return } // return trace return _.filter(matrix.data, function (line, number) { return _.includes(line, number) }).length }\n\n    ### Response: computes the trace of the matrix.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected String encodeCookie(String[] cookieTokens) { StringBuilder sb = new StringBuilder(); for (int i = 0; i < cookieTokens.length; i++) { try { sb.append(URLEncoder.encode(cookieTokens[i], StandardCharsets.UTF_8.toString())); } catch (UnsupportedEncodingException e) { logger.error(e.getMessage(), e); } if (i < cookieTokens.length - 1) { sb.append(DELIMITER); } } String value = sb.toString(); sb = new StringBuilder(new String(Base64.getEncoder().encode(value.getBytes()))); while (sb.charAt(sb.length() - 1) == '=') { sb.deleteCharAt(sb.length() - 1); } return sb.toString(); }\n\n    ### Response:",
        "ground_truth": "Inverse operation of decodeCookie.\n\n@param cookieTokens the tokens to be encoded.\n@return base64 encoding of the tokens concatenated with the \":\" delimiter.",
        "predict": " computes the trace of the matrix.\n\n    "
    },
    {
        "ID": 112,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function setEncryptionConfig($var) { GPBUtil::checkMessage($var, \\Google\\Cloud\\Dataproc\\V1beta2\\EncryptionConfig::class); $this->encryption_config = $var; return $this; }\n\n    ### Response: Optional. Encryption settings for the cluster.\n\nGenerated from protobuf field .google.cloud.dataproc.v1beta2.EncryptionConfig encryption_config = 15;\n@param \\Google\\Cloud\\Dataproc\\V1beta2\\EncryptionConfig $var\n@return $this.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void setCookie(String[] tokens, int maxAge, HttpServletRequest request, HttpServletResponse response) { String cookieValue = encodeCookie(tokens); Cookie cookie = new Cookie(cookieName, cookieValue); cookie.setMaxAge(maxAge); cookie.setPath(getCookiePath(request)); if (cookieDomain != null) { cookie.setDomain(cookieDomain); } if (maxAge < 1) { cookie.setVersion(1); } if (useSecureCookie == null) { cookie.setSecure(request.isSecure()); } else { cookie.setSecure(useSecureCookie); } cookie.setHttpOnly(true); response.addCookie(cookie); }\n\n    ### Response:",
        "ground_truth": "Sets the cookie on the response.\n\nBy default a secure cookie will be used if the connection is secure. You can set\nthe {@code useSecureCookie} property to {@code false} to override this. If you set\nit to {@code true}, the cookie will always be flagged as secure. By default the cookie\nwill be marked as HttpOnly.\n\n@param tokens the tokens which will be encoded to make the cookie value.\n@param maxAge the value passed to {@link Cookie#setMaxAge(int)}\n@param request the request\n@param response the response to add the cookie to.",
        "predict": " Optional. Encryption settings for the cluster.\n\nGenerated from protobuf field .google.cloud.dataproc.v1beta2.EncryptionConfig encryption_config = 15;\n@param \\Google\\Cloud\\Dataproc\\V1beta2\\EncryptionConfig $var\n@return $this.\n\n    "
    },
    {
        "ID": 113,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function pipeBind1(index, slotOffset, v1) { var pipeInstance = load(index); return isPure(index) ? pureFunction1(slotOffset, pipeInstance.transform, v1, pipeInstance) : pipeInstance.transform(v1); }\n\n    ### Response: Invokes a pipe with 1 arguments.\n\nThis instruction acts as a guard to {@link PipeTransform#transform} invoking\nthe pipe only when an input to the pipe changes.\n\n@param index Pipe index where the pipe was stored on creation.\n@param slotOffset the offset in the reserved slot space {@link reserveSlots}\n@param v1 1st argument to {@link PipeTransform#transform}..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public Mono<Object> resolveArgument(MethodParameter parameter, BindingContext bindingContext, ServerWebExchange exchange) { ReactiveAdapter adapter = getAdapterRegistry().getAdapter(parameter.getParameterType()); Mono<SecurityContext> reactiveSecurityContext = ReactiveSecurityContextHolder.getContext(); if (reactiveSecurityContext == null) { return null; } return reactiveSecurityContext.flatMap( a -> { Object p = resolveSecurityContext(parameter, a); Mono<Object> o = Mono.justOrEmpty(p); return adapter == null ? o : Mono.just(adapter.fromPublisher(o)); }); }\n\n    ### Response:",
        "ground_truth": "resolve the argument to inject into the controller parameter.\n@param parameter the method parameter.\n@param bindingContext the binding context.\n@param exchange the server web exchange.\n@return the reactive mono object result.",
        "predict": " Invokes a pipe with 1 arguments.\n\nThis instruction acts as a guard to {@link PipeTransform#transform} invoking\nthe pipe only when an input to the pipe changes.\n\n@param index Pipe index where the pipe was stored on creation.\n@param slotOffset the offset in the reserved slot space {@link reserveSlots}\n@param v1 1st argument to {@link PipeTransform#transform}..\n\n    "
    },
    {
        "ID": 114,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def process(self): \"\"\"Process queue for these listeners. Only the items with type that matches \"\"\" with self.lock, self.enlock: queue = copy(self.queue) self.queue.clear() callbacks = copy(self.callbacks) with self.lock: rm_cb = False for ki, vi in queue.items(): if ki in self.callbacks: for item in vi: for cb in self.callbacks[ki]: if cb(item) is False: callbacks[ki].remove(cb) if not callbacks[ki]: del callbacks[ki] rm_cb = True with self.lock: if rm_cb: self.callbacks.clear() for k, v in callbacks.items(): self.callbacks[k].extend(v) return len(self.callbacks)\n\n    ### Response: Process queue for these listeners. Only the items with type that\n        matches.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private String getQueryString(final HttpServletRequest request, final Pattern artifactPattern) { final String query = request.getQueryString(); if (query == null) { return null; } final String result = artifactPattern.matcher(query).replaceFirst(\"\"); if (result.length() == 0) { return null; } // strip off the trailing & only if the artifact was the first query param return result.startsWith(\"&\") ? result.substring(1) : result; }\n\n    ### Response:",
        "ground_truth": "If present, removes the artifactParameterName and the corresponding value from the\nquery String.\n@param request\n@return the query String minus the artifactParameterName and the corresponding\nvalue.",
        "predict": " Process queue for these listeners. Only the items with type that\n        matches.\n\n    "
    },
    {
        "ID": 115,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static function createSymbolicLink(string $link, string $target) : void { $exception = null; try { $success = ErrorCatcher::run(static function() use ($link, $target) { return symlink($target, $link); }); if ($success === true) { return; } } catch (\\ErrorException $e) { $exception = $e; } throw new IoException('Error creating symbolic link ' . $link . ' to ' . $target, 0, $exception); }\n\n    ### Response: Creates a symbolic link to a target.\n\n@param string $link   The path of the symbolic link to create.\n@param string $target The target of the symbolic link.\n\n@return void\n\n@throws IoException If an error occurs..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static int getServicePort(URL casServiceUrl) { int port = casServiceUrl.getPort(); if (port == -1) { port = casServiceUrl.getDefaultPort(); } return port; }\n\n    ### Response:",
        "ground_truth": "",
        "predict": " Creates a symbolic link to a target.\n\n@param string $link   The path of the symbolic link to create.\n@param string $target The target of the symbolic link.\n\n@return void\n\n@throws IoException If an error occurs..\n\n    "
    },
    {
        "ID": 116,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (e *SimpleEventHandler) Add(s string) { e.items = append(e.items, s) e.levels = append(e.levels, e.current) }\n\n    ### Response: // Add creates a string node at the current level..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String getPrincipal() { Authentication authentication = SecurityContextHolder.getContext() .getAuthentication(); if (authentication == null) { log.warn(\"No Authentication object set in SecurityContext - returning empty String as Principal\"); return \"\"; } Object principal = authentication.getPrincipal(); if (principal instanceof LdapUserDetails) { LdapUserDetails details = (LdapUserDetails) principal; return details.getDn(); } else if (authentication instanceof AnonymousAuthenticationToken) { if (log.isDebugEnabled()) { log.debug(\"Anonymous Authentication, returning empty String as Principal\"); } return \"\"; } else { throw new IllegalArgumentException( \"The principal property of the authentication object\" + \"needs to be an LdapUserDetails.\"); } }\n\n    ### Response:",
        "ground_truth": "Get the principals of the logged in user, in this case the distinguished name.\n\n@return the distinguished name of the logged in user.",
        "predict": " // Add creates a string node at the current level..\n\n    "
    },
    {
        "ID": 117,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def AddSeat(self, seat): '''Convenience method to add a seat. Return the object path of the new seat. ''' seat_path = '/org/freedesktop/login1/seat/' + seat if seat_path in mockobject.objects: raise dbus.exceptions.DBusException('Seat %s already exists' % seat, name=MOCK_IFACE + '.SeatExists') self.AddObject(seat_path, 'org.freedesktop.login1.Seat', { 'Sessions': dbus.Array([], signature='(so)'), 'CanGraphical': False, 'CanMultiSession': True, 'CanTTY': False, 'IdleHint': False, 'ActiveSession': ('', dbus.ObjectPath('/')), 'Id': seat, 'IdleSinceHint': dbus.UInt64(0), 'IdleSinceHintMonotonic': dbus.UInt64(0), }, [ ('ActivateSession', 's', '', ''), ('Terminate', '', '', '') ]) return seat_path\n\n    ### Response: Convenience method to add a seat.\n\n    Return the object path of the new seat..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void logout(HttpServletRequest request, HttpServletResponse response, Authentication authentication) { Assert.notNull(request, \"HttpServletRequest required\"); if (invalidateHttpSession) { HttpSession session = request.getSession(false); if (session != null) { logger.debug(\"Invalidating session: \" + session.getId()); session.invalidate(); } } if (clearAuthentication) { SecurityContext context = SecurityContextHolder.getContext(); context.setAuthentication(null); } SecurityContextHolder.clearContext(); }\n\n    ### Response:",
        "ground_truth": "Requires the request to be passed in.\n\n@param request from which to obtain a HTTP session (cannot be null)\n@param response not used (can be null)\n@param authentication not used (can be null)",
        "predict": " Convenience method to add a seat.\n\n    Return the object path of the new seat..\n\n    "
    },
    {
        "ID": 118,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function setOption($key, $value): void { $method = 'set' . Str::toCamelCase($key); if (method_exists($this, $method)) { $this->$method($value); } else { $this->options[$key] = $value; } }\n\n    ### Response: Set option by key over setter\n\n@param  string $key\n@param  string $value\n\n@return void.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Authentication authenticate(Authentication auth) throws AuthenticationException { if (!(auth instanceof UsernamePasswordAuthenticationToken)) { return null; } UsernamePasswordAuthenticationToken request = (UsernamePasswordAuthenticationToken) auth; Set<GrantedAuthority> authorities; try { // Create the LoginContext object, and pass our InternallCallbackHandler LoginContext loginContext = createLoginContext( new InternalCallbackHandler(auth)); // Attempt to login the user, the LoginContext will call our // InternalCallbackHandler at this point. loginContext.login(); // Create a set to hold the authorities, and add any that have already been // applied. authorities = new HashSet<>(); // Get the subject principals and pass them to each of the AuthorityGranters Set<Principal> principals = loginContext.getSubject().getPrincipals(); for (Principal principal : principals) { for (AuthorityGranter granter : this.authorityGranters) { Set<String> roles = granter.grant(principal); // If the granter doesn't wish to grant any authorities, it should // return null. if ((roles != null) && !roles.isEmpty()) { for (String role : roles) { authorities.add(new JaasGrantedAuthority(role, principal)); } } } } // Convert the authorities set back to an array and apply it to the token. JaasAuthenticationToken result = new JaasAuthenticationToken( request.getPrincipal(), request.getCredentials(), new ArrayList<>(authorities), loginContext); // Publish the success event publishSuccessEvent(result); // we're done, return the token. return result; } catch (LoginException loginException) { AuthenticationException ase = this.loginExceptionResolver .resolveException(loginException); publishFailureEvent(request, ase); throw ase; } }\n\n    ### Response:",
        "ground_truth": "Attempts to login the user given the Authentication objects principal and\ncredential\n\n@param auth The Authentication object to be authenticated.\n\n@return The authenticated Authentication object, with it's grantedAuthorities set.\n\n@throws AuthenticationException This implementation does not handle 'locked' or\n'disabled' accounts. This method only throws a AuthenticationServiceException, with\nthe message of the LoginException that will be thrown, should the\nloginContext.login() method fail.",
        "predict": " Set option by key over setter\n\n@param  string $key\n@param  string $value\n\n@return void.\n\n    "
    },
    {
        "ID": 119,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void setup(PluginParameters parameters) { this.pomFile = parameters.pomFile; this.backupFileExtension = parameters.backupFileExtension; this.encoding = parameters.encoding; this.customSortOrderFile = parameters.customSortOrderFile; this.predefinedSortOrder = parameters.predefinedSortOrder; this.violationFilename = parameters.violationFilename; }\n\n    ### Response: Initializes the class with sortpom parameters..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static String buildProviderUrl(List<String> urls, String baseDn) { Assert.notNull(baseDn, \"The Base DN for the LDAP server must not be null.\"); Assert.notEmpty(urls, \"At least one LDAP server URL must be provided.\"); String trimmedBaseDn = baseDn.trim(); StringBuilder providerUrl = new StringBuilder(); for (String serverUrl : urls) { String trimmedUrl = serverUrl.trim(); if (\"\".equals(trimmedUrl)) { continue; } providerUrl.append(trimmedUrl); if (!trimmedUrl.endsWith(\"/\")) { providerUrl.append(\"/\"); } providerUrl.append(trimmedBaseDn); providerUrl.append(\" \"); } return providerUrl.toString(); }\n\n    ### Response:",
        "ground_truth": "Builds a Spring LDAP-compliant Provider URL string, i.e. a space-separated list of\nLDAP servers with their base DNs. As the base DN must be identical for all servers,\nit needs to be supplied only once.\n\n@param urls A list of string values which are LDAP server URLs. An example would be\n\n\nldap://ldap.company.com:389\n\n\n. LDAPS URLs may be used as well, given that Spring Security is able to connect to\nthe server.\n@param baseDn The common Base DN for all provided servers, e.g.\n\n\ndc=company,dc=com\n\n\n.\n@return A Spring Security/Spring LDAP-compliant Provider URL string.",
        "predict": " Initializes the class with sortpom parameters..\n\n    "
    },
    {
        "ID": 120,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (b *Bundle) LanguageTranslationIDs(languageTag string) []string { var ids []string b.RLock() for id := range b.translations[languageTag] { ids = append(ids, id) } b.RUnlock() return ids }\n\n    ### Response: // LanguageTranslationIDs returns the ids of all translations that have been added for a given language..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void setContextEnvironmentProperties(Map<String, Object> environment) { Assert.notEmpty(environment, \"environment must not be empty\"); this.contextEnvironmentProperties = new Hashtable<>(environment); }\n\n    ### Response:",
        "ground_truth": "Allows a custom environment properties to be used to create initial LDAP context.\n\n@param environment the additional environment parameters to use when creating the LDAP Context",
        "predict": " // LanguageTranslationIDs returns the ids of all translations that have been added for a given language..\n\n    "
    },
    {
        "ID": 121,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def enable_plugin(name, runas=None): ''' Enable a RabbitMQ plugin via the rabbitmq-plugins command. CLI Example: .. code-block:: bash salt '*' rabbitmq.enable_plugin foo ''' if runas is None and not salt.utils.platform.is_windows(): runas = salt.utils.user.get_user() cmd = [_get_rabbitmq_plugin(), 'enable', name] ret = __salt__['cmd.run_all'](cmd, reset_system_locale=False, runas=runas, python_shell=False) return _format_response(ret, 'Enabled')\n\n    ### Response: Enable a RabbitMQ plugin via the rabbitmq-plugins command.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' rabbitmq.enable_plugin foo.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public String getRedirectUrl() { return UrlUtils.buildFullRequestUrl(scheme, serverName, serverPort, requestURI, queryString); }\n\n    ### Response:",
        "ground_truth": "Indicates the URL that the user agent used for this request.\n\n@return the full URL of this request",
        "predict": " Enable a RabbitMQ plugin via the rabbitmq-plugins command.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' rabbitmq.enable_plugin foo.\n\n    "
    },
    {
        "ID": 122,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static function term($pid, $lagger_timeout = 0, $signal = SIGTERM) { $kill_time = time() + $lagger_timeout; // $term = posix_kill($pid, $signal); $term = self::signal($pid, $signal); while ( time() < $kill_time ) { if ( !self::isRunning($pid) ) return $term; usleep(20000); } return self::kill($pid); }\n\n    ### Response: Terminate a process, asking PID to terminate or killing it directly.\n\n@param int $pid\n@param int $lagger_timeout Timeout to wait before killing process if it refuses to terminate\n@param int $signal Signal to send (default to SIGTERM)\n\n@return  bool.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public int doEndTag() throws JspException { try { if (!authorized && TagLibConfig.isUiSecurityDisabled()) { pageContext.getOut().write(TagLibConfig.getSecuredUiSuffix()); } } catch (IOException e) { throw new JspException(e); } return EVAL_PAGE; }\n\n    ### Response:",
        "ground_truth": "Default processing of the end tag returning EVAL_PAGE.\n\n@return EVAL_PAGE\n@see Tag#doEndTag()",
        "predict": " Terminate a process, asking PID to terminate or killing it directly.\n\n@param int $pid\n@param int $lagger_timeout Timeout to wait before killing process if it refuses to terminate\n@param int $signal Signal to send (default to SIGTERM)\n\n@return  bool.\n\n    "
    },
    {
        "ID": 123,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def pad_token_sequence(self, tokens: Dict[str, List[TokenType]], desired_num_tokens: Dict[str, int], padding_lengths: Dict[str, int]) -> Dict[str, List[TokenType]]: \"\"\" This method pads a list of tokens to ``desired_num_tokens`` and returns a padded copy of the input tokens. If the input token list is longer than ``desired_num_tokens`` then it will be truncated. ``padding_lengths`` is used to provide supplemental padding parameters which are needed in some cases. For example, it contains the widths to pad characters to when doing character-level padding. \"\"\" raise NotImplementedError\n\n    ### Response: This method pads a list of tokens to ``desired_num_tokens`` and returns a padded copy of the\n        input tokens.  If the input token list is longer than ``desired_num_tokens`` then it will be\n        truncated.\n\n        ``padding_lengths`` is used to provide supplemental padding parameters which are needed\n        in some cases.  For example, it contains the widths to pad characters to when doing\n        character-level padding..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override protected void initUserDetailsService() throws Exception { for (UserDetailsBuilder userBuilder : userBuilders) { getUserDetailsService().createUser(userBuilder.build()); } for (UserDetails userDetails : this.users) { getUserDetailsService().createUser(userDetails); } }\n\n    ### Response:",
        "ground_truth": "Populates the users that have been added.\n\n@throws Exception",
        "predict": " This method pads a list of tokens to ``desired_num_tokens`` and returns a padded copy of the\n        input tokens.  If the input token list is longer than ``desired_num_tokens`` then it will be\n        truncated.\n\n        ``padding_lengths`` is used to provide supplemental padding parameters which are needed\n        in some cases.  For example, it contains the widths to pad characters to when doing\n        character-level padding..\n\n    "
    },
    {
        "ID": 124,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static boolean getWarningCookie(final RequestContext context) { val val = ObjectUtils.defaultIfNull(context.getFlowScope().get(\"warnCookieValue\"), Boolean.FALSE.toString()).toString(); return Boolean.parseBoolean(val); }\n\n    ### Response: Gets warning cookie.\n\n@param context the context\n@return warning cookie value, if present..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private UserDetailsService getUserDetailsService() { Map<String, ?> beans = getBeansOfType(CachingUserDetailsService.class); if (beans.size() == 0) { beans = getBeansOfType(UserDetailsService.class); } if (beans.size() == 0) { throw new ApplicationContextException(\"No UserDetailsService registered.\"); } else if (beans.size() > 1) { throw new ApplicationContextException( \"More than one UserDetailsService registered. Please \" + \"use a specific Id reference in <remember-me/> <openid-login/> or <x509 /> elements.\"); } return (UserDetailsService) beans.values().toArray()[0]; }\n\n    ### Response:",
        "ground_truth": "Obtains a user details service for use in RememberMeServices etc. Will return a\ncaching version if available so should not be used for beans which need to separate\nthe two.",
        "predict": " Gets warning cookie.\n\n@param context the context\n@return warning cookie value, if present..\n\n    "
    },
    {
        "ID": 125,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void registerLog4jMBeans() throws JMException { if (Boolean.getBoolean(\"zookeeper.jmx.log4j.disable\") == true) { return; } MBeanServer mbs = ManagementFactory.getPlatformMBeanServer(); // Create and Register the top level Log4J MBean HierarchyDynamicMBean hdm = new HierarchyDynamicMBean(); ObjectName mbo = new ObjectName(\"log4j:hiearchy=default\"); mbs.registerMBean(hdm, mbo); // Add the root logger to the Hierarchy MBean Logger rootLogger = Logger.getRootLogger(); hdm.addLoggerMBean(rootLogger.getName()); // Get each logger from the Log4J Repository and add it to // the Hierarchy MBean created above. LoggerRepository r = LogManager.getLoggerRepository(); Enumeration enumer = r.getCurrentLoggers(); Logger logger = null; while (enumer.hasMoreElements()) { logger = (Logger) enumer.nextElement(); hdm.addLoggerMBean(logger.getName()); } }\n\n    ### Response: Register the log4j JMX mbeans. Set environment variable\n\"zookeeper.jmx.log4j.disable\" to true to disable registration.\n@see http://logging.apache.org/log4j/1.2/apidocs/index.html?org/apache/log4j/jmx/package-summary.html\n@throws JMException if registration fails.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void addPkceParameters(Map<String, Object> attributes, Map<String, Object> additionalParameters) { String codeVerifier = this.codeVerifierGenerator.generateKey(); attributes.put(PkceParameterNames.CODE_VERIFIER, codeVerifier); try { String codeChallenge = createCodeChallenge(codeVerifier); additionalParameters.put(PkceParameterNames.CODE_CHALLENGE, codeChallenge); additionalParameters.put(PkceParameterNames.CODE_CHALLENGE_METHOD, \"S256\"); } catch (NoSuchAlgorithmException e) { additionalParameters.put(PkceParameterNames.CODE_CHALLENGE, codeVerifier); } }\n\n    ### Response:",
        "ground_truth": "Creates and adds additional PKCE parameters for use in the OAuth 2.0 Authorization and Access Token Requests\n\n@param attributes where {@link PkceParameterNames#CODE_VERIFIER} is stored for the token request\n@param additionalParameters where {@link PkceParameterNames#CODE_CHALLENGE} and, usually,\n{@link PkceParameterNames#CODE_CHALLENGE_METHOD} are added to be used in the authorization request.\n\n@since 5.2\n@see 1.1.  Protocol Flow\n@see 4.1.  Client Creates a Code Verifier\n@see 4.2.  Client Creates the Code Challenge",
        "predict": " Register the log4j JMX mbeans. Set environment variable\n\"zookeeper.jmx.log4j.disable\" to true to disable registration.\n@see http://logging.apache.org/log4j/1.2/apidocs/index.html?org/apache/log4j/jmx/package-summary.html\n@throws JMException if registration fails.\n\n    "
    },
    {
        "ID": 126,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def download_class(session, args, class_name): \"\"\" Try to download on-demand class. @return: Tuple of (bool, bool), where the first bool indicates whether errors occurred while parsing syllabus, the second bool indicates whether the course appears to be completed. @rtype: (bool, bool) \"\"\" logging.debug('Downloading new style (on demand) class %s', class_name) return download_on_demand_class(session, args, class_name)\n\n    ### Response: Try to download on-demand class.\n\n    @return: Tuple of (bool, bool), where the first bool indicates whether\n        errors occurred while parsing syllabus, the second bool indicates\n        whether the course appears to be completed.\n    @rtype: (bool, bool).\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected boolean requiresAuthentication(final HttpServletRequest request, final HttpServletResponse response) { final boolean serviceTicketRequest = serviceTicketRequest(request, response); final boolean result = serviceTicketRequest || proxyReceptorRequest(request) || (proxyTicketRequest(serviceTicketRequest, request)); if (logger.isDebugEnabled()) { logger.debug(\"requiresAuthentication = \" + result); } return result; }\n\n    ### Response:",
        "ground_truth": "Overridden to provide proxying capabilities.",
        "predict": " Try to download on-demand class.\n\n    @return: Tuple of (bool, bool), where the first bool indicates whether\n        errors occurred while parsing syllabus, the second bool indicates\n        whether the course appears to be completed.\n    @rtype: (bool, bool).\n\n    "
    },
    {
        "ID": 127,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (writer *baseFileWriter) Flush() { writer.lock.RLock() defer writer.lock.RUnlock() writer.flush() }\n\n    ### Response: // Flush flush logs to disk.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private boolean serviceTicketRequest(final HttpServletRequest request, final HttpServletResponse response) { boolean result = super.requiresAuthentication(request, response); if (logger.isDebugEnabled()) { logger.debug(\"serviceTicketRequest = \" + result); } return result; }\n\n    ### Response:",
        "ground_truth": "Indicates if the request is elgible to process a service ticket. This method exists\nfor readability.\n@param request\n@param response\n@return",
        "predict": " // Flush flush logs to disk.\n\n    "
    },
    {
        "ID": 128,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void setParamsToRuntimeCheck(Predicate<String> paramNames) { checkState(this.paramsToRuntimeTypeCheck == null); this.paramsToRuntimeTypeCheck = checkNotNull(paramNames); }\n\n    ### Response: Sets the names of the params that require runtime type checking against callee's types.\n\nThis mechanism is used by the TOFU runtime only to save some work when calling templates..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private boolean proxyTicketRequest(final boolean serviceTicketRequest, final HttpServletRequest request) { if (serviceTicketRequest) { return false; } final boolean result = authenticateAllArtifacts && obtainArtifact(request) != null && !authenticated(); if (logger.isDebugEnabled()) { logger.debug(\"proxyTicketRequest = \" + result); } return result; }\n\n    ### Response:",
        "ground_truth": "Indicates if the request is elgible to process a proxy ticket.\n@param request\n@return",
        "predict": " Sets the names of the params that require runtime type checking against callee's types.\n\nThis mechanism is used by the TOFU runtime only to save some work when calling templates..\n\n    "
    },
    {
        "ID": 129,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public int getVersion() throws SQLException { try { return this.submit(new VersionCallable()).get(); } catch (InterruptedException e) { logger.log(Level.SEVERE, \"Failed to get database version\", e); throw new SQLException(e); } catch (ExecutionException e) { logger.log(Level.SEVERE, \"Failed to get database version\", e); throw new SQLException(e); } }\n\n    ### Response: Returns the current version of the database.\n@return The current version of the database.\n@throws SQLException Throws if there was an error getting the current database version.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private boolean authenticated() { Authentication authentication = SecurityContextHolder.getContext() .getAuthentication(); return authentication != null && authentication.isAuthenticated() && !(authentication instanceof AnonymousAuthenticationToken); }\n\n    ### Response:",
        "ground_truth": "Determines if a user is already authenticated.\n@return",
        "predict": " Returns the current version of the database.\n@return The current version of the database.\n@throws SQLException Throws if there was an error getting the current database version.\n\n    "
    },
    {
        "ID": 130,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def perform_experiment(self, engine_list): \"\"\" Performs nearest neighbour recall experiments with custom vector data for all engines in the specified list. Returns self.result contains list of (recall, precision, search_time) tuple. All are the averaged values over all request vectors. search_time is the average retrieval/search time compared to the average exact search time. \"\"\" # We will fill this array with measures for all the engines. result = [] # For each engine, first index vectors and then retrieve neighbours for endine_idx, engine in enumerate(engine_list): print('Engine %d / %d' % (endine_idx, len(engine_list))) # Clean storage engine.clean_all_buckets() # Use this to compute average recall avg_recall = 0.0 # Use this to compute average precision avg_precision = 0.0 # Use this to compute average search time avg_search_time = 0.0 # Index all vectors and store them for index, v in enumerate(self.vectors): engine.store_vector(v, 'data_%d' % index) # Look for N nearest neighbours for query vectors for index in self.query_indices: # Get indices of the real nearest as set real_nearest = set(self.closest[index]) # We have to time the search search_time_start = time.time() # Get nearest N according to engine nearest = engine.neighbours(self.vectors[index]) # Get search time search_time = time.time() - search_time_start # For comparance we need their indices (as set) nearest = set([self.__index_of_vector(x[0]) for x in nearest]) # Remove query index from search result to make sure that # recall and precision make sense in terms of \"neighbours\". # If ONLY the query vector is retrieved, we want recall to be # zero! nearest.remove(index) # If the result list is empty, recall and precision are 0.0 if len(nearest) == 0: recall = 0.0 precision = 0.0 else: # Get intersection count inter_count = float(len(real_nearest & nearest)) # Normalize recall for this vector recall = inter_count/float(len(real_nearest)) # Normalize precision for this vector precision = inter_count/float(len(nearest)) # Add to accumulator avg_recall += recall # Add to accumulator avg_precision += precision # Add to accumulator avg_search_time += search_time # Normalize recall over query set avg_recall /= float(len(self.query_indices)) # Normalize precision over query set avg_precision /= float(len(self.query_indices)) # Normalize search time over query set avg_search_time = avg_search_time / float(len(self.query_indices)) # Normalize search time with respect to exact search avg_search_time /= self.exact_search_time_per_vector print(' recall=%f, precision=%f, time=%f' % (avg_recall, avg_precision, avg_search_time)) result.append((avg_recall, avg_precision, avg_search_time)) # Return (recall, precision, search_time) tuple return result\n\n    ### Response: Performs nearest neighbour recall experiments with custom vector data\n        for all engines in the specified list.\n\n        Returns self.result contains list of (recall, precision, search_time)\n        tuple. All are the averaged values over all request vectors.\n        search_time is the average retrieval/search time compared to the\n        average exact search time..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private boolean proxyReceptorRequest(final HttpServletRequest request) { final boolean result = proxyReceptorConfigured() && proxyReceptorMatcher.matches(request); if (logger.isDebugEnabled()) { logger.debug(\"proxyReceptorRequest = \" + result); } return result; }\n\n    ### Response:",
        "ground_truth": "Indicates if the request is elgible to be processed as the proxy receptor.\n@param request\n@return",
        "predict": " Performs nearest neighbour recall experiments with custom vector data\n        for all engines in the specified list.\n\n        Returns self.result contains list of (recall, precision, search_time)\n        tuple. All are the averaged values over all request vectors.\n        search_time is the average retrieval/search time compared to the\n        average exact search time..\n\n    "
    },
    {
        "ID": 131,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def edit_button_clicked(self, edit_button, exposure_combo_box, exposure): \"\"\"Method to handle when an edit button is clicked. :param edit_button: The edit button. :type edit_button: QPushButton :param exposure_combo_box: The combo box of the exposure, contains list of classifications. :type exposure_combo_box: QComboBox :param exposure: Exposure definition. :type exposure: dict \"\"\" # Note(IS): Do not change the text of edit button for now until we # have better behaviour. classification = self.get_classification(exposure_combo_box) if self.mode == CHOOSE_MODE: # Change mode self.mode = EDIT_MODE # Set active exposure self.active_exposure = exposure # Disable all edit button for exposure_edit_button in self.exposure_edit_buttons: exposure_edit_button.setEnabled(False) # Except one that was clicked # edit_button.setEnabled(True) # Disable all combo box for exposure_combo_box in self.exposure_combo_boxes: exposure_combo_box.setEnabled(False) # Change the edit button to cancel # edit_button.setText(tr('Cancel')) # Clear right panel clear_layout(self.right_layout) # Show edit threshold or value mapping if self.layer_mode == layer_mode_continuous: self.setup_thresholds_panel(classification) else: self.setup_value_mapping_panels(classification) self.add_buttons(classification) elif self.mode == EDIT_MODE: # Behave the same as cancel button clicked. self.cancel_button_clicked() self.parent.pbnNext.setEnabled(self.is_ready_to_next_step())\n\n    ### Response: Method to handle when an edit button is clicked.\n\n        :param edit_button: The edit button.\n        :type edit_button: QPushButton\n\n        :param exposure_combo_box: The combo box of the exposure, contains\n            list of classifications.\n        :type exposure_combo_box: QComboBox\n\n        :param exposure: Exposure definition.\n        :type exposure: dict.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected MethodSecurityExpressionOperations createSecurityExpressionRoot( Authentication authentication, MethodInvocation invocation) { MethodSecurityExpressionRoot root = new MethodSecurityExpressionRoot( authentication); root.setThis(invocation.getThis()); root.setPermissionEvaluator(getPermissionEvaluator()); root.setTrustResolver(getTrustResolver()); root.setRoleHierarchy(getRoleHierarchy()); root.setDefaultRolePrefix(getDefaultRolePrefix()); return root; }\n\n    ### Response:",
        "ground_truth": "Creates the root object for expression evaluation.",
        "predict": " Method to handle when an edit button is clicked.\n\n        :param edit_button: The edit button.\n        :type edit_button: QPushButton\n\n        :param exposure_combo_box: The combo box of the exposure, contains\n            list of classifications.\n        :type exposure_combo_box: QComboBox\n\n        :param exposure: Exposure definition.\n        :type exposure: dict.\n\n    "
    },
    {
        "ID": 132,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static <E extends Number> AbstractGroupExpression<E, E> avg(Expression<E> expression) { return new GAvg<E>(expression); }\n\n    ### Response: Create a new aggregating avg expression\n\n@param expression expression for which the accumulated average value will be used in the group by projection\n@return wrapper expression.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private Mono<JWKSet> getJWKSet() { return this.webClient.get() .uri(this.jwkSetURL) .retrieve() .bodyToMono(String.class) .map(this::parse) .doOnNext(jwkSet -> this.cachedJWKSet.set(Mono.just(jwkSet))) .cache(); }\n\n    ### Response:",
        "ground_truth": "Updates the cached JWK set from the configured URL.\n\n@return The updated JWK set.\n\n@throws RemoteKeySourceException If JWK retrieval failed.",
        "predict": " Create a new aggregating avg expression\n\n@param expression expression for which the accumulated average value will be used in the group by projection\n@return wrapper expression.\n\n    "
    },
    {
        "ID": 133,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func NewLayer(name string, fc *geojson.FeatureCollection) *Layer { return &Layer{ Name: name, Version: 1, Extent: DefaultExtent, Features: fc.Features, } }\n\n    ### Response: // NewLayer is a helper to create a Layer from a feature collection\n// and a name, it sets the default extent and version to 1..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private String utf8UrlEncode(String value) { try { return URLEncoder.encode(value, \"UTF-8\"); } catch (UnsupportedEncodingException e) { Error err = new AssertionError( \"The Java platform guarantees UTF-8 support, but it seemingly is not present.\"); err.initCause(e); throw err; } }\n\n    ### Response:",
        "ground_truth": "Performs URL encoding with UTF-8\n\n@param value the value to URL encode\n@return the encoded value",
        "predict": " // NewLayer is a helper to create a Layer from a feature collection\n// and a name, it sets the default extent and version to 1..\n\n    "
    },
    {
        "ID": 134,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _generate_union_properties(self, fields): \"\"\"Emits union instance properties from the given fields.\"\"\" for field in fields: # void types do not need properties to store additional state # information if not is_void_type(field.data_type): doc = self.process_doc( field.doc, self._docf) if field.doc else undocumented warning_str = ( ' @note Ensure the `is{}` method returns true before accessing, ' 'otherwise a runtime exception will be raised.') doc += warning_str.format(fmt_camel_upper(field.name)) self.emit_wrapped_text( self.process_doc(doc, self._docf), prefix=comment_prefix) self.emit(fmt_property(field=field)) self.emit()\n\n    ### Response: Emits union instance properties from the given fields..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private Collection<? extends GrantedAuthority> getWebSphereGroupsBasedGrantedAuthorities() { List<String> webSphereGroups = wasHelper.getGroupsForCurrentUser(); Collection<? extends GrantedAuthority> userGas = webSphereGroups2GrantedAuthoritiesMapper .getGrantedAuthorities(webSphereGroups); if (logger.isDebugEnabled()) { logger.debug(\"WebSphere groups: \" + webSphereGroups + \" mapped to Granted Authorities: \" + userGas); } return userGas; }\n\n    ### Response:",
        "ground_truth": "Get a list of Granted Authorities based on the current user's WebSphere groups.\n\n@return authorities mapped from the user's WebSphere groups.",
        "predict": " Emits union instance properties from the given fields..\n\n    "
    },
    {
        "ID": 135,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function getDescriptors(images) { const result = []; for (let image of images) { result.push(extractHOG(image)); } const heights = images.map((img) => img.height); const maxHeight = Math.max.apply(null, heights); const minHeight = Math.min.apply(null, heights); for (let i = 0; i < images.length; i++) { const img = images[i]; let bonusFeature = 1; if (minHeight !== maxHeight) { bonusFeature = (img.height - minHeight) / (maxHeight - minHeight); } result[i].push(bonusFeature); } return result; }\n\n    ### Response: Get descriptors for images from 1 identity card.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected UserDetails loadUserByAssertion(final Assertion assertion) { final CasAssertionAuthenticationToken token = new CasAssertionAuthenticationToken( assertion, \"\"); return this.authenticationUserDetailsService.loadUserDetails(token); }\n\n    ### Response:",
        "ground_truth": "Template method for retrieving the UserDetails based on the assertion. Default is\nto call configured userDetailsService and pass the username. Deployers can override\nthis method and retrieve the user based on any criteria they desire.\n\n@param assertion The CAS Assertion.\n@return the UserDetails.",
        "predict": " Get descriptors for images from 1 identity card.\n\n    "
    },
    {
        "ID": 136,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func NewUserStatus(httpResponse *http.Response) (*UserStatus, error) { statusResponse := &UserStatus{HTTPResponse: httpResponse} defer closeResponseBody(httpResponse) body, err := ioutil.ReadAll(httpResponse.Body) if err != nil { Logger.Println(\"Error reading from API:\", err) return statusResponse, err } err = json.Unmarshal(body, statusResponse) if err != nil { Logger.Println(\"Error parsing JSON:\", err) return statusResponse, err } statusResponse.ID = strconv.Itoa(statusResponse.StatusData.ID) return statusResponse, nil }\n\n    ### Response: // NewUserStatus returns an instance of UserStatus.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected Object getPreAuthenticatedPrincipal(HttpServletRequest httpRequest) { Object principal = wasHelper.getCurrentUserName(); if (logger.isDebugEnabled()) { logger.debug(\"PreAuthenticated WebSphere principal: \" + principal); } return principal; }\n\n    ### Response:",
        "ground_truth": "Return the WebSphere user name.",
        "predict": " // NewUserStatus returns an instance of UserStatus.\n\n    "
    },
    {
        "ID": 137,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def update_metadata(source, target) -> None: \"\"\"Update the namespace and annotation metadata in the target graph. :param pybel.BELGraph source: :param pybel.BELGraph target: \"\"\" target.namespace_url.update(source.namespace_url) target.namespace_pattern.update(source.namespace_pattern) target.annotation_url.update(source.annotation_url) target.annotation_pattern.update(source.annotation_pattern) for keyword, values in source.annotation_list.items(): if keyword not in target.annotation_list: target.annotation_list[keyword] = values else: target.annotation_list[keyword].update(values)\n\n    ### Response: Update the namespace and annotation metadata in the target graph.\n\n    :param pybel.BELGraph source:\n    :param pybel.BELGraph target:.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static byte[] concatenate(byte[]... arrays) { int length = 0; for (byte[] array : arrays) { length += array.length; } byte[] newArray = new byte[length]; int destPos = 0; for (byte[] array : arrays) { System.arraycopy(array, 0, newArray, destPos, array.length); destPos += array.length; } return newArray; }\n\n    ### Response:",
        "ground_truth": "Combine the individual byte arrays into one array.",
        "predict": " Update the namespace and annotation metadata in the target graph.\n\n    :param pybel.BELGraph source:\n    :param pybel.BELGraph target:.\n\n    "
    },
    {
        "ID": 138,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def colformat(strings, num_sep_spaces=1, terminal_width=None): \"\"\"Format a list of strings like ls does multi-column output.\"\"\" if terminal_width is None: terminal_width = get_terminal_size().columns if not strings: return num_items = len(strings) max_len = max([len(strip_ansi_escapes(s)) for s in strings]) num_columns = min( int((terminal_width + num_sep_spaces) / (max_len + num_sep_spaces)), num_items) num_columns = max(1, num_columns) num_lines = int(math.ceil(float(num_items) / num_columns)) num_columns = int(math.ceil(float(num_items) / num_lines)) num_elements_last_column = num_items % num_lines if num_elements_last_column == 0: num_elements_last_column = num_lines lines = [] for i in range(num_lines): line_size = num_columns if i >= num_elements_last_column: line_size -= 1 lines.append([None] * line_size) for i, line in enumerate(lines): line_size = len(line) for j in range(line_size): k = i + num_lines * j item = strings[k] if j % line_size != line_size - 1: item_len = len(strip_ansi_escapes(item)) item = item + ' ' * (max_len - item_len) line[j] = item sep = ' ' * num_sep_spaces for line in lines: yield sep.join(line)\n\n    ### Response: Format a list of strings like ls does multi-column output..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static byte[] subArray(byte[] array, int beginIndex, int endIndex) { int length = endIndex - beginIndex; byte[] subarray = new byte[length]; System.arraycopy(array, beginIndex, subarray, 0, length); return subarray; }\n\n    ### Response:",
        "ground_truth": "Extract a sub array of bytes out of the byte array.\n@param array the byte array to extract from\n@param beginIndex the beginning index of the sub array, inclusive\n@param endIndex the ending index of the sub array, exclusive",
        "predict": " Format a list of strings like ls does multi-column output..\n\n    "
    },
    {
        "ID": 139,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function skipCondition() { // Reach the opening parenthesis $this->skipToString('('); // Iterate through tokens until we have a match for every left parenthesis $parens = 0; while (++$this->i < $this->cnt) { if ($this->tokens[$this->i] === ')') { if ($parens) { --$parens; } else { break; } } elseif ($this->tokens[$this->i] === '(') { ++$parens; } } }\n\n    ### Response: Skip the condition of a control structure\n\n@return void.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public List<GrantedAuthority> getGrantedAuthorities(Collection<String> attributes) { ArrayList<GrantedAuthority> gaList = new ArrayList<>(); for (String attribute : attributes) { Collection<GrantedAuthority> c = attributes2grantedAuthoritiesMap .get(attribute); if (c != null) { gaList.addAll(c); } } gaList.trimToSize(); return gaList; }\n\n    ### Response:",
        "ground_truth": "Map the given array of attributes to Spring Security GrantedAuthorities.",
        "predict": " Skip the condition of a control structure\n\n@return void.\n\n    "
    },
    {
        "ID": 140,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _auth_key_callback(self, auth_key): \"\"\" Callback from the sender whenever it needed to generate a new authorization key. This means we are not authorized. \"\"\" self.session.auth_key = auth_key self.session.save()\n\n    ### Response: Callback from the sender whenever it needed to generate a\n        new authorization key. This means we are not authorized..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private Map<String, Collection<GrantedAuthority>> preProcessMap(Map<?, ?> orgMap) { Map<String, Collection<GrantedAuthority>> result = new HashMap<String, Collection<GrantedAuthority>>( orgMap.size()); for (Map.Entry<?, ?> entry : orgMap.entrySet()) { Assert.isInstanceOf(String.class, entry.getKey(), \"attributes2grantedAuthoritiesMap contains non-String objects as keys\"); result.put((String) entry.getKey(), getGrantedAuthorityCollection(entry.getValue())); } return result; }\n\n    ### Response:",
        "ground_truth": "Preprocess the given map to convert all the values to GrantedAuthority collections\n\n@param orgMap The map to process\n@return the processed Map",
        "predict": " Callback from the sender whenever it needed to generate a\n        new authorization key. This means we are not authorized..\n\n    "
    },
    {
        "ID": 141,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function onScroll(body, evt) { if (body.scrollTop > 0) { $.addClass(body, \"top\"); } else { $.removeClass(body, \"top\"); } if (body.scrollHeight - body.scrollTop > body.clientHeight) { $.addClass(body, \"bottom\"); } else { $.removeClass(body, \"bottom\"); } }\n\n    ### Response: Help the user to understand that the `body` can or cannot scroll to\nthe top or to the bottom, or both.\nIf the user can scroll up, a thin top inset shadow is displayed.\nIf the user can scroll down, a thin bottom inset shadow is displayed..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private Collection<GrantedAuthority> getGrantedAuthorityCollection(Object value) { Collection<GrantedAuthority> result = new ArrayList<>(); addGrantedAuthorityCollection(result, value); return result; }\n\n    ### Response:",
        "ground_truth": "Convert the given value to a collection of Granted Authorities\n\n@param value The value to convert to a GrantedAuthority Collection\n@return Collection containing the GrantedAuthority Collection",
        "predict": " Help the user to understand that the `body` can or cannot scroll to\nthe top or to the bottom, or both.\nIf the user can scroll up, a thin top inset shadow is displayed.\nIf the user can scroll down, a thin bottom inset shadow is displayed..\n\n    "
    },
    {
        "ID": 142,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (s *IGDService) GetExternalIPAddress() (net.IP, error) { tpl := `<u:GetExternalIPAddress xmlns:u=\"%s\" />` body := fmt.Sprintf(tpl, s.URN) response, err := soapRequest(s.URL, s.URN, \"GetExternalIPAddress\", body) if err != nil { return nil, err } envelope := &soapGetExternalIPAddressResponseEnvelope{} err = xml.Unmarshal(response, envelope) if err != nil { return nil, err } result := net.ParseIP(envelope.Body.GetExternalIPAddressResponse.NewExternalIPAddress) return result, nil }\n\n    ### Response: // GetExternalIPAddress queries the IGD service for its external IP address.\n// Returns nil if the external IP address is invalid or undefined, along with\n// any relevant errors.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void addGrantedAuthorityCollection(Collection<GrantedAuthority> result, Object value) { if (value == null) { return; } if (value instanceof Collection<?>) { addGrantedAuthorityCollection(result, (Collection<?>) value); } else if (value instanceof Object[]) { addGrantedAuthorityCollection(result, (Object[]) value); } else if (value instanceof String) { addGrantedAuthorityCollection(result, (String) value); } else if (value instanceof GrantedAuthority) { result.add((GrantedAuthority) value); } else { throw new IllegalArgumentException(\"Invalid object type: \" + value.getClass().getName()); } }\n\n    ### Response:",
        "ground_truth": "Convert the given value to a collection of Granted Authorities, adding the result\nto the given result collection.\n\n@param value The value to convert to a GrantedAuthority Collection\n@return Collection containing the GrantedAuthority Collection",
        "predict": " // GetExternalIPAddress queries the IGD service for its external IP address.\n// Returns nil if the external IP address is invalid or undefined, along with\n// any relevant errors.\n\n    "
    },
    {
        "ID": 143,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function createParticleBuffers ( geometry ) { geometry.__webglVertexBuffer = _gl.createBuffer(); geometry.__webglColorBuffer = _gl.createBuffer(); _this.info.geometries ++; }\n\n    ### Response: Internal functions Buffer allocation.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected Object getPreAuthenticatedPrincipal(HttpServletRequest httpRequest) { Object principal = httpRequest.getUserPrincipal() == null ? null : httpRequest .getUserPrincipal().getName(); if (logger.isDebugEnabled()) { logger.debug(\"PreAuthenticated J2EE principal: \" + principal); } return principal; }\n\n    ### Response:",
        "ground_truth": "Return the J2EE user name.",
        "predict": " Internal functions Buffer allocation.\n\n    "
    },
    {
        "ID": 144,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function createCron($environmentUuid, $command, $frequency, $label) { $options = [ 'form_params' => [ 'command' => $command, 'frequency' => $frequency, 'label' => $label, ], ]; return new OperationResponse( $this->connector->request('post', \"/environments/${environmentUuid}/crons\", $this->query, $options) ); }\n\n    ### Response: Add a cron task.\n\n@param string $environmentUuid\n@param string $command\n@param string $frequency\n@param string $label\n@return OperationResponse.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SuppressWarnings(\"unchecked\") public <C> C getSharedObject(Class<C> sharedType) { return (C) this.sharedObjects.get(sharedType); }\n\n    ### Response:",
        "ground_truth": "Gets a shared Object. Note that object heirarchies are not considered.\n\n@param sharedType the type of the shared Object\n@return the shared Object or null if it is not found",
        "predict": " Add a cron task.\n\n@param string $environmentUuid\n@param string $command\n@param string $frequency\n@param string $label\n@return OperationResponse.\n\n    "
    },
    {
        "ID": 145,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _group_percentile(self, clusters, adj_list, counts): ''' Return \"groups\" for the the percentile method. Note that grouping isn't really compatible with the percentile method. This just returns the retained UMIs in a structure similar to other methods ''' retained_umis = self._get_best_percentile(clusters, counts) groups = [[x] for x in retained_umis] return groups\n\n    ### Response: Return \"groups\" for the the percentile method. Note\n        that grouping isn't really compatible with the percentile\n        method. This just returns the retained UMIs in a structure similar\n        to other methods.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected String buildHttpsRedirectUrlForRequest(HttpServletRequest request) throws IOException, ServletException { int serverPort = portResolver.getServerPort(request); Integer httpsPort = portMapper.lookupHttpsPort(Integer.valueOf(serverPort)); if (httpsPort != null) { RedirectUrlBuilder urlBuilder = new RedirectUrlBuilder(); urlBuilder.setScheme(\"https\"); urlBuilder.setServerName(request.getServerName()); urlBuilder.setPort(httpsPort.intValue()); urlBuilder.setContextPath(request.getContextPath()); urlBuilder.setServletPath(request.getServletPath()); urlBuilder.setPathInfo(request.getPathInfo()); urlBuilder.setQuery(request.getQueryString()); return urlBuilder.getUrl(); } // Fall through to server-side forward with warning message logger.warn(\"Unable to redirect to HTTPS as no port mapping found for HTTP port \" + serverPort); return null; }\n\n    ### Response:",
        "ground_truth": "Builds a URL to redirect the supplied request to HTTPS. Used to redirect the\ncurrent request to HTTPS, before doing a forward to the login page.",
        "predict": " Return \"groups\" for the the percentile method. Note\n        that grouping isn't really compatible with the percentile\n        method. This just returns the retained UMIs in a structure similar\n        to other methods.\n\n    "
    },
    {
        "ID": 146,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function getDropSchemaSQL(array $classes) { $visitor = new DropSchemaSqlCollector($this->platform); $schema = $this->getSchemaFromMetadata($classes); $sm = $this->em->getConnection()->getSchemaManager(); $fullSchema = $sm->createSchema(); foreach ($fullSchema->getTables() as $table) { if (! $schema->hasTable($table->getName())) { foreach ($table->getForeignKeys() as $foreignKey) { /** @var $foreignKey \\Doctrine\\DBAL\\Schema\\ForeignKeyConstraint */ if ($schema->hasTable($foreignKey->getForeignTableName())) { $visitor->acceptForeignKey($table, $foreignKey); } } } else { $visitor->acceptTable($table); foreach ($table->getForeignKeys() as $foreignKey) { $visitor->acceptForeignKey($table, $foreignKey); } } } if ($this->platform->supportsSequences()) { foreach ($schema->getSequences() as $sequence) { $visitor->acceptSequence($sequence); } foreach ($schema->getTables() as $table) { /** @var $sequence Table */ if ($table->hasPrimaryKey()) { $columns = $table->getPrimaryKey()->getColumns(); if (count($columns) === 1) { $checkSequence = $table->getName() . '_' . $columns[0] . '_seq'; if ($fullSchema->hasSequence($checkSequence)) { $visitor->acceptSequence($fullSchema->getSequence($checkSequence)); } } } } } return $visitor->getQueries(); }\n\n    ### Response: Gets SQL to drop the tables defined by the passed classes.\n\n@param ClassMetadata[] $classes\n\n@return string[].\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Object invoke(JoinPoint jp, AspectJCallback advisorProceed) { InterceptorStatusToken token = super .beforeInvocation(new MethodInvocationAdapter(jp)); Object result; try { result = advisorProceed.proceedWithObject(); } finally { super.finallyInvocation(token); } return super.afterInvocation(token, result); }\n\n    ### Response:",
        "ground_truth": "Method that is suitable for user with traditional AspectJ-code aspects.\n\n@param jp The AspectJ joint point being invoked which requires a security decision\n@param advisorProceed the advice-defined anonymous class that implements\n{@code AspectJCallback} containing a simple {@code return proceed();} statement\n\n@return The returned value from the method invocation",
        "predict": " Gets SQL to drop the tables defined by the passed classes.\n\n@param ClassMetadata[] $classes\n\n@return string[].\n\n    "
    },
    {
        "ID": 147,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func Get(data []int) Stats { if len(data) == 0 { return Stats{} } min, max := minmax(data) return Stats{ Avg: avg(data) / msFactor, Min: min / msFactor, Max: max / msFactor, P50: p(data, 0.5) / msFactor, P75: p(data, 0.75) / msFactor, P90: p(data, 0.9) / msFactor, P95: p(data, 0.95) / msFactor, P99: p(data, 0.99) / msFactor, } }\n\n    ### Response: // Accepts a sorted slice of durations in nanoseconds\n// Returns a Stats struct of millisecond statistics.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static String hasRole(String role) { Assert.isTrue( !role.startsWith(\"ROLE_\"), () -> role + \" should not start with ROLE_ since ROLE_ is automatically prepended when using hasRole. Consider using hasAuthority or access instead.\"); return \"ROLE_\" + role; }\n\n    ### Response:",
        "ground_truth": "Creates a String for specifying a user requires a role.\n\n@param role the role that should be required which is prepended with ROLE_\nautomatically (i.e. USER, ADMIN, etc). It should not start with ROLE_\n@return the {@link ConfigAttribute} expressed as a String",
        "predict": " // Accepts a sorted slice of durations in nanoseconds\n// Returns a Stats struct of millisecond statistics.\n\n    "
    },
    {
        "ID": 148,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def send_one_ping(self, current_socket): \"\"\" Send one ICMP ECHO_REQUEST. \"\"\" # Header is type (8), code (8), checksum (16), id (16), sequence (16) checksum = 0 # Make a dummy header with a 0 checksum. header = struct.pack( \"!BBHHH\", ICMP_ECHO, 0, checksum, self.own_id, self.seq_number ) padBytes = [] startVal = 0x42 for i in range(startVal, startVal + (self.packet_size)): padBytes += [(i & 0xff)] # Keep chars in the 0-255 range data = bytes(padBytes) # Calculate the checksum on the data and the dummy header. checksum = calculate_checksum(header + data) # Checksum is in network order # Now that we have the right checksum, we put that in. It's just easier # to make up a new header than to stuff it into the dummy. header = struct.pack( \"!BBHHH\", ICMP_ECHO, 0, checksum, self.own_id, self.seq_number ) packet = header + data send_time = default_timer() try: current_socket.sendto(packet, (self.destination, 1)) # Port number is irrelevant for ICMP except socket.error as e: print(\"General failure (%s)\" % (e.args[1])) current_socket.close() return return send_time\n\n    ### Response: Send one ICMP ECHO_REQUEST..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static String[] hasAnyRole(String... roles) { for (int i = 0; i < roles.length; i++) { roles[i] = \"ROLE_\" + roles[i]; } return roles; }\n\n    ### Response:",
        "ground_truth": "Creates a String for specifying that a user requires one of many roles.\n\n@param roles the roles that the user should have at least one of (i.e. ADMIN, USER,\netc). Each role should not start with ROLE_ since it is automatically prepended\nalready.\n@return the {@link ConfigAttribute} expressed as a String",
        "predict": " Send one ICMP ECHO_REQUEST..\n\n    "
    },
    {
        "ID": 149,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public int write(SegmentIndexBuffer sib, File sibFile) throws IOException { create(sibFile); RandomAccessFile raf = new RandomAccessFile(sibFile, \"rw\"); FileChannel channel = raf.getChannel(); writeVersion(channel); int length = sib.write(channel); length += STORAGE_VERSION_LENGTH; raf.setLength(length); channel.force(true); channel.close(); raf.close(); if(_logger.isTraceEnabled()) { _logger.trace(\"write \" + sibFile.getAbsolutePath()); } return length; }\n\n    ### Response: Writes to the specified segment index buffer file.\n\n@param sib     - the segment index buffer\n@param sibFile - the segment index buffer file to write to\n@throws IOException.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected UserDetails processAutoLoginCookie(String[] cookieTokens, HttpServletRequest request, HttpServletResponse response) { if (cookieTokens.length != 2) { throw new InvalidCookieException(\"Cookie token did not contain \" + 2 + \" tokens, but contained '\" + Arrays.asList(cookieTokens) + \"'\"); } final String presentedSeries = cookieTokens[0]; final String presentedToken = cookieTokens[1]; PersistentRememberMeToken token = tokenRepository .getTokenForSeries(presentedSeries); if (token == null) { // No series match, so we can't authenticate using this cookie throw new RememberMeAuthenticationException( \"No persistent token found for series id: \" + presentedSeries); } // We have a match for this user/series combination if (!presentedToken.equals(token.getTokenValue())) { // Token doesn't match series value. Delete all logins for this user and throw // an exception to warn them. tokenRepository.removeUserTokens(token.getUsername()); throw new CookieTheftException( messages.getMessage( \"PersistentTokenBasedRememberMeServices.cookieStolen\", \"Invalid remember-me token (Series/token) mismatch. Implies previous cookie theft attack.\")); } if (token.getDate().getTime() + getTokenValiditySeconds() * 1000L < System .currentTimeMillis()) { throw new RememberMeAuthenticationException(\"Remember-me login has expired\"); } // Token also matches, so login is valid. Update the token value, keeping the // *same* series number. if (logger.isDebugEnabled()) { logger.debug(\"Refreshing persistent login token for user '\" + token.getUsername() + \"', series '\" + token.getSeries() + \"'\"); } PersistentRememberMeToken newToken = new PersistentRememberMeToken( token.getUsername(), token.getSeries(), generateTokenData(), new Date()); try { tokenRepository.updateToken(newToken.getSeries(), newToken.getTokenValue(), newToken.getDate()); addCookie(newToken, request, response); } catch (Exception e) { logger.error(\"Failed to update token: \", e); throw new RememberMeAuthenticationException( \"Autologin failed due to data access problem\"); } return getUserDetailsService().loadUserByUsername(token.getUsername()); }\n\n    ### Response:",
        "ground_truth": "Locates the presented cookie data in the token repository, using the series id. If\nthe data compares successfully with that in the persistent store, a new token is\ngenerated and stored with the same series. The corresponding cookie value is set on\nthe response.\n\n@param cookieTokens the series and token values\n\n@throws RememberMeAuthenticationException if there is no stored token corresponding\nto the submitted cookie, or if the token in the persistent store has expired.\n@throws InvalidCookieException if the cookie doesn't have two tokens as expected.\n@throws CookieTheftException if a presented series value is found, but the stored\ntoken is different from the one presented.",
        "predict": " Writes to the specified segment index buffer file.\n\n@param sib     - the segment index buffer\n@param sibFile - the segment index buffer file to write to\n@throws IOException.\n\n    "
    },
    {
        "ID": 150,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def locknode(node, lock=True): \"\"\"Contextmanager that will lock or unlock the given node and afterwards, restore the original status :param node: the node to lock/unlock or nodes :type node: str | list | tuple :param lock: True for locking, False for unlocking :type lock: bool :returns: None :rtype: None :raises: None \"\"\" oldstatus = cmds.lockNode(node, q=1) cmds.lockNode(node, lock=lock) try: yield finally: if isinstance(node, basestring): if cmds.objExists(node): cmds.lockNode(node, lock=oldstatus[0]) else: for n, l in zip(node, oldstatus): if cmds.objExists(n): cmds.lockNode(n, lock=l)\n\n    ### Response: Contextmanager that will lock or unlock the given node and afterwards, restore the original status\n\n    :param node: the node to lock/unlock or nodes\n    :type node: str | list | tuple\n    :param lock: True for locking, False for unlocking\n    :type lock: bool\n    :returns: None\n    :rtype: None\n    :raises: None.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void onLoginSuccess(HttpServletRequest request, HttpServletResponse response, Authentication successfulAuthentication) { String username = successfulAuthentication.getName(); logger.debug(\"Creating new persistent login for user \" + username); PersistentRememberMeToken persistentToken = new PersistentRememberMeToken( username, generateSeriesData(), generateTokenData(), new Date()); try { tokenRepository.createNewToken(persistentToken); addCookie(persistentToken, request, response); } catch (Exception e) { logger.error(\"Failed to save persistent token \", e); } }\n\n    ### Response:",
        "ground_truth": "Creates a new persistent login token with a new series number, stores the data in\nthe persistent token repository and adds the corresponding cookie to the response.",
        "predict": " Contextmanager that will lock or unlock the given node and afterwards, restore the original status\n\n    :param node: the node to lock/unlock or nodes\n    :type node: str | list | tuple\n    :param lock: True for locking, False for unlocking\n    :type lock: bool\n    :returns: None\n    :rtype: None\n    :raises: None.\n\n    "
    },
    {
        "ID": 151,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (r *Recorder) RecordSpan(span *spanS) { // If we're not announced and not in test mode then just // return if !r.testMode && !sensor.agent.canSend() { return } var data = &jsonData{} kindTag := span.getSpanKindTag() data.SDK = &jsonSDKData{ Name: span.Operation, Type: kindTag, Custom: &jsonCustomData{Tags: span.Tags, Logs: span.collectLogs()}} baggage := make(map[string]string) span.context.ForeachBaggageItem(func(k string, v string) bool { baggage[k] = v return true }) if len(baggage) > 0 { data.SDK.Custom.Baggage = baggage } data.Service = sensor.serviceName var parentID *int64 if span.ParentSpanID == 0 { parentID = nil } else { parentID = &span.ParentSpanID } r.Lock() defer r.Unlock() if len(r.spans) == sensor.options.MaxBufferedSpans { r.spans = r.spans[1:] } r.spans = append(r.spans, jsonSpan{ TraceID: span.context.TraceID, ParentID: parentID, SpanID: span.context.SpanID, Timestamp: uint64(span.Start.UnixNano()) / uint64(time.Millisecond), Duration: uint64(span.Duration) / uint64(time.Millisecond), Name: \"sdk\", Error: span.Error, Ec: span.Ec, Lang: \"go\", From: sensor.agent.from, Kind: span.getSpanKindInt(), Data: data}) if r.testMode || !sensor.agent.canSend() { return } if len(r.spans) >= sensor.options.ForceTransmissionStartingAt { log.debug(\"Forcing spans to agent. Count:\", len(r.spans)) go r.send() } }\n\n    ### Response: // RecordSpan accepts spans to be recorded and and added to the span queue\n// for eventual reporting to the host agent..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected Authentication attemptSwitchUser(HttpServletRequest request) throws AuthenticationException { UsernamePasswordAuthenticationToken targetUserRequest; String username = request.getParameter(this.usernameParameter); if (username == null) { username = \"\"; } if (this.logger.isDebugEnabled()) { this.logger.debug(\"Attempt to switch to user [\" + username + \"]\"); } UserDetails targetUser = this.userDetailsService.loadUserByUsername(username); this.userDetailsChecker.check(targetUser); // OK, create the switch user token targetUserRequest = createSwitchUserToken(request, targetUser); if (this.logger.isDebugEnabled()) { this.logger.debug(\"Switch User Token [\" + targetUserRequest + \"]\"); } // publish event if (this.eventPublisher != null) { this.eventPublisher.publishEvent(new AuthenticationSwitchUserEvent( SecurityContextHolder.getContext().getAuthentication(), targetUser)); } return targetUserRequest; }\n\n    ### Response:",
        "ground_truth": "Attempt to switch to another user. If the user does not exist or is not active,\nreturn null.\n\n@return The new Authentication request if successfully switched to\nanother user, null otherwise.\n\n@throws UsernameNotFoundException If the target user is not found.\n@throws LockedException if the account is locked.\n@throws DisabledException If the target user is disabled.\n@throws AccountExpiredException If the target user account is expired.\n@throws CredentialsExpiredException If the target user credentials are expired.",
        "predict": " // RecordSpan accepts spans to be recorded and and added to the span queue\n// for eventual reporting to the host agent..\n\n    "
    },
    {
        "ID": 152,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function locals (router) { router.use((req, res, next) => { absoluteUrl.attach(req) // requested resource res.locals.iri = req.iri // requested resource parsed into URL object res.locals.url = url.parse(res.locals.iri) // dummy translation res.locals.t = res.locals.t || ((x) => { return x.substring(x.indexOf(':') + 1) }) next() }) }\n\n    ### Response: Adds router and request locals variables\n@param router.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected Authentication attemptExitUser(HttpServletRequest request) throws AuthenticationCredentialsNotFoundException { // need to check to see if the current user has a SwitchUserGrantedAuthority Authentication current = SecurityContextHolder.getContext().getAuthentication(); if (null == current) { throw new AuthenticationCredentialsNotFoundException( this.messages.getMessage(\"SwitchUserFilter.noCurrentUser\", \"No current user associated with this request\")); } // check to see if the current user did actual switch to another user // if so, get the original source user so we can switch back Authentication original = getSourceAuthentication(current); if (original == null) { this.logger.debug(\"Could not find original user Authentication object!\"); throw new AuthenticationCredentialsNotFoundException( this.messages.getMessage(\"SwitchUserFilter.noOriginalAuthentication\", \"Could not find original Authentication object\")); } // get the source user details UserDetails originalUser = null; Object obj = original.getPrincipal(); if ((obj != null) && obj instanceof UserDetails) { originalUser = (UserDetails) obj; } // publish event if (this.eventPublisher != null) { this.eventPublisher.publishEvent( new AuthenticationSwitchUserEvent(current, originalUser)); } return original; }\n\n    ### Response:",
        "ground_truth": "Authentication object or null\notherwise.\n\n@throws AuthenticationCredentialsNotFoundException If no\nAuthentication associated with this request.",
        "predict": " Adds router and request locals variables\n@param router.\n\n    "
    },
    {
        "ID": 153,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function getRoutes() { if (0 === count($this->routes)) { return $this->router->getRouteCollection()->all(); } $routes = []; foreach ($this->routes as $name) { $route = $this->router->getRouteCollection()->get($name); if (null !== $route) { $routes[$name] = $route; } } return $routes; }\n\n    ### Response: Returns the list of routes that should be rendered.\n\n@return Symfony\\Component\\Routing\\Route[] List of routes that should be rendered..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void setExitUserUrl(String exitUserUrl) { Assert.isTrue(UrlUtils.isValidRedirectUrl(exitUserUrl), \"exitUserUrl cannot be empty and must be a valid redirect URL\"); this.exitUserMatcher = createMatcher(exitUserUrl); }\n\n    ### Response:",
        "ground_truth": "Set the URL to respond to exit user processing.\n\n@param exitUserUrl The exit user URL.",
        "predict": " Returns the list of routes that should be rendered.\n\n@return Symfony\\Component\\Routing\\Route[] List of routes that should be rendered..\n\n    "
    },
    {
        "ID": 154,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public boolean deleteProfile() { String[] profileDirs = {smallPrefsFolder, largePrefsFolder, cachePrefsFolder}; // Assuming if any of those are main profile, skip the whole delete for (String profileDir : profileDirs) { if (isMainProfile(profileDir)) { logger.finer(\"Skipping profile deletion since '\" + profileDir + \"' is the main profile.\"); return false; } } for (String profileDir : profileDirs) { File currentDirHandle = new File(profileDir); if (!currentDirHandle.exists()) { logger.finer(\"Skipping profile deletion for '\" + profileDir + \"' since it doesn't exist.\"); continue; } boolean deleted = deleteFolder(profileDir); if (!deleted) { final int retryIntervalMs = 500; final int retryMaxCount = 10; int retryCount = 0; boolean ok = false; logger.warning(\"Profile could not be deleted, retrying...\"); do { try { Thread.sleep(retryIntervalMs); } catch (InterruptedException e) { // fall through } ok = deleteFolder(profileDir); retryCount++; if (retryCount > retryMaxCount) { break; } } while (!ok); if (!ok) { logger.severe( \"Could not delete profile in '\" + profileDir + \"'. Skipping further deletion.\"); return false; } else { logger.warning(\"Deleted profile, retry count = \" + retryCount); } } else { logger.finer(\"Deleted profile in '\" + profileDir + \"'\"); } } return true; }\n\n    ### Response: Deletes prefs folders for Does nothing if prefs folders are default main user profile.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @RequestMapping(value = \"/hello.htm\", method = RequestMethod.GET) public ModelAndView displayPublicIndex() { Contact rnd = contactManager.getRandomContact(); return new ModelAndView(\"hello\", \"contact\", rnd); }\n\n    ### Response:",
        "ground_truth": "The public index page, used for unauthenticated users.",
        "predict": " Deletes prefs folders for Does nothing if prefs folders are default main user profile.\n\n    "
    },
    {
        "ID": 155,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function searchLayouts($objectList, $options = []) { $url = $this->instanceURLRepo->get(); $url .= $this->resourceRepo->get('search'); $url .= '/layout/?q='; $url .= urlencode($objectList); $searchLayouts = $this->request($url, $options); return $searchLayouts; }\n\n    ### Response: Returns search result layout information for the objects in the query string.\n\n@param array $objectList\n@param array $options\n\n@return array.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Bean(name = AbstractSecurityWebApplicationInitializer.DEFAULT_FILTER_NAME) public Filter springSecurityFilterChain() throws Exception { boolean hasConfigurers = webSecurityConfigurers != null && !webSecurityConfigurers.isEmpty(); if (!hasConfigurers) { WebSecurityConfigurerAdapter adapter = objectObjectPostProcessor .postProcess(new WebSecurityConfigurerAdapter() { }); webSecurity.apply(adapter); } return webSecurity.build(); }\n\n    ### Response:",
        "ground_truth": "Creates the Spring Security Filter Chain\n@return the {@link Filter} that represents the security filter chain\n@throws Exception",
        "predict": " Returns search result layout information for the objects in the query string.\n\n@param array $objectList\n@param array $options\n\n@return array.\n\n    "
    },
    {
        "ID": 156,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static function expectedToken( $expected, array $token = null, DocLexer $lexer = null ) { if ((null === $token) && $lexer) { $token = $lexer->lookahead; } $message = \"Expected $expected, received \"; if ($token) { $message .= \"'{$token['value']}' at position {$token['position']}.\"; } else { $message .= 'end of string.'; } return new self($message); }\n\n    ### Response: Creates a new exception for the expected token.\n\n@param string   $expected The expected token.\n@param array    $token    The actual token.\n@param DocLexer $lexer    The lexer.\n\n@return SyntaxException The new exception..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public Jwt decode(String token) throws JwtException { JWT jwt = parse(token); if (jwt instanceof SignedJWT) { Jwt createdJwt = createJwt(token, jwt); return validateJwt(createdJwt); } throw new JwtException(\"Unsupported algorithm of \" + jwt.getHeader().getAlgorithm()); }\n\n    ### Response:",
        "ground_truth": "Decode and validate the JWT from its compact claims representation format\n\n@param token the JWT value\n@return a validated {@link Jwt}\n@throws JwtException",
        "predict": " Creates a new exception for the expected token.\n\n@param string   $expected The expected token.\n@param array    $token    The actual token.\n@param DocLexer $lexer    The lexer.\n\n@return SyntaxException The new exception..\n\n    "
    },
    {
        "ID": 157,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def resize2fs(device): ''' Resizes the filesystem. CLI Example: .. code-block:: bash salt '*' disk.resize2fs /dev/sda1 ''' cmd = 'resize2fs {0}'.format(device) try: out = __salt__['cmd.run_all'](cmd, python_shell=False) except subprocess.CalledProcessError as err: return False if out['retcode'] == 0: return True\n\n    ### Response: Resizes the filesystem.\n\n    CLI Example:\n    .. code-block:: bash\n\n        salt '*' disk.resize2fs /dev/sda1.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public boolean authorizeUsingAccessExpression() throws IOException { if (SecurityContextHolder.getContext().getAuthentication() == null) { return false; } SecurityExpressionHandler<FilterInvocation> handler = getExpressionHandler(); Expression accessExpression; try { accessExpression = handler.getExpressionParser().parseExpression(getAccess()); } catch (ParseException e) { IOException ioException = new IOException(); ioException.initCause(e); throw ioException; } return ExpressionUtils.evaluateAsBoolean(accessExpression, createExpressionEvaluationContext(handler)); }\n\n    ### Response:",
        "ground_truth": "Make an authorization decision based on a Spring EL expression. See the\n\"Expression-Based Access Control\" chapter in Spring Security for details on what\nexpressions can be used.\n\n@return the result of the authorization decision\n@throws IOException",
        "predict": " Resizes the filesystem.\n\n    CLI Example:\n    .. code-block:: bash\n\n        salt '*' disk.resize2fs /dev/sda1.\n\n    "
    },
    {
        "ID": 158,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function getFeatureVariableDouble($featureFlagKey, $variableKey, $userId, $attributes = null) { return $this->getFeatureVariableValueForType( $featureFlagKey, $variableKey, $userId, $attributes, FeatureVariable::DOUBLE_TYPE ); }\n\n    ### Response: Get the Double value of the specified variable in the feature flag.\n\n@param string Feature flag key\n@param string Variable key\n@param string User ID\n@param array  Associative array of user attributes\n\n@return string double variable value / null.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public boolean authorizeUsingUrlCheck() throws IOException { String contextPath = ((HttpServletRequest) getRequest()).getContextPath(); Authentication currentUser = SecurityContextHolder.getContext() .getAuthentication(); return getPrivilegeEvaluator().isAllowed(contextPath, getUrl(), getMethod(), currentUser); }\n\n    ### Response:",
        "ground_truth": "Make an authorization decision based on the URL and HTTP method attributes. True is\nreturned if the user is allowed to access the given URL as defined.\n\n@return the result of the authorization decision\n@throws IOException",
        "predict": " Get the Double value of the specified variable in the feature flag.\n\n@param string Feature flag key\n@param string Variable key\n@param string User ID\n@param array  Associative array of user attributes\n\n@return string double variable value / null.\n\n    "
    },
    {
        "ID": 159,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Icon getAvatar(DiscordApi api, String avatarHash, String discriminator, long userId) { StringBuilder url = new StringBuilder(\"https://cdn.discordapp.com/\"); if (avatarHash == null) { url.append(\"embed/avatars/\") .append(Integer.parseInt(discriminator) % 5) .append(\".png\"); } else { url.append(\"avatars/\") .append(userId).append('/').append(avatarHash) .append(avatarHash.startsWith(\"a_\") ? \".gif\" : \".png\"); } try { return new IconImpl(api, new URL(url.toString())); } catch (MalformedURLException e) { logger.warn(\"Seems like the url of the avatar is malformed! Please contact the developer!\", e); return null; } }\n\n    ### Response: Gets the avatar for the given details.\n\n@param api The discord api instance.\n@param avatarHash The avatar hash or {@code null} for default avatar.\n@param discriminator The discriminator if default avatar is wanted.\n@param userId The user id.\n@return The avatar for the given details..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public Collection<GrantedAuthority> convert(Jwt jwt) { return getScopes(jwt) .stream() .map(authority -> SCOPE_AUTHORITY_PREFIX + authority) .map(SimpleGrantedAuthority::new) .collect(Collectors.toList()); }\n\n    ### Response:",
        "ground_truth": "Extracts the authorities\n@param jwt The {@link Jwt} token\n@return The {@link GrantedAuthority authorities} read from the token scopes",
        "predict": " Gets the avatar for the given details.\n\n@param api The discord api instance.\n@param avatarHash The avatar hash or {@code null} for default avatar.\n@param discriminator The discriminator if default avatar is wanted.\n@param userId The user id.\n@return The avatar for the given details..\n\n    "
    },
    {
        "ID": 160,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (p Proc) Cwd() (string, error) { wd, err := os.Readlink(p.path(\"cwd\")) if os.IsNotExist(err) { return \"\", nil } return wd, err }\n\n    ### Response: // Cwd returns the absolute path to the current working directory of the process..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public CsrfToken generateToken(HttpServletRequest request) { return wrap(request, this.delegate.generateToken(request)); }\n\n    ### Response:",
        "ground_truth": "Generates a new token\n@param request the {@link HttpServletRequest} to use. The\n{@link HttpServletRequest} must have the {@link HttpServletResponse} as an\nattribute with the name of HttpServletResponse.class.getName()",
        "predict": " // Cwd returns the absolute path to the current working directory of the process..\n\n    "
    },
    {
        "ID": 161,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static function serve() { $output = new NullOutput(); $daux = new Daux(Daux::LIVE_MODE, $output); $daux->initializeConfiguration(); $class = $daux->getProcessorClass(); if (!empty($class)) { $daux->setProcessor(new $class($daux, $output, 0)); } // Set this critical configuration // for the tree generation $daux->getParams()['index_key'] = 'index'; // Improve the tree with a processor $daux->generateTree(); $server = new static($daux); try { $page = $server->handle(); } catch (NotFoundException $e) { $page = new ErrorPage('An error occured', $e->getMessage(), $daux->getParams()); } $server->createResponse($page)->prepare($server->request)->send(); }\n\n    ### Response: Serve the documentation\n\n@throws Exception.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @RequestMapping(value = \"/secure/adminPermission.htm\", method = RequestMethod.GET) public ModelAndView displayAdminPage(@RequestParam(\"contactId\") int contactId) { Contact contact = contactManager.getById(Long.valueOf(contactId)); Acl acl = aclService.readAclById(new ObjectIdentityImpl(contact)); Map<String, Object> model = new HashMap<>(); model.put(\"contact\", contact); model.put(\"acl\", acl); return new ModelAndView(\"adminPermission\", \"model\", model); }\n\n    ### Response:",
        "ground_truth": "Displays the permission admin page for a particular contact.",
        "predict": " Serve the documentation\n\n@throws Exception.\n\n    "
    },
    {
        "ID": 162,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function handleHello($data) { $this->logger->info('received hello'); $resume = $this->identify(); if (! $resume) { $this->setupHeartbeat($data->d->heartbeat_interval); } }\n\n    ### Response: Handles HELLO packets received by the websocket.\n\n@param object $data Packet data..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @RequestMapping(value = \"/secure/addPermission.htm\", method = RequestMethod.GET) public ModelAndView displayAddPermissionPageForContact( @RequestParam(\"contactId\") long contactId) { Contact contact = contactManager.getById(contactId); AddPermission addPermission = new AddPermission(); addPermission.setContact(contact); Map<String, Object> model = new HashMap<>(); model.put(\"addPermission\", addPermission); model.put(\"recipients\", listRecipients()); model.put(\"permissions\", listPermissions()); return new ModelAndView(\"addPermission\", model); }\n\n    ### Response:",
        "ground_truth": "Displays the \"add permission\" page for a contact.",
        "predict": " Handles HELLO packets received by the websocket.\n\n@param object $data Packet data..\n\n    "
    },
    {
        "ID": 163,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (r *httpJSONRequest) SetQuery(key, value string) driver.Request { if r.q == nil { r.q = url.Values{} } r.q.Set(key, value) return r }\n\n    ### Response: // SetQuery sets a single query argument of the request.\n// Any existing query argument with the same key is overwritten..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @RequestMapping(value = \"/secure/addPermission.htm\", method = RequestMethod.POST) public String addPermission(AddPermission addPermission, BindingResult result, ModelMap model) { addPermissionValidator.validate(addPermission, result); if (result.hasErrors()) { model.put(\"recipients\", listRecipients()); model.put(\"permissions\", listPermissions()); return \"addPermission\"; } PrincipalSid sid = new PrincipalSid(addPermission.getRecipient()); Permission permission = permissionFactory.buildFromMask(addPermission .getPermission()); try { contactManager.addPermission(addPermission.getContact(), sid, permission); } catch (DataAccessException existingPermission) { existingPermission.printStackTrace(); result.rejectValue(\"recipient\", \"err.recipientExistsForContact\", \"Addition failure.\"); model.put(\"recipients\", listRecipients()); model.put(\"permissions\", listPermissions()); return \"addPermission\"; } return \"redirect:/secure/index.htm\"; }\n\n    ### Response:",
        "ground_truth": "Handles submission of the \"add permission\" form.",
        "predict": " // SetQuery sets a single query argument of the request.\n// Any existing query argument with the same key is overwritten..\n\n    "
    },
    {
        "ID": 164,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function contains(string $token): bool { $this->tokenize(); return in_array($token, $this->tokens); }\n\n    ### Response: Returns true if the list contains the given token, otherwise false.\n\n@param string $token The token you want to check for the existence of in the list.\n@return bool true if the list contains the given token, otherwise false..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @RequestMapping(value = \"/secure/deletePermission.htm\") public ModelAndView deletePermission(@RequestParam(\"contactId\") long contactId, @RequestParam(\"sid\") String sid, @RequestParam(\"permission\") int mask) { Contact contact = contactManager.getById(contactId); Sid sidObject = new PrincipalSid(sid); Permission permission = permissionFactory.buildFromMask(mask); contactManager.deletePermission(contact, sidObject, permission); Map<String, Object> model = new HashMap<>(); model.put(\"contact\", contact); model.put(\"sid\", sidObject); model.put(\"permission\", permission); return new ModelAndView(\"deletePermission\", \"model\", model); }\n\n    ### Response:",
        "ground_truth": "Deletes a permission",
        "predict": " Returns true if the list contains the given token, otherwise false.\n\n@param string $token The token you want to check for the existence of in the list.\n@return bool true if the list contains the given token, otherwise false..\n\n    "
    },
    {
        "ID": 165,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _divf(ins): ''' Divides 2 float values. The result is pushed onto the stack. ''' op1, op2 = tuple(ins.quad[2:]) if is_float(op2) and float(op2) == 1: # Nothing to do. A / 1 = A output = _float_oper(op1) output.extend(_fpush()) return output output = _float_oper(op1, op2) output.append('call __DIVF') output.extend(_fpush()) REQUIRES.add('divf.asm') return output\n\n    ### Response: Divides 2 float values. The result is pushed onto the stack..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static String getRoleWithDefaultPrefix(String defaultRolePrefix, String role) { if (role == null) { return role; } if (defaultRolePrefix == null || defaultRolePrefix.length() == 0) { return role; } if (role.startsWith(defaultRolePrefix)) { return role; } return defaultRolePrefix + role; }\n\n    ### Response:",
        "ground_truth": "Prefixes role with defaultRolePrefix if defaultRolePrefix is non-null and if role\ndoes not already start with defaultRolePrefix.\n\n@param defaultRolePrefix\n@param role\n@return",
        "predict": " Divides 2 float values. The result is pushed onto the stack..\n\n    "
    },
    {
        "ID": 166,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (c *secureCookies) MustFloat32(key string, defaults ...float32) float32 { ck, err := c.req.Cookie(key) if err != nil { if len(defaults) > 0 { return defaults[0] } return 0 } s := parseSecureCookie(c.secret, ck.Value) v, err := strconv.ParseFloat(s, 32) if len(defaults) > 0 && err != nil { return defaults[0] } return float32(v) }\n\n    ### Response: // MustFloat32 gets data float32 type.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static UserDetailsResourceFactoryBean fromString(String users) { InMemoryResource resource = new InMemoryResource(users); return fromResource(resource); }\n\n    ### Response:",
        "ground_truth": "Creates a UserDetailsResourceFactoryBean with a resource from the provided String\n\n@param users the string representing the users\n@return the UserDetailsResourceFactoryBean",
        "predict": " // MustFloat32 gets data float32 type.\n\n    "
    },
    {
        "ID": 167,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def get_on_tmdb(uri, **kwargs): \"\"\" Get a resource on TMDB. \"\"\" kwargs['api_key'] = app.config['TMDB_API_KEY'] response = requests_session.get((TMDB_API_URL + uri).encode('utf8'), params=kwargs) response.raise_for_status() return json.loads(response.text)\n\n    ### Response: Get a resource on TMDB..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public List<String> getAttributeValues(String name) { List<String> result = null; if (attributes != null) { result = attributes.get(name); } if (result == null) { result = Collections.emptyList(); } return result; }\n\n    ### Response:",
        "ground_truth": "Returns the values for a specific attribute\n\n@param name the attribute name\n@return a String array, never null but may be zero length",
        "predict": " Get a resource on TMDB..\n\n    "
    },
    {
        "ID": 168,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function remote_response($add = '') { static $s_header_sent = false; if (!$s_header_sent) { $s_header_sent = true; $this->nocacheing_headers(); header('Content-Type: text/plain; charset=' . $this->get_charset()); } // unset default env vars unset($this->env['task'], $this->env['action'], $this->env['comm_path']); $rcmail = rcmail::get_instance(); $response['action'] = $rcmail->action; if ($unlock = rcube_utils::get_input_value('_unlock', rcube_utils::INPUT_GPC)) { $response['unlock'] = $unlock; } if (!empty($this->env)) $response['env'] = $this->env; if (!empty($this->texts)) $response['texts'] = $this->texts; // send function calls $response['exec'] = $this->get_js_commands() . $add; if (!empty($this->callbacks)) $response['callbacks'] = $this->callbacks; // trigger generic hook where plugins can put additional content to the response $hook = $this->app->plugins->exec_hook(\"render_response\", array('response' => $response)); // save some memory $response = $hook['response']; unset($hook['response']); echo self::json_serialize($response, $this->devel_mode, false); }\n\n    ### Response: Send an AJAX response with executable JS code\n\n@param string $add Additional JS code.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String getFirstAttributeValue(String name) { List<String> result = getAttributeValues(name); if (result.isEmpty()) { return null; } else { return result.get(0); } }\n\n    ### Response:",
        "ground_truth": "Returns the first attribute value for a specified attribute\n\n@param name\n@return the first attribute value for a specified attribute, may be null",
        "predict": " Send an AJAX response with executable JS code\n\n@param string $add Additional JS code.\n\n    "
    },
    {
        "ID": 169,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function isValid() : bool { return ! \\is_null( $this->Latitude ) && ! \\is_null( $this->Longitude ) && ( $this->Latitude instanceof Latitude) && ( $this->Longitude instanceof Longitude ); }\n\n    ### Response: Returns if the current instance defines a valid coordinate.\n\n@return boolean.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static byte[] encode(CharSequence string) { try { ByteBuffer bytes = CHARSET.newEncoder().encode(CharBuffer.wrap(string)); byte[] bytesCopy = new byte[bytes.limit()]; System.arraycopy(bytes.array(), 0, bytesCopy, 0, bytes.limit()); return bytesCopy; } catch (CharacterCodingException e) { throw new IllegalArgumentException(\"Encoding failed\", e); } }\n\n    ### Response:",
        "ground_truth": "Get the bytes of the String in UTF-8 encoded form.",
        "predict": " Returns if the current instance defines a valid coordinate.\n\n@return boolean.\n\n    "
    },
    {
        "ID": 170,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (d DataType) String() string { switch d { case Float: return \"float\" case Integer: return \"integer\" case Unsigned: return \"unsigned\" case String: return \"string\" case Boolean: return \"boolean\" case Time: return \"time\" case Duration: return \"duration\" case Tag: return \"tag\" case AnyField: return \"field\" } return \"unknown\" }\n\n    ### Response: // String returns the human-readable string representation of the DataType..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String decode(byte[] bytes) { try { return CHARSET.newDecoder().decode(ByteBuffer.wrap(bytes)).toString(); } catch (CharacterCodingException e) { throw new IllegalArgumentException(\"Decoding failed\", e); } }\n\n    ### Response:",
        "ground_truth": "Decode the bytes in UTF-8 form into a String.",
        "predict": " // String returns the human-readable string representation of the DataType..\n\n    "
    },
    {
        "ID": 171,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def get_form_request( self, submit_name=None, url=None, extra_post=None, remove_from_post=None): \"\"\" Submit default form. :param submit_name: name of button which should be \"clicked\" to submit form :param url: explicitly specify form action url :param extra_post: (dict or list of pairs) additional form data which will override data automatically extracted from the form. :param remove_from_post: list of keys to remove from the submitted data Following input elements are automatically processed: * input[type=\"hidden\"] - default value * select: value of last option * radio - ??? * checkbox - ??? Multipart forms are correctly recognized by grab library. \"\"\" # pylint: disable=no-member post = self.form_fields() # Build list of submit buttons which have a name submit_controls = {} for elem in self.form.inputs: if (elem.tag == 'input' and elem.type == 'submit' and elem.get('name') is not None): submit_controls[elem.name] = elem # All this code need only for one reason: # to not send multiple submit keys in form data # in real life only this key is submitted whose button # was pressed if submit_controls: # If name of submit control is not given then # use the name of first submit control if submit_name is None or submit_name not in submit_controls: controls = sorted(submit_controls.values(), key=lambda x: x.name) submit_name = controls[0].name # Form data should contain only one submit control for name in submit_controls: if name != submit_name: if name in post: del post[name] if url: action_url = urljoin(self.url, url) else: action_url = urljoin(self.url, self.form.action) # Values from `extra_post` should override values in form # `extra_post` allows multiple value of one key # Process saved values of file fields if self.form.method == 'POST': if 'multipart' in self.form.get('enctype', ''): for key, obj in self._file_fields.items(): post[key] = obj post_items = list(post.items()) del post if extra_post: if isinstance(extra_post, dict): extra_post_items = extra_post.items() else: extra_post_items = extra_post # Drop existing post items with such key keys_to_drop = set([x for x, y in extra_post_items]) for key in keys_to_drop: post_items = [(x, y) for x, y in post_items if x != key] for key, value in extra_post_items: post_items.append((key, value)) if remove_from_post: post_items = [(x, y) for x, y in post_items if x not in remove_from_post] result = { 'multipart_post': None, 'post': None, 'url': None, } if self.form.method == 'POST': if 'multipart' in self.form.get('enctype', ''): result['multipart_post'] = post_items #self.grab.setup(multipart_post=post_items) else: result['post'] = post_items #self.grab.setup(post=post_items) result['url'] = action_url #self.grab.setup(url=action_url) else: url = action_url.split('?')[0] + '?' + smart_urlencode(post_items) result['url'] = url #self.grab.setup(url=url) return result\n\n    ### Response: Submit default form.\n\n        :param submit_name: name of button which should be \"clicked\" to\n            submit form\n        :param url: explicitly specify form action url\n        :param extra_post: (dict or list of pairs) additional form data which\n            will override data automatically extracted from the form.\n        :param remove_from_post: list of keys to remove from the submitted data\n\n        Following input elements are automatically processed:\n\n        * input[type=\"hidden\"] - default value\n        * select: value of last option\n        * radio - ???\n        * checkbox - ???\n\n        Multipart forms are correctly recognized by grab library..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private <T extends AccessibleObject> String[] lookupParameterNames( ParameterNameFactory<T> parameterNameFactory, T t) { Annotation[][] parameterAnnotations = parameterNameFactory.findParameterAnnotations(t); int parameterCount = parameterAnnotations.length; String[] paramNames = new String[parameterCount]; boolean found = false; for (int i = 0; i < parameterCount; i++) { Annotation[] annotations = parameterAnnotations[i]; String parameterName = findParameterName(annotations); if (parameterName != null) { found = true; paramNames[i] = parameterName; } } return found ? paramNames : null; }\n\n    ### Response:",
        "ground_truth": "Gets the parameter names or null if not found.\n\n@param parameterNameFactory the {@link ParameterNameFactory} to use\n@param t the {@link AccessibleObject} to find the parameter names on (i.e. Method\nor Constructor)\n@return the parameter names or null",
        "predict": " Submit default form.\n\n        :param submit_name: name of button which should be \"clicked\" to\n            submit form\n        :param url: explicitly specify form action url\n        :param extra_post: (dict or list of pairs) additional form data which\n            will override data automatically extracted from the form.\n        :param remove_from_post: list of keys to remove from the submitted data\n\n        Following input elements are automatically processed:\n\n        * input[type=\"hidden\"] - default value\n        * select: value of last option\n        * radio - ???\n        * checkbox - ???\n\n        Multipart forms are correctly recognized by grab library..\n\n    "
    },
    {
        "ID": 172,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function viaApi(string $action): bool { if (mb_strpos($action, 'api.') === 0) { return true; // Saves time in many cases. } return mb_strpos($action, 'api-v') === 0 && preg_match('/^api\\-v[0-9]+[0-9.]*\\./u', $action); }\n\n    ### Response: An action via API?\n\n@since 160625 ReST utils.\n\n@param string $action Action identifier.\n\n@return bool True if it's an action via API..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @RequestMapping(value = \"/secure/add.htm\", method = RequestMethod.POST) public String addContact(WebContact form, BindingResult result) { validator.validate(form, result); if (result.hasErrors()) { return \"add\"; } Contact contact = new Contact(form.getName(), form.getEmail()); contactManager.create(contact); return \"redirect:/secure/index.htm\"; }\n\n    ### Response:",
        "ground_truth": "Handles the submission of the contact form, creating a new instance if the username\nand email are valid.",
        "predict": " An action via API?\n\n@since 160625 ReST utils.\n\n@param string $action Action identifier.\n\n@return bool True if it's an action via API..\n\n    "
    },
    {
        "ID": 173,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func GetLocalRootCA(paths CertPaths) (RootCA, error) { // Check if we have a Certificate file cert, err := ioutil.ReadFile(paths.Cert) if err != nil { if os.IsNotExist(err) { err = ErrNoLocalRootCA } return RootCA{}, err } signingCert := cert key, err := ioutil.ReadFile(paths.Key) if err != nil { if !os.IsNotExist(err) { return RootCA{}, err } // There may not be a local key. It's okay to pass in a nil // key. We'll get a root CA without a signer. key = nil signingCert = nil } return NewRootCA(cert, signingCert, key, DefaultNodeCertExpiration, nil) }\n\n    ### Response: // GetLocalRootCA validates if the contents of the file are a valid self-signed\n// CA certificate, and returns the PEM-encoded Certificate if so.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override protected Collection<ConfigAttribute> findAttributes(Method method, Class<?> targetClass) { if (targetClass == null) { return null; } return findAttributesSpecifiedAgainst(method, targetClass); }\n\n    ### Response:",
        "ground_truth": "Will walk the method inheritance tree to find the most specific declaration\napplicable.",
        "predict": " // GetLocalRootCA validates if the contents of the file are a valid self-signed\n// CA certificate, and returns the PEM-encoded Certificate if so.\n\n    "
    },
    {
        "ID": 174,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static function pluralize($count, $zero, $one, $other) { $result = $other; if ($count === 0) { $result = $zero; } elseif ($count === 1) { $result = $one; } return \\str_replace ( '{count}', $count, $result ); }\n\n    ### Response: Pluralize an expression\n\n@param int $count\nthe count of elements\n@param string $zero\nvalue to return if count==0, can contains {count} mask\n@param string $one\nvalue to return if count==1, can contains {count} mask\n@param string $other\nvalue to return if count>1, can contains {count} mask\n@return string the pluralized expression.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void addSecureMethod(RegisteredMethod method, List<ConfigAttribute> attr) { Assert.notNull(method, \"RegisteredMethod required\"); Assert.notNull(attr, \"Configuration attribute required\"); if (logger.isInfoEnabled()) { logger.info(\"Adding secure method [\" + method + \"] with attributes [\" + attr + \"]\"); } this.methodMap.put(method, attr); }\n\n    ### Response:",
        "ground_truth": "Add configuration attributes for a secure method.\n\n@param method the method to be secured\n@param attr required authorities associated with the method",
        "predict": " Pluralize an expression\n\n@param int $count\nthe count of elements\n@param string $zero\nvalue to return if count==0, can contains {count} mask\n@param string $one\nvalue to return if count==1, can contains {count} mask\n@param string $other\nvalue to return if count>1, can contains {count} mask\n@return string the pluralized expression.\n\n    "
    },
    {
        "ID": 175,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function replaceAutoUuids($entityMetadata, &$stub) { $autoUuids = []; foreach ($entityMetadata['table']['columns'] as $column) { if (! empty($column['options']['autoUuid'])) { $autoUuids[] = $column['name']; } } $stub = str_replace('{{autoUuids}}', $this->getArrayAsText($autoUuids), $stub); }\n\n    ### Response: Replace autoUuids.\n\n@param \\ProAI\\Datamapper\\Metadata\\Definitions\\Entity $entityMetadata\n@param string $stub\n@return void.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public Collection<ConfigAttribute> getAllConfigAttributes() { Set<ConfigAttribute> allAttributes = new HashSet<>(); for (List<ConfigAttribute> attributeList : methodMap.values()) { allAttributes.addAll(attributeList); } return allAttributes; }\n\n    ### Response:",
        "ground_truth": "Obtains the configuration attributes explicitly defined against this bean.\n\n@return the attributes explicitly defined against this bean",
        "predict": " Replace autoUuids.\n\n@param \\ProAI\\Datamapper\\Metadata\\Definitions\\Entity $entityMetadata\n@param string $stub\n@return void.\n\n    "
    },
    {
        "ID": 176,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def get_conda_root(): \"\"\"Get the PREFIX of the conda installation. Returns: str: the ROOT_PREFIX of the conda installation \"\"\" try: # Fast-path # We're in the root environment conda_root = _import_conda_root() except ImportError: # We're not in the root environment. envs_dir = dirname(CONDA_PREFIX) if basename(envs_dir) == 'envs': # We're in a named environment: `conda create -n <name>` conda_root = dirname(envs_dir) else: # We're in an isolated environment: `conda create -p <path>` # The only way we can find out is by calling conda. conda_root = _conda_root_from_conda_info() return conda_root\n\n    ### Response: Get the PREFIX of the conda installation.\n\n    Returns:\n        str: the ROOT_PREFIX of the conda installation.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private boolean isMatch(String methodName, String mappedName) { return (mappedName.endsWith(\"*\") && methodName.startsWith(mappedName.substring(0, mappedName.length() - 1))) || (mappedName.startsWith(\"*\") && methodName.endsWith(mappedName .substring(1, mappedName.length()))); }\n\n    ### Response:",
        "ground_truth": "Return if the given method name matches the mapped name. The default implementation\nchecks for \"xxx\" and \"xxx\" matches.\n\n@param methodName the method name of the class\n@param mappedName the name in the descriptor\n\n@return if the names match",
        "predict": " Get the PREFIX of the conda installation.\n\n    Returns:\n        str: the ROOT_PREFIX of the conda installation.\n\n    "
    },
    {
        "ID": 177,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (r *Request) Url() string { path := \"/\" + strings.Join(r.IndexList, \",\") if len(r.TypeList) > 0 { path += \"/\" + strings.Join(r.TypeList, \",\") } // XXX : for indexing documents using the normal (non bulk) API if len(r.id) > 0 { path += \"/\" + r.id } path += \"/\" + r.api u := url.URL{ Scheme: \"http\", Host: fmt.Sprintf(\"%s:%s\", r.Conn.Host, r.Conn.Port), Path: path, RawQuery: r.ExtraArgs.Encode(), } return u.String() }\n\n    ### Response: // Url builds a Request for a URL.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public C anyRequest() { Assert.state(!this.anyRequestConfigured, \"Can't configure anyRequest after itself\"); C configurer = requestMatchers(ANY_REQUEST); this.anyRequestConfigured = true; return configurer; }\n\n    ### Response:",
        "ground_truth": "Maps any request.\n\n@return the object that is chained after creating the {@link RequestMatcher}",
        "predict": " // Url builds a Request for a URL.\n\n    "
    },
    {
        "ID": 178,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def play(self): \"\"\"Starts a playback\"\"\" if self._proc.state() == QProcess.Running: if self.isPlaying is False: self._execute(\"pause\") self._changePlayingState(True) elif self._filePath is not None: self._kill() self._run(self._filePath) self._changePlayingState(True)\n\n    ### Response: Starts a playback.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void handleBindException(String userDn, String username, Throwable cause) { if (logger.isDebugEnabled()) { logger.debug(\"Failed to bind as \" + userDn + \": \" + cause); } }\n\n    ### Response:",
        "ground_truth": "Allows subclasses to inspect the exception thrown by an attempt to bind with a\nparticular DN. The default implementation just reports the failure to the debug\nlogger.",
        "predict": " Starts a playback.\n\n    "
    },
    {
        "ID": 179,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function getValueListQualifier(sTerm) { var sQualifier = getQualifier(sTerm, sValueListMapping); return sQualifier !== undefined ? sQualifier : getQualifier(sTerm, sValueList); }\n\n    ### Response: Checks that the term is a ValueList or a ValueListMapping and determines the qualifier.\n\n@param {string} sTerm\nThe term\n@returns {string}\nThe qualifier or undefined, if the term is not as expected.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Transactional(readOnly = true) public Contact getRandomContact() { logger.debug(\"Returning random contact\"); Random rnd = new Random(); List<Contact> contacts = contactDao.findAll(); int getNumber = rnd.nextInt(contacts.size()); return contacts.get(getNumber); }\n\n    ### Response:",
        "ground_truth": "This is a public method.",
        "predict": " Checks that the term is a ValueList or a ValueListMapping and determines the qualifier.\n\n@param {string} sTerm\nThe term\n@returns {string}\nThe qualifier or undefined, if the term is not as expected.\n\n    "
    },
    {
        "ID": 180,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function toHtml() { include_once('HTML/QuickForm/Renderer/Default.php'); $renderer = new HTML_QuickForm_Renderer_Default(); $renderer->setElementTemplate('{element}'); parent::accept($renderer); return $renderer->toHtml(); }\n\n    ### Response: Returns HTML for advchecbox form element.\n\n@return string.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected final void clearAuthenticationAttributes(HttpServletRequest request) { HttpSession session = request.getSession(false); if (session == null) { return; } session.removeAttribute(WebAttributes.AUTHENTICATION_EXCEPTION); }\n\n    ### Response:",
        "ground_truth": "Removes temporary authentication-related data which may have been stored in the\nsession during the authentication process.",
        "predict": " Returns HTML for advchecbox form element.\n\n@return string.\n\n    "
    },
    {
        "ID": 181,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def check_network_id(network_id, web3: Web3): \"\"\" Check periodically if the underlying ethereum client's network id has changed\"\"\" while True: current_id = int(web3.version.network) if network_id != current_id: raise RuntimeError( f'Raiden was running on network with id {network_id} and it detected ' f'that the underlying ethereum client network id changed to {current_id}.' f' Changing the underlying blockchain while the Raiden node is running ' f'is not supported.', ) gevent.sleep(CHECK_NETWORK_ID_INTERVAL)\n\n    ### Response: Check periodically if the underlying ethereum client's network id has changed.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Field getField(Class<?> clazz, String fieldName) throws IllegalStateException { Assert.notNull(clazz, \"Class required\"); Assert.hasText(fieldName, \"Field name required\"); try { return clazz.getDeclaredField(fieldName); } catch (NoSuchFieldException nsf) { // Try superclass if (clazz.getSuperclass() != null) { return getField(clazz.getSuperclass(), fieldName); } throw new IllegalStateException(\"Could not locate field '\" + fieldName + \"' on class \" + clazz); } }\n\n    ### Response:",
        "ground_truth": "Attempts to locate the specified field on the class.\n\n@param clazz the class definition containing the field\n@param fieldName the name of the field to locate\n\n@return the Field (never null)\n\n@throws IllegalStateException if field could not be found",
        "predict": " Check periodically if the underlying ethereum client's network id has changed.\n\n    "
    },
    {
        "ID": 182,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function setName($name) { if ($this->getObjectId()) { throw new AVException(\"A role's name can only be set before it has been saved.\"); } if (!is_string($name)) { throw new AVException(\"A role's name must be a string.\"); } return $this->set(\"name\", $name); }\n\n    ### Response: Sets the role name.\n\n@param string $name The role name\n\n@return null.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected String createServiceUrl(final HttpServletRequest request, final HttpServletResponse response) { return CommonUtils.constructServiceUrl(null, response, this.serviceProperties.getService(), null, this.serviceProperties.getArtifactParameter(), this.encodeServiceUrlWithSessionId); }\n\n    ### Response:",
        "ground_truth": "Constructs a new Service Url. The default implementation relies on the CAS client\nto do the bulk of the work.\n@param request the HttpServletRequest\n@param response the HttpServlet Response\n@return the constructed service url. CANNOT be NULL.",
        "predict": " Sets the role name.\n\n@param string $name The role name\n\n@return null.\n\n    "
    },
    {
        "ID": 183,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SuppressWarnings(\"static-method\") protected boolean isAOActiveAnnotation(XAnnotation annotation) { final String name = annotation.getAnnotationType().getQualifiedName(); return Strings.equal(Accessors.class.getName(), name); }\n\n    ### Response: Replies if the given container can receive an active annotation.\n\n@param annotation the annotation.\n@return {@code true} if the annotation should be used only for OO elements.\n@see #isOOActiveAnnotation(XAnnotation)\n@see #isAOActiveAnnotationReceiver(XtendTypeDeclaration).\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected String createRedirectUrl(final String serviceUrl) { return CommonUtils.constructRedirectUrl(this.loginUrl, this.serviceProperties.getServiceParameter(), serviceUrl, this.serviceProperties.isSendRenew(), false); }\n\n    ### Response:",
        "ground_truth": "Constructs the Url for Redirection to the CAS server. Default implementation relies\non the CAS client to do the bulk of the work.\n\n@param serviceUrl the service url that should be included.\n@return the redirect url. CANNOT be NULL.",
        "predict": " Replies if the given container can receive an active annotation.\n\n@param annotation the annotation.\n@return {@code true} if the annotation should be used only for OO elements.\n@see #isOOActiveAnnotation(XAnnotation)\n@see #isAOActiveAnnotationReceiver(XtendTypeDeclaration).\n\n    "
    },
    {
        "ID": 184,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private String transformPropertyName(Object property) { if (property == null) { return null; } String propertyStr = property.toString(); if (propertyStr.indexOf('_') == -1) { return propertyStr; } return CaseFormat.LOWER_UNDERSCORE.to(CaseFormat.LOWER_CAMEL, propertyStr); }\n\n    ### Response: Transform snake case to property name..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private String extractPrefix(String encPass) { if (!encPass.startsWith(\"{\")) { return null; } int secondBrace = encPass.lastIndexOf('}'); if (secondBrace < 0) { throw new IllegalArgumentException( \"Couldn't find closing brace for SHA prefix\"); } return encPass.substring(0, secondBrace + 1); }\n\n    ### Response:",
        "ground_truth": "Returns the hash prefix or null if there isn't one.",
        "predict": " Transform snake case to property name..\n\n    "
    },
    {
        "ID": 185,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def teardown_databases(self, old_config, options): \"\"\" Destroys all the non-mirror databases. \"\"\" if len(old_config) > 1: old_names, mirrors = old_config else: old_names = old_config for connection, old_name, destroy in old_names: if destroy: connection.creation.destroy_test_db(old_name, options['verbosity'])\n\n    ### Response: Destroys all the non-mirror databases..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void commence(HttpServletRequest request, HttpServletResponse response, AuthenticationException arg2) throws IOException, ServletException { if (logger.isDebugEnabled()) { logger.debug(\"Pre-authenticated entry point called. Rejecting access\"); } response.sendError(HttpServletResponse.SC_FORBIDDEN, \"Access Denied\"); }\n\n    ### Response:",
        "ground_truth": "Always returns a 403 error code to the client.",
        "predict": " Destroys all the non-mirror databases..\n\n    "
    },
    {
        "ID": 186,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _deleteFile(self,directory,fn,dentry,db,service): \"\"\"Deletets file and changes status to '?' if no more services manages the file \"\"\" # FIXME : can switch back to only managing once service # at a time logger.debug(\"%s - Deleting\"%(fn)) if fn not in db: print(\"%s - rm: Not in DB, can't remove !\"%(fn)) return False # Build up list of names servicenames=db[fn]['services'].keys() # If service is none, build list of all services # to perform this action on if service is None: servicelist=servicenames else: servicelist=[service] for service in servicelist: if not db[fn]['services'].has_key(service): print(\"%s - Can't delete, service [%s] unknown\"%(service)) continue if db[fn]['services'][service]['status']!=self.ST_DELETED: print(\"%s - rm: Can't remove file with non 'D' status (%s)!\"\\ %(fn,service)) continue # Only change status if correctly deleted if self.sman.GetServiceObj(service).Remove(directory,fn): # Delete our service entry del db[fn]['services'][service] logger.debug('%s - deleted by service: %s'%(fn,service)) else: logger.error('%s - Failed to delete by service: %s'%(fn,service)) continue # Delete whole entry if no services manage it any more if len(db[fn]['services'].keys())==0: del db[fn] return True\n\n    ### Response: Deletets file and changes status to '?' if no\n        more services manages the file.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void checkFilterStack(List<Filter> filters) { checkForDuplicates(SecurityContextPersistenceFilter.class, filters); checkForDuplicates(UsernamePasswordAuthenticationFilter.class, filters); checkForDuplicates(SessionManagementFilter.class, filters); checkForDuplicates(BasicAuthenticationFilter.class, filters); checkForDuplicates(SecurityContextHolderAwareRequestFilter.class, filters); checkForDuplicates(JaasApiIntegrationFilter.class, filters); checkForDuplicates(ExceptionTranslationFilter.class, filters); checkForDuplicates(FilterSecurityInterceptor.class, filters); }\n\n    ### Response:",
        "ground_truth": "Checks the filter list for possible errors and logs them",
        "predict": " Deletets file and changes status to '?' if no\n        more services manages the file.\n\n    "
    },
    {
        "ID": 187,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function archive($filepath) { if ( ! ($fp = @fopen($filepath, 'w+b'))) { return FALSE; } flock($fp, LOCK_EX); for ($result = $written = 0, $data = $this->get_zip(), $length = strlen($data); $written < $length; $written += $result) { if (($result = fwrite($fp, substr($data, $written))) === FALSE) { break; } } flock($fp, LOCK_UN); fclose($fp); return is_int($result); }\n\n    ### Response: Write File to the specified directory\n\nLets you write a file\n\n@param\tstring\t$filepath\tthe file name\n@return\tbool.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SuppressWarnings(\"unchecked\") final Class<? extends Throwable>[] getRegisteredTypes() { Set<Class<? extends Throwable>> typeList = this.extractorMap.keySet(); return typeList.toArray(new Class[typeList.size()]); }\n\n    ### Response:",
        "ground_truth": "Returns an array containing the classes for which extractors are registered. The\norder of the classes is the order in which comparisons will occur for resolving a\nmatching extractor.\n\n@return the types for which extractors are registered",
        "predict": " Write File to the specified directory\n\nLets you write a file\n\n@param\tstring\t$filepath\tthe file name\n@return\tbool.\n\n    "
    },
    {
        "ID": 188,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (c *ZebedeeClient) GetDatasetLandingPage(path string) (data.DatasetLandingPage, error) { b, err := c.get(path) if err != nil { return data.DatasetLandingPage{}, err } var dlp data.DatasetLandingPage if err = json.Unmarshal(b, &dlp); err != nil { return dlp, err } related := [][]data.Related{ dlp.RelatedDatasets, dlp.RelatedDocuments, dlp.RelatedMethodology, dlp.RelatedMethodologyArticle, } //Concurrently resolve any URIs where we need more data from another page var wg sync.WaitGroup sem := make(chan int, 10) for _, element := range related { for i, e := range element { sem <- 1 wg.Add(1) go func(i int, e data.Related, element []data.Related) { defer func() { <-sem wg.Done() }() t, _ := c.GetPageTitle(e.URI) element[i].Title = t.Title }(i, e, element) } } wg.Wait() return dlp, nil }\n\n    ### Response: // GetDatasetLandingPage returns a DatasetLandingPage populated with data from a zebedee response. If an error\n// is returned there is a chance that a partly completed DatasetLandingPage is returned.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private Throwable extractCause(Throwable throwable) { for (Map.Entry<Class<? extends Throwable>, ThrowableCauseExtractor> entry : extractorMap .entrySet()) { Class<? extends Throwable> throwableType = entry.getKey(); if (throwableType.isInstance(throwable)) { ThrowableCauseExtractor extractor = entry.getValue(); return extractor.extractCause(throwable); } } return null; }\n\n    ### Response:",
        "ground_truth": "Extracts the cause of the given throwable using an appropriate extractor.\n\n@param throwable the Throwable (not null\n@return the cause, may be null if none could be resolved",
        "predict": " // GetDatasetLandingPage returns a DatasetLandingPage populated with data from a zebedee response. If an error\n// is returned there is a chance that a partly completed DatasetLandingPage is returned.\n\n    "
    },
    {
        "ID": 189,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static function getServiceProvider() { if (is_callable('_elgg_services')) { return _elgg_services(); } global $CONFIG; if (!isset($CONFIG)) { $path = self::getRootPath() . '/engine/settings.php'; if (!is_file($path)) { $path = self::getRootPath() . '/elgg-config/settings.php'; } require_once $path; } return new \\Elgg\\Di\\ServiceProvider(new \\Elgg\\Config($CONFIG)); }\n\n    ### Response: Returns Elgg ServiceProvider instance\n@return ServiceProvider.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SuppressWarnings({ \"unchecked\", \"rawtypes\" }) private String registerAccessManager(ParserContext pc, boolean jsr250Enabled, BeanDefinition expressionVoter) { BeanDefinitionBuilder accessMgrBuilder = BeanDefinitionBuilder .rootBeanDefinition(AffirmativeBased.class); ManagedList voters = new ManagedList(4); if (expressionVoter != null) { voters.add(expressionVoter); } voters.add(new RootBeanDefinition(RoleVoter.class)); voters.add(new RootBeanDefinition(AuthenticatedVoter.class)); if (jsr250Enabled) { voters.add(new RootBeanDefinition(Jsr250Voter.class)); } accessMgrBuilder.addConstructorArgValue(voters); BeanDefinition accessManager = accessMgrBuilder.getBeanDefinition(); String id = pc.getReaderContext().generateBeanName(accessManager); pc.registerBeanComponent(new BeanComponentDefinition(accessManager, id)); return id; }\n\n    ### Response:",
        "ground_truth": "Register the default AccessDecisionManager. Adds the special JSR 250 voter jsr-250\nis enabled and an expression voter if expression-based access control is enabled.\n@return",
        "predict": " Returns Elgg ServiceProvider instance\n@return ServiceProvider.\n\n    "
    },
    {
        "ID": 190,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static function create(array $options, array $tokens) { $headers = empty($options['CURLOPT_HTTPHEADER']) ? [] : $options['CURLOPT_HTTPHEADER']; $headers = empty($headers) ? [] : $headers; $headers = is_string($headers) ? explode(',', $headers) : $headers; $headers = array_merge( $headers, // Send pagination headers if pagination is not sent as query params !isset($options['pagination_as_query']) || !$options['pagination_as_query'] ? PaginationHeaders::create($tokens) : [], OrderingHeaders::create($tokens) ); return ['CURLOPT_HTTPHEADER'=>$headers]; }\n\n    ### Response: Returns an array containing CURLOPT_HTTPHEADER options that can be added to\nthe PHP internal curl library by using curl_setopt_array\n\n@param  array $options\n@param  array $tokens\n@return array\n\n@SuppressWarnings(\"PHPMD.StaticAccess\").\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Set<String> authorityListToSet( Collection<? extends GrantedAuthority> userAuthorities) { Assert.notNull(userAuthorities, \"userAuthorities cannot be null\"); Set<String> set = new HashSet<>(userAuthorities.size()); for (GrantedAuthority authority : userAuthorities) { set.add(authority.getAuthority()); } return set; }\n\n    ### Response:",
        "ground_truth": "Converts an array of GrantedAuthority objects to a Set.\n@return a Set of the Strings obtained from each call to\nGrantedAuthority.getAuthority()",
        "predict": " Returns an array containing CURLOPT_HTTPHEADER options that can be added to\nthe PHP internal curl library by using curl_setopt_array\n\n@param  array $options\n@param  array $tokens\n@return array\n\n@SuppressWarnings(\"PHPMD.StaticAccess\").\n\n    "
    },
    {
        "ID": 191,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private function pageChange(Page $master, $force = false) { // Run for all children $pageLocalizationEntity = PageLocalization::CN(); $dql = \"SELECT l FROM $pageLocalizationEntity l JOIN l.master m WHERE m.left >= :left AND m.right <= :right ORDER BY l.locale, m.left\"; $pageLocalizations = $this->em->createQuery($dql) ->setParameters(array( 'left' => $master->getLeftValue(), 'right' => $master->getRightValue(), )) ->getResult(); $changedLocalizations = array(); foreach ($pageLocalizations as $pageLocalization) { $changedLocalization = $this->generatePath($pageLocalization, $force); if ( ! is_null($changedLocalization)) { $changedLocalizations[] = $changedLocalization; } } return $changedLocalizations; }\n\n    ### Response: Called when page structure is changed\n@param Page $master\n@return array of changed localizations.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private boolean matches(byte[] expected, byte[] actual) { if (expected.length != actual.length) { return false; } int result = 0; for (int i = 0; i < expected.length; i++) { result |= expected[i] ^ actual[i]; } return result == 0; }\n\n    ### Response:",
        "ground_truth": "Constant time comparison to prevent against timing attacks.",
        "predict": " Called when page structure is changed\n@param Page $master\n@return array of changed localizations.\n\n    "
    },
    {
        "ID": 192,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def runner(parallel, config): \"\"\"Run functions, provided by string name, on multiple cores on the current machine. \"\"\" def run_parallel(fn_name, items): items = [x for x in items if x is not None] if len(items) == 0: return [] items = diagnostics.track_parallel(items, fn_name) fn, fn_name = (fn_name, fn_name.__name__) if callable(fn_name) else (get_fn(fn_name, parallel), fn_name) logger.info(\"multiprocessing: %s\" % fn_name) if \"wrapper\" in parallel: wrap_parallel = {k: v for k, v in parallel.items() if k in set([\"fresources\", \"checkpointed\"])} items = [[fn_name] + parallel.get(\"wrapper_args\", []) + [wrap_parallel] + list(x) for x in items] return run_multicore(fn, items, config, parallel=parallel) return run_parallel\n\n    ### Response: Run functions, provided by string name, on multiple cores on the current machine..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void setDefaultFailureUrl(String defaultFailureUrl) { Assert.isTrue(UrlUtils.isValidRedirectUrl(defaultFailureUrl), () -> \"'\" + defaultFailureUrl + \"' is not a valid redirect URL\"); this.defaultFailureUrl = defaultFailureUrl; }\n\n    ### Response:",
        "ground_truth": "The URL which will be used as the failure destination.\n\n@param defaultFailureUrl the failure URL, for example \"/loginFailed.jsp\".",
        "predict": " Run functions, provided by string name, on multiple cores on the current machine..\n\n    "
    },
    {
        "ID": 193,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def yesno(message, default='yes', suffix=' '): \"\"\" Prompt user to answer yes or no. Return True if the default is chosen, otherwise False. \"\"\" if default == 'yes': yesno_prompt = '[Y/n]' elif default == 'no': yesno_prompt = '[y/N]' else: raise ValueError(\"default must be 'yes' or 'no'.\") if message != '': prompt_text = \"{0} {1}{2}\".format(message, yesno_prompt, suffix) else: prompt_text = \"{0}{1}\".format(yesno_prompt, suffix) while True: response = get_input(prompt_text).strip() if response == '': return True else: if re.match('^(y)(es)?$', response, re.IGNORECASE): if default == 'yes': return True else: return False elif re.match('^(n)(o)?$', response, re.IGNORECASE): if default == 'no': return True else: return False\n\n    ### Response: Prompt user to answer yes or no. Return True if the default is chosen,\n     otherwise False..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void setResolveHiddenInputs( Function<HttpServletRequest, Map<String, String>> resolveHiddenInputs) { Assert.notNull(resolveHiddenInputs, \"resolveHiddenInputs cannot be null\"); this.resolveHiddenInputs = resolveHiddenInputs; }\n\n    ### Response:",
        "ground_truth": "Sets a Function used to resolve a Map of the hidden inputs where the key is the\nname of the input and the value is the value of the input. Typically this is used\nto resolve the CSRF token.\n@param resolveHiddenInputs the function to resolve the inputs",
        "predict": " Prompt user to answer yes or no. Return True if the default is chosen,\n     otherwise False..\n\n    "
    },
    {
        "ID": 194,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public boolean isModified() { I instance = _instance; if (instance == null) { return true; } if (DeployMode.MANUAL.equals(_strategy.redeployMode())) { return false; } return instance.isModified(); }\n\n    ### Response: Returns true if the entry is modified..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static String buildRequestUrl(String servletPath, String requestURI, String contextPath, String pathInfo, String queryString) { StringBuilder url = new StringBuilder(); if (servletPath != null) { url.append(servletPath); if (pathInfo != null) { url.append(pathInfo); } } else { url.append(requestURI.substring(contextPath.length())); } if (queryString != null) { url.append(\"?\").append(queryString); } return url.toString(); }\n\n    ### Response:",
        "ground_truth": "Obtains the web application-specific fragment of the URL.",
        "predict": " Returns true if the entry is modified..\n\n    "
    },
    {
        "ID": 195,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def mad(y_true, y_pred): \"\"\"Median absolute deviation \"\"\" y_true, y_pred = _mask_nan(y_true, y_pred) return np.mean(np.abs(y_true - y_pred))\n\n    ### Response: Median absolute deviation.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static boolean isAbsoluteUrl(String url) { if (url == null) { return false; } final Pattern ABSOLUTE_URL = Pattern.compile(\"\\\\A[a-z0-9.+-]+://.*\", Pattern.CASE_INSENSITIVE); return ABSOLUTE_URL.matcher(url).matches(); }\n\n    ### Response:",
        "ground_truth": "Decides if a URL is absolute based on whether it contains a valid scheme name, as\ndefined in RFC 1738.",
        "predict": " Median absolute deviation.\n\n    "
    },
    {
        "ID": 196,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _interactive_resolve(self, pair): \"\"\"Return 'local', 'remote', or 'skip' to use local, remote resource or skip.\"\"\" if self.resolve_all: if self.verbose >= 5: self._print_pair_diff(pair) return self.resolve_all resolve = self.options.get(\"resolve\", \"skip\") assert resolve in (\"remote\", \"ask\", \"skip\") if resolve == \"ask\" or self.verbose >= 5: self._print_pair_diff(pair) if resolve in (\"remote\", \"skip\"): # self.resolve_all = resolve return resolve # RED = ansi_code(\"Fore.LIGHTRED_EX\") M = ansi_code(\"Style.BRIGHT\") + ansi_code(\"Style.UNDERLINE\") R = ansi_code(\"Style.RESET_ALL\") # self._print_pair_diff(pair) self._inc_stat(\"interactive_ask\") while True: prompt = ( \"Use \" + M + \"R\" + R + \"emote, \" + M + \"S\" + R + \"kip, \" + M + \"B\" + R + \"inary compare, \" + M + \"H\" + R + \"elp? \" ) r = compat.console_input(prompt).strip() if r in (\"h\", \"H\", \"?\"): print(\"The following keys are supported:\") print(\" 'b': Binary compare\") print(\" 'r': Download remote file\") print(\" 's': Skip this file (leave both targets unchanged)\") print( \"Hold Shift (upper case letters) to apply choice for all \" \"remaining conflicts.\" ) print(\"Hit Ctrl+C to abort.\") continue elif r in (\"B\", \"b\"): self._compare_file(pair.local, pair.remote) continue elif r in (\"R\", \"S\"): r = self._resolve_shortcuts[r.lower()] self.resolve_all = r break elif r in (\"r\", \"s\"): r = self._resolve_shortcuts[r] break return r\n\n    ### Response: Return 'local', 'remote', or 'skip' to use local, remote resource or skip..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public List<OpenIDAttribute> createAttributeList(String identifier) { for (Map.Entry<Pattern, List<OpenIDAttribute>> entry : idToAttributes.entrySet()) { if (entry.getKey().matcher(identifier).matches()) { return entry.getValue(); } } return Collections.emptyList(); }\n\n    ### Response:",
        "ground_truth": "Iterates through the patterns stored in the map and returns the list of attributes\ndefined for the first match. If no match is found, returns an empty list.",
        "predict": " Return 'local', 'remote', or 'skip' to use local, remote resource or skip..\n\n    "
    },
    {
        "ID": 197,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function getCompiledFile() { if($this->compiledFile === null) $this->compiledFile = $this->params['root'].'/storage/compiled.php';#default path return $this->compiledFile; }\n\n    ### Response: Get the compiled classes file.\n@return string.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    Serializable identifierFrom(Serializable identifier, ResultSet resultSet) throws SQLException { if (isString(identifier) && hasValidClassIdType(resultSet) && canConvertFromStringTo(classIdTypeFrom(resultSet))) { identifier = convertFromStringTo((String) identifier, classIdTypeFrom(resultSet)); } else { // Assume it should be a Long type identifier = convertToLong(identifier); } return identifier; }\n\n    ### Response:",
        "ground_truth": "Converts the raw type from the database into the right Java type. For most applications the 'raw type' will be Long, for some applications\nit could be String.\n@param identifier The identifier from the database\n@param resultSet  Result set of the query\n@return The identifier in the appropriate target Java type. Typically Long or UUID.\n@throws SQLException",
        "predict": " Get the compiled classes file.\n@return string.\n\n    "
    },
    {
        "ID": 198,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function slaveClosed() { $this->verboseTimer(function ($took) { return sprintf('<info>Worker %d took abnormal %.3f seconds for handling a connection</info>', $this->slave->getPort(), $took); }); // Return a \"502 Bad Gateway\" response if the response was empty if ($this->lastOutgoingData == '') { $this->output->writeln('Script did not return a valid HTTP response. Maybe it has called exit() prematurely?'); $this->incoming->write($this->createErrorResponse('502 Bad Gateway', 'Slave returned an invalid HTTP response. Maybe the script has called exit() prematurely?')); } $this->incoming->end(); if ($this->maxExecutionTime > 0) { $this->loop->cancelTimer($this->maxExecutionTimer); } if ($this->slave->getStatus() === Slave::LOCKED) { // slave was locked, so mark as closed now. $this->slave->close(); $this->output->writeln(sprintf('Marking locked worker #%d as closed', $this->slave->getPort())); $this->slave->getConnection()->close(); } elseif ($this->slave->getStatus() !== Slave::CLOSED) { // if slave has already closed its connection to master, // it probably died and is already terminated // mark slave as available $this->slave->release(); /** @var ConnectionInterface $connection */ $connection = $this->slave->getConnection(); $maxRequests = $this->slave->getMaxRequests(); if ($this->slave->getHandledRequests() >= $maxRequests) { $this->slave->close(); $this->output->writeln(sprintf('Restart worker #%d because it reached max requests of %d', $this->slave->getPort(), $maxRequests)); $connection->close(); } // Enforce memory limit $memoryLimit = $this->slave->getMemoryLimit(); if ($memoryLimit > 0 && $this->slave->getUsedMemory() >= $memoryLimit) { $this->slave->close(); $this->output->writeln(sprintf('Restart worker #%d because it reached memory limit of %d', $this->slave->getPort(), $memoryLimit)); $connection->close(); } } }\n\n    ### Response: Handle slave disconnected\n\nTypically called after slave has finished handling request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void createEntries(final MutableAcl acl) { if (acl.getEntries().isEmpty()) { return; } jdbcOperations.batchUpdate(insertEntry, new BatchPreparedStatementSetter() { public int getBatchSize() { return acl.getEntries().size(); } public void setValues(PreparedStatement stmt, int i) throws SQLException { AccessControlEntry entry_ = acl.getEntries().get(i); Assert.isTrue(entry_ instanceof AccessControlEntryImpl, \"Unknown ACE class\"); AccessControlEntryImpl entry = (AccessControlEntryImpl) entry_; stmt.setLong(1, ((Long) acl.getId()).longValue()); stmt.setInt(2, i); stmt.setLong(3, createOrRetrieveSidPrimaryKey(entry.getSid(), true) .longValue()); stmt.setInt(4, entry.getPermission().getMask()); stmt.setBoolean(5, entry.isGranting()); stmt.setBoolean(6, entry.isAuditSuccess()); stmt.setBoolean(7, entry.isAuditFailure()); } }); }\n\n    ### Response:",
        "ground_truth": "Creates a new row in acl_entry for every ACE defined in the passed MutableAcl\nobject.\n\n@param acl containing the ACEs to insert",
        "predict": " Handle slave disconnected\n\nTypically called after slave has finished handling request.\n\n    "
    },
    {
        "ID": 199,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function renderWidget(Twig_Environment $env, AdminList $view, $basepath, array $urlparams = [], array $addparams = []) { $filterBuilder = $view->getFilterBuilder(); return $env->render( 'KunstmaanAdminListBundle:AdminListTwigExtension:widget.html.twig', [ 'filter' => $filterBuilder, 'basepath' => $basepath, 'addparams' => $addparams, 'extraparams' => $urlparams, 'adminlist' => $view, ] ); }\n\n    ### Response: Renders the HTML for a given view\n\nExample usage in Twig:\n\n{{ form_widget(view) }}\n\nYou can pass options during the call:\n\n{{ form_widget(view, {'attr': {'class': 'foo'}}) }}\n\n{{ form_widget(view, {'separator': '+++++'}) }}\n\n@param Twig_Environment $env\n@param AdminList        $view      The view to render\n@param string           $basepath  The base path\n@param array            $urlparams Additional url params\n@param array            $addparams Add params\n\n@return string The html markup\n\n@throws \\Throwable\n@throws \\Twig_Error_Loader\n@throws \\Twig_Error_Runtime\n@throws \\Twig_Error_Syntax.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void createObjectIdentity(ObjectIdentity object, Sid owner) { Long sidId = createOrRetrieveSidPrimaryKey(owner, true); Long classId = createOrRetrieveClassPrimaryKey(object.getType(), true, object.getIdentifier().getClass()); jdbcOperations.update(insertObjectIdentity, classId, object.getIdentifier().toString(), sidId, Boolean.TRUE); }\n\n    ### Response:",
        "ground_truth": "Creates an entry in the acl_object_identity table for the passed ObjectIdentity.\nThe Sid is also necessary, as acl_object_identity has defined the sid column as\nnon-null.\n\n@param object to represent an acl_object_identity for\n@param owner for the SID column (will be created if there is no acl_sid entry for\nthis particular Sid already)",
        "predict": " Renders the HTML for a given view\n\nExample usage in Twig:\n\n{{ form_widget(view) }}\n\nYou can pass options during the call:\n\n{{ form_widget(view, {'attr': {'class': 'foo'}}) }}\n\n{{ form_widget(view, {'separator': '+++++'}) }}\n\n@param Twig_Environment $env\n@param AdminList        $view      The view to render\n@param string           $basepath  The base path\n@param array            $urlparams Additional url params\n@param array            $addparams Add params\n\n@return string The html markup\n\n@throws \\Throwable\n@throws \\Twig_Error_Loader\n@throws \\Twig_Error_Runtime\n@throws \\Twig_Error_Syntax.\n\n    "
    },
    {
        "ID": 200,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function removeLoggerByInstance($logger, $trigger = true) { foreach ($this->loggers as $key => $addedLogger) { if ($addedLogger[0] === $logger) { unset($this->loggers[$key]); return $this; } } if ($trigger) { $class = get_class($logger); trigger_error(\"Logger $class was removed without being added.\"); } return $this; }\n\n    ### Response: Remove a logger by passing in its instance.\n\n@param LoggerInterface $logger\n@param bool $trigger\n@return AggregateLogger.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void updateObjectIdentity(MutableAcl acl) { Long parentId = null; if (acl.getParentAcl() != null) { Assert.isInstanceOf(ObjectIdentityImpl.class, acl.getParentAcl() .getObjectIdentity(), \"Implementation only supports ObjectIdentityImpl\"); ObjectIdentityImpl oii = (ObjectIdentityImpl) acl.getParentAcl() .getObjectIdentity(); parentId = retrieveObjectIdentityPrimaryKey(oii); } Assert.notNull(acl.getOwner(), \"Owner is required in this implementation\"); Long ownerSid = createOrRetrieveSidPrimaryKey(acl.getOwner(), true); int count = jdbcOperations.update(updateObjectIdentity, parentId, ownerSid, Boolean.valueOf(acl.isEntriesInheriting()), acl.getId()); if (count != 1) { throw new NotFoundException(\"Unable to locate ACL to update\"); } }\n\n    ### Response:",
        "ground_truth": "Updates an existing acl_object_identity row, with new information presented in the\npassed MutableAcl object. Also will create an acl_sid entry if needed for the Sid\nthat owns the MutableAcl.\n\n@param acl to modify (a row must already exist in acl_object_identity)\n\n@throws NotFoundException if the ACL could not be found to update.",
        "predict": " Remove a logger by passing in its instance.\n\n@param LoggerInterface $logger\n@param bool $trigger\n@return AggregateLogger.\n\n    "
    },
    {
        "ID": 201,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function append(self $other) : self { $path = clone $this; $path->operations = array_merge($this->operations, $other->operations); return $path; }\n\n    ### Response: Appends another path to this one..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void saveRequest(HttpServletRequest request, HttpServletResponse response) { if (requestMatcher.matches(request)) { DefaultSavedRequest savedRequest = new DefaultSavedRequest(request, portResolver); if (createSessionAllowed || request.getSession(false) != null) { // Store the HTTP request itself. Used by // AbstractAuthenticationProcessingFilter // for redirection after successful authentication (SEC-29) request.getSession().setAttribute(this.sessionAttrName, savedRequest); logger.debug(\"DefaultSavedRequest added to Session: \" + savedRequest); } } else { logger.debug(\"Request not saved as configured RequestMatcher did not match\"); } }\n\n    ### Response:",
        "ground_truth": "Stores the current request, provided the configuration properties allow it.",
        "predict": " Appends another path to this one..\n\n    "
    },
    {
        "ID": 202,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public AVQuery<T> whereNear(String key, AVGeoPoint point) { conditions.whereNear(key, point); return this; }\n\n    ### Response: Add a proximity based constraint for finding objects with key point values near the point\ngiven.\n\n@param key The key that the AVGeoPoint is stored in.\n@param point The reference AVGeoPoint that is used.\n@return Returns the query, so you can chain this call..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static ServerWebExchangeMatcher pathMatchers(HttpMethod method, String... patterns) { List<ServerWebExchangeMatcher> matchers = new ArrayList<>(patterns.length); for (String pattern : patterns) { matchers.add(new PathPatternParserServerWebExchangeMatcher(pattern, method)); } return new OrServerWebExchangeMatcher(matchers); }\n\n    ### Response:",
        "ground_truth": "Creates a matcher that matches on the specific method and any of the provided patterns.\n@param method the method to match on. If null, any method will be matched\n@param patterns the patterns to match on\n@return the matcher to use",
        "predict": " Add a proximity based constraint for finding objects with key point values near the point\ngiven.\n\n@param key The key that the AVGeoPoint is stored in.\n@param point The reference AVGeoPoint that is used.\n@return Returns the query, so you can chain this call..\n\n    "
    },
    {
        "ID": 203,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def trim(self): \"\"\" Trims data based on propensity score to create a subsample with better covariate balance. The default cutoff value is set to 0.1. To set a custom cutoff value, modify the object attribute named cutoff directly. This method should only be executed after the propensity score has been estimated. \"\"\" if 0 < self.cutoff <= 0.5: pscore = self.raw_data['pscore'] keep = (pscore >= self.cutoff) & (pscore <= 1-self.cutoff) Y_trimmed = self.raw_data['Y'][keep] D_trimmed = self.raw_data['D'][keep] X_trimmed = self.raw_data['X'][keep] self.raw_data = Data(Y_trimmed, D_trimmed, X_trimmed) self.raw_data._dict['pscore'] = pscore[keep] self.summary_stats = Summary(self.raw_data) self.strata = None self.estimates = Estimators() elif self.cutoff == 0: pass else: raise ValueError('Invalid cutoff.')\n\n    ### Response: Trims data based on propensity score to create a subsample with\n\t\tbetter covariate balance.\n\t\t\n\t\tThe default cutoff value is set to 0.1. To set a custom cutoff\n\t\tvalue, modify the object attribute named cutoff directly.\n\n\t\tThis method should only be executed after the propensity score\n\t\thas been estimated..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static ServerWebExchangeMatcher anyExchange() { // we don't use a lambda to ensure a unique equals and hashcode // which otherwise can cause problems with adding multiple entries to an ordered LinkedHashMap return new ServerWebExchangeMatcher() { @Override public Mono<MatchResult> matches(ServerWebExchange exchange) { return ServerWebExchangeMatcher.MatchResult.match(); } }; }\n\n    ### Response:",
        "ground_truth": "Matches any exchange\n@return the matcher to use",
        "predict": " Trims data based on propensity score to create a subsample with\n\t\tbetter covariate balance.\n\t\t\n\t\tThe default cutoff value is set to 0.1. To set a custom cutoff\n\t\tvalue, modify the object attribute named cutoff directly.\n\n\t\tThis method should only be executed after the propensity score\n\t\thas been estimated..\n\n    "
    },
    {
        "ID": 204,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String timeStampToString(final Timestamp timestamp, final String format) { return dateToString(new Date(timestamp.getTime()), format); }\n\n    ### Response: Time stamp to string.\n\n@param timestamp\nthe timestamp\n@param format\nthe format\n@return the string.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static TextEncryptor delux(CharSequence password, CharSequence salt) { return new HexEncodingTextEncryptor(stronger(password, salt)); }\n\n    ### Response:",
        "ground_truth": "Creates a text encryptor that uses \"stronger\" password-based encryption. Encrypted\ntext is hex-encoded.\n\n@param password the password used to generate the encryptor's secret key; should\nnot be shared\n@see Encryptors#stronger(CharSequence, CharSequence)",
        "predict": " Time stamp to string.\n\n@param timestamp\nthe timestamp\n@param format\nthe format\n@return the string.\n\n    "
    },
    {
        "ID": 205,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def select_default_values return if @default_value.nil? # NOTE list not yet created raise \"list has not yet been created\" unless @list index = node_to_row @default_value raise \"could not find node #{@default_value}, #{@list} \" unless index return unless index @current_index = index toggle_row_selection @default_value = nil end\n\n    ### Response: thanks to shoes, not sure how this will impact since widget has text.\n show default value as selected and fire handler for it\n This is called in repaint, so can raise an error if called on creation\n or before repaint. Just set @default_value, and let us handle the rest.\n Suggestions are welcome..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static TextEncryptor text(CharSequence password, CharSequence salt) { return new HexEncodingTextEncryptor(standard(password, salt)); }\n\n    ### Response:",
        "ground_truth": "Creates a text encryptor that uses \"standard\" password-based encryption. Encrypted\ntext is hex-encoded.\n\n@param password the password used to generate the encryptor's secret key; should\nnot be shared\n@see Encryptors#standard(CharSequence, CharSequence)",
        "predict": " thanks to shoes, not sure how this will impact since widget has text.\n show default value as selected and fire handler for it\n This is called in repaint, so can raise an error if called on creation\n or before repaint. Just set @default_value, and let us handle the rest.\n Suggestions are welcome..\n\n    "
    },
    {
        "ID": 206,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def removeSpecfile(self, specfiles): \"\"\"Completely removes the specified specfiles from the ``SiiContainer``. :param specfiles: the name of an ms-run file or a list of names. \"\"\" for specfile in aux.toList(specfiles): del self.container[specfile] del self.info[specfile]\n\n    ### Response: Completely removes the specified specfiles from the ``SiiContainer``.\n\n        :param specfiles: the name of an ms-run file or a list of names..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static TextEncryptor queryableText(CharSequence password, CharSequence salt) { return new HexEncodingTextEncryptor(new AesBytesEncryptor(password.toString(), salt)); }\n\n    ### Response:",
        "ground_truth": "Creates an encryptor for queryable text strings that uses standard password-based\nencryption. Uses a 16-byte all-zero initialization vector so encrypting the same\ndata results in the same encryption result. This is done to allow encrypted data to\nbe queried against. Encrypted text is hex-encoded.\n\n@param password the password used to generate the encryptor's secret key; should\nnot be shared\n@param salt a hex-encoded, random, site-global salt value to use to generate the\nsecret key",
        "predict": " Completely removes the specified specfiles from the ``SiiContainer``.\n\n        :param specfiles: the name of an ms-run file or a list of names..\n\n    "
    },
    {
        "ID": 207,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static function has_annotations_or_comments($gradeid, $includedraft) { global $DB; $params = array('gradeid'=>$gradeid); if (!$includedraft) { $params['draft'] = 0; } if ($DB->count_records('assignfeedback_editpdf_cmnt', $params)) { return true; } if ($DB->count_records('assignfeedback_editpdf_annot', $params)) { return true; } return false; }\n\n    ### Response: Has annotations or comments.\n@param int $gradeid\n@return bool.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void writeHeaders(HttpServletRequest request, HttpServletResponse response) { if (XFrameOptionsMode.ALLOW_FROM.equals(frameOptionsMode)) { String allowFromValue = this.allowFromStrategy.getAllowFromValue(request); if (XFrameOptionsMode.DENY.getMode().equals(allowFromValue)) { if (!response.containsHeader(XFRAME_OPTIONS_HEADER)) { response.setHeader(XFRAME_OPTIONS_HEADER, XFrameOptionsMode.DENY.getMode()); } } else if (allowFromValue != null) { if (!response.containsHeader(XFRAME_OPTIONS_HEADER)) { response.setHeader(XFRAME_OPTIONS_HEADER, XFrameOptionsMode.ALLOW_FROM.getMode() + \" \" + allowFromValue); } } } else { response.setHeader(XFRAME_OPTIONS_HEADER, frameOptionsMode.getMode()); } }\n\n    ### Response:",
        "ground_truth": "Writes the X-Frame-Options header value, overwritting any previous value.\n\n@param request the servlet request\n@param response the servlet response",
        "predict": " Has annotations or comments.\n@param int $gradeid\n@return bool.\n\n    "
    },
    {
        "ID": 208,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected List<Instance> getInstancesForApp(String serviceId) throws Exception { List<Instance> instances = new ArrayList<>(); log.info(\"Fetching instances for app: \" + serviceId); List<ServiceInstance> serviceInstances = discoveryClient.getInstances(serviceId); if (serviceInstances == null || serviceInstances.isEmpty()) { log.warn(\"DiscoveryClient returned null or empty for service: \" + serviceId); return instances; } try { log.info(\"Received instance list for service: \" + serviceId + \", size=\" + serviceInstances.size()); for (ServiceInstance serviceInstance : serviceInstances) { Instance instance = marshall(serviceInstance); if (instance != null) { instances.add(instance); } } } catch (Exception e) { log.warn(\"Failed to retrieve instances from DiscoveryClient\", e); } return instances; }\n\n    ### Response: helper that fetches the Instances for each application from DiscoveryClient.\n@param serviceId Id of the service whose instances should be returned\n@return List of instances\n@throws Exception - retrieving and marshalling service instances may result in an\nException.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected String determineTargetUrl(HttpServletRequest request, HttpServletResponse response, Authentication authentication) { return determineTargetUrl(request, response); }\n\n    ### Response:",
        "ground_truth": "Builds the target URL according to the logic defined in the main class Javadoc\n\n@since 5.2",
        "predict": " helper that fetches the Instances for each application from DiscoveryClient.\n@param serviceId Id of the service whose instances should be returned\n@return List of instances\n@throws Exception - retrieving and marshalling service instances may result in an\nException.\n\n    "
    },
    {
        "ID": 209,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (s *Server) Serve(conn net.PacketConn) error { return s.serveImpl(s.TLSConfig, conn) }\n\n    ### Response: // Serve an existing UDP connection..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected String determineTargetUrl(HttpServletRequest request, HttpServletResponse response) { if (isAlwaysUseDefaultTargetUrl()) { return defaultTargetUrl; } // Check for the parameter and use that if available String targetUrl = null; if (targetUrlParameter != null) { targetUrl = request.getParameter(targetUrlParameter); if (StringUtils.hasText(targetUrl)) { logger.debug(\"Found targetUrlParameter in request: \" + targetUrl); return targetUrl; } } if (useReferer && !StringUtils.hasLength(targetUrl)) { targetUrl = request.getHeader(\"Referer\"); logger.debug(\"Using Referer header: \" + targetUrl); } if (!StringUtils.hasText(targetUrl)) { targetUrl = defaultTargetUrl; logger.debug(\"Using default Url: \" + targetUrl); } return targetUrl; }\n\n    ### Response:",
        "ground_truth": "Builds the target URL according to the logic defined in the main class Javadoc.",
        "predict": " // Serve an existing UDP connection..\n\n    "
    },
    {
        "ID": 210,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def load_config_from_setup(app): \"\"\" Replace values in app.config from package metadata \"\"\" # for now, assume project root is one level up root = os.path.join(app.confdir, '..') setup_script = os.path.join(root, 'setup.py') fields = ['--name', '--version', '--url', '--author'] dist_info_cmd = [sys.executable, setup_script] + fields output = subprocess.check_output( dist_info_cmd, cwd=root, universal_newlines=True, ) outputs = output.strip().split('\\n') project, version, url, author = outputs app.config.project = project app.config.version = app.config.release = version app.config.package_url = url app.config.author = app.config.copyright = author\n\n    ### Response: Replace values in app.config from package metadata.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void setTargetUrlParameter(String targetUrlParameter) { if (targetUrlParameter != null) { Assert.hasText(targetUrlParameter, \"targetUrlParameter cannot be empty\"); } this.targetUrlParameter = targetUrlParameter; }\n\n    ### Response:",
        "ground_truth": "If this property is set, the current request will be checked for this a parameter\nwith this name and the value used as the target URL if present.\n\n@param targetUrlParameter the name of the parameter containing the encoded target\nURL. Defaults to null.",
        "predict": " Replace values in app.config from package metadata.\n\n    "
    },
    {
        "ID": 211,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function(oColumn, nWidth) { oColumn = this.getColumn(oColumn); if(oColumn) { this._storeScrollPositions(); // Validate new width against minWidth if(lang.isNumber(nWidth)) { nWidth = (nWidth > oColumn.minWidth) ? nWidth : oColumn.minWidth; // Save state oColumn.width = nWidth; // Resize the DOM elements this._setColumnWidth(oColumn, nWidth+\"px\"); this._syncScroll(); this.fireEvent(\"columnSetWidthEvent\",{column:oColumn,width:nWidth}); } // Unsets a width to auto-size else if(nWidth === null) { // Save state oColumn.width = nWidth; // Resize the DOM elements this._setColumnWidth(oColumn, \"auto\"); this.validateColumnWidths(oColumn); this.fireEvent(\"columnUnsetWidthEvent\",{column:oColumn}); } // Bug 2339454: resize then sort misaligment this._clearTrTemplateEl(); } else { } }\n\n    ### Response: Sets given Column to given pixel width. If new width is less than minWidth\nwidth, sets to minWidth. Updates oColumn.width value.\n\n@method setColumnWidth\n@param oColumn {YAHOO.widget.Column} Column instance.\n@param nWidth {Number} New width in pixels..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private Directory getDirectoryWithImmediateParentPopulated(final Long id) { return getJdbcTemplate().queryForObject(SELECT_FROM_DIRECTORY_SINGLE, new Object[] { id }, new RowMapper<Directory>() { public Directory mapRow(ResultSet rs, int rowNumber) throws SQLException { Long parentDirectoryId = new Long(rs .getLong(\"parent_directory_id\")); Directory parentDirectory = Directory.ROOT_DIRECTORY; if (parentDirectoryId != null && !parentDirectoryId.equals(new Long(-1))) { // Need to go and lookup the parent, so do that first parentDirectory = getDirectoryWithImmediateParentPopulated(parentDirectoryId); } Directory directory = new Directory(rs .getString(\"directory_name\"), parentDirectory); FieldUtils.setProtectedFieldValue(\"id\", directory, new Long(rs.getLong(\"id\"))); return directory; } }); }\n\n    ### Response:",
        "ground_truth": "Executes recursive SQL as needed to build a full Directory hierarchy of objects",
        "predict": " Sets given Column to given pixel width. If new width is less than minWidth\nwidth, sets to minWidth. Updates oColumn.width value.\n\n@method setColumnWidth\n@param oColumn {YAHOO.widget.Column} Column instance.\n@param nWidth {Number} New width in pixels..\n\n    "
    },
    {
        "ID": 212,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Predicate<Class<?>> atLeastOneMethodAnnotatedWith(final Class<? extends Annotation> annotationClass, boolean includeMetaAnnotations) { return candidate -> Classes.from(candidate) .traversingInterfaces() .traversingSuperclasses() .methods() .anyMatch(elementAnnotatedWith(annotationClass, includeMetaAnnotations)); }\n\n    ### Response: Checks if the candidate or one of its superclasses or interfaces has at least one method\nannotated or meta-annotated\nby the given annotation.\n\n@param annotationClass        the requested annotation\n@param includeMetaAnnotations if true, meta-annotations are included in the search.\n@return the predicate..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public DistinguishedName buildDn(String username) { DistinguishedName dn = new DistinguishedName(userDnBase); dn.add(usernameAttribute, username); return dn; }\n\n    ### Response:",
        "ground_truth": "Assembles the Distinguished Name that should be used the given username.",
        "predict": " Checks if the candidate or one of its superclasses or interfaces has at least one method\nannotated or meta-annotated\nby the given annotation.\n\n@param annotationClass        the requested annotation\n@param includeMetaAnnotations if true, meta-annotations are included in the search.\n@return the predicate..\n\n    "
    },
    {
        "ID": 213,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (s *TrustedAdvisorCheckRefreshStatus) SetMillisUntilNextRefreshable(v int64) *TrustedAdvisorCheckRefreshStatus { s.MillisUntilNextRefreshable = &v return s }\n\n    ### Response: // SetMillisUntilNextRefreshable sets the MillisUntilNextRefreshable field's value..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private Map<Class<? extends Object>, Object> createSharedObjects() { Map<Class<? extends Object>, Object> sharedObjects = new HashMap<Class<? extends Object>, Object>(); sharedObjects.putAll(localConfigureAuthenticationBldr.getSharedObjects()); sharedObjects.put(UserDetailsService.class, userDetailsService()); sharedObjects.put(ApplicationContext.class, context); sharedObjects.put(ContentNegotiationStrategy.class, contentNegotiationStrategy); sharedObjects.put(AuthenticationTrustResolver.class, trustResolver); return sharedObjects; }\n\n    ### Response:",
        "ground_truth": "Creates the shared objects\n\n@return the shared Objects",
        "predict": " // SetMillisUntilNextRefreshable sets the MillisUntilNextRefreshable field's value..\n\n    "
    },
    {
        "ID": 214,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function trackMetric($category, array $options = []) { $item = \"ga('send', 'event', '{$category}'\"; if (!empty($options)) { $item .= \", 'action', { \"; foreach ($options as $key => $value) { $item .= \"'{$key}': {$value}, \"; } $item = rtrim($item, ', ') . \" }\"; } $item .= \");\"; $this->addItem($item); }\n\n    ### Response: Track a metric.\n\n@param string $category\n@param array  $options\n\n@return void.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void configureJaasUsingLoop() throws IOException { String loginConfigUrl = convertLoginConfigToUrl(); boolean alreadySet = false; int n = 1; final String prefix = \"login.config.url.\"; String existing; while ((existing = Security.getProperty(prefix + n)) != null) { alreadySet = existing.equals(loginConfigUrl); if (alreadySet) { break; } n++; } if (!alreadySet) { String key = prefix + n; log.debug(\"Setting security property [\" + key + \"] to: \" + loginConfigUrl); Security.setProperty(key, loginConfigUrl); } }\n\n    ### Response:",
        "ground_truth": "Loops through the login.config.url.1,login.config.url.2 properties looking for the\nlogin configuration. If it is not set, it will be set to the last available\nlogin.config.url.X property.",
        "predict": " Track a metric.\n\n@param string $category\n@param array  $options\n\n@return void.\n\n    "
    },
    {
        "ID": 215,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def main(operation, profile, auto, debug, user_name=''): \"\"\" End-to-end renew of access keys for a specific profile in local awscli config \"\"\" if user_name: logger.info('user_name parameter given (%s) as surrogate' % user_name) try: if operation in VALID_INSTALL: print(operation) elif operation == 'list': print(operation) return True elif not operation: msg_accent = (Colors.BOLD + 'list' + Colors.RESET + ' | ' + Colors.BOLD + 'up' + Colors.RESET) msg = \"\"\"You must provide a valid OPERATION for --operation parameter: --operation { \"\"\" + msg_accent + \"\"\" } \"\"\" stdout_message(msg) logger.warning('%s: No valid operation provided. Exit' % (inspect.stack()[0][3])) sys.exit(exit_codes['E_MISC']['Code']) else: msg = 'Unknown operation. Exit' stdout_message(msg) logger.warning('%s: %s' % (msg, inspect.stack()[0][3])) sys.exit(exit_codes['E_MISC']['Code']) except KeyError as e: logger.critical( '%s: Cannot find Key %s' % (inspect.stack()[0][3], str(e))) return False except OSError as e: logger.critical( '%s: problem writing to file %s. Error %s' % (inspect.stack()[0][3], output_file, str(e))) return False except Exception as e: logger.critical( '%s: Unknown error. Error %s' % (inspect.stack()[0][3], str(e))) raise e\n\n    ### Response: End-to-end renew of access keys for a specific profile in local awscli config.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String getCurrentDate() { long now = System.currentTimeMillis(); if ((now - currentDateGenerated) > 1000) { synchronized (format) { if ((now - currentDateGenerated) > 1000) { currentDateGenerated = now; currentDate = format.format(new Date(now)); } } } return currentDate; }\n\n    ### Response:",
        "ground_truth": "Gets the current date in HTTP format.\n\n@return Current date in HTTP format",
        "predict": " End-to-end renew of access keys for a specific profile in local awscli config.\n\n    "
    },
    {
        "ID": 216,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (tl *TeeLogger) Warningf(format string, v ...interface{}) { tl.WarningDepth(1, fmt.Sprintf(format, v...)) }\n\n    ### Response: // Warningf is part of the Logger interface.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static Long internalParseDate(String value, DateFormat[] formats) { Date date = null; for (int i = 0; (date == null) && (i < formats.length); i++) { try { date = formats[i].parse(value); } catch (ParseException ignored) { } } if (date == null) { return null; } return new Long(date.getTime()); }\n\n    ### Response:",
        "ground_truth": "Parses date with given formatters.\n\n@param value The string to parse\n@param formats Array of formats to use\n\n@return Parsed date (or null if no formatter mached)",
        "predict": " // Warningf is part of the Logger interface.\n\n    "
    },
    {
        "ID": 217,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void fire(final HasRenderedHandlers source) { if (TYPE != null) { RenderedEvent event = new RenderedEvent(); source.fireEvent(event); } }\n\n    ### Response: Fires a rendered event on all registered handlers in the handler manager. If\nno such handlers exist, this method will do nothing.\n\n@param source the source of the handlers.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SuppressWarnings(\"unchecked\") private static void updateCache(HashMap cache, Object key, Object value) { if (value == null) { return; } if (cache.size() > 1000) { cache.clear(); } cache.put(key, value); }\n\n    ### Response:",
        "ground_truth": "Updates cache.\n\n@param cache Cache to be updated\n@param key Key to be updated\n@param value New value",
        "predict": " Fires a rendered event on all registered handlers in the handler manager. If\nno such handlers exist, this method will do nothing.\n\n@param source the source of the handlers.\n\n    "
    },
    {
        "ID": 218,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def set_segmentation_context(self, apdu): \"\"\"This function is called to set the segmentation context.\"\"\" if _debug: SSM._debug(\"set_segmentation_context %s\", repr(apdu)) # set the context self.segmentAPDU = apdu\n\n    ### Response: This function is called to set the segmentation context..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void setDetails(HttpServletRequest request, UsernamePasswordAuthenticationToken authRequest) { authRequest.setDetails(authenticationDetailsSource.buildDetails(request)); }\n\n    ### Response:",
        "ground_truth": "Provided so that subclasses may configure what is put into the authentication\nrequest's details property.\n\n@param request that an authentication request is being created for\n@param authRequest the authentication request object that should have its details\nset",
        "predict": " This function is called to set the segmentation context..\n\n    "
    },
    {
        "ID": 219,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function(fileNames, callback) { var t = this, stats = [], didError = false, numLeft = fileNames.length; // No files to process if (fileNames.length === 0) { return callback(null, stats); } // Call stat on each file fileNames.forEach(function(fileName, index) { var fullPath = Path.join(t.dirPath, fileName); FS.stat(fullPath, function(error, stat) { // Process a stat error if (error) { didError = true; return callback(error); } // Do nothing if a prior error callback happened if (didError) { return; } // Set this stat item stats[index] = stat; // Callback if all stats are complete if (--numLeft === 0) { callback(null, stats); } }); }); }\n\n    ### Response: Stat all the files, returning an array of file stats matching the\narray of input files.\n\n@method statFiles\n@param fileNames {Array} An array of filenames to stat (from this directory)\n@param callback {Function(error, stats)}\n@param callback.error {Mixed} Set if an error occured\n@param callback.stats {Array of Stat} An array of fs.stats objects.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static String getSecurityName(final Subject subject) { if (logger.isDebugEnabled()) { logger.debug(\"Determining Websphere security name for subject \" + subject); } String userSecurityName = null; if (subject != null) { // SEC-803 Object credential = subject.getPublicCredentials(getWSCredentialClass()) .iterator().next(); if (credential != null) { userSecurityName = (String) invokeMethod(getSecurityNameMethod(), credential); } } if (logger.isDebugEnabled()) { logger.debug(\"Websphere security name is \" + userSecurityName + \" for subject \" + subject); } return userSecurityName; }\n\n    ### Response:",
        "ground_truth": "Get the security name for the given subject.\n\n@param subject The subject for which to retrieve the security name\n@return String the security name for the given subject",
        "predict": " Stat all the files, returning an array of file stats matching the\narray of input files.\n\n@method statFiles\n@param fileNames {Array} An array of filenames to stat (from this directory)\n@param callback {Function(error, stats)}\n@param callback.error {Mixed} Set if an error occured\n@param callback.stats {Array of Stat} An array of fs.stats objects.\n\n    "
    },
    {
        "ID": 220,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _expand_path(path): \"\"\"Expand both environment variables and user home in the given path.\"\"\" path = os.path.expandvars(path) path = os.path.expanduser(path) return path\n\n    ### Response: Expand both environment variables and user home in the given path..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SuppressWarnings(\"unchecked\") private static List<String> getWebSphereGroups(final String securityName) { Context ic = null; try { // TODO: Cache UserRegistry object ic = new InitialContext(); Object objRef = ic.lookup(USER_REGISTRY); Object userReg = invokeMethod(getNarrowMethod(), null , objRef, Class.forName(\"com.ibm.websphere.security.UserRegistry\")); if (logger.isDebugEnabled()) { logger.debug(\"Determining WebSphere groups for user \" + securityName + \" using WebSphere UserRegistry \" + userReg); } final Collection groups = (Collection) invokeMethod(getGroupsForUserMethod(), userReg, new Object[] { securityName }); if (logger.isDebugEnabled()) { logger.debug(\"Groups for user \" + securityName + \": \" + groups.toString()); } return new ArrayList(groups); } catch (Exception e) { logger.error(\"Exception occured while looking up groups for user\", e); throw new RuntimeException( \"Exception occured while looking up groups for user\", e); } finally { try { if (ic != null) { ic.close(); } } catch (NamingException e) { logger.debug(\"Exception occured while closing context\", e); } } }\n\n    ### Response:",
        "ground_truth": "Get the WebSphere group names for the given security name.\n\n@param securityName The security name for which to retrieve the WebSphere group\nnames\n@return the WebSphere group names for the given security name",
        "predict": " Expand both environment variables and user home in the given path..\n\n    "
    },
    {
        "ID": 221,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function urlFillable($url, array $map = []) { if (!str_contains($url, '{') and ! str_contains($url, '}')) { return true; } foreach ($map as $value) { if (str_contains($url, $value)) { return true; } } return false; }\n\n    ### Response: Gets url fillable params\n\n@param String $url\n@param array $map\n@return boolean.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void changePassword(final String oldPassword, final String newPassword) { Authentication authentication = SecurityContextHolder.getContext() .getAuthentication(); Assert.notNull( authentication, \"No authentication object found in security context. Can't change current user's password!\"); String username = authentication.getName(); logger.debug(\"Changing password for user '\" + username); DistinguishedName userDn = usernameMapper.buildDn(username); if (usePasswordModifyExtensionOperation) { changePasswordUsingExtensionOperation(userDn, oldPassword, newPassword); } else { changePasswordUsingAttributeModification(userDn, oldPassword, newPassword); } }\n\n    ### Response:",
        "ground_truth": "Changes the password for the current user. The username is obtained from the\nsecurity context.\n\nThere are two supported strategies for modifying the user's password depending on\nthe capabilities of the corresponding LDAP server.\n\n\nConfigured one way, this method will modify the user's password via the\n\nLDAP Password Modify Extended Operation\n.\n\nSee {@link LdapUserDetailsManager#setUsePasswordModifyExtensionOperation(boolean)} for details.\n\n\nBy default, though, if the old password is supplied, the update will be made by rebinding as the user,\nthus modifying the password using the user's permissions. If\noldPassword is null, the update will be attempted using a standard\nread/write context supplied by the context source.\n\n\n@param oldPassword the old password\n@param newPassword the new value of the password.",
        "predict": " Gets url fillable params\n\n@param String $url\n@param array $map\n@return boolean.\n\n    "
    },
    {
        "ID": 222,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public JSONObject getRawDataAsJson() throws IOException { String input = getRawDataAsString(); if ( input == null ) { return null; } return new JSONObject(input); }\n\n    ### Response: get the original request raw data as json\n\n@return  JSONObject\n@throws  IOException.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected DistinguishedName buildGroupDn(String group) { DistinguishedName dn = new DistinguishedName(groupSearchBase); dn.add(groupRoleAttributeName, group.toLowerCase()); return dn; }\n\n    ### Response:",
        "ground_truth": "Creates a DN from a group name.\n\n@param group the name of the group\n@return the DN of the corresponding group, including the groupSearchBase",
        "predict": " get the original request raw data as json\n\n@return  JSONObject\n@throws  IOException.\n\n    "
    },
    {
        "ID": 223,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def call(sender, topic, *args, **kwargs): \"\"\" Invoke receiver functions according topic, it'll invoke receiver functions one by one, and it'll not return anything, so if you want to return a value, you should use get function. \"\"\" if not topic in _receivers: return items = _receivers[topic] def _cmp(x, y): return cmp(x[0], y[0]) items.sort(_cmp) i = 0 while i<len(items): nice, f = items[i] i = i + 1 _f = f['func'] if not _f: try: _f = import_attr(f['func_name']) except (ImportError, AttributeError) as e: logging.error(\"Can't import function %s\" % f['func_name']) raise f['func'] = _f if callable(_f): kw = kwargs.copy() if not _test(kw, f): continue try: _f(sender, *args, **kw) except: func = _f.__module__ + '.' + _f.__name__ logging.exception('Calling dispatch point [%s] %s(%r, %r) error!' % (topic, func, args, kw)) raise else: raise Exception, \"Dispatch point [%s] %r can't been invoked\" % (topic, _f)\n\n    ### Response: Invoke receiver functions according topic, it'll invoke receiver functions one by one,\r\n    and it'll not return anything, so if you want to return a value, you should\r\n    use get function..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void allowableSessionsExceeded(List<SessionInformation> sessions, int allowableSessions, SessionRegistry registry) throws SessionAuthenticationException { if (exceptionIfMaximumExceeded || (sessions == null)) { throw new SessionAuthenticationException(messages.getMessage( \"ConcurrentSessionControlAuthenticationStrategy.exceededAllowed\", new Object[] { Integer.valueOf(allowableSessions) }, \"Maximum sessions of {0} for this principal exceeded\")); } // Determine least recently used session, and mark it for invalidation SessionInformation leastRecentlyUsed = null; for (SessionInformation session : sessions) { if ((leastRecentlyUsed == null) || session.getLastRequest() .before(leastRecentlyUsed.getLastRequest())) { leastRecentlyUsed = session; } } leastRecentlyUsed.expireNow(); }\n\n    ### Response:",
        "ground_truth": "Allows subclasses to customise behaviour when too many sessions are detected.\n\n@param sessions either null or all unexpired sessions associated with\nthe principal\n@param allowableSessions the number of concurrent sessions the user is allowed to\nhave\n@param registry an instance of the SessionRegistry for subclass use",
        "predict": " Invoke receiver functions according topic, it'll invoke receiver functions one by one,\r\n    and it'll not return anything, so if you want to return a value, you should\r\n    use get function..\n\n    "
    },
    {
        "ID": 224,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private function getTemplateList() { $templates = $this->getAvailableTemplates($this->bundle); $types = array(); foreach ($templates as $key => $template) { $types[$key] = $template['name']; } return $types; }\n\n    ### Response: Get all the available default templates.\n\n@return array.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void copyDetails(Authentication source, Authentication dest) { if ((dest instanceof AbstractAuthenticationToken) && (dest.getDetails() == null)) { AbstractAuthenticationToken token = (AbstractAuthenticationToken) dest; token.setDetails(source.getDetails()); } }\n\n    ### Response:",
        "ground_truth": "Copies the authentication details from a source Authentication object to a\ndestination one, provided the latter does not already have one set.\n\n@param source source authentication\n@param dest the destination authentication object",
        "predict": " Get all the available default templates.\n\n@return array.\n\n    "
    },
    {
        "ID": 225,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function _first_split(character, string){ var retlist = null; var eq_loc = string.indexOf(character); if( eq_loc == 0 ){ retlist = ['', string.substr(eq_loc +1, string.length)]; }else if( eq_loc > 0 ){ var before = string.substr(0, eq_loc); var after = string.substr(eq_loc +1, string.length); retlist = [before, after]; }else{ retlist = ['', '']; } return retlist; }\n\n    ### Response: Attempt to return a two part split on the first occurrence of a\ncharacter.\n\nReturns '' for parts not found.\n\nUnit tests make the edge cases clear.\n\n@function\n@name module:bbop-core#first_split\n@param {String} character - the character to split on\n@param {String} string - the string to split\n@returns {Array} list of first and second parts.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private List<Filter> getFilters(HttpServletRequest request) { for (SecurityFilterChain chain : filterChains) { if (chain.matches(request)) { return chain.getFilters(); } } return null; }\n\n    ### Response:",
        "ground_truth": "Returns the first filter chain matching the supplied URL.\n\n@param request the request to match\n@return an ordered array of Filters defining the filter chain",
        "predict": " Attempt to return a two part split on the first occurrence of a\ncharacter.\n\nReturns '' for parts not found.\n\nUnit tests make the edge cases clear.\n\n@function\n@name module:bbop-core#first_split\n@param {String} character - the character to split on\n@param {String} string - the string to split\n@returns {Array} list of first and second parts.\n\n    "
    },
    {
        "ID": 226,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func SetPoolStatusForTicketsByHash(db *sql.DB, tickets []string, poolStatuses []dbtypes.TicketPoolStatus) (int64, error) { if len(tickets) == 0 { return 0, nil } dbtx, err := db.Begin() if err != nil { return 0, fmt.Errorf(`unable to begin database transaction: %v`, err) } var stmt *sql.Stmt stmt, err = dbtx.Prepare(internal.SetTicketPoolStatusForHash) if err != nil { // Already up a creek. Just return error from Prepare. _ = dbtx.Rollback() return 0, fmt.Errorf(\"tickets SELECT prepare failed: %v\", err) } var totalTicketsUpdated int64 rowsAffected := make([]int64, len(tickets)) for i, ticket := range tickets { rowsAffected[i], err = sqlExecStmt(stmt, \"failed to set ticket pool status: \", ticket, poolStatuses[i]) if err != nil { _ = stmt.Close() return 0, dbtx.Rollback() } totalTicketsUpdated += rowsAffected[i] if rowsAffected[i] != 1 { log.Warnf(\"Updated pool status for %d tickets, expecting just 1 (%s, %v)!\", rowsAffected[i], ticket, poolStatuses[i]) // TODO: go get the info to add it to the tickets table } } _ = stmt.Close() return totalTicketsUpdated, dbtx.Commit() }\n\n    ### Response: // SetPoolStatusForTicketsByHash sets the ticket pool status for the tickets\n// specified by ticket purchase transaction hash..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public List<Filter> getFilters(String url) { return getFilters(firewall.getFirewalledRequest((new FilterInvocation(url, \"GET\") .getRequest()))); }\n\n    ### Response:",
        "ground_truth": "Convenience method, mainly for testing.\n\n@param url the URL\n@return matching filter list",
        "predict": " // SetPoolStatusForTicketsByHash sets the ticket pool status for the tickets\n// specified by ticket purchase transaction hash..\n\n    "
    },
    {
        "ID": 227,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function handleShutdowns() { declare(ticks = 1); $self = $this; $cleanup = function($signal = null) use ($self) { if ($signal === SIGTERM) { fprintf(STDERR, 'Received SIGTERM...'); } else if ($signal === SIGINT) { fprintf(STDERR, 'Received SIGINT...'); } else if ($signal === SIGTSTP) { fprintf(STDERR, 'Received SIGTSTP...'); } $self->deleteAllLocks(); exit; }; if (extension_loaded('pcntl')) { pcntl_signal(SIGTERM, $cleanup, false); pcntl_signal(SIGINT, $cleanup, false); pcntl_signal(SIGTSTP, $cleanup, false); } register_shutdown_function($cleanup); }\n\n    ### Response: Handle shutdown events and clean up lock files..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected ApplicationContext getContext(PageContext pageContext) { ServletContext servletContext = pageContext.getServletContext(); return SecurityWebApplicationContextUtils.findRequiredWebApplicationContext(servletContext); }\n\n    ### Response:",
        "ground_truth": "Allows test cases to override where application context obtained from.\n\n@param pageContext so the ServletContext can be accessed as required\nby Spring's WebApplicationContextUtils\n\n@return the Spring application context (never null)",
        "predict": " Handle shutdown events and clean up lock files..\n\n    "
    },
    {
        "ID": 228,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func checkAttributeConstraint(ctx Context, operand string, lVal, rVal *psstructs.Attribute, lFound, rFound bool) bool { // Check for constraints not handled by this checker. switch operand { case structs.ConstraintDistinctHosts, structs.ConstraintDistinctProperty: return true default: break } switch operand { case \"!=\", \"not\": // Neither value was provided, nil != nil == false if !(lFound || rFound) { return false } // Only 1 value was provided, therefore nil != some == true if lFound != rFound { return true } // Both values were provided, so actually compare them v, ok := lVal.Compare(rVal) if !ok { return false } return v != 0 case \"<\", \"<=\", \">\", \">=\", \"=\", \"==\", \"is\": if !(lFound && rFound) { return false } v, ok := lVal.Compare(rVal) if !ok { return false } switch operand { case \"is\", \"==\", \"=\": return v == 0 case \"<\": return v == -1 case \"<=\": return v != 1 case \">\": return v == 1 case \">=\": return v != -1 default: return false } case structs.ConstraintVersion: if !(lFound && rFound) { return false } return checkAttributeVersionMatch(ctx, lVal, rVal) case structs.ConstraintRegex: if !(lFound && rFound) { return false } ls, ok := lVal.GetString() rs, ok2 := rVal.GetString() if !ok || !ok2 { return false } return checkRegexpMatch(ctx, ls, rs) case structs.ConstraintSetContains, structs.ConstraintSetContainsAll: if !(lFound && rFound) { return false } ls, ok := lVal.GetString() rs, ok2 := rVal.GetString() if !ok || !ok2 { return false } return checkSetContainsAll(ctx, ls, rs) case structs.ConstraintSetContainsAny: if !(lFound && rFound) { return false } ls, ok := lVal.GetString() rs, ok2 := rVal.GetString() if !ok || !ok2 { return false } return checkSetContainsAny(ls, rs) case structs.ConstraintAttributeIsSet: return lFound case structs.ConstraintAttributeIsNotSet: return !lFound default: return false } }\n\n    ### Response: // checkAttributeConstraint checks if a constraint is satisfied. nil equality\n// comparisons are considered to be false..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static DistinguishedName getFullDn(DistinguishedName dn, Context baseCtx) throws NamingException { DistinguishedName baseDn = new DistinguishedName(baseCtx.getNameInNamespace()); if (dn.contains(baseDn)) { return dn; } baseDn.append(dn); return baseDn; }\n\n    ### Response:",
        "ground_truth": "Gets the full dn of a name by prepending the name of the context it is relative to.\nIf the name already contains the base name, it is returned unaltered.",
        "predict": " // checkAttributeConstraint checks if a constraint is satisfied. nil equality\n// comparisons are considered to be false..\n\n    "
    },
    {
        "ID": 229,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (notifier *Notifier) getDefaultSeverity(rawData []interface{}, s severity) severity { allData := append(notifier.RawData, rawData...) for _, datum := range allData { if _, ok := datum.(severity); ok { return datum.(severity) } } for _, datum := range allData { if _, ok := datum.(HandledState); ok { return datum.(HandledState).OriginalSeverity } } return s }\n\n    ### Response: // Get defined severity from raw data or a fallback value.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public MockMvcRequestSpecification sessionAttrs(Map<String, Object> sessionAttributes) { notNull(sessionAttributes, \"sessionAttributes\"); parameterUpdater.updateParameters(convert(cfg.getMockMvcParamConfig().sessionAttributesUpdateStrategy()), sessionAttributes, this.sessionAttributes); return this; }\n\n    ### Response:",
        "ground_truth": "Set session attributes.\n\n@param sessionAttributes the session attributes",
        "predict": " // Get defined severity from raw data or a fallback value.\n\n    "
    },
    {
        "ID": 230,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void updateStreamPresets(UpdateStreamPresetsRequest request) { checkNotNull(request, \"The parameter request should NOT be null.\"); checkStringNotEmpty(request.getDomain(), \"Domain should NOT be empty.\"); checkStringNotEmpty(request.getApp(), \"App should NOT be empty\"); checkStringNotEmpty(request.getStream(), \"Stream should NOT be empty.\"); // presets can be null for letting stream to use domain's presets, // so no need to check if presets is null InternalRequest internalRequest = createRequest(HttpMethodName.POST, request, LIVE_DOMAIN, request.getDomain(), LIVE_APP, request.getApp(), LIVE_STREAM, request.getStream()); internalRequest.addParameter(\"presets\", null); invokeHttpClient(internalRequest, AbstractBceResponse.class); }\n\n    ### Response: Update stream's presets in the live stream service\n@param request THe request object containing all options for updating presets.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public AuthenticationScheme basic(String userName, String password) { final PreemptiveBasicAuthScheme preemptiveBasicAuthScheme = new PreemptiveBasicAuthScheme(); preemptiveBasicAuthScheme.setUserName(userName); preemptiveBasicAuthScheme.setPassword(password); return preemptiveBasicAuthScheme; }\n\n    ### Response:",
        "ground_truth": "",
        "predict": " Update stream's presets in the live stream service\n@param request THe request object containing all options for updating presets.\n\n    "
    },
    {
        "ID": 231,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (q *MoreLikeThisQuery) MinTermFreq(minTermFreq int) *MoreLikeThisQuery { q.minTermFreq = &minTermFreq return q }\n\n    ### Response: // MinTermFreq is the frequency below which terms will be ignored in the\n// source doc. The default frequency is 2..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void filters(List<Filter> filters) { Validate.notNull(filters, \"Filter list cannot be null\"); RestAssured.filters.addAll(filters); }\n\n    ### Response:",
        "ground_truth": "Add default filters that will be applied to each request.\n\n@param filters The filter list",
        "predict": " // MinTermFreq is the frequency below which terms will be ignored in the\n// source doc. The default frequency is 2..\n\n    "
    },
    {
        "ID": 232,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (l *Listener) Close() error { l.lock.Lock() defer l.lock.Unlock() if l.isClosed { return errListenerClosed } if l.cn != nil { l.cn.Close() } l.isClosed = true return nil }\n\n    ### Response: // Close disconnects the Listener from the database and shuts it down.\n// Subsequent calls to its methods will return an error.  Close returns an\n// error if the connection has already been closed..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void filters(Filter filter, Filter... additionalFilters) { Validate.notNull(filter, \"Filter cannot be null\"); RestAssured.filters.add(filter); if (additionalFilters != null) { Collections.addAll(RestAssured.filters, additionalFilters); } }\n\n    ### Response:",
        "ground_truth": "Add default filters to apply to each request.\n\n@param filter            The filter to add\n@param additionalFilters An optional array of additional filters to add",
        "predict": " // Close disconnects the Listener from the database and shuts it down.\n// Subsequent calls to its methods will return an error.  Close returns an\n// error if the connection has already been closed..\n\n    "
    },
    {
        "ID": 233,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static AlluxioStatusException fromStatusRuntimeException(StatusRuntimeException e) { return AlluxioStatusException.from(e.getStatus().withCause(e)); }\n\n    ### Response: Converts a gRPC StatusRuntimeException to an Alluxio status exception.\n\n@param e a gRPC StatusRuntimeException\n@return the converted {@link AlluxioStatusException}.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static AuthenticationScheme basic(String userName, String password) { final BasicAuthScheme scheme = new BasicAuthScheme(); scheme.setUserName(userName); scheme.setPassword(password); return scheme; }\n\n    ### Response:",
        "ground_truth": "",
        "predict": " Converts a gRPC StatusRuntimeException to an Alluxio status exception.\n\n@param e a gRPC StatusRuntimeException\n@return the converted {@link AlluxioStatusException}.\n\n    "
    },
    {
        "ID": 234,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function secure($url) { $this->unsecure($url); $this->files->ensureDirExists($this->caPath(), user()); $this->files->ensureDirExists($this->certificatesPath(), user()); $this->createCa(); $this->createCertificate($url); $this->files->putAsUser( VALET_HOME_PATH.'/Nginx/'.$url, $this->buildSecureNginxServer($url) ); }\n\n    ### Response: Secure the given host with TLS.\n\n@param  string  $url\n@return void.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static AuthenticationScheme ntlm(String userName, String password, String workstation, String domain) { final NTLMAuthScheme scheme = new NTLMAuthScheme(); scheme.setUserName(userName); scheme.setPassword(password); scheme.setWorkstation(workstation); scheme.setDomain(domain); return scheme; }\n\n    ### Response:",
        "ground_truth": "Create a NTLM authentication scheme.\n\n@param userName The user name.\n@param password The password.\n@param workstation The NTLM workstation.\n@param domain The NTLM workstation.\n@return The authentication scheme",
        "predict": " Secure the given host with TLS.\n\n@param  string  $url\n@return void.\n\n    "
    },
    {
        "ID": 235,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function findIdentityById(int $identityId): Entity\\Identity { $identity = new Entity\\Identity; $identity->setId($identityId); $this->repository->load($identity, Entity\\Identity::class); if ($identity->getAccountId() === null) { $this->logger->notice('identity not found', [ 'input' => [ 'id' => $identityId, ], ]); throw new IdentityNotFound; } return $identity; }\n\n    ### Response: Locates identity based on ID\n\n@throws IdentityNotFound if identity was not found.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static AuthenticationScheme form(String userName, String password, FormAuthConfig config) { if (userName == null) { throw new IllegalArgumentException(\"Username cannot be null\"); } if (password == null) { throw new IllegalArgumentException(\"Password cannot be null\"); } final FormAuthScheme scheme = new FormAuthScheme(); scheme.setUserName(userName); scheme.setPassword(password); scheme.setConfig(config); return scheme; }\n\n    ### Response:",
        "ground_truth": "Use form authentication with the supplied configuration.\n\n@param userName The user name.\n@param password The password.\n@param config   The form authentication config\n@return The authentication scheme",
        "predict": " Locates identity based on ID\n\n@throws IdentityNotFound if identity was not found.\n\n    "
    },
    {
        "ID": 236,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static function getMethod(array $server): string { $method = $server['REQUEST_METHOD'] ?? 'GET'; if ($method === 'POST' && isset( $server['HTTP_X_HTTP_METHOD_OVERRIDE'], self::$methods[$server['HTTP_X_HTTP_METHOD_OVERRIDE']] ) ) { $method = $server['HTTP_X_HTTP_METHOD_OVERRIDE']; } return $method; }\n\n    ### Response: Get method from server variables.\n\n@param array $server Typically $_SERVER or similar structure.\n\n@return string.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void proxy(URI uri) { if (uri == null) { throw new IllegalArgumentException(\"Proxy URI cannot be null\"); } proxy(new ProxySpecification(uri.getHost(), uri.getPort(), uri.getScheme())); }\n\n    ### Response:",
        "ground_truth": "Instruct REST Assured to connect to a proxy using a URI.\n\n@param uri The URI of the proxy",
        "predict": " Get method from server variables.\n\n@param array $server Typically $_SERVER or similar structure.\n\n@return string.\n\n    "
    },
    {
        "ID": 237,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function subtractMinutes($minutes) { $minutes = (int) $minutes; $minutes = -$minutes; return $this->addMinutes($minutes); }\n\n    ### Response: Subtracts the specified number of minutes from this date\n\n@param integer $minutes the number of minutes to subtract.\n\n@return this object on success or false on failure..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String print(ResponseOptions responseOptions, ResponseBody responseBody, PrintStream stream, LogDetail logDetail, boolean shouldPrettyPrint) { final StringBuilder builder = new StringBuilder(); if (logDetail == ALL || logDetail == STATUS) { builder.append(responseOptions.statusLine()); } if (logDetail == ALL || logDetail == HEADERS) { final Headers headers = responseOptions.headers(); if (headers.exist()) { appendNewLineIfAll(logDetail, builder).append(toString(headers)); } } else if (logDetail == COOKIES) { final Cookies cookies = responseOptions.detailedCookies(); if (cookies.exist()) { appendNewLineIfAll(logDetail, builder).append(cookies.toString()); } } if (logDetail == ALL || logDetail == BODY) { String responseBodyToAppend; if (shouldPrettyPrint) { responseBodyToAppend = new Prettifier().getPrettifiedBodyIfPossible(responseOptions, responseBody); } else { responseBodyToAppend = responseBody.asString(); } if (logDetail == ALL && !isBlank(responseBodyToAppend)) { builder.append(SystemUtils.LINE_SEPARATOR).append(SystemUtils.LINE_SEPARATOR); } builder.append(responseBodyToAppend); } String response = builder.toString(); stream.println(response); return response; }\n\n    ### Response:",
        "ground_truth": "Prints the response to the print stream\n\n@return A string of representing the response",
        "predict": " Subtracts the specified number of minutes from this date\n\n@param integer $minutes the number of minutes to subtract.\n\n@return this object on success or false on failure..\n\n    "
    },
    {
        "ID": 238,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def config_context(symbol, &block) if configurables.key?(symbol) raise ReopenedConfigurableWithConfigContextError, \"Cannot redefine config value #{symbol} with a config context\" end if config_contexts.key?(symbol) context = config_contexts[symbol] else context = Class.new context.extend(::Mixlib::Config) context.config_parent = self config_contexts[symbol] = context define_attr_accessor_methods(symbol) end if block context.instance_eval(&block) end context end\n\n    ### Response: Allows you to create a new config context where you can define new\n options with default values.\n\n This method allows you to open up the configurable more than once.\n\n For example:\n\n config_context :server_info do\n   configurable(:url).defaults_to(\"http://localhost\")\n end\n\n === Parameters\n symbol: the name of the context\n block: a block that will be run in the context of this new config\n class..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public RestAssuredConfig redirect(RedirectConfig redirectConfig) { notNull(redirectConfig, \"Redirect config\"); return new RestAssuredConfig(redirectConfig, conf(HttpClientConfig.class), conf(LogConfig.class), conf(EncoderConfig.class), conf(DecoderConfig.class), conf(SessionConfig.class), conf(ObjectMapperConfig.class), conf(ConnectionConfig.class), conf(JsonConfig.class), conf(XmlConfig.class), conf(SSLConfig.class), conf(MatcherConfig.class), conf(HeaderConfig.class), conf(MultiPartConfig.class), conf(ParamConfig.class), conf(OAuthConfig.class), conf(FailureConfig.class)); }\n\n    ### Response:",
        "ground_truth": "Set the redirect config.\n\n@param redirectConfig The {@link RedirectConfig} to set\n@return An updated RestAssuredConfiguration",
        "predict": " Allows you to create a new config context where you can define new\n options with default values.\n\n This method allows you to open up the configurable more than once.\n\n For example:\n\n config_context :server_info do\n   configurable(:url).defaults_to(\"http://localhost\")\n end\n\n === Parameters\n symbol: the name of the context\n block: a block that will be run in the context of this new config\n class..\n\n    "
    },
    {
        "ID": 239,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function createCollection() { $collectClass = $this->collectionClass(); if ($collectClass === 'array') { return []; } if (!class_exists($collectClass)) { throw new RuntimeException(sprintf( 'Collection class [%s] does not exist.', $collectClass )); } if (!is_subclass_of($collectClass, ArrayAccess::class)) { throw new RuntimeException(sprintf( 'Collection class [%s] must implement ArrayAccess.', $collectClass )); } $collection = new $collectClass; return $collection; }\n\n    ### Response: Create a collection class or array.\n\n@throws RuntimeException If the collection class is invalid.\n@return array|ArrayAccess.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public EncoderConfig defaultQueryParameterCharset(String charset) { return new EncoderConfig(defaultContentCharset, charset, shouldAppendDefaultContentCharsetToContentTypeIfUndefined, contentEncoders, contentTypeToDefaultCharset, true); }\n\n    ### Response:",
        "ground_truth": "Specify the default charset for query parameters\n\n@param charset The charset to use.\n@return A new instance of {@link EncoderConfig}",
        "predict": " Create a collection class or array.\n\n@throws RuntimeException If the collection class is invalid.\n@return array|ArrayAccess.\n\n    "
    },
    {
        "ID": 240,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String escape(String in) { StringBuffer out = new StringBuffer(); for (char c : in.toCharArray()) { switch (c) { case '<': out.append(\"&lt;\"); break; case '>': out.append(\"&gt;\"); break; case '&': out.append(\"&amp;\"); break; case '\"': out.append(\"&quot;\"); break; default: out.append(c); } } return out.toString(); }\n\n    ### Response: Translate reserved XML characters to XML entities.\n@param in Input string..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public ObjectMapperConfig defaultObjectMapperType(ObjectMapperType defaultObjectMapperType) { return new ObjectMapperConfig(defaultObjectMapper, defaultObjectMapperType, gsonObjectMapperFactory, jackson1ObjectMapperFactory, jackson2ObjectMapperFactory, jaxbObjectMapperFactory, johnzonObjectMapperFactory, true); }\n\n    ### Response:",
        "ground_truth": "Creates an object mapper configuration that uses the specified object mapper as default.\n\n@param defaultObjectMapperType The object mapper to use. If null then classpath scanning will be used.",
        "predict": " Translate reserved XML characters to XML entities.\n@param in Input string..\n\n    "
    },
    {
        "ID": 241,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function getScanStartPosition(enclosingNode, originalRange, sourceFile) { var start = enclosingNode.getStart(sourceFile); if (start === originalRange.pos && enclosingNode.end === originalRange.end) { return start; } var precedingToken = ts.findPrecedingToken(originalRange.pos, sourceFile); if (!precedingToken) { // no preceding token found - start from the beginning of enclosing node return enclosingNode.pos; } // preceding token ends after the start of original range (i.e when originalRange.pos falls in the middle of literal) // start from the beginning of enclosingNode to handle the entire 'originalRange' if (precedingToken.end >= originalRange.pos) { return enclosingNode.pos; } return precedingToken.end; }\n\n    ### Response: Start of the original range might fall inside the comment - scanner will not yield appropriate results\nThis function will look for token that is located before the start of target range\nand return its end as start position for the scanner..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public ObjectMapperConfig jaxbObjectMapperFactory(JAXBObjectMapperFactory jaxbObjectMapperFactory) { return new ObjectMapperConfig(defaultObjectMapper, defaultObjectMapperType, gsonObjectMapperFactory, jackson1ObjectMapperFactory, jackson2ObjectMapperFactory, jaxbObjectMapperFactory, johnzonObjectMapperFactory, true); }\n\n    ### Response:",
        "ground_truth": "Specify a custom JAXB object mapper factory.\n\n@param jaxbObjectMapperFactory The object mapper factory",
        "predict": " Start of the original range might fall inside the comment - scanner will not yield appropriate results\nThis function will look for token that is located before the start of target range\nand return its end as start position for the scanner..\n\n    "
    },
    {
        "ID": 242,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void addFirst(PropertySource<?> propertySource) { if (logger.isDebugEnabled()) { logger.debug(\"Adding PropertySource '\" + propertySource.getName() + \"' with highest search precedence\"); } removeIfPresent(propertySource); this.propertySourceList.add(0, propertySource); }\n\n    ### Response: Add the given property source object with highest precedence..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public RestAssuredMockMvcConfig logConfig(LogConfig logConfig) { notNull(logConfig, \"Log config\"); return new RestAssuredMockMvcConfig(logConfig, encoderConfig, decoderConfig, sessionConfig, objectMapperConfig, jsonConfig, xmlConfig, headerConfig, asyncConfig, multiPartConfig, mockMvcConfig, paramConfig, matcherConfig); }\n\n    ### Response:",
        "ground_truth": "Set the Log config.\n\n@param logConfig The {@link LogConfig} to set\n@return An updated RestAssuredMockMvcConfig",
        "predict": " Add the given property source object with highest precedence..\n\n    "
    },
    {
        "ID": 243,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def getscript(self, name): \"\"\"Download a script from the server See MANAGESIEVE specifications, section 2.9 :param name: script's name :rtype: string :returns: the script's content on succes, None otherwise \"\"\" code, data, content = self.__send_command( \"GETSCRIPT\", [name.encode(\"utf-8\")], withcontent=True) if code == \"OK\": lines = content.splitlines() if self.__size_expr.match(lines[0]) is not None: lines = lines[1:] return u\"\\n\".join([line.decode(\"utf-8\") for line in lines]) return None\n\n    ### Response: Download a script from the server\n\n        See MANAGESIEVE specifications, section 2.9\n\n        :param name: script's name\n        :rtype: string\n        :returns: the script's content on succes, None otherwise.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public RestAssuredMockMvcConfig sessionConfig(SessionConfig sessionConfig) { notNull(sessionConfig, \"Session config\"); return new RestAssuredMockMvcConfig(logConfig, encoderConfig, decoderConfig, sessionConfig, objectMapperConfig, jsonConfig, xmlConfig, headerConfig, asyncConfig, multiPartConfig, mockMvcConfig, paramConfig, matcherConfig); }\n\n    ### Response:",
        "ground_truth": "Set the session config.\n\n@param sessionConfig The {@link SessionConfig} to set\n@return An updated RestAssuredMockMvcConfig",
        "predict": " Download a script from the server\n\n        See MANAGESIEVE specifications, section 2.9\n\n        :param name: script's name\n        :rtype: string\n        :returns: the script's content on succes, None otherwise.\n\n    "
    },
    {
        "ID": 244,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function ByteCharateristic(opts) { ByteCharateristic.super_.call(this, opts); this.on('beforeWrite', function(data, res) { res(data.length == opts.sizeof ? Results.Success : Results.InvalidAttributeLength); }); this.toBuffer = byte2buf(opts.sizeof); this.fromBuffer = buf2byte(opts.sizeof); }\n\n    ### Response: characteristics for byte data.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public RestAssuredMockMvcConfig objectMapperConfig(ObjectMapperConfig objectMapperConfig) { notNull(objectMapperConfig, \"Object mapper config\"); return new RestAssuredMockMvcConfig(logConfig, encoderConfig, decoderConfig, sessionConfig, objectMapperConfig, jsonConfig, xmlConfig, headerConfig, asyncConfig, multiPartConfig, mockMvcConfig, paramConfig, matcherConfig); }\n\n    ### Response:",
        "ground_truth": "Set the object mapper config.\n\n@param objectMapperConfig The {@link ObjectMapperConfig} to set\n@return An updated RestAssuredMockMvcConfig",
        "predict": " characteristics for byte data.\n\n    "
    },
    {
        "ID": 245,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def draw_line(self, start, end, color): \"\"\" Draw a line with the given color on the screen. :param start: Start point of the line :param end: End point of the line :param color: Color of the line :type start: tuple :type end: tuple :type color: tuple \"\"\" def dist(p, a, b): return (abs((b[0] - a[0]) * (a[1] - p[1]) - (a[0] - p[0]) * (b[1] - a[1])) / math.sqrt((b[0] - a[0])**2 + (b[1] - a[1])**2)) points = [] for x in range(min(start[0], end[0]), max(start[0], end[0]) + 1): for y in range(min(start[1], end[1]), max(start[1], end[1]) + 1): if dist((x, y), start, end) < 0.5: points.append((x, y)) for point in points: self.draw_dot(point, color)\n\n    ### Response: Draw a line with the given color on the screen.\n\n        :param start: Start point of the line\n        :param end: End point of the line\n        :param color: Color of the line\n        :type start: tuple\n        :type end: tuple\n        :type color: tuple.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public RestAssuredMockMvcConfig jsonConfig(JsonConfig jsonConfig) { notNull(jsonConfig, \"JsonConfig\"); return new RestAssuredMockMvcConfig(logConfig, encoderConfig, decoderConfig, sessionConfig, objectMapperConfig, jsonConfig, xmlConfig, headerConfig, asyncConfig, multiPartConfig, mockMvcConfig, paramConfig, matcherConfig); }\n\n    ### Response:",
        "ground_truth": "Set the Json config.\n\n@param jsonConfig The {@link JsonConfig} to set\n@return An updated RestAssuredMockMvcConfig",
        "predict": " Draw a line with the given color on the screen.\n\n        :param start: Start point of the line\n        :param end: End point of the line\n        :param color: Color of the line\n        :type start: tuple\n        :type end: tuple\n        :type color: tuple.\n\n    "
    },
    {
        "ID": 246,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function getKey($key) { $key = '/' . $this->environment . '.' . $key; $key = str_replace('.', '/', $key); if (!empty($this->appName)) { $key = '/' . $this->appName . $key; } return $key; }\n\n    ### Response: Get real key\n\n@access protected\n@param string $key original key\n@return string.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public RestAssuredMockMvcConfig xmlConfig(XmlConfig xmlConfig) { notNull(xmlConfig, \"XmlConfig\"); return new RestAssuredMockMvcConfig(logConfig, encoderConfig, decoderConfig, sessionConfig, objectMapperConfig, jsonConfig, xmlConfig, headerConfig, asyncConfig, multiPartConfig, mockMvcConfig, paramConfig, matcherConfig); }\n\n    ### Response:",
        "ground_truth": "Set the Xml config.\n\n@param xmlConfig The {@link XmlConfig} to set\n@return An updated RestAssuredMockMvcConfig",
        "predict": " Get real key\n\n@access protected\n@param string $key original key\n@return string.\n\n    "
    },
    {
        "ID": 247,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def read_byte_data(self, i2c_addr, register, force=None): \"\"\" Read a single byte from a designated register. :param i2c_addr: i2c address :type i2c_addr: int :param register: Register to read :type register: int :param force: :type force: Boolean :return: Read byte value :rtype: int \"\"\" self._set_address(i2c_addr, force=force) msg = i2c_smbus_ioctl_data.create( read_write=I2C_SMBUS_READ, command=register, size=I2C_SMBUS_BYTE_DATA ) ioctl(self.fd, I2C_SMBUS, msg) return msg.data.contents.byte\n\n    ### Response: Read a single byte from a designated register.\n\n        :param i2c_addr: i2c address\n        :type i2c_addr: int\n        :param register: Register to read\n        :type register: int\n        :param force:\n        :type force: Boolean\n        :return: Read byte value\n        :rtype: int.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public RestAssuredMockMvcConfig encoderConfig(EncoderConfig encoderConfig) { notNull(encoderConfig, \"EncoderConfig\"); return new RestAssuredMockMvcConfig(logConfig, encoderConfig, decoderConfig, sessionConfig, objectMapperConfig, jsonConfig, xmlConfig, headerConfig, asyncConfig, multiPartConfig, mockMvcConfig, paramConfig, matcherConfig); }\n\n    ### Response:",
        "ground_truth": "Set the encoder config\n\n@param encoderConfig The {@link EncoderConfig} to set\n@return An updated RestAssuredMockMvcConfig",
        "predict": " Read a single byte from a designated register.\n\n        :param i2c_addr: i2c address\n        :type i2c_addr: int\n        :param register: Register to read\n        :type register: int\n        :param force:\n        :type force: Boolean\n        :return: Read byte value\n        :rtype: int.\n\n    "
    },
    {
        "ID": 248,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def decompress(obj, return_type=\"bytes\"): \"\"\" De-compress it to it's original. :param obj: Compressed object, could be bytes or str. :param return_type: if bytes, then return bytes; if str, then use base64.b64decode; if obj, then use pickle.loads return an object. \"\"\" if isinstance(obj, binary_type): b = zlib.decompress(obj) elif isinstance(obj, string_types): b = zlib.decompress(base64.b64decode(obj.encode(\"utf-8\"))) else: raise TypeError(\"input cannot be anything other than str and bytes!\") if return_type == \"bytes\": return b elif return_type == \"str\": return b.decode(\"utf-8\") elif return_type == \"obj\": return pickle.loads(b) else: raise ValueError( \"'return_type' has to be one of 'bytes', 'str' or 'obj'!\")\n\n    ### Response: De-compress it to it's original.\n\n    :param obj: Compressed object, could be bytes or str.\n    :param return_type: if bytes, then return bytes; if str, then use\n        base64.b64decode; if obj, then use pickle.loads return an object..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public RestAssuredMockMvcConfig headerConfig(HeaderConfig headerConfig) { notNull(headerConfig, \"HeaderConfig\"); return new RestAssuredMockMvcConfig(logConfig, encoderConfig, decoderConfig, sessionConfig, objectMapperConfig, jsonConfig, xmlConfig, headerConfig, asyncConfig, multiPartConfig, mockMvcConfig, paramConfig, matcherConfig); }\n\n    ### Response:",
        "ground_truth": "Set the header config\n\n@param headerConfig The {@link HeaderConfig} to set\n@return An updated RestAssuredMockMvcConfig",
        "predict": " De-compress it to it's original.\n\n    :param obj: Compressed object, could be bytes or str.\n    :param return_type: if bytes, then return bytes; if str, then use\n        base64.b64decode; if obj, then use pickle.loads return an object..\n\n    "
    },
    {
        "ID": 249,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static <I, D> int findLinearReverse(Query<I, D> ceQuery, AccessSequenceTransformer<I> asTransformer, SuffixOutput<I, D> hypOutput, MembershipOracle<I, D> oracle) { return AcexLocalSuffixFinder.findSuffixIndex(AcexAnalyzers.LINEAR_BWD, true, ceQuery, asTransformer, hypOutput, oracle); }\n\n    ### Response: Searches for a distinguishing suffixes by checking for counterexample yielding access sequence transformations in\nlinear descending order.\n\n@param ceQuery\nthe initial counterexample query\n@param asTransformer\nthe access sequence transformer\n@param hypOutput\ninterface to the hypothesis output, for checking whether the oracle output contradicts the hypothesis\n@param oracle\ninterface to the SUL\n\n@return the index of the respective suffix, or {@code -1} if no counterexample could be found\n\n@see LocalSuffixFinder.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public RestAssuredMockMvcConfig asyncConfig(AsyncConfig asyncConfig) { notNull(asyncConfig, AsyncConfig.class); return new RestAssuredMockMvcConfig(logConfig, encoderConfig, decoderConfig, sessionConfig, objectMapperConfig, jsonConfig, xmlConfig, headerConfig, asyncConfig, multiPartConfig, mockMvcConfig, paramConfig, matcherConfig); }\n\n    ### Response:",
        "ground_truth": "Set the async config\n\n@param asyncConfig The {@link AsyncConfig} to set\n@return An updated RestAssuredMockMvcConfig",
        "predict": " Searches for a distinguishing suffixes by checking for counterexample yielding access sequence transformations in\nlinear descending order.\n\n@param ceQuery\nthe initial counterexample query\n@param asTransformer\nthe access sequence transformer\n@param hypOutput\ninterface to the hypothesis output, for checking whether the oracle output contradicts the hypothesis\n@param oracle\ninterface to the SUL\n\n@return the index of the respective suffix, or {@code -1} if no counterexample could be found\n\n@see LocalSuffixFinder.\n\n    "
    },
    {
        "ID": 250,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override @Beta public <T> T Stub(Class<T> type) { invalidMockCreation(); return null; }\n\n    ### Response: Creates a stub with the specified type. If enclosed in a variable assignment, the variable name will be\nused as the stub's name.\n\nExample:\n\n\ndef person = Stub(Person) // type is Person.class, name is \"person\"\n\n\n@param type the interface or class type of the stub\n@param  the interface or class type of the stub\n\n@return a stub with the specified type.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public RestAssuredMockMvcConfig mockMvcConfig(MockMvcConfig mockMvcConfig) { notNull(mockMvcConfig, MockMvcConfig.class); return new RestAssuredMockMvcConfig(logConfig, encoderConfig, decoderConfig, sessionConfig, objectMapperConfig, jsonConfig, xmlConfig, headerConfig, asyncConfig, multiPartConfig, mockMvcConfig, paramConfig, matcherConfig); }\n\n    ### Response:",
        "ground_truth": "Set the MockMVC config\n\n@param mockMvcConfig The {@link MockMvcConfig} to set\n@return An updated RestAssuredMockMvcConfig",
        "predict": " Creates a stub with the specified type. If enclosed in a variable assignment, the variable name will be\nused as the stub's name.\n\nExample:\n\n\ndef person = Stub(Person) // type is Person.class, name is \"person\"\n\n\n@param type the interface or class type of the stub\n@param  the interface or class type of the stub\n\n@return a stub with the specified type.\n\n    "
    },
    {
        "ID": 251,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _push_data(self): \"\"\" Push stats data to InfluxDB. \"\"\" if not (self.config.series or self.config.series_host): self.LOG.info(\"Misconfigured InfluxDB job, neither 'series' nor 'series_host' is set!\") return # Assemble data fluxdata = [] if self.config.series: try: config_ini.engine.open() data, views = _flux_engine_data(config_ini.engine) fluxdata.append(dict( name=self.config.series, columns=data.keys(), points=[data.values()] )) fluxdata.append(dict( name=self.config.series + '_views', columns=views.keys(), points=[views.values()] )) except (error.LoggableError, xmlrpc.ERRORS), exc: self.LOG.warn(\"InfluxDB stats: {0}\".format(exc)) # if self.config.series_host: # fluxdata.append(dict( # name = self.config.series_host, # columns = .keys(), # points = [.values()] # )) if not fluxdata: self.LOG.debug(\"InfluxDB stats: no data (previous errors?)\") return # Encode into InfluxDB data packet fluxurl = self._influxdb_url() fluxjson = json.dumps(fluxdata) self.LOG.debug(\"POST to {0} with {1}\".format(fluxurl.split('?')[0], fluxjson)) # Push it! try: # TODO: Use a session requests.post(fluxurl, data=fluxjson, timeout=self.influxdb.timeout) except RequestException, exc: self.LOG.info(\"InfluxDB POST error: {0}\".format(exc))\n\n    ### Response: Push stats data to InfluxDB..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public RestAssuredMockMvcConfig multiPartConfig(MultiPartConfig multiPartConfig) { notNull(multiPartConfig, MultiPartConfig.class); return new RestAssuredMockMvcConfig(logConfig, encoderConfig, decoderConfig, sessionConfig, objectMapperConfig, jsonConfig, xmlConfig, headerConfig, asyncConfig, multiPartConfig, mockMvcConfig, paramConfig, matcherConfig); }\n\n    ### Response:",
        "ground_truth": "Set the multi-part config\n\n@param multiPartConfig The {@link MultiPartConfig} to set\n@return An updated RestAssuredMockMvcConfig",
        "predict": " Push stats data to InfluxDB..\n\n    "
    },
    {
        "ID": 252,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function markdownToHtml( text ) { // note: in JS $ matches end of line as well as end of string, and ^ both beginning of line and string const html = text // html encoding of < because libXMLJs Element.text() converts html entities .replace( /</gm, '&lt;' ) // html encoding of < because libXMLJs Element.text() converts html entities .replace( />/gm, '&gt;' ) // span .replace( /&lt;\\s?span([^/\\n]*)&gt;((?:(?!&lt;\\/).)+)&lt;\\/\\s?span\\s?&gt;/gm, _createSpan ) // sup .replace( /&lt;\\s?sup([^/\\n]*)&gt;((?:(?!&lt;\\/).)+)&lt;\\/\\s?sup\\s?&gt;/gm, _createSup ) // sub .replace( /&lt;\\s?sub([^/\\n]*)&gt;((?:(?!&lt;\\/).)+)&lt;\\/\\s?sub\\s?&gt;/gm, _createSub ) // \"\\\" will be used as escape character for *, _ .replace( /&/gm, '&amp;' ) .replace( /\\\\\\\\/gm, '&92;' ) .replace( /\\\\\\*/gm, '&42;' ) .replace( /\\\\_/gm, '&95;' ) .replace( /\\\\#/gm, '&35;' ) // strong .replace( /__(.*?)__/gm, '<strong>$1</strong>' ) .replace( /\\*\\*(.*?)\\*\\*/gm, '<strong>$1</strong>' ) // emphasis .replace( /_([^\\s][^_\\n]*)_/gm, '<em>$1</em>' ) .replace( /\\*([^\\s][^*\\n]*)\\*/gm, '<em>$1</em>' ) // links .replace( /\\[([^\\]]*)\\]\\(([^)]+)\\)/gm, '<a href=\"$2\" target=\"_blank\">$1</a>' ) // headers .replace( /^\\s*(#{1,6})\\s?([^#][^\\n]*)(\\n|$)/gm, _createHeader ) // unordered lists .replace( /(\\n(\\*|\\+|-) (.*))+$/gm, _createUnorderedList ) // ordered lists .replace( /(\\n([0-9]+\\.) (.*))+$/gm, _createOrderedList ) // reverting escape of special characters .replace( /&35;/gm, '#' ) .replace( /&95;/gm, '_' ) .replace( /&92;/gm, '\\\\' ) .replace( /&42;/gm, '*' ) .replace( /&amp;/gm, '&' ) // paragraphs .replace( /([^\\n]+)\\n{2,}/gm, _createParagraph ) // any remaining newline characters .replace( /([^\\n]+)\\n/gm, '$1<br>' ); return html; }\n\n    ### Response: Transforms XForm label and hint textnode content with a subset of Markdown into HTML\n\nSupported:\n- _, __, *, **, [](), #, ##, ###, ####, #####,\n- span tags and html-encoded span tags,\n- single-level unordered markdown lists and single-level ordered markdown lists\n- newline characters\n\nAlso HTML encodes any unsupported HTML tags for safe use inside web-based clients\n\n@param  {string} text text content of a textnode\n@return {string}      transformed text content of a textnode.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public RestAssuredMockMvcConfig paramConfig(MockMvcParamConfig paramConfig) { notNull(paramConfig, MultiPartConfig.class); return new RestAssuredMockMvcConfig(logConfig, encoderConfig, decoderConfig, sessionConfig, objectMapperConfig, jsonConfig, xmlConfig, headerConfig, asyncConfig, multiPartConfig, mockMvcConfig, paramConfig, matcherConfig); }\n\n    ### Response:",
        "ground_truth": "Set the parameter config\n\n@param paramConfig The {@link MockMvcParamConfig} to set\n@return An updated RestAssuredMockMvcConfig",
        "predict": " Transforms XForm label and hint textnode content with a subset of Markdown into HTML\n\nSupported:\n- _, __, *, **, [](), #, ##, ###, ####, #####,\n- span tags and html-encoded span tags,\n- single-level unordered markdown lists and single-level ordered markdown lists\n- newline characters\n\nAlso HTML encodes any unsupported HTML tags for safe use inside web-based clients\n\n@param  {string} text text content of a textnode\n@return {string}      transformed text content of a textnode.\n\n    "
    },
    {
        "ID": 253,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static function build($serviceAddress, $restConfigPath, array $config = []) { $config += [ 'httpHandler' => null, ]; list($baseUri, $port) = self::normalizeServiceAddress($serviceAddress); $requestBuilder = new RequestBuilder(\"$baseUri:$port\", $restConfigPath); $httpHandler = $config['httpHandler'] ?: self::buildHttpHandlerAsync(); return new RestTransport($requestBuilder, $httpHandler); }\n\n    ### Response: Builds a RestTransport.\n\n@param string $serviceAddress\nThe address of the API remote host, for example \"example.googleapis.com\".\n@param string $restConfigPath\nPath to rest config file.\n@param array $config {\nConfig options used to construct the gRPC transport.\n\n@type callable $httpHandler A handler used to deliver PSR-7 requests.\n}\n@return RestTransport\n@throws ValidationException.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public RestAssuredMockMvcConfig matcherConfig(MatcherConfig matcherConfig) { notNull(matcherConfig, MatcherConfig.class); return new RestAssuredMockMvcConfig(logConfig, encoderConfig, decoderConfig, sessionConfig, objectMapperConfig, jsonConfig, xmlConfig, headerConfig, asyncConfig, multiPartConfig, mockMvcConfig, paramConfig, matcherConfig); }\n\n    ### Response:",
        "ground_truth": "Set the matcher config\n\n@param matcherConfig The {@link MockMvcParamConfig} to set\n@return An updated RestAssuredMockMvcConfig",
        "predict": " Builds a RestTransport.\n\n@param string $serviceAddress\nThe address of the API remote host, for example \"example.googleapis.com\".\n@param string $restConfigPath\nPath to rest config file.\n@param array $config {\nConfig options used to construct the gRPC transport.\n\n@type callable $httpHandler A handler used to deliver PSR-7 requests.\n}\n@return RestTransport\n@throws ValidationException.\n\n    "
    },
    {
        "ID": 254,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (tc *Consumer) Start() error { log.Info(\"Starting TCP consumer\") tcpAddr, err := net.ResolveTCPAddr(\"tcp\", tc.address) if err != nil { return err } listener, err := net.ListenTCP(\"tcp\", tcpAddr) if err != nil { return err } log.Info(\"Listening TCP at %s\", tc.address) go tc.closeListener(listener) go tc.listen(listener) return nil }\n\n    ### Response: // Start starts listening the given TCP address. Returns an error if anything went wrong while\n// listening TCP..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public CertificateAuthSettings allowAllHostnames() { return new CertificateAuthSettings(keystoreType, trustStoreType, port, trustStore, keyStore, ALLOW_ALL_HOSTNAME_VERIFIER, sslSocketFactory); }\n\n    ### Response:",
        "ground_truth": "",
        "predict": " // Start starts listening the given TCP address. Returns an error if anything went wrong while\n// listening TCP..\n\n    "
    },
    {
        "ID": 255,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (enc *ltsvEncoder) safeAddString(s string) { for i := 0; i < len(s); { if enc.tryAddRuneSelf(s[i]) { i++ continue } r, size := utf8.DecodeRuneInString(s[i:]) if enc.tryAddRuneError(r, size) { i++ continue } enc.buf.AppendString(s[i : i+size]) i += size } }\n\n    ### Response: // safeAddString JSON-escapes a string and appends it to the internal buffer.\n// Unlike the standard library's encoder, it doesn't attempt to protect the\n// user from browser vulnerabilities or JSONP-related problems..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public XmlPathConfig declareNamespaces(Map<String, String> namespacesToDeclare) { return new XmlPathConfig(jaxbObjectMapperFactory, defaultParserType, defaultDeserializer, charset, features, namespacesToDeclare, properties, validating, namespaceAware, allowDocTypeDeclaration); }\n\n    ### Response:",
        "ground_truth": "Specify declared namespaces that will be used when parsing XML.\n\n@param namespacesToDeclare A map containing features that will be used by the underlying {@link groovy.util.XmlSlurper}.\n@return A new instance of XmlPathConfig\n@see org.xml.sax.XMLReader#setFeature(java.lang.String, boolean)",
        "predict": " // safeAddString JSON-escapes a string and appends it to the internal buffer.\n// Unlike the standard library's encoder, it doesn't attempt to protect the\n// user from browser vulnerabilities or JSONP-related problems..\n\n    "
    },
    {
        "ID": 256,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (builder *Builder) Column(col uint) *Builder { return builder.With(Column(col)) }\n\n    ### Response: // Column is a syntax for Column..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public XmlPathConfig declaredNamespace(String prefix, String namespaceURI) { Validate.notEmpty(prefix, \"Prefix cannot be empty\"); Validate.notEmpty(namespaceURI, \"Namespace URI cannot be empty\"); Map<String, String> updatedNamespaces = new HashMap<String, String>(declaredNamespaces); updatedNamespaces.put(prefix, namespaceURI); return new XmlPathConfig(jaxbObjectMapperFactory, defaultParserType, defaultDeserializer, charset, features, updatedNamespaces, properties, validating, true, allowDocTypeDeclaration); }\n\n    ### Response:",
        "ground_truth": "Declares a namespace.\n\n@param prefix       The feature name, which is a fully-qualified URI.\n@param namespaceURI The requested value of the feature (true or false).\n@return A new XmlPathConfig instance\n@see org.xml.sax.XMLReader#setFeature(java.lang.String, boolean)",
        "predict": " // Column is a syntax for Column..\n\n    "
    },
    {
        "ID": 257,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function plusMonths(int $months) : ZonedDateTime { return ZonedDateTime::of($this->localDateTime->plusMonths($months), $this->timeZone); }\n\n    ### Response: Returns a copy of this ZonedDateTime with the specified period in months added.\n\n@param int $months\n\n@return ZonedDateTime.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Object request(String method, boolean hasBody, Closure configClosure) throws ClientProtocolException, IOException { return this.doRequest(this.defaultURI.toURI(), method, this.defaultContentType, hasBody, configClosure); }\n\n    ### Response:",
        "ground_truth": "Make an HTTP request to the default URI, and parse using the default\ncontent-type.\n\n@param method        {@link HttpRequestFactory HTTP method}\n@param configClosure request configuration options\n@return whatever value was returned by the executed response handler.\n@throws ClientProtocolException\n@throws IOException\n@see #request(Object, HttpRequestFactory, Object, Closure)",
        "predict": " Returns a copy of this ZonedDateTime with the specified period in months added.\n\n@param int $months\n\n@return ZonedDateTime.\n\n    "
    },
    {
        "ID": 258,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def and_evaluator(conditions, leaf_evaluator): \"\"\" Evaluates a list of conditions as if the evaluator had been applied to each entry and the results AND-ed together. Args: conditions: List of conditions ex: [operand_1, operand_2]. leaf_evaluator: Function which will be called to evaluate leaf condition values. Returns: Boolean: - True if all operands evaluate to True. - False if a single operand evaluates to False. None: if conditions couldn't be evaluated. \"\"\" saw_null_result = False for condition in conditions: result = evaluate(condition, leaf_evaluator) if result is False: return False if result is None: saw_null_result = True return None if saw_null_result else True\n\n    ### Response: Evaluates a list of conditions as if the evaluator had been applied\n  to each entry and the results AND-ed together.\n\n  Args:\n    conditions: List of conditions ex: [operand_1, operand_2].\n    leaf_evaluator: Function which will be called to evaluate leaf condition values.\n\n  Returns:\n    Boolean:\n      - True if all operands evaluate to True.\n      - False if a single operand evaluates to False.\n    None: if conditions couldn't be evaluated..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void setHeaders(Map<?, ?> headers) { this.defaultRequestHeaders.clear(); if (headers == null) return; for (Object key : headers.keySet()) { Object val = headers.get(key); if (val == null) continue; this.defaultRequestHeaders.put(key.toString(), val.toString()); } }\n\n    ### Response:",
        "ground_truth": "Set the default headers to add to all requests made by this builder\ninstance.  These values will replace any previously set default headers.\n\n@param headers map of header names & values.",
        "predict": " Evaluates a list of conditions as if the evaluator had been applied\n  to each entry and the results AND-ed together.\n\n  Args:\n    conditions: List of conditions ex: [operand_1, operand_2].\n    leaf_evaluator: Function which will be called to evaluate leaf condition values.\n\n  Returns:\n    Boolean:\n      - True if all operands evaluate to True.\n      - False if a single operand evaluates to False.\n    None: if conditions couldn't be evaluated..\n\n    "
    },
    {
        "ID": 259,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def is_send_transfer_almost_equal( send_channel: NettingChannelState, send: LockedTransferUnsignedState, received: LockedTransferSignedState, ) -> bool: \"\"\" True if both transfers are for the same mediated transfer. \"\"\" # The only thing that may change is the direction of the transfer return ( isinstance(send, LockedTransferUnsignedState) and isinstance(received, LockedTransferSignedState) and send.payment_identifier == received.payment_identifier and send.token == received.token and send.lock.amount == received.lock.amount - send_channel.mediation_fee and send.lock.expiration == received.lock.expiration and send.lock.secrethash == received.lock.secrethash and send.initiator == received.initiator and send.target == received.target )\n\n    ### Response: True if both transfers are for the same mediated transfer..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void setProxy(String host, int port, String scheme) { getClient().getParams().setParameter( ConnRoutePNames.DEFAULT_PROXY, new HttpHost(host, port, scheme)); }\n\n    ### Response:",
        "ground_truth": "null for the default\n@see HttpHost#HttpHost(String, int, String)",
        "predict": " True if both transfers are for the same mediated transfer..\n\n    "
    },
    {
        "ID": 260,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _openapi_redoc(self): \"\"\" Expose OpenAPI spec with ReDoc The ReDoc script URL can be specified as ``API_REDOC_SOURCE_URL`` \"\"\" return render_template('openapi/redoc.html', title=self.app.config.API_TITLE or self.app.name, redoc_url=self.app.config.API_REDOC_SOURCE_URL)\n\n    ### Response: Expose OpenAPI spec with ReDoc\n\n        The ReDoc script URL can be specified as ``API_REDOC_SOURCE_URL``.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public MultiPartSpecBuilder controlName(String controlName) { Validate.notEmpty(controlName, \"Control name cannot be empty\"); this.controlName = controlName; this.isControlNameExplicit = true; return this; }\n\n    ### Response:",
        "ground_truth": "Specify the control name of this multi-part.\n\n@param controlName The control name to use. Default is file.\n@return An instance of MultiPartSpecBuilder",
        "predict": " Expose OpenAPI spec with ReDoc\n\n        The ReDoc script URL can be specified as ``API_REDOC_SOURCE_URL``.\n\n    "
    },
    {
        "ID": 261,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def throttle_check(self): \"\"\" Check for throttling. \"\"\" throttle = self._meta.throttle() wait = throttle.should_be_throttled(self) if wait: raise HttpError( \"Throttled, wait {0} seconds.\".format(wait), status=status.HTTP_503_SERVICE_UNAVAILABLE)\n\n    ### Response: Check for throttling..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public MultiPartSpecBuilder header(String name, String value) { Validate.notEmpty(name, \"Header name cannot be empty\"); Validate.notEmpty(value, \"Header value cannot be empty\"); // Replace previous header if exists final Set<String> headerNames = headers.keySet(); final String trimmedName = name.trim(); for (String headerName : headerNames) { if (headerName.equalsIgnoreCase(trimmedName)) { headers.remove(headerName); } } // Put the name header in the header list headers.put(name, value); return this; }\n\n    ### Response:",
        "ground_truth": "Add a header to this multipart specification.\n\n@param name The name of the header\n@param value The value of the header\n@return An instance of MultiPartSpecBuilder",
        "predict": " Check for throttling..\n\n    "
    },
    {
        "ID": 262,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function assertSslSupport(ParametersInterface $parameters) { if ( filter_var($parameters->persistent, FILTER_VALIDATE_BOOLEAN) && version_compare(PHP_VERSION, '7.0.0beta') < 0 ) { throw new \\InvalidArgumentException('Persistent SSL connections require PHP >= 7.0.0.'); } }\n\n    ### Response: Checks needed conditions for SSL-encrypted connections.\n\n@param ParametersInterface $parameters Initialization parameters for the connection.\n\n@throws \\InvalidArgumentException.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void basic(String host, int port, String user, String pass) { builder.getClient().getCredentialsProvider().setCredentials( new AuthScope(host, port), new UsernamePasswordCredentials(user, pass) ); }\n\n    ### Response:",
        "ground_truth": "Set authentication credentials to be used for the given host and port.\n\n@param host\n@param port\n@param user\n@param pass",
        "predict": " Checks needed conditions for SSL-encrypted connections.\n\n@param ParametersInterface $parameters Initialization parameters for the connection.\n\n@throws \\InvalidArgumentException.\n\n    "
    },
    {
        "ID": 263,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    static public function view($route, $view = null, array $data = []) { self::$instance->register('GET', $route, null, $view, $data); }\n\n    ### Response: register a GET method route with view.\n\n@param  string                $route\n@param  string|null           $view\n@param  array                 $data\n@return bool.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void ntlm(String host, int port, String user, String pass, String workstation, String domain) { builder.getClient().getCredentialsProvider().setCredentials( new AuthScope(host, port), new NTCredentials(user, pass, workstation, domain) ); }\n\n    ### Response:",
        "ground_truth": "Set NTLM authentication credentials to be used for the given host and port.\n\n@param host\n@param port\n@param user\n@param pass\n@param workstation\n@param domain",
        "predict": " register a GET method route with view.\n\n@param  string                $route\n@param  string|null           $view\n@param  array                 $data\n@return bool.\n\n    "
    },
    {
        "ID": 264,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private function completeArgumentFromTypeHint(Argument $arg, ReflectionMethod $method, ReflectionParameter $param, DocBlockReader $docBlock): void { if (!$arg->getName()) { $arg->setName($param->getName()); } if (!$arg->getDescription()) { $arg->setDescription($docBlock->getParameterDescription($param)); } if (!$arg->hasDefaultValue() && $param->isDefaultValueAvailable()) { $arg->setDefaultValue($param->getDefaultValue()); } $this->completeArgumentTypeFromTypeHint($arg, $method, $param, $docBlock); }\n\n    ### Response: Complete a single argument from its type hint\n\n@param Argument $arg\n@param ReflectionMethod $method\n@param ReflectionParameter $param\n@param DocBlockReader $docBlock.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Headers headers(Header header, Header... additionalHeaders) { notNull(header, \"Header\"); final List<Header> headerList = new LinkedList<Header>(); headerList.add(header); if (additionalHeaders != null) { Collections.addAll(headerList, additionalHeaders); } return new Headers(headerList); }\n\n    ### Response:",
        "ground_truth": "An alternative way to create a Headers object from the constructor.\n\n@param header            The header to be included\n@param additionalHeaders Additional headers to be included (optional)\n@return A new headers object containing the specified headers",
        "predict": " Complete a single argument from its type hint\n\n@param Argument $arg\n@param ReflectionMethod $method\n@param ReflectionParameter $param\n@param DocBlockReader $docBlock.\n\n    "
    },
    {
        "ID": 265,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function summary() { $list = array(); foreach($this->getQueues() as $queue) { $list = array_merge($list, $this->queueSummary($queue->getName())); } return $list; }\n\n    ### Response: Return all Queues summary\n\n@return array.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void reset() { mockMvcFactory = null; config = null; basePath = \"/\"; resultHandlers.clear(); requestPostProcessors.clear(); responseSpecification = null; requestSpecification = null; authentication = null; }\n\n    ### Response:",
        "ground_truth": "Reset all static configurations to their default values.",
        "predict": " Return all Queues summary\n\n@return array.\n\n    "
    },
    {
        "ID": 266,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def refresh_token(self, arguments): \"\"\" Refresh a user's access token, using existing the refresh token previously received in the auth flow. \"\"\" new_access_token = None auth = ExistAuth(self.client_id, self.client_secret) resp = auth.refresh_token(self.access_token) if auth.token: new_access_token = auth.token['access_token'] print('OAuth token refreshed: %s' % new_access_token) self.write_config(new_access_token) else: print('ERROR: We were unable to refresh the OAuth token | %s' % json.dumps(resp))\n\n    ### Response: Refresh a user's access token, using existing the refresh token previously\n        received in the auth flow..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public ResponseBuilder setHeader(String name, String value) { notNull(name, \"Header name\"); notNull(value, \"Header value\"); List<Header> newHeaders = new ArrayList<Header>(restAssuredResponse.headers().asList()); newHeaders.add(new Header(name, value)); restAssuredResponse.setResponseHeaders(new Headers(newHeaders)); if (trim(name).equalsIgnoreCase(CONTENT_TYPE)) { restAssuredResponse.setContentType(value); } return this; }\n\n    ### Response:",
        "ground_truth": "Set a specific header\n\n@return The builder",
        "predict": " Refresh a user's access token, using existing the refresh token previously\n        received in the auth flow..\n\n    "
    },
    {
        "ID": 267,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func DecodePacketNumber( packetNumberLength PacketNumberLen, lastPacketNumber PacketNumber, wirePacketNumber PacketNumber, ) PacketNumber { var epochDelta PacketNumber switch packetNumberLength { case PacketNumberLen1: epochDelta = PacketNumber(1) << 8 case PacketNumberLen2: epochDelta = PacketNumber(1) << 16 case PacketNumberLen3: epochDelta = PacketNumber(1) << 24 case PacketNumberLen4: epochDelta = PacketNumber(1) << 32 } epoch := lastPacketNumber & ^(epochDelta - 1) prevEpochBegin := epoch - epochDelta nextEpochBegin := epoch + epochDelta return closestTo( lastPacketNumber+1, epoch+wirePacketNumber, closestTo(lastPacketNumber+1, prevEpochBegin+wirePacketNumber, nextEpochBegin+wirePacketNumber), ) }\n\n    ### Response: // DecodePacketNumber calculates the packet number based on the received packet number, its length and the last seen packet number.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Response build() { final int statusCode = restAssuredResponse.statusCode(); if (statusCode < 100 || statusCode >= 600) { throw new IllegalArgumentException(format(\"Status code must be greater than 100 and less than 600, was %d.\", statusCode)); } if (StringUtils.isBlank(restAssuredResponse.statusLine())) { restAssuredResponse.setStatusLine(restAssuredResponse.statusCode()); } restAssuredResponse.setRpr(new ResponseParserRegistrar()); return restAssuredResponse; }\n\n    ### Response:",
        "ground_truth": "Build the actual response\n\n@return The response object",
        "predict": " // DecodePacketNumber calculates the packet number based on the received packet number, its length and the last seen packet number.\n\n    "
    },
    {
        "ID": 268,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function getInst (bind, args) { args = resolveDeps(args); return isCtor ? applyCtor(func, args) : func.apply(bind, args); }\n\n    ### Response: Returns a dependency. It checks to see if it's a constructor function or a regular function and calls it accordingly..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public DetailedCookieMatcher value(Matcher<? super String> valueMatcher) { return new DetailedCookieMatcher(and(Matchers.hasProperty(\"value\", valueMatcher))); }\n\n    ### Response:",
        "ground_truth": "Verifies whether value of cookie satisfies specified matcher.\n@param valueMatcher value assertion\n@return A {@link DetailedCookieMatcher} instance with and-composed value property assertion",
        "predict": " Returns a dependency. It checks to see if it's a constructor function or a regular function and calls it accordingly..\n\n    "
    },
    {
        "ID": 269,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public List<RTClip> getMovieClips(int movieId) throws RottenTomatoesException { properties.clear(); properties.put(ApiBuilder.PROPERTY_ID, String.valueOf(movieId)); properties.put(ApiBuilder.PROPERTY_URL, URL_MOVIE_CLIPS); WrapperLists wrapper = response.getResponse(WrapperLists.class, properties); if (wrapper != null && wrapper.getClass() != null) { return wrapper.getClips(); } else { return Collections.emptyList(); } }\n\n    ### Response: Related movie clips and trailers for a movie\n\n@param movieId RT Movie ID\n@return\n@throws RottenTomatoesException.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public DetailedCookieMatcher comment(Matcher<? super String> commentMatcher) { return new DetailedCookieMatcher(and(Matchers.hasProperty(\"comment\", commentMatcher))); }\n\n    ### Response:",
        "ground_truth": "Verifies whether comment of cookie satisfies specified matcher.\n@param commentMatcher comment assertion\n@return A {@link DetailedCookieMatcher} instance with and-composed comment property assertion",
        "predict": " Related movie clips and trailers for a movie\n\n@param movieId RT Movie ID\n@return\n@throws RottenTomatoesException.\n\n    "
    },
    {
        "ID": 270,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func readParamName(r io.Reader) (*ParamName, error) { name, err := readPstring(r) if err != nil { return nil, err } var idx int32 if err := binary.Read(r, byteOrder, &idx); err != nil { return nil, err } pn := ParamName{name.String(), idx} return &pn, nil }\n\n    ### Response: // readParamName reads a ParamName from an io.Reader.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public DetailedCookieMatcher expiryDate(Matcher<? super Date> expiryDateMatcher) { return new DetailedCookieMatcher(and(Matchers.hasProperty(\"expiryDate\", expiryDateMatcher))); }\n\n    ### Response:",
        "ground_truth": "Verifies whether expiry date of cookie satisfies specified matcher.\n@param expiryDateMatcher expiry date assertion\n@return A {@link DetailedCookieMatcher} instance with and-composed expiry date property assertion",
        "predict": " // readParamName reads a ParamName from an io.Reader.\n\n    "
    },
    {
        "ID": 271,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function process(Model $model) { // Unknown type, better encode it, just to be sure. $type = $this->pool->encodingService->encodeString(gettype($model->getData())); return $this->pool->render->renderSingleChild( $model->setType($type) ->setNormal('Unhandled type: ' . $type) ->setHelpid('unhandedOtherHelp') ); }\n\n    ### Response: Render a 'dump' for a other type.\n\n@param Model $model\nThe model with the data for the output.\n\n@return string\nThe rendered markup..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public DetailedCookieMatcher domain(Matcher<? super String> domainMatcher) { return new DetailedCookieMatcher(and(Matchers.hasProperty(\"domain\", domainMatcher))); }\n\n    ### Response:",
        "ground_truth": "Verifies whether domain of cookie satisfies specified matcher.\n@param domainMatcher assertion for domain property\n@return A {@link DetailedCookieMatcher} instance with and-composed domain property assertion",
        "predict": " Render a 'dump' for a other type.\n\n@param Model $model\nThe model with the data for the output.\n\n@return string\nThe rendered markup..\n\n    "
    },
    {
        "ID": 272,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static function filterArrayOfObjectsByMember($member, $objects, $filterValue) { $filterValues = is_array($filterValue) ? $filterValue : array($filterValue); $filteredObjects = array(); foreach ($objects as $object) { if ($object instanceof SerialisableObject) { foreach ($filterValues as $value) { if ($value == $object->__getSerialisablePropertyValue($member)) { $filteredObjects[] = $object; break; } } } else { throw new ClassNotSerialisableException(get_class($object)); } } return $filteredObjects; }\n\n    ### Response: Filter an array of objects by a specified member.  Perhaps in the future extend\nto multiple match types.\n\n@param $member\n@param $objects\n@param $filterValue.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public DetailedCookieMatcher path(Matcher<? super String> pathMatcher) { return new DetailedCookieMatcher(and(Matchers.hasProperty(\"path\", pathMatcher))); }\n\n    ### Response:",
        "ground_truth": "Verifies whether path of cookie satisfies specified matcher.\n@param pathMatcher assertion for path property\n@return A {@link DetailedCookieMatcher} instance with and-composed path property assertion",
        "predict": " Filter an array of objects by a specified member.  Perhaps in the future extend\nto multiple match types.\n\n@param $member\n@param $objects\n@param $filterValue.\n\n    "
    },
    {
        "ID": 273,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function getLemmas(array $lemmas = []) { // Get folders $folders = $this->getPath($this->config('folders', [])); foreach ($folders as $path) { if ($this->option('verbose')) { $this->line(' <info>' . $path . '</info>'); } foreach ($this->getPhpFiles($path) as $php_file_path => $dumb) { $lemma = []; foreach ($this->extractTranslationFromFile($php_file_path) as $k => $v) { $real_value = eval(\"return $k;\"); $lemma[$real_value] = $php_file_path; } $lemmas = array_merge($lemmas, $lemma); } } if (count($lemmas) === 0) { $this->comment(\"No lemma have been found in the code.\"); $this->line(\"In these directories:\"); foreach ($this->config('folders', []) as $path) { $path = $this->getPath($path); $this->line(\" {$path}\"); } $this->line(\"For these functions/methods:\"); foreach ($this->config('trans_methods', []) as $k => $v) { $this->line(\" {$k}\"); } die(); } $this->line((count($lemmas) > 1) ? count($lemmas) . \" lemmas have been found in the code\" : \"1 lemma has been found in the code\"); if ($this->option('verbose')) { foreach ($lemmas as $key => $value) { if (strpos($key, '.') !== false) { $this->line(' <info>' . $key . '</info> in file <comment>' . $this->getShortPath($value) . '</comment>'); } } } return $lemmas; }\n\n    ### Response: Get the lemmas values from the provided directories.\n\n@param array $lemmas\n\n@return array.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public DetailedCookieMatcher secured(Matcher<? super Boolean> securedMatcher) { return new DetailedCookieMatcher(and(Matchers.hasProperty(\"secured\", securedMatcher))); }\n\n    ### Response:",
        "ground_truth": "Verifies whether secured property of cookie satisfies specified matcher.\n@param securedMatcher assertion for secured property\n@return A {@link DetailedCookieMatcher} instance with and-composed secured property assertion",
        "predict": " Get the lemmas values from the provided directories.\n\n@param array $lemmas\n\n@return array.\n\n    "
    },
    {
        "ID": 274,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public boolean processBytesFromPeer(ByteBuffer bytes) throws GeneralSecurityException { // If we're the client and we haven't given an output frame, we shouldn't be processing any // bytes. if (outputFrame == null && isClient) { return true; } // If we already have bytes to write, just return. if (outputFrame != null && outputFrame.hasRemaining()) { return true; } int remaining = bytes.remaining(); // Call handshaker service to proceess the bytes. if (outputFrame == null) { checkState(!isClient, \"Client handshaker should not process any frame at the beginning.\"); outputFrame = handshaker.startServerHandshake(bytes); } else { outputFrame = handshaker.next(bytes); } // If handshake has finished or we already have bytes to write, just return true. if (handshaker.isFinished() || outputFrame.hasRemaining()) { return true; } // We have done processing input bytes, but no bytes to write. Thus we need more data. if (!bytes.hasRemaining()) { return false; } // There are still remaining bytes. Thus we need to continue processing the bytes. // Prevent infinite loop by checking some bytes are consumed by handshaker. checkState(bytes.remaining() < remaining, \"Handshaker did not consume any bytes.\"); return processBytesFromPeer(bytes); }\n\n    ### Response: Process the bytes received from the peer.\n\n@param bytes The buffer containing the handshake bytes from the peer.\n@return true, if the handshake has all the data it needs to process and false, if the method\nmust be called again to complete processing..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public DetailedCookieMatcher httpOnly(Matcher<? super Boolean> httpOnlyMatcher) { return new DetailedCookieMatcher(and(Matchers.hasProperty(\"httpOnly\", httpOnlyMatcher))); }\n\n    ### Response:",
        "ground_truth": "",
        "predict": " Process the bytes received from the peer.\n\n@param bytes The buffer containing the handshake bytes from the peer.\n@return true, if the handshake has all the data it needs to process and false, if the method\nmust be called again to complete processing..\n\n    "
    },
    {
        "ID": 275,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def query(self, search, query): \"\"\" Add query part to ``search``. Override this if you wish to customize the query used. \"\"\" if query: if self.fields: return search.query('multi_match', fields=self.fields, query=query) else: return search.query('multi_match', query=query) return search\n\n    ### Response: Add query part to ``search``.\n\n        Override this if you wish to customize the query used..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public DetailedCookieMatcher version(Matcher<? super Integer> versionMatcher) { return new DetailedCookieMatcher(and(Matchers.hasProperty(\"version\", versionMatcher))); }\n\n    ### Response:",
        "ground_truth": "Verifies whether version of cookie satisfies specified matcher.\n@param versionMatcher assertion for version property\n@return A {@link DetailedCookieMatcher} instance with and-composed version property assertion",
        "predict": " Add query part to ``search``.\n\n        Override this if you wish to customize the query used..\n\n    "
    },
    {
        "ID": 276,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    List<Type> sigToTypeParams(byte[] sig, int offset, int len) { signature = sig; sigp = offset; siglimit = offset + len; return sigToTypeParams(); }\n\n    ### Response: Convert signature to type parameters, where signature is a byte\narray segment..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public DetailedCookieMatcher maxAge(Matcher<? super Integer> maxAgeMatcher) { return new DetailedCookieMatcher(and(Matchers.hasProperty(\"maxAge\", maxAgeMatcher))); }\n\n    ### Response:",
        "ground_truth": "Verifies whether max age of cookie satisfies specified matcher.\n@param maxAgeMatcher assertion for max age property\n@return A {@link DetailedCookieMatcher} instance with and-composed max age property assertion",
        "predict": " Convert signature to type parameters, where signature is a byte\narray segment..\n\n    "
    },
    {
        "ID": 277,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (r *CachedResponseDecoder) SetupRequest(req *http.Request) { if etag := r.Header.Get(etagHeader); len(etag) > 0 { req.Header.Set(ifNoneMatchHeader, etag) } if lastmod := r.Header.Get(lastModHeader); len(lastmod) > 0 { req.Header.Set(ifModSinceHeader, lastmod) } }\n\n    ### Response: // SetupRequest passes the cached ETag and Last Modified date to the request..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public ResponseSpecBuilder expectHeader(String headerName, Matcher<String> expectedValueMatcher) { spec.header(headerName, expectedValueMatcher); return this; }\n\n    ### Response:",
        "ground_truth": "Expect that a response header matches the supplied header name and hamcrest matcher.\n\n@param headerName           The name of the expected header\n@param expectedValueMatcher The Hamcrest matcher that must conform to the value\n@return The builder",
        "predict": " // SetupRequest passes the cached ETag and Last Modified date to the request..\n\n    "
    },
    {
        "ID": 278,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public <T extends View> boolean waitForView(View view){ if(config.commandLogging){ Log.d(config.commandLoggingTag, \"waitForView(\"+view+\")\"); } return waiter.waitForView(view); }\n\n    ### Response: Waits for the specified View. Default timeout is 20 seconds.\n\n@param view the {@link View} object to wait for\n@return {@code true} if the {@link View} is displayed and {@code false} if it is not displayed before the timeout.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public ResponseSpecBuilder expectHeader(String headerName, String expectedValue) { spec.header(headerName, expectedValue); return this; }\n\n    ### Response:",
        "ground_truth": "Expect that a response header matches the supplied name and value.\n\n@param headerName    The name of the expected header\n@param expectedValue The value of the expected header\n@return The builder",
        "predict": " Waits for the specified View. Default timeout is 20 seconds.\n\n@param view the {@link View} object to wait for\n@return {@code true} if the {@link View} is displayed and {@code false} if it is not displayed before the timeout.\n\n    "
    },
    {
        "ID": 279,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function migrateUp( $levels = NULL ) { if ( NULL !== $levels ) { $this->levels = $levels; } $newMigrations = $this->getNewMigrations( ); $i = 0; if ( self::MIGRATE_ALL === $this->levels || $this->levels > count( $newMigrations ) ) { $this->levels = count( $newMigrations ); } while ( $i < $this->levels ) { $class = $this->migrationNamespace . '\\\\' . $newMigrations[ $i ]; if ( !class_exists( $class ) ) { if ( !array_search( 'RawPHP\\\\RawMigrator\\\\Migrations\\\\', $this->namespaces, TRUE ) ) { $this->namespaces[] = 'RawPHP\\\\RawMigrator\\\\Migrations\\\\'; } foreach( $this->namespaces as $ns ) { $cls = $ns . $newMigrations[ $i ]; if ( class_exists( $cls ) ) { $class = $cls; break; } } if ( NULL === $class ) { throw new MigrationException( 'Migration class: ' . $class . ' - not found' ); } } $migration = new $class( ); $method = new \\ReflectionMethod( $class, 'migrateUp' ); // run migrateUp if ( $class === $method->getdeclaringClass()->name ) { $migration->migrateUp( $this->db ); $this->_addMigrationRecord( $class ); } else { $method = new \\ReflectionMethod( $class, 'safeMigrateUp' ); if ( $class === $method->getDeclaringClass()->name ) { try { $this->db->startTransaction( ); // turn off auto commit $this->db->setTransactionAutocommit( FALSE ); // run safeMigrateUp $migration->safeMigrateUp( $this->db ); // update migrations table with the new applied migration $this->_addMigrationRecord( $class ); // commit transaction $this->db->commitTransaction( ); } catch ( Exception $e ) { // roleback transaction $this->db->rollbackTransaction( ); throw $e; } } } $i++; if ( $this->levels === $i ) { $this->doAction( self::ON_MIGRATE_UP_ACTION ); return; } } }\n\n    ### Response: Runs the UP migration.\n\n@param mixed $levels optional migration levels size\n\n@action ON_MIGRATE_UP_ACTION\n\n@throws MigrationException on failed transaction.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public ResponseSpecBuilder expectCookie(String cookieName, String expectedValue) { spec.cookie(cookieName, expectedValue); return this; }\n\n    ### Response:",
        "ground_truth": "Expect that a response cookie matches the supplied name and value.\n\n@param cookieName    The name of the expected cookie\n@param expectedValue The value of the expected cookie\n@return The builder",
        "predict": " Runs the UP migration.\n\n@param mixed $levels optional migration levels size\n\n@action ON_MIGRATE_UP_ACTION\n\n@throws MigrationException on failed transaction.\n\n    "
    },
    {
        "ID": 280,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function onLoad(event) { var img = new Image(); img.onload = utils.getDimensions(canvas, vm.$storage); img.src = event.target.result; }\n\n    ### Response: Wait for the reader to be loaded to get the right img.src.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public ProxySpecification withHost(String host) { return new ProxySpecification(host, port, scheme, username, password); }\n\n    ### Response:",
        "ground_truth": "Specify the hostname of the proxy.\n\n@param host The hostname of the proxy.\n@return A new ProxySpecification instance",
        "predict": " Wait for the reader to be loaded to get the right img.src.\n\n    "
    },
    {
        "ID": 281,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static Budget createSharedBudget( AdWordsServicesInterface adWordsServices, AdWordsSession session) throws RemoteException { // Get the BudgetService, which loads the required classes. BudgetServiceInterface budgetService = adWordsServices.get(session, BudgetServiceInterface.class); // Create a shared budget. Budget budget = new Budget(); budget.setName(\"Shared Interplanetary Budget #\" + System.currentTimeMillis()); budget.setAmount(new Money(null, 50000000L)); budget.setDeliveryMethod(BudgetBudgetDeliveryMethod.STANDARD); budget.setIsExplicitlyShared(true); BudgetOperation operation = new BudgetOperation(); operation.setOperand(budget); operation.setOperator(Operator.ADD); BudgetOperation[] operations = new BudgetOperation[] {operation}; // Make the mutate request. BudgetReturnValue result = budgetService.mutate(operations); Budget newBudget = result.getValue(0); System.out.printf(\"Budget with name '%s', ID %d was created.%n\", newBudget.getName(), newBudget.getBudgetId()); return newBudget; }\n\n    ### Response: Creates an explicit budget to be used only to create the Campaign.\n\n@param adWordsServices the user to run the example with\n@param session the AdWordsSession\n@throws ApiException if the API request failed with one or more service errors.\n@throws RemoteException if the API request failed due to other errors..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public JsonPathConfig numberReturnType(NumberReturnType numberReturnType) { return new JsonPathConfig(numberReturnType, defaultParserType, gsonObjectMapperFactory, jackson1ObjectMapperFactory, jackson2ObjectMapperFactory, johnzonObjectMapperFactory, defaultDeserializer, charset); }\n\n    ### Response:",
        "ground_truth": "Specifies if JsonPath should use floats and doubles or BigDecimals to represent Json numbers.\n\n@param numberReturnType The choice.\n@return A new instance of JsonPathConfig with the given configuration",
        "predict": " Creates an explicit budget to be used only to create the Campaign.\n\n@param adWordsServices the user to run the example with\n@param session the AdWordsSession\n@throws ApiException if the API request failed with one or more service errors.\n@throws RemoteException if the API request failed due to other errors..\n\n    "
    },
    {
        "ID": 282,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def to_gpx(self): \"\"\"Converts track to a GPX format Uses GPXPY library as an intermediate format Returns: A string with the GPX/XML track \"\"\" gpx_segments = [] for segment in self.segments: gpx_points = [] for point in segment.points: time = '' if point.time: iso_time = point.time.isoformat().split('.')[0] time = '<time>%s</time>' % iso_time gpx_points.append( u'<trkpt lat=\"%f\" lon=\"%f\">%s</trkpt>' % (point.lat, point.lon, time) ) points = u'\\n\\t\\t\\t'.join(gpx_points) gpx_segments.append(u'\\t\\t<trkseg>\\n\\t\\t\\t%s\\n\\t\\t</trkseg>' % points) segments = u'\\t\\n'.join(gpx_segments) content = [ u'<?xml version=\"1.0\" encoding=\"UTF-8\"?>', u'<gpx xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://www.topografix.com/GPX/1/0\" xsi:schemaLocation=\"http://www.topografix.com/GPX/1/0 http://www.topografix.com/GPX/1/0/gpx.xsd\" version=\"1.0\" creator=\"GatherMySteps\">', u'\\t<trk>', segments, u'\\t</trk>', u'</gpx>' ] return u'\\n'.join(content)\n\n    ### Response: Converts track to a GPX format\n\n        Uses GPXPY library as an intermediate format\n\n        Returns:\n            A string with the GPX/XML track.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public JsonPathConfig defaultParserType(JsonParserType defaultParserType) { return new JsonPathConfig(numberReturnType, defaultParserType, gsonObjectMapperFactory, jackson1ObjectMapperFactory, jackson2ObjectMapperFactory, johnzonObjectMapperFactory, defaultDeserializer, charset); }\n\n    ### Response:",
        "ground_truth": "Creates an json path configuration that uses the specified parser type as default.\n\n@param defaultParserType The parser type to use. If null then classpath scanning will be used.",
        "predict": " Converts track to a GPX format\n\n        Uses GPXPY library as an intermediate format\n\n        Returns:\n            A string with the GPX/XML track.\n\n    "
    },
    {
        "ID": 283,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def on_error_default(self, exception_handler): \"\"\"Decorator to define a default error handler for SocketIO events. This decorator can be applied to a function that acts as a default error handler for any namespaces that do not have a specific handler. Example:: @socketio.on_error_default def error_handler(e): print('An error has occurred: ' + str(e)) \"\"\" if not callable(exception_handler): raise ValueError('exception_handler must be callable') self.default_exception_handler = exception_handler return exception_handler\n\n    ### Response: Decorator to define a default error handler for SocketIO events.\n\n        This decorator can be applied to a function that acts as a default\n        error handler for any namespaces that do not have a specific handler.\n        Example::\n\n            @socketio.on_error_default\n            def error_handler(e):\n                print('An error has occurred: ' + str(e)).\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public LogConfig defaultStream(PrintStream printStream) { return new LogConfig(printStream, true, logDetailIfValidationFails, urlEncodeRequestUri, true); }\n\n    ### Response:",
        "ground_truth": "Specify a new default stream to the print to.\n\n@param printStream The stream\n@return A new LogConfig instance",
        "predict": " Decorator to define a default error handler for SocketIO events.\n\n        This decorator can be applied to a function that acts as a default\n        error handler for any namespaces that do not have a specific handler.\n        Example::\n\n            @socketio.on_error_default\n            def error_handler(e):\n                print('An error has occurred: ' + str(e)).\n\n    "
    },
    {
        "ID": 284,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (c *testCluster) AddNode(n *testNode) error { c.counter++ if err := c.runNode(n, c.counter); err != nil { c.counter-- return err } c.nodes[n.node.NodeID()] = n c.nodesOrder[n.node.NodeID()] = c.counter return nil }\n\n    ### Response: // AddNode adds a new node to the cluster.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public LogConfig enableLoggingOfRequestAndResponseIfValidationFails(LogDetail logDetail) { return new LogConfig(defaultPrintStream, prettyPrintingEnabled, logDetail, urlEncodeRequestUri, true); }\n\n    ### Response:",
        "ground_truth": "Enable logging of both the request and the response if REST Assureds test validation fails with the specified log detail\n\n@param logDetail The log detail to show in the log\n@return A new LogConfig instance",
        "predict": " // AddNode adds a new node to the cluster.\n\n    "
    },
    {
        "ID": 285,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private function parseHeader($curl, $headers) { if (!$this->responseStatusLine && strpos($headers, 'HTTP/') === 0) { $this->responseStatusLine = $headers; } else { $parts = explode(': ', $headers); if (isset($parts[1])) { $this->responseHeaders[$parts[0]] = trim($parts[1]); } } return strlen($headers); }\n\n    ### Response: Method that appears unused, but is in fact called by curl\n\n@param resource $curl\n@param string $headers\n@return int.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    static HttpRequestBase createHttpRequest(URI uri, String httpMethod, boolean hasBody) { String method = notNull(upperCase(trimToNull(httpMethod)), \"Http method\"); Class<? extends HttpRequestBase> type = HTTP_METHOD_TO_HTTP_REQUEST_TYPE.get(method); final HttpRequestBase httpRequest; // If we are sending HTTP method that does not allow body (like GET) then HTTP library prevents // us from including it, however we chose to allow deviations from standard if user wants so, // so it needs custom handling - hence the second condition below. // Otherwise we should use standard implementation found in the map if (type == null || (!(type.isInstance(HttpEntityEnclosingRequest.class)) && hasBody)) { httpRequest = new CustomHttpMethod(method, uri); } else { try { httpRequest = type.newInstance(); } catch (Exception e) { throw new RuntimeException(e); } httpRequest.setURI(uri); } return httpRequest; }\n\n    ### Response:",
        "ground_truth": "Get the HttpRequest class that represents this request type.\n\n@return a non-abstract class that implements {@link HttpRequest}",
        "predict": " Method that appears unused, but is in fact called by curl\n\n@param resource $curl\n@param string $headers\n@return int.\n\n    "
    },
    {
        "ID": 286,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static File replaceExtension(File file, String newExtension) throws IllegalArgumentException { Params.notNull(file, \"File\"); return new File(replaceExtension(file.getPath(), newExtension)); }\n\n    ### Response: Replace extension on given file and return resulting file.\n\n@param file file to replace extension,\n@param newExtension newly extension.\n@return newly created file.\n@throws IllegalArgumentException if file parameter is null..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public MultiPartConfig defaultBoundary(String defaultBoundary) { return new MultiPartConfig(defaultControlName, defaultFileName, defaultSubtype, defaultBoundary, defaultCharset, true); }\n\n    ### Response:",
        "ground_truth": "Specify an explicit default multipart boundary to use when sending multi-part data.\n\n@param defaultBoundary The boundary to set\n@return An updated MultiPartConfig",
        "predict": " Replace extension on given file and return resulting file.\n\n@param file file to replace extension,\n@param newExtension newly extension.\n@return newly created file.\n@throws IllegalArgumentException if file parameter is null..\n\n    "
    },
    {
        "ID": 287,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function sendBodyWithLength( StreamInterface $body, $length, $chunk_size ) { $content_left = $length; while ( $content_left > 0 ) { $read = min( $chunk_size, $content_left ); if ( $read <= 0 ) { break; } echo $body->read( $read ); $content_left -= $read; if ( connection_status() !== CONNECTION_NORMAL ) { break; } } }\n\n    ### Response: Send a body with a known length to the client.\n\n@codeCoverageIgnore\n@param  StreamInterface $body\n@param  integer         $length\n@param  integer         $chunk_size\n@return void.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public MockMvcRequestSpecBuilder addAttribute(String attributeName, Object attributeValue) { spec.attribute(attributeName, attributeValue); return this; }\n\n    ### Response:",
        "ground_truth": "Add request attribute\n\n@param attributeName  The attribute name\n@param attributeValue The attribute value\n@return The request specification builder",
        "predict": " Send a body with a known length to the client.\n\n@codeCoverageIgnore\n@param  StreamInterface $body\n@param  integer         $length\n@param  integer         $chunk_size\n@return void.\n\n    "
    },
    {
        "ID": 288,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static JSONObject doGetRequest(HttpGet httpGet) throws JSONException { JSONObject json = null; HttpClient httpClient = HttpClientBuilder.create().build(); HttpResponse response; try { response = httpClient.execute(httpGet); if(response.getStatusLine().getStatusCode() == 200) { HttpEntity entity = response.getEntity(); if (entity != null) { InputStream instream = entity.getContent(); String result = convertStreamToString(instream); instream.close(); json = new JSONObject(result); } } else { json = UpworkRestClient.genError(response); } } catch (ClientProtocolException e) { json = UpworkRestClient.genError(HTTP_RESPONSE_503, \"Exception: ClientProtocolException\"); } catch (IOException e) { json = UpworkRestClient.genError(HTTP_RESPONSE_503, \"Exception: IOException\"); } catch (JSONException e) { json = UpworkRestClient.genError(HTTP_RESPONSE_503, \"Exception: JSONException\"); } catch (Exception e) { json = UpworkRestClient.genError(HTTP_RESPONSE_503, \"Exception: Exception \" + e.toString()); } finally { httpGet.abort(); } return json; }\n\n    ### Response: Execute GET request\n\n@param   url Request object for GET\n@param   method HTTP method\n@param   params POST parameters\n@throws  JSONException\n@return  {@link JSONObject}.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public MockMvcRequestSpecBuilder addHeader(String headerName, String headerValue) { spec.header(headerName, headerValue); return this; }\n\n    ### Response:",
        "ground_truth": "Add a header to be sent with the request\n\n@param headerName  The header name\n@param headerValue The header value\n@return The request specification builder",
        "predict": " Execute GET request\n\n@param   url Request object for GET\n@param   method HTTP method\n@param   params POST parameters\n@throws  JSONException\n@return  {@link JSONObject}.\n\n    "
    },
    {
        "ID": 289,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def has_next(self): \"\"\"Indicates whether there is another match available\"\"\" if self._state == PhoneNumberMatcher._NOT_READY: self._last_match = self._find(self._search_index) if self._last_match is None: self._state = PhoneNumberMatcher._DONE else: self._search_index = self._last_match.end self._state = PhoneNumberMatcher._READY return (self._state == PhoneNumberMatcher._READY)\n\n    ### Response: Indicates whether there is another match available.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public MockMvcRequestSpecBuilder addMultiPart(String controlName, String contentBody, String mimeType) { spec.multiPart(controlName, mimeType); return this; }\n\n    ### Response:",
        "ground_truth": "Specify a string to send to the server using multi-part form data with a specific mime-type.\n\n@param controlName Defines the control name of the body part. In HTML this is the attribute name of the input tag.\n@param contentBody The string to send\n@param mimeType    The mime-type\n@return The request specification",
        "predict": " Indicates whether there is another match available.\n\n    "
    },
    {
        "ID": 290,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func WrapEntryPointHandler(ctx context.Context, tracer *tracing.Tracing, entryPointName string) alice.Constructor { return func(next http.Handler) (http.Handler, error) { return NewEntryPoint(ctx, tracer, entryPointName, next), nil } }\n\n    ### Response: // WrapEntryPointHandler Wraps tracing to alice.Constructor..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public MockMvcRequestSpecBuilder addResultHandlers(ResultHandler resultHandler, ResultHandler... additionalResultHandlers) { spec.resultHandlers(resultHandler, additionalResultHandlers); return this; }\n\n    ### Response:",
        "ground_truth": "Add a result handler\n\n@param resultHandler The result handler\n@return MockMvcRequestSpecBuilder",
        "predict": " // WrapEntryPointHandler Wraps tracing to alice.Constructor..\n\n    "
    },
    {
        "ID": 291,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def get_location_from_HDX_code(code, locations=None, configuration=None): # type: (str, Optional[List[Dict]], Optional[Configuration]) -> Optional[str] \"\"\"Get location from HDX location code Args: code (str): code for which to get location name locations (Optional[List[Dict]]): Valid locations list. Defaults to list downloaded from HDX. configuration (Optional[Configuration]): HDX configuration. Defaults to global configuration. Returns: Optional[str]: location name \"\"\" if locations is None: locations = Locations.validlocations(configuration) for locdict in locations: if code.upper() == locdict['name'].upper(): return locdict['title'] return None\n\n    ### Response: Get location from HDX location code\n\n        Args:\n            code (str): code for which to get location name\n            locations (Optional[List[Dict]]): Valid locations list. Defaults to list downloaded from HDX.\n            configuration (Optional[Configuration]): HDX configuration. Defaults to global configuration.\n\n        Returns:\n            Optional[str]: location name.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public <T> HttpClientConfig setParam(String parameterName, T parameterValue) { notNull(parameterName, \"Parameter name\"); final Map<String, Object> newParams = new HashMap<String, Object>(httpClientParams); newParams.put(parameterName, parameterValue); return new HttpClientConfig(httpClientFactory, newParams, httpMultipartMode, shouldReuseHttpClientInstance, NO_HTTP_CLIENT, true); }\n\n    ### Response:",
        "ground_truth": "            The parameter type\n@return An updated HttpClientConfig",
        "predict": " Get location from HDX location code\n\n        Args:\n            code (str): code for which to get location name\n            locations (Optional[List[Dict]]): Valid locations list. Defaults to list downloaded from HDX.\n            configuration (Optional[Configuration]): HDX configuration. Defaults to global configuration.\n\n        Returns:\n            Optional[str]: location name.\n\n    "
    },
    {
        "ID": 292,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def report dups = duplicates s = \"Base dir: #{@dirname}\\n\" s += \"Nr. file: #{size}\" if dups.size > 0 s+= \" (duplicates #{dups.size})\" end s += \"\\nBytes: #{bytes.with_separator}\" s end\n\n    ### Response: simple report with essential information about this catalog\n @return [String] report.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public HttpClientConfig addParams(Map<String, ?> httpClientParams) { notNull(httpClientParams, \"httpClientParams\"); final Map<String, Object> newParams = new HashMap<String, Object>(this.httpClientParams); newParams.putAll(httpClientParams); return new HttpClientConfig(httpClientFactory, newParams, httpMultipartMode, shouldReuseHttpClientInstance, NO_HTTP_CLIENT, true); }\n\n    ### Response:",
        "ground_truth": "",
        "predict": " simple report with essential information about this catalog\n @return [String] report.\n\n    "
    },
    {
        "ID": 293,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def run_query(self, query): \"\"\" method runs the query and returns a list of filtered UnitOfWork records \"\"\" cursor = self.ds.filter(COLLECTION_UNIT_OF_WORK, query) return [UnitOfWork.from_json(document) for document in cursor]\n\n    ### Response: method runs the query and returns a list of filtered UnitOfWork records.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public HttpClientConfig httpClientFactory(HttpClientFactory httpClientFactory) { return new HttpClientConfig(httpClientFactory, httpClientParams, httpMultipartMode, shouldReuseHttpClientInstance, NO_HTTP_CLIENT, true); }\n\n    ### Response:",
        "ground_truth": "",
        "predict": " method runs the query and returns a list of filtered UnitOfWork records.\n\n    "
    },
    {
        "ID": 294,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _get_default_mapping(self, obj): \"\"\"Return default mapping if there are no special needs.\"\"\" mapping = {v: k for k, v in obj.TYPE_MAPPING.items()} mapping.update({ fields.Email: text_type, fields.Dict: dict, fields.Url: text_type, fields.List: list, fields.LocalDateTime: datetime.datetime, fields.Nested: '_from_nested_schema', }) return mapping\n\n    ### Response: Return default mapping if there are no special needs..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public HttpClientConfig httpMultipartMode(HttpMultipartMode httpMultipartMode) { return new HttpClientConfig(httpClientFactory, httpClientParams, httpMultipartMode, shouldReuseHttpClientInstance, httpClient, true); }\n\n    ### Response:",
        "ground_truth": "",
        "predict": " Return default mapping if there are no special needs..\n\n    "
    },
    {
        "ID": 295,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    static public function getUploadFileRelativePath($filename) { if ($filename) { $filename = str_replace('\\\\', '/', $filename); $filename = str_replace(static::getUploadUrl(), '', $filename); $filename = trim(str_replace(static::getUploadPath(), '', $filename), '/'); if (strpos($filename, 'http') === 0) { $filename = str_replace(static::getRootUrl(), '', $filename); } } return $filename; }\n\n    ### Response: get upload file relative path\n@param  string $filename\n@return string.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public <T> T get(String path) { final JSONAssertion jsonAssertion = createJsonAssertion(path, params); final Object json = jsonParser.parseWith(createConfigurableJsonSlurper()); return (T) jsonAssertion.getResult(json, null); }\n\n    ### Response:",
        "ground_truth": "Get the result of an Object path expression as a boolean.\n\n@param path The Object path.\n@return The object matching the Object path. This may be any primitive type, a List or a Map.  A {@link java.lang.ClassCastException} will be thrown if the object\ncannot be casted to the expected type.",
        "predict": " get upload file relative path\n@param  string $filename\n@return string.\n\n    "
    },
    {
        "ID": 296,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void readDictionary(Reader reader, String name) { name = name.toLowerCase(); logger.debug(\"Reading dictionary: \", name); if (!dictionaries.containsKey(name)) { try { Dictionary dictionary = Dictionary.unmarshal(reader); dictionaries.put(name, dictionary); logger.debug(\" ... loaded and stored\"); } catch (Exception exception) { logger.error(\"Could not read dictionary: \", name); logger.debug(exception); } } else { logger.error(\"Dictionary already loaded: \", name); } }\n\n    ### Response: Reads a custom dictionary into the database.\n@param reader The reader from which the dictionary data will be read\n@param name The name of the dictionary.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public int getInt(String path) { //The type returned from Groovy depends on the input, so we need to handle different numerical types. Object value = get(path); if (value instanceof Integer) { return (Integer) value; } else if (value instanceof Short) { return ((Short) value).intValue(); } else if (value instanceof Long) { return ((Long) value).intValue(); } else { return ObjectConverter.convertObjectTo(value, Integer.class); } }\n\n    ### Response:",
        "ground_truth": "Get the result of an Object path expression as an int.\n\n@param path The Object path.\n@return The int matching the Object path. A {@link java.lang.ClassCastException} will be thrown if the object\ncannot be casted to the expected type.",
        "predict": " Reads a custom dictionary into the database.\n@param reader The reader from which the dictionary data will be read\n@param name The name of the dictionary.\n\n    "
    },
    {
        "ID": 297,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _disconnect(self): \"\"\" Cleanly close a RabbitMQ connection. :returns: None \"\"\" try: self._connection.close() logger.debug(\"Disconnected from rabbit\") except Exception: logger.exception(\"Unable to close connection\")\n\n    ### Response: Cleanly close a RabbitMQ connection.\n\n        :returns: None.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public byte getByte(String path) { //The type returned from Groovy depends on the input, so we need to handle different numerical types. Object value = get(path); if (value instanceof Byte) { return (Byte) value; } else if (value instanceof Long) { return ((Long) value).byteValue(); } else if (value instanceof Integer) { return ((Integer) value).byteValue(); } else { return ObjectConverter.convertObjectTo(value, Byte.class); } }\n\n    ### Response:",
        "ground_truth": "Get the result of an Object path expression as a byte.\n\n@param path The Object path.\n@return The object matching the Object path. A {@link java.lang.ClassCastException} will be thrown if the object\ncannot be casted to the expected type.",
        "predict": " Cleanly close a RabbitMQ connection.\n\n        :returns: None.\n\n    "
    },
    {
        "ID": 298,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void unblockRoom(DomainBareJid mucLightService, Jid roomJid) throws NoResponseException, XMPPErrorException, NotConnectedException, InterruptedException { HashMap<Jid, Boolean> rooms = new HashMap<>(); rooms.put(roomJid, true); sendUnblockRooms(mucLightService, rooms); }\n\n    ### Response: Unblock a room.\n\n@param mucLightService\n@param roomJid\n@throws NoResponseException\n@throws XMPPErrorException\n@throws NotConnectedException\n@throws InterruptedException.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public short getShort(String path) { //The type returned from Groovy depends on the input, so we need to handle different numerical types. Object value = get(path); if (value instanceof Short) { return (Short) value; } else if (value instanceof Long) { return ((Long) value).shortValue(); } else if (value instanceof Integer) { return ((Integer) value).shortValue(); } else { return ObjectConverter.convertObjectTo(value, Short.class); } }\n\n    ### Response:",
        "ground_truth": "Get the result of an Object path expression as a short.\n\n@param path The Object path.\n@return The object matching the Object path. A {@link java.lang.ClassCastException} will be thrown if the object\ncannot be casted to the expected type.",
        "predict": " Unblock a room.\n\n@param mucLightService\n@param roomJid\n@throws NoResponseException\n@throws XMPPErrorException\n@throws NotConnectedException\n@throws InterruptedException.\n\n    "
    },
    {
        "ID": 299,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static SanitizedContent constantUri(@CompileTimeConstant final String constant) { return fromConstant(constant, ContentKind.URI, Dir.LTR); }\n\n    ### Response: Wraps an assumed-safe URI constant.\n\nThis only accepts compile-time constants, based on the assumption that URLs that are\ncontrolled by the application (and not user input) are considered safe..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public float getFloat(String path) { final Object value = get(path); //Groovy will always return a Double for floating point values. if (value instanceof Double) { return ((Double) value).floatValue(); } else { return ObjectConverter.convertObjectTo(value, Float.class); } }\n\n    ### Response:",
        "ground_truth": "Get the result of an Object path expression as a float.\n\n@param path The Object path.\n@return The object matching the Object path. A {@link java.lang.ClassCastException} will be thrown if the object\ncannot be casted to the expected type.",
        "predict": " Wraps an assumed-safe URI constant.\n\nThis only accepts compile-time constants, based on the assumption that URLs that are\ncontrolled by the application (and not user input) are considered safe..\n\n    "
    },
    {
        "ID": 300,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func GetMetadataFromBlockOrPanic(block *cb.Block, index cb.BlockMetadataIndex) *cb.Metadata { md, err := GetMetadataFromBlock(block, index) if err != nil { panic(err) } return md }\n\n    ### Response: // GetMetadataFromBlockOrPanic retrieves metadata at the specified index, or\n// panics on error.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public double getDouble(String path) { final Object value = get(path); if (value instanceof Double) { return (Double) value; } return ObjectConverter.convertObjectTo(value, Double.class); }\n\n    ### Response:",
        "ground_truth": "Get the result of an Object path expression as a double.\n\n@param path The Object path.\n@return The object matching the Object path. A {@link java.lang.ClassCastException} will be thrown if the object\ncannot be casted to the expected type.",
        "predict": " // GetMetadataFromBlockOrPanic retrieves metadata at the specified index, or\n// panics on error.\n\n    "
    },
    {
        "ID": 301,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static JsonPatch generate(final JsonNode source, final JsonNode target, ReplaceMode replaceMode) { requireNonNull(source, \"source\"); requireNonNull(target, \"target\"); final DiffProcessor processor = new DiffProcessor(replaceMode, () -> unchangedValues(source, target)); generateDiffs(processor, EMPTY_JSON_POINTER, source, target); return processor.getPatch(); }\n\n    ### Response: Generates a JSON patch for transforming the source node into the target node.\n\n@param source the node to be patched\n@param target the expected result after applying the patch\n@param replaceMode the replace mode to be used\n@return the patch as a {@link JsonPatch}.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public long getLong(String path) { //The type returned from Groovy depends on the input, so we need to handle different numerical types. Object value = get(path); if (value instanceof Long) { return (Long) value; } else if (value instanceof Short) { return ((Short) value).longValue(); } else if (value instanceof Integer) { return ((Integer) value).longValue(); } else { return ObjectConverter.convertObjectTo(value, Long.class); } }\n\n    ### Response:",
        "ground_truth": "Get the result of an Object path expression as a long.\n\n@param path The Object path.\n@return The object matching the Object path. A {@link java.lang.ClassCastException} will be thrown if the object\ncannot be casted to the expected type.",
        "predict": " Generates a JSON patch for transforming the source node into the target node.\n\n@param source the node to be patched\n@param target the expected result after applying the patch\n@param replaceMode the replace mode to be used\n@return the patch as a {@link JsonPatch}.\n\n    "
    },
    {
        "ID": 302,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def set_defaults(object, filter = method(:skip_default?)) each do |attribute| next if filter.call(object, attribute) attribute.set_default_value(object) end end\n\n    ### Response: Set default attributes\n\n @return [self]\n\n @api private.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public <T> List<T> getList(String path, Class<T> genericType) { if (genericType == null) { throw new IllegalArgumentException(\"Generic type cannot be null\"); } final List<T> original = get(path); final List<T> newList = new LinkedList<T>(); if (original != null) { for (T t : original) { T e; if (t instanceof Map && !genericType.isAssignableFrom(Map.class)) { // TODO Avoid double parsing String str = objectToString(t); //noinspection unchecked e = (T) jsonStringToObject(str, genericType); } else { e = ObjectConverter.convertObjectTo(t, genericType); } newList.add(e); } } return Collections.unmodifiableList(newList); }\n\n    ### Response:",
        "ground_truth": "Get the result of an Object path expression as a list.\n\n@param path        The Object path.\n@param genericType The generic list type\n@param          The type\n@return The object matching the Object path. A {@link java.lang.ClassCastException} will be thrown if the object\ncannot be casted to the expected type.",
        "predict": " Set default attributes\n\n @return [self]\n\n @api private.\n\n    "
    },
    {
        "ID": 303,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function setClassName($class_name) { if ($class_name === null) { throw new ENabuCoreException( ENabuCoreException::ERROR_NULL_VALUE_NOT_ALLOWED_IN, array(\"\\$class_name\") ); } $implements_list = class_implements($class_name, true); if (is_array($implements_list) && array_search('nabu\\http\\interfaces\\INabuHTTPResponseRender', $implements_list) ) { $this->setValue(\"nb_http_render_descriptor_class_name\", $class_name); } else { throw new ENabuCoreException(ENabuCoreException::ERROR_INVALID_RENDER_DESCRIPTOR_CLASS); } return $this; }\n\n    ### Response: Sets the Descriptor class name attribute value\n@param int $class_name New value for attribute\n@return CNabuHTTPRenderDescriptor Returns $this.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public <K, V> Map<K, V> getMap(String path) { return get(path); }\n\n    ### Response:",
        "ground_truth": "Get the result of an Object path expression as a map.\n\n@param path The Object path.\n@param   The type of the expected key\n@param   The type of the expected value\n@return The map matching the Object path. A {@link java.lang.ClassCastException} will be thrown if the object\ncannot be casted to the expected type.",
        "predict": " Sets the Descriptor class name attribute value\n@param int $class_name New value for attribute\n@return CNabuHTTPRenderDescriptor Returns $this.\n\n    "
    },
    {
        "ID": 304,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public final int getInt(final String key) { Integer result = optInt(key); if (result == null) { throw new ObjectMissingException(this, key); } return result; }\n\n    ### Response: Get a property as an int or throw an exception.\n\n@param key the property name.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public <T> T getObject(String path, Class<T> objectType) { Object object = getFromPath(path, false); return getObjectAsType(object, objectType); }\n\n    ### Response:",
        "ground_truth": "Get an XML document as a Java Object.\n\n@param objectType The type of the java object.\n@param         The type of the java object\n@return A Java object representation of the XML document",
        "predict": " Get a property as an int or throw an exception.\n\n@param key the property name.\n\n    "
    },
    {
        "ID": 305,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def onchain_exchange(self, withdraw_crypto, withdraw_address, value, unit='satoshi'): \"\"\" This method is like `add_output` but it sends to another \"\"\" self.onchain_rate = get_onchain_exchange_rates( self.crypto, withdraw_crypto, best=True, verbose=self.verbose ) exchange_rate = float(self.onchain_rate['rate']) result = self.onchain_rate['service'].get_onchain_exchange_address( self.crypto, withdraw_crypto, withdraw_address ) address = result['deposit'] value_satoshi = self.from_unit_to_satoshi(value, unit) if self.verbose: print(\"Adding output of: %s satoshi (%.8f) via onchain exchange, converting to %s %s\" % ( value_satoshi, (value_satoshi / 1e8), exchange_rate * value_satoshi / 1e8, withdraw_crypto.upper() )) self.outs.append({ 'address': address, 'value': value_satoshi })\n\n    ### Response: This method is like `add_output` but it sends to another.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public RequestSpecBuilder setBody(Object object, ObjectMapper mapper) { spec.body(object, mapper); return this; }\n\n    ### Response:",
        "ground_truth": "",
        "predict": " This method is like `add_output` but it sends to another.\n\n    "
    },
    {
        "ID": 306,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function orders(string $symbol, int $limit = 500, int $fromOrderId = 1) { return $this->httpRequest(\"v3/allOrders\", \"GET\", [ \"symbol\" => $symbol, \"limit\" => $limit, \"orderId\" => $fromOrderId, ], true); }\n\n    ### Response: orders attempts to get the orders for all or a specific currency\n\n$allBNBOrders = $api->orders( \"BNBBTC\" );\n\n@param $symbol string the currency symbol\n@param $limit int the amount of orders returned\n@param $fromOrderId string return the orders from this order onwards\n@return array with error message or array of orderDetails array\n@throws \\Exception.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public RequestSpecBuilder addCookie(String key, Object value, Object... cookieNameValuePairs) { spec.cookie(key, value, cookieNameValuePairs); return this; }\n\n    ### Response:",
        "ground_truth": "Add a cookie to be sent with the request.\n\n@param key                  The cookie key\n@param value                The cookie value\n@param cookieNameValuePairs Additional cookies values. This will actually create two cookies with the same name but with different values.\n@return The request specification builder",
        "predict": " orders attempts to get the orders for all or a specific currency\n\n$allBNBOrders = $api->orders( \"BNBBTC\" );\n\n@param $symbol string the currency symbol\n@param $limit int the amount of orders returned\n@param $fromOrderId string return the orders from this order onwards\n@return array with error message or array of orderDetails array\n@throws \\Exception.\n\n    "
    },
    {
        "ID": 307,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void toXml(final String indent, final StringBuffer xml) { String primitiveString = formatSimpleValue(); xml.append(indent); xml.append(isPrimitive() ? \"<primitive\" : \"<object\"); if (refNode == null) { xml.append(\" id=\\\"\").append(id).append('\"'); if (fieldName != null) { xml.append(\" field=\\\"\").append(fieldName).append('\"'); } if (primitiveString != null) { primitiveString = WebUtilities.encode(primitiveString); xml.append(\" value=\\\"\").append(primitiveString).append('\"'); } if (type != null) { xml.append(\" type=\\\"\").append(type).append('\"'); } xml.append(\" size=\\\"\").append(getSize()).append('\"'); if (getChildCount() == 0) { xml.append(\"/>\\n\"); } else { xml.append(\">\\n\"); String newIndent = indent + \" \"; for (int i = 0; i < getChildCount(); i++) { ((ObjectGraphNode) getChildAt(i)).toXml(newIndent, xml); } xml.append(indent); xml.append(isPrimitive() ? \"</primitive>\\n\" : \"</object>\\n\"); } } else { if (fieldName != null) { xml.append(\" field=\\\"\").append(fieldName).append('\"'); } xml.append(\" refId=\\\"\").append(refNode.id).append('\"'); if (refNode.value == null) { xml.append(\" type=\\\"\").append(refNode.type).append('\"'); } else { xml.append(\" type=\\\"\").append(refNode.value.getClass().getName()).append('\"'); } xml.append(\" size=\\\"\").append(OBJREF_SIZE).append('\"'); xml.append(\"/>\\n\"); } }\n\n    ### Response: Emits an XML representation of this ObjectGraphNode.\n\n@param indent the indent, for formatting.\n@param xml the buffer to write XML output to..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public RequestSpecBuilder addParam(String parameterName, Object... parameterValues) { spec.param(parameterName, parameterValues); return this; }\n\n    ### Response:",
        "ground_truth": "Add a parameter to be sent with the request.\n\n@param parameterName   The parameter name\n@param parameterValues Zero to many parameter values for this parameter name.\n@return The request specification builder",
        "predict": " Emits an XML representation of this ObjectGraphNode.\n\n@param indent the indent, for formatting.\n@param xml the buffer to write XML output to..\n\n    "
    },
    {
        "ID": 308,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Nonnull public FineUploader5Validation setSizeLimit (@Nonnegative final int nSizeLimit) { ValueEnforcer.isGE0 (nSizeLimit, \"SizeLimit\"); m_nValidationSizeLimit = nSizeLimit; return this; }\n\n    ### Response: The maximum allowable size, in bytes, for an item.\n\n@param nSizeLimit\nSize limit. 0 == unlimited\n@return this for chaining.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public RequestSpecBuilder addParam(String parameterName, Collection<?> parameterValues) { spec.param(parameterName, parameterValues); return this; }\n\n    ### Response:",
        "ground_truth": "Add a multi-value parameter to be sent with the request.\n\n@param parameterName   The parameter key\n@param parameterValues The parameter values\n@return The request specification builder",
        "predict": " The maximum allowable size, in bytes, for an item.\n\n@param nSizeLimit\nSize limit. 0 == unlimited\n@return this for chaining.\n\n    "
    },
    {
        "ID": 309,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def get_color_zones(self, start_index, end_index=None, callb=None): \"\"\"Convenience method to request the state of colour by zones from the device This method will request the information from the device and request that callb be executed when a response is received. :param start_index: Index of the start of the zone of interest :type start_index: int :param end_index: Index of the end of the zone of interest. By default start_index+7 :type end_index: int :param callb: Callable to be used when the response is received. If not set, self.resp_set_label will be used. :type callb: callable :returns: None :rtype: None \"\"\" if end_index is None: end_index = start_index + 7 args = { \"start_index\": start_index, \"end_index\": end_index, } self.req_with_resp(MultiZoneGetColorZones, MultiZoneStateMultiZone, payload=args, callb=callb)\n\n    ### Response: Convenience method to request the state of colour by zones from the device\n\n        This method will request the information from the device and request that callb\n        be executed when a response is received.\n\n            :param start_index: Index of the start of the zone of interest\n            :type start_index: int\n            :param end_index: Index of the end of the zone of interest. By default start_index+7\n            :type end_index: int\n            :param callb: Callable to be used when the response is received. If not set,\n                        self.resp_set_label will be used.\n            :type callb: callable\n            :returns: None\n            :rtype: None.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public MockMvcParamConfig formParamsUpdateStrategy(UpdateStrategy updateStrategy) { return new MockMvcParamConfig(queryParamsUpdateStrategy, updateStrategy, requestParameterUpdateStrategy, attributeUpdateStrategy, sessionUpdateStrategy, true); }\n\n    ### Response:",
        "ground_truth": "Set form parameter update strategy to the given value.\n\n@param updateStrategy The update strategy to use for form parameters\n@return A new instance of {@link MockMvcParamConfig}",
        "predict": " Convenience method to request the state of colour by zones from the device\n\n        This method will request the information from the device and request that callb\n        be executed when a response is received.\n\n            :param start_index: Index of the start of the zone of interest\n            :type start_index: int\n            :param end_index: Index of the end of the zone of interest. By default start_index+7\n            :type end_index: int\n            :param callb: Callable to be used when the response is received. If not set,\n                        self.resp_set_label will be used.\n            :type callb: callable\n            :returns: None\n            :rtype: None.\n\n    "
    },
    {
        "ID": 310,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public ItemData getItemData(String identifier,boolean checkChangesLogOnly) throws RepositoryException { ItemData data = null; // 1. Try in transient changes ItemState state = changesLog.getItemState(identifier); if (state == null) { // 2. Try from txdatamanager data = transactionableManager.getItemData(identifier,checkChangesLogOnly); data = updatePathIfNeeded(data); } else if (!state.isDeleted()) { data = state.getData(); } return data; }\n\n    ### Response: Return item data by identifier in this transient storage then in workspace container.\n\n@param identifier\n@param checkChangesLogOnly\n@return existed item data or null if not found\n@throws RepositoryException\n@see org.exoplatform.services.jcr.dataflow.ItemDataConsumer#getItemData(java.lang.String).\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Filter logResponseToIfMatches(PrintStream stream, Matcher<Integer> matcher) { return new ResponseLoggingFilter(stream, matcher); }\n\n    ### Response:",
        "ground_truth": "Create a new logging filter without using the \"new\" operator.\nWill make the DSL look nicer.\n\n@param stream The print stream to log to\n@param matcher The matcher that must be fulfilled in order for logging to occur\n@return a new instance of the filter",
        "predict": " Return item data by identifier in this transient storage then in workspace container.\n\n@param identifier\n@param checkChangesLogOnly\n@return existed item data or null if not found\n@throws RepositoryException\n@see org.exoplatform.services.jcr.dataflow.ItemDataConsumer#getItemData(java.lang.String).\n\n    "
    },
    {
        "ID": 311,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (nb *NullBase) Set(value interface{}) error { nb.valid = false nb.value = nil if value == nil { return nil } nb.valid = true nb.value = value return nil }\n\n    ### Response: // Set value. If nil is given, value is cleared..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Cookies cookies(Cookie cookie, Cookie... additionalCookies) { AssertParameter.notNull(cookie, \"Cookie\"); final List<Cookie> cookieList = new LinkedList<Cookie>(); cookieList.add(cookie); Collections.addAll(cookieList, additionalCookies); return new Cookies(cookieList); }\n\n    ### Response:",
        "ground_truth": "An alternative way to create a Cookies object from the constructor.\n\n@param cookie            The cookie to be included\n@param additionalCookies Additional cookies to be included (optional)\n@return A new cookies object containing the specified cookies",
        "predict": " // Set value. If nil is given, value is cleared..\n\n    "
    },
    {
        "ID": 312,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def get_meta(self, ignore=['uniqueid']): \"\"\" See all the meta-tag properties for this Parameter :parameter list ignore: list of keys to exclude from the returned dictionary :return: an ordered dictionary of tag properties \"\"\" return OrderedDict([(k, getattr(self, k)) for k in _meta_fields_all if k not in ignore])\n\n    ### Response: See all the meta-tag properties for this Parameter\n\n        :parameter list ignore: list of keys to exclude from the returned\n            dictionary\n        :return: an ordered dictionary of tag properties.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void cleanUpForCollectedState(Set<KeyAndSource> keysAndSources) { synchronized (lock) { for (KeyAndSource keyAndSource : keysAndSources) { Multiset<Object> set = backingMap.get(keyAndSource.key); if (set != null) { set.remove(keyAndSource.source); if (set.isEmpty()) { backingMap.remove(keyAndSource.key); } } } } }\n\n    ### Response:",
        "ground_truth": "There may be multiple child injectors blacklisting a certain key so only remove the source\nthat's relevant.",
        "predict": " See all the meta-tag properties for this Parameter\n\n        :parameter list ignore: list of keys to exclude from the returned\n            dictionary\n        :return: an ordered dictionary of tag properties.\n\n    "
    },
    {
        "ID": 313,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def register_property_alias(aliaz, attribute) std = standard_attribute(attribute) raise ArgumentError.new(\"#{self} attribute not found: #{attribute}\") if std.nil? @local_std_prop_hash[aliaz.to_sym] = std end\n\n    ### Response: Registers an alias to an attribute.\n\n @param (see #alias_attribute).\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    void index() { for (Binding<?> binding : state.getExplicitBindingsThisLevel().values()) { bindingsMultimap.put(binding.getKey().getTypeLiteral(), binding); } }\n\n    ### Response:",
        "ground_truth": "Indexes bindings by type.",
        "predict": " Registers an alias to an attribute.\n\n @param (see #alias_attribute).\n\n    "
    },
    {
        "ID": 314,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def source(uri, consts): ''' read gl code ''' with open(uri, 'r') as fp: content = fp.read() # feed constant values for key, value in consts.items(): content = content.replace(f\"%%{key}%%\", str(value)) return content\n\n    ### Response: read gl code.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    <T> BindingImpl<T> getBindingOrThrow(Key<T> key, Errors errors, JitLimitation jitType) throws ErrorsException { // Check explicit bindings, i.e. bindings created by modules. BindingImpl<T> binding = state.getExplicitBinding(key); if (binding != null) { return binding; } // Look for an on-demand binding. return getJustInTimeBinding(key, errors, jitType); }\n\n    ### Response:",
        "ground_truth": "Gets a binding implementation. First, it check to see if the parent has a binding. If the\nparent has a binding and the binding is scoped, it will use that binding. Otherwise, this\nchecks for an explicit binding. If no explicit binding is found, it looks for a just-in-time\nbinding.",
        "predict": " read gl code.\n\n    "
    },
    {
        "ID": 315,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func RunFunc(config *sshconf.Config) func(string) (string, error) { if config == nil { return func(command string) (string, error) { var stderr bytes.Buffer var stdout bytes.Buffer c := exec.Command(\"/bin/bash\", \"-c\", command) c.Stderr = &stderr c.Stdout = &stdout if err := c.Start(); err != nil { return \"\", err } if err := c.Wait(); err != nil { return \"\", fmt.Errorf(\"executing %s : %s [%s]\", command, stderr.String(), err) } return strings.TrimSpace(stdout.String()), nil } } return func(command string) (string, error) { c, err := ssh.NewSshConn(config) if err != nil { return \"\", err } defer c.ConnClose() outstr, errstr, err := c.Run(\"sudo \" + command) if err != nil { return \"\", fmt.Errorf(\"executing %s : %s [%s]\", command, errstr, err) } return strings.TrimSpace(outstr), nil } }\n\n    ### Response: // RunFunc is a generic solution for running appropriate commands\n// on local or remote host.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private <T> BindingImpl<T> convertConstantStringBinding(Key<T> key, Errors errors) throws ErrorsException { // Find a constant string binding. Key<String> stringKey = key.ofType(STRING_TYPE); BindingImpl<String> stringBinding = state.getExplicitBinding(stringKey); if (stringBinding == null || !stringBinding.isConstant()) { return null; } // We can't call getProvider().get() because this InstanceBinding may not have been inintialized // yet (because we may have been called during InternalInjectorCreator.initializeStatically and // instance binding validation hasn't happened yet.) @SuppressWarnings(\"unchecked\") String stringValue = ((InstanceBinding<String>) stringBinding).getInstance(); Object source = stringBinding.getSource(); // Find a matching type converter. TypeLiteral<T> type = key.getTypeLiteral(); TypeConverterBinding typeConverterBinding = state.getConverter(stringValue, type, errors, source); if (typeConverterBinding == null) { // No converter can handle the given type. return null; } // Try to convert the string. A failed conversion results in an error. try { @SuppressWarnings(\"unchecked\") // This cast is safe because we double check below. T converted = (T) typeConverterBinding.getTypeConverter().convert(stringValue, type); if (converted == null) { throw errors .converterReturnedNull(stringValue, source, type, typeConverterBinding) .toException(); } if (!type.getRawType().isInstance(converted)) { throw errors .conversionTypeError(stringValue, source, type, typeConverterBinding, converted) .toException(); } return new ConvertedConstantBindingImpl<T>( this, key, converted, stringBinding, typeConverterBinding); } catch (ErrorsException e) { throw e; } catch (RuntimeException e) { throw errors .conversionError(stringValue, source, type, typeConverterBinding, e) .toException(); } }\n\n    ### Response:",
        "ground_truth": "Converts a constant string binding to the required type.\n\n@return the binding if it could be resolved, or null if the binding doesn't exist\n@throws com.google.inject.internal.ErrorsException if there was an error resolving the binding",
        "predict": " // RunFunc is a generic solution for running appropriate commands\n// on local or remote host.\n\n    "
    },
    {
        "ID": 316,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (obj *Global) GetUniqueID(ctx context.Context) (string, error) { result := &struct { UniqueID string `json:\"qUniqueID\"` } {} err := obj.rpc(ctx, \"GetUniqueID\", result) return result.UniqueID, err }\n\n    ### Response: // Returns the unique identifier of the endpoint for the current user in the current app.\n// This unique identifier can be used for logging purposes..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private boolean cleanup(BindingImpl<?> binding, Set<Key> encountered) { boolean bindingFailed = false; Set<Dependency<?>> deps = getInternalDependencies(binding); for (Dependency dep : deps) { Key<?> depKey = dep.getKey(); InjectionPoint ip = dep.getInjectionPoint(); if (encountered.add(depKey)) { // only check if we haven't looked at this key yet BindingImpl depBinding = jitBindings.get(depKey); if (depBinding != null) { // if the binding still exists, validate boolean failed = cleanup(depBinding, encountered); // if children fail, we fail if (depBinding instanceof ConstructorBindingImpl) { ConstructorBindingImpl ctorBinding = (ConstructorBindingImpl) depBinding; ip = ctorBinding.getInternalConstructor(); if (!ctorBinding.isInitialized()) { failed = true; } } if (failed) { removeFailedJitBinding(depBinding, ip); bindingFailed = true; } } else if (state.getExplicitBinding(depKey) == null) { // ignore keys if they were explicitly bound, but if neither JIT // nor explicit, it's also invalid & should let parent know. bindingFailed = true; } } } return bindingFailed; }\n\n    ### Response:",
        "ground_truth": "Iterates through the binding's dependencies to clean up any stray bindings that were leftover\nfrom a failed JIT binding. This is required because the bindings are eagerly & optimistically\nadded to allow circular dependency support, so dependencies may pass where they should have\nfailed.",
        "predict": " // Returns the unique identifier of the endpoint for the current user in the current app.\n// This unique identifier can be used for logging purposes..\n\n    "
    },
    {
        "ID": 317,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def eth_getStorageAt(self, address, position): \"\"\"Get account storage data at position. :param address: :param position: :return: \"\"\" account = self.reader._get_account(address) return _encode_hex( utils.zpad(utils.encode_int(account.get_storage_data(position)), 32) )\n\n    ### Response: Get account storage data at position.\n\n        :param address:\n        :param position:\n        :return:.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void removeFailedJitBinding(Binding<?> binding, InjectionPoint ip) { failedJitBindings.add(binding.getKey()); jitBindings.remove(binding.getKey()); membersInjectorStore.remove(binding.getKey().getTypeLiteral()); provisionListenerStore.remove(binding); if (ip != null) { constructors.remove(ip); } }\n\n    ### Response:",
        "ground_truth": "Cleans up any state that may have been cached when constructing the JIT binding.",
        "predict": " Get account storage data at position.\n\n        :param address:\n        :param position:\n        :return:.\n\n    "
    },
    {
        "ID": 318,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    static MPApiResponse getFromCache(String key) { HashMap<String, MPApiResponse> mapCache = getMapCache(); MPApiResponse response = null; try { response = mapCache.get(key).clone(); } catch (Exception ex) { // Do nothing } if (response != null) { response.fromCache = Boolean.TRUE; } return response; }\n\n    ### Response: Retrieves an entry from the cache.\n\n@param key           String with cache entry key\n@return              MPApiResponse cached object, null if it does not exists.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SuppressWarnings(\"unchecked\") private Set<Dependency<?>> getInternalDependencies(BindingImpl<?> binding) { if (binding instanceof ConstructorBindingImpl) { return ((ConstructorBindingImpl) binding).getInternalDependencies(); } else if (binding instanceof HasDependencies) { return ((HasDependencies) binding).getDependencies(); } else { return ImmutableSet.of(); } }\n\n    ### Response:",
        "ground_truth": "Safely gets the dependencies of possibly not initialized bindings.",
        "predict": " Retrieves an entry from the cache.\n\n@param key           String with cache entry key\n@return              MPApiResponse cached object, null if it does not exists.\n\n    "
    },
    {
        "ID": 319,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function getTextWidth( $size, $text ) { // this function should not change any of the settings, though it will need to // track any directives which change during calculation, so copy them at the start // and put them back at the end. $this->pushTextState( $this->currentTextState ); if (!$this->numFonts) { $this->selectFont('./fonts/Helvetica'); } // converts a number or a float to a string so it can get the width $text = \"$text\"; // hmm, this is where it all starts to get tricky - use the font information to // calculate the width of each character, add them up and convert to user units $w = 0; $len = strlen( $text ); $cf = $this->currentFont; for ( $i = 0; $i < $len; $i++ ) { $f = 1; $directiveArray = $this->PRVTcheckTextDirective( $text, $i, $f ); $directive = $directiveArray['directive']; if ( $directive ) { if ($f) { $this->setCurrentFont(); $cf = $this->currentFont; } $i = $i + $directive-1; } else { $char = ord( $text[$i] ); if ( isset($this->fonts[$cf]['differences'][$char] ) ) { // then this character is being replaced by another $name = $this->fonts[$cf]['differences'][$char]; if ( isset($this->fonts[$cf]['C'][$name]['WX'] ) ) { $w += $this->fonts[$cf]['C'][$name]['WX']; } } else if ( isset($this->fonts[$cf]['C'][$char]['WX'] ) ) { $w += $this->fonts[$cf]['C'][$char]['WX']; } else { $w += 700; } } } $this->popTextState(); $this->setCurrentFont(); return $w*$size/1000; }\n\n    ### Response: calculate how wide a given text string will be on a page, at a given size.\nthis can be called externally, but is alse used by the other class functions.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    <T> BindingImpl<T> createUninitializedBinding( Key<T> key, Scoping scoping, Object source, Errors errors, boolean jitBinding) throws ErrorsException { Class<?> rawType = key.getTypeLiteral().getRawType(); ImplementedBy implementedBy = rawType.getAnnotation(ImplementedBy.class); // Don't try to inject arrays or enums annotated with @ImplementedBy. if (rawType.isArray() || (rawType.isEnum() && implementedBy != null)) { throw errors.missingImplementationWithHint(key, this).toException(); } // Handle TypeLiteral<T> by binding the inner type if (rawType == TypeLiteral.class) { @SuppressWarnings(\"unchecked\") // we have to fudge the inner type as Object BindingImpl<T> binding = (BindingImpl<T>) createTypeLiteralBinding((Key<TypeLiteral<Object>>) key, errors); return binding; } // Handle @ImplementedBy if (implementedBy != null) { Annotations.checkForMisplacedScopeAnnotations(rawType, source, errors); return createImplementedByBinding(key, scoping, implementedBy, errors); } // Handle @ProvidedBy. ProvidedBy providedBy = rawType.getAnnotation(ProvidedBy.class); if (providedBy != null) { Annotations.checkForMisplacedScopeAnnotations(rawType, source, errors); return createProvidedByBinding(key, scoping, providedBy, errors); } return ConstructorBindingImpl.create( this, key, null, /* use default constructor */ source, scoping, errors, jitBinding && options.jitDisabled, options.atInjectRequired); }\n\n    ### Response:",
        "ground_truth": "Creates a binding for an injectable type with the given scope. Looks for a scope on the type if\nnone is specified.",
        "predict": " calculate how wide a given text string will be on a page, at a given size.\nthis can be called externally, but is alse used by the other class functions.\n\n    "
    },
    {
        "ID": 320,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def get_tuids_from_revision(self, revision): \"\"\" Gets the TUIDs for the files modified by a revision. :param revision: revision to get files from :return: list of (file, list(tuids)) tuples \"\"\" result = [] URL_TO_FILES = self.hg_url / self.config.hg.branch / 'json-info' / revision try: mozobject = http.get_json(url=URL_TO_FILES, retry=RETRY) except Exception as e: Log.warning(\"Unexpected error trying to get file list for revision {{revision}}\", cause=e) return None files = mozobject[revision]['files'] results = self.get_tuids(files, revision) return results\n\n    ### Response: Gets the TUIDs for the files modified by a revision.\n\n        :param revision: revision to get files from\n        :return: list of (file, list(tuids)) tuples.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    static Object[] getAll(InternalContext context, SingleParameterInjector<?>[] parameterInjectors) throws InternalProvisionException { if (parameterInjectors == null) { return NO_ARGUMENTS; } int size = parameterInjectors.length; Object[] parameters = new Object[size]; // optimization: use manual for/each to save allocating an iterator here for (int i = 0; i < size; i++) { parameters[i] = parameterInjectors[i].inject(context); } return parameters; }\n\n    ### Response:",
        "ground_truth": "Returns an array of parameter values.",
        "predict": " Gets the TUIDs for the files modified by a revision.\n\n        :param revision: revision to get files from\n        :return: list of (file, list(tuids)) tuples.\n\n    "
    },
    {
        "ID": 321,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function calculatePositionDiff(position) { if (!_lastDiffPosition) { return _lastDiffPosition = position; } var dx, dy, p1, p2; p1 = position; p2 = _lastDiffPosition; dx = p2.x - p1.x; dy = p2.y - p1.y; _calcMoveDiffX += dx; _calcMoveDiffY += dy; _overallMoveDiffY += dy; _overallMoveDiffX += dx; _lastDiffPosition = position; }\n\n    ### Response: position diff methods.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static void bindInjector(InjectorImpl injector) { Key<Injector> key = Key.get(Injector.class); InjectorFactory injectorFactory = new InjectorFactory(injector); injector.state.putBinding( key, new ProviderInstanceBindingImpl<Injector>( injector, key, SourceProvider.UNKNOWN_SOURCE, injectorFactory, Scoping.UNSCOPED, injectorFactory, ImmutableSet.<InjectionPoint>of())); }\n\n    ### Response:",
        "ground_truth": "The Injector is a special case because we allow both parent and child injectors to both have a\nbinding for that key.",
        "predict": " position diff methods.\n\n    "
    },
    {
        "ID": 322,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (c *CollisionSystem) AddByInterface(i ecs.Identifier) { o, _ := i.(Collisionable) c.Add(o.GetBasicEntity(), o.GetCollisionComponent(), o.GetSpaceComponent()) }\n\n    ### Response: // AddByInterface Provides a simple way to add an entity to the system that satisfies Collisionable. Any entity containing, BasicEntity,CollisionComponent, and SpaceComponent anonymously, automatically does this..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static void bindLogger(InjectorImpl injector) { Key<Logger> key = Key.get(Logger.class); LoggerFactory loggerFactory = new LoggerFactory(); injector.state.putBinding( key, new ProviderInstanceBindingImpl<Logger>( injector, key, SourceProvider.UNKNOWN_SOURCE, loggerFactory, Scoping.UNSCOPED, loggerFactory, ImmutableSet.<InjectionPoint>of())); }\n\n    ### Response:",
        "ground_truth": "The Logger is a special case because it knows the injection point of the injected member. It's\nthe only binding that does this.",
        "predict": " // AddByInterface Provides a simple way to add an entity to the system that satisfies Collisionable. Any entity containing, BasicEntity,CollisionComponent, and SpaceComponent anonymously, automatically does this..\n\n    "
    },
    {
        "ID": 323,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function isTrue($value, $message = '') { $this->assertion->setActual($value); return $this->assertion->to->be->true($message); }\n\n    ### Response: Perform a true assertion.\n\n@param mixed  $value\n@param string $message.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static boolean checkForMisplacedBindingAnnotations(Member member, Errors errors) { Annotation misplacedBindingAnnotation = Annotations.findBindingAnnotation( errors, member, ((AnnotatedElement) member).getAnnotations()); if (misplacedBindingAnnotation == null) { return false; } // don't warn about misplaced binding annotations on methods when there's a field with the same // name. In Scala, fields always get accessor methods (that we need to ignore). See bug 242. if (member instanceof Method) { try { if (member.getDeclaringClass().getDeclaredField(member.getName()) != null) { return false; } } catch (NoSuchFieldException ignore) { } } errors.misplacedBindingAnnotation(member, misplacedBindingAnnotation); return true; }\n\n    ### Response:",
        "ground_truth": "Returns true if the binding annotation is in the wrong place.",
        "predict": " Perform a true assertion.\n\n@param mixed  $value\n@param string $message.\n\n    "
    },
    {
        "ID": 324,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def calculate_tetra_zscore(filename): \"\"\"Returns TETRA Z-score for the sequence in the passed file. - filename - path to sequence file Calculates mono-, di-, tri- and tetranucleotide frequencies for each sequence, on each strand, and follows Teeling et al. (2004) in calculating a corresponding Z-score for each observed tetranucleotide frequency, dependent on the mono-, di- and tri- nucleotide frequencies for that input sequence. \"\"\" # For the Teeling et al. method, the Z-scores require us to count # mono, di, tri and tetranucleotide sequences - these are stored # (in order) in the counts tuple counts = (collections.defaultdict(int), collections.defaultdict(int), collections.defaultdict(int), collections.defaultdict(int)) for rec in SeqIO.parse(filename, 'fasta'): for seq in [str(rec.seq).upper(), str(rec.seq.reverse_complement()).upper()]: # The Teeling et al. algorithm requires us to consider # both strand orientations, so monocounts are easy for base in ('G', 'C', 'T', 'A'): counts[0][base] += seq.count(base) # For di, tri and tetranucleotide counts, loop over the # sequence and its reverse complement, until near the end: for i in range(len(seq[:-4])): din, tri, tetra = seq[i:i+2], seq[i:i+3], seq[i:i+4] counts[1][str(din)] += 1 counts[2][str(tri)] += 1 counts[3][str(tetra)] += 1 # Then clean up the straggling bit at the end: counts[2][str(seq[-4:-1])] += 1 counts[2][str(seq[-3:])] += 1 counts[1][str(seq[-4:-2])] += 1 counts[1][str(seq[-3:-1])] += 1 counts[1][str(seq[-2:])] += 1 # Following Teeling (2004), calculate expected frequencies for each # tetranucleotide; we ignore ambiguity symbols tetra_exp = {} for tet in [tetn for tetn in counts[3] if tetra_clean(tetn)]: tetra_exp[tet] = 1. * counts[2][tet[:3]] * counts[2][tet[1:]] / \\ counts[1][tet[1:3]] # Following Teeling (2004) we approximate the std dev and Z-score for each # tetranucleotide tetra_sd = {} tetra_z = {} for tet, exp in list(tetra_exp.items()): den = counts[1][tet[1:3]] tetra_sd[tet] = math.sqrt(exp * (den - counts[2][tet[:3]]) * (den - counts[2][tet[1:]]) / (den * den)) try: tetra_z[tet] = (counts[3][tet] - exp)/tetra_sd[tet] except ZeroDivisionError: # To record if we hit a zero in the estimation of variance # zeroes = [k for k, v in list(tetra_sd.items()) if v == 0] tetra_z[tet] = 1 / (counts[1][tet[1:3]] * counts[1][tet[1:3]]) return tetra_z\n\n    ### Response: Returns TETRA Z-score for the sequence in the passed file.\n\n    - filename - path to sequence file\n\n    Calculates mono-, di-, tri- and tetranucleotide frequencies\n    for each sequence, on each strand, and follows Teeling et al. (2004)\n    in calculating a corresponding Z-score for each observed\n    tetranucleotide frequency, dependent on the mono-, di- and tri-\n    nucleotide frequencies for that input sequence..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static boolean overrides(Method a, Method b) { // See JLS section 8.4.8.1 int modifiers = b.getModifiers(); if (Modifier.isPublic(modifiers) || Modifier.isProtected(modifiers)) { return true; } if (Modifier.isPrivate(modifiers)) { return false; } // b must be package-private return a.getDeclaringClass().getPackage().equals(b.getDeclaringClass().getPackage()); }\n\n    ### Response:",
        "ground_truth": "Returns true if a overrides b. Assumes signatures of a and b are the same and a's declaring\nclass is a subclass of b's declaring class.",
        "predict": " Returns TETRA Z-score for the sequence in the passed file.\n\n    - filename - path to sequence file\n\n    Calculates mono-, di-, tri- and tetranucleotide frequencies\n    for each sequence, on each strand, and follows Teeling et al. (2004)\n    in calculating a corresponding Z-score for each observed\n    tetranucleotide frequency, dependent on the mono-, di- and tri-\n    nucleotide frequencies for that input sequence..\n\n    "
    },
    {
        "ID": 325,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function HeaderBlock(properties) { this.requiredFeatures = []; this.optionalFeatures = []; if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]; }\n\n    ### Response: Properties of a HeaderBlock.\n@memberof OSMPBF\n@interface IHeaderBlock\n@property {OSMPBF.IHeaderBBox|null} [bbox] HeaderBlock bbox\n@property {Array.|null} [requiredFeatures] HeaderBlock requiredFeatures\n@property {Array.|null} [optionalFeatures] HeaderBlock optionalFeatures\n@property {string|null} [writingprogram] HeaderBlock writingprogram\n@property {string|null} [source] HeaderBlock source\n@property {number|Long|null} [osmosisReplicationTimestamp] HeaderBlock osmosisReplicationTimestamp\n@property {number|Long|null} [osmosisReplicationSequenceNumber] HeaderBlock osmosisReplicationSequenceNumber\n@property {string|null} [osmosisReplicationBaseUrl] HeaderBlock osmosisReplicationBaseUrl\n \nConstructs a new HeaderBlock.\n@memberof OSMPBF\n@classdesc Represents a HeaderBlock.\n@implements IHeaderBlock\n@constructor\n@param {OSMPBF.IHeaderBlock=} [properties] Properties to set.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void initializeDelegate(MembersInjector<T> delegate) { checkState(this.delegate == null, \"delegate already initialized\"); this.delegate = checkNotNull(delegate, \"delegate\"); }\n\n    ### Response:",
        "ground_truth": "Sets the actual members injector.\n\n@throws IllegalStateException if the delegate is already set",
        "predict": " Properties of a HeaderBlock.\n@memberof OSMPBF\n@interface IHeaderBlock\n@property {OSMPBF.IHeaderBBox|null} [bbox] HeaderBlock bbox\n@property {Array.|null} [requiredFeatures] HeaderBlock requiredFeatures\n@property {Array.|null} [optionalFeatures] HeaderBlock optionalFeatures\n@property {string|null} [writingprogram] HeaderBlock writingprogram\n@property {string|null} [source] HeaderBlock source\n@property {number|Long|null} [osmosisReplicationTimestamp] HeaderBlock osmosisReplicationTimestamp\n@property {number|Long|null} [osmosisReplicationSequenceNumber] HeaderBlock osmosisReplicationSequenceNumber\n@property {string|null} [osmosisReplicationBaseUrl] HeaderBlock osmosisReplicationBaseUrl\n \nConstructs a new HeaderBlock.\n@memberof OSMPBF\n@classdesc Represents a HeaderBlock.\n@implements IHeaderBlock\n@constructor\n@param {OSMPBF.IHeaderBlock=} [properties] Properties to set.\n\n    "
    },
    {
        "ID": 326,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function detectConsoleEnvironment(Closure $callback, array $args) { if (! is_null($value = $this->getEnvironmentArgument($args))) { return head(array_slice(explode('=', $value), 1)); } return $this->detectWebEnvironment($callback); }\n\n    ### Response: Set the application environment for a command-line request.\n\n@param Closure $callback\n@param array   $args\n\n@return string.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SuppressWarnings(\"unchecked\") final TypeLiteral<Provider<T>> providerType() { // This cast is safe and wouldn't generate a warning if Type had a type // parameter. return (TypeLiteral<Provider<T>>) get(Types.providerOf(getType())); }\n\n    ### Response:",
        "ground_truth": "Gets the type of this type's provider.",
        "predict": " Set the application environment for a command-line request.\n\n@param Closure $callback\n@param array   $args\n\n@return string.\n\n    "
    },
    {
        "ID": 327,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (s *Ethereum) SetEtherbase(etherbase common.Address) { s.lock.Lock() s.etherbase = etherbase s.lock.Unlock() s.miner.SetEtherbase(etherbase) }\n\n    ### Response: // SetEtherbase sets the mining reward address..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private List<TypeLiteral<?>> resolveAll(Type[] types) { TypeLiteral<?>[] result = new TypeLiteral<?>[types.length]; for (int t = 0; t < types.length; t++) { result[t] = resolve(types[t]); } return ImmutableList.copyOf(result); }\n\n    ### Response:",
        "ground_truth": "Returns an immutable list of the resolved types.",
        "predict": " // SetEtherbase sets the mining reward address..\n\n    "
    },
    {
        "ID": 328,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def table(command, table, **kwargs): ''' Apply a command on the specified table. table: Name of the table. command: Command to apply to the table. Supported commands are: - add - delete - expire - flush - kill - replace - show - test - zero Please refer to the OpenBSD `pfctl(8) <https://man.openbsd.org/pfctl#T>`_ documentation for a detailed explanation of each command. CLI example: .. code-block:: bash salt '*' pf.table expire table=spam_hosts number=300 salt '*' pf.table add table=local_hosts addresses='[\"127.0.0.1\", \"::1\"]' ''' ret = {} all_commands = ['kill', 'flush', 'add', 'delete', 'expire', 'replace', 'show', 'test', 'zero'] if command not in all_commands: raise SaltInvocationError('Unknown table command: {0}'.format(command)) cmd = ['pfctl', '-t', table, '-T', command] if command in ['add', 'delete', 'replace', 'test']: cmd += kwargs.get('addresses', []) elif command == 'expire': number = kwargs.get('number', None) if not number: raise SaltInvocationError('need expire_number argument for expire command') else: cmd.append(number) result = __salt__['cmd.run_all'](cmd, output_level='trace', python_shell=False) if result['retcode'] == 0: if command == 'show': ret = {'comment': result['stdout'].split()} elif command == 'test': ret = {'comment': result['stderr'], 'matches': True} else: if re.match(r'^(0.*|no changes)', result['stderr']): ret['changes'] = False else: ret['changes'] = True ret['comment'] = result['stderr'] else: # 'test' returns a non-zero code if the address didn't match, even if # the command itself ran fine; also set 'matches' to False since not # everything matched. if command == 'test' and re.match(r'^\\d+/\\d+ addresses match.$', result['stderr']): ret = {'comment': result['stderr'], 'matches': False} else: raise CommandExecutionError( 'Could not apply {0} on table {1}'.format(command, table), info={'errors': [result['stderr']], 'changes': False} ) return ret\n\n    ### Response: Apply a command on the specified table.\n\n    table:\n        Name of the table.\n\n    command:\n        Command to apply to the table. Supported commands are:\n\n        - add\n        - delete\n        - expire\n        - flush\n        - kill\n        - replace\n        - show\n        - test\n        - zero\n\n        Please refer to the OpenBSD `pfctl(8) `_\n        documentation for a detailed explanation of each command.\n\n    CLI example:\n\n    .. code-block:: bash\n\n        salt '*' pf.table expire table=spam_hosts number=300\n        salt '*' pf.table add table=local_hosts addresses='[\"127.0.0.1\", \"::1\"]'.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static <T> TypeLiteral<T> canonicalizeForKey(TypeLiteral<T> typeLiteral) { Type type = typeLiteral.getType(); if (!isFullySpecified(type)) { Errors errors = new Errors().keyNotFullySpecified(typeLiteral); throw new ConfigurationException(errors.getMessages()); } if (typeLiteral.getRawType() == javax.inject.Provider.class) { ParameterizedType parameterizedType = (ParameterizedType) type; // the following casts are generally unsafe, but com.google.inject.Provider extends // javax.inject.Provider and is covariant @SuppressWarnings(\"unchecked\") TypeLiteral<T> guiceProviderType = (TypeLiteral<T>) TypeLiteral.get(Types.providerOf(parameterizedType.getActualTypeArguments()[0])); return guiceProviderType; } @SuppressWarnings(\"unchecked\") TypeLiteral<T> wrappedPrimitives = (TypeLiteral<T>) PRIMITIVE_TO_WRAPPER.get(typeLiteral); if (wrappedPrimitives != null) { return wrappedPrimitives; } // If we know this isn't a subclass, return as-is. if (typeLiteral.getClass() == TypeLiteral.class) { return typeLiteral; } // recreate the TypeLiteral to avoid anonymous TypeLiterals from holding refs to their // surrounding classes. @SuppressWarnings(\"unchecked\") TypeLiteral<T> recreated = (TypeLiteral<T>) TypeLiteral.get(typeLiteral.getType()); return recreated; }\n\n    ### Response:",
        "ground_truth": "Returns an type that's appropriate for use in a key.\n\nIf the raw type of {@code typeLiteral} is a {@code javax.inject.Provider}, this returns a\n{@code com.google.inject.Provider} with the same type parameters.\n\nIf the type is a primitive, the corresponding wrapper type will be returned.\n\n@throws ConfigurationException if {@code type} contains a type variable",
        "predict": " Apply a command on the specified table.\n\n    table:\n        Name of the table.\n\n    command:\n        Command to apply to the table. Supported commands are:\n\n        - add\n        - delete\n        - expire\n        - flush\n        - kill\n        - replace\n        - show\n        - test\n        - zero\n\n        Please refer to the OpenBSD `pfctl(8) `_\n        documentation for a detailed explanation of each command.\n\n    CLI example:\n\n    .. code-block:: bash\n\n        salt '*' pf.table expire table=spam_hosts number=300\n        salt '*' pf.table add table=local_hosts addresses='[\"127.0.0.1\", \"::1\"]'.\n\n    "
    },
    {
        "ID": 329,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function(file, done){ process.nextTick(function () { terra.render(file, function(error, body){ if(error){ done(error); }else{ if(body){ var dest = path.resolve(outputPath, ssr.helpers.outputPath(file)); fs.mkdirp(path.dirname(dest), function(err){ fs.writeFile(dest, body, done); }); }else{ done(); } } }); }); }\n\n    ### Response: Compile and save file.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    static void prepareBuiltInConverters(InjectorImpl injector) { // Configure type converters. convertToPrimitiveType(injector, int.class, Integer.class); convertToPrimitiveType(injector, long.class, Long.class); convertToPrimitiveType(injector, boolean.class, Boolean.class); convertToPrimitiveType(injector, byte.class, Byte.class); convertToPrimitiveType(injector, short.class, Short.class); convertToPrimitiveType(injector, float.class, Float.class); convertToPrimitiveType(injector, double.class, Double.class); convertToClass( injector, Character.class, new TypeConverter() { @Override public Object convert(String value, TypeLiteral<?> toType) { value = value.trim(); if (value.length() != 1) { throw new RuntimeException(\"Length != 1.\"); } return value.charAt(0); } @Override public String toString() { return \"TypeConverter<Character>\"; } }); convertToClasses( injector, Matchers.subclassesOf(Enum.class), new TypeConverter() { @Override @SuppressWarnings(\"unchecked\") public Object convert(String value, TypeLiteral<?> toType) { return Enum.valueOf((Class) toType.getRawType(), value); } @Override public String toString() { return \"TypeConverter<E extends Enum<E>>\"; } }); internalConvertToTypes( injector, new AbstractMatcher<TypeLiteral<?>>() { @Override public boolean matches(TypeLiteral<?> typeLiteral) { return typeLiteral.getRawType() == Class.class; } @Override public String toString() { return \"Class<?>\"; } }, new TypeConverter() { @Override @SuppressWarnings(\"unchecked\") public Object convert(String value, TypeLiteral<?> toType) { try { return Class.forName(value); } catch (ClassNotFoundException e) { throw new RuntimeException(e.getMessage()); } } @Override public String toString() { return \"TypeConverter<Class<?>>\"; } }); }\n\n    ### Response:",
        "ground_truth": "Installs default converters for primitives, enums, and class literals.",
        "predict": " Compile and save file.\n\n    "
    },
    {
        "ID": 330,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (b *Remote) Colorize() Colorer { if b.CLIColor != nil && !b.CLIColor.Disable { return b.CLIColor } if b.CLIColor != nil { return &Colorize{cliColor: b.CLIColor} } return &Colorize{cliColor: &colorstring.Colorize{ Colors: colorstring.DefaultColors, Disable: true, }} }\n\n    ### Response: // Colorize returns the Colorize structure that can be used for colorizing\n// output. This is guaranteed to always return a non-nil value and so is useful\n// as a helper to wrap any potentially colored strings..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static ClassLoader canonicalize(ClassLoader classLoader) { return classLoader != null ? classLoader : SystemBridgeHolder.SYSTEM_BRIDGE.getParent(); }\n\n    ### Response:",
        "ground_truth": "Attempts to canonicalize null references to the system class loader. May return null if for\nsome reason the system loader is unavailable.",
        "predict": " // Colorize returns the Colorize structure that can be used for colorizing\n// output. This is guaranteed to always return a non-nil value and so is useful\n// as a helper to wrap any potentially colored strings..\n\n    "
    },
    {
        "ID": 331,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (sm *StateMachine) State(name string) *State { state := &State{Name: name} sm.states[name] = state return state }\n\n    ### Response: // State define a state.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static boolean hasSameVersionOfCglib(ClassLoader classLoader) { Class<?> fc = net.sf.cglib.reflect.FastClass.class; try { return classLoader.loadClass(fc.getName()) == fc; } catch (ClassNotFoundException e) { return false; } }\n\n    ### Response:",
        "ground_truth": "Returns true if the types classloader has the same version of cglib that BytecodeGen has. This\nonly returns false in strange OSGI situations, but it prevents us from using FastClass for non\npublic members.",
        "predict": " // State define a state.\n\n    "
    },
    {
        "ID": 332,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func UpdateBlockNextByHash(db SqlExecutor, this, next string) error { res, err := db.Exec(internal.UpdateBlockNextByHash, this, next) if err != nil { return err } numRows, err := res.RowsAffected() if err != nil { return err } if numRows != 1 { return fmt.Errorf(\"%s (%d)\", notOneRowErrMsg, numRows) } return nil }\n\n    ### Response: // UpdateBlockNextByHash sets the next block's hash for the block in the\n// block_chain table specified by hash..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static boolean isPubliclyCallable(Member member) { if (!Modifier.isPublic(member.getModifiers())) { return false; } Class<?>[] parameterTypes; if (member instanceof Constructor) { parameterTypes = ((Constructor) member).getParameterTypes(); } else { Method method = (Method) member; if (!Modifier.isPublic(method.getReturnType().getModifiers())) { return false; } parameterTypes = method.getParameterTypes(); } for (Class<?> type : parameterTypes) { if (!Modifier.isPublic(type.getModifiers())) { return false; } } return true; }\n\n    ### Response:",
        "ground_truth": "Returns true if the member can be called by a fast class generated in a different classloader.",
        "predict": " // UpdateBlockNextByHash sets the next block's hash for the block in the\n// block_chain table specified by hash..\n\n    "
    },
    {
        "ID": 333,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function query($type = 'object') { $sql = 'select '.$this->columns.' from '.$this->getTables($this->tables).' '.$this->where.' '.$this->order.' '.$this->group; static::$sql = static::$register[] = $sql; // if ($data = Database::read($sql)) { return self::fetch($data, $type); } elseif (Database::execerr()) { throw new QueryException(); } }\n\n    ### Response: get arraay of data.\n\n@param string\n\n@return array.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Key<?> fixAnnotations(Key<?> key) { return key.getAnnotation() == null ? key : Key.get(key.getTypeLiteral(), key.getAnnotation().annotationType()); }\n\n    ### Response:",
        "ground_truth": "Replace annotation instances with annotation types, this is only appropriate for testing if a\nkey is bound and not for injecting.\n\n",
        "predict": " get arraay of data.\n\n@param string\n\n@return array.\n\n    "
    },
    {
        "ID": 334,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void getEncryptedAppBuffer(int requested_size) throws IOException { final int size = Math.max(getConnLink().getPacketBufferSize(), requested_size); synchronized (closeSync) { if (closeCalled) { IOException up = new IOException(\"Operation failed due to connection close detected\"); throw up; } if (null != this.encryptedAppBuffer) { if (size <= this.encryptedAppBuffer.capacity()) { // current buffer exists and is big enough this.encryptedAppBuffer.clear(); return; } // exists but is too small this.encryptedAppBuffer.release(); this.encryptedAppBuffer = null; } if (TraceComponent.isAnyTracingEnabled() && tc.isEventEnabled()) { Tr.event(tc, \"Allocating encryptedAppBuffer, size=\" + size); } // Allocate the encrypted data buffer this.encryptedAppBuffer = SSLUtils.allocateByteBuffer( size, getConfig().getEncryptBuffersDirect()); } }\n\n    ### Response: Make sure that an output buffer is ready for encryption use. This will always\nallocate a minimum of the current SSLSession packet size.\n\n@param requested_size.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    <T> Initializable<T> requestInjection( InjectorImpl injector, T instance, Binding<T> binding, Object source, Set<InjectionPoint> injectionPoints) { checkNotNull(source); Preconditions.checkState( !validationStarted, \"Member injection could not be requested after validation is started\"); ProvisionListenerStackCallback<T> provisionCallback = binding == null ? null : injector.provisionListenerStore.get(binding); // short circuit if the object has no injections or listeners. if (instance == null || (injectionPoints.isEmpty() && !injector.membersInjectorStore.hasTypeListeners() && provisionCallback == null)) { return Initializables.of(instance); } if (initializablesCache.containsKey(instance)) { @SuppressWarnings(\"unchecked\") // Map from T to InjectableReference<T> Initializable<T> cached = (Initializable<T>) initializablesCache.get(instance); return cached; } InjectableReference<T> injectableReference = new InjectableReference<T>( injector, instance, binding == null ? null : binding.getKey(), provisionCallback, source, cycleDetectingLockFactory.create(instance.getClass())); initializablesCache.put(instance, injectableReference); pendingInjections.add(injectableReference); return injectableReference; }\n\n    ### Response:",
        "ground_truth": "Registers an instance for member injection when that step is performed.\n\n@param instance an instance that optionally has members to be injected (each annotated\nwith @Inject).\n@param binding the binding that caused this initializable to be created, if it exists.\n@param source the source location that this injection was requested",
        "predict": " Make sure that an output buffer is ready for encryption use. This will always\nallocate a minimum of the current SSLSession packet size.\n\n@param requested_size.\n\n    "
    },
    {
        "ID": 335,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def count_genomic_region_plot(self): \"\"\" Generate the SnpEff Counts by Genomic Region plot \"\"\" # Sort the keys based on the total counts keys = self.snpeff_section_totals['# Count by genomic region'] sorted_keys = sorted(keys, reverse=True, key=keys.get) # Make nicer label names pkeys = OrderedDict() for k in sorted_keys: pkeys[k] = {'name': k.replace('_', ' ').title().replace('Utr', 'UTR') } # Config for the plot pconfig = { 'id': 'snpeff_variant_effects_region', 'title': 'SnpEff: Counts by Genomic Region', 'ylab': '# Reads', 'logswitch': True } return bargraph.plot(self.snpeff_data, pkeys, pconfig)\n\n    ### Response: Generate the SnpEff Counts by Genomic Region plot.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    void validateOustandingInjections(Errors errors) { validationStarted = true; initializablesCache.clear(); for (InjectableReference<?> reference : pendingInjections) { try { reference.validate(errors); } catch (ErrorsException e) { errors.merge(e.getErrors()); } } }\n\n    ### Response:",
        "ground_truth": "Prepares member injectors for all injected instances. This prompts Guice to do static analysis\non the injected instances.",
        "predict": " Generate the SnpEff Counts by Genomic Region plot.\n\n    "
    },
    {
        "ID": 336,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def wait_for_repo_creation(task_id, retry=30): \"\"\" Using polling check if the task finished \"\"\" success_event_types = (\"RC_CREATION_SUCCESS\", ) error_event_types = (\"RC_REPO_CREATION_ERROR\", \"RC_REPO_CLONE_ERROR\", \"RC_CREATION_ERROR\") while retry > 0: bpm_task = get_bpm_task_by_id(task_id) if contains_event_type(bpm_task.content.events, success_event_types): break if contains_event_type(bpm_task.content.events, error_event_types): logging.error(\"Creation of Repository Configuration failed\") logging.error(bpm_task.content) return False logging.info(\"Waiting until Repository Configuration creation task \"+str(task_id)+\" finishes.\") time.sleep(10) retry -= 1 return retry > 0\n\n    ### Response: Using polling check if the task finished.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public T newInstance(Object[] args) throws Throwable { constructor.setAccessible(true); try { return constructor.newInstance(args); } catch (InvocationTargetException e) { throw e.getCause(); } }\n\n    ### Response:",
        "ground_truth": "Returns an instance of T, constructed using this constructor, with the supplied arguments.",
        "predict": " Using polling check if the task finished.\n\n    "
    },
    {
        "ID": 337,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static function parseParameters(array $parametersArray): ParameterCollectionInterface { $parameters = new ParameterCollection(); foreach ($parametersArray as $parameterName => $parameterValue) { $parameters->set( strval($parameterName), strval(is_array($parameterValue) ? $parameterValue[0] : $parameterValue) ); } return $parameters; }\n\n    ### Response: Parses an array with parameters into a parameter collection.\n\n@param array $parametersArray The parameters array.\n\n@return ParameterCollectionInterface The parameter collection..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SuppressWarnings({\"JavaDoc\", \"deprecation\"}) private ServletRequest withDispatcher( ServletRequest servletRequest, final ManagedServletPipeline servletPipeline) { // don't wrap the request if there are no servlets mapped. This prevents us from inserting our // wrapper unless it's actually going to be used. This is necessary for compatibility for apps // that downcast their HttpServletRequests to a concrete implementation. if (!servletPipeline.hasServletsMapped()) { return servletRequest; } HttpServletRequest request = (HttpServletRequest) servletRequest; //noinspection OverlyComplexAnonymousInnerClass return new HttpServletRequestWrapper(request) { @Override public RequestDispatcher getRequestDispatcher(String path) { final RequestDispatcher dispatcher = servletPipeline.getRequestDispatcher(path); return (null != dispatcher) ? dispatcher : super.getRequestDispatcher(path); } }; }\n\n    ### Response:",
        "ground_truth": "Used to create an proxy that dispatches either to the guice-servlet pipeline or the regular\npipeline based on uri-path match. This proxy also provides minimal forwarding support.\n\nWe cannot forward from a web.xml Servlet/JSP to a guice-servlet (because the filter pipeline\nis not called again). However, we can wrap requests with our own dispatcher to forward the\n*other* way. web.xml Servlets/JSPs can forward to themselves as per normal.\n\nThis is not a problem cuz we intend for people to migrate from web.xml to guice-servlet,\nincrementally, but not the other way around (which, we should actively discourage).",
        "predict": " Parses an array with parameters into a parameter collection.\n\n@param array $parametersArray The parameters array.\n\n@return ParameterCollectionInterface The parameter collection..\n\n    "
    },
    {
        "ID": 338,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static function fromString(string $string): self { $string = new Str($string); $pattern = sprintf( '~%s/[\\w\\-.]+(\\+\\w+)?([;,] [\\w\\-.]+=[\\w\\-.]+)?~', self::topLevels()->join('|') ); if (!$string->matches($pattern)) { throw new InvalidMediaTypeString; } $splits = $string->pregSplit('~[;,] ?~'); $matches = $splits ->get(0) ->capture(sprintf( '~^(?<topLevel>%s)/(?<subType>[\\w\\-.]+)(\\+(?<suffix>\\w+))?$~', self::topLevels()->join('|') )); $topLevel = $matches->get('topLevel'); $subType = $matches->get('subType'); $suffix = $matches->contains('suffix') ? $matches->get('suffix') : ''; $params = new Map('string', Parameter::class); $splits ->drop(1) ->foreach(function(Str $param) use (&$params) { $matches = $param->capture( '~^(?<key>[\\w\\-.]+)=(?<value>[\\w\\-.]+)$~' ); $params = $params->put( (string) $matches->get('key'), new Parameter\\Parameter( (string) $matches->get('key'), (string) $matches->get('value') ) ); }); return new self( (string) $topLevel, (string) $subType, (string) $suffix, $params ); }\n\n    ### Response: Build an object out of a string\n\n@param string $string\n\n@return self.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    static <T> InternalFactory<? extends T> scope( Key<T> key, InjectorImpl injector, InternalFactory<? extends T> creator, Object source, Scoping scoping) { if (scoping.isNoScope()) { return creator; } Scope scope = scoping.getScopeInstance(); // NOTE: SingletonScope relies on the fact that we are passing a // ProviderToInternalFactoryAdapter here. If you change the type make sure to update // SingletonScope as well. Provider<T> scoped = scope.scope(key, new ProviderToInternalFactoryAdapter<T>(injector, creator)); return new InternalFactoryToProviderAdapter<T>(scoped, source); }\n\n    ### Response:",
        "ground_truth": "Scopes an internal factory.",
        "predict": " Build an object out of a string\n\n@param string $string\n\n@return self.\n\n    "
    },
    {
        "ID": 339,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function includes() { $moduleInclude = (array) $this->def('include'); $globalInclude = $this->app['config']->get('module::include'); $specificInclude = array($this->name.'.php'); $include = array_merge($moduleInclude, $specificInclude, $globalInclude); foreach ($include as $file) { $path = $this->path.'/'.$file; if ($this->app['files']->exists($path)) require $path; } }\n\n    ### Response: Include some files determined in config.php of CheeModule and module.json of modules.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    static Scoping makeInjectable(Scoping scoping, InjectorImpl injector, Errors errors) { Class<? extends Annotation> scopeAnnotation = scoping.getScopeAnnotation(); if (scopeAnnotation == null) { return scoping; } ScopeBinding scope = injector.state.getScopeBinding(scopeAnnotation); if (scope != null) { return forInstance(scope.getScope()); } errors.scopeNotFound(scopeAnnotation); return UNSCOPED; }\n\n    ### Response:",
        "ground_truth": "Replaces annotation scopes with instance scopes using the Injector's annotation-to-instance\nmap. If the scope annotation has no corresponding instance, an error will be added and unscoped\nwill be retuned.",
        "predict": " Include some files determined in config.php of CheeModule and module.json of modules.\n\n    "
    },
    {
        "ID": 340,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function Mempool(options) { if (!(this instanceof Mempool)) return new Mempool(options); AsyncObject.call(this); this.options = new MempoolOptions(options); this.network = this.options.network; this.logger = this.options.logger.context('mempool'); this.workers = this.options.workers; this.chain = this.options.chain; this.fees = this.options.fees; this.locker = this.chain.locker; this.cache = new MempoolCache(this.options); this.size = 0; this.freeCount = 0; this.lastTime = 0; this.lastFlush = 0; this.tip = this.network.genesis.hash; this.waiting = new Map(); this.orphans = new Map(); this.map = new Map(); this.spents = new Map(); this.rejects = new RollingFilter(120000, 0.000001); this.coinIndex = new CoinIndex(); this.txIndex = new TXIndex(); }\n\n    ### Response: Represents a mempool.\n@alias module:mempool.Mempool\n@constructor\n@param {Object} options\n@param {String?} options.name - Database name.\n@param {String?} options.location - Database file location.\n@param {String?} options.db - Database backend (`\"memory\"` by default).\n@param {Boolean?} options.limitFree\n@param {Number?} options.limitFreeRelay\n@param {Number?} options.maxSize - Max pool size (default ~300mb).\n@param {Boolean?} options.relayPriority\n@param {Boolean?} options.requireStandard\n@param {Boolean?} options.rejectAbsurdFees\n@param {Boolean?} options.relay\n@property {Boolean} loaded\n@property {Object} db\n@property {Number} size\n@property {Lock} locker\n@property {Number} freeCount\n@property {Number} lastTime\n@property {Number} maxSize\n@property {Rate} minRelayFee\n@emits Mempool#open\n@emits Mempool#error\n@emits Mempool#tx\n@emits Mempool#add tx\n@emits Mempool#remove tx.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    static String normalizePath(String path) { StringBuilder sb = new StringBuilder(path.length()); int queryStart = path.indexOf('?'); String query = null; if (queryStart != -1) { query = path.substring(queryStart); path = path.substring(0, queryStart); } // Normalize the path. we need to decode path segments, normalize and rejoin in order to // 1. decode and normalize safe percent escaped characters. e.g. %70 -> 'p' // 2. decode and interpret dangerous character sequences. e.g. /%2E/ -> '/./' -> '/' // 3. preserve dangerous encoded characters. e.g. '/%2F/' -> '///' -> '/%2F' List<String> segments = new ArrayList<>(); for (String segment : SLASH_SPLITTER.split(path)) { // This decodes all non-special characters from the path segment. so if someone passes // /%2E/foo we will normalize it to /./foo and then /foo String normalized = UrlEscapers.urlPathSegmentEscaper().escape(lenientDecode(segment, UTF_8, false)); if (\".\".equals(normalized)) { // skip } else if (\"..\".equals(normalized)) { if (segments.size() > 1) { segments.remove(segments.size() - 1); } } else { segments.add(normalized); } } SLASH_JOINER.appendTo(sb, segments); if (query != null) { sb.append(query); } return sb.toString(); }\n\n    ### Response:",
        "ground_truth": "Normalizes a path by unescaping all safe, percent encoded characters.",
        "predict": " Represents a mempool.\n@alias module:mempool.Mempool\n@constructor\n@param {Object} options\n@param {String?} options.name - Database name.\n@param {String?} options.location - Database file location.\n@param {String?} options.db - Database backend (`\"memory\"` by default).\n@param {Boolean?} options.limitFree\n@param {Number?} options.limitFreeRelay\n@param {Number?} options.maxSize - Max pool size (default ~300mb).\n@param {Boolean?} options.relayPriority\n@param {Boolean?} options.requireStandard\n@param {Boolean?} options.rejectAbsurdFees\n@param {Boolean?} options.relay\n@property {Boolean} loaded\n@property {Object} db\n@property {Number} size\n@property {Lock} locker\n@property {Number} freeCount\n@property {Number} lastTime\n@property {Number} maxSize\n@property {Rate} minRelayFee\n@emits Mempool#open\n@emits Mempool#error\n@emits Mempool#tx\n@emits Mempool#add tx\n@emits Mempool#remove tx.\n\n    "
    },
    {
        "ID": 341,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void deactivateEndpoints(Set<MessageEndpointFactoryImpl> mefs) { for (MessageEndpointFactoryImpl mef : mefs) { if (mef.runtimeActivated) { deactivateEndpointInternal(mef); } } }\n\n    ### Response: Deactivates a set of endpoints if they have been activated.\n\n@see #activateEndpoint.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static <T extends Annotation> T generateAnnotation(Class<T> annotationType) { Preconditions.checkState( isAllDefaultMethods(annotationType), \"%s is not all default methods\", annotationType); return (T) cache.getUnchecked(annotationType); }\n\n    ### Response:",
        "ground_truth": "Generates an Annotation for the annotation class. Requires that the annotation is all\noptionals.",
        "predict": " Deactivates a set of endpoints if they have been activated.\n\n@see #activateEndpoint.\n\n    "
    },
    {
        "ID": 342,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def errno_from_exception(self, ex): \"\"\" Get the error number from an exception \"\"\" if hasattr(ex, 'errno'): return ex.errno elif ex.args: return ex.args[0] else: return None\n\n    ### Response: Get the error number from an exception.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static boolean isRetainedAtRuntime(Class<? extends Annotation> annotationType) { Retention retention = annotationType.getAnnotation(Retention.class); return retention != null && retention.value() == RetentionPolicy.RUNTIME; }\n\n    ### Response:",
        "ground_truth": "Returns true if the given annotation is retained at runtime.",
        "predict": " Get the error number from an exception.\n\n    "
    },
    {
        "ID": 343,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func DumpFunction(fun ZlispFunction, pc int) { blank := \" \" extra := blank for i, instr := range fun { if i == pc { extra = \" PC-> \" } else { extra = blank } fmt.Printf(\"%s %d: %s\\n\", extra, i, instr.InstrString()) } if pc == len(fun) { fmt.Printf(\" PC just past end at %d -----\\n\\n\", pc) } }\n\n    ### Response: // if pc is -1, don't show it..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Class<? extends Annotation> findScopeAnnotation( Errors errors, Annotation[] annotations) { Class<? extends Annotation> found = null; for (Annotation annotation : annotations) { Class<? extends Annotation> annotationType = annotation.annotationType(); if (isScopeAnnotation(annotationType)) { if (found != null) { errors.duplicateScopeAnnotations(found, annotationType); } else { found = annotationType; } } } return found; }\n\n    ### Response:",
        "ground_truth": "Returns the scoping annotation, or null if there isn't one.",
        "predict": " // if pc is -1, don't show it..\n\n    "
    },
    {
        "ID": 344,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function UpdateTagsWithLinks() { $tags = $this->UpdateTags(); $processed = ArrayList::create(); foreach ($tags as $tag) { // Build the link - keep the tag, and date range, but reset month, year and pagination. $link = HTTP::setGetVar('tag', $tag->ID, null, '&'); $link = HTTP::setGetVar('month', null, $link, '&'); $link = HTTP::setGetVar('year', null, $link, '&'); $link = HTTP::setGetVar('start', null, $link, '&'); $tag->Link = $link; $processed->push($tag); } return $processed; }\n\n    ### Response: List tags and attach links..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Key<?> getKey( TypeLiteral<?> type, Member member, Annotation[] annotations, Errors errors) throws ErrorsException { int numErrorsBefore = errors.size(); Annotation found = findBindingAnnotation(errors, member, annotations); errors.throwIfNewErrors(numErrorsBefore); return found == null ? Key.get(type) : Key.get(type, found); }\n\n    ### Response:",
        "ground_truth": "Gets a key for the given type, member and annotations.",
        "predict": " List tags and attach links..\n\n    "
    },
    {
        "ID": 345,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def isfib(number): \"\"\" Check if a number is in the Fibonacci sequence. :type number: integer :param number: Number to check \"\"\" num1 = 1 num2 = 1 while True: if num2 < number: tempnum = num2 num2 += num1 num1 = tempnum elif num2 == number: return True else: return False\n\n    ### Response: Check if a number is in the Fibonacci sequence.\n\n    :type number: integer\n    :param number: Number to check.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String nameOf(Key<?> key) { Annotation annotation = key.getAnnotation(); Class<? extends Annotation> annotationType = key.getAnnotationType(); if (annotation != null && !isMarker(annotationType)) { return key.getAnnotation().toString(); } else if (key.getAnnotationType() != null) { return \"@\" + key.getAnnotationType().getName(); } else { return \"\"; } }\n\n    ### Response:",
        "ground_truth": "Returns the name the binding should use. This is based on the annotation. If the annotation has\nan instance and is not a marker annotation, we ask the annotation for its toString. If it was a\nmarker annotation or just an annotation type, we use the annotation's name. Otherwise, the name\nis the empty string.",
        "predict": " Check if a number is in the Fibonacci sequence.\n\n    :type number: integer\n    :param number: Number to check.\n\n    "
    },
    {
        "ID": 346,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (s *Stepper) Out(p []byte) *Stepper { next := Out(p) next.previous = s return next }\n\n    ### Response: // Out extends the stepper to follow out-bound edges with the given property..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void initializeDelegate(Provider<T> delegate) { checkState(this.delegate == null, \"delegate already initialized\"); this.delegate = checkNotNull(delegate, \"delegate\"); }\n\n    ### Response:",
        "ground_truth": "Sets the actual provider.\n\n@throws IllegalStateException if the delegate is already set",
        "predict": " // Out extends the stepper to follow out-bound edges with the given property..\n\n    "
    },
    {
        "ID": 347,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public final GitLabApi duplicate() { Integer sudoUserId = this.getSudoAsId(); GitLabApi gitLabApi = new GitLabApi(apiVersion, gitLabServerUrl, getTokenType(), getAuthToken(), getSecretToken(), clientConfigProperties); if (sudoUserId != null) { gitLabApi.apiClient.setSudoAsId(sudoUserId); } if (getIgnoreCertificateErrors()) { gitLabApi.setIgnoreCertificateErrors(true); } gitLabApi.defaultPerPage = this.defaultPerPage; return (gitLabApi); }\n\n    ### Response: Create a new GitLabApi instance that is logically a duplicate of this instance, with the exception off sudo state.\n\n@return a new GitLabApi instance that is logically a duplicate of this instance, with the exception off sudo state..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void addDirectTypeBinding(Binder binder) { binder .bind(bindingSelection.getDirectKey()) .toProvider(new RealDirectTypeProvider<T>(bindingSelection)); }\n\n    ### Response:",
        "ground_truth": "Adds a binding for T. Multiple calls to this are safe, and will be collapsed as duplicate\nbindings.",
        "predict": " Create a new GitLabApi instance that is logically a duplicate of this instance, with the exception off sudo state.\n\n@return a new GitLabApi instance that is logically a duplicate of this instance, with the exception off sudo state..\n\n    "
    },
    {
        "ID": 348,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (s *ConfirmDeviceInput) SetDeviceSecretVerifierConfig(v *DeviceSecretVerifierConfigType) *ConfirmDeviceInput { s.DeviceSecretVerifierConfig = v return s }\n\n    ### Response: // SetDeviceSecretVerifierConfig sets the DeviceSecretVerifierConfig field's value..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public ConstructorInjector<?> get(InjectionPoint constructorInjector, Errors errors) throws ErrorsException { return cache.get(constructorInjector, errors); }\n\n    ### Response:",
        "ground_truth": "Returns a new complete constructor injector with injection listeners registered.",
        "predict": " // SetDeviceSecretVerifierConfig sets the DeviceSecretVerifierConfig field's value..\n\n    "
    },
    {
        "ID": 349,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def __parse_identities(self, aliases, email_to_employer): \"\"\"Parse Gitdm identities\"\"\" # Parse streams self.__parse_aliases_stream(aliases) self.__parse_email_to_employer_stream(email_to_employer) # Create unique identities from aliases list for alias, email in self.__raw_aliases.items(): uid = self._identities.get(email, None) if not uid: uid = UniqueIdentity(uuid=email) e = re.match(self.EMAIL_ADDRESS_REGEX, email, re.UNICODE) if e: identity = Identity(email=email, source=self.source) else: identity = Identity(username=email, source=self.source) uid.identities.append(identity) self._identities[email] = uid e = re.match(self.EMAIL_ADDRESS_REGEX, alias, re.UNICODE) if e: identity = Identity(email=alias, source=self.source) else: identity = Identity(username=alias, source=self.source) uid.identities.append(identity) # Create unique identities from enrollments list for email in self.__raw_identities: # Do we have it from aliases? if email in self._identities: uid = self._identities[email] elif email in self.__raw_aliases: canonical = self.__raw_aliases[email] uid = self._identities[canonical] else: uid = UniqueIdentity(uuid=email) identity = Identity(email=email, source=self.source) uid.identities.append(identity) self._identities[email] = uid # Assign enrollments enrs = self.__raw_identities[email] enrs.sort(key=lambda r: r[1]) start_date = MIN_PERIOD_DATE for rol in enrs: name = rol[0] org = self._organizations.get(name, None) if not org: org = Organization(name=name) self._organizations[name] = org end_date = rol[1] enrollment = Enrollment(start=start_date, end=end_date, organization=org) uid.enrollments.append(enrollment) if end_date != MAX_PERIOD_DATE: start_date = end_date\n\n    ### Response: Parse Gitdm identities.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static boolean hasScope(Class<? extends Interceptor> interceptorClass) { for (Annotation annotation : interceptorClass.getAnnotations()) { if (Annotations.isScopeAnnotation(annotation.annotationType())) { return true; } } return false; }\n\n    ### Response:",
        "ground_truth": "Returns true if the given class has a scope annotation.",
        "predict": " Parse Gitdm identities.\n\n    "
    },
    {
        "ID": 350,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private function getRememberMeCookie(Request $req) { $encoded = $req->cookies($this->rememberMeCookieName()); if (!$encoded) { return false; } return RememberMeCookie::decode($encoded); }\n\n    ### Response: Gets the decoded remember me cookie from the request.\n\n@param Request $req\n\n@return RememberMeCookie|false.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    static <K, V> RealMapBinder<K, V> newRealMapBinder( Binder binder, TypeLiteral<K> keyType, Key<V> valueTypeAndAnnotation) { binder = binder.skipSources(RealMapBinder.class); TypeLiteral<V> valueType = valueTypeAndAnnotation.getTypeLiteral(); return newRealMapBinder( binder, keyType, valueType, valueTypeAndAnnotation.ofType(mapOf(keyType, valueType)), RealMultibinder.newRealSetBinder( binder, valueTypeAndAnnotation.ofType(entryOfProviderOf(keyType, valueType)))); }\n\n    ### Response:",
        "ground_truth": "since it's an easy way to group a type and an optional annotation type or instance.",
        "predict": " Gets the decoded remember me cookie from the request.\n\n@param Request $req\n\n@return RememberMeCookie|false.\n\n    "
    },
    {
        "ID": 351,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _get_event_status(self, message): \"\"\" Retrieves the boolean status of an LRR message. :param message: LRR message object :type message: :py:class:`~alarmdecoder.messages.LRRMessage` :returns: Boolean indicating whether the event was triggered or restored. \"\"\" status = None if message.event_status == LRR_EVENT_STATUS.TRIGGER: status = True elif message.event_status == LRR_EVENT_STATUS.RESTORE: status = False return status\n\n    ### Response: Retrieves the boolean status of an LRR message.\n\n        :param message: LRR message object\n        :type message: :py:class:`~alarmdecoder.messages.LRRMessage`\n\n        :returns: Boolean indicating whether the event was triggered or restored..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    Key<V> getKeyForNewValue(K key) { checkNotNull(key, \"key\"); checkConfiguration(!bindingSelection.isInitialized(), \"MapBinder was already initialized\"); RealMultibinder<Map.Entry<K, Provider<V>>> entrySetBinder = bindingSelection.getEntrySetBinder(); Key<V> valueKey = Key.get( bindingSelection.getValueType(), new RealElement( entrySetBinder.getSetName(), MAPBINDER, bindingSelection.getKeyType().toString())); entrySetBinder.addBinding().toProvider(new ProviderMapEntry<K, V>(key, valueKey)); return valueKey; }\n\n    ### Response:",
        "ground_truth": "Adds a binding to the map for the given key.",
        "predict": " Retrieves the boolean status of an LRR message.\n\n        :param message: LRR message object\n        :type message: :py:class:`~alarmdecoder.messages.LRRMessage`\n\n        :returns: Boolean indicating whether the event was triggered or restored..\n\n    "
    },
    {
        "ID": 352,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function getEncryptionEnabledFields(\\ReflectionClass $reflectionClass) { $encryptionEnabledFields = array(); $classMetadata = $this->getEncryptionMetadataFor($reflectionClass->getName()); if ($classMetadata->encryptionEnabled) { /** @var PropertyMetadata $propertyMetadata */ foreach ($classMetadata->propertyMetadata as $propertyMetadata) { if ($propertyMetadata->encrypted) { $reflectionProperty = $reflectionClass->getProperty($propertyMetadata->name); $encryptionEnabledFields[$reflectionProperty->name] = $reflectionProperty; } } } return $encryptionEnabledFields; }\n\n    ### Response: Checks the fields of the entity and returns a list of those with encryption enabled\n\n@param \\ReflectionClass $reflectionClass\n\n@return array.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private T provision(InternalContext context, ConstructionContext<T> constructionContext) throws InternalProvisionException { try { T t; try { Object[] parameters = SingleParameterInjector.getAll(context, parameterInjectors); t = constructionProxy.newInstance(parameters); constructionContext.setProxyDelegates(t); } finally { constructionContext.finishConstruction(); } // Store reference. If an injector re-enters this factory, they'll get the same reference. constructionContext.setCurrentReference(t); MembersInjectorImpl<T> localMembersInjector = membersInjector; localMembersInjector.injectMembers(t, context, false); localMembersInjector.notifyListeners(t); return t; } catch (InvocationTargetException userException) { Throwable cause = userException.getCause() != null ? userException.getCause() : userException; throw InternalProvisionException.errorInjectingConstructor(cause) .addSource(constructionProxy.getInjectionPoint()); } finally { constructionContext.removeCurrentReference(); } }\n\n    ### Response:",
        "ground_truth": "Provisions a new T.",
        "predict": " Checks the fields of the entity and returns a list of those with encryption enabled\n\n@param \\ReflectionClass $reflectionClass\n\n@return array.\n\n    "
    },
    {
        "ID": 353,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public boolean process( double sampleRadius , Quadrilateral_F64 input ) { work.set(input); samples.reset(); estimator.process(work,false); estimator.getWorldToCamera().invert(referenceCameraToWorld); samples.reset(); createSamples(sampleRadius,work.a,input.a); createSamples(sampleRadius,work.b,input.b); createSamples(sampleRadius,work.c,input.c); createSamples(sampleRadius,work.d,input.d); if( samples.size() < 10 ) return false; maxLocation = 0; maxOrientation = 0; for (int i = 0; i < samples.size(); i++) { referenceCameraToWorld.concat(samples.get(i), difference); ConvertRotation3D_F64.matrixToRodrigues(difference.getR(),rodrigues); double theta = Math.abs(rodrigues.theta); double d = difference.getT().norm(); if( theta > maxOrientation ) { maxOrientation = theta; } if( d > maxLocation ) { maxLocation = d; } } return true; }\n\n    ### Response: Processes the observation and generates a stability estimate\n\n@param sampleRadius Radius around the corner pixels it will sample\n@param input Observed corner location of the fiducial in distorted pixels.  Must be in correct order.\n@return true if successful or false if it failed.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private Object writeReplace() throws ObjectStreamException { Object[] sourcesAsStrings = sources.toArray(); for (int i = 0; i < sourcesAsStrings.length; i++) { sourcesAsStrings[i] = Errors.convert(sourcesAsStrings[i]).toString(); } return new Message(ImmutableList.copyOf(sourcesAsStrings), message, cause); }\n\n    ### Response:",
        "ground_truth": "When serialized, we eagerly convert sources to strings. This hurts our formatting, but it\nguarantees that the receiving end will be able to read the message.",
        "predict": " Processes the observation and generates a stability estimate\n\n@param sampleRadius Radius around the corner pixels it will sample\n@param input Observed corner location of the fiducial in distorted pixels.  Must be in correct order.\n@return true if successful or false if it failed.\n\n    "
    },
    {
        "ID": 354,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (g *Generator) PrintHeader(cmdName string, args *[]string) { if cmdName == \"\" && args != nil { cmdName = (*args)[0] } else if cmdName == \"\" { cmdName = \"???\" } var as []string if args == nil { as = os.Args[1:] } else { as = (*args) } // Print the header and package clause. g.Printf(\"// generated by %s %s; DO NOT EDIT\\n\", cmdName, strings.Join(as, \" \")) g.Printf(\"\\n\") g.Printf(\"package %s\\n\", g.Package.Name()) g.Printf(\"import (\\n\") for _, imp := range g.RequiredImports { g.Printf(\"%s \\\"%s\\\"\\n\", imp.Ident, imp.Path) } g.Printf(\")\\n\") }\n\n    ### Response: // PrintHeader is print header of generated code to buffer..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    static Module forModule(Module module) { // avoid infinite recursion, since installing a module always installs itself if (module instanceof CheckedProviderMethodsModule) { return Modules.EMPTY_MODULE; } return new CheckedProviderMethodsModule(module); }\n\n    ### Response:",
        "ground_truth": "Returns a module which creates bindings for provider methods from the given module.",
        "predict": " // PrintHeader is print header of generated code to buffer..\n\n    "
    },
    {
        "ID": 355,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func makeGroupMarshaler(u *marshalInfo) (sizer, marshaler) { return func(ptr pointer, tagsize int) int { p := ptr.getPointer() if p.isNil() { return 0 } return u.size(p) + 2*tagsize }, func(b []byte, ptr pointer, wiretag uint64, deterministic bool) ([]byte, error) { p := ptr.getPointer() if p.isNil() { return b, nil } var err error b = appendVarint(b, wiretag) // start group b, err = u.marshal(b, p, deterministic) b = appendVarint(b, wiretag+(WireEndGroup-WireStartGroup)) // end group return b, err } }\n\n    ### Response: // makeGroupMarshaler returns the sizer and marshaler for a group.\n// u is the marshal info of the underlying message..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override @SuppressWarnings(\"unchecked\") public Collection<AssistedMethod> getAssistedMethods() { return (Collection<AssistedMethod>) (Collection<?>) assistDataByMethod.values(); }\n\n    ### Response:",
        "ground_truth": "the collection is immutable.",
        "predict": " // makeGroupMarshaler returns the sizer and marshaler for a group.\n// u is the marshal info of the underlying message..\n\n    "
    },
    {
        "ID": 356,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function getBaseUrl($type = Mage_Core_Model_Store::URL_TYPE_LINK, $secure = null) { return Mage::getBaseUrl($type, $secure); }\n\n    ### Response: abstracting getting store configuration flag\n\n@see Mage::getBaseUrl\n@codeCoverageIgnore.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private boolean isTypeNotSpecified(TypeLiteral<?> typeLiteral, ConfigurationException ce) { Collection<Message> messages = ce.getErrorMessages(); if (messages.size() == 1) { Message msg = Iterables.getOnlyElement(new Errors().keyNotFullySpecified(typeLiteral).getMessages()); return msg.getMessage().equals(Iterables.getOnlyElement(messages).getMessage()); } else { return false; } }\n\n    ### Response:",
        "ground_truth": "Returns true if the ConfigurationException is due to an error of TypeLiteral not being fully\nspecified.",
        "predict": " abstracting getting store configuration flag\n\n@see Mage::getBaseUrl\n@codeCoverageIgnore.\n\n    "
    },
    {
        "ID": 357,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def getChildren(self, forgetter, field=None, where=None, orderBy=None): \"\"\"Return the children that links to me. That means that I have to be listed in their _userClasses somehow. If field is specified, that field in my children is used as the pointer to me. Use this if you have multiple fields referring to my class. \"\"\" if type(where) in (types.StringType, types.UnicodeType): where = (where,) if not field: for (i_field, i_class) in forgetter._userClasses.items(): if isinstance(self, i_class): field = i_field break # first one found is ok :=) if not field: raise \"No field found, check forgetter's _userClasses\" sqlname = forgetter._sqlFields[field] myID = self._getID()[0] # assuming single-primary ! whereList = [\"%s='%s'\" % (sqlname, myID)] if where: whereList.extend(where) return forgetter.getAll(whereList, orderBy=orderBy)\n\n    ### Response: Return the children that links to me.\n\n        That means that I have to be listed in their _userClasses\n        somehow. If field is specified, that field in my children is\n        used as the pointer to me. Use this if you have multiple fields\n        referring to my class..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private boolean constructorHasMatchingParams( TypeLiteral<?> type, Constructor<?> constructor, List<Key<?>> paramList, Errors errors) throws ErrorsException { List<TypeLiteral<?>> params = type.getParameterTypes(constructor); Annotation[][] paramAnnotations = constructor.getParameterAnnotations(); int p = 0; List<Key<?>> constructorKeys = Lists.newArrayList(); for (TypeLiteral<?> param : params) { Key<?> paramKey = Annotations.getKey(param, constructor, paramAnnotations[p++], errors); constructorKeys.add(paramKey); } // Require that every key exist in the constructor to match up exactly. for (Key<?> key : paramList) { // If it didn't exist in the constructor set, we can't use it. if (!constructorKeys.remove(key)) { return false; } } // If any keys remain and their annotation is Assisted, we can't use it. for (Key<?> key : constructorKeys) { if (key.getAnnotationType() == Assisted.class) { return false; } } // All @Assisted params match up to the method's parameters. return true; }\n\n    ### Response:",
        "ground_truth": "Matching logic for constructors annotated with AssistedInject. This returns true if and only if\nall @Assisted parameters in the constructor exactly match (in any order) all @Assisted\nparameters the method's parameter.",
        "predict": " Return the children that links to me.\n\n        That means that I have to be listed in their _userClasses\n        somehow. If field is specified, that field in my children is\n        used as the pointer to me. Use this if you have multiple fields\n        referring to my class..\n\n    "
    },
    {
        "ID": 358,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (c *CacheStorage) DeleteEntryWithParams(v *CacheStorageDeleteEntryParams) (*gcdmessage.ChromeResponse, error) { return gcdmessage.SendDefaultRequest(c.target, c.target.GetSendCh(), &gcdmessage.ParamRequest{Id: c.target.GetId(), Method: \"CacheStorage.deleteEntry\", Params: v}) }\n\n    ### Response: // DeleteEntryWithParams - Deletes a cache entry..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private Set<Dependency<?>> getDependencies( InjectionPoint ctorPoint, TypeLiteral<?> implementation) { ImmutableSet.Builder<Dependency<?>> builder = ImmutableSet.builder(); builder.addAll(ctorPoint.getDependencies()); if (!implementation.getRawType().isInterface()) { for (InjectionPoint ip : InjectionPoint.forInstanceMethodsAndFields(implementation)) { builder.addAll(ip.getDependencies()); } } return builder.build(); }\n\n    ### Response:",
        "ground_truth": "Calculates all dependencies required by the implementation and constructor.",
        "predict": " // DeleteEntryWithParams - Deletes a cache entry..\n\n    "
    },
    {
        "ID": 359,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    InputStream readChannel(int channel) throws IOException { while (!isClosed) { if (inputReady[channel]) { inputReady[channel] = false; return is; } boolean canRead = false; synchronized (READ_LOCK) { if (!isReadLocked) { isReadLocked = true; canRead = true; } else { try { READ_LOCK.wait(5000); } catch (Exception e) { } } } if (canRead) { try { readData(); } catch (IOException e) { close(); } } } return null; }\n\n    ### Response: Reads data from a channel.\n\n@param channel the channel\n\n@return true if the channel is valid..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private Set<Dependency<?>> removeAssistedDeps(Set<Dependency<?>> deps) { ImmutableSet.Builder<Dependency<?>> builder = ImmutableSet.builder(); for (Dependency<?> dep : deps) { Class<?> annotationType = dep.getKey().getAnnotationType(); if (annotationType == null || !annotationType.equals(Assisted.class)) { builder.add(dep); } } return builder.build(); }\n\n    ### Response:",
        "ground_truth": "Return all non-assisted dependencies.",
        "predict": " Reads data from a channel.\n\n@param channel the channel\n\n@return true if the channel is valid..\n\n    "
    },
    {
        "ID": 360,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def follow_path( steps, past_steps = [] ) if steps.is_a?( Hash ) steps.each do |step, next_steps| path_to_this_point = [past_steps, step].flatten reflection = reflection_for( path_to_this_point ) rescue nil if reflection follow_path( next_steps, path_to_this_point ) else follow_comparison( next_steps, past_steps, step ) end end elsif steps.is_a?( Array ) && steps.length == 2 if reflection_for( past_steps ) follow_comparison( steps, past_steps, :id ) else follow_comparison( steps, past_steps[0..-2], past_steps[-1] ) end else raise \"invalid obligation path #{[past_steps, steps].inspect}\" end end\n\n    ### Response: Parses the next step in the association path.  If it's an association, we advance down the\n path.  Otherwise, it's an attribute, and we need to evaluate it as a comparison operation..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private boolean isValidForOptimizedAssistedInject( Set<Dependency<?>> dependencies, Class<?> implementation, TypeLiteral<?> factoryType) { Set<Dependency<?>> badDeps = null; // optimization: create lazily for (Dependency<?> dep : dependencies) { if (isInjectorOrAssistedProvider(dep)) { if (badDeps == null) { badDeps = Sets.newHashSet(); } badDeps.add(dep); } } if (badDeps != null && !badDeps.isEmpty()) { logger.log( Level.WARNING, \"AssistedInject factory {0} will be slow \" + \"because {1} has assisted Provider dependencies or injects the Injector. \" + \"Stop injecting @Assisted Provider<T> (instead use @Assisted T) \" + \"or Injector to speed things up. (It will be a ~6500% speed bump!) \" + \"The exact offending deps are: {2}\", new Object[] {factoryType, implementation, badDeps}); return false; } return true; }\n\n    ### Response:",
        "ground_truth": "Returns true if all dependencies are suitable for the optimized version of AssistedInject. The\noptimized version caches the binding & uses a ThreadLocal Provider, so can only be applied if\nthe assisted bindings are immediately provided. This looks for hints that the values may be\nlazily retrieved, by looking for injections of Injector or a Provider for the assisted values.",
        "predict": " Parses the next step in the association path.  If it's an association, we advance down the\n path.  Otherwise, it's an attribute, and we need to evaluate it as a comparison operation..\n\n    "
    },
    {
        "ID": 361,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def get_context_data(self, **kwargs): \"\"\"This adds into the context of breeding_type and sets it to Active.\"\"\" context = super(BreedingList, self).get_context_data(**kwargs) context['breeding_type'] = \"Active\" return context\n\n    ### Response: This adds into the context of breeding_type and sets it to Active..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Binding<?> getBindingFromNewInjector( final Method method, final Object[] args, final AssistData data) { checkState( injector != null, \"Factories.create() factories cannot be used until they're initialized by Guice.\"); final Key<?> returnType = data.returnType; // We ignore any pre-existing binding annotation. final Key<?> returnKey = Key.get(returnType.getTypeLiteral(), RETURN_ANNOTATION); Module assistedModule = new AbstractModule() { @Override @SuppressWarnings({ \"unchecked\", \"rawtypes\" }) // raw keys are necessary for the args array and return value protected void configure() { Binder binder = binder().withSource(method); int p = 0; if (!data.optimized) { for (Key<?> paramKey : data.paramTypes) { // Wrap in a Provider to cover null, and to prevent Guice from injecting the // parameter binder.bind((Key) paramKey).toProvider(Providers.of(args[p++])); } } else { for (Key<?> paramKey : data.paramTypes) { // Bind to our ThreadLocalProviders. binder.bind((Key) paramKey).toProvider(data.providers.get(p++)); } } Constructor constructor = data.constructor; // Constructor *should* always be non-null here, // but if it isn't, we'll end up throwing a fairly good error // message for the user. if (constructor != null) { binder .bind(returnKey) .toConstructor(constructor, (TypeLiteral) data.implementationType) .in(Scopes.NO_SCOPE); // make sure we erase any scope on the implementation type } } }; Injector forCreate = injector.createChildInjector(assistedModule); Binding<?> binding = forCreate.getBinding(returnKey); // If we have providers cached in data, cache the binding for future optimizations. if (data.optimized) { data.cachedBinding = binding; } return binding; }\n\n    ### Response:",
        "ground_truth": "Creates a child injector that binds the args, and returns the binding for the method's result.",
        "predict": " This adds into the context of breeding_type and sets it to Active..\n\n    "
    },
    {
        "ID": 362,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def exhaust(self, chunk_size=1024 * 16): \"\"\"Exhaust the stream. This consumes all the data left until the limit is reached. :param chunk_size: the size for a chunk. It will read the chunk until the stream is exhausted and throw away the results. \"\"\" to_read = self.limit - self._pos chunk = chunk_size while to_read > 0: chunk = min(to_read, chunk) self.read(chunk) to_read -= chunk\n\n    ### Response: Exhaust the stream.  This consumes all the data left until the\n        limit is reached.\n\n        :param chunk_size: the size for a chunk.  It will read the chunk\n                           until the stream is exhausted and throw away\n                           the results..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public Object invoke(Object proxy, final Method method, final Object[] args) throws Throwable { // If we setup a method handle earlier for this method, call it. // This is necessary for default methods that java8 creates, so we // can call the default method implementation (and not our proxied version of it). if (methodHandleByMethod.containsKey(method)) { return methodHandleByMethod.get(method).invokeWithArguments(args); } if (method.getDeclaringClass().equals(Object.class)) { if (\"equals\".equals(method.getName())) { return proxy == args[0]; } else if (\"hashCode\".equals(method.getName())) { return System.identityHashCode(proxy); } else { return method.invoke(this, args); } } AssistData data = assistDataByMethod.get(method); checkState(data != null, \"No data for method: %s\", method); Provider<?> provider; if (data.cachedBinding != null) { // Try to get optimized form... provider = data.cachedBinding.getProvider(); } else { provider = getBindingFromNewInjector(method, args, data).getProvider(); } try { int p = 0; for (ThreadLocalProvider tlp : data.providers) { tlp.set(args[p++]); } return provider.get(); } catch (ProvisionException e) { // if this is an exception declared by the factory method, throw it as-is if (e.getErrorMessages().size() == 1) { Message onlyError = getOnlyElement(e.getErrorMessages()); Throwable cause = onlyError.getCause(); if (cause != null && canRethrow(method, cause)) { throw cause; } } throw e; } finally { for (ThreadLocalProvider tlp : data.providers) { tlp.remove(); } } }\n\n    ### Response:",
        "ground_truth": "When a factory method is invoked, we create a child injector that binds all parameters, then\nuse that to get an instance of the return type.",
        "predict": " Exhaust the stream.  This consumes all the data left until the\n        limit is reached.\n\n        :param chunk_size: the size for a chunk.  It will read the chunk\n                           until the stream is exhausted and throw away\n                           the results..\n\n    "
    },
    {
        "ID": 363,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def create_image_plugin(filename, image, parent_plugin, **kwargs): \"\"\" Used for drag-n-drop image insertion with djangocms-text-ckeditor. Set TEXT_SAVE_IMAGE_FUNCTION='cmsplugin_filer_image.integrations.ckeditor.create_image_plugin' to enable. \"\"\" from cmsplugin_filer_image.models import FilerImage from filer.models import Image image_plugin = FilerImage() image_plugin.placeholder = parent_plugin.placeholder image_plugin.parent = CMSPlugin.objects.get(pk=parent_plugin.id) image_plugin.position = CMSPlugin.objects.filter(parent=parent_plugin).count() image_plugin.language = parent_plugin.language image_plugin.plugin_type = 'FilerImagePlugin' image.seek(0) image_model = Image.objects.create(file=SimpleUploadedFile(name=filename, content=image.read())) image_plugin.image = image_model image_plugin.save() return image_plugin\n\n    ### Response: Used for drag-n-drop image insertion with djangocms-text-ckeditor.\n    Set TEXT_SAVE_IMAGE_FUNCTION='cmsplugin_filer_image.integrations.ckeditor.create_image_plugin' to enable..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    <T> Errors missingImplementationWithHint(Key<T> key, Injector injector) { StringBuilder sb = new StringBuilder(); sb.append(format(\"No implementation for %s was bound.\", key)); // Keys which have similar strings as the desired key List<String> possibleMatches = new ArrayList<>(); // Check for other keys that may have the same type, // but not the same annotation TypeLiteral<T> type = key.getTypeLiteral(); List<Binding<T>> sameTypes = injector.findBindingsByType(type); if (!sameTypes.isEmpty()) { sb.append(format(\"%n Did you mean?\")); int howMany = Math.min(sameTypes.size(), MAX_MATCHING_TYPES_REPORTED); for (int i = 0; i < howMany; ++i) { // TODO: Look into a better way to prioritize suggestions. For example, possbily // use levenshtein distance of the given annotation vs actual annotation. sb.append(format(\"%n * %s\", sameTypes.get(i).getKey())); } int remaining = sameTypes.size() - MAX_MATCHING_TYPES_REPORTED; if (remaining > 0) { String plural = (remaining == 1) ? \"\" : \"s\"; sb.append(format(\"%n %d more binding%s with other annotations.\", remaining, plural)); } } else { // For now, do a simple substring search for possibilities. This can help spot // issues when there are generics being used (such as a wrapper class) and the // user has forgotten they need to bind based on the wrapper, not the underlying // class. In the future, consider doing a strict in-depth type search. // TODO: Look into a better way to prioritize suggestions. For example, possbily // use levenshtein distance of the type literal strings. String want = type.toString(); Map<Key<?>, Binding<?>> bindingMap = injector.getAllBindings(); for (Key<?> bindingKey : bindingMap.keySet()) { String have = bindingKey.getTypeLiteral().toString(); if (have.contains(want) || want.contains(have)) { Formatter fmt = new Formatter(); Messages.formatSource(fmt, bindingMap.get(bindingKey).getSource()); String match = String.format(\"%s bound%s\", convert(bindingKey), fmt.toString()); possibleMatches.add(match); // TODO: Consider a check that if there are more than some number of results, // don't suggest any. if (possibleMatches.size() > MAX_RELATED_TYPES_REPORTED) { // Early exit if we have found more than we need. break; } } } if ((possibleMatches.size() > 0) && (possibleMatches.size() <= MAX_RELATED_TYPES_REPORTED)) { sb.append(format(\"%n Did you mean?\")); for (String possibleMatch : possibleMatches) { sb.append(format(\"%n %s\", possibleMatch)); } } } // If where are no possibilities to suggest, then handle the case of missing // annotations on simple types. This is usually a bad idea. if (sameTypes.isEmpty() && possibleMatches.isEmpty() && key.getAnnotation() == null && COMMON_AMBIGUOUS_TYPES.contains(key.getTypeLiteral().getRawType())) { // We don't recommend using such simple types without annotations. sb.append(format(\"%nThe key seems very generic, did you forget an annotation?\")); } return addMessage(sb.toString()); }\n\n    ### Response:",
        "ground_truth": "Within guice's core, allow for better missing binding messages",
        "predict": " Used for drag-n-drop image insertion with djangocms-text-ckeditor.\n    Set TEXT_SAVE_IMAGE_FUNCTION='cmsplugin_filer_image.integrations.ckeditor.create_image_plugin' to enable..\n\n    "
    },
    {
        "ID": 364,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function hydrate(array $data, $object) { foreach ($data as $name => $value) { if (!isset($this->profileClassMap[$name])) { continue; } if (empty($value)) { // We need to check, if collection has a profile and // remove it. foreach ($object as $p) { if ($p instanceof $this->profileClassMap[$name]) { $object->removeElement($p); continue 2; } } // No profile found, so do nothing. continue; } if (is_string($value)) { $value = \\Zend\\Json\\Json::decode($value, \\Zend\\Json\\Json::TYPE_ARRAY); } /* If there is already a profile of this type, we do not need to * add it, but update the data only. */ foreach ($object as $p) { if ($p instanceof $this->profileClassMap[$name]) { // Already a profile in the collection, just update and continue main loop. $p->setData($value); continue 2; } } // We need to add a new profile to the collection. $class = $this->profileClassMap[$name]; $profile = new $class(); $profile->setData($value); $object->add($profile); } return $object; }\n\n    ### Response: Adds or removes a social profile from the collection.\n\n@param array $data\n@param Collection $object\n@see \\Zend\\Hydrator\\HydratorInterface::hydrate()\n@return \\Auth\\Entity\\SocialProfiles\\ProfileInterface.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static <T> RealMultibinder<T> newRealSetBinder(Binder binder, Key<T> key) { binder = binder.skipSources(RealMultibinder.class); RealMultibinder<T> result = new RealMultibinder<>(binder, key); binder.install(result); return result; }\n\n    ### Response:",
        "ground_truth": "Implementation of newSetBinder.",
        "predict": " Adds or removes a social profile from the collection.\n\n@param array $data\n@param Collection $object\n@see \\Zend\\Hydrator\\HydratorInterface::hydrate()\n@return \\Auth\\Entity\\SocialProfiles\\ProfileInterface.\n\n    "
    },
    {
        "ID": 365,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def remove_legend(self): \"\"\" Removes legend actor \"\"\" if hasattr(self, 'legend'): self.remove_actor(self.legend, reset_camera=False) self._render()\n\n    ### Response: Removes legend actor.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    Key<T> getKeyForNewItem() { checkConfiguration(!bindingSelection.isInitialized(), \"Multibinder was already initialized\"); return Key.get( bindingSelection.getElementTypeLiteral(), new RealElement(bindingSelection.getSetName(), MULTIBINDER, \"\")); }\n\n    ### Response:",
        "ground_truth": "Adds a new entry to the set and returns the key for it.",
        "predict": " Removes legend actor.\n\n    "
    },
    {
        "ID": 366,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function getRelease($episodeId) { $uri = 'release'; $uriData = [ 'episodeId' => $episodeId ]; $response = [ 'uri' => $uri, 'type' => 'get', 'data' => $uriData ]; return $this->processRequest($response); }\n\n    ### Response: Get release by episode id\n\n@param $episodeId\n@return string.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private Filter findNextFilter(HttpServletRequest request) { while (++index < filterDefinitions.length) { Filter filter = filterDefinitions[index].getFilterIfMatching(request); if (filter != null) { return filter; } } return null; }\n\n    ### Response:",
        "ground_truth": "Iterates over the remaining filter definitions. Returns the first applicable filter, or null if\nnone apply.",
        "predict": " Get release by episode id\n\n@param $episodeId\n@return string.\n\n    "
    },
    {
        "ID": 367,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def get_logs_by_provider(self, *args, **kwargs): \"\"\"Pass through to provider LogLookupSession.get_logs_by_provider\"\"\" # Implemented from kitosid template for - # osid.resource.BinLookupSession.get_bins_by_provider catalogs = self._get_provider_session('log_lookup_session').get_logs_by_provider(*args, **kwargs) cat_list = [] for cat in catalogs: cat_list.append(Log(self._provider_manager, cat, self._runtime, self._proxy)) return LogList(cat_list)\n\n    ### Response: Pass through to provider LogLookupSession.get_logs_by_provider.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static boolean hasAtInject(Constructor cxtor) { return cxtor.isAnnotationPresent(Inject.class) || cxtor.isAnnotationPresent(javax.inject.Inject.class); }\n\n    ### Response:",
        "ground_truth": "Returns true if the inject annotation is on the constructor.",
        "predict": " Pass through to provider LogLookupSession.get_logs_by_provider.\n\n    "
    },
    {
        "ID": 368,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function unique() : Collection { return $this->pipe( self::predicate( function (array $values) : bool { return array_unique($values) === $values; }, 'not all unique elements' ) ); }\n\n    ### Response: This collection must not contain duplicates.\n@return Schemer\\Validator\\Collection.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    InjectionPoint getInternalConstructor() { if (factory.constructorInjector != null) { return factory.constructorInjector.getConstructionProxy().getInjectionPoint(); } else { return constructorInjectionPoint; } }\n\n    ### Response:",
        "ground_truth": "Returns an injection point that can be used to clean up the constructor store.",
        "predict": " This collection must not contain duplicates.\n@return Schemer\\Validator\\Collection.\n\n    "
    },
    {
        "ID": 369,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func Parse(csstext string) *CSSStyleSheet { context := &parserContext{ State: STATE_NONE, NowSelectorText: \"\", NowRuleType: STYLE_RULE, CurrentNestedRule: nil, } css := &CSSStyleSheet{} css.CssRuleList = make([]*CSSRule, 0) s := scanner.New(csstext) for { token := s.Next() if token.Type == scanner.TokenEOF || token.Type == scanner.TokenError { break } switch token.Type { case scanner.TokenCDO: break case scanner.TokenCDC: break case scanner.TokenComment: break case scanner.TokenS: break case scanner.TokenAtKeyword: switch token.Value { case \"@media\": context.NowRuleType = MEDIA_RULE case \"@font-face\": // Parse as normal rule, would be nice to parse according to syntax // https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face context.NowRuleType = FONT_FACE_RULE parseRule(context, s, css) resetContextStyleRule(context) case \"@import\": // No validation // https://developer.mozilla.org/en-US/docs/Web/CSS/@import rule := parseImport(s) if rule != nil { css.CssRuleList = append(css.CssRuleList, rule) } resetContextStyleRule(context) case \"@charset\": // No validation // https://developer.mozilla.org/en-US/docs/Web/CSS/@charset rule := parseCharset(s) if rule != nil { css.CssRuleList = append(css.CssRuleList, rule) } resetContextStyleRule(context) case \"@page\": context.NowRuleType = PAGE_RULE parseRule(context, s, css) resetContextStyleRule(context) case \"@keyframes\": context.NowRuleType = KEYFRAMES_RULE case \"@-webkit-keyframes\": context.NowRuleType = WEBKIT_KEYFRAMES_RULE case \"@counter-style\": context.NowRuleType = COUNTER_STYLE_RULE parseRule(context, s, css) resetContextStyleRule(context) default: log.Println(fmt.Printf(\"Skip unsupported atrule: %s\", token.Value)) skipRules(s) resetContextStyleRule(context) } default: if context.State == STATE_NONE { if token.Value == \"}\" && context.CurrentNestedRule != nil { // close media rule css.CssRuleList = append(css.CssRuleList, context.CurrentNestedRule) context.CurrentNestedRule = nil break } } if context.NowRuleType == MEDIA_RULE || context.NowRuleType == KEYFRAMES_RULE || context.NowRuleType == WEBKIT_KEYFRAMES_RULE { context.CurrentNestedRule = NewRule(context.NowRuleType) context.CurrentNestedRule.Style.SelectorText = strings.TrimSpace(token.Value + parseSelector(s)) resetContextStyleRule(context) break } else { context.NowSelectorText += token.Value parseRule(context, s, css) resetContextStyleRule(context) break } } } return css }\n\n    ### Response: // Parse takes a string of valid css rules, stylesheet,\n// and parses it. Be aware this function has poor error handling\n// so you should have valid syntax in your css.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    Set<Dependency<?>> getInternalDependencies() { ImmutableSet.Builder<InjectionPoint> builder = ImmutableSet.builder(); if (factory.constructorInjector == null) { builder.add(constructorInjectionPoint); // If the below throws, it's OK -- we just ignore those dependencies, because no one // could have used them anyway. try { builder.addAll( InjectionPoint.forInstanceMethodsAndFields( constructorInjectionPoint.getDeclaringType())); } catch (ConfigurationException ignored) { } } else { builder.add(getConstructor()).addAll(getInjectableMembers()); } return Dependency.forInjectionPoints(builder.build()); }\n\n    ### Response:",
        "ground_truth": "Returns a set of dependencies that can be iterated over to clean up stray JIT bindings.",
        "predict": " // Parse takes a string of valid css rules, stylesheet,\n// and parses it. Be aware this function has poor error handling\n// so you should have valid syntax in your css.\n\n    "
    },
    {
        "ID": 370,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (h *HAConfig) Copy(c *HAConfig) { h.Enabled = c.Enabled h.LocalAddr = copyIP(c.LocalAddr) h.RemoteAddr = copyIP(c.RemoteAddr) h.Priority = c.Priority h.VRID = c.VRID }\n\n    ### Response: // Copy deep copies from the given Seesaw HAConfig..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Module forModule(Object module, ModuleAnnotatedMethodScanner scanner) { return forObject(module, false, scanner); }\n\n    ### Response:",
        "ground_truth": "Returns a module which creates bindings methods in the module that match the scanner.",
        "predict": " // Copy deep copies from the given Seesaw HAConfig..\n\n    "
    },
    {
        "ID": 371,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static <T> T deserializeFromBase64(String data) { Objects.requireNonNull(data, Required.DATA.toString()); byte[] bytes = base64Decoder.decode(data); return SerializationUtils.deserialize(bytes); }\n\n    ### Response: Deserialize a given Base64 encoded data string into an object\n\n@param data The base64 encoded data string\n@param  Just for JavaDoc can be ignored\n@return The required object.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private Annotation getAnnotation(Binder binder, Method method) { if (method.isBridge() || method.isSynthetic()) { return null; } Annotation annotation = null; for (Class<? extends Annotation> annotationClass : scanner.annotationClasses()) { Annotation foundAnnotation = method.getAnnotation(annotationClass); if (foundAnnotation != null) { if (annotation != null) { binder.addError( \"More than one annotation claimed by %s on method %s.\" + \" Methods can only have one annotation claimed per scanner.\", scanner, method); return null; } annotation = foundAnnotation; } } return annotation; }\n\n    ### Response:",
        "ground_truth": "Returns the annotation that is claimed by the scanner, or null if there is none.",
        "predict": " Deserialize a given Base64 encoded data string into an object\n\n@param data The base64 encoded data string\n@param  Just for JavaDoc can be ignored\n@return The required object.\n\n    "
    },
    {
        "ID": 372,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static final String name(SimpleGroupPath group, MetricName metric) { return name(Stream.concat(group.getPath().stream(), metric.getPath().stream()) .collect(Collectors.joining(\".\"))); }\n\n    ### Response: Convert a group+metric to a wavefront name.\n\nConcatenates the paths of a Group and a Metric, separating each path\nelement with a dot ('.').\n\nExample: - group path: [ 'example', 'group', 'path' ] - and metric: [\n'metric', 'name' ] are concatenated into\n\"example.group.path.metric.name\".\n\nThe concatenated name is cleaned to only contain characters allowed by\nwavefront. (See the WavefrontString.name(String) function.).\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Integer getLineNumber(Member member) { Preconditions.checkArgument( type == member.getDeclaringClass(), \"Member %s belongs to %s, not %s\", member, member.getDeclaringClass(), type); return lines.get(memberKey(member)); }\n\n    ### Response:",
        "ground_truth": "Get the line number associated with the given member.\n\n@param member a field, constructor, or method belonging to the class used during construction\n@return the wrapped line number, or null if not available\n@throws IllegalArgumentException if the member does not belong to the class used during\nconstruction",
        "predict": " Convert a group+metric to a wavefront name.\n\nConcatenates the paths of a Group and a Metric, separating each path\nelement with a dot ('.').\n\nExample: - group path: [ 'example', 'group', 'path' ] - and metric: [\n'metric', 'name' ] are concatenated into\n\"example.group.path.metric.name\".\n\nThe concatenated name is cleaned to only contain characters allowed by\nwavefront. (See the WavefrontString.name(String) function.).\n\n    "
    },
    {
        "ID": 373,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static Consumer<JavaFile> write(ProcessingEnvironment processingEnv) { return file -> { try { file.writeTo(processingEnv.getFiler()); } catch (IOException e) { JavaFileObject obj = file.toJavaFileObject(); throw new ProcessingException(\"Can't write\", obj.getName(), obj.getKind(), e); } }; }\n\n    ### Response: Consumer which writes classes as java files.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    void initialize(Errors errors) { injector.lookups = injector; new LookupProcessor(errors).process(injector, lookups); }\n\n    ### Response:",
        "ground_truth": "Initialize the specified lookups, either immediately or when the injector is created.",
        "predict": " Consumer which writes classes as java files.\n\n    "
    },
    {
        "ID": 374,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (s *Service) DomainList(ctx context.Context, appIdentity string, lr *ListRange) (DomainListResult, error) { var domain DomainListResult return domain, s.Get(ctx, &domain, fmt.Sprintf(\"/apps/%v/domains\", appIdentity), nil, lr) }\n\n    ### Response: // List existing domains..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Deprecated public static <T> Callable<T> continueRequest(Callable<T> callable, Map<Key<?>, Object> seedMap) { return wrap(callable, continueRequest(seedMap)); }\n\n    ### Response:",
        "ground_truth": "Wraps the given callable in a contextual callable that \"continues\" the HTTP request in another\nthread. This acts as a way of transporting request context data from the request processing\nthread to to worker threads.\n\nThere are some limitations:\n\n\nDerived objects (i.e. anything marked @RequestScoped will not be transported.\nState changes to the HttpServletRequest after this method is called will not be seen in the\ncontinued thread.\nOnly the HttpServletRequest, ServletContext and request parameter map are available in the\ncontinued thread. The response and session are not available.\n\nThe returned callable will throw a {@link ScopingException} when called if the HTTP request\nscope is still active on the current thread.\n\n@param callable code to be executed in another thread, which depends on the request scope.\n@param seedMap the initial set of scoped instances for Guice to seed the request scope with. To\nseed a key with null, use {@code null} as the value.\n@return a callable that will invoke the given callable, making the request context available to\nit.\n@throws OutOfScopeException if this method is called from a non-request thread, or if the\nrequest has completed.\n@since 3.0\n@deprecated You probably want to use {@code transferRequest} instead",
        "predict": " // List existing domains..\n\n    "
    },
    {
        "ID": 375,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def prepare(self, node): \"\"\" Initialise arguments effects as this analyse is inter-procedural. Initialisation done for Pythonic functions and default value set for user defined functions. \"\"\" super(ArgumentEffects, self).prepare(node) for n in self.global_declarations.values(): fe = FunctionEffects(n) self.node_to_functioneffect[n] = fe self.result.add_node(fe)\n\n    ### Response: Initialise arguments effects as this analyse is inter-procedural.\n\n        Initialisation done for Pythonic functions and default value set for\n        user defined functions..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static <T> Callable<T> transferRequest(Callable<T> callable) { return wrap(callable, transferRequest()); }\n\n    ### Response:",
        "ground_truth": "Wraps the given callable in a contextual callable that \"transfers\" the request to another\nthread. This acts as a way of transporting request context data from the current thread to a\nfuture thread.\n\nAs opposed to {@link #continueRequest}, this method propagates all existing scoped objects.\nThe primary use case is in server implementations where you can detach the request processing\nthread while waiting for data, and reattach to a different thread to finish processing at a\nlater time.\n\nBecause request-scoped objects are not typically thread-safe, the callable returned by this\nmethod must not be run on a different thread until the current request scope has terminated.\nThe returned callable will block until the current thread has released the request scope.\n\n@param callable code to be executed in another thread, which depends on the request scope.\n@return a callable that will invoke the given callable, making the request context available to\nit.\n@throws OutOfScopeException if this method is called from a non-request thread, or if the\nrequest has completed.\n@since 4.0",
        "predict": " Initialise arguments effects as this analyse is inter-procedural.\n\n        Initialisation done for Pythonic functions and default value set for\n        user defined functions..\n\n    "
    },
    {
        "ID": 376,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function imageBlur($sigma = 1) { $sigma = (float) $sigma; $this->image->effects()->blur($sigma); }\n\n    ### Response: Command image blur\n\n@param float $sigma\n\n@return void.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static Object validateAndCanonicalizeValue(Key<?> key, Object object) { if (object == null || object == NullObject.INSTANCE) { return NullObject.INSTANCE; } if (!key.getTypeLiteral().getRawType().isInstance(object)) { throw new IllegalArgumentException( \"Value[\" + object + \"] of type[\" + object.getClass().getName() + \"] is not compatible with key[\" + key + \"]\"); } return object; }\n\n    ### Response:",
        "ground_truth": "Validates the key and object, ensuring the value matches the key type, and canonicalizing null\nobjects to the null sentinel.",
        "predict": " Command image blur\n\n@param float $sigma\n\n@return void.\n\n    "
    },
    {
        "ID": 377,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function parseFileIntoDescriptor(ProjectDescriptorBuilder $builder, $filename) { $parser = new File($this); $parser->parse($filename, $builder); }\n\n    ### Response: Parses a file and creates a Descriptor for it in the project.\n\n@param ProjectDescriptorBuilder $builder\n@param string                   $filename\n\n@return void.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SuppressWarnings(\"unchecked\") // the MembersInjector type always agrees with the passed type public <T> MembersInjectorImpl<T> get(TypeLiteral<T> key, Errors errors) throws ErrorsException { return (MembersInjectorImpl<T>) cache.get(key, errors); }\n\n    ### Response:",
        "ground_truth": "Returns a new complete members injector with injection listeners registered.",
        "predict": " Parses a file and creates a Descriptor for it in the project.\n\n@param ProjectDescriptorBuilder $builder\n@param string                   $filename\n\n@return void.\n\n    "
    },
    {
        "ID": 378,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function addUniversalTransferDocumentSellerTitles(\\AgentSIB\\Diadoc\\Api\\Proto\\Events\\XmlDocumentAttachment $value) { if ($this->UniversalTransferDocumentSellerTitles === null) { $this->UniversalTransferDocumentSellerTitles = new \\Protobuf\\MessageCollection(); } $this->UniversalTransferDocumentSellerTitles->add($value); }\n\n    ### Response: Add a new element to 'UniversalTransferDocumentSellerTitles'\n\n@param \\AgentSIB\\Diadoc\\Api\\Proto\\Events\\XmlDocumentAttachment $value.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private <T> MembersInjectorImpl<T> createWithListeners(TypeLiteral<T> type, Errors errors) throws ErrorsException { int numErrorsBefore = errors.size(); Set<InjectionPoint> injectionPoints; try { injectionPoints = InjectionPoint.forInstanceMethodsAndFields(type); } catch (ConfigurationException e) { errors.merge(e.getErrorMessages()); injectionPoints = e.getPartialValue(); } ImmutableList<SingleMemberInjector> injectors = getInjectors(injectionPoints, errors); errors.throwIfNewErrors(numErrorsBefore); EncounterImpl<T> encounter = new EncounterImpl<>(errors, injector.lookups); Set<TypeListener> alreadySeenListeners = Sets.newHashSet(); for (TypeListenerBinding binding : typeListenerBindings) { TypeListener typeListener = binding.getListener(); if (!alreadySeenListeners.contains(typeListener) && binding.getTypeMatcher().matches(type)) { alreadySeenListeners.add(typeListener); try { typeListener.hear(type, encounter); } catch (RuntimeException e) { errors.errorNotifyingTypeListener(binding, type, e); } } } encounter.invalidate(); errors.throwIfNewErrors(numErrorsBefore); return new MembersInjectorImpl<T>(injector, type, encounter, injectors); }\n\n    ### Response:",
        "ground_truth": "Creates a new members injector and attaches both injection listeners and method aspects.",
        "predict": " Add a new element to 'UniversalTransferDocumentSellerTitles'\n\n@param \\AgentSIB\\Diadoc\\Api\\Proto\\Events\\XmlDocumentAttachment $value.\n\n    "
    },
    {
        "ID": 379,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private function _checkAliases($text) { if ($this->_isActive('checkAliases')) { $key = strtolower($text); if (array_key_exists($key, $this->_aliasedFunctions)) { $msg = $this->_getMessage('ALIASED_FUNCTION', $this->_aliasedFunctions[$key]['old'], $this->_aliasedFunctions[$key]['new']); $this->_writeError('checkAliases', $msg); } } }\n\n    ### Response: Check for aliased functions.\n\n@param String $text\nThe text of the token to test.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    ImmutableList<SingleMemberInjector> getInjectors( Set<InjectionPoint> injectionPoints, Errors errors) { List<SingleMemberInjector> injectors = Lists.newArrayList(); for (InjectionPoint injectionPoint : injectionPoints) { try { Errors errorsForMember = injectionPoint.isOptional() ? new Errors(injectionPoint) : errors.withSource(injectionPoint); SingleMemberInjector injector = injectionPoint.getMember() instanceof Field ? new SingleFieldInjector(this.injector, injectionPoint, errorsForMember) : new SingleMethodInjector(this.injector, injectionPoint, errorsForMember); injectors.add(injector); } catch (ErrorsException ignoredForNow) { // ignored for now } } return ImmutableList.copyOf(injectors); }\n\n    ### Response:",
        "ground_truth": "Returns the injectors for the specified injection points.",
        "predict": " Check for aliased functions.\n\n@param String $text\nThe text of the token to test.\n\n    "
    },
    {
        "ID": 380,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private String removeHeaderComments(String fileContent, SortedSet<Comment> comments) { String headerlessFileContent = fileContent; for (Comment comment : comments) { String commentValue = comment.getValue(); if (headerlessFileContent.startsWith(commentValue)) { headerlessFileContent = headerlessFileContent.replace(commentValue, EMPTY_STRING); // remove all leading white spaces and new line characters while (StringUtils.isNotBlank(headerlessFileContent) && Character.isWhitespace(headerlessFileContent.charAt(0))) { headerlessFileContent = headerlessFileContent.substring(1); } } else { // finished removing all header comments break; } } return headerlessFileContent; }\n\n    ### Response: Go over each comment and remove from content until reaching the beginning of the actual code..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    static <T> Key<T> get(Class<T> type, AnnotationStrategy annotationStrategy) { return new Key<T>(type, annotationStrategy); }\n\n    ### Response:",
        "ground_truth": "Gets a key for an injection type and an annotation strategy.",
        "predict": " Go over each comment and remove from content until reaching the beginning of the actual code..\n\n    "
    },
    {
        "ID": 381,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function addWhere(string $key, string $operator, $value, string $concatenator = 'AND'): void { array_push($this->where, [ 'key' => $key, 'operator' => $operator, 'value' => $value, 'concatenator' => $concatenator, ]); }\n\n    ### Response: Adds where condition to pool.\n\n@param string $key\n@param string $operator\n@param $value\n@param string $concatenator.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    static AnnotationStrategy strategyFor(Annotation annotation) { checkNotNull(annotation, \"annotation\"); Class<? extends Annotation> annotationType = annotation.annotationType(); ensureRetainedAtRuntime(annotationType); ensureIsBindingAnnotation(annotationType); if (Annotations.isMarker(annotationType)) { return new AnnotationTypeStrategy(annotationType, annotation); } return new AnnotationInstanceStrategy(Annotations.canonicalizeIfNamed(annotation)); }\n\n    ### Response:",
        "ground_truth": "Gets the strategy for an annotation.",
        "predict": " Adds where condition to pool.\n\n@param string $key\n@param string $operator\n@param $value\n@param string $concatenator.\n\n    "
    },
    {
        "ID": 382,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function (oControl) { var oAppComponent; // determine UI5 component out of given control if (oControl) { // always return the app component oAppComponent = this.getAppComponentForControl(oControl); // check if the component is an application variant and assigned an application descriptor then use this as reference if (oAppComponent) { var sVariantId = this._getComponentStartUpParameter(oAppComponent, \"sap-app-id\"); if (sVariantId) { return sVariantId; } if (oAppComponent.getManifestEntry(\"sap.ui5\") && oAppComponent.getManifestEntry(\"sap.ui5\").appVariantId) { return oAppComponent.getManifestEntry(\"sap.ui5\").appVariantId; } } } return Utils.getComponentName(oAppComponent); }\n\n    ### Response: Returns the class name of the component the given control belongs to.\n\n@param {sap.ui.core.Control} oControl - SAPUI5 control\n\n@returns {String} The component class name, ending with \".Component\"\n@see sap.ui.core.Component.getOwnerIdFor\n@public\n@function\n@name sap.ui.fl.Utils.getComponentClassName.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    static AnnotationStrategy strategyFor(Class<? extends Annotation> annotationType) { annotationType = Annotations.canonicalizeIfNamed(annotationType); if (isAllDefaultMethods(annotationType)) { return strategyFor(generateAnnotation(annotationType)); } checkNotNull(annotationType, \"annotation type\"); ensureRetainedAtRuntime(annotationType); ensureIsBindingAnnotation(annotationType); return new AnnotationTypeStrategy(annotationType, null); }\n\n    ### Response:",
        "ground_truth": "Gets the strategy for an annotation type.",
        "predict": " Returns the class name of the component the given control belongs to.\n\n@param {sap.ui.core.Control} oControl - SAPUI5 control\n\n@returns {String} The component class name, ending with \".Component\"\n@see sap.ui.core.Component.getOwnerIdFor\n@public\n@function\n@name sap.ui.fl.Utils.getComponentClassName.\n\n    "
    },
    {
        "ID": 383,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def set_shortcut(self, name, shortcut): \"\"\" Sets given action shortcut. :param name: Action to set the shortcut. :type name: unicode :param shortcut: Shortcut to set. :type shortcut: unicode :return: Method success. :rtype: bool \"\"\" name = self.__normalize_name(name) action = self.get_action(name) if not action: return action.setShortcut(QKeySequence(shortcut)) return True\n\n    ### Response: Sets given action shortcut.\n\n        :param name: Action to set the shortcut.\n        :type name: unicode\n        :param shortcut: Shortcut to set.\n        :type shortcut: unicode\n        :return: Method success.\n        :rtype: bool.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void pruneStacktrace(Throwable throwable) { for (Throwable t = throwable; t != null; t = t.getCause()) { StackTraceElement[] stackTrace = t.getStackTrace(); List<StackTraceElement> pruned = Lists.newArrayList(); for (StackTraceElement element : stackTrace) { String className = element.getClassName(); if (!AOP_INTERNAL_CLASSES.contains(className) && !className.contains(\"$EnhancerByGuice$\")) { pruned.add(element); } } t.setStackTrace(pruned.toArray(new StackTraceElement[pruned.size()])); } }\n\n    ### Response:",
        "ground_truth": "Removes stacktrace elements related to AOP internal mechanics from the throwable's stack trace\nand any causes it may have.",
        "predict": " Sets given action shortcut.\n\n        :param name: Action to set the shortcut.\n        :type name: unicode\n        :param shortcut: Shortcut to set.\n        :type shortcut: unicode\n        :return: Method success.\n        :rtype: bool.\n\n    "
    },
    {
        "ID": 384,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function getFolder() { $table = $this->getTable(); $table = (!empty($table)) ? $table . DS : null; $seed = $this->getSeed(); $seed = (!empty($seed)) ? $seed . DS : null; return $this->getRoot() . DS . $table . $this->getField() . DS . $seed; }\n\n    ### Response: Return the absolute path to the containing parent folder where all the files will be uploaded\n\n@return string.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String getBindingSource() { if (source instanceof Class) { return StackTraceElements.forType((Class) source).toString(); } else if (source instanceof Member) { return StackTraceElements.forMember((Member) source).toString(); } else { return source.toString(); } }\n\n    ### Response:",
        "ground_truth": "Returns a string describing where this dependency was bound. If the binding was just-in-time,\nthere is no valid binding source, so this describes the class in question.",
        "predict": " Return the absolute path to the containing parent folder where all the files will be uploaded\n\n@return string.\n\n    "
    },
    {
        "ID": 385,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void setParameter(MethodDescriptor methodDesc, int param, TypeQualifierValue<?> tqv, TypeQualifierAnnotation tqa) { Map<TypeQualifierValue<?>, TypeQualifierAnnotation> map = parameterMap.get(methodDesc, param); if (map == null) { map = new HashMap<>(); parameterMap.put(methodDesc, param, map); } map.put(tqv, tqa); if (DEBUG) { System.out.println(\"tqdb: \" + methodDesc + \" parameter \" + param + \" for \" + tqv + \" ==> \" + tqa); } }\n\n    ### Response: Set a TypeQualifierAnnotation on a method parameter.\n\n@param methodDesc\nthe method\n@param param\nthe parameter (0 == first parameter)\n@param tqv\nthe type qualifier\n@param tqa\nthe type qualifier annotation.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String formatMessages(String heading, Collection<Message> errorMessages) { Formatter fmt = new Formatter().format(heading).format(\":%n%n\"); int index = 1; boolean displayCauses = getOnlyCause(errorMessages) == null; Map<Equivalence.Wrapper<Throwable>, Integer> causes = Maps.newHashMap(); for (Message errorMessage : errorMessages) { int thisIdx = index++; fmt.format(\"%s) %s%n\", thisIdx, errorMessage.getMessage()); List<Object> dependencies = errorMessage.getSources(); for (int i = dependencies.size() - 1; i >= 0; i--) { Object source = dependencies.get(i); formatSource(fmt, source); } Throwable cause = errorMessage.getCause(); if (displayCauses && cause != null) { Equivalence.Wrapper<Throwable> causeEquivalence = ThrowableEquivalence.INSTANCE.wrap(cause); if (!causes.containsKey(causeEquivalence)) { causes.put(causeEquivalence, thisIdx); fmt.format(\"Caused by: %s\", Throwables.getStackTraceAsString(cause)); } else { int causeIdx = causes.get(causeEquivalence); fmt.format( \"Caused by: %s (same stack trace as error #%s)\", cause.getClass().getName(), causeIdx); } } fmt.format(\"%n\"); } if (errorMessages.size() == 1) { fmt.format(\"1 error\"); } else { fmt.format(\"%s errors\", errorMessages.size()); } return fmt.toString(); }\n\n    ### Response:",
        "ground_truth": "Returns the formatted message for an exception with the specified messages.",
        "predict": " Set a TypeQualifierAnnotation on a method parameter.\n\n@param methodDesc\nthe method\n@param param\nthe parameter (0 == first parameter)\n@param tqv\nthe type qualifier\n@param tqa\nthe type qualifier annotation.\n\n    "
    },
    {
        "ID": 386,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public int getNumDeliverable() { NumDeliverable visitor=new NumDeliverable(); lock.lock(); try { forEach(hd+1, hr, visitor); return visitor.getResult(); } finally { lock.unlock(); } }\n\n    ### Response: Returns the number of messages that can be delivered.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Message create(String messageFormat, Object... arguments) { return create(null, messageFormat, arguments); }\n\n    ### Response:",
        "ground_truth": "Creates a new Message without a cause.\n\n@param messageFormat Format string\n@param arguments format string arguments",
        "predict": " Returns the number of messages that can be delivered.\n\n    "
    },
    {
        "ID": 387,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def abort_expired_batches(self, request_timeout_ms, cluster): \"\"\"Abort the batches that have been sitting in RecordAccumulator for more than the configured request_timeout due to metadata being unavailable. Arguments: request_timeout_ms (int): milliseconds to timeout cluster (ClusterMetadata): current metadata for kafka cluster Returns: list of ProducerBatch that were expired \"\"\" expired_batches = [] to_remove = [] count = 0 for tp in list(self._batches.keys()): assert tp in self._tp_locks, 'TopicPartition not in locks dict' # We only check if the batch should be expired if the partition # does not have a batch in flight. This is to avoid the later # batches get expired when an earlier batch is still in progress. # This protection only takes effect when user sets # max.in.flight.request.per.connection=1. Otherwise the expiration # order is not guranteed. if tp in self.muted: continue with self._tp_locks[tp]: # iterate over the batches and expire them if they have stayed # in accumulator for more than request_timeout_ms dq = self._batches[tp] for batch in dq: is_full = bool(bool(batch != dq[-1]) or batch.records.is_full()) # check if the batch is expired if batch.maybe_expire(request_timeout_ms, self.config['retry_backoff_ms'], self.config['linger_ms'], is_full): expired_batches.append(batch) to_remove.append(batch) count += 1 self.deallocate(batch) else: # Stop at the first batch that has not expired. break # Python does not allow us to mutate the dq during iteration # Assuming expired batches are infrequent, this is better than # creating a new copy of the deque for iteration on every loop if to_remove: for batch in to_remove: dq.remove(batch) to_remove = [] if expired_batches: log.warning(\"Expired %d batches in accumulator\", count) # trace return expired_batches\n\n    ### Response: Abort the batches that have been sitting in RecordAccumulator for\n        more than the configured request_timeout due to metadata being\n        unavailable.\n\n        Arguments:\n            request_timeout_ms (int): milliseconds to timeout\n            cluster (ClusterMetadata): current metadata for kafka cluster\n\n        Returns:\n            list of ProducerBatch that were expired.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Message create(Throwable cause, String messageFormat, Object... arguments) { return create(cause, ImmutableList.of(), messageFormat, arguments); }\n\n    ### Response:",
        "ground_truth": "Creates a new Message with the given cause.\n\n@param cause The exception that caused the error\n@param messageFormat Format string\n@param arguments format string arguments",
        "predict": " Abort the batches that have been sitting in RecordAccumulator for\n        more than the configured request_timeout due to metadata being\n        unavailable.\n\n        Arguments:\n            request_timeout_ms (int): milliseconds to timeout\n            cluster (ClusterMetadata): current metadata for kafka cluster\n\n        Returns:\n            list of ProducerBatch that were expired.\n\n    "
    },
    {
        "ID": 388,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (r *Response) AttachmentData(dataType AttachmentType, filename string, filedata io.Reader) error { filedataBytes, err := ioutil.ReadAll(filedata) if err != nil { return err } contentType := http.DetectContentType(filedataBytes[:512]) fmt.Println(\"Content-type detected:\", contentType) var body bytes.Buffer multipartWriter := multipart.NewWriter(&body) data, err := createFormFile(filename, multipartWriter, contentType) if err != nil { return err } _, err = bytes.NewBuffer(filedataBytes).WriteTo(data) if err != nil { return err } multipartWriter.WriteField(\"recipient\", fmt.Sprintf(`{\"id\":\"%v\"}`, r.to.ID)) multipartWriter.WriteField(\"message\", fmt.Sprintf(`{\"attachment\":{\"type\":\"%v\", \"payload\":{}}}`, dataType)) req, err := http.NewRequest(\"POST\", SendMessageURL, &body) if err != nil { return err } req.URL.RawQuery = \"access_token=\" + r.token req.Header.Set(\"Content-Type\", multipartWriter.FormDataContentType()) client := &http.Client{} resp, err := client.Do(req) if err != nil { return err } return checkFacebookError(resp.Body) }\n\n    ### Response: // AttachmentData sends an image, sound, video or a regular file to a chat via an io.Reader..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Message create( Throwable cause, List<Object> sources, String messageFormat, Object... arguments) { String message = format(messageFormat, arguments); return new Message(sources, message, cause); }\n\n    ### Response:",
        "ground_truth": "Creates a new Message with the given cause and a binding source stack.\n\n@param cause The exception that caused the error\n@param sources The binding sources for the source stack\n@param messageFormat Format string\n@param arguments format string arguments",
        "predict": " // AttachmentData sends an image, sound, video or a regular file to a chat via an io.Reader..\n\n    "
    },
    {
        "ID": 389,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (cli *Client) RebellionLocalprocsGet(appname string) (*pb.RebellionLocalprocsReply, error) { req := &pb.RebellionLocalprocsRequest{Appname: appname} ctx, cancel := context.WithTimeout(context.Background(), cli.timeout) defer cancel() rpl, err := cli.rebellionLocalprocsClient.Get(ctx, req) return rpl, err }\n\n    ### Response: //CODE GENERATION Proxy END\n//CODE GENERATION RebellionLocalprocs START.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    static Object convert(Object o) { ElementSource source = null; if (o instanceof ElementSource) { source = (ElementSource) o; o = source.getDeclaringSource(); } return convert(o, source); }\n\n    ### Response:",
        "ground_truth": "Formats an object in a user friendly way.",
        "predict": " //CODE GENERATION Proxy END\n//CODE GENERATION RebellionLocalprocs START.\n\n    "
    },
    {
        "ID": 390,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static ClassGraphException newClassGraphException(final String message, final Throwable cause) throws ClassGraphException { return new ClassGraphException(message, cause); }\n\n    ### Response: Static factory method to stop IDEs from auto-completing ClassGraphException after \"new ClassGraph\".\n\n@param message\nthe message\n@param cause\nthe cause\n@return the ClassGraphException\n@throws ClassGraphException\nthe class graph exception.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private boolean shouldBeSkipped(String className) { return (parent != null && parent.shouldBeSkipped(className)) || classNamesToSkip.contains(className); }\n\n    ### Response:",
        "ground_truth": "Returns true if the className should be skipped.",
        "predict": " Static factory method to stop IDEs from auto-completing ClassGraphException after \"new ClassGraph\".\n\n@param message\nthe message\n@param cause\nthe cause\n@return the ClassGraphException\n@throws ClassGraphException\nthe class graph exception.\n\n    "
    },
    {
        "ID": 391,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (c *Client) UpdateHealthCheck(i *UpdateHealthCheckInput) (*HealthCheck, error) { if i.Service == \"\" { return nil, ErrMissingService } if i.Version == 0 { return nil, ErrMissingVersion } if i.Name == \"\" { return nil, ErrMissingName } path := fmt.Sprintf(\"/service/%s/version/%d/healthcheck/%s\", i.Service, i.Version, i.Name) resp, err := c.PutForm(path, i, nil) if err != nil { return nil, err } var h *HealthCheck if err := decodeJSON(&h, resp.Body); err != nil { return nil, err } return h, nil }\n\n    ### Response: // UpdateHealthCheck updates a specific health check..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Object getFromClassNames(List<String> moduleClassNames) { Preconditions.checkNotNull(moduleClassNames, \"The list of module class names cannot be null.\"); for (final String moduleClassName : moduleClassNames) { if (!shouldBeSkipped(moduleClassName)) { return new StackTraceElement(moduleClassName, \"configure\", null, -1); } } return UNKNOWN_SOURCE; }\n\n    ### Response:",
        "ground_truth": "Returns the non-skipped module class name.",
        "predict": " // UpdateHealthCheck updates a specific health check..\n\n    "
    },
    {
        "ID": 392,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func buildInternalNkeyUser(uc *jwt.UserClaims, acc *Account) *NkeyUser { nu := &NkeyUser{Nkey: uc.Subject, Account: acc} if uc.IssuerAccount != \"\" { nu.SigningKey = uc.Issuer } // Now check for permissions. var p *Permissions if len(uc.Pub.Allow) > 0 || len(uc.Pub.Deny) > 0 { if p == nil { p = &Permissions{} } p.Publish = &SubjectPermission{} p.Publish.Allow = uc.Pub.Allow p.Publish.Deny = uc.Pub.Deny } if len(uc.Sub.Allow) > 0 || len(uc.Sub.Deny) > 0 { if p == nil { p = &Permissions{} } p.Subscribe = &SubjectPermission{} p.Subscribe.Allow = uc.Sub.Allow p.Subscribe.Deny = uc.Sub.Deny } nu.Permissions = p return nu }\n\n    ### Response: // Helper to build internal NKeyUser..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void main(String[] args) throws Exception { if (args.length != 1) { System.err.println( \"Usage: java -Dcom.sun.management.jmxremote \" + Manager.class.getName() + \" [module class name]\"); System.err.println(\"Then run 'jconsole' to connect.\"); System.exit(1); } Module module = (Module) Class.forName(args[0]).newInstance(); Injector injector = Guice.createInjector(module); manage(args[0], injector); System.out.println(\"Press Ctrl+C to exit...\"); // Sleep forever. Thread.sleep(Long.MAX_VALUE); }\n\n    ### Response:",
        "ground_truth": "Run with no arguments for usage instructions.",
        "predict": " // Helper to build internal NKeyUser..\n\n    "
    },
    {
        "ID": 393,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def create_shot(self, ): \"\"\"Create a shot and store it in the self.shot :returns: None :rtype: None :raises: None \"\"\" name = self.name_le.text() if not name: self.name_le.setPlaceholderText(\"Please enter a name!\") return desc = self.desc_pte.toPlainText() try: shot = djadapter.models.Shot(sequence=self.sequence, project=self.sequence.project, name=name, description=desc) shot.save() self.shot = shot self.accept() except: log.exception(\"Could not create new shot\")\n\n    ### Response: Create a shot and store it in the self.shot\n\n        :returns: None\n        :rtype: None\n        :raises: None.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    Dependency<?> pushDependency(Dependency<?> dependency, Object source) { Dependency<?> previous = this.dependency; this.dependency = dependency; doPushState(dependency, source); return previous; }\n\n    ### Response:",
        "ground_truth": "Sets the new current dependency & adds it to the state.",
        "predict": " Create a shot and store it in the self.shot\n\n        :returns: None\n        :rtype: None\n        :raises: None.\n\n    "
    },
    {
        "ID": 394,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function getRootBlock() { var blocks = mainWorkspace.getTopBlocks(false); for (var i = 0, block; block = blocks[i]; i++) { if (block.type == 'factory_base') { return block; } } return null; }\n\n    ### Response: Return the uneditable container block that everything else attaches to.\n@return {Blockly.Block}.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    void pushState(com.google.inject.Key<?> key, Object source) { doPushState(key, source); }\n\n    ### Response:",
        "ground_truth": "Adds to the state without setting the dependency.",
        "predict": " Return the uneditable container block that everything else attaches to.\n@return {Blockly.Block}.\n\n    "
    },
    {
        "ID": 395,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String extractClassName(Description description) { final String displayName = description.getDisplayName(); final String regex = \"^\" + \"[^\\\\(\\\\)]+\" // non-parens + \"\\\\((\" // then an open-paren (start matching a group) + \"[^\\\\\\\\(\\\\\\\\)]+\" // non-parens + \")\\\\)\" + \"$\"; // System.out.println(regex); final Pattern parens = Pattern.compile(regex); // then a close-paren // (end group match) final Matcher m = parens.matcher(displayName); if (!m.find()) { return displayName; } return m.group(1); }\n\n    ### Response: Extract the class name from a given junit test description\n\n@param description\n@return a class name.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    static <T> Initializable<T> of(final T instance) { return new Initializable<T>() { @Override public T get() { return instance; } @Override public String toString() { return String.valueOf(instance); } }; }\n\n    ### Response:",
        "ground_truth": "Returns an initializable for an instance that requires no initialization.",
        "predict": " Extract the class name from a given junit test description\n\n@param description\n@return a class name.\n\n    "
    },
    {
        "ID": 396,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _normalize_server_url(self, server): \"\"\" Check if the server URL starts with a HTTP or HTTPS scheme, fall back to http if not present \"\"\" server = server if server.startswith((\"http://\", \"https://\")) else \"http://{}\".format(server) return server\n\n    ### Response: Check if the server URL starts with a HTTP or HTTPS scheme, fall back to http if not present.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected T provision( Provider<? extends T> provider, Dependency<?> dependency, ConstructionContext<T> constructionContext) throws InternalProvisionException { T t = provider.get(); if (t == null && !dependency.isNullable()) { InternalProvisionException.onNullInjectedIntoNonNullableDependency(source, dependency); } constructionContext.setProxyDelegates(t); return t; }\n\n    ### Response:",
        "ground_truth": "Provisions a new instance. Subclasses should override this to catch exceptions & rethrow as\nErrorsExceptions.",
        "predict": " Check if the server URL starts with a HTTP or HTTPS scheme, fall back to http if not present.\n\n    "
    },
    {
        "ID": 397,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def helper helper, opts = {}, &proc proc || raise(ArgumentError, 'block is missing') helpers[helper] = [proc, opts] end\n\n    ### Response: define custom assertion helpers.\n\n @note  helpers can be overridden by name,\n that's it, if some spec inherits `:a_duck?` helper\n you can use `helper(:a_duck?) { ... }` to override it.\n\n @note  tested object are passed to helper via first argument.\n   any arguments passed to helper are sent after tested object.\n\n @note  if a block used on left side,\n   it will be passed as last argument and the helper is responsible to call it.\n   please note that block will be passed as usual argument rather than a block.\n\n @note  if you need the current context to be passed into helper\n   use `:with_context` option. when doing so,\n   the context will come as last argument.\n\n @example\n\n   describe SomeTest do\n\n     helper :a_pizza? do |food|\n       does(food) =~  /cheese/\n       does(food) =~ /olives/\n     end\n\n     testing :foods do\n       food = Cook.some_food(with: 'cheese', and: 'olives')\n       is(food).a_pizza? #=> passed\n\n       food = Cook.some_food(with: 'potatoes')\n       is(food).a_pizza? #=> failed\n     end\n   end\n\n @example any other arguments are sent after tested object\n\n   describe SomeTest do\n\n     helper :a_pizza? do |food, ingredients|\n       does(food) =~ /dough/\n       does(ingredients).include? 'cheese'\n       does(ingredients).include? 'olives'\n     end\n\n     testing :foods do\n       ingredients = ['cheese', 'olives']\n       food = Cook.some_food(ingredients)\n       is(food).a_pizza? ingredients\n     end\n   end\n\n @example  given block passed as last argument\n\n    # block comes as a usual argument rather than a block\n    helper :is_invalid do |attr, block|\n      e = assert(&block).raise(FormulaValidationError)\n      assert(e.attr) == attr\n    end\n\n    test 'validates name' do\n      assert(:name).is_invalid do\n        formula \"name with spaces\" do\n          url \"foo\"\n          version \"1.0\"\n        end\n      end\n    end\n\n @example  using `with_context` option to get context as last argument\n\n   describe SomeTest do\n\n     helper :a_pizza?, with_context: true do |subject, ingredients, context|\n       # context is a Hash containing :left_method, left_object, :left_proc and :negation keys\n     end\n\n     testing :foods do\n       is(:smth).a_pizza? ['some', 'ingredients']\n       # helper's context will look like:\n       # {left_method: :is, left_object: :smth, left_proc: nil, negation: nil}\n\n       is { smth }.a_pizza? ['some', 'ingredients']\n       # helper's context will look like:\n       # {left_method: :is, left_object: nil, left_proc: 'the -> { smth } proc', negation: nil}\n     end\n   end.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void onEvent(ConnectionEventType type, String remoteAddr, Connection conn) { List<ConnectionEventProcessor> processorList = this.processors.get(type); if (processorList != null) { for (ConnectionEventProcessor processor : processorList) { processor.onEvent(remoteAddr, conn); } } }\n\n    ### Response:",
        "ground_truth": "Dispatch events.\n\n@param type\n@param remoteAddr\n@param conn",
        "predict": " define custom assertion helpers.\n\n @note  helpers can be overridden by name,\n that's it, if some spec inherits `:a_duck?` helper\n you can use `helper(:a_duck?) { ... }` to override it.\n\n @note  tested object are passed to helper via first argument.\n   any arguments passed to helper are sent after tested object.\n\n @note  if a block used on left side,\n   it will be passed as last argument and the helper is responsible to call it.\n   please note that block will be passed as usual argument rather than a block.\n\n @note  if you need the current context to be passed into helper\n   use `:with_context` option. when doing so,\n   the context will come as last argument.\n\n @example\n\n   describe SomeTest do\n\n     helper :a_pizza? do |food|\n       does(food) =~  /cheese/\n       does(food) =~ /olives/\n     end\n\n     testing :foods do\n       food = Cook.some_food(with: 'cheese', and: 'olives')\n       is(food).a_pizza? #=> passed\n\n       food = Cook.some_food(with: 'potatoes')\n       is(food).a_pizza? #=> failed\n     end\n   end\n\n @example any other arguments are sent after tested object\n\n   describe SomeTest do\n\n     helper :a_pizza? do |food, ingredients|\n       does(food) =~ /dough/\n       does(ingredients).include? 'cheese'\n       does(ingredients).include? 'olives'\n     end\n\n     testing :foods do\n       ingredients = ['cheese', 'olives']\n       food = Cook.some_food(ingredients)\n       is(food).a_pizza? ingredients\n     end\n   end\n\n @example  given block passed as last argument\n\n    # block comes as a usual argument rather than a block\n    helper :is_invalid do |attr, block|\n      e = assert(&block).raise(FormulaValidationError)\n      assert(e.attr) == attr\n    end\n\n    test 'validates name' do\n      assert(:name).is_invalid do\n        formula \"name with spaces\" do\n          url \"foo\"\n          version \"1.0\"\n        end\n      end\n    end\n\n @example  using `with_context` option to get context as last argument\n\n   describe SomeTest do\n\n     helper :a_pizza?, with_context: true do |subject, ingredients, context|\n       # context is a Hash containing :left_method, left_object, :left_proc and :negation keys\n     end\n\n     testing :foods do\n       is(:smth).a_pizza? ['some', 'ingredients']\n       # helper's context will look like:\n       # {left_method: :is, left_object: :smth, left_proc: nil, negation: nil}\n\n       is { smth }.a_pizza? ['some', 'ingredients']\n       # helper's context will look like:\n       # {left_method: :is, left_object: nil, left_proc: 'the -> { smth } proc', negation: nil}\n     end\n   end.\n\n    "
    },
    {
        "ID": 398,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function recordActivity($event) { $this->activity()->create([ 'user_id' => auth()->id(), 'type' => $this->getActivityType($event) ]); }\n\n    ### Response: Record new activity for the model.\n\n@param string $event.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void addConnectionEventProcessor(ConnectionEventType type, ConnectionEventProcessor processor) { List<ConnectionEventProcessor> processorList = this.processors.get(type); if (processorList == null) { this.processors.putIfAbsent(type, new ArrayList<ConnectionEventProcessor>(1)); processorList = this.processors.get(type); } processorList.add(processor); }\n\n    ### Response:",
        "ground_truth": "Add event processor.\n\n@param type\n@param processor",
        "predict": " Record new activity for the model.\n\n@param string $event.\n\n    "
    },
    {
        "ID": 399,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function(sortedInputEvents) { var protoIRs = []; forEventTypesIn(sortedInputEvents, KEYBOARD_TYPE_NAMES, function(event) { var pir = new ProtoIR(ProtoIR.RESPONSE_TYPE, KEYBOARD_IR_NAME); pir.pushEvent(event); protoIRs.push(pir); }); return protoIRs; }\n\n    ### Response: Every keyboard event is a Response..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static <T> T getFutureTaskResult(RunStateRecordedFutureTask<T> task, Logger logger) { T t = null; if (null != task) { try { t = task.getAfterRun(); } catch (InterruptedException e) { logger.error(\"Future task interrupted!\", e); } catch (ExecutionException e) { logger.error(\"Future task execute failed!\", e); } catch (FutureTaskNotRunYetException e) { logger.error(\"Future task has not run yet!\", e); } catch (FutureTaskNotCompleted e) { logger.error(\"Future task has not completed!\", e); } } return t; }\n\n    ### Response:",
        "ground_truth": "get the result of a future task\n\nNotice: the run method of this task should have been called at first.\n\n@param task\n@param \n@return",
        "predict": " Every keyboard event is a Response..\n\n    "
    },
    {
        "ID": 400,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function getTreeSize($fighterCount, $groupSize) { $squareMultiplied = collect([1, 2, 4, 8, 16, 32, 64]) ->map(function ($item) use ($groupSize) { return $item * $groupSize; }); // [4, 8, 16, 32, 64,...] foreach ($squareMultiplied as $limit) { if ($fighterCount <= $limit) { $treeSize = $limit; $numAreas = $this->settings->fightingAreas; $fighterCountPerArea = $treeSize / $numAreas; if ($fighterCountPerArea < $groupSize) { $treeSize = $treeSize * $numAreas; } return $treeSize; } } return 64 * $groupSize; }\n\n    ### Response: Get the size the first round will have.\n\n@param $fighterCount\n@param $groupSize\n\n@return int.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void launderThrowable(Throwable t) { if (t instanceof RuntimeException) { throw (RuntimeException) t; } else if (t instanceof Error) { throw (Error) t; } else { throw new IllegalStateException(\"Not unchecked!\", t); } }\n\n    ### Response:",
        "ground_truth": "launder the throwable\n\n@param t",
        "predict": " Get the size the first round will have.\n\n@param $fighterCount\n@param $groupSize\n\n@return int.\n\n    "
    },
    {
        "ID": 401,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _post_scrape(self, value, processor=None): \"\"\"Apply processing to the scraped value.\"\"\" # Pass each value through the field's clean method value = [self.process(v) for v in value] # Filter None values value = [v for v in value if v is not None] # Pass each value through processors defined on the entity if processor: value = [processor(v) for v in value] value = [v for v in value if v is not None] # Take first unless all is specified if not self.all: value = value[0] if value else None log.debug('Scraped %s: %s from %s' % (self.name, value, self.selection)) return value\n\n    ### Response: Apply processing to the scraped value..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void registerProcessor(CommandCode cmdCode, RemotingProcessor<?> processor) { if (this.cmd2processors.containsKey(cmdCode)) { logger .warn( \"Processor for cmd={} is already registered, the processor is {}, and changed to {}\", cmdCode, cmd2processors.get(cmdCode).getClass().getName(), processor.getClass() .getName()); } this.cmd2processors.put(cmdCode, processor); }\n\n    ### Response:",
        "ground_truth": "Register processor to process command that has the command code of cmdCode.\n\n@param cmdCode\n@param processor",
        "predict": " Apply processing to the scraped value..\n\n    "
    },
    {
        "ID": 402,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func MakeGetProfileEndpoint(s Service) endpoint.Endpoint { return func(ctx context.Context, request interface{}) (response interface{}, err error) { req := request.(getProfileRequest) p, e := s.GetProfile(ctx, req.ID) return getProfileResponse{Profile: p, Err: e}, nil } }\n\n    ### Response: // MakeGetProfileEndpoint returns an endpoint via the passed service.\n// Primarily useful in a server..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void registerDefaultProcessor(RemotingProcessor<?> processor) { if (this.defaultProcessor == null) { this.defaultProcessor = processor; } else { throw new IllegalStateException(\"The defaultProcessor has already been registered: \" + this.defaultProcessor.getClass()); } }\n\n    ### Response:",
        "ground_truth": "Register the default processor to process command with no specific processor registered.\n\n@param processor",
        "predict": " // MakeGetProfileEndpoint returns an endpoint via the passed service.\n// Primarily useful in a server..\n\n    "
    },
    {
        "ID": 403,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public final String getDestName() { if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled()) SibTr.entry(tc, \"getDestName\"); if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled()) SibTr.exit(tc, \"getDestName\", destName); return destName; }\n\n    ### Response: Return the destination name which this AOH is associated with.\n\n@return The destination name passed to this AOH during instantiation..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public RemotingProcessor<?> getProcessor(CommandCode cmdCode) { RemotingProcessor<?> processor = this.cmd2processors.get(cmdCode); if (processor != null) { return processor; } return this.defaultProcessor; }\n\n    ### Response:",
        "ground_truth": "Get the specific processor with command code of cmdCode if registered, otherwise the default processor is returned.\n\n@param cmdCode\n@return",
        "predict": " Return the destination name which this AOH is associated with.\n\n@return The destination name passed to this AOH during instantiation..\n\n    "
    },
    {
        "ID": 404,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public boolean apply(final Class<?> type, final Object value, final List<ValidationFailure> validationFailures) { if (getRequiredValueType().isAssignableFrom(value.getClass())) { validate(type, value, validationFailures); return true; } return false; }\n\n    ### Response: Applied validation for the given field.  If the value does not match the correct type, the validation is not applied and this method\nreturns false.  If the value is to be validated, then the validate method is called to see if the value and type are compatible.\nErrors are appended to the validationFailures list.\n\n@param type               the Class of the field being queried\n@param value              the non-null value being used for a query\n@param validationFailures the list to add any failures to. If validation passes or {@code appliesTo} returned false, this list will\nnot change.\n@return true if validation was applied, false if this validation doesn't apply to this field type..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private Url tryGet(String url) { SoftReference<Url> softRef = Url.parsedUrls.get(url); return (null == softRef) ? null : softRef.get(); }\n\n    ### Response:",
        "ground_truth": "try get from cache\n\n@param url\n@return",
        "predict": " Applied validation for the given field.  If the value does not match the correct type, the validation is not applied and this method\nreturns false.  If the value is to be validated, then the validate method is called to see if the value and type are compatible.\nErrors are appended to the validationFailures list.\n\n@param type               the Class of the field being queried\n@param value              the non-null value being used for a query\n@param validationFailures the list to add any failures to. If validation passes or {@code appliesTo} returned false, this list will\nnot change.\n@return true if validation was applied, false if this validation doesn't apply to this field type..\n\n    "
    },
    {
        "ID": 405,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _raw_aspera_metadata(self, bucket): ''' get the Aspera connection details on Aspera enabled buckets ''' response = self._client.get_bucket_aspera(Bucket=bucket) # Parse metadata from response aspera_access_key = response['AccessKey']['Id'] aspera_secret_key = response['AccessKey']['Secret'] ats_endpoint = response['ATSEndpoint'] return aspera_access_key, aspera_secret_key, ats_endpoint\n\n    ### Response: get the Aspera connection details on Aspera enabled buckets.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected ProtocolCode decodeProtocolCode(ByteBuf in) { if (in.readableBytes() >= protocolCodeLength) { byte[] protocolCodeBytes = new byte[protocolCodeLength]; in.readBytes(protocolCodeBytes); return ProtocolCode.fromBytes(protocolCodeBytes); } return null; }\n\n    ### Response:",
        "ground_truth": "decode the protocol code\n\n@param in input byte buf\n@return an instance of ProtocolCode",
        "predict": " get the Aspera connection details on Aspera enabled buckets.\n\n    "
    },
    {
        "ID": 406,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function(aggregate, vm, callback) { self.validate(cmd.command, cmd.payload, function(err) { callback(err, aggregate, vm); }); }\n\n    ### Response: call validate command.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public Map<String, List<Connection>> getAll() { Map<String, List<Connection>> allConnections = new HashMap<String, List<Connection>>(); Iterator<Map.Entry<String, RunStateRecordedFutureTask<ConnectionPool>>> iterator = this .getConnPools().entrySet().iterator(); while (iterator.hasNext()) { Map.Entry<String, RunStateRecordedFutureTask<ConnectionPool>> entry = iterator.next(); ConnectionPool pool = FutureTaskUtil.getFutureTaskResult(entry.getValue(), logger); if (null != pool) { allConnections.put(entry.getKey(), pool.getAll()); } } return allConnections; }\n\n    ### Response:",
        "ground_truth": "Get all connections of all poolKey.\n\n@return a map with poolKey as key and a list of connections in ConnectionPool as value",
        "predict": " call validate command.\n\n    "
    },
    {
        "ID": 407,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def make_value_from_shell(self, param, value_type, function): \"\"\" run command in the shell \"\"\" try: value = check_output(param, shell=True).rstrip() except CalledProcessError: # for value_type of 'bool' we return False on error code if value_type == \"bool\": value = False else: if self.py3_wrapper: self.py3_wrapper.report_exception( msg=\"shell: called with command `%s`\" % param ) self.notify_user(\"shell script exited with an error\") value = None else: # if the value_type is 'bool' then we return True for success if value_type == \"bool\": value = True else: # convert bytes to unicode value = value.decode(\"utf-8\") value = self.value_convert(value, value_type) return value\n\n    ### Response: run command in the shell.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public void scan() { if (null != this.connTasks && !this.connTasks.isEmpty()) { Iterator<String> iter = this.connTasks.keySet().iterator(); while (iter.hasNext()) { String poolKey = iter.next(); ConnectionPool pool = this.getConnectionPool(this.connTasks.get(poolKey)); if (null != pool) { pool.scan(); if (pool.isEmpty()) { if ((System.currentTimeMillis() - pool.getLastAccessTimestamp()) > DEFAULT_EXPIRE_TIME) { iter.remove(); logger.warn(\"Remove expired pool task of poolKey {} which is empty.\", poolKey); } } } } } }\n\n    ### Response:",
        "ground_truth": "in case of cache pollution and connection leak, to do schedule scan\n\n@see com.alipay.remoting.Scannable#scan()",
        "predict": " run command in the shell.\n\n    "
    },
    {
        "ID": 408,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def changed(self): \"\"\" Returns list of modified ``FileNode`` objects. \"\"\" if not self.parents: return [] return ChangedFileNodesGenerator([n for n in self._get_paths_for_status('modified')], self)\n\n    ### Response: Returns list of modified ``FileNode`` objects..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public Connection getAndCreateIfAbsent(Url url) throws InterruptedException, RemotingException { // get and create a connection pool with initialized connections. ConnectionPool pool = this.getConnectionPoolAndCreateIfAbsent(url.getUniqueKey(), new ConnectionPoolCall(url)); if (null != pool) { return pool.get(); } else { logger.error(\"[NOTIFYME] bug detected! pool here must not be null!\"); return null; } }\n\n    ### Response:",
        "ground_truth": "If no task cached, create one and initialize the connections.\n\n@see ConnectionManager#getAndCreateIfAbsent(Url)",
        "predict": " Returns list of modified ``FileNode`` objects..\n\n    "
    },
    {
        "ID": 409,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function beforeSerialize(array $data) { foreach ($data as $idx => &$value) { if ($value instanceof \\DateTime) { $value = $value->format('Y-m-d H:i:s'); } } return $data; }\n\n    ### Response: Process data before serialization\n\n@param array $data Data before serialization\n\n@return array Processed data before serialization.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public void createConnectionAndHealIfNeed(Url url) throws InterruptedException, RemotingException { // get and create a connection pool with initialized connections. ConnectionPool pool = this.getConnectionPoolAndCreateIfAbsent(url.getUniqueKey(), new ConnectionPoolCall(url)); if (null != pool) { healIfNeed(pool, url); } else { logger.error(\"[NOTIFYME] bug detected! pool here must not be null!\"); } }\n\n    ### Response:",
        "ground_truth": "If no task cached, create one and initialize the connections.\nIf task cached, check whether the number of connections adequate, if not then heal it.\n\n@param url\n@return\n@throws InterruptedException\n@throws RemotingException",
        "predict": " Process data before serialization\n\n@param array $data Data before serialization\n\n@return array Processed data before serialization.\n\n    "
    },
    {
        "ID": 410,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function syncPagesbar() { if ($pages[0] && last.page !== rel.activePage) { last.page = rel.activePage; $pages.removeClass(o.activeClass).eq(rel.activePage).addClass(o.activeClass); } }\n\n    ### Response: Synchronizes pagesbar with SLIDEE.\n\n@return {Void}.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void removeTask(String poolKey) { RunStateRecordedFutureTask<ConnectionPool> task = this.connTasks.remove(poolKey); if (null != task) { ConnectionPool pool = FutureTaskUtil.getFutureTaskResult(task, logger); if (null != pool) { pool.removeAllAndTryClose(); } } }\n\n    ### Response:",
        "ground_truth": "remove task and remove all connections\n\n@param poolKey",
        "predict": " Synchronizes pagesbar with SLIDEE.\n\n@return {Void}.\n\n    "
    },
    {
        "ID": 411,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def decode_json_body(): \"\"\" Decode ``bottle.request.body`` to JSON. Returns: obj: Structure decoded by ``json.loads()``. Raises: HTTPError: 400 in case the data was malformed. \"\"\" raw_data = request.body.read() try: return json.loads(raw_data) except ValueError as e: raise HTTPError(400, e.__str__())\n\n    ### Response: Decode ``bottle.request.body`` to JSON.\n\n    Returns:\n        obj: Structure decoded by ``json.loads()``.\n\n    Raises:\n        HTTPError: 400 in case the data was malformed..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void healIfNeed(ConnectionPool pool, Url url) throws RemotingException, InterruptedException { String poolKey = url.getUniqueKey(); // only when async creating connections done // and the actual size of connections less than expected, the healing task can be run. if (pool.isAsyncCreationDone() && pool.size() < url.getConnNum()) { FutureTask<Integer> task = this.healTasks.get(poolKey); if (null == task) { task = new FutureTask<Integer>(new HealConnectionCall(url, pool)); task = this.healTasks.putIfAbsent(poolKey, task); if (null == task) { task = this.healTasks.get(poolKey); task.run(); } } try { int numAfterHeal = task.get(); if (logger.isDebugEnabled()) { logger.debug(\"[NOTIFYME] - conn num after heal {}, expected {}, warmup {}\", numAfterHeal, url.getConnNum(), url.isConnWarmup()); } } catch (InterruptedException e) { this.healTasks.remove(poolKey); throw e; } catch (ExecutionException e) { this.healTasks.remove(poolKey); Throwable cause = e.getCause(); if (cause instanceof RemotingException) { throw (RemotingException) cause; } else { FutureTaskUtil.launderThrowable(cause); } } // heal task is one-off, remove from cache directly after run this.healTasks.remove(poolKey); } }\n\n    ### Response:",
        "ground_truth": "execute heal connection tasks if the actual number of connections in pool is less than expected\n\n@param pool\n@param url",
        "predict": " Decode ``bottle.request.body`` to JSON.\n\n    Returns:\n        obj: Structure decoded by ``json.loads()``.\n\n    Raises:\n        HTTPError: 400 in case the data was malformed..\n\n    "
    },
    {
        "ID": 412,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (c *Host) StreamEvents(id string, ch chan *host.Event) (stream.Stream, error) { r := fmt.Sprintf(\"/host/jobs/%s\", id) if id == \"all\" { r = \"/host/jobs\" } return c.c.ResumingStream(\"GET\", r, ch) }\n\n    ### Response: // StreamEvents about job state changes to ch. id may be \"all\" or a single\n// job ID..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void doCreate(final Url url, final ConnectionPool pool, final String taskName, final int syncCreateNumWhenNotWarmup) throws RemotingException { final int actualNum = pool.size(); final int expectNum = url.getConnNum(); if (actualNum < expectNum) { if (logger.isDebugEnabled()) { logger.debug(\"actual num {}, expect num {}, task name {}\", actualNum, expectNum, taskName); } if (url.isConnWarmup()) { for (int i = actualNum; i < expectNum; ++i) { Connection connection = create(url); pool.add(connection); } } else { if (syncCreateNumWhenNotWarmup < 0 || syncCreateNumWhenNotWarmup > url.getConnNum()) { throw new IllegalArgumentException( \"sync create number when not warmup should be [0,\" + url.getConnNum() + \"]\"); } // create connection in sync way if (syncCreateNumWhenNotWarmup > 0) { for (int i = 0; i < syncCreateNumWhenNotWarmup; ++i) { Connection connection = create(url); pool.add(connection); } if (syncCreateNumWhenNotWarmup == url.getConnNum()) { return; } } // initialize executor in lazy way initializeExecutor(); pool.markAsyncCreationStart();// mark the start of async try { this.asyncCreateConnectionExecutor.execute(new Runnable() { @Override public void run() { try { for (int i = pool.size(); i < url.getConnNum(); ++i) { Connection conn = null; try { conn = create(url); } catch (RemotingException e) { logger .error( \"Exception occurred in async create connection thread for {}, taskName {}\", url.getUniqueKey(), taskName, e); } pool.add(conn); } } finally { pool.markAsyncCreationDone();// mark the end of async } } }); } catch (RejectedExecutionException e) { pool.markAsyncCreationDone();// mark the end of async when reject throw e; } } // end of NOT warm up } // end of if }\n\n    ### Response:",
        "ground_truth": "do create connections\n\n@param url\n@param pool\n@param taskName\n@param syncCreateNumWhenNotWarmup you can specify this param to ensure at least desired number of connections available in sync way\n@throws RemotingException",
        "predict": " // StreamEvents about job state changes to ch. id may be \"all\" or a single\n// job ID..\n\n    "
    },
    {
        "ID": 413,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func stateStepsFor236() []Step { return []Step{ &upgradeStep{ description: \"ensure container-image-stream config defaults to released\", targets: []Target{DatabaseMaster}, run: func(context Context) error { return context.State().EnsureContainerImageStreamDefault() }, }, } }\n\n    ### Response: // stateStepsFor236 returns upgrade steps for Juju 2.3.6 that manipulate state directly..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void closeConnection(String addr) { Url url = this.addressParser.parse(addr); this.connectionManager.remove(url.getUniqueKey()); }\n\n    ### Response:",
        "ground_truth": "Close all connections of a address\n\n@param addr",
        "predict": " // stateStepsFor236 returns upgrade steps for Juju 2.3.6 that manipulate state directly..\n\n    "
    },
    {
        "ID": 414,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _handle_bad_rest_arguments(self, controller, remainder, request): \"\"\" Ensure that the argspec for a discovered controller actually matched the positional arguments in the request path. If not, raise a webob.exc.HTTPBadRequest. \"\"\" argspec = self._get_args_for_controller(controller) fixed_args = len(argspec) - len( request.pecan.get('routing_args', []) ) if len(remainder) < fixed_args: # For controllers that are missing intermediate IDs # (e.g., /authors/books vs /authors/1/books), return a 404 for an # invalid path. abort(404)\n\n    ### Response: Ensure that the argspec for a discovered controller actually matched\n        the positional arguments in the request path.  If not, raise\n        a webob.exc.HTTPBadRequest..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void onClose() { Iterator<Entry<Integer, InvokeFuture>> iter = invokeFutureMap.entrySet().iterator(); while (iter.hasNext()) { Entry<Integer, InvokeFuture> entry = iter.next(); iter.remove(); InvokeFuture future = entry.getValue(); if (future != null) { future.putResponse(future.createConnectionClosedResponse(this.getRemoteAddress())); future.cancelTimeout(); future.tryAsyncExecuteInvokeCallbackAbnormally(); } } }\n\n    ### Response:",
        "ground_truth": "Do something when closing.",
        "predict": " Ensure that the argspec for a discovered controller actually matched\n        the positional arguments in the request path.  If not, raise\n        a webob.exc.HTTPBadRequest..\n\n    "
    },
    {
        "ID": 415,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function exists(string $command, array $arguments = []): bool { return $this->storage->contains(function ($value) use ($command, $arguments) { return $value['command'] === $command && $value['arguments'] === $arguments; }); }\n\n    ### Response: Determine if the given command exists with the given arguments.\n\n@param string $command\n@param array $arguments.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void close() { if (closed.compareAndSet(false, true)) { try { if (this.getChannel() != null) { this.getChannel().close().addListener(new ChannelFutureListener() { @Override public void operationComplete(ChannelFuture future) throws Exception { if (logger.isInfoEnabled()) { logger .info( \"Close the connection to remote address={}, result={}, cause={}\", RemotingUtil.parseRemoteAddress(Connection.this .getChannel()), future.isSuccess(), future.cause()); } } }); } } catch (Exception e) { logger.warn(\"Exception caught when closing connection {}\", RemotingUtil.parseRemoteAddress(Connection.this.getChannel()), e); } } }\n\n    ### Response:",
        "ground_truth": "Close the connection.",
        "predict": " Determine if the given command exists with the given arguments.\n\n@param string $command\n@param array $arguments.\n\n    "
    },
    {
        "ID": 416,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def clear_cached_values(self): \"\"\"Removes all of the cached values and interpolators \"\"\" self._prof_interp = None self._prof_y = None self._prof_z = None self._marg_interp = None self._marg_z = None self._post = None self._post_interp = None self._interp = None self._ret_type = None\n\n    ### Response: Removes all of the cached values and interpolators.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Object setAttributeIfAbsent(String key, Object value) { return attributes.putIfAbsent(key, value); }\n\n    ### Response:",
        "ground_truth": "set attribute if key absent.\n\n@param key\n@param value\n@return",
        "predict": " Removes all of the cached values and interpolators.\n\n    "
    },
    {
        "ID": 417,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function _fetchRemoteFile($url) { // try to fetch the file if ($this->_use_curl) { $connection = $this->_getCurlInitialization($url); $this->_curl_setopt($connection, CURLOPT_RETURNTRANSFER, 1); $this->_curl_setopt($connection, CURLOPT_HEADER, 0); // no SSL validation for downloading media $this->_curl_setopt($connection, CURLOPT_SSL_VERIFYPEER, 1); $this->_curl_setopt($connection, CURLOPT_SSL_VERIFYHOST, 2); $this->_curl_setopt($connection, CURLOPT_TIMEOUT_MS, $this->_timeouts['remote']); $this->_curl_setopt($connection, CURLOPT_CONNECTTIMEOUT_MS, $this->_timeouts['remote'] / 2); // find files that have been redirected $this->_curl_setopt($connection, CURLOPT_FOLLOWLOCATION, true); // process compressed images $this->_curl_setopt($connection, CURLOPT_ENCODING, 'gzip,deflate,sdch'); $result = $this->_curl_exec($connection); if ($result !== false && $this->_curl_getinfo($connection, CURLINFO_HTTP_CODE) === 200 ) { return $result; } throw new CodebirdMediaException('Downloading a remote media file failed.'); return false; } // no cURL $contextOptions = [ 'http' => [ 'method' => 'GET', 'protocol_version' => '1.1', 'timeout' => $this->_timeouts['remote'] ], 'ssl' => [ 'verify_peer' => false ] ]; list($result, $headers) = $this->_getNoCurlInitialization($url, $contextOptions); if ($result !== false && preg_match('/^HTTP\\/\\d\\.\\d 200 OK$/', $headers[0]) ) { return $result; } throw new CodebirdMediaException('Downloading a remote media file failed.'); return false; }\n\n    ### Response: Fetches a remote file\n\n@param string $url The URL to download from\n\n@return mixed The file contents or FALSE\n@throws \\Exception.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void registerUserProcessor(UserProcessor<?> processor, ConcurrentHashMap<String, UserProcessor<?>> userProcessors) { if (null == processor) { throw new RuntimeException(\"User processor should not be null!\"); } if (processor instanceof MultiInterestUserProcessor) { registerUserProcessor((MultiInterestUserProcessor) processor, userProcessors); } else { if (StringUtils.isBlank(processor.interest())) { throw new RuntimeException(\"Processor interest should not be blank!\"); } UserProcessor<?> preProcessor = userProcessors.putIfAbsent(processor.interest(), processor); if (preProcessor != null) { String errMsg = \"Processor with interest key [\" + processor.interest() + \"] has already been registered to rpc server, can not register again!\"; throw new RuntimeException(errMsg); } } }\n\n    ### Response:",
        "ground_truth": "Help register single-interest user processor.\n\n@param processor  the processor need to be registered\n@param userProcessors   the map of user processors",
        "predict": " Fetches a remote file\n\n@param string $url The URL to download from\n\n@return mixed The file contents or FALSE\n@throws \\Exception.\n\n    "
    },
    {
        "ID": 418,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void eliminateCallTargetArgAt(Node ref, int argIndex) { Node callArgNode = ReferenceMap.getArgumentForCallOrNewOrDotCall(ref, argIndex); if (callArgNode != null) { NodeUtil.deleteNode(callArgNode, compiler); } }\n\n    ### Response: Eliminates the parameter from a function call.\n@param definitionFinder The definition and use sites index.\n@param p\n@param call The function call node\n@param argIndex The index of the argument to remove..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static void registerUserProcessor(MultiInterestUserProcessor<?> processor, ConcurrentHashMap<String, UserProcessor<?>> userProcessors) { if (null == processor.multiInterest() || processor.multiInterest().isEmpty()) { throw new RuntimeException(\"Processor interest should not be blank!\"); } for (String interest : processor.multiInterest()) { UserProcessor<?> preProcessor = userProcessors.putIfAbsent(interest, processor); if (preProcessor != null) { String errMsg = \"Processor with interest key [\" + interest + \"] has already been registered to rpc server, can not register again!\"; throw new RuntimeException(errMsg); } } }\n\n    ### Response:",
        "ground_truth": "Help register multi-interest user processor.\n\n@param processor  the processor with multi-interest need to be registered\n@param userProcessors    the map of user processors",
        "predict": " Eliminates the parameter from a function call.\n@param definitionFinder The definition and use sites index.\n@param p\n@param call The function call node\n@param argIndex The index of the argument to remove..\n\n    "
    },
    {
        "ID": 419,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (f *File) AddLine(offset int) { f.set.mutex.Lock() if i := len(f.lines); (i == 0 || f.lines[i-1] < offset) && offset < f.size { f.lines = append(f.lines, offset) } f.set.mutex.Unlock() }\n\n    ### Response: // AddLine adds the line offset for a new line.\n// The line offset must be larger than the offset for the previous line\n// and smaller than the file size; otherwise the line offset is ignored.\n//.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void dispatchToUserProcessor(RemotingContext ctx, RpcRequestCommand cmd) { final int id = cmd.getId(); final byte type = cmd.getType(); // processor here must not be null, for it have been checked before UserProcessor processor = ctx.getUserProcessor(cmd.getRequestClass()); if (processor instanceof AsyncUserProcessor) { try { processor.handleRequest(processor.preHandleRequest(ctx, cmd.getRequestObject()), new RpcAsyncContext(ctx, cmd, this), cmd.getRequestObject()); } catch (RejectedExecutionException e) { logger .warn(\"RejectedExecutionException occurred when do ASYNC process in RpcRequestProcessor\"); sendResponseIfNecessary(ctx, type, this.getCommandFactory() .createExceptionResponse(id, ResponseStatus.SERVER_THREADPOOL_BUSY)); } catch (Throwable t) { String errMsg = \"AYSNC process rpc request failed in RpcRequestProcessor, id=\" + id; logger.error(errMsg, t); sendResponseIfNecessary(ctx, type, this.getCommandFactory() .createExceptionResponse(id, t, errMsg)); } } else { try { Object responseObject = processor .handleRequest(processor.preHandleRequest(ctx, cmd.getRequestObject()), cmd.getRequestObject()); sendResponseIfNecessary(ctx, type, this.getCommandFactory().createResponse(responseObject, cmd)); } catch (RejectedExecutionException e) { logger .warn(\"RejectedExecutionException occurred when do SYNC process in RpcRequestProcessor\"); sendResponseIfNecessary(ctx, type, this.getCommandFactory() .createExceptionResponse(id, ResponseStatus.SERVER_THREADPOOL_BUSY)); } catch (Throwable t) { String errMsg = \"SYNC process rpc request failed in RpcRequestProcessor, id=\" + id; logger.error(errMsg, t); sendResponseIfNecessary(ctx, type, this.getCommandFactory() .createExceptionResponse(id, t, errMsg)); } } }\n\n    ### Response:",
        "ground_truth": "dispatch request command to user processor\n@param ctx remoting context\n@param cmd rpc request command",
        "predict": " // AddLine adds the line offset for a new line.\n// The line offset must be larger than the offset for the previous line\n// and smaller than the file size; otherwise the line offset is ignored.\n//.\n\n    "
    },
    {
        "ID": 420,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def trustRootValid(self): \"\"\"Is my return_to under my trust_root? @returntype: bool \"\"\" if not self.trust_root: return True tr = TrustRoot.parse(self.trust_root) if tr is None: raise MalformedTrustRoot(self.message, self.trust_root) if self.return_to is not None: return tr.validateURL(self.return_to) else: return True\n\n    ### Response: Is my return_to under my trust_root?\n\n        @returntype: bool.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private boolean deserializeRequestCommand(RemotingContext ctx, RpcRequestCommand cmd, int level) { boolean result; try { cmd.deserialize(level); result = true; } catch (DeserializationException e) { logger .error( \"DeserializationException occurred when process in RpcRequestProcessor, id={}, deserializeLevel={}\", cmd.getId(), RpcDeserializeLevel.valueOf(level), e); sendResponseIfNecessary(ctx, cmd.getType(), this.getCommandFactory() .createExceptionResponse(cmd.getId(), ResponseStatus.SERVER_DESERIAL_EXCEPTION, e)); result = false; } catch (Throwable t) { String errMsg = \"Deserialize RpcRequestCommand failed in RpcRequestProcessor, id=\" + cmd.getId() + \", deserializeLevel=\" + level; logger.error(errMsg, t); sendResponseIfNecessary(ctx, cmd.getType(), this.getCommandFactory() .createExceptionResponse(cmd.getId(), t, errMsg)); result = false; } return result; }\n\n    ### Response:",
        "ground_truth": "deserialize request command\n\n@return true if deserialize success; false if exception catched",
        "predict": " Is my return_to under my trust_root?\n\n        @returntype: bool.\n\n    "
    },
    {
        "ID": 421,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func NewMemoryBackend() *MemoryBackend { return &MemoryBackend{ SessionQueueSize: 100, KillTimeout: 5 * time.Second, activeClients: make(map[string]*Client), storedSessions: make(map[string]*memorySession), temporarySessions: make(map[*Client]*memorySession), retainedMessages: topic.NewTree(), } }\n\n    ### Response: // NewMemoryBackend returns a new MemoryBackend..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void preProcessRemotingContext(RemotingContext ctx, RpcRequestCommand cmd, long currentTimestamp) { ctx.setArriveTimestamp(cmd.getArriveTime()); ctx.setTimeout(cmd.getTimeout()); ctx.setRpcCommandType(cmd.getType()); ctx.getInvokeContext().putIfAbsent(InvokeContext.BOLT_PROCESS_WAIT_TIME, currentTimestamp - cmd.getArriveTime()); }\n\n    ### Response:",
        "ground_truth": "pre process remoting context, initial some useful infos and pass to biz\n\n@param ctx remoting context\n@param cmd rpc request command\n@param currentTimestamp current timestamp",
        "predict": " // NewMemoryBackend returns a new MemoryBackend..\n\n    "
    },
    {
        "ID": 422,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (cred Credentials) IsExpired() bool { if cred.Expiration.IsZero() || cred.Expiration == timeSentinel { return false } return cred.Expiration.Before(time.Now().UTC()) }\n\n    ### Response: // IsExpired - returns whether Credential is expired or not..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void timeoutLog(final RpcRequestCommand cmd, long currentTimestamp, RemotingContext ctx) { if (logger.isDebugEnabled()) { logger .debug( \"request id [{}] currenTimestamp [{}] - arriveTime [{}] = server cost [{}] >= timeout value [{}].\", cmd.getId(), currentTimestamp, cmd.getArriveTime(), (currentTimestamp - cmd.getArriveTime()), cmd.getTimeout()); } String remoteAddr = \"UNKNOWN\"; if (null != ctx) { ChannelHandlerContext channelCtx = ctx.getChannelContext(); Channel channel = channelCtx.channel(); if (null != channel) { remoteAddr = RemotingUtil.parseRemoteAddress(channel); } } logger .warn( \"Rpc request id[{}], from remoteAddr[{}] stop process, total wait time in queue is [{}], client timeout setting is [{}].\", cmd.getId(), remoteAddr, (currentTimestamp - cmd.getArriveTime()), cmd.getTimeout()); }\n\n    ### Response:",
        "ground_truth": "print some log when request timeout and discarded in io thread.",
        "predict": " // IsExpired - returns whether Credential is expired or not..\n\n    "
    },
    {
        "ID": 423,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function isOSB (str, index) { var quote = str.charAt(index+1); if (quote === DQ || quote === SQ) { return { str: LSB + quote, index: index, quote: quote, jump: 1 }; } }\n\n    ### Response: Is it the first char of an opening square bracket expression?.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void debugLog(RemotingContext ctx, RpcRequestCommand cmd, long currentTimestamp) { if (logger.isDebugEnabled()) { logger.debug(\"Rpc request received! requestId={}, from {}\", cmd.getId(), RemotingUtil.parseRemoteAddress(ctx.getChannelContext().channel())); logger.debug( \"request id {} currenTimestamp {} - arriveTime {} = server cost {} < timeout {}.\", cmd.getId(), currentTimestamp, cmd.getArriveTime(), (currentTimestamp - cmd.getArriveTime()), cmd.getTimeout()); } }\n\n    ### Response:",
        "ground_truth": "print some debug log when receive request",
        "predict": " Is it the first char of an opening square bracket expression?.\n\n    "
    },
    {
        "ID": 424,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (s *InputDescription) SetInAppStreamNames(v []*string) *InputDescription { s.InAppStreamNames = v return s }\n\n    ### Response: // SetInAppStreamNames sets the InAppStreamNames field's value..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public void process(RemotingContext ctx, T msg, ExecutorService defaultExecutor) throws Exception { ProcessTask task = new ProcessTask(ctx, msg); if (this.getExecutor() != null) { this.getExecutor().execute(task); } else { defaultExecutor.execute(task); } }\n\n    ### Response:",
        "ground_truth": "Process the remoting command with its own executor or with the defaultExecutor if its own if null.\n\n@param ctx\n@param msg\n@param defaultExecutor\n@throws Exception",
        "predict": " // SetInAppStreamNames sets the InAppStreamNames field's value..\n\n    "
    },
    {
        "ID": 425,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function _set_stroke_color($color) { if($this->_last_stroke_color == $color) return; $this->_last_stroke_color = $color; if (isset($color[3])) { $type = \"cmyk\"; list($c1, $c2, $c3, $c4) = array($color[0], $color[1], $color[2], $color[3]); } elseif (isset($color[2])) { $type = \"rgb\"; list($c1, $c2, $c3, $c4) = array($color[0], $color[1], $color[2], null); } else { $type = \"gray\"; list($c1, $c2, $c3, $c4) = array($color[0], $color[1], null, null); } $this->_pdf->setcolor(\"stroke\", $type, $c1, $c2, $c3, $c4); }\n\n    ### Response: Sets the line color\n\n@param array $color array(r,g,b).\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void invokeWithCallback(final Connection conn, final RemotingCommand request, final InvokeCallback invokeCallback, final int timeoutMillis) { final InvokeFuture future = createInvokeFuture(conn, request, request.getInvokeContext(), invokeCallback); conn.addInvokeFuture(future); final int requestId = request.getId(); try { Timeout timeout = TimerHolder.getTimer().newTimeout(new TimerTask() { @Override public void run(Timeout timeout) throws Exception { InvokeFuture future = conn.removeInvokeFuture(requestId); if (future != null) { future.putResponse(commandFactory.createTimeoutResponse(conn .getRemoteAddress())); future.tryAsyncExecuteInvokeCallbackAbnormally(); } } }, timeoutMillis, TimeUnit.MILLISECONDS); future.addTimeout(timeout); conn.getChannel().writeAndFlush(request).addListener(new ChannelFutureListener() { @Override public void operationComplete(ChannelFuture cf) throws Exception { if (!cf.isSuccess()) { InvokeFuture f = conn.removeInvokeFuture(requestId); if (f != null) { f.cancelTimeout(); f.putResponse(commandFactory.createSendFailedResponse( conn.getRemoteAddress(), cf.cause())); f.tryAsyncExecuteInvokeCallbackAbnormally(); } logger.error(\"Invoke send failed. The address is {}\", RemotingUtil.parseRemoteAddress(conn.getChannel()), cf.cause()); } } }); } catch (Exception e) { InvokeFuture f = conn.removeInvokeFuture(requestId); if (f != null) { f.cancelTimeout(); f.putResponse(commandFactory.createSendFailedResponse(conn.getRemoteAddress(), e)); f.tryAsyncExecuteInvokeCallbackAbnormally(); } logger.error(\"Exception caught when sending invocation. The address is {}\", RemotingUtil.parseRemoteAddress(conn.getChannel()), e); } }\n\n    ### Response:",
        "ground_truth": "Invocation with callback.\n\n@param conn\n@param request\n@param invokeCallback\n@param timeoutMillis\n@throws InterruptedException",
        "predict": " Sets the line color\n\n@param array $color array(r,g,b).\n\n    "
    },
    {
        "ID": 426,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Message clearFlag(Flag ... flags) { if(flags != null) { short tmp=this.flags; for(Flag flag : flags) if(flag != null) tmp&=~flag.value(); this.flags=tmp; } return this; }\n\n    ### Response: Clears a number of flags in a message\n@param flags The flags\n@return A reference to the message.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void oneway(final Connection conn, final RemotingCommand request) { try { conn.getChannel().writeAndFlush(request).addListener(new ChannelFutureListener() { @Override public void operationComplete(ChannelFuture f) throws Exception { if (!f.isSuccess()) { logger.error(\"Invoke send failed. The address is {}\", RemotingUtil.parseRemoteAddress(conn.getChannel()), f.cause()); } } }); } catch (Exception e) { if (null == conn) { logger.error(\"Conn is null\"); } else { logger.error(\"Exception caught when sending invocation. The address is {}\", RemotingUtil.parseRemoteAddress(conn.getChannel()), e); } } }\n\n    ### Response:",
        "ground_truth": "Oneway invocation.\n\n@param conn\n@param request\n@throws InterruptedException",
        "predict": " Clears a number of flags in a message\n@param flags The flags\n@return A reference to the message.\n\n    "
    },
    {
        "ID": 427,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function getSubqueries (inQueries, orQueries, otherQuery, pageSize, rightKeys) { var subqueries = [], numberOfChunks, i, inQuery, orQuery, queryArray, from, to; // this is a stupid way to turn numbers into 1 numberOfChunks = (orQueries.length / pageSize) + (!!(orQueries.length % pageSize)); for (i = 0; i < numberOfChunks; i += 1) { inQuery = {}; from = i * pageSize; to = from + pageSize; rightKeys.forEach(function (key, index) { inQuery[rightKeys[index]] = {$in: inQueries[index].slice(from, to)}; }); orQuery = { $or: orQueries.slice(from, to)}; queryArray = [ { $match: inQuery }, { $match: orQuery } ]; if(otherQuery) { queryArray.push({ $match: otherQuery }); //Push this to the end on the assumption that the join properties will be indexed, and the arbitrary //filter properties won't be indexed. } subqueries.push(queryArray); } return subqueries; }\n\n    ### Response: Get the paged subqueries.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static byte toByte(BitSet bs) { int value = 0; for (int i = 0; i < bs.length(); ++i) { if (bs.get(i)) { value += 1 << i; } } if (bs.length() > 7) { throw new IllegalArgumentException(\"The byte value \" + value + \" generated according to bit set \" + bs + \" is out of range, should be limited between [\" + Byte.MIN_VALUE + \"] to [\" + Byte.MAX_VALUE + \"]\"); } return (byte) value; }\n\n    ### Response:",
        "ground_truth": "from bit set to byte\n@param bs\n@return byte represent the bit set",
        "predict": " Get the paged subqueries.\n\n    "
    },
    {
        "ID": 428,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function (xmlDom) { if (!xmlDom) { throw new ArgumentError( Logger.logMessage(Logger.LEVEL_SEVERE, \"WcsCoverageDescriptions\", \"constructor\", \"missingDom\")); } /** * The original unmodified XML document. Referenced for use in advanced cases. * @type {{}} */ this.xmlDom = xmlDom; this.assembleDocument(); }\n\n    ### Response: Constructs a simple javascript object representation of an OGC WCS Describe Coverage XML response.\n@alias WcsCoverageDescriptions\n@constructor\n@classdesc Represents the common properties of a WCS CoverageDescription document. Common properties are\nparsed and mapped to a plain javascript object model. Most fields can be accessed as properties named\naccording to their document names converted to camel case. This model supports version 1.0.0 and 2.0.x of the\nWCS specification. Not all properties are mapped to this representative javascript object model, but the\nprovided XML DOM is maintained in xmlDom property for reference.\n@param {{}} xmlDom an XML DOM representing the WCS DescribeCoverage document.\n@throws {ArgumentError} If the specified XML DOM is null or undefined..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static BitSet toBitSet(int value) { if (value > Byte.MAX_VALUE || value < Byte.MIN_VALUE) { throw new IllegalArgumentException( \"The value \" + value + \" is out of byte range, should be limited between [\" + Byte.MIN_VALUE + \"] to [\" + Byte.MAX_VALUE + \"]\"); } BitSet bs = new BitSet(); int index = 0; while (value != 0) { if (value % 2 != 0) { bs.set(index); } ++index; value = (byte) (value >> 1); } return bs; }\n\n    ### Response:",
        "ground_truth": "from byte to bit set\n@param value\n@return bit set represent the byte",
        "predict": " Constructs a simple javascript object representation of an OGC WCS Describe Coverage XML response.\n@alias WcsCoverageDescriptions\n@constructor\n@classdesc Represents the common properties of a WCS CoverageDescription document. Common properties are\nparsed and mapped to a plain javascript object model. Most fields can be accessed as properties named\naccording to their document names converted to camel case. This model supports version 1.0.0 and 2.0.x of the\nWCS specification. Not all properties are mapped to this representative javascript object model, but the\nprovided XML DOM is maintained in xmlDom property for reference.\n@param {{}} xmlDom an XML DOM representing the WCS DescribeCoverage document.\n@throws {ArgumentError} If the specified XML DOM is null or undefined..\n\n    "
    },
    {
        "ID": 429,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function getVideoRatingInfo() { if ($this->getRating() != null) { $returnArray = array(); $returnArray['average'] = $this->getRating()->getAverage(); $returnArray['numRaters'] = $this->getRating()->getNumRaters(); return $returnArray; } else { return null; } }\n\n    ### Response: Gets the rating information for this video, if available.  The rating\nis returned as an array containing the keys 'average' and 'numRaters'.\nnull is returned if the rating information is not available.\n\n@return array|null The rating information for this video.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void addReconnectTask(Url url) { ReconnectTask task = new ReconnectTask(); task.url = url; tasks.add(task); }\n\n    ### Response:",
        "ground_truth": "add reconnect task\n\n@param url",
        "predict": " Gets the rating information for this video, if available.  The rating\nis returned as an array containing the keys 'average' and 'numRaters'.\nnull is returned if the rating information is not available.\n\n@return array|null The rating information for this video.\n\n    "
    },
    {
        "ID": 430,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func SubcommandTokenWithParams(params CommandParams) *subcommands.Command { return &subcommands.Command{ Advanced: params.Advanced, UsageLine: params.Name, ShortDesc: \"prints an access token\", LongDesc: \"Generates an access token if requested and prints it.\", CommandRun: func() subcommands.CommandRun { c := &tokenRun{} c.params = &params c.registerBaseFlags() c.Flags.DurationVar( &c.lifetime, \"lifetime\", time.Minute, \"Minimum token lifetime. If existing token expired and refresh token or service account is not present, returns nothing.\", ) c.Flags.StringVar( &c.jsonOutput, \"json-output\", \"\", \"Destination file to print token and expiration time in JSON. \\\"-\\\" for standard output.\") return c }, } }\n\n    ### Response: // SubcommandTokenWithParams returns subcommand.Command that can be used to\n// print current access token..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void stop() { if (!this.started) { return; } this.started = false; healConnectionThreads.interrupt(); this.tasks.clear(); this.canceled.clear(); }\n\n    ### Response:",
        "ground_truth": "stop reconnect thread",
        "predict": " // SubcommandTokenWithParams returns subcommand.Command that can be used to\n// print current access token..\n\n    "
    },
    {
        "ID": 431,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func CheckDriver(driver string) Check { return func() error { cli, err := newClient() if err != nil { return fmt.Errorf(\"creating client: %v\", err) } info, err := cli.Info() if err != nil { return fmt.Errorf(\"getting info: %v\", err) } if info.Driver != driver { return fmt.Errorf(\"driver is '%s' not 'driver'\", info.Driver, driver) } return nil } }\n\n    ### Response: // CheckDriver confirms that docker is using the provided driver..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected RemotingCommand toRemotingCommand(Object request, Connection conn, InvokeContext invokeContext, int timeoutMillis) throws SerializationException { RpcRequestCommand command = this.getCommandFactory().createRequestCommand(request); if (null != invokeContext) { // set client custom serializer for request command if not null Object clientCustomSerializer = invokeContext.get(InvokeContext.BOLT_CUSTOM_SERIALIZER); if (null != clientCustomSerializer) { try { command.setSerializer((Byte) clientCustomSerializer); } catch (ClassCastException e) { throw new IllegalArgumentException( \"Illegal custom serializer [\" + clientCustomSerializer + \"], the type of value should be [byte], but now is [\" + clientCustomSerializer.getClass().getName() + \"].\"); } } // enable crc by default, user can disable by set invoke context `false` for key `InvokeContext.BOLT_CRC_SWITCH` Boolean crcSwitch = invokeContext.get(InvokeContext.BOLT_CRC_SWITCH, ProtocolSwitch.CRC_SWITCH_DEFAULT_VALUE); if (null != crcSwitch && crcSwitch) { command.setProtocolSwitch(ProtocolSwitch .create(new int[] { ProtocolSwitch.CRC_SWITCH_INDEX })); } } else { // enable crc by default, if there is no invoke context. command.setProtocolSwitch(ProtocolSwitch .create(new int[] { ProtocolSwitch.CRC_SWITCH_INDEX })); } command.setTimeout(timeoutMillis); command.setRequestClass(request.getClass().getName()); command.setInvokeContext(invokeContext); command.serialize(); logDebugInfo(command); return command; }\n\n    ### Response:",
        "ground_truth": "Convert application request object to remoting request command.\n\n@param request\n@param conn\n@param timeoutMillis\n@return\n@throws CodecException",
        "predict": " // CheckDriver confirms that docker is using the provided driver..\n\n    "
    },
    {
        "ID": 432,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func verifyOnewaySignature(n string, t reflect.Type) reflect.Type { reqBodyType := verifyInputSignature(n, t) if t.NumOut() != 1 { panic(fmt.Sprintf( \"expected handler for %q to have 1 result but it had %v\", n, t.NumOut(), )) } if t.Out(0) != _errorType { panic(fmt.Sprintf( \"the result of the handler for %q must be of type error, and not: %v\", n, t.Out(0), )) } return reqBodyType }\n\n    ### Response: // verifyOnewaySignature verifies that the given type matches what we expect\n// from oneway JSON handlers.\n//\n// Returns the request type..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public Map<String, List<Connection>> filter(List<Connection> connections) { List<Connection> serviceOnConnections = new ArrayList<Connection>(); List<Connection> serviceOffConnections = new ArrayList<Connection>(); Map<String, List<Connection>> filteredConnections = new ConcurrentHashMap<String, List<Connection>>(); for (Connection connection : connections) { String serviceStatus = (String) connection.getAttribute(Configs.CONN_SERVICE_STATUS); if (serviceStatus != null) { if (connection.isInvokeFutureMapFinish() && !freshSelectConnections.containsValue(connection)) { serviceOffConnections.add(connection); } } else { serviceOnConnections.add(connection); } } filteredConnections.put(Configs.CONN_SERVICE_STATUS_ON, serviceOnConnections); filteredConnections.put(Configs.CONN_SERVICE_STATUS_OFF, serviceOffConnections); return filteredConnections; }\n\n    ### Response:",
        "ground_truth": "Filter connections to monitor\n\n@param connections",
        "predict": " // verifyOnewaySignature verifies that the given type matches what we expect\n// from oneway JSON handlers.\n//\n// Returns the request type..\n\n    "
    },
    {
        "ID": 433,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static function same($a,$b) { if(!is_string($a) || !is_string($b)) return false; $mb=function_exists('mb_strlen'); $length=$mb ? mb_strlen($a,'8bit') : strlen($a); if($length!==($mb ? mb_strlen($b,'8bit') : strlen($b))) return false; $check=0; for($i=0;$i<$length;$i+=1) $check|=(ord($a[$i])^ord($b[$i])); return $check===0; }\n\n    ### Response: Check for sameness of two strings using an algorithm with timing\nindependent of the string values if the subject strings are of equal length.\n\nThe function can be useful to prevent timing attacks. For example, if $a and $b\nare both hash values from the same algorithm, then the timing of this function\ndoes not reveal whether or not there is a match.\n\nNOTE: timing is affected if $a and $b are different lengths or either is not a\nstring. For the purpose of checking password hash this does not reveal information\nuseful to an attacker.\n\n@see http://blog.astrumfutura.com/2010/10/nanosecond-scale-remote-timing-attacks-on-php-applications-time-to-take-them-seriously/\n@see http://codereview.stackexchange.com/questions/13512\n@see https://github.com/ircmaxell/password_compat/blob/master/lib/password.php\n\n@param string $a First subject string to compare.\n@param string $b Second subject string to compare.\n@return bool true if the strings are the same, false if they are different or if\neither is not a string..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public void monitor(Map<String, RunStateRecordedFutureTask<ConnectionPool>> connPools) { try { if (null != connPools && !connPools.isEmpty()) { Iterator<Map.Entry<String, RunStateRecordedFutureTask<ConnectionPool>>> iter = connPools .entrySet().iterator(); while (iter.hasNext()) { Map.Entry<String, RunStateRecordedFutureTask<ConnectionPool>> entry = iter .next(); String poolKey = entry.getKey(); ConnectionPool pool = FutureTaskUtil.getFutureTaskResult(entry.getValue(), logger); List<Connection> connections = pool.getAll(); Map<String, List<Connection>> filteredConnectons = this.filter(connections); List<Connection> serviceOnConnections = filteredConnectons .get(Configs.CONN_SERVICE_STATUS_ON); List<Connection> serviceOffConnections = filteredConnectons .get(Configs.CONN_SERVICE_STATUS_OFF); if (serviceOnConnections.size() > CONNECTION_THRESHOLD) { Connection freshSelectConnect = serviceOnConnections.get(random .nextInt(serviceOnConnections.size())); freshSelectConnect.setAttribute(Configs.CONN_SERVICE_STATUS, Configs.CONN_SERVICE_STATUS_OFF); Connection lastSelectConnect = freshSelectConnections.remove(poolKey); freshSelectConnections.put(poolKey, freshSelectConnect); closeFreshSelectConnections(lastSelectConnect, serviceOffConnections); } else { if (freshSelectConnections.containsKey(poolKey)) { Connection lastSelectConnect = freshSelectConnections.remove(poolKey); closeFreshSelectConnections(lastSelectConnect, serviceOffConnections); } if (logger.isInfoEnabled()) { logger .info( \"the size of serviceOnConnections [{}] reached CONNECTION_THRESHOLD [{}].\", serviceOnConnections.size(), CONNECTION_THRESHOLD); } } for (Connection offConn : serviceOffConnections) { if (offConn.isFine()) { offConn.close(); } } } } } catch (Exception e) { logger.error(\"ScheduledDisconnectStrategy monitor error\", e); } }\n\n    ### Response:",
        "ground_truth": "Monitor connections and close connections with status is off\n\n@param connPools",
        "predict": " Check for sameness of two strings using an algorithm with timing\nindependent of the string values if the subject strings are of equal length.\n\nThe function can be useful to prevent timing attacks. For example, if $a and $b\nare both hash values from the same algorithm, then the timing of this function\ndoes not reveal whether or not there is a match.\n\nNOTE: timing is affected if $a and $b are different lengths or either is not a\nstring. For the purpose of checking password hash this does not reveal information\nuseful to an attacker.\n\n@see http://blog.astrumfutura.com/2010/10/nanosecond-scale-remote-timing-attacks-on-php-applications-time-to-take-them-seriously/\n@see http://codereview.stackexchange.com/questions/13512\n@see https://github.com/ircmaxell/password_compat/blob/master/lib/password.php\n\n@param string $a First subject string to compare.\n@param string $b Second subject string to compare.\n@return bool true if the strings are the same, false if they are different or if\neither is not a string..\n\n    "
    },
    {
        "ID": 434,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def paginator(context, adjacent_pages=2): \"\"\" To be used in conjunction with the object_list generic view. Adds pagination context variables for use in displaying first, adjacent and last page links in addition to those created by the object_list generic view. \"\"\" current_page = context.get('page') paginator = context.get('paginator') if not paginator: return pages = paginator.num_pages current_range = range(current_page - adjacent_pages, current_page + adjacent_pages + 1) page_numbers = [n for n in current_range if n > 0 and n <= pages] slugtype = '' if 'topic_slug' in context: page_url = context[\"topic\"].get_short_url() slugtype = 'topic' elif 'forum_slug' in context: page_url = '/forum/%s/' % context[\"forum_slug\"] slugtype = 'forum' else: page_url = context['request'].get_full_path() return { \"is_paginated\": context[\"is_paginated\"], \"page\": current_page, \"pages\": pages, \"page_obj\": context['page_obj'], \"page_numbers\": page_numbers, \"has_next\": context[\"page_obj\"].has_next(), \"has_previous\": context[\"page_obj\"].has_previous(), \"page_url\" : page_url, 'slugtype' : slugtype, }\n\n    ### Response: To be used in conjunction with the object_list generic view.\r\n    Adds pagination context variables for use in displaying first, adjacent and\r\n    last page links in addition to those created by the object_list generic view..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void closeFreshSelectConnections(Connection lastSelectConnect, List<Connection> serviceOffConnections) throws InterruptedException { if (null != lastSelectConnect) { if (lastSelectConnect.isInvokeFutureMapFinish()) { serviceOffConnections.add(lastSelectConnect); } else { Thread.sleep(RETRY_DETECT_PERIOD); if (lastSelectConnect.isInvokeFutureMapFinish()) { serviceOffConnections.add(lastSelectConnect); } else { if (logger.isInfoEnabled()) { logger.info(\"Address={} won't close at this schedule turn\", RemotingUtil.parseRemoteAddress(lastSelectConnect.getChannel())); } } } } }\n\n    ### Response:",
        "ground_truth": "close the connection of the fresh select connections\n\n@param lastSelectConnect\n@param serviceOffConnections\n@throws InterruptedException",
        "predict": " To be used in conjunction with the object_list generic view.\r\n    Adds pagination context variables for use in displaying first, adjacent and\r\n    last page links in addition to those created by the object_list generic view..\n\n    "
    },
    {
        "ID": 435,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func openBackup(f string, maxLines, maxRotate int) (*os.File, error) { // first try to open the file with O_EXCL (file must not already exist) file, err := os.OpenFile(f, os.O_RDWR|os.O_CREATE|os.O_EXCL, 0644) // if there are no errors (it's a new file), we can just use this file if err == nil { return file, nil } // if the error wasn't an 'Exist' error, we've got a problem if !os.IsExist(err) { return nil, fmt.Errorf(\"Error opening file for logging: %s\", err) } if maxLines == 0 { // we're in backup mode, rotate and return the new file return doRotate(f, maxRotate) } // the file already exists, open it return os.OpenFile(f, os.O_RDWR|os.O_APPEND, 0644) }\n\n    ### Response: // Attempt to create new log. Specific behavior depends on the maxLines setting.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static boolean getBool(String key, String defaultValue) { return Boolean.parseBoolean(System.getProperty(key, defaultValue)); }\n\n    ### Response:",
        "ground_truth": "~~~ public helper methods to retrieve system property",
        "predict": " // Attempt to create new log. Specific behavior depends on the maxLines setting.\n\n    "
    },
    {
        "ID": 436,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (c *sioClient) WaitForDetachedDevice(token string) error { if token == \"\" { return fmt.Errorf(\"invalid detach token\") } // wait for attach.Token to show up in local device list ticker := time.NewTicker(time.Second) defer ticker.Stop() timer := time.NewTimer(30 * time.Second) defer timer.Stop() for { select { case <-ticker.C: devMap, err := c.Devs() if err != nil { klog.Error(log(\"failed while waiting for volume to unmap/detach: %v\", err)) return err } go func() { klog.V(4).Info(log(\"waiting for volume %s to be unmapped/detached\", token)) }() // cant find vol id, then ok. if _, ok := devMap[token]; !ok { return nil } case <-timer.C: klog.Error(log(\"timed out while waiting for volume %s to be unmapped/detached\", token)) return fmt.Errorf(\"volume detach timeout\") } } }\n\n    ### Response: // waitForDetachedDevice waits for device to be detached.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void infoLog(String format, String addr) { if (logger.isInfoEnabled()) { if (StringUtils.isNotEmpty(addr)) { logger.info(format, addr); } else { logger.info(format, \"UNKNOWN-ADDR\"); } } }\n\n    ### Response:",
        "ground_truth": "print info log\n@param format\n@param addr",
        "predict": " // waitForDetachedDevice waits for device to be detached.\n\n    "
    },
    {
        "ID": 437,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function exception($exception = null) { if (!func_num_args()) { return $this->_exception; } $this->_exception = $exception; return $this; }\n\n    ### Response: Gets the exception related to the report.\n\n@return object.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public boolean isRequestTimeout() { if (this.timeout > 0 && (this.rpcCommandType != RpcCommandType.REQUEST_ONEWAY) && (System.currentTimeMillis() - this.arriveTimestamp) > this.timeout) { return true; } return false; }\n\n    ### Response:",
        "ground_truth": "whether this request already timeout\n\n@return",
        "predict": " Gets the exception related to the report.\n\n@return object.\n\n    "
    },
    {
        "ID": 438,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function passwordFormSucceeded(Form $form, ArrayHash $values): void { if ($values->generatePassword) { $password = Random::generate($this->minPasswordLength, $this->passwordChars); } else { $password = $values->password; } $this->currentUser->setPassword($password); $this->orm->persistAndFlush($this->currentUser); if ($this->configurator->sendChangePassword) { $this->mailer->sendNewPassword($this->currentUser->email, $this->currentUser->username, $password); } $this->flashNotifier->success('cms.user.passwordChanged'); $this->restoreBacklink(); }\n\n    ### Response: Zpracovani zmeny hesla\n@param Form $form\n@param ArrayHash $values\n@throws AuthenticationException\n@throws InvalidLinkException.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public UserProcessor<?> getUserProcessor(String className) { return StringUtils.isBlank(className) ? null : this.userProcessors.get(className); }\n\n    ### Response:",
        "ground_truth": "Get user processor for class name.\n\n@param className\n@return",
        "predict": " Zpracovani zmeny hesla\n@param Form $form\n@param ArrayHash $values\n@throws AuthenticationException\n@throws InvalidLinkException.\n\n    "
    },
    {
        "ID": 439,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static <S extends Storable> CompositeScore<S> evaluate (OrderedProperty<S>[] indexProperties, boolean unique, boolean clustered, Filter<S> filter, OrderingList<S> ordering) { FilteringScore<S> filteringScore = FilteringScore .evaluate(indexProperties, unique, clustered, filter); OrderingScore<S> orderingScore = OrderingScore .evaluate(indexProperties, unique, clustered, filter, ordering); return new CompositeScore<S>(filteringScore, orderingScore); }\n\n    ### Response: Evaluates the given index properties for its filtering and ordering\ncapabilities against the given filter and order-by properties.\n\n@param indexProperties index properties to evaluate\n@param unique true if index is unique\n@param clustered true if index is clustered\n@param filter optional filter which cannot contain any logical 'or' operations.\n@param ordering optional properties which define desired ordering\n@throws IllegalArgumentException if index is null or filter is not supported.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private Connection randomGet(List<Connection> conns) { if (null == conns || conns.isEmpty()) { return null; } int size = conns.size(); int tries = 0; Connection result = null; while ((result == null || !result.isFine()) && tries++ < MAX_TIMES) { result = conns.get(this.random.nextInt(size)); } if (result != null && !result.isFine()) { result = null; } return result; }\n\n    ### Response:",
        "ground_truth": "get one connection randomly\n\n@param conns\n@return",
        "predict": " Evaluates the given index properties for its filtering and ordering\ncapabilities against the given filter and order-by properties.\n\n@param indexProperties index properties to evaluate\n@param unique true if index is unique\n@param clustered true if index is clustered\n@param filter optional filter which cannot contain any logical 'or' operations.\n@param ordering optional properties which define desired ordering\n@throws IllegalArgumentException if index is null or filter is not supported.\n\n    "
    },
    {
        "ID": 440,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function(options = {}) { if (!getSessionToken(options) && !AV.User.current()) { throw new Error('Please signin an user.'); } if (!this.query) { return AV.Status.sendStatusToFollowers(this, options); } return getUserPointer(options) .then(currUser => { var query = this.query.toJSON(); query.className = this.query.className; var data = {}; data.query = query; this.data = this.data || {}; this.data.source = this.data.source || currUser; data.data = this._getDataJSON(); data.inboxType = this.inboxType || 'default'; return AVRequest('statuses', null, null, 'POST', data, options); }) .then(response => { this.id = response.objectId; this.createdAt = AV._parseDate(response.createdAt); return this; }); }\n\n    ### Response: Send a status by a AV.Query object.\n@since 0.3.0\n@param {AuthOptions} options\n@return {Promise} A promise that is fulfilled when the send\ncompletes.\n@example\n// send a status to male users\nvar status = new AVStatus('image url', 'a message');\nstatus.query = new AV.Query('_User');\nstatus.query.equalTo('gender', 'male');\nstatus.send().then(function(){\n//send status successfully.\n}, function(err){\n//an error threw.\nconsole.dir(err);\n});.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SuppressWarnings(\"unchecked\") public <T> T get(String key, T defaultIfNotFound) { return this.context.get(key) != null ? (T) this.context.get(key) : defaultIfNotFound; }\n\n    ### Response:",
        "ground_truth": "get and use default if not found\n\n@param key\n@param defaultIfNotFound\n@param \n@return",
        "predict": " Send a status by a AV.Query object.\n@since 0.3.0\n@param {AuthOptions} options\n@return {Promise} A promise that is fulfilled when the send\ncompletes.\n@example\n// send a status to male users\nvar status = new AVStatus('image url', 'a message');\nstatus.query = new AV.Query('_User');\nstatus.query.equalTo('gender', 'male');\nstatus.send().then(function(){\n//send status successfully.\n}, function(err){\n//an error threw.\nconsole.dir(err);\n});.\n\n    "
    },
    {
        "ID": 441,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def GetTargetCBVs(model): ''' Returns the design matrix of CBVs for the given target. :param model: An instance of the :py:obj:`everest` model for the target ''' # Get the info season = model.season name = model.name # We use the LC light curves as CBVs; there aren't # enough SC light curves to get a good set if name.endswith('.sc'): name = name[:-3] model.XCBV = sysrem.GetCBVs(season, model=name, niter=model.cbv_niter, sv_win=model.cbv_win, sv_order=model.cbv_order)\n\n    ### Response: Returns the design matrix of CBVs for the given target.\n\n    :param model: An instance of the :py:obj:`everest` model for the target.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String getProperty(String key) { if (properties == null) { return null; } return properties.getProperty(key); }\n\n    ### Response:",
        "ground_truth": "Get property value according to property key\n\n@param key\n@return property value",
        "predict": " Returns the design matrix of CBVs for the given target.\n\n    :param model: An instance of the :py:obj:`everest` model for the target.\n\n    "
    },
    {
        "ID": 442,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    static function all(): array { $instances = []; foreach (static::getMap() as $key => $value) { $instances[$key] = self::$instanceCache[static::class][$key] ?? (self::$instanceCache[static::class][$key] = new static($key, $value)); } return $instances; }\n\n    ### Response: Get instance for each defined key-value pair\n\n@return static[].\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Object resolveResponseObject(ResponseCommand responseCommand, String addr) throws RemotingException { preProcess(responseCommand, addr); if (responseCommand.getResponseStatus() == ResponseStatus.SUCCESS) { return toResponseObject(responseCommand); } else { String msg = String.format(\"Rpc invocation exception: %s, the address is %s, id=%s\", responseCommand.getResponseStatus(), addr, responseCommand.getId()); logger.warn(msg); if (responseCommand.getCause() != null) { throw new InvokeException(msg, responseCommand.getCause()); } else { throw new InvokeException(msg + \", please check the server log for more.\"); } } }\n\n    ### Response:",
        "ground_truth": "Analyze the response command and generate the response object.\n\n@param responseCommand response command\n@param addr response address\n@return response object",
        "predict": " Get instance for each defined key-value pair\n\n@return static[].\n\n    "
    },
    {
        "ID": 443,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function(format, date) { var self = this, output, d, dw, m, y, h, g, i, s; if (! date) { date = new Date(); } h = date[self.getHours](); g = h > 12 ? h - 12 : h; i = date[self.getMinutes](); s = date[self.getSeconds](); d = date[self.getDate](); dw = date[self.getDay](); m = date[self.getMonth]() + 1; y = date[self.getFullYear](); output = format.replace(/[a-z]/gi, function(val) { switch (val) { case 'd': return d > 9 ? d : '0'+d; case 'j': return d; case 'D': return self.i18n(self.i18.daysShort[dw]); case 'l': return self.i18n(self.i18.days[dw]); case 'm': return m > 9 ? m : '0'+m; case 'n': return m; case 'M': return self.i18n(self.i18.monthsShort[m-1]); case 'F': return self.i18n(self.i18.months[m-1]); case 'Y': return y; case 'y': return (''+y).substr(2); case 'H': return h > 9 ? h : '0'+h; case 'G': return h; case 'g': return g; case 'h': return g > 9 ? g : '0'+g; case 'a': return h >= 12 ? 'pm' : 'am'; case 'A': return h >= 12 ? 'PM' : 'AM'; case 'i': return i > 9 ? i : '0'+i; case 's': return s > 9 ? s : '0'+s; } return val; }); return output; }\n\n    ### Response: Returns a date string formatted according to the given format string\n\n@param  String  format string\n@param  Object  Date object\n@return String.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static Object toResponseObject(ResponseCommand responseCommand) throws CodecException { RpcResponseCommand response = (RpcResponseCommand) responseCommand; response.deserialize(); return response.getResponseObject(); }\n\n    ### Response:",
        "ground_truth": "Convert remoting response command to application response object.",
        "predict": " Returns a date string formatted according to the given format string\n\n@param  String  format string\n@param  Object  Date object\n@return String.\n\n    "
    },
    {
        "ID": 444,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function extractUsernameFromLink(steemitLink) { if (isValidSteemitLink(steemitLink)) { const usernamePos = steemitLink.search(/\\/@.+\\//); if (usernamePos === -1) return; const firstPart = steemitLink.slice(usernamePos + 2); // adding 2 to remove \"/@\" return firstPart.slice(0, firstPart.search('/')); } }\n\n    ### Response: Should input a full steemit article link and return the username of the author\n@param {string} steemitLink.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static Throwable toThrowable(ResponseCommand responseCommand) throws CodecException { RpcResponseCommand resp = (RpcResponseCommand) responseCommand; resp.deserialize(); Object ex = resp.getResponseObject(); if (ex != null && ex instanceof Throwable) { return (Throwable) ex; } return null; }\n\n    ### Response:",
        "ground_truth": "Convert remoting response command to throwable if it is a throwable, otherwise return null.",
        "predict": " Should input a full steemit article link and return the username of the author\n@param {string} steemitLink.\n\n    "
    },
    {
        "ID": 445,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void obtainTokenForJob(final RestClient client, User user, Job job) { Token<EsTokenIdentifier> token = obtainToken(client, user); if (token == null) { throw new EsHadoopException(\"No token returned for user \" + user.getKerberosPrincipal().getName()); } Text clusterName = token.getService(); if (LOG.isDebugEnabled()) { LOG.debug(\"Obtained token \" + EsTokenIdentifier.KIND_NAME.toString() + \" for user \" + user.getKerberosPrincipal().getName() + \" on cluster \" + clusterName.toString()); } job.getCredentials().addToken(clusterName, token); }\n\n    ### Response: Obtain an authentication token on behalf of the given user and add it to\nthe credentials for the given map reduce job. This version always obtains\na fresh authentication token instead of checking for existing ones on the\ncurrent user.\n\n@param client The Elasticsearch client\n@param user The user for whom to obtain the token\n@param job The job instance in which the token should be stored.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static String detailErrMsg(String clientErrMsg, ResponseCommand responseCommand) { RpcResponseCommand resp = (RpcResponseCommand) responseCommand; if (StringUtils.isNotBlank(resp.getErrorMsg())) { return String.format(\"%s, ServerErrorMsg:%s\", clientErrMsg, resp.getErrorMsg()); } else { return String.format(\"%s, ServerErrorMsg:null\", clientErrMsg); } }\n\n    ### Response:",
        "ground_truth": "Detail your error msg with the error msg returned from response command",
        "predict": " Obtain an authentication token on behalf of the given user and add it to\nthe credentials for the given map reduce job. This version always obtains\na fresh authentication token instead of checking for existing ones on the\ncurrent user.\n\n@param client The Elasticsearch client\n@param user The user for whom to obtain the token\n@param job The job instance in which the token should be stored.\n\n    "
    },
    {
        "ID": 446,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _MergeOptional(self, a, b): \"\"\"Tries to merge two values which may be None. If both values are not None, they are required to be the same and the merge is trivial. If one of the values is None and the other is not None, the merge results in the one which is not None. If both are None, the merge results in None. Args: a: The first value. b: The second value. Returns: The merged value. Raises: MergeError: If both values are not None and are not the same. \"\"\" if a and b: if a != b: raise MergeError(\"values must be identical if both specified \" \"('%s' vs '%s')\" % (transitfeed.EncodeUnicode(a), transitfeed.EncodeUnicode(b))) return a or b\n\n    ### Response: Tries to merge two values which may be None.\n\n    If both values are not None, they are required to be the same and the\n    merge is trivial. If one of the values is None and the other is not None,\n    the merge results in the one which is not None. If both are None, the merge\n    results in None.\n\n    Args:\n      a: The first value.\n      b: The second value.\n\n    Returns:\n      The merged value.\n\n    Raises:\n      MergeError: If both values are not None and are not the same..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private RpcServerException createServerException(Throwable t, String errMsg) { String formattedErrMsg = String.format( \"[Server]OriginErrorMsg: %s: %s. AdditionalErrorMsg: %s\", t.getClass().getName(), t.getMessage(), errMsg); RpcServerException e = new RpcServerException(formattedErrMsg); e.setStackTrace(t.getStackTrace()); return e; }\n\n    ### Response:",
        "ground_truth": "create server exception using error msg and fill the stack trace using the stack trace of throwable.\n\n@param t the origin throwable to fill the stack trace of rpc server exception\n@param errMsg additional error msg, null is allowed\n@return an instance of RpcServerException",
        "predict": " Tries to merge two values which may be None.\n\n    If both values are not None, they are required to be the same and the\n    merge is trivial. If one of the values is None and the other is not None,\n    the merge results in the one which is not None. If both are None, the merge\n    results in None.\n\n    Args:\n      a: The first value.\n      b: The second value.\n\n    Returns:\n      The merged value.\n\n    Raises:\n      MergeError: If both values are not None and are not the same..\n\n    "
    },
    {
        "ID": 447,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def create_logstash(self, **kwargs): \"\"\" Creates an instance of the Logging Service. \"\"\" logstash = predix.admin.logstash.Logging(**kwargs) logstash.create() logstash.add_to_manifest(self) logging.info('Install Kibana-Me-Logs application by following GitHub instructions') logging.info('git clone https://github.com/cloudfoundry-community/kibana-me-logs.git') return logstash\n\n    ### Response: Creates an instance of the Logging Service..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void printConnectionTraceLog(Logger logger, String traceId, InvokeContext invokeContext) { String sourceIp = invokeContext.get(InvokeContext.CLIENT_LOCAL_IP); Integer sourcePort = invokeContext.get(InvokeContext.CLIENT_LOCAL_PORT); String targetIp = invokeContext.get(InvokeContext.CLIENT_REMOTE_IP); Integer targetPort = invokeContext.get(InvokeContext.CLIENT_REMOTE_PORT); StringBuilder logMsg = new StringBuilder(); logMsg.append(traceId).append(\",\"); logMsg.append(sourceIp).append(\",\"); logMsg.append(sourcePort).append(\",\"); logMsg.append(targetIp).append(\",\"); logMsg.append(targetPort); if (logger.isInfoEnabled()) { logger.info(logMsg.toString()); } }\n\n    ### Response:",
        "ground_truth": "print trace log\n@param traceId\n@param invokeContext",
        "predict": " Creates an instance of the Logging Service..\n\n    "
    },
    {
        "ID": 448,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public boolean add(final VisitState v) { // The starting point. int pos = (int)(MurmurHash3.hash(v.schemeAuthority) & mask); // There's always an unused entry. while (visitState[pos] != null) { if (Arrays.equals(visitState[pos].schemeAuthority, v.schemeAuthority)) return false; pos = (pos + 1) & mask; } visitState[pos] = v; if (++size >= maxFill && n < (1 << 30)) rehash(2 * n); return true; }\n\n    ### Response: Adds a visit state to the set, if necessary.\n\n@param v the state to be added.\n@return true if the state set changed as a result of this operation..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static EventLoopGroup newEventLoopGroup(int nThreads, ThreadFactory threadFactory) { return epollEnabled ? new EpollEventLoopGroup(nThreads, threadFactory) : new NioEventLoopGroup(nThreads, threadFactory); }\n\n    ### Response:",
        "ground_truth": "Create the right event loop according to current platform and system property, fallback to NIO when epoll not enabled.\n\n@param nThreads\n@param threadFactory\n@return an EventLoopGroup suitable for the current platform",
        "predict": " Adds a visit state to the set, if necessary.\n\n@param v the state to be added.\n@return true if the state set changed as a result of this operation..\n\n    "
    },
    {
        "ID": 449,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (ft *FieldType) Init(tp byte) { ft.Tp = tp ft.Flen = UnspecifiedLength ft.Decimal = UnspecifiedLength }\n\n    ### Response: // Init initializes the FieldType data..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String parseRemoteAddress(final Channel channel) { if (null == channel) { return StringUtils.EMPTY; } final SocketAddress remote = channel.remoteAddress(); return doParse(remote != null ? remote.toString().trim() : StringUtils.EMPTY); }\n\n    ### Response:",
        "ground_truth": "Parse the remote address of the channel.\n\n@param channel\n@return",
        "predict": " // Init initializes the FieldType data..\n\n    "
    },
    {
        "ID": 450,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (m *networkMechanismManager) UpdateNetwork(context *NetworkManagerContext) (err error) { network := new(NetworkManagerContext) update := func(fn func() error) error { return m.BaseMechanismManager.Update( NetworkModel, network, fn, ) } pre := func(port NetworkPort) error { networkContext, err := m.updateNetworkContext(port) if err != nil { return err } err = m.do(func(nlmech NetworkMechanism) error { return nlmech.UpdateNetworkPreCommit(networkContext) }) if err != nil { log.ErrorLog(\"network/UPDATE_NETWORK_PRECOMMIT\", \"Failed to parse \") } return err } post := func(port NetworkPort) error { networkContext, err := m.updateNetworkContext(port) if err != nil { return err } err = m.do(func(nlmech NetworkMechanism) error { return nlmech.UpdateNetworkPostCommit(networkContext) }) if err != nil { log.ErrorLog(\"network/UPDATE_NETWORK_POSTCOMMIT\", \"Failed to update network configuration: \", err) } return err } return update(func() error { _, err := m.LinkDriver() if err != nil { return err } _, err = m.Driver() if err != nil && len(network.Ports) != 0 { log.ErrorLog(\"network/UPDATE_NETWORK\", \"Driver not found, but ports need to be updated\") return ErrNetworkNotInitialized } for _, port := range context.Ports { // Get previous port coniguration port = network.Port(port.Port) blank := NetworkPort{} // Skip blank ports if port == blank { continue } // Precommit changes if err := pre(port); err != nil { log.ErrorLog(\"network/UPDATE_NETWORK\", \"Network update pre-commit failed: \", err) return err } } // Set new driver err = m.SetDriver(context.Driver) if err != nil { return err } // Update driver configuration network.Driver = context.Driver for _, port := range context.Ports { if err := post(port); err != nil { log.ErrorLog(\"network/UPDATE_NETWORK\", \"Network update post-commit failed: \", err) return err } // Update port configuration network.SetPort(port) } return nil }) }\n\n    ### Response: // UpdateNetwork calls corresponding method for activated mechanisms..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String parseLocalAddress(final Channel channel) { if (null == channel) { return StringUtils.EMPTY; } final SocketAddress local = channel.localAddress(); return doParse(local != null ? local.toString().trim() : StringUtils.EMPTY); }\n\n    ### Response:",
        "ground_truth": "Parse the local address of the channel.\n\n@param channel\n@return",
        "predict": " // UpdateNetwork calls corresponding method for activated mechanisms..\n\n    "
    },
    {
        "ID": 451,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def ncores_reserved(self): \"\"\" Returns the number of cores reserved in this moment. A core is reserved if it's still not running but we have submitted the task to the queue manager. \"\"\" return sum(task.manager.num_cores for task in self if task.status == task.S_SUB)\n\n    ### Response: Returns the number of cores reserved in this moment.\n        A core is reserved if it's still not running but\n        we have submitted the task to the queue manager..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String parseRemoteIP(final Channel channel) { if (null == channel) { return StringUtils.EMPTY; } final InetSocketAddress remote = (InetSocketAddress) channel.remoteAddress(); if (remote != null) { return remote.getAddress().getHostAddress(); } return StringUtils.EMPTY; }\n\n    ### Response:",
        "ground_truth": "Parse the remote host ip of the channel.\n\n@param channel\n@return",
        "predict": " Returns the number of cores reserved in this moment.\n        A core is reserved if it's still not running but\n        we have submitted the task to the queue manager..\n\n    "
    },
    {
        "ID": 452,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected String doGetString( NamespaceRegistry namespaceRegistry, TextEncoder encoder, TextEncoder delimiterEncoder ) { if (encoder == null) encoder = DEFAULT_ENCODER; final String delimiter = delimiterEncoder != null ? delimiterEncoder.encode(DELIMITER_STR) : DELIMITER_STR; // Since the segments are immutable, this code need not be synchronized because concurrent threads // may just compute the same value (with no harm done) StringBuilder sb = new StringBuilder(); if (this.isAbsolute()) sb.append(delimiter); boolean first = true; for (Segment segment : this) { if (first) { first = false; } else { sb.append(delimiter); } assert segment != null; sb.append(segment.getString(namespaceRegistry, encoder, delimiterEncoder)); } String result = sb.toString(); // Save the result to the internal string if this the default encoder is used. // This is not synchronized, but it's okay return result; }\n\n    ### Response: Method that creates the string representation. This method works two different ways depending upon whether the namespace\nregistry is provided.\n\n@param namespaceRegistry\n@param encoder\n@param delimiterEncoder\n@return this path as a string.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String parseRemoteHostName(final Channel channel) { if (null == channel) { return StringUtils.EMPTY; } final InetSocketAddress remote = (InetSocketAddress) channel.remoteAddress(); if (remote != null) { return remote.getAddress().getHostName(); } return StringUtils.EMPTY; }\n\n    ### Response:",
        "ground_truth": "Parse the remote hostname of the channel.\n\nNote: take care to use this method, for a reverse name lookup takes uncertain time in {@link InetAddress#getHostName}.\n\n@param channel\n@return",
        "predict": " Method that creates the string representation. This method works two different ways depending upon whether the namespace\nregistry is provided.\n\n@param namespaceRegistry\n@param encoder\n@param delimiterEncoder\n@return this path as a string.\n\n    "
    },
    {
        "ID": 453,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    final public function getConnectFrame( $login = '', $passcode = '', array $versions = [], $host = null, $heartbeat = [0, 0] ) { $frame = $this->createFrame('CONNECT'); $frame->legacyMode(true); if ($login || $passcode) { $frame->addHeaders(['login' => $login, 'passcode' => $passcode]); } if ($this->hasClientId()) { $frame['client-id'] = $this->getClientId(); } if (!empty($versions)) { $frame['accept-version'] = implode(',', $versions); } $frame['host'] = $host; $frame['heart-beat'] = $heartbeat[0] . ',' . $heartbeat[1]; return $frame; }\n\n    ### Response: Get the connect frame\n\n@param string $login\n@param string $passcode\n@param array $versions\n@param string $host\n@param int[] $heartbeat\n@return \\Stomp\\Transport\\Frame.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String parseLocalIP(final Channel channel) { if (null == channel) { return StringUtils.EMPTY; } final InetSocketAddress local = (InetSocketAddress) channel.localAddress(); if (local != null) { return local.getAddress().getHostAddress(); } return StringUtils.EMPTY; }\n\n    ### Response:",
        "ground_truth": "Parse the local host ip of the channel.\n\n@param channel\n@return",
        "predict": " Get the connect frame\n\n@param string $login\n@param string $passcode\n@param array $versions\n@param string $host\n@param int[] $heartbeat\n@return \\Stomp\\Transport\\Frame.\n\n    "
    },
    {
        "ID": 454,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private List<PropertyDescriptor> getPropertyDescriptorsForClass(Class<?> clasz) { try { BeanInfo beanInfo = Introspector.getBeanInfo(clasz); return Arrays.asList(beanInfo.getPropertyDescriptors()); } catch (IntrospectionException e) { LOGGER.error(\"instantiation exception while trying to create instance of class {}\", clasz.getName()); } return Lists.newArrayList(); }\n\n    ### Response: Returns all property descriptors for a given class..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static int parseRemotePort(final Channel channel) { if (null == channel) { return -1; } final InetSocketAddress remote = (InetSocketAddress) channel.remoteAddress(); if (remote != null) { return remote.getPort(); } return -1; }\n\n    ### Response:",
        "ground_truth": "Parse the remote host port of the channel.\n\n@param channel\n@return int",
        "predict": " Returns all property descriptors for a given class..\n\n    "
    },
    {
        "ID": 455,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def construct_settings( service_name, client_config, config_override, retry_names, bundle_descriptors=None, page_descriptors=None, metrics_headers=(), kwargs=None): \"\"\"Constructs a dictionary mapping method names to _CallSettings. The ``client_config`` parameter is parsed from a client configuration JSON file of the form: .. code-block:: json { \"interfaces\": { \"google.fake.v1.ServiceName\": { \"retry_codes\": { \"idempotent\": [\"UNAVAILABLE\", \"DEADLINE_EXCEEDED\"], \"non_idempotent\": [] }, \"retry_params\": { \"default\": { \"initial_retry_delay_millis\": 100, \"retry_delay_multiplier\": 1.2, \"max_retry_delay_millis\": 1000, \"initial_rpc_timeout_millis\": 2000, \"rpc_timeout_multiplier\": 1.5, \"max_rpc_timeout_millis\": 30000, \"total_timeout_millis\": 45000 } }, \"methods\": { \"CreateFoo\": { \"retry_codes_name\": \"idempotent\", \"retry_params_name\": \"default\", \"timeout_millis\": 30000 }, \"Publish\": { \"retry_codes_name\": \"non_idempotent\", \"retry_params_name\": \"default\", \"bundling\": { \"element_count_threshold\": 40, \"element_count_limit\": 200, \"request_byte_threshold\": 90000, \"request_byte_limit\": 100000, \"delay_threshold_millis\": 100 } } } } } } Args: service_name (str): The fully-qualified name of this service, used as a key into the client config file (in the example above, this value would be ``google.fake.v1.ServiceName``). client_config (dict): A dictionary parsed from the standard API client config file. bundle_descriptors (Mapping[str, BundleDescriptor]): A dictionary of method names to BundleDescriptor objects for methods that are bundling-enabled. page_descriptors (Mapping[str, PageDescriptor]): A dictionary of method names to PageDescriptor objects for methods that are page streaming-enabled. config_override (str): A dictionary in the same structure of client_config to override the settings. Usually client_config is supplied from the default config and config_override will be specified by users. retry_names (Mapping[str, object]): A dictionary mapping the strings referring to response status codes to the Python objects representing those codes. metrics_headers (Mapping[str, str]): Dictionary of headers to be passed for analytics. Sent as a dictionary; eventually becomes a space-separated string (e.g. 'foo/1.0.0 bar/3.14.1'). kwargs (dict): The keyword arguments to be passed to the API calls. Returns: dict: A dictionary mapping method names to _CallSettings. Raises: KeyError: If the configuration for the service in question cannot be located in the provided ``client_config``. \"\"\" # pylint: disable=too-many-locals # pylint: disable=protected-access defaults = {} bundle_descriptors = bundle_descriptors or {} page_descriptors = page_descriptors or {} kwargs\n\n    ### Response: Constructs a dictionary mapping method names to _CallSettings.\n\n    The ``client_config`` parameter is parsed from a client configuration JSON\n    file of the form:\n\n    .. code-block:: json\n\n       {\n         \"interfaces\": {\n           \"google.fake.v1.ServiceName\": {\n             \"retry_codes\": {\n               \"idempotent\": [\"UNAVAILABLE\", \"DEADLINE_EXCEEDED\"],\n               \"non_idempotent\": []\n             },\n             \"retry_params\": {\n               \"default\": {\n                 \"initial_retry_delay_millis\": 100,\n                 \"retry_delay_multiplier\": 1.2,\n                 \"max_retry_delay_millis\": 1000,\n                 \"initial_rpc_timeout_millis\": 2000,\n                 \"rpc_timeout_multiplier\": 1.5,\n                 \"max_rpc_timeout_millis\": 30000,\n                 \"total_timeout_millis\": 45000\n               }\n             },\n             \"methods\": {\n               \"CreateFoo\": {\n                 \"retry_codes_name\": \"idempotent\",\n                 \"retry_params_name\": \"default\",\n                 \"timeout_millis\": 30000\n               },\n               \"Publish\": {\n                 \"retry_codes_name\": \"non_idempotent\",\n                 \"retry_params_name\": \"default\",\n                 \"bundling\": {\n                   \"element_count_threshold\": 40,\n                   \"element_count_limit\": 200,\n                   \"request_byte_threshold\": 90000,\n                   \"request_byte_limit\": 100000,\n                   \"delay_threshold_millis\": 100\n                 }\n               }\n             }\n           }\n         }\n       }\n\n    Args:\n      service_name (str): The fully-qualified name of this service, used as a\n       .\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static int parseLocalPort(final Channel channel) { if (null == channel) { return -1; } final InetSocketAddress local = (InetSocketAddress) channel.localAddress(); if (local != null) { return local.getPort(); } return -1; }\n\n    ### Response:",
        "ground_truth": "Parse the local host port of the channel.\n\n@param channel\n@return int",
        "predict": " Constructs a dictionary mapping method names to _CallSettings.\n\n    The ``client_config`` parameter is parsed from a client configuration JSON\n    file of the form:\n\n    .. code-block:: json\n\n       {\n         \"interfaces\": {\n           \"google.fake.v1.ServiceName\": {\n             \"retry_codes\": {\n               \"idempotent\": [\"UNAVAILABLE\", \"DEADLINE_EXCEEDED\"],\n               \"non_idempotent\": []\n             },\n             \"retry_params\": {\n               \"default\": {\n                 \"initial_retry_delay_millis\": 100,\n                 \"retry_delay_multiplier\": 1.2,\n                 \"max_retry_delay_millis\": 1000,\n                 \"initial_rpc_timeout_millis\": 2000,\n                 \"rpc_timeout_multiplier\": 1.5,\n                 \"max_rpc_timeout_millis\": 30000,\n                 \"total_timeout_millis\": 45000\n               }\n             },\n             \"methods\": {\n               \"CreateFoo\": {\n                 \"retry_codes_name\": \"idempotent\",\n                 \"retry_params_name\": \"default\",\n                 \"timeout_millis\": 30000\n               },\n               \"Publish\": {\n                 \"retry_codes_name\": \"non_idempotent\",\n                 \"retry_params_name\": \"default\",\n                 \"bundling\": {\n                   \"element_count_threshold\": 40,\n                   \"element_count_limit\": 200,\n                   \"request_byte_threshold\": 90000,\n                   \"request_byte_limit\": 100000,\n                   \"delay_threshold_millis\": 100\n                 }\n               }\n             }\n           }\n         }\n       }\n\n    Args:\n      service_name (str): The fully-qualified name of this service, used as a\n       .\n\n    "
    },
    {
        "ID": 456,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func Verify(token string, key *rsa.PublicKey) error { parts := strings.Split(token, \".\") if len(parts) != 3 { return errors.New(\"jws: invalid token received, token must have 3 parts\") } signedContent := parts[0] + \".\" + parts[1] signatureString, err := base64.RawURLEncoding.DecodeString(parts[2]) if err != nil { return err } h := sha256.New() h.Write([]byte(signedContent)) return rsa.VerifyPKCS1v15(key, crypto.SHA256, h.Sum(nil), []byte(signatureString)) }\n\n    ### Response: // Verify tests whether the provided JWT token's signature was produced by the private key\n// associated with the supplied public key..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String parseSocketAddressToHostIp(SocketAddress socketAddress) { final InetSocketAddress addrs = (InetSocketAddress) socketAddress; if (addrs != null) { InetAddress addr = addrs.getAddress(); if (null != addr) { return addr.getHostAddress(); } } return StringUtils.EMPTY; }\n\n    ### Response:",
        "ground_truth": "Parse the host ip of socket address.\n\ne.g. /127.0.0.1:1234 -> 127.0.0.1\n\n@param socketAddress\n@return String",
        "predict": " // Verify tests whether the provided JWT token's signature was produced by the private key\n// associated with the supplied public key..\n\n    "
    },
    {
        "ID": 457,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function verify($signature, $baseString, $key) { $expectedSignature = $this->generateSignature($baseString, $key); if (empty($signature) || empty($expectedSignature)) { return false; } return (strcmp($expectedSignature, $signature) === 0); }\n\n    ### Response: Verifies given OAuth request.\n@param string $signature signature to be verified.\n@param string $baseString signature base string.\n@param string $key signature key.\n@return bool success..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void add(Connection connection) { markAccess(); if (null == connection) { return; } boolean res = this.conns.addIfAbsent(connection); if (res) { connection.increaseRef(); } }\n\n    ### Response:",
        "ground_truth": "add a connection\n\n@param connection",
        "predict": " Verifies given OAuth request.\n@param string $signature signature to be verified.\n@param string $baseString signature base string.\n@param string $key signature key.\n@return bool success..\n\n    "
    },
    {
        "ID": 458,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def initialize_logger(debug): \"\"\"Set up logger to be used by the library. Args: debug: Wheter to use debug level or not. Returns: A logger ready to be used. \"\"\" level = logging.DEBUG if debug else logging.INFO logger = logging.getLogger('cucco') logger.setLevel(level) formatter = logging.Formatter('%(asctime)s %(levelname).1s %(message)s') console_handler = logging.StreamHandler() console_handler.setLevel(level) console_handler.setFormatter(formatter) logger.addHandler(console_handler) return logger\n\n    ### Response: Set up logger to be used by the library.\n\n    Args:\n        debug: Wheter to use debug level or not.\n\n    Returns:\n        A logger ready to be used..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void removeAndTryClose(Connection connection) { if (null == connection) { return; } boolean res = this.conns.remove(connection); if (res) { connection.decreaseRef(); } if (connection.noRef()) { connection.close(); } }\n\n    ### Response:",
        "ground_truth": "removeAndTryClose a connection\n\n@param connection",
        "predict": " Set up logger to be used by the library.\n\n    Args:\n        debug: Wheter to use debug level or not.\n\n    Returns:\n        A logger ready to be used..\n\n    "
    },
    {
        "ID": 459,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _in(ins): \"\"\" Translates IN to asm. \"\"\" output = _16bit_oper(ins.quad[1]) output.append('ld b, h') output.append('ld c, l') output.append('in a, (c)') output.append('push af') return output\n\n    ### Response: Translates IN to asm..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Connection get() { markAccess(); if (null != this.conns) { List<Connection> snapshot = new ArrayList<Connection>(this.conns); if (snapshot.size() > 0) { return this.strategy.select(snapshot); } else { return null; } } else { return null; } }\n\n    ### Response:",
        "ground_truth": "get a connection\n\n@return",
        "predict": " Translates IN to asm..\n\n    "
    },
    {
        "ID": 460,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function clippingRectangleRounded($x1, $y1, $w, $h, $rTL, $rTR, $rBR, $rBL) { $this->save(); // start: top edge, left end $this->addContent(sprintf(\"\\n%.3F %.3F m \", $x1, $y1 - $rTL + $h)); // line: bottom edge, left end $this->addContent(sprintf(\"\\n%.3F %.3F l \", $x1, $y1 + $rBL)); // curve: bottom-left corner $this->ellipse($x1 + $rBL, $y1 + $rBL, $rBL, 0, 0, 8, 180, 270, false, false, false, true); // line: right edge, bottom end $this->addContent(sprintf(\"\\n%.3F %.3F l \", $x1 + $w - $rBR, $y1)); // curve: bottom-right corner $this->ellipse($x1 + $w - $rBR, $y1 + $rBR, $rBR, 0, 0, 8, 270, 360, false, false, false, true); // line: right edge, top end $this->addContent(sprintf(\"\\n%.3F %.3F l \", $x1 + $w, $y1 + $h - $rTR)); // curve: bottom-right corner $this->ellipse($x1 + $w - $rTR, $y1 + $h - $rTR, $rTR, 0, 0, 8, 0, 90, false, false, false, true); // line: bottom edge, right end $this->addContent(sprintf(\"\\n%.3F %.3F l \", $x1 + $rTL, $y1 + $h)); // curve: top-right corner $this->ellipse($x1 + $rTL, $y1 + $h - $rTL, $rTL, 0, 0, 8, 90, 180, false, false, false, true); // line: top edge, left end $this->addContent(sprintf(\"\\n%.3F %.3F l \", $x1 + $rBL, $y1)); // Close & clip $this->addContent(\" W n\"); }\n\n    ### Response: draw a clipping rounded rectangle, all the elements added after this will be clipped\n\n@param $x1\n@param $y1\n@param $w\n@param $h\n@param $rTL\n@param $rTR\n@param $rBR\n@param $rBL.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void registerCustomSerializer(String className, CustomSerializer serializer) { CustomSerializer prevSerializer = classCustomSerializer.putIfAbsent(className, serializer); if (prevSerializer != null) { throw new RuntimeException(\"CustomSerializer has been registered for class: \" + className + \", the custom serializer is: \" + prevSerializer.getClass().getName()); } }\n\n    ### Response:",
        "ground_truth": "Register custom serializer for class name.\n\n@param className\n@param serializer\n@return",
        "predict": " draw a clipping rounded rectangle, all the elements added after this will be clipped\n\n@param $x1\n@param $y1\n@param $w\n@param $h\n@param $rTL\n@param $rTR\n@param $rBR\n@param $rBL.\n\n    "
    },
    {
        "ID": 461,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def resolve_name(name): \"\"\"Takes a given input from a user and finds the url for it\"\"\" logger.debug(\"resolve_name: %s\", name) with Database(\"feeds\") as feeds, Database(\"aliases\") as aliases: if name in aliases.keys(): return feeds[aliases[name]] elif name in feeds.keys(): return feeds[name] else: print(\"Cannot find feed named: %s\" % name) return\n\n    ### Response: Takes a given input from a user and finds the url for it.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static CustomSerializer getCustomSerializer(String className) { if (!classCustomSerializer.isEmpty()) { return classCustomSerializer.get(className); } return null; }\n\n    ### Response:",
        "ground_truth": "Get the custom serializer for class name.\n\n@param className\n@return",
        "predict": " Takes a given input from a user and finds the url for it.\n\n    "
    },
    {
        "ID": 462,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def obj_from_file(filename='annotation.yaml', filetype='auto'): ''' Read object from file ''' if filetype == 'auto': _, ext = os.path.splitext(filename) filetype = ext[1:] if filetype in ('yaml', 'yml'): from ruamel.yaml import YAML yaml = YAML(typ=\"unsafe\") with open(filename, encoding=\"utf-8\") as f: obj = yaml.load(f) if obj is None: obj = {} # import yaml # with open(filename, encoding=\"utf-8\") as f: # intext = f.read() # obj = yaml.load(intext) elif filetype in ('pickle', 'pkl', 'pklz', 'picklezip'): fcontent = read_pkl_and_pklz(filename) # import pickle if sys.version_info[0] < 3: import cPickle as pickle else: import _pickle as pickle # import sPickle as pickle if sys.version_info.major == 2: obj = pickle.loads(fcontent) else: obj = pickle.loads(fcontent, encoding=\"latin1\") else: logger.error('Unknown filetype ' + filetype) return obj\n\n    ### Response: Read object from file.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void registerCustomSerializer(CommandCode code, CustomSerializer serializer) { CustomSerializer prevSerializer = commandCustomSerializer.putIfAbsent(code, serializer); if (prevSerializer != null) { throw new RuntimeException(\"CustomSerializer has been registered for command code: \" + code + \", the custom serializer is: \" + prevSerializer.getClass().getName()); } }\n\n    ### Response:",
        "ground_truth": "Register custom serializer for command code.\n\n@param code\n@param serializer\n@return",
        "predict": " Read object from file.\n\n    "
    },
    {
        "ID": 463,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function printFooter(\\PHPUnit\\Framework\\TestResult $result): void { parent::printFooter($result); $this->writeNewLine(); $this->write(\"Randomized with seed: {$this->seed}\"); $this->writeNewLine(); }\n\n    ### Response: Just add to the output the seed used to randomize the test suite.\n\n@param  PHPUnit\\Framework\\TestResult $result.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static CustomSerializer getCustomSerializer(CommandCode code) { if (!commandCustomSerializer.isEmpty()) { return commandCustomSerializer.get(code); } return null; }\n\n    ### Response:",
        "ground_truth": "Get the custom serializer for command code.\n\n@param code\n@return",
        "predict": " Just add to the output the seed used to randomize the test suite.\n\n@param  PHPUnit\\Framework\\TestResult $result.\n\n    "
    },
    {
        "ID": 464,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (m *ManagerImpl) callPreStartContainerIfNeeded(podUID, contName, resource string) error { m.mutex.Lock() eI, ok := m.endpoints[resource] if !ok { m.mutex.Unlock() return fmt.Errorf(\"endpoint not found in cache for a registered resource: %s\", resource) } if eI.opts == nil || !eI.opts.PreStartRequired { m.mutex.Unlock() klog.V(4).Infof(\"Plugin options indicate to skip PreStartContainer for resource: %s\", resource) return nil } devices := m.podDevices.containerDevices(podUID, contName, resource) if devices == nil { m.mutex.Unlock() return fmt.Errorf(\"no devices found allocated in local cache for pod %s, container %s, resource %s\", podUID, contName, resource) } m.mutex.Unlock() devs := devices.UnsortedList() klog.V(4).Infof(\"Issuing an PreStartContainer call for container, %s, of pod %s\", contName, podUID) _, err := eI.e.preStartContainer(devs) if err != nil { return fmt.Errorf(\"device plugin PreStartContainer rpc failed with err: %v\", err) } // TODO: Add metrics support for init RPC return nil }\n\n    ### Response: // callPreStartContainerIfNeeded issues PreStartContainer grpc call for device plugin resource\n// with PreStartRequired option set..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void start() { /** initial delay to execute schedule task, unit: ms */ long initialDelay = ConfigManager.conn_monitor_initial_delay(); /** period of schedule task, unit: ms*/ long period = ConfigManager.conn_monitor_period(); this.executor = new ScheduledThreadPoolExecutor(1, new NamedThreadFactory( \"ConnectionMonitorThread\", true), new ThreadPoolExecutor.AbortPolicy()); MonitorTask monitorTask = new MonitorTask(); this.executor.scheduleAtFixedRate(monitorTask, initialDelay, period, TimeUnit.MILLISECONDS); }\n\n    ### Response:",
        "ground_truth": "Start schedule task",
        "predict": " // callPreStartContainerIfNeeded issues PreStartContainer grpc call for device plugin resource\n// with PreStartRequired option set..\n\n    "
    },
    {
        "ID": 465,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function getProperties($requestedProperties) { $newProperties = []; foreach ($requestedProperties as $propName) { if (isset($this->principalProperties[$propName])) { $newProperties[$propName] = $this->principalProperties[$propName]; } } return $newProperties; }\n\n    ### Response: Returns a list of properties.\n\n@param array $requestedProperties\n\n@return array.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public boolean isConnected(String remoteAddr) { Url url = this.rpcRemoting.addressParser.parse(remoteAddr); return this.isConnected(url); }\n\n    ### Response:",
        "ground_truth": "check whether a client address connected\n\n@param remoteAddr\n@return",
        "predict": " Returns a list of properties.\n\n@param array $requestedProperties\n\n@return array.\n\n    "
    },
    {
        "ID": 466,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def anonymous_required(view, redirect_to=None): \"\"\" Only allow if user is NOT authenticated. \"\"\" if redirect_to is None: redirect_to = settings.LOGIN_REDIRECT_URL @wraps(view) def wrapper(request, *a, **k): if request.user and request.user.is_authenticated(): return HttpResponseRedirect(redirect_to) return view(request, *a, **k) return wrapper\n\n    ### Response: Only allow if user is NOT authenticated..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void initWriteBufferWaterMark() { int lowWaterMark = this.netty_buffer_low_watermark(); int highWaterMark = this.netty_buffer_high_watermark(); if (lowWaterMark > highWaterMark) { throw new IllegalArgumentException( String .format( \"[server side] bolt netty high water mark {%s} should not be smaller than low water mark {%s} bytes)\", highWaterMark, lowWaterMark)); } else { logger.warn( \"[server side] bolt netty low water mark is {} bytes, high water mark is {} bytes\", lowWaterMark, highWaterMark); } this.bootstrap.childOption(ChannelOption.WRITE_BUFFER_WATER_MARK, new WriteBufferWaterMark( lowWaterMark, highWaterMark)); }\n\n    ### Response:",
        "ground_truth": "init netty write buffer water mark",
        "predict": " Only allow if user is NOT authenticated..\n\n    "
    },
    {
        "ID": 467,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _disconnect(self, mqttc, userdata, rc): \"\"\" The callback for when a DISCONNECT occurs. :param mqttc: The client instance for this callback :param userdata: The private userdata for the mqtt client. Not used in Polyglot :param rc: Result code of connection, 0 = Graceful, anything else is unclean \"\"\" self.connected = False if rc != 0: LOGGER.info(\"MQTT Unexpected disconnection. Trying reconnect.\") try: self._mqttc.reconnect() except Exception as ex: template = \"An exception of type {0} occured. Arguments:\\n{1!r}\" message = template.format(type(ex).__name__, ex.args) LOGGER.error(\"MQTT Connection error: \" + message) else: LOGGER.info(\"MQTT Graceful disconnection.\")\n\n    ### Response: The callback for when a DISCONNECT occurs.\n\n        :param mqttc: The client instance for this callback\n        :param userdata: The private userdata for the mqtt client. Not used in Polyglot\n        :param rc: Result code of connection, 0 = Graceful, anything else is unclean.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static FramedataImpl1 get(Opcode opcode) { if (opcode== null) { throw new IllegalArgumentException(\"Supplied opcode cannot be null\"); } switch (opcode) { case PING: return new PingFrame(); case PONG: return new PongFrame(); case TEXT: return new TextFrame(); case BINARY: return new BinaryFrame(); case CLOSING: return new CloseFrame(); case CONTINUOUS: return new ContinuousFrame(); default: throw new IllegalArgumentException(\"Supplied opcode is invalid\"); } }\n\n    ### Response:",
        "ground_truth": "Get a frame with a specific opcode\n\n@param opcode the opcode representing the frame\n@return the frame with a specific opcode",
        "predict": " The callback for when a DISCONNECT occurs.\n\n        :param mqttc: The client instance for this callback\n        :param userdata: The private userdata for the mqtt client. Not used in Polyglot\n        :param rc: Result code of connection, 0 = Graceful, anything else is unclean.\n\n    "
    },
    {
        "ID": 468,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function e($resetAfterwards = true) { try { // Get the contents and echo them echo $this->flush($resetAfterwards); // Afford chaining return $this; } catch (\\Exception $e) { throw $e; } }\n\n    ### Response: Echo the contents of the writer\n@param  $resetAfterwards Reset the writer contents after flushing?\n@return Ansi self, for chaining.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static boolean batch( WebSocketImpl ws, ByteChannel sockchannel ) throws IOException { if (ws == null) { return false; } ByteBuffer buffer = ws.outQueue.peek(); WrappedByteChannel c = null; if( buffer == null ) { if( sockchannel instanceof WrappedByteChannel ) { c = (WrappedByteChannel) sockchannel; if( c.isNeedWrite() ) { c.writeMore(); } } } else { do {// FIXME writing as much as possible is unfair!! /*int written = */sockchannel.write( buffer ); if( buffer.remaining() > 0 ) { return false; } else { ws.outQueue.poll(); // Buffer finished. Remove it. buffer = ws.outQueue.peek(); } } while ( buffer != null ); } if( ws.outQueue.isEmpty() && ws.isFlushAndClose() && ws.getDraft() != null && ws.getDraft().getRole() != null && ws.getDraft().getRole() == Role.SERVER ) {// ws.closeConnection(); } return c == null || !((WrappedByteChannel) sockchannel).isNeedWrite(); }\n\n    ### Response:",
        "ground_truth": "Returns whether the whole outQueue has been flushed\n@param ws The WebSocketImpl associated with the channels\n@param sockchannel The channel to write to\n@throws IOException May be thrown by {@link WrappedByteChannel#writeMore()}\n@return returns Whether there is more data to write",
        "predict": " Echo the contents of the writer\n@param  $resetAfterwards Reset the writer contents after flushing?\n@return Ansi self, for chaining.\n\n    "
    },
    {
        "ID": 469,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function Announce($DiscussionID = '', $Target = '') { $Discussion = $this->DiscussionModel->GetID($DiscussionID); if (!$Discussion) throw NotFoundException('Discussion'); $this->Permission('Vanilla.Discussions.Announce', TRUE, 'Category', $Discussion->PermissionCategoryID); if ($this->Form->IsPostBack()) { // Save the property. $CacheKeys = array('Announcements', 'Announcements_'.GetValue('CategoryID', $Discussion)); $this->DiscussionModel->SQL->Cache($CacheKeys); $this->DiscussionModel->SetProperty($DiscussionID, 'Announce', (int)$this->Form->GetFormValue('Announce', 0)); if ($Target) $this->RedirectUrl = Url($Target); } else { if (!$Discussion->Announce) $Discussion->Announce = 2; $this->Form->SetData($Discussion); } $Discussion = (array)$Discussion; $Category = CategoryModel::Categories($Discussion['CategoryID']); $this->SetData('Discussion', $Discussion); $this->SetData('Category', $Category); $this->Title(T('Announce')); $this->Render(); }\n\n    ### Response: Allows user to announce or unannounce a discussion.\n\nIf the discussion isn't announced, this announces it.\nIf it is already announced, this unannounces it.\nAnnounced discussions stay at the top of the discussions\nlist regardless of how long ago the last comment was.\n\n@since 2.0.0\n@access public\n\n@param int $DiscussionID Unique discussion ID.\n@param string $TransientKey Single-use hash to prove intent..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void setCode(int code) { this.code = code; // CloseFrame.TLS_ERROR is not allowed to be transfered over the wire if (code == CloseFrame.TLS_ERROR) { this.code = CloseFrame.NOCODE; this.reason = \"\"; } updatePayload(); }\n\n    ### Response:",
        "ground_truth": "Set the close code for this close frame\n@param code the close code",
        "predict": " Allows user to announce or unannounce a discussion.\n\nIf the discussion isn't announced, this announces it.\nIf it is already announced, this unannounces it.\nAnnounced discussions stay at the top of the discussions\nlist regardless of how long ago the last comment was.\n\n@since 2.0.0\n@access public\n\n@param int $DiscussionID Unique discussion ID.\n@param string $TransientKey Single-use hash to prove intent..\n\n    "
    },
    {
        "ID": 470,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function getDefaultAction(ServerRequest $request) { $action = $request->getParam('action'); $name = $this->getConfig('actionMap.' . $action); if ($name === null) { return $action; } if (!is_string($name)) { $type = is_object($name) ? get_class($name) : gettype($name); $message = sprintf('Invalid action type for `%s`. Expected `string` or `null`, got `%s`.', $action, $type); throw new UnexpectedValueException($message); } return $name; }\n\n    ### Response: Returns authorization action name for a controller action resolved from the request.\n\n@param \\Cake\\Http\\ServerRequest $request Server request.\n@return string\n@throws \\UnexpectedValueException When invalid action type encountered..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void validateUtf8(ByteBuffer payload, int mark) throws InvalidDataException { try { payload.position( payload.position() + 2 ); reason = Charsetfunctions.stringUtf8( payload ); } catch ( IllegalArgumentException e ) { throw new InvalidDataException( CloseFrame.NO_UTF8 ); } finally { payload.position( mark ); } }\n\n    ### Response:",
        "ground_truth": "Validate the payload to valid utf8\n@param mark the current mark\n@param payload the current payload\n@throws InvalidDataException the current payload is not a valid utf8",
        "predict": " Returns authorization action name for a controller action resolved from the request.\n\n@param \\Cake\\Http\\ServerRequest $request Server request.\n@return string\n@throws \\UnexpectedValueException When invalid action type encountered..\n\n    "
    },
    {
        "ID": 471,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function getActiveProfile() { $profiles = $this->getProfiles(); $profileId = $this->getProfileId(); if (!is_array($profiles)) { throw new \\Exception('<fg=red>The config is invalid</fg=red>'); } foreach ($profiles as $profile) { if ($profile['profileId'] == $profileId) { return $profile; } } }\n\n    ### Response: Get the active profile\n\n@return the profile.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void updatePayload() { byte[] by = Charsetfunctions.utf8Bytes(reason); ByteBuffer buf = ByteBuffer.allocate(4); buf.putInt(code); buf.position(2); ByteBuffer pay = ByteBuffer.allocate(2 + by.length); pay.put(buf); pay.put(by); pay.rewind(); super.setPayload(pay); }\n\n    ### Response:",
        "ground_truth": "Update the payload to represent the close code and the reason",
        "predict": " Get the active profile\n\n@return the profile.\n\n    "
    },
    {
        "ID": 472,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void onEachNode( Session session, boolean includeSystemNodes, NodeOperation operation ) throws Exception { Node node = session.getRootNode(); operation.run(node); NodeIterator iter = node.getNodes(); while (iter.hasNext()) { Node child = iter.nextNode(); if (!includeSystemNodes && child.getName().equals(\"jcr:system\")) continue; operation.run(child); onEachNodeBelow(child, operation); } }\n\n    ### Response: Execute the supplied operation on each node in the workspace accessible by the supplied session.\n\n@param session the session\n@param includeSystemNodes true if all nodes under \"/jcr:system\" should be included, or false if the system nodes should be\nexcluded\n@param operation the operation\n@throws Exception the exception thrown by the repository or the operation.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private HandshakeState containsRequestedProtocol(String requestedProtocol) { for( IProtocol knownProtocol : knownProtocols ) { if( knownProtocol.acceptProvidedProtocol( requestedProtocol ) ) { protocol = knownProtocol; log.trace(\"acceptHandshake - Matching protocol found: {}\", protocol); return HandshakeState.MATCHED; } } return HandshakeState.NOT_MATCHED; }\n\n    ### Response:",
        "ground_truth": "Check if the requested protocol is part of this draft\n@param requestedProtocol the requested protocol\n@return MATCHED if it is matched, otherwise NOT_MATCHED",
        "predict": " Execute the supplied operation on each node in the workspace accessible by the supplied session.\n\n@param session the session\n@param includeSystemNodes true if all nodes under \"/jcr:system\" should be included, or false if the system nodes should be\nexcluded\n@param operation the operation\n@throws Exception the exception thrown by the repository or the operation.\n\n    "
    },
    {
        "ID": 473,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _create_delete_one_query(self, row_id, ctx): \"\"\" Delete row by id query creation. :param int row_id: Identifier of the deleted row. :param ResourceQueryContext ctx: The context of this delete query. \"\"\" assert isinstance(ctx, ResourceQueryContext) return self._orm.query(self.model_cls).filter(self._model_pk == row_id)\n\n    ### Response: Delete row by id query creation.\n\n        :param int row_id: Identifier of the deleted row.\n        :param ResourceQueryContext ctx: The context of this delete query..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void translateSingleFrameCheckLengthLimit(long length) throws LimitExceededException { if( length > Integer.MAX_VALUE ) { log.trace(\"Limit exedeed: Payloadsize is to big...\"); throw new LimitExceededException(\"Payloadsize is to big...\"); } if( length > maxFrameSize) { log.trace( \"Payload limit reached. Allowed: {} Current: {}\" , maxFrameSize, length); throw new LimitExceededException( \"Payload limit reached.\", maxFrameSize ); } if( length < 0 ) { log.trace(\"Limit underflow: Payloadsize is to little...\"); throw new LimitExceededException(\"Payloadsize is to little...\"); } }\n\n    ### Response:",
        "ground_truth": "Check if the frame size exceeds the allowed limit\n@param length the current payload length\n@throws LimitExceededException if the payload length is to big",
        "predict": " Delete row by id query creation.\n\n        :param int row_id: Identifier of the deleted row.\n        :param ResourceQueryContext ctx: The context of this delete query..\n\n    "
    },
    {
        "ID": 474,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function setSparkJob($var) { GPBUtil::checkMessage($var, \\Google\\Cloud\\Dataproc\\V1\\SparkJob::class); $this->writeOneof(3, $var); return $this; }\n\n    ### Response: Job is a Spark job.\n\nGenerated from protobuf field .google.cloud.dataproc.v1.SparkJob spark_job = 3;\n@param \\Google\\Cloud\\Dataproc\\V1\\SparkJob $var\n@return $this.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void translateSingleFrameCheckPacketSize(int maxpacketsize, int realpacketsize) throws IncompleteException { if( maxpacketsize < realpacketsize ) { log.trace( \"Incomplete frame: maxpacketsize < realpacketsize\" ); throw new IncompleteException( realpacketsize ); } }\n\n    ### Response:",
        "ground_truth": "Check if the max packet size is smaller than the real packet size\n@param maxpacketsize the max packet size\n@param realpacketsize the real packet size\n@throws IncompleteException if the maxpacketsize is smaller than the realpackagesize",
        "predict": " Job is a Spark job.\n\nGenerated from protobuf field .google.cloud.dataproc.v1.SparkJob spark_job = 3;\n@param \\Google\\Cloud\\Dataproc\\V1\\SparkJob $var\n@return $this.\n\n    "
    },
    {
        "ID": 475,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (s Service) StartCommands() ([]string, error) { commands := make([]string, 0, 1+len(s.app.Prerequisites)) for _, prerequisite := range s.app.Prerequisites { commands = append(commands, prerequisite.StartCommands(s.executable)...) } commands = append(commands, s.app.StartCommands(s.executable)...) return commands, nil }\n\n    ### Response: // StartCommands returns a slice of strings. that are\n// shell commands to be executed by a shell which start the service..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private String generateFinalKey( String in ) { String seckey = in.trim(); String acc = seckey + \"258EAFA5-E914-47DA-95CA-C5AB0DC85B11\"; MessageDigest sh1; try { sh1 = MessageDigest.getInstance( \"SHA1\" ); } catch ( NoSuchAlgorithmException e ) { throw new IllegalStateException( e ); } return Base64.encodeBytes( sh1.digest( acc.getBytes() ) ); }\n\n    ### Response:",
        "ground_truth": "Generate a final key from a input string\n@param in the input string\n@return a final key",
        "predict": " // StartCommands returns a slice of strings. that are\n// shell commands to be executed by a shell which start the service..\n\n    "
    },
    {
        "ID": 476,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def request_bytesize(self): \"\"\"The size of in bytes of the bundled field elements.\"\"\" return sum(len(str(e)) for elts in self._in_deque for e in elts)\n\n    ### Response: The size of in bytes of the bundled field elements..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void processFrameContinuousAndNonFin(WebSocketImpl webSocketImpl, Framedata frame, Opcode curop) throws InvalidDataException { if( curop != Opcode.CONTINUOUS ) { processFrameIsNotFin(frame); } else if( frame.isFin() ) { processFrameIsFin(webSocketImpl, frame); } else if( currentContinuousFrame == null ) { log.error( \"Protocol error: Continuous frame sequence was not started.\" ); throw new InvalidDataException( CloseFrame.PROTOCOL_ERROR, \"Continuous frame sequence was not started.\" ); } //Check if the whole payload is valid utf8, when the opcode indicates a text if( curop == Opcode.TEXT && !Charsetfunctions.isValidUTF8( frame.getPayloadData() ) ) { log.error( \"Protocol error: Payload is not UTF8\" ); throw new InvalidDataException( CloseFrame.NO_UTF8 ); } //Checking if the current continuous frame contains a correct payload with the other frames combined if( curop == Opcode.CONTINUOUS && currentContinuousFrame != null ) { addToBufferList(frame.getPayloadData()); } }\n\n    ### Response:",
        "ground_truth": "Process the frame if it is a continuous frame or the fin bit is not set\n@param webSocketImpl the websocket implementation to use\n@param frame the current frame\n@param curop the current Opcode\n@throws InvalidDataException if there is a protocol error",
        "predict": " The size of in bytes of the bundled field elements..\n\n    "
    },
    {
        "ID": 477,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function get($path) { if ($path instanceof Context) { $path = $path->unwrap(); } if ($path === null) { return null; } elseif (is_string($path) || is_integer($path)) { if (is_array($this->value)) { return array_key_exists($path, $this->value) ? $this->value[$path] : null; } elseif (is_object($this->value)) { try { return ObjectAccess::getProperty($this->value, $path); } catch (PropertyNotAccessibleException $exception) { return null; } } } else { throw new EvaluationException('Path is not of type string or integer, got ' . gettype($path), 1344418464); } }\n\n    ### Response: Get a value of the context\n\nThis basically acts as a safe access to non-existing properties, unified array and\nproperty access (using getters) and access to the current value (empty path).\n\nIf a property or key did not exist this method will return NULL.\n\n@param string|integer|Context $path The path as string or Context value, will be unwrapped for convenience\n@return mixed The value\n@throws EvaluationException.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void processFrameBinary(WebSocketImpl webSocketImpl, Framedata frame) { try { webSocketImpl.getWebSocketListener().onWebsocketMessage( webSocketImpl, frame.getPayloadData() ); } catch ( RuntimeException e ) { logRuntimeException(webSocketImpl, e); } }\n\n    ### Response:",
        "ground_truth": "Process the frame if it is a binary frame\n@param webSocketImpl the websocket impl\n@param frame the frame",
        "predict": " Get a value of the context\n\nThis basically acts as a safe access to non-existing properties, unified array and\nproperty access (using getters) and access to the current value (empty path).\n\nIf a property or key did not exist this method will return NULL.\n\n@param string|integer|Context $path The path as string or Context value, will be unwrapped for convenience\n@return mixed The value\n@throws EvaluationException.\n\n    "
    },
    {
        "ID": 478,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def jkeys(jfile, key_path=None, in_memory=True, ignore_prefix=('.', '_')): \"\"\" get keys for initial json level, or at level after following key_path Parameters ---------- jfile : str, file_like or path_like if str, must be existing file or folder, if file_like, must have 'read' method if path_like, must have 'iterdir' method (see pathlib.Path) key_path : list[str] a list of keys to index into the json before returning keys in_memory : bool if true reads json into memory before finding keys (this is faster but uses more memory) ignore_prefix : list[str] ignore folders beginning with these prefixes Examples -------- >>> from jsonextended.utils import MockPath >>> file_obj = MockPath('test.json',is_file=True, ... content=''' ... { ... \"a\": 1, ... \"b\": [1.1,2.1], ... \"c\": {\"d\":\"e\",\"f\":\"g\"} ... } ... ''') ... >>> jkeys(file_obj) ['a', 'b', 'c'] >>> jkeys(file_obj,[\"c\"]) ['d', 'f'] >>> from jsonextended.utils import get_test_path >>> path = get_test_path() >>> jkeys(path) ['dir1', 'dir2', 'dir3'] >>> path = get_test_path() >>> jkeys(path, ['dir1','file1'], in_memory=True) ['initial', 'meta', 'optimised', 'units'] \"\"\" key_path = [] if key_path is None else key_path def eval_file(file_obj): if not in_memory: return _get_keys_ijson(file_obj, key_path) else: return _get_keys(file_obj, key_path) if isinstance(jfile, basestring): if not os.path.exists(jfile): raise IOError('jfile does not exist: {}'.format(jfile)) if os.path.isdir(jfile): jpath = pathlib.Path(jfile) return _get_keys_folder(jpath, key_path, in_memory, ignore_prefix) else: with open(jfile, 'r') as file_obj: return eval_file(file_obj) elif hasattr(jfile, 'read'): return eval_file(jfile) elif hasattr(jfile, 'iterdir'): if jfile.is_file(): with jfile.open('r') as file_obj: return eval_file(file_obj) else: return _get_keys_folder(jfile, key_path, in_memory, ignore_prefix) else: raise ValueError( 'jfile should be a str, ' 'file_like or path_like object: {}'.format(jfile))\n\n    ### Response: get keys for initial json level, or at level after following key_path\n\n    Parameters\n    ----------\n    jfile : str, file_like or path_like\n        if str, must be existing file or folder,\n        if file_like, must have 'read' method\n        if path_like, must have 'iterdir' method (see pathlib.Path)\n    key_path : list[str]\n        a list of keys to index into the json before returning keys\n    in_memory : bool\n        if true reads json into memory before finding keys\n        (this is faster but uses more memory)\n    ignore_prefix : list[str]\n        ignore folders beginning with these prefixes\n\n    Examples\n    --------\n\n    >>> from jsonextended.utils import MockPath\n    >>> file_obj = MockPath('test.json',is_file=True,\n    ... content='''\n    ... {\n    ...  \"a\": 1,\n    ...  \"b\": [1.1,2.1],\n    ...  \"c\": {\"d\":\"e\",\"f\":\"g\"}\n    ... }\n    ... ''')\n    ...\n    >>> jkeys(file_obj)\n    ['a', 'b', 'c']\n\n    >>> jkeys(file_obj,[\"c\"])\n    ['d', 'f']\n\n    >>> from jsonextended.utils import get_test_path\n    >>> path = get_test_path()\n    >>> jkeys(path)\n    ['dir1', 'dir2', 'dir3']\n\n    >>> path = get_test_path()\n    >>> jkeys(path, ['dir1','file1'], in_memory=True)\n    ['initial', 'meta', 'optimised', 'units'].\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void logRuntimeException(WebSocketImpl webSocketImpl, RuntimeException e) { log.error( \"Runtime exception during onWebsocketMessage\", e ); webSocketImpl.getWebSocketListener().onWebsocketError( webSocketImpl, e ); }\n\n    ### Response:",
        "ground_truth": "Log the runtime exception to the specific WebSocketImpl\n@param webSocketImpl the implementation of the websocket\n@param e the runtime exception",
        "predict": " get keys for initial json level, or at level after following key_path\n\n    Parameters\n    ----------\n    jfile : str, file_like or path_like\n        if str, must be existing file or folder,\n        if file_like, must have 'read' method\n        if path_like, must have 'iterdir' method (see pathlib.Path)\n    key_path : list[str]\n        a list of keys to index into the json before returning keys\n    in_memory : bool\n        if true reads json into memory before finding keys\n        (this is faster but uses more memory)\n    ignore_prefix : list[str]\n        ignore folders beginning with these prefixes\n\n    Examples\n    --------\n\n    >>> from jsonextended.utils import MockPath\n    >>> file_obj = MockPath('test.json',is_file=True,\n    ... content='''\n    ... {\n    ...  \"a\": 1,\n    ...  \"b\": [1.1,2.1],\n    ...  \"c\": {\"d\":\"e\",\"f\":\"g\"}\n    ... }\n    ... ''')\n    ...\n    >>> jkeys(file_obj)\n    ['a', 'b', 'c']\n\n    >>> jkeys(file_obj,[\"c\"])\n    ['d', 'f']\n\n    >>> from jsonextended.utils import get_test_path\n    >>> path = get_test_path()\n    >>> jkeys(path)\n    ['dir1', 'dir2', 'dir3']\n\n    >>> path = get_test_path()\n    >>> jkeys(path, ['dir1','file1'], in_memory=True)\n    ['initial', 'meta', 'optimised', 'units'].\n\n    "
    },
    {
        "ID": 479,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def keys(self): \"\"\"Iterates over the hive's keys. Yields WinRegKey namedtuples containing: path: path of the key \"RootKey\\\\Key\\\\...\" timestamp: date and time of last modification values: list of values ((\"ValueKey\", \"ValueType\", ValueValue), ... ) \"\"\" for node in self.node_children(self.root()): yield from self._visit_registry(node, self._rootkey)\n\n    ### Response: Iterates over the hive's keys.\n\n        Yields WinRegKey namedtuples containing:\n\n            path: path of the key \"RootKey\\\\Key\\\\...\"\n            timestamp: date and time of last modification\n            values: list of values ((\"ValueKey\", \"ValueType\", ValueValue), ... ).\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void processFrameText(WebSocketImpl webSocketImpl, Framedata frame) throws InvalidDataException { try { webSocketImpl.getWebSocketListener().onWebsocketMessage( webSocketImpl, Charsetfunctions.stringUtf8( frame.getPayloadData() ) ); } catch ( RuntimeException e ) { logRuntimeException(webSocketImpl, e); } }\n\n    ### Response:",
        "ground_truth": "Process the frame if it is a text frame\n@param webSocketImpl the websocket impl\n@param frame the frame",
        "predict": " Iterates over the hive's keys.\n\n        Yields WinRegKey namedtuples containing:\n\n            path: path of the key \"RootKey\\\\Key\\\\...\"\n            timestamp: date and time of last modification\n            values: list of values ((\"ValueKey\", \"ValueType\", ValueValue), ... ).\n\n    "
    },
    {
        "ID": 480,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def prepare_zoho_headers(token, headers=None): \"\"\"Add a `Zoho Token`_ to the request URI. Recommended method of passing bearer tokens. Authorization: Zoho-oauthtoken h480djs93hd8 .. _`Zoho-oauthtoken Token`: custom zoho token \"\"\" headers = headers or {} headers[\"Authorization\"] = \"{token_header} {token}\".format( token_header=ZOHO_TOKEN_HEADER, token=token ) return headers\n\n    ### Response: Add a `Zoho Token`_ to the request URI.\n        Recommended method of passing bearer tokens.\n\n        Authorization: Zoho-oauthtoken h480djs93hd8\n\n        .. _`Zoho-oauthtoken Token`: custom zoho token.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void processFrameIsFin(WebSocketImpl webSocketImpl, Framedata frame) throws InvalidDataException { if( currentContinuousFrame == null ) { log.trace( \"Protocol error: Previous continuous frame sequence not completed.\" ); throw new InvalidDataException( CloseFrame.PROTOCOL_ERROR, \"Continuous frame sequence was not started.\" ); } addToBufferList(frame.getPayloadData()); checkBufferLimit(); if( currentContinuousFrame.getOpcode() == Opcode.TEXT ) { ((FramedataImpl1) currentContinuousFrame).setPayload( getPayloadFromByteBufferList() ); ((FramedataImpl1) currentContinuousFrame).isValid(); try { webSocketImpl.getWebSocketListener().onWebsocketMessage( webSocketImpl, Charsetfunctions.stringUtf8( currentContinuousFrame.getPayloadData() ) ); } catch ( RuntimeException e ) { logRuntimeException(webSocketImpl, e); } } else if( currentContinuousFrame.getOpcode() == Opcode.BINARY ) { ((FramedataImpl1) currentContinuousFrame).setPayload( getPayloadFromByteBufferList() ); ((FramedataImpl1) currentContinuousFrame).isValid(); try { webSocketImpl.getWebSocketListener().onWebsocketMessage( webSocketImpl, currentContinuousFrame.getPayloadData() ); } catch ( RuntimeException e ) { logRuntimeException(webSocketImpl, e); } } currentContinuousFrame = null; clearBufferList(); }\n\n    ### Response:",
        "ground_truth": "Process the frame if it is the last frame\n@param webSocketImpl the websocket impl\n@param frame the frame\n@throws InvalidDataException if there is a protocol error",
        "predict": " Add a `Zoho Token`_ to the request URI.\n        Recommended method of passing bearer tokens.\n\n        Authorization: Zoho-oauthtoken h480djs93hd8\n\n        .. _`Zoho-oauthtoken Token`: custom zoho token.\n\n    "
    },
    {
        "ID": 481,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def cancel(self, consumers): \"\"\" Cancel a consumer that was previously started with consume. Args: consumer (list of fedora_messaging.api.Consumer): The consumers to cancel. \"\"\" for consumer in consumers: del self._consumers[consumer.queue] protocol = yield self.when_connected() yield protocol.cancel(consumer)\n\n    ### Response: Cancel a consumer that was previously started with consume.\n\n        Args:\n            consumer (list of fedora_messaging.api.Consumer): The consumers to cancel..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void processFrameIsNotFin(Framedata frame) throws InvalidDataException { if( currentContinuousFrame != null ) { log.trace( \"Protocol error: Previous continuous frame sequence not completed.\" ); throw new InvalidDataException( CloseFrame.PROTOCOL_ERROR, \"Previous continuous frame sequence not completed.\" ); } currentContinuousFrame = frame; addToBufferList(frame.getPayloadData()); checkBufferLimit(); }\n\n    ### Response:",
        "ground_truth": "Process the frame if it is not the last frame\n@param frame the frame\n@throws InvalidDataException if there is a protocol error",
        "predict": " Cancel a consumer that was previously started with consume.\n\n        Args:\n            consumer (list of fedora_messaging.api.Consumer): The consumers to cancel..\n\n    "
    },
    {
        "ID": 482,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function pruneAttempts(DateTime $before = null) { if (!$before) { $duration = (int) $this->config->get('concrete.user.deactivation.authentication_failure.duration'); $before = Carbon::now('UTC')->subSeconds($duration); } // Load our repository and get entries before our date $repository = $this->entityManager->getRepository(LoginAttempt::class); $results = $repository->before($before); // Loop through and remove those entries $batch = []; $max = 50; foreach ($results as $result) { $this->entityManager->remove($result); $batch[] = $result; // Handle the batch $batch = $this->manageBatch($batch, $max); } // Close off the batch $this->manageBatch($batch); }\n\n    ### Response: Prune old login attempts\n\n@param \\DateTime|null $before The date to prune before. This MUST be in UTC, if not passed this value is derived\nfrom config.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void processFrameClosing(WebSocketImpl webSocketImpl, Framedata frame) { int code = CloseFrame.NOCODE; String reason = \"\"; if( frame instanceof CloseFrame ) { CloseFrame cf = ( CloseFrame ) frame; code = cf.getCloseCode(); reason = cf.getMessage(); } if( webSocketImpl.getReadyState() == ReadyState.CLOSING ) { // complete the close handshake by disconnecting webSocketImpl.closeConnection( code, reason, true ); } else { // echo close handshake if( getCloseHandshakeType() == CloseHandshakeType.TWOWAY ) webSocketImpl.close( code, reason, true ); else webSocketImpl.flushAndClose( code, reason, false ); } }\n\n    ### Response:",
        "ground_truth": "Process the frame if it is a closing frame\n@param webSocketImpl the websocket impl\n@param frame the frame",
        "predict": " Prune old login attempts\n\n@param \\DateTime|null $before The date to prune before. This MUST be in UTC, if not passed this value is derived\nfrom config.\n\n    "
    },
    {
        "ID": 483,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static List<RedisCommand<?, ?, ?>> drainCommands(Queue<? extends RedisCommand<?, ?, ?>> source) { List<RedisCommand<?, ?, ?>> target = new ArrayList<>(source.size()); RedisCommand<?, ?, ?> cmd; while ((cmd = source.poll()) != null) { if (!cmd.isDone()) { target.add(cmd); } } return target; }\n\n    ### Response: Drain commands from a queue and return only active commands.\n\n@param source the source queue.\n@return List of commands..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void checkBufferLimit() throws LimitExceededException { long totalSize = getByteBufferListSize(); if( totalSize > maxFrameSize ) { clearBufferList(); log.trace(\"Payload limit reached. Allowed: {} Current: {}\", maxFrameSize, totalSize); throw new LimitExceededException(maxFrameSize); } }\n\n    ### Response:",
        "ground_truth": "Check the current size of the buffer and throw an exception if the size is bigger than the max allowed frame size\n@throws LimitExceededException if the current size is bigger than the allowed size",
        "predict": " Drain commands from a queue and return only active commands.\n\n@param source the source queue.\n@return List of commands..\n\n    "
    },
    {
        "ID": 484,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function created(Permission $permission) { $superAdminRole = RoleRepository::GET_SUPER_ADMIN(); if ($superAdminRole) { $superAdminRole->givePermissionTo($permission); } // if ($permission->is_default_action === false) { $this->createLanguageTerm($permission->model, $permission->action); } }\n\n    ### Response: Listen to the Permission created event.\n\n@param Permission $permission\n@return void.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private ByteBuffer getPayloadFromByteBufferList() throws LimitExceededException { long totalSize = 0; ByteBuffer resultingByteBuffer; synchronized (byteBufferList) { for (ByteBuffer buffer : byteBufferList) { totalSize += buffer.limit(); } checkBufferLimit(); resultingByteBuffer = ByteBuffer.allocate( (int) totalSize ); for (ByteBuffer buffer : byteBufferList) { resultingByteBuffer.put( buffer ); } } resultingByteBuffer.flip(); return resultingByteBuffer; }\n\n    ### Response:",
        "ground_truth": "Method to generate a full bytebuffer out of all the fragmented frame payload\n@return a bytebuffer containing all the data\n@throws LimitExceededException will be thrown when the totalSize is bigger then Integer.MAX_VALUE due to not being able to allocate more",
        "predict": " Listen to the Permission created event.\n\n@param Permission $permission\n@return void.\n\n    "
    },
    {
        "ID": 485,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function authenticate() { $email = Input::get('email'); $password = Input::get('password'); $returnURL = Input::get('returnURL'); if (Auth::attempt(['email' => $email, 'password' => $password])) { // Authentication passed... // return redirect()->intended('dashboard'); return redirect($returnURL); } }\n\n    ### Response: Handle an authentication attempt.\n\n@return Response.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private long getByteBufferListSize() { long totalSize = 0; synchronized (byteBufferList) { for (ByteBuffer buffer : byteBufferList) { totalSize += buffer.limit(); } } return totalSize; }\n\n    ### Response:",
        "ground_truth": "Get the current size of the resulting bytebuffer in the bytebuffer list\n@return the size as long (to not get an integer overflow)",
        "predict": " Handle an authentication attempt.\n\n@return Response.\n\n    "
    },
    {
        "ID": 486,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function render() { $presenter = $this->createPresenter($this->getRequiredTemplateVariable('Presenter')); try { $arguments = $this->getArguments($presenter); $result = call_user_func_array($presenter, $arguments); } catch(\\Exception $e) { if ($this->throwRenderExceptions) { throw $e; } $this->Logger->error($e->getMessage() . \"\\n\\nURL: \" . \\URLUtils::fullUrl() . \"\\n\\nTemplate Vars:\\n\" . print_r($this->templateVars, true) . (isset($arguments) ? \"\\n\\n$presenter args:\\n\" . print_r($arguments, true) : '') ); $result = ''; } $this->setTemplateVariable('PRESENTER_RESULT', $result); // just return something so the template engine thinks // something happened. return array(array()); }\n\n    ### Response: Loads a presenter, calls its method and sets the resulting string into\nthe PRESENTER_RESULT template variable.\n\n@return array\n@throws \\Exception.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static HandshakeBuilder translateHandshakeHttpServer(String[] firstLineTokens, String line) throws InvalidHandshakeException { // translating/parsing the request from the CLIENT if (!\"GET\".equalsIgnoreCase(firstLineTokens[0])) { throw new InvalidHandshakeException( String.format(\"Invalid request method received: %s Status line: %s\", firstLineTokens[0],line)); } if (!\"HTTP/1.1\".equalsIgnoreCase(firstLineTokens[2])) { throw new InvalidHandshakeException( String.format(\"Invalid status line received: %s Status line: %s\", firstLineTokens[2], line)); } ClientHandshakeBuilder clienthandshake = new HandshakeImpl1Client(); clienthandshake.setResourceDescriptor( firstLineTokens[ 1 ] ); return clienthandshake; }\n\n    ### Response:",
        "ground_truth": "Checking the handshake for the role as server\n@return a handshake\n@param firstLineTokens the token of the first line split as as an string array\n@param line the whole line",
        "predict": " Loads a presenter, calls its method and sets the resulting string into\nthe PRESENTER_RESULT template variable.\n\n@return array\n@throws \\Exception.\n\n    "
    },
    {
        "ID": 487,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public ByteArrayQueue add(byte[] b, int off, int len) { int newLength = addLength(len); System.arraycopy(b, off, array, offset + length, len); length = newLength; return this; }\n\n    ### Response: Adds a sequence of bytes into the tail of the queue..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static HandshakeBuilder translateHandshakeHttpClient(String[] firstLineTokens, String line) throws InvalidHandshakeException { // translating/parsing the response from the SERVER if (!\"101\".equals(firstLineTokens[1])) { throw new InvalidHandshakeException( String.format(\"Invalid status code received: %s Status line: %s\", firstLineTokens[1], line)); } if (!\"HTTP/1.1\".equalsIgnoreCase(firstLineTokens[0])) { throw new InvalidHandshakeException( String.format(\"Invalid status line received: %s Status line: %s\", firstLineTokens[0], line)); } HandshakeBuilder handshake = new HandshakeImpl1Server(); ServerHandshakeBuilder serverhandshake = (ServerHandshakeBuilder) handshake; serverhandshake.setHttpStatus( Short.parseShort( firstLineTokens[ 1 ] ) ); serverhandshake.setHttpStatusMessage( firstLineTokens[ 2 ] ); return handshake; }\n\n    ### Response:",
        "ground_truth": "Checking the handshake for the role as client\n@return a handshake\n@param firstLineTokens the token of the first line split as as an string array\n@param line the whole line",
        "predict": " Adds a sequence of bytes into the tail of the queue..\n\n    "
    },
    {
        "ID": 488,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (in *AddonSpec) DeepCopy() *AddonSpec { if in == nil { return nil } out := new(AddonSpec) in.DeepCopyInto(out) return out }\n\n    ### Response: // DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AddonSpec..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void decode( ByteBuffer socketBuffer ) { assert ( socketBuffer.hasRemaining() ); log.trace( \"process({}): ({})\", socketBuffer.remaining(), ( socketBuffer.remaining() > 1000 ? \"too big to display\" : new String( socketBuffer.array(), socketBuffer.position(), socketBuffer.remaining() ) )); if( readyState != ReadyState.NOT_YET_CONNECTED ) { if( readyState == ReadyState.OPEN ) { decodeFrames( socketBuffer ); } } else { if( decodeHandshake( socketBuffer ) && (!isClosing() && !isClosed())) { assert ( tmpHandshakeBytes.hasRemaining() != socketBuffer.hasRemaining() || !socketBuffer.hasRemaining() ); // the buffers will never have remaining bytes at the same time if( socketBuffer.hasRemaining() ) { decodeFrames( socketBuffer ); } else if( tmpHandshakeBytes.hasRemaining() ) { decodeFrames( tmpHandshakeBytes ); } } } }\n\n    ### Response:",
        "ground_truth": "Method to decode the provided ByteBuffer\n\n@param socketBuffer the ByteBuffer to decode",
        "predict": " // DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AddonSpec..\n\n    "
    },
    {
        "ID": 489,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function handle(\\Plop\\RecordInterface $record) { if ($this->filters->filter($record)) { $this->callHandlers($record); } return $this; }\n\n    ### Response: Handle a log record.\n\n\\param Plop::RecordInterface $record\nThe log record to handle.\n\n\\retval Plop::LoggerInterface\nThe logger instance (ie. \\a $this)..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void closeConnectionDueToWrongHandshake( InvalidDataException exception ) { write( generateHttpResponseDueToError( 404 ) ); flushAndClose( exception.getCloseCode(), exception.getMessage(), false ); }\n\n    ### Response:",
        "ground_truth": "Close the connection if the received handshake was not correct\n\n@param exception the InvalidDataException causing this problem",
        "predict": " Handle a log record.\n\n\\param Plop::RecordInterface $record\nThe log record to handle.\n\n\\retval Plop::LoggerInterface\nThe logger instance (ie. \\a $this)..\n\n    "
    },
    {
        "ID": 490,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def run_needle_alignment(seq_a, seq_b, gapopen=10, gapextend=0.5, write_outfile=True, outdir=None, outfile=None, force_rerun=False): \"\"\"Run the needle alignment program for two strings and return the raw alignment result. More info: EMBOSS needle: http://www.bioinformatics.nl/cgi-bin/emboss/help/needle Biopython wrapper: http://biopython.org/DIST/docs/tutorial/Tutorial.html#htoc84 Using strings as input: https://www.biostars.org/p/91124/ Args: id_a: ID of reference sequence seq_a (str, Seq, SeqRecord): Reference sequence id_b: ID of sequence to be aligned seq_b (str, Seq, SeqRecord): String representation of sequence to be aligned gapopen: Gap open penalty is the score taken away when a gap is created gapextend: Gap extension penalty is added to the standard gap penalty for each base or residue in the gap outdir (str, optional): Path to output directory. Default is the current directory. outfile (str, optional): Name of output file. If not set, is {id_a}_{id_b}_align.txt force_rerun (bool): Default False, set to True if you want to rerun the alignment if outfile exists. Returns: str: Raw alignment result of the needle alignment in srspair format. \"\"\" # TODO: check if needle is installed and raise error if not if not outdir: outdir = '' # TODO: rewrite using utils functions - does not report error if needle is not installed currently # TODO: rethink outdir/outfile, also if this should return the tempfile or just a file object or whatever if write_outfile: seq_a = ssbio.protein.sequence.utils.cast_to_str(seq_a) seq_b = ssbio.protein.sequence.utils.cast_to_str(seq_b) if not outfile: outfile = op.join(tempfile.gettempdir(), 'temp_alignment.needle') else: outfile = op.join(outdir, outfile) if ssbio.utils.force_rerun(flag=force_rerun, outfile=outfile): cmd = 'needle -outfile=\"{}\" -asequence=asis::{} -bsequence=asis::{} -gapopen={} -gapextend={}'.format( outfile, seq_a, seq_b, gapopen, gapextend) command = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True) out, err = command.communicate() return outfile else: seq_a = ssbio.protein.sequence.utils.cast_to_str(seq_a) seq_b = ssbio.protein.sequence.utils.cast_to_str(seq_b) cmd = 'needle -auto -stdout -asequence=asis::{} -bsequence=asis::{} -gapopen={} -gapextend={}'.format(seq_a, seq_b, gapopen, gapextend) command = subprocess.Popen(cmd, stdout=subprocess.PIPE, shell=True) stdout = command.stdout.read() return stdout\n\n    ### Response: Run the needle alignment program for two strings and return the raw alignment result.\n\n    More info:\n    EMBOSS needle: http://www.bioinformatics.nl/cgi-bin/emboss/help/needle\n    Biopython wrapper: http://biopython.org/DIST/docs/tutorial/Tutorial.html#htoc84\n    Using strings as input: https://www.biostars.org/p/91124/\n\n    Args:\n        id_a: ID of reference sequence\n        seq_a (str, Seq, SeqRecord): Reference sequence\n        id_b: ID of sequence to be aligned\n        seq_b (str, Seq, SeqRecord): String representation of sequence to be aligned\n        gapopen: Gap open penalty is the score taken away when a gap is created\n        gapextend: Gap extension penalty is added to the standard gap penalty for each base or residue in the gap\n        outdir (str, optional): Path to output directory. Default is the current directory.\n        outfile (str, optional): Name of output file. If not set, is {id_a}_{id_b}_align.txt\n        force_rerun (bool): Default False, set to True if you want to rerun the alignment if outfile exists.\n\n    Returns:\n        str: Raw alignment result of the needle alignment in srspair format..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void closeConnectionDueToInternalServerError( RuntimeException exception ) { write( generateHttpResponseDueToError( 500 ) ); flushAndClose( CloseFrame.NEVER_CONNECTED, exception.getMessage(), false ); }\n\n    ### Response:",
        "ground_truth": "Close the connection if there was a server error by a RuntimeException\n\n@param exception the RuntimeException causing this problem",
        "predict": " Run the needle alignment program for two strings and return the raw alignment result.\n\n    More info:\n    EMBOSS needle: http://www.bioinformatics.nl/cgi-bin/emboss/help/needle\n    Biopython wrapper: http://biopython.org/DIST/docs/tutorial/Tutorial.html#htoc84\n    Using strings as input: https://www.biostars.org/p/91124/\n\n    Args:\n        id_a: ID of reference sequence\n        seq_a (str, Seq, SeqRecord): Reference sequence\n        id_b: ID of sequence to be aligned\n        seq_b (str, Seq, SeqRecord): String representation of sequence to be aligned\n        gapopen: Gap open penalty is the score taken away when a gap is created\n        gapextend: Gap extension penalty is added to the standard gap penalty for each base or residue in the gap\n        outdir (str, optional): Path to output directory. Default is the current directory.\n        outfile (str, optional): Name of output file. If not set, is {id_a}_{id_b}_align.txt\n        force_rerun (bool): Default False, set to True if you want to rerun the alignment if outfile exists.\n\n    Returns:\n        str: Raw alignment result of the needle alignment in srspair format..\n\n    "
    },
    {
        "ID": 491,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function (channelIdentifier, triggerIdentifier) { var path; if (channelIdentifier && triggerIdentifier) { path = this.constructPath(constants.CHANNELS, channelIdentifier, constants.TRIGGERS, triggerIdentifier); return this.Core.DELETE(path); } else { return this.rejectRequest('Bad Request: A channel identifier and a trigger identifier are required.'); } }\n\n    ### Response: Delete a trigger from a channel\n@param  {String|Integer} channelIdentifier A Robin channel identifier\n@param  {String|Integer} triggerIdentifier A Robin channel data point identifier\n@return {Function}                         A Promise.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private ByteBuffer generateHttpResponseDueToError( int errorCode ) { String errorCodeDescription; switch(errorCode) { case 404: errorCodeDescription = \"404 WebSocket Upgrade Failure\"; break; case 500: default: errorCodeDescription = \"500 Internal Server Error\"; } return ByteBuffer.wrap( Charsetfunctions.asciiBytes( \"HTTP/1.1 \" + errorCodeDescription + \"\\r\\nContent-Type: text/html\\nServer: TooTallNate Java-WebSocket\\r\\nContent-Length: \" + ( 48 + errorCodeDescription.length() ) + \"\\r\\n\\r\\n<html><head></head><body><h1>\" + errorCodeDescription + \"</h1></body></html>\" ) ); }\n\n    ### Response:",
        "ground_truth": "",
        "predict": " Delete a trigger from a channel\n@param  {String|Integer} channelIdentifier A Robin channel identifier\n@param  {String|Integer} triggerIdentifier A Robin channel data point identifier\n@return {Function}                         A Promise.\n\n    "
    },
    {
        "ID": 492,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def url_path(self): ''' The last path component for the basename of the configured filename. ''' if self.failed: return None else: # TODO should fix invalid URL characters return '/' + os.path.splitext(os.path.basename(self._runner.path))[0]\n\n    ### Response: The last path component for the basename of the configured filename..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public void send( String text ) { if( text == null ) throw new IllegalArgumentException( \"Cannot send 'null' data to a WebSocketImpl.\" ); send( draft.createFrames( text, role == Role.CLIENT ) ); }\n\n    ### Response:",
        "ground_truth": "Send Text data to the other end.\n\n@throws WebsocketNotConnectedException websocket is not yet connected",
        "predict": " The last path component for the basename of the configured filename..\n\n    "
    },
    {
        "ID": 493,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (s *Settings) SetIfChanged(c context.Context, who, why string) error { return settings.SetIfChanged(c, settingsKey, s, who, why) }\n\n    ### Response: // SetIfChanged sets \"s\" to be the new Settings if it differs from the current\n// settings value..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void reset() { Thread current = Thread.currentThread(); if (current == writeThread || current == connectReadThread) { throw new IllegalStateException(\"You cannot initialize a reconnect out of the websocket thread. Use reconnect in another thread to insure a successful cleanup.\"); } try { closeBlocking(); if( writeThread != null ) { this.writeThread.interrupt(); this.writeThread = null; } if( connectReadThread != null ) { this.connectReadThread.interrupt(); this.connectReadThread = null; } this.draft.reset(); if( this.socket != null ) { this.socket.close(); this.socket = null; } } catch ( Exception e ) { onError( e ); engine.closeConnection( CloseFrame.ABNORMAL_CLOSE, e.getMessage() ); return; } connectLatch = new CountDownLatch( 1 ); closeLatch = new CountDownLatch( 1 ); this.engine = new WebSocketImpl( this, this.draft ); }\n\n    ### Response:",
        "ground_truth": "Reset everything relevant to allow a reconnect\n@since 1.3.8",
        "predict": " // SetIfChanged sets \"s\" to be the new Settings if it differs from the current\n// settings value..\n\n    "
    },
    {
        "ID": 494,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static function Radio( $name, $value, $checked = NULL, $class = NULL, $readOnly = NULL ) { $attributes = array( 'id' => $name.'_'.$value, 'type' => \"radio\", 'name' => $name, 'value' => $value, 'class' => $class, 'checked' => $checked ? \"checked\" : NULL, 'disabled' => $readOnly ? \"disabled\" : NULL, ); if( $readOnly ) self::addReadonlyAttributes( $attributes, $readOnly ); return UI_HTML_Tag::create( \"input\", NULL, $attributes ); }\n\n    ### Response: Builds HTML Code for Radio Buttons.\n@access\t\tpublic\n@static\n@param\t\tstring\t\t$name \t\t\tField Name\n@param\t\tstring\t\t$value \t\t\tField Value if checked\n@param\t\tstring\t\t$checked \t\tField State\n@param\t\tstring\t\t$class\t\t\tCSS Class\n@param\t\tmixed\t\t$readOnly\t\tField is not writable, JavaScript Alert if String is given\n@return\t\tstring.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void connect() { if( connectReadThread != null ) throw new IllegalStateException( \"WebSocketClient objects are not reuseable\" ); connectReadThread = new Thread( this ); connectReadThread.setName( \"WebSocketConnectReadThread-\" + connectReadThread.getId() ); connectReadThread.start(); }\n\n    ### Response:",
        "ground_truth": "Initiates the websocket connection. This method does not block.",
        "predict": " Builds HTML Code for Radio Buttons.\n@access\t\tpublic\n@static\n@param\t\tstring\t\t$name \t\t\tField Name\n@param\t\tstring\t\t$value \t\t\tField Value if checked\n@param\t\tstring\t\t$checked \t\tField State\n@param\t\tstring\t\t$class\t\t\tCSS Class\n@param\t\tmixed\t\t$readOnly\t\tField is not writable, JavaScript Alert if String is given\n@return\t\tstring.\n\n    "
    },
    {
        "ID": 495,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def setting_address(key): \"\"\"Computes the radix address for the given setting key. Keys are broken into four parts, based on the dots in the string. For example, the key `a.b.c` address is computed based on `a`, `b`, `c` and the empty string. A longer key, for example `a.b.c.d.e`, is still broken into four parts, but the remaining pieces are in the last part: `a`, `b`, `c` and `d.e`. Each of these peices has a short hash computed (the first 16 characters of its SHA256 hash in hex), and is joined into a single address, with the config namespace (`000000`) added at the beginning. Args: key (str): the setting key Returns: str: the computed address \"\"\" # split the key into 4 parts, maximum key_parts = key.split('.', maxsplit=_MAX_KEY_PARTS - 1) # compute the short hash of each part addr_parts = [_short_hash(x.encode()) for x in key_parts] # pad the parts with the empty hash, if needed addr_parts.extend([_EMPTY_PART] * (_MAX_KEY_PARTS - len(addr_parts))) return CONFIG_STATE_NAMESPACE + ''.join(addr_parts)\n\n    ### Response: Computes the radix address for the given setting key.\n\n        Keys are broken into four parts, based on the dots in the string. For\n        example, the key `a.b.c` address is computed based on `a`, `b`, `c` and\n        the empty string. A longer key, for example `a.b.c.d.e`, is still\n        broken into four parts, but the remaining pieces are in the last part:\n        `a`, `b`, `c` and `d.e`.\n\n        Each of these peices has a short hash computed (the first 16 characters\n        of its SHA256 hash in hex), and is joined into a single address, with\n        the config namespace (`000000`) added at the beginning.\n\n        Args:\n            key (str): the setting key\n        Returns:\n            str: the computed address.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private int getPort() { int port = uri.getPort(); if( port == -1 ) { String scheme = uri.getScheme(); if( \"wss\".equals( scheme ) ) { return WebSocketImpl.DEFAULT_WSS_PORT; } else if( \"ws\".equals( scheme ) ) { return WebSocketImpl.DEFAULT_PORT; } else { throw new IllegalArgumentException( \"unknown scheme: \" + scheme ); } } return port; }\n\n    ### Response:",
        "ground_truth": "Extract the specified port\n@return the specified port or the default port for the specific scheme",
        "predict": " Computes the radix address for the given setting key.\n\n        Keys are broken into four parts, based on the dots in the string. For\n        example, the key `a.b.c` address is computed based on `a`, `b`, `c` and\n        the empty string. A longer key, for example `a.b.c.d.e`, is still\n        broken into four parts, but the remaining pieces are in the last part:\n        `a`, `b`, `c` and `d.e`.\n\n        Each of these peices has a short hash computed (the first 16 characters\n        of its SHA256 hash in hex), and is joined into a single address, with\n        the config namespace (`000000`) added at the beginning.\n\n        Args:\n            key (str): the setting key\n        Returns:\n            str: the computed address.\n\n    "
    },
    {
        "ID": 496,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private boolean containsIncompatibleResourceType() { if (queryByResourceType && queryByPermission) { Resource[] resources = resourcesIntersection.toArray(new Resource[resourcesIntersection.size()]); return !ResourceTypeUtil.resourceIsContainedInArray(resourceType, resources); } return false; }\n\n    ### Response: check whether the permissions' resources\nare compatible to the filtered resource parameter.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void sendHandshake() throws InvalidHandshakeException { String path; String part1 = uri.getRawPath(); String part2 = uri.getRawQuery(); if( part1 == null || part1.length() == 0 ) path = \"/\"; else path = part1; if( part2 != null ) path += '?' + part2; int port = getPort(); String host = uri.getHost() + ( (port != WebSocketImpl.DEFAULT_PORT && port != WebSocketImpl.DEFAULT_WSS_PORT) ? \":\" + port : \"\" ); HandshakeImpl1Client handshake = new HandshakeImpl1Client(); handshake.setResourceDescriptor( path ); handshake.put( \"Host\", host ); if( headers != null ) { for( Map.Entry<String,String> kv : headers.entrySet() ) { handshake.put( kv.getKey(), kv.getValue() ); } } engine.startHandshake( handshake ); }\n\n    ### Response:",
        "ground_truth": "Create and send the handshake to the other endpoint\n@throws InvalidHandshakeException  a invalid handshake was created",
        "predict": " check whether the permissions' resources\nare compatible to the filtered resource parameter.\n\n    "
    },
    {
        "ID": 497,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function getPageSlider() { $window = 6; // If the current page is very close to the beginning of the page range, we will // just render the beginning of the page range, followed by the last 2 of the // links in this list, since we will not have room to create a full slider. if ($this->currentPage <= $window) { $ending = $this->getFinish(); return $this->getPageRange(1, $window + 2).$ending; } // If the current page is close to the ending of the page range we will just get // this first couple pages, followed by a larger window of these ending pages // since we're too close to the end of the list to create a full on slider. elseif ($this->currentPage >= $this->lastPage - $window) { $start = $this->lastPage - 8; $content = $this->getPageRange($start, $this->lastPage); return $this->getStart().$content; } // If we have enough room on both sides of the current page to build a slider we // will surround it with both the beginning and ending caps, with this window // of pages in the middle providing a Google style sliding paginator setup. else { $content = $this->getAdjacentRange(); return $this->getStart().$content.$this->getFinish(); } }\n\n    ### Response: Create a pagination slider link window.\n\n@return string.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void setConnectionLostTimeout( int connectionLostTimeout ) { synchronized (syncConnectionLost) { this.connectionLostTimeout = TimeUnit.SECONDS.toNanos(connectionLostTimeout); if (this.connectionLostTimeout <= 0) { log.trace(\"Connection lost timer stopped\"); cancelConnectionLostTimer(); return; } if (this.websocketRunning) { log.trace(\"Connection lost timer restarted\"); //Reset all the pings try { ArrayList<WebSocket> connections = new ArrayList<WebSocket>(getConnections()); WebSocketImpl webSocketImpl; for (WebSocket conn : connections) { if (conn instanceof WebSocketImpl) { webSocketImpl = (WebSocketImpl) conn; webSocketImpl.updateLastPong(); } } } catch (Exception e) { log.error(\"Exception during connection lost restart\", e); } restartConnectionLostTimer(); } } }\n\n    ### Response:",
        "ground_truth": "Setter for the interval checking for lost connections\nA value lower or equal 0 results in the check to be deactivated\n\n@param connectionLostTimeout the interval in seconds\n@since 1.3.4",
        "predict": " Create a pagination slider link window.\n\n@return string.\n\n    "
    },
    {
        "ID": 498,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def reward(self, state: Sequence[tf.Tensor], action: Sequence[tf.Tensor], next_state: Sequence[tf.Tensor]) -> tf.Tensor: '''Compiles the reward function given the current `state`, `action` and `next_state`. Args: state (Sequence[tf.Tensor]): A tuple of current state tensors. action (Sequence[tf.Tensor]): A tuple of action tensors. next_state (Sequence[tf.Tensor]): A tuple of next state tensors. Returns: (:obj:`tf.Tensor`): A tensor representing the reward function. ''' scope = self.reward_scope(state, action, next_state) r = self.compile_reward(scope).tensor with self.graph.as_default(): with tf.name_scope('reward'): return tf.expand_dims(r, -1)\n\n    ### Response: Compiles the reward function given the current `state`, `action` and\n        `next_state`.\n\n        Args:\n            state (Sequence[tf.Tensor]): A tuple of current state tensors.\n            action (Sequence[tf.Tensor]): A tuple of action tensors.\n            next_state (Sequence[tf.Tensor]): A tuple of next state tensors.\n\n        Returns:\n            (:obj:`tf.Tensor`): A tensor representing the reward function..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void stopConnectionLostTimer() { synchronized (syncConnectionLost) { if (connectionLostCheckerService != null || connectionLostCheckerFuture != null) { this.websocketRunning = false; log.trace(\"Connection lost timer stopped\"); cancelConnectionLostTimer(); } } }\n\n    ### Response:",
        "ground_truth": "Stop the connection lost timer\n@since 1.3.4",
        "predict": " Compiles the reward function given the current `state`, `action` and\n        `next_state`.\n\n        Args:\n            state (Sequence[tf.Tensor]): A tuple of current state tensors.\n            action (Sequence[tf.Tensor]): A tuple of action tensors.\n            next_state (Sequence[tf.Tensor]): A tuple of next state tensors.\n\n        Returns:\n            (:obj:`tf.Tensor`): A tensor representing the reward function..\n\n    "
    },
    {
        "ID": 499,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void copyOut (ActiveMQQueueJmxStats other) { other.setCursorPercentUsage(this.getCursorPercentUsage()); other.setDequeueCount(this.getDequeueCount()); other.setEnqueueCount(this.getEnqueueCount()); other.setMemoryPercentUsage(this.getMemoryPercentUsage()); other.setNumConsumers(this.getNumConsumers()); other.setNumProducers(this.getNumProducers()); other.setQueueSize(this.getQueueSize()); other.setInflightCount(this.getInflightCount()); }\n\n    ### Response: Copy out the values to the given destination.\n\n@param other target stats object to receive the values from this one..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void startConnectionLostTimer() { synchronized (syncConnectionLost) { if (this.connectionLostTimeout <= 0) { log.trace(\"Connection lost timer deactivated\"); return; } log.trace(\"Connection lost timer started\"); this.websocketRunning = true; restartConnectionLostTimer(); } }\n\n    ### Response:",
        "ground_truth": "Start the connection lost timer\n@since 1.3.4",
        "predict": " Copy out the values to the given destination.\n\n@param other target stats object to receive the values from this one..\n\n    "
    },
    {
        "ID": 500,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (s *GitServer) GetRepoByOwner(owner, name string) (provider.Repo, error) { r := &Repo{} repo, _, err := s.client.Repositories.Get(s.ctx, owner, name) if err != nil { local.Printf(\"Unable to find repo [%s/%s]\", owner, name) return r, err } if repo == nil { return r, nil } r.impl = repo r.assumedOwner = owner if *repo.Fork && repo.Parent.Owner != nil { r.forkedFrom = &Repo{impl: repo.Parent} } return r, nil }\n\n    ### Response: // GetRepoByOwner is the most effecient way to look up a repository exactly by it's name and owner.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void restartConnectionLostTimer() { cancelConnectionLostTimer(); connectionLostCheckerService = Executors.newSingleThreadScheduledExecutor(new NamedThreadFactory(\"connectionLostChecker\")); Runnable connectionLostChecker = new Runnable() { /** * Keep the connections in a separate list to not cause deadlocks */ private ArrayList<WebSocket> connections = new ArrayList<WebSocket>( ); @Override public void run() { connections.clear(); try { connections.addAll( getConnections() ); long minimumPongTime = (long) (System.nanoTime() - ( connectionLostTimeout * 1.5 )); for( WebSocket conn : connections ) { executeConnectionLostDetection(conn, minimumPongTime); } } catch ( Exception e ) { //Ignore this exception } connections.clear(); } }; connectionLostCheckerFuture = connectionLostCheckerService.scheduleAtFixedRate(connectionLostChecker, connectionLostTimeout, connectionLostTimeout, TimeUnit.NANOSECONDS); }\n\n    ### Response:",
        "ground_truth": "This methods allows the reset of the connection lost timer in case of a changed parameter\n@since 1.3.4",
        "predict": " // GetRepoByOwner is the most effecient way to look up a repository exactly by it's name and owner.\n\n    "
    },
    {
        "ID": 501,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function canExecute($action) { $method = 'can'.ucfirst($action); $methods = $this->getMixer()->getMethods(); if (!isset($methods[$method])) { $actions = $this->getActions(); $actions = array_flip($actions); $result = isset($actions[$action]); } else $result = $this->$method(); return $result; }\n\n    ### Response: Check if an action can be executed\n\n@param   string  $action Action name\n@return  boolean True if the action can be executed, otherwise FALSE..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void executeConnectionLostDetection(WebSocket webSocket, long minimumPongTime) { if (!(webSocket instanceof WebSocketImpl)) { return; } WebSocketImpl webSocketImpl = (WebSocketImpl) webSocket; if( webSocketImpl.getLastPong() < minimumPongTime ) { log.trace(\"Closing connection due to no pong received: {}\", webSocketImpl); webSocketImpl.closeConnection( CloseFrame.ABNORMAL_CLOSE, \"The connection was closed because the other endpoint did not respond with a pong in time. For more information check: https://github.com/TooTallNate/Java-WebSocket/wiki/Lost-connection-detection\" ); } else { if( webSocketImpl.isOpen() ) { webSocketImpl.sendPing(); } else { log.trace(\"Trying to ping a non open connection: {}\", webSocketImpl); } } }\n\n    ### Response:",
        "ground_truth": "Send a ping to the endpoint or close the connection since the other endpoint did not respond with a ping\n@param webSocket the websocket instance\n@param minimumPongTime the lowest/oldest allowable last pong time (in nanoTime) before we consider the connection to be lost",
        "predict": " Check if an action can be executed\n\n@param   string  $action Action name\n@return  boolean True if the action can be executed, otherwise FALSE..\n\n    "
    },
    {
        "ID": 502,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private function getUndefined($fqClassName, array $parameters) { // Only use ReflectionClass if parameters are needed in constructor if (!empty($parameters)) { $reflectionClass = new ReflectionClass($fqClassName); return $reflectionClass->newInstanceArgs($parameters); } return new $fqClassName; }\n\n    ### Response: If the service has not been defined within the container, attempt to instantiate the class directly\n\n@param string $fqClassName Fully qualified class name\n@param array  $parameters Parameters object may require for constructor\n@return object.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void cancelConnectionLostTimer() { if( connectionLostCheckerService != null ) { connectionLostCheckerService.shutdownNow(); connectionLostCheckerService = null; } if( connectionLostCheckerFuture != null ) { connectionLostCheckerFuture.cancel(false); connectionLostCheckerFuture = null; } }\n\n    ### Response:",
        "ground_truth": "Cancel any running timer for the connection lost detection\n@since 1.3.4",
        "predict": " If the service has not been defined within the container, attempt to instantiate the class directly\n\n@param string $fqClassName Fully qualified class name\n@param array  $parameters Parameters object may require for constructor\n@return object.\n\n    "
    },
    {
        "ID": 503,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _logger(self): \"\"\"Create TcEx app logger instance. The logger is accessible via the ``tc.log.<level>`` call. **Logging examples** .. code-block:: python :linenos: :lineno-start: 1 tcex.log.debug('logging debug') tcex.log.info('logging info') tcex.log.warning('logging warning') tcex.log.error('logging error') Args: stream_only (bool, default:False): If True only the Stream handler will be enabled. Returns: logger: An instance of logging \"\"\" level = logging.INFO self.log.setLevel(level) # clear all handlers self.log.handlers = [] # update logging level if self.default_args.logging is not None: level = self._logger_levels[self.default_args.logging] elif self.default_args.tc_log_level is not None: level = self._logger_levels[self.default_args.tc_log_level] self.log.setLevel(level) # add file handler if not already added if self.default_args.tc_log_path: self._logger_fh() # add api handler if not already added if self.default_args.tc_token is not None and self.default_args.tc_log_to_api: self._logger_api() self.log.info('Logging Level: {}'.format(logging.getLevelName(level)))\n\n    ### Response: Create TcEx app logger instance.\n\n        The logger is accessible via the ``tc.log.`` call.\n\n        **Logging examples**\n\n        .. code-block:: python\n            :linenos:\n            :lineno-start: 1\n\n            tcex.log.debug('logging debug')\n            tcex.log.info('logging info')\n            tcex.log.warning('logging warning')\n            tcex.log.error('logging error')\n\n        Args:\n            stream_only (bool, default:False): If True only the Stream handler will be enabled.\n\n        Returns:\n            logger: An instance of logging.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public ServerHandshakeBuilder onWebsocketHandshakeReceivedAsServer( WebSocket conn, Draft draft, ClientHandshake request ) throws InvalidDataException { return new HandshakeImpl1Server(); }\n\n    ### Response:",
        "ground_truth": "This default implementation does not do anything. Go ahead and overwrite it.\n\n@see org.java_websocket.WebSocketListener#onWebsocketHandshakeReceivedAsServer(WebSocket, Draft, ClientHandshake)",
        "predict": " Create TcEx app logger instance.\n\n        The logger is accessible via the ``tc.log.`` call.\n\n        **Logging examples**\n\n        .. code-block:: python\n            :linenos:\n            :lineno-start: 1\n\n            tcex.log.debug('logging debug')\n            tcex.log.info('logging info')\n            tcex.log.warning('logging warning')\n            tcex.log.error('logging error')\n\n        Args:\n            stream_only (bool, default:False): If True only the Stream handler will be enabled.\n\n        Returns:\n            logger: An instance of logging.\n\n    "
    },
    {
        "ID": 504,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function isClosed(): bool { foreach ($this->geometries as $geometry) { if (!$geometry->isClosed()) { return false; } } return true; }\n\n    ### Response: Indicates whether the MultiCurve is closed.\n\nFor a MultiCurve to be considered closed all contained Curve objects must\nbe closed. {@see Curve::isClosed()}\n\n@return bool.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public void onWebsocketPing( WebSocket conn, Framedata f ) { conn.sendFrame( new PongFrame( (PingFrame)f ) ); }\n\n    ### Response:",
        "ground_truth": "This default implementation will send a pong in response to the received ping.\nThe pong frame will have the same payload as the ping frame.\n\n@see org.java_websocket.WebSocketListener#onWebsocketPing(WebSocket, Framedata)",
        "predict": " Indicates whether the MultiCurve is closed.\n\nFor a MultiCurve to be considered closed all contained Curve objects must\nbe closed. {@see Curve::isClosed()}\n\n@return bool.\n\n    "
    },
    {
        "ID": 505,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    OmemoBundleElement_VAxolotl packOmemoBundle(OmemoDevice userDevice) throws CorruptedOmemoKeyException { int currentSignedPreKeyId = loadCurrentOmemoSignedPreKeyId(userDevice); T_SigPreKey currentSignedPreKey = loadOmemoSignedPreKeys(userDevice).get(currentSignedPreKeyId); return new OmemoBundleElement_VAxolotl( currentSignedPreKeyId, keyUtil().signedPreKeyPublicForBundle(currentSignedPreKey), keyUtil().signedPreKeySignatureFromKey(currentSignedPreKey), keyUtil().identityKeyForBundle(keyUtil().identityKeyFromPair(loadOmemoIdentityKeyPair(userDevice))), keyUtil().preKeyPublicKeysForBundle(loadOmemoPreKeys(userDevice)) ); }\n\n    ### Response: Pack a OmemoBundleElement containing our key material.\n\n@param userDevice our OmemoDevice.\n@return OmemoBundleElement\n@throws CorruptedOmemoKeyException when a key could not be loaded.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void stop( int timeout ) throws InterruptedException { if( !isclosed.compareAndSet( false, true ) ) { // this also makes sure that no further connections will be added to this.connections return; } List<WebSocket> socketsToClose; // copy the connections in a list (prevent callback deadlocks) synchronized ( connections ) { socketsToClose = new ArrayList<WebSocket>( connections ); } for( WebSocket ws : socketsToClose ) { ws.close( CloseFrame.GOING_AWAY ); } wsf.close(); synchronized ( this ) { if( selectorthread != null && selector != null) { selector.wakeup(); selectorthread.join( timeout ); } } }\n\n    ### Response:",
        "ground_truth": "Closes all connected clients sockets, then closes the underlying\nServerSocketChannel, effectively killing the server socket selectorthread,\nfreeing the port the server was bound to and stops all internal workerthreads.\n\nIf this method is called before the server is started it will never start.\n\n@param timeout\nSpecifies how many milliseconds the overall close handshaking may take altogether before the connections are closed without proper close handshaking.\n\n@throws InterruptedException Interrupt",
        "predict": " Pack a OmemoBundleElement containing our key material.\n\n@param userDevice our OmemoDevice.\n@return OmemoBundleElement\n@throws CorruptedOmemoKeyException when a key could not be loaded.\n\n    "
    },
    {
        "ID": 506,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func NewSint64TsCell(v int64) TsCell { tsc := riak_ts.TsCell{Sint64Value: &v} tsct := riak_ts.TsColumnType_SINT64 return TsCell{columnType: tsct, cell: &tsc} }\n\n    ### Response: // NewSint64TsCell creates a TsCell from an integer.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public int getPort() { int port = getAddress().getPort(); if( port == 0 && server != null ) { port = server.socket().getLocalPort(); } return port; }\n\n    ### Response:",
        "ground_truth": "Gets the port number that this server listens on.\n\n@return The port number.",
        "predict": " // NewSint64TsCell creates a TsCell from an integer.\n\n    "
    },
    {
        "ID": 507,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function optimizeUnwrap() { $iterator = $this->unwrap(); if (get_class($iterator) === ArrayIterator::class) { $iterator = $iterator->getArrayCopy(); } return $iterator; }\n\n    ### Response: Unwraps this iterator and returns the simplest\ntraversable that can be used for getting the data out\n\n@return \\Traversable|array.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void doAdditionalRead() throws InterruptedException, IOException { WebSocketImpl conn; while ( !iqueue.isEmpty() ) { conn = iqueue.remove( 0 ); WrappedByteChannel c = ( (WrappedByteChannel) conn.getChannel() ); ByteBuffer buf = takeBuffer(); try { if( SocketChannelIOHelper.readMore( buf, conn, c ) ) iqueue.add( conn ); if( buf.hasRemaining() ) { conn.inQueue.put( buf ); queue( conn ); } else { pushBuffer( buf ); } } catch ( IOException e ) { pushBuffer( buf ); throw e; } } }\n\n    ### Response:",
        "ground_truth": "Do an additional read\n@throws InterruptedException thrown by taking a buffer\n@throws IOException if an error happened during read",
        "predict": " Unwraps this iterator and returns the simplest\ntraversable that can be used for getting the data out\n\n@return \\Traversable|array.\n\n    "
    },
    {
        "ID": 508,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (a *GetPropertiesArgs) SetOwnProperties(ownProperties bool) *GetPropertiesArgs { a.OwnProperties = &ownProperties return a }\n\n    ### Response: // SetOwnProperties sets the OwnProperties optional argument. If true,\n// returns properties belonging only to the element itself, not to its\n// prototype chain..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void doAccept(SelectionKey key, Iterator<SelectionKey> i) throws IOException, InterruptedException { if( !onConnect( key ) ) { key.cancel(); return; } SocketChannel channel = server.accept(); if(channel==null){ return; } channel.configureBlocking( false ); Socket socket = channel.socket(); socket.setTcpNoDelay( isTcpNoDelay() ); socket.setKeepAlive( true ); WebSocketImpl w = wsf.createWebSocket( this, drafts ); w.setSelectionKey(channel.register( selector, SelectionKey.OP_READ, w )); try { w.setChannel( wsf.wrapChannel( channel, w.getSelectionKey() )); i.remove(); allocateBuffers( w ); } catch (IOException ex) { if( w.getSelectionKey() != null ) w.getSelectionKey().cancel(); handleIOException( w.getSelectionKey(), null, ex ); } }\n\n    ### Response:",
        "ground_truth": "Execute a accept operation\n@param key the selectionkey to read off\n@param i the iterator for the selection keys\n@throws InterruptedException  thrown by taking a buffer\n@throws IOException if an error happened during accept",
        "predict": " // SetOwnProperties sets the OwnProperties optional argument. If true,\n// returns properties belonging only to the element itself, not to its\n// prototype chain..\n\n    "
    },
    {
        "ID": 509,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function export_assessment(workshop_assessment $assessment) { $output = ''; if (empty($assessment->title)) { $title = get_string('assessment', 'workshop'); } else { $title = s($assessment->title); } $output .= html_writer::tag('h3', $title); if ($assessment->reviewer) { $output .= html_writer::div(get_string('byfullnamewithoutlink', 'mod_workshop', fullname($assessment->reviewer))); $output .= html_writer::empty_tag('br'); } if ($this->workshop->overallfeedbackmode) { if ($assessment->feedbackauthorattachment or trim($assessment->feedbackauthor) !== '') { $output .= html_writer::tag('h3', get_string('overallfeedback', 'mod_workshop')); $content = $this->format_exported_text($assessment->feedbackauthor, $assessment->feedbackauthorformat); $content = portfolio_rewrite_pluginfile_urls($content, $this->workshop->context->id, 'mod_workshop', 'overallfeedback_content', $assessment->id , $this->exporter->get('format')); $output .= $content; $output .= $this->export_files_list('overallfeedback_attachment'); } } if ($assessment->form) { $output .= $assessment->form->render(); } return $output; }\n\n    ### Response: Render the content of an assessment.\n\n@param workshop_assessment $assessment\n@return string HTML.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private boolean doRead(SelectionKey key, Iterator<SelectionKey> i) throws InterruptedException, IOException { WebSocketImpl conn = (WebSocketImpl) key.attachment(); ByteBuffer buf = takeBuffer(); if(conn.getChannel() == null){ key.cancel(); handleIOException( key, conn, new IOException() ); return false; } try { if( SocketChannelIOHelper.read( buf, conn, conn.getChannel() ) ) { if( buf.hasRemaining() ) { conn.inQueue.put( buf ); queue( conn ); i.remove(); if( conn.getChannel() instanceof WrappedByteChannel && ( (WrappedByteChannel) conn.getChannel() ).isNeedRead() ) { iqueue.add( conn ); } } else { pushBuffer(buf); } } else { pushBuffer( buf ); } } catch ( IOException e ) { pushBuffer( buf ); throw e; } return true; }\n\n    ### Response:",
        "ground_truth": "Execute a read operation\n@param key the selectionkey to read off\n@param i the iterator for the selection keys\n@return true, if the read was successful, or false if there was an error\n@throws InterruptedException thrown by taking a buffer\n@throws IOException if an error happened during read",
        "predict": " Render the content of an assessment.\n\n@param workshop_assessment $assessment\n@return string HTML.\n\n    "
    },
    {
        "ID": 510,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def parse_k(self,k,vals): \"\"\" parse the iterable from a property or boundary condition argument Parameters ---------- k : int or iterable int the iterable vals : iterable of ints the acceptable values that k may contain Returns ------- k_vals : iterable of int parsed k values \"\"\" try: k = int(k) except: pass else: assert k in vals,\"k {0} not in vals\".format(k) return [k] if k is None: return vals else: try: k_vals = vals[k] except Exception as e: raise Exception(\"error slicing vals with {0}:{1}\". format(k,str(e))) return k_vals\n\n    ### Response: parse the iterable from a property or boundary condition argument\n\n        Parameters\n        ----------\n        k : int or iterable int\n            the iterable\n        vals : iterable of ints\n            the acceptable values that k may contain\n\n        Returns\n        -------\n        k_vals : iterable of int\n            parsed k values.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void doWrite(SelectionKey key) throws IOException { WebSocketImpl conn = (WebSocketImpl) key.attachment(); if( SocketChannelIOHelper.batch( conn, conn.getChannel() ) ) { if( key.isValid() ) { key.interestOps(SelectionKey.OP_READ); } } }\n\n    ### Response:",
        "ground_truth": "Execute a write operation\n@param key the selectionkey to write on\n@throws IOException if an error happened during batch",
        "predict": " parse the iterable from a property or boundary condition argument\n\n        Parameters\n        ----------\n        k : int or iterable int\n            the iterable\n        vals : iterable of ints\n            the acceptable values that k may contain\n\n        Returns\n        -------\n        k_vals : iterable of int\n            parsed k values.\n\n    "
    },
    {
        "ID": 511,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def get_contacts(self, limit=100, *, query=None, order_by=None, batch=None): \"\"\" Gets a list of contacts from this address book When querying the Global Address List the Users endpoint will be used. Only a limited set of information will be available unless you have access to scope 'User.Read.All' which requires App Administration Consent. Also using endpoints has some limitations on the querying capabilities. To use query an order_by check the OData specification here: http://docs.oasis-open.org/odata/odata/v4.0/errata03/os/complete/ part2-url-conventions/odata-v4.0-errata03-os-part2-url-conventions -complete.html :param limit: max no. of contacts to get. Over 999 uses batch. :type limit: int or None :param query: applies a OData filter to the request :type query: Query or str :param order_by: orders the result set based on this condition :type order_by: Query or str :param int batch: batch size, retrieves items in batches allowing to retrieve more items than the limit. :return: list of contacts :rtype: list[Contact] or Pagination \"\"\" if self.main_resource == GAL_MAIN_RESOURCE: # using Users endpoint to access the Global Address List url = self.build_url(self._endpoints.get('gal')) else: if self.root: url = self.build_url(self._endpoints.get('root_contacts')) else: url = self.build_url( self._endpoints.get('folder_contacts').format( id=self.folder_id)) if limit is None or limit > self.protocol.max_top_value: batch = self.protocol.max_top_value params = {'$top': batch if batch else limit} if order_by: params['$orderby'] = order_by if query: if isinstance(query, str): params['$filter'] = query else: params.update(query.as_params()) response = self.con.get(url, params=params) if not response: return iter(()) data = response.json() # Everything received from cloud must be passed as self._cloud_data_key contacts = (self.contact_constructor(parent=self, **{self._cloud_data_key: contact}) for contact in data.get('value', [])) next_link = data.get(NEXT_LINK_KEYWORD, None) if batch and next_link: return Pagination(parent=self, data=contacts, constructor=self.contact_constructor, next_link=next_link, limit=limit) else: return contacts\n\n    ### Response: Gets a list of contacts from this address book\n\n        When querying the Global Address List the Users endpoint will be used.\n        Only a limited set of information will be available unless you have\n        access to scope 'User.Read.All' which requires App Administration\n        Consent.\n\n        Also using endpoints has some limitations on the querying capabilities.\n\n        To use query an order_by check the OData specification here:\n        http://docs.oasis-open.org/odata/odata/v4.0/errata03/os/complete/\n        part2-url-conventions/odata-v4.0-errata03-os-part2-url-conventions\n        -complete.html\n\n        :param limit: max no. of contacts to get. Over 999 uses batch.\n        :type limit: int or None\n        :param query: applies a OData filter to the request\n        :type query: Query or str\n        :param order_by: orders the result set based on this condition\n        :type order_by: Query or str\n        :param int batch: batch size, retrieves items in\n         batches allowing to retrieve more items than the limit.\n        :return: list of contacts\n        :rtype: list[Contact] or Pagination.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private boolean doSetupSelectorAndServerThread() { selectorthread.setName( \"WebSocketSelector-\" + selectorthread.getId() ); try { server = ServerSocketChannel.open(); server.configureBlocking( false ); ServerSocket socket = server.socket(); socket.setReceiveBufferSize( WebSocketImpl.RCVBUF ); socket.setReuseAddress( isReuseAddr() ); socket.bind( address ); selector = Selector.open(); server.register( selector, server.validOps() ); startConnectionLostTimer(); for( WebSocketWorker ex : decoders ){ ex.start(); } onStart(); } catch ( IOException ex ) { handleFatal( null, ex ); return false; } return true; }\n\n    ### Response:",
        "ground_truth": "Setup the selector thread as well as basic server settings\n@return true, if everything was successful, false if some error happened",
        "predict": " Gets a list of contacts from this address book\n\n        When querying the Global Address List the Users endpoint will be used.\n        Only a limited set of information will be available unless you have\n        access to scope 'User.Read.All' which requires App Administration\n        Consent.\n\n        Also using endpoints has some limitations on the querying capabilities.\n\n        To use query an order_by check the OData specification here:\n        http://docs.oasis-open.org/odata/odata/v4.0/errata03/os/complete/\n        part2-url-conventions/odata-v4.0-errata03-os-part2-url-conventions\n        -complete.html\n\n        :param limit: max no. of contacts to get. Over 999 uses batch.\n        :type limit: int or None\n        :param query: applies a OData filter to the request\n        :type query: Query or str\n        :param order_by: orders the result set based on this condition\n        :type order_by: Query or str\n        :param int batch: batch size, retrieves items in\n         batches allowing to retrieve more items than the limit.\n        :return: list of contacts\n        :rtype: list[Contact] or Pagination.\n\n    "
    },
    {
        "ID": 512,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public synchronized void registerSignal(int signalNumber, Runnable callback, boolean replace) { String signalName = signalMap.get(signalNumber); if (signalName == null) { LOG.warn(\"Invalid signalNumber \" + signalNumber); return; } LOG.info(\"Begin to register signal of {}\", signalName); try { SignalHandler oldHandler = Signal.handle(new Signal(signalName), this); LOG.info(\"Successfully register {} handler\", signalName); Runnable old = signalHandlers.put(signalNumber, callback); if (old != null) { if (!replace) { oldSignalHandlers.put(signalNumber, oldHandler); } else { LOG.info(\"Successfully old {} handler will be replaced\", signalName); } } LOG.info(\"Successfully register signal of {}\", signalName); } catch (Exception e) { LOG.error(\"Failed to register \" + signalName + \":\" + signalNumber + \", Signal already used by VM or OS: SIGILL\"); } }\n\n    ### Response: Register signal to system\nif callback is null, then the current process will ignore this signal.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private boolean doEnsureSingleThread() { synchronized ( this ) { if( selectorthread != null ) throw new IllegalStateException( getClass().getName() + \" can only be started once.\" ); selectorthread = Thread.currentThread(); if( isclosed.get() ) { return false; } } return true; }\n\n    ### Response:",
        "ground_truth": "The websocket server can only be started once\n@return true, if the server can be started, false if already a thread is running",
        "predict": " Register signal to system\nif callback is null, then the current process will ignore this signal.\n\n    "
    },
    {
        "ID": 513,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func parseToken(s string) (string, string, error) { split := tokenRegexp.FindStringSubmatch(s) if len(split) != 3 { return \"\", \"\", fmt.Errorf(\"token [%q] was not of form [%q]\", s, tokenRegexpString) } return split[1], split[2], nil }\n\n    ### Response: // parseToken tries and parse a valid token from a string.\n// A token ID and token secret are returned in case of success, an error otherwise..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void doServerShutdown() { stopConnectionLostTimer(); if( decoders != null ) { for( WebSocketWorker w : decoders ) { w.interrupt(); } } if( selector != null ) { try { selector.close(); } catch ( IOException e ) { log.error( \"IOException during selector.close\", e ); onError( null, e ); } } if( server != null ) { try { server.close(); } catch ( IOException e ) { log.error( \"IOException during server.close\", e ); onError( null, e ); } } }\n\n    ### Response:",
        "ground_truth": "Clean up everything after a shutdown",
        "predict": " // parseToken tries and parse a valid token from a string.\n// A token ID and token secret are returned in case of success, an error otherwise..\n\n    "
    },
    {
        "ID": 514,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function forEachDesc(obj, fn) { var names = Object.getOwnPropertyNames(obj); for (var i$0 = 0; i$0 < names.length; ++i$0) fn(names[i$0], Object.getOwnPropertyDescriptor(obj, names[i$0])); names = Object.getOwnPropertySymbols(obj); for (var i$1 = 0; i$1 < names.length; ++i$1) fn(names[i$1], Object.getOwnPropertyDescriptor(obj, names[i$1])); return obj; }\n\n    ### Response: Iterates over the descriptors for each own property of an object.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private Socket getSocket( WebSocket conn ) { WebSocketImpl impl = (WebSocketImpl) conn; return ( (SocketChannel) impl.getSelectionKey().channel() ).socket(); }\n\n    ### Response:",
        "ground_truth": "Getter to return the socket used by this specific connection\n@param conn The specific connection\n@return The socket used by this connection",
        "predict": " Iterates over the descriptors for each own property of an object.\n\n    "
    },
    {
        "ID": 515,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def serialize_to_transport(self, doc_format=\"xml\", *args, **kwargs): \"\"\"Serialize ResourceMap to UTF-8 encoded XML document. Args: doc_format: str One of: ``xml``, ``n3``, ``turtle``, ``nt``, ``pretty-xml``, ``trix``, ``trig`` and ``nquads``. args and kwargs: Optional arguments forwarded to rdflib.ConjunctiveGraph.serialize(). Returns: bytes: UTF-8 encoded XML doc. Note: Only the default, \"xml\", is automatically indexed by DataONE. \"\"\" return super(ResourceMap, self).serialize( format=doc_format, encoding=\"utf-8\", *args, **kwargs )\n\n    ### Response: Serialize ResourceMap to UTF-8 encoded XML document.\n\n        Args:\n          doc_format: str\n            One of: ``xml``, ``n3``, ``turtle``, ``nt``, ``pretty-xml``, ``trix``,\n            ``trig`` and ``nquads``.\n\n          args and kwargs:\n            Optional arguments forwarded to rdflib.ConjunctiveGraph.serialize().\n\n        Returns:\n          bytes: UTF-8 encoded XML doc.\n\n        Note:\n          Only the default, \"xml\", is automatically indexed by DataONE..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void broadcast(byte[] data, Collection<WebSocket> clients) { if (data == null || clients == null) { throw new IllegalArgumentException(); } broadcast(ByteBuffer.wrap(data), clients); }\n\n    ### Response:",
        "ground_truth": "Send a byte array to a specific collection of websocket connections\n@param data the data to send to the endpoints\n@param clients a collection of endpoints to whom the text has to be send",
        "predict": " Serialize ResourceMap to UTF-8 encoded XML document.\n\n        Args:\n          doc_format: str\n            One of: ``xml``, ``n3``, ``turtle``, ``nt``, ``pretty-xml``, ``trix``,\n            ``trig`` and ``nquads``.\n\n          args and kwargs:\n            Optional arguments forwarded to rdflib.ConjunctiveGraph.serialize().\n\n        Returns:\n          bytes: UTF-8 encoded XML doc.\n\n        Note:\n          Only the default, \"xml\", is automatically indexed by DataONE..\n\n    "
    },
    {
        "ID": 516,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void setSourcePath(String sourcePath) { this.sourcePath = new ArrayList<>(); for (final String path : Strings.split(sourcePath, Pattern.quote(File.pathSeparator))) { this.sourcePath.add(normalizeFile(path)); } }\n\n    ### Response: Change the source path.\n\nThe source path is a list the names of folders that are separated by {@link File#pathSeparator}.\n\n@param sourcePath the new source path..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void broadcast(String text, Collection<WebSocket> clients) { if (text == null || clients == null) { throw new IllegalArgumentException(); } doBroadcast(text, clients); }\n\n    ### Response:",
        "ground_truth": "Send a text to a specific collection of websocket connections\n@param text the text to send to the endpoints\n@param clients a collection of endpoints to whom the text has to be send",
        "predict": " Change the source path.\n\nThe source path is a list the names of folders that are separated by {@link File#pathSeparator}.\n\n@param sourcePath the new source path..\n\n    "
    },
    {
        "ID": 517,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def get_span_ids(self): \"\"\" Returns the span object of the term @rtype: List @return: the term span as list of wf ids \"\"\" node_span = self.node.find('span') if node_span is not None: mySpan = Cspan(node_span) span_ids = mySpan.get_span_ids() return span_ids else: return []\n\n    ### Response: Returns the span object of the term\n        @rtype: List\n        @return: the term span as list of wf ids.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void doBroadcast(Object data, Collection<WebSocket> clients) { String sData = null; if (data instanceof String) { sData = (String)data; } ByteBuffer bData = null; if (data instanceof ByteBuffer) { bData = (ByteBuffer)data; } if (sData == null && bData == null) { return; } Map<Draft, List<Framedata>> draftFrames = new HashMap<Draft, List<Framedata>>(); for( WebSocket client : clients ) { if( client != null ) { Draft draft = client.getDraft(); fillFrames(draft, draftFrames, sData, bData); try { client.sendFrame( draftFrames.get( draft ) ); } catch ( WebsocketNotConnectedException e ) { //Ignore this exception in this case } } } }\n\n    ### Response:",
        "ground_truth": "Private method to cache all the frames to improve memory footprint and conversion time\n@param data the data to broadcast\n@param clients the clients to send the message to",
        "predict": " Returns the span object of the term\n        @rtype: List\n        @return: the term span as list of wf ids.\n\n    "
    },
    {
        "ID": 518,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def start(name, runas=None): ''' Start a launchd service. Raises an error if the service fails to start .. note:: To start a service in macOS the service must be enabled first. Use ``service.enable`` to enable the service. :param str name: Service label, file name, or full path :param str runas: User to run launchctl commands :return: ``True`` if successful or if the service is already running :rtype: bool CLI Example: .. code-block:: bash salt '*' service.start org.cups.cupsd ''' # Get the domain target. domain_target, path = _get_domain_target(name) # Load (bootstrap) the service: will raise an error if it fails return launchctl('bootstrap', domain_target, path, runas=runas)\n\n    ### Response: Start a launchd service.  Raises an error if the service fails to start\n\n    .. note::\n        To start a service in macOS the service must be enabled first. Use\n        ``service.enable`` to enable the service.\n\n    :param str name: Service label, file name, or full path\n\n    :param str runas: User to run launchctl commands\n\n    :return: ``True`` if successful or if the service is already running\n    :rtype: bool\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' service.start org.cups.cupsd.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void fillFrames(Draft draft, Map<Draft, List<Framedata>> draftFrames, String sData, ByteBuffer bData) { if( !draftFrames.containsKey( draft ) ) { List<Framedata> frames = null; if (sData != null) { frames = draft.createFrames( sData, false ); } if (bData != null) { frames = draft.createFrames( bData, false ); } if (frames != null) { draftFrames.put(draft, frames); } } }\n\n    ### Response:",
        "ground_truth": "Fills the draftFrames with new data for the broadcast\n@param draft The draft to use\n@param draftFrames The list of frames per draft to fill\n@param sData the string data, can be null\n@param bData the bytebuffer data, can be null",
        "predict": " Start a launchd service.  Raises an error if the service fails to start\n\n    .. note::\n        To start a service in macOS the service must be enabled first. Use\n        ``service.enable`` to enable the service.\n\n    :param str name: Service label, file name, or full path\n\n    :param str runas: User to run launchctl commands\n\n    :return: ``True`` if successful or if the service is already running\n    :rtype: bool\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' service.start org.cups.cupsd.\n\n    "
    },
    {
        "ID": 519,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function() { var pos = select.selectionTopNode(this.container, true); var to = select.selectionTopNode(this.container, false); if (pos === false || to === false) return; select.markSelection(this.win); if (this.highlight(pos, endOfLine(to, this.container), true, 20) === false) return false; select.selectMarked(); return true; }\n\n    ### Response: Re-highlight the selected part of the document..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static int transferByteBuffer( ByteBuffer source, ByteBuffer dest ) { if( source == null || dest == null ) { throw new IllegalArgumentException(); } int fremain = source.remaining(); int toremain = dest.remaining(); if( fremain > toremain ) { int limit = Math.min( fremain, toremain ); source.limit( limit ); dest.put( source ); return limit; } else { dest.put( source ); return fremain; } }\n\n    ### Response:",
        "ground_truth": "Transfer from one ByteBuffer to another ByteBuffer\n\n@param source the ByteBuffer to copy from\n@param dest   the ByteBuffer to copy to\n@return the number of transferred bytes",
        "predict": " Re-highlight the selected part of the document..\n\n    "
    },
    {
        "ID": 520,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (r Rect) Vertices() [4]Vec { return [4]Vec{ r.Min, V(r.Min.X, r.Max.Y), r.Max, V(r.Max.X, r.Min.Y), } }\n\n    ### Response: // Vertices returns a slice of the four corners which make up the rectangle..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public JPAApi start() { jpaConfig .persistenceUnits() .forEach( persistenceUnit -> emfs.put( persistenceUnit.name, Persistence.createEntityManagerFactory(persistenceUnit.unitName))); return this; }\n\n    ### Response:",
        "ground_truth": "Initialise JPA entity manager factories.",
        "predict": " // Vertices returns a slice of the four corners which make up the rectangle..\n\n    "
    },
    {
        "ID": 521,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function (view, right, up) { quat.setAxes(this.array, view.array, right.array, up.array); this._dirty = true; return this; }\n\n    ### Response: Sets self with values corresponding to the given axes\n@param {clay.Vector3} view\n@param {clay.Vector3} right\n@param {clay.Vector3} up\n@return {clay.Quaternion}.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public EntityManager em(String name) { EntityManagerFactory emf = emfs.get(name); if (emf == null) { return null; } return emf.createEntityManager(); }\n\n    ### Response:",
        "ground_truth": "Get a newly created EntityManager for the specified persistence unit name.\n\n@param name The persistence unit name",
        "predict": " Sets self with values corresponding to the given axes\n@param {clay.Vector3} view\n@param {clay.Vector3} right\n@param {clay.Vector3} up\n@return {clay.Quaternion}.\n\n    "
    },
    {
        "ID": 522,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void addText(String label, String value) { Composite c = new Composite(); c.add(value); addField(label,c); }\n\n    ### Response: Add an informational section..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void withTransaction(Consumer<EntityManager> block) { withTransaction( em -> { block.accept(em); return null; }); }\n\n    ### Response:",
        "ground_truth": "Run a block of code with a newly created EntityManager for the default Persistence Unit.\n\n@param block Block of code to execute",
        "predict": " Add an informational section..\n\n    "
    },
    {
        "ID": 523,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static function exists($group, $check_system = false) { $db = \\App::get('db'); if (empty($group)) { return false; } if ($check_system) { if (is_numeric($group) && posix_getgrgid($group)) { return true; } if (!is_numeric($group) && posix_getgrnam($group)) { return true; } } // check reserved if (Validate::reserved('group', $group)) { return true; } if (is_numeric($group)) { $query = 'SELECT gidNumber FROM `#__xgroups` WHERE gidNumber=' . $db->quote($group); } else { $query = 'SELECT gidNumber FROM `#__xgroups` WHERE cn=' . $db->quote($group); } $db->setQuery($query); if (!$db->query()) { return false; } if ($db->loadResult() > 0) { return true; } return false; }\n\n    ### Response: Check if a group exists.\nGiven the group id, returns true if group exists.\n\n@param   integer  $group         The group id number (GID) of the group being verified.\n@param   boolean  $check_system  Boolean for checking against POSIX user.\n@return  boolean  Returns false if group does not exist; true if group exists..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static Seq<Object> convertArgsToScalaBuffer(final Object... args) { return scala.collection.JavaConverters.asScalaBufferConverter(wrapArgsToListIfNeeded(args)) .asScala() .toList(); }\n\n    ### Response:",
        "ground_truth": "Converts the varargs to a scala buffer, takes care of wrapping varargs into a intermediate list\nif necessary\n\n@param args the message arguments\n@return scala type for message processing",
        "predict": " Check if a group exists.\nGiven the group id, returns true if group exists.\n\n@param   integer  $group         The group id number (GID) of the group being verified.\n@param   boolean  $check_system  Boolean for checking against POSIX user.\n@return  boolean  Returns false if group does not exist; true if group exists..\n\n    "
    },
    {
        "ID": 524,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function filterByIsTutorial($isTutorial = null, $comparison = null) { if (is_string($isTutorial)) { $isTutorial = in_array(strtolower($isTutorial), array('false', 'off', '-', 'no', 'n', '0', '')) ? false : true; } return $this->addUsingAlias(VideoTableMap::COL_IS_TUTORIAL, $isTutorial, $comparison); }\n\n    ### Response: Filter the query on the is_tutorial column\n\nExample usage:\n\n$query->filterByIsTutorial(true); // WHERE is_tutorial = true\n$query->filterByIsTutorial('yes'); // WHERE is_tutorial = true\n\n\n@param     boolean|string $isTutorial The value to use as filter.\nNon-boolean arguments are converted using the following rules:\n* 1, '1', 'true',  'on',  and 'yes' are converted to boolean true\n* 0, '0', 'false', 'off', and 'no'  are converted to boolean false\nCheck on string values is case insensitive (so 'FaLsE' is seen as 'false').\n@param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL\n\n@return $this|ChildVideoQuery The current query, for fluid interface.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SafeVarargs private static <T> List<T> wrapArgsToListIfNeeded(final T... args) { List<T> out; if (args != null && args.length == 1 && args[0] instanceof List) { out = (List<T>) args[0]; } else { out = Arrays.asList(args); } return out; }\n\n    ### Response:",
        "ground_truth": "Wraps arguments passed into a list if necessary.\n\nReturns the first value as is if it is the only argument and a subtype of `java.util.List`\nOtherwise, it calls Arrays.asList on args\n\n@param args arguments as a List",
        "predict": " Filter the query on the is_tutorial column\n\nExample usage:\n\n$query->filterByIsTutorial(true); // WHERE is_tutorial = true\n$query->filterByIsTutorial('yes'); // WHERE is_tutorial = true\n\n\n@param     boolean|string $isTutorial The value to use as filter.\nNon-boolean arguments are converted using the following rules:\n* 1, '1', 'true',  'on',  and 'yes' are converted to boolean true\n* 0, '0', 'false', 'off', and 'no'  are converted to boolean false\nCheck on string values is case insensitive (so 'FaLsE' is seen as 'false').\n@param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL\n\n@return $this|ChildVideoQuery The current query, for fluid interface.\n\n    "
    },
    {
        "ID": 525,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private function getVisitorData($column = null) { $data = $this->session()->get($this->getSessionKey()); return is_null($column) ? $data : Arr::get($data, $column, null); }\n\n    ### Response: Get the visitor data.\n\n@param  string|null  $column\n\n@return mixed.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String get(play.api.i18n.Lang lang, String key, Object... args) { Seq<Object> scalaArgs = convertArgsToScalaBuffer(args); return messages.apply(key, scalaArgs, lang); }\n\n    ### Response:",
        "ground_truth": "Translates a message.\n\nUses `java.text.MessageFormat` internally to format the message.\n\n@param lang the message lang\n@param key the message key\n@param args the message arguments\n@return the formatted message or a default rendering if the key wasn't defined",
        "predict": " Get the visitor data.\n\n@param  string|null  $column\n\n@return mixed.\n\n    "
    },
    {
        "ID": 526,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (s *Server) AddHost(host host.Host, hostReply *[]byte) error { privateKey, err := s.f.AddHost(s.context(), &host) if err != nil { return err } *hostReply = privateKey return nil }\n\n    ### Response: // AddHost adds the host.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String get(play.api.i18n.Lang lang, List<String> keys, Object... args) { Buffer<String> keyArgs = scala.collection.JavaConverters.asScalaBufferConverter(keys).asScala(); Seq<Object> scalaArgs = convertArgsToScalaBuffer(args); return messages.apply(keyArgs.toSeq(), scalaArgs, lang); }\n\n    ### Response:",
        "ground_truth": "Translates the first defined message.\n\nUses `java.text.MessageFormat` internally to format the message.\n\n@param lang the message lang\n@param keys the messages keys\n@param args the message arguments\n@return the formatted message or a default rendering if the key wasn't defined",
        "predict": " // AddHost adds the host.\n\n    "
    },
    {
        "ID": 527,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func requestNew(options options) rest.Request { if options.Host == \"\" { options.Host = \"https://api.sendgrid.com\" } requestHeaders := map[string]string{ \"Authorization\": \"Bearer \" + options.Key, \"User-Agent\": \"sendgrid/\" + Version + \";go\", \"Accept\": \"application/json\", } if len(options.Subuser) != 0 { requestHeaders[\"On-Behalf-Of\"] = options.Subuser } return rest.Request{ BaseURL: options.baseURL(), Headers: requestHeaders, } }\n\n    ### Response: // requestNew create Request\n// @return [Request] a default request object.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Boolean isDefinedAt(play.api.i18n.Lang lang, String key) { return messages.isDefinedAt(key, lang); }\n\n    ### Response:",
        "ground_truth": "Check if a message key is defined.\n\n@param lang the message lang\n@param key the message key\n@return a Boolean",
        "predict": " // requestNew create Request\n// @return [Request] a default request object.\n\n    "
    },
    {
        "ID": 528,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private function emitHeaders(ResponseInterface $response): void { /* if (headers_sent($file, $line)) { throw new \\RuntimeException(sprintf('Failed to send headers, because headers have already been sent by \"%s\" at line %d.', $file, $line)); }*/ // headers have already been sent by the developer if (headers_sent()) { return; } $statusCode = $response->getStatusCode(); // TODO : regarder ici pour voir comment on emet les cookies !!!!! https://github.com/zendframework/zend-diactoros/blob/master/src/Response/SapiEmitterTrait.php#L78 // TODO : regarder ici, car un header peut avoir un tableau de valeurs, dans le cas ou on a merg\u00e9 2 headers identiques !!!! https://github.com/slimphp/Slim/blob/3.x/Slim/App.php#L393 // headers foreach ($response->getHeaders() as $name => $values) { $first = stripos($name, 'Set-Cookie') === 0 ? false : true; foreach ($values as $value) { header(sprintf('%s: %s', $name, $value), $first, $statusCode); $first = false; } } // TODO : g\u00e9rer le cas ou il n'y a pas de ReasonPhrase et mettre une chaine vide : https://github.com/zendframework/zend-diactoros/blob/master/src/Response/SapiEmitterTrait.php#L55 // Set proper protocol, status code (and reason phrase) header /* if ($response->getReasonPhrase()) { header(sprintf( 'HTTP/%s %d %s', $response->getProtocolVersion(), $response->getStatusCode(), $response->getReasonPhrase() )); } else { header(sprintf( 'HTTP/%s %d', $response->getProtocolVersion(), $response->getStatusCode() )); }*/ // It is important to mention that this method should be called after the headers are sent, in order to prevent PHP from changing the status code of the emitted response. header(sprintf('HTTP/%s %d %s', $response->getProtocolVersion(), $statusCode, $response->getReasonPhrase()), true, $statusCode); // cookies //TODO : utiliser les cookies comme des \"headers\" classiques ('Set-Cookies:xxxxxxx') //https://github.com/paragonie/PHP-Cookie/blob/master/src/Cookie.php#L358 // foreach ($response->getCookies() as $cookie) { // setrawcookie($cookie['name'], $cookie['value'], $cookie['expire'], $cookie['path'], $cookie['domain'], $cookie['secure'], $cookie['httponly']); // } // flush(); // } // cookies /* foreach ($this->headers->getCookies() as $cookie) { if ($cookie->isRaw()) { setrawcookie($cookie->getName(), $cookie->getValue(), $cookie->getExpiresTime(), $cookie->getPath(), $cookie->getDomain(), $cookie->isSecure(), $cookie->isHttpOnly()); } else { setcookie($cookie->getName(), $cookie->getValue(), $cookie->getExpiresTime(), $cookie->getPath(), $cookie->getDomain(), $cookie->isSecure(), $cookie->isHttpOnly()); } }*/ }\n\n    ### Response: Send HTTP Headers.\n\n@param ResponseInterface $response.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Messages preferred(Collection<Lang> candidates) { Seq<Lang> cs = Scala.asScala(candidates); play.api.i18n.Messages msgs = messages.preferred((Seq) cs); return new MessagesImpl(new Lang(msgs.lang()), this); }\n\n    ### Response:",
        "ground_truth": "Get a messages context appropriate for the given candidates.\n\nWill select a language from the candidates, based on the languages available, and fallback\nto the default language if none of the candidates are available.\n\n@param candidates the candidate languages\n@return the most appropriate Messages instance given the candidate languages",
        "predict": " Send HTTP Headers.\n\n@param ResponseInterface $response.\n\n    "
    },
    {
        "ID": 529,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (db *DB) DisableCompactions() { db.autoCompactMtx.Lock() defer db.autoCompactMtx.Unlock() db.autoCompact = false level.Info(db.logger).Log(\"msg\", \"compactions disabled\") }\n\n    ### Response: // DisableCompactions disables auto compactions..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Messages preferred(Http.RequestHeader request) { play.api.i18n.Messages msgs = messages.preferred(request); return new MessagesImpl(new Lang(msgs.lang()), this); }\n\n    ### Response:",
        "ground_truth": "Get a messages context appropriate for the given request.\n\nWill select a language from the request, based on the languages available, and fallback to\nthe default language if none of the candidates are available.\n\n@param request the incoming request\n@return the preferred messages context for the request",
        "predict": " // DisableCompactions disables auto compactions..\n\n    "
    },
    {
        "ID": 530,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _float_to_bits(value, lower=-90.0, middle=0.0, upper=90.0, length=15): \"\"\"Convert a float to a list of GeoHash bits.\"\"\" ret = [] for i in range(length): if value >= middle: lower = middle ret.append(1) else: upper = middle ret.append(0) middle = (upper + lower) / 2 return ret\n\n    ### Response: Convert a float to a list of GeoHash bits..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Result setLang(Result result, Lang lang) { return messages.setLang(result.asScala(), lang).asJava(); }\n\n    ### Response:",
        "ground_truth": "Given a Result and a Lang, return a new Result with the lang cookie set to the given Lang.\n\n@param result the result where the lang will be set.\n@param lang the lang to set on the result\n@return a new result with the lang.",
        "predict": " Convert a float to a list of GeoHash bits..\n\n    "
    },
    {
        "ID": 531,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def pr_num(self): \"\"\"Return the PR number or None if not on a PR\"\"\" result = get_pr_num(repo=self.repo) if result is None: result = get_travis_pr_num() return result\n\n    ### Response: Return the PR number or None if not on a PR.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public final Self bindings(GuiceableModule... modules) { return newBuilder(delegate.bindings(Scala.varargs(modules))); }\n\n    ### Response:",
        "ground_truth": "Add bindings from guiceable modules.\n\n@param modules the set of modules to bind\n@return a copy of this builder configured with those modules",
        "predict": " Return the PR number or None if not on a PR.\n\n    "
    },
    {
        "ID": 532,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func FlatChainWrap(h http.HandlerFunc, lg *log.Logger) FlatChains { return NewFlatChain(func(c *Context, nx NextHandler) { h(c.Res, c.Req) nx(c) }, lg) }\n\n    ### Response: //FlatChainWrap provides a chain wrap for http.Handler with an optional log argument.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public final Self bindings(play.api.inject.Module... modules) { return bindings(Guiceable.modules(modules)); }\n\n    ### Response:",
        "ground_truth": "Add bindings from Play modules.\n\n@param modules the set of Guice modules whose bindings to apply\n@return a copy of this builder configured with the provided bindings",
        "predict": " //FlatChainWrap provides a chain wrap for http.Handler with an optional log argument.\n\n    "
    },
    {
        "ID": 533,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void doUpdateIndex(Set<String> removedNodes, Set<String> addedNodes, Set<String> parentRemovedNodes, Set<String> parentAddedNodes) { ChangesHolder changes = searchManager.getChanges(removedNodes, addedNodes); ChangesHolder parentChanges = parentSearchManager.getChanges(parentRemovedNodes, parentAddedNodes); if (changes == null && parentChanges == null) { return; } try { doUpdateIndex(new ChangesFilterListsWrapper(changes, parentChanges)); } catch (RuntimeException e) { if (isTXAware()) { // The indexing is part of the global tx so the error needs to be thrown to // allow to roll back other resources throw e; } getLogger().error(e.getLocalizedMessage(), e); logErrorChanges(handler, removedNodes, addedNodes); logErrorChanges(parentHandler, parentRemovedNodes, parentAddedNodes); } }\n\n    ### Response: Update index.\n@param removedNodes\n@param addedNodes.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public final Self bindings(play.api.inject.Binding<?>... bindings) { return bindings(Guiceable.bindings(bindings)); }\n\n    ### Response:",
        "ground_truth": "Add Play bindings.\n\n@param bindings the set of play bindings to apply\n@return a copy of this builder configured with the provided bindings",
        "predict": " Update index.\n@param removedNodes\n@param addedNodes.\n\n    "
    },
    {
        "ID": 534,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (c *Config) NodeKey() *ecdsa.PrivateKey { // Use any specifically configured key. if c.P2P.PrivateKey != nil { return c.P2P.PrivateKey } // Generate ephemeral key if no datadir is being used. if c.DataDir == \"\" { key, err := crypto.GenerateKey() if err != nil { log.Crit(fmt.Sprintf(\"Failed to generate ephemeral node key: %v\", err)) } return key } keyfile := c.ResolvePath(datadirPrivateKey) if key, err := crypto.LoadECDSA(keyfile); err == nil { return key } // No persistent key found, generate and store a new one. key, err := crypto.GenerateKey() if err != nil { log.Crit(fmt.Sprintf(\"Failed to generate node key: %v\", err)) } instanceDir := filepath.Join(c.DataDir, c.name()) if err := os.MkdirAll(instanceDir, 0700); err != nil { log.Error(fmt.Sprintf(\"Failed to persist node key: %v\", err)) return key } keyfile = filepath.Join(instanceDir, datadirPrivateKey) if err := crypto.SaveECDSA(keyfile, key); err != nil { log.Error(fmt.Sprintf(\"Failed to persist node key: %v\", err)) } return key }\n\n    ### Response: // NodeKey retrieves the currently configured private key of the node, checking\n// first any manually set key, falling back to the one found in the configured\n// data folder. If no key can be found, a new one is generated..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public final Self overrides(GuiceableModule... modules) { return newBuilder(delegate.overrides(Scala.varargs(modules))); }\n\n    ### Response:",
        "ground_truth": "Override bindings using guiceable modules.\n\n@param modules the set of Guice modules whose bindings override some previously configured ones\n@return a copy of this builder re-configured with the provided bindings",
        "predict": " // NodeKey retrieves the currently configured private key of the node, checking\n// first any manually set key, falling back to the one found in the configured\n// data folder. If no key can be found, a new one is generated..\n\n    "
    },
    {
        "ID": 535,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def encode(self, encoding=None): r\"\"\"Encode into a multihash-encoded digest. If `encoding` is `None`, a binary digest is produced: >>> mh = Multihash(0x01, b'TEST') >>> mh.encode() b'\\x01\\x04TEST' If the name of an `encoding` is specified, it is used to encode the binary digest before returning it (see `CodecReg` for supported codecs). >>> mh.encode('base64') b'AQRURVNU' If the `encoding` is not available, a `KeyError` is raised. \"\"\" try: fc = self.func.value except AttributeError: # application-specific function code fc = self.func mhash = bytes([fc, len(self.digest)]) + self.digest if encoding: mhash = CodecReg.get_encoder(encoding)(mhash) return mhash\n\n    ### Response: r\"\"\"Encode into a multihash-encoded digest.\n\n        If `encoding` is `None`, a binary digest is produced:\n\n        >>> mh = Multihash(0x01, b'TEST')\n        >>> mh.encode()\n        b'\\x01\\x04TEST'\n\n        If the name of an `encoding` is specified, it is used to encode the\n        binary digest before returning it (see `CodecReg` for supported\n        codecs).\n\n        >>> mh.encode('base64')\n        b'AQRURVNU'\n\n        If the `encoding` is not available, a `KeyError` is raised..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public final Self overrides(play.api.inject.Module... modules) { return overrides(Guiceable.modules(modules)); }\n\n    ### Response:",
        "ground_truth": "Override bindings using Play modules.\n\n@param modules the set of Play modules whose bindings override some previously configured ones\n@return a copy of this builder re-configured with the provided bindings",
        "predict": " r\"\"\"Encode into a multihash-encoded digest.\n\n        If `encoding` is `None`, a binary digest is produced:\n\n        >>> mh = Multihash(0x01, b'TEST')\n        >>> mh.encode()\n        b'\\x01\\x04TEST'\n\n        If the name of an `encoding` is specified, it is used to encode the\n        binary digest before returning it (see `CodecReg` for supported\n        codecs).\n\n        >>> mh.encode('base64')\n        b'AQRURVNU'\n\n        If the `encoding` is not available, a `KeyError` is raised..\n\n    "
    },
    {
        "ID": 536,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def raw_pull(self, topic): \"\"\"Do a raw pull of data for given topic down from github. :arg topic: String topic (i.e., issue title). ~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~- :returns: Result of request data from github API. ~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~- PURPOSE: Encapsulate call that gets raw data from github. \"\"\" assert topic is not None, 'A topic of None is not allowed' kwargs = {} if not self.user else {'auth': (self.user, self.token)} my_req = requests.get('%s/issues/%s' % ( self.base_url, topic), **kwargs) return my_req\n\n    ### Response: Do a raw pull of data for given topic down from github.\n\n        :arg topic:    String topic (i.e., issue title).\n\n        ~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-\n\n        :returns:      Result of request data from github API.\n\n        ~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-\n\n        PURPOSE:       Encapsulate call that gets raw data from github..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public final Self overrides(play.api.inject.Binding<?>... bindings) { return overrides(Guiceable.bindings(bindings)); }\n\n    ### Response:",
        "ground_truth": "Override bindings using Play bindings.\n\n@param bindings a set of Play bindings that override some previously configured ones\n@return a copy of this builder re-configured with the provided bindings",
        "predict": " Do a raw pull of data for given topic down from github.\n\n        :arg topic:    String topic (i.e., issue title).\n\n        ~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-\n\n        :returns:      Result of request data from github API.\n\n        ~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-\n\n        PURPOSE:       Encapsulate call that gets raw data from github..\n\n    "
    },
    {
        "ID": 537,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public String format(int index) { StringBuilder sb = new StringBuilder(); final RomanNumeral[] values = RomanNumeral.values(); for(int i = values.length - 1; i >= 0; i--) { while(index >= values[i].weight) { sb.append(values[i]); index -= values[i].weight; } } return sb.toString(); }\n\n    ### Response: Format index as upper case Roman numeral.\n\n@param index index value.\n@return formatted index..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public final Self disable(Class<?>... moduleClasses) { return newBuilder(delegate.disable(Scala.toSeq(moduleClasses))); }\n\n    ### Response:",
        "ground_truth": "Disable modules by class.\n\n@param moduleClasses the module classes whose bindings should be disabled\n@return a copy of this builder configured to ignore the provided module classes",
        "predict": " Format index as upper case Roman numeral.\n\n@param index index value.\n@return formatted index..\n\n    "
    },
    {
        "ID": 538,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def get_apps_tools(): \"\"\"Get applications' tools and their paths. Return a dict with application names as keys and paths to tools' directories as values. Applications without tools are omitted. \"\"\" tools_paths = {} for app_config in apps.get_app_configs(): proc_path = os.path.join(app_config.path, 'tools') if os.path.isdir(proc_path): tools_paths[app_config.name] = proc_path custom_tools_paths = getattr(settings, 'RESOLWE_CUSTOM_TOOLS_PATHS', []) if not isinstance(custom_tools_paths, list): raise KeyError(\"`RESOLWE_CUSTOM_TOOLS_PATHS` setting must be a list.\") for seq, custom_path in enumerate(custom_tools_paths): custom_key = '_custom_{}'.format(seq) tools_paths[custom_key] = custom_path return tools_paths\n\n    ### Response: Get applications' tools and their paths.\n\n    Return a dict with application names as keys and paths to tools'\n    directories as values. Applications without tools are omitted..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Deprecated // TODO: When you remove this method make call(Request) below abstract public CompletionStage<Result> call(Context ctx) { return call( ctx.args != null && !ctx.args.isEmpty() ? ctx.request().addAttr(CTX_ARGS, ctx.args) : ctx.request()); }\n\n    ### Response:",
        "ground_truth": "the\nmigration guide for more details.",
        "predict": " Get applications' tools and their paths.\n\n    Return a dict with application names as keys and paths to tools'\n    directories as values. Applications without tools are omitted..\n\n    "
    },
    {
        "ID": 539,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func NewOpenPGPDecrypter(secRingPath string, passphrase string) (*OpenPGPDecrypter, error) { var dk *openpgp.EntityList var od *OpenPGPDecrypter var err error dk, err = ReadSecRing(secRingPath) if err != nil { return nil, err } od = &OpenPGPDecrypter{ Keys: dk, passphrase: passphrase, } return od, err }\n\n    ### Response: // NewOpenPGPDecrypter builds a new OpenPGPDecrypter object\n// from a gnupg secring file path and a passphrase.\n// The returned object can then be used against OpenPGP\n// encrypted bytes using the Decrypt method.\n//\n// See Decrypter interface..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public CompletionStage<Result> call( Request req) { // TODO: Make this method abstract after removing call(Context) return Context.safeCurrent() .map( threadLocalCtx -> { // A previous action did explicitly set a context onto the thread local (via // Http.Context.current.set(...)) // Let's use that context so the user doesn't loose data he/she set onto that ctx // (args,...) Context newCtx = threadLocalCtx.withRequest(req.removeAttr(CTX_ARGS)); Context.setCurrent(newCtx); return call(newCtx); }) .orElseGet( () -> { // A previous action did not set a context explicitly, we simply create a new one to // pass on the request Context ctx = new Context(req.removeAttr(CTX_ARGS), contextComponents); ctx.args = req.attrs().getOptional(CTX_ARGS).orElse(new HashMap<>()); return call(ctx); }); }\n\n    ### Response:",
        "ground_truth": "",
        "predict": " // NewOpenPGPDecrypter builds a new OpenPGPDecrypter object\n// from a gnupg secring file path and a passphrase.\n// The returned object can then be used against OpenPGP\n// encrypted bytes using the Decrypt method.\n//\n// See Decrypter interface..\n\n    "
    },
    {
        "ID": 540,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public int getCurrentPageSize() { if (buffer.isEmpty()) return OggPage.getMinimumPageSize(); OggPage p = buffer.get( buffer.size()-1 ); return p.getPageSize(); }\n\n    ### Response: Returns the size of the page currently being written\nto, including its headers.\nFor a new stream, or a stream that has just been\nflushed, will return zero.\n@return Current page size, or 27 (the minimum) if no current page.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Optional<File> getExistingFile(String relativePath) { return OptionConverters.toJava(env.getExistingFile(relativePath)); }\n\n    ### Response:",
        "ground_truth": "Retrieves a file relative to the application root path. This method returns an Optional, using\nempty if the file was not found.\n\n@param relativePath relative path of the file to fetch\n@return an existing file",
        "predict": " Returns the size of the page currently being written\nto, including its headers.\nFor a new stream, or a stream that has just been\nflushed, will return zero.\n@return Current page size, or 27 (the minimum) if no current page.\n\n    "
    },
    {
        "ID": 541,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function callValidator($validator) { if (is_callable($validator)) { try { call_user_func_array($validator, array($this->value)); } catch (\\Exception $ex) { $this->error = $ex->getMessage(); return false; } } }\n\n    ### Response: Call the custom validator\n\n@param $validator\n@return bool.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public <A extends Annotation> Binding<T> in(final Class<A> scope) { return underlying.in(scope).asJava(); }\n\n    ### Response:",
        "ground_truth": "Configure the scope for this binding.",
        "predict": " Call the custom validator\n\n@param $validator\n@return bool.\n\n    "
    },
    {
        "ID": 542,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function toArray() { $collectionArray = array(); foreach ($this->data as $data) { $collectionArray[] = $data->toArray(); } return $collectionArray; }\n\n    ### Response: Collection based ToArray\nshould serialize each model into its\narray.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static <A, B> Tuple<A, B> Tuple(A a, B b) { return new Tuple<A, B>(a, b); }\n\n    ### Response:",
        "ground_truth": "Constructs a tuple of A,B\n\n@param a The a value\n@param b The b value\n@param  a's type\n@param  b's type\n@return The tuple",
        "predict": " Collection based ToArray\nshould serialize each model into its\narray.\n\n    "
    },
    {
        "ID": 543,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def write_file(self, filename, cart_coords=False): \"\"\" Write the input string into a file Option: see __str__ method \"\"\" with zopen(filename, \"w\") as f: f.write(self.to_string(cart_coords))\n\n    ### Response: Write the input string into a file\n\n        Option: see __str__ method.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static <A, B, C, D, E> Tuple5<A, B, C, D, E> Tuple5(A a, B b, C c, D d, E e) { return new Tuple5<A, B, C, D, E>(a, b, c, d, e); }\n\n    ### Response:",
        "ground_truth": "Constructs a tuple of A,B,C,D,E\n\n@param a The a value\n@param b The b value\n@param c The c value\n@param d The d value\n@param e The e value\n@param  a's type\n@param  b's type\n@param  c's type\n@param  d's type\n@param  e's type\n@return The tuple",
        "predict": " Write the input string into a file\n\n        Option: see __str__ method.\n\n    "
    },
    {
        "ID": 544,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def copy_unit_spike_features(self, sorting, unit_ids=None): '''Copy unit spike features from another sorting extractor to the current sorting extractor. Parameters ---------- sorting: SortingExtractor The sorting extractor from which the spike features will be copied unit_ids: (array_like, int) The list (or single value) of unit_ids for which the spike features will be copied. def get_unit_spike_features(self, unit_id, feature_name, start_frame=None, end_frame=None): ''' if unit_ids is None: unit_ids = sorting.get_unit_ids() if isinstance(unit_ids, int): curr_feature_names = sorting.get_unit_spike_feature_names(unit_id=unit_ids) for curr_feature_name in curr_feature_names: value = sorting.get_unit_spike_features(unit_id=unit_ids, feature_name=curr_feature_name) self.set_unit_spike_features(unit_id=unit_ids, feature_name=curr_feature_name, value=value) else: for unit_id in unit_ids: curr_feature_names = sorting.get_unit_spike_feature_names(unit_id=unit_id) for curr_feature_name in curr_feature_names: value = sorting.get_unit_spike_features(unit_id=unit_id, feature_name=curr_feature_name) self.set_unit_spike_features(unit_id=unit_id, feature_name=curr_feature_name, value=value)\n\n    ### Response: Copy unit spike features from another sorting extractor to the current\n        sorting extractor.\n\n        Parameters\n        ----------\n        sorting: SortingExtractor\n            The sorting extractor from which the spike features will be copied\n        unit_ids: (array_like, int)\n            The list (or single value) of unit_ids for which the spike features will be copied.\n        def get_unit_spike_features(self, unit_id, feature_name, start_frame=None, end_frame=None):.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static Executor toExecutor(ExecutionContext ec) { ExecutionContext prepared = ec.prepare(); if (prepared instanceof Executor) { return (Executor) prepared; } else { return prepared::execute; } }\n\n    ### Response:",
        "ground_truth": "Converts the execution context to an executor, preparing it first.\n\n@param ec the execution context.\n@return the Java Executor.",
        "predict": " Copy unit spike features from another sorting extractor to the current\n        sorting extractor.\n\n        Parameters\n        ----------\n        sorting: SortingExtractor\n            The sorting extractor from which the spike features will be copied\n        unit_ids: (array_like, int)\n            The list (or single value) of unit_ids for which the spike features will be copied.\n        def get_unit_spike_features(self, unit_id, feature_name, start_frame=None, end_frame=None):.\n\n    "
    },
    {
        "ID": 545,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function _fnCompatOpts ( init ) { _fnCompatMap( init, 'ordering', 'bSort' ); _fnCompatMap( init, 'orderMulti', 'bSortMulti' ); _fnCompatMap( init, 'orderClasses', 'bSortClasses' ); _fnCompatMap( init, 'orderCellsTop', 'bSortCellsTop' ); _fnCompatMap( init, 'order', 'aaSorting' ); _fnCompatMap( init, 'orderFixed', 'aaSortingFixed' ); _fnCompatMap( init, 'paging', 'bPaginate' ); _fnCompatMap( init, 'pagingType', 'sPaginationType' ); _fnCompatMap( init, 'pageLength', 'iDisplayLength' ); _fnCompatMap( init, 'searching', 'bFilter' ); }\n\n    ### Response: Provide backwards compatibility for the main DT options. Note that the new\noptions are mapped onto the old parameters, so this is an external interface\nchange only.\n@param {object} init Object to map.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static JPAConfig of(String name, String unitName) { return new DefaultJPAConfig(new JPAConfig.PersistenceUnit(name, unitName)); }\n\n    ### Response:",
        "ground_truth": "Create a default JPA configuration with the given name and unit name.\n\n@param name the name for the entity manager factory\n@param unitName the persistence unit name as used in `persistence.xml`\n@return a default JPA configuration",
        "predict": " Provide backwards compatibility for the main DT options. Note that the new\noptions are mapped onto the old parameters, so this is an external interface\nchange only.\n@param {object} init Object to map.\n\n    "
    },
    {
        "ID": 546,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def parse_assembly(llvmir, context=None): \"\"\" Create Module from a LLVM IR string \"\"\" if context is None: context = get_global_context() llvmir = _encode_string(llvmir) strbuf = c_char_p(llvmir) with ffi.OutputString() as errmsg: mod = ModuleRef( ffi.lib.LLVMPY_ParseAssembly(context, strbuf, errmsg), context) if errmsg: mod.close() raise RuntimeError(\"LLVM IR parsing error\\n{0}\".format(errmsg)) return mod\n\n    ### Response: Create Module from a LLVM IR string.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static JPAConfig of(String n1, String u1, String n2, String u2) { return new DefaultJPAConfig( new JPAConfig.PersistenceUnit(n1, u1), new JPAConfig.PersistenceUnit(n2, u2)); }\n\n    ### Response:",
        "ground_truth": "Create a default JPA configuration with the given names and unit names.\n\n@param n1 Name of the first entity manager factory\n@param u1 Name of the first unit\n@param n2 Name of the second entity manager factory\n@param u2 Name of the second unit\n@return a default JPA configuration with the provided persistence units.",
        "predict": " Create Module from a LLVM IR string.\n\n    "
    },
    {
        "ID": 547,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (point *DataPoint) Equals(that *DataPoint) bool { return reflect.DeepEqual(point, that) }\n\n    ### Response: // Equals returns if point equals that point.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static JPAConfig from(Map<String, String> map) { ImmutableSet.Builder<JPAConfig.PersistenceUnit> persistenceUnits = new ImmutableSet.Builder<JPAConfig.PersistenceUnit>(); for (Map.Entry<String, String> entry : map.entrySet()) { persistenceUnits.add(new JPAConfig.PersistenceUnit(entry.getKey(), entry.getValue())); } return new DefaultJPAConfig(persistenceUnits.build()); }\n\n    ### Response:",
        "ground_truth": "Create a default JPA configuration from a map of names to unit names.\n\n@param map Map of entity manager factory names to unit names\n@return a JPAConfig configured with the provided mapping",
        "predict": " // Equals returns if point equals that point.\n\n    "
    },
    {
        "ID": 548,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function parseCommentLine($line, $lineBreaks) { $comment = new Comment(); $comment->setText($line) ->setLineBreaks($lineBreaks); return $comment; }\n\n    ### Response: Parse a Comment Line\n\n@param string $line\n@param array $lineBreaks\n@return Comment.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Flow<String, ByteString, NotUsed> string(String callbackName) { return Flow.of(String.class) .map( str -> { return ByteString.fromString(\"'\" + StringEscapeUtils.escapeEcmaScript(str) + \"'\"); }) .via(flow(callbackName)); }\n\n    ### Response:",
        "ground_truth": "Produces a Flow of escaped ByteString from a series of String elements. Calls out to Comet.flow\ninternally.\n\n@param callbackName the javascript callback method.\n@return a flow of ByteString elements.",
        "predict": " Parse a Comment Line\n\n@param string $line\n@param array $lineBreaks\n@return Comment.\n\n    "
    },
    {
        "ID": 549,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function toKeyValueStrings(dynamoDBMap) { return dynamoDBMap && typeof dynamoDBMap === 'object' ? Object.getOwnPropertyNames(dynamoDBMap).map(key => `${key}:${stringify(toValueFromAttributeValue(dynamoDBMap[key]))}`) : []; }\n\n    ### Response: Extracts an array of colon-separated key name and value strings from the given DynamoDB map object.\n@param {Object} dynamoDBMap - a DynamoDB map object\n@returns {string[]} an array of colon-separated key name and value strings.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Flow<JsonNode, ByteString, NotUsed> json(String callbackName) { return Flow.of(JsonNode.class) .map( json -> { return ByteString.fromString(Json.stringify(json)); }) .via(flow(callbackName)); }\n\n    ### Response:",
        "ground_truth": "Produces a flow of ByteString using `Json.stringify` from a Flow of JsonNode. Calls out to\nComet.flow internally.\n\n@param callbackName the javascript callback method.\n@return a flow of ByteString elements.",
        "predict": " Extracts an array of colon-separated key name and value strings from the given DynamoDB map object.\n@param {Object} dynamoDBMap - a DynamoDB map object\n@returns {string[]} an array of colon-separated key name and value strings.\n\n    "
    },
    {
        "ID": 550,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function(location) { return Math.sqrt(Math.pow(location.x - this.matrix[4], 2), Math.pow(location.y - this.matrix[5], 2)); }\n\n    ### Response: Get the 2D distance between a location and this matrix's translation.\n\n@param location a location object, with x,y Number properties\n@returns {Number} the calculated distance\n@preserve.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public <T extends ConstraintValidator<?, ?>> MappedConstraintValidatorFactory addConstraintValidator(Class<T> key, T constraintValidator) { validators.put(key, () -> constraintValidator); return this; }\n\n    ### Response:",
        "ground_truth": "Adds validator as a singleton.\n\n@param key the constraint validator type\n@param constraintValidator the constraint validator instance\n@param  the type of constraint validator implementation\n@return {@link MappedConstraintValidatorFactory} with the given constraint validator added.",
        "predict": " Get the 2D distance between a location and this matrix's translation.\n\n@param location a location object, with x,y Number properties\n@returns {Number} the calculated distance\n@preserve.\n\n    "
    },
    {
        "ID": 551,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Deprecated public boolean pollChanges(AbstractProject<?,?> project, Launcher launcher, FilePath workspace, TaskListener listener) throws IOException, InterruptedException { // up until 1.336, this method was abstract, so everyone should have overridden this method // without calling super.pollChanges. So the compatibility implementation is purely for // new implementations that doesn't override this method. throw new AbstractMethodError(\"you must override compareRemoteRevisionWith\"); }\n\n    ### Response: Checks if there has been any changes to this module in the repository.\n\nTODO: we need to figure out a better way to communicate an error back,\nso that we won't keep retrying the same node (for example an agent might be down.)\n\n\nIf the SCM doesn't implement polling, have the {@link #supportsPolling()} method\nreturn false.\n\n@param project\nThe project to check for updates\n@param launcher\nAbstraction of the machine where the polling will take place. If SCM declares\nthat {@linkplain #requiresWorkspaceForPolling() the polling doesn't require a workspace}, this parameter is null.\n@param workspace\nThe workspace directory that contains baseline files. If SCM declares\nthat {@linkplain #requiresWorkspaceForPolling() the polling doesn't require a workspace}, this parameter is null.\n@param listener\nLogs during the polling should be sent here.\n\n@return true\nif the change is detected.\n\n@throws InterruptedException\ninterruption is usually caused by the user aborting the computation.\nthis exception should be simply propagated all the way up.\n\n@see #supportsPolling()\n\n@deprecated as of 1.345\nOverride {@link #calcRevisionsFromBuild(AbstractBuild, Launcher, TaskListener)} and\n{@link #compareRemoteRevisionWith(AbstractProject, Launcher, FilePath, TaskListener, SCMRevisionState)} for implementation.\n\nThe implementation is now separated in two pieces, one that computes the revision of the current workspace,\nand the other that computes the revision of the remote repository.\n\nCall {@link #poll(AbstractProject, Launcher, FilePath, TaskListener, SCMRevisionState)} for use instead..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private <T extends ConstraintValidator<?, ?>> T newInstance(Class<T> key) { try { return key.getDeclaredConstructor().newInstance(); } catch (InstantiationException | RuntimeException | IllegalAccessException | NoSuchMethodException | InvocationTargetException ex) { throw new RuntimeException(ex); } }\n\n    ### Response:",
        "ground_truth": "need to do so.",
        "predict": " Checks if there has been any changes to this module in the repository.\n\nTODO: we need to figure out a better way to communicate an error back,\nso that we won't keep retrying the same node (for example an agent might be down.)\n\n\nIf the SCM doesn't implement polling, have the {@link #supportsPolling()} method\nreturn false.\n\n@param project\nThe project to check for updates\n@param launcher\nAbstraction of the machine where the polling will take place. If SCM declares\nthat {@linkplain #requiresWorkspaceForPolling() the polling doesn't require a workspace}, this parameter is null.\n@param workspace\nThe workspace directory that contains baseline files. If SCM declares\nthat {@linkplain #requiresWorkspaceForPolling() the polling doesn't require a workspace}, this parameter is null.\n@param listener\nLogs during the polling should be sent here.\n\n@return true\nif the change is detected.\n\n@throws InterruptedException\ninterruption is usually caused by the user aborting the computation.\nthis exception should be simply propagated all the way up.\n\n@see #supportsPolling()\n\n@deprecated as of 1.345\nOverride {@link #calcRevisionsFromBuild(AbstractBuild, Launcher, TaskListener)} and\n{@link #compareRemoteRevisionWith(AbstractProject, Launcher, FilePath, TaskListener, SCMRevisionState)} for implementation.\n\nThe implementation is now separated in two pieces, one that computes the revision of the current workspace,\nand the other that computes the revision of the remote repository.\n\nCall {@link #poll(AbstractProject, Launcher, FilePath, TaskListener, SCMRevisionState)} for use instead..\n\n    "
    },
    {
        "ID": 552,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static int copyStreamCount(final InputStream in, final OutputStream out) throws IOException { final byte[] buffer = new byte[10240]; int tot=0; int c; c = in.read(buffer); while (c >= 0) { if (c > 0) { out.write(buffer, 0, c); tot += c; } c = in.read(buffer); } return tot; }\n\n    ### Response: Read the data from the input stream and copy to the outputstream.\n\n@param in  inputstream\n@param out outpustream\n@return number of bytes copied\n\n@throws java.io.IOException if thrown by underlying io operations.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Method getMatchingAccessibleMethod( final Class<?> cls, final String methodName, final Class<?>... parameterTypes) { try { final Method method = cls.getMethod(methodName, parameterTypes); MemberUtils.setAccessibleWorkaround(method); return method; } catch (final NoSuchMethodException e) { // NOPMD - Swallow the exception } // search through all methods Method bestMatch = null; final Method[] methods = cls.getMethods(); for (final Method method : methods) { // compare name and parameters if (method.getName().equals(methodName) && MemberUtils.isMatchingMethod(method, parameterTypes)) { // get accessible version of method final Method accessibleMethod = getAccessibleMethod(method); if (accessibleMethod != null && (bestMatch == null || MemberUtils.compareMethodFit(accessibleMethod, bestMatch, parameterTypes) < 0)) { bestMatch = accessibleMethod; } } } if (bestMatch != null) { MemberUtils.setAccessibleWorkaround(bestMatch); } if (bestMatch != null && bestMatch.isVarArgs() && bestMatch.getParameterTypes().length > 0 && parameterTypes.length > 0) { final Class<?>[] methodParameterTypes = bestMatch.getParameterTypes(); final Class<?> methodParameterComponentType = methodParameterTypes[methodParameterTypes.length - 1].getComponentType(); final String methodParameterComponentTypeName = ClassUtils.primitiveToWrapper(methodParameterComponentType).getName(); final String parameterTypeName = parameterTypes[parameterTypes.length - 1].getName(); final String parameterTypeSuperClassName = parameterTypes[parameterTypes.length - 1].getSuperclass().getName(); if (!methodParameterComponentTypeName.equals(parameterTypeName) && !methodParameterComponentTypeName.equals(parameterTypeSuperClassName)) { return null; } } return bestMatch; }\n\n    ### Response:",
        "ground_truth": "Finds an accessible method that matches the given name and has compatible parameters.\nCompatible parameters mean that every method parameter is assignable from the given parameters.\nIn other words, it finds a method with the given name that will take the parameters given.\n\nThis method can match primitive parameter by passing in wrapper classes. For example, a\n{@code Boolean} will match a primitive {@code boolean} parameter.\n\n@param cls find method in this class\n@param methodName find method with this name\n@param parameterTypes find method with most compatible parameters\n@return The accessible method",
        "predict": " Read the data from the input stream and copy to the outputstream.\n\n@param in  inputstream\n@param out outpustream\n@return number of bytes copied\n\n@throws java.io.IOException if thrown by underlying io operations.\n\n    "
    },
    {
        "ID": 553,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def keypair(): ''' Show the server-side information of the currently configured access key. ''' fields = [ ('User ID', 'user_id'), ('Access Key', 'access_key'), ('Secret Key', 'secret_key'), ('Active?', 'is_active'), ('Admin?', 'is_admin'), ('Created At', 'created_at'), ('Last Used', 'last_used'), ('Res.Policy', 'resource_policy'), ('Rate Limit', 'rate_limit'), ('Concur.Limit', 'concurrency_limit'), ('Concur.Used', 'concurrency_used'), ] with Session() as session: try: kp = session.KeyPair(session.config.access_key) info = kp.info(fields=(item[1] for item in fields)) except Exception as e: print_error(e) sys.exit(1) rows = [] for name, key in fields: rows.append((name, info[key])) print(tabulate(rows, headers=('Field', 'Value')))\n\n    ### Response: Show the server-side information of the currently configured access key..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public CompletionStage<Result> onClientError( RequestHeader request, int statusCode, String message) { if (statusCode == 400) { return onBadRequest(request, message); } else if (statusCode == 403) { return onForbidden(request, message); } else if (statusCode == 404) { return onNotFound(request, message); } else if (statusCode >= 400 && statusCode < 500) { return onOtherClientError(request, statusCode, message); } else { throw new IllegalArgumentException( \"onClientError invoked with non client error status code \" + statusCode + \": \" + message); } }\n\n    ### Response:",
        "ground_truth": "Invoked when a client error occurs, that is, an error in the 4xx series.\n\nThe base implementation calls onBadRequest, onForbidden, onNotFound, or onOtherClientError\ndepending on the HTTP status code.\n\n@param request The request that caused the client error.\n@param statusCode The error status code. Must be greater or equal to 400, and less than 500.\n@param message The error message.\n@return a CompletionStage containing the Result.",
        "predict": " Show the server-side information of the currently configured access key..\n\n    "
    },
    {
        "ID": 554,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Geometry[] cut(Geometry cuttee, Polyline cutter, SpatialReference spatialReference) { if (cuttee == null || cutter == null) return null; OperatorCut op = (OperatorCut) factory.getOperator(Operator.Type.Cut); GeometryCursor cursor = op.execute(true, cuttee, cutter, spatialReference, null); ArrayList<Geometry> cutsList = new ArrayList<Geometry>(); Geometry geometry; while ((geometry = cursor.next()) != null) { if (!geometry.isEmpty()) { cutsList.add(geometry); } } return cutsList.toArray(new Geometry[0]); }\n\n    ### Response: Calculates the cut geometry from a target geometry using a polyline. For\nPolylines, all left cuts will be grouped together in the first Geometry,\nRight cuts and coincident cuts are grouped in the second Geometry, and\neach undefined cut, along with any uncut parts, are output as separate\nPolylines. For Polygons, all left cuts are grouped in the first Polygon,\nall right cuts are in the second Polygon, and each undefined cut, along\nwith any left-over parts after cutting, are output as a separate Polygon.\nIf there were no cuts then the array will be empty. An undefined cut will\nonly be produced if a left cut or right cut was produced, and there was a\npart left over after cutting or a cut is bounded to the left and right of\nthe cutter.\n\nSee OperatorCut.\n\n@param cuttee\nThe geometry to be cut.\n@param cutter\nThe polyline to cut the geometry.\n@param spatialReference\nThe spatial reference of the geometries.\n@return An array of geometries created from cutting..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected CompletionStage<Result> onBadRequest(RequestHeader request, String message) { return CompletableFuture.completedFuture( Results.badRequest( views.html.defaultpages.badRequest.render( request.method(), request.uri(), message, request.asScala()))); }\n\n    ### Response:",
        "ground_truth": "Invoked when a client makes a bad request.\n\nReturns Results.badRequest (400) with the included template from {@code\nviews.html.defaultpages.badRequest} as the content.\n\n@param request The request that was bad.\n@param message The error message.\n@return a CompletionStage containing the Result.",
        "predict": " Calculates the cut geometry from a target geometry using a polyline. For\nPolylines, all left cuts will be grouped together in the first Geometry,\nRight cuts and coincident cuts are grouped in the second Geometry, and\neach undefined cut, along with any uncut parts, are output as separate\nPolylines. For Polygons, all left cuts are grouped in the first Polygon,\nall right cuts are in the second Polygon, and each undefined cut, along\nwith any left-over parts after cutting, are output as a separate Polygon.\nIf there were no cuts then the array will be empty. An undefined cut will\nonly be produced if a left cut or right cut was produced, and there was a\npart left over after cutting or a cut is bounded to the left and right of\nthe cutter.\n\nSee OperatorCut.\n\n@param cuttee\nThe geometry to be cut.\n@param cutter\nThe polyline to cut the geometry.\n@param spatialReference\nThe spatial reference of the geometries.\n@return An array of geometries created from cutting..\n\n    "
    },
    {
        "ID": 555,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _jws_payload(expire_at, requrl=None, **kwargs): \"\"\" Produce a base64-encoded JWS payload. expire_at, if specified, must be a number that indicates a timestamp after which the message must be rejected. requrl, if specified, is used as the \"audience\" according to the JWT spec. Any other parameters are passed as is to the payload. \"\"\" data = { 'exp': expire_at, 'aud': requrl } data.update(kwargs) datajson = json.dumps(data, sort_keys=True).encode('utf8') return base64url_encode(datajson)\n\n    ### Response: Produce a base64-encoded JWS payload.\n\n    expire_at, if specified, must be a number that indicates\n    a timestamp after which the message must be rejected.\n\n    requrl, if specified, is used as the \"audience\" according\n    to the JWT spec.\n\n    Any other parameters are passed as is to the payload..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected CompletionStage<Result> onForbidden(RequestHeader request, String message) { return CompletableFuture.completedFuture( Results.forbidden(views.html.defaultpages.unauthorized.render(request.asScala()))); }\n\n    ### Response:",
        "ground_truth": "Invoked when a client makes a request that was forbidden.\n\nReturns Results.forbidden (401) with the included template from {@code\nviews.html.defaultpages.unauthorized} as the content.\n\n@param request The forbidden request.\n@param message The error message.\n@return a CompletionStage containing the Result.",
        "predict": " Produce a base64-encoded JWS payload.\n\n    expire_at, if specified, must be a number that indicates\n    a timestamp after which the message must be rejected.\n\n    requrl, if specified, is used as the \"audience\" according\n    to the JWT spec.\n\n    Any other parameters are passed as is to the payload..\n\n    "
    },
    {
        "ID": 556,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public SingleOutputStreamOperator<T> sum(int positionToSum) { return aggregate(new SumAggregator<>(positionToSum, input.getType(), input.getExecutionConfig())); }\n\n    ### Response: Applies an aggregation that sums every window of the data stream at the\ngiven position.\n\n@param positionToSum The position in the tuple/array to sum\n@return The transformed DataStream..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected CompletionStage<Result> onNotFound(RequestHeader request, String message) { if (environment.isProd()) { return CompletableFuture.completedFuture( Results.notFound( views.html.defaultpages.notFound.render( request.method(), request.uri(), request.asScala()))); } else { return CompletableFuture.completedFuture( Results.notFound( views.html.defaultpages.devNotFound.render( request.method(), request.uri(), Some.apply(routes.get()), request.asScala()))); } }\n\n    ### Response:",
        "ground_truth": "Invoked when a handler or resource is not found.\n\nIf the environment's mode is production, then returns Results.notFound (404) with the\nincluded template from `views.html.defaultpages.notFound` as the content.\n\nOtherwise, Results.notFound (404) is rendered with {@code\nviews.html.defaultpages.devNotFound} template.\n\n@param request The request that no handler was found to handle.\n@param message A message, which is not used by the default implementation.\n@return a CompletionStage containing the Result.",
        "predict": " Applies an aggregation that sums every window of the data stream at the\ngiven position.\n\n@param positionToSum The position in the tuple/array to sum\n@return The transformed DataStream..\n\n    "
    },
    {
        "ID": 557,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function addCSS(path) { if ('createStyleSheet' in document) { // IE9 document.createStyleSheet(path); } else { // Everyone else var link = $(\"<link>\"); $(\"head\").append(link); link.attr({ rel: 'stylesheet', type: 'text/css', href: path }); } }\n\n    ### Response: Adds the specified CSS file to the document's head, handy\nfor external plugins that might bring along their own CSS\n\n@param path.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public CompletionStage<Result> onServerError(RequestHeader request, Throwable exception) { try { UsefulException usefulException = throwableToUsefulException(exception); logServerError(request, usefulException); switch (environment.mode()) { case PROD: return onProdServerError(request, usefulException); default: return onDevServerError(request, usefulException); } } catch (Exception e) { logger.error(\"Error while handling error\", e); return CompletableFuture.completedFuture(Results.internalServerError()); } }\n\n    ### Response:",
        "ground_truth": "Invoked when a server error occurs.\n\nBy default, the implementation of this method delegates to [[onProdServerError()]] when in\nprod mode, and [[onDevServerError()]] in dev mode. It is recommended, if you want Play's debug\ninfo on the error page in dev mode, that you override [[onProdServerError()]] instead of this\nmethod.\n\n@param request The request that triggered the server error.\n@param exception The server error.\n@return a CompletionStage containing the Result.",
        "predict": " Adds the specified CSS file to the document's head, handy\nfor external plugins that might bring along their own CSS\n\n@param path.\n\n    "
    },
    {
        "ID": 558,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function(sql, val, callback) { let qry = (typeof sql === 'object') ? sql : mysql.format(sql, val); if (!callback && typeof val === 'function') callback = val; // Handle 2 parm scenario _pool.getConnection((err, conn) => { _pool.query(qry, (err, items, fields) => { if (err) return callback(err); conn.release(); callback(err, items); }); }); }\n\n    ### Response: Exposes the basic query without promise.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void logServerError(RequestHeader request, UsefulException usefulException) { logger.error( String.format( \"\\n\\n! @%s - Internal server error, for (%s) [%s] ->\\n\", usefulException.id, request.method(), request.uri()), usefulException); }\n\n    ### Response:",
        "ground_truth": "Responsible for logging server errors.\n\nThe base implementation uses a SLF4J Logger. If a special annotation is desired for internal\nserver errors, you may want to use SLF4J directly with the Marker API to distinguish server\nerrors from application errors.\n\nThis can also be overridden to add additional logging information, eg. the id of the\nauthenticated user.\n\n@param request The request that triggered the server error.\n@param usefulException The server error.",
        "predict": " Exposes the basic query without promise.\n\n    "
    },
    {
        "ID": 559,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _parse_prefix_as_idd(idd_pattern, number): \"\"\"Strips the IDD from the start of the number if present. Helper function used by _maybe_strip_i18n_prefix_and_normalize(). Returns a 2-tuple: - Boolean indicating if IDD was stripped - Number with IDD stripped \"\"\" match = idd_pattern.match(number) if match: match_end = match.end() # Only strip this if the first digit after the match is not a 0, since # country calling codes cannot begin with 0. digit_match = _CAPTURING_DIGIT_PATTERN.search(number[match_end:]) if digit_match: normalized_group = normalize_digits_only(digit_match.group(1)) if normalized_group == U_ZERO: return (False, number) return (True, number[match_end:]) return (False, number)\n\n    ### Response: Strips the IDD from the start of the number if present.\n\n    Helper function used by _maybe_strip_i18n_prefix_and_normalize().\n\n    Returns a 2-tuple:\n      - Boolean indicating if IDD was stripped\n      - Number with IDD stripped.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected final UsefulException throwableToUsefulException(final Throwable throwable) { return HttpErrorHandlerExceptions.throwableToUsefulException( sourceMapper.sourceMapper(), environment.isProd(), throwable); }\n\n    ### Response:",
        "ground_truth": "Convert the given exception to an exception that Play can report more information about.\n\nThis will generate an id for the exception, and in dev mode, will load the source code for\nthe code that threw the exception, making it possible to report on the location that the\nexception was thrown from.",
        "predict": " Strips the IDD from the start of the number if present.\n\n    Helper function used by _maybe_strip_i18n_prefix_and_normalize().\n\n    Returns a 2-tuple:\n      - Boolean indicating if IDD was stripped\n      - Number with IDD stripped.\n\n    "
    },
    {
        "ID": 560,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function afterUpdateObject(DomainObjectInterface $entity, $signalInfo) { if ($entity instanceof $this->className) { if (method_exists($this, 'updated')) { $this->updated($entity); } if (method_exists($this, 'saved')) { $this->saved($entity); } } }\n\n    ### Response: After update object hook.\n\n@param  \\TYPO3\\CMS\\Extbase\\DomainObject\\DomainObjectInterface  $entity  Entity object\n@param  string  $signalInfo  Signal information\n@return  void.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected CompletionStage<Result> onDevServerError( RequestHeader request, UsefulException exception) { return CompletableFuture.completedFuture( Results.internalServerError( views.html.defaultpages.devError.render(playEditor, exception, request.asScala()))); }\n\n    ### Response:",
        "ground_truth": "Invoked in dev mode when a server error occurs. Note that this method is where the URL set by\nplay.editor is used.\n\nThe base implementation returns {@code Results.internalServerError} with the content of\n{@code views.html.defaultpages.devError}.\n\n@param request The request that triggered the error.\n@param exception The exception.\n@return a CompletionStage containing the Result.",
        "predict": " After update object hook.\n\n@param  \\TYPO3\\CMS\\Extbase\\DomainObject\\DomainObjectInterface  $entity  Entity object\n@param  string  $signalInfo  Signal information\n@return  void.\n\n    "
    },
    {
        "ID": 561,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function addSlide(Slide $slide) { if (!$this->slides->contains($slide)) { $this->slides->add($slide); $slide->setSlideShow($this); } return $this; }\n\n    ### Response: Adds the slide.\n\n@param Slide $slide\n\n@return SlideShow.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected CompletionStage<Result> onProdServerError( RequestHeader request, UsefulException exception) { return CompletableFuture.completedFuture( Results.internalServerError( views.html.defaultpages.error.render(exception, request.asScala()))); }\n\n    ### Response:",
        "ground_truth": "Invoked in prod mode when a server error occurs.\n\nThe base implementation returns {@code Results.internalServerError} with the content of\n{@code views.html.defaultpages.error} template.\n\nOverride this rather than [[onServerError()]] if you don't want to change Play's debug\noutput when logging errors in dev mode.\n\n@param request The request that triggered the error.\n@param exception The exception.\n@return a CompletionStage containing the Result.",
        "predict": " Adds the slide.\n\n@param Slide $slide\n\n@return SlideShow.\n\n    "
    },
    {
        "ID": 562,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def wrsamp(record_name, fs, units, sig_name, p_signal=None, d_signal=None, fmt=None, adc_gain=None, baseline=None, comments=None, base_time=None, base_date=None, write_dir=''): \"\"\" Write a single segment WFDB record, creating a WFDB header file and any associated dat files. Parameters ---------- record_name : str The string name of the WFDB record to be written (without any file extensions). fs : int, or float The sampling frequency of the record. units : list A list of strings giving the units of each signal channel. sig_name : A list of strings giving the signal name of each signal channel. p_signal : numpy array, optional An (MxN) 2d numpy array, where M is the signal length. Gives the physical signal values intended to be written. Either p_signal or d_signal must be set, but not both. If p_signal is set, this method will use it to perform analogue-digital conversion, writing the resultant digital values to the dat file(s). If fmt is set, gain and baseline must be set or unset together. If fmt is unset, gain and baseline must both be unset. d_signal : numpy array, optional An (MxN) 2d numpy array, where M is the signal length. Gives the digital signal values intended to be directly written to the dat file(s). The dtype must be an integer type. Either p_signal or d_signal must be set, but not both. In addition, if d_signal is set, fmt, gain and baseline must also all be set. fmt : list, optional A list of strings giving the WFDB format of each file used to store each channel. Accepted formats are: '80','212\",'16','24', and '32'. There are other WFDB formats as specified by: https://www.physionet.org/physiotools/wag/signal-5.htm but this library will not write (though it will read) those file types. adc_gain : list, optional A list of numbers specifying the ADC gain. baseline : list, optional A list of integers specifying the digital baseline. comments : list, optional A list of string comments to be written to the header file. base_time : str, optional A string of the record's start time in 24h 'HH:MM:SS(.ms)' format. base_date : str, optional A string of the record's start date in 'DD/MM/YYYY' format. write_dir : str, optional The directory in which to write the files. Notes ----- This is a gateway function, written as a simple method to write WFDB record files using the most common parameters. Therefore not all WFDB fields can be set via this function. For more control over attributes, create a `Record` object, manually set its attributes, and call its `wrsamp` instance method. If you choose this more advanced method, see also the `set_defaults`, `set_d_features`, and `set_p_features` instance methods to help populate attributes. Examples -------- >>> # Read part of a record from Physiobank >>> signals, fields = wfdb.rdsamp('a103l', sampfrom=50000, channels=[0,1], pb_dir='challenge/2015/training') >>> # Write a local WFDB record (manually inserting fields) >>> wfdb.wrsamp('\n\n    ### Response: Write a single segment WFDB record, creating a WFDB header file and any\n    associated dat files.\n\n    Parameters\n    ----------\n    record_name : str\n        The string name of the WFDB record to be written (without any file\n        extensions).\n    fs : int, or float\n        The sampling frequency of the record.\n    units : list\n        A list of strings giving the units of each signal channel.\n    sig_name :\n        A list of strings giving the signal name of each signal channel.\n    p_signal : numpy array, optional\n        An (MxN) 2d numpy array, where M is the signal length. Gives the\n        physical signal values intended to be written. Either p_signal or\n        d_signal must be set, but not both. If p_signal is set, this method will\n        use it to perform analogue-digital conversion, writing the resultant\n        digital values to the dat file(s). If fmt is set, gain and baseline must\n        be set or unset together. If fmt is unset, gain and baseline must both\n        be unset.\n    d_signal : numpy array, optional\n        An (MxN) 2d numpy array, where M is the signal length. Gives the\n        digital signal values intended to be directly written to the dat\n        file(s). The dtype must be an integer type. Either p_signal or d_signal\n        must be set, but not both. In addition, if d_signal is set, fmt, gain\n        and baseline must also all be set.\n    fmt : list, optional\n        A list of strings giving the WFDB format of each file used to store each\n        channel. Accepted formats are: '80','212\",'16','24', and '32'. There are\n        other WFDB formats as specified by:\n        https://www.physionet.org/physiotools/wag/signal-5.htm\n        but this library will not write (though it will read) those file types.\n    adc_gain : list, optional\n        A list of numbers specifying the ADC gain.\n    baseline : list.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static BuildDocHandler fromResources(File[] files, String[] baseDirs) throws IOException { assert (files.length == baseDirs.length); FileRepository[] repositories = new FileRepository[files.length]; List<JarFile> jarFiles = new ArrayList<>(); for (int i = 0; i < files.length; i++) { File file = files[i]; String baseDir = baseDirs[i]; if (file.isDirectory()) { repositories[i] = new FilesystemRepository(file); } else { // Assume it's a jar file JarFile jarFile = new JarFile(file); jarFiles.add(jarFile); repositories[i] = new JarRepository(jarFile, Option.apply(baseDir)); } } return new DocumentationHandler( new AggregateFileRepository(repositories), () -> { for (JarFile jarFile : jarFiles) { jarFile.close(); } }); }\n\n    ### Response:",
        "ground_truth": "Create a BuildDocHandler that serves documentation from the given files, which could either be\ndirectories or jar files. The baseDir array must be the same length as the files array, and the\ncorresponding entry in there for jar files is used as a base directory to use resources from in\nthe jar.\n\n@param files The directories or jar files to serve documentation from.\n@param baseDirs The base directories for the jar files. Entries may be null.\n@return a BuildDocHandler.",
        "predict": " Write a single segment WFDB record, creating a WFDB header file and any\n    associated dat files.\n\n    Parameters\n    ----------\n    record_name : str\n        The string name of the WFDB record to be written (without any file\n        extensions).\n    fs : int, or float\n        The sampling frequency of the record.\n    units : list\n        A list of strings giving the units of each signal channel.\n    sig_name :\n        A list of strings giving the signal name of each signal channel.\n    p_signal : numpy array, optional\n        An (MxN) 2d numpy array, where M is the signal length. Gives the\n        physical signal values intended to be written. Either p_signal or\n        d_signal must be set, but not both. If p_signal is set, this method will\n        use it to perform analogue-digital conversion, writing the resultant\n        digital values to the dat file(s). If fmt is set, gain and baseline must\n        be set or unset together. If fmt is unset, gain and baseline must both\n        be unset.\n    d_signal : numpy array, optional\n        An (MxN) 2d numpy array, where M is the signal length. Gives the\n        digital signal values intended to be directly written to the dat\n        file(s). The dtype must be an integer type. Either p_signal or d_signal\n        must be set, but not both. In addition, if d_signal is set, fmt, gain\n        and baseline must also all be set.\n    fmt : list, optional\n        A list of strings giving the WFDB format of each file used to store each\n        channel. Accepted formats are: '80','212\",'16','24', and '32'. There are\n        other WFDB formats as specified by:\n        https://www.physionet.org/physiotools/wag/signal-5.htm\n        but this library will not write (though it will read) those file types.\n    adc_gain : list, optional\n        A list of numbers specifying the ADC gain.\n    baseline : list.\n\n    "
    },
    {
        "ID": 563,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Action(name = \"Merge Arrays\", outputs = { @Output(OutputNames.RETURN_RESULT), @Output(OutputNames.RETURN_CODE), @Output(OutputNames.EXCEPTION) }, responses = { @Response(text = ResponseNames.SUCCESS, field = OutputNames.RETURN_CODE, value = ReturnCodes.SUCCESS, matchType = MatchType.COMPARE_EQUAL, responseType = ResponseType.RESOLVED), @Response(text = ResponseNames.FAILURE, field = OutputNames.RETURN_CODE, value = ReturnCodes.FAILURE, matchType = MatchType.COMPARE_EQUAL, responseType = ResponseType.ERROR, isOnFail = true) }) public Map<String, String> execute(@Param(value = Constants.InputNames.ARRAY, required = true) String array1, @Param(value = Constants.InputNames.ARRAY, required = true) String array2) { Map<String, String> returnResult = new HashMap<>(); if (StringUtilities.isBlank(array1)) { final String exceptionValue = NOT_A_VALID_JSON_ARRAY_MESSAGE + ARRAY1_MESSAGE.replaceFirst(\"=\", EMPTY_STRING); return populateResult(returnResult, exceptionValue, new Exception(exceptionValue)); } if (StringUtilities.isBlank(array2)) { final String exceptionValue = NOT_A_VALID_JSON_ARRAY_MESSAGE + ARRAY2_MESSAGE.replaceFirst(\"=\", EMPTY_STRING); return populateResult(returnResult, new Exception(exceptionValue)); } JsonNode jsonNode1; JsonNode jsonNode2; ObjectMapper mapper = new ObjectMapper(); try { jsonNode1 = mapper.readTree(array1); } catch (IOException exception) { final String value = INVALID_JSON_OBJECT_PROVIDED_EXCEPTION_MESSAGE + ARRAY1_MESSAGE + array1; return populateResult(returnResult, value, exception); } try { jsonNode2 = mapper.readTree(array2); } catch (IOException exception) { final String value = INVALID_JSON_OBJECT_PROVIDED_EXCEPTION_MESSAGE + ARRAY2_MESSAGE + array2; return populateResult(returnResult, value, exception); } final String result; if (jsonNode1 instanceof ArrayNode && jsonNode2 instanceof ArrayNode) { final ArrayNode asJsonArray1 = (ArrayNode) jsonNode1; final ArrayNode asJsonArray2 = (ArrayNode) jsonNode2; final ArrayNode asJsonArrayResult = new ArrayNode(mapper.getNodeFactory()); asJsonArrayResult.addAll(asJsonArray1); asJsonArrayResult.addAll(asJsonArray2); result = asJsonArrayResult.toString(); } else { result = NOT_A_VALID_JSON_ARRAY_MESSAGE + ARRAY1_MESSAGE + array1 + ARRAY2_MESSAGE + array2; return populateResult(returnResult, new Exception(result)); } return populateResult(returnResult, result, null); }\n\n    ### Response: This operation merge the contents of two JSON arrays. This operation does not modify either of the input arrays.\nThe result is the contents or array1 and array2, merged into a single array. The merge operation add into the result\nthe first array and then the second array.\n\n@param array1 The string representation of a JSON array object.\nArrays in JSON are comma separated lists of objects, enclosed in square brackets [ ].\nExamples: [1,2,3] or [\"one\",\"two\",\"three\"] or [{\"one\":1, \"two\":2}, 3, \"four\"]\n@param array2 The string representation of a JSON array object.\nArrays in JSON are comma separated lists of objects, enclosed in square brackets [ ].\nExamples: [1,2,3] or [\"one\",\"two\",\"three\"] or [{\"one\":1, \"two\":2}, 3, \"four\"]\n@return a map containing the output of the operation. Keys present in the map are:\n\nreturnResult - This will contain the string representation of the new JSON array with the contents\nof array1 and array2.\nexception - In case of success response, this result is empty. In case of failure response,\nthis result contains the java stack trace of the runtime exception.\nreturnCode - The returnCode of the operation: 0 for success, -1 for failure..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static BuildDocHandler fromDirectory(File directory) { FileRepository repo = new FilesystemRepository(directory); return new DocumentationHandler(repo); }\n\n    ### Response:",
        "ground_truth": "Create an BuildDocHandler that serves documentation from a given directory by wrapping a\nFilesystemRepository.\n\n@param directory The directory to serve the documentation from.",
        "predict": " This operation merge the contents of two JSON arrays. This operation does not modify either of the input arrays.\nThe result is the contents or array1 and array2, merged into a single array. The merge operation add into the result\nthe first array and then the second array.\n\n@param array1 The string representation of a JSON array object.\nArrays in JSON are comma separated lists of objects, enclosed in square brackets [ ].\nExamples: [1,2,3] or [\"one\",\"two\",\"three\"] or [{\"one\":1, \"two\":2}, 3, \"four\"]\n@param array2 The string representation of a JSON array object.\nArrays in JSON are comma separated lists of objects, enclosed in square brackets [ ].\nExamples: [1,2,3] or [\"one\",\"two\",\"three\"] or [{\"one\":1, \"two\":2}, 3, \"four\"]\n@return a map containing the output of the operation. Keys present in the map are:\n\nreturnResult - This will contain the string representation of the new JSON array with the contents\nof array1 and array2.\nexception - In case of success response, this result is empty. In case of failure response,\nthis result contains the java stack trace of the runtime exception.\nreturnCode - The returnCode of the operation: 0 for success, -1 for failure..\n\n    "
    },
    {
        "ID": 564,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function getDescription($name) { if (!$this->isParsed) { $this->parseDefinitions(); } //if $longName = (strlen($name) == 1 ? ( isset($this->shortNames[$name]) ? $this->shortNames[$name] : '') : $name); if (isset($this->longNames[$longName])) { return $this->longNames[$longName]['description']; } else { return null; } //if }\n\n    ### Response: retreive description of a paramter\n\n@author Patrick Forget \n\n@param string $name either short or long name of the parameter to check\n\n@return string description or null if it doesn't exist.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static BuildDocHandler fromDirectoryAndJar(File directory, JarFile jarFile, String base) { return fromDirectoryAndJar(directory, jarFile, base, false); }\n\n    ### Response:",
        "ground_truth": "Create an BuildDocHandler that serves the manual from a given directory by wrapping a\nFilesystemRepository, and the API docs from a given JAR file by wrapping a JarRepository\n\n@param directory The directory to serve the documentation from.\n@param jarFile The JAR file to server the documentation from.\n@param base The directory within the JAR file to serve the documentation from, or null if the\ndocumentation should be served from the root of the JAR.",
        "predict": " retreive description of a paramter\n\n@author Patrick Forget \n\n@param string $name either short or long name of the parameter to check\n\n@return string description or null if it doesn't exist.\n\n    "
    },
    {
        "ID": 565,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def get_resources(self, ids, cache=True): \"\"\"Support server side filtering on arns or names \"\"\" if ids[0].startswith('arn:'): params = {'LoadBalancerArns': ids} else: params = {'Names': ids} return self.query.filter(self.manager, **params)\n\n    ### Response: Support server side filtering on arns or names.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static BuildDocHandler fromDirectoryAndJar( File directory, JarFile jarFile, String base, boolean fallbackToJar) { FileRepository fileRepo = new FilesystemRepository(directory); FileRepository jarRepo = new JarRepository(jarFile, Option.apply(base)); FileRepository manualRepo; if (fallbackToJar) { manualRepo = new AggregateFileRepository(new FileRepository[] {fileRepo, jarRepo}); } else { manualRepo = fileRepo; } return new DocumentationHandler(manualRepo, jarRepo); }\n\n    ### Response:",
        "ground_truth": "Create an BuildDocHandler that serves the manual from a given directory by wrapping a\nFilesystemRepository, and the API docs from a given JAR file by wrapping a JarRepository.\n\n@param directory The directory to serve the documentation from.\n@param jarFile The JAR file to server the documentation from.\n@param base The directory within the JAR file to serve the documentation from, or null if the\ndocumentation should be served from the root of the JAR.\n@param fallbackToJar Whether the doc handler should fall back to the jar repo for docs.",
        "predict": " Support server side filtering on arns or names.\n\n    "
    },
    {
        "ID": 566,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def CopyFromDateTimeString(self, time_string): \"\"\"Copies a SYSTEMTIME structure from a date and time string. Args: time_string (str): date and time value formatted as: YYYY-MM-DD hh:mm:ss.######[+-]##:## Where # are numeric digits ranging from 0 to 9 and the seconds fraction can be either 3 or 6 digits. The time of day, seconds fraction and time zone offset are optional. The default time zone is UTC. Raises: ValueError: if the date string is invalid or not supported. \"\"\" date_time_values = self._CopyDateTimeFromString(time_string) year = date_time_values.get('year', 0) month = date_time_values.get('month', 0) day_of_month = date_time_values.get('day_of_month', 0) hours = date_time_values.get('hours', 0) minutes = date_time_values.get('minutes', 0) seconds = date_time_values.get('seconds', 0) microseconds = date_time_values.get('microseconds', 0) milliseconds, _ = divmod( microseconds, definitions.MICROSECONDS_PER_MILLISECOND) if year < 1601 or year > 30827: raise ValueError('Unsupported year value: {0:d}.'.format(year)) self._normalized_timestamp = None self._number_of_seconds = self._GetNumberOfSecondsFromElements( year, month, day_of_month, hours, minutes, seconds) self.year = year self.month = month self.day_of_month = day_of_month # TODO: calculate day of week on demand. self.day_of_week = None self.hours = hours self.minutes = minutes self.seconds = seconds self.milliseconds = milliseconds self.is_local_time = False\n\n    ### Response: Copies a SYSTEMTIME structure from a date and time string.\n\n    Args:\n      time_string (str): date and time value formatted as:\n          YYYY-MM-DD hh:mm:ss.######[+-]##:##\n\n          Where # are numeric digits ranging from 0 to 9 and the seconds\n          fraction can be either 3 or 6 digits. The time of day, seconds\n          fraction and time zone offset are optional. The default time zone\n          is UTC.\n\n    Raises:\n      ValueError: if the date string is invalid or not supported..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static BuildDocHandler fromJar(JarFile jarFile, String base) { FileRepository repo = new JarRepository(jarFile, Option.apply(base)); return new DocumentationHandler(repo); }\n\n    ### Response:",
        "ground_truth": "Create an BuildDocHandler that serves documentation from a given JAR file by wrapping a\nJarRepository.\n\n@param jarFile The JAR file to server the documentation from.\n@param base The directory within the JAR file to serve the documentation from, or null if the\ndocumentation should be served from the root of the JAR.",
        "predict": " Copies a SYSTEMTIME structure from a date and time string.\n\n    Args:\n      time_string (str): date and time value formatted as:\n          YYYY-MM-DD hh:mm:ss.######[+-]##:##\n\n          Where # are numeric digits ranging from 0 to 9 and the seconds\n          fraction can be either 3 or 6 digits. The time of day, seconds\n          fraction and time zone offset are optional. The default time zone\n          is UTC.\n\n    Raises:\n      ValueError: if the date string is invalid or not supported..\n\n    "
    },
    {
        "ID": 567,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def rename(self, new_name): \"\"\" Rename a key :param new_name: New name for the key (will also serve as the key's id) :returns: An updated list of added keys \"\"\" payload = { 'new_name': new_name } data = json.dumps(payload) req = self.request(self.mist_client.uri+'/keys/'+self.id, data=data) req.put() self.id = new_name self.mist_client.update_keys()\n\n    ### Response: Rename a key\n\n        :param new_name: New name for the key (will also serve as the key's id)\n        :returns: An updated list of added keys.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public CompletionStage<ByteString> consumeData(Materializer mat) { return dataStream().runFold(ByteString.empty(), ByteString::concat, mat); }\n\n    ### Response:",
        "ground_truth": "Consumes the data.\n\nThis method should be used carefully, since if the source represents an ephemeral stream,\nthen the entity may not be usable after this method is invoked.\n\n@param mat the application's materializer.\n@return a CompletionStage holding the data",
        "predict": " Rename a key\n\n        :param new_name: New name for the key (will also serve as the key's id)\n        :returns: An updated list of added keys.\n\n    "
    },
    {
        "ID": 568,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public List<Diff> getDiff(Object projectIdOrPath, String sha) throws GitLabApiException { Response response = get(Response.Status.OK, null, \"projects\", getProjectIdOrPath(projectIdOrPath), \"repository\", \"commits\", sha, \"diff\"); return (response.readEntity(new GenericType<List<Diff>>() {})); }\n\n    ### Response: Get the list of diffs of a commit in a project.\n\nGitLab Endpoint: GET /projects/:id/repository/commits/:sha/diff\n\n@param projectIdOrPath the project in the form of an Integer(ID), String(path), or Project instance\n@param sha a commit hash or name of a branch or tag\n@return a List of Diff instances for the specified project ID/sha pair\n@throws GitLabApiException GitLabApiException if any exception occurs during execution.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static final HttpEntity fromContent(Content content, String charset) { String body; if (content instanceof Xml) { // See https://github.com/playframework/playframework/issues/2770 body = content.body().trim(); } else { body = content.body(); } return new Strict( ByteString.fromString(body, charset), Optional.of(content.contentType() + \"; charset=\" + charset)); }\n\n    ### Response:",
        "ground_truth": "Create an entity from the given content.\n\n@param content The content.\n@param charset The charset.\n@return the HTTP entity.",
        "predict": " Get the list of diffs of a commit in a project.\n\nGitLab Endpoint: GET /projects/:id/repository/commits/:sha/diff\n\n@param projectIdOrPath the project in the form of an Integer(ID), String(path), or Project instance\n@param sha a commit hash or name of a branch or tag\n@return a List of Diff instances for the specified project ID/sha pair\n@throws GitLabApiException GitLabApiException if any exception occurs during execution.\n\n    "
    },
    {
        "ID": 569,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def show_md5_view(md5): '''Renders template with `stream_sample` of the md5.''' if not WORKBENCH: return flask.redirect('/') md5_view = WORKBENCH.stream_sample(md5) return flask.render_template('templates/md5_view.html', md5_view=list(md5_view), md5=md5)\n\n    ### Response: Renders template with `stream_sample` of the md5..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static final HttpEntity fromString(String content, String charset) { return new Strict( ByteString.fromString(content, charset), Optional.of(\"text/plain; charset=\" + charset)); }\n\n    ### Response:",
        "ground_truth": "Create an entity from the given String.\n\n@param content The content.\n@param charset The charset.\n@return the HTTP entity.",
        "predict": " Renders template with `stream_sample` of the md5..\n\n    "
    },
    {
        "ID": 570,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static base_responses add(nitro_service client, autoscaleprofile resources[]) throws Exception { base_responses result = null; if (resources != null && resources.length > 0) { autoscaleprofile addresources[] = new autoscaleprofile[resources.length]; for (int i=0;i<resources.length;i++){ addresources[i] = new autoscaleprofile(); addresources[i].name = resources[i].name; addresources[i].type = resources[i].type; addresources[i].url = resources[i].url; addresources[i].apikey = resources[i].apikey; addresources[i].sharedsecret = resources[i].sharedsecret; } result = add_bulk_request(client, addresources); } return result; }\n\n    ### Response: Use this API to add autoscaleprofile resources..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static final HttpEntity chunked(Source<ByteString, ?> data, Optional<String> contentType) { return new Chunked(data.map(HttpChunk.Chunk::new), contentType); }\n\n    ### Response:",
        "ground_truth": "Convert the given source of ByteStrings to a chunked entity.\n\n@param data The source.\n@param contentType The optional content type.\n@return The ByteStrings.",
        "predict": " Use this API to add autoscaleprofile resources..\n\n    "
    },
    {
        "ID": 571,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def deprecated(func, msg=None): \"\"\" A decorator which can be used to mark functions as deprecated.It will result in a deprecation warning being shown when the function is used. \"\"\" message = msg or \"Use of deprecated function '{}`.\".format(func.__name__) @functools.wraps(func) def wrapper_func(*args, **kwargs): warnings.warn(message, DeprecationWarning, stacklevel=2) return func(*args, **kwargs) return wrapper_func\n\n    ### Response: A decorator which can be used to mark functions\n    as deprecated.It will result in a deprecation warning being shown\n    when the function is used..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Result status(int status, JsonNode content) { return status(status, content, JsonEncoding.UTF8); }\n\n    ### Response:",
        "ground_truth": "Generates a simple result with json content and UTF8 encoding.\n\n@param status the HTTP status for this result e.g. 200 (OK), 404 (NOT_FOUND)\n@param content the result's body content as a play-json object\n@return the result",
        "predict": " A decorator which can be used to mark functions\n    as deprecated.It will result in a deprecation warning being shown\n    when the function is used..\n\n    "
    },
    {
        "ID": 572,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func NewNotifyingCommentsController(service *goa.Service, db application.DB, notificationChannel notification.Channel, config CommentsControllerConfiguration) *CommentsController { n := notificationChannel if n == nil { n = &notification.DevNullChannel{} } return &CommentsController{ Controller: service.NewController(\"CommentsController\"), db: db, notification: n, config: config, } }\n\n    ### Response: // NewNotifyingCommentsController creates a comments controller with notification broadcast..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Result status(int status, JsonNode content, JsonEncoding encoding) { if (content == null) { throw new NullPointerException(\"Null content\"); } return status(status).sendJson(content, encoding); }\n\n    ### Response:",
        "ground_truth": "Generates a simple result with json content.\n\n@param status the HTTP status for this result e.g. 200 (OK), 404 (NOT_FOUND)\n@param content the result's body content, as a play-json object\n@param encoding the encoding into which the json should be encoded\n@return the result",
        "predict": " // NewNotifyingCommentsController creates a comments controller with notification broadcast..\n\n    "
    },
    {
        "ID": 573,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def unpack_ambiguous(s): \"\"\" List sequences with ambiguous characters in all possibilities. \"\"\" sd = [ambiguous_dna_values[x] for x in s] return [\"\".join(x) for x in list(product(*sd))]\n\n    ### Response: List sequences with ambiguous characters in all possibilities..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Result status(int status, byte[] content) { if (content == null) { throw new NullPointerException(\"Null content\"); } return new Result( status, new HttpEntity.Strict(ByteString.fromArray(content), Optional.empty())); }\n\n    ### Response:",
        "ground_truth": "Generates a simple result with byte-array content.\n\n@param status the HTTP status for this result e.g. 200 (OK), 404 (NOT_FOUND)\n@param content the result's body content, as a byte array\n@return the result",
        "predict": " List sequences with ambiguous characters in all possibilities..\n\n    "
    },
    {
        "ID": 574,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function decodeXml($body) { try { $xml = Xml::build($body, ['return' => 'domdocument', 'readFile' => false]); // We might not get child nodes if there are nested inline entities. if ((int)$xml->childNodes->length > 0) { return Xml::toArray($xml); } return []; } catch (XmlException $e) { return []; } }\n\n    ### Response: Decode XML into an array.\n\n@param string $body The request body to decode\n@return array.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Result status(int status, InputStream content, long contentLength) { return status(status).sendInputStream(content, contentLength); }\n\n    ### Response:",
        "ground_truth": "Generates a chunked result.\n\n@param status the HTTP status for this result e.g. 200 (OK), 404 (NOT_FOUND)\n@param content the input stream containing data to chunk over\n@param contentLength the length of the provided content in bytes.\n@return the result",
        "predict": " Decode XML into an array.\n\n@param string $body The request body to decode\n@return array.\n\n    "
    },
    {
        "ID": 575,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def predict(self, quadruplets): \"\"\"Predicts the ordering between sample distances in input quadruplets. For each quadruplet, returns 1 if the quadruplet is in the right order ( first pair is more similar than second pair), and -1 if not. Parameters ---------- quadruplets : array-like, shape=(n_quadruplets, 4, n_features) or (n_quadruplets, 4) 3D Array of quadruplets to predict, with each row corresponding to four points, or 2D array of indices of quadruplets if the metric learner uses a preprocessor. Returns ------- prediction : `numpy.ndarray` of floats, shape=(n_constraints,) Predictions of the ordering of pairs, for each quadruplet. \"\"\" check_is_fitted(self, 'transformer_') quadruplets = check_input(quadruplets, type_of_inputs='tuples', preprocessor=self.preprocessor_, estimator=self, tuple_size=self._tuple_size) return np.sign(self.decision_function(quadruplets))\n\n    ### Response: Predicts the ordering between sample distances in input quadruplets.\n\n    For each quadruplet, returns 1 if the quadruplet is in the right order (\n    first pair is more similar than second pair), and -1 if not.\n\n    Parameters\n    ----------\n    quadruplets : array-like, shape=(n_quadruplets, 4, n_features) or\n                  (n_quadruplets, 4)\n      3D Array of quadruplets to predict, with each row corresponding to four\n      points, or 2D array of indices of quadruplets if the metric learner\n      uses a preprocessor.\n\n    Returns\n    -------\n    prediction : `numpy.ndarray` of floats, shape=(n_constraints,)\n      Predictions of the ordering of pairs, for each quadruplet..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Result status(int status, File content) { return status(status, content, StaticFileMimeTypes.fileMimeTypes()); }\n\n    ### Response:",
        "ground_truth": "Generates a result with file contents.\n\n@param status the HTTP status for this result e.g. 200 (OK), 404 (NOT_FOUND)\n@param content the file to send\n@return the result",
        "predict": " Predicts the ordering between sample distances in input quadruplets.\n\n    For each quadruplet, returns 1 if the quadruplet is in the right order (\n    first pair is more similar than second pair), and -1 if not.\n\n    Parameters\n    ----------\n    quadruplets : array-like, shape=(n_quadruplets, 4, n_features) or\n                  (n_quadruplets, 4)\n      3D Array of quadruplets to predict, with each row corresponding to four\n      points, or 2D array of indices of quadruplets if the metric learner\n      uses a preprocessor.\n\n    Returns\n    -------\n    prediction : `numpy.ndarray` of floats, shape=(n_constraints,)\n      Predictions of the ordering of pairs, for each quadruplet..\n\n    "
    },
    {
        "ID": 576,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def dataframe(self): \"\"\" Returns a pandas DataFrame containing all other class properties and values. The index for the DataFrame is the string URI that is used to instantiate the class, such as '201802040nwe'. \"\"\" if self._away_points is None and self._home_points is None: return None fields_to_include = { 'attendance': self.attendance, 'away_first_downs': self.away_first_downs, 'away_fourth_down_attempts': self.away_fourth_down_attempts, 'away_fourth_down_conversions': self.away_fourth_down_conversions, 'away_fumbles': self.away_fumbles, 'away_fumbles_lost': self.away_fumbles_lost, 'away_interceptions': self.away_interceptions, 'away_net_pass_yards': self.away_net_pass_yards, 'away_pass_attempts': self.away_pass_attempts, 'away_pass_completions': self.away_pass_completions, 'away_pass_touchdowns': self.away_pass_touchdowns, 'away_pass_yards': self.away_pass_yards, 'away_penalties': self.away_penalties, 'away_points': self.away_points, 'away_rush_attempts': self.away_rush_attempts, 'away_rush_touchdowns': self.away_rush_touchdowns, 'away_rush_yards': self.away_rush_yards, 'away_third_down_attempts': self.away_third_down_attempts, 'away_third_down_conversions': self.away_third_down_conversions, 'away_time_of_possession': self.away_time_of_possession, 'away_times_sacked': self.away_times_sacked, 'away_total_yards': self.away_total_yards, 'away_turnovers': self.away_turnovers, 'away_yards_from_penalties': self.away_yards_from_penalties, 'away_yards_lost_from_sacks': self.away_yards_lost_from_sacks, 'date': self.date, 'duration': self.duration, 'home_first_downs': self.home_first_downs, 'home_fourth_down_attempts': self.home_fourth_down_attempts, 'home_fourth_down_conversions': self.home_fourth_down_conversions, 'home_fumbles': self.home_fumbles, 'home_fumbles_lost': self.home_fumbles_lost, 'home_interceptions': self.home_interceptions, 'home_net_pass_yards': self.home_net_pass_yards, 'home_pass_attempts': self.home_pass_attempts, 'home_pass_completions': self.home_pass_completions, 'home_pass_touchdowns': self.home_pass_touchdowns, 'home_pass_yards': self.home_pass_yards, 'home_penalties': self.home_penalties, 'home_points': self.home_points, 'home_rush_attempts': self.home_rush_attempts, 'home_rush_touchdowns': self.home_rush_touchdowns, 'home_rush_yards': self.home_rush_yards, 'home_third_down_attempts': self.home_third_down_attempts, 'home_third_down_conversions': self.home_third_down_conversions, 'home_time_of_possession': self.home_time_of_possession, 'home_times_sacked': self.home_times_sacked, 'home_total_yards': self.home_total_yards, 'home_turnovers': self.home_turnovers, 'home_yards_from_penalties': self.home_yards_from_penalties, 'home_yards_lost_from_sacks': self.home_yards_lost_from_sacks, 'losing_abbr': self.losing_abbr, 'losing_name': self.losing_name, 'stadium': self.stadium, 'time': self.time, 'winner': self.winner, 'winning_abbr': self.winning_abbr, 'winning_name': self.winning_name } return pd.DataFrame([fields_to_include], index=[self._uri])\n\n    ### Response: Returns a pandas DataFrame containing all other class properties and\n        values. The index for the DataFrame is the string URI that is used to\n        instantiate the class, such as '201802040nwe'..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private User findById(Long id) { if (id > 3) return null; User user = new User(); user.id = id; user.name = \"User \" + String.valueOf(id); return user; }\n\n    ### Response:",
        "ground_truth": "designed to be lightweight operation",
        "predict": " Returns a pandas DataFrame containing all other class properties and\n        values. The index for the DataFrame is the string URI that is used to\n        instantiate the class, such as '201802040nwe'..\n\n    "
    },
    {
        "ID": 577,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static function formatBytes($bytes, $precision = 2) { if ($bytes < 1024) { return $bytes.' B'; } elseif ($bytes < 1048576) { return round($bytes / 1024, $precision).' KB'; } elseif ($bytes < 1073741824) { return round($bytes / 1048576, $precision).' MB'; } elseif ($bytes < 1099511627776) { return round($bytes / 1073741824, $precision).' GB'; } else { return round($bytes / 1099511627776, $precision).' TB'; } }\n\n    ### Response: Convert size in bytes to human readable format\n\n@param integer $bytes     Size in Bytes\n@param integer $precision Number of decimal digits to round to\n\n@return string.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Lang preferred(Collection<Lang> candidates) { return new Lang( langs.preferred((scala.collection.immutable.Seq) Scala.asScala(candidates).toSeq())); }\n\n    ### Response:",
        "ground_truth": "Select a preferred language, given the list of candidates.\n\nWill select the preferred language, based on what languages are available, or return the\ndefault language if none of the candidates are available.\n\n@param candidates The candidate languages\n@return The preferred language",
        "predict": " Convert size in bytes to human readable format\n\n@param integer $bytes     Size in Bytes\n@param integer $precision Number of decimal digits to round to\n\n@return string.\n\n    "
    },
    {
        "ID": 578,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _round_to_next_multiple(n, m): \"\"\" Round up the the next multiple. :param n: The number to round up. :param m: The multiple. :return: The rounded number \"\"\" return n if n % m == 0 else n + m - n % m\n\n    ### Response: Round up the the next multiple.\n\n    :param n: The number to round up.\n    :param m: The multiple.\n    :return: The rounded number.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Call unique() { return new play.api.mvc.Call(method(), this.uniquify(this.url()), fragment()); }\n\n    ### Response:",
        "ground_truth": "Append a unique identifier to the URL.\n\n@return a copy if this call with a unique identifier to this url",
        "predict": " Round up the the next multiple.\n\n    :param n: The number to round up.\n    :param m: The multiple.\n    :return: The rounded number.\n\n    "
    },
    {
        "ID": 579,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (l *logger) Info(v ...interface{}) { f := extractFields(&v) l.send(LevelInfo, 2, fmt.Sprint(v...), f) }\n\n    ### Response: // Info implements Logger interface.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Call withFragment(String fragment) { return new play.api.mvc.Call(method(), url(), fragment); }\n\n    ### Response:",
        "ground_truth": "Returns a new Call with the given fragment.\n\n@param fragment the URL fragment\n@return a copy of this call that contains the fragment",
        "predict": " // Info implements Logger interface.\n\n    "
    },
    {
        "ID": 580,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void readSketchMetadata(Callback<SketchMetadata> callback) { addCallback(BeanMessageID.BL_GET_META, callback); sendMessageWithoutPayload(BeanMessageID.BL_GET_META); }\n\n    ### Response: Request the sketch metadata.\n\n@param callback the callback for the {@link com.punchthrough.bean.sdk.message.SketchMetadata}\nresult.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String absoluteURL(Http.Request request) { return absoluteURL(request.secure(), request.host()); }\n\n    ### Response:",
        "ground_truth": "Transform this call to an absolute URL.\n\n@param request used to identify the host and protocol that should base this absolute URL\n@return the absolute URL string",
        "predict": " Request the sketch metadata.\n\n@param callback the callback for the {@link com.punchthrough.bean.sdk.message.SketchMetadata}\nresult.\n\n    "
    },
    {
        "ID": 581,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func GetCCVMs(jsonObj []VMObject) ([]CCJob, error) { parser := &CloudControllerDeploymentParser{} return parser.Parse(jsonObj) }\n\n    ### Response: //GetCCVMs - a function to get a list of ccjobs.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String webSocketURL(Http.Request request) { return webSocketURL(request.secure(), request.host()); }\n\n    ### Response:",
        "ground_truth": "Transform this call to an WebSocket URL.\n\n@param request used as the base for forming the WS url\n@return the websocket url string",
        "predict": " //GetCCVMs - a function to get a list of ccjobs.\n\n    "
    },
    {
        "ID": 582,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function _json($url, $method=\"get\", $params=\"{}\", $jsCallback=NULL, $attr=\"id\", $context=\"document\",$immediatly=false) { $jsCallback=isset($jsCallback) ? $jsCallback : \"\"; $retour=$this->_getAjaxUrl($url, $attr); $retour.=\"$.{$method}(url,\".$params.\").done(function( data ) {\\n\"; $retour.=\"\\tdata=$.parseJSON(data);for(var key in data){\" .\"if($('#'+key,\".$context.\").length){ if($('#'+key,\".$context.\").is('[value]')) { $('#'+key,\".$context.\").val(data[key]);} else { $('#'+key,\".$context.\").html(data[key]); }}};\\n\"; $retour.=\"\\t\".$jsCallback.\"\\n\". \"\\t$(document).trigger('jsonReady',[data]);\\n\". \"});\\n\"; if ($immediatly) $this->jquery_code_for_compile[]=$retour; return $retour; }\n\n    ### Response: Makes an ajax request and receives the JSON data types by assigning DOM elements with the same name\n@param string $url the request address\n@param string $params Param\u00e8tres pass\u00e9s au format JSON\n@param string $method Method use\n@param string $jsCallback javascript code to execute after the request\n@param boolean $immediatly.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    AbstractFunction1<Connection, BoxedUnit> connectionFunction(final ConnectionRunnable block) { return new AbstractFunction1<Connection, BoxedUnit>() { public BoxedUnit apply(Connection connection) { try { block.run(connection); return BoxedUnit.UNIT; } catch (java.sql.SQLException e) { throw new RuntimeException(\"Connection runnable failed\", e); } } }; }\n\n    ### Response:",
        "ground_truth": "Create a Scala function wrapper for ConnectionRunnable.\n\n@param block a Java functional interface instance to wrap\n@return a scala function that wraps the given block",
        "predict": " Makes an ajax request and receives the JSON data types by assigning DOM elements with the same name\n@param string $url the request address\n@param string $params Param\u00e8tres pass\u00e9s au format JSON\n@param string $method Method use\n@param string $jsCallback javascript code to execute after the request\n@param boolean $immediatly.\n\n    "
    },
    {
        "ID": 583,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def merge_dataframes(*dfs): '''A helper function for merging two dataframes that have the same indices, duplicate columns are removed :param dfs: a list of dataframes to be merged (note: they must have the same indices) :type dfs: list[pandas.DataFrame] :returns: pandas.DataFrame -- a merged dataframe ''' merged_dataframe = pd.concat(dfs, axis=1, join_axes=[dfs[0].index]) return merged_dataframe.transpose().drop_duplicates().transpose()\n\n    ### Response: A helper function for merging two dataframes that have the same indices, duplicate columns are removed\n\n        :param dfs: a list of dataframes to be merged (note: they must have the same indices)\n        :type dfs: list[pandas.DataFrame]\n        :returns: pandas.DataFrame -- a merged dataframe.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    <A> AbstractFunction1<Connection, A> connectionFunction(final ConnectionCallable<A> block) { return new AbstractFunction1<Connection, A>() { public A apply(Connection connection) { try { return block.call(connection); } catch (java.sql.SQLException e) { throw new RuntimeException(\"Connection callable failed\", e); } } }; }\n\n    ### Response:",
        "ground_truth": "Create a Scala function wrapper for ConnectionCallable.\n\n@param block a Java functional interface instance to wrap\n@param  the provided block's return type\n@return a scala function wrapping the given block",
        "predict": " A helper function for merging two dataframes that have the same indices, duplicate columns are removed\n\n        :param dfs: a list of dataframes to be merged (note: they must have the same indices)\n        :type dfs: list[pandas.DataFrame]\n        :returns: pandas.DataFrame -- a merged dataframe.\n\n    "
    },
    {
        "ID": 584,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def add(self, sim, module, package=None): \"\"\" Add simulation to layer. \"\"\" super(Simulations, self).add(sim, module, package) # only update layer info if it is missing! if sim not in self.layer: # copy simulation source parameters to :attr:`Layer.layer` self.layer[sim] = {'module': module, 'package': package}\n\n    ### Response: Add simulation to layer..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Server forRouter(Mode mode, int port, Function<BuiltInComponents, Router> block) { return new Builder().mode(mode).http(port).build(block); }\n\n    ### Response:",
        "ground_truth": "Create a server for the router returned by the given block.\n\n@param block The block which creates a router.\n@param mode The mode the server will run on.\n@param port The port the server will run on.\n@return The running server.",
        "predict": " Add simulation to layer..\n\n    "
    },
    {
        "ID": 585,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static function Read( string $folder, string $message = null, int $code = \\E_USER_ERROR, \\Throwable $previous = null ) : FolderAccessException { return new FolderAccessException ( $folder, FolderAccessException::ACCESS_READ, $message, $code, $previous ); }\n\n    ### Response: Inits a new \\Niirrty\\IO\\FolderAccessException for folder read mode.\n\n@param  string     $folder   The folder where reading fails.\n@param  string     $message  The optional error message.\n@param  integer    $code     A optional error code (Defaults to \\E_USER_ERROR)\n@param  \\Throwable $previous A Optional previous exception.\n@return \\Niirrty\\IO\\FolderAccessException.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static JsonNode toJson(final Object data) { try { return mapper().valueToTree(data); } catch (Exception e) { throw new RuntimeException(e); } }\n\n    ### Response:",
        "ground_truth": "Converts an object to JsonNode.\n\n@param data Value to convert in Json.\n@return the JSON node.",
        "predict": " Inits a new \\Niirrty\\IO\\FolderAccessException for folder read mode.\n\n@param  string     $folder   The folder where reading fails.\n@param  string     $message  The optional error message.\n@param  integer    $code     A optional error code (Defaults to \\E_USER_ERROR)\n@param  \\Throwable $previous A Optional previous exception.\n@return \\Niirrty\\IO\\FolderAccessException.\n\n    "
    },
    {
        "ID": 586,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def parse_querystring(msg): 'parse a querystring into keys and values' for part in msg.querystring.strip().lstrip('?').split('&'): key, value = part.split('=') yield key, value\n\n    ### Response: parse a querystring into keys and values.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static <A> A fromJson(JsonNode json, Class<A> clazz) { try { return mapper().treeToValue(json, clazz); } catch (Exception e) { throw new RuntimeException(e); } }\n\n    ### Response:",
        "ground_truth": "Converts a JsonNode to a Java value\n\n@param  the type of the return value.\n@param json Json value to convert.\n@param clazz Expected Java value type.\n@return the return value.",
        "predict": " parse a querystring into keys and values.\n\n    "
    },
    {
        "ID": 587,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String getProcessTreeDump() { StringBuilder ret = new StringBuilder(); // The header. ret.append(String.format(\"\\t|- PID PPID PGRPID SESSID CMD_NAME \" + \"USER_MODE_TIME(MILLIS) SYSTEM_TIME(MILLIS) VMEM_USAGE(BYTES) \" + \"RSSMEM_USAGE(PAGES) FULL_CMD_LINE\\n\")); for (ProcessInfo p : processTree.values()) { if (p != null) { ret.append(String.format(PROCESSTREE_DUMP_FORMAT, p.getPid(), p .getPpid(), p.getPgrpId(), p.getSessionId(), p.getName(), p .getUtime(), p.getStime(), p.getVmem(), p.getRssmemPage(), p .getCmdLine(procfsDir))); } } return ret.toString(); }\n\n    ### Response: Get a dump of the process-tree.\n\n@return a string concatenating the dump of information of all the processes\nin the process-tree.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static JsonNode parse(String src) { try { return mapper().readTree(src); } catch (Throwable t) { throw new RuntimeException(t); } }\n\n    ### Response:",
        "ground_truth": "Parses a String representing a json, and return it as a JsonNode.\n\n@param src the JSON string.\n@return the JSON node.",
        "predict": " Get a dump of the process-tree.\n\n@return a string concatenating the dump of information of all the processes\nin the process-tree.\n\n    "
    },
    {
        "ID": 588,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (c *Client) GetReceivedByAddressMinConf(address btcutil.Address, minConfirms int) (btcutil.Amount, error) { return c.GetReceivedByAddressMinConfAsync(address, minConfirms).Receive() }\n\n    ### Response: // GetReceivedByAddressMinConf returns the total amount received by the specified\n// address with at least the specified number of minimum confirmations.\n//\n// See GetReceivedByAddress to use the default minimum number of confirmations..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static JsonNode parse(java.io.InputStream src) { try { return mapper().readTree(src); } catch (Throwable t) { throw new RuntimeException(t); } }\n\n    ### Response:",
        "ground_truth": "Parses a InputStream representing a json, and return it as a JsonNode.\n\n@param src the JSON input stream.\n@return the JSON node.",
        "predict": " // GetReceivedByAddressMinConf returns the total amount received by the specified\n// address with at least the specified number of minimum confirmations.\n//\n// See GetReceivedByAddress to use the default minimum number of confirmations..\n\n    "
    },
    {
        "ID": 589,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void setEnterpriseNumber(int index, Number value) { set(selectField(AssignmentFieldLists.ENTERPRISE_NUMBER, index), value); }\n\n    ### Response: Set an enterprise number value.\n\n@param index number index (1-40)\n@param value number value.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String relative(String startPath, String targetPath) { // If the start and target path's are the same then link to the current directory if (startPath.equals(targetPath)) { return CURRENT_DIR; } String[] start = toSegments(canonical(startPath)); String[] target = toSegments(canonical(targetPath)); // If start path has no trailing separator (a \"file\" path), then drop file segment if (!startPath.endsWith(SEPARATOR)) start = Arrays.copyOfRange(start, 0, start.length - 1); // If target path has no trailing separator, then drop file segment, but keep a reference to add // it later String targetFile = \"\"; if (!targetPath.endsWith(SEPARATOR)) { targetFile = target[target.length - 1]; target = Arrays.copyOfRange(target, 0, target.length - 1); } // Work out how much of the filepath is shared by start and path. String[] common = commonPrefix(start, target); String[] parents = toParentDirs(start.length - common.length); int relativeStartIdx = common.length; String[] relativeDirs = Arrays.copyOfRange(target, relativeStartIdx, target.length); String[] relativePath = Arrays.copyOf(parents, parents.length + relativeDirs.length); System.arraycopy(relativeDirs, 0, relativePath, parents.length, relativeDirs.length); // If this is not a sibling reference append a trailing / to path String trailingSep = \"\"; if (relativePath.length > 0) trailingSep = SEPARATOR; return Arrays.stream(relativePath).collect(Collectors.joining(SEPARATOR)) + trailingSep + targetFile; }\n\n    ### Response:",
        "ground_truth": "Create a path to targetPath that's relative to the given startPath.",
        "predict": " Set an enterprise number value.\n\n@param index number index (1-40)\n@param value number value.\n\n    "
    },
    {
        "ID": 590,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static function write_error_html($errtitle, $errdetails, $errcode, $backtrace = null) { global $USR; ?> <!DOCTYPE HTML> <html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"en\"> <head> <meta charset=\"UTF-8\" /> <meta http-equiv=\"Content-Type\" content=\"text/html;charset=utf-8\" /> <title><?php echo $errtitle ?></title> <style> html { background-color: #111; font-family: sans-serif; color: #fff; } .errbox { margin: 3rem; padding: 1rem; border-radius: 0.5rem; background-color: #500; border: 1px solid #f00; } .errbox h1, .errbox h2, .errbox h4 { margin: 0; padding: 0; } .errbox h1 { text-align: center; margin: 1rem 1rem 2rem; } .errbox h4 { margin-bottom: 1rem; } .errbox > div { background-color: #300; border: 1px solid #800; padding: 1rem; } </style> </head> <body> <div id=\"page\"> <div id=\"subContent\"> <div class=\"errbox\"> <?php echo '<h1>'.$errcode.': '.$errtitle.'</h1>'; if (!empty($errdetails)) { echo '<div><h2>'.$errdetails.'</h2></div>'; } if (!empty($USR) && $USR->is_admin === true && !empty($backtrace)) { echo '<div><h4>Backtrace:</h4>'.$backtrace.'</div>'; } ?> </div> </div> </div> </body> </html> <?php }\n\n    ### Response: For handle-able errors, print out our custom error screen.\n\n@param string $errtitle The title of the error.\n@param string $errdetails Details of the error.\n@param string $errcode (Optional) An error code.\n@param string $backtrace (Optional) A backtrace..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String canonical(String url) { String[] urlPath = toSegments(url); Stack<String> canonical = new Stack<>(); for (String comp : urlPath) { if (comp.isEmpty() || comp.equals(CURRENT_DIR)) continue; if (!comp.equals(PARENT_DIR) || (!canonical.empty() && canonical.peek().equals(PARENT_DIR))) canonical.push(comp); else canonical.pop(); } String prefixSep = url.startsWith(SEPARATOR) ? SEPARATOR : \"\"; String trailingSep = url.endsWith(SEPARATOR) ? SEPARATOR : \"\"; return prefixSep + canonical.stream().collect(Collectors.joining(SEPARATOR)) + trailingSep; }\n\n    ### Response:",
        "ground_truth": "Create a canonical path that does not contain parent directories, current directories, or\nsuperfluous directory separators.",
        "predict": " For handle-able errors, print out our custom error screen.\n\n@param string $errtitle The title of the error.\n@param string $errdetails Details of the error.\n@param string $errcode (Optional) An error code.\n@param string $backtrace (Optional) A backtrace..\n\n    "
    },
    {
        "ID": 591,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public CMAArray<CMASnapshot> fetchAllSnapshots(CMAContentType contentType) { assertNotNull(contentType, \"contentType\"); final String contentTypeId = getResourceIdOrThrow(contentType, \"contentType\"); final String spaceId = getSpaceIdOrThrow(contentType, \"contentType\"); final String environmentId = contentType.getEnvironmentId(); return service.fetchAllSnapshots(spaceId, environmentId, contentTypeId).blockingFirst(); }\n\n    ### Response: Fetch all snapshots of this content type.\n\n@param contentType the contentType whose snapshots to be returned.\n@return an array of snapshots.\n@throws IllegalArgumentException if contentType is null.\n@throws IllegalArgumentException if contentType's id is null.\n@throws IllegalArgumentException if contentType's space id is null..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static List<Tuple<String, List<Object>>> displayableConstraint( Set<ConstraintDescriptor<?>> constraints) { return constraints .parallelStream() .filter(c -> c.getAnnotation().annotationType().isAnnotationPresent(Display.class)) .map(c -> displayableConstraint(c)) .collect(Collectors.toList()); }\n\n    ### Response:",
        "ground_truth": "Converts a set of constraints to human-readable values. Does not guarantee the order of the\nreturned constraints.\n\nThis method calls {@code displayableConstraint} under the hood.\n\n@param constraints the set of constraint descriptors.\n@return a list of pairs of tuples assembled from displayableConstraint.",
        "predict": " Fetch all snapshots of this content type.\n\n@param contentType the contentType whose snapshots to be returned.\n@return an array of snapshots.\n@throws IllegalArgumentException if contentType is null.\n@throws IllegalArgumentException if contentType's id is null.\n@throws IllegalArgumentException if contentType's space id is null..\n\n    "
    },
    {
        "ID": 592,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (e *Executor) ParseDestinationTarget(targetString string) (string, topodatapb.TabletType, key.Destination, error) { destKeyspace, destTabletType, dest, err := topoproto.ParseDestination(targetString, defaultTabletType) // Set default keyspace if destKeyspace == \"\" && len(e.VSchema().Keyspaces) == 1 { for k := range e.VSchema().Keyspaces { destKeyspace = k } } return destKeyspace, destTabletType, dest, err }\n\n    ### Response: // ParseDestinationTarget parses destination target string and sets default keyspace if possible..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Tuple<String, List<Object>> displayableConstraint( ConstraintDescriptor<?> constraint) { final Display displayAnnotation = constraint.getAnnotation().annotationType().getAnnotation(Display.class); return Tuple( displayAnnotation.name(), Collections.unmodifiableList( Stream.of(displayAnnotation.attributes()) .map(attr -> constraint.getAttributes().get(attr)) .collect(Collectors.toList()))); }\n\n    ### Response:",
        "ground_truth": "Converts a constraint to a human-readable value.\n\n@param constraint the constraint descriptor.\n@return A tuple containing the constraint's display name and the constraint attributes.",
        "predict": " // ParseDestinationTarget parses destination target string and sets default keyspace if possible..\n\n    "
    },
    {
        "ID": 593,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    async def restart_walk(self): \"\"\" Force a re-walk \"\"\" if not self._restartwalk: self._restartwalk = True await self.wait_for_send(FlowUpdaterNotification(self, FlowUpdaterNotification.STARTWALK))\n\n    ### Response: Force a re-walk.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public <A> CompletionStage<A> timeout( final CompletionStage<A> stage, final long amount, final TimeUnit unit) { requireNonNull(stage, \"Null stage\"); requireNonNull(unit, \"Null unit\"); FiniteDuration duration = FiniteDuration.apply(amount, unit); return toJava(delegate.timeout(duration, Scala.asScalaWithFuture(() -> stage))); }\n\n    ### Response:",
        "ground_truth": "Creates a CompletionStage that returns either the input stage, or a futures.\n\nNote that timeout is not the same as cancellation. Even in case of futures, the given\ncompletion stage will still complete, even though that completed value is not returned.\n\n@param stage the input completion stage that may time out.\n@param amount The amount (expressed with the corresponding unit).\n@param unit The time Unit.\n@param  the completion's result type.\n@return either the completed future, or a completion stage that failed with futures.",
        "predict": " Force a re-walk.\n\n    "
    },
    {
        "ID": 594,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static function delete_data_for_all_users_in_context_course_module(string $component, \\context $context) { global $DB; if ($context instanceof \\context_module) { // Delete course completion data for this context. \\core_completion\\privacy\\provider::delete_completion(null, null, $context->instanceid); } }\n\n    ### Response: Handle removal of 'standard' data for course modules.\n\nThis will handle deletion for things such as activity completion.\n\n@param   string              $component The component being deleted for.\n@param   \\context            $context The context to delete all data for..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static boolean isAssignable( Class<?>[] classArray, Class<?>[] toClassArray, boolean autoboxing) { if (arrayGetLength(classArray) != arrayGetLength(toClassArray)) { return false; } if (classArray == null) { classArray = EMPTY_CLASS_ARRAY; } if (toClassArray == null) { toClassArray = EMPTY_CLASS_ARRAY; } for (int i = 0; i < classArray.length; i++) { if (isAssignable(classArray[i], toClassArray[i], autoboxing) == false) { return false; } } return true; }\n\n    ### Response:",
        "ground_truth": "Checks if an array of Classes can be assigned to another array of Classes.\n\nThis method calls {@link #isAssignable(Class, Class) isAssignable} for each Class pair in\nthe input arrays. It can be used to check if a set of arguments (the first parameter) are\nsuitably compatible with a set of method parameter types (the second parameter).\n\nUnlike the {@link Class#isAssignableFrom(java.lang.Class)} method, this method takes into\naccount widenings of primitive classes and {@code null}s.\n\nPrimitive widenings allow an int to be assigned to a {@code long}, {@code float} or {@code\ndouble}. This method returns the correct result for these cases.\n\n{@code Null} may be assigned to any reference type. This method will return {@code true} if\n{@code null} is passed in and the toClass is non-primitive.\n\nSpecifically, this method tests whether the type represented by the specified {@code Class}\nparameter can be converted to the type represented by this {@code Class} object via an identity\nconversion widening primitive or widening reference conversion. See The Java Language Specification, sections\n5.1.1, 5.1.2 and 5.1.4 for details.\n\n@param classArray the array of Classes to check, may be {@code null}\n@param toClassArray the array of Classes to try to assign into, may be {@code null}\n@param autoboxing whether to use implicit autoboxing/unboxing between primitives and wrappers\n@return {@code true} if assignment possible",
        "predict": " Handle removal of 'standard' data for course modules.\n\nThis will handle deletion for things such as activity completion.\n\n@param   string              $component The component being deleted for.\n@param   \\context            $context The context to delete all data for..\n\n    "
    },
    {
        "ID": 595,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function format( type, args ) { var now = new Date().toISOString(), tmpl = '[%s] %s: %s\\n', msg; msg = args[ 0 ] instanceof Error ? args[ 0 ].stack : util.format.apply( util, args ); return util.format( tmpl, now, type, msg ); }\n\n    ### Response: format log messages.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Date parseCRONExpression(String cron) { try { return new CronExpression(cron).getNextValidTimeAfter(new Date()); } catch (Exception e) { throw new IllegalArgumentException(\"Invalid CRON pattern : \" + cron, e); } }\n\n    ### Response:",
        "ground_truth": "Parses a CRON expression.\n\n@param cron the CRON String\n@return the next Date that satisfies the expression",
        "predict": " format log messages.\n\n    "
    },
    {
        "ID": 596,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (functions Functions) Keys() KeySet { keySet := NewKeySet() for _, f := range functions { keySet.Add(f.key()) } return keySet }\n\n    ### Response: // Keys - returns list of keys used in all functions..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static long cronInterval(String cron, Date date) { try { return new CronExpression(cron).getNextInterval(date); } catch (Exception e) { throw new IllegalArgumentException(\"Invalid CRON pattern : \" + cron, e); } }\n\n    ### Response:",
        "ground_truth": "Compute the number of milliseconds between the next valid date and the one after.\n\n@param cron the CRON String\n@param date the date to start search\n@return the number of milliseconds between the next valid date and the one after, with an\ninvalid interval between",
        "predict": " // Keys - returns list of keys used in all functions..\n\n    "
    },
    {
        "ID": 597,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _get(self, tx_id): \"\"\"Read and obj in bdb using the tx_id. :param resource_id: id of the transaction to be read. :return: value with the data, transaction id and transaction. \"\"\" # tx_id=self._find_tx_id(resource_id) value = [ { 'data': transaction['metadata'], 'id': transaction['id'] } for transaction in self.driver.instance.transactions.get(asset_id=self.get_asset_id(tx_id)) ][-1] if value['data']['data']: self.logger.debug('bdb::read::{}'.format(value['data'])) return value else: return False\n\n    ### Response: Read and obj in bdb using the tx_id.\n\n        :param resource_id: id of the transaction to be read.\n        :return: value with the data, transaction id and transaction..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static AhcWSClient create( AhcWSClientConfig config, AhcHttpCache cache, Materializer materializer) { final StandaloneAhcWSClient client = StandaloneAhcWSClient.create(config, cache, materializer); return new AhcWSClient(client, materializer); }\n\n    ### Response:",
        "ground_truth": "Creates WS client manually from configuration, internally creating a new instance of\nAsyncHttpClient and managing its own thread pool.\n\nThis client is not managed as part of Play's lifecycle, and must be closed by calling\nws.close(), otherwise you will run into memory leaks.\n\n@param config a config object, usually from AhcWSClientConfigFactory\n@param cache if not null, provides HTTP caching.\n@param materializer an Akka materializer\n@return a new instance of AhcWSClient.",
        "predict": " Read and obj in bdb using the tx_id.\n\n        :param resource_id: id of the transaction to be read.\n        :return: value with the data, transaction id and transaction..\n\n    "
    },
    {
        "ID": 598,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (g *Generator) OneDurationOf(values ...time.Duration) time.Duration { i := g.Int(0, len(values)-1) return values[i] }\n\n    ### Response: // OneDurationOf returns one of the passed durations..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public GuiceApplicationBuilder builder(ApplicationLoader.Context context) { return initialBuilder .in(context.environment()) .loadConfig(context.initialConfig()) .overrides(overrides(context)); }\n\n    ### Response:",
        "ground_truth": "Construct a builder to use for loading the given context.\n\n@param context the context the returned builder will load\n@return the builder",
        "predict": " // OneDurationOf returns one of the passed durations..\n\n    "
    },
    {
        "ID": 599,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void addCalendarEvent(String summary, long start, boolean allDay, long end, String location, String description, String[] attendees) { Intent intent = new Intent(Intent.ACTION_INSERT); intent.setType(\"vnd.android.cursor.item/event\"); intent.putExtra(\"beginTime\", start); if (allDay) { intent.putExtra(\"allDay\", true); } if (end < 0L) { if (allDay) { // + 1 day end = start + 24 * 60 * 60 * 1000; } else { end = start; } } intent.putExtra(\"endTime\", end); intent.putExtra(\"title\", summary); intent.putExtra(\"eventLocation\", location); intent.putExtra(\"description\", description); if (attendees != null) { intent.putExtra(Intent.EXTRA_EMAIL, attendees); // Documentation says this is either a String[] or comma-separated String, which is right? } try { // Do this manually at first rawLaunchIntent(intent); } catch (ActivityNotFoundException anfe) { Log.w(TAG, \"No calendar app available that responds to \" + Intent.ACTION_INSERT); // For calendar apps that don't like \"INSERT\": intent.setAction(Intent.ACTION_EDIT); launchIntent(intent); // Fail here for real if nothing can handle it } }\n\n    ### Response: Sends an intent to create a new calendar event by prepopulating the Add Event UI. Older\nversions of the system have a bug where the event title will not be filled out.\n\n@param summary A description of the event\n@param start   The start time\n@param allDay  if true, event is considered to be all day starting from start time\n@param end     The end time (optional; can be < 0 if not specified)\n@param location a text description of the event location\n@param description a text description of the event itself\n@param attendees attendees to invite.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Result TODO(Request request) { return status(NOT_IMPLEMENTED, views.html.defaultpages.todo.render(request.asScala())); }\n\n    ### Response:",
        "ground_truth": "Generates a 501 NOT_IMPLEMENTED simple result.",
        "predict": " Sends an intent to create a new calendar event by prepopulating the Add Event UI. Older\nversions of the system have a bug where the event title will not be filled out.\n\n@param summary A description of the event\n@param start   The start time\n@param allDay  if true, event is considered to be all day starting from start time\n@param end     The end time (optional; can be < 0 if not specified)\n@param location a text description of the event location\n@param description a text description of the event itself\n@param attendees attendees to invite.\n\n    "
    },
    {
        "ID": 600,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    async def emit(self, record: LogRecord): # type: ignore \"\"\" Actually log the specified logging record to the stream. \"\"\" if self.writer is None: self.writer = await self._init_writer() try: msg = self.format(record) + self.terminator self.writer.write(msg.encode()) await self.writer.drain() except Exception: await self.handleError(record)\n\n    ### Response: Actually log the specified logging record to the stream..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Deprecated public static void session(String key, String value) { session().put(key, value); }\n\n    ### Response:",
        "ground_truth": "Puts a new value into the current session.\n\n@param key the key to set into the session\n@param value the value to set for key\n@deprecated Deprecated as of 2.7.0. Use {@link Result} instead.",
        "predict": " Actually log the specified logging record to the stream..\n\n    "
    },
    {
        "ID": 601,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function(that, precisionUnit) { if (precisionUnit === undefined) { precisionUnit = tr.b.u.TimeDisplayModes.ms; } var startsBefore = precisionUnit.roundedLess(that.start, this.start); var endsAfter = precisionUnit.roundedLess(this.end, that.end); return !startsBefore && !endsAfter; }\n\n    ### Response: bounds returns whether that TimedEvent happens within this timed event.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Deprecated public static void flash(String key, String value) { flash().put(key, value); }\n\n    ### Response:",
        "ground_truth": "Puts a new value into the flash scope.\n\n@param key the key to put into the flash scope\n@param value the value corresponding to key\n@deprecated Deprecated as of 2.7.0. Use {@link Result} instead.",
        "predict": " bounds returns whether that TimedEvent happens within this timed event.\n\n    "
    },
    {
        "ID": 602,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (c *RefManager) ClearRef(id ContainerID) { c.Lock() defer c.Unlock() delete(c.containerIDToRef, id) }\n\n    ### Response: // ClearRef forgets the given container id and its associated container reference..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public <A extends Annotation> BindingKey<T> qualifiedWith(final A instance) { return underlying.qualifiedWith(instance).asJava(); }\n\n    ### Response:",
        "ground_truth": "Qualify this binding key with the given instance of an annotation.\n\nThis can be used to specify bindings with annotations that have particular values.",
        "predict": " // ClearRef forgets the given container id and its associated container reference..\n\n    "
    },
    {
        "ID": 603,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def create_description_node(field, state): \"\"\"Creates docutils nodes for the Field's description, built from the field's ``doc`` and ``optional`` attributes. Parameters ---------- field : ``lsst.pex.config.Field`` A configuration field. state : ``docutils.statemachine.State`` Usually the directive's ``state`` attribute. Returns ------- ``docutils.nodes.section`` Section containing nodes for the description of the ``field``. \"\"\" doc_container_node = nodes.container() doc_container_node += parse_rst_content(field.doc, state) return doc_container_node\n\n    ### Response: Creates docutils nodes for the Field's description, built from the\n    field's ``doc`` and ``optional`` attributes.\n\n    Parameters\n    ----------\n    field : ``lsst.pex.config.Field``\n        A configuration field.\n    state : ``docutils.statemachine.State``\n        Usually the directive's ``state`` attribute.\n\n    Returns\n    -------\n    ``docutils.nodes.section``\n        Section containing nodes for the description of the ``field``..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public <A extends Annotation> BindingKey<T> qualifiedWith(final Class<A> annotation) { return underlying.qualifiedWith(annotation).asJava(); }\n\n    ### Response:",
        "ground_truth": "Qualify this binding key with the given annotation.\n\nFor example, you may have both a cached implementation, and a direct implementation of a\nservice. To differentiate between them, you may define a Cached annotation:\n\n{@code\nbindClass(Foo.class).qualifiedWith(Cached.class).to(FooCached.class),\nbindClass(Foo.class).to(FooImpl.class)\n\n...\n\nclass MyController {\n{@literal @}Inject\nMyController({@literal @}Cached Foo foo) {\n...\n}\n...\n}\n}\n\nIn the above example, the controller will get the cached {@code Foo} service.",
        "predict": " Creates docutils nodes for the Field's description, built from the\n    field's ``doc`` and ``optional`` attributes.\n\n    Parameters\n    ----------\n    field : ``lsst.pex.config.Field``\n        A configuration field.\n    state : ``docutils.statemachine.State``\n        Usually the directive's ``state`` attribute.\n\n    Returns\n    -------\n    ``docutils.nodes.section``\n        Section containing nodes for the description of the ``field``..\n\n    "
    },
    {
        "ID": 604,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func NewJSONLoggerConfig(hostURI string) *JSONLoggerConfig { return &JSONLoggerConfig{ netDial: net.DialTimeout, HostURI: hostURI, DialTimeout: 60 * time.Second, MessageDelimiter: []byte(\"\\n\"), FieldPrefix: \"\", UnprefixedFields: []string{}, LogLevelField: \"level\", MessageField: \"message\", TimestampField: \"timestamp\", LogLevelMap: map[gomol.LogLevel]interface{}{ gomol.LevelDebug: gomol.LevelDebug.String(), gomol.LevelInfo: gomol.LevelInfo.String(), gomol.LevelWarning: gomol.LevelWarning.String(), gomol.LevelError: gomol.LevelError.String(), gomol.LevelFatal: gomol.LevelFatal.String(), gomol.LevelNone: gomol.LevelNone.String(), }, JSONAttrs: map[string]interface{}{}, FailureQueueLength: 100, ReconnectBackoff: backoff.NewExponentialBackoff( 100*time.Millisecond, time.Minute, ), } }\n\n    ### Response: // NewJSONLoggerConfig creates a new configuration with default settings.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Binding<T> to(final Class<? extends T> implementation) { return underlying.to(implementation).asJava(); }\n\n    ### Response:",
        "ground_truth": "Bind this binding key to the given implementation class.\n\nThis class will be instantiated and injected by the injection framework.",
        "predict": " // NewJSONLoggerConfig creates a new configuration with default settings.\n\n    "
    },
    {
        "ID": 605,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Layer getOutputLayer() { Layer ret = getLayers()[getLayers().length - 1]; if (ret instanceof FrozenLayerWithBackprop) { ret = ((FrozenLayerWithBackprop) ret).getInsideLayer(); } return ret; }\n\n    ### Response: Get the output layer - i.e., the last layer in the netwok\n\n@return.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Binding<T> to(final Provider<? extends T> provider) { return underlying.to(provider).asJava(); }\n\n    ### Response:",
        "ground_truth": "Bind this binding key to the given provider instance.\n\nThis provider instance will be invoked to obtain the implementation for the key.",
        "predict": " Get the output layer - i.e., the last layer in the netwok\n\n@return.\n\n    "
    },
    {
        "ID": 606,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public ModelNode createNewDatasourceRequest(String name, int blockingTimeoutWaitMillis, String connectionUrlExpression, String driverName, String exceptionSorterClassName, int idleTimeoutMinutes, boolean jta, int minPoolSize, int maxPoolSize, int preparedStatementCacheSize, String securityDomain, String staleConnectionCheckerClassName, String transactionIsolation, String validConnectionCheckerClassName, boolean validateOnMatch, Map<String, String> connectionProperties) { String jndiName = \"java:jboss/datasources/\" + name; String dmrTemplate = \"\" // + \"{\" // + \"\\\"blocking-timeout-wait-millis\\\" => %dL \" // + \", \\\"connection-url\\\" => expression \\\"%s\\\" \" // + \", \\\"driver-name\\\" => \\\"%s\\\" \" // + \", \\\"exception-sorter-class-name\\\" => \\\"%s\\\" \" // + \", \\\"idle-timeout-minutes\\\" => %dL \" // + \", \\\"jndi-name\\\" => \\\"%s\\\" \" // + \", \\\"jta\\\" => %s \" // + \", \\\"min-pool-size\\\" => %d \" // + \", \\\"max-pool-size\\\" => %d \" // + \", \\\"prepared-statements-cache-size\\\" => %dL \" // + \", \\\"security-domain\\\" => \\\"%s\\\" \" // + \", \\\"stale-connection-checker-class-name\\\" => \\\"%s\\\" \" // + \", \\\"transaction-isolation\\\" => \\\"%s\\\" \" // + \", \\\"use-java-context\\\" => true \" // + \", \\\"valid-connection-checker-class-name\\\" => \\\"%s\\\" \" // + \", \\\"validate-on-match\\\" => %s \" // + \"}\"; String dmr = String.format(dmrTemplate, blockingTimeoutWaitMillis, connectionUrlExpression, driverName, exceptionSorterClassName, idleTimeoutMinutes, jndiName, jta, minPoolSize, maxPoolSize, preparedStatementCacheSize, securityDomain, staleConnectionCheckerClassName, transactionIsolation, validConnectionCheckerClassName, validateOnMatch); Address addr = Address.root().add(SUBSYSTEM, SUBSYSTEM_DATASOURCES, DATA_SOURCE, name); final ModelNode request1 = ModelNode.fromString(dmr); request1.get(OPERATION).set(ADD); request1.get(ADDRESS).set(addr.getAddressNode()); // if there are no conn properties, no need to create a batch request, there is only one ADD request to make if (connectionProperties == null || connectionProperties.size() == 0) { return request1; } // create a batch of requests - the first is the main one, the rest create each conn property ModelNode[] batch = new ModelNode[1 + connectionProperties.size()]; batch[0] = request1; int n = 1; for (Map.Entry<String, String> entry : connectionProperties.entrySet()) { addr = Address.root().add(SUBSYSTEM, SUBSYSTEM_DATASOURCES, DATA_SOURCE, name, CONNECTION_PROPERTIES, entry.getKey()); final ModelNode requestN = new ModelNode(); requestN.get(OPERATION).set(ADD); requestN.get(ADDRESS).set(addr.getAddressNode()); setPossibleExpression(requestN, VALUE, entry.getValue()); batch[n++] = requestN; } return createBatchRequest(batch); }\n\n    ### Response: Returns a ModelNode that can be used to create a datasource. Callers are free to tweak the datasource request\nthat is returned, if they so choose, before asking the client to execute the request.\n\n@param name the name of the datasource\n@param blockingTimeoutWaitMillis see datasource documentation for meaning of this setting\n@param connectionUrlExpression see datasource documentation for meaning of this setting\n@param driverName see datasource documentation for meaning of this setting\n@param exceptionSorterClassName see datasource documentation for meaning of this setting\n@param idleTimeoutMinutes see datasource documentation for meaning of this setting\n@param jta true if this DS should support transactions; false if not\n@param minPoolSize see datasource documentation for meaning of this setting\n@param maxPoolSize see datasource documentation for meaning of this setting\n@param preparedStatementCacheSize see datasource documentation for meaning of this setting\n@param securityDomain see datasource documentation for meaning of this setting\n@param staleConnectionCheckerClassName see datasource documentation for meaning of this setting\n@param transactionIsolation see datasource documentation for meaning of this setting\n@param validConnectionCheckerClassName see datasource documentation for meaning of this setting\n@param validateOnMatch see datasource documentation for meaning of this setting\n@param connectionProperties see datasource documentation for meaning of this setting\n\n@return the request that can be used to create the datasource.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public <A extends T> Binding<T> to(final Supplier<A> instance) { return underlying.to(new FromJavaSupplier<>(instance)).asJava(); }\n\n    ### Response:",
        "ground_truth": "Bind this binding key to the given instance.",
        "predict": " Returns a ModelNode that can be used to create a datasource. Callers are free to tweak the datasource request\nthat is returned, if they so choose, before asking the client to execute the request.\n\n@param name the name of the datasource\n@param blockingTimeoutWaitMillis see datasource documentation for meaning of this setting\n@param connectionUrlExpression see datasource documentation for meaning of this setting\n@param driverName see datasource documentation for meaning of this setting\n@param exceptionSorterClassName see datasource documentation for meaning of this setting\n@param idleTimeoutMinutes see datasource documentation for meaning of this setting\n@param jta true if this DS should support transactions; false if not\n@param minPoolSize see datasource documentation for meaning of this setting\n@param maxPoolSize see datasource documentation for meaning of this setting\n@param preparedStatementCacheSize see datasource documentation for meaning of this setting\n@param securityDomain see datasource documentation for meaning of this setting\n@param staleConnectionCheckerClassName see datasource documentation for meaning of this setting\n@param transactionIsolation see datasource documentation for meaning of this setting\n@param validConnectionCheckerClassName see datasource documentation for meaning of this setting\n@param validateOnMatch see datasource documentation for meaning of this setting\n@param connectionProperties see datasource documentation for meaning of this setting\n\n@return the request that can be used to create the datasource.\n\n    "
    },
    {
        "ID": 607,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (vm *VM) EvaluateSnippetStream(filename string, snippet string) (docs []string, formattedErr error) { output, err := vm.evaluateSnippet(filename, snippet, evalKindStream) if err != nil { return nil, errors.New(vm.ErrorFormatter.Format(err)) } docs = output.([]string) return }\n\n    ### Response: // EvaluateSnippetStream evaluates a string containing Jsonnet code to an array.\n// The array is returned as an array of JSON strings.\n//\n// The filename parameter is only used for error messages..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Binding<T> to(final BindingKey<? extends T> key) { return underlying.to(key.asScala()).asJava(); }\n\n    ### Response:",
        "ground_truth": "Bind this binding key to another binding key.",
        "predict": " // EvaluateSnippetStream evaluates a string containing Jsonnet code to an array.\n// The array is returned as an array of JSON strings.\n//\n// The filename parameter is only used for error messages..\n\n    "
    },
    {
        "ID": 608,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SuppressWarnings(\"unchecked\") public O withForwardedFieldsSecond(String... forwardedFieldsSecond) { if (this.udfSemantics == null || this.analyzedUdfSemantics) { // extract semantic properties from function annotations setSemanticProperties(extractSemanticAnnotationsFromUdf(getFunction().getClass())); } if (this.udfSemantics == null || this.analyzedUdfSemantics) { setSemanticProperties(new DualInputSemanticProperties()); SemanticPropUtil.getSemanticPropsDualFromString(this.udfSemantics, null, forwardedFieldsSecond, null, null, null, null, getInput1Type(), getInput2Type(), getResultType()); } else { if (udfWithForwardedFieldsSecondAnnotation(getFunction().getClass())) { // refuse semantic information as it would override the function annotation throw new SemanticProperties.InvalidSemanticAnnotationException(\"Forwarded field information \" + \"has already been added by a function annotation for the second input of this operator. \" + \"Cannot overwrite function annotations.\"); } else { SemanticPropUtil.getSemanticPropsDualFromString(this.udfSemantics, null, forwardedFieldsSecond, null, null, null, null, getInput1Type(), getInput2Type(), getResultType()); } } O returnType = (O) this; return returnType; }\n\n    ### Response: Adds semantic information about forwarded fields of the second input of the user-defined function.\nThe forwarded fields information declares fields which are never modified by the function and\nwhich are forwarded at the same position to the output or unchanged copied to another position in the output.\n\nFields that are forwarded at the same position are specified by their position.\nThe specified position must be valid for the input and output data type and have the same type.\nFor example withForwardedFieldsSecond(\"f2\") declares that the third field of a Java input tuple\nfrom the second input is copied to the third field of an output tuple.\n\nFields which are unchanged copied from the second input to another position in the output are declared\nby specifying the source field reference in the second input and the target field reference in the output.\n{@code withForwardedFieldsSecond(\"f0->f2\")} denotes that the first field of the second input Java tuple is\nunchanged copied to the third field of the Java output tuple. When using a wildcard (\"*\") ensure that\nthe number of declared fields and their types in second input and output type match.\n\nMultiple forwarded fields can be annotated in one ({@code withForwardedFieldsSecond(\"f2; f3->f0; f4\")})\nor separate Strings ({@code withForwardedFieldsSecond(\"f2\", \"f3->f0\", \"f4\")}).\nPlease refer to the JavaDoc of {@link org.apache.flink.api.common.functions.Function} or Flink's documentation for\ndetails on field references such as nested fields and wildcard.\n\nIt is not possible to override existing semantic information about forwarded fields of the second input which was\nfor example added by a {@link org.apache.flink.api.java.functions.FunctionAnnotation.ForwardedFieldsSecond} class annotation.\n\nNOTE: Adding semantic information for functions is optional!\nIf used correctly, semantic information can help the Flink optimizer to generate more efficient execution plans.\nHowever, incorrect semantic information can cause the optimizer to generate incorrect execution plans which compute wrong results!\nSo be careful when adding semantic information.\n\n\n@param forwardedFieldsSecond A list of forwarded field expressions for the second input of the function.\n@return This operator with annotated forwarded field information.\n\n@see org.apache.flink.api.java.functions.FunctionAnnotation\n@see org.apache.flink.api.java.functions.FunctionAnnotation.ForwardedFieldsSecond.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public <P extends Provider<? extends T>> Binding<T> toProvider(final Class<P> provider) { return underlying.toProvider(provider).asJava(); }\n\n    ### Response:",
        "ground_truth": "Bind this binding key to the given provider class.\n\nThe dependency injection framework will instantiate and inject this provider, and then\ninvoke its `get` method whenever an instance of the class is needed.",
        "predict": " Adds semantic information about forwarded fields of the second input of the user-defined function.\nThe forwarded fields information declares fields which are never modified by the function and\nwhich are forwarded at the same position to the output or unchanged copied to another position in the output.\n\nFields that are forwarded at the same position are specified by their position.\nThe specified position must be valid for the input and output data type and have the same type.\nFor example withForwardedFieldsSecond(\"f2\") declares that the third field of a Java input tuple\nfrom the second input is copied to the third field of an output tuple.\n\nFields which are unchanged copied from the second input to another position in the output are declared\nby specifying the source field reference in the second input and the target field reference in the output.\n{@code withForwardedFieldsSecond(\"f0->f2\")} denotes that the first field of the second input Java tuple is\nunchanged copied to the third field of the Java output tuple. When using a wildcard (\"*\") ensure that\nthe number of declared fields and their types in second input and output type match.\n\nMultiple forwarded fields can be annotated in one ({@code withForwardedFieldsSecond(\"f2; f3->f0; f4\")})\nor separate Strings ({@code withForwardedFieldsSecond(\"f2\", \"f3->f0\", \"f4\")}).\nPlease refer to the JavaDoc of {@link org.apache.flink.api.common.functions.Function} or Flink's documentation for\ndetails on field references such as nested fields and wildcard.\n\nIt is not possible to override existing semantic information about forwarded fields of the second input which was\nfor example added by a {@link org.apache.flink.api.java.functions.FunctionAnnotation.ForwardedFieldsSecond} class annotation.\n\nNOTE: Adding semantic information for functions is optional!\nIf used correctly, semantic information can help the Flink optimizer to generate more efficient execution plans.\nHowever, incorrect semantic information can cause the optimizer to generate incorrect execution plans which compute wrong results!\nSo be careful when adding semantic information.\n\n\n@param forwardedFieldsSecond A list of forwarded field expressions for the second input of the function.\n@return This operator with annotated forwarded field information.\n\n@see org.apache.flink.api.java.functions.FunctionAnnotation\n@see org.apache.flink.api.java.functions.FunctionAnnotation.ForwardedFieldsSecond.\n\n    "
    },
    {
        "ID": 609,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function FABridge__bridgeInitialized(bridgeName) { var objects = document.getElementsByTagName(\"object\"); var ol = objects.length; var activeObjects = []; if (ol > 0) { for (var i = 0; i < ol; i++) { if (typeof objects[i].SetVariable != \"undefined\") { activeObjects[activeObjects.length] = objects[i]; } } } var embeds = document.getElementsByTagName(\"embed\"); var el = embeds.length; var activeEmbeds = []; if (el > 0) { for (var j = 0; j < el; j++) { if (typeof embeds[j].SetVariable != \"undefined\") { activeEmbeds[activeEmbeds.length] = embeds[j]; } } } var aol = activeObjects.length; var ael = activeEmbeds.length; var searchStr = \"bridgeName=\"+ bridgeName; if ((aol == 1 && !ael) || (aol == 1 && ael == 1)) { FABridge.attachBridge(activeObjects[0], bridgeName); } else if (ael == 1 && !aol) { FABridge.attachBridge(activeEmbeds[0], bridgeName); } else { var flash_found = false; if (aol > 1) { for (var k = 0; k < aol; k++) { var params = activeObjects[k].childNodes; for (var l = 0; l < params.length; l++) { var param = params[l]; if (param.nodeType == 1 && param.tagName.toLowerCase() == \"param\" && param[\"name\"].toLowerCase() == \"flashvars\" && param[\"value\"].indexOf(searchStr) >= 0) { FABridge.attachBridge(activeObjects[k], bridgeName); flash_found = true; break; } } if (flash_found) { break; } } } if (!flash_found && ael > 1) { for (var m = 0; m < ael; m++) { var flashVars = activeEmbeds[m].attributes.getNamedItem(\"flashVars\").nodeValue; if (flashVars.indexOf(searchStr) >= 0) { FABridge.attachBridge(activeEmbeds[m], bridgeName); break; } } } } return true; }\n\n    ### Response: updated for changes to SWFObject2.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static List<Lang> availables(Application app) { play.api.i18n.Langs langs = app.injector().instanceOf(play.api.i18n.Langs.class); List<play.api.i18n.Lang> availableLangs = Scala.asJava(langs.availables()); return availableLangs.stream().map(Lang::new).collect(toList()); }\n\n    ### Response:",
        "ground_truth": "Retrieve Lang availables from the application configuration.\n\n@param app the current application.\n@return the list of available Lang.",
        "predict": " updated for changes to SWFObject2.\n\n    "
    },
    {
        "ID": 610,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function getParentSku(SKU $sku) { $static = &drupal_static(__FUNCTION__, []); $langcode = $sku->language()->getId(); $sku_string = $sku->getSku(); if (isset($static[$langcode], $static[$langcode][$sku_string])) { return $static[$langcode][$sku_string]; } // Initialise with empty value. $static[$langcode][$sku_string] = NULL; $parent_skus = array_keys($this->getAllParentSkus($sku_string)); if (empty($parent_skus)) { return NULL; } if (count($parent_skus) > 1) { \\Drupal::logger('acm_sku')->warning( 'Multiple parents found for SKU: @sku, parents: @parents', [ '@parents' => implode(',', $parent_skus), '@sku' => $sku_string, ] ); } foreach ($parent_skus as $parent_sku) { $parent = SKU::loadFromSku($parent_sku, $langcode); if ($parent instanceof SKU) { $node = $this->getDisplayNode($parent, FALSE, FALSE); if ($node instanceof Node) { $static[$langcode][$sku_string] = $parent; break; } } } return $static[$langcode][$sku_string]; }\n\n    ### Response: Get parent of current product.\n\n@param \\Drupal\\acm_sku\\Entity\\SKU $sku\nCurrent product.\n\n@return \\Drupal\\acm_sku\\Entity\\SKU|null\nParent product or null if not found.\n\n@throws \\Exception.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Lang preferred(Application app, List<Lang> availableLangs) { play.api.i18n.Langs langs = app.injector().instanceOf(play.api.i18n.Langs.class); Stream<Lang> stream = availableLangs.stream(); List<play.api.i18n.Lang> langSeq = stream.map(l -> new play.api.i18n.Lang(l.toLocale())).collect(toList()); return new Lang(langs.preferred(Scala.toSeq(langSeq))); }\n\n    ### Response:",
        "ground_truth": "Guess the preferred lang in the langs set passed as argument. The first Lang that matches an\navailable Lang wins, otherwise returns the first Lang available in this application.\n\n@param app the currept application\n@param availableLangs the set of langs from which to guess the preferred\n@return the preferred lang.",
        "predict": " Get parent of current product.\n\n@param \\Drupal\\acm_sku\\Entity\\SKU $sku\nCurrent product.\n\n@return \\Drupal\\acm_sku\\Entity\\SKU|null\nParent product or null if not found.\n\n@throws \\Exception.\n\n    "
    },
    {
        "ID": 611,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Element<T> find( T object ) { Element<T> e = first; while( e != null ) { if( e.object == object ) { return e; } e = e.next; } return null; }\n\n    ### Response: Returns the first element which contains 'object' starting from the head.\n@param object Object which is being searched for\n@return First element which contains object or null if none can be found.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static play.api.db.evolutions.EvolutionsReader fromMap( Map<String, List<Evolution>> evolutions) { return new SimpleEvolutionsReader(evolutions); }\n\n    ### Response:",
        "ground_truth": "Create an evolutions reader based on a simple map of database names to evolutions.\n\n@param evolutions The map of database names to evolutions.\n@return the evolutions reader.",
        "predict": " Returns the first element which contains 'object' starting from the head.\n@param object Object which is being searched for\n@return First element which contains object or null if none can be found.\n\n    "
    },
    {
        "ID": 612,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def getMaintenanceTypes(self): \"\"\" Return the current list of maintenance types \"\"\" types = [('Preventive',safe_unicode(_('Preventive')).encode('utf-8')), ('Repair', safe_unicode(_('Repair')).encode('utf-8')), ('Enhancement', safe_unicode(_('Enhancement')).encode('utf-8'))] return DisplayList(types)\n\n    ### Response: Return the current list of maintenance types.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static play.api.db.evolutions.EvolutionsReader forDefault(Evolution... evolutions) { Map<String, List<Evolution>> map = new HashMap<String, List<Evolution>>(); map.put(\"default\", Arrays.asList(evolutions)); return fromMap(map); }\n\n    ### Response:",
        "ground_truth": "Create an evolutions reader for the default database from a list of evolutions.\n\n@param evolutions The list of evolutions.\n@return the evolutions reader.",
        "predict": " Return the current list of maintenance types.\n\n    "
    },
    {
        "ID": 613,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function move($fromPath, $toPath, $force = false) { $args = array(); if ($force) { $args[] = '--force'; } $args[] = $this->resolveLocalPath($fromPath); $args[] = $this->resolveLocalPath($toPath); /** @var $result CallResult */ $result = $this->getSvn()->{'move'}($this->getRepositoryPath(), $args); $result->assertSuccess(sprintf('Cannot move \"%s\" to \"%s\" in \"%s\"', $fromPath, $toPath, $this->getRepositoryPath() )); }\n\n    ### Response: Renames a file but does not commit the changes\n\n@param   string  $fromPath   The source path\n@param   string  $toPath     The destination path\n@param   boolean $force      True to continue even though SVN reports a possible conflict.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void cleanupEvolutions(Database database, boolean autocommit, String schema) { DatabaseEvolutions evolutions = new DatabaseEvolutions(database.asScala(), schema); evolutions.evolve(evolutions.resetScripts(), autocommit); }\n\n    ### Response:",
        "ground_truth": "Cleanup evolutions for the given database.\n\nThis will run the down scripts for all the applied evolutions.\n\n@param database The database to apply the evolutions to.\n@param autocommit Whether autocommit should be used.\n@param schema The schema where all the play evolution tables are saved in",
        "predict": " Renames a file but does not commit the changes\n\n@param   string  $fromPath   The source path\n@param   string  $toPath     The destination path\n@param   boolean $force      True to continue even though SVN reports a possible conflict.\n\n    "
    },
    {
        "ID": 614,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (e *eventEmitter) Once(ev EventType, h EventHandler) { e.addHandlerToMap(ev, h, e.once) }\n\n    ### Response: // Once adds a handler that's executed once when an event is emitted..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public GuiceApplicationBuilder withConfigLoader(Function<Environment, Config> load) { return newBuilder( delegate.loadConfig( func( (play.api.Environment env) -> new play.api.Configuration(load.apply(new Environment(env)))))); }\n\n    ### Response:",
        "ground_truth": "Set the initial configuration loader. Overrides the default or any previously configured\nvalues.\n\n@param load the configuration loader\n@return the configured application builder",
        "predict": " // Once adds a handler that's executed once when an event is emitted..\n\n    "
    },
    {
        "ID": 615,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function main() { // Check if all required data is present. $this->checkRequirements(); if ($this->_drushDir == '/sites/all/drush') { $drushDir = $this->_siteRoot.$this->_drushDir; } else { $drushDir = $this->_drushDir; } $aliasesFile = $drushDir.'/aliases.drushrc.php'; $aliases = array( 'default' => array( 'uri' => $this->_siteUrl, 'root' => $this->_siteRoot, ), 'docker' => array( 'uri' => $this->_siteUrl, 'root' => $this->_siteRoot, ), ); if (empty($this->_aliasName)) { $sites = new Finder(); $sites ->directories() ->depth('== 0') ->exclude('all') ->in($this->_siteRoot.'/sites'); foreach ($sites as $site) { $aliases[$site->getBasename()] = array( 'uri' => $this->_siteUrl, 'root' => $aliases['default']['root'], ); } } else { $aliases += $this->loadAliases($aliasesFile); $aliases[$this->_aliasName] = array( 'uri' => $this->_siteUrl, 'root' => $aliases['default']['root'], ); }//end if $aliasesArray = \"<?php \\n\\n\\$aliases = \".var_export($aliases, true).\";\"; if (file_put_contents($aliasesFile, $aliasesArray)) { $this->log( \"Succesfully wrote aliases to file '\".$aliasesFile.\"'\", Project::MSG_INFO ); } else { $this->log( \"Was unable to write aliases to file '\".$aliasesFile.\"'\", Project::MSG_WARN ); } }\n\n    ### Response: Generates an aliases.drushrc.php file.\n\nEither generates a file for:\n- all sites in the sites directory.\n- a single site to be added to the aliases file (appending).\n\n@return void.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public GuiceApplicationBuilder withModuleLoader( BiFunction<Environment, Config, List<GuiceableModule>> loader) { return newBuilder( delegate.load( func( (play.api.Environment env, play.api.Configuration conf) -> Scala.toSeq(loader.apply(new Environment(env), conf.underlying()))))); }\n\n    ### Response:",
        "ground_truth": "Set the module loader. Overrides the default or any previously configured values.\n\n@param loader the configuration\n@return the configured application builder",
        "predict": " Generates an aliases.drushrc.php file.\n\nEither generates a file for:\n- all sites in the sites directory.\n- a single site to be added to the aliases file (appending).\n\n@return void.\n\n    "
    },
    {
        "ID": 616,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def make_var(self, op_name, name, shape): '''Creates a new TensorFlow variable.''' if op_name in self.weights and name in self.weights[op_name]: if self.verbose: print(\"Using: {} {}\".format(op_name, name)) initializer = tf.constant(self.weights[op_name][name], shape=shape) return tf.get_variable(name, initializer=initializer, trainable=self.trainable) return tf.get_variable(name, shape, trainable=self.trainable)\n\n    ### Response: Creates a new TensorFlow variable..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public GuiceApplicationBuilder load(GuiceableModule... modules) { return newBuilder(delegate.load(Scala.varargs(modules))); }\n\n    ### Response:",
        "ground_truth": "Override the module loader with the given guiceable modules.\n\n@param modules the set of overriding modules\n@return an application builder that incorporates the overrides",
        "predict": " Creates a new TensorFlow variable..\n\n    "
    },
    {
        "ID": 617,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (s Int64) List() []int64 { res := make(sortableSliceOfInt64, 0, len(s)) for key := range s { res = append(res, key) } sort.Sort(res) return []int64(res) }\n\n    ### Response: // List returns the contents as a sorted int64 slice..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public GuiceApplicationBuilder load(com.google.inject.Module... modules) { return load(Guiceable.modules(modules)); }\n\n    ### Response:",
        "ground_truth": "Override the module loader with the given Guice modules.\n\n@param modules the set of overriding modules\n@return an application builder that incorporates the overrides",
        "predict": " // List returns the contents as a sorted int64 slice..\n\n    "
    },
    {
        "ID": 618,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function getOpt($key, $default = false) { return (isset($this->opts[$key])) ? $this->opts[$key] : $default; }\n\n    ### Response: Getter for those additional options that a given command may use\n\n@param   string  $key      Option name to retieve value for\n@param   mixed   $default  Default value for option\n@return  void.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public GuiceApplicationBuilder load(play.api.inject.Module... modules) { return load(Guiceable.modules(modules)); }\n\n    ### Response:",
        "ground_truth": "Override the module loader with the given Play modules.\n\n@param modules the set of overriding modules\n@return an application builder that incorporates the overrides",
        "predict": " Getter for those additional options that a given command may use\n\n@param   string  $key      Option name to retieve value for\n@param   mixed   $default  Default value for option\n@return  void.\n\n    "
    },
    {
        "ID": 619,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (m *Model) Destroy(args DestroyModelParams) (err error) { defer errors.DeferredAnnotatef(&err, \"failed to destroy model\") buildTxn := func(attempt int) ([]txn.Op, error) { // On the first attempt, we assume memory state is recent // enough to try using... if attempt != 0 { // ...but on subsequent attempts, we read fresh environ // state from the DB. Note that we do *not* refresh the // original `m` itself, as detailed in doc/hacking-state.txt if attempt == 1 { mCopy := *m m = &mCopy } if err := m.Refresh(); err != nil { return nil, errors.Trace(err) } } ops, err := m.destroyOps(args, false, false) if err == errModelNotAlive { return nil, jujutxn.ErrNoOperations } else if err != nil { return nil, errors.Trace(err) } return ops, nil } return m.st.db().Run(buildTxn) }\n\n    ### Response: // Destroy sets the models's lifecycle to Dying, preventing\n// addition of applications or machines to state. If called on\n// an empty hosted model, the lifecycle will be advanced\n// straight to Dead..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public GuiceApplicationBuilder load(play.api.inject.Binding<?>... bindings) { return load(Guiceable.bindings(bindings)); }\n\n    ### Response:",
        "ground_truth": "Override the module loader with the given Play bindings.\n\n@param bindings the set of binding override\n@return an application builder that incorporates the overrides",
        "predict": " // Destroy sets the models's lifecycle to Dying, preventing\n// addition of applications or machines to state. If called on\n// an empty hosted model, the lifecycle will be advanced\n// straight to Dead..\n\n    "
    },
    {
        "ID": 620,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func GetKVMNetArgs(nds []NetDescriber) ([]string, error) { var lkvmArgs []string for _, nd := range nds { lkvmArgs = append(lkvmArgs, \"--network\") lkvmArg := fmt.Sprintf(\"mode=tap,tapif=%s,host_ip=%s,guest_ip=%s\", nd.IfName(), nd.Gateway(), nd.GuestIP()) lkvmArgs = append(lkvmArgs, lkvmArg) } return lkvmArgs, nil }\n\n    ### Response: // GetKVMNetArgs returns additional arguments that need to be passed\n// to lkvm tool to configure networks properly.\n// Logic is based on Network configuration extracted from Networking struct\n// and essentially from activeNets that expose netDescriber behavior.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected GuiceApplicationBuilder newBuilder( play.api.inject.guice.GuiceApplicationBuilder builder) { return new GuiceApplicationBuilder(builder); }\n\n    ### Response:",
        "ground_truth": "Implementation of Self creation for GuiceBuilder.\n\n@return the application builder",
        "predict": " // GetKVMNetArgs returns additional arguments that need to be passed\n// to lkvm tool to configure networks properly.\n// Logic is based on Network configuration extracted from Networking struct\n// and essentially from activeNets that expose netDescriber behavior.\n\n    "
    },
    {
        "ID": 621,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _disconnect_temporarily(self, port_v, target=True): \"\"\"Removes a connection between the current connection and the given port :param rafcon.gui.mygaphas.items.ports.PortView port_v: The port that was connected :param bool target: Whether the connection origin or target should be disconnected \"\"\" if target: handle = self._connection_v.to_handle() else: handle = self._connection_v.from_handle() port_v.remove_connected_handle(handle) port_v.tmp_disconnect() self._connection_v.reset_port_for_handle(handle) # Redraw state of port to make hover state visible self._redraw_port(port_v)\n\n    ### Response: Removes a connection between the current connection and the given port\n\n        :param rafcon.gui.mygaphas.items.ports.PortView port_v: The port that was connected\n        :param bool target: Whether the connection origin or target should be disconnected.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String encode(Cookie cookie) { if (cookie == null) { throw new NullPointerException(\"cookie\"); } StringBuilder buf = new StringBuilder(); encode(buf, cookie); return stripTrailingSeparator(buf); }\n\n    ### Response:",
        "ground_truth": "Encodes the specified cookie into a Cookie header value.\n\n@param cookie specified the cookie\n@return a Rfc6265 style Cookie header value",
        "predict": " Removes a connection between the current connection and the given port\n\n        :param rafcon.gui.mygaphas.items.ports.PortView port_v: The port that was connected\n        :param bool target: Whether the connection origin or target should be disconnected.\n\n    "
    },
    {
        "ID": 622,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (term Range) Error() error { if term.Start.IsZero() || term.End.IsZero() { return nil } // One day only is allowed if term.Start.After(term.End) { return fmt.Errorf(\"Start date cannot be after the end date\") } return nil }\n\n    ### Response: // Error returns an error if there is both a start and end date and the given\n// start date is not before the end date..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public EntityManager em() { Deque<EntityManager> ems = this.emStack(true); if (ems.isEmpty()) { Http.Context.safeCurrent() .map( ctx -> { throw new RuntimeException( \"No EntityManager found in the context. Try to annotate your action method with @play.db.jpa.Transactional\"); }) .orElseGet( () -> { throw new RuntimeException( \"No EntityManager bound to this thread. Try wrapping this call in JPAApi.withTransaction, or ensure that the HTTP context is setup on this thread.\"); }); } return ems.peekFirst(); }\n\n    ### Response:",
        "ground_truth": "Get the default EntityManager for this thread.\n\n@throws RuntimeException if no EntityManager is bound to the current Http.Context or the\ncurrent Thread.\n@return the EntityManager",
        "predict": " // Error returns an error if there is both a start and end date and the given\n// start date is not before the end date..\n\n    "
    },
    {
        "ID": 623,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _merge_csv_section(sections, pc, csvs): \"\"\" Add csv data to all paleo data tables :param dict sections: Metadata :return dict sections: Metadata \"\"\" logger_csvs.info(\"enter merge_csv_section\") try: # Loop through each table_data in paleoData for _name, _section in sections.items(): if \"measurementTable\" in _section: sections[_name][\"measurementTable\"] = _merge_csv_table(_section[\"measurementTable\"], pc, csvs) if \"model\" in _section: sections[_name][\"model\"] = _merge_csv_model(_section[\"model\"], pc, csvs) except Exception as e: print(\"Error: There was an error merging CSV data into the metadata \") logger_csvs.error(\"merge_csv_section: {}\".format(e)) logger_csvs.info(\"exit merge_csv_section\") return sections\n\n    ### Response: Add csv data to all paleo data tables\n\n    :param dict sections: Metadata\n    :return dict sections: Metadata.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SuppressWarnings(\"unchecked\") public Deque<EntityManager> emStack(boolean threadLocalFallback) { return Http.Context.safeCurrent() .map( context -> { Object emsObject = context.args.get(CURRENT_ENTITY_MANAGER); if (emsObject != null) { return (Deque<EntityManager>) emsObject; } else { Deque<EntityManager> ems = new ArrayDeque<>(); context.args.put(CURRENT_ENTITY_MANAGER, ems); return ems; } }) .orElseGet( () -> { // Not a web request if (threadLocalFallback) { return this.get(); } else { throw new RuntimeException( \"No Http.Context is present. If you want to invoke this method outside of a HTTP request, you need to wrap the call with JPA.withTransaction instead.\"); } }); }\n\n    ### Response:",
        "ground_truth": "Get the EntityManager stack.\n\n@param threadLocalFallback if true, fall back to a ThreadLocal queue of entity managers if no\nHTTP.Context object is found.\n@return the queue of entity managers.",
        "predict": " Add csv data to all paleo data tables\n\n    :param dict sections: Metadata\n    :return dict sections: Metadata.\n\n    "
    },
    {
        "ID": 624,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def get_file_flags(flags): \"\"\"Show flag names and handle dict size. \"\"\" res = render_flags(flags & ~rf.RAR_FILE_DICTMASK, file_bits) xf = (flags & rf.RAR_FILE_DICTMASK) >> 5 res += \",\" + file_parms[xf] return res\n\n    ### Response: Show flag names and handle dict size..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    void pushOrPopEm(EntityManager em, boolean threadLocalFallback) { Deque<EntityManager> ems = this.emStack(threadLocalFallback); if (em != null) { ems.push(em); } else { if (ems.isEmpty()) { throw new IllegalStateException(\"Tried to remove the EntityManager, but none was set.\"); } ems.pop(); } }\n\n    ### Response:",
        "ground_truth": "Pushes or pops the EntityManager stack depending on the value of the em argument. If em is\nnull, then the current EntityManager is popped. If em is non-null, then em is pushed onto the\nstack and becomes the current EntityManager.\n\n@param em the entity manager to push, if null then will pop one off the stack.\n@param threadLocalFallback if true, fall back to a ThreadLocal queue of entity managers if no\nHTTP.Context object is found.",
        "predict": " Show flag names and handle dict size..\n\n    "
    },
    {
        "ID": 625,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public void flush() { ObjectMapper mapper = ObjectMapperFactory.getObjectMapper(); String dtoDump; URI incidentURI; try { dtoDump = mapper.writeValueAsString(new IncidentV2DTO(this)); } catch (JsonProcessingException ex) { logger.error(\"Incident registration failed, could not map \" + \"incident report to json string. Exception: {}\", ex.getMessage()); return; } // Sanity check... Preconditions.checkNotNull(dtoDump); try { URIBuilder uriBuilder = new URIBuilder(this.serverUrl); uriBuilder.setPath(SF_PATH_CREATE_INCIDENT_V2); incidentURI = uriBuilder.build(); } catch (URISyntaxException ex) { logger.error(\"Incident registration failed, \" + \"URI could not be built. Exception: {}\", ex.getMessage()); return; } HttpPost postRequest = new HttpPost(incidentURI); postRequest.setHeader(SFSession.SF_HEADER_AUTHORIZATION, SFSession.SF_HEADER_SNOWFLAKE_AUTHTYPE + \" \" + SFSession.SF_HEADER_TOKEN_TAG + \"=\\\"\" + this.sessionToken + \"\\\"\"); // Compress the payload. ByteArrayEntity input = null; try { ByteArrayOutputStream baos = new ByteArrayOutputStream(); GZIPOutputStream gzos = new GZIPOutputStream(baos); byte[] bytes = dtoDump.getBytes(StandardCharsets.UTF_8); gzos.write(bytes); gzos.finish(); input = new ByteArrayEntity(baos.toByteArray()); input.setContentType(\"application/json\"); } catch (IOException exc) { logger.debug(\"Incident registration failed, could not compress\" + \" payload. Exception: {}\", exc.getMessage()); } postRequest.setEntity(input); postRequest.addHeader(\"content-encoding\", \"gzip\"); try { String response = HttpUtil.executeRequest(postRequest, 1000, 0, null); logger.debug(\"Incident registration was successful. Response: '{}'\", response); } catch (Exception ex) { // No much we can do here besides complain. logger.error( \"Incident registration request failed, exception: {}\", ex.getMessage()); } }\n\n    ### Response: Sends incident to GS to log.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static <In, FlowIn, Out> Flow<In, Out, ?> bypassWith( Function<In, F.Either<FlowIn, Out>> splitter, Flow<FlowIn, Out, ?> flow) { return bypassWith( Flow.<In>create().map(splitter::apply), play.api.libs.streams.AkkaStreams.onlyFirstCanFinishMerge(2), flow); }\n\n    ### Response:",
        "ground_truth": "Bypass the given flow using the given splitter function.\n\nIf the splitter function returns Left, they will go through the flow. If it returns Right,\nthey will bypass the flow.\n\nUses onlyFirstCanFinishMerge(2) by default.\n\n@param  the In type parameter for Flow\n@param  the FlowIn type parameter for the left branch in Either.\n@param  the Out type parameter for Flow\n@param flow the original flow\n@param splitter the splitter function to use\n@return the flow with a bypass.",
        "predict": " Sends incident to GS to log.\n\n    "
    },
    {
        "ID": 626,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def run_mhc_gene_assessment(job, rsem_files, rna_haplotype, univ_options, reports_options): \"\"\" A wrapper for assess_mhc_genes. :param dict rsem_files: Results from running rsem :param str rna_haplotype: The job store id for the rna haplotype file :param dict univ_options: Dict of universal options used by almost all tools :param dict reports_options: Options specific to reporting modules :return: The results of running assess_mhc_genes :rtype: toil.fileStore.FileID \"\"\" return job.addChildJobFn(assess_mhc_genes, rsem_files['rsem.genes.results'], rna_haplotype, univ_options, reports_options).rv()\n\n    ### Response: A wrapper for assess_mhc_genes.\n\n    :param dict rsem_files: Results from running rsem\n    :param str rna_haplotype: The job store id for the rna haplotype file\n    :param dict univ_options: Dict of universal options used by almost all tools\n    :param dict reports_options: Options specific to reporting modules\n    :return: The results of running assess_mhc_genes\n    :rtype: toil.fileStore.FileID.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static <In, FlowIn, Out> Flow<In, Out, ?> bypassWith( Flow<In, F.Either<FlowIn, Out>, ?> splitter, Graph<UniformFanInShape<Out, Out>, ?> mergeStrategy, Flow<FlowIn, Out, ?> flow) { return splitter.via( Flow.fromGraph( GraphDSL.<FlowShape<F.Either<FlowIn, Out>, Out>>create( builder -> { // Eager cancel must be true so that if the flow cancels, that will be propagated // upstream. // However, that means the bypasser must block cancel, since when this flow // finishes, the merge // will result in a cancel flowing up through the bypasser, which could lead to // dropped messages. // Using scaladsl here because of https://github.com/akka/akka/issues/18384 UniformFanOutShape<F.Either<FlowIn, Out>, F.Either<FlowIn, Out>> broadcast = builder.add(Broadcast.create(2, true)); UniformFanInShape<Out, Out> merge = builder.add(mergeStrategy); Flow<F.Either<FlowIn, Out>, FlowIn, ?> collectIn = Flow.<F.Either<FlowIn, Out>>create() .collect( Scala.partialFunction( x -> { if (x.left.isPresent()) { return x.left.get(); } else { throw Scala.noMatch(); } })); Flow<F.Either<FlowIn, Out>, Out, ?> collectOut = Flow.<F.Either<FlowIn, Out>>create() .collect( Scala.partialFunction( x -> { if (x.right.isPresent()) { return x.right.get(); } else { throw Scala.noMatch(); } })); Flow<F.Either<FlowIn, Out>, F.Either<FlowIn, Out>, ?> blockCancel = play.api.libs.streams.AkkaStreams .<F.Either<FlowIn, Out>>ignoreAfterCancellation() .asJava(); // Normal flow builder .from(broadcast.out(0)) .via(builder.add(collectIn)) .via(builder.add(flow)) .toInlet(merge.in(0)); // Bypass flow, need to ignore downstream finish builder .from(broadcast.out(1)) .via(builder.add(blockCancel)) .via(builder.add(collectOut)) .toInlet(merge.in(1)); return new FlowShape<>(broadcast.in(), merge.out()); }))); }\n\n    ### Response:",
        "ground_truth": "Using the given splitter flow, allow messages to bypass a flow.\n\nIf the splitter flow produces Left, they will be fed into the flow. If it produces Right,\nthey will bypass the flow.\n\n@param  the In type parameter for Flow\n@param  the FlowIn type parameter for the left branch in Either.\n@param  the Out type parameter for Flow.\n@param flow the original flow.\n@param splitter the splitter function.\n@param mergeStrategy the merge strategy (onlyFirstCanFinishMerge, ignoreAfterFinish,\nignoreAfterCancellation)\n@return the flow with a bypass.",
        "predict": " A wrapper for assess_mhc_genes.\n\n    :param dict rsem_files: Results from running rsem\n    :param str rna_haplotype: The job store id for the rna haplotype file\n    :param dict univ_options: Dict of universal options used by almost all tools\n    :param dict reports_options: Options specific to reporting modules\n    :return: The results of running assess_mhc_genes\n    :rtype: toil.fileStore.FileID.\n\n    "
    },
    {
        "ID": 627,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function destroy($id) { $modelName = $this->getModelName(); $nodeField = $modelName::findOrFail($id); $nodeField->delete(); $this->builderService->destroyField( $nodeField->getName(), $nodeField->nodeType->getName(), $nodeField->nodeType ); return $nodeField; }\n\n    ### Response: Destroys a node field\n\n@param int $id\n@return NodeFieldContract.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static <In, Out> Flow<In, Out, ?> actorRef( Function<ActorRef, Props> props, int bufferSize, OverflowStrategy overflowStrategy, ActorRefFactory factory, Materializer mat) { return play.api.libs.streams.ActorFlow.<In, Out>actorRef( new AbstractFunction1<ActorRef, Props>() { @Override public Props apply(ActorRef v1) { return props.apply(v1); } }, bufferSize, overflowStrategy, factory, mat) .asJava(); }\n\n    ### Response:",
        "ground_truth": "Create a flow that is handled by an actor.\n\nMessages can be sent downstream by sending them to the actor passed into the props function.\nThis actor meets the contract of the actor returned by {@link\nakka.stream.javadsl.Source#actorRef}.\n\nThe props function should return the props for an actor to handle the flow. This actor will\nbe created using the passed in {@link akka.actor.ActorRefFactory}. Each message received will\nbe sent to the actor - there is no back pressure, if the actor is unable to process the\nmessages, they will queue up in the actors mailbox. The upstream can be cancelled by the actor\nterminating itself.\n\n@param  the In type parameter for a Flow\n@param  the Out type parameter for a Flow\n@param props A function that creates the props for actor to handle the flow.\n@param bufferSize The maximum number of elements to buffer.\n@param overflowStrategy The strategy for how to handle a buffer overflow.\n@param factory The Actor Factory used to create the actor to handle the flow - for example, an\nActorSystem.\n@param mat The materializer to materialize the flow.\n@return the flow itself.",
        "predict": " Destroys a node field\n\n@param int $id\n@return NodeFieldContract.\n\n    "
    },
    {
        "ID": 628,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function(node, listener) { var observer = new MutationObserver(function(mutations) { listener.call(this, observer, mutations); observer.disconnect(); }.bind(this)); observer.observe(node, {childList: true, subtree: true}); }\n\n    ### Response: Register a one-time callback when a child-list or sub-tree mutation\noccurs on node.\n\nFor persistent callbacks, call onMutation from your listener.\n\n@method onMutation\n@param Node {Node} node Node to watch for mutations.\n@param Function {Function} listener Function to call on mutation. The function is invoked as `listener.call(this, observer, mutations);` where `observer` is the MutationObserver that triggered the notification, and `mutations` is the native mutation list..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private List<Object> convertErrorArguments(Object[] arguments) { if (arguments == null) { return Collections.emptyList(); } List<Object> converted = Arrays.stream(arguments) .filter( arg -> !(arg instanceof org.springframework.context.support.DefaultMessageSourceResolvable)) .collect(Collectors.toList()); return Collections.unmodifiableList(converted); }\n\n    ### Response:",
        "ground_truth": "Convert the error arguments.\n\n@param arguments The arguments to convert.\n@return The converted arguments.",
        "predict": " Register a one-time callback when a child-list or sub-tree mutation\noccurs on node.\n\nFor persistent callbacks, call onMutation from your listener.\n\n@method onMutation\n@param Node {Node} node Node to watch for mutations.\n@param Function {Function} listener Function to call on mutation. The function is invoked as `listener.call(this, observer, mutations);` where `observer` is the MutationObserver that triggered the notification, and `mutations` is the native mutation list..\n\n    "
    },
    {
        "ID": 629,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function findAll() { // convert to criteria. $criteria = call_user_func_array(array($this, 'argsToCriteria'), func_get_args()); // logical delete ? $schema = $this->getSchema(); if ($schema->hasColumn('active')) { $criteria->where('active = ?', 1); } // to SQL. $sql = $criteria->toSQL(); // query $sth = $this->query($sql, $criteria->getParams(), Database::TARGET_SLAVE); // to entities $entities = new Entities($this); $entities->setCriteria($criteria); foreach ($sth->fetchAll(Connection::FETCH_ASSOC) as $row) { $entities->add($this->build($row, true)); } return $entities; }\n\n    ### Response: find by criteria.\nreturn all entities.\n\n@return  Samurai\\Onikiri\\Entity.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Form<T> fill(T value) { if (value == null) { throw new RuntimeException(\"Cannot fill a form with a null value\"); } return new Form<>( rootName, backedType, new HashMap<>(), new HashMap<>(), new ArrayList<>(), Optional.ofNullable(value), groups, messagesApi, formatters, validatorFactory, config, lang, directFieldAccess); }\n\n    ### Response:",
        "ground_truth": "Populates this form with an existing value, used for edit forms.\n\n@param value existing value of type T used to fill this form\n@return a copy of this form filled with the new data",
        "predict": " find by criteria.\nreturn all entities.\n\n@return  Samurai\\Onikiri\\Entity.\n\n    "
    },
    {
        "ID": 630,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def to_insert(table, d): \"\"\"Generate an insert statement using the given table and dictionary. Args: table (str): table name d (dict): dictionary with column names as keys and values as values. Returns: tuple of statement and arguments >>> to_insert('doc.foobar', {'name': 'Marvin'}) ('insert into doc.foobar (\"name\") values (?)', ['Marvin']) \"\"\" columns = [] args = [] for key, val in d.items(): columns.append('\"{}\"'.format(key)) args.append(val) stmt = 'insert into {table} ({columns}) values ({params})'.format( table=table, columns=', '.join(columns), params=', '.join(['?'] * len(columns))) return (stmt, args)\n\n    ### Response: Generate an insert statement using the given table and dictionary.\n\n    Args:\n        table (str): table name\n        d (dict): dictionary with column names as keys and values as values.\n    Returns:\n        tuple of statement and arguments\n\n    >>> to_insert('doc.foobar', {'name': 'Marvin'})\n    ('insert into doc.foobar (\"name\") values (?)', ['Marvin']).\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public List<ValidationError> globalErrors() { return Collections.unmodifiableList( errors.stream().filter(error -> error.key().isEmpty()).collect(Collectors.toList())); }\n\n    ### Response:",
        "ground_truth": "Retrieve all global errors - errors without a key.\n\n@return All global errors.",
        "predict": " Generate an insert statement using the given table and dictionary.\n\n    Args:\n        table (str): table name\n        d (dict): dictionary with column names as keys and values as values.\n    Returns:\n        tuple of statement and arguments\n\n    >>> to_insert('doc.foobar', {'name': 'Marvin'})\n    ('insert into doc.foobar (\"name\") values (?)', ['Marvin']).\n\n    "
    },
    {
        "ID": 631,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    boolean doCheckpoint() throws IOException { LOG.info(\"Checkpoint starting\"); // Do the required initialization of the merge work area. startCheckpoint(); checkpointImage.ensureCurrentDirExists(); NNStorage dstStorage = checkpointImage.storage; // Tell the namenode to start logging transactions in a new edit file // Returns a token that would be used to upload the merged image. CheckpointSignature sig = namenode.rollEditLog(); // Make sure we're talking to the same NN! if (checkpointImage.getNamespaceID() != 0) { // If the image actually has some data, make sure we're talking // to the same NN as we did before. sig.validateStorageInfo(checkpointImage.storage); } else { // if we're a fresh 2NN, just take the storage info from the server // we first talk to. dstStorage.setStorageInfo(sig); } // error simulation code for junit test InjectionHandler.processEventIO(InjectionEvent.SECONDARYNAMENODE_CHECKPOINT0); RemoteEditLogManifest manifest = namenode .getEditLogManifest(sig.mostRecentCheckpointTxId + 1); boolean loadImage = downloadCheckpointFiles(fsName, checkpointImage, sig, manifest); // Fetch fsimage and edits doMerge(sig, manifest, loadImage, checkpointImage); // // Upload the new image into the NameNode. Then tell the Namenode // to make this new uploaded image as the most current image. // long txid = checkpointImage.getLastAppliedTxId(); TransferFsImage.uploadImageFromStorage(fsName, InetAddress.getLocalHost() .getHostAddress(), infoPort, dstStorage, txid); // error simulation code for junit test InjectionHandler.processEventIO(InjectionEvent.SECONDARYNAMENODE_CHECKPOINT1); namenode.rollFsImage(new CheckpointSignature(checkpointImage)); LOG.warn(\"Checkpoint done. New Image Size: \" + dstStorage.getFsImageName(StorageLocationType.LOCAL, txid).length()); // Since we've successfully checkpointed, we can remove some old // image files checkpointImage.purgeOldStorage(); return loadImage; }\n\n    ### Response: Create a new checkpoint.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public JsonNode errorsAsJson(Lang lang) { Map<String, List<String>> allMessages = new HashMap<>(); errors.forEach( error -> { if (error != null) { final List<String> messages = new ArrayList<>(); if (messagesApi != null && lang != null) { final List<String> reversedMessages = new ArrayList<>(error.messages()); Collections.reverse(reversedMessages); messages.add( messagesApi.get( lang, reversedMessages, translateMsgArg(error.arguments(), messagesApi, lang))); } else { messages.add(error.message()); } allMessages.put(error.key(), messages); } }); return play.libs.Json.toJson(allMessages); }\n\n    ### Response:",
        "ground_truth": "Returns the form errors serialized as Json using the given Lang.\n\n@param lang the language to use.\n@return the JSON node containing the errors.",
        "predict": " Create a new checkpoint.\n\n    "
    },
    {
        "ID": 632,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function readNotifyUserMessage(message, tokens) { message.userName = protocol.decodeString(tokens[1]); message.sessionId = protocol.decodeString(tokens[3]); message.userMessage = protocol.decodeString(tokens[5]); }\n\n    ### Response: Decode a notify user message request.\n\n@param {Object} message the message object partially initialized with the id and the verb\n@param {Array} tokens the rest of the message already tokenized\n@private.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Optional<Object> value(String key) { return super.value().map(v -> v.getData().get(asNormalKey(key))); }\n\n    ### Response:",
        "ground_truth": "Gets the concrete value\n\n@param key the string key.\n@return the value",
        "predict": " Decode a notify user message request.\n\n@param {Object} message the message object partially initialized with the id and the verb\n@param {Array} tokens the rest of the message already tokenized\n@private.\n\n    "
    },
    {
        "ID": 633,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def checkgrad(self, target_param=None, verbose=False, step=1e-6, tolerance=1e-3, block_indices=None, plot=False, super_plot=False): \"\"\" Gradient checker that just checks each hessian individually super_plot will plot the hessian wrt every parameter, plot will just do the first one \"\"\" try: import numdifftools as nd except: raise ImportError(\"Don't have numdifftools package installed, it is not a GPy dependency as of yet, it is only used for hessian tests\") if target_param: raise NotImplementedError('Only basic functionality is provided with this gradchecker') #Repeat for each parameter, not the nicest but shouldn't be many cases where there are many #variables current_index = 0 for name, n_shape in zip(self.names, self.shapes): current_size = numpy.prod(n_shape) x = self.optimizer_array.copy() #x = self._get_params_transformed().copy() x = x[current_index:current_index + current_size].reshape(n_shape) # Check gradients #Actually the third derivative analytic_hess = self._ddf(x) #Can only calculate jacobian for one variable at a time #From the docs: #x0 : vector location #at which to differentiate fun #If x0 is an N x M array, then fun is assumed to be a function #of N*M variables., thus we must have it flat, not (N,1), but just (N,) #numeric_hess_partial = nd.Hessian(self._f, vectorized=False) #Actually _df is already the hessian numeric_hess_partial = nd.Jacobian(self._df, vectorized=True) numeric_hess = numeric_hess_partial(x) print(\"Done making numerical hessian\") if analytic_hess.dtype is np.dtype('object'): #Blockify numeric_hess aswell blocksizes, pagesizes = get_block_shapes_3d(analytic_hess) #HACK real_block_size = np.sum(blocksizes) numeric_hess = numeric_hess.reshape(real_block_size, real_block_size, pagesizes) #numeric_hess = get_blocks_3d(numeric_hess, blocksizes)#, pagesizes) else: numeric_hess = numeric_hess.reshape(*analytic_hess.shape) #Check every block individually (for ease) check_passed = [False]*numeric_hess.shape[2] for block_ind in range(numeric_hess.shape[2]): #Unless super_plot is set, just plot the first one p = True if (plot and block_ind == numeric_hess.shape[2]-1) or super_plot else False if verbose: print(\"Checking derivative of hessian wrt parameter number {}\".format(block_ind)) check_passed[block_ind] = self.checkgrad_block(analytic_hess[:,:,block_ind], numeric_hess[:,:,block_ind], verbose=verbose, step=step, tolerance=tolerance, block_indices=block_indices, plot=p) current_index += current_size return np.all(check_passed)\n\n    ### Response: Gradient checker that just checks each hessian individually\n\n        super_plot will plot the hessian wrt every parameter, plot will just do the first one.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public DynamicForm fill(Map<String, Object> value) { Form<Dynamic> form = super.fill(new Dynamic(value)); return new DynamicForm( form.rawData(), form.files(), form.errors(), form.value(), messagesApi, formatters, validatorFactory, config, lang().orElse(null)); }\n\n    ### Response:",
        "ground_truth": "Fills the form with existing data.\n\n@param value the map of values to fill in the form.\n@return the modified form.",
        "predict": " Gradient checker that just checks each hessian individually\n\n        super_plot will plot the hessian wrt every parameter, plot will just do the first one.\n\n    "
    },
    {
        "ID": 634,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String getSHA256Checksum(File file) throws IOException, NoSuchAlgorithmException { final byte[] b = getChecksum(SHA256, file); return getHex(b); }\n\n    ### Response: Calculates the SH256 checksum of a specified file.\n\n@param file the file to generate the MD5 checksum\n@return the hex representation of the SHA1 hash\n@throws java.io.IOException when the file passed in does not exist\n@throws java.security.NoSuchAlgorithmException when the SHA1 algorithm is not available.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public <T> T parse(String text, Class<T> clazz) { return conversion.convert(text, clazz); }\n\n    ### Response:",
        "ground_truth": "Parses this string as instance of the given class.\n\n@param text the text to parse\n@param clazz class representing the required type\n@param  the type to parse out of the text\n@return the parsed value",
        "predict": " Calculates the SH256 checksum of a specified file.\n\n@param file the file to generate the MD5 checksum\n@return the hex representation of the SHA1 hash\n@throws java.io.IOException when the file passed in does not exist\n@throws java.security.NoSuchAlgorithmException when the SHA1 algorithm is not available.\n\n    "
    },
    {
        "ID": 635,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public int deleteByTableName(String tableName) throws SQLException { DeleteBuilder<FeatureTileLink, FeatureTileLinkKey> db = deleteBuilder(); db.where().eq(FeatureTileLink.COLUMN_FEATURE_TABLE_NAME, tableName) .or().eq(FeatureTileLink.COLUMN_TILE_TABLE_NAME, tableName); PreparedDelete<FeatureTileLink> deleteQuery = db.prepare(); int deleted = delete(deleteQuery); return deleted; }\n\n    ### Response: Delete by table name, either feature or tile table name\n\n@param tableName\ntable name, feature or tile\n@return rows deleted\n@throws SQLException\nupon failure.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SuppressWarnings(\"unchecked\") public <T> T parse(Field field, String text) { return (T) conversion.convert(text, new TypeDescriptor(field)); }\n\n    ### Response:",
        "ground_truth": "Parses this string as instance of a specific field\n\n@param field the related field (custom formatters are extracted from this field annotation)\n@param text the text to parse\n@param  the type to parse out of the text\n@return the parsed value",
        "predict": " Delete by table name, either feature or tile table name\n\n@param tableName\ntable name, feature or tile\n@return rows deleted\n@throws SQLException\nupon failure.\n\n    "
    },
    {
        "ID": 636,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function polyfill() { if (navigator.userAgent.match(/MSIE/) || navigator.userAgent.match(/Trident/) || navigator.userAgent.match(/Edge/)) { // Internet Explorer's native IndexedDB does not support compound keys compoundKeyPolyfill(); } }\n\n    ### Response: Polyfills missing features in the browser's native IndexedDB implementation.\nThis is used for browsers that DON'T support WebSQL but DO support IndexedDB.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public <T> String print(T t) { if (t == null) { return \"\"; } if (conversion.canConvert(t.getClass(), String.class)) { return conversion.convert(t, String.class); } else { return t.toString(); } }\n\n    ### Response:",
        "ground_truth": "Computes the display string for any value.\n\n@param t the value to print\n@param  the type to print\n@return the formatted string",
        "predict": " Polyfills missing features in the browser's native IndexedDB implementation.\nThis is used for browsers that DON'T support WebSQL but DO support IndexedDB.\n\n    "
    },
    {
        "ID": 637,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def delete_entry(sender, instance, **kwargs): \"\"\" Deletes Entry instance corresponding to specified instance. :param sender: the sending class. :param instance: the instance being deleted. \"\"\" from ..models import Entry Entry.objects.get_for_model(instance)[0].delete()\n\n    ### Response: Deletes Entry instance corresponding to specified instance.\n\n    :param sender: the sending class.\n    :param instance: the instance being deleted..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public <T> String print(Field field, T t) { return print(new TypeDescriptor(field), t); }\n\n    ### Response:",
        "ground_truth": "Computes the display string for any value, for a specific field.\n\n@param field the related field - custom formatters are extracted from this field annotation\n@param t the value to print\n@param  the type to print\n@return the formatted string",
        "predict": " Deletes Entry instance corresponding to specified instance.\n\n    :param sender: the sending class.\n    :param instance: the instance being deleted..\n\n    "
    },
    {
        "ID": 638,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static function signAndEncrypt( HiddenString $message, SignatureSecretKey $secretKey, PublicKey $recipientPublicKey, $encoding = Halite::ENCODE_BASE64URLSAFE ): string { if ($recipientPublicKey instanceof SignaturePublicKey) { $publicKey = $recipientPublicKey->getEncryptionPublicKey(); } elseif ($recipientPublicKey instanceof EncryptionPublicKey) { $publicKey = $recipientPublicKey; } else { // @codeCoverageIgnoreStart throw new InvalidKey('An invalid key type was provided'); // @codeCoverageIgnoreEnd } $signature = self::sign($message->getString(), $secretKey, true); $plaintext = new HiddenString($signature . $message->getString()); \\sodium_memzero($signature); $myEncKey = $secretKey->getEncryptionSecretKey(); return self::encrypt($plaintext, $myEncKey, $publicKey, $encoding); }\n\n    ### Response: Sign a message then encrypt it with the recipient's public key.\n\n@param HiddenString $message           Plaintext message to sign and encrypt\n@param SignatureSecretKey $secretKey   Private signing key\n@param PublicKey $recipientPublicKey   Public encryption key\n@param string|bool $encoding           Which encoding scheme to use?\n@return string\n\n@throws CannotPerformOperation\n@throws InvalidDigestLength\n@throws InvalidKey\n@throws InvalidMessage\n@throws InvalidType\n@throws \\TypeError.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public <T> String print(TypeDescriptor desc, T t) { if (t == null) { return \"\"; } if (desc != null && conversion.canConvert(desc, TypeDescriptor.valueOf(String.class))) { return (String) conversion.convert(t, desc, TypeDescriptor.valueOf(String.class)); } else if (conversion.canConvert(t.getClass(), String.class)) { return conversion.convert(t, String.class); } else { return t.toString(); } }\n\n    ### Response:",
        "ground_truth": "Computes the display string for any value, for a specific type.\n\n@param desc the field descriptor - custom formatters are extracted from this descriptor.\n@param t the value to print\n@param  the type to print\n@return the formatted string",
        "predict": " Sign a message then encrypt it with the recipient's public key.\n\n@param HiddenString $message           Plaintext message to sign and encrypt\n@param SignatureSecretKey $secretKey   Private signing key\n@param PublicKey $recipientPublicKey   Public encryption key\n@param string|bool $encoding           Which encoding scheme to use?\n@return string\n\n@throws CannotPerformOperation\n@throws InvalidDigestLength\n@throws InvalidKey\n@throws InvalidMessage\n@throws InvalidType\n@throws \\TypeError.\n\n    "
    },
    {
        "ID": 639,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def save(self, *args, **kwargs): \"\"\"Capitalize the first letter of the block name.\"\"\" letter = getattr(self, \"block_letter\", None) if letter and len(letter) >= 1: self.block_letter = letter[:1].upper() + letter[1:] super(EighthBlock, self).save(*args, **kwargs)\n\n    ### Response: Capitalize the first letter of the block name..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private Formatters registerOptional() { conversion.addConverter( new GenericConverter() { public Object convert( Object source, TypeDescriptor sourceType, TypeDescriptor targetType) { if (sourceType.getObjectType().equals(String.class)) { // From String to Optional Object element = conversion.convert(source, sourceType, targetType.elementTypeDescriptor(source)); return Optional.ofNullable(element); } else if (targetType.getObjectType().equals(String.class)) { // From Optional to String if (source == null) return \"\"; Optional<?> opt = (Optional) source; return opt.map( o -> conversion.convert( source, sourceType.getElementTypeDescriptor(), targetType)) .orElse(\"\"); } return null; } public Set<GenericConverter.ConvertiblePair> getConvertibleTypes() { Set<ConvertiblePair> result = new HashSet<>(); result.add(new ConvertiblePair(Optional.class, String.class)); result.add(new ConvertiblePair(String.class, Optional.class)); return result; } }); return this; }\n\n    ### Response:",
        "ground_truth": "Converter for String -> Optional and Optional -> String",
        "predict": " Capitalize the first letter of the block name..\n\n    "
    },
    {
        "ID": 640,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static function all(PDFfiller $provider, array $queryParams = []) { $paramsArray = static::query($provider, null, $queryParams); $paramsArray['items'] = static::formItems($provider, $paramsArray); return new ModelsList($paramsArray); }\n\n    ### Response: Returns a list of entities\n@param PDFfiller $provider\n@param array $queryParams\n@return ModelsList\n@throws InvalidQueryException\n@throws InvalidRequestException\n@throws \\ReflectionException.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public <T> Formatters register(final Class<T> clazz, final SimpleFormatter<T> formatter) { conversion.addFormatterForFieldType( clazz, new org.springframework.format.Formatter<T>() { public T parse(String text, Locale locale) throws java.text.ParseException { return formatter.parse(text, locale); } public String print(T t, Locale locale) { return formatter.print(t, locale); } public String toString() { return formatter.toString(); } }); return this; }\n\n    ### Response:",
        "ground_truth": "Registers a simple formatter.\n\n@param clazz class handled by this formatter\n@param  the type that this formatter will parse and print\n@param formatter the formatter to register\n@return the modified Formatters object.",
        "predict": " Returns a list of entities\n@param PDFfiller $provider\n@param array $queryParams\n@return ModelsList\n@throws InvalidQueryException\n@throws InvalidRequestException\n@throws \\ReflectionException.\n\n    "
    },
    {
        "ID": 641,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void message(MessageType type, String me, TraceComponent tc, String msgKey, Object objs, Object[] formattedMessage) { switch(type) { case AUDIT : if (TraceComponent.isAnyTracingEnabled() && myTc.isAuditEnabled()) Tr.audit(myTc, SIB_MESSAGE, formattedMessage); break; case ERROR : Tr.error(myTc, SIB_MESSAGE, formattedMessage); break; case FATAL : Tr.fatal(myTc, SIB_MESSAGE, formattedMessage); break; case INFO : Tr.info(myTc, SIB_MESSAGE, formattedMessage); break; case WARNING: Tr.warning(myTc, SIB_MESSAGE, formattedMessage); break; } }\n\n    ### Response: The method called to indicate that a message is being generated by SibMessage\n\n@param type   The type of the event\n@param me     The messaging engine (if any) generating the message\n@param tc     The trace component generating the message\n@param msgKey The message key of the message being generated\n@param objs   The inserts of the message being generated\n@param formattedMessage A formatted version of the message being generated.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SuppressWarnings(\"unchecked\") public <A extends Annotation, T> Formatters register( final Class<T> clazz, final AnnotationFormatter<A, T> formatter) { final Class<? extends Annotation> annotationType = (Class<? extends Annotation>) GenericTypeResolver.resolveTypeArguments( formatter.getClass(), AnnotationFormatter.class)[0]; conversion.addConverter( new ConditionalGenericConverter() { public Set<GenericConverter.ConvertiblePair> getConvertibleTypes() { Set<GenericConverter.ConvertiblePair> types = new HashSet<>(); types.add(new GenericConverter.ConvertiblePair(clazz, String.class)); return types; } public boolean matches(TypeDescriptor sourceType, TypeDescriptor targetType) { return (sourceType.getAnnotation(annotationType) != null); } public Object convert( Object source, TypeDescriptor sourceType, TypeDescriptor targetType) { final A a = (A) sourceType.getAnnotation(annotationType); Locale locale = LocaleContextHolder.getLocale(); try { return formatter.print(a, (T) source, locale); } catch (Exception ex) { throw new ConversionFailedException(sourceType, targetType, source, ex); } } public String toString() { return \"@\" + annotationType.getName() + \" \" + clazz.getName() + \" -> \" + String.class.getName() + \": \" + formatter; } }); conversion.addConverter( new ConditionalGenericConverter() { public Set<GenericConverter.ConvertiblePair> getConvertibleTypes() { Set<GenericConverter.ConvertiblePair> types = new HashSet<>(); types.add(new GenericConverter.ConvertiblePair(String.class, clazz)); return types; } public boolean matches(TypeDescriptor sourceType, TypeDescriptor targetType) { return (targetType.getAnnotation(annotationType) != null); } public Object convert( Object source, TypeDescriptor sourceType, TypeDescriptor targetType) { final A a = (A) targetType.getAnnotation(annotationType); Locale locale = LocaleContextHolder.getLocale(); try { return formatter.parse(a, (String) source, locale); } catch (Exception ex) { throw new ConversionFailedException(sourceType, targetType, source, ex); } } public String toString() { return String.class.getName() + \" -> @\" + annotationType.getName() + \" \" + clazz.getName() + \": \" + formatter; } }); return this; }\n\n    ### Response:",
        "ground_truth": "Registers an annotation-based formatter.\n\n@param clazz class handled by this formatter\n@param formatter the formatter to register\n@param  the annotation type\n@param  the type that will be parsed or printed\n@return the modified Formatters object.",
        "predict": " The method called to indicate that a message is being generated by SibMessage\n\n@param type   The type of the event\n@param me     The messaging engine (if any) generating the message\n@param tc     The trace component generating the message\n@param msgKey The message key of the message being generated\n@param objs   The inserts of the message being generated\n@param formattedMessage A formatted version of the message being generated.\n\n    "
    },
    {
        "ID": 642,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def visit_Break(self, _): \"\"\" Generate break statement in most case and goto for orelse clause. See Also : cxx_loop \"\"\" if self.break_handlers and self.break_handlers[-1]: return Statement(\"goto {0}\".format(self.break_handlers[-1])) else: return Statement(\"break\")\n\n    ### Response: Generate break statement in most case and goto for orelse clause.\n\n        See Also : cxx_loop.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String encode(Cookie cookie) { if (cookie == null) { throw new NullPointerException(\"cookie\"); } final String name = cookie.name(); final String value = cookie.value() != null ? cookie.value() : \"\"; validateCookie(name, value); StringBuilder buf = new StringBuilder(); if (cookie.wrap()) { addQuoted(buf, name, value); } else { add(buf, name, value); } if (cookie.maxAge() != Integer.MIN_VALUE) { add(buf, CookieHeaderNames.MAX_AGE, cookie.maxAge()); Date expires = cookie.maxAge() <= 0 ? new Date(0) // Set expires to the Unix epoch : new Date(cookie.maxAge() * 1000L + System.currentTimeMillis()); add(buf, CookieHeaderNames.EXPIRES, HttpHeaderDateFormat.get().format(expires)); } if (cookie.sameSite() != null) { add(buf, CookieHeaderNames.SAMESITE, cookie.sameSite()); } if (cookie.path() != null) { add(buf, CookieHeaderNames.PATH, cookie.path()); } if (cookie.domain() != null) { add(buf, CookieHeaderNames.DOMAIN, cookie.domain()); } if (cookie.isSecure()) { add(buf, CookieHeaderNames.SECURE); } if (cookie.isHttpOnly()) { add(buf, CookieHeaderNames.HTTPONLY); } return stripTrailingSeparator(buf); }\n\n    ### Response:",
        "ground_truth": "Encodes the specified cookie into a Set-Cookie header value.\n\n@param cookie the cookie\n@return a single Set-Cookie header value",
        "predict": " Generate break statement in most case and goto for orelse clause.\n\n        See Also : cxx_loop.\n\n    "
    },
    {
        "ID": 643,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function getExpressionValue (varName, scssExpression) { if (is.undef(scssExpression) || is.args.empty(arguments)) { message('Error: Missing arguments'); return undefined; } if (!is.string(varName) || !is.string(scssExpression)) { message('Error: Check arguments type'); return undefined; } if (!~scssExpression.indexOf('$')) { message('Warning: Check scssExpression to contain valid code') } // print the interpolated value in comment string // /*#{$varName}*/ --> /*varValue*/ const scssContent = `${scssExpression}/*#{$${varName}}*/`; const sassResult = sass.renderSync({ data: scssContent }); const cssResult = sassResult.css.toString(); return extractExpressionValue(cssResult); }\n\n    ### Response: Resolve variable value\nBy variable name and previous code\n@param varName\n@param scssExpression.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static NodeList selectNodes(String path, Object node) { return selectNodes(path, node, null); }\n\n    ### Response:",
        "ground_truth": "Select all nodes that are selected by this XPath expression. If multiple nodes match, multiple\nnodes will be returned. Nodes will be returned in document-order,\n\n@param path the xpath expression\n@param node the starting node\n@return result of evaluating the xpath expression against node",
        "predict": " Resolve variable value\nBy variable name and previous code\n@param varName\n@param scssExpression.\n\n    "
    },
    {
        "ID": 644,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def iter_authorizations(self, number=-1, etag=None): \"\"\"Iterate over authorizations for the authenticated user. This will return a 404 if you are using a token for authentication. :param int number: (optional), number of authorizations to return. Default: -1 returns all available authorizations :param str etag: (optional), ETag from a previous request to the same endpoint :returns: generator of :class:`Authorization <Authorization>`\\ s \"\"\" url = self._build_url('authorizations') return self._iter(int(number), url, Authorization, etag=etag)\n\n    ### Response: Iterate over authorizations for the authenticated user. This will\n        return a 404 if you are using a token for authentication.\n\n        :param int number: (optional), number of authorizations to return.\n            Default: -1 returns all available authorizations\n        :param str etag: (optional), ETag from a previous request to the same\n            endpoint\n        :returns: generator of :class:`Authorization `\\ s.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static <T> scala.collection.immutable.Seq<T> toSeq(java.util.List<T> list) { return scala.collection.JavaConverters.asScalaBufferConverter(list).asScala().toList(); }\n\n    ### Response:",
        "ground_truth": "Converts a Java List to Scala Seq.\n\n@param list    the java list.\n@return the converted Seq.\n@param  the element type.",
        "predict": " Iterate over authorizations for the authenticated user. This will\n        return a 404 if you are using a token for authentication.\n\n        :param int number: (optional), number of authorizations to return.\n            Default: -1 returns all available authorizations\n        :param str etag: (optional), ETag from a previous request to the same\n            endpoint\n        :returns: generator of :class:`Authorization `\\ s.\n\n    "
    },
    {
        "ID": 645,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def add_quality_score_vs_no_of_observations_section(self): \"\"\" Add a section for the quality score vs number of observations line plot \"\"\" sample_data = [] data_labels = [] for rt_type_name, rt_type in recal_table_type._asdict().items(): sample_tables = self.gatk_base_recalibrator[rt_type]['quality_quantization_map'] if len(sample_tables) == 0: continue sample_data.append({ sample: {int(x): int(y) for x, y in zip(table['QualityScore'], table['Count'])} for sample, table in sample_tables.items() }) sample_y_sums = { sample: sum(int(y) for y in table['Count']) for sample, table in sample_tables.items() } sample_data.append({ sample: { int(x): float(y) / sample_y_sums[sample] for x, y in zip(table['QualityScore'], table['Count']) } for sample, table in sample_tables.items() }) flat_proportions = [float(y) / sample_y_sums[sample] for sample, table in sample_tables.items() for y in table['Count']] prop_ymax = max(flat_proportions) data_labels.append({'name': \"{} Count\".format(rt_type_name.capitalize().replace('_', '-')), 'ylab': 'Count'}) data_labels.append({'ymax': prop_ymax, 'name': \"{} Percent\".format(rt_type_name.capitalize().replace('_', '-')), 'ylab': 'Percent'}) plot = linegraph.plot( sample_data, pconfig={ 'title': \"Observed Quality Score Counts\", 'id': 'gatk-base-recalibrator-quality-score-vs-number-of-observations', 'xlab': 'Observed Quality Score', 'ylab': 'Count', 'xDecimals': False, 'data_labels': data_labels, }) # Reported vs empirical quality scores self.add_section( name='Observed Quality Scores', description=( 'This plot shows the distribution of base quality scores in each sample before and ' 'after base quality score recalibration (BQSR). Applying BQSR should broaden the ' 'distribution of base quality scores.' ), helptext=( 'For more information see ' '[the Broad\\'s description of BQSR]' '(https://gatkforums.broadinstitute.org/gatk/discussion/44/base-quality-score-recalibration-bqsr)' '.' ), plot=plot, )\n\n    ### Response: Add a section for the quality score vs number of observations line plot.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static <T> scala.collection.immutable.Seq<T> toSeq(T[] array) { return toSeq(java.util.Arrays.asList(array)); }\n\n    ### Response:",
        "ground_truth": "Converts a Java Array to Scala Seq.\n\n@param array    the java array.\n@return the converted Seq.\n@param  the element type.",
        "predict": " Add a section for the quality score vs number of observations line plot.\n\n    "
    },
    {
        "ID": 646,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def gdal_nodata_mask(pcl, pcsl, tirs_arr): \"\"\" Given a boolean potential cloud layer, a potential cloud shadow layer and a thermal band Calculate the GDAL-style uint8 mask \"\"\" tirs_mask = np.isnan(tirs_arr) | (tirs_arr == 0) return ((~(pcl | pcsl | tirs_mask)) * 255).astype('uint8')\n\n    ### Response: Given a boolean potential cloud layer,\n        a potential cloud shadow layer and a thermal band\n        Calculate the GDAL-style uint8 mask.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SafeVarargs public static <T> scala.collection.immutable.Seq<T> varargs(T... array) { return toSeq(array); }\n\n    ### Response:",
        "ground_truth": "Converts a Java varargs to Scala varargs.\n\n@param array    the java array.\n@return the Scala varargs\n@param  the element type.",
        "predict": " Given a boolean potential cloud layer,\n        a potential cloud shadow layer and a thermal band\n        Calculate the GDAL-style uint8 mask.\n\n    "
    },
    {
        "ID": 647,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def reboot(name, kill=False): ''' Reboot the container by sending a SIGINT to its init process. Equivalent to running ``machinectl reboot`` on the named container. For convenience, running ``nspawn.restart`` (as shown in the CLI examples below) is equivalent to running ``nspawn.reboot``. .. note:: ``machinectl reboot`` is only supported in systemd >= 219. On earlier systemd versions, running this function will instead restart the container via ``systemctl``. CLI Examples: .. code-block:: bash salt myminion nspawn.reboot arch1 salt myminion nspawn.restart arch1 ''' if _sd_version() >= 219: if state(name) == 'running': ret = _machinectl('reboot {0}'.format(name)) else: # 'machinectl reboot' will fail on a stopped container return start(name) else: # 'systemctl restart' did not work, at least in my testing. Running # 'uptime' in the container afterwards showed it had not rebooted. So, # we need stop and start the container in separate actions. # First stop the container cmd = 'systemctl stop systemd-nspawn@{0}'.format(name) ret = __salt__['cmd.run_all'](cmd, python_shell=False) # Now check if successful if ret['retcode'] != 0: __context__['retcode'] = salt.defaults.exitcodes.EX_UNAVAILABLE return False # Finally, start the container back up. No need to check the retcode a # second time, it'll be checked below once we exit the if/else block. cmd = 'systemctl start systemd-nspawn@{0}'.format(name) ret = __salt__['cmd.run_all'](cmd, python_shell=False) if ret['retcode'] != 0: __context__['retcode'] = salt.defaults.exitcodes.EX_UNAVAILABLE return False return True\n\n    ### Response: Reboot the container by sending a SIGINT to its init process. Equivalent\n    to running ``machinectl reboot`` on the named container.\n\n    For convenience, running ``nspawn.restart`` (as shown in the CLI examples\n    below) is equivalent to running ``nspawn.reboot``.\n\n    .. note::\n\n        ``machinectl reboot`` is only supported in systemd >= 219. On earlier\n        systemd versions, running this function will instead restart the\n        container via ``systemctl``.\n\n    CLI Examples:\n\n    .. code-block:: bash\n\n        salt myminion nspawn.reboot arch1\n        salt myminion nspawn.restart arch1.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static <In, Out> MappedWebSocketAcceptor<In, Out> json(Class<In> in) { return new MappedWebSocketAcceptor<>( Scala.partialFunction( message -> { try { if (message instanceof Message.Binary) { return F.Either.Left( play.libs.Json.mapper() .readValue( ((Message.Binary) message).data().iterator().asInputStream(), in)); } else if (message instanceof Message.Text) { return F.Either.Left( play.libs.Json.mapper().readValue(((Message.Text) message).data(), in)); } } catch (Exception e) { return F.Either.Right(new Message.Close(CloseCodes.Unacceptable(), e.getMessage())); } throw Scala.noMatch(); }), outMessage -> { try { return new Message.Text(play.libs.Json.mapper().writeValueAsString(outMessage)); } catch (Exception e) { throw new RuntimeException(e); } }); }\n\n    ### Response:",
        "ground_truth": "Acceptor for JSON WebSockets.\n\n@param in The class of the incoming messages, used to decode them from the JSON.\n@param  The websocket's input type (what it receives from clients)\n@param  The websocket's output type (what it writes to clients)\n@return The WebSocket acceptor.",
        "predict": " Reboot the container by sending a SIGINT to its init process. Equivalent\n    to running ``machinectl reboot`` on the named container.\n\n    For convenience, running ``nspawn.restart`` (as shown in the CLI examples\n    below) is equivalent to running ``nspawn.reboot``.\n\n    .. note::\n\n        ``machinectl reboot`` is only supported in systemd >= 219. On earlier\n        systemd versions, running this function will instead restart the\n        container via ``systemctl``.\n\n    CLI Examples:\n\n    .. code-block:: bash\n\n        salt myminion nspawn.reboot arch1\n        salt myminion nspawn.restart arch1.\n\n    "
    },
    {
        "ID": 648,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function logCurlMessage($message, \\DateTime $messageTimestamp) { if (!$this->debugLogFilePath) { throw new \\RuntimeException('Debug log file path not defined.'); } $logMessage = '[' . $messageTimestamp->format('Y-m-d H:i:s') . \"] ----------------------------------------------------------\\n\" . $message . \"\\n\\n\"; $logHandle = fopen($this->debugLogFilePath, 'a+'); fwrite($logHandle, $logMessage); fclose($logHandle); }\n\n    ### Response: Log cURL Debug Message\n\n@param string $message\n@param \\DateTime $messageTimestamp\n@throws \\RuntimeException.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static <In, Out> WebSocket acceptOrResult( PartialFunction<Message, F.Either<In, Message>> inMapper, Function<Http.RequestHeader, CompletionStage<F.Either<Result, Flow<In, Out, ?>>>> f, Function<Out, Message> outMapper) { return new WebSocket() { @Override public CompletionStage<F.Either<Result, Flow<Message, Message, ?>>> apply( Http.RequestHeader request) { return f.apply(request) .thenApply( resultOrFlow -> { if (resultOrFlow.left.isPresent()) { return F.Either.Left(resultOrFlow.left.get()); } else { Flow<Message, Message, ?> flow = AkkaStreams.bypassWith( Flow.<Message>create().collect(inMapper), play.api.libs.streams.AkkaStreams.onlyFirstCanFinishMerge(2), resultOrFlow.right.get().map(outMapper::apply)); return F.Either.Right(flow); } }); } }; }\n\n    ### Response:",
        "ground_truth": "Helper to create handlers for WebSockets.\n\n@param inMapper Function to map input messages. If it produces left, the message will be passed\nto the WebSocket flow, if it produces right, the message will be sent back out to the\nclient - this can be used to send errors directly to the client.\n@param f The function to handle the WebSocket.\n@param outMapper Function to map output messages.\n@return The WebSocket handler.",
        "predict": " Log cURL Debug Message\n\n@param string $message\n@param \\DateTime $messageTimestamp\n@throws \\RuntimeException.\n\n    "
    },
    {
        "ID": 649,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    final function createLabel($message, $login = null, $countdown = null, $isAnimated = false, $hideOnF6 = true, $showBackgroud = false) { $this->removeLabel($login); $ui = Windows\\Label::Create($login); $ui->setPosition(0, 40); $ui->setMessage($message, $countdown); $ui->animated = $isAnimated; $ui->hideOnF6 = $hideOnF6; $ui->showBackground = $showBackgroud; $ui->show(); }\n\n    ### Response: Display a text message in the center of the player's screen\nIf countdown is set, the message will be refresh every second the end of the countdown\n@param string $login\n@param string $message\n@param int $countdown\n@param bool $isAnimated If true the text will be animated.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    static boolean setAccessibleWorkaround(final AccessibleObject o) { if (o == null || o.isAccessible()) { return false; } final Member m = (Member) o; if (!o.isAccessible() && Modifier.isPublic(m.getModifiers()) && isPackageAccess(m.getDeclaringClass().getModifiers())) { try { o.setAccessible(true); return true; } catch (final SecurityException e) { // NOPMD // ignore in favor of subsequent IllegalAccessException } } return false; }\n\n    ### Response:",
        "ground_truth": "XXX Default access superclass workaround.\n\nWhen a {@code public} class has a default access superclass with {@code public} members,\nthese members are accessible. Calling them from compiled code works fine. Unfortunately, on\nsome JVMs, using reflection to invoke these members seems to (wrongly) prevent access even when\nthe modifier is {@code public}. Calling {@code setAccessible(true)} solves the problem but will\nonly work from sufficiently privileged code. Better workarounds would be gratefully accepted.\n\n@param o the AccessibleObject to set as accessible\n@return a boolean indicating whether the accessibility of the object was set to true.",
        "predict": " Display a text message in the center of the player's screen\nIf countdown is set, the message will be refresh every second the end of the countdown\n@param string $login\n@param string $message\n@param int $countdown\n@param bool $isAnimated If true the text will be animated.\n\n    "
    },
    {
        "ID": 650,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static IReactionSet getRelevantReactionsAsProduct(IReactionSet reactSet, IAtomContainer molecule) { IReactionSet newReactSet = reactSet.getBuilder().newInstance(IReactionSet.class); for (IReaction reaction : reactSet.reactions()) { for (IAtomContainer atomContainer : reaction.getProducts().atomContainers()) if (atomContainer.equals(molecule)) newReactSet.addReaction(reaction); } return newReactSet; }\n\n    ### Response: Get all Reactions object containing a Molecule as a Product from a set of\nReactions.\n\n@param reactSet The set of reaction to inspect\n@param molecule The molecule to find as a product\n@return         The IReactionSet.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static float getPrimitivePromotionCost( final Class<?> srcClass, final Class<?> destClass) { float cost = 0.0f; Class<?> cls = srcClass; if (!cls.isPrimitive()) { // slight unwrapping penalty cost += 0.1f; cls = ClassUtils.wrapperToPrimitive(cls); } for (int i = 0; cls != destClass && i < ORDERED_PRIMITIVE_TYPES.length; i++) { if (cls == ORDERED_PRIMITIVE_TYPES[i]) { cost += 0.1f; if (i < ORDERED_PRIMITIVE_TYPES.length - 1) { cls = ORDERED_PRIMITIVE_TYPES[i + 1]; } } } return cost; }\n\n    ### Response:",
        "ground_truth": "Gets the number of steps required to promote a primitive number to another type.\n\n@param srcClass the (primitive) source class\n@param destClass the (primitive) destination class\n@return The cost of promoting the primitive",
        "predict": " Get all Reactions object containing a Molecule as a Product from a set of\nReactions.\n\n@param reactSet The set of reaction to inspect\n@param molecule The molecule to find as a product\n@return         The IReactionSet.\n\n    "
    },
    {
        "ID": 651,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function addResource(Activity $activity, ResourceNode $resource) { if (!$activity->getParameters()->getSecondaryResources()->contains($resource)) { $activity->getParameters()->getSecondaryResources()->add($resource); $this->initializePermissions($activity); $this->om->persist($activity); $this->om->flush(); return true; } }\n\n    ### Response: Link a resource to an activity.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static float getTotalTransformationCost( final Class<?>[] srcArgs, final Executable executable) { final Class<?>[] destArgs = executable.getParameterTypes(); final boolean isVarArgs = executable.isVarArgs(); // \"source\" and \"destination\" are the actual and declared args respectively. float totalCost = 0.0f; final long normalArgsLen = isVarArgs ? destArgs.length - 1 : destArgs.length; if (srcArgs.length < normalArgsLen) { return Float.MAX_VALUE; } for (int i = 0; i < normalArgsLen; i++) { totalCost += getObjectTransformationCost(srcArgs[i], destArgs[i]); } if (isVarArgs) { // When isVarArgs is true, srcArgs and dstArgs may differ in length. // There are two special cases to consider: final boolean noVarArgsPassed = srcArgs.length < destArgs.length; final boolean explicitArrayForVarags = srcArgs.length == destArgs.length && srcArgs[srcArgs.length - 1].isArray(); final float varArgsCost = 0.001f; final Class<?> destClass = destArgs[destArgs.length - 1].getComponentType(); if (noVarArgsPassed) { // When no varargs passed, the best match is the most generic matching type, not the most // specific. totalCost += getObjectTransformationCost(destClass, Object.class) + varArgsCost; } else if (explicitArrayForVarags) { final Class<?> sourceClass = srcArgs[srcArgs.length - 1].getComponentType(); totalCost += getObjectTransformationCost(sourceClass, destClass) + varArgsCost; } else { // This is typical varargs case. for (int i = destArgs.length - 1; i < srcArgs.length; i++) { final Class<?> srcClass = srcArgs[i]; totalCost += getObjectTransformationCost(srcClass, destClass) + varArgsCost; } } } return totalCost; }\n\n    ### Response:",
        "ground_truth": "Returns the sum of the object transformation cost for each class in the source argument list.\n\n@param srcArgs The source arguments\n@param executable The executable to calculate transformation costs for\n@return The total transformation cost",
        "predict": " Link a resource to an activity.\n\n    "
    },
    {
        "ID": 652,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def delete_alarms(self, alarms): \"\"\" Deletes all specified alarms. In the event of an error, no alarms are deleted. :type alarms: list :param alarms: List of alarm names. \"\"\" params = {} self.build_list_params(params, alarms, 'AlarmNames.member.%s') return self.get_status('DeleteAlarms', params)\n\n    ### Response: Deletes all specified alarms. In the event of an error, no\n        alarms are deleted.\n\n        :type alarms: list\n        :param alarms: List of alarm names..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static float getObjectTransformationCost(Class<?> srcClass, final Class<?> destClass) { if (destClass.isPrimitive()) { return getPrimitivePromotionCost(srcClass, destClass); } float cost = 0.0f; while (srcClass != null && !destClass.equals(srcClass)) { if (destClass.isInterface() && ClassUtils.isAssignable(srcClass, destClass)) { // slight penalty for interface match. // we still want an exact match to override an interface match, // but // an interface match should override anything where we have to // get a superclass. cost += 0.25f; break; } cost++; srcClass = srcClass.getSuperclass(); } /* * If the destination class is null, we've traveled all the way up to * an Object match. We'll penalize this by adding 1.5 to the cost. */ if (srcClass == null) { cost += 1.5f; } return cost; }\n\n    ### Response:",
        "ground_truth": "Gets the number of steps required needed to turn the source class into the destination class.\nThis represents the number of steps in the object hierarchy graph.\n\n@param srcClass The source class\n@param destClass The destination class\n@return The cost of transforming an object",
        "predict": " Deletes all specified alarms. In the event of an error, no\n        alarms are deleted.\n\n        :type alarms: list\n        :param alarms: List of alarm names..\n\n    "
    },
    {
        "ID": 653,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function delayWhen(delayDurationSelector, subscriptionDelay) { if (subscriptionDelay) { return function (source) { return new SubscriptionDelayObservable(source, subscriptionDelay) .lift(new DelayWhenOperator(delayDurationSelector)); }; } return function (source) { return source.lift(new DelayWhenOperator(delayDurationSelector)); }; }\n\n    ### Response: PURE_IMPORTS_START tslib,_Subscriber,_Observable,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String at(String key, Object... args) { return messagesApi.get(lang, key, args); }\n\n    ### Response:",
        "ground_truth": "Get the message at the given key.\n\nUses `java.text.MessageFormat` internally to format the message.\n\n@param key the message key\n@param args the message arguments\n@return the formatted message or a default rendering if the key wasn't defined",
        "predict": " PURE_IMPORTS_START tslib,_Subscriber,_Observable,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END.\n\n    "
    },
    {
        "ID": 654,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public synchronized void removeAllElements() { modCount++; // Let gc do its work for (int i = 0; i < elementCount; i++) elementData[i] = null; elementCount = 0; }\n\n    ### Response: Removes all components from this vector and sets its size to zero.\n\nThis method is identical in functionality to the {@link #clear}\nmethod (which is part of the {@link List} interface)..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String at(List<String> keys, Object... args) { return messagesApi.get(lang, keys, args); }\n\n    ### Response:",
        "ground_truth": "Get the message at the first defined key.\n\nUses `java.text.MessageFormat` internally to format the message.\n\n@param keys the messages keys\n@param args the message arguments\n@return the formatted message or a default rendering if the key wasn't defined",
        "predict": " Removes all components from this vector and sets its size to zero.\n\nThis method is identical in functionality to the {@link #clear}\nmethod (which is part of the {@link List} interface)..\n\n    "
    },
    {
        "ID": 655,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function getInfoStartAsync($filePath) { $mediaInfoCommandBuilder = new MediaInfoCommandBuilder(); $this->mediaInfoCommandRunnerAsync = $mediaInfoCommandBuilder->buildMediaInfoCommandRunner( $filePath, $this->configuration ); $this->mediaInfoCommandRunnerAsync->start(); }\n\n    ### Response: Call to start asynchronous process.\n\nMake call to MediaInfo::getInfoWaitAsync() afterwards to received MediaInfoContainer object.\n\n@param $filePath.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Database createFrom( String driver, String url, Map<String, ? extends Object> config) { return createFrom(\"default\", driver, url, config); }\n\n    ### Response:",
        "ground_truth": "Create a pooled database named \"default\" with the given configuration.\n\n@param driver the database driver class\n@param url the database url\n@param config a map of extra database configuration\n@return a configured database",
        "predict": " Call to start asynchronous process.\n\nMake call to MediaInfo::getInfoWaitAsync() afterwards to received MediaInfoContainer object.\n\n@param $filePath.\n\n    "
    },
    {
        "ID": 656,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function getName() { $tagNames = array( T_NEW_LINE => 'T_NEW_LINE', T_TAB => 'T_TAB', T_SEMICOLON => 'T_SEMICOLON', T_BRACES_OPEN => 'T_BRACES_OPEN', T_BRACES_CLOSE => 'T_BRACES_CLOSE', T_PARENTHESIS_OPEN => 'T_PARENTHESIS_OPEN', T_PARENTHESIS_CLOSE => 'T_PARENTHESIS_CLOSE', T_COMMA => 'T_COMMA', T_EQUAL => 'T_EQUAL', T_CONCAT => 'T_CONCAT', T_COLON => 'T_COLON', T_MINUS => 'T_MINUS', T_PLUS => 'T_PLUS', T_IS_GREATER => 'T_IS_GREATER', T_IS_SMALLER => 'T_IS_SMALLER', T_MULTIPLY => 'T_MULTIPLY', T_DIVIDE => 'T_DIVIDE', T_QUESTION_MARK => 'T_QUESTION_MARK', T_MODULO => 'T_MODULO', T_EXCLAMATION_MARK => 'T_EXCLAMATION_MARK', T_AMPERSAND => 'T_AMPERSAND', T_SQUARE_BRACKET_OPEN => 'T_SQUARE_BRACKET_OPEN', T_SQUARE_BRACKET_CLOSE => 'T_SQUARE_BRACKET_CLOSE', T_AROBAS => 'T_AROBAS', T_UNKNOWN => 'T_UNKNOWN', T_DOLLAR => 'T_DOLLAR', ); if (isset($tagNames[$this->id])) { $result = $tagNames[$this->id]; } else { $result = token_name($this->id); } return $result; }\n\n    ### Response: Return the name of a token, including the NEW_LINE one.\n\n@return String the name of the token.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static ParallelSorter create(Object[] arrays) { Generator gen = new Generator(); gen.setArrays(arrays); return gen.create(); }\n\n    ### Response:",
        "ground_truth": "Create a new ParallelSorter object for a set of arrays. You may\nsort the arrays multiple times via the same ParallelSorter object.\n@param arrays An array of arrays to sort. The arrays may be a mix\nof primitive and non-primitive types, but should all be the same\nlength.\n@param loader ClassLoader for generated class, uses \"current\" if null",
        "predict": " Return the name of a token, including the NEW_LINE one.\n\n@return String the name of the token.\n\n    "
    },
    {
        "ID": 657,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private function getAccountsHtml(&$accounts) { $html = '<h3>Accounts Collection</h3>' . $this->getCollectionInfoHtml($accounts); $items = $accounts->getItems(); if (count($items) == 0) { $html .= '<p>No Accounts Found</p>'; } else { foreach($items as &$account) { $html .= <<<HTML <hr> <pre> Account ID = {$account->getId()} Kind = {$account->getKind()} Self Link = {$account->getSelfLink()} Account Name = {$account->getName()} Created = {$account->getCreated()} Updated = {$account->getUpdated()} </pre> HTML; } } return $html; }\n\n    ### Response: Returns important information from the accounts collection.\n@param Accounts $accounts The result from the API.\n@return string An HTML representation..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void quickSort(int index, int lo, int hi, Comparator cmp) { chooseComparer(index, cmp); super.quickSort(lo, hi - 1); }\n\n    ### Response:",
        "ground_truth": "Sort the arrays using the quicksort algorithm.\n@param index array (column) to sort by\n@param lo starting array index (row), inclusive\n@param hi ending array index (row), exclusive\n@param cmp Comparator to use if the specified column is non-primitive",
        "predict": " Returns important information from the accounts collection.\n@param Accounts $accounts The result from the API.\n@return string An HTML representation..\n\n    "
    },
    {
        "ID": 658,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _parse_tag(self): \"\"\"Parse an HTML tag at the head of the wikicode string.\"\"\" reset = self._head self._head += 1 try: tag = self._really_parse_tag() except BadRoute: self._head = reset self._emit_text(\"<\") else: self._emit_all(tag)\n\n    ### Response: Parse an HTML tag at the head of the wikicode string..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void mergeSort(int index, int lo, int hi, Comparator cmp) { chooseComparer(index, cmp); super.mergeSort(lo, hi - 1); }\n\n    ### Response:",
        "ground_truth": "Sort the arrays using an in-place merge sort.\n@param index array (column) to sort by\n@param lo starting array index (row), inclusive\n@param hi ending array index (row), exclusive\n@param cmp Comparator to use if the specified column is non-primitive",
        "predict": " Parse an HTML tag at the head of the wikicode string..\n\n    "
    },
    {
        "ID": 659,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _processDatatypes(self, rm, ci, smi, sai, si): \"\"\"Helper function that returns a list of datatype strings, depending on the parameters boolean value. :param rm: bool, True to add ``rm`` :param ci: bool, True to add ``ci`` :param smi: bool, True to add ``smi`` :param sai: bool, True to add ``sai`` :param si: bool, True to add ``si`` :returns: [datatype1, ...] \"\"\" datatypes = list() for datatype, value in [('rm', rm), ('ci', ci), ('smi', smi), ('sai', sai), ('si', si)]: if value: datatypes.append(datatype) return datatypes\n\n    ### Response: Helper function that returns a list of datatype strings, depending\n        on the parameters boolean value.\n\n        :param rm: bool, True to add ``rm``\n        :param ci: bool, True to add ``ci``\n        :param smi: bool, True to add ``smi``\n        :param sai: bool, True to add ``sai``\n        :param si: bool, True to add ``si``\n\n        :returns: [datatype1, ...].\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Object invoke(Object obj, Object[] args) throws Throwable { try { init(); FastClassInfo fci = fastClassInfo; return fci.f1.invoke(fci.i1, obj, args); } catch (InvocationTargetException e) { throw e.getTargetException(); } catch (IllegalArgumentException e) { if (fastClassInfo.i1 < 0) throw new IllegalArgumentException(\"Protected method: \" + sig1); throw e; } }\n\n    ### Response:",
        "ground_truth": "Invoke the original method, on a different object of the same type.\n@param obj the compatible object; recursion will result if you use the object passed as the first\nargument to the MethodInterceptor (usually not what you want)\n@param args the arguments passed to the intercepted method; you may substitute a different\nargument array as long as the types are compatible\n@see MethodInterceptor#intercept\n@throws Throwable the bare exceptions thrown by the called method are passed through\nwithout wrapping in an InvocationTargetException",
        "predict": " Helper function that returns a list of datatype strings, depending\n        on the parameters boolean value.\n\n        :param rm: bool, True to add ``rm``\n        :param ci: bool, True to add ``ci``\n        :param smi: bool, True to add ``smi``\n        :param sai: bool, True to add ``sai``\n        :param si: bool, True to add ``si``\n\n        :returns: [datatype1, ...].\n\n    "
    },
    {
        "ID": 660,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function arraybuffer2packed(arr, existingPacked, existingPackedLen, bigEndianMod) { var packed, i, existingByteLen, intOffset, byteOffset, shiftModifier, arrView; packed = existingPacked || [0]; existingPackedLen = existingPackedLen || 0; existingByteLen = existingPackedLen >>> 3; shiftModifier = (bigEndianMod === -1) ? 3 : 0; arrView = new Uint8Array(arr); for (i = 0; i < arr.byteLength; i += 1) { byteOffset = i + existingByteLen; intOffset = byteOffset >>> 2; if (packed.length <= intOffset) { packed.push(0); } packed[intOffset] |= arrView[i] << (8 * (shiftModifier + bigEndianMod * (byteOffset % 4))); } return {\"value\" : packed, \"binLen\" : arr.byteLength * 8 + existingPackedLen}; }\n\n    ### Response: Convert an ArrayBuffer to an array of big-endian words\n\n@private\n@param {ArrayBuffer} arr ArrayBuffer to be converted to binary\nrepresentation\n@param {Array} existingPacked A packed int array of bytes to\nappend the results to\n@param {number} existingPackedLen The number of bits in the existingPacked\narray\n@param {number} bigEndianMod Modifier for whether hash function is\nbig or small endian\n@return {{value : Array, binLen : number}} Hash list where\n\"value\" contains the output number array and \"binLen\" is the binary\nlength of \"value\".\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void cast_numeric(Type from, Type to) { if (from != to) { if (from == Type.DOUBLE_TYPE) { if (to == Type.FLOAT_TYPE) { mv.visitInsn(Constants.D2F); } else if (to == Type.LONG_TYPE) { mv.visitInsn(Constants.D2L); } else { mv.visitInsn(Constants.D2I); cast_numeric(Type.INT_TYPE, to); } } else if (from == Type.FLOAT_TYPE) { if (to == Type.DOUBLE_TYPE) { mv.visitInsn(Constants.F2D); } else if (to == Type.LONG_TYPE) { mv.visitInsn(Constants.F2L); } else { mv.visitInsn(Constants.F2I); cast_numeric(Type.INT_TYPE, to); } } else if (from == Type.LONG_TYPE) { if (to == Type.DOUBLE_TYPE) { mv.visitInsn(Constants.L2D); } else if (to == Type.FLOAT_TYPE) { mv.visitInsn(Constants.L2F); } else { mv.visitInsn(Constants.L2I); cast_numeric(Type.INT_TYPE, to); } } else { if (to == Type.BYTE_TYPE) { mv.visitInsn(Constants.I2B); } else if (to == Type.CHAR_TYPE) { mv.visitInsn(Constants.I2C); } else if (to == Type.DOUBLE_TYPE) { mv.visitInsn(Constants.I2D); } else if (to == Type.FLOAT_TYPE) { mv.visitInsn(Constants.I2F); } else if (to == Type.LONG_TYPE) { mv.visitInsn(Constants.I2L); } else if (to == Type.SHORT_TYPE) { mv.visitInsn(Constants.I2S); } } } }\n\n    ### Response:",
        "ground_truth": "Casts from one primitive numeric type to another",
        "predict": " Convert an ArrayBuffer to an array of big-endian words\n\n@private\n@param {ArrayBuffer} arr ArrayBuffer to be converted to binary\nrepresentation\n@param {Array} existingPacked A packed int array of bytes to\nappend the results to\n@param {number} existingPackedLen The number of bits in the existingPacked\narray\n@param {number} bigEndianMod Modifier for whether hash function is\nbig or small endian\n@return {{value : Array, binLen : number}} Hash list where\n\"value\" contains the output number array and \"binLen\" is the binary\nlength of \"value\".\n\n    "
    },
    {
        "ID": 661,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (s modelShim) Model() credentialcommon.PersistentBackend { return credentialcommon.NewPersistentBackend(s.PooledState.State) }\n\n    ### Response: // Model implements PooledModelBackend.Model..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void load_arg(int index) { load_local(state.argumentTypes[index], state.localOffset + skipArgs(index)); }\n\n    ### Response:",
        "ground_truth": "Pushes the specified argument of the current method onto the stack.\n@param index the zero-based index into the argument list",
        "predict": " // Model implements PooledModelBackend.Model..\n\n    "
    },
    {
        "ID": 662,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def check_gps_status(self, gps_status_int): \"\"\" check the GPS status \"\"\" gps_mode_string = self.gps_mode.get(gps_status_int, \"unknown\") if gps_mode_string == \"unknown\": return unknown, (\"GPS status: \" + gps_mode_string) elif gps_mode_string != \"normalOperation\" \\ and gps_mode_string != \"gpsSync\": # that is a warning condition, NTP could still work without the GPS antenna return warning, (\"GPS status: \" + gps_mode_string) return None\n\n    ### Response: check the GPS status.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    void emit_field(int opcode, Type ctype, String name, Type ftype) { mv.visitFieldInsn(opcode, ctype.getInternalName(), name, ftype.getDescriptor()); }\n\n    ### Response:",
        "ground_truth": "package-protected for EmitUtils, try to fix",
        "predict": " check the GPS status.\n\n    "
    },
    {
        "ID": 663,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _derive_stereographic(): \"\"\"Compute the formulae to cut-and-paste into the routine below.\"\"\" from sympy import symbols, atan2, acos, rot_axis1, rot_axis3, Matrix x_c, y_c, z_c, x, y, z = symbols('x_c y_c z_c x y z') # The angles we'll need to rotate through. around_z = atan2(x_c, y_c) around_x = acos(-z_c) # Apply rotations to produce an \"o\" = output vector. v = Matrix([x, y, z]) xo, yo, zo = rot_axis1(around_x) * rot_axis3(-around_z) * v # Which we then use the stereographic projection to produce the # final \"p\" = plotting coordinates. xp = xo / (1 - zo) yp = yo / (1 - zo) return xp, yp\n\n    ### Response: Compute the formulae to cut-and-paste into the routine below..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void zero_or_null(Type type) { if (TypeUtils.isPrimitive(type)) { switch (type.getSort()) { case Type.DOUBLE: push(0d); break; case Type.LONG: push(0L); break; case Type.FLOAT: push(0f); break; case Type.VOID: aconst_null(); default: push(0); } } else { aconst_null(); } }\n\n    ### Response:",
        "ground_truth": "Pushes a zero onto the stack if the argument is a primitive class, or a null otherwise.",
        "predict": " Compute the formulae to cut-and-paste into the routine below..\n\n    "
    },
    {
        "ID": 664,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (m *Machine) ActiveSubnets() ([]names.SubnetTag, error) { var results params.StringsResults args := params.Entities{ Entities: []params.Entity{{Tag: m.tag.String()}}, } err := m.st.facade.FacadeCall(\"GetMachineActiveSubnets\", args, &results) if err != nil { return nil, err } if len(results.Results) != 1 { return nil, fmt.Errorf(\"expected 1 result, got %d\", len(results.Results)) } result := results.Results[0] if result.Error != nil { return nil, result.Error } // Convert string tags to names.SubnetTag before returning. tags := make([]names.SubnetTag, len(result.Result)) for i, tag := range result.Result { var subnetTag names.SubnetTag if tag != \"\" { subnetTag, err = names.ParseSubnetTag(tag) if err != nil { return nil, err } } tags[i] = subnetTag } return tags, nil }\n\n    ### Response: // ActiveSubnets returns a list of subnet tags for which the machine has opened\n// ports..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void unbox_or_zero(Type type) { if (TypeUtils.isPrimitive(type)) { if (type != Type.VOID_TYPE) { Label nonNull = make_label(); Label end = make_label(); dup(); ifnonnull(nonNull); pop(); zero_or_null(type); goTo(end); mark(nonNull); unbox(type); mark(end); } } else { checkcast(type); } }\n\n    ### Response:",
        "ground_truth": "Unboxes the object on the top of the stack. If the object is null, the\nunboxed primitive value becomes zero.",
        "predict": " // ActiveSubnets returns a list of subnet tags for which the machine has opened\n// ports..\n\n    "
    },
    {
        "ID": 665,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (cm *ClientManager) refreshCapacity() { totalCapacity := float64(cm.totalRecharge) * math.Exp(cm.capLogFactor) if totalCapacity >= cm.totalCapacity*0.999 && totalCapacity <= cm.totalCapacity*1.001 { return } cm.totalCapacity = totalCapacity if cm.totalCapacityCh != nil { select { case cm.totalCapacityCh <- uint64(cm.totalCapacity): default: } } }\n\n    ### Response: // refreshCapacity recalculates the total capacity value and sends an update to the subscription\n// channel if the relative change of the value since the last update is more than 0.1 percent.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void process_array(CodeEmitter e, Type type, ProcessArrayCallback callback) { Type componentType = TypeUtils.getComponentType(type); Local array = e.make_local(); Local loopvar = e.make_local(Type.INT_TYPE); Label loopbody = e.make_label(); Label checkloop = e.make_label(); e.store_local(array); e.push(0); e.store_local(loopvar); e.goTo(checkloop); e.mark(loopbody); e.load_local(array); e.load_local(loopvar); e.array_load(componentType); callback.processElement(componentType); e.iinc(loopvar, 1); e.mark(checkloop); e.load_local(loopvar); e.load_local(array); e.arraylength(); e.if_icmp(e.LT, loopbody); }\n\n    ### Response:",
        "ground_truth": "Process an array on the stack. Assumes the top item on the stack\nis an array of the specified type. For each element in the array,\nputs the element on the stack and triggers the callback.\n@param type the type of the array (type.isArray() must be true)\n@param callback the callback triggered for each element",
        "predict": " // refreshCapacity recalculates the total capacity value and sends an update to the subscription\n// channel if the relative change of the value since the last update is more than 0.1 percent.\n\n    "
    },
    {
        "ID": 666,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def timezone(client, location, timestamp=None, language=None): \"\"\"Get time zone for a location on the earth, as well as that location's time offset from UTC. :param location: The latitude/longitude value representing the location to look up. :type location: string, dict, list, or tuple :param timestamp: Timestamp specifies the desired time as seconds since midnight, January 1, 1970 UTC. The Time Zone API uses the timestamp to determine whether or not Daylight Savings should be applied. Times before 1970 can be expressed as negative values. Optional. Defaults to ``datetime.utcnow()``. :type timestamp: int or datetime.datetime :param language: The language in which to return results. :type language: string :rtype: dict \"\"\" params = { \"location\": convert.latlng(location), \"timestamp\": convert.time(timestamp or datetime.utcnow()) } if language: params[\"language\"] = language return client._request( \"/maps/api/timezone/json\", params)\n\n    ### Response: Get time zone for a location on the earth, as well as that location's\n    time offset from UTC.\n\n    :param location: The latitude/longitude value representing the location to\n        look up.\n    :type location: string, dict, list, or tuple\n\n    :param timestamp: Timestamp specifies the desired time as seconds since\n        midnight, January 1, 1970 UTC. The Time Zone API uses the timestamp to\n        determine whether or not Daylight Savings should be applied. Times\n        before 1970 can be expressed as negative values. Optional. Defaults to\n        ``datetime.utcnow()``.\n    :type timestamp: int or datetime.datetime\n\n    :param language: The language in which to return results.\n    :type language: string\n\n    :rtype: dict.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static void nullcmp(CodeEmitter e, Label oneNull, Label bothNull) { e.dup2(); Label nonNull = e.make_label(); Label oneNullHelper = e.make_label(); Label end = e.make_label(); e.ifnonnull(nonNull); e.ifnonnull(oneNullHelper); e.pop2(); e.goTo(bothNull); e.mark(nonNull); e.ifnull(oneNullHelper); e.goTo(end); e.mark(oneNullHelper); e.pop2(); e.goTo(oneNull); e.mark(end); }\n\n    ### Response:",
        "ground_truth": "If both objects on the top of the stack are non-null, does nothing.\nIf one is null, or both are null, both are popped off and execution\nbranches to the respective label.\n@param oneNull label to branch to if only one of the objects is null\n@param bothNull label to branch to if both of the objects are null",
        "predict": " Get time zone for a location on the earth, as well as that location's\n    time offset from UTC.\n\n    :param location: The latitude/longitude value representing the location to\n        look up.\n    :type location: string, dict, list, or tuple\n\n    :param timestamp: Timestamp specifies the desired time as seconds since\n        midnight, January 1, 1970 UTC. The Time Zone API uses the timestamp to\n        determine whether or not Daylight Savings should be applied. Times\n        before 1970 can be expressed as negative values. Optional. Defaults to\n        ``datetime.utcnow()``.\n    :type timestamp: int or datetime.datetime\n\n    :param language: The language in which to return results.\n    :type language: string\n\n    :rtype: dict.\n\n    "
    },
    {
        "ID": 667,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (app *App) ListenAndServeAutoTLS(addr string, cachePath ...string) error { if len(app.TLSEmails) == 0 { return ErrTLSNoEmails } addr, err := normalizeTLSAddr(addr) if err != nil { app.internalLog.Errorf(\"Bad address %q: %s\", addr, err) } ln, err := net.Listen(\"tcp\", addr) if err != nil { app.internalLog.Errorf(\"Can't serve %q: %s\", addr, err) return err } letscache := getCachePath() if len(cachePath) > 0 { letscache = cachePath[0] } s := rand.NewSource(time.Now().Unix()) r := rand.New(s) m := autocert.Manager{ Prompt: autocert.AcceptTOS, Email: app.TLSEmails[r.Intn(len(app.TLSEmails))], } if letscache != \"\" { m.Cache = autocert.DirCache(letscache) } tlsConfig := getDefaultTLSConfig() tlsConfig.GetCertificate = func(hello *tls.ClientHelloInfo) (cert *tls.Certificate, err error) { if len(hello.ServerName) == 0 || hello.ServerName == localhost { hello.ServerName = localhost cert, err = selfSignedCertificate(hello) } else { cert, err = m.GetCertificate(hello) } if err != nil { app.internalLog.Errorf(\"Can't get cert for %q: %s\", hello.ServerName, err) } return cert, err } tlsLn := tls.NewListener(ln, tlsConfig) l := app.internalLog.WithField(\"bind\", addr) l.Info(\"Starting HTTPS\") srv := app.copyServer() app.runningServersMu.Lock() app.runningServers = append(app.runningServers, runningServerInfo{ bind: addr, srv: srv, }) app.runningServersMu.Unlock() if err = srv.Serve(tlsLn); err != nil { app.internalLog.Errorf(\"Can't serve: %s\", err) } return err }\n\n    ### Response: // ListenAndServeAutoTLS serves TLS requests.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Map/*<Signature, Signature>*/resolveAll() { Map resolved = new HashMap(); for (Iterator entryIter = declToBridge.entrySet().iterator(); entryIter.hasNext(); ) { Map.Entry entry = (Map.Entry) entryIter.next(); Class owner = (Class) entry.getKey(); Set bridges = (Set) entry.getValue(); try { InputStream is = classLoader.getResourceAsStream(owner.getName().replace('.', '/') + \".class\"); if (is == null) { return resolved; } try { new ClassReader(is) .accept(new BridgedFinder(bridges, resolved), ClassReader.SKIP_FRAMES | ClassReader.SKIP_DEBUG); } finally { is.close(); } } catch (IOException ignored) {} } return resolved; }\n\n    ### Response:",
        "ground_truth": "Finds all bridge methods that are being called with invokespecial &\nreturns them.",
        "predict": " // ListenAndServeAutoTLS serves TLS requests.\n\n    "
    },
    {
        "ID": 668,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (o *MergePlanOptions) RaiseToFloorSegmentSize(s int64) int64 { if s > o.FloorSegmentSize { return s } return o.FloorSegmentSize }\n\n    ### Response: // Returns the higher of the input or FloorSegmentSize..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void getMethods(Class superclass, Class[] interfaces, List methods) { getMethods(superclass, interfaces, methods, null, null); }\n\n    ### Response:",
        "ground_truth": "Finds all of the methods that will be extended by an\nEnhancer-generated class using the specified superclass and\ninterfaces. This can be useful in building a list of Callback\nobjects. The methods are added to the end of the given list.  Due\nto the subclassing nature of the classes generated by Enhancer,\nthe methods are guaranteed to be non-static, non-final, and\nnon-private. Each method signature will only occur once, even if\nit occurs in multiple classes.\n@param superclass the class that will be extended, or null\n@param interfaces the list of interfaces that will be implemented, or null\n@param methods the list into which to copy the applicable methods",
        "predict": " // Returns the higher of the input or FloorSegmentSize..\n\n    "
    },
    {
        "ID": 669,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def calcHorizonPoints(self): '''Updates the verticies of the patches for the ground and sky.''' ydiff = math.tan(math.radians(-self.roll))*float(self.ratio) pitchdiff = self.dist10deg*(self.pitch/10.0) # Sky Polygon vertsTop = [(-self.ratio,ydiff-pitchdiff),(-self.ratio,1),(self.ratio,1),(self.ratio,-ydiff-pitchdiff),(-self.ratio,ydiff-pitchdiff)] self.topPolygon.set_xy(vertsTop) # Ground Polygon vertsBot = [(-self.ratio,ydiff-pitchdiff),(-self.ratio,-1),(self.ratio,-1),(self.ratio,-ydiff-pitchdiff),(-self.ratio,ydiff-pitchdiff)] self.botPolygon.set_xy(vertsBot)\n\n    ### Response: Updates the verticies of the patches for the ground and sky..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void filterConstructors(Class sc, List constructors) { CollectionUtils.filter(constructors, new VisibilityPredicate(sc, true)); if (constructors.size() == 0) throw new IllegalArgumentException(\"No visible constructors in \" + sc); }\n\n    ### Response:",
        "ground_truth": "Filter the list of constructors from the superclass. The\nconstructors which remain will be included in the generated\nclass. The default implementation is to filter out all private\nconstructors, but subclasses may extend Enhancer to override this\nbehavior.\n@param sc the superclass\n@param constructors the list of all declared constructors from the superclass\n@throws IllegalArgumentException if there are no non-private constructors",
        "predict": " Updates the verticies of the patches for the ground and sky..\n\n    "
    },
    {
        "ID": 670,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected final int bindLimitParameters(RowSelection selection, PreparedStatement statement, int index) throws SQLException { if (!supportsVariableLimit() || !LimitHelper.hasMaxRows(selection)) { return 0; } final int firstRow = convertToFirstRowValue(LimitHelper.getFirstRow(selection)); final int lastRow = getMaxOrLimit(selection); final boolean hasFirstRow = supportsLimitOffset() && (firstRow > 0 || forceLimitUsage()); final boolean reverse = bindLimitParametersInReverseOrder(); if (hasFirstRow) { statement.setInt(index + (reverse ? 1 : 0), firstRow); } statement.setInt(index + (reverse || !hasFirstRow ? 0 : 1), lastRow); return hasFirstRow ? 2 : 1; }\n\n    ### Response: Default implementation of binding parameter values needed by the LIMIT clause.\n\n@param selection the selection criteria for rows.\n@param statement Statement to which to bind limit parameter values.\n@param index Index from which to start binding.\n@return The number of parameter values bound.\n@throws SQLException Indicates problems binding parameter values..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void setSuperclass(Class superclass) { if (superclass != null && superclass.equals(Object.class)) { superclass = null; } this.superclass = superclass; }\n\n    ### Response:",
        "ground_truth": "Set the class which the generated class will extend. The class\nmust not be declared as final, and must have a non-private\nno-argument constructor.\n@param superclass class to extend, or null to extend Object",
        "predict": " Default implementation of binding parameter values needed by the LIMIT clause.\n\n@param selection the selection criteria for rows.\n@param statement Statement to which to bind limit parameter values.\n@param index Index from which to start binding.\n@return The number of parameter values bound.\n@throws SQLException Indicates problems binding parameter values..\n\n    "
    },
    {
        "ID": 671,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void offerNextImage() { if (oadState == OADState.OFFERING_IMAGES) { try { currentImage = firmwareBundle.getNextImage(); if (currentImage != null) { Log.i(TAG, \"Offering image: \" + currentImage.name()); writeToCharacteristic(oadIdentify, currentImage.metadata()); } } catch (OADException e) { // This gets thrown if the firmware bundle is \"exhausted\", meaning the Bean // has rejected all of the images in the bundle Log.e(TAG, e.getMessage()); fail(BeanError.BEAN_REJECTED_FW); } } else { Log.e(TAG, \"Got notification on OAD Identify while in unexpected state: \" + oadState); } }\n\n    ### Response: Offer the next image available in the Firmware Bundle.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void getField(String[] names) throws Exception { final CodeEmitter e = begin_method(Constants.ACC_PUBLIC, PROVIDER_GET, null); e.load_this(); e.load_arg(0); EmitUtils.string_switch(e, names, Constants.SWITCH_STYLE_HASH, new ObjectSwitchCallback() { public void processCase(Object key, Label end) { Type type = (Type)fields.get(key); e.getfield((String)key); e.box(type); e.return_value(); } public void processDefault() { e.throw_exception(ILLEGAL_ARGUMENT_EXCEPTION, \"Unknown field name\"); } }); e.end_method(); }\n\n    ### Response:",
        "ground_truth": "to avoid JVM hashcode implementation incompatibilities",
        "predict": " Offer the next image available in the Firmware Bundle.\n\n    "
    },
    {
        "ID": 672,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def clean_ret_type(ret_type): \"\"\"Clean the erraneous parsed return type.\"\"\" ret_type = get_printable(ret_type).strip() if ret_type == 'LRESULT LRESULT': ret_type = 'LRESULT' for bad in [ 'DECLSPEC_NORETURN', 'NTSYSCALLAPI', '__kernel_entry', '__analysis_noreturn', '_Post_equals_last_error_', '_Maybe_raises_SEH_exception_', '_CRT_STDIO_INLINE', '_ACRTIMP' ]: if bad in ret_type: ret_type = ret_type.replace(bad, '').strip() logging.debug(_('cleaned %s'), bad) return ret_type\n\n    ### Response: Clean the erraneous parsed return type..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void add(Method method) { add(ReflectUtils.getSignature(method), ReflectUtils.getExceptionTypes(method)); }\n\n    ### Response:",
        "ground_truth": "Add a method signature to the interface. The method modifiers are ignored,\nsince interface methods are by definition abstract and public.\n@param method the method to add to the interface",
        "predict": " Clean the erraneous parsed return type..\n\n    "
    },
    {
        "ID": 673,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _merge_extra_filerefs(*args): ''' Takes a list of filerefs and returns a merged list ''' ret = [] for arg in args: if isinstance(arg, six.string_types): if arg: ret.extend(arg.split(',')) elif isinstance(arg, list): if arg: ret.extend(arg) return ','.join(ret)\n\n    ### Response: Takes a list of filerefs and returns a merged list.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public int cardinality() { int w = value; int c = 0; while (w != 0) { c += T[w & 255]; w >>= 8; } return c; }\n\n    ### Response:",
        "ground_truth": "If bit 31 is set then this method results in an infinite loop.\n\n@return the number of bits set to true in this TinyBitSet.",
        "predict": " Takes a list of filerefs and returns a merged list.\n\n    "
    },
    {
        "ID": 674,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function makeJson(string $method, $params = []) : array { return [ 'json' => [ 'method' => $this->config['preserve_case'] ? $method : strtolower($method), 'params' => (array) $params, 'id' => $this->rpcId++, ], ]; }\n\n    ### Response: Construct json request.\n\n@param string $method\n@param mixed  $params\n\n@return array.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void setNamingPolicy(NamingPolicy namingPolicy) { if (namingPolicy == null) namingPolicy = DefaultNamingPolicy.INSTANCE; this.namingPolicy = namingPolicy; }\n\n    ### Response:",
        "ground_truth": "Override the default naming policy.\n@see DefaultNamingPolicy\n@param namingPolicy the custom policy, or null to use the default",
        "predict": " Construct json request.\n\n@param string $method\n@param mixed  $params\n\n@return array.\n\n    "
    },
    {
        "ID": 675,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func ValidChallenge(name string) bool { switch name { case ChallengeTypeHTTP01, ChallengeTypeDNS01, ChallengeTypeTLSALPN01: return true default: return false } }\n\n    ### Response: // ValidChallenge tests whether the provided string names a known challenge.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Method[] findMethods(String[] namesAndDescriptors, Method[] methods) { Map map = new HashMap(); for (int i = 0; i < methods.length; i++) { Method method = methods[i]; map.put(method.getName() + Type.getMethodDescriptor(method), method); } Method[] result = new Method[namesAndDescriptors.length / 2]; for (int i = 0; i < result.length; i++) { result[i] = (Method)map.get(namesAndDescriptors[i * 2] + namesAndDescriptors[i * 2 + 1]); if (result[i] == null) { // TODO: error? } } return result; }\n\n    ### Response:",
        "ground_truth": "used by MethodInterceptorGenerated generated code",
        "predict": " // ValidChallenge tests whether the provided string names a known challenge.\n\n    "
    },
    {
        "ID": 676,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function refreshDocumentForDeleteDraft(RemoveDraftEvent $event) { $this->rehydrateDocument($event->getDocument(), $event->getNode(), $event->getLocale()); }\n\n    ### Response: Refreshes the document after a draft have been removed.\n\n@param RemoveDraftEvent $event.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Path resolve(final Path base, String child) { if (StringUtil.startsWithChar(child, File.separatorChar)) { child = child.substring(1); } return base.resolve(child); }\n\n    ### Response:",
        "ground_truth": "Resolves subpath in safer way. For some reason, if child starts with\na separator it gets resolved as a full path, ignoring the base.\nThis method acts different.",
        "predict": " Refreshes the document after a draft have been removed.\n\n@param RemoveDraftEvent $event.\n\n    "
    },
    {
        "ID": 677,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public ApiResponse postUserActivity(String userId, Activity activity) { return apiRequest(HttpMethod.POST, null, activity, organizationId, applicationId, \"users\", userId, \"activities\"); }\n\n    ### Response: Posts an activity to a user. Activity must already be created.\n\n@param userId\n@param activity\n@return.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String readString(final Path path) throws IOException { try (BufferedReader reader = Files.newBufferedReader(path, StandardCharsets.UTF_8)) { StringWriter writer = new StringWriter(); // flush & close not needed for StringWriter-instance StreamUtil.copy(reader, writer); return writer.toString(); } }\n\n    ### Response:",
        "ground_truth": "Reads path content.",
        "predict": " Posts an activity to a user. Activity must already be created.\n\n@param userId\n@param activity\n@return.\n\n    "
    },
    {
        "ID": 678,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void trace(String msg) { logger.log(FQCN, traceCapable ? Level.TRACE : Level.DEBUG, msg, null); }\n\n    ### Response: Log a message object at level TRACE.\n\n@param msg\n- the message object to be logged.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public HttpRequest host(final String host) { this.host = host; if (headers.contains(HEADER_HOST)) { headerOverwrite(HEADER_HOST, host); } return this; }\n\n    ### Response:",
        "ground_truth": "Sets request host name.",
        "predict": " Log a message object at level TRACE.\n\n@param msg\n- the message object to be logged.\n\n    "
    },
    {
        "ID": 679,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function concat(...$others) { return static::of( Std::foldl( function ($carry, $part) { return $carry . (string) $part; }, $this->contents, $others ), $this->encoding ); }\n\n    ### Response: Concatenate with other strings.\n\n@param array ...$others\n\n@return Rope.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static HttpRequest create(final String method, final String destination) { return new HttpRequest() .method(method.toUpperCase()) .set(destination); }\n\n    ### Response:",
        "ground_truth": "Generic request builder, usually used when method is a variable.\nOtherwise, use one of the other static request builder methods.",
        "predict": " Concatenate with other strings.\n\n@param array ...$others\n\n@return Rope.\n\n    "
    },
    {
        "ID": 680,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func NewEncoder(s encoding.Sink) encoding.Encoder { w := s() return encoding.EncoderFunc(func(m encoding.Marshaler) error { b, err := json.Marshal(m) if err != nil { return err } return w.WriteFrame(b) }) }\n\n    ### Response: // NewEncoder returns a new Encoder of Calls to JSON messages written to\n// the given io.Writer..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static HttpRequest connect(final String destination) { return new HttpRequest() .method(HttpMethod.CONNECT) .set(destination); }\n\n    ### Response:",
        "ground_truth": "Builds a CONNECT request.",
        "predict": " // NewEncoder returns a new Encoder of Calls to JSON messages written to\n// the given io.Writer..\n\n    "
    },
    {
        "ID": 681,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def speed_info(self): \"\"\"Retrieves information about supported target interface speeds. Args: self (JLink): the ``JLink`` instance Returns: The ``JLinkSpeedInfo`` instance describing the supported target interface speeds. \"\"\" speed_info = structs.JLinkSpeedInfo() self._dll.JLINKARM_GetSpeedInfo(ctypes.byref(speed_info)) return speed_info\n\n    ### Response: Retrieves information about supported target interface speeds.\n\n        Args:\n          self (JLink): the ``JLink`` instance\n\n        Returns:\n          The ``JLinkSpeedInfo`` instance describing the supported target\n          interface speeds..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static HttpRequest get(final String destination) { return new HttpRequest() .method(HttpMethod.GET) .set(destination); }\n\n    ### Response:",
        "ground_truth": "Builds a GET request.",
        "predict": " Retrieves information about supported target interface speeds.\n\n        Args:\n          self (JLink): the ``JLink`` instance\n\n        Returns:\n          The ``JLinkSpeedInfo`` instance describing the supported target\n          interface speeds..\n\n    "
    },
    {
        "ID": 682,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def get_detailed_transactions(self, include_investment=False, skip_duplicates=False, remove_pending=True, start_date=None): \"\"\"Returns the JSON transaction data as a DataFrame, and converts current year dates and prior year dates into consistent datetime format, and reverses credit activity. Note: start_date must be in format mm/dd/yy. If pulls take too long, use a more recent start date. See json explanations of include_investment and skip_duplicates. Also note: Mint includes pending transactions, however these sometimes change dates/amounts after the transactions post. They have been removed by default in this pull, but can be included by changing remove_pending to False \"\"\" assert_pd() result = self.get_transactions_json(include_investment, skip_duplicates, start_date) df = pd.DataFrame(result) df['odate'] = df['odate'].apply(json_date_to_datetime) if remove_pending: df = df[~df.isPending] df.reset_index(drop=True, inplace=True) df.amount = df.apply(reverse_credit_amount, axis=1) return df\n\n    ### Response: Returns the JSON transaction data as a DataFrame, and converts\n        current year dates and prior year dates into consistent datetime\n        format, and reverses credit activity.\n\n        Note: start_date must be in format mm/dd/yy. If pulls take too long,\n        use a more recent start date. See json explanations of\n        include_investment and skip_duplicates.\n\n        Also note: Mint includes pending transactions, however these sometimes\n        change dates/amounts after the transactions post. They have been\n        removed by default in this pull, but can be included by changing\n        remove_pending to False.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static HttpRequest post(final String destination) { return new HttpRequest() .method(HttpMethod.POST) .set(destination); }\n\n    ### Response:",
        "ground_truth": "Builds a POST request.",
        "predict": " Returns the JSON transaction data as a DataFrame, and converts\n        current year dates and prior year dates into consistent datetime\n        format, and reverses credit activity.\n\n        Note: start_date must be in format mm/dd/yy. If pulls take too long,\n        use a more recent start date. See json explanations of\n        include_investment and skip_duplicates.\n\n        Also note: Mint includes pending transactions, however these sometimes\n        change dates/amounts after the transactions post. They have been\n        removed by default in this pull, but can be included by changing\n        remove_pending to False.\n\n    "
    },
    {
        "ID": 683,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static <Param> PathParamSerializer<Optional<Param>> optional(String name, Function<String, Param> deserialize, Function<Param, String> serialize) { return new NamedPathParamSerializer<Optional<Param>>(\"Optional(\" + name + \")\") { @Override public PSequence<String> serialize(Optional<Param> parameter) { return parameter.map(p -> TreePVector.singleton(serialize.apply(p))).orElse(TreePVector.empty()); } @Override public Optional<Param> deserialize(PSequence<String> parameters) { if (parameters.isEmpty()) { return Optional.empty(); } else { return Optional.of(deserialize.apply(parameters.get(0))); } } }; }\n\n    ### Response: Create a PathParamSerializer for optional parameters..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static HttpRequest put(final String destination) { return new HttpRequest() .method(HttpMethod.PUT) .set(destination); }\n\n    ### Response:",
        "ground_truth": "Builds a PUT request.",
        "predict": " Create a PathParamSerializer for optional parameters..\n\n    "
    },
    {
        "ID": 684,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function getProcessedBody() { $r = preg_split(MailImporter::getMessageBodyHashRegularExpression(), $this->body); $message = $r[0]; $r = preg_replace(array( '/^On (.*) at (.*), (.*) wrote:/sm', '/[\\n\\r\\s\\>]*\\Z/i', ), '', $message); return $r; }\n\n    ### Response: Returns the relevant content of the email message, minus any quotations, and the line that includes the validation hash..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static HttpRequest patch(final String destination) { return new HttpRequest() .method(HttpMethod.PATCH) .set(destination); }\n\n    ### Response:",
        "ground_truth": "Builds a PATCH request.",
        "predict": " Returns the relevant content of the email message, minus any quotations, and the line that includes the validation hash..\n\n    "
    },
    {
        "ID": 685,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function getConstValue($prefix, $id, $key) { $consts = $this->getConsts($prefix); return isset($consts[$id][$key]) ? $consts[$id][$key] : null; }\n\n    ### Response: Returns the constant value by specified id and key\n\n@param string $prefix\n@param int $id\n@param string $key\n@return mixed.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static HttpRequest delete(final String destination) { return new HttpRequest() .method(HttpMethod.DELETE) .set(destination); }\n\n    ### Response:",
        "ground_truth": "Builds a DELETE request.",
        "predict": " Returns the constant value by specified id and key\n\n@param string $prefix\n@param int $id\n@param string $key\n@return mixed.\n\n    "
    },
    {
        "ID": 686,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def save_to(saveToFile = nil) id = save() if id == nil || id == \"\" return false end #Wait for it to be possibly ready sleep((@request.options().startDelay() / 1000) + 3) #Wait for it to be ready. while true do status = get_status(id) if !status.cached && !status.processing raise GrabzItException.new(\"The capture did not complete with the error: \" + status.message, GrabzItException::RENDERING_ERROR) break elsif status.cached result = get_result(id) if !result raise GrabzItException.new(\"The capture could not be found on GrabzIt.\", GrabzItException::RENDERING_MISSING_SCREENSHOT) break end if saveToFile == nil || saveToFile == \"\" return result end screenshot = File.new(saveToFile, \"wb\") screenshot.write(result) screenshot.close break end sleep(3) end return true end\n\n    ### Response: Calls the GrabzIt web service to take the screenshot and saves it to the target path provided. if no target path is provided\n it returns the screenshot byte data.\n\n @note Warning, this is a SYNCHONOUS method and can take up to 5 minutes before a response\n @param saveToFile [String, nil] the file path that the screenshot should saved to.\n @example Synchronously save the screenshot to test.jpg\n   save_to('images/test.jpg')\n @raise [RuntimeError] if the screenshot cannot be saved a RuntimeError will be raised that will contain an explanation\n @return [Boolean] returns the true if it is successfully saved to a file, otherwise if a target path is not provided it returns the screenshot's byte data..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static HttpRequest head(final String destination) { return new HttpRequest() .method(HttpMethod.HEAD) .set(destination); }\n\n    ### Response:",
        "ground_truth": "Builds a HEAD request.",
        "predict": " Calls the GrabzIt web service to take the screenshot and saves it to the target path provided. if no target path is provided\n it returns the screenshot byte data.\n\n @note Warning, this is a SYNCHONOUS method and can take up to 5 minutes before a response\n @param saveToFile [String, nil] the file path that the screenshot should saved to.\n @example Synchronously save the screenshot to test.jpg\n   save_to('images/test.jpg')\n @raise [RuntimeError] if the screenshot cannot be saved a RuntimeError will be raised that will contain an explanation\n @return [Boolean] returns the true if it is successfully saved to a file, otherwise if a target path is not provided it returns the screenshot's byte data..\n\n    "
    },
    {
        "ID": 687,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function block($twitter_id, $parameters = []) { if (!is_numeric($twitter_id)) { return false; } $slug = 'blocks/create'; $default_parameters = [ 'user_id' => $twitter_id, 'include_entities' => false, 'skip_status' => false, ]; $parameters = array_merge($default_parameters, $parameters); return $this->post($slug, $parameters); }\n\n    ### Response: Block a given user.\n\n@param Int $twitter_id\n@param Array $parameters [optional] Any extra parameters\n\n@return return\n\n@author Julio Foulqui\u00e9 .\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static HttpRequest trace(final String destination) { return new HttpRequest() .method(HttpMethod.TRACE) .set(destination); }\n\n    ### Response:",
        "ground_truth": "Builds a TRACE request.",
        "predict": " Block a given user.\n\n@param Int $twitter_id\n@param Array $parameters [optional] Any extra parameters\n\n@return return\n\n@author Julio Foulqui\u00e9 .\n\n    "
    },
    {
        "ID": 688,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (r *GormWorkItemLinkRepository) WorkItemHasChildren(ctx context.Context, parentID uuid.UUID) (bool, error) { defer goa.MeasureSince([]string{\"goa\", \"db\", \"workitemlink\", \"has\", \"children\"}, time.Now()) query := fmt.Sprintf(` SELECT EXISTS ( SELECT 1 FROM %[1]s WHERE id in ( SELECT target_id FROM %[2]s WHERE source_id = $1 AND deleted_at IS NULL AND link_type_id = $2 ) )`, workitem.WorkItemStorage{}.TableName(), WorkItemLink{}.TableName()) var hasChildren bool db := r.db.CommonDB() stmt, err := db.Prepare(query) if err != nil { return false, errs.Wrapf(err, \"failed prepare statement: %s\", query) } defer closeable.Close(ctx, stmt) err = stmt.QueryRow(parentID.String(), SystemWorkItemLinkTypeParentChildID.String()).Scan(&hasChildren) if err != nil { return false, errs.Wrapf(err, \"failed to check if work item %s has children: %s\", parentID.String(), query) } return hasChildren, nil }\n\n    ### Response: // WorkItemHasChildren returns true if the given parent work item has children;\n// otherwise false is returned.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static HttpRequest options(final String destination) { return new HttpRequest() .method(HttpMethod.OPTIONS) .set(destination); }\n\n    ### Response:",
        "ground_truth": "Builds an OPTIONS request.",
        "predict": " // WorkItemHasChildren returns true if the given parent work item has children;\n// otherwise false is returned.\n\n    "
    },
    {
        "ID": 689,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def format_content_type(repo, content_type): \"\"\" Return a list of all content objects for a given content type in a repository. :param Repo repo: The git repository. :param str content_type: The content type to list :returns: list \"\"\" storage_manager = StorageManager(repo) model_class = load_model_class(repo, content_type) return [dict(model_obj) for model_obj in storage_manager.iterate(model_class)]\n\n    ### Response: Return a list of all content objects for a given content type\n    in a repository.\n\n    :param Repo repo:\n        The git repository.\n    :param str content_type:\n        The content type to list\n    :returns: list.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public HttpRequest path(String path) { // this must be the only place that sets the path if (!path.startsWith(StringPool.SLASH)) { path = StringPool.SLASH + path; } int ndx = path.indexOf('?'); if (ndx != -1) { String queryString = path.substring(ndx + 1); path = path.substring(0, ndx); query = HttpUtil.parseQuery(queryString, true); } else { query = HttpMultiMap.newCaseInsensitiveMap(); } this.path = path; return this; }\n\n    ### Response:",
        "ground_truth": "Sets request path. Query string is allowed.\nAdds a slash if path doesn't start with one.\nQuery will be stripped out from the path.\nPrevious query is discarded.\n@see #query()",
        "predict": " Return a list of all content objects for a given content type\n    in a repository.\n\n    :param Repo repo:\n        The git repository.\n    :param str content_type:\n        The content type to list\n    :returns: list.\n\n    "
    },
    {
        "ID": 690,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def all_composite_ids(self, sensor_names=None): \"\"\"Get all composite IDs that are configured. Returns: generator of configured composite names \"\"\" if sensor_names is None: sensor_names = self.attrs['sensor'] compositors = [] # Note if we get compositors from the dep tree then it will include # modified composites which we don't want for sensor_name in sensor_names: sensor_comps = self.cpl.compositors.get(sensor_name, {}).keys() # ignore inline compositor dependencies starting with '_' compositors.extend(c for c in sensor_comps if not c.name.startswith('_')) return sorted(set(compositors))\n\n    ### Response: Get all composite IDs that are configured.\n\n        Returns: generator of configured composite names.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public HttpRequest cookies(final Cookie... cookies) { if (cookies.length == 0) { return this; } StringBuilder cookieString = new StringBuilder(); boolean first = true; for (Cookie cookie : cookies) { Integer maxAge = cookie.getMaxAge(); if (maxAge != null && maxAge.intValue() == 0) { continue; } if (!first) { cookieString.append(\"; \"); } first = false; cookieString.append(cookie.getName()); cookieString.append('='); cookieString.append(cookie.getValue()); } headerOverwrite(\"cookie\", cookieString.toString()); return this; }\n\n    ### Response:",
        "ground_truth": "Sets cookies to the request.",
        "predict": " Get all composite IDs that are configured.\n\n        Returns: generator of configured composite names.\n\n    "
    },
    {
        "ID": 691,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def gettext(ui_file_path): \"\"\" Let you use gettext instead of the Qt tools for l18n \"\"\" with open(ui_file_path, 'r') as fin: content = fin.read() # replace ``_translate(\"context\", `` by ``_(`` content = re.sub(r'_translate\\(\".*\",\\s', '_(', content) content = content.replace( ' _translate = QtCore.QCoreApplication.translate', '') with open(ui_file_path, 'w') as fout: fout.write(content)\n\n    ### Response: Let you use gettext instead of the Qt tools for l18n.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public HttpRequest query(final String name1, final Object value1, final Object... parameters) { query(name1, value1 == null ? null : value1.toString()); for (int i = 0; i < parameters.length; i += 2) { String name = parameters[i].toString(); String value = parameters[i + 1].toString(); query.add(name, value); } return this; }\n\n    ### Response:",
        "ground_truth": "Adds many query parameters at once. Although it accepts objects,\neach value will be converted to string.",
        "predict": " Let you use gettext instead of the Qt tools for l18n.\n\n    "
    },
    {
        "ID": 692,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function renderedShowFieldStrategies(Model $model) { $views = []; foreach ($this->getModelInformation()->show->fields as $key => $data) { if ( ! $this->allowedToUseShowFieldData($data)) { continue; } try { $instance = $this->getShowFieldFactory()->make($data->strategy); // Feed any extra information we can gather to the instance $instance->setOptions($data->options()); if ($data->source) { if (isset($this->getModelInformation()->attributes[ $data->source ])) { $instance->setAttributeInformation( $this->getModelInformation()->attributes[ $data->source ] ); } } // @codeCoverageIgnoreStart } catch (Exception $e) { $message = \"Failed to make show field strategy for '{$key}': \\n{$e->getMessage()}\"; throw new StrategyRenderException($message, $e->getCode(), $e); // @codeCoverageIgnoreEnd } try { $views[ $key ] = $instance->render($model, $data->source); // @codeCoverageIgnoreStart } catch (Exception $e) { $message = \"Failed to render show field '{$key}' for strategy \" . get_class($instance) . \": \\n{$e->getMessage()}\"; throw new StrategyRenderException($message, $e->getCode(), $e); // @codeCoverageIgnoreEnd } } return $views; }\n\n    ### Response: Renders Vies or HTML for show field strategies.\n\n@param Model $model\n@return View[]|\\string[]\n@throws StrategyRenderException.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public HttpRequest query(final Map<String, String> queryMap) { for (Map.Entry<String, String> entry : queryMap.entrySet()) { query.add(entry.getKey(), entry.getValue()); } return this; }\n\n    ### Response:",
        "ground_truth": "Adds all parameters from the provided map.",
        "predict": " Renders Vies or HTML for show field strategies.\n\n@param Model $model\n@return View[]|\\string[]\n@throws StrategyRenderException.\n\n    "
    },
    {
        "ID": 693,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override protected void setCommsConnection(CommsConnection cc) { if (tc.isEntryEnabled()) SibTr.entry(this, tc, \"setCommsConnection\"); // Retrieve Client Conversation State if necessary validateConversationState(); sConState.setCommsConnection(cc); if (tc.isEntryEnabled()) SibTr.exit(this, tc, \"setCommsConnection\"); }\n\n    ### Response: Sets the CommsConnection associated with this Conversation\n\n@param cc.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public HttpRequest queryString(final String queryString, final boolean decode) { this.query = HttpUtil.parseQuery(queryString, decode); return this; }\n\n    ### Response:",
        "ground_truth": "Sets query from provided query string. Previous query values\nare discarded.",
        "predict": " Sets the CommsConnection associated with this Conversation\n\n@param cc.\n\n    "
    },
    {
        "ID": 694,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public OperationFuture<LoadBalancer> update( LoadBalancer loadBalancer, List<LoadBalancerPoolConfig> configs) { List<LoadBalancerPoolMetadata> poolsForGroup = find( new LoadBalancerPoolFilter().loadBalancers(loadBalancer) ); return new OperationFuture<>( loadBalancer, new ParallelJobsFuture( configs.stream() .map(poolConfig -> createOrUpdate(poolConfig, loadBalancer, poolsForGroup)) .map(OperationFuture::jobFuture) .collect(toList()) ) ); }\n\n    ### Response: Update load balancer pools for group\n\n@param loadBalancer load balancer pool\n@param configs load balancer pool configs\n@return OperationFuture wrapper for load balancer pool.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String queryString() { if (query == null) { return StringPool.EMPTY; } return HttpUtil.buildQuery(query, queryEncoding); }\n\n    ### Response:",
        "ground_truth": "Generates query string. All values are URL encoded.",
        "predict": " Update load balancer pools for group\n\n@param loadBalancer load balancer pool\n@param configs load balancer pool configs\n@return OperationFuture wrapper for load balancer pool.\n\n    "
    },
    {
        "ID": 695,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (s bySpecificity) Less(i, j int) bool { return s[i].Specificity() >= s[j].Specificity() }\n\n    ### Response: // Less returns true if the i element is less specific than j one..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String hostUrl() { StringBand url = new StringBand(8); if (protocol != null) { url.append(protocol); url.append(\"://\"); } if (host != null) { url.append(host); } if (port != Defaults.DEFAULT_PORT) { url.append(':'); url.append(port); } return url.toString(); }\n\n    ### Response:",
        "ground_truth": "Returns just host url, without path and query.",
        "predict": " // Less returns true if the i element is less specific than j one..\n\n    "
    },
    {
        "ID": 696,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def scheme(name, bins, bin_method='quantiles'): \"\"\"Return a custom scheme based on CARTOColors. Args: name (str): Name of a CARTOColor. bins (int or iterable): If an `int`, the number of bins for classifying data. CARTOColors have 7 bins max for quantitative data, and 11 max for qualitative data. If `bins` is a `list`, it is the upper range for classifying data. E.g., `bins` can be of the form ``(10, 20, 30, 40, 50)``. bin_method (str, optional): One of methods in :obj:`BinMethod`. Defaults to ``quantiles``. If `bins` is an interable, then that is the bin method that will be used and this will be ignored. .. Warning:: Input types are particularly sensitive in this function, and little feedback is given for errors. ``name`` and ``bin_method`` arguments are case-sensitive. \"\"\" return { 'name': name, 'bins': bins, 'bin_method': (bin_method if isinstance(bins, int) else ''), }\n\n    ### Response: Return a custom scheme based on CARTOColors.\n\n    Args:\n        name (str): Name of a CARTOColor.\n        bins (int or iterable): If an `int`, the number of bins for classifying\n          data. CARTOColors have 7 bins max for quantitative data, and 11 max\n          for qualitative data. If `bins` is a `list`, it is the upper range\n          for classifying data. E.g., `bins` can be of the form ``(10, 20, 30,\n          40, 50)``.\n        bin_method (str, optional): One of methods in :obj:`BinMethod`.\n          Defaults to ``quantiles``. If `bins` is an interable, then that is\n          the bin method that will be used and this will be ignored.\n\n    .. Warning::\n\n       Input types are particularly sensitive in this function, and little\n       feedback is given for errors. ``name`` and ``bin_method`` arguments\n       are case-sensitive..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public HttpRequest basicAuthentication(final String username, final String password) { if (username != null && password != null) { String data = username.concat(StringPool.COLON).concat(password); String base64 = Base64.encodeToString(data); headerOverwrite(HEADER_AUTHORIZATION, \"Basic \" + base64); } return this; }\n\n    ### Response:",
        "ground_truth": "Enables basic authentication by adding required header.",
        "predict": " Return a custom scheme based on CARTOColors.\n\n    Args:\n        name (str): Name of a CARTOColor.\n        bins (int or iterable): If an `int`, the number of bins for classifying\n          data. CARTOColors have 7 bins max for quantitative data, and 11 max\n          for qualitative data. If `bins` is a `list`, it is the upper range\n          for classifying data. E.g., `bins` can be of the form ``(10, 20, 30,\n          40, 50)``.\n        bin_method (str, optional): One of methods in :obj:`BinMethod`.\n          Defaults to ``quantiles``. If `bins` is an interable, then that is\n          the bin method that will be used and this will be ignored.\n\n    .. Warning::\n\n       Input types are particularly sensitive in this function, and little\n       feedback is given for errors. ``name`` and ``bin_method`` arguments\n       are case-sensitive..\n\n    "
    },
    {
        "ID": 697,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override @RequirePOST public HttpResponse doDoDelete() throws IOException { checkPermission(DELETE); try { T node = getNode(); if (node != null) { // No need to terminate nodes again node.terminate(); } return new HttpRedirect(\"..\"); } catch (InterruptedException e) { return HttpResponses.error(500,e); } }\n\n    ### Response: When the agent is deleted, free the node right away..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public HttpRequest setHostHeader() { String hostPort = this.host; if (port != Defaults.DEFAULT_PORT) { hostPort += StringPool.COLON + port; } headerOverwrite(HEADER_HOST, hostPort); return this; }\n\n    ### Response:",
        "ground_truth": "Sets 'Host' header from current host and port.",
        "predict": " When the agent is deleted, free the node right away..\n\n    "
    },
    {
        "ID": 698,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def partial(coro, *args, **kw): \"\"\" Partial function implementation designed for coroutines, allowing variadic input arguments. This function can be used as decorator. arguments: coro (coroutinefunction): coroutine function to wrap. *args (mixed): mixed variadic arguments for partial application. Raises: TypeError: if ``coro`` is not a coroutine function. Returns: coroutinefunction Usage:: async def pow(x, y): return x ** y pow_2 = paco.partial(pow, 2) await pow_2(4) # => 16 \"\"\" assert_corofunction(coro=coro) @asyncio.coroutine def wrapper(*_args, **_kw): call_args = args + _args kw.update(_kw) return (yield from coro(*call_args, **kw)) return wrapper\n\n    ### Response: Partial function implementation designed\n    for coroutines, allowing variadic input arguments.\n\n    This function can be used as decorator.\n\n    arguments:\n        coro (coroutinefunction): coroutine function to wrap.\n        *args (mixed): mixed variadic arguments for partial application.\n\n    Raises:\n        TypeError: if ``coro`` is not a coroutine function.\n\n    Returns:\n        coroutinefunction\n\n    Usage::\n\n        async def pow(x, y):\n            return x ** y\n\n        pow_2 = paco.partial(pow, 2)\n        await pow_2(4)\n        # => 16.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override protected Buffer buffer(final boolean fullRequest) { // INITIALIZATION // host port if (header(HEADER_HOST) == null) { setHostHeader(); } // form Buffer formBuffer = formBuffer(); // query string String queryString = queryString(); // user-agent if (header(\"User-Agent\") == null) { header(\"User-Agent\", Defaults.userAgent); } // POST method requires Content-Type to be set if (method.equals(\"POST\") && (contentLength() == null)) { contentLength(0); } // BUILD OUT Buffer request = new Buffer(); request.append(method) .append(SPACE) .append(path); if (query != null && !query.isEmpty()) { request.append('?'); request.append(queryString); } request.append(SPACE) .append(httpVersion) .append(CRLF); populateHeaderAndBody(request, formBuffer, fullRequest); return request; }\n\n    ### Response:",
        "ground_truth": "Prepares the request buffer.",
        "predict": " Partial function implementation designed\n    for coroutines, allowing variadic input arguments.\n\n    This function can be used as decorator.\n\n    arguments:\n        coro (coroutinefunction): coroutine function to wrap.\n        *args (mixed): mixed variadic arguments for partial application.\n\n    Raises:\n        TypeError: if ``coro`` is not a coroutine function.\n\n    Returns:\n        coroutinefunction\n\n    Usage::\n\n        async def pow(x, y):\n            return x ** y\n\n        pow_2 = paco.partial(pow, 2)\n        await pow_2(4)\n        # => 16.\n\n    "
    },
    {
        "ID": 699,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @VisibleForTesting public long[] getHashBuckets(ByteBuffer key, int hashCount, long max) { long[] hash = new long[2]; hash(key, key.position(), key.remaining(), 0L, hash); long[] indexes = new long[hashCount]; setIndexes(hash[0], hash[1], hashCount, max, indexes); return indexes; }\n\n    ### Response: rather than using the threadLocal like we do in production.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public <R> R sendAndReceive(final Function<HttpResponse, R> responseHandler) { return responseHandler.apply(send()); }\n\n    ### Response:",
        "ground_truth": "Syntax sugar.",
        "predict": " rather than using the threadLocal like we do in production.\n\n    "
    },
    {
        "ID": 700,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _draw_feature(self, feature, extent, colour, bg, xo, yo): \"\"\"Draw a single feature from a layer in a vector tile.\"\"\" geometry = feature[\"geometry\"] if geometry[\"type\"] == \"Polygon\": self._draw_polygons(feature, bg, colour, extent, geometry[\"coordinates\"], xo, yo) elif feature[\"geometry\"][\"type\"] == \"MultiPolygon\": for multi_polygon in geometry[\"coordinates\"]: self._draw_polygons(feature, bg, colour, extent, multi_polygon, xo, yo) elif feature[\"geometry\"][\"type\"] == \"LineString\": self._draw_lines(bg, colour, extent, geometry[\"coordinates\"], xo, yo) elif feature[\"geometry\"][\"type\"] == \"MultiLineString\": for line in geometry[\"coordinates\"]: self._draw_lines(bg, colour, extent, line, xo, yo) elif feature[\"geometry\"][\"type\"] == \"Point\": x, y = self._scale_coords( geometry[\"coordinates\"][0], geometry[\"coordinates\"][1], extent, xo, yo) text = u\" {} \".format(feature[\"properties\"][\"name_en\"]) self._screen.print_at(text, int(x - len(text) / 2), int(y), colour=colour, bg=bg)\n\n    ### Response: Draw a single feature from a layer in a vector tile..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    static Handler removeRange(final Handler firstHandler, final Label start, final Label end) { if (firstHandler == null) { return null; } else { firstHandler.nextHandler = removeRange(firstHandler.nextHandler, start, end); } int handlerStart = firstHandler.startPc.bytecodeOffset; int handlerEnd = firstHandler.endPc.bytecodeOffset; int rangeStart = start.bytecodeOffset; int rangeEnd = end == null ? Integer.MAX_VALUE : end.bytecodeOffset; // Return early if [handlerStart,handlerEnd[ and [rangeStart,rangeEnd[ don't intersect. if (rangeStart >= handlerEnd || rangeEnd <= handlerStart) { return firstHandler; } if (rangeStart <= handlerStart) { if (rangeEnd >= handlerEnd) { // If [handlerStart,handlerEnd[ is included in [rangeStart,rangeEnd[, remove firstHandler. return firstHandler.nextHandler; } else { // [handlerStart,handlerEnd[ - [rangeStart,rangeEnd[ = [rangeEnd,handlerEnd[ return new Handler(firstHandler, end, firstHandler.endPc); } } else if (rangeEnd >= handlerEnd) { // [handlerStart,handlerEnd[ - [rangeStart,rangeEnd[ = [handlerStart,rangeStart[ return new Handler(firstHandler, firstHandler.startPc, start); } else { // [handlerStart,handlerEnd[ - [rangeStart,rangeEnd[ = // [handlerStart,rangeStart[ + [rangeEnd,handerEnd[ firstHandler.nextHandler = new Handler(firstHandler, end, firstHandler.endPc); return new Handler(firstHandler, firstHandler.startPc, start); } }\n\n    ### Response:",
        "ground_truth": "Removes the range between start and end from the Handler list that begins with the given\nelement.\n\n@param firstHandler the beginning of a Handler list. May be {@literal null}.\n@param start the start of the range to be removed.\n@param end the end of the range to be removed. Maybe {@literal null}.\n@return the exception handler list with the start-end range removed.",
        "predict": " Draw a single feature from a layer in a vector tile..\n\n    "
    },
    {
        "ID": 701,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def opponent_rank(self): \"\"\" Returns a ``string`` of the opponent's rank when the game was played and None if the team was unranked. \"\"\" rank = re.findall(r'\\d+', self._opponent_name) if len(rank) > 0: return int(rank[0]) return None\n\n    ### Response: Returns a ``string`` of the opponent's rank when the game was played\n        and None if the team was unranked..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    static int getExceptionTableLength(final Handler firstHandler) { int length = 0; Handler handler = firstHandler; while (handler != null) { length++; handler = handler.nextHandler; } return length; }\n\n    ### Response:",
        "ground_truth": "Returns the number of elements of the Handler list that begins with the given element.\n\n@param firstHandler the beginning of a Handler list. May be {@literal null}.\n@return the number of elements of the Handler list that begins with 'handler'.",
        "predict": " Returns a ``string`` of the opponent's rank when the game was played\n        and None if the team was unranked..\n\n    "
    },
    {
        "ID": 702,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static ImmutableList<ImportTree> getWildcardImports(List<? extends ImportTree> imports) { ImmutableList.Builder<ImportTree> result = ImmutableList.builder(); for (ImportTree tree : imports) { // javac represents on-demand imports as a member select where the selected name is '*'. Tree ident = tree.getQualifiedIdentifier(); if (!(ident instanceof MemberSelectTree)) { continue; } MemberSelectTree select = (MemberSelectTree) ident; if (select.getIdentifier().contentEquals(\"*\")) { result.add(tree); } } return result.build(); }\n\n    ### Response: Collect all on demand imports..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void collectActionInterceptors() { final Collection<? extends ActionInterceptor> interceptorValues = interceptorsManager.getAllInterceptors(); interceptors = new ArrayList<>(); interceptors.addAll(interceptorValues); interceptors.sort(Comparator.comparing(a -> a.getClass().getSimpleName())); }\n\n    ### Response:",
        "ground_truth": "Collects all interceptors.",
        "predict": " Collect all on demand imports..\n\n    "
    },
    {
        "ID": 703,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def get_biome_color_based_on_elevation(world, elev, x, y, rng): ''' This is the \"business logic\" for determining the base biome color in satellite view. This includes generating some \"noise\" at each spot in a pixel's rgb value, potentially modifying the noise based on elevation, and finally incorporating this with the base biome color. The basic rules regarding noise generation are: - Oceans have no noise added - land tiles start with noise somewhere inside (-NOISE_RANGE, NOISE_RANGE) for each rgb value - land tiles with high elevations further modify the noise by set amounts (to drain some of the color and make the map look more like mountains) The biome's base color may be interpolated with a predefined mountain brown color if the elevation is high enough. Finally, the noise plus the biome color are added and returned. rng refers to an instance of a random number generator used to draw the random samples needed by this function. ''' v = world.biome_at((x, y)).name() biome_color = _biome_satellite_colors[v] # Default is no noise - will be overwritten if this tile is land noise = (0, 0, 0) if world.is_land((x, y)): ## Generate some random noise to apply to this pixel # There is noise for each element of the rgb value # This noise will be further modified by the height of this tile noise = rng.randint(-NOISE_RANGE, NOISE_RANGE, size=3) # draw three random numbers at once ####### Case 1 - elevation is very high ######## if elev > HIGH_MOUNTAIN_ELEV: # Modify the noise to make the area slightly brighter to simulate snow-topped mountains. noise = add_colors(noise, HIGH_MOUNTAIN_NOISE_MODIFIER) # Average the biome's color with the MOUNTAIN_COLOR to tint the terrain biome_color = average_colors(biome_color, MOUNTAIN_COLOR) ####### Case 2 - elevation is high ######## elif elev > MOUNTAIN_ELEV: # Modify the noise to make this tile slightly darker, especially draining the green noise = add_colors(noise, MOUNTAIN_NOISE_MODIFIER) # Average the biome's color with the MOUNTAIN_COLOR to tint the terrain biome_color = average_colors(biome_color, MOUNTAIN_COLOR) ####### Case 3 - elevation is somewhat high ######## elif elev > HIGH_HILL_ELEV: noise = add_colors(noise, HIGH_HILL_NOISE_MODIFIER) ####### Case 4 - elevation is a little bit high ######## elif elev > HILL_ELEV: noise = add_colors(noise, HILL_NOISE_MODIFIER) # There is also a minor base modifier to the pixel's rgb value based on height modification_amount = int(elev / BASE_ELEVATION_INTENSITY_MODIFIER) base_elevation_modifier = (modification_amount, modification_amount, modification_amount) this_tile_color = add_colors(biome_color, noise, base_elevation_modifier) return this_tile_color\n\n    ### Response: This is the \"business logic\" for determining the base biome color in satellite view.\n        This includes generating some \"noise\" at each spot in a pixel's rgb value, potentially \n        modifying the noise based on elevation, and finally incorporating this with the base biome color. \n\n        The basic rules regarding noise generation are:\n        - Oceans have no noise added\n        - land tiles start with noise somewhere inside (-NOISE_RANGE, NOISE_RANGE) for each rgb value\n        - land tiles with high elevations further modify the noise by set amounts (to drain some of the \n          color and make the map look more like mountains) \n\n        The biome's base color may be interpolated with a predefined mountain brown color if the elevation is high enough.\n\n        Finally, the noise plus the biome color are added and returned.\n\n        rng refers to an instance of a random number generator used to draw the random samples needed by this function..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void collectActionFilters() { final Collection<? extends ActionFilter> filterValues = filtersManager.getAllFilters(); filters = new ArrayList<>(); filters.addAll(filterValues); filters.sort(Comparator.comparing(a -> a.getClass().getSimpleName())); }\n\n    ### Response:",
        "ground_truth": "Collects all filters.",
        "predict": " This is the \"business logic\" for determining the base biome color in satellite view.\n        This includes generating some \"noise\" at each spot in a pixel's rgb value, potentially \n        modifying the noise based on elevation, and finally incorporating this with the base biome color. \n\n        The basic rules regarding noise generation are:\n        - Oceans have no noise added\n        - land tiles start with noise somewhere inside (-NOISE_RANGE, NOISE_RANGE) for each rgb value\n        - land tiles with high elevations further modify the noise by set amounts (to drain some of the \n          color and make the map look more like mountains) \n\n        The biome's base color may be interpolated with a predefined mountain brown color if the elevation is high enough.\n\n        Finally, the noise plus the biome color are added and returned.\n\n        rng refers to an instance of a random number generator used to draw the random samples needed by this function..\n\n    "
    },
    {
        "ID": 704,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function findVendorPrefixes(property) { var prefixes = ciu.resolvePrefixes(property); if (!prefixes) { // Can I Use database is disabled or prefixes are not // available for this property prefixes = []; Object.keys(vendorPrefixes).forEach(function(key) { if (hasPrefix(property, key)) { prefixes.push(vendorPrefixes[key].prefix); } }); if (!prefixes.length) { prefixes = null; } } return prefixes; }\n\n    ### Response: Finds available vendor prefixes for given CSS property.\nSearch is performed within Can I Use database and internal\nproperty list\n@param  {String} property CSS property name\n@return {Array} Array of resolved prefixes or null if\nprefixes are not available for this property at all.\nEmpty array means prefixes are not available for current\nuser-define era.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void collectActionResults() { final Collection<ActionResult> resultsValues = resultsManager.getAllActionResults(); results = new ArrayList<>(); results.addAll(resultsValues); results.sort(Comparator.comparing(a -> a.getClass().getSimpleName())); }\n\n    ### Response:",
        "ground_truth": "Collects all action results.",
        "predict": " Finds available vendor prefixes for given CSS property.\nSearch is performed within Can I Use database and internal\nproperty list\n@param  {String} property CSS property name\n@return {Array} Array of resolved prefixes or null if\nprefixes are not available for this property at all.\nEmpty array means prefixes are not available for current\nuser-define era.\n\n    "
    },
    {
        "ID": 705,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func closeBitrotWriters(ws []io.Writer) { for _, w := range ws { if bw, ok := w.(io.Closer); ok { bw.Close() } } }\n\n    ### Response: // Close all the writers..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void collectActionRuntimes() { actions = actionsManager.getAllActionRuntimes(); actions.sort(Comparator.comparing(ActionRuntime::getActionPath)); }\n\n    ### Response:",
        "ground_truth": "Collects all action runtime configurations.",
        "predict": " // Close all the writers..\n\n    "
    },
    {
        "ID": 706,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected <T> T handleReplace(T updated, Class<T> type, Map<String, String> parameters) throws ExecutionException, InterruptedException, KubernetesClientException, IOException { RequestBody body = RequestBody.create(JSON, JSON_MAPPER.writeValueAsString(updated)); Request.Builder requestBuilder = new Request.Builder().put(body).url(getResourceUrl(checkNamespace(updated), checkName(updated))); return handleResponse(requestBuilder, type, parameters); }\n\n    ### Response: Replace a resource, optionally performing placeholder substitution to the response.\n\n@param updated updated object\n@param type type of object provided\n@param parameters a HashMap containing parameters for processing object\n@param  template argument provided\n\n@return returns de-serialized version of api server response.\n@throws ExecutionException Execution Exception\n@throws InterruptedException Interrupted Exception\n@throws KubernetesClientException KubernetesClientException\n@throws IOException IOException.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SuppressWarnings({\"unchecked\"}) protected void setSimpleProperty(final BeanProperty bp, final Object value) { Setter setter = bp.getSetter(isDeclared); // try: setter if (setter != null) { invokeSetter(setter, bp, value); return; } // try: put(\"property\", value) if (bp.isMap()) { ((Map) bp.bean).put(bp.name, value); return; } if (isSilent) { return; } throw new BeanException(\"Simple property not found: \" + bp.name, bp); }\n\n    ### Response:",
        "ground_truth": "Sets a value of simple property.",
        "predict": " Replace a resource, optionally performing placeholder substitution to the response.\n\n@param updated updated object\n@param type type of object provided\n@param parameters a HashMap containing parameters for processing object\n@param  template argument provided\n\n@return returns de-serialized version of api server response.\n@throws ExecutionException Execution Exception\n@throws InterruptedException Interrupted Exception\n@throws KubernetesClientException KubernetesClientException\n@throws IOException IOException.\n\n    "
    },
    {
        "ID": 707,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private function openFile( $dir, $name ) { $filename = $dir . DIRECTORY_SEPARATOR . strtolower( $this->prefix ) . strtolower( $name ) . '.php'; // We do not want to overwrite files if ( file_exists( $filename ) && ( $this->overwrite === false || is_writable( $filename ) === false ) ) { throw new ezcBaseFileIoException( $filename, ezcBaseFileException::WRITE, \"File already exists or is not writeable. Use --overwrite to ignore existance.\" ); } $file = @fopen( $filename, 'w' ); if ( $file === false ) { throw new ezcBaseFilePermissionException( $file, ezcBaseFileException::WRITE ); } fwrite( $file, \"<?php\\n\" ); fwrite( $file, \"// Autogenerated class file\\n\" ); fwrite( $file, \"\\n\" ); return $file; }\n\n    ### Response: Open a file for writing a PersistentObject definition to.\nThis method opens a file for writing a PersistentObject definition to\nand writes the basic PHP open tag to it.\n\n@param string $dir  The diretory to open the file in.\n@param string $name The table name.\n@return resource(file) The file resource used for writing.\n\n@throws ezcBaseFileIoException\nif the file to write to already exists.\n@throws ezcBaseFilePermissionException\nif the file could not be opened for writing..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public <T> T getProperty(final Object bean, final String name) { BeanProperty beanProperty = new BeanProperty(this, bean, name); if (!isSilent) { resolveNestedProperties(beanProperty); return (T) getIndexProperty(beanProperty); } else { try { resolveNestedProperties(beanProperty); return (T) getIndexProperty(beanProperty); } catch (Exception ignore) { return null; } } }\n\n    ### Response:",
        "ground_truth": "Returns value of bean's property.",
        "predict": " Open a file for writing a PersistentObject definition to.\nThis method opens a file for writing a PersistentObject definition to\nand writes the basic PHP open tag to it.\n\n@param string $dir  The diretory to open the file in.\n@param string $name The table name.\n@return resource(file) The file resource used for writing.\n\n@throws ezcBaseFileIoException\nif the file to write to already exists.\n@throws ezcBaseFilePermissionException\nif the file could not be opened for writing..\n\n    "
    },
    {
        "ID": 708,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _process_mor_objects_queue_async(self, instance, mors): \"\"\" Process a batch of items popped from the objects queue by querying the available metrics for these MORs and then putting them in the Mor cache \"\"\" t = time.time() i_key = self._instance_key(instance) server_instance = self._get_server_instance(instance) perfManager = server_instance.content.perfManager # For non realtime metrics, we need to specifically ask which counters are available for which entity, # so we call perfManager.QueryAvailablePerfMetric for each cluster, datacenter, datastore # This should be okay since the number of such entities shouldn't be excessively large for mor in mors: mor_name = str(mor['mor']) available_metrics = {m.counterId for m in perfManager.QueryAvailablePerfMetric(entity=mor[\"mor\"])} try: self.mor_cache.set_metrics(i_key, mor_name, self._compute_needed_metrics(instance, available_metrics)) except MorNotFoundError: self.log.error(\"Object '{}' is missing from the cache, skipping. \".format(ensure_unicode(mor_name))) continue # TEST-INSTRUMENTATION self.histogram( 'datadog.agent.vsphere.morlist_process_atomic.time', time.time() - t, tags=instance.get('tags', []) )\n\n    ### Response: Process a batch of items popped from the objects queue by querying the available\n        metrics for these MORs and then putting them in the Mor cache.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public String extractThisReference(final String propertyName) { int ndx = StringUtil.indexOfChars(propertyName, INDEX_CHARS); if (ndx == -1) { return propertyName; } return propertyName.substring(0, ndx); }\n\n    ### Response:",
        "ground_truth": "Extract the first name of this reference.",
        "predict": " Process a batch of items popped from the objects queue by querying the available\n        metrics for these MORs and then putting them in the Mor cache.\n\n    "
    },
    {
        "ID": 709,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def atlas_peer_has_fresh_zonefile_inventory( peer_hostport, peer_table=None ): \"\"\" Does the given atlas node have a fresh zonefile inventory? \"\"\" fresh = False with AtlasPeerTableLocked(peer_table) as ptbl: if peer_hostport not in ptbl.keys(): return False now = time_now() peer_inv = atlas_peer_get_zonefile_inventory( peer_hostport, peer_table=ptbl ) # NOTE: zero-length or None peer inventory means the peer is simply dead, but we've pinged it if ptbl[peer_hostport].has_key('zonefile_inventory_last_refresh') and \\ ptbl[peer_hostport]['zonefile_inventory_last_refresh'] + atlas_peer_ping_interval() > now: fresh = True return fresh\n\n    ### Response: Does the given atlas node have a fresh zonefile inventory?.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public PrintWriter getWriter() { if (writer == null) { writer = new FastCharArrayWriter(); printWriter = new PrintWriter(writer); } return printWriter; }\n\n    ### Response:",
        "ground_truth": "Returns buffered writer. Buffer will be created if not already used.",
        "predict": " Does the given atlas node have a fresh zonefile inventory?.\n\n    "
    },
    {
        "ID": 710,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public long skip(long n) throws IOException { if (mInputStream.available() >= n) { return mInputStream.skip(n); } // The number of bytes to skip is possibly large, open a new stream from GCS. mInputStream.close(); mPos += n; try { mObject = mClient.getObject(mBucketName, mKey, null /* ignore ModifiedSince */, null /* ignore UnmodifiedSince */, null /* ignore MatchTags */, null /* ignore NoneMatchTags */, mPos /* byteRangeStart */, null /* ignore byteRangeEnd */); mInputStream = new BufferedInputStream(mObject.getDataInputStream()); } catch (ServiceException e) { throw new IOException(e); } return n; }\n\n    ### Response: This method leverages the ability to open a stream from GCS from a given offset. When the\nunderlying stream has fewer bytes buffered than the skip request, the stream is closed, and\na new stream is opened starting at the requested offset.\n\n@param n number of bytes to skip\n@return the number of bytes skipped.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void setObjectReference(final String name, final Object object) { if (objectRefs == null) { objectRefs = new HashMap<>(); } objectRefs.put(name, object); }\n\n    ### Response:",
        "ground_truth": "Saves object reference.",
        "predict": " This method leverages the ability to open a stream from GCS from a given offset. When the\nunderlying stream has fewer bytes buffered than the skip request, the stream is closed, and\na new stream is opened starting at the requested offset.\n\n@param n number of bytes to skip\n@return the number of bytes skipped.\n\n    "
    },
    {
        "ID": 711,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def external_page_css_class(page) return nil if !page.redirects_to_external? request.path.split('/').delete_if(&:blank?).first == page.urlname.gsub(/^\\//, '') ? 'active' : nil end\n\n    ### Response: Returns +'active'+ if the given external page is in the current url path or +nil+..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Object getObjectReference(final String name) { if (objectRefs == null) { return null; } return objectRefs.get(name); }\n\n    ### Response:",
        "ground_truth": "Returns object reference.",
        "predict": " Returns +'active'+ if the given external page is in the current url path or +nil+..\n\n    "
    },
    {
        "ID": 712,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def terminal_width if defined? JRUBY_VERSION default_width = 80 else default_width = `stty size`.split.map { |x| x.to_i }.reverse.first - 1 end @terminal_width ||= default_width end\n\n    ### Response: A Unix trick using stty to get the console columns\n\n @return [Fixnum].\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Object lookupObject(final String ref) { Object value = getObjectReference(ref); if (value == null) { throw new DbSqlBuilderException(\"Invalid object reference: \" + ref); } return value; }\n\n    ### Response:",
        "ground_truth": "Lookups for object reference and throws an exception if reference doesn't exist.",
        "predict": " A Unix trick using stty to get the console columns\n\n @return [Fixnum].\n\n    "
    },
    {
        "ID": 713,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def normalize(value, series, offset=0): r\"\"\" Scale a value to the range defined by a series. :param value: Value to normalize :type value: number :param series: List of numbers that defines the normalization range :type series: list :param offset: Normalization offset, i.e. the returned value will be in the range [**offset**, 1.0] :type offset: number :rtype: number :raises: * RuntimeError (Argument \\`offset\\` is not valid) * RuntimeError (Argument \\`series\\` is not valid) * RuntimeError (Argument \\`value\\` is not valid) * ValueError (Argument \\`offset\\` has to be in the [0.0, 1.0] range) * ValueError (Argument \\`value\\` has to be within the bounds of the argument \\`series\\`) For example:: >>> import pmisc >>> pmisc.normalize(15, [10, 20]) 0.5 >>> pmisc.normalize(15, [10, 20], 0.5) 0.75 \"\"\" if not _isreal(value): raise RuntimeError(\"Argument `value` is not valid\") if not _isreal(offset): raise RuntimeError(\"Argument `offset` is not valid\") try: smin = float(min(series)) smax = float(max(series)) except: raise RuntimeError(\"Argument `series` is not valid\") value = float(value) offset = float(offset) if not 0 <= offset <= 1: raise ValueError(\"Argument `offset` has to be in the [0.0, 1.0] range\") if not smin <= value <= smax: raise ValueError( \"Argument `value` has to be within the bounds of argument `series`\" ) return offset + ((1.0 - offset) * (value - smin) / (smax - smin))\n\n    ### Response: r\"\"\"\n    Scale a value to the range defined by a series.\n\n    :param value: Value to normalize\n    :type  value: number\n\n    :param series: List of numbers that defines the normalization range\n    :type  series: list\n\n    :param offset: Normalization offset, i.e. the returned value will be in\n                   the range [**offset**, 1.0]\n    :type  offset: number\n\n    :rtype: number\n\n    :raises:\n     * RuntimeError (Argument \\`offset\\` is not valid)\n\n     * RuntimeError (Argument \\`series\\` is not valid)\n\n     * RuntimeError (Argument \\`value\\` is not valid)\n\n     * ValueError (Argument \\`offset\\` has to be in the [0.0, 1.0] range)\n\n     * ValueError (Argument \\`value\\` has to be within the bounds of the\n       argument \\`series\\`)\n\n    For example::\n\n        >>> import pmisc\n        >>> pmisc.normalize(15, [10, 20])\n        0.5\n        >>> pmisc.normalize(15, [10, 20], 0.5)\n        0.75.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public DbEntityDescriptor getTableDescriptor(final String tableRef) { if (tableRefs == null) { return null; } TableRefData t = tableRefs.get(tableRef); return t == null ? null : t.desc; }\n\n    ### Response:",
        "ground_truth": "Returns entity descriptor for provided table reference.",
        "predict": " r\"\"\"\n    Scale a value to the range defined by a series.\n\n    :param value: Value to normalize\n    :type  value: number\n\n    :param series: List of numbers that defines the normalization range\n    :type  series: list\n\n    :param offset: Normalization offset, i.e. the returned value will be in\n                   the range [**offset**, 1.0]\n    :type  offset: number\n\n    :rtype: number\n\n    :raises:\n     * RuntimeError (Argument \\`offset\\` is not valid)\n\n     * RuntimeError (Argument \\`series\\` is not valid)\n\n     * RuntimeError (Argument \\`value\\` is not valid)\n\n     * ValueError (Argument \\`offset\\` has to be in the [0.0, 1.0] range)\n\n     * ValueError (Argument \\`value\\` has to be within the bounds of the\n       argument \\`series\\`)\n\n    For example::\n\n        >>> import pmisc\n        >>> pmisc.normalize(15, [10, 20])\n        0.5\n        >>> pmisc.normalize(15, [10, 20], 0.5)\n        0.75.\n\n    "
    },
    {
        "ID": 714,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def apply_injectables(self, targets): \"\"\"Given an iterable of `Target` instances, apply their transitive injectables.\"\"\" target_types = {type(t) for t in targets} target_subsystem_deps = {s for s in itertools.chain(*(t.subsystems() for t in target_types))} for subsystem in target_subsystem_deps: # TODO: The is_initialized() check is primarily for tests and would be nice to do away with. if issubclass(subsystem, InjectablesMixin) and subsystem.is_initialized(): subsystem.global_instance().injectables(self)\n\n    ### Response: Given an iterable of `Target` instances, apply their transitive injectables..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public DbEntityDescriptor findTableDescriptorByColumnRef(final String columnRef) { for (Map.Entry<String, TableRefData> entry : tableRefs.entrySet()) { DbEntityDescriptor ded = entry.getValue().desc; if (ded.findByPropertyName(columnRef) != null) { return ded; } } return null; }\n\n    ### Response:",
        "ground_truth": "Finds entity descriptor of a table that contains provided column reference.",
        "predict": " Given an iterable of `Target` instances, apply their transitive injectables..\n\n    "
    },
    {
        "ID": 715,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def xception(c, k=8, n_middle=8): \"Preview version of Xception network. Not tested yet - use at own risk. No pretrained model yet.\" layers = [ conv(3, k*4, 3, 2), conv(k*4, k*8, 3), ConvSkip(k*8, k*16, act=False), ConvSkip(k*16, k*32), ConvSkip(k*32, k*91), ] for i in range(n_middle): layers.append(middle_flow(k*91)) layers += [ ConvSkip(k*91,k*128), sep_conv(k*128,k*192,act=False), sep_conv(k*192,k*256), nn.ReLU(), nn.AdaptiveAvgPool2d(1), Flatten(), nn.Linear(k*256,c) ] return nn.Sequential(*layers)\n\n    ### Response: Preview version of Xception network. Not tested yet - use at own risk. No pretrained model yet..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String getTableAlias(final String tableRef) { if (tableRefs == null) { return null; } TableRefData t = tableRefs.get(tableRef); return t == null ? null : t.alias; }\n\n    ### Response:",
        "ground_truth": "Returns table alias for provided table reference.",
        "predict": " Preview version of Xception network. Not tested yet - use at own risk. No pretrained model yet..\n\n    "
    },
    {
        "ID": 716,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func CreateNodeDialer(s completedServerRunOptions) (tunneler.Tunneler, *http.Transport, error) { // Setup nodeTunneler if needed var nodeTunneler tunneler.Tunneler var proxyDialerFn utilnet.DialFunc if len(s.SSHUser) > 0 { // Get ssh key distribution func, if supported var installSSHKey tunneler.InstallSSHKey cloud, err := cloudprovider.InitCloudProvider(s.CloudProvider.CloudProvider, s.CloudProvider.CloudConfigFile) if err != nil { return nil, nil, fmt.Errorf(\"cloud provider could not be initialized: %v\", err) } if cloud != nil { if instances, supported := cloud.Instances(); supported { installSSHKey = instances.AddSSHKeyToAllInstances } } if s.KubeletConfig.Port == 0 { return nil, nil, fmt.Errorf(\"must enable kubelet port if proxy ssh-tunneling is specified\") } if s.KubeletConfig.ReadOnlyPort == 0 { return nil, nil, fmt.Errorf(\"must enable kubelet readonly port if proxy ssh-tunneling is specified\") } // Set up the nodeTunneler // TODO(cjcullen): If we want this to handle per-kubelet ports or other // kubelet listen-addresses, we need to plumb through options. healthCheckPath := &url.URL{ Scheme: \"http\", Host: net.JoinHostPort(\"127.0.0.1\", strconv.FormatUint(uint64(s.KubeletConfig.ReadOnlyPort), 10)), Path: \"healthz\", } nodeTunneler = tunneler.New(s.SSHUser, s.SSHKeyfile, healthCheckPath, installSSHKey) // Use the nodeTunneler's dialer when proxying to pods, services, and nodes proxyDialerFn = nodeTunneler.Dial } // Proxying to pods and services is IP-based... don't expect to be able to verify the hostname proxyTLSClientConfig := &tls.Config{InsecureSkipVerify: true} proxyTransport := utilnet.SetTransportDefaults(&http.Transport{ DialContext: proxyDialerFn, TLSClientConfig: proxyTLSClientConfig, }) return nodeTunneler, proxyTransport, nil }\n\n    ### Response: // CreateNodeDialer creates the dialer infrastructure to connect to the nodes..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void registerTableReference(final String tableReference, final DbEntityDescriptor ded, final String tableAlias) { if (tableRefs == null) { tableRefs = new HashMap<>(); } TableRefData t = new TableRefData(ded, tableAlias); if (tableRefs.put(tableReference, t) != null) { throw new DbSqlBuilderException(\"Duplicated table reference: \" + tableReference); } }\n\n    ### Response:",
        "ground_truth": "Registers table reference for provided entity.",
        "predict": " // CreateNodeDialer creates the dialer infrastructure to connect to the nodes..\n\n    "
    },
    {
        "ID": 717,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def parse_sargasso_logs(self, f): \"\"\" Parse the sargasso log file. \"\"\" species_name = list() items = list() header = list() is_first_line = True for l in f['f'].splitlines(): s = l.split(\",\") # Check that this actually is a Sargasso file if is_first_line and s[0]!='Sample': return None if len(s) < 7: continue if is_first_line: #prepare header is_first_line = False header = s for i in header[1:]: #find out what species included sname = i.split('-')[-1] if sname not in species_name: species_name.append(sname) #find out what is being counted kname = (\"-\".join(i.split('-')[-3:-1])) if kname not in items: items.append(kname) else: #start sample lines. sample_name = s.pop(0) chunk_by_species = [s[i:i + len(items)] for i in range(0, len(s), len(items))]; for idx,v in enumerate(chunk_by_species): #adding species name to the sample name for easy interpretation new_sample_name = '_'.join([sample_name,species_name[idx]]) # Clean up sample name new_sample_name = self.clean_s_name(new_sample_name, f['root']) if new_sample_name in self.sargasso_data.keys(): log.debug(\"Duplicate sample name found! Overwriting: {}\".format(new_sample_name)) try: self.sargasso_data[new_sample_name] = dict(zip(items,map(int, v))) except ValueError: pass self.sargasso_keys = items for idx, f_name in enumerate(self.sargasso_data.keys()): # Reorganised parsed data for this sample # Collect total READ count number self.sargasso_data[f_name]['Total'] = 0; for key, value in list(self.sargasso_data[f_name].items()): # iter on both keys and values if key.endswith(\"Reads\"): self.sargasso_data[f_name]['Total'] += value # Calculate the percent aligned if we can try: self.sargasso_data[f_name]['sargasso_percent_assigned'] = (float(self.sargasso_data[f_name]['Assigned-Reads'])/float(self.sargasso_data[f_name]['Total'])) * 100.0 except (KeyError, ZeroDivisionError): pass\n\n    ### Response: Parse the sargasso log file..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected DbEntityDescriptor lookupTableRef(final String tableRef) { DbEntityDescriptor ded = getTableDescriptor(tableRef); if (ded == null) { throw new DbSqlBuilderException(\"Table reference not used in this query: \" + tableRef); } return ded; }\n\n    ### Response:",
        "ground_truth": "Lookups for table reference and throws an exception if table reference not found.",
        "predict": " Parse the sargasso log file..\n\n    "
    },
    {
        "ID": 718,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public List<SubsetMove> getAllMoves(SubsetSolution solution) { // get set of candidate IDs for removal and addition (possibly fixed IDs are discarded) Set<Integer> removeCandidates = getRemoveCandidates(solution); Set<Integer> addCandidates = getAddCandidates(solution); // first check if swaps are possible, for efficiency (avoids superfluous loop iterations) if(removeCandidates.isEmpty() || addCandidates.isEmpty()){ // no swap moves can be applied, return empty set return Collections.emptyList(); } // create swap move for all combinations of add and remove candidates return addCandidates.stream() .flatMap(add -> removeCandidates.stream().map(remove -> new SwapMove(add, remove))) .collect(Collectors.toList()); }\n\n    ### Response: Generates a list of all possible swap moves that transform the given subset solution by removing a single ID from\nthe current selection and replacing it with a new ID which is currently not selected. Possible fixed IDs are not\nconsidered to be swapped. May return an empty list if no swap moves can be generated.\n\n@param solution solution for which all possible swap moves are generated\n@return list of all swap moves, may be empty.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void registerHint(final String hint) { if (hints == null) { hints = new ArrayList<>(hintCount); } hints.add(hint); }\n\n    ### Response:",
        "ground_truth": "Registers a hint.",
        "predict": " Generates a list of all possible swap moves that transform the given subset solution by removing a single ID from\nthe current selection and replacing it with a new ID which is currently not selected. Possible fixed IDs are not\nconsidered to be swapped. May return an empty list if no swap moves can be generated.\n\n@param solution solution for which all possible swap moves are generated\n@return list of all swap moves, may be empty.\n\n    "
    },
    {
        "ID": 719,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function doListContents($directory, $recursive) { $filter = function ($path) use ($directory, $recursive) { // Remove the root directory from any listing. if ($path === '') { return false; } if (Util::dirname($path) === $directory) { return true; } return $recursive && $this->pathIsInDirectory($path, $directory); }; return \\array_filter(\\array_keys($this->storage), $filter); }\n\n    ### Response: Filters the file system returning paths inside the directory.\n\n@param string $directory\n@param bool   $recursive\n\n@return string[].\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public final boolean serialize(final JsonContext jsonContext, final T value) { if (jsonContext.pushValue(value)) { // prevent circular dependencies return false; } serializeValue(jsonContext, value); jsonContext.popValue(); return true; }\n\n    ### Response:",
        "ground_truth": "Detects circular dependencies and pushes value as current\ntype context.",
        "predict": " Filters the file system returning paths inside the directory.\n\n@param string $directory\n@param bool   $recursive\n\n@return string[].\n\n    "
    },
    {
        "ID": 720,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def register(self, metadata): \"\"\" Register a distribution on PyPI, using the provided metadata. :param metadata: A :class:`Metadata` instance defining at least a name and version number for the distribution to be registered. :return: The HTTP response received from PyPI upon submission of the request. \"\"\" self.check_credentials() metadata.validate() d = metadata.todict() d[':action'] = 'verify' request = self.encode_request(d.items(), []) response = self.send_request(request) d[':action'] = 'submit' request = self.encode_request(d.items(), []) return self.send_request(request)\n\n    ### Response: Register a distribution on PyPI, using the provided metadata.\n\n        :param metadata: A :class:`Metadata` instance defining at least a name\n                         and version number for the distribution to be\n                         registered.\n        :return: The HTTP response received from PyPI upon submission of the\n                request..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void injectAttributes(final HttpServletRequest servletRequest, final Targets targets) { final Enumeration<String> attributeNames = servletRequest.getAttributeNames(); while (attributeNames.hasMoreElements()) { final String attrName = attributeNames.nextElement(); targets.forEachTargetAndIn(this, (target, in) -> { final String name = in.matchedName(attrName); if (name != null) { final Object attrValue = servletRequest.getAttribute(attrName); target.writeValue(name, attrValue, true); } }); } }\n\n    ### Response:",
        "ground_truth": "Injects request attributes.",
        "predict": " Register a distribution on PyPI, using the provided metadata.\n\n        :param metadata: A :class:`Metadata` instance defining at least a name\n                         and version number for the distribution to be\n                         registered.\n        :return: The HTTP response received from PyPI upon submission of the\n                request..\n\n    "
    },
    {
        "ID": 721,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def get_bucket_website_config(self, bucket): \"\"\" Get the website configuration of a bucket. @param bucket: The name of the bucket. @return: A C{Deferred} that will fire with the bucket's website configuration. \"\"\" details = self._details( method=b\"GET\", url_context=self._url_context(bucket=bucket, object_name='?website'), ) d = self._submit(self._query_factory(details)) d.addCallback(self._parse_website_config) return d\n\n    ### Response: Get the website configuration of a bucket.\n\n        @param bucket: The name of the bucket.\n        @return: A C{Deferred} that will fire with the bucket's website\n        configuration..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void injectParameters(final HttpServletRequest servletRequest, final Targets targets) { final boolean encode = encodeGetParams && servletRequest.getMethod().equals(\"GET\"); final Enumeration<String> paramNames = servletRequest.getParameterNames(); while (paramNames.hasMoreElements()) { final String paramName = paramNames.nextElement(); if (servletRequest.getAttribute(paramName) != null) { continue; } targets.forEachTargetAndIn(this, (target, in) -> { final String name = in.matchedName(paramName); if (name != null) { String[] paramValues = servletRequest.getParameterValues(paramName); paramValues = ServletUtil.prepareParameters( paramValues, treatEmptyParamsAsNull, ignoreEmptyRequestParams); if (paramValues != null) { if (encode) { for (int j = 0; j < paramValues.length; j++) { final String p = paramValues[j]; if (p != null) { final String encoding = madvocEncoding.getEncoding(); paramValues[j] = StringUtil.convertCharset(p, StringPool.ISO_8859_1, encoding); } } } final Object value = (paramValues.length != 1 ? paramValues : paramValues[0]); target.writeValue(name, value, true); } } }); } }\n\n    ### Response:",
        "ground_truth": "Inject request parameters.",
        "predict": " Get the website configuration of a bucket.\n\n        @param bucket: The name of the bucket.\n        @return: A C{Deferred} that will fire with the bucket's website\n        configuration..\n\n    "
    },
    {
        "ID": 722,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def store_window2 #:nodoc: record = 0x023E # Record identifier length = 0x0012 # Number of bytes to follow grbit = 0x00B6 # Option flags rwTop = @first_row # Top visible row colLeft = @first_col # Leftmost visible column rgbHdr = 0x00000040 # Row/col heading, grid color wScaleSLV = 0x0000 # Zoom in page break preview wScaleNormal = 0x0000 # Zoom in normal view reserved = 0x00000000 # The options flags that comprise $grbit fDspFmla = @display_formulas # 0 - bit fDspGrid = @screen_gridlines # 1 fDspRwCol = @display_headers # 2 fFrozen = frozen? ? 1 : 0 # 3 fDspZeros = display_zeros? ? 1 : 0 # 4 fDefaultHdr = 1 # 5 fArabic = @display_arabic || 0 # 6 fDspGuts = @outline.visible? ? 1 : 0 # 7 fFrozenNoSplit = @frozen_no_split # 0 - bit fSelected = selected? ? 1 : 0 # 1 fPaged = active? ? 1 : 0 # 2 fBreakPreview = 0 # 3 grbit = fDspFmla grbit |= fDspGrid << 1 grbit |= fDspRwCol << 2 grbit |= fFrozen << 3 grbit |= fDspZeros << 4 grbit |= fDefaultHdr << 5 grbit |= fArabic << 6 grbit |= fDspGuts << 7 grbit |= fFrozenNoSplit << 8 grbit |= fSelected << 9 grbit |= fPaged << 10 grbit |= fBreakPreview << 11 header = [record, length].pack(\"vv\") data =[grbit, rwTop, colLeft, rgbHdr, wScaleSLV, wScaleNormal, reserved].pack(\"vvvVvvV\") append(header, data) end\n\n    ### Response: Write BIFF record Window2..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void injectUploadedFiles(final HttpServletRequest servletRequest, final Targets targets) { if (!(servletRequest instanceof MultipartRequestWrapper)) { return; } final MultipartRequestWrapper multipartRequest = (MultipartRequestWrapper) servletRequest; if (!multipartRequest.isMultipart()) { return; } final Enumeration<String> paramNames = multipartRequest.getFileParameterNames(); while (paramNames.hasMoreElements()) { final String paramName = paramNames.nextElement(); if (servletRequest.getAttribute(paramName) != null) { continue; } targets.forEachTargetAndIn(this, (target, in) -> { final String name = in.matchedName(paramName); if (name != null) { final FileUpload[] paramValues = multipartRequest.getFiles(paramName); if (ignoreInvalidUploadFiles) { for (int j = 0; j < paramValues.length; j++) { final FileUpload paramValue = paramValues[j]; if ((!paramValue.isValid()) || (!paramValue.isUploaded())) { paramValues[j] = null; } } } final Object value = (paramValues.length == 1 ? paramValues[0] : paramValues); target.writeValue(name, value, true); } }); } }\n\n    ### Response:",
        "ground_truth": "Inject uploaded files from multipart request parameters.",
        "predict": " Write BIFF record Window2..\n\n    "
    },
    {
        "ID": 723,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function pickUrl(DataContainer $dc) { return ' <a href=\"contao/page.php?do='.Input::get('do').'&amp;table='.$dc->table.'&amp;field='.$dc->field.'&amp;value='.str_replace(array('{{link_url::', '}}'), '', $dc->value).'\" title=\"'.specialchars($GLOBALS['TL_LANG']['MSC']['pagepicker']).'\" onclick=\"Backend.getScrollOffset();Backend.openModalSelector({\\'width\\':765,\\'title\\':\\''.specialchars(str_replace(\"'\", \"\\\\'\", $GLOBALS['TL_LANG']['MOD']['page'][0])).'\\',\\'url\\':this.href,\\'id\\':\\''.$dc->field.'\\',\\'tag\\':\\'ctrl_'.$dc->field . ((Input::get('act') == 'editAll') ? '_' . $dc->id : '').'\\',\\'self\\':this});return false\">' . $this->generateImage('pickpage.gif', $GLOBALS['TL_LANG']['MSC']['pagepicker'], 'style=\"vertical-align:top;cursor:pointer\"') . '</a>'; }\n\n    ### Response: Return the page pick wizard for the editor_helpurl\n@param DataContainer $dc.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String convertPropertyNameToColumnName(final String propertyName) { StringBuilder tableName = new StringBuilder(propertyName.length() * 2); if (splitCamelCase) { String convertedTableName = Format.fromCamelCase(propertyName, separatorChar); tableName.append(convertedTableName); } else { tableName.append(propertyName); } if (!changeCase) { return tableName.toString(); } return uppercase ? toUppercase(tableName).toString() : toLowercase(tableName).toString(); }\n\n    ### Response:",
        "ground_truth": "Converts property name to column name.",
        "predict": " Return the page pick wizard for the editor_helpurl\n@param DataContainer $dc.\n\n    "
    },
    {
        "ID": 724,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (st *State) relation(relationTag, unitTag names.Tag) (params.RelationResult, error) { nothing := params.RelationResult{} var result params.RelationResults args := params.RelationUnits{ RelationUnits: []params.RelationUnit{ {Relation: relationTag.String(), Unit: unitTag.String()}, }, } err := st.facade.FacadeCall(\"Relation\", args, &result) if err != nil { return nothing, err } if len(result.Results) != 1 { return nothing, fmt.Errorf(\"expected 1 result, got %d\", len(result.Results)) } if err := result.Results[0].Error; err != nil { return nothing, err } return result.Results[0], nil }\n\n    ### Response: // relation requests relation information from the server..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String convertColumnNameToPropertyName(final String columnName) { StringBuilder propertyName = new StringBuilder(columnName.length()); int len = columnName.length(); if (splitCamelCase) { boolean toUpper = false; for (int i = 0; i < len; i++) { char c = columnName.charAt(i); if (c == separatorChar) { toUpper = true; continue; } if (toUpper) { propertyName.append(Character.toUpperCase(c)); toUpper = false; } else { propertyName.append(Character.toLowerCase(c)); } } return propertyName.toString(); } return columnName; }\n\n    ### Response:",
        "ground_truth": "Converts column name to property name.",
        "predict": " // relation requests relation information from the server..\n\n    "
    },
    {
        "ID": 725,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function enqueue_dependencies( $handles, $context = null ) { if ( null !== $context ) { $this->add_context( $context ); } if ( ! $this->dependencies || count( $handles ) < 1 ) { return; } foreach ( $handles as $handle ) { $found = $this->dependencies->enqueue_handle( $handle, $this->context, true ); if ( ! $found ) { $message = sprintf( __( 'Could not enqueue dependency \"%1$s\" for shortcode \"%2$s\".', 'bn-shortcodes' ), $handle, $this->get_tag() ); trigger_error( $message, E_USER_WARNING ); } } }\n\n    ### Response: Enqueue the dependencies that the shortcode needs.\n\n@since 0.2.9\n\n@param array $handles Array of dependency handles to enqueue.\n@param mixed $context Optional. Context in which to enqueue..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String applyToColumnName(final String columnName) { String propertyName = convertColumnNameToPropertyName(columnName); return convertPropertyNameToColumnName(propertyName); }\n\n    ### Response:",
        "ground_truth": "Applies column naming strategy to given column name hint.\nReturns full column name.",
        "predict": " Enqueue the dependencies that the shortcode needs.\n\n@since 0.2.9\n\n@param array $handles Array of dependency handles to enqueue.\n@param mixed $context Optional. Context in which to enqueue..\n\n    "
    },
    {
        "ID": 726,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public void loadFromJSONObject(JSONObject jobj, Database db) throws JSONException { helpLoadFromJSONObject(jobj, db); JSONArray jarray = jobj.getJSONArray( Members.AGGREGATE_COLUMNS.name() ); int size = jarray.length(); for (int i = 0; i < size; i++) { // We only expect one of these for now. assert(i == 0); JSONObject tempObj = jarray.getJSONObject( i ); m_aggregateTypes.add( ExpressionType.get( tempObj.getString( Members.AGGREGATE_TYPE.name() ))); m_aggregateOutputColumns.add( tempObj.getInt( Members.AGGREGATE_OUTPUT_COLUMN.name() )); m_aggregateExpressions.add( AbstractExpression.loadFromJSONArrayChild(null, tempObj, Members.AGGREGATE_EXPRESSIONS.name(), null)); } m_partitionByExpressions = AbstractExpression.loadFromJSONArrayChild(null, jobj, Members.PARTITIONBY_EXPRESSIONS.name(), null); m_orderByExpressions = new ArrayList<>(); AbstractExpression.loadSortListFromJSONArray(m_orderByExpressions, null, jobj); }\n\n    ### Response: Deserialize a PartitionByPlanNode from JSON.  Since we don't need the\nsort directions, and we don't serialize them in toJSONString, then we\ncan't in general get them here..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void storeValue(final PreparedStatement st, final int index, final Object value, final int dbSqlType) throws SQLException { T t = TypeConverterManager.get().convertType(value, sqlType); set(st, index, t, dbSqlType); }\n\n    ### Response:",
        "ground_truth": "Stores value in database. Value is casted to sql type.",
        "predict": " Deserialize a PartitionByPlanNode from JSON.  Since we don't need the\nsort directions, and we don't serialize them in toJSONString, then we\ncan't in general get them here..\n\n    "
    },
    {
        "ID": 727,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function _debug($storeId) { if ($this->_getConfigData('debug', 'adyen_abstract', $storeId)) { $file = 'adyen_orderstatus_pos.log'; Mage::getModel('core/log_adapter', $file)->log($this->_debugData); } }\n\n    ### Response: Log debug data to file\n\n@param $storeId\n@param mixed $debugData.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SuppressWarnings({\"unchecked\"}) protected <E> E prepareGetValue(final T t, final Class<E> destinationType) { if (t == null) { return null; } if (destinationType == null) { return (E) t; } return TypeConverterManager.get().convertType(t, destinationType); }\n\n    ### Response:",
        "ground_truth": "Once when value is read from result set, prepare it to match destination type.\n@param t get value\n@param destinationType destination type",
        "predict": " Log debug data to file\n\n@param $storeId\n@param mixed $debugData.\n\n    "
    },
    {
        "ID": 728,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SuppressWarnings({ \"unchecked\", \"rawtypes\" }) public static Map<String, Object> fromQueryString(String queryString) { Map<String, Object> result = new LinkedHashMap<String, Object>(); if (queryString.startsWith(\"?\")) queryString = queryString.substring(1); String[] pairs = queryString.split(\"&\"); for (String pair : pairs) { int i = pair.indexOf('='); if (i > -1) { try { String name = URLDecoder.decode(pair.substring(0, i), \"UTF-8\"); String value = URLDecoder.decode(pair.substring(i+1, pair.length()), \"UTF-8\"); Object current = result.get(name); if (current instanceof List) { ((List)current).add(value); } else if (current != null) { List multi = new ArrayList(); multi.add(current); multi.add(value); result.put(name, multi); } else { result.put(name, value); } } catch (UnsupportedEncodingException e) { // ignore } } } return result; }\n\n    ### Response: Takes a query string and returns the results as a map where the values are either a single entry or a list of values\n\n@param queryString The query String\n@return A map.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected Set<T> getAll() { final Set<T> set = new HashSet<>(wrappers.size()); set.addAll(wrappers.values()); return set; }\n\n    ### Response:",
        "ground_truth": "Returns all action wrappers. Returns a copy in new set.",
        "predict": " Takes a query string and returns the results as a map where the values are either a single entry or a list of values\n\n@param queryString The query String\n@return A map.\n\n    "
    },
    {
        "ID": 729,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String getShortName(Locale locale, String id, String nameKey, boolean standardTime) { String[] nameSet = getNameSet(locale, id, nameKey, standardTime); return nameSet == null ? null : nameSet[0]; }\n\n    ### Response: handles changes to the nameKey better.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public T resolve(final Class<? extends T> wrapperClass) { String wrapperClassName = wrapperClass.getName(); T wrapper = lookup(wrapperClassName); if (wrapper == null) { wrapper = createWrapper(wrapperClass); initializeWrapper(wrapper); wrappers.put(wrapperClassName, wrapper); } return wrapper; }\n\n    ### Response:",
        "ground_truth": "Resolves single wrapper. Creates new wrapper instance if not already registered.\nDoes not expand the wrappers.",
        "predict": " handles changes to the nameKey better.\n\n    "
    },
    {
        "ID": 730,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function actionDelete($id) { try { $this->findModel($id)->delete(); } catch (\\Exception $e) { $msg = (isset($e->errorInfo[2]))?$e->errorInfo[2]:$e->getMessage(); \\Yii::$app->getSession()->addFlash('error', $msg); return $this->redirect(Url::previous()); } // TODO: improve detection $isPivot = strstr('$id',','); if ($isPivot == true) { return $this->redirect(Url::previous()); } elseif (isset(\\Yii::$app->session['__crudReturnUrl']) && \\Yii::$app->session['__crudReturnUrl'] != '/') { Url::remember(null); $url = \\Yii::$app->session['__crudReturnUrl']; \\Yii::$app->session['__crudReturnUrl'] = null; return $this->redirect($url); } else { return $this->redirect(['index']); } }\n\n    ### Response: Deletes an existing Country model.\nIf deletion is successful, the browser will be redirected to the 'index' page.\n@param integer $id\n@return mixed.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected <R extends T> R createWrapper(final Class<R> wrapperClass) { try { return ClassUtil.newInstance(wrapperClass); } catch (Exception ex) { throw new MadvocException(\"Invalid Madvoc wrapper: \" + wrapperClass, ex); } }\n\n    ### Response:",
        "ground_truth": "Creates new wrapper.",
        "predict": " Deletes an existing Country model.\nIf deletion is successful, the browser will be redirected to the 'index' page.\n@param integer $id\n@return mixed.\n\n    "
    },
    {
        "ID": 731,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _countWhereGreaterEqualInRows(sparseMatrix, rows, threshold): \"\"\" Like countWhereGreaterOrEqual, but for an arbitrary selection of rows, and without any column filtering. \"\"\" return sum(sparseMatrix.countWhereGreaterOrEqual(row, row+1, 0, sparseMatrix.nCols(), threshold) for row in rows)\n\n    ### Response: Like countWhereGreaterOrEqual, but for an arbitrary selection of rows, and\n  without any column filtering..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String separatorsToSystem(final String path) { if (path == null) { return null; } if (SYSTEM_SEPARATOR == WINDOWS_SEPARATOR) { return separatorsToWindows(path); } else { return separatorsToUnix(path); } }\n\n    ### Response:",
        "ground_truth": "Converts all separators to the system separator.\n\n@param path  the path to be changed, null ignored\n@return the updated path",
        "predict": " Like countWhereGreaterOrEqual, but for an arbitrary selection of rows, and\n  without any column filtering..\n\n    "
    },
    {
        "ID": 732,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function isMultiple( core_kernel_classes_Resource $resource) { $returnValue = (bool) false; throw new core_kernel_persistence_ProhibitedFunctionException(\"not implemented => The function (\".__METHOD__.\") is not available in this persistence implementation (\".__CLASS__.\")\"); return (bool) $returnValue; }\n\n    ### Response: Short description of method isMultiple\n\n@access public\n@author Jerome Bogaerts, \n@param  Resource resource\n@return boolean.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static String doGetPath(final String filename, final int separatorAdd) { if (filename == null) { return null; } int prefix = getPrefixLength(filename); if (prefix < 0) { return null; } int index = indexOfLastSeparator(filename); int endIndex = index + separatorAdd; if (prefix >= filename.length() || index < 0 || prefix >= endIndex) { return StringPool.EMPTY; } return filename.substring(prefix, endIndex); }\n\n    ### Response:",
        "ground_truth": "Does the work of getting the path.\n\n@param filename  the filename\n@param separatorAdd  0 to omit the end separator, 1 to return it\n@return the path",
        "predict": " Short description of method isMultiple\n\n@access public\n@author Jerome Bogaerts, \n@param  Resource resource\n@return boolean.\n\n    "
    },
    {
        "ID": 733,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (t *Template) GetAWSElastiCacheReplicationGroupWithName(name string) (*resources.AWSElastiCacheReplicationGroup, error) { if untyped, ok := t.Resources[name]; ok { switch resource := untyped.(type) { case *resources.AWSElastiCacheReplicationGroup: return resource, nil } } return nil, fmt.Errorf(\"resource %q of type AWSElastiCacheReplicationGroup not found\", name) }\n\n    ### Response: // GetAWSElastiCacheReplicationGroupWithName retrieves all AWSElastiCacheReplicationGroup items from an AWS CloudFormation template\n// whose logical ID matches the provided name. Returns an error if not found..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String[] split(final String filename) { String prefix = getPrefix(filename); if (prefix == null) { prefix = StringPool.EMPTY; } int lastSeparatorIndex = indexOfLastSeparator(filename); int lastExtensionIndex = indexOfExtension(filename); String path; String baseName; String extension; if (lastSeparatorIndex == -1) { path = StringPool.EMPTY; if (lastExtensionIndex == -1) { baseName = filename.substring(prefix.length()); extension = StringPool.EMPTY; } else { baseName = filename.substring(prefix.length(), lastExtensionIndex); extension = filename.substring(lastExtensionIndex + 1); } } else { path = filename.substring(prefix.length(), lastSeparatorIndex + 1); if (lastExtensionIndex == -1) { baseName = filename.substring(prefix.length() + path.length()); extension = StringPool.EMPTY; } else { baseName = filename.substring(prefix.length() + path.length(), lastExtensionIndex); extension = filename.substring(lastExtensionIndex + 1); } } return new String[] {prefix, path, baseName, extension}; }\n\n    ### Response:",
        "ground_truth": "Splits filename into a array of four Strings containing prefix, path, basename and extension.\nPath will contain ending separator.",
        "predict": " // GetAWSElastiCacheReplicationGroupWithName retrieves all AWSElastiCacheReplicationGroup items from an AWS CloudFormation template\n// whose logical ID matches the provided name. Returns an error if not found..\n\n    "
    },
    {
        "ID": 734,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function fromString($uri) { if (! is_string($uri)) { throw new InvalidArgumentException(sprintf( '\"%s()\" expects string; \"%s\" received.', __METHOD__, is_object($uri) ? get_class($uri) : gettype($uri) )); } $this ->setUserInfo( parse_url($uri, PHP_URL_USER), parse_url($uri, PHP_URL_PASS) ) ->setScheme(parse_url($uri, PHP_URL_SCHEME)) ->setHost(parse_url($uri, PHP_URL_HOST)) ->setPath(parse_url($uri, PHP_URL_PATH)) ->setQuery(parse_url($uri, PHP_URL_QUERY)) ->setFragment(parse_url($uri, PHP_URL_FRAGMENT)); if ($port = parse_url($uri, PHP_URL_PORT)) { $this->setPort($port); } return $this; }\n\n    ### Response: Forms the an object from an URI string.\n\n@param string $uri The URI string\n\n@throws InvalidArgumentException On non-string $uri argument\n\n@return Uri The current instance.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String relativePath(final String targetPath, final String basePath) { return new File(basePath).toPath().relativize(new File(targetPath).toPath()).toString(); }\n\n    ### Response:",
        "ground_truth": "Calculates relative path of target path on base path.",
        "predict": " Forms the an object from an URI string.\n\n@param string $uri The URI string\n\n@throws InvalidArgumentException On non-string $uri argument\n\n@return Uri The current instance.\n\n    "
    },
    {
        "ID": 735,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    Node createThisAliasReferenceForFunction(String aliasName, Node functionNode) { final Node result = IR.name(aliasName); if (isAddingTypes()) { result.setJSType(getTypeOfThisForFunctionNode(functionNode)); } return result; }\n\n    ### Response: Creates a NAME node having the type of \"this\" appropriate for the given function node..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public WebApp registerComponent(final Class<?> madvocComponent) { Objects.requireNonNull(madvocComponent); madvocComponents.add(ClassConsumer.of(madvocComponent)); return this; }\n\n    ### Response:",
        "ground_truth": "Registers additional Madvoc components after the registration of default components.",
        "predict": " Creates a NAME node having the type of \"this\" appropriate for the given function node..\n\n    "
    },
    {
        "ID": 736,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String dateToMWTimeStamp(Date date) { SimpleDateFormat mwTimeStampFormat = new SimpleDateFormat(\"yyyyMMddHHmmss\"); String result = mwTimeStampFormat.format(date); return result; }\n\n    ### Response: convert a data to a MediaWiki API timestamp\n\n@param date\n@return.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public <A extends ActionConfig> WebApp withActionConfig(final Class<A> actionConfigType, final Consumer<A> actionConfigConsumer) { withRegisteredComponent(ActionConfigManager.class, acm -> acm.with(actionConfigType, actionConfigConsumer)); return this; }\n\n    ### Response:",
        "ground_truth": "Configures the action configurations.",
        "predict": " convert a data to a MediaWiki API timestamp\n\n@param date\n@return.\n\n    "
    },
    {
        "ID": 737,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def segment_to_vector(self, seg): \"\"\"Given a Unicode IPA segment, return a list of feature specificiations in cannonical order. Args: seg (unicode): IPA consonant or vowel Returns: list: feature specifications ('+'/'-'/'0') in the order from `FeatureTable.names` \"\"\" ft_dict = {ft: val for (val, ft) in self.fts(seg)} return [ft_dict[name] for name in self.names]\n\n    ### Response: Given a Unicode IPA segment, return a list of feature specificiations\n        in cannonical order.\n\n        Args:\n            seg (unicode): IPA consonant or vowel\n\n        Returns:\n            list: feature specifications ('+'/'-'/'0') in the order from\n            `FeatureTable.names`.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public WebApp start() { log = LoggerFactory.getLogger(WebApp.class); log.debug(\"Initializing Madvoc WebApp\"); //// params & props for (final Map<String, Object> params : paramsList) { madvocContainer.defineParams(params); } for (final Props props : propsList) { madvocContainer.defineParams(props); } propsList = null; //// components registerMadvocComponents(); madvocComponents.forEach( madvocComponent -> madvocContainer.registerComponent(madvocComponent.type(), madvocComponent.consumer())); madvocComponents = null; madvocComponentInstances.forEach(madvocContainer::registerComponentInstance); madvocComponentInstances = null; configureDefaults(); //// listeners madvocContainer.fireEvent(Init.class); //// component configuration componentConfigs.accept(madvocContainer); componentConfigs = null; initialized(); madvocContainer.fireEvent(Start.class); if (!madvocRouterConsumers.isEmpty()) { final MadvocRouter madvocRouter = MadvocRouter.create(); madvocContainer.registerComponentInstance(madvocRouter); madvocRouterConsumers.accept(madvocRouter); } madvocRouterConsumers = null; started(); madvocContainer.fireEvent(Ready.class); ready(); return this; }\n\n    ### Response:",
        "ground_truth": "Initializes and starts web application.",
        "predict": " Given a Unicode IPA segment, return a list of feature specificiations\n        in cannonical order.\n\n        Args:\n            seg (unicode): IPA consonant or vowel\n\n        Returns:\n            list: feature specifications ('+'/'-'/'0') in the order from\n            `FeatureTable.names`.\n\n    "
    },
    {
        "ID": 738,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def fetch_default_benchmark_csv cache_path = CSV_TEST_DATA_CACHE_PATH if File.exist?(cache_path) writer.puts \"Cache file found at #{cache_path}.\", verbose: true @used_input_path = cache_path return File.read(cache_path) end writer.print 'Downloading test data file from GitHub..', verbose: true require 'open-uri' open(CSV_TEST_DATA_URL).read.tap do |csv| # rubocop:disable Security/Open @used_input_path = CSV_TEST_DATA_URL writer.puts 'done!', verbose: true File.write(cache_path, csv) writer.puts \"Wrote cache file to #{cache_path}..\", verbose: true end end\n\n    ### Response: Download or fetch the default benchmark file from cache\n @return [String] CSV file as a string.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void configureDefaults() { final ActionConfigManager actionConfigManager = madvocContainer.lookupComponent(ActionConfigManager.class); actionConfigManager.registerAnnotation(Action.class); actionConfigManager.registerAnnotation(RestAction.class); }\n\n    ### Response:",
        "ground_truth": "Configure defaults.",
        "predict": " Download or fetch the default benchmark file from cache\n @return [String] CSV file as a string.\n\n    "
    },
    {
        "ID": 739,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function toOne($target, $value) { $metadata = $this->objectManager->getClassMetadata($target); if (is_array($value) && array_keys($value) != $metadata->getIdentifier()) { // $value is most likely an array of fieldset data $identifiers = array_intersect_key( $value, array_flip($metadata->getIdentifier()) ); $object = $this->find($identifiers, $target) ?: new $target; return $this->hydrate($value, $object); } return $this->find($value, $target); }\n\n    ### Response: Handle ToOne associations\n\nWhen $value is an array but is not the $target's identifiers, $value is\nmost likely an array of fieldset data. The identifiers will be determined\nand a target instance will be initialized and then hydrated. The hydrated\ntarget will be returned.\n\n@param  string $target\n@param  mixed  $value\n@return object.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void registerMadvocComponents() { if (madvocContainer == null) { throw new MadvocException(\"Madvoc WebApp not initialized.\"); } log.debug(\"Registering Madvoc WebApp components\"); madvocContainer.registerComponent(MadvocEncoding.class); madvocContainer.registerComponentInstance(new ServletContextProvider(servletContext)); madvocContainer.registerComponent(ActionConfigManager.class); madvocContainer.registerComponent(ActionMethodParamNameResolver.class); madvocContainer.registerComponent(ActionMethodParser.class); madvocContainer.registerComponent(ActionPathRewriter.class); madvocContainer.registerComponent(ActionsManager.class); madvocContainer.registerComponent(ContextInjectorComponent.class); madvocContainer.registerComponent(InterceptorsManager.class); madvocContainer.registerComponent(FiltersManager.class); madvocContainer.registerComponent(MadvocController.class); madvocContainer.registerComponent(RootPackages.class); madvocContainer.registerComponent(ResultsManager.class); madvocContainer.registerComponent(ResultMapper.class); madvocContainer.registerComponent(ScopeResolver.class); madvocContainer.registerComponent(ScopeDataInspector.class); madvocContainer.registerComponent(AsyncActionExecutor.class); madvocContainer.registerComponent(FileUploader.class); }\n\n    ### Response:",
        "ground_truth": "Registers default Madvoc components.",
        "predict": " Handle ToOne associations\n\nWhen $value is an array but is not the $target's identifiers, $value is\nmost likely an array of fieldset data. The identifiers will be determined\nand a target instance will be initialized and then hydrated. The hydrated\ntarget will be returned.\n\n@param  string $target\n@param  mixed  $value\n@return object.\n\n    "
    },
    {
        "ID": 740,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private Object deserializePrimitive(PrimitiveTypeInfo type, Object value) throws SerDeException { switch (type.getPrimitiveCategory()) { case VOID: return null; case STRING: return deserializeString(value); case BOOLEAN: return deserializeBoolean(value); case BYTE: case SHORT: case INT: case LONG: case FLOAT: case DOUBLE: return deserializeNumber(value, type); case DATE: case TIMESTAMP: return deserializeDate(value, type); default: throw new SerDeException(\"Unsupported type: \" + type.getPrimitiveCategory()); } }\n\n    ### Response: Deserializes a primitive to its corresponding Java type, doing a best-effort conversion when necessary..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public ClassScanner excludeJars(final String... excludedJars) { for (final String excludedJar : excludedJars) { rulesJars.exclude(excludedJar); } return this; }\n\n    ### Response:",
        "ground_truth": "Specify excluded jars.",
        "predict": " Deserializes a primitive to its corresponding Java type, doing a best-effort conversion when necessary..\n\n    "
    },
    {
        "ID": 741,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected Principal authenticateAndGetPrincipal(final UsernamePasswordCredential credential) throws GeneralSecurityException { val lc = getLoginContext(credential); try { lc.login(); val principals = lc.getSubject().getPrincipals(); LOGGER.debug(\"JAAS principals extracted from subject are [{}}\", principals); if (principals != null && !principals.isEmpty()) { val secPrincipal = principals.iterator().next(); LOGGER.debug(\"JAAS principal detected from subject login context is [{}}\", secPrincipal.getName()); return this.principalFactory.createPrincipal(secPrincipal.getName()); } } finally { if (lc != null) { lc.logout(); } } return null; }\n\n    ### Response: Authenticate and get principal principal.\n\n@param credential the credential\n@return the principal\n@throws GeneralSecurityException the general security exception.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public ClassScanner includeJars(final String... includedJars) { for (final String includedJar : includedJars) { rulesJars.include(includedJar); } return this; }\n\n    ### Response:",
        "ground_truth": "Specify included jars.",
        "predict": " Authenticate and get principal principal.\n\n@param credential the credential\n@return the principal\n@throws GeneralSecurityException the general security exception.\n\n    "
    },
    {
        "ID": 742,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public <T extends Enum<?>> T randomElement(Class<T> enumType) { return enumType.getEnumConstants()[randomBetween(0, enumType.getEnumConstants().length - 1)]; }\n\n    ### Response: Returns random enum value\n\n@param       element generic type\n@param enumType enum class\n@return random enum value.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public ClassScanner includeEntries(final String... includedEntries) { for (final String includedEntry : includedEntries) { rulesEntries.include(includedEntry); } return this; }\n\n    ### Response:",
        "ground_truth": "Sets included set of names that will be considered during configuration.\n@see InExRules",
        "predict": " Returns random enum value\n\n@param       element generic type\n@param enumType enum class\n@return random enum value.\n\n    "
    },
    {
        "ID": 743,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _get_or_create_service_key(self): \"\"\" Get a service key or create one if needed. \"\"\" keys = self.service._get_service_keys(self.name) for key in keys['resources']: if key['entity']['name'] == self.service_name: return self.service.get_service_key(self.name, self.service_name) self.service.create_service_key(self.name, self.service_name) return self.service.get_service_key(self.name, self.service_name)\n\n    ### Response: Get a service key or create one if needed..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public ClassScanner excludeEntries(final String... excludedEntries) { for (final String excludedEntry : excludedEntries) { rulesEntries.exclude(excludedEntry); } return this; }\n\n    ### Response:",
        "ground_truth": "Sets excluded names that narrows included set of packages.\n@see InExRules",
        "predict": " Get a service key or create one if needed..\n\n    "
    },
    {
        "ID": 744,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static EnterpriseArchive createEARDeployment() { final EnterpriseArchive ear = ShrinkWrap.create(EnterpriseArchive.class, \"scribble-test.ear\"); // use local maven repository mirror only final PomEquippedResolveStage pom = Maven.configureResolver().workOffline().loadPomFromFile(\"pom.xml\"); final File[] files = pom.importDependencies(ScopeType.COMPILE).resolve().withTransitivity().asFile(); for (final File f : files) { if (f.getName().endsWith(\".jar\")) { LOG.debug(\"Adding lib {}\", f); ear.addAsLibrary(f); } } return ear; }\n\n    ### Response: Creates an enterprise archive for the module in whose working directory the method is invoked, including all\ncompile-scoped jar archives.\n\n@return an enterprise containgin all dependency of the current module.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void scanJarFile(final File file) { final ZipFile zipFile; try { zipFile = new ZipFile(file); } catch (IOException ioex) { if (!ignoreException) { throw new FindFileException(\"Invalid zip: \" + file.getName(), ioex); } return; } final Enumeration entries = zipFile.entries(); while (entries.hasMoreElements()) { final ZipEntry zipEntry = (ZipEntry) entries.nextElement(); final String zipEntryName = zipEntry.getName(); try { if (StringUtil.endsWithIgnoreCase(zipEntryName, CLASS_FILE_EXT)) { final String entryName = prepareEntryName(zipEntryName, true); final ClassPathEntry classPathEntry = new ClassPathEntry(entryName, zipFile, zipEntry); try { scanEntry(classPathEntry); } finally { classPathEntry.closeInputStream(); } } else if (includeResources) { final String entryName = prepareEntryName(zipEntryName, false); final ClassPathEntry classPathEntry = new ClassPathEntry(entryName, zipFile, zipEntry); try { scanEntry(classPathEntry); } finally { classPathEntry.closeInputStream(); } } } catch (RuntimeException rex) { if (!ignoreException) { ZipUtil.close(zipFile); throw rex; } } } ZipUtil.close(zipFile); }\n\n    ### Response:",
        "ground_truth": "Scans classes inside single JAR archive. Archive is scanned as a zip file.\n@see #onEntry(ClassPathEntry)",
        "predict": " Creates an enterprise archive for the module in whose working directory the method is invoked, including all\ncompile-scoped jar archives.\n\n@return an enterprise containgin all dependency of the current module.\n\n    "
    },
    {
        "ID": 745,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function voteForReadAction($node, TokenInterface $token) { return $this->hasRole($token, ContributionRoleInterface::NODE_CONTRIBUTOR) && $this->isSubjectInPerimeter($this->getPath($node), $token->getUser(), NodeInterface::ENTITY_TYPE); }\n\n    ### Response: Vote for Read action\nA user can read a node if it is in his perimeter\n\n@param NodeInterface  $node\n@param TokenInterface $token\n\n@return bool.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void scanClassPath(final File root) { String rootPath = root.getAbsolutePath(); if (!rootPath.endsWith(File.separator)) { rootPath += File.separatorChar; } final FindFile ff = FindFile.create().includeDirs(false).recursive(true).searchPath(rootPath); File file; while ((file = ff.nextFile()) != null) { final String filePath = file.getAbsolutePath(); try { if (StringUtil.endsWithIgnoreCase(filePath, CLASS_FILE_EXT)) { scanClassFile(filePath, rootPath, file, true); } else if (includeResources) { scanClassFile(filePath, rootPath, file, false); } } catch (RuntimeException rex) { if (!ignoreException) { throw rex; } } } }\n\n    ### Response:",
        "ground_truth": "Scans single classpath directory.\n@see #onEntry(ClassPathEntry)",
        "predict": " Vote for Read action\nA user can read a node if it is in his perimeter\n\n@param NodeInterface  $node\n@param TokenInterface $token\n\n@return bool.\n\n    "
    },
    {
        "ID": 746,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function extractHeaders() { $headers = []; foreach (array_keys($this->cors) as $headerField) { $headerData = $this->request->getHeaderLine($headerField); if ($headerData !== null) { $headers[$headerField] = $headerData; } } return $headers; }\n\n    ### Response: Extract CORS headers from the request.\n@return array CORS headers to handle.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static byte[] bytecodeSignatureOfType(final Class type) { final String name = 'L' + type.getName().replace('.', '/') + ';'; return name.getBytes(); }\n\n    ### Response:",
        "ground_truth": "Returns type signature bytes used for searching in class file.",
        "predict": " Extract CORS headers from the request.\n@return array CORS headers to handle.\n\n    "
    },
    {
        "ID": 747,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function unwind(string $cypher): self { $query = new self; $query->clauses = $this->clauses->add( new Clause\\UnwindClause($cypher) ); return $query; }\n\n    ### Response: Add a UNWIND clause\n\n@param string $cypher\n\n@return self.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public ClassScanner scan(final String... paths) { for (final String path : paths) { filesToScan.add(new File(path)); } return this; }\n\n    ### Response:",
        "ground_truth": "Scans provided paths.",
        "predict": " Add a UNWIND clause\n\n@param string $cypher\n\n@return self.\n\n    "
    },
    {
        "ID": 748,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function getExtension( /*# string */ $extensionName )/*# : ExtensionAbstract */ { if (!$this->hasExtension($extensionName)) { $this->addExtension(new $extensionName); } return $this->extensions[$extensionName]; }\n\n    ### Response: Get the named extension, create one if not injected yet\n\n@param  string $extensionName\n@return ExtensionAbstract\n@access public\n@internal.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void start() { if (detectEntriesMode) { rulesEntries.detectMode(); } filesToScan.forEach(file -> { final String path = file.getAbsolutePath(); if (StringUtil.endsWithIgnoreCase(path, JAR_FILE_EXT)) { if (!acceptJar(file)) { return; } scanJarFile(file); } else if (file.isDirectory()) { scanClassPath(file); } }); }\n\n    ### Response:",
        "ground_truth": "Starts with the scanner.",
        "predict": " Get the named extension, create one if not injected yet\n\n@param  string $extensionName\n@return ExtensionAbstract\n@access public\n@internal.\n\n    "
    },
    {
        "ID": 749,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function storeErrors(NestedValidationException $e, Configuration $config, array $messages = []) { $errors = [ $e->findMessages($this->getRulesNames($config->getValidationRules())) ]; // If default messages are defined if (!empty($this->defaultMessages)) { $errors[] = $e->findMessages($this->defaultMessages); } // If global messages are defined if (!empty($messages)) { $errors[] = $e->findMessages($messages); } // If individual messages are defined if ($config->hasMessages()) { $errors[] = $e->findMessages($config->getMessages()); } $this->setErrors($this->mergeMessages($errors), $config->getKey(), $config->getGroup()); }\n\n    ### Response: Sets error messages after validation.\n\n@param NestedValidationException $e\n@param Configuration             $config\n@param string[]                  $messages.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override protected JtxTransaction createNewTransaction(final JtxTransactionMode tm, final Object scope, final boolean active) { return new DbJtxTransaction(this, tm, scope, active); }\n\n    ### Response:",
        "ground_truth": "Builds new transaction instance.",
        "predict": " Sets error messages after validation.\n\n@param NestedValidationException $e\n@param Configuration             $config\n@param string[]                  $messages.\n\n    "
    },
    {
        "ID": 750,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public void run() { this.stateLock.lock(); try { if (this.state != RunnableProcessState.INIT) { throw new IllegalStateException(\"The RunnableProcess can't be reused\"); } // Setup the stdout and stderr destinations. final File errFile = new File(folder, standardErrorFileName); final File outFile = new File(folder, standardOutFileName); // Launch the process try { LOG.log(Level.FINEST, \"Launching process \\\"{0}\\\"\\nSTDERR can be found in {1}\\nSTDOUT can be found in {2}\", new Object[] {this.id, errFile.getAbsolutePath(), outFile.getAbsolutePath()}); this.process = new ProcessBuilder() .command(this.command) .directory(this.folder) .redirectError(errFile) .redirectOutput(outFile) .start(); this.setState(RunnableProcessState.RUNNING); this.processObserver.onProcessStarted(this.id); } catch (final IOException ex) { LOG.log(Level.SEVERE, \"Unable to spawn process \" + this.id + \" with command \" + this.command, ex); } } finally { this.stateLock.unlock(); } try { // Wait for its completion LOG.log(Level.FINER, \"Wait for process completion: {0}\", this.id); final int returnValue = this.process.waitFor(); this.processObserver.onProcessExit(this.id, returnValue); this.stateLock.lock(); try { this.setState(RunnableProcessState.ENDED); this.doneCond.signalAll(); } finally { this.stateLock.unlock(); } LOG.log(Level.FINER, \"Process \\\"{0}\\\" returned {1}\", new Object[] {this.id, returnValue}); } catch (final InterruptedException ex) { LOG.log(Level.SEVERE, \"Interrupted while waiting for the process \\\"{0}\\\" to complete. Exception: {1}\", new Object[] {this.id, ex}); } }\n\n    ### Response: Runs the configured process.\n@throws IllegalStateException if the process is already running or has been running before..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SuppressWarnings(\"unchecked\") public <S extends MadvocScope> S defaultOrScopeType(final Class<S> scopeClass) { if (scopeClass == null) { return (S) getOrInitScope(RequestScope.class); } return (S) getOrInitScope(scopeClass); }\n\n    ### Response:",
        "ground_truth": "Lookups the scope instance of given scope annotation.\nIf instance does not exist, it will be created, cached and returned.",
        "predict": " Runs the configured process.\n@throws IllegalStateException if the process is already running or has been running before..\n\n    "
    },
    {
        "ID": 751,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public int getCount(Class target) { PersistenceBroker broker = ((HasBroker) odmg.currentTransaction()).getBroker(); int result = broker.getCount(new QueryByCriteria(target)); return result; }\n\n    ### Response: Return the count of all objects found\nfor given class, using the PB-api within\nODMG - this may change in further versions..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected MadvocScope getOrInitScope(final Class<? extends MadvocScope> madvocScopeType) { for (final MadvocScope s : allScopes) { if (s.getClass().equals(madvocScopeType)) { return s; } } // new scope detected final MadvocScope newScope; try { newScope = madpc.createBean(madvocScopeType); } catch (Exception ex) { throw new MadvocException(\"Unable to create scope: \" + madvocScopeType, ex); } allScopes.add(newScope); return newScope; }\n\n    ### Response:",
        "ground_truth": "Performs search for the scope class and returns it's instance.",
        "predict": " Return the count of all objects found\nfor given class, using the PB-api within\nODMG - this may change in further versions..\n\n    "
    },
    {
        "ID": 752,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    boolean filterWay(ReaderWay item) { // ignore broken geometry if (item.getNodes().size() < 2) return false; // ignore multipolygon geometry if (!item.hasTags()) return false; return encodingManager.acceptWay(item, new EncodingManager.AcceptWay()); }\n\n    ### Response: Filter ways but do not analyze properties wayNodes will be filled with participating node ids.\n\n@return true the current xml entry is a way entry and has nodes.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void forScope(final Class<? extends MadvocScope> scopeType, final Consumer<MadvocScope> madvocScopeConsumer) { final MadvocScope scope = getOrInitScope(scopeType); madvocScopeConsumer.accept(scope); }\n\n    ### Response:",
        "ground_truth": "Finds a given scope and consumes it.",
        "predict": " Filter ways but do not analyze properties wayNodes will be filled with participating node ids.\n\n@return true the current xml entry is a way entry and has nodes.\n\n    "
    },
    {
        "ID": 753,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def get_components(self) -> List: \"\"\"Get a list of all components in the simulation.\"\"\" return [component for component in self.component_manager._components + self.component_manager._managers]\n\n    ### Response: Get a list of all components in the simulation..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static byte[] decode(final char[] arr) { int length = arr.length; if (length == 0) { return new byte[0]; } int sndx = 0, endx = length - 1; int pad = arr[endx] == '=' ? (arr[endx - 1] == '=' ? 2 : 1) : 0; int cnt = endx - sndx + 1; int sepCnt = length > 76 ? (arr[76] == '\\r' ? cnt / 78 : 0) << 1 : 0; int len = ((cnt - sepCnt) * 6 >> 3) - pad; byte[] dest = new byte[len]; int d = 0; for (int cc = 0, eLen = (len / 3) * 3; d < eLen;) { int i = INV[arr[sndx++]] << 18 | INV[arr[sndx++]] << 12 | INV[arr[sndx++]] << 6 | INV[arr[sndx++]]; dest[d++] = (byte) (i >> 16); dest[d++] = (byte) (i >> 8); dest[d++] = (byte) i; if (sepCnt > 0 && ++cc == 19) { sndx += 2; cc = 0; } } if (d < len) { int i = 0; for (int j = 0; sndx <= endx - pad; j++) { i |= INV[arr[sndx++]] << (18 - j * 6); } for (int r = 16; d < len; r -= 8) { dest[d++] = (byte) (i >> r); } } return dest; }\n\n    ### Response:",
        "ground_truth": "Decodes a BASE64 encoded char array.",
        "predict": " Get a list of all components in the simulation..\n\n    "
    },
    {
        "ID": 754,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def run(model, collect, filename, location, ignore_git, pytest_args, exclusive, skip, solver, experimental, custom_tests, deployment, skip_unchanged): \"\"\" Run the test suite on a single model and collect results. MODEL: Path to model file. Can also be supplied via the environment variable MEMOTE_MODEL or configured in 'setup.cfg' or 'memote.ini'. \"\"\" def is_verbose(arg): return (arg.startswith(\"--verbosity\") or arg.startswith(\"-v\") or arg.startswith(\"--verbose\") or arg.startswith(\"-q\") or arg.startswith(\"--quiet\")) if ignore_git: repo = None else: callbacks.git_installed() repo = callbacks.probe_git() if collect: if repo is not None: if location is None: LOGGER.critical( \"Working with a repository requires a storage location.\") sys.exit(1) if not any(a.startswith(\"--tb\") for a in pytest_args): pytest_args = [\"--tb\", \"short\"] + pytest_args if not any(is_verbose(a) for a in pytest_args): pytest_args.append(\"-vv\") # Check if the model was changed in this commit. Exit `memote run` if this # was not the case. if skip_unchanged and repo is not None: commit = repo.head.commit if not is_modified(model, commit): LOGGER.info(\"The model was not modified in commit '%s'. Skipping.\", commit.hexsha) sys.exit(0) # Add further directories to search for tests. pytest_args.extend(custom_tests) # Check if the model can be loaded at all. model, sbml_ver, notifications = api.validate_model(model) if model is None: LOGGER.critical( \"The model could not be loaded due to the following SBML errors.\") stdout_notifications(notifications) sys.exit(1) model.solver = solver # Load the experimental configuration using model information. if experimental is not None: experimental.load(model) code, result = api.test_model( model=model, sbml_version=sbml_ver, results=True, pytest_args=pytest_args, skip=skip, exclusive=exclusive, experimental=experimental) if collect: if repo is None: manager = ResultManager() manager.store(result, filename=filename) else: LOGGER.info(\"Checking out deployment branch.\") # If the repo HEAD is pointing to the most recent branch then # GitPython's `repo.active_branch` works. Yet, if the repo is in # detached HEAD state, i.e., when a user has checked out a specific # commit as opposed to a branch, this won't work and throw a # `TypeError`, which we are circumventing below. try: previous = repo.active_branch previous_cmt = previous.commit is_branch = True except TypeError: previous_cmt = repo.head.commit is_branch = False repo.git.checkout(deployment) try: manager = SQLResultManager(repository=repo, location=location) except (AttributeError, ArgumentError): manager = RepoResultManager(repository=repo, location=location) LOGGER.info( \"Committing result and changing back to working branch.\") manager.store(result, commit=previous_cmt.hexsha) repo.git.add(\".\") check_call( ['git', 'commit', '-m', \"chore: add result for {}\".format(previous_cmt.hexsha)] ) if is_branch: previous.checkout() else: repo.commit(previous_cmt)\n\n    ### Response: Run the test suite on a single model and collect results.\n\n    MODEL: Path to model file. Can also be supplied via the environment variable\n    MEMOTE_MODEL or configured in 'setup.cfg' or 'memote.ini'..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SuppressWarnings({\"unchecked\"}) public static String prepareCsrfToken(final HttpSession session, final int timeToLive) { Set<Token> tokenSet = (Set<Token>) session.getAttribute(CSRF_TOKEN_SET); if (tokenSet == null) { tokenSet = new HashSet<>(); session.setAttribute(CSRF_TOKEN_SET, tokenSet); } String value; boolean unique; do { value = RandomString.get().randomAlphaNumeric(32); assureSize(tokenSet); unique = tokenSet.add(new Token(value, timeToLive)); } while (!unique); return value; }\n\n    ### Response:",
        "ground_truth": "Generates new CSRF token and puts it in the session. Returns generated token value.",
        "predict": " Run the test suite on a single model and collect results.\n\n    MODEL: Path to model file. Can also be supplied via the environment variable\n    MEMOTE_MODEL or configured in 'setup.cfg' or 'memote.ini'..\n\n    "
    },
    {
        "ID": 755,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def release(self): \"\"\"Cleans up the lockfile if it was acquired. Args: self (JLock): the ``JLock`` instance Returns: ``False`` if the lock was not released or the lock is not acquired, otherwise ``True``. \"\"\" if not self.acquired: return False os.close(self.fd) if os.path.exists(self.path): os.remove(self.path) self.acquired = False return True\n\n    ### Response: Cleans up the lockfile if it was acquired.\n\n        Args:\n          self (JLock): the ``JLock`` instance\n\n        Returns:\n          ``False`` if the lock was not released or the lock is not acquired,\n          otherwise ``True``..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected static void assureSize(final Set<Token> tokenSet) { if (tokenSet.size() < maxTokensPerSession) { return; } long validUntilMin = Long.MAX_VALUE; Token tokenToRemove = null; Iterator<Token> iterator = tokenSet.iterator(); while (iterator.hasNext()) { Token token = iterator.next(); if (token.isExpired()) { iterator.remove(); continue; } if (token.validUntil < validUntilMin) { validUntilMin = token.validUntil; tokenToRemove = token; } } if ((tokenToRemove != null) && (tokenSet.size() >= maxTokensPerSession)) { tokenSet.remove(tokenToRemove); } }\n\n    ### Response:",
        "ground_truth": "Removes expired tokens if token set is full.\n@see #setMaxTokensPerSession(int)",
        "predict": " Cleans up the lockfile if it was acquired.\n\n        Args:\n          self (JLock): the ``JLock`` instance\n\n        Returns:\n          ``False`` if the lock was not released or the lock is not acquired,\n          otherwise ``True``..\n\n    "
    },
    {
        "ID": 756,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def delete(resource_group_name, gateway_name, custom_headers:nil) response = delete_async(resource_group_name, gateway_name, custom_headers:custom_headers).value! nil end\n\n    ### Response: Deletes a virtual wan p2s vpn gateway.\n\n @param resource_group_name [String] The resource group name of the\n P2SVpnGateway.\n @param gateway_name [String] The name of the gateway.\n @param custom_headers [Hash{String => String}] A hash of custom headers that\n will be added to the HTTP request..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SuppressWarnings({\"unchecked\"}) public static boolean checkCsrfToken(final HttpSession session, final String tokenValue) { Set<Token> tokenSet = (Set<Token>) session.getAttribute(CSRF_TOKEN_SET); if ((tokenSet == null) && (tokenValue == null)) { return true; } if ((tokenSet == null) || (tokenValue == null)) { return false; } boolean found = false; Iterator<Token> it = tokenSet.iterator(); while (it.hasNext()) { Token t = it.next(); if (t.isExpired()) { it.remove(); continue; } if (t.getValue().equals(tokenValue)) { it.remove(); found = true; } } return found; }\n\n    ### Response:",
        "ground_truth": "Checks token value.\nC",
        "predict": " Deletes a virtual wan p2s vpn gateway.\n\n @param resource_group_name [String] The resource group name of the\n P2SVpnGateway.\n @param gateway_name [String] The name of the gateway.\n @param custom_headers [Hash{String => String}] A hash of custom headers that\n will be added to the HTTP request..\n\n    "
    },
    {
        "ID": 757,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def compute_values(edge_compatibility, v): \"\"\"Compute values. If edge compatibilities is just adjacency, we get ggnn. Args: edge_compatibility: A tensor of shape [batch, num_transforms, length, depth] v: A tensor of shape [batch, num_transforms, length, depth] Returns: output: A [batch, length, depth] tensor \"\"\" # Computes the incoming value vectors for each node by weighting them # according to the attention weights. These values are still segregated by # edge type. # Shape = [B, T, N, V]. all_edge_values = tf.matmul(tf.to_float(edge_compatibility), v) # Combines the weighted value vectors together across edge types into a # single N x V matrix for each batch. output = tf.reduce_sum(all_edge_values, axis=1) # Shape [B, N, V]. return output\n\n    ### Response: Compute values. If edge compatibilities is just adjacency, we get ggnn.\n\n  Args:\n    edge_compatibility: A tensor of shape [batch, num_transforms, length, depth]\n    v: A tensor of shape [batch, num_transforms, length, depth]\n\n  Returns:\n    output: A [batch, length, depth] tensor.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static BeanCopy from(final Object source) { BeanCopy beanCopy = new BeanCopy(source); beanCopy.isSourceMap = source instanceof Map; return beanCopy; }\n\n    ### Response:",
        "ground_truth": "Defines source, detects a map.",
        "predict": " Compute values. If edge compatibilities is just adjacency, we get ggnn.\n\n  Args:\n    edge_compatibility: A tensor of shape [batch, num_transforms, length, depth]\n    v: A tensor of shape [batch, num_transforms, length, depth]\n\n  Returns:\n    output: A [batch, length, depth] tensor.\n\n    "
    },
    {
        "ID": 758,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function get($messageId) { if (!isset($this->messages[$messageId])) { return null; } return new OutboxMessage($messageId, $this->messages[$messageId]->getTransportOperations()); }\n\n    ### Response: Fetches the given message from the storage. It returns null if no message is found.\n\n@param string $messageId\n\n@return OutboxMessage|null.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void copy() { beanUtil = new BeanUtilBean() .declared(declared) .forced(forced) .silent(true); visit(); }\n\n    ### Response:",
        "ground_truth": "Performs the copying.",
        "predict": " Fetches the given message from the storage. It returns null if no message is found.\n\n@param string $messageId\n\n@return OutboxMessage|null.\n\n    "
    },
    {
        "ID": 759,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def count_async(self, limit=None, **q_options): \"\"\"Count the number of query results, up to a limit. This is the asynchronous version of Query.count(). \"\"\" qry = self._fix_namespace() return qry._count_async(limit=limit, **q_options)\n\n    ### Response: Count the number of query results, up to a limit.\n\n    This is the asynchronous version of Query.count()..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override protected boolean visitProperty(String name, final Object value) { if (isTargetMap) { name = LEFT_SQ_BRACKET + name + RIGHT_SQ_BRACKET; } beanUtil.setProperty(destination, name, value); return true; }\n\n    ### Response:",
        "ground_truth": "Copies single property to the destination.\nExceptions are ignored, so copying continues if\ndestination does not have some of the sources properties.",
        "predict": " Count the number of query results, up to a limit.\n\n    This is the asynchronous version of Query.count()..\n\n    "
    },
    {
        "ID": 760,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    static void clearImage(BufferedImage img) { Graphics2D g2 = img.createGraphics(); g2.setComposite(AlphaComposite.Clear); g2.fillRect(0, 0, img.getWidth(), img.getHeight()); g2.dispose(); }\n\n    ### Response: Clear a transparent image to 100% transparent\n\n@param img The image to clear.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public void init(final TemplateData templateData) { super.init(templateData); if (entity != null) { ded = lookupType(entity); } else { Object object = templateData.getObjectReference(entityName); if (object != null) { ded = lookupType(resolveClass(object)); } else { ded = lookupName(entityName); } } String tableReference = this.tableReference; if (tableReference == null) { tableReference = tableAlias; } if (tableReference == null) { tableReference = entityName; } if (tableReference == null) { tableReference = ded.getEntityName(); } templateData.registerTableReference(tableReference, ded, tableAlias); }\n\n    ### Response:",
        "ground_truth": "Resolves and registers table references.",
        "predict": " Clear a transparent image to 100% transparent\n\n@param img The image to clear.\n\n    "
    },
    {
        "ID": 761,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function unselectAll() { //traverse steps array and set each \"selected\" property to false angular.forEach($scope.getEnabledSteps(), function (step) { step.selected = false; }); //set selectedStep variable to null $scope.selectedStep = null; }\n\n    ### Response: unSelect All Steps.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SuppressWarnings(\"unchecked\") public <S extends Scope> S resolveScope(final Class<S> scopeType) { S scope = (S) scopes.get(scopeType); if (scope == null) { try { scope = newInternalInstance(scopeType, (PetiteContainer) this); } catch (Exception ex) { throw new PetiteException(\"Invalid Petite scope: \" + scopeType.getName(), ex); } registerScope(scopeType, scope); scopes.put(scopeType, scope); } return scope; }\n\n    ### Response:",
        "ground_truth": "Resolves and registers scope from a scope type.",
        "predict": " unSelect All Steps.\n\n    "
    },
    {
        "ID": 762,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void updateConfig (String node, String object, String field, String value) { store(new ConfigRecord(node, object, field, value)); }\n\n    ### Response: Updates the specified configuration datum..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public <T> BeanDefinition<T> registerPetiteBean( final Class<T> type, String name, Class<? extends Scope> scopeType, WiringMode wiringMode, final boolean define, final Consumer<T> consumer ) { if (name == null) { name = resolveBeanName(type); } if (wiringMode == null) { wiringMode = annotationResolver.resolveBeanWiringMode(type); } if (wiringMode == WiringMode.DEFAULT) { wiringMode = petiteConfig.getDefaultWiringMode(); } if (scopeType == null) { scopeType = annotationResolver.resolveBeanScopeType(type); } if (scopeType == null) { scopeType = SingletonScope.class; } // remove existing bean BeanDefinition existing = removeBean(name); if (existing != null) { if (petiteConfig.getDetectDuplicatedBeanNames()) { throw new PetiteException( \"Duplicated bean name detected while registering class '\" + type.getName() + \"'. Petite bean class '\" + existing.type.getName() + \"' is already registered with the name: \" + name); } } // check if type is valid if (type.isInterface()) { throw new PetiteException(\"PetiteBean can not be an interface: \" + type.getName()); } // registration if (log.isDebugEnabled()) { log.info(\"Petite bean: [\" + name + \"] --> \" + type.getName() + \" @ \" + scopeType.getSimpleName() + \":\" + wiringMode.toString()); } // register Scope scope = resolveScope(scopeType); BeanDefinition<T> beanDefinition = createBeanDefinitionForRegistration(name, type, scope, wiringMode, consumer); registerBean(name, beanDefinition); // providers ProviderDefinition[] providerDefinitions = petiteResolvers.resolveProviderDefinitions(type, name); if (providerDefinitions != null) { for (ProviderDefinition providerDefinition : providerDefinitions) { providers.put(providerDefinition.name, providerDefinition); } } // define if (define) { beanDefinition.ctor = petiteResolvers.resolveCtorInjectionPoint(beanDefinition.type()); beanDefinition.properties = PropertyInjectionPoint.EMPTY; beanDefinition.methods = MethodInjectionPoint.EMPTY; beanDefinition.initMethods = InitMethodPoint.EMPTY; beanDefinition.destroyMethods = DestroyMethodPoint.EMPTY; } // return return beanDefinition; }\n\n    ### Response:",
        "ground_truth": "Registers or defines a bean.\n\n@param type bean type, must be specified\n@param name bean name, if null it will be resolved from the class (name or annotation)\n@param scopeType bean scope, if null it will be resolved from the class (annotation or default one)\n@param wiringMode wiring mode, if null it will be resolved from the class (annotation or default one)\n@param define when set to true bean will be defined - all injection points will be set to none",
        "predict": " Updates the specified configuration datum..\n\n    "
    },
    {
        "ID": 763,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def stop(self): \"\"\" Instructs the kernel process to stop channels and the kernel manager to then shutdown the process. \"\"\" logger.debug('Stopping kernel') self.kc.stop_channels() self.km.shutdown_kernel(now=True) del self.km\n\n    ### Response: Instructs the kernel process to stop channels\n        and the kernel manager to then shutdown the process..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void registerBean(final String name, final BeanDefinition beanDefinition) { beans.put(name, beanDefinition); if (!petiteConfig.isUseAltBeanNames()) { return; } Class type = beanDefinition.type(); if (annotationResolver.beanHasAnnotationName(type)) { return; } Class[] interfaces = ClassUtil.resolveAllInterfaces(type); for (Class anInterface : interfaces) { String altName = annotationResolver.resolveBeanName(anInterface, petiteConfig.getUseFullTypeNames()); if (name.equals(altName)) { continue; } if (beans.containsKey(altName)) { continue; } if (beansAlt.containsKey(altName)) { BeanDefinition existing = beansAlt.get(altName); if (existing != null) { beansAlt.put(altName, null); // store null as value to mark that alt name is duplicate } } else { beansAlt.put(altName, beanDefinition); } } }\n\n    ### Response:",
        "ground_truth": "Registers bean definition by putting it in the beans map. If bean does\nnot have petite name explicitly defined, alternative bean names\nwill be registered.",
        "predict": " Instructs the kernel process to stop channels\n        and the kernel manager to then shutdown the process..\n\n    "
    },
    {
        "ID": 764,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function (data, lat, lng, origin, maxDistance) { this.writeDebug('locationsSetup',arguments); if (typeof origin !== 'undefined') { if (!data.distance) { data.distance = this.geoCodeCalcCalcDistance(lat, lng, data.lat, data.lng, GeoCodeCalc.EarthRadius); // Alternative distance length unit if (this.settings.lengthUnit === 'm') { // Miles to kilometers data.altdistance = parseFloat(data.distance)*1.609344; } else if (this.settings.lengthUnit === 'km') { // Kilometers to miles data.altdistance = parseFloat(data.distance)/1.609344; } } } // Create the array if (this.settings.maxDistance === true && typeof maxDistance !== 'undefined' && maxDistance !== null) { if (data.distance <= maxDistance) { locationset.push( data ); } else { return; } } else if (this.settings.maxDistance === true && this.settings.querystringParams === true && typeof maxDistance !== 'undefined' && maxDistance !== null) { if (data.distance <= maxDistance) { locationset.push( data ); } else { return; } } else { locationset.push( data ); } }\n\n    ### Response: Checks distance of each location and sets up the locationset array\n\n@param data {Object} location data object\n@param lat {number} origin latitude\n@param lng {number} origin longitude\n@param origin {string} origin address\n@param maxDistance {number} maximum distance if set.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void removeBean(final Class type) { // collect bean names Set<String> beanNames = new HashSet<>(); for (BeanDefinition def : beans.values()) { if (def.type.equals(type)) { beanNames.add(def.name); } } // remove collected bean names for (String beanName : beanNames) { removeBean(beanName); } }\n\n    ### Response:",
        "ground_truth": "Removes all petite beans of provided type. Bean name is not resolved from a type!\nInstead, all beans are iterated and only beans with equal types are removed.\n@see #removeBean(String)",
        "predict": " Checks distance of each location and sets up the locationset array\n\n@param data {Object} location data object\n@param lat {number} origin latitude\n@param lng {number} origin longitude\n@param origin {string} origin address\n@param maxDistance {number} maximum distance if set.\n\n    "
    },
    {
        "ID": 765,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static function record_cache_miss($store, $definition, $misses = 1) { list($definitionstr, $mode) = self::get_definition_stat_id_and_mode($definition); self::ensure_ready_for_stats($store, $definitionstr, $mode); self::$stats[$definitionstr]['stores'][$store]['misses'] += $misses; }\n\n    ### Response: Record a cache miss in the stats for the given store and definition.\n\nIn Moodle 2.9 the $definition argument changed from accepting only a string to accepting a string or a\ncache_definition instance. It is preferable to pass a cache definition instance.\n\n@internal\n@param string $store\n@param cache_definition $definition You used to be able to pass a string here, however that is deprecated please pass the\nactual cache_definition object now.\n@param int $misses The number of misses to record (by default 1).\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected String[] resolveBeanNamesForType(final Class type) { String[] beanNames = beanCollections.get(type); if (beanNames != null) { return beanNames; } ArrayList<String> list = new ArrayList<>(); for (Map.Entry<String, BeanDefinition> entry : beans.entrySet()) { BeanDefinition beanDefinition = entry.getValue(); if (ClassUtil.isTypeOf(beanDefinition.type, type)) { String beanName = entry.getKey(); list.add(beanName); } } if (list.isEmpty()) { beanNames = StringPool.EMPTY_ARRAY; } else { beanNames = list.toArray(new String[0]); } beanCollections.put(type, beanNames); return beanNames; }\n\n    ### Response:",
        "ground_truth": "Resolves bean names for give type.",
        "predict": " Record a cache miss in the stats for the given store and definition.\n\nIn Moodle 2.9 the $definition argument changed from accepting only a string to accepting a string or a\ncache_definition instance. It is preferable to pass a cache definition instance.\n\n@internal\n@param string $store\n@param cache_definition $definition You used to be able to pass a string here, however that is deprecated please pass the\nactual cache_definition object now.\n@param int $misses The number of misses to record (by default 1).\n\n    "
    },
    {
        "ID": 766,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function _decipher(&$Xl, &$Xr) { if ($Xl < 0) { $Xl += 4294967296; } if ($Xr < 0) { $Xr += 4294967296; } for ($i = 17; $i > 1; --$i) { $temp = $Xl ^ $this->_P[$i]; if ($temp < 0) { $temp += 4294967296; } $Xl = fmod((fmod($this->_S[0][($temp >> 24) & 255] + $this->_S[1][($temp >> 16) & 255], 4294967296) ^ $this->_S[2][($temp >> 8) & 255]) + $this->_S[3][$temp & 255], 4294967296) ^ $Xr; $Xr = $temp; } $Xr = $this->_binxor($Xl, $this->_P[1]); $Xl = $this->_binxor($temp, $this->_P[0]); }\n\n    ### Response: Deciphers a single 64-bit block.\n\n@param int &$Xl\n@param int &$Xr.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void registerPetiteCtorInjectionPoint(final String beanName, final Class[] paramTypes, final String[] references) { BeanDefinition beanDefinition = lookupExistingBeanDefinition(beanName); ClassDescriptor cd = ClassIntrospector.get().lookup(beanDefinition.type); Constructor constructor = null; if (paramTypes == null) { CtorDescriptor[] ctors = cd.getAllCtorDescriptors(); if (ctors != null && ctors.length > 0) { if (ctors.length > 1) { throw new PetiteException(ctors.length + \" suitable constructor found as injection point for: \" + beanDefinition.type.getName()); } constructor = ctors[0].getConstructor(); } } else { CtorDescriptor ctorDescriptor = cd.getCtorDescriptor(paramTypes, true); if (ctorDescriptor != null) { constructor = ctorDescriptor.getConstructor(); } } if (constructor == null) { throw new PetiteException(\"Constructor not found: \" + beanDefinition.type.getName()); } BeanReferences[] ref = referencesResolver.resolveReferenceFromValues(constructor, references); beanDefinition.ctor = new CtorInjectionPoint(constructor, ref); }\n\n    ### Response:",
        "ground_truth": "Registers constructor injection point.\n\n@param beanName bean name\n@param paramTypes constructor parameter types, may be null\n@param references references for arguments",
        "predict": " Deciphers a single 64-bit block.\n\n@param int &$Xl\n@param int &$Xr.\n\n    "
    },
    {
        "ID": 767,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static int estimateCompressedSize(int[] inputBlock, int bits, int blockSize) { int maxNoExp = (1 << bits) - 1; // Size of the header and the bits-bit slots int outputOffset = HEADER_SIZE + bits * blockSize; int expNum = 0; for (int i = 0; i < blockSize; ++i) { if (inputBlock[i] > maxNoExp) { expNum++; } } outputOffset += (expNum << 5); return outputOffset; }\n\n    ### Response: Estimate the compressed size in ints of a block\n\n@param inputBlock\nthe block to be compressed\n@param bits\nthe value of the parameter b\n@param blockSize\nthe block size\n@return the compressed size in ints.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void registerPetitePropertyInjectionPoint(final String beanName, final String property, final String reference) { BeanDefinition beanDefinition = lookupExistingBeanDefinition(beanName); ClassDescriptor cd = ClassIntrospector.get().lookup(beanDefinition.type); PropertyDescriptor propertyDescriptor = cd.getPropertyDescriptor(property, true); if (propertyDescriptor == null) { throw new PetiteException(\"Property not found: \" + beanDefinition.type.getName() + '#' + property); } BeanReferences ref = referencesResolver.resolveReferenceFromValue(propertyDescriptor, reference); PropertyInjectionPoint pip = new PropertyInjectionPoint(propertyDescriptor, ref); beanDefinition.addPropertyInjectionPoint(pip); }\n\n    ### Response:",
        "ground_truth": "Registers property injection point.\n\n@param beanName bean name\n@param property property name\n@param reference explicit injection reference, may be null",
        "predict": " Estimate the compressed size in ints of a block\n\n@param inputBlock\nthe block to be compressed\n@param bits\nthe value of the parameter b\n@param blockSize\nthe block size\n@return the compressed size in ints.\n\n    "
    },
    {
        "ID": 768,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void bulkloadTableFromResource(String table, Resource resource) { log.debug(\"bulk-loading data from '\" + resource.getFilename() + \"' into table '\" + table + \"'\"); String sql = \"COPY \\\"\" + table + \"\\\" FROM STDIN WITH DELIMITER E'\\t' NULL AS 'NULL'\"; try { // retrieve the currently open connection if running inside a transaction Connection originalCon = DataSourceUtils.getConnection(getDataSource()); Connection con = originalCon; if (con instanceof DelegatingConnection) { DelegatingConnection<?> delCon = (DelegatingConnection<?>) con; con = delCon.getInnermostDelegate(); } Preconditions.checkState(con instanceof PGConnection, \"bulk-loading only works with a PostgreSQL JDBC connection\"); // Postgres JDBC4 8.4 driver now supports the copy API PGConnection pgCon = (PGConnection) con; pgCon.getCopyAPI().copyIn(sql, resource.getInputStream()); DataSourceUtils.releaseConnection(originalCon, getDataSource()); } catch (SQLException e) { throw new DatabaseAccessException(e); } catch (IOException e) { throw new FileAccessException(e); } }\n\n    ### Response: bulk-loads a table from a resource.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void registerPetiteSetInjectionPoint(final String beanName, final String property) { BeanDefinition beanDefinition = lookupExistingBeanDefinition(beanName); ClassDescriptor cd = ClassIntrospector.get().lookup(beanDefinition.type); PropertyDescriptor propertyDescriptor = cd.getPropertyDescriptor(property, true); if (propertyDescriptor == null) { throw new PetiteException(\"Property not found: \" + beanDefinition.type.getName() + '#' + property); } SetInjectionPoint sip = new SetInjectionPoint(propertyDescriptor); beanDefinition.addSetInjectionPoint(sip); }\n\n    ### Response:",
        "ground_truth": "Registers set injection point.\n\n@param beanName bean name\n@param property set property name",
        "predict": " bulk-loads a table from a resource.\n\n    "
    },
    {
        "ID": 769,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func connectSocket(ctx context.Context) net.Conn { timeoutChan := time.After(SocketTimeout) var c net.Conn err := errors.New(\"Not yet connected\") for err != nil { select { case <-timeoutChan: panic(\"Can't connect to pfconfig socket\") default: // We try to connect to the pfconfig socket // If we fail, we will wait a second before leaving this scope // Otherwise, we continue and the for loop will detect the connection is valid since err will be nil c, err = net.Dial(\"unix\", getPfconfigSocketPath()) if err != nil { log.LoggerWContext(ctx).Error(\"Cannot connect to pfconfig socket...\") time.Sleep(1 * time.Second) } } } return c }\n\n    ### Response: // Connect to the pfconfig socket\n// If it fails to connect, it will try it every second up to the time defined in SocketTimeout\n// After SocketTimeout is reached, this will panic.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void registerPetiteMethodInjectionPoint(final String beanName, final String methodName, final Class[] arguments, final String[] references) { BeanDefinition beanDefinition = lookupExistingBeanDefinition(beanName); ClassDescriptor cd = ClassIntrospector.get().lookup(beanDefinition.type); Method method = null; if (arguments == null) { MethodDescriptor[] methods = cd.getAllMethodDescriptors(methodName); if (methods != null && methods.length > 0) { if (methods.length > 1) { throw new PetiteException(methods.length + \" suitable methods found as injection points for: \" + beanDefinition.type.getName() + '#' + methodName); } method = methods[0].getMethod(); } } else { MethodDescriptor md = cd.getMethodDescriptor(methodName, arguments, true); if (md != null) { method = md.getMethod(); } } if (method == null) { throw new PetiteException(\"Method not found: \" + beanDefinition.type.getName() + '#' + methodName); } BeanReferences[] ref = referencesResolver.resolveReferenceFromValues(method, references); MethodInjectionPoint mip = new MethodInjectionPoint(method, ref); beanDefinition.addMethodInjectionPoint(mip); }\n\n    ### Response:",
        "ground_truth": "Registers method injection point.\n\n@param beanName bean name\n@param methodName method name\n@param arguments method arguments, may be null\n@param references injection references",
        "predict": " // Connect to the pfconfig socket\n// If it fails to connect, it will try it every second up to the time defined in SocketTimeout\n// After SocketTimeout is reached, this will panic.\n\n    "
    },
    {
        "ID": 770,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    void processAlterTableRename(Table table) { HsqlName name = readNewSchemaObjectName(SchemaObject.TABLE); name.setSchemaIfNull(table.getSchemaName()); if (table.getSchemaName() != name.schema) { throw Error.error(ErrorCode.X_42505); } database.schemaManager.renameSchemaObject(table.getName(), name); }\n\n    ### Response: Responsible for handling tail of ALTER TABLE ... RENAME ...\n@param table table.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void registerPetiteInitMethods(final String beanName, final InitMethodInvocationStrategy invocationStrategy, String... initMethodNames) { BeanDefinition beanDefinition = lookupExistingBeanDefinition(beanName); ClassDescriptor cd = ClassIntrospector.get().lookup(beanDefinition.type); if (initMethodNames == null) { initMethodNames = StringPool.EMPTY_ARRAY; } int total = initMethodNames.length; InitMethodPoint[] initMethodPoints = new InitMethodPoint[total]; int i; for (i = 0; i < initMethodNames.length; i++) { MethodDescriptor md = cd.getMethodDescriptor(initMethodNames[i], ClassUtil.EMPTY_CLASS_ARRAY, true); if (md == null) { throw new PetiteException(\"Init method not found: \" + beanDefinition.type.getName() + '#' + initMethodNames[i]); } initMethodPoints[i] = new InitMethodPoint(md.getMethod(), i, invocationStrategy); } beanDefinition.addInitMethodPoints(initMethodPoints); }\n\n    ### Response:",
        "ground_truth": "Registers init method.\n\n@param beanName bean name\n@param invocationStrategy moment of invocation\n@param initMethodNames init method names",
        "predict": " Responsible for handling tail of ALTER TABLE ... RENAME ...\n@param table table.\n\n    "
    },
    {
        "ID": 771,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def platforms raw_platforms = spec.metadata.fetch('platforms', '').strip case raw_platforms when '' [] when 'any', 'all', '*' # Based on `ls lib/fauxhai/platforms | xargs echo`. %w{aix amazon arch centos chefspec debian dragonfly4 fedora freebsd gentoo ios_xr mac_os_x nexus omnios openbsd opensuse oracle raspbian redhat slackware smartos solaris2 suse ubuntu windows}.map {|p| [p] } when /,/ # Comma split mode. String looks like \"name, name constraint, name constraint\" raw_platforms.split(/\\s*,\\s*/).map {|p| p.split(/\\s+/, 2) } else # Whitepace split mode, assume no constraints. raw_platforms.split(/\\s+/).map {|p| [p] } end end\n\n    ### Response: Platform support to be used in the Chef metadata.\n\n @return [Array>].\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void registerPetiteDestroyMethods(final String beanName, String... destroyMethodNames) { BeanDefinition beanDefinition = lookupExistingBeanDefinition(beanName); ClassDescriptor cd = ClassIntrospector.get().lookup(beanDefinition.type); if (destroyMethodNames == null) { destroyMethodNames = StringPool.EMPTY_ARRAY; } int total = destroyMethodNames.length; DestroyMethodPoint[] destroyMethodPoints = new DestroyMethodPoint[total]; int i; for (i = 0; i < destroyMethodNames.length; i++) { MethodDescriptor md = cd.getMethodDescriptor(destroyMethodNames[i], ClassUtil.EMPTY_CLASS_ARRAY, true); if (md == null) { throw new PetiteException(\"Destroy method not found: \" + beanDefinition.type.getName() + '#' + destroyMethodNames[i]); } destroyMethodPoints[i] = new DestroyMethodPoint(md.getMethod()); } beanDefinition.addDestroyMethodPoints(destroyMethodPoints); }\n\n    ### Response:",
        "ground_truth": "Registers destroy method.\n\n@param beanName bean name\n@param destroyMethodNames destroy method names",
        "predict": " Platform support to be used in the Chef metadata.\n\n @return [Array>].\n\n    "
    },
    {
        "ID": 772,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def groups_dynamic(self): \"\"\" returns dynamic relationship for groups - allowing for filtering of data \"\"\" return sa.orm.relationship( \"Group\", secondary=\"users_groups\", lazy=\"dynamic\", passive_deletes=True, passive_updates=True, )\n\n    ### Response: returns dynamic relationship for groups - allowing for\n        filtering of data.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void registerPetiteProvider(final String providerName, final String beanName, final String methodName, final Class[] arguments) { BeanDefinition beanDefinition = lookupBeanDefinition(beanName); if (beanDefinition == null) { throw new PetiteException(\"Bean not found: \" + beanName); } Class beanType = beanDefinition.type; ClassDescriptor cd = ClassIntrospector.get().lookup(beanType); MethodDescriptor md = cd.getMethodDescriptor(methodName, arguments, true); if (md == null) { throw new PetiteException(\"Provider method not found: \" + methodName); } ProviderDefinition providerDefinition = new ProviderDefinition(providerName, beanName, md.getMethod()); providers.put(providerName, providerDefinition); }\n\n    ### Response:",
        "ground_truth": "Registers instance method provider.\n\n@param providerName provider name\n@param beanName bean name\n@param methodName instance method name\n@param arguments method argument types",
        "predict": " returns dynamic relationship for groups - allowing for\n        filtering of data.\n\n    "
    },
    {
        "ID": 773,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private Node aliasAndInlineArguments( Node fnTemplateRoot, ImmutableMap<String, Node> argMap, Set<String> namesToAlias) { if (namesToAlias == null || namesToAlias.isEmpty()) { // There are no names to alias, just inline the arguments directly. Node result = FunctionArgumentInjector.inject( compiler, fnTemplateRoot, null, argMap); checkState(result == fnTemplateRoot); return result; } else { // Create local alias of names that can not be safely // used directly. // An arg map that will be updated to contain the // safe aliases. Map<String, Node> newArgMap = new HashMap<>(argMap); // Declare the alias in the same order as they // are declared. List<Node> newVars = new ArrayList<>(); // NOTE: argMap is a linked map so we get the parameters in the // order that they were declared. for (Entry<String, Node> entry : argMap.entrySet()) { String name = entry.getKey(); if (namesToAlias.contains(name)) { if (name.equals(THIS_MARKER)) { boolean referencesThis = NodeUtil.referencesThis(fnTemplateRoot); // Update \"this\", this is only necessary if \"this\" is referenced // and the value of \"this\" is not Token.THIS, or the value of \"this\" // has side effects. Node value = entry.getValue(); if (!value.isThis() && (referencesThis || NodeUtil.mayHaveSideEffects(value, compiler))) { String newName = getUniqueThisName(); Node newValue = entry.getValue().cloneTree(); Node newNode = NodeUtil.newVarNode(newName, newValue) .useSourceInfoIfMissingFromForTree(newValue); newVars.add(0, newNode); // Remove the parameter from the list to replace. newArgMap.put(THIS_MARKER, IR.name(newName) .srcrefTree(newValue)); } } else { Node newValue = entry.getValue().cloneTree(); Node newNode = NodeUtil.newVarNode(name, newValue) .useSourceInfoIfMissingFromForTree(newValue); newVars.add(0, newNode); // Remove the parameter from the list to replace. newArgMap.remove(name); } } } // Inline the arguments. Node result = FunctionArgumentInjector.inject( compiler, fnTemplateRoot, null, newArgMap); checkState(result == fnTemplateRoot); // Now that the names have been replaced, add the new aliases for // the old names. for (Node n : newVars) { fnTemplateRoot.addChildToFront(n); } return result; } }\n\n    ### Response: Inlines the arguments within the node tree using the given argument map,\nreplaces \"unsafe\" names with local aliases.\n\nThe aliases for unsafe require new VAR declarations, so this function\ncan not be used in for direct CALL node replacement as VAR nodes can not be\ncreated there.\n\n@return The node or its replacement..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void registerPetiteProvider(final String providerName, final Class type, final String staticMethodName, final Class[] arguments) { ClassDescriptor cd = ClassIntrospector.get().lookup(type); MethodDescriptor md = cd.getMethodDescriptor(staticMethodName, arguments, true); if (md == null) { throw new PetiteException(\"Provider method not found: \" + staticMethodName); } ProviderDefinition providerDefinition = new ProviderDefinition(providerName, md.getMethod()); providers.put(providerName, providerDefinition); }\n\n    ### Response:",
        "ground_truth": "Registers static method provider.\n\n@param providerName provider name\n@param type class type\n@param staticMethodName static method name\n@param arguments method argument types",
        "predict": " Inlines the arguments within the node tree using the given argument map,\nreplaces \"unsafe\" names with local aliases.\n\nThe aliases for unsafe require new VAR declarations, so this function\ncan not be used in for direct CALL node replacement as VAR nodes can not be\ncreated there.\n\n@return The node or its replacement..\n\n    "
    },
    {
        "ID": 774,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (policylist *PolicyList) RemoveEndpoint(endpoint *HNSEndpoint) (*PolicyList, error) { operation := \"RemoveEndpoint\" title := \"hcsshim::PolicyList::\" + operation logrus.Debugf(title+\" id=%s, endpointId:%s\", policylist.ID, endpoint.Id) _, err := policylist.Delete() if err != nil { return nil, err } elementToRemove := \"/endpoints/\" + endpoint.Id var references []string for _, endpointReference := range policylist.EndpointReferences { if endpointReference == elementToRemove { continue } references = append(references, endpointReference) } policylist.EndpointReferences = references return policylist.Create() }\n\n    ### Response: // RemoveEndpoint removes an endpoint from the Policy List.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void forEachBeanType(final Class type, final Consumer<String> beanNameConsumer) { forEachBean(bd -> { if (ClassUtil.isTypeOf(bd.type, type)) { beanNameConsumer.accept(bd.name); } }); }\n\n    ### Response:",
        "ground_truth": "Iterates all beans that are of given type.",
        "predict": " // RemoveEndpoint removes an endpoint from the Policy List.\n\n    "
    },
    {
        "ID": 775,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    void setSize(int x, int y, int z) { this.sizeX = x; this.sizeY = y; this.sizeZ = z; }\n\n    ### Response: Set the size of this plan\n\n@param x Size in x\n@param y Size in y\n@param z Size in z.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void defineParameters(final Map<?, ?> properties) { for (Map.Entry<?, ?> entry : properties.entrySet()) { defineParameter(entry.getKey().toString(), entry.getValue()); } }\n\n    ### Response:",
        "ground_truth": "Defines many parameters at once.",
        "predict": " Set the size of this plan\n\n@param x Size in x\n@param y Size in y\n@param z Size in z.\n\n    "
    },
    {
        "ID": 776,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func ParseService(svc *types.Service) (ServiceID, *Service) { scopedLog := log.WithFields(logrus.Fields{ logfields.K8sSvcName: svc.ObjectMeta.Name, logfields.K8sNamespace: svc.ObjectMeta.Namespace, logfields.K8sAPIVersion: svc.TypeMeta.APIVersion, logfields.K8sSvcType: svc.Spec.Type, }) svcID := ParseServiceID(svc) switch svc.Spec.Type { case v1.ServiceTypeClusterIP, v1.ServiceTypeNodePort, v1.ServiceTypeLoadBalancer: break case v1.ServiceTypeExternalName: // External-name services must be ignored return svcID, nil default: scopedLog.Warn(\"Ignoring k8s service: unsupported type\") return svcID, nil } if svc.Spec.ClusterIP == \"\" { return svcID, nil } clusterIP := net.ParseIP(svc.Spec.ClusterIP) headless := false if strings.ToLower(svc.Spec.ClusterIP) == \"none\" { headless = true } svcInfo := NewService(clusterIP, headless, svc.Labels, svc.Spec.Selector) svcInfo.IncludeExternal = getAnnotationIncludeExternal(svc) svcInfo.Shared = getAnnotationShared(svc) // FIXME: Add support for // - NodePort for _, port := range svc.Spec.Ports { p := loadbalancer.NewFEPort(loadbalancer.L4Type(port.Protocol), uint16(port.Port)) if _, ok := svcInfo.Ports[loadbalancer.FEPortName(port.Name)]; !ok { svcInfo.Ports[loadbalancer.FEPortName(port.Name)] = p } } return svcID, svcInfo }\n\n    ### Response: // ParseService parses a Kubernetes service and returns a Service.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public Object intercept(final ActionRequest actionRequest) throws Exception { printBefore(actionRequest); long startTime = System.currentTimeMillis(); Object result = null; try { result = actionRequest.invoke(); } catch (Exception ex) { result = \"<exception>\"; throw ex; } catch (Throwable th) { result = \"<throwable>\"; throw new Exception(th); } finally { long executionTime = System.currentTimeMillis() - startTime; printAfter(actionRequest, executionTime, result); } return result; }\n\n    ### Response:",
        "ground_truth": "Measure action invocation time.",
        "predict": " // ParseService parses a Kubernetes service and returns a Service.\n\n    "
    },
    {
        "ID": 777,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def cached_unless_authenticated(timeout=50, key_prefix='default'): \"\"\"Cache anonymous traffic.\"\"\" def caching(f): @wraps(f) def wrapper(*args, **kwargs): cache_fun = current_cache.cached( timeout=timeout, key_prefix=key_prefix, unless=lambda: current_cache_ext.is_authenticated_callback()) return cache_fun(f)(*args, **kwargs) return wrapper return caching\n\n    ### Response: Cache anonymous traffic..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static int resolveJavaVersion(final int version) { final int javaVersionNumber = SystemUtil.info().getJavaVersionNumber(); final int platformVersion = javaVersionNumber - 8 + 52; return version > platformVersion ? version : platformVersion; }\n\n    ### Response:",
        "ground_truth": "Resolves Java version from current version.",
        "predict": " Cache anonymous traffic..\n\n    "
    },
    {
        "ID": 778,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def generate_docker_targets(): \"\"\"Write all templated container engine files\"\"\" output = {} for py_ver in python_versions.values(): filepath = os.path.join(container_config_root, py_ver.docker_file) output[filepath] = generate_docker_file(py_ver) filepath = os.path.join(container_config_root, py_ver.compose_file) output[filepath] = generate_compose_file(py_ver) return output\n\n    ### Response: Write all templated container engine files.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void pushInt(final MethodVisitor mv, final int value) { if (value <= 5) { mv.visitInsn(ICONST_0 + value); } else if (value <= Byte.MAX_VALUE) { mv.visitIntInsn(BIPUSH, value); } else { mv.visitIntInsn(SIPUSH, value); } }\n\n    ### Response:",
        "ground_truth": "Pushes int value in an optimal way.",
        "predict": " Write all templated container engine files.\n\n    "
    },
    {
        "ID": 779,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function post2FALogin(Request $request) { $userId = $request->session()->get('user_id'); // Did the user take too much time to fill out the form? if ($this->twoFactorAuthHelper->isTwoFactorAuthFormTimeout($userId)) { return view('usermanagement::frontend.'.$this->frontend_template_name.'.login.login', [ 'title' => 'Login', ]) ->withErrors([ 'Two Factor Authorization' => 'Your two factor authorization code expired. Please re-login.' ]); } // Is the code correct? // If not, go back to the 2FA form with an error message if (!$this->twoFactorAuthHelper->isInputtedTwoFactorAuthCodeCorrect($userId)) { return view('usermanagement::frontend.'.$this->frontend_template_name.'.login.two_factor_auth', [ 'title' => 'Login Enter 2FA Code', ]) ->withErrors([ 'Two Factor Authorization' => 'Your entered an incorrect two factor authorization code. Please try again.' ]); } // 2FA successful! // Clear the user's 2FA code $this->twoFactorAuthHelper->clearUserTwoFactorAuthFields($userId); // Update the user's last_login fields $this->twoFactorAuthHelper->updateUserRecordWithLastlogin($userId); // Manually login user Auth::loginUsingId($request->session()->get('user_id')); // Clear the 'user_id' session variable $this->twoFactorAuthHelper->clearUserIdSessionVar(); // Set the cookie, and onward and forward to the frontend! // Ah ah ah! Instantiating a new response view and returning it is causing a message to display // before the actual view is rendered. This message looks like cookie information, but it displays // whether or not a cookie is created. So... I'm going to see if we need a cookie, and if not, // return the view as usual. if ((!$this->twoFactorAuthHelper->isCookieExists()) && (config('lasallecmsusermanagement.auth_2fa_cookie_enable'))) { // Create the cookie... $view = redirect()->intended($this->twoFactorAuthHelper->redirectPathUponSuccessfulFrontendLogin()); $response = new \\Illuminate\\Http\\Response($view); $response = $this->twoFactorAuthHelper->setCookie($response); return $response; } // Oh, no cookie writing at all... return redirect()->intended($this->twoFactorAuthHelper->redirectPathUponSuccessfulFrontendLogin()); }\n\n    ### Response: Handle the front-end Two Factor Authorization login\n\n@param  \\Illuminate\\Http\\Request  $request\n@return \\Illuminate\\Http\\Response.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void checkArgumentIndex(final MethodInfo methodInfo, final int argIndex) { if ((argIndex < 1) || (argIndex > methodInfo.getArgumentsCount())) { throw new ProxettaException(\"Invalid argument index: \" + argIndex); } }\n\n    ### Response:",
        "ground_truth": "Validates argument index.",
        "predict": " Handle the front-end Two Factor Authorization login\n\n@param  \\Illuminate\\Http\\Request  $request\n@return \\Illuminate\\Http\\Response.\n\n    "
    },
    {
        "ID": 780,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    void verror(String message) throws SAXException { SAXParseException err; err = new SAXParseException(message, this); errorHandler.error(err); }\n\n    ### Response: make layered SAX2 DTD validation more conformant.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String adviceFieldName(final String name, final int index) { return ProxettaNames.fieldPrefix + name + ProxettaNames.fieldDivider + index; }\n\n    ### Response:",
        "ground_truth": "Builds advice field name.",
        "predict": " make layered SAX2 DTD validation more conformant.\n\n    "
    },
    {
        "ID": 781,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static function cacheFlush() { foreach ( self::getCategories() as $category ) { foreach ( Yii::$app->i18n->languages as $language ) { Yii::$app->cache->delete([ 'yii\\i18n\\DbMessageSource', $category, $language, ]); } } return true; }\n\n    ### Response: Deletes all translations values from cache.\n\n@return boolean whether the flush operation was successful..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String adviceMethodName(final String name, final int index) { return ProxettaNames.methodPrefix + name + ProxettaNames.methodDivider + index; }\n\n    ### Response:",
        "ground_truth": "Builds advice method name.",
        "predict": " Deletes all translations values from cache.\n\n@return boolean whether the flush operation was successful..\n\n    "
    },
    {
        "ID": 782,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private function processDiffs(array $tables, Config $config) { $stat = $config['diff_col']; if ($config['compare']) { return $tables; } if (!in_array('diff', $config['cols'])) { return $tables; } if (!in_array($stat, $config['cols'])) { throw new \\InvalidArgumentException(sprintf( 'The \"%s\" column must be visible when using the diff column', $stat )); } return F\\map($tables, function ($table) use ($stat) { $means = F\\map($table, function ($row) use ($stat) { return $row[$stat]; }); $min = min($means); return F\\map($table, function ($row) use ($min, $stat) { if ($row[$stat] === 0) { $row['diff'] = 0; return $row; } $row['diff'] = $row[$stat] / $min; return $row; }); }); }\n\n    ### Response: Calculate the ``diff`` column if it is displayed.\n\n@param array $tables\n@param Config $config\n\n@return array.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void loadSpecialMethodArguments(final MethodVisitor mv, final MethodInfo methodInfo) { mv.visitVarInsn(ALOAD, 0); for (int i = 1; i <= methodInfo.getArgumentsCount(); i++) { loadMethodArgument(mv, methodInfo, i); } }\n\n    ### Response:",
        "ground_truth": "Loads all method arguments before INVOKESPECIAL call.",
        "predict": " Calculate the ``diff`` column if it is displayed.\n\n@param array $tables\n@param Config $config\n\n@return array.\n\n    "
    },
    {
        "ID": 783,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (r *reporter) run() { // signal that the reporter loop is done defer close(r.done) intervalTicker := time.NewTicker(r.interval) for { select { case <-intervalTicker.C: //at each tick send the metrics if err := r.save(); err != nil { log.Error(\"unable to send metrics to LevelDB\", \"err\", err) //If there is an error in writing, exit the routine; we assume here that the error is //severe and don't attempt to write again. //Also, this should prevent leaking when the node is stopped return } case <-r.quit: //graceful shutdown if err := r.save(); err != nil { log.Error(\"unable to send metrics to LevelDB\", \"err\", err) } return } } }\n\n    ### Response: //run is the goroutine which periodically sends the metrics to the configured LevelDB.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void loadStaticMethodArguments(final MethodVisitor mv, final MethodInfo methodInfo) { for (int i = 0; i < methodInfo.getArgumentsCount(); i++) { loadMethodArgument(mv, methodInfo, i); } }\n\n    ### Response:",
        "ground_truth": "Loads all method arguments before INVOKESTATIC call.",
        "predict": " //run is the goroutine which periodically sends the metrics to the configured LevelDB.\n\n    "
    },
    {
        "ID": 784,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public ReferrerList getPhotoReferrers(Date date, String domain, String photoId, int perPage, int page) throws FlickrException { return getReferrers(METHOD_GET_PHOTO_REFERRERS, domain, \"photo_id\", photoId, date, perPage, page); }\n\n    ### Response: Get a list of referrers from a given domain to a photo.\n\n@param date\n(Required) Stats will be returned for this date. A day according to Flickr Stats starts at midnight GMT for all users, and timestamps will\nautomatically be rounded down to the start of the day.\n@param domain\n(Required) The domain to return referrers for. This should be a hostname (eg: \"flickr.com\") with no protocol or pathname.\n@param photoId\n(Optional) The id of the photo to get stats for. If not provided, stats for all photos will be returned.\n@param perPage\n(Optional) Number of domains to return per page. If this argument is omitted, it defaults to 25. The maximum allowed value is 100.\n@param page\n(Optional) The page of results to return. If this argument is omitted, it defaults to 1.\n@see \"http://www.flickr.com/services/api/flickr.stats.getPhotoReferrers.html\".\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void loadVirtualMethodArguments(final MethodVisitor mv, final MethodInfo methodInfo) { for (int i = 1; i <= methodInfo.getArgumentsCount(); i++) { loadMethodArgument(mv, methodInfo, i); } }\n\n    ### Response:",
        "ground_truth": "Loads all method arguments before INVOKEVIRTUAL call.",
        "predict": " Get a list of referrers from a given domain to a photo.\n\n@param date\n(Required) Stats will be returned for this date. A day according to Flickr Stats starts at midnight GMT for all users, and timestamps will\nautomatically be rounded down to the start of the day.\n@param domain\n(Required) The domain to return referrers for. This should be a hostname (eg: \"flickr.com\") with no protocol or pathname.\n@param photoId\n(Optional) The id of the photo to get stats for. If not provided, stats for all photos will be returned.\n@param perPage\n(Optional) Number of domains to return per page. If this argument is omitted, it defaults to 25. The maximum allowed value is 100.\n@param page\n(Optional) The page of results to return. If this argument is omitted, it defaults to 1.\n@see \"http://www.flickr.com/services/api/flickr.stats.getPhotoReferrers.html\".\n\n    "
    },
    {
        "ID": 785,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function actionGuess() { // check to see if the letter is guessed correctly if(isset($_GET['g'][0]) && ($result=$this->guess($_GET['g'][0]))!==null) $this->render($result ? 'win' : 'lose'); else // the letter is guessed correctly, but not win yet { $guessed=$this->getPageState('guessed',array()); $guessed[$_GET['g'][0]]=true; $this->setPageState('guessed',$guessed,array()); $this->render('guess'); } }\n\n    ### Response: The 'guess' action.\nThis action is invoked each time when the user makes a guess..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void loadMethodArgument(final MethodVisitor mv, final MethodInfo methodInfo, final int index) { int offset = methodInfo.getArgumentOffset(index); int type = methodInfo.getArgument(index).getOpcode(); switch (type) { case 'V': break; case 'B': case 'C': case 'S': case 'I': case 'Z': mv.visitVarInsn(ILOAD, offset); break; case 'J': mv.visitVarInsn(LLOAD, offset); break; case 'F': mv.visitVarInsn(FLOAD, offset); break; case 'D': mv.visitVarInsn(DLOAD, offset); break; default: mv.visitVarInsn(ALOAD, offset); } }\n\n    ### Response:",
        "ground_truth": "Loads one argument. Index is 1-based. No conversion occurs.",
        "predict": " The 'guess' action.\nThis action is invoked each time when the user makes a guess..\n\n    "
    },
    {
        "ID": 786,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function authenticate(passport, name, options, callback) { // normalize arguments if (typeof options === 'function') { callback = options options = {} } options = options || {} if (callback) { // When the callback is set, neither `next`, `res.redirect` or `res.end` // are called. That is, a workaround to catch the `callback` is required. // The `passportAuthenticate()` method below will therefore set // `callback.resolve` and `callback.reject`. Then, once the authentication // finishes, the modified callback calls the original one and afterwards // triggers either `callback.resolve` or `callback.reject` to inform // `passportAuthenticate()` that we are ready. const _callback = callback callback = function(err, user, info, status) { try { Promise.resolve(_callback(err, user, info, status)) .then(() => callback.resolve(false)) .catch(err => callback.reject(err)) } catch (err) { callback.reject(err) } } } const middleware = promisify(_authenticate(passport, name, options, callback)) return function passportAuthenticate(ctx, next) { // this functions wraps the connect middleware // to catch `next`, `res.redirect` and `res.end` calls const p = new Promise((resolve, reject) => { // mock the `req` object const req = createReqMock(ctx, options.assignProperty || passport._userProperty || 'user') function setBodyAndResolve(content) { if (content) ctx.body = content resolve(false) } // mock the `res` object const res = { redirect: function(url) { ctx.redirect(url) resolve(false) }, set: ctx.set.bind(ctx), setHeader: ctx.set.bind(ctx), end: setBodyAndResolve, send: setBodyAndResolve, set statusCode(status) { ctx.status = status }, get statusCode() { return ctx.status } } req.res = res // update the custom callback above if (callback) { callback.resolve = resolve callback.reject = reject } // call the connect middleware middleware(req, res).then(resolve, reject) }) return p.then(cont => { // cont equals `false` when `res.redirect` or `res.end` got called // in this case, call next to continue through Koa's middleware stack if (cont !== false) { return next() } }) } }\n\n    ### Response: Passport's authenticate middleware for Koa.\n\n@param {String|Array} name\n@param {Object} options\n@param {GeneratorFunction} callback\n@return {GeneratorFunction}\n@api private.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void storeMethodArgument(final MethodVisitor mv, final MethodInfo methodInfo, final int index) { int offset = methodInfo.getArgumentOffset(index); int type = methodInfo.getArgument(index).getOpcode(); switch (type) { case 'V': break; case 'B': case 'C': case 'S': case 'I': case 'Z': mv.visitVarInsn(ISTORE, offset); break; case 'J': mv.visitVarInsn(LSTORE, offset); break; case 'F': mv.visitVarInsn(FSTORE, offset); break; case 'D': mv.visitVarInsn(DSTORE, offset); break; default: mv.visitVarInsn(ASTORE, offset); } }\n\n    ### Response:",
        "ground_truth": "Stores one argument. Index is 1-based. No conversion occurs.",
        "predict": " Passport's authenticate middleware for Koa.\n\n@param {String|Array} name\n@param {Object} options\n@param {GeneratorFunction} callback\n@return {GeneratorFunction}\n@api private.\n\n    "
    },
    {
        "ID": 787,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function getBoundingRect(el) { const clientRect = el.getBoundingClientRect(); const bound = { left: clientRect.left, top: clientRect.top, width: clientRect.width, height: clientRect.height }; let frame = el.ownerDocument.defaultView.frameElement; while (frame) { const frameBound = frame.getBoundingClientRect(); // This computation doesn't account for more complex CSS transforms on the // frame (e.g. scaling or rotations). bound.left += frameBound.left; bound.top += frameBound.top; frame = frame.ownerDocument.frameElement; } return bound; }\n\n    ### Response: Returns the bounding rectangle wrt to the layout viewport..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void prepareReturnValue(final MethodVisitor mv, final MethodInfo methodInfo, int varOffset) { varOffset += methodInfo.getAllArgumentsSize(); switch (methodInfo.getReturnType().getOpcode()) { case 'V': mv.visitInsn(ACONST_NULL); break; case 'B': AsmUtil.valueOfByte(mv); break; case 'C': AsmUtil.valueOfCharacter(mv); break; case 'S': AsmUtil.valueOfShort(mv); break; case 'I': AsmUtil.valueOfInteger(mv); break; case 'Z': AsmUtil.valueOfBoolean(mv); break; case 'J': AsmUtil.valueOfLong(mv); break; case 'F': AsmUtil.valueOfFloat(mv); break; case 'D': AsmUtil.valueOfDouble(mv); break; } }\n\n    ### Response:",
        "ground_truth": "Prepares return value.",
        "predict": " Returns the bounding rectangle wrt to the layout viewport..\n\n    "
    },
    {
        "ID": 788,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def pop(self, identifier, default=None): \"\"\"Pop a node of the AttrTree using its path string. Args: identifier: Path string of the node to return default: Value to return if no node is found Returns: The node that was removed from the AttrTree \"\"\" if identifier in self.children: item = self[identifier] self.__delitem__(identifier) return item else: return default\n\n    ### Response: Pop a node of the AttrTree using its path string.\n\n        Args:\n            identifier: Path string of the node to return\n            default: Value to return if no node is found\n\n        Returns:\n            The node that was removed from the AttrTree.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String createMethodSignaturesKey(final int access, final String methodName, final String description, final String className) { return new StringBand(7) .append(access) .append(COLON) .append(description) .append(StringPool.UNDERSCORE) .append(className) .append(StringPool.HASH) .append(methodName) .toString(); }\n\n    ### Response:",
        "ground_truth": "Creates unique key for method signatures map.",
        "predict": " Pop a node of the AttrTree using its path string.\n\n        Args:\n            identifier: Path string of the node to return\n            default: Value to return if no node is found\n\n        Returns:\n            The node that was removed from the AttrTree.\n\n    "
    },
    {
        "ID": 789,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private function validate() { if (!array_key_exists('type', $this->properties)) { throw new StatusException(sprintf('Key %s in %s missing', 'type', __CLASS__), 100, null); } $type = $this->properties['type']; // the type specified must be valid if (!in_array($this->properties['type'], $this->types)) { throw new StatusException('The type specified is invalid', 100, null); } switch ($type) { case StatusInterface::TYPE_INITIAL: case StatusInterface::TYPE_EXCEPTION: $mandatoryKeys = ['name']; break; default: $mandatoryKeys = ['name', 'transitions_from', 'transitions_to']; break; } foreach ($mandatoryKeys as $key) { if (!array_key_exists($key, $this->properties)) { throw new StatusException(sprintf('Key %s in %s missing', $key, __CLASS__), 100, null); } } if (StatusInterface::TYPE_INITIAL != $type && StatusInterface::TYPE_EXCEPTION != $type) { $keysMustBeArray = ['transitions_from', 'transitions_to']; foreach ($keysMustBeArray as $key) { if (!is_array($this->properties[$key])) { throw new StatusException(sprintf('Key %s is not an array', $key), 100, null); } } } }\n\n    ### Response: Validate all required properties on initialization.\n\n@throws \\Mothership\\StateMachine\\Exception\\StatusException.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void newArray(final MethodVisitor mv, final Class componentType) { if (componentType == int.class) { mv.visitIntInsn(NEWARRAY, T_INT); return; } if (componentType == long.class) { mv.visitIntInsn(NEWARRAY, T_LONG); return; } if (componentType == float.class) { mv.visitIntInsn(NEWARRAY, T_FLOAT); return; } if (componentType == double.class) { mv.visitIntInsn(NEWARRAY, T_DOUBLE); return; } if (componentType == byte.class) { mv.visitIntInsn(NEWARRAY, T_BYTE); return; } if (componentType == short.class) { mv.visitIntInsn(NEWARRAY, T_SHORT); return; } if (componentType == boolean.class) { mv.visitIntInsn(NEWARRAY, T_BOOLEAN); return; } if (componentType == char.class) { mv.visitIntInsn(NEWARRAY, T_CHAR); return; } mv.visitTypeInsn(ANEWARRAY, AsmUtil.typeToSignature(componentType)); }\n\n    ### Response:",
        "ground_truth": "Creates new array.",
        "predict": " Validate all required properties on initialization.\n\n@throws \\Mothership\\StateMachine\\Exception\\StatusException.\n\n    "
    },
    {
        "ID": 790,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (d *dockerLogger) Start(opts *StartOpts) error { client, err := d.getDockerClient(opts) if err != nil { return fmt.Errorf(\"failed to open docker client: %v\", err) } ctx, cancel := context.WithCancel(context.Background()) d.cancelCtx = cancel go func() { defer close(d.doneCh) stdout, stderr, err := d.openStreams(ctx, opts) if err != nil { d.logger.Error(\"log streaming ended with terminal error\", \"error\", err) return } sinceTime := time.Unix(opts.StartTime, 0) backoff := 0.0 for { logOpts := docker.LogsOptions{ Context: ctx, Container: opts.ContainerID, OutputStream: stdout, ErrorStream: stderr, Since: sinceTime.Unix(), Follow: true, Stdout: true, Stderr: true, RawTerminal: opts.TTY, } err := client.Logs(logOpts) if ctx.Err() != nil { // If context is terminated then we can safely break the loop return } else if err == nil { backoff = 0.0 } else if isLoggingTerminalError(err) { d.logger.Error(\"log streaming ended with terminal error\", \"error\", err) return } else if err != nil { backoff = nextBackoff(backoff) d.logger.Error(\"log streaming ended with error\", \"error\", err, \"retry_in\", backoff) time.Sleep(time.Duration(backoff) * time.Second) } sinceTime = time.Now() container, err := client.InspectContainer(opts.ContainerID) if err != nil { _, notFoundOk := err.(*docker.NoSuchContainer) if !notFoundOk { return } } else if !container.State.Running { return } } }() return nil }\n\n    ### Response: // Start log monitoring.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void storeIntoArray(final MethodVisitor mv, final Class componentType) { if (componentType == int.class) { mv.visitInsn(IASTORE); return; } if (componentType == long.class) { mv.visitInsn(LASTORE); return; } if (componentType == float.class) { mv.visitInsn(FASTORE); return; } if (componentType == double.class) { mv.visitInsn(DASTORE); return; } if (componentType == byte.class) { mv.visitInsn(BASTORE); return; } if (componentType == short.class) { mv.visitInsn(SASTORE); return; } if (componentType == boolean.class) { mv.visitInsn(BASTORE); return; } if (componentType == char.class) { mv.visitInsn(CASTORE); return; } mv.visitInsn(AASTORE); }\n\n    ### Response:",
        "ground_truth": "Stores element on stack into an array.",
        "predict": " // Start log monitoring.\n\n    "
    },
    {
        "ID": 791,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def data(self): \"\"\"list of mean numeric values of categorical responses.\"\"\" means = [] table = self._slice.as_array() products = self._inner_prods(table, self.values) for axis, product in enumerate(products): if product is None: means.append(product) continue # Calculate means valid_indices = self._valid_indices(axis) num = np.sum(product[valid_indices], axis) den = np.sum(table[valid_indices], axis) mean = num / den if not isinstance(mean, np.ndarray): mean = np.array([mean]) means.append(mean) return means\n\n    ### Response: list of mean numeric values of categorical responses..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String extractEncoding(final String contentType, String defaultEncoding) { String encoding = extractEncoding(contentType); if (encoding == null) { if (defaultEncoding == null) { defaultEncoding = JoddCore.encoding; } encoding = defaultEncoding; } return encoding; }\n\n    ### Response:",
        "ground_truth": "Extracts encoding from a given content type.\n\n@param contentType     content type.\n@param defaultEncoding Default encoding to be used if extract returns {@code null}.\nIf defaultEncoding is {@code null}, {@link JoddCore#encoding} will be used.\n@return Encoding from the content type.\n@see #extractEncoding(String)",
        "predict": " list of mean numeric values of categorical responses..\n\n    "
    },
    {
        "ID": 792,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def load(self, loc): '''Load a pickled model.''' try: w_td_c = pickle.load(open(loc, 'rb')) except IOError: msg = (\"Missing trontagger.pickle file.\") raise MissingCorpusError(msg) self.model.weights, self.tagdict, self.classes = w_td_c self.model.classes = self.classes return None\n\n    ### Response: Load a pickled model..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static boolean isEmptyFlags(Flags flags) { if (flags == null) return true; Flags.Flag[] systemFlags = flags.getSystemFlags(); if (systemFlags != null && systemFlags.length > 0) { return false; } String[] userFlags = flags.getUserFlags(); if (userFlags != null && userFlags.length > 0) { return false; } return true; }\n\n    ### Response:",
        "ground_truth": "Check whether flags is a empty flags\n@param flags a flags of message to check\n@return whether the flags is empty",
        "predict": " Load a pickled model..\n\n    "
    },
    {
        "ID": 793,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function getStatus() { if ($this->pid) { $waitPID = \\pcntl_waitpid($this->pid, $status, WNOHANG); if ($waitPID == $this->pid) { return Thread::THREAD_EXITED; } else { return Thread::THREAD_RUNNING; } } }\n\n    ### Response: Get the current status for this thread..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String resolveAuthBearerToken(final HttpServletRequest request) { String header = request.getHeader(HEADER_AUTHORIZATION); if (header == null) { return null; } int ndx = header.indexOf(\"Bearer \"); if (ndx == -1) { return null; } return header.substring(ndx + 7).trim(); }\n\n    ### Response:",
        "ground_truth": "Returns Bearer token.",
        "predict": " Get the current status for this thread..\n\n    "
    },
    {
        "ID": 794,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected boolean checkIfModelMatches ( String groupId, String artifactId, String version, Model model ) { // try these first. String modelGroup = model.getGroupId(); String modelArtifactId = model.getArtifactId(); String modelVersion = model.getVersion(); try { if ( StringUtils.isEmpty( modelGroup ) ) { modelGroup = model.getParent().getGroupId(); } else { // MENFORCER-30, handle cases where the value is a property like ${project.parent.groupId} modelGroup = (String) helper.evaluate( modelGroup ); } if ( StringUtils.isEmpty( modelVersion ) ) { modelVersion = model.getParent().getVersion(); } else { // MENFORCER-30, handle cases where the value is a property like ${project.parent.version} modelVersion = (String) helper.evaluate( modelVersion ); } // Is this only required for Maven2? modelArtifactId = (String) helper.evaluate( modelArtifactId ); } catch ( NullPointerException e ) { // this is probably bad. I don't have a valid // group or version and I can't find a // parent???? // lets see if it's what we're looking for // anyway. } catch ( ExpressionEvaluationException e ) { // as above } return ( StringUtils.equals( groupId, modelGroup ) && StringUtils.equals( version, modelVersion ) && StringUtils .equals( artifactId, modelArtifactId ) ); }\n\n    ### Response: Make sure the model is the one I'm expecting.\n\n@param groupId the group id\n@param artifactId the artifact id\n@param version the version\n@param model Model being checked.\n\n@return true, if check if model matches.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void requireAuthentication(final HttpServletResponse resp, final String realm) throws IOException { resp.setHeader(WWW_AUTHENTICATE, \"Basic realm=\\\"\" + realm + '\\\"'); resp.sendError(HttpServletResponse.SC_UNAUTHORIZED); }\n\n    ### Response:",
        "ground_truth": "Sends correct headers to require basic authentication for the given realm.",
        "predict": " Make sure the model is the one I'm expecting.\n\n@param groupId the group id\n@param artifactId the artifact id\n@param version the version\n@param model Model being checked.\n\n@return true, if check if model matches.\n\n    "
    },
    {
        "ID": 795,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function() { var x, y, els, div, span, el, item, obj, menu, sortable, a; sortable = hashedit.config.sortable; // walk through sortable clases for (x = 0; x < sortable.length; x += 1) { // setup sortable classes els = document.querySelectorAll('[hashedit] ' + sortable[x]); // set [data-hashedit-sortable=true] for (y = 0; y < els.length; y += 1) { // add attribute els[y].setAttribute('hashedit-sortable', ''); } } // wrap elements in the sortable class els = document.querySelectorAll('[hashedit-sortable] > *'); // wrap editable items for (y = 0; y < els.length; y += 1) { hashedit.setupElementMenu(els[y]); } // get all sortable elements els = document.querySelectorAll('[hashedit] [hashedit-sortable]'); // walk through elements for (x = 0; x < els.length; x += 1) { el = els[x]; obj = new Sortable(el, { group: \"hashedit-sortable\", // or { name: \"...\", pull: [true, false, clone], put: [true, false, array] } sort: true, // sorting inside list delay: 0, // time in milliseconds to define when the sorting should start disabled: false, // Disables the sortable if set to true. store: null, // @see Store animation: 150, // ms, animation speed moving items when sorting, `0` \u2014 without animation handle: \".hashedit-move\", // Drag handle selector within list items ghostClass: \"hashedit-highlight\", // Class name for the drop placeholder scroll: true, // or HTMLElement scrollSensitivity: 30, // px, how near the mouse must be to an edge to start scrolling. scrollSpeed: 10, // px // dragging ended onEnd: function(evt) { // get item item = evt.item; // handle empty hashedit.setupEmpty(); } }); } // set the display of empty columns hashedit.setupEmpty(); }\n\n    ### Response: Adds a hashedit-sortable class to any selector in the sortable array, enables sorting\n@param {Array} sortable.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void prepareDownload(final HttpServletResponse response, final File file, final String mimeType) { if (!file.exists()) { throw new IllegalArgumentException(\"File not found: \" + file); } if (file.length() > Integer.MAX_VALUE) { throw new IllegalArgumentException(\"File too big: \" + file); } prepareResponse(response, file.getAbsolutePath(), mimeType, (int) file.length()); }\n\n    ### Response:",
        "ground_truth": "Prepares response for file download with provided mime type.",
        "predict": " Adds a hashedit-sortable class to any selector in the sortable array, enables sorting\n@param {Array} sortable.\n\n    "
    },
    {
        "ID": 796,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static function raw2xml($val) { if (is_array($val)) { foreach ($val as $k => $v) { $val[$k] = self::raw2xml($v); } return $val; } return htmlspecialchars($val, ENT_QUOTES, 'UTF-8'); }\n\n    ### Response: Ensure that text is properly escaped for XML.\n\n@see http://www.w3.org/TR/REC-xml/#dt-escape\n@param array|string $val String to escape, or array of strings\n@return array|string.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void prepareResponse(final HttpServletResponse response, final String fileName, String mimeType, final int fileSize) { if ((mimeType == null) && (fileName != null)) { String extension = FileNameUtil.getExtension(fileName); mimeType = MimeTypes.getMimeType(extension); } if (mimeType != null) { response.setContentType(mimeType); } if (fileSize >= 0) { response.setContentLength(fileSize); } // support internationalization // See https://tools.ietf.org/html/rfc6266#section-5 for more information. if (fileName != null) { String name = FileNameUtil.getName(fileName); String encodedFileName = URLCoder.encode(name); response.setHeader(CONTENT_DISPOSITION, \"attachment;filename=\\\"\" + name + \"\\\";filename*=utf8''\" + encodedFileName); } }\n\n    ### Response:",
        "ground_truth": "null\n@param fileSize if less then 0 it will be ignored",
        "predict": " Ensure that text is properly escaped for XML.\n\n@see http://www.w3.org/TR/REC-xml/#dt-escape\n@param array|string $val String to escape, or array of strings\n@return array|string.\n\n    "
    },
    {
        "ID": 797,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (f *BackoffResetFunc) PushHook(hook func()) { f.hooks = append(f.hooks, hook) }\n\n    ### Response: // PushHook adds a function to the end of hook queue. Each invocation of the\n// Reset method of the parent MockBackoff instance inovkes the hook at the\n// front of the queue and discards it. After the queue is empty, the default\n// hook function is invoked for any future action..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Cookie[] getAllCookies(final HttpServletRequest request, final String cookieName) { Cookie[] cookies = request.getCookies(); if (cookies == null) { return null; } ArrayList<Cookie> list = new ArrayList<>(cookies.length); for (Cookie cookie : cookies) { if (cookie.getName().equals(cookieName)) { list.add(cookie); } } if (list.isEmpty()) { return null; } return list.toArray(new Cookie[0]); }\n\n    ### Response:",
        "ground_truth": "",
        "predict": " // PushHook adds a function to the end of hook queue. Each invocation of the\n// Reset method of the parent MockBackoff instance inovkes the hook at the\n// front of the queue and discards it. After the queue is empty, the default\n// hook function is invoked for any future action..\n\n    "
    },
    {
        "ID": 798,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def move(self, auth, resource, destinationresource, options={\"aliases\": True}, defer=False): \"\"\" Moves a resource from one parent client to another. Args: auth: <cik> resource: Identifed resource to be moved. destinationresource: resource of client resource is being moved to. \"\"\" return self._call('move', auth, [resource, destinationresource, options], defer)\n\n    ### Response: Moves a resource from one parent client to another.\n\n        Args:\n            auth: \n            resource: Identifed resource to be moved.\n            destinationresource: resource of client resource is being moved to..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String readRequestBodyFromReader(final HttpServletRequest request) throws IOException { BufferedReader buff = request.getReader(); StringWriter out = new StringWriter(); StreamUtil.copy(buff, out); return out.toString(); }\n\n    ### Response:",
        "ground_truth": "Reads HTTP request body using the request reader. Once body is read,\nit cannot be read again!",
        "predict": " Moves a resource from one parent client to another.\n\n        Args:\n            auth: \n            resource: Identifed resource to be moved.\n            destinationresource: resource of client resource is being moved to..\n\n    "
    },
    {
        "ID": 799,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (f *httpFile) Readdir(count int) ([]os.FileInfo, error) { var fis []os.FileInfo if !f.isDir { return fis, nil } di, ok := f.FileInfo.(dirInfo) if !ok { return nil, fmt.Errorf(\"failed to read directory: %q\", f.Name()) } // If count is positive, the specified number of files will be returned, // and if negative, all remaining files will be returned. // The reading position of which file is returned is held in dirIndex. fnames := f.file.fs.dirs[di.name] flen := len(fnames) // If dirIdx reaches the end and the count is a positive value, // an io.EOF error is returned. // In other cases, no error will be returned even if, for example, // you specified more counts than the number of remaining files. start := f.dirIdx if start >= flen && count > 0 { return fis, io.EOF } var end int if count < 0 { end = flen } else { end = start + count } if end > flen { end = flen } for i := start; i < end; i++ { fis = append(fis, f.file.fs.files[path.Join(di.name, fnames[i])].FileInfo) } f.dirIdx += len(fis) return fis, nil }\n\n    ### Response: // Readdir returns an empty slice of files, directory\n// listing is disabled..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String readRequestBodyFromStream(final HttpServletRequest request) throws IOException { String charEncoding = request.getCharacterEncoding(); if (charEncoding == null) { charEncoding = JoddCore.encoding; } CharArrayWriter charArrayWriter = new CharArrayWriter(); BufferedReader bufferedReader = null; try { InputStream inputStream = request.getInputStream(); if (inputStream != null) { bufferedReader = new BufferedReader(new InputStreamReader(inputStream, charEncoding)); StreamUtil.copy(bufferedReader, charArrayWriter); } else { return StringPool.EMPTY; } } finally { StreamUtil.close(bufferedReader); } return charArrayWriter.toString(); }\n\n    ### Response:",
        "ground_truth": "Reads HTTP request body using the request stream. Once body is read,\nit cannot be read again!",
        "predict": " // Readdir returns an empty slice of files, directory\n// listing is disabled..\n\n    "
    },
    {
        "ID": 800,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected Configuration freemarkerConfig() { if (fmConfig == null) { fmConfig = new Configuration(Configuration.VERSION_2_3_26); fmConfig.setClassLoaderForTemplateLoading( contentLoader, contentPath); fmConfig.setDefaultEncoding(\"utf-8\"); fmConfig.setTemplateExceptionHandler( TemplateExceptionHandler.RETHROW_HANDLER); fmConfig.setLogTemplateExceptions(false); } return fmConfig; }\n\n    ### Response: Creates the configuration for freemarker template processing.\n\n@return the configuration.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void storeContextPath(final PageContext pageContext, final String contextPathVariableName) { String ctxPath = getContextPath(pageContext); HttpServletRequest request = (HttpServletRequest) pageContext.getRequest(); request.setAttribute(contextPathVariableName, ctxPath); ServletContext servletContext = pageContext.getServletContext(); servletContext.setAttribute(contextPathVariableName, ctxPath); }\n\n    ### Response:",
        "ground_truth": "Stores context path in server context and request scope.",
        "predict": " Creates the configuration for freemarker template processing.\n\n@return the configuration.\n\n    "
    },
    {
        "ID": 801,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func NewFileSharingInfo(ReadOnly bool, ParentSharedFolderId string) *FileSharingInfo { s := new(FileSharingInfo) s.ReadOnly = ReadOnly s.ParentSharedFolderId = ParentSharedFolderId return s }\n\n    ### Response: // NewFileSharingInfo returns a new FileSharingInfo instance.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void storeContextPath(final ServletContext servletContext, final String contextPathVariableName) { String ctxPath = getContextPath(servletContext); servletContext.setAttribute(contextPathVariableName, ctxPath); }\n\n    ### Response:",
        "ground_truth": "Stores context path in page context and request scope.",
        "predict": " // NewFileSharingInfo returns a new FileSharingInfo instance.\n\n    "
    },
    {
        "ID": 802,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void declareDerivativeImages(ImageGradient<T, D> gradient, ImageHessian<D> hessian, Class<D> derivType) { if( gradient != null || hessian != null ) { derivX = GeneralizedImageOps.createSingleBand(derivType, 1, 1); derivY = GeneralizedImageOps.createSingleBand(derivType,1,1); } if( hessian != null ) { derivXX = GeneralizedImageOps.createSingleBand(derivType,1,1); derivYY = GeneralizedImageOps.createSingleBand(derivType,1,1); derivXY = GeneralizedImageOps.createSingleBand(derivType,1,1); } }\n\n    ### Response: Declare storage for image derivatives as needed.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public boolean isGetParameter(final HttpServletRequest request, String name) { name = URLCoder.encodeQueryParam(name) + '='; String query = request.getQueryString(); String[] nameValuePairs = StringUtil.splitc(query, '&'); for (String nameValuePair : nameValuePairs) { if (nameValuePair.startsWith(name)) { return true; } } return false; }\n\n    ### Response:",
        "ground_truth": "Checks if some parameter is in GET parameters.",
        "predict": " Declare storage for image derivatives as needed.\n\n    "
    },
    {
        "ID": 803,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (t *T) TryUntil( f func() bool, timeout time.Duration, desc ...string, ) { prefix := \"\" if len(desc) > 0 { prefix = strings.Join(desc, \" \") + \": \" } end := time.Now().Add(timeout) for time.Now().Before(end) { if f() { return } // Yield the processor so that other goroutines have a chance to work. // This is necessary since the function may not actually sleep at // all. runtime.Gosched() } t.Fatalf(\"%sTimeout after %s\", prefix, timeout) }\n\n    ### Response: // This file contains timeout functions to help with unit testing.\n// This function will try to run the function 'f' until 'timeout' duration\n// has elapsed. If 'f' returns true this will return, otherwise if 'f' returns\n// false for the whole period then this will automatically call Fatal to\n// terminate the test..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String[] prepareParameters( final String[] paramValues, final boolean treatEmptyParamsAsNull, final boolean ignoreEmptyRequestParams) { if (treatEmptyParamsAsNull || ignoreEmptyRequestParams) { int emptyCount = 0; int total = paramValues.length; for (int i = 0; i < paramValues.length; i++) { String paramValue = paramValues[i]; if (paramValue == null) { emptyCount++; continue; } if (paramValue.length() == 0) { emptyCount++; if (treatEmptyParamsAsNull) { paramValue = null; } } paramValues[i] = paramValue; } if ((ignoreEmptyRequestParams) && (emptyCount == total)) { return null; } } return paramValues; }\n\n    ### Response:",
        "ground_truth": "Prepares parameters for further processing.\n@param paramValues\tstring array of param values\n@param treatEmptyParamsAsNull\tempty parameters should be treated as null\n@param ignoreEmptyRequestParams\tif all parameters are empty, return null",
        "predict": " // This file contains timeout functions to help with unit testing.\n// This function will try to run the function 'f' until 'timeout' duration\n// has elapsed. If 'f' returns true this will return, otherwise if 'f' returns\n// false for the whole period then this will automatically call Fatal to\n// terminate the test..\n\n    "
    },
    {
        "ID": 804,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (c *Client) EnableHA( numControllers int, cons constraints.Value, placement []string, ) (params.ControllersChanges, error) { var results params.ControllersChangeResults arg := params.ControllersSpecs{ Specs: []params.ControllersSpec{{ NumControllers: numControllers, Constraints: cons, Placement: placement, }}} err := c.facade.FacadeCall(\"EnableHA\", arg, &results) if err != nil { return params.ControllersChanges{}, err } if len(results.Results) != 1 { return params.ControllersChanges{}, errors.Errorf(\"expected 1 result, got %d\", len(results.Results)) } result := results.Results[0] if result.Error != nil { return params.ControllersChanges{}, result.Error } return result.Result, nil }\n\n    ### Response: // EnableHA ensures the availability of Juju controllers..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void copyParamsToAttributes( final HttpServletRequest servletRequest, final boolean treatEmptyParamsAsNull, final boolean ignoreEmptyRequestParams) { Enumeration paramNames = servletRequest.getParameterNames(); while (paramNames.hasMoreElements()) { String paramName = (String) paramNames.nextElement(); if (servletRequest.getAttribute(paramName) != null) { continue; } String[] paramValues = servletRequest.getParameterValues(paramName); paramValues = prepareParameters(paramValues, treatEmptyParamsAsNull, ignoreEmptyRequestParams); if (paramValues == null) { continue; } servletRequest.setAttribute(paramName, paramValues.length == 1 ? paramValues[0] : paramValues); } // multipart if (!(servletRequest instanceof MultipartRequestWrapper)) { return; } MultipartRequestWrapper multipartRequest = (MultipartRequestWrapper) servletRequest; if (!multipartRequest.isMultipart()) { return; } paramNames = multipartRequest.getFileParameterNames(); while (paramNames.hasMoreElements()) { String paramName = (String) paramNames.nextElement(); if (servletRequest.getAttribute(paramName) != null) { continue; } FileUpload[] paramValues = multipartRequest.getFiles(paramName); servletRequest.setAttribute(paramName, paramValues.length == 1 ? paramValues[0] : paramValues); } }\n\n    ### Response:",
        "ground_truth": "Copies all request parameters to attributes.",
        "predict": " // EnableHA ensures the availability of Juju controllers..\n\n    "
    },
    {
        "ID": 805,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function createTokenRecord($emailID, $listID, $token) { $unsubscribe = new List_Unsubscribe_Token; $unsubscribe->email_id = $emailID; $unsubscribe->list_id = $listID; $unsubscribe->token = $token; $unsubscribe->save(); }\n\n    ### Response: INSERT a token record.\n\n@param  int   $emailID\n@param  int   $listID\n@param  text  $token\n@return void.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void invokeBody(final JspFragment body) throws JspException { if (body == null) { return; } try { body.invoke(null); } catch (IOException ioex) { throw new JspException(\"Tag body failed\", ioex); } }\n\n    ### Response:",
        "ground_truth": "Invokes tag body.",
        "predict": " INSERT a token record.\n\n@param  int   $emailID\n@param  int   $listID\n@param  text  $token\n@return void.\n\n    "
    },
    {
        "ID": 806,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func replaceHeaderValues(target *http.Header, source *http.Header) { if target == nil { target = new(http.Header) } for name, vals := range *source { target.Del(name) for _, val := range vals { target.Add(name, val) } } return }\n\n    ### Response: // logic to replace header values in the target with those in the source\n// this leaves any header values in the target that aren't in the source\n// if you wanted that, don't call this fuction..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static char[] renderBody(final JspFragment body) throws JspException { FastCharArrayWriter writer = new FastCharArrayWriter(); invokeBody(body, writer); return writer.toCharArray(); }\n\n    ### Response:",
        "ground_truth": "Renders tag body to char array.",
        "predict": " // logic to replace header values in the target with those in the source\n// this leaves any header values in the target that aren't in the source\n// if you wanted that, don't call this fuction..\n\n    "
    },
    {
        "ID": 807,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def from_location(cls, location): \"\"\"Try to create a Ladybug location from a location string. Args: locationString: Location string Usage: l = Location.from_location(locationString) \"\"\" if not location: return cls() try: if hasattr(location, 'isLocation'): # Ladybug location return location elif hasattr(location, 'Latitude'): # Revit's location return cls(city=str(location.Name.replace(\",\", \" \")), latitude=location.Latitude, longitude=location.Longitude) elif location.startswith('Site:'): loc, city, latitude, longitude, time_zone, elevation = \\ [x.strip() for x in re.findall(r'\\r*\\n*([^\\r\\n]*)[,|;]', location, re.DOTALL)] else: try: city, latitude, longitude, time_zone, elevation = \\ [key.split(\":\")[-1].strip() for key in location.split(\",\")] except ValueError: # it's just the city name return cls(city=location) return cls(city=city, country=None, latitude=latitude, longitude=longitude, time_zone=time_zone, elevation=elevation) except Exception as e: raise ValueError( \"Failed to create a Location from %s!\\n%s\" % (location, e))\n\n    ### Response: Try to create a Ladybug location from a location string.\n\n        Args:\n            locationString: Location string\n\n        Usage:\n\n            l = Location.from_location(locationString).\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String renderBodyToString(final JspFragment body) throws JspException { char[] result = renderBody(body); return new String(result); }\n\n    ### Response:",
        "ground_truth": "Renders tag body to string.\n@see #renderBody(javax.servlet.jsp.tagext.JspFragment)",
        "predict": " Try to create a Ladybug location from a location string.\n\n        Args:\n            locationString: Location string\n\n        Usage:\n\n            l = Location.from_location(locationString).\n\n    "
    },
    {
        "ID": 808,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function getContentTypeByName($name, $space, array $options = []) { $envelope = $this->findEnvelopeForSpace($space); $promise = coroutine( function () use ($name, $space, $envelope, $options) { $contentTypeFromEnvelope = $envelope->findContentTypeByName($name); if ($contentTypeFromEnvelope) { yield promise_for($contentTypeFromEnvelope); return; } $contentTypes = (yield $this->getContentTypes([], $space, array_merge($options, ['async' => true]))); $foundContentType = null; foreach ($contentTypes as $contentType) { if ($contentType->getName() === $name) { $foundContentType = $contentType; } $envelope->insertContentType($contentType); } yield $foundContentType; } ); return (isset($options['async']) && $options['async']) ? $promise : $promise->wait(); }\n\n    ### Response: Gets a content type using its name. Assumes content types have unique names. Returns null if no content type with the given name can be found.\n\n@param string                $name\n@param string|SpaceInterface $space\n@param array                 $options\n@return ContentTypeInterface|PromiseInterface|null.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void invokeInitMethods(final InitMethodInvocationStrategy invocationStrategy) { for (final InitMethodPoint initMethod : beanDefinition.initMethodPoints()) { if (invocationStrategy != initMethod.invocationStrategy) { continue; } try { initMethod.method.invoke(bean); } catch (Exception ex) { throw new PetiteException(\"Invalid init method: \" + initMethod, ex); } } }\n\n    ### Response:",
        "ground_truth": "Invokes init methods.",
        "predict": " Gets a content type using its name. Assumes content types have unique names. Returns null if no content type with the given name can be found.\n\n@param string                $name\n@param string|SpaceInterface $space\n@param array                 $options\n@return ContentTypeInterface|PromiseInterface|null.\n\n    "
    },
    {
        "ID": 809,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void error(Object message) { doLog(Level.ERROR, FQCN, message, null, null); }\n\n    ### Response: Issue a log message with a level of ERROR.\n\n@param message the message.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void callDestroyMethods() { for (final DestroyMethodPoint destroyMethodPoint : beanDefinition.destroyMethodPoints()) { try { destroyMethodPoint.method.invoke(bean); } catch (Exception ex) { throw new PetiteException(\"Invalid destroy method: \" + destroyMethodPoint.method, ex); } } }\n\n    ### Response:",
        "ground_truth": "Calls destroy methods on given BeanData. Destroy methods are called\nwithout any order.",
        "predict": " Issue a log message with a level of ERROR.\n\n@param message the message.\n\n    "
    },
    {
        "ID": 810,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function _savePaymorrowUserPaymentData( oxOrder $oOrder, $oPmResponseHandler ) { $aPmResponse = $oPmResponseHandler->getResponse(); $oUserPaymentId = $oOrder->oxorder__oxpaymentid->value; /** @var OxpsPaymorrowOxUserPayment|oxUserPayment $oUserPayment */ $oUserPayment = oxNew( 'oxuserpayment' ); $oUserPayment->load( $oUserPaymentId ); $sPmBankName = $aPmResponse[self::PAYMORROW_RESPONSE_BANK_NAME]; $sPmIbanCode = $aPmResponse[self::PAYMORROW_RESPONSE_SDD_IBAN]; $sPmBicCode = $aPmResponse[self::PAYMORROW_RESPONSE_SDD_BIC]; $sPmOrderId = $aPmResponse[self::PAYMORROW_RESPONSE_ORDER_ID]; $oUserPayment->setPaymorrowBankName( $sPmBankName ); $oUserPayment->setPaymorrowIBAN( $sPmIbanCode ); $oUserPayment->setPaymorrowBIC( $sPmBicCode ); $oUserPayment->setPaymorrowOrderId( $sPmOrderId ); return $oUserPayment->save(); }\n\n    ### Response: Saves Paymorrow User Payment data to oxUserPayments table\n\n@param oxOrder                      $oOrder\n@param OxpsPaymorrowResponseHandler $oPmResponseHandler\n\n@return bool|string.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Object newBeanInstance() { if (beanDefinition.ctor == CtorInjectionPoint.EMPTY) { throw new PetiteException(\"No constructor (annotated, single or default) founded as injection point for: \" + beanDefinition.type.getName()); } int paramNo = beanDefinition.ctor.references.length; Object[] args = new Object[paramNo]; // wiring if (beanDefinition.wiringMode != WiringMode.NONE) { for (int i = 0; i < paramNo; i++) { args[i] = pc.getBean(beanDefinition.ctor.references[i]); if (args[i] == null) { if ((beanDefinition.wiringMode == WiringMode.STRICT)) { throw new PetiteException( \"Wiring constructor failed. References '\" + beanDefinition.ctor.references[i] + \"' not found for constructor: \" + beanDefinition.ctor.constructor); } } } } // create instance final Object bean; try { bean = beanDefinition.ctor.constructor.newInstance(args); } catch (Exception ex) { throw new PetiteException(\"Failed to create new bean instance '\" + beanDefinition.type.getName() + \"' using constructor: \" + beanDefinition.ctor.constructor, ex); } return bean; }\n\n    ### Response:",
        "ground_truth": "Creates a new instance.",
        "predict": " Saves Paymorrow User Payment data to oxUserPayments table\n\n@param oxOrder                      $oOrder\n@param OxpsPaymorrowResponseHandler $oPmResponseHandler\n\n@return bool|string.\n\n    "
    },
    {
        "ID": 811,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func points2Ranges(sc *stmtctx.StatementContext, rangePoints []point, tp *types.FieldType) ([]*Range, error) { ranges := make([]*Range, 0, len(rangePoints)/2) for i := 0; i < len(rangePoints); i += 2 { startPoint, err := convertPoint(sc, rangePoints[i], tp) if err != nil { return nil, errors.Trace(err) } endPoint, err := convertPoint(sc, rangePoints[i+1], tp) if err != nil { return nil, errors.Trace(err) } less, err := validInterval(sc, startPoint, endPoint) if err != nil { return nil, errors.Trace(err) } if !less { continue } // If column has not null flag, [null, null] should be removed. if mysql.HasNotNullFlag(tp.Flag) && endPoint.value.Kind() == types.KindNull { continue } ran := &Range{ LowVal: []types.Datum{startPoint.value}, LowExclude: startPoint.excl, HighVal: []types.Datum{endPoint.value}, HighExclude: endPoint.excl, } ranges = append(ranges, ran) } return ranges, nil }\n\n    ### Response: // points2Ranges build index ranges from range points.\n// Only one column is built there. If there're multiple columns, use appendPoints2Ranges..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void injectParams(final ParamManager paramManager, final boolean implicitParamInjection) { if (beanDefinition.name == null) { return; } if (implicitParamInjection) { // implicit final int len = beanDefinition.name.length() + 1; for (final String param : beanDefinition.params) { final Object value = paramManager.get(param); final String destination = param.substring(len); try { BeanUtil.declared.setProperty(bean, destination, value); } catch (Exception ex) { throw new PetiteException(\"Unable to set parameter: '\" + param + \"' to bean: \" + beanDefinition.name, ex); } } } // explicit for (final ValueInjectionPoint pip : beanDefinition.values) { final String value = paramManager.parseKeyTemplate(pip.valueTemplate); try { BeanUtil.declared.setProperty(bean, pip.property, value); } catch (Exception ex) { throw new PetiteException(\"Unable to set value for: '\" + pip.valueTemplate + \"' to bean: \" + beanDefinition.name, ex); } } }\n\n    ### Response:",
        "ground_truth": "Injects all parameters.",
        "predict": " // points2Ranges build index ranges from range points.\n// Only one column is built there. If there're multiple columns, use appendPoints2Ranges..\n\n    "
    },
    {
        "ID": 812,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String getPrincipalAttributeValue(final Principal p, final String attributeName) { val attributes = p.getAttributes(); if (attributes.containsKey(attributeName)) { return CollectionUtils.toCollection(attributes.get(attributeName)).iterator().next().toString(); } return null; }\n\n    ### Response: Gets principal attribute value.\n\n@param p             the p\n@param attributeName the attribute name\n@return the principal attribute value.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SuppressWarnings({\"UnusedDeclaration\"}) public String rewrite(final HttpServletRequest servletRequest, final String actionPath, final String httpMethod) { return actionPath; }\n\n    ### Response:",
        "ground_truth": "Rewrites action path.",
        "predict": " Gets principal attribute value.\n\n@param p             the p\n@param attributeName the attribute name\n@return the principal attribute value.\n\n    "
    },
    {
        "ID": 813,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (g *Generator) ClearLinuxDevices() { if g.Config == nil || g.Config.Linux == nil || g.Config.Linux.Devices == nil { return } g.Config.Linux.Devices = []rspec.LinuxDevice{} }\n\n    ### Response: // ClearLinuxDevices clears g.Config.Linux.Devices.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void addHeader(final String name, final String value) { List<String> valuesList = super.getAll(name); if (valuesList.isEmpty()) { super.add(name, value); return; } super.remove(name); valuesList.add(value); super.addAll(name, valuesList); }\n\n    ### Response:",
        "ground_truth": "Adds new header value. If existing value exist, it will be removed\nso the store the new key value.",
        "predict": " // ClearLinuxDevices clears g.Config.Linux.Devices.\n\n    "
    },
    {
        "ID": 814,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function (kvp) { for (var x in kvp) { if (kvp.hasOwnProperty(x)) { this.set(x, kvp[x]); } } }\n\n    ### Response: Set multiple propertys in one go\n\n@param {Object} kvp An Object where the key is a property name and the value is the value to assign to the property\n\n@example\nvar props = {\nmonkey: 'ook',\ncat: 'meow',\ndog: 'woof'\n};\nfoo.setValues(props);\nconsole.log(foo.get('cat')); // Logs 'meow'.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void put(final String profile, final Map<String, PropsEntry> map, final String key, final String value, final boolean append) { String realValue = value; if (append || appendDuplicateProps) { PropsEntry pv = map.get(key); if (pv != null) { realValue = pv.value + APPEND_SEPARATOR + realValue; } } PropsEntry propsEntry = new PropsEntry(key, realValue, profile, this); // update position pointers if (first == null) { first = propsEntry; } else { last.next = propsEntry; } last = propsEntry; // add to the map map.put(key, propsEntry); }\n\n    ### Response:",
        "ground_truth": "Puts key-value pair into the map, with respect of appending duplicate properties",
        "predict": " Set multiple propertys in one go\n\n@param {Object} kvp An Object where the key is a property name and the value is the value to assign to the property\n\n@example\nvar props = {\nmonkey: 'ook',\ncat: 'meow',\ndog: 'woof'\n};\nfoo.setValues(props);\nconsole.log(foo.get('cat')); // Logs 'meow'.\n\n    "
    },
    {
        "ID": 815,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def check_tags_contain(actual, expected): \"\"\"Check if a set of AWS resource tags is contained in another Every tag key in `expected` must be present in `actual`, and have the same value. Extra keys in `actual` but not in `expected` are ignored. Args: actual (list): Set of tags to be verified, usually from the description of a resource. Each item must be a `dict` containing `Key` and `Value` items. expected (list): Set of tags that must be present in `actual` (in the same format). \"\"\" actual_set = set((item[\"Key\"], item[\"Value\"]) for item in actual) expected_set = set((item[\"Key\"], item[\"Value\"]) for item in expected) return actual_set >= expected_set\n\n    ### Response: Check if a set of AWS resource tags is contained in another\n\n    Every tag key in `expected` must be present in `actual`, and have the same\n    value. Extra keys in `actual` but not in `expected` are ignored.\n\n    Args:\n        actual (list): Set of tags to be verified, usually from the description\n            of a resource. Each item must be a `dict` containing `Key` and\n            `Value` items.\n        expected (list): Set of tags that must be present in `actual` (in the\n            same format)..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void putBaseProperty(final String key, final String value, final boolean append) { put(null, baseProperties, key, value, append); }\n\n    ### Response:",
        "ground_truth": "Adds base property.",
        "predict": " Check if a set of AWS resource tags is contained in another\n\n    Every tag key in `expected` must be present in `actual`, and have the same\n    value. Extra keys in `actual` but not in `expected` are ignored.\n\n    Args:\n        actual (list): Set of tags to be verified, usually from the description\n            of a resource. Each item must be a `dict` containing `Key` and\n            `Value` items.\n        expected (list): Set of tags that must be present in `actual` (in the\n            same format)..\n\n    "
    },
    {
        "ID": 816,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function get($bank_account_id) { return $this->getByPath(sprintf('/%s/%s/%s', MoipResource::VERSION, self::PATH, $bank_account_id)); }\n\n    ### Response: Get a bank account.\n\n@param string $bank_account_id Bank account id.\n\n@return stdClass.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void putProfileProperty(final String key, final String value, final String profile, final boolean append) { Map<String, PropsEntry> map = profileProperties.computeIfAbsent(profile, k -> new HashMap<>()); put(profile, map, key, value, append); }\n\n    ### Response:",
        "ground_truth": "Adds profile property.",
        "predict": " Get a bank account.\n\n@param string $bank_account_id Bank account id.\n\n@return stdClass.\n\n    "
    },
    {
        "ID": 817,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def from_dict(page, content_type=None): \"\"\" Create a |Page| object from a dictionary. This method is intended for internal use, to construct a |Page| object from the body of a response json from a paginated endpoint. :param page: The dictionary. :param content_type: The class that the contents should be deserialized into. :return: The resulting |Page| object. \"\"\" result = Page(items=page.get('items'), page_number=page.get('pageNumber'), page_size=page.get('pageSize'), total_elements=page.get('totalElements'), has_next=page.get('hasNext')) if content_type is not None: if not issubclass(content_type, ModelBase): raise ValueError(\"'content_type' must be a subclass of ModelBase.\") result.items = [content_type.from_dict(item) for item in result.items] return result\n\n    ### Response: Create a |Page| object from a dictionary.  This method is intended for internal use, to construct a\n        |Page| object from the body of a response json from a paginated endpoint.\n\n        :param page: The dictionary.\n        :param content_type: The class that the contents should be deserialized into.\n        :return: The resulting |Page| object..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public PropsEntry getProfileProperty(final String profile, final String key) { final Map<String, PropsEntry> profileMap = profileProperties.get(profile); if (profileMap == null) { return null; } return profileMap.get(key); }\n\n    ### Response:",
        "ground_truth": "Returns profile property.",
        "predict": " Create a |Page| object from a dictionary.  This method is intended for internal use, to construct a\n        |Page| object from the body of a response json from a paginated endpoint.\n\n        :param page: The dictionary.\n        :param content_type: The class that the contents should be deserialized into.\n        :return: The resulting |Page| object..\n\n    "
    },
    {
        "ID": 818,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (w *syncedWriter) write(p []byte) (int, error) { n, err := w.writer.Write(p) // attempt to flush buffered IO if f, ok := w.writer.(flusher); ok { f.Flush() // ignore error } // attempt to sync file if s, ok := w.writer.(syncer); ok { s.Sync() // ignore error } return n, err }\n\n    ### Response: // must only be called when w.lock is held.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String resolveMacros(String value, final String... profiles) { // create string template parser that will be used internally StringTemplateParser stringTemplateParser = new StringTemplateParser(); stringTemplateParser.setResolveEscapes(false); if (!ignoreMissingMacros) { stringTemplateParser.setReplaceMissingKey(false); } else { stringTemplateParser.setReplaceMissingKey(true); stringTemplateParser.setMissingKeyReplacement(StringPool.EMPTY); } final Function<String, String> macroResolver = macroName -> { String[] lookupProfiles = profiles; int leftIndex = macroName.indexOf('<'); if (leftIndex != -1) { int rightIndex = macroName.indexOf('>'); String profiles1 = macroName.substring(leftIndex + 1, rightIndex); macroName = macroName.substring(0, leftIndex).concat(macroName.substring(rightIndex + 1)); lookupProfiles = StringUtil.splitc(profiles1, ','); StringUtil.trimAll(lookupProfiles); } return lookupValue(macroName, lookupProfiles); }; // start parsing int loopCount = 0; while (loopCount++ < MAX_INNER_MACROS) { final String newValue = stringTemplateParser.parse(value, macroResolver); if (newValue.equals(value)) { break; } if (skipEmptyProps) { if (newValue.length() == 0) { return null; } } value = newValue; } return value; }\n\n    ### Response:",
        "ground_truth": "Resolves all macros in this props set. Called on property lookup.",
        "predict": " // must only be called when w.lock is held.\n\n    "
    },
    {
        "ID": 819,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _get_value_from_ast(self, obj): \"\"\" Return the value of the ast object. \"\"\" if isinstance(obj, ast.Num): return obj.n elif isinstance(obj, ast.Str): return obj.s elif isinstance(obj, ast.List): return [self._get_value_from_ast(e) for e in obj.elts] elif isinstance(obj, ast.Tuple): return tuple([self._get_value_from_ast(e) for e in obj.elts]) # None, True and False are NameConstants in Py3.4 and above. elif sys.version_info.major >= 3 and isinstance(obj, ast.NameConstant): return obj.value # For python versions below 3.4 elif isinstance(obj, ast.Name) and (obj.id in [\"True\", \"False\", \"None\"]): return string_to_constant[obj.id] # Probably passed a variable name. # Or passed a single word without wrapping it in quotes as an argument # ex: p.inflect(\"I plural(see)\") instead of p.inflect(\"I plural('see')\") raise NameError(\"name '%s' is not defined\" % obj.id)\n\n    ### Response: Return the value of the ast object..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Map extract(Map target, final String[] profiles, final String[] wildcardPatterns, String prefix) { if (target == null) { target = new HashMap(); } // make sure prefix ends with a dot if (prefix != null) { if (!StringUtil.endsWithChar(prefix, '.')) { prefix += StringPool.DOT; } } if (profiles != null) { for (String profile : profiles) { while (true) { final Map<String, PropsEntry> map = this.profileProperties.get(profile); if (map != null) { extractMap(target, map, profiles, wildcardPatterns, prefix); } final int ndx = profile.lastIndexOf('.'); if (ndx == -1) { break; } profile = profile.substring(0, ndx); } } } extractMap(target, this.baseProperties, profiles, wildcardPatterns, prefix); return target; }\n\n    ### Response:",
        "ground_truth": "Extracts props to target map. This is all-in-one method, that does many things at once.",
        "predict": " Return the value of the ast object..\n\n    "
    },
    {
        "ID": 820,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def from_string(self, sid_string): \"\"\" Used to set the structure parameters based on the input string :param sid_string: String of the sid in S-x-x-x-x form \"\"\" if not sid_string.startswith(\"S-\"): raise ValueError(\"A SID string must start with S-\") sid_entries = sid_string.split(\"-\") if len(sid_entries) < 3: raise ValueError(\"A SID string must start with S and contain a \" \"revision and identifier authority, e.g. S-1-0\") revision = int(sid_entries[1]) id_authority = int(sid_entries[2]) sub_authorities = [int(i) for i in sid_entries[3:]] self['revision'].set_value(revision) self['identifier_authority'].set_value(id_authority) self['sub_authorities'] = sub_authorities\n\n    ### Response: Used to set the structure parameters based on the input string\n\n        :param sid_string: String of the sid in S-x-x-x-x form.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static int streamtoword(byte[] data, int[] offp) { int i; int word = 0; int off = offp[0]; for (i = 0; i < 4; i++) { word = (word << 8) | (data[off] & 0xff); off = (off + 1) % data.length; } offp[0] = off; return word; }\n\n    ### Response:",
        "ground_truth": "Cycically extract a word of key material.\n\n@param data the string to extract the data from\n@param offp a \"pointer\" (as a one-entry array) to the\ncurrent offset into data\n@return the next word of material from data",
        "predict": " Used to set the structure parameters based on the input string\n\n        :param sid_string: String of the sid in S-x-x-x-x form.\n\n    "
    },
    {
        "ID": 821,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func RegisterJSON(componentName, filePath string) bool { var constructor ComponentConstructor constructor = func() interface{} { return LoadJSON(filePath) } return Register(componentName, constructor) }\n\n    ### Response: // RegisterJSON registers an external JSON graph definition as a component\n// that can be instantiated at run-time using component Factory.\n// It returns true on success or false if component name is already taken..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String hashpw(String password, String salt) { BCrypt B; String real_salt; byte[] passwordb, saltb, hashed; char minor = (char) 0; int rounds, off; StringBuffer rs = new StringBuffer(); if (salt.charAt(0) != '$' || salt.charAt(1) != '2') { throw new IllegalArgumentException(\"Invalid salt version\"); } if (salt.charAt(2) == '$') { off = 3; } else { minor = salt.charAt(2); if (minor != 'a' || salt.charAt(3) != '$') { throw new IllegalArgumentException(\"Invalid salt revision\"); } off = 4; } // Extract number of rounds if (salt.charAt(off + 2) > '$') { throw new IllegalArgumentException(\"Missing salt rounds\"); } rounds = Integer.parseInt(salt.substring(off, off + 2)); real_salt = salt.substring(off + 3, off + 25); try { passwordb = (password + (minor >= 'a' ? \"\\000\" : \"\")).getBytes(\"UTF-8\"); } catch (UnsupportedEncodingException uee) { throw new AssertionError(\"UTF-8 is not supported\"); } saltb = decode_base64(real_salt, BCRYPT_SALT_LEN); B = new BCrypt(); hashed = B.crypt_raw(passwordb, saltb, rounds, (int[]) bf_crypt_ciphertext.clone()); rs.append(\"$2\"); if (minor >= 'a') { rs.append(minor); } rs.append('$'); if (rounds < 10) { rs.append('0'); } if (rounds > 30) { throw new IllegalArgumentException( \"rounds exceeds maximum (30)\"); } rs.append(rounds) .append('$') .append(encode_base64(saltb, saltb.length)) .append(encode_base64(hashed, bf_crypt_ciphertext.length * 4 - 1)); return rs.toString(); }\n\n    ### Response:",
        "ground_truth": "Hash a password using the OpenBSD bcrypt scheme.\n\n@param password the password to hash\n@param salt the salt to hash with (perhaps generated\nusing BCrypt.gensalt)\n@return the hashed password",
        "predict": " // RegisterJSON registers an external JSON graph definition as a component\n// that can be instantiated at run-time using component Factory.\n// It returns true on success or false if component name is already taken..\n\n    "
    },
    {
        "ID": 822,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (cm CommentMap) AddComment(node Node, comment *Comment) { list := cm[node] list = append(list, comment) cm[node] = list }\n\n    ### Response: // AddComment adds a single comment to the map.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static boolean checkpw(String plaintext, String hashed) { byte[] hashed_bytes; byte[] try_bytes; try { String try_pw = hashpw(plaintext, hashed); hashed_bytes = hashed.getBytes(\"UTF-8\"); try_bytes = try_pw.getBytes(\"UTF-8\"); } catch (UnsupportedEncodingException uee) { return false; } if (hashed_bytes.length != try_bytes.length) { return false; } byte ret = 0; for (int i = 0; i < try_bytes.length; i++) { ret |= hashed_bytes[i] ^ try_bytes[i]; } return ret == 0; }\n\n    ### Response:",
        "ground_truth": "Check that a plaintext password matches a previously hashed\none.\n\n@param plaintext the plaintext password to verify\n@param hashed the previously-hashed password\n@return true if the passwords match, false otherwise",
        "predict": " // AddComment adds a single comment to the map.\n\n    "
    },
    {
        "ID": 823,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (v replaceStrategy) MergeType(e apply.TypeElement) (apply.Result, error) { return v.doReplace(e) }\n\n    ### Response: // MergeType returns a result by merging the recorded, local and remote values\n// - replacing the remote value with the local value.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public int copyAll(final OutputStream out) throws IOException { int count = 0; while (true) { byte b = readByte(); if (isBoundary(b)) { break; } out.write(b); count++; } return count; }\n\n    ### Response:",
        "ground_truth": "Copies bytes from this stream to some output until boundary is\nreached. Returns number of copied bytes. It will throw an exception\nfor any irregular behaviour.",
        "predict": " // MergeType returns a result by merging the recorded, local and remote values\n// - replacing the remote value with the local value.\n\n    "
    },
    {
        "ID": 824,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private OJBIterator getReportQueryIteratorFromQuery(Query query, ClassDescriptor cld) throws PersistenceBrokerException { RsIteratorFactory factory = ReportRsIteratorFactoryImpl.getInstance(); OJBIterator result = getRsIteratorFromQuery(query, cld, factory); if (query.usePaging()) { result = new PagingIterator(result, query.getStartAtIndex(), query.getEndAtIndex()); } return result; }\n\n    ### Response: Get an extent aware Iterator based on the ReportQuery\n\n@param query\n@param cld\n@return OJBIterator.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public int copyMax(final OutputStream out, final int maxBytes) throws IOException { int count = 0; while (true) { byte b = readByte(); if (isBoundary(b)) { break; } out.write(b); count++; if (count == maxBytes) { return count; } } return count; }\n\n    ### Response:",
        "ground_truth": "Copies max or less number of bytes to output stream. Useful for determining\nif uploaded file is larger then expected.",
        "predict": " Get an extent aware Iterator based on the ReportQuery\n\n@param query\n@param cld\n@return OJBIterator.\n\n    "
    },
    {
        "ID": 825,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def notification_push(dev_type, to, message=None, **kwargs): \"\"\" Send data from your server to your users' devices. \"\"\" key = { 'ANDROID': settings.GCM_ANDROID_APIKEY, 'IOS': settings.GCM_IOS_APIKEY } if not key[dev_type]: raise ImproperlyConfigured( \"You haven't set the 'GCM_{}_APIKEY' setting yet.\".format(dev_type)) payload = { 'ANDROID': {'to': to, 'data': {'message': message}}, 'IOS': { 'to': to, 'notification': { 'body': message, }, } } payload[dev_type].update(**kwargs) payload = json.dumps(payload[dev_type]) headers = {'Authorization': 'key={}'.format(key[dev_type]), 'Content-Type': 'application/json'} response = requests.post(url='https://gcm-http.googleapis.com/gcm/send', data=payload, headers=headers ) if response.status_code == 200: response = response.json() if response['success']: return {'success': 'Message send successfully'} elif response['canonical_ids']: return {'canonical_id': response.get('results')[0].get('registration_id')} elif response['failure']: return {'error': response.get('results')[0].get('error')} elif 400 <= response.status_code < 500: return {'error': '%s Client Error: %s' % (response.status_code, response.reason)} elif 500 <= response.status_code < 600: return {'error': '%s Server Error: %s' % (response.status_code, response.reason)}\n\n    ### Response: Send data from your server to your users' devices..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public ActionRuntime parse(final Class<?> actionClass, final Method actionMethod, ActionDefinition actionDefinition) { final ActionAnnotationValues annotationValues = detectActionAnnotationValues(actionMethod); final ActionConfig actionConfig = resolveActionConfig(annotationValues); // interceptors ActionInterceptor[] actionInterceptors = parseActionInterceptors(actionClass, actionMethod, actionConfig); // filters ActionFilter[] actionFilters = parseActionFilters(actionClass, actionMethod, actionConfig); // build action definition when not provided if (actionDefinition == null) { actionDefinition = parseActionDefinition(actionClass, actionMethod); } detectAndRegisterAlias(annotationValues, actionDefinition); final boolean async = parseMethodAsyncFlag(actionMethod); final boolean auth = parseMethodAuthFlag(actionMethod); final Class<? extends ActionResult> actionResult = parseActionResult(actionMethod); final Class<? extends ActionResult> defaultActionResult = actionConfig.getActionResult(); return createActionRuntime( null, actionClass, actionMethod, actionResult, defaultActionResult, actionFilters, actionInterceptors, actionDefinition, async, auth); }\n\n    ### Response:",
        "ground_truth": "Parses java action method annotation and returns its action runtime.\n\n@param actionClass action class\n@param actionMethod action method\n@param actionDefinition optional action def, usually null so to be parsed",
        "predict": " Send data from your server to your users' devices..\n\n    "
    },
    {
        "ID": 826,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private function getScorePercent($each_score) { $temp_vote = $each_score->find('td', 1)->find('span small', 0)->plaintext; $percent = $each_score->find('td', 1)->find('span', 0)->plaintext; $percent = str_replace([$temp_vote, '%', \"\\xc2\\xa0\"], '', $percent); return trim($percent); }\n\n    ### Response: Get score percent.\n\n@param \\simplehtmldom_1_5\\simple_html_dom $each_score\n\n@return string.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected ActionConfig resolveActionConfig(final ActionAnnotationValues annotationValues) { final Class<? extends Annotation> annotationType; if (annotationValues == null) { annotationType = Action.class; } else { annotationType = annotationValues.annotationType(); } return actionConfigManager.lookup(annotationType); }\n\n    ### Response:",
        "ground_truth": "Resolves action config.",
        "predict": " Get score percent.\n\n@param \\simplehtmldom_1_5\\simple_html_dom $each_score\n\n@return string.\n\n    "
    },
    {
        "ID": 827,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (h *AccountHandler) CancelReset(ctx context.Context, sessionID int) error { mctx := libkb.NewMetaContext(ctx, h.G()) return libkb.CancelResetPipeline(mctx) }\n\n    ### Response: // CancelReset allows a user to cancel the reset process via an authenticated API call..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void detectAndRegisterAlias(final ActionAnnotationValues annotationValues, final ActionDefinition actionDefinition) { final String alias = parseMethodAlias(annotationValues); if (alias != null) { String aliasPath = StringUtil.cutToIndexOf(actionDefinition.actionPath(), StringPool.HASH); actionsManager.registerPathAlias(alias, aliasPath); } }\n\n    ### Response:",
        "ground_truth": "Detects if alias is defined in annotation and registers it if so.",
        "predict": " // CancelReset allows a user to cancel the reset process via an authenticated API call..\n\n    "
    },
    {
        "ID": 828,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def read_audio(buffer, max_samples = 2048) if file.nil? raise \"Can't read audio: use AudioFile#start_recording to open the file first\" end if data = file.read(max_samples * 2) buffer.write_string(data) data.length / 2 end end\n\n    ### Response: Read next block of audio samples from file; up to max samples into buffer.\n\n @param [FFI::Pointer] buffer 16bit buffer of at least max_samples in size\n @params [Fixnum] max_samples The maximum number of samples to read from the audio file\n @return [Fixnum] Samples actually read; nil if EOF.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected Class<? extends ActionInterceptor>[] readActionInterceptors(final AnnotatedElement actionClassOrMethod) { Class<? extends ActionInterceptor>[] result = null; InterceptedBy interceptedBy = actionClassOrMethod.getAnnotation(InterceptedBy.class); if (interceptedBy != null) { result = interceptedBy.value(); if (result.length == 0) { result = null; } } return result; }\n\n    ### Response:",
        "ground_truth": "Reads class or method annotation for action interceptors.",
        "predict": " Read next block of audio samples from file; up to max samples into buffer.\n\n @param [FFI::Pointer] buffer 16bit buffer of at least max_samples in size\n @params [Fixnum] max_samples The maximum number of samples to read from the audio file\n @return [Fixnum] Samples actually read; nil if EOF.\n\n    "
    },
    {
        "ID": 829,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def add_flooded_field(self, shapefile_path): \"\"\"Create the layer from the local shp adding the flooded field. .. versionadded:: 3.3 Use this method to add a calculated field to a shapefile. The shapefile should have a field called 'count' containing the number of flood reports for the field. The field values will be set to 0 if the count field is < 1, otherwise it will be set to 1. :param shapefile_path: Path to the shapefile that will have the flooded field added. :type shapefile_path: basestring :return: A vector layer with the flooded field added. :rtype: QgsVectorLayer \"\"\" layer = QgsVectorLayer( shapefile_path, self.tr('Jakarta Floods'), 'ogr') # Add a calculated field indicating if a poly is flooded or not # from qgis.PyQt.QtCore import QVariant layer.startEditing() # Add field with integer from 0 to 4 which represents the flood # class. Its the same as 'state' field except that is being treated # as a string. # This is used for cartography flood_class_field = QgsField('floodclass', QVariant.Int) layer.addAttribute(flood_class_field) layer.commitChanges() layer.startEditing() flood_class_idx = layer.fields().lookupField('floodclass') flood_class_expression = QgsExpression('to_int(state)') context = QgsExpressionContext() context.setFields(layer.fields()) flood_class_expression.prepare(context) # Add field with boolean flag to say if the area is flooded # This is used by the impact function flooded_field = QgsField('flooded', QVariant.Int) layer.dataProvider().addAttributes([flooded_field]) layer.commitChanges() layer.startEditing() flooded_idx = layer.fields().lookupField('flooded') flood_flag_expression = QgsExpression('state > 0') flood_flag_expression.prepare(context) for feature in layer.getFeatures(): context.setFeature(feature) feature[flood_class_idx] = flood_class_expression.evaluate(context) feature[flooded_idx] = flood_flag_expression.evaluate(context) layer.updateFeature(feature) layer.commitChanges() return layer\n\n    ### Response: Create the layer from the local shp adding the flooded field.\n\n        .. versionadded:: 3.3\n\n        Use this method to add a calculated field to a shapefile. The shapefile\n        should have a field called 'count' containing the number of flood\n        reports for the field. The field values will be set to 0 if the count\n        field is < 1, otherwise it will be set to 1.\n\n        :param shapefile_path: Path to the shapefile that will have the flooded\n            field added.\n        :type shapefile_path: basestring\n\n        :return: A vector layer with the flooded field added.\n        :rtype: QgsVectorLayer.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected Class<? extends ActionFilter>[] readActionFilters(final AnnotatedElement actionClassOrMethod) { Class<? extends ActionFilter>[] result = null; FilteredBy filteredBy = actionClassOrMethod.getAnnotation(FilteredBy.class); if (filteredBy != null) { result = filteredBy.value(); if (result.length == 0) { result = null; } } return result; }\n\n    ### Response:",
        "ground_truth": "Reads class or method annotation for action filters.",
        "predict": " Create the layer from the local shp adding the flooded field.\n\n        .. versionadded:: 3.3\n\n        Use this method to add a calculated field to a shapefile. The shapefile\n        should have a field called 'count' containing the number of flood\n        reports for the field. The field values will be set to 0 if the count\n        field is < 1, otherwise it will be set to 1.\n\n        :param shapefile_path: Path to the shapefile that will have the flooded\n            field added.\n        :type shapefile_path: basestring\n\n        :return: A vector layer with the flooded field added.\n        :rtype: QgsVectorLayer.\n\n    "
    },
    {
        "ID": 830,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private function randomizeSuite($suite, $seed, $order = 0, $fix_depends = true) { $reflected = new \\ReflectionObject($suite); $property = $reflected->getProperty('tests'); $property->setAccessible(true); $property->setValue($suite, $this->randomizeTestsCases($suite->tests(), $seed, $order, $fix_depends)); return $suite; }\n\n    ### Response: Randomize the test cases inside a TestSuite, with the given seed.\n\n@param  \\PHPUnit\\Framework\\Test     $suite Test suite to randomize.\n@param  integer                     $seed  Seed to be used for the random funtion.\n@param  integer                     $order Arbitrary value to \"salt\" the seed.\n@param  bool                        $fix_depends [=false]\n@return \\PHPUnit\\Framework\\Test.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected String[] readPackageActionPath(final Class actionClass) { Package actionPackage = actionClass.getPackage(); final String actionPackageName = actionPackage.getName(); // 1 - read annotations first String packageActionPathFromAnnotation; mainloop: while (true) { MadvocAction madvocActionAnnotation = actionPackage.getAnnotation(MadvocAction.class); packageActionPathFromAnnotation = madvocActionAnnotation != null ? madvocActionAnnotation.value().trim() : null; if (StringUtil.isEmpty(packageActionPathFromAnnotation)) { packageActionPathFromAnnotation = null; } if (packageActionPathFromAnnotation == null) { // next package String newPackage = actionPackage.getName(); actionPackage = null; while (actionPackage == null) { final int ndx = newPackage.lastIndexOf('.'); if (ndx == -1) { // end of hierarchy, nothing found break mainloop; } newPackage = newPackage.substring(0, ndx); actionPackage = Packages.of(actionClass.getClassLoader(), newPackage); } } else { // annotation found, register root rootPackages.addRootPackage(actionPackage.getName(), packageActionPathFromAnnotation); break; } } // 2 - read root package String packagePath = rootPackages.findPackagePathForActionPackage(actionPackageName); if (packagePath == null) { return ArraysUtil.array(null, null); } return ArraysUtil.array( StringUtil.stripChar(packagePath, '/'), StringUtil.surround(packagePath, StringPool.SLASH) ); }\n\n    ### Response:",
        "ground_truth": "Reads action path for package.\nIf annotation is not set on package-level, class package will be used for\npackage action path part.",
        "predict": " Randomize the test cases inside a TestSuite, with the given seed.\n\n@param  \\PHPUnit\\Framework\\Test     $suite Test suite to randomize.\n@param  integer                     $seed  Seed to be used for the random funtion.\n@param  integer                     $order Arbitrary value to \"salt\" the seed.\n@param  bool                        $fix_depends [=false]\n@return \\PHPUnit\\Framework\\Test.\n\n    "
    },
    {
        "ID": 831,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func SamplePercentile(values int64Slice, p float64) float64 { return SamplePercentiles(values, []float64{p})[0] }\n\n    ### Response: // SamplePercentiles returns an arbitrary percentile of the slice of int64..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected String[] readMethodActionPath(final String methodName, final ActionAnnotationValues annotationValues, final ActionConfig actionConfig) { // read annotation String methodActionPath = annotationValues != null ? annotationValues.value() : null; if (methodActionPath == null) { methodActionPath = methodName; } else { if (methodActionPath.equals(Action.NONE)) { return ArraysUtil.array(null, null); } } // check for defaults for (String path : actionConfig.getActionMethodNames()) { if (methodActionPath.equals(path)) { methodActionPath = null; break; } } return ArraysUtil.array(methodName, methodActionPath); }\n\n    ### Response:",
        "ground_truth": "Reads action path from the action method.",
        "predict": " // SamplePercentiles returns an arbitrary percentile of the slice of int64..\n\n    "
    },
    {
        "ID": 832,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def get_channelstate_settling( chain_state: ChainState, payment_network_id: PaymentNetworkID, token_address: TokenAddress, ) -> List[NettingChannelState]: \"\"\"Return the state of settling channels in a token network.\"\"\" return get_channelstate_filter( chain_state, payment_network_id, token_address, lambda channel_state: channel.get_status(channel_state) == CHANNEL_STATE_SETTLING, )\n\n    ### Response: Return the state of settling channels in a token network..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected String parseMethodAlias(final ActionAnnotationValues annotationValues) { String alias = null; if (annotationValues != null) { alias = annotationValues.alias(); } return alias; }\n\n    ### Response:",
        "ground_truth": "Reads method's alias value.",
        "predict": " Return the state of settling channels in a token network..\n\n    "
    },
    {
        "ID": 833,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function (entity, options) { var type, result, self = this, auth = self.cleanAuth(entity, options); if (!auth) { return auth; } result = { type: (type = auth.type) }; if (type !== 'noauth') { result[type] = _.map(auth[type], function (param) { return { key: param.key, value: param.value, type: (param.type === 'text' ? 'string' : param.type) || self.typeMap[typeof param.value] || 'any' }; }); } return result; }\n\n    ### Response: Sanitizes a collection SDK compliant auth list.\n\n@param {Object} entity - The wrapper entity for the auth manifest.\n@param {?Object} options - The set of options for the current auth cleansing operation.\n@param {?Boolean} [options.excludeNoauth=false] - When set to true, noauth is set to null.\n@returns {Object[]} - An array of raw collection SDK compliant auth parameters..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public ActionRuntime createActionRuntime( final ActionHandler actionHandler, final Class actionClass, final Method actionClassMethod, final Class<? extends ActionResult> actionResult, final Class<? extends ActionResult> defaultActionResult, final ActionFilter[] filters, final ActionInterceptor[] interceptors, final ActionDefinition actionDefinition, final boolean async, final boolean auth) { if (actionHandler != null) { return new ActionRuntime( actionHandler, actionClass, actionClassMethod, filters, interceptors, actionDefinition, NoneActionResult.class, NoneActionResult.class, async, auth, null, null); } final ScopeData scopeData = scopeDataInspector.inspectClassScopes(actionClass); // find ins and outs final Class[] paramTypes = actionClassMethod.getParameterTypes(); final MethodParam[] params = new MethodParam[paramTypes.length]; final Annotation[][] paramAnns = actionClassMethod.getParameterAnnotations(); String[] methodParamNames = null; // for all elements: action and method arguments... for (int ndx = 0; ndx < paramTypes.length; ndx++) { Class paramType = paramTypes[ndx]; // lazy init to postpone bytecode usage, when method has no arguments if (methodParamNames == null) { methodParamNames = actionMethodParamNameResolver.resolveParamNames(actionClassMethod); } final String paramName = methodParamNames[ndx]; final Annotation[] parameterAnnotations = paramAnns[ndx]; final ScopeData paramsScopeData = scopeDataInspector.inspectMethodParameterScopes(paramName, paramType, parameterAnnotations); MapperFunction mapperFunction = null; for (final Annotation annotation : parameterAnnotations) { if (annotation instanceof Mapper) { mapperFunction = MapperFunctionInstances.get().lookup(((Mapper) annotation).value()); break; } } params[ndx] = new MethodParam( paramTypes[ndx], paramName, scopeDataInspector.detectAnnotationType(parameterAnnotations), paramsScopeData, mapperFunction ); } return new ActionRuntime( null, actionClass, actionClassMethod, filters, interceptors, actionDefinition, actionResult, defaultActionResult, async, auth, scopeData, params); }\n\n    ### Response:",
        "ground_truth": "Creates new instance of action runtime configuration.\nInitialize caches.",
        "predict": " Sanitizes a collection SDK compliant auth list.\n\n@param {Object} entity - The wrapper entity for the auth manifest.\n@param {?Object} options - The set of options for the current auth cleansing operation.\n@param {?Boolean} [options.excludeNoauth=false] - When set to true, noauth is set to null.\n@returns {Object[]} - An array of raw collection SDK compliant auth parameters..\n\n    "
    },
    {
        "ID": 834,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function listAll() { $headers = $this->headers; if ($this->canSort()) { uksort($headers, [$this, 'sortHeaders']); } return array_keys($headers); }\n\n    ### Response: Return the name of all Headers.\n\n@return array.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override protected void preResponseCommit() { long lastModified = lastModifiedData.getLastModified(); long ifModifiedSince = request.getDateHeader(\"If-Modified-Since\"); if (lastModified > -1 && !response.containsHeader(\"Last-Modified\")) { if (ifModifiedSince < (lastModified / 1000 * 1000)) { response.setDateHeader(\"Last-Modified\", lastModified); } else { response.reset(); response.setStatus(HttpServletResponse.SC_NOT_MODIFIED); } } }\n\n    ### Response:",
        "ground_truth": "todo move to BufferResponseWrapper ?",
        "predict": " Return the name of all Headers.\n\n@return array.\n\n    "
    },
    {
        "ID": 835,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function driver_name() { // Make sure the database is connected $this->_connection or $this->connect(); // Getting driver name return $this->_connection->getAttribute(\\PDO::ATTR_DRIVER_NAME); }\n\n    ### Response: Get the current PDO Driver name\n\n@return string.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static <T> T applyAdvice(final Class<T> targetClass) { Class adviceClass = cache.get(targetClass); if (adviceClass == null) { // advice not yet created adviceClass = PROXY_PROXETTA.proxy().setTarget(targetClass).define(); cache.put(targetClass, adviceClass); } // create new advice instance and injects target instance to it try { Object advice = ClassUtil.newInstance(adviceClass); Field field = adviceClass.getField(\"$___target$0\"); field.set(advice, targetClass); return (T) advice; } catch (Exception ex) { throw new ProxettaException(ex); } }\n\n    ### Response:",
        "ground_truth": "Applies advice on given target class and returns proxy instance.",
        "predict": " Get the current PDO Driver name\n\n@return string.\n\n    "
    },
    {
        "ID": 836,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void add(E element) { if (element == null) throw new NullPointerException(); if (root == null) { root = new MutableNode<>(element); } else { MutableNode<E> node = root; while (!node.getElement().equals(element)) { int distance = distance(node.getElement(), element); MutableNode<E> parent = node; node = parent.childrenByDistance.get(distance); if (node == null) { node = new MutableNode<>(element); parent.childrenByDistance.put(distance, node); break; } } } }\n\n    ### Response: Adds the given element to this tree, if it's not already present.\n\n@param element element.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void injectTargetIntoProxy(final Object proxy, final Object target) { Class proxyClass = proxy.getClass(); try { Field field = proxyClass.getField(\"$___target$0\"); field.set(proxy, target); } catch (Exception ex) { throw new ProxettaException(ex); } }\n\n    ### Response:",
        "ground_truth": "Injects target into proxy.",
        "predict": " Adds the given element to this tree, if it's not already present.\n\n@param element element.\n\n    "
    },
    {
        "ID": 837,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def list_enabled_features_accounts(self, account_id): \"\"\" List enabled features. List all features that are enabled on a given Account, Course, or User. Only the feature names are returned. \"\"\" path = {} data = {} params = {} # REQUIRED - PATH - account_id \"\"\"ID\"\"\" path[\"account_id\"] = account_id self.logger.debug(\"GET /api/v1/accounts/{account_id}/features/enabled with query params: {params} and form data: {data}\".format(params=params, data=data, **path)) return self.generic_request(\"GET\", \"/api/v1/accounts/{account_id}/features/enabled\".format(**path), data=data, params=params, no_data=True)\n\n    ### Response: List enabled features.\r\n\r\n        List all features that are enabled on a given Account, Course, or User.\r\n        Only the feature names are returned..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public AnnotationVisitor visitAnnotation(final String descriptor, final boolean visible) { if (fv != null) { return fv.visitAnnotation(descriptor, visible); } return null; }\n\n    ### Response:",
        "ground_truth": "Visits an annotation of the field.\n\n@param descriptor the class descriptor of the annotation class.\n@param visible {@literal true} if the annotation is visible at runtime.\n@return a visitor to visit the annotation values, or {@literal null} if this visitor is not\ninterested in visiting this annotation.",
        "predict": " List enabled features.\r\n\r\n        List all features that are enabled on a given Account, Course, or User.\r\n        Only the feature names are returned..\n\n    "
    },
    {
        "ID": 838,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def set_state(key, value, namespace=None, table_name=None, environment=None, layer=None, stage=None, shard_id=None, consistent=True, serializer=json.dumps, wait_exponential_multiplier=500, wait_exponential_max=5000, stop_max_delay=10000, ttl=None): \"\"\"Set Lambda state value.\"\"\" if table_name is None: table_name = _state_table_name(environment=environment, layer=layer, stage=stage) if not table_name: msg = (\"Can't produce state table name: unable to set state \" \"item '{}'\".format(key)) logger.error(msg) raise StateTableError(msg) return dynamodb = boto3.resource(\"dynamodb\") table = dynamodb.Table(table_name) logger.info(\"Putting {} -> {} in DynamoDB table {}\".format(key, value, table_name)) if serializer: try: value = serializer(value) except TypeError: logger.error( \"Value for state key '{}' is not json-serializable\".format( key)) raise if namespace: key = \"{}:{}\".format(namespace, key) if shard_id: key = \"{}:{}\".format(shard_id, key) item = {\"id\": key, \"value\": value} if ttl: item[\"ttl\"] = {\"N\": str(int(time.time() + ttl))} @retry(retry_on_exception=_is_critical_exception, wait_exponential_multiplier=500, wait_exponential_max=5000, stop_max_delay=10000) def put_item(): try: return table.put_item(Item=item) except Exception as err: if _is_dynamodb_critical_exception(err): raise CriticalError(err) else: raise resp = put_item() logger.info(\"Response from DynamoDB: '{}'\".format(resp)) return resp\n\n    ### Response: Set Lambda state value..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String resolveRealName(final String jsonName) { if (jsonNames == null) { return jsonName; } int jsonIndex = ArraysUtil.indexOf(jsonNames, jsonName); if (jsonIndex == -1) { return jsonName; } return realNames[jsonIndex]; }\n\n    ### Response:",
        "ground_truth": "Resolves real name from JSON name.",
        "predict": " Set Lambda state value..\n\n    "
    },
    {
        "ID": 839,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function getProperty($id, $name, $directAccess = false) { if ($directAccess) { if (!isset($this->items[$id][$name])) { return null; } return $this->items[$id][$name]; } $id = $this->validateAndResolveId($id); if (!isset($this->items[$id][$name]) && !array_key_exists($name, $this->items[$id])) { throw new Exception\\LogicException( sprintf('The \"%s\" item does not have \"%s\" property.', $id, $name) ); } return $this->items[$id][$name]; }\n\n    ### Response: Gets a value of an additional property for the layout item\n\n@param string $id           The id or alias of the layout item\n@param string $name         The property name\n@param bool   $directAccess Indicated whether the item id and property name validation should be skipped.\nThis flag can be used to increase performance of get operation,\nbut use it carefully and only when you absolutely sure that:\n* the item with the specified id exists\n* the value passed as the item id is not an alias\n* the property with the specified name exists\n\n@return mixed\n\n@throws Exception\\InvalidArgumentException if the id is empty\n@throws Exception\\ItemNotFoundException if the layout item does not exist\n@throws Exception\\LogicException if the layout item does not have the requested property.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String resolveJsonName(final String realName) { if (realNames == null) { return realName; } int realIndex = ArraysUtil.indexOf(realNames, realName); if (realIndex == -1) { return realName; } return jsonNames[realIndex]; }\n\n    ### Response:",
        "ground_truth": "Resolves JSON name from real name.",
        "predict": " Gets a value of an additional property for the layout item\n\n@param string $id           The id or alias of the layout item\n@param string $name         The property name\n@param bool   $directAccess Indicated whether the item id and property name validation should be skipped.\nThis flag can be used to increase performance of get operation,\nbut use it carefully and only when you absolutely sure that:\n* the item with the specified id exists\n* the value passed as the item id is not an alias\n* the property with the specified name exists\n\n@return mixed\n\n@throws Exception\\InvalidArgumentException if the id is empty\n@throws Exception\\ItemNotFoundException if the layout item does not exist\n@throws Exception\\LogicException if the layout item does not have the requested property.\n\n    "
    },
    {
        "ID": 840,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static Object generateExampleForRefModel(boolean generateMissingExamples, String simpleRef, Map<String, Model> definitions, DocumentResolver definitionDocumentResolver, MarkupDocBuilder markupDocBuilder, Map<String, Integer> refStack) { Model model = definitions.get(simpleRef); Object example = null; if (model != null) { example = model.getExample(); if (example == null && generateMissingExamples) { if (!refStack.containsKey(simpleRef)) { refStack.put(simpleRef, 1); } else { refStack.put(simpleRef, refStack.get(simpleRef) + 1); } if (refStack.get(simpleRef) <= MAX_RECURSION_TO_DISPLAY) { if (model instanceof ComposedModel) { //FIXME: getProperties() may throw NullPointerException example = exampleMapForProperties(((ObjectType) ModelUtils.getType(model, definitions, definitionDocumentResolver)).getProperties(), definitions, definitionDocumentResolver, markupDocBuilder, new HashMap<>()); } else { example = exampleMapForProperties(model.getProperties(), definitions, definitionDocumentResolver, markupDocBuilder, refStack); } } else { return \"...\"; } refStack.put(simpleRef, refStack.get(simpleRef) - 1); } } return example; }\n\n    ### Response: Generates an example object from a simple reference\n\n@param generateMissingExamples specifies the missing examples should be generated\n@param simpleRef               the simple reference string\n@param definitions             the map of definitions\n@param markupDocBuilder        the markup builder\n@param refStack                map to detect cyclic references\n@return returns an Object or Map of examples.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public TypeData lookupTypeData(final Class type) { TypeData typeData = typeDataMap.get(type); if (typeData == null) { if (serializationSubclassAware) { typeData = findSubclassTypeData(type); } if (typeData == null) { typeData = scanClassForAnnotations(type); typeDataMap.put(type, typeData); } } return typeData; }\n\n    ### Response:",
        "ground_truth": "Returns all includes for given type. Returns an empty array\nwhen no includes are defined.",
        "predict": " Generates an example object from a simple reference\n\n@param generateMissingExamples specifies the missing examples should be generated\n@param simpleRef               the simple reference string\n@param definitions             the map of definitions\n@param markupDocBuilder        the markup builder\n@param refStack                map to detect cyclic references\n@return returns an Object or Map of examples.\n\n    "
    },
    {
        "ID": 841,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def check(ctx, meta_model_file, model_file, ignore_case): \"\"\" Check validity of meta-model and optionally model. \"\"\" debug = ctx.obj['debug'] check_model(meta_model_file, model_file, debug, ignore_case)\n\n    ### Response: Check validity of meta-model and optionally model..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected TypeData _lookupTypeData(final Class type) { TypeData typeData = typeDataMap.get(type); if (typeData == null) { typeData = scanClassForAnnotations(type); typeDataMap.put(type, typeData); } return typeData; }\n\n    ### Response:",
        "ground_truth": "Lookups type data and creates one if missing.",
        "predict": " Check validity of meta-model and optionally model..\n\n    "
    },
    {
        "ID": 842,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def map_entity(self, entity: dal.AssetClass): \"\"\" maps data from entity -> object \"\"\" obj = model.AssetClass() obj.id = entity.id obj.parent_id = entity.parentid obj.name = entity.name obj.allocation = entity.allocation obj.sort_order = entity.sortorder #entity.stock_links #entity.diff_adjustment if entity.parentid == None: obj.depth = 0 return obj\n\n    ### Response: maps data from entity -> object.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected TypeData findSubclassTypeData(final Class type) { final Class<? extends Annotation> defaultAnnotation = jsonAnnotation; if (type.getAnnotation(defaultAnnotation) != null) { // current type has annotation, don't find anything, let type data be created return null; } ClassDescriptor cd = ClassIntrospector.get().lookup(type); // lookup superclasses Class[] superClasses = cd.getAllSuperclasses(); for (Class superClass : superClasses) { if (superClass.getAnnotation(defaultAnnotation) != null) { // annotated subclass founded! return _lookupTypeData(superClass); } } Class[] interfaces = cd.getAllInterfaces(); for (Class interfaze : interfaces) { if (interfaze.getAnnotation(defaultAnnotation) != null) { // annotated subclass founded! return _lookupTypeData(interfaze); } } return null; }\n\n    ### Response:",
        "ground_truth": "Finds type data of first annotated superclass or interface.",
        "predict": " maps data from entity -> object.\n\n    "
    },
    {
        "ID": 843,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def invalidate(cls, inst, name): \"\"\"Invalidate a lazy attribute. This obviously violates the lazy contract. A subclass of lazy may however have a contract where invalidation is appropriate. \"\"\" inst_cls = inst.__class__ if not hasattr(inst, '__dict__'): raise AttributeError(\"'%s' object has no attribute '__dict__'\" % (inst_cls.__name__,)) if name.startswith('__') and not name.endswith('__'): name = '_%s%s' % (inst_cls.__name__, name) if not isinstance(getattr(inst_cls, name), cls): raise AttributeError(\"'%s.%s' is not a %s attribute\" % (inst_cls.__name__, name, cls.__name__)) if name in inst.__dict__: del inst.__dict__[name]\n\n    ### Response: Invalidate a lazy attribute.\n\n        This obviously violates the lazy contract. A subclass of lazy\n        may however have a contract where invalidation is appropriate..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String resolveJsonName(final Class type, final String name) { TypeData typeData = lookupTypeData(type); return typeData.resolveJsonName(name); }\n\n    ### Response:",
        "ground_truth": "Returns different name of a property if set by annotation.",
        "predict": " Invalidate a lazy attribute.\n\n        This obviously violates the lazy contract. A subclass of lazy\n        may however have a contract where invalidation is appropriate..\n\n    "
    },
    {
        "ID": 844,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static BigInteger computeMonths(Duration d) { return d.getYears().multiply(BigInteger.valueOf(12)).add(d.getMonths()); }\n\n    ### Response: Returns the total number of months specified by the year and month fields of the duration.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String resolveRealName(final Class type, final String jsonName) { TypeData typeData = lookupTypeData(type); return typeData.resolveRealName(jsonName); }\n\n    ### Response:",
        "ground_truth": "Returns real property name for given JSON property.",
        "predict": " Returns the total number of months specified by the year and month fields of the duration.\n\n    "
    },
    {
        "ID": 845,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _unpack_lookupswitch(bc, offset): \"\"\" function for unpacking the lookupswitch op arguments \"\"\" jump = (offset % 4) if jump: offset += (4 - jump) (default, npairs), offset = _unpack(_struct_ii, bc, offset) switches = list() for _index in range(npairs): pair, offset = _unpack(_struct_ii, bc, offset) switches.append(pair) return (default, switches), offset\n\n    ### Response: function for unpacking the lookupswitch op arguments.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public byte[] getFileContent() throws IOException { if (data != null) { return data; } if (tempFile != null) { return FileUtil.readBytes(tempFile); } return null; }\n\n    ### Response:",
        "ground_truth": "Returns the content of file upload item.",
        "predict": " function for unpacking the lookupswitch op arguments.\n\n    "
    },
    {
        "ID": 846,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def send(*text) text[0][0,0] = '/' if text[0][0..0] == '/' line = text.join(\" \") Weechat.exec(line) line end\n\n    ### Response: Send a text to the buffer. If the buffer represents a channel, the text\n will be send as a message to the channel.\n\n Note: this method will automatically escape a leading slash, if present.\n\n @param [Array] *text All parts of the text to send\n @return [String] The whole string as sent to the buffer.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void copyBootstrapMethods(final ClassReader classReader, final char[] charBuffer) { // Find attributOffset of the 'bootstrap_methods' array. byte[] inputBytes = classReader.b; int currentAttributeOffset = classReader.getFirstAttributeOffset(); for (int i = classReader.readUnsignedShort(currentAttributeOffset - 2); i > 0; --i) { String attributeName = classReader.readUTF8(currentAttributeOffset, charBuffer); if (Constants.BOOTSTRAP_METHODS.equals(attributeName)) { bootstrapMethodCount = classReader.readUnsignedShort(currentAttributeOffset + 6); break; } currentAttributeOffset += 6 + classReader.readInt(currentAttributeOffset + 2); } if (bootstrapMethodCount > 0) { // Compute the offset and the length of the BootstrapMethods 'bootstrap_methods' array. int bootstrapMethodsOffset = currentAttributeOffset + 8; int bootstrapMethodsLength = classReader.readInt(currentAttributeOffset + 2) - 2; bootstrapMethods = new ByteVector(bootstrapMethodsLength); bootstrapMethods.putByteArray(inputBytes, bootstrapMethodsOffset, bootstrapMethodsLength); // Add each bootstrap method in the symbol table entries. int currentOffset = bootstrapMethodsOffset; for (int i = 0; i < bootstrapMethodCount; i++) { int offset = currentOffset - bootstrapMethodsOffset; int bootstrapMethodRef = classReader.readUnsignedShort(currentOffset); currentOffset += 2; int numBootstrapArguments = classReader.readUnsignedShort(currentOffset); currentOffset += 2; int hashCode = classReader.readConst(bootstrapMethodRef, charBuffer).hashCode(); while (numBootstrapArguments-- > 0) { int bootstrapArgument = classReader.readUnsignedShort(currentOffset); currentOffset += 2; hashCode ^= classReader.readConst(bootstrapArgument, charBuffer).hashCode(); } add(new Entry(i, Symbol.BOOTSTRAP_METHOD_TAG, offset, hashCode & 0x7FFFFFFF)); } } }\n\n    ### Response:",
        "ground_truth": "Read the BootstrapMethods 'bootstrap_methods' array binary content and add them as entries of\nthe SymbolTable.\n\n@param classReader the ClassReader whose bootstrap methods must be copied to initialize the\nSymbolTable.\n@param charBuffer a buffer used to read strings in the constant pool.",
        "predict": " Send a text to the buffer. If the buffer represents a channel, the text\n will be send as a message to the channel.\n\n Note: this method will automatically escape a leading slash, if present.\n\n @param [Array] *text All parts of the text to send\n @return [String] The whole string as sent to the buffer.\n\n    "
    },
    {
        "ID": 847,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public synchronized void clear() { File[] files = mRootDirectory.listFiles(); if (files != null) { for (File file : files) { file.delete(); } } mEntries.clear(); mTotalSize = 0; //todo add queue markers //JusLog.d(\"Cache cleared.\"); }\n\n    ### Response: Clears the cache. Deletes all cached files from disk..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    int setMajorVersionAndClassName(final int majorVersion, final String className) { this.majorVersion = majorVersion; this.className = className; return addConstantClass(className).index; }\n\n    ### Response:",
        "ground_truth": "Sets the major version and the name of the class to which this symbol table belongs. Also adds\nthe class name to the constant pool.\n\n@param majorVersion a major ClassFile version number.\n@param className an internal class name.\n@return the constant pool index of a new or already existing Symbol with the given class name.",
        "predict": " Clears the cache. Deletes all cached files from disk..\n\n    "
    },
    {
        "ID": 848,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function updateImageAction($imageId, $parentType) { if (null !== $response = $this->checkAuth($this->getAdminResources()->getResource($parentType, static::MODULE_RIGHT), array(), AccessManager::UPDATE)) { return $response; } $imageInstance = $this->updateFileAction($imageId, $parentType, 'image', TheliaEvents::IMAGE_UPDATE); if ($imageInstance instanceof \\Symfony\\Component\\HttpFoundation\\Response) { return $imageInstance; } else { return $this->render('image-edit', array( 'imageId' => $imageId, 'imageType' => $parentType, 'redirectUrl' => $imageInstance->getRedirectionUrl(), 'formId' => $imageInstance->getUpdateFormId() )); } }\n\n    ### Response: Manage how an image is updated\n\n@param int    $imageId    Parent id owning images being saved\n@param string $parentType Parent Type owning images being saved\n\n@return Response.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    void putConstantPool(final ByteVector output) { output.putShort(constantPoolCount).putByteArray(constantPool.data, 0, constantPool.length); }\n\n    ### Response:",
        "ground_truth": "Puts this symbol table's constant_pool array in the given ByteVector, preceded by the\nconstant_pool_count value.\n\n@param output where the JVMS ClassFile's constant_pool array must be put.",
        "predict": " Manage how an image is updated\n\n@param int    $imageId    Parent id owning images being saved\n@param string $parentType Parent Type owning images being saved\n\n@return Response.\n\n    "
    },
    {
        "ID": 849,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def set_attribute(attribute, attribute_value, instance_name=None, instance_id=None, region=None, key=None, keyid=None, profile=None, filters=None): ''' Set an EC2 instance attribute. Returns whether the operation succeeded or not. CLI Example: .. code-block:: bash salt myminion boto_ec2.set_attribute sourceDestCheck False instance_name=my_instance Available attributes: * instanceType * kernel * ramdisk * userData * disableApiTermination * instanceInitiatedShutdownBehavior * rootDeviceName * blockDeviceMapping * productCodes * sourceDestCheck * groupSet * ebsOptimized * sriovNetSupport ''' conn = _get_conn(region=region, key=key, keyid=keyid, profile=profile) attribute_list = ['instanceType', 'kernel', 'ramdisk', 'userData', 'disableApiTermination', 'instanceInitiatedShutdownBehavior', 'rootDeviceName', 'blockDeviceMapping', 'productCodes', 'sourceDestCheck', 'groupSet', 'ebsOptimized', 'sriovNetSupport'] if not any((instance_name, instance_id)): raise SaltInvocationError('At least one of the following must be specified: instance_name or instance_id.') if instance_name and instance_id: raise SaltInvocationError('Both instance_name and instance_id can not be specified in the same command.') if attribute not in attribute_list: raise SaltInvocationError('Attribute must be one of: {0}.'.format(attribute_list)) try: if instance_name: instances = find_instances(name=instance_name, region=region, key=key, keyid=keyid, profile=profile, filters=filters) if len(instances) != 1: raise CommandExecutionError('Found more than one EC2 instance matching the criteria.') instance_id = instances[0] attribute = conn.modify_instance_attribute(instance_id, attribute, attribute_value) if not attribute: return False return attribute except boto.exception.BotoServerError as exc: log.error(exc) return False\n\n    ### Response: Set an EC2 instance attribute.\n    Returns whether the operation succeeded or not.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt myminion boto_ec2.set_attribute sourceDestCheck False instance_name=my_instance\n\n    Available attributes:\n        * instanceType\n        * kernel\n        * ramdisk\n        * userData\n        * disableApiTermination\n        * instanceInitiatedShutdownBehavior\n        * rootDeviceName\n        * blockDeviceMapping\n        * productCodes\n        * sourceDestCheck\n        * groupSet\n        * ebsOptimized\n        * sriovNetSupport.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    void putBootstrapMethods(final ByteVector output) { if (bootstrapMethods != null) { output .putShort(addConstantUtf8(Constants.BOOTSTRAP_METHODS)) .putInt(bootstrapMethods.length + 2) .putShort(bootstrapMethodCount) .putByteArray(bootstrapMethods.data, 0, bootstrapMethods.length); } }\n\n    ### Response:",
        "ground_truth": "Puts this symbol table's BootstrapMethods attribute in the given ByteVector. This includes the\n6 attribute header bytes and the num_bootstrap_methods value.\n\n@param output where the JVMS BootstrapMethods attribute must be put.",
        "predict": " Set an EC2 instance attribute.\n    Returns whether the operation succeeded or not.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt myminion boto_ec2.set_attribute sourceDestCheck False instance_name=my_instance\n\n    Available attributes:\n        * instanceType\n        * kernel\n        * ramdisk\n        * userData\n        * disableApiTermination\n        * instanceInitiatedShutdownBehavior\n        * rootDeviceName\n        * blockDeviceMapping\n        * productCodes\n        * sourceDestCheck\n        * groupSet\n        * ebsOptimized\n        * sriovNetSupport.\n\n    "
    },
    {
        "ID": 850,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function register() { /** @var User $user */ $user = $this->Users->newEntity($this->request->data); if ($this->request->is('post') && !empty($this->request->data)) { if ($this->Users->save($user)) { $this->loadModel('Wasabi/Core.Tokens'); $this->Tokens->invalidateExistingTokens($user->id, TokensTable::TYPE_EMAIL_VERIFICATION); $token = $this->Tokens->generateToken($user, TokensTable::TYPE_EMAIL_VERIFICATION); $this->getMailer('Wasabi/Core.User')->send('verifyEmail', [$user, $token]); $this->Flash->success(__d('wasabi_core', 'Registration successful! We have sent you an email to verify your email address. Please follow the instructions in this email.')); $this->redirect(['action' => 'login']); return; } $this->Flash->error($this->formErrorMessage); } $this->set(['user' => $user]); $this->viewBuilder()->layout('Wasabi/Core.support'); }\n\n    ### Response: Register action\nGET | POST\n\n@return void.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    Symbol addConstantFieldref(final String owner, final String name, final String descriptor) { return addConstantMemberReference(Symbol.CONSTANT_FIELDREF_TAG, owner, name, descriptor); }\n\n    ### Response:",
        "ground_truth": "Adds a CONSTANT_Fieldref_info to the constant pool of this symbol table. Does nothing if the\nconstant pool already contains a similar item.\n\n@param owner the internal name of a class.\n@param name a field name.\n@param descriptor a field descriptor.\n@return a new or already existing Symbol with the given value.",
        "predict": " Register action\nGET | POST\n\n@return void.\n\n    "
    },
    {
        "ID": 851,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (o *GetPolicyResolveParams) WithTraceSelector(traceSelector *models.TraceSelector) *GetPolicyResolveParams { o.SetTraceSelector(traceSelector) return o }\n\n    ### Response: // WithTraceSelector adds the traceSelector to the get policy resolve params.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    Symbol addConstantMethodref( final String owner, final String name, final String descriptor, final boolean isInterface) { int tag = isInterface ? Symbol.CONSTANT_INTERFACE_METHODREF_TAG : Symbol.CONSTANT_METHODREF_TAG; return addConstantMemberReference(tag, owner, name, descriptor); }\n\n    ### Response:",
        "ground_truth": "Adds a CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this\nsymbol table. Does nothing if the constant pool already contains a similar item.\n\n@param owner the internal name of a class.\n@param name a method name.\n@param descriptor a method descriptor.\n@param isInterface whether owner is an interface or not.\n@return a new or already existing Symbol with the given value.",
        "predict": " // WithTraceSelector adds the traceSelector to the get policy resolve params.\n\n    "
    },
    {
        "ID": 852,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function dispatch(Queueable $job) { if (isset($job->queue, $job->delay)) { return $this->connection->laterOn($job->queue, $job->delay, $job); } if (isset($job->queue)) { return $this->connection->pushOn($job->queue, $job); } if (isset($job->delay)) { return $this->connection->later($job->delay, $job); } return $this->connection->push($job); }\n\n    ### Response: Dispatch a job behind a queue.\n\n@param  \\Globalis\\PuppetSkilled\\Queue\\Queueable  $job\n@return mixed.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private Entry addConstantMemberReference( final int tag, final String owner, final String name, final String descriptor) { int hashCode = hash(tag, owner, name, descriptor); Entry entry = get(hashCode); while (entry != null) { if (entry.tag == tag && entry.hashCode == hashCode && entry.owner.equals(owner) && entry.name.equals(name) && entry.value.equals(descriptor)) { return entry; } entry = entry.next; } constantPool.put122( tag, addConstantClass(owner).index, addConstantNameAndType(name, descriptor)); return put(new Entry(constantPoolCount++, tag, owner, name, descriptor, 0, hashCode)); }\n\n    ### Response:",
        "ground_truth": "Adds a CONSTANT_Fieldref_info, CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to\nthe constant pool of this symbol table. Does nothing if the constant pool already contains a\nsimilar item.\n\n@param tag one of {@link Symbol#CONSTANT_FIELDREF_TAG}, {@link Symbol#CONSTANT_METHODREF_TAG}\nor {@link Symbol#CONSTANT_INTERFACE_METHODREF_TAG}.\n@param owner the internal name of a class.\n@param name a field or method name.\n@param descriptor a field or method descriptor.\n@return a new or already existing Symbol with the given value.",
        "predict": " Dispatch a job behind a queue.\n\n@param  \\Globalis\\PuppetSkilled\\Queue\\Queueable  $job\n@return mixed.\n\n    "
    },
    {
        "ID": 853,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function(obj, desc){ this.assert( this.obj.some(function(item) { return eql(obj, item); }) , function(){ return 'expected ' + this.inspect + ' to include an object equal to ' + i(obj) + (desc ? \" | \" + desc : \"\") } , function(){ return 'expected ' + this.inspect + ' to not include an object equal to ' + i(obj) + (desc ? \" | \" + desc : \"\") }); return this; }\n\n    ### Response: Assert that an object equal to `obj` is present.\n\n@param {Array} obj\n@param {String} description\n@api public.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void addConstantMemberReference( final int index, final int tag, final String owner, final String name, final String descriptor) { add(new Entry(index, tag, owner, name, descriptor, 0, hash(tag, owner, name, descriptor))); }\n\n    ### Response:",
        "ground_truth": "Adds a new CONSTANT_Fieldref_info, CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info\nto the constant pool of this symbol table.\n\n@param index the constant pool index of the new Symbol.\n@param tag one of {@link Symbol#CONSTANT_FIELDREF_TAG}, {@link Symbol#CONSTANT_METHODREF_TAG}\nor {@link Symbol#CONSTANT_INTERFACE_METHODREF_TAG}.\n@param owner the internal name of a class.\n@param name a field or method name.\n@param descriptor a field or method descriptor.",
        "predict": " Assert that an object equal to `obj` is present.\n\n@param {Array} obj\n@param {String} description\n@api public.\n\n    "
    },
    {
        "ID": 854,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (m *Motto) AddModule(id string, l ModuleLoader) { m.modulesMu.Lock() m.modules[id] = l m.modulesMu.Unlock() }\n\n    ### Response: // AddModule registers a new module to current vm..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private Symbol addConstantIntegerOrFloat(final int tag, final int value) { int hashCode = hash(tag, value); Entry entry = get(hashCode); while (entry != null) { if (entry.tag == tag && entry.hashCode == hashCode && entry.data == value) { return entry; } entry = entry.next; } constantPool.putByte(tag).putInt(value); return put(new Entry(constantPoolCount++, tag, value, hashCode)); }\n\n    ### Response:",
        "ground_truth": "Adds a CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table.\nDoes nothing if the constant pool already contains a similar item.\n\n@param tag one of {@link Symbol#CONSTANT_INTEGER_TAG} or {@link Symbol#CONSTANT_FLOAT_TAG}.\n@param value an int or float.\n@return a constant pool constant with the given tag and primitive values.",
        "predict": " // AddModule registers a new module to current vm..\n\n    "
    },
    {
        "ID": 855,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def rollback(self) -> None: \"\"\" Roll back to previous database state. However stay inside transaction management. \"\"\" if len(self._transactions) == 0: raise RuntimeError(\"rollback called outside transaction\") _debug(\"rollback:\", self._transactions[-1]) # if something goes wrong here, nothing we can do about it, leave # database as is. try: # for every rollback action ... for on_rollback in self._transactions[-1]: # execute it _debug(\"--> rolling back\", on_rollback) self._do_with_retry(on_rollback) except: # noqa: E722 _debug(\"--> rollback failed\") exc_class, exc, tb = sys.exc_info() raise tldap.exceptions.RollbackError( \"FATAL Unrecoverable rollback error: %r\" % exc) finally: # reset everything to clean state _debug(\"--> rollback success\") self.reset()\n\n    ### Response: Roll back to previous database state. However stay inside transaction\n        management..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void addConstantIntegerOrFloat(final int index, final int tag, final int value) { add(new Entry(index, tag, value, hash(tag, value))); }\n\n    ### Response:",
        "ground_truth": "Adds a new CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol\ntable.\n\n@param index the constant pool index of the new Symbol.\n@param tag one of {@link Symbol#CONSTANT_INTEGER_TAG} or {@link Symbol#CONSTANT_FLOAT_TAG}.\n@param value an int or float.",
        "predict": " Roll back to previous database state. However stay inside transaction\n        management..\n\n    "
    },
    {
        "ID": 856,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def find_sanitizer(self, name): \"\"\" Searches for a sanitizer function with given name. The name should contain two parts separated from each other with a dot, the first part being the module name while the second being name of the function contained in the module, when it's being prefixed with \"sanitize_\". The lookup process consists from three attempts, which are: 1. First package to look the module will be top level package called \"sanitizers\". 2. Module will be looked under the \"addon\" packages, if they have been defined. 3. Finally the sanitation function will be looked from the builtin sanitizers located in \"database_sanitizer.sanitizers\" package. If none of these provide any results, ConfigurationError will be thrown. :param name: \"Full name\" of the sanitation function containing name of the module as well as name of the function. :type name: str :return: First function which can be imported with the given name. :rtype: callable \"\"\" # Split the sanitizer name into two parts, one containing the Python # module name, while second containing portion of the function name # we are looking for. name_parts = name.split(\".\") if len(name_parts) < 2: raise ConfigurationError( \"Unable to separate module name from function name in '%s'\" % ( name, ), ) module_name_suffix = \".\".join(name_parts[:-1]) function_name = \"sanitize_%s\" % (name_parts[-1],) # Phase 1: Look for custom sanitizer under a top level package called # \"sanitizers\". module_name = \"sanitizers.%s\" % (module_name_suffix,) callback = self.find_sanitizer_from_module( module_name=module_name, function_name=function_name, ) if callback: return callback # Phase 2: Look for the sanitizer under \"addon\" packages, if any of # such have been defined. for addon_package_name in self.addon_packages: module_name = \"%s.%s\" % ( addon_package_name, module_name_suffix, ) callback = self.find_sanitizer_from_module( module_name=module_name, function_name=function_name, ) if callback: return callback # Phase 3: Look from builtin sanitizers. module_name = \"database_sanitizer.sanitizers.%s\" % (module_name_suffix,) callback = self.find_sanitizer_from_module( module_name=module_name, function_name=function_name, ) if callback: return callback # Give up. raise ConfigurationError(\"Unable to find sanitizer called '%s'\" % ( name, ))\n\n    ### Response: Searches for a sanitizer function with given name. The name should\n        contain two parts separated from each other with a dot, the first\n        part being the module name while the second being name of the function\n        contained in the module, when it's being prefixed with \"sanitize_\".\n\n        The lookup process consists from three attempts, which are:\n\n        1. First package to look the module will be top level package called\n           \"sanitizers\".\n        2. Module will be looked under the \"addon\" packages, if they have been\n           defined.\n        3. Finally the sanitation function will be looked from the builtin\n           sanitizers located in \"database_sanitizer.sanitizers\" package.\n\n        If none of these provide any results, ConfigurationError will be\n        thrown.\n\n        :param name: \"Full name\" of the sanitation function containing name\n                     of the module as well as name of the function.\n        :type name: str\n\n        :return: First function which can be imported with the given name.\n        :rtype: callable.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private Symbol addConstantLongOrDouble(final int tag, final long value) { int hashCode = hash(tag, value); Entry entry = get(hashCode); while (entry != null) { if (entry.tag == tag && entry.hashCode == hashCode && entry.data == value) { return entry; } entry = entry.next; } int index = constantPoolCount; constantPool.putByte(tag).putLong(value); constantPoolCount += 2; return put(new Entry(index, tag, value, hashCode)); }\n\n    ### Response:",
        "ground_truth": "Adds a CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table.\nDoes nothing if the constant pool already contains a similar item.\n\n@param tag one of {@link Symbol#CONSTANT_LONG_TAG} or {@link Symbol#CONSTANT_DOUBLE_TAG}.\n@param value a long or double.\n@return a constant pool constant with the given tag and primitive values.",
        "predict": " Searches for a sanitizer function with given name. The name should\n        contain two parts separated from each other with a dot, the first\n        part being the module name while the second being name of the function\n        contained in the module, when it's being prefixed with \"sanitize_\".\n\n        The lookup process consists from three attempts, which are:\n\n        1. First package to look the module will be top level package called\n           \"sanitizers\".\n        2. Module will be looked under the \"addon\" packages, if they have been\n           defined.\n        3. Finally the sanitation function will be looked from the builtin\n           sanitizers located in \"database_sanitizer.sanitizers\" package.\n\n        If none of these provide any results, ConfigurationError will be\n        thrown.\n\n        :param name: \"Full name\" of the sanitation function containing name\n                     of the module as well as name of the function.\n        :type name: str\n\n        :return: First function which can be imported with the given name.\n        :rtype: callable.\n\n    "
    },
    {
        "ID": 857,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (req *Request) File(fieldname, filename string, r io.Reader) { req.files = append(req.files, File{ Field: fieldname, Name: filename, R: r, }) }\n\n    ### Response: // File sets a file to upload.\n// Files are only supported with a Client that was created with\n// the UseMultipartForm option..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void addConstantLongOrDouble(final int index, final int tag, final long value) { add(new Entry(index, tag, value, hash(tag, value))); }\n\n    ### Response:",
        "ground_truth": "Adds a new CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol\ntable.\n\n@param index the constant pool index of the new Symbol.\n@param tag one of {@link Symbol#CONSTANT_LONG_TAG} or {@link Symbol#CONSTANT_DOUBLE_TAG}.\n@param value a long or double.",
        "predict": " // File sets a file to upload.\n// Files are only supported with a Client that was created with\n// the UseMultipartForm option..\n\n    "
    },
    {
        "ID": 858,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def remove_attribute(self, attribute: str) -> None: \"\"\"Remove an attribute from the node. Use only if is_mapping() returns True. Args: attribute: The name of the attribute to remove. \"\"\" attr_index = self.__attr_index(attribute) if attr_index is not None: self.yaml_node.value.pop(attr_index)\n\n    ### Response: Remove an attribute from the node.\n\n        Use only if is_mapping() returns True.\n\n        Args:\n            attribute: The name of the attribute to remove..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    int addConstantNameAndType(final String name, final String descriptor) { final int tag = Symbol.CONSTANT_NAME_AND_TYPE_TAG; int hashCode = hash(tag, name, descriptor); Entry entry = get(hashCode); while (entry != null) { if (entry.tag == tag && entry.hashCode == hashCode && entry.name.equals(name) && entry.value.equals(descriptor)) { return entry.index; } entry = entry.next; } constantPool.put122(tag, addConstantUtf8(name), addConstantUtf8(descriptor)); return put(new Entry(constantPoolCount++, tag, name, descriptor, hashCode)).index; }\n\n    ### Response:",
        "ground_truth": "Adds a CONSTANT_NameAndType_info to the constant pool of this symbol table. Does nothing if the\nconstant pool already contains a similar item.\n\n@param name a field or method name.\n@param descriptor a field or method descriptor.\n@return a new or already existing Symbol with the given value.",
        "predict": " Remove an attribute from the node.\n\n        Use only if is_mapping() returns True.\n\n        Args:\n            attribute: The name of the attribute to remove..\n\n    "
    },
    {
        "ID": 859,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def asyncio_main_run(root_runner: BaseRunner): \"\"\" Create an ``asyncio`` event loop running in the main thread and watching runners Using ``asyncio`` to handle suprocesses requires a specific loop type to run in the main thread. This function sets up and runs the correct loop in a portable way. In addition, it runs a single :py:class:`~.BaseRunner` until completion or failure. .. seealso:: The `issue #8 <https://github.com/MatterMiners/cobald/issues/8>`_ for details. \"\"\" assert threading.current_thread() == threading.main_thread(), 'only main thread can accept asyncio subprocesses' if sys.platform == 'win32': event_loop = asyncio.ProactorEventLoop() asyncio.set_event_loop(event_loop) else: event_loop = asyncio.get_event_loop() asyncio.get_child_watcher().attach_loop(event_loop) event_loop.run_until_complete(awaitable_runner(root_runner))\n\n    ### Response: Create an ``asyncio`` event loop running in the main thread and watching runners\n\n    Using ``asyncio`` to handle suprocesses requires a specific loop type to run in the main thread.\n    This function sets up and runs the correct loop in a portable way.\n    In addition, it runs a single :py:class:`~.BaseRunner` until completion or failure.\n\n    .. seealso:: The `issue #8 `_ for details..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void addConstantNameAndType(final int index, final String name, final String descriptor) { final int tag = Symbol.CONSTANT_NAME_AND_TYPE_TAG; add(new Entry(index, tag, name, descriptor, hash(tag, name, descriptor))); }\n\n    ### Response:",
        "ground_truth": "Adds a new CONSTANT_NameAndType_info to the constant pool of this symbol table.\n\n@param index the constant pool index of the new Symbol.\n@param name a field or method name.\n@param descriptor a field or method descriptor.",
        "predict": " Create an ``asyncio`` event loop running in the main thread and watching runners\n\n    Using ``asyncio`` to handle suprocesses requires a specific loop type to run in the main thread.\n    This function sets up and runs the correct loop in a portable way.\n    In addition, it runs a single :py:class:`~.BaseRunner` until completion or failure.\n\n    .. seealso:: The `issue #8 `_ for details..\n\n    "
    },
    {
        "ID": 860,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def generate_message(name, values = []) message = (@messages[name] || self.class.default_messages[name]) # Check whether there are actually any values to interpolate to avoid # any warnings if message.scan(/%./).any? { |match| match != '%%' } message % values.map { |value| value.last } else message end end\n\n    ### Response: Generates the message to use when invalidating the given object after\n failing to transition on a specific event.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    int addConstantUtf8(final String value) { int hashCode = hash(Symbol.CONSTANT_UTF8_TAG, value); Entry entry = get(hashCode); while (entry != null) { if (entry.tag == Symbol.CONSTANT_UTF8_TAG && entry.hashCode == hashCode && entry.value.equals(value)) { return entry.index; } entry = entry.next; } constantPool.putByte(Symbol.CONSTANT_UTF8_TAG).putUTF8(value); return put(new Entry(constantPoolCount++, Symbol.CONSTANT_UTF8_TAG, value, hashCode)).index; }\n\n    ### Response:",
        "ground_truth": "Adds a CONSTANT_Utf8_info to the constant pool of this symbol table. Does nothing if the\nconstant pool already contains a similar item.\n\n@param value a string.\n@return a new or already existing Symbol with the given value.",
        "predict": " Generates the message to use when invalidating the given object after\n failing to transition on a specific event.\n\n    "
    },
    {
        "ID": 861,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static function getBrowser() { if (self::$_browser !== null) { return self::$_browser; } $httplanguages = getenv('HTTP_ACCEPT_LANGUAGE'); if (empty($httplanguages) && array_key_exists('HTTP_ACCEPT_LANGUAGE', $_SERVER)) { $httplanguages = $_SERVER['HTTP_ACCEPT_LANGUAGE']; } $languages = array(); if (empty($httplanguages)) { return $languages; } $accepted = preg_split('/,\\s*/', $httplanguages); foreach ($accepted as $accept) { $match = null; $result = preg_match('/^([a-z]{1,8}(?:[-_][a-z]{1,8})*)(?:;\\s*q=(0(?:\\.[0-9]{1,3})?|1(?:\\.0{1,3})?))?$/i', $accept, $match); if ($result < 1) { continue; } if (isset($match[2]) === true) { $quality = (float) $match[2]; } else { $quality = 1.0; } $countrys = explode('-', $match[1]); $region = array_shift($countrys); $country2 = explode('_', $region); $region = array_shift($country2); foreach ($countrys as $country) { $languages[$region . '_' . strtoupper($country)] = $quality; } foreach ($country2 as $country) { $languages[$region . '_' . strtoupper($country)] = $quality; } if ((isset($languages[$region]) === false) || ($languages[$region] < $quality)) { $languages[$region] = $quality; } } self::$_browser = $languages; return $languages; }\n\n    ### Response: Return an array of all accepted languages of the client\nExpects RFC compilant Header !!\n\nThe notation can be :\nde,en-UK-US;q=0.5,fr-FR;q=0.2\n\n@return array - list of accepted languages including quality.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void addConstantUtf8(final int index, final String value) { add(new Entry(index, Symbol.CONSTANT_UTF8_TAG, value, hash(Symbol.CONSTANT_UTF8_TAG, value))); }\n\n    ### Response:",
        "ground_truth": "Adds a new CONSTANT_String_info to the constant pool of this symbol table.\n\n@param index the constant pool index of the new Symbol.\n@param value a string.",
        "predict": " Return an array of all accepted languages of the client\nExpects RFC compilant Header !!\n\nThe notation can be :\nde,en-UK-US;q=0.5,fr-FR;q=0.2\n\n@return array - list of accepted languages including quality.\n\n    "
    },
    {
        "ID": 862,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function hasData($name = null) { if ($name !== null) { return is_array($this->data) && isset($this->data[$name]); } return !empty($this->data); }\n\n    ### Response: Checks if there is data or a specific data.\n\n@param string $name The data name.\n\n@return boolean TRUE if there is data else FALSE..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    Symbol addConstantMethodHandle( final int referenceKind, final String owner, final String name, final String descriptor, final boolean isInterface) { final int tag = Symbol.CONSTANT_METHOD_HANDLE_TAG; // Note that we don't need to include isInterface in the hash computation, because it is // redundant with owner (we can't have the same owner with different isInterface values). int hashCode = hash(tag, owner, name, descriptor, referenceKind); Entry entry = get(hashCode); while (entry != null) { if (entry.tag == tag && entry.hashCode == hashCode && entry.data == referenceKind && entry.owner.equals(owner) && entry.name.equals(name) && entry.value.equals(descriptor)) { return entry; } entry = entry.next; } if (referenceKind <= Opcodes.H_PUTSTATIC) { constantPool.put112(tag, referenceKind, addConstantFieldref(owner, name, descriptor).index); } else { constantPool.put112( tag, referenceKind, addConstantMethodref(owner, name, descriptor, isInterface).index); } return put( new Entry(constantPoolCount++, tag, owner, name, descriptor, referenceKind, hashCode)); }\n\n    ### Response:",
        "ground_truth": "Adds a CONSTANT_MethodHandle_info to the constant pool of this symbol table. Does nothing if\nthe constant pool already contains a similar item.\n\n@param referenceKind one of {@link Opcodes#H_GETFIELD}, {@link Opcodes#H_GETSTATIC}, {@link\nOpcodes#H_PUTFIELD}, {@link Opcodes#H_PUTSTATIC}, {@link Opcodes#H_INVOKEVIRTUAL}, {@link\nOpcodes#H_INVOKESTATIC}, {@link Opcodes#H_INVOKESPECIAL}, {@link\nOpcodes#H_NEWINVOKESPECIAL} or {@link Opcodes#H_INVOKEINTERFACE}.\n@param owner the internal name of a class of interface.\n@param name a field or method name.\n@param descriptor a field or method descriptor.\n@param isInterface whether owner is an interface or not.\n@return a new or already existing Symbol with the given value.",
        "predict": " Checks if there is data or a specific data.\n\n@param string $name The data name.\n\n@return boolean TRUE if there is data else FALSE..\n\n    "
    },
    {
        "ID": 863,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public DailyTimeIntervalScheduleBuilder endingDailyAfterCount (final int count) { ValueEnforcer.isGT0 (count, \"Count\"); if (m_aStartTimeOfDay == null) throw new IllegalArgumentException (\"You must set the startDailyAt() before calling this endingDailyAfterCount()!\"); final Date today = new Date (); final Date startTimeOfDayDate = m_aStartTimeOfDay.getTimeOfDayForDate (today); final Date maxEndTimeOfDayDate = TimeOfDay.hourMinuteAndSecondOfDay (23, 59, 59).getTimeOfDayForDate (today); final long remainingMillisInDay = maxEndTimeOfDayDate.getTime () - startTimeOfDayDate.getTime (); long intervalInMillis; if (m_eIntervalUnit == EIntervalUnit.SECOND) intervalInMillis = m_nInterval * CGlobal.MILLISECONDS_PER_SECOND; else if (m_eIntervalUnit == EIntervalUnit.MINUTE) intervalInMillis = m_nInterval * CGlobal.MILLISECONDS_PER_MINUTE; else if (m_eIntervalUnit == EIntervalUnit.HOUR) intervalInMillis = m_nInterval * DateBuilder.MILLISECONDS_IN_DAY; else throw new IllegalArgumentException (\"The IntervalUnit: \" + m_eIntervalUnit + \" is invalid for this trigger.\"); if (remainingMillisInDay - intervalInMillis <= 0) throw new IllegalArgumentException (\"The startTimeOfDay is too late with given Interval and IntervalUnit values.\"); final long maxNumOfCount = (remainingMillisInDay / intervalInMillis); if (count > maxNumOfCount) throw new IllegalArgumentException (\"The given count \" + count + \" is too large! The max you can set is \" + maxNumOfCount); final long incrementInMillis = (count - 1) * intervalInMillis; final Date endTimeOfDayDate = new Date (startTimeOfDayDate.getTime () + incrementInMillis); if (endTimeOfDayDate.getTime () > maxEndTimeOfDayDate.getTime ()) throw new IllegalArgumentException (\"The given count \" + count + \" is too large! The max you can set is \" + maxNumOfCount); final Calendar cal = PDTFactory.createCalendar (); cal.setTime (endTimeOfDayDate); final int hour = cal.get (Calendar.HOUR_OF_DAY); final int minute = cal.get (Calendar.MINUTE); final int second = cal.get (Calendar.SECOND); m_aEndTimeOfDay = TimeOfDay.hourMinuteAndSecondOfDay (hour, minute, second); return this; }\n\n    ### Response: Calculate and set the endTimeOfDay using count, interval and starTimeOfDay.\nThis means that these must be set before this method is call.\n\n@return the updated DailyTimeIntervalScheduleBuilder.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void addConstantMethodHandle( final int index, final int referenceKind, final String owner, final String name, final String descriptor) { final int tag = Symbol.CONSTANT_METHOD_HANDLE_TAG; int hashCode = hash(tag, owner, name, descriptor, referenceKind); add(new Entry(index, tag, owner, name, descriptor, referenceKind, hashCode)); }\n\n    ### Response:",
        "ground_truth": "Adds a new CONSTANT_MethodHandle_info to the constant pool of this symbol table.\n\n@param index the constant pool index of the new Symbol.\n@param referenceKind one of {@link Opcodes#H_GETFIELD}, {@link Opcodes#H_GETSTATIC}, {@link\nOpcodes#H_PUTFIELD}, {@link Opcodes#H_PUTSTATIC}, {@link Opcodes#H_INVOKEVIRTUAL}, {@link\nOpcodes#H_INVOKESTATIC}, {@link Opcodes#H_INVOKESPECIAL}, {@link\nOpcodes#H_NEWINVOKESPECIAL} or {@link Opcodes#H_INVOKEINTERFACE}.\n@param owner the internal name of a class of interface.\n@param name a field or method name.\n@param descriptor a field or method descriptor.",
        "predict": " Calculate and set the endTimeOfDay using count, interval and starTimeOfDay.\nThis means that these must be set before this method is call.\n\n@return the updated DailyTimeIntervalScheduleBuilder.\n\n    "
    },
    {
        "ID": 864,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (p *PushGateway) Handler(w http.ResponseWriter, r *http.Request) { // redirect to agreement to give our users information about // this collected data. switch r.Method { case http.MethodGet, http.MethodHead: http.Redirect(w, r, \"https://www.influxdata.com/telemetry\", http.StatusSeeOther) return case http.MethodPost, http.MethodPut: default: w.Header().Set(\"Allow\", \"GET, HEAD, PUT, POST\") http.Error(w, http.StatusText(http.StatusMethodNotAllowed), http.StatusMethodNotAllowed, ) return } if p.Timeout == 0 { p.Timeout = DefaultTimeout } if p.MaxBytes == 0 { p.MaxBytes = DefaultMaxBytes } if p.Encoder == nil { p.Encoder = &prometheus.Expfmt{ Format: expfmt.FmtText, } } ctx, cancel := context.WithTimeout( r.Context(), p.Timeout, ) defer cancel() r = r.WithContext(ctx) defer r.Body.Close() format, err := metricsFormat(r.Header) if err != nil { p.Logger.Error(\"metrics format not support\", zap.Error(err)) http.Error(w, err.Error(), http.StatusBadRequest) return } mfs, err := decodePostMetricsRequest(r.Body, format, p.MaxBytes) if err != nil { p.Logger.Error(\"unable to decode metrics\", zap.Error(err)) http.Error(w, err.Error(), http.StatusBadRequest) return } if err := valid(mfs); err != nil { p.Logger.Error(\"invalid metrics\", zap.Error(err)) http.Error(w, err.Error(), http.StatusBadRequest) return } for _, transformer := range p.Transformers { mfs = transformer.Transform(mfs) } data, err := p.Encoder.Encode(mfs) if err != nil { p.Logger.Error(\"unable to encode metric families\", zap.Error(err)) http.Error(w, err.Error(), http.StatusInternalServerError) return } if err := p.Store.WriteMessage(ctx, data); err != nil { p.Logger.Error(\"unable to write to store\", zap.Error(err)) http.Error(w, err.Error(), http.StatusInternalServerError) return } w.WriteHeader(http.StatusAccepted) }\n\n    ### Response: // Handler accepts prometheus metrics send via the Push client and sends those\n// metrics into the store..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    Symbol addConstantDynamic( final String name, final String descriptor, final Handle bootstrapMethodHandle, final Object... bootstrapMethodArguments) { Symbol bootstrapMethod = addBootstrapMethod(bootstrapMethodHandle, bootstrapMethodArguments); return addConstantDynamicOrInvokeDynamicReference( Symbol.CONSTANT_DYNAMIC_TAG, name, descriptor, bootstrapMethod.index); }\n\n    ### Response:",
        "ground_truth": "Adds a CONSTANT_Dynamic_info to the constant pool of this symbol table. Also adds the related\nbootstrap method to the BootstrapMethods of this symbol table. Does nothing if the constant\npool already contains a similar item.\n\n@param name a method name.\n@param descriptor a field descriptor.\n@param bootstrapMethodHandle a bootstrap method handle.\n@param bootstrapMethodArguments the bootstrap method arguments.\n@return a new or already existing Symbol with the given value.",
        "predict": " // Handler accepts prometheus metrics send via the Push client and sends those\n// metrics into the store..\n\n    "
    },
    {
        "ID": 865,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function listCurrency() { $this->setTitleListCurrency(); $this->setBreadcrumbListCurrency(); $this->setFilterListCurrency(); $this->setPagerListCurrency(); $this->setData('currencies', (array) $this->getListCurrency()); $this->setData('default_currency', $this->currency->getDefault()); $this->outputListCurrency(); }\n\n    ### Response: Displays the currency overview page.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    Symbol addConstantInvokeDynamic( final String name, final String descriptor, final Handle bootstrapMethodHandle, final Object... bootstrapMethodArguments) { Symbol bootstrapMethod = addBootstrapMethod(bootstrapMethodHandle, bootstrapMethodArguments); return addConstantDynamicOrInvokeDynamicReference( Symbol.CONSTANT_INVOKE_DYNAMIC_TAG, name, descriptor, bootstrapMethod.index); }\n\n    ### Response:",
        "ground_truth": "Adds a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table. Also adds the\nrelated bootstrap method to the BootstrapMethods of this symbol table. Does nothing if the\nconstant pool already contains a similar item.\n\n@param name a method name.\n@param descriptor a method descriptor.\n@param bootstrapMethodHandle a bootstrap method handle.\n@param bootstrapMethodArguments the bootstrap method arguments.\n@return a new or already existing Symbol with the given value.",
        "predict": " Displays the currency overview page.\n\n    "
    },
    {
        "ID": 866,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def check_overscan(xstart, xsize, total_prescan_pixels=24, total_science_pixels=4096): \"\"\"Check image for bias columns. Parameters ---------- xstart : int Starting column of the readout in detector coordinates. xsize : int Number of columns in the readout. total_prescan_pixels : int Total prescan pixels for a single amplifier on a detector. Default is 24 for WFC. total_science_pixels : int Total science pixels across a detector. Default is 4096 for WFC (across two amplifiers). Returns ------- hasoverscan : bool Indication if there are bias columns in the image. leading : int Number of bias columns on the A/C amplifiers side of the CCDs (\"TRIMX1\" in ``OSCNTAB``). trailing : int Number of bias columns on the B/D amplifiers side of the CCDs (\"TRIMX2\" in ``OSCNTAB``). \"\"\" hasoverscan = False leading = 0 trailing = 0 if xstart < total_prescan_pixels: hasoverscan = True leading = abs(xstart - total_prescan_pixels) if (xstart + xsize) > total_science_pixels: hasoverscan = True trailing = abs(total_science_pixels - (xstart + xsize - total_prescan_pixels)) return hasoverscan, leading, trailing\n\n    ### Response: Check image for bias columns.\n\n    Parameters\n    ----------\n    xstart : int\n        Starting column of the readout in detector coordinates.\n\n    xsize : int\n        Number of columns in the readout.\n\n    total_prescan_pixels : int\n        Total prescan pixels for a single amplifier on a detector.\n        Default is 24 for WFC.\n\n    total_science_pixels : int\n        Total science pixels across a detector.\n        Default is 4096 for WFC (across two amplifiers).\n\n    Returns\n    -------\n    hasoverscan : bool\n        Indication if there are bias columns in the image.\n\n    leading : int\n        Number of bias columns on the A/C amplifiers\n        side of the CCDs (\"TRIMX1\" in ``OSCNTAB``).\n\n    trailing : int\n        Number of bias columns on the B/D amplifiers\n        side of the CCDs (\"TRIMX2\" in ``OSCNTAB``)..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private Symbol addConstantDynamicOrInvokeDynamicReference( final int tag, final String name, final String descriptor, final int bootstrapMethodIndex) { int hashCode = hash(tag, name, descriptor, bootstrapMethodIndex); Entry entry = get(hashCode); while (entry != null) { if (entry.tag == tag && entry.hashCode == hashCode && entry.data == bootstrapMethodIndex && entry.name.equals(name) && entry.value.equals(descriptor)) { return entry; } entry = entry.next; } constantPool.put122(tag, bootstrapMethodIndex, addConstantNameAndType(name, descriptor)); return put( new Entry( constantPoolCount++, tag, null, name, descriptor, bootstrapMethodIndex, hashCode)); }\n\n    ### Response:",
        "ground_truth": "Adds a CONSTANT_Dynamic or a CONSTANT_InvokeDynamic_info to the constant pool of this symbol\ntable. Does nothing if the constant pool already contains a similar item.\n\n@param tag one of {@link Symbol#CONSTANT_DYNAMIC_TAG} or {@link\nSymbol#CONSTANT_INVOKE_DYNAMIC_TAG}.\n@param name a method name.\n@param descriptor a field descriptor for CONSTANT_DYNAMIC_TAG) or a method descriptor for\nCONSTANT_INVOKE_DYNAMIC_TAG.\n@param bootstrapMethodIndex the index of a bootstrap method in the BootstrapMethods attribute.\n@return a new or already existing Symbol with the given value.",
        "predict": " Check image for bias columns.\n\n    Parameters\n    ----------\n    xstart : int\n        Starting column of the readout in detector coordinates.\n\n    xsize : int\n        Number of columns in the readout.\n\n    total_prescan_pixels : int\n        Total prescan pixels for a single amplifier on a detector.\n        Default is 24 for WFC.\n\n    total_science_pixels : int\n        Total science pixels across a detector.\n        Default is 4096 for WFC (across two amplifiers).\n\n    Returns\n    -------\n    hasoverscan : bool\n        Indication if there are bias columns in the image.\n\n    leading : int\n        Number of bias columns on the A/C amplifiers\n        side of the CCDs (\"TRIMX1\" in ``OSCNTAB``).\n\n    trailing : int\n        Number of bias columns on the B/D amplifiers\n        side of the CCDs (\"TRIMX2\" in ``OSCNTAB``)..\n\n    "
    },
    {
        "ID": 867,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function parseAhead( router, req, done ) { var idx = 0; var stack = router.stack; var params = {}; var method = req.method ? req.method.toLowerCase() : undefined; next(); function next() { var layer = stack[ idx++ ]; if ( !layer ) { // strip dangling query params params = _.transform( params, function( acc, v, k ) { acc[ k ] = v.split( '?' )[ 0 ]; return acc; }, {} ); return done( params ); } if ( layer.method && layer.method !== method ) { return next(); } layer.match( req.originalUrl ); params = _.merge( params, layer.params ); next(); } }\n\n    ### Response: this might be the worst thing to ever happen to anything ever this is adapted directly from express layer.match.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void addConstantDynamicOrInvokeDynamicReference( final int tag, final int index, final String name, final String descriptor, final int bootstrapMethodIndex) { int hashCode = hash(tag, name, descriptor, bootstrapMethodIndex); add(new Entry(index, tag, null, name, descriptor, bootstrapMethodIndex, hashCode)); }\n\n    ### Response:",
        "ground_truth": "Adds a new CONSTANT_Dynamic_info or CONSTANT_InvokeDynamic_info to the constant pool of this\nsymbol table.\n\n@param tag one of {@link Symbol#CONSTANT_DYNAMIC_TAG} or {@link\nSymbol#CONSTANT_INVOKE_DYNAMIC_TAG}.\n@param index the constant pool index of the new Symbol.\n@param name a method name.\n@param descriptor a field descriptor for CONSTANT_DYNAMIC_TAG or a method descriptor for\nCONSTANT_INVOKE_DYNAMIC_TAG.\n@param bootstrapMethodIndex the index of a bootstrap method in the BootstrapMethods attribute.",
        "predict": " this might be the worst thing to ever happen to anything ever this is adapted directly from express layer.match.\n\n    "
    },
    {
        "ID": 868,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function baseString($request, $oauthValues) { $parts = [ $request->getMethod(), $this->_normalizedUrl($request->getUri()), $this->_normalizedParams($request, $oauthValues), ]; $parts = array_map([$this, '_encode'], $parts); return implode('&', $parts); }\n\n    ### Response: Generate the Oauth basestring\n\n- Querystring, request data and oauth_* parameters are combined.\n- Values are sorted by name and then value.\n- Request values are concatenated and urlencoded.\n- The request URL (without querystring) is normalized.\n- The HTTP method, URL and request parameters are concatenated and returned.\n\n@param \\Cake\\Http\\Client\\Request $request The request object.\n@param array $oauthValues Oauth values.\n@return string.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private Symbol addConstantUtf8Reference(final int tag, final String value) { int hashCode = hash(tag, value); Entry entry = get(hashCode); while (entry != null) { if (entry.tag == tag && entry.hashCode == hashCode && entry.value.equals(value)) { return entry; } entry = entry.next; } constantPool.put12(tag, addConstantUtf8(value)); return put(new Entry(constantPoolCount++, tag, value, hashCode)); }\n\n    ### Response:",
        "ground_truth": "Adds a CONSTANT_Class_info, CONSTANT_String_info, CONSTANT_MethodType_info,\nCONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table. Does\nnothing if the constant pool already contains a similar item.\n\n@param tag one of {@link Symbol#CONSTANT_CLASS_TAG}, {@link Symbol#CONSTANT_STRING_TAG}, {@link\nSymbol#CONSTANT_METHOD_TYPE_TAG}, {@link Symbol#CONSTANT_MODULE_TAG} or {@link\nSymbol#CONSTANT_PACKAGE_TAG}.\n@param value an internal class name, an arbitrary string, a method descriptor, a module or a\npackage name, depending on tag.\n@return a new or already existing Symbol with the given value.",
        "predict": " Generate the Oauth basestring\n\n- Querystring, request data and oauth_* parameters are combined.\n- Values are sorted by name and then value.\n- Request values are concatenated and urlencoded.\n- The request URL (without querystring) is normalized.\n- The HTTP method, URL and request parameters are concatenated and returned.\n\n@param \\Cake\\Http\\Client\\Request $request The request object.\n@param array $oauthValues Oauth values.\n@return string.\n\n    "
    },
    {
        "ID": 869,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected String getTaskHelp(String desc, String usage, String optionKeyPrefix, String optionDescPrefix, String addonKey, String footer, Object... args) { StringBuilder scriptHelp = new StringBuilder(); scriptHelp.append(NL); scriptHelp.append(getOption(\"global.description\")); scriptHelp.append(NL); scriptHelp.append(getOption(desc)); scriptHelp.append(NL); // print a empty line scriptHelp.append(NL); scriptHelp.append(getOption(\"global.usage\")); scriptHelp.append(NL); scriptHelp.append(getOption(usage)); scriptHelp.append(NL); String options = buildScriptOptions(optionKeyPrefix, optionDescPrefix); if (!options.isEmpty()) { // print a empty line scriptHelp.append(NL); scriptHelp.append(getOption(\"global.options\")); scriptHelp.append(options); } if (addonKey != null && !addonKey.isEmpty()) { // print a empty line scriptHelp.append(NL); scriptHelp.append(getOption(addonKey)); } if (footer != null && !footer.isEmpty()) { scriptHelp.append(footer); } scriptHelp.append(NL); if (args.length == 0) { return scriptHelp.toString(); } else { return MessageFormat.format(scriptHelp.toString(), args); } }\n\n    ### Response: Generate the formatted task help.\n\n@param desc the description NLS key\n@param usage the usage NLS key\n@param optionKeyPrefix the option name NLS key prefix\n@param optionDescPrefix the option description NLS key prefix\n@param addonKey an addon NLS key prefix\n@param footer a raw (already translated) String to append to the output\n@param args any arguments to pass to the formating keys (order matters)\n@return.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void addConstantUtf8Reference(final int index, final int tag, final String value) { add(new Entry(index, tag, value, hash(tag, value))); }\n\n    ### Response:",
        "ground_truth": "Adds a new CONSTANT_Class_info, CONSTANT_String_info, CONSTANT_MethodType_info,\nCONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table.\n\n@param index the constant pool index of the new Symbol.\n@param tag one of {@link Symbol#CONSTANT_CLASS_TAG}, {@link Symbol#CONSTANT_STRING_TAG}, {@link\nSymbol#CONSTANT_METHOD_TYPE_TAG}, {@link Symbol#CONSTANT_MODULE_TAG} or {@link\nSymbol#CONSTANT_PACKAGE_TAG}.\n@param value an internal class name, an arbitrary string, a method descriptor, a module or a\npackage name, depending on tag.",
        "predict": " Generate the formatted task help.\n\n@param desc the description NLS key\n@param usage the usage NLS key\n@param optionKeyPrefix the option name NLS key prefix\n@param optionDescPrefix the option description NLS key prefix\n@param addonKey an addon NLS key prefix\n@param footer a raw (already translated) String to append to the output\n@param args any arguments to pass to the formating keys (order matters)\n@return.\n\n    "
    },
    {
        "ID": 870,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def parse_opera (url_data): \"\"\"Parse an opera bookmark file.\"\"\" from ..bookmarks.opera import parse_bookmark_data for url, name, lineno in parse_bookmark_data(url_data.get_content()): url_data.add_url(url, line=lineno, name=name)\n\n    ### Response: Parse an opera bookmark file..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    Symbol addBootstrapMethod( final Handle bootstrapMethodHandle, final Object... bootstrapMethodArguments) { ByteVector bootstrapMethodsAttribute = bootstrapMethods; if (bootstrapMethodsAttribute == null) { bootstrapMethodsAttribute = bootstrapMethods = new ByteVector(); } // The bootstrap method arguments can be Constant_Dynamic values, which reference other // bootstrap methods. We must therefore add the bootstrap method arguments to the constant pool // and BootstrapMethods attribute first, so that the BootstrapMethods attribute is not modified // while adding the given bootstrap method to it, in the rest of this method. for (Object bootstrapMethodArgument : bootstrapMethodArguments) { addConstant(bootstrapMethodArgument); } // Write the bootstrap method in the BootstrapMethods table. This is necessary to be able to // compare it with existing ones, and will be reverted below if there is already a similar // bootstrap method. int bootstrapMethodOffset = bootstrapMethodsAttribute.length; bootstrapMethodsAttribute.putShort( addConstantMethodHandle( bootstrapMethodHandle.getTag(), bootstrapMethodHandle.getOwner(), bootstrapMethodHandle.getName(), bootstrapMethodHandle.getDesc(), bootstrapMethodHandle.isInterface()) .index); int numBootstrapArguments = bootstrapMethodArguments.length; bootstrapMethodsAttribute.putShort(numBootstrapArguments); for (Object bootstrapMethodArgument : bootstrapMethodArguments) { bootstrapMethodsAttribute.putShort(addConstant(bootstrapMethodArgument).index); } // Compute the length and the hash code of the bootstrap method. int bootstrapMethodlength = bootstrapMethodsAttribute.length - bootstrapMethodOffset; int hashCode = bootstrapMethodHandle.hashCode(); for (Object bootstrapMethodArgument : bootstrapMethodArguments) { hashCode ^= bootstrapMethodArgument.hashCode(); } hashCode &= 0x7FFFFFFF; // Add the bootstrap method to the symbol table or revert the above changes. return addBootstrapMethod(bootstrapMethodOffset, bootstrapMethodlength, hashCode); }\n\n    ### Response:",
        "ground_truth": "Adds a bootstrap method to the BootstrapMethods attribute of this symbol table. Does nothing if\nthe BootstrapMethods already contains a similar bootstrap method.\n\n@param bootstrapMethodHandle a bootstrap method handle.\n@param bootstrapMethodArguments the bootstrap method arguments.\n@return a new or already existing Symbol with the given value.",
        "predict": " Parse an opera bookmark file..\n\n    "
    },
    {
        "ID": 871,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def <<(pin_) if pin_.kind_of?(Input) @inputs << pin_ elsif pin_.kind_of?(Output) @outputs << pin_ elsif pin_.kind_of?(Array) # push an array of pin pin_.each { |p| self << p } end pin_.set_component(self) end\n\n    ### Response: Push pin to component.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    int addMergedType(final int typeTableIndex1, final int typeTableIndex2) { // TODO sort the arguments? The merge result should be independent of their order. long data = typeTableIndex1 | (((long) typeTableIndex2) << 32); int hashCode = hash(Symbol.MERGED_TYPE_TAG, typeTableIndex1 + typeTableIndex2); Entry entry = get(hashCode); while (entry != null) { if (entry.tag == Symbol.MERGED_TYPE_TAG && entry.hashCode == hashCode && entry.data == data) { return entry.info; } entry = entry.next; } String type1 = typeTable[typeTableIndex1].value; String type2 = typeTable[typeTableIndex2].value; int commonSuperTypeIndex = addType(classWriter.getCommonSuperClass(type1, type2)); put(new Entry(typeCount, Symbol.MERGED_TYPE_TAG, data, hashCode)).info = commonSuperTypeIndex; return commonSuperTypeIndex; }\n\n    ### Response:",
        "ground_truth": "Adds a merged type in the type table of this symbol table. Does nothing if the type table\nalready contains a similar type.\n\n@param typeTableIndex1 a {@link Symbol#TYPE_TAG} type, specified by its index in the type\ntable.\n@param typeTableIndex2 another {@link Symbol#TYPE_TAG} type, specified by its index in the type\ntable.\n@return the index of a new or already existing {@link Symbol#TYPE_TAG} type Symbol,\ncorresponding to the common super class of the given types.",
        "predict": " Push pin to component.\n\n    "
    },
    {
        "ID": 872,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static function getAll() { global $wpdb; if (false === ($results = get_transient(self::TRANSIENT_ALL_TAGS))) { $results = $wpdb->get_results(' SELECT ta.term_taxonomy_id as taxonomy_id, name, slug, count(*) total FROM ' . $wpdb->prefix . 'term_taxonomy ta JOIN ' . $wpdb->prefix . 'terms te ON (te.term_id = ta.term_id) JOIN ' . $wpdb->prefix . 'term_relationships re ON (re.term_taxonomy_id = ta.term_taxonomy_id) WHERE taxonomy = \"post_tag\" GROUP BY name, slug, taxonomy_id ORDER BY total DESC, name, slug'); set_transient(self::TRANSIENT_ALL_TAGS, $results, 12 * HOUR_IN_SECONDS); } return $results; }\n\n    ### Response: Get all tags\n\n@see http://codex.wordpress.org/Transients_API\n@return array List with all tags.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private int hash(final String name) { int h = 0; for (int i = name.length() - 1; i >= 0; i--) { char c = name.charAt(i); if (!caseSensitive) { if (c >= 'A' && c <= 'Z') { c += 32; } } h = 31 * h + c; } if (h > 0) { return h; } if (h == Integer.MIN_VALUE) { return Integer.MAX_VALUE; } return -h; }\n\n    ### Response:",
        "ground_truth": "Calculates hash value of the input string.",
        "predict": " Get all tags\n\n@see http://codex.wordpress.org/Transients_API\n@return array List with all tags.\n\n    "
    },
    {
        "ID": 873,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function unregisterStream($protocol) { if (isset(self::$streams[$protocol])) { $result = stream_wrapper_unregister($protocol); if ($result === true) { unset(self::$streams[$protocol]); } } return $this; }\n\n    ### Response: Unregisters a stream instance by protocol.\n\n@param string $protocol\n\n@return self.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public HttpMultiMap<V> clear() { for (int i = 0; i < entries.length; i++) { entries[i] = null; } head.before = head.after = head; return this; }\n\n    ### Response:",
        "ground_truth": "Clears the map.",
        "predict": " Unregisters a stream instance by protocol.\n\n@param string $protocol\n\n@return self.\n\n    "
    },
    {
        "ID": 874,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (subs *Subtitles) toUploadParams() (map[string]interface{}, error) { langID := (*subs)[0].SubLanguageID params := map[string]interface{}{} params[\"baseinfo\"] = map[string]string{ \"sublanguageid\": langID, // FIXME add \"idmovieimdb\" } for i, s := range *subs { key := \"cd\" + strconv.Itoa(i+1) // keys are cd1, cd2, ... subParam := s.toUploadParams() encoded, err := s.encodeFile() if err != nil { return nil, err } subParam[\"subcontent\"] = encoded params[key] = subParam } return params, nil }\n\n    ### Response: // Serialize Subtitle to OSDB's XMLRPC params when uploading..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public List<V> getAll(final String name) { LinkedList<V> values = new LinkedList<>(); int h = hash(name); int i = index(h); MapEntry<V> e = entries[i]; while (e != null) { if (e.hash == h && eq(name, e.key)) { values.addFirst(e.getValue()); } e = e.next; } return values; }\n\n    ### Response:",
        "ground_truth": "Returns all values associated with the name.",
        "predict": " // Serialize Subtitle to OSDB's XMLRPC params when uploading..\n\n    "
    },
    {
        "ID": 875,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (r *RemoteStatus) ExtraFileNameAndSize() (string, int64) { r.Lock() defer r.Unlock() if r.extraFileName == \"\" || time.Since(r.failingSince) < failureDisplayThreshold { return \"\", 0 } return r.extraFileName, int64(len(r.humanReadableBytesLocked())) }\n\n    ### Response: // ExtraFileNameAndSize returns the extra file name or an empty string for none and the size of the extra file..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public Iterator<Map.Entry<String, V>> iterator() { final MapEntry[] e = {head.after}; return new Iterator<Map.Entry<String, V>>() { @Override public boolean hasNext() { return e[0] != head; } @Override @SuppressWarnings(\"unchecked\") public Map.Entry<String, V> next() { if (!hasNext()) { throw new NoSuchElementException(\"No next() entry in the iteration\"); } MapEntry<V> next = e[0]; e[0] = e[0].after; return next; } @Override public void remove() { throw new UnsupportedOperationException(); } }; }\n\n    ### Response:",
        "ground_truth": "Returns iterator of all entries.",
        "predict": " // ExtraFileNameAndSize returns the extra file name or an empty string for none and the size of the extra file..\n\n    "
    },
    {
        "ID": 876,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function setDocblock($doc) { if (is_string($doc)) { $doc = trim($doc); $doc = new Docblock($doc); } $this->docblock = $doc; return $this; }\n\n    ### Response: Sets the docblock\n\n@param Docblock|string $doc\n@return $this.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public List<Map.Entry<String, V>> entries() { List<Map.Entry<String, V>> all = new LinkedList<>(); MapEntry<V> e = head.after; while (e != head) { all.add(e); e = e.after; } return all; }\n\n    ### Response:",
        "ground_truth": "Returns all the entries of this map. Case sensitivity does not influence\nthe returned list, it always contains all of the values.",
        "predict": " Sets the docblock\n\n@param Docblock|string $doc\n@return $this.\n\n    "
    },
    {
        "ID": 877,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def macronize_text(self, text): \"\"\"Return macronized form of text. E.g. \"Gallia est omnis divisa in partes tres,\" -> \"galli\u0101 est omnis d\u012bv\u012bsa in part\u0113s tr\u0113s ,\" :param text: raw text :return: macronized text :rtype : str \"\"\" macronized_words = [entry[2] for entry in self.macronize_tags(text)] return \" \".join(macronized_words)\n\n    ### Response: Return macronized form of text.\n\n        E.g. \"Gallia est omnis divisa in partes tres,\" ->\n        \"galli\u0101 est omnis d\u012bv\u012bsa in part\u0113s tr\u0113s ,\"\n\n        :param text: raw text\n        :return: macronized text\n        :rtype : str.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void grow(final int minCapacity) { final int oldCapacity = buffer.length; int newCapacity = oldCapacity << 1; if (newCapacity - minCapacity < 0) { // special case, min capacity is larger then a grow newCapacity = minCapacity + 512; } buffer = Arrays.copyOf(buffer, newCapacity); }\n\n    ### Response:",
        "ground_truth": "Grows the buffer.",
        "predict": " Return macronized form of text.\n\n        E.g. \"Gallia est omnis divisa in partes tres,\" ->\n        \"galli\u0101 est omnis d\u012bv\u012bsa in part\u0113s tr\u0113s ,\"\n\n        :param text: raw text\n        :return: macronized text\n        :rtype : str.\n\n    "
    },
    {
        "ID": 878,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SuppressWarnings(\"unchecked\") protected final Schema doGenerate(TypeToken<?> typeToken, Set<String> knownRecords, boolean acceptRecursion) throws UnsupportedTypeException { Type type = typeToken.getType(); Class<?> rawType = typeToken.getRawType(); if (SIMPLE_SCHEMAS.containsKey(rawType)) { return SIMPLE_SCHEMAS.get(rawType); } // Enum type, simply use all the enum constants for ENUM schema. if (rawType.isEnum()) { return Schema.enumWith((Class<Enum<?>>) rawType); } // Java array, use ARRAY schema. if (rawType.isArray()) { Schema componentSchema = doGenerate(TypeToken.of(rawType.getComponentType()), knownRecords, acceptRecursion); if (rawType.getComponentType().isPrimitive()) { return Schema.arrayOf(componentSchema); } return Schema.arrayOf(Schema.unionOf(componentSchema, Schema.of(Schema.Type.NULL))); } if (!(type instanceof Class || type instanceof ParameterizedType)) { throw new UnsupportedTypeException(\"Type \" + type + \" is not supported. \" + \"Only Class or ParameterizedType are supported.\"); } // Any parameterized Collection class would be represented by ARRAY schema. if (Collection.class.isAssignableFrom(rawType)) { if (!(type instanceof ParameterizedType)) { throw new UnsupportedTypeException(\"Only supports parameterized Collection type.\"); } TypeToken<?> componentType = typeToken.resolveType(((ParameterizedType) type).getActualTypeArguments()[0]); Schema componentSchema = doGenerate(componentType, knownRecords, acceptRecursion); return Schema.arrayOf(Schema.unionOf(componentSchema, Schema.of(Schema.Type.NULL))); } // Java Map, use MAP schema. if (Map.class.isAssignableFrom(rawType)) { if (!(type instanceof ParameterizedType)) { throw new UnsupportedTypeException(\"Only supports parameterized Map type.\"); } Type[] typeArgs = ((ParameterizedType) type).getActualTypeArguments(); TypeToken<?> keyType = typeToken.resolveType(typeArgs[0]); TypeToken<?> valueType = typeToken.resolveType(typeArgs[1]); Schema valueSchema = doGenerate(valueType, knownRecords, acceptRecursion); return Schema.mapOf(doGenerate(keyType, knownRecords, acceptRecursion), Schema.unionOf(valueSchema, Schema.of(Schema.Type.NULL))); } // Any Java class, class name as the record name. String recordName = typeToken.getRawType().getName(); if (knownRecords.contains(recordName)) { // Record already seen before if (acceptRecursion) { // simply create a reference RECORD schema by the name. return Schema.recordOf(recordName); } else { throw new UnsupportedTypeException(\"Recursive type not supported for class \" + recordName); } } // Delegate to child class to generate RECORD schema. return generateRecord(typeToken, knownRecords, acceptRecursion); }\n\n    ### Response: Actual schema generation. It recursively resolves container types.\n\n@param typeToken    Encapsulate the Java type for generating a {@link Schema}.\n@param knownRecords Set of record names that has the schema already generated. It is used for\nrecursive class field references.\n@param acceptRecursion Whether to tolerate type recursion. If false, will throw UnsupportedTypeException if\na recursive type is encountered.\n@return A {@link Schema} representing the given java {@link java.lang.reflect.Type}.\n@throws UnsupportedTypeException Indicates schema generation is not support for the\ngiven java {@link java.lang.reflect.Type}..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public FastCharBuffer append(final CharSequence csq, final int start, final int end) { for (int i = start; i < end; i++) { append(csq.charAt(i)); } return this; }\n\n    ### Response:",
        "ground_truth": "Appends character sequence to buffer.",
        "predict": " Actual schema generation. It recursively resolves container types.\n\n@param typeToken    Encapsulate the Java type for generating a {@link Schema}.\n@param knownRecords Set of record names that has the schema already generated. It is used for\nrecursive class field references.\n@param acceptRecursion Whether to tolerate type recursion. If false, will throw UnsupportedTypeException if\na recursive type is encountered.\n@return A {@link Schema} representing the given java {@link java.lang.reflect.Type}.\n@throws UnsupportedTypeException Indicates schema generation is not support for the\ngiven java {@link java.lang.reflect.Type}..\n\n    "
    },
    {
        "ID": 879,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function loadFiles() { $this->searchAllConfigFiles($this->configDir); foreach ($this->configFiles as $fileKey => $filePath) { $this->loadConfigFile($fileKey, $filePath); } }\n\n    ### Response: Search and load all config files which has been found\n\n@return void.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public AnnotationVisitor visitAnnotation(final String desc, final boolean visible) { AnnotationVisitor destAnn = methodVisitor.visitAnnotation(desc, visible); // [A4] return new AnnotationVisitorAdapter(destAnn); }\n\n    ### Response:",
        "ground_truth": "Copies target method annotations.",
        "predict": " Search and load all config files which has been found\n\n@return void.\n\n    "
    },
    {
        "ID": 880,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static void safeOverwrite(Blob origBlob, InputStream content) { BlobStoreConnection connection = origBlob.getConnection(); String origId = origBlob.getId().toString(); // write new content to origId/new Blob newBlob = null; try { newBlob = connection.getBlob(new URI(origId + \"/new\"), null); copy(content, newBlob.openOutputStream(-1, false)); } catch (Throwable th) { // any error or exception here is an unrecoverable fault throw new FaultException(th); } // At this point, we have origId (with old content) and origId/new // rename origId to origId/old Blob oldBlob = null; try { oldBlob = rename(origBlob, origId + \"/old\"); } finally { if (oldBlob == null) { // rename failed; attempt recovery before throwing the fault try { delete(newBlob); } catch (Throwable th) { logger.error(\"Failed to delete \" + newBlob.getId() + \" while\" + \" recovering from rename failure during safe\" + \" overwrite\", th); } } } // At this point, we have origId/old and origId/new // rename origId/new to origId boolean successful = false; try { rename(newBlob, origId); successful = true; } finally { if (!successful) { // rename failed; attempt recovery before throwing the fault try { rename(oldBlob, origId); } catch (Throwable th) { logger.error(\"Failed to rename \" + oldBlob.getId() + \" to \" + origId + \" while recovering from rename\" + \" failure during safe overwrite\", th); } try { newBlob.delete(); } catch (Throwable th) { logger.error(\"Failed to delete \" + newBlob.getId() + \" while recovering from rename\" + \" failure during safe overwrite\", th); } } } // At this point, we have origId (with new content) and origId/old // remove origId/old; we don't need it anymore try { delete(oldBlob); } catch (Throwable th) { logger.error(\"Failed to delete \" + oldBlob.getId() + \" while cleaning up after committed\" + \" safe overwrite\", th); } }\n\n    ### Response: Overwrites the content of the given blob in a way that guarantees the\noriginal content is not destroyed until the replacement is successfully\nput in its place..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public void visitEnd() { createFirstChainDelegate_Continue(tmd); for (int p = 0; p < tmd.proxyData.length; p++) { tmd.selectCurrentProxy(p); createProxyMethod(tmd); } }\n\n    ### Response:",
        "ground_truth": "Finally, builds proxy methods if applied to current method.",
        "predict": " Overwrites the content of the given blob in a way that guarantees the\noriginal content is not destroyed until the replacement is successfully\nput in its place..\n\n    "
    },
    {
        "ID": 881,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func MsgToCorePlugin(msg *Plugin) core.Plugin { pl := &SubPlugin{ typeName: msg.TypeName, name: msg.Name, version: int(msg.Version), } return core.Plugin(pl) }\n\n    ### Response: // Converts Plugin protobuf message to core.Plugin.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void createFirstChainDelegate_Start() { // check invalid access flags int access = msign.getAccessFlags(); if (!wd.allowFinalMethods) { if ((access & AsmUtil.ACC_FINAL) != 0) { // detect final throw new ProxettaException( \"Unable to create proxy for final method: \" + msign + \". Remove final modifier or change the pointcut definition.\"); } } // create proxy methods tmd = new TargetMethodData(msign, aspectList); access &= ~ACC_NATIVE; access &= ~ACC_ABSTRACT; methodVisitor = wd.dest.visitMethod( access, tmd.msign.getMethodName(), tmd.msign.getDescription(), tmd.msign.getAsmMethodSignature(), null); }\n\n    ### Response:",
        "ground_truth": "Starts creation of first chain delegate.",
        "predict": " // Converts Plugin protobuf message to core.Plugin.\n\n    "
    },
    {
        "ID": 882,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function get_allowed_query_vars( $request = null ) { global $wp; /** * Filter the publicly allowed query vars. * * Allows adjusting of the default query vars that are made public. * * @param array Array of allowed WP_Query query vars. */ $valid_vars = apply_filters( 'query_vars', $wp->public_query_vars ); $post_type_obj = get_post_type_object( $this->post_type ); if ( current_user_can( $post_type_obj->cap->edit_posts ) ) { /** * Filter the allowed 'private' query vars for authorized users. * * If the user has the `edit_posts` capability, we also allow use of * private query parameters, which are only undesirable on the * frontend, but are safe for use in query strings. * * To disable anyway, use * `add_filter( 'rest_private_query_vars', '__return_empty_array' );` * * @param array $private_query_vars Array of allowed query vars for authorized users. * } */ $private = apply_filters( 'rest_private_query_vars', $wp->private_query_vars ); $valid_vars = array_merge( $valid_vars, $private ); } // Define our own in addition to WP's normal vars. $rest_valid = array( 'author__in', 'author__not_in', 'ignore_sticky_posts', 'menu_order', 'offset', 'post__in', 'post__not_in', 'post_parent', 'post_parent__in', 'post_parent__not_in', 'posts_per_page', 'date_query', ); $valid_vars = array_merge( $valid_vars, $rest_valid ); /** * Filter allowed query vars for the REST API. * * This filter allows you to add or remove query vars from the final allowed * list for all requests, including unauthenticated ones. To alter the * vars for editors only, {@see rest_private_query_vars}. * * @param array { * Array of allowed WP_Query query vars. * * @param string $allowed_query_var The query var to allow. * @param WP_REST_Request $request Request object. * } */ $valid_vars = apply_filters( 'rest_query_vars', $valid_vars, $request ); return $valid_vars; }\n\n    ### Response: Get all the WP Query vars that are allowed for the API request.\n\n@param WP_REST_Request $request Full details about the request.\n@return array.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void createFirstChainDelegate_Continue(final TargetMethodData tmd) { methodVisitor.visitCode(); if (tmd.msign.isStatic) { loadStaticMethodArguments(methodVisitor, tmd.msign); methodVisitor.visitMethodInsn( INVOKESTATIC, wd.thisReference, tmd.firstMethodName(), tmd.msign.getDescription(), false); } else { loadSpecialMethodArguments(methodVisitor, tmd.msign); methodVisitor.visitMethodInsn( INVOKESPECIAL, wd.thisReference, tmd.firstMethodName(), tmd.msign.getDescription(), false); } visitReturn(methodVisitor, tmd.msign, false); methodVisitor.visitMaxs(0, 0); methodVisitor.visitEnd(); }\n\n    ### Response:",
        "ground_truth": "Continues the creation of the very first method in calling chain that simply delegates invocation to the first proxy method.\nThis method mirrors the target method.",
        "predict": " Get all the WP Query vars that are allowed for the API request.\n\n@param WP_REST_Request $request Full details about the request.\n@return array.\n\n    "
    },
    {
        "ID": 883,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function createAddressBook($bookName) { if (empty($bookName)) { return $this->handleError('Empty book name'); } $data = array('bookName' => $bookName); $requestResult = $this->sendRequest('addressbooks', 'POST', $data); return $this->handleResult($requestResult); }\n\n    ### Response: Create address book\n\n@param $bookName\n\n@return stdClass.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Path parse(final String path) { return path == null ? new Path() : new Path(StringUtil.splitc(path, '.')); }\n\n    ### Response:",
        "ground_truth": "Parses input dot-separated string that represents a path.",
        "predict": " Create address book\n\n@param $bookName\n\n@return stdClass.\n\n    "
    },
    {
        "ID": 884,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function generateKey ( $unique = false ) { $key = md5(uniqid(rand(), true)); if ($unique) { list($usec,$sec) = explode(' ',microtime()); $key .= dechex($usec).dechex($sec); } return $key; }\n\n    ### Response: Generate a unique key\n\n@param boolean unique\tforce the key to be unique\n@return string.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Path push(final CharSequence field) { _push(field); if (altPath != null) { altPath.push(field); } return this; }\n\n    ### Response:",
        "ground_truth": "Push element to the path.",
        "predict": " Generate a unique key\n\n@param boolean unique\tforce the key to be unique\n@return string.\n\n    "
    },
    {
        "ID": 885,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function isInt() { return (is_numeric($this->string) && !$this->contains(\".\") && !$this->contains(\"x\")) ? TRUE : FALSE; }\n\n    ### Response: Returns TRUE if the string is a numeric value.\n\n@return boolean.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void configureServletContext(final ServletContext servletContext) { servletContext.addListener(jodd.servlet.RequestContextListener.class); if (decoraEnabled) { final FilterRegistration filter = servletContext.addFilter(\"decora\", jodd.decora.DecoraServletFilter.class); filter.addMappingForUrlPatterns(null, true, contextPath); } final FilterRegistration filter = servletContext.addFilter(\"madvoc\", jodd.madvoc.MadvocServletFilter.class); filter.addMappingForUrlPatterns(madvocDispatcherTypes, true, contextPath); }\n\n    ### Response:",
        "ground_truth": "Configures servlet context.",
        "predict": " Returns TRUE if the string is a numeric value.\n\n@return boolean.\n\n    "
    },
    {
        "ID": 886,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function folder($root) { $path = $root.'app/mails'; if (!File::isDirectory($path)) { File::makeDirectory($path); } return $path; }\n\n    ### Response: The Instante creation for mail folder.\n\n@return string.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Object execute() { String methodName = targetMethodName(); Class returnType = returnType(); Object next = pathref.continueWith(this, methodName, returnType); return ProxyTarget.returnValue(next); }\n\n    ### Response:",
        "ground_truth": "Reads method name and appends it. Creates object for next call and\nreturns that value. If next object is unsupported, it will return null;",
        "predict": " The Instante creation for mail folder.\n\n@return string.\n\n    "
    },
    {
        "ID": 887,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function(workingDate, cell) { Dom.addClass(cell, this.Style.CSS_CELL_OOB); cell.innerHTML = workingDate.getDate(); return Calendar.STOP_RENDER; }\n\n    ### Response: BEGIN BUILT-IN TABLE CELL RENDERERS \nRenders a cell that falls before the minimum date or after the maximum date.\nwidget class.\n@method renderOutOfBoundsDate\n@param {Date}     workingDate  The current working Date object being used to generate the calendar\n@param {HTMLTableCellElement} cell   The current working cell in the calendar\n@return {String} YAHOO.widget.Calendar.STOP_RENDER if rendering should stop with this style, null or nothing if rendering\nshould not be terminated.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public FieldDescriptor[] getAllFieldDescriptors() { if (allFields == null) { FieldDescriptor[] allFields = new FieldDescriptor[fieldsMap.size()]; int index = 0; for (FieldDescriptor fieldDescriptor : fieldsMap.values()) { allFields[index] = fieldDescriptor; index++; } Arrays.sort(allFields, Comparator.comparing(fd -> fd.getField().getName())); this.allFields = allFields; } return allFields; }\n\n    ### Response:",
        "ground_truth": "Returns all fields of this collection. Returns empty array\nif no fields exist. Initialized lazy.",
        "predict": " BEGIN BUILT-IN TABLE CELL RENDERERS \nRenders a cell that falls before the minimum date or after the maximum date.\nwidget class.\n@method renderOutOfBoundsDate\n@param {Date}     workingDate  The current working Date object being used to generate the calendar\n@param {HTMLTableCellElement} cell   The current working cell in the calendar\n@return {String} YAHOO.widget.Calendar.STOP_RENDER if rendering should stop with this style, null or nothing if rendering\nshould not be terminated.\n\n    "
    },
    {
        "ID": 888,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def tensor(self, field_name, tensor_ind): \"\"\" Returns the tensor for a given field and tensor index. Parameters ---------- field_name : str the name of the field to load tensor_index : int the index of the tensor Returns ------- :obj:`Tensor` the desired tensor \"\"\" if tensor_ind == self._tensor_cache_file_num[field_name]: return self._tensors[field_name] filename = self.generate_tensor_filename(field_name, tensor_ind, compressed=True) Tensor.load(filename, compressed=True, prealloc=self._tensors[field_name]) self._tensor_cache_file_num[field_name] = tensor_ind return self._tensors[field_name]\n\n    ### Response: Returns the tensor for a given field and tensor index.\n\n        Parameters\n        ----------\n        field_name : str\n            the name of the field to load\n        tensor_index : int\n            the index of the tensor\n\n        Returns\n        -------\n        :obj:`Tensor`\n            the desired tensor.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SuppressWarnings(\"unchecked\") @Override protected <T> BeanDefinition<T> createBeanDefinitionForRegistration( final String name, Class<T> type, final Scope scope, final WiringMode wiringMode, final Consumer<T> consumer) { if (proxetta != null) { final Class originalType = type; final ProxettaFactory builder = proxetta.proxy(); builder.setTarget(type); type = builder.define(); return new ProxettaBeanDefinition( name, type, scope, wiringMode, originalType, proxetta.getAspects(new ProxyAspect[0]), consumer); } return super.createBeanDefinitionForRegistration(name, type, scope, wiringMode, consumer); }\n\n    ### Response:",
        "ground_truth": "Applies proxetta on bean class before bean registration.",
        "predict": " Returns the tensor for a given field and tensor index.\n\n        Parameters\n        ----------\n        field_name : str\n            the name of the field to load\n        tensor_index : int\n            the index of the tensor\n\n        Returns\n        -------\n        :obj:`Tensor`\n            the desired tensor.\n\n    "
    },
    {
        "ID": 889,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (s *VPNService) NewUpdateVpnConnectionParams(id string) *UpdateVpnConnectionParams { p := &UpdateVpnConnectionParams{} p.p = make(map[string]interface{}) p.p[\"id\"] = id return p }\n\n    ### Response: // You should always use this function to get a new UpdateVpnConnectionParams instance,\n// as then you are sure you have configured all required params.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static DbTransactionMode convertToDbMode(final JtxTransactionMode txMode) { final int isolation; switch (txMode.getIsolationLevel()) { case ISOLATION_DEFAULT: isolation = DbTransactionMode.ISOLATION_DEFAULT; break; case ISOLATION_NONE: isolation = DbTransactionMode.ISOLATION_NONE; break; case ISOLATION_READ_COMMITTED: isolation = DbTransactionMode.ISOLATION_READ_COMMITTED; break; case ISOLATION_READ_UNCOMMITTED: isolation = DbTransactionMode.ISOLATION_READ_UNCOMMITTED; break; case ISOLATION_REPEATABLE_READ: isolation = DbTransactionMode.ISOLATION_REPEATABLE_READ; break; case ISOLATION_SERIALIZABLE: isolation = DbTransactionMode.ISOLATION_SERIALIZABLE; break; default: throw new IllegalArgumentException(); } return new DbTransactionMode(isolation, txMode.isReadOnly()); }\n\n    ### Response:",
        "ground_truth": "Converter JTX transaction mode to DB transaction mode.",
        "predict": " // You should always use this function to get a new UpdateVpnConnectionParams instance,\n// as then you are sure you have configured all required params.\n\n    "
    },
    {
        "ID": 890,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def clone_layer(layer, keep_selection=True): \"\"\"Duplicate the layer by taking the same source and copying keywords. :param keep_selection: If we should keep the selection. Default to true. :type keep_selection: bool :param layer: Layer to be duplicated. :type layer: QgsMapLayer :return: The new QgsMapLayer object. :rtype: QgsMapLayer \"\"\" if is_vector_layer(layer): new_layer = QgsVectorLayer( layer.source(), layer.name(), layer.providerType()) if keep_selection and layer.selectedFeatureCount() > 0: request = QgsFeatureRequest() request.setFilterFids(layer.selectedFeatureIds()) request.setFlags(QgsFeatureRequest.NoGeometry) iterator = layer.getFeatures(request) new_layer.setSelectedFeatures([k.id() for k in iterator]) else: new_layer = QgsRasterLayer( layer.source(), layer.name(), layer.providerType()) new_layer.keywords = copy_layer_keywords(layer.keywords) return layer\n\n    ### Response: Duplicate the layer by taking the same source and copying keywords.\n\n    :param keep_selection: If we should keep the selection. Default to true.\n    :type keep_selection: bool\n\n    :param layer: Layer to be duplicated.\n    :type layer: QgsMapLayer\n\n    :return: The new QgsMapLayer object.\n    :rtype: QgsMapLayer.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private Object readProperty(final Object source, final PropertyDescriptor propertyDescriptor) { Getter getter = propertyDescriptor.getGetter(declared); if (getter != null) { try { return getter.invokeGetter(source); } catch (Exception ex) { throw new JsonException(ex); } } return null; }\n\n    ### Response:",
        "ground_truth": "Reads property using property descriptor.",
        "predict": " Duplicate the layer by taking the same source and copying keywords.\n\n    :param keep_selection: If we should keep the selection. Default to true.\n    :type keep_selection: bool\n\n    :param layer: Layer to be duplicated.\n    :type layer: QgsMapLayer\n\n    :return: The new QgsMapLayer object.\n    :rtype: QgsMapLayer.\n\n    "
    },
    {
        "ID": 891,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def get_sequence_lengths(fastafilenames): \"\"\"Returns dictionary of sequence lengths, keyed by organism. Biopython's SeqIO module is used to parse all sequences in the FASTA file corresponding to each organism, and the total base count in each is obtained. NOTE: ambiguity symbols are not discounted. \"\"\" tot_lengths = {} for fn in fastafilenames: tot_lengths[os.path.splitext(os.path.split(fn)[-1])[0]] = \\ sum([len(s) for s in SeqIO.parse(fn, 'fasta')]) return tot_lengths\n\n    ### Response: Returns dictionary of sequence lengths, keyed by organism.\n\n    Biopython's SeqIO module is used to parse all sequences in the FASTA\n    file corresponding to each organism, and the total base count in each\n    is obtained.\n\n    NOTE: ambiguity symbols are not discounted..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public void putAll(final Map t) { for (Object o : t.entrySet()) { Map.Entry e = (Map.Entry) o; put(e.getKey(), e.getValue()); } }\n\n    ### Response:",
        "ground_truth": "Copies all of the mappings from the specified map to this one.\nThese mappings replace any mappings that this map had for any of the\nkeys currently in the specified Map.\n\n@param t Mappings to be stored in this map.",
        "predict": " Returns dictionary of sequence lengths, keyed by organism.\n\n    Biopython's SeqIO module is used to parse all sequences in the FASTA\n    file corresponding to each organism, and the total base count in each\n    is obtained.\n\n    NOTE: ambiguity symbols are not discounted..\n\n    "
    },
    {
        "ID": 892,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function persist(UserInterface $user) { $session = new PersistentSession(); $session->email = $this->email; $session->series = $this->hash($this->series); $session->token = $this->hash($this->token); $session->user_id = $user->id(); $session->two_factor_verified = $user->isTwoFactorVerified(); try { $session->save(); } catch (\\Exception $e) { throw new \\Exception(\"Unable to save persistent session for user # {$user->id()}: \".$e->getMessage()); } return $session; }\n\n    ### Response: Persists this cookie to the database.\n\n@param UserInterface $user\n\n@throws \\Exception when the model cannot be saved.\n\n@return PersistentSession.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Buffer append(final Buffer buffer) { if (buffer.list.isEmpty()) { // nothing to append return buffer; } list.addAll(buffer.list); last = buffer.last; size += buffer.size; return this; }\n\n    ### Response:",
        "ground_truth": "Appends other buffer to this one.",
        "predict": " Persists this cookie to the database.\n\n@param UserInterface $user\n\n@throws \\Exception when the model cannot be saved.\n\n@return PersistentSession.\n\n    "
    },
    {
        "ID": 893,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function addServer($url, $weight = null, $mock = null) { $this->servers[$url] = $weight; }\n\n    ### Response: Adds mongo server\n@param string $url URL\n@param integer $weight Weight\n@param mixed $mock @deprecated\n@return void.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void writeTo(final Writer writer) throws IOException { for (Object o : list) { if (o instanceof FastByteBuffer) { FastByteBuffer fastByteBuffer = (FastByteBuffer) o; byte[] array = fastByteBuffer.toArray(); writer.write(new String(array, StringPool.ISO_8859_1)); } else if (o instanceof Uploadable) { Uploadable uploadable = (Uploadable) o; InputStream inputStream = uploadable.openInputStream(); try { StreamUtil.copy(inputStream, writer, StringPool.ISO_8859_1); } finally { StreamUtil.close(inputStream); } } } }\n\n    ### Response:",
        "ground_truth": "Writes content to the writer.",
        "predict": " Adds mongo server\n@param string $url URL\n@param integer $weight Weight\n@param mixed $mock @deprecated\n@return void.\n\n    "
    },
    {
        "ID": 894,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static double[] getCol(double[][] m1, int col) { double[] ret = new double[m1.length]; for(int i = 0; i < ret.length; i++) { ret[i] = m1[i][col]; } return ret; }\n\n    ### Response: Get a column from a matrix as vector.\n\n@param m1 Matrix to extract the column from\n@param col Column number\n@return Column.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void writeTo(final OutputStream out) throws IOException { for (Object o : list) { if (o instanceof FastByteBuffer) { FastByteBuffer fastByteBuffer = (FastByteBuffer) o; out.write(fastByteBuffer.toArray()); } else if (o instanceof Uploadable) { Uploadable uploadable = (Uploadable) o; InputStream inputStream = uploadable.openInputStream(); try { StreamUtil.copy(inputStream, out); } finally { StreamUtil.close(inputStream); } } } }\n\n    ### Response:",
        "ground_truth": "Writes content to the output stream.",
        "predict": " Get a column from a matrix as vector.\n\n@param m1 Matrix to extract the column from\n@param col Column number\n@return Column.\n\n    "
    },
    {
        "ID": 895,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void remove(byte b, String s) { Collection c = getAsCollection(b); c.remove(s); set(b, c); }\n\n    ### Response: Remove the line s from the field b.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void writeTo(final OutputStream out, final HttpProgressListener progressListener) throws IOException { // start final int size = size(); final int callbackSize = progressListener.callbackSize(size); int count = 0; // total count int step = 0; // step is offset in current chunk progressListener.transferred(count); // loop for (Object o : list) { if (o instanceof FastByteBuffer) { FastByteBuffer fastByteBuffer = (FastByteBuffer) o; byte[] bytes = fastByteBuffer.toArray(); int offset = 0; while (offset < bytes.length) { // calc the remaining sending chunk size int chunk = callbackSize - step; // check if this chunk size fits the bytes array if (offset + chunk > bytes.length) { chunk = bytes.length - offset; } // writes the chunk out.write(bytes, offset, chunk); offset += chunk; step += chunk; count += chunk; // listener if (step >= callbackSize) { progressListener.transferred(count); step -= callbackSize; } } } else if (o instanceof Uploadable) { Uploadable uploadable = (Uploadable) o; InputStream inputStream = uploadable.openInputStream(); int remaining = uploadable.getSize(); try { while (remaining > 0) { // calc the remaining sending chunk size int chunk = callbackSize - step; // check if this chunk size fits the remaining size if (chunk > remaining) { chunk = remaining; } // writes remaining chunk StreamUtil.copy(inputStream, out, chunk); remaining -= chunk; step += chunk; count += chunk; // listener if (step >= callbackSize) { progressListener.transferred(count); step -= callbackSize; } } } finally { StreamUtil.close(inputStream); } } } // end if (step != 0) { progressListener.transferred(count); } }\n\n    ### Response:",
        "ground_truth": "Writes content to the output stream, using progress listener to track the sending progress.",
        "predict": " Remove the line s from the field b.\n\n    "
    },
    {
        "ID": 896,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void revoke(User revoker, String serial, String aki, String reason) throws RevocationException, InvalidArgumentException { revokeInternal(revoker, serial, aki, reason, false); }\n\n    ### Response: revoke one certificate\n\n@param revoker admin user who has revoker attribute configured in CA-server\n@param serial  serial number of the certificate to be revoked\n@param aki     aki of the certificate to be revoke\n@param reason  revoke reason, see RFC 5280\n@throws RevocationException\n@throws InvalidArgumentException.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String getString(final String key) { CharSequence cs = (CharSequence) map.get(key); return cs == null ? null : cs.toString(); }\n\n    ### Response:",
        "ground_truth": "Returns the string value with the specified key.",
        "predict": " revoke one certificate\n\n@param revoker admin user who has revoker attribute configured in CA-server\n@param serial  serial number of the certificate to be revoked\n@param aki     aki of the certificate to be revoke\n@param reason  revoke reason, see RFC 5280\n@throws RevocationException\n@throws InvalidArgumentException.\n\n    "
    },
    {
        "ID": 897,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def dropout(attrs, inputs, proto_obj): \"\"\"Dropout Regularization.\"\"\" mode = 'training' if 'is_test' in attrs and attrs['is_test'] == 0: mode = 'always' new_attrs = translation_utils._fix_attribute_names(attrs, {'ratio': 'p'}) new_attrs = translation_utils._remove_attributes(new_attrs, ['is_test']) new_attrs = translation_utils._add_extra_attributes(new_attrs, {'mode': mode}) return 'Dropout', new_attrs, inputs\n\n    ### Response: Dropout Regularization..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Integer getInteger(final String key) { Number number = (Number) map.get(key); if (number == null) { return null; } if (number instanceof Integer) { return (Integer) number; } return number.intValue(); }\n\n    ### Response:",
        "ground_truth": "returns the integer value with the specified key.",
        "predict": " Dropout Regularization..\n\n    "
    },
    {
        "ID": 898,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    StatementDMQL compileUpdateStatement(RangeVariable[] outerRanges) { read(); Expression[] updateExpressions; int[] columnMap; boolean[] columnCheckList; OrderedHashSet colNames = new OrderedHashSet(); HsqlArrayList exprList = new HsqlArrayList(); RangeVariable[] rangeVariables = { readSimpleRangeVariable(StatementTypes.UPDATE_WHERE) }; Table table = rangeVariables[0].rangeTable; Table baseTable = table.getBaseTable(); readThis(Tokens.SET); readSetClauseList(rangeVariables, colNames, exprList); columnMap = table.getColumnIndexes(colNames); columnCheckList = table.getColumnCheckList(columnMap); updateExpressions = new Expression[exprList.size()]; exprList.toArray(updateExpressions); Expression condition = null; if (token.tokenType == Tokens.WHERE) { read(); condition = XreadBooleanValueExpression(); HsqlList unresolved = condition.resolveColumnReferences(outerRanges, null); unresolved = Expression.resolveColumnSet(rangeVariables, unresolved, null); ExpressionColumn.checkColumnsResolved(unresolved); condition.resolveTypes(session, null); if (condition.isParam()) { condition.dataType = Type.SQL_BOOLEAN; } else if (condition.getDataType() != Type.SQL_BOOLEAN) { throw Error.error(ErrorCode.X_42568); } } resolveUpdateExpressions(table, rangeVariables, columnMap, updateExpressions, outerRanges); if (baseTable != null && table != baseTable) { QuerySpecification select = ((TableDerived) table).getQueryExpression().getMainSelect(); if (condition != null) { condition = condition.replaceColumnReferences(rangeVariables[0], select.exprColumns); } rangeVariables[0] = new RangeVariable(select.rangeVariables[0]); condition = ExpressionLogical.andExpressions(select.queryCondition, condition); } if (condition != null) { RangeVariableResolver resolver = new RangeVariableResolver(rangeVariables, condition, compileContext); resolver.processConditions(); rangeVariables = resolver.rangeVariables; } if (baseTable != null && table != baseTable) { int[] baseColumnMap = table.getBaseTableColumnMap(); int[] newColumnMap = new int[columnMap.length]; ArrayUtil.projectRow(baseColumnMap, columnMap, newColumnMap); columnMap = newColumnMap; } StatementDMQL cs = new StatementDML(session, table, rangeVariables, columnMap, updateExpressions, columnCheckList, compileContext); return cs; }\n\n    ### Response: Creates an UPDATE-type Statement from this parse context..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Long getLong(final String key) { Number number = (Number) map.get(key); if (number == null) { return null; } if (number instanceof Long) { return (Long) number; } return number.longValue(); }\n\n    ### Response:",
        "ground_truth": "Returns the long value with the specified key.",
        "predict": " Creates an UPDATE-type Statement from this parse context..\n\n    "
    },
    {
        "ID": 899,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private Chain<ApiRequest> createRequestChain(IAsyncHandler<ApiRequest> requestHandler) { RequestChain chain = new RequestChain(policyImpls, context); chain.headHandler(requestHandler); chain.policyFailureHandler(failure -> { // Jump straight to the response leg. // It will likely not have been initialised, so create one. if (responseChain == null) { // Its response will not be used as we take the failure path only, so we just use an empty lambda. responseChain = createResponseChain((ignored) -> {}); } responseChain.doFailure(failure); }); chain.policyErrorHandler(policyErrorHandler); return chain; }\n\n    ### Response: Creates the chain used to apply policies in order to the api request..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Double getDouble(final String key) { Number number = (Number) map.get(key); if (number == null) { return null; } if (number instanceof Double) { return (Double) number; } return number.doubleValue(); }\n\n    ### Response:",
        "ground_truth": "Returns the double value with the specified key.",
        "predict": " Creates the chain used to apply policies in order to the api request..\n\n    "
    },
    {
        "ID": 900,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def iter_multi_items(mapping): \"\"\"Iterates over the items of a mapping yielding keys and values without dropping any from more complex structures. \"\"\" if isinstance(mapping, MultiDict): for item in iteritems(mapping, multi=True): yield item elif isinstance(mapping, dict): for key, value in iteritems(mapping): if isinstance(value, (tuple, list)): for value in value: yield key, value else: yield key, value else: for item in mapping: yield item\n\n    ### Response: Iterates over the items of a mapping yielding keys and values\n    without dropping any from more complex structures..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Float getFloat(final String key) { Number number = (Number) map.get(key); if (number == null) { return null; } if (number instanceof Float) { return (Float) number; } return number.floatValue(); }\n\n    ### Response:",
        "ground_truth": "Returns the float value with the specified key.",
        "predict": " Iterates over the items of a mapping yielding keys and values\n    without dropping any from more complex structures..\n\n    "
    },
    {
        "ID": 901,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private Identity fetch(final String token) throws IOException { final String uri = new Href(this.api).path(\"user\") .with(PsGithub.ACCESS_TOKEN, token).toString(); return PsGithub.parse( new JdkRequest(uri) .header(\"accept\", \"application/json\") .fetch().as(RestResponse.class) .assertStatus(HttpURLConnection.HTTP_OK) .as(JsonResponse.class).json().readObject() ); }\n\n    ### Response: Get user name from Github, with the token provided.\n@param token Github access token\n@return The user found in Github\n@throws IOException If fails.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SuppressWarnings(\"unchecked\") public <T> T getValue(final String key) { T val = (T) map.get(key); if (val instanceof Map) { return (T) new JsonObject((Map) val); } if (val instanceof List) { return (T) new JsonArray((List) val); } return val; }\n\n    ### Response:",
        "ground_truth": "Returns the value with the specified key, as an object.",
        "predict": " Get user name from Github, with the token provided.\n@param token Github access token\n@return The user found in Github\n@throws IOException If fails.\n\n    "
    },
    {
        "ID": 902,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func NewDirectIOFromFIFOSet(ctx context.Context, stdin io.WriteCloser, stdout, stderr io.ReadCloser, fifos *FIFOSet) *DirectIO { _, cancel := context.WithCancel(ctx) pipes := pipes{ Stdin: stdin, Stdout: stdout, Stderr: stderr, } return &DirectIO{ pipes: pipes, cio: cio{ config: fifos.Config, closers: append(pipes.closers(), fifos), cancel: cancel, }, } }\n\n    ### Response: // NewDirectIOFromFIFOSet returns an IO implementation that exposes the IO streams as io.ReadCloser\n// and io.WriteCloser..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public JsonObject put(final String key, final String value) { Objects.requireNonNull(key); map.put(key, value); return this; }\n\n    ### Response:",
        "ground_truth": "Puts a string into the JSON object with the specified key.",
        "predict": " // NewDirectIOFromFIFOSet returns an IO implementation that exposes the IO streams as io.ReadCloser\n// and io.WriteCloser..\n\n    "
    },
    {
        "ID": 903,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (h *netlinkHandle) DeleteDummyDevice(devName string) error { link, err := h.LinkByName(devName) if err != nil { _, ok := err.(netlink.LinkNotFoundError) if ok { return nil } return fmt.Errorf(\"error deleting a non-exist dummy device: %s, %v\", devName, err) } dummy, ok := link.(*netlink.Dummy) if !ok { return fmt.Errorf(\"expect dummy device, got device type: %s\", link.Type()) } return h.LinkDel(dummy) }\n\n    ### Response: // DeleteDummyDevice is part of interface..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void useFolder(final String folderName) { closeFolderIfOpened(folder); try { this.folderName = folderName; this.folder = getService().getFolder(folderName); try { folder.open(Folder.READ_WRITE); } catch (final MailException ignore) { folder.open(Folder.READ_ONLY); } } catch (final MessagingException msgexc) { throw new MailException(\"Failed to connect to folder: \" + folderName, msgexc); } }\n\n    ### Response:",
        "ground_truth": "Opens new folder and closes previously opened folder.\n\n@param folderName Folder to open",
        "predict": " // DeleteDummyDevice is part of interface..\n\n    "
    },
    {
        "ID": 904,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def on_lstCategories_itemSelectionChanged(self): \"\"\"Update purpose description label. .. note:: This is an automatic Qt slot executed when the purpose selection changes. \"\"\" self.clear_further_steps() # Set widgets purpose = self.selected_purpose() # Exit if no selection if not purpose: return # Set description label self.lblDescribeCategory.setText(purpose[\"description\"]) self.lblIconCategory.setPixmap(QPixmap( resources_path('img', 'wizard', 'keyword-category-%s.svg' % (purpose['key'] or 'notset')))) # Enable the next button self.parent.pbnNext.setEnabled(True)\n\n    ### Response: Update purpose description label.\n\n        .. note:: This is an automatic Qt slot\n           executed when the purpose selection changes..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    ReceivedEmail[] receiveMessages( final EmailFilter filter, final Flags flagsToSet, final Flags flagsToUnset, final boolean envelope, final Consumer<Message[]> processedMessageConsumer) { useAndOpenFolderIfNotSet(); final Message[] messages; try { if (filter == null) { messages = folder.getMessages(); } else { messages = folder.search(filter.getSearchTerm()); } if (messages.length == 0) { return ReceivedEmail.EMPTY_ARRAY; } if (envelope) { final FetchProfile fetchProfile = new FetchProfile(); fetchProfile.add(FetchProfile.Item.ENVELOPE); fetchProfile.add(FetchProfile.Item.FLAGS); folder.fetch(messages, fetchProfile); } // process messages final ReceivedEmail[] emails = new ReceivedEmail[messages.length]; for (int i = 0; i < messages.length; i++) { final Message msg = messages[i]; // we need to parse message BEFORE flags are set! emails[i] = new ReceivedEmail(msg, envelope, attachmentStorage); if (!EmailUtil.isEmptyFlags(flagsToSet)) { emails[i].flags(flagsToSet); msg.setFlags(flagsToSet, true); } if (!EmailUtil.isEmptyFlags(flagsToUnset)) { emails[i].flags().remove(flagsToUnset); msg.setFlags(flagsToUnset, false); } if (EmailUtil.isEmptyFlags(flagsToSet) && !emails[i].isSeen()) { msg.setFlag(Flags.Flag.SEEN, false); } } if (processedMessageConsumer != null) { processedMessageConsumer.accept(messages); } // if messages were marked to be deleted, we need to expunge the folder if (!EmailUtil.isEmptyFlags(flagsToSet)) { if (flagsToSet.contains(Flags.Flag.DELETED)) { folder.expunge(); } } return emails; } catch (final MessagingException msgexc) { throw new MailException(\"Failed to fetch messages\", msgexc); } }\n\n    ### Response:",
        "ground_truth": "The main email receiving method.",
        "predict": " Update purpose description label.\n\n        .. note:: This is an automatic Qt slot\n           executed when the purpose selection changes..\n\n    "
    },
    {
        "ID": 905,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function extractPattern($string) { if (is_null($pattern = $this->getPattern())) { return $string; } preg_match_all(\"/$pattern/\", $string, $matches); return implode('', $matches[0]); }\n\n    ### Response: Extract a string pattern from a string.\n\n@param $string\n@return string.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void updateEmailFlags(final ReceivedEmail receivedEmail) { useAndOpenFolderIfNotSet(); try { folder.setFlags(new int[] {receivedEmail.messageNumber()}, receivedEmail.flags(),true); } catch (MessagingException mex) { throw new MailException(\"Failed to fetch messages\", mex); } }\n\n    ### Response:",
        "ground_truth": "Updates the email flags on the server.",
        "predict": " Extract a string pattern from a string.\n\n@param $string\n@return string.\n\n    "
    },
    {
        "ID": 906,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function(p){ this.x = Math.pow(this.x, p); this.y = Math.pow(this.y, p); return this; }\n\n    ### Response: Raises each component of the vector to the power p.\n@memberof Vec2#\n@returns {Vec2}.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void closeFolderIfOpened(final Folder folder) { if (folder != null) { try { folder.close(true); } catch (final MessagingException ignore) { } } }\n\n    ### Response:",
        "ground_truth": "Closes folder if opened and expunge deleted messages.",
        "predict": " Raises each component of the vector to the power p.\n@memberof Vec2#\n@returns {Vec2}.\n\n    "
    },
    {
        "ID": 907,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function printResponse() { $request = $this->request; $response = $this->response; echo sprintf( \"%s %s => %d:\\n%s\", $request->getMethod(), (string) ($request instanceof RequestInterface ? $request->getUri() : $request->getUrl()), $response->getStatusCode(), (string) $response->getBody() ); }\n\n    ### Response: Prints last response body.\n\n@Then print response.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    DbQueryNamedParameter lookupNamedParameter(final String name) { DbQueryNamedParameter p = rootNP; while (p != null) { if (p.equalsName(name)) { return p; } p = p.next; } return null; }\n\n    ### Response:",
        "ground_truth": "Lookup for named parameter.",
        "predict": " Prints last response body.\n\n@Then print response.\n\n    "
    },
    {
        "ID": 908,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static function checkChromeOs(Os $os, UserAgent $userAgent) { if (stripos($userAgent->getUserAgentString(), ' CrOS') !== false || stripos($userAgent->getUserAgentString(), 'CrOS ') !== false ) { $os->setName($os::CHROME_OS); if (preg_match('/Chrome\\/([\\d\\.]*)/i', $userAgent->getUserAgentString(), $matches)) { $os->setVersion($matches[1]); } return true; } return false; }\n\n    ### Response: Determine if the user's operating system is Chrome OS.\n\n@param Os $os\n@param UserAgent $userAgent\n\n@return bool.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected String alias(final String target) { return StringPool.LEFT_CHEV.concat(target).concat(StringPool.RIGHT_CHEV); }\n\n    ### Response:",
        "ground_truth": "Creates alias.",
        "predict": " Determine if the user's operating system is Chrome OS.\n\n@param Os $os\n@param UserAgent $userAgent\n\n@return bool.\n\n    "
    },
    {
        "ID": 909,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def process_array(value) value.split(\"\\n\").map { |s| s.to_s.strip }.compact.select { |s| !s.empty? } end\n\n    ### Response: Process array of strings.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected boolean validateAction(final String... profiles) { prepareValidator(); vtor.useProfiles(profiles); vtor.validate(this); vtor.resetProfiles(); List<Violation> violations = vtor.getViolations(); return violations == null; }\n\n    ### Response:",
        "ground_truth": "Validates action. Profiles are reset after the invocation.\n@return true if validation is successful, otherwise returns false",
        "predict": " Process array of strings.\n\n    "
    },
    {
        "ID": 910,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def update_presubscriptions(self, presubscriptions): \"\"\"Update pre-subscription data. Pre-subscription data will be removed for empty list. :param presubscriptions: list of `Presubscription` objects (Required) :returns: None \"\"\" api = self._get_api(mds.SubscriptionsApi) presubscriptions_list = [] for presubscription in presubscriptions: if not isinstance(presubscription, dict): presubscription = presubscription.to_dict() presubscription = { \"endpoint_name\": presubscription.get(\"device_id\", None), \"endpoint_type\": presubscription.get(\"device_type\", None), \"_resource_path\": presubscription.get(\"resource_paths\", None) } presubscriptions_list.append(PresubscriptionData(**presubscription)) return api.update_pre_subscriptions(presubscriptions_list)\n\n    ### Response: Update pre-subscription data. Pre-subscription data will be removed for empty list.\n\n        :param presubscriptions: list of `Presubscription` objects (Required)\n        :returns: None.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void addViolation(final String name, final Object invalidValue) { prepareValidator(); vtor.addViolation(new Violation(name, this, invalidValue)); }\n\n    ### Response:",
        "ground_truth": "Adds action violation.",
        "predict": " Update pre-subscription data. Pre-subscription data will be removed for empty list.\n\n        :param presubscriptions: list of `Presubscription` objects (Required)\n        :returns: None.\n\n    "
    },
    {
        "ID": 911,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public List<T> readAll(Reader reader, Collection<ParseError> parseErrors) throws IOException, ParseException { checkEntityConfig(); BufferedReader bufferedReader = new BufferedReaderLineCounter(reader); try { ParseError parseError = null; // we do this to reuse the parse error objects if we can if (parseErrors != null) { parseError = new ParseError(); } if (firstLineHeader) { if (readHeader(bufferedReader, parseError) == null) { if (parseError != null && parseError.isError()) { parseErrors.add(parseError); } return null; } } return readRows(bufferedReader, parseErrors); } finally { bufferedReader.close(); } }\n\n    ### Response: Read in all of the entities in the reader passed in. It will use an internal buffered reader.\n\n@param reader\nWhere to read the header and entities from. It will be closed when the method returns.\n@param parseErrors\nIf not null, any errors will be added to the collection and null will be returned. If validateHeader\nis true and the header does not match then no additional lines will be returned. If this is null then\na ParseException will be thrown on parsing problems.\n@return A list of entities read in or null if parseErrors is not null.\n@throws ParseException\nThrown on any parsing problems. If parseErrors is not null then parse errors will be added there and\nan exception should not be thrown.\n@throws IOException\nIf there are any IO exceptions thrown when reading..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public RawData as(final String mimeOrExtension) { if (mimeOrExtension.contains(StringPool.SLASH)) { this.mimeType = mimeOrExtension; } else { this.mimeType = MimeTypes.getMimeType(mimeOrExtension); } return this; }\n\n    ### Response:",
        "ground_truth": "Defines mime type by providing real mime type or just extension!",
        "predict": " Read in all of the entities in the reader passed in. It will use an internal buffered reader.\n\n@param reader\nWhere to read the header and entities from. It will be closed when the method returns.\n@param parseErrors\nIf not null, any errors will be added to the collection and null will be returned. If validateHeader\nis true and the header does not match then no additional lines will be returned. If this is null then\na ParseException will be thrown on parsing problems.\n@return A list of entities read in or null if parseErrors is not null.\n@throws ParseException\nThrown on any parsing problems. If parseErrors is not null then parse errors will be added there and\nan exception should not be thrown.\n@throws IOException\nIf there are any IO exceptions thrown when reading..\n\n    "
    },
    {
        "ID": 912,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (f *fragment) setValue(columnID uint64, bitDepth uint, value uint64) (changed bool, err error) { return f.setValueBase(columnID, bitDepth, value, false) }\n\n    ### Response: // setValue uses a column of bits to set a multi-bit value..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public RawData downloadableAs(final String downloadFileName) { this.downloadFileName = downloadFileName; this.mimeType = MimeTypes.getMimeType(FileNameUtil.getExtension(downloadFileName)); return this; }\n\n    ### Response:",
        "ground_truth": "Defines download file name and mime type from the name extension.",
        "predict": " // setValue uses a column of bits to set a multi-bit value..\n\n    "
    },
    {
        "ID": 913,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def wait_for_result(timeout) # do the deadline maths time_to_stop = timeout ? (Time.now + timeout) : nil # slight time slippage between here # until @result # if timeout # and here now = Time.now if @result return elsif (now >= time_to_stop) @result = TIMED_OUT return end @cond.wait(time_to_stop.to_f - now.to_f) else @cond.wait_until { @result } end end end\n\n    ### Response: this method must be synchronized on @mutex, obviously.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected T setTarget(final InputStream target) { assertTargetIsNotDefined(); targetInputStream = target; targetClass = null; targetClassName = null; return _this(); }\n\n    ### Response:",
        "ground_truth": "Defines class input stream as a target.",
        "predict": " this method must be synchronized on @mutex, obviously.\n\n    "
    },
    {
        "ID": 914,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private Observable<ComapiResult<ConversationEventsResponse>> processEventsQueryResponse(ComapiResult<ConversationEventsResponse> result, final List<Boolean> successes) { ConversationEventsResponse response = result.getResult(); successes.add(result.isSuccessful()); if (response != null && response.getEventsInOrder().size() > 0) { Collection<Event> events = response.getEventsInOrder(); List<Observable<Boolean>> list = new ArrayList<>(); for (Event event : events) { if (event instanceof MessageSentEvent) { MessageSentEvent messageEvent = (MessageSentEvent) event; list.add(persistenceController.updateStoreWithNewMessage(ChatMessage.builder().populate(messageEvent).build(), noConversationListener)); } else if (event instanceof MessageDeliveredEvent) { list.add(persistenceController.upsertMessageStatus(ChatMessageStatus.builder().populate((MessageDeliveredEvent) event).build())); } else if (event instanceof MessageReadEvent) { list.add(persistenceController.upsertMessageStatus(ChatMessageStatus.builder().populate((MessageReadEvent) event).build())); } } return Observable.from(list) .flatMap(task -> task) .doOnNext(successes::add) .toList() .map(results -> result); } return Observable.fromCallable(() -> result); }\n\n    ### Response: Process the event query response. Calls appropraiate persistance controller methods for received events.\n\n@param result    Event query response.\n@param successes List of successes in recursive query.\n@return Observable with same result object for further processing..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected T setTarget(final String targetName) { assertTargetIsNotDefined(); try { targetInputStream = ClassLoaderUtil.getClassAsStream(targetName); if (targetInputStream == null) { throw new ProxettaException(\"Target class not found: \" + targetName); } targetClassName = targetName; targetClass = null; } catch (IOException ioex) { StreamUtil.close(targetInputStream); throw new ProxettaException(\"Unable to get stream class name: \" + targetName, ioex); } return _this(); }\n\n    ### Response:",
        "ground_truth": "Defines class name as a target.\nClass will not be loaded by classloader!",
        "predict": " Process the event query response. Calls appropraiate persistance controller methods for received events.\n\n@param result    Event query response.\n@param successes List of successes in recursive query.\n@return Observable with same result object for further processing..\n\n    "
    },
    {
        "ID": 915,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def job_success_message(self, job, queue, job_result): \"\"\" Return the message to log when a job is successful \"\"\" return '[%s|%s|%s] success, in %s' % (queue._cached_name, job.pk.get(), job._cached_identifier, job.duration)\n\n    ### Response: Return the message to log when a job is successful.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public T setTarget(final Class target) { assertTargetIsNotDefined(); try { targetInputStream = ClassLoaderUtil.getClassAsStream(target); if (targetInputStream == null) { throw new ProxettaException(\"Target class not found: \" + target.getName()); } targetClass = target; targetClassName = target.getName(); } catch (IOException ioex) { StreamUtil.close(targetInputStream); throw new ProxettaException(\"Unable to stream class: \" + target.getName(), ioex); } return _this(); }\n\n    ### Response:",
        "ground_truth": "Defines class as a target.",
        "predict": " Return the message to log when a job is successful.\n\n    "
    },
    {
        "ID": 916,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def save_state_regularly(self, fname, frequency=600): \"\"\" Save the state of node with a given regularity to the given filename. Args: fname: File name to save retularly to frequency: Frequency in seconds that the state should be saved. By default, 10 minutes. \"\"\" self.save_state(fname) loop = asyncio.get_event_loop() self.save_state_loop = loop.call_later(frequency, self.save_state_regularly, fname, frequency)\n\n    ### Response: Save the state of node with a given regularity to the given\n        filename.\n\n        Args:\n            fname: File name to save retularly to\n            frequency: Frequency in seconds that the state should be saved.\n                        By default, 10 minutes..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void process() { if (targetInputStream == null) { throw new ProxettaException(\"Target missing: \" + targetClassName); } // create class reader final ClassReader classReader; try { classReader = new ClassReader(targetInputStream); } catch (IOException ioex) { throw new ProxettaException(\"Error reading class input stream\", ioex); } // reads information final TargetClassInfoReader targetClassInfoReader = new TargetClassInfoReader(proxetta.getClassLoader()); classReader.accept(targetClassInfoReader, 0); this.destClassWriter = new ClassWriter(ClassWriter.COMPUTE_MAXS | ClassWriter.COMPUTE_FRAMES); // create proxy if (log.isDebugEnabled()) { log.debug(\"processing: \" + classReader.getClassName()); } WorkData wd = process(classReader, targetClassInfoReader); // store important data proxyApplied = wd.proxyApplied; proxyClassName = wd.thisReference.replace('/', '.'); }\n\n    ### Response:",
        "ground_truth": "Reads the target and creates destination class.",
        "predict": " Save the state of node with a given regularity to the given\n        filename.\n\n        Args:\n            fname: File name to save retularly to\n            frequency: Frequency in seconds that the state should be saved.\n                        By default, 10 minutes..\n\n    "
    },
    {
        "ID": 917,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function resetPaymentMethodFilter(){ foreach($this->options as $op=>$junk){ if(preg_match(\"#PaymentMethod#\",$op)){ unset($this->options[$op]); } } }\n\n    ### Response: Removes payment method options.\n\nUse this in case you change your mind and want to remove the Payment Method\nparameters you previously set..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public byte[] create() { process(); byte[] result = toByteArray(); dumpClassInDebugFolder(result); if ((!proxetta.isForced()) && (!isProxyApplied())) { if (log.isDebugEnabled()) { log.debug(\"Proxy not applied: \" + StringUtil.toSafeString(targetClassName)); } return null; } if (log.isDebugEnabled()) { log.debug(\"Proxy created \" + StringUtil.toSafeString(targetClassName)); } return result; }\n\n    ### Response:",
        "ground_truth": "Returns byte array of created class.",
        "predict": " Removes payment method options.\n\nUse this in case you change your mind and want to remove the Payment Method\nparameters you previously set..\n\n    "
    },
    {
        "ID": 918,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func Options(opts ...grpc.ServerOption) server.Option { return func(o *server.Options) { if o.Context == nil { o.Context = context.Background() } o.Context = context.WithValue(o.Context, grpcOptions{}, opts) } }\n\n    ### Response: // Options to be used to configure gRPC options.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Class define() { process(); if ((!proxetta.isForced()) && (!isProxyApplied())) { if (log.isDebugEnabled()) { log.debug(\"Proxy not applied: \" + StringUtil.toSafeString(targetClassName)); } if (targetClass != null) { return targetClass; } if (targetClassName != null) { try { return ClassLoaderUtil.loadClass(targetClassName); } catch (ClassNotFoundException cnfex) { throw new ProxettaException(cnfex); } } } if (log.isDebugEnabled()) { log.debug(\"Proxy created: \" + StringUtil.toSafeString(targetClassName)); } try { ClassLoader classLoader = proxetta.getClassLoader(); if (classLoader == null) { classLoader = ClassLoaderUtil.getDefaultClassLoader(); if ((classLoader == null) && (targetClass != null)) { classLoader = targetClass.getClassLoader(); } } final byte[] bytes = toByteArray(); dumpClassInDebugFolder(bytes); return DefineClass.of(getProxyClassName(), bytes, classLoader); } catch (Exception ex) { throw new ProxettaException(\"Class definition failed\", ex); } }\n\n    ### Response:",
        "ground_truth": "Defines class.",
        "predict": " // Options to be used to configure gRPC options.\n\n    "
    },
    {
        "ID": 919,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected static NumberPattern parse(String pattern) { return NUMBER_PATTERN_CACHE.computeIfAbsent(pattern, s -> new NumberPatternParser().parse(s)); }\n\n    ### Response: Parse a string as a number pattern..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Object newInstance() { Class type = define(); try { return ClassUtil.newInstance(type); } catch (Exception ex) { throw new ProxettaException(\"Invalid Proxetta class\", ex); } }\n\n    ### Response:",
        "ground_truth": "Creates new instance of created class.\nAssumes default no-arg constructor.",
        "predict": " Parse a string as a number pattern..\n\n    "
    },
    {
        "ID": 920,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public Collator freeze() { if (!isFrozen()) { frozenLock = new ReentrantLock(); if (collationBuffer == null) { collationBuffer = new CollationBuffer(data); } } return this; }\n\n    ### Response: Freezes the collator.\n@return the collator itself..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void dumpClassInDebugFolder(final byte[] bytes) { File debugFolder = proxetta.getDebugFolder(); if (debugFolder == null) { return; } if (!debugFolder.exists() || !debugFolder.isDirectory()) { log.warn(\"Invalid debug folder: \" + debugFolder); } String fileName = proxyClassName; if (fileName == null) { fileName = \"proxetta-\" + System.currentTimeMillis(); } fileName += \".class\"; File file = new File(debugFolder, fileName); try { FileUtil.writeBytes(file, bytes); } catch (IOException ioex) { log.warn(\"Error writing class as \" + file, ioex); } }\n\n    ### Response:",
        "ground_truth": "Writes created class content to output folder for debugging purposes.",
        "predict": " Freezes the collator.\n@return the collator itself..\n\n    "
    },
    {
        "ID": 921,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function resolveFuture(reject, resolve) { state = STARTED return future.fork( function(error) { state = REJECTED value = error invokePending('rejected', error) return reject(error) } , function(data) { state = RESOLVED value = data invokePending('resolved', data) return resolve(data) })}\n\n    ### Response: Resolves the future, places the machine in a resolved state, and invokes all pending operations..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public T from(final String personalName, final String from) { return from(new EmailAddress(personalName, from)); }\n\n    ### Response:",
        "ground_truth": "Sets the FROM address by providing personal name and address.\n\n@param personalName personal name.\n@param from         email address.\n@return this\n@see #from(EmailAddress)",
        "predict": " Resolves the future, places the machine in a resolved state, and invokes all pending operations..\n\n    "
    },
    {
        "ID": 922,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def parse_extlang(subtags): \"\"\" Parse an 'extended language' tag, which consists of 1 to 3 three-letter language codes. Extended languages are used for distinguishing dialects/sublanguages (depending on your view) of macrolanguages such as Arabic, Bahasa Malay, and Chinese. It's supposed to also be acceptable to just use the sublanguage as the primary language code, and your code should know what's a macrolanguage of what. For example, 'zh-yue' and 'yue' are the same language (Cantonese), and differ only in whether they explicitly spell out that Cantonese is a kind of Chinese. \"\"\" index = 0 parsed = [] while index < len(subtags) and len(subtags[index]) == 3 and index < 3: parsed.append(('extlang', subtags[index])) index += 1 return parsed + parse_subtags(subtags[index:], SCRIPT)\n\n    ### Response: Parse an 'extended language' tag, which consists of 1 to 3 three-letter\n    language codes.\n\n    Extended languages are used for distinguishing dialects/sublanguages\n    (depending on your view) of macrolanguages such as Arabic, Bahasa Malay,\n    and Chinese.\n\n    It's supposed to also be acceptable to just use the sublanguage as the\n    primary language code, and your code should know what's a macrolanguage of\n    what. For example, 'zh-yue' and 'yue' are the same language (Cantonese),\n    and differ only in whether they explicitly spell out that Cantonese is a\n    kind of Chinese..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public T to(final EmailAddress to) { this.to = ArraysUtil.append(this.to, to); return _this(); }\n\n    ### Response:",
        "ground_truth": "Appends TO address.\n\n@param to {@link EmailAddress} to add.\n@return this",
        "predict": " Parse an 'extended language' tag, which consists of 1 to 3 three-letter\n    language codes.\n\n    Extended languages are used for distinguishing dialects/sublanguages\n    (depending on your view) of macrolanguages such as Arabic, Bahasa Malay,\n    and Chinese.\n\n    It's supposed to also be acceptable to just use the sublanguage as the\n    primary language code, and your code should know what's a macrolanguage of\n    what. For example, 'zh-yue' and 'yue' are the same language (Cantonese),\n    and differ only in whether they explicitly spell out that Cantonese is a\n    kind of Chinese..\n\n    "
    },
    {
        "ID": 923,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public void clearCache(CPDisplayLayout cpDisplayLayout) { entityCache.removeResult(CPDisplayLayoutModelImpl.ENTITY_CACHE_ENABLED, CPDisplayLayoutImpl.class, cpDisplayLayout.getPrimaryKey()); finderCache.clearCache(FINDER_CLASS_NAME_LIST_WITH_PAGINATION); finderCache.clearCache(FINDER_CLASS_NAME_LIST_WITHOUT_PAGINATION); clearUniqueFindersCache((CPDisplayLayoutModelImpl)cpDisplayLayout, true); }\n\n    ### Response: Clears the cache for the cp display layout.\n\n\nThe {@link EntityCache} and {@link FinderCache} are both cleared by this method.\n.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public T to(final String personalName, final String to) { return to(new EmailAddress(personalName, to)); }\n\n    ### Response:",
        "ground_truth": "Appends TO address by personal name and email address.\n\n@param personalName personal name.\n@param to           email address.\n@return this\n@see #to(EmailAddress)",
        "predict": " Clears the cache for the cp display layout.\n\n\nThe {@link EntityCache} and {@link FinderCache} are both cleared by this method.\n.\n\n    "
    },
    {
        "ID": 924,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def is_subdomain_record(rec): \"\"\" Does a given parsed zone file TXT record (@rec) encode a subdomain? Return True if so Return False if not \"\"\" txt_entry = rec['txt'] if not isinstance(txt_entry, list): return False has_parts_entry = False has_pk_entry = False has_seqn_entry = False for entry in txt_entry: if entry.startswith(SUBDOMAIN_ZF_PARTS + \"=\"): has_parts_entry = True if entry.startswith(SUBDOMAIN_PUBKEY + \"=\"): has_pk_entry = True if entry.startswith(SUBDOMAIN_N + \"=\"): has_seqn_entry = True return (has_parts_entry and has_pk_entry and has_seqn_entry)\n\n    ### Response: Does a given parsed zone file TXT record (@rec) encode a subdomain?\n    Return True if so\n    Return False if not.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public T replyTo(final EmailAddress... replyTo) { this.replyTo = ArraysUtil.join(this.replyTo, valueOrEmptyArray(replyTo)); return _this(); }\n\n    ### Response:",
        "ground_truth": "Appends REPLY-TO addresses.\n\n@param replyTo vararg of {@link EmailAddress}es to set.\n@return this",
        "predict": " Does a given parsed zone file TXT record (@rec) encode a subdomain?\n    Return True if so\n    Return False if not.\n\n    "
    },
    {
        "ID": 925,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function cmdDeleteConfig() { $id = $this->getParam(0); if (!isset($id)) { $this->errorAndExit($this->text('Invalid argument')); } if (!$this->config->reset($id)) { $this->errorAndExit($this->text('Unexpected result')); } $this->output(); }\n\n    ### Response: Callback for \"config-delete\" command.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public T cc(final EmailAddress... ccs) { this.cc = ArraysUtil.join(this.cc, valueOrEmptyArray(ccs)); return _this(); }\n\n    ### Response:",
        "ground_truth": "Appends CC addresses.\n\n@param ccs vararg of {@link EmailAddress}es to set.\n@return this",
        "predict": " Callback for \"config-delete\" command.\n\n    "
    },
    {
        "ID": 926,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def validate_allowed_values(allowed_values, value): \"\"\"Support a variable defining which values it allows. Args: allowed_values (Optional[list]): A list of allowed values from the variable definition value (obj): The object representing the value provided for the variable Returns: bool: Boolean for whether or not the value is valid. \"\"\" # ignore CFNParameter, troposphere handles these for us if not allowed_values or isinstance(value, CFNParameter): return True return value in allowed_values\n\n    ### Response: Support a variable defining which values it allows.\n\n    Args:\n        allowed_values (Optional[list]): A list of allowed values from the\n            variable definition\n        value (obj): The object representing the value provided for the\n            variable\n\n    Returns:\n        bool: Boolean for whether or not the value is valid..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public T textMessage(final String text, final String encoding) { return message(new EmailMessage(text, MimeTypes.MIME_TEXT_PLAIN, encoding)); }\n\n    ### Response:",
        "ground_truth": "Adds plain message text.\n\n@param text     The text to add as a {@link String}.\n@param encoding The encoding as a {@link String}.\n@return this\n@see #message(EmailMessage)",
        "predict": " Support a variable defining which values it allows.\n\n    Args:\n        allowed_values (Optional[list]): A list of allowed values from the\n            variable definition\n        value (obj): The object representing the value provided for the\n            variable\n\n    Returns:\n        bool: Boolean for whether or not the value is valid..\n\n    "
    },
    {
        "ID": 927,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String getExceptionStackTrace() { Throwable t = getException(); if (t == null) { return null; } StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); t.printStackTrace(pw); return sw.toString(); }\n\n    ### Response: Returns null if there is no exception logged..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public T htmlMessage(final String html, final String encoding) { return message(new EmailMessage(html, MimeTypes.MIME_TEXT_HTML, encoding)); }\n\n    ### Response:",
        "ground_truth": "Adds HTML message.\n\n@param html     The HTML to add as a {@link String}.\n@param encoding The encoding as a {@link String}.\n@return this\n@see #message(EmailMessage)",
        "predict": " Returns null if there is no exception logged..\n\n    "
    },
    {
        "ID": 928,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def display_unit(self): \"\"\" Display unit of value. :type: ``str`` \"\"\" if self._display_unit: return self._display_unit elif self._Q: config = Configuration.display.unit_systems default_system = Configuration.unit_system units = config.systems[default_system] self._display_unit = units.get(self._type, self._unit) if self._type == \"temperature\": from_unit = \"deg\" + self._unit.upper() to_unit = \"deg\" + self._display_unit.upper() else: from_unit = self._unit to_unit = self._display_unit #print(\"dv\", from_unit, to_unit) self._q_unit = self._Q(\"1 \" + from_unit) self._q_display = self._Q(\"1 \" + to_unit) return self._display_unit\n\n    ### Response: Display unit of value.\n\n        :type: ``str``.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public T header(final String name, final String value) { headers.put(name, value); return _this(); }\n\n    ### Response:",
        "ground_truth": "Sets header value.\n\n@param name  The name of the header.\n@param value The value of the header.\n@return this",
        "predict": " Display unit of value.\n\n        :type: ``str``.\n\n    "
    },
    {
        "ID": 929,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function cutRelease(releaseNote) { const [pkgPath, pkg] = getPackageObject(); const msg = getCommitTagMessage(pkg.version); return updateChangelogInternal(pkg.version, releaseNote) // Stage and commit all new, modified, and deleted files in the entire working directory .then(() => runCommand(\"git add --all\")) .then(() => runCommand(`git commit --no-verify -m \"${msg}\"`)) // Make an unsigned annotated tag, replacing an existing tag with the same version .then(output => { return runCommand(`git tag -a -f -m \"${msg}\" v${pkg.version}`) .then(() => `updated CHANGELOG, committed and tagged ${output}\\n\\n` + \"You can now push the tagged release: npm run push-release\"); }); }\n\n    ### Response: Updates the CHANGELOG with release information from the conventional commits,\ncommits all pending changes and creates an annotated git tag for the release.\n\nIf supplied with releaseNote, this text is prepended to the release information generated\nby conventional commits..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String get(final String name, final String defaultValue) { Objects.requireNonNull(name); String value = null; try { if (System.getSecurityManager() == null) { value = System.getProperty(name); } else { value = AccessController.doPrivileged((PrivilegedAction<String>) () -> System.getProperty(name)); } } catch (Exception ignore) { } if (value == null) { return defaultValue; } return value; }\n\n    ### Response:",
        "ground_truth": "Returns system property. If key is not available, returns the default value.",
        "predict": " Updates the CHANGELOG with release information from the conventional commits,\ncommits all pending changes and creates an annotated git tag for the release.\n\nIf supplied with releaseNote, this text is prepended to the release information generated\nby conventional commits..\n\n    "
    },
    {
        "ID": 930,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def validate_categories(categories): \"\"\"Take an iterable of source categories and raise ValueError if some of them are invalid.\"\"\" if not set(categories) <= Source.categories: invalid = list(set(categories) - Source.categories) raise ValueError('Invalid categories: %s' % invalid)\n\n    ### Response: Take an iterable of source categories and raise ValueError if some \n        of them are invalid..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static boolean getBoolean(final String name, final boolean defaultValue) { String value = get(name); if (value == null) { return defaultValue; } value = value.trim().toLowerCase(); switch (value) { case \"true\" : case \"yes\" : case \"1\" : case \"on\" : return true; case \"false\": case \"no\" : case \"0\" : case \"off\" : return false; default: return defaultValue; } }\n\n    ### Response:",
        "ground_truth": "Returns system property as boolean.",
        "predict": " Take an iterable of source categories and raise ValueError if some \n        of them are invalid..\n\n    "
    },
    {
        "ID": 931,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void set(Matrix m) { this.nRows = this.nCols = Math.min(m.nRows, m.nCols); this.values = m.values; }\n\n    ### Response: Set this square matrix from another matrix.  Note that this\nmatrix will reference the values of the argument matrix.  If\nthe values are not square, only the upper left square is used.\n@param values the 2-d array of values.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static long getInt(final String name, final int defaultValue) { String value = get(name); if (value == null) { return defaultValue; } value = value.trim().toLowerCase(); try { return Integer.parseInt(value); } catch (NumberFormatException nfex) { return defaultValue; } }\n\n    ### Response:",
        "ground_truth": "Returns system property as an int.",
        "predict": " Set this square matrix from another matrix.  Note that this\nmatrix will reference the values of the argument matrix.  If\nthe values are not square, only the upper left square is used.\n@param values the 2-d array of values.\n\n    "
    },
    {
        "ID": 932,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public BinaryString reverse() { ensureMaterialized(); if (inFirstSegment()) { byte[] result = new byte[this.sizeInBytes]; // position in byte int byteIdx = 0; while (byteIdx < sizeInBytes) { int charBytes = numBytesForFirstByte(getByteOneSegment(byteIdx)); segments[0].get( offset + byteIdx, result, result.length - byteIdx - charBytes, charBytes); byteIdx += charBytes; } return BinaryString.fromBytes(result); } else { return reverseSlow(); } }\n\n    ### Response: Reverse each character in current string.\n\n@return a new string which character order is reverse to current string..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static long getLong(final String name, final long defaultValue) { String value = get(name); if (value == null) { return defaultValue; } value = value.trim().toLowerCase(); try { return Long.parseLong(value); } catch (NumberFormatException nfex) { return defaultValue; } }\n\n    ### Response:",
        "ground_truth": "Returns system property as a long.",
        "predict": " Reverse each character in current string.\n\n@return a new string which character order is reverse to current string..\n\n    "
    },
    {
        "ID": 933,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function getChatCommands(ManialinkInterface $manialink) { $login = $manialink->getUserGroup()->getLogins()[0]; return array_map( function ($command) { /** @var AbstractChatCommand $command */ return [ 'command' => $command->getCommand(), 'description' => $command->getDescription(), 'help' => $command->getHelp(), 'aliases' => $command->getAliases(), ]; }, array_filter( $this->chatCommands->getChatCommands(), function ($command) use ($login) { if ($command instanceof AbstractAdminChatCommand) { return $command->hasPermission($login); } return true; } ) ); }\n\n    ### Response: Get chat commands to display the admin.\n\n@param ManialinkInterface $manialink\n\n@return array.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    MethodParameter[] getResolvedParameters() { if (paramExtractor == null) { return MethodParameter.EMPTY_ARRAY; } if (!paramExtractor.debugInfoPresent) { throw new ParamoException(\"Parameter names not available for method: \" + declaringClass.getName() + '#' + methodName); } return paramExtractor.getMethodParameters(); }\n\n    ### Response:",
        "ground_truth": "Returns method parameters once when method is parsed.\nIf method has no parameters, an empty array is returned.",
        "predict": " Get chat commands to display the admin.\n\n@param ManialinkInterface $manialink\n\n@return array.\n\n    "
    },
    {
        "ID": 934,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function setCoreMailSmtpPass($value) { $this->setFieldName('mail_smtp_pass'); $this->loadObject(true); $this->setFieldValue($value); return $this; }\n\n    ### Response: SMTP Password ~\nThe password to authenticate to SMTP against.\n\n@param string $value\n\n@return $this.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected int serializeKeyValue(final JsonContext jsonContext, final Path currentPath, final Object key, final Object value, int count) { if ((value == null) && jsonContext.isExcludeNulls()) { return count; } if (key != null) { currentPath.push(key.toString()); } else { currentPath.push(StringPool.NULL); } // check if we should include the field boolean include = true; if (value != null) { // + all collections are not serialized by default include = jsonContext.matchIgnoredPropertyTypes(value.getClass(), false, include); // + path queries: excludes/includes include = jsonContext.matchPathToQueries(include); } // done if (!include) { currentPath.pop(); return count; } if (key == null) { jsonContext.pushName(null, count > 0); } else { jsonContext.pushName(key.toString(), count > 0); } jsonContext.serialize(value); if (jsonContext.isNamePopped()) { count++; } currentPath.pop(); return count; }\n\n    ### Response:",
        "ground_truth": "Serializes key and a value.",
        "predict": " SMTP Password ~\nThe password to authenticate to SMTP against.\n\n@param string $value\n\n@return $this.\n\n    "
    },
    {
        "ID": 935,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def gen_salt(length): \"\"\"Generate a random string of SALT_CHARS with specified ``length``.\"\"\" if length <= 0: raise ValueError('requested salt of length <= 0') return ''.join(_sys_rng.choice(SALT_CHARS) for _ in range_type(length))\n\n    ### Response: Generate a random string of SALT_CHARS with specified ``length``..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected String lookupAlias(final String alias) { String value = actionsManager.lookupPathAlias(alias); if (value == null) { ActionRuntime cfg = actionsManager.lookup(alias); if (cfg != null) { value = cfg.getActionPath(); } } return value; }\n\n    ### Response:",
        "ground_truth": "Lookups value as an alias and, if not found, as a default alias.",
        "predict": " Generate a random string of SALT_CHARS with specified ``length``..\n\n    "
    },
    {
        "ID": 936,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (m *JSONMetricRecorder) AddMetric( key, value string, created time.Time, labels map[string]string) (err error) { defer func() { if err != nil { err = &errMetricsData{err} } }() err = m.validateMetric(key, value) if err != nil { return errors.Trace(err) } m.lock.Lock() defer m.lock.Unlock() return errors.Trace(m.enc.Encode(jujuc.Metric{ Key: key, Value: value, Time: created, Labels: labels, })) }\n\n    ### Response: // AddMetric implements the MetricsRecorder interface..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected String resolveAlias(final String value) { final StringBuilder result = new StringBuilder(value.length()); int i = 0; int len = value.length(); while (i < len) { int ndx = value.indexOf('<', i); if (ndx == -1) { // alias markers not found if (i == 0) { // try whole string as an alias String alias = lookupAlias(value); return (alias != null ? alias : value); } else { result.append(value.substring(i)); } break; } // alias marked found result.append(value.substring(i, ndx)); ndx++; int ndx2 = value.indexOf('>', ndx); String aliasName = (ndx2 == -1 ? value.substring(ndx) : value.substring(ndx, ndx2)); // process alias String alias = lookupAlias(aliasName); if (alias != null) { result.append(alias); } else { // alias not found if (log.isWarnEnabled()) { log.warn(\"Alias not found: \" + aliasName); } } i = ndx2 + 1; } // fix prefix '//' - may happened when aliases are used i = 0; len = result.length(); while (i < len) { if (result.charAt(i) != '/') { break; } i++; } if (i > 1) { return result.substring(i - 1, len); } return result.toString(); }\n\n    ### Response:",
        "ground_truth": "Returns resolved alias result value or passed on, if alias doesn't exist.",
        "predict": " // AddMetric implements the MetricsRecorder interface..\n\n    "
    },
    {
        "ID": 937,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Dataframe getSubset(FlatDataList idsCollection) { Dataframe d = new Dataframe(configuration); for(Object id : idsCollection) { d.add(get((Integer)id)); } return d; }\n\n    ### Response: It generates and returns a new Dataframe which contains a subset of this Dataframe.\nAll the Records of the returned Dataframe are copies of the original Records.\nThe method is used for k-fold cross validation and sampling. Note that the\nRecords in the new Dataframe have DIFFERENT ids from the original ones.\n\n@param idsCollection\n@return.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public ResultPath resolveResultPath(String path, String value) { boolean absolutePath = false; if (value != null) { // [*] resolve alias in value value = resolveAlias(value); // [*] absolute paths if (StringUtil.startsWithChar(value, '/')) { absolutePath = true; int dotNdx = value.indexOf(\"..\"); if (dotNdx != -1) { path = value.substring(0, dotNdx); value = value.substring(dotNdx + 2); } else { path = value; value = null; } } else { // [*] resolve # in value and path int i = 0; while (i < value.length()) { if (value.charAt(i) != '#') { break; } int dotNdx = MadvocUtil.lastIndexOfSlashDot(path); if (dotNdx != -1) { // dot found path = path.substring(0, dotNdx); } i++; } if (i > 0) { // remove # from value value = value.substring(i); // [*] update path and value if (StringUtil.startsWithChar(value, '.')) { value = value.substring(1); } else { int dotNdx = value.indexOf(\"..\"); if (dotNdx != -1) { path += '.' + value.substring(0, dotNdx); value = value.substring(dotNdx + 2); } else { if (value.length() > 0) { if (StringUtil.endsWithChar(path, '/')) { path += value; } else { path += '.' + value; } } value = null; } } } } } if (!absolutePath) { if (resultPathPrefix != null) { path = resultPathPrefix + path; } } return new ResultPath(path, value); }\n\n    ### Response:",
        "ground_truth": "Resolves result path.",
        "predict": " It generates and returns a new Dataframe which contains a subset of this Dataframe.\nAll the Records of the returned Dataframe are copies of the original Records.\nThe method is used for k-fold cross validation and sampling. Note that the\nRecords in the new Dataframe have DIFFERENT ids from the original ones.\n\n@param idsCollection\n@return.\n\n    "
    },
    {
        "ID": 938,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def open(self): ''' open the database ''' self._connection = sqlite3.connect(self._dbname) self._cursor = self._connection.cursor() self._session_info = SessionInfoTable(self._connection, self._cursor) self._reports = ReportsTable(self._connection, self._cursor)\n\n    ### Response: open the database.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String resolveResultPathString(final String path, final String value) { final ResultPath resultPath = resolveResultPath(path, value); final String result = resultPath.pathValue(); return resolveAlias(result); }\n\n    ### Response:",
        "ground_truth": "Resolves result path as a string, when parts are not important\nand when only full string matters. Additional alias resolving\non full path is done.",
        "predict": " open the database.\n\n    "
    },
    {
        "ID": 939,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def command_flush_for(self, id_type, command_id, status): \"\"\"Flush commands for an individual device. Args: id_type (str): One of 'computers', 'computergroups', 'mobiledevices', or 'mobiledevicegroups'. id_value (str, int, list): ID value(s) for the devices to flush. More than one device should be passed as IDs in a list or tuple. status (str): One of 'Pending', 'Failed', 'Pending+Failed'. Raises: JSSDeleteError if provided url_path has a >= 400 response. \"\"\" id_types = ('computers', 'computergroups', 'mobiledevices', 'mobiledevicegroups') status_types = ('Pending', 'Failed', 'Pending+Failed') if id_type not in id_types or status not in status_types: raise ValueError(\"Invalid arguments.\") if isinstance(command_id, list): command_id = \",\".join(str(item) for item in command_id) flush_url = \"{}/{}/id/{}/status/{}\".format( self.url, id_type, command_id, status) self.jss.delete(flush_url)\n\n    ### Response: Flush commands for an individual device.\n\n        Args:\n            id_type (str): One of 'computers', 'computergroups',\n                'mobiledevices', or 'mobiledevicegroups'.\n            id_value (str, int, list): ID value(s) for the devices to\n                flush. More than one device should be passed as IDs\n                in a list or tuple.\n            status (str): One of 'Pending', 'Failed', 'Pending+Failed'.\n\n        Raises:\n            JSSDeleteError if provided url_path has a >= 400 response..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static int lastIndexOfSlashDot(final String str) { int slashNdx = str.lastIndexOf('/'); int dotNdx = StringUtil.lastIndexOf(str, '.', str.length(), slashNdx); if (dotNdx == -1) { if (slashNdx == -1) { return -1; } slashNdx++; if (slashNdx < str.length() - 1) { dotNdx = slashNdx; } else { dotNdx = -1; } } return dotNdx; }\n\n    ### Response:",
        "ground_truth": "Locates last dot after the last slash or just slash.",
        "predict": " Flush commands for an individual device.\n\n        Args:\n            id_type (str): One of 'computers', 'computergroups',\n                'mobiledevices', or 'mobiledevicegroups'.\n            id_value (str, int, list): ID value(s) for the devices to\n                flush. More than one device should be passed as IDs\n                in a list or tuple.\n            status (str): One of 'Pending', 'Failed', 'Pending+Failed'.\n\n        Raises:\n            JSSDeleteError if provided url_path has a >= 400 response..\n\n    "
    },
    {
        "ID": 940,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (se *ServiceEndpoint) GetAssignment() *addressassignment.AddressAssignment { if se.AddressAssignment.ID == \"\" { return nil } //return reference to copy result := se.AddressAssignment return &result }\n\n    ### Response: //GetAssignment Returns nil if no assignment set.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static int lastIndexOfDotAfterSlash(final String str) { int slashNdx = str.lastIndexOf('/'); slashNdx++; return StringUtil.lastIndexOf(str, '.', str.length(), slashNdx); }\n\n    ### Response:",
        "ground_truth": "Locates last index of dot after the optional last slash.",
        "predict": " //GetAssignment Returns nil if no assignment set.\n\n    "
    },
    {
        "ID": 941,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String []list() throws IOException { try { String []list = getFile().list(); if (list != null) return list; } catch (AccessControlException e) { log.finer(e.toString()); } return new String[0]; }\n\n    ### Response: Returns a list of files in the directory..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static int indexOfDotAfterSlash(final String str) { int slashNdx = str.lastIndexOf('/'); if (slashNdx == -1) { slashNdx = 0; } return str.indexOf('.', slashNdx); }\n\n    ### Response:",
        "ground_truth": "Locates first dot after the last slash.",
        "predict": " Returns a list of files in the directory..\n\n    "
    },
    {
        "ID": 942,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def set_timeout(self, timeout): \"\"\" set the timeout limit. :Parameters: #. timeout (number): The maximum delay or time allowed to successfully set the lock. When timeout is exhausted before successfully setting the lock, the lock ends up not acquired. \"\"\" try: timeout = float(timeout) assert timeout>=0 assert timeout>=self.__wait except: raise Exception('timeout must be a positive number bigger than wait') self.__timeout = timeout\n\n    ### Response: set the timeout limit.\n\n        :Parameters:\n            #. timeout (number): The maximum delay or time allowed to successfully set the\n               lock. When timeout is exhausted before successfully setting the lock,\n               the lock ends up not acquired..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String stripLastCamelWord(String name) { int ndx = name.length() - 1; while (ndx >= 0) { if (CharUtil.isUppercaseAlpha(name.charAt(ndx))) { break; } ndx--; } if (ndx >= 0) { name = name.substring(0, ndx); } return name; }\n\n    ### Response:",
        "ground_truth": "Removes last CamelWord",
        "predict": " set the timeout limit.\n\n        :Parameters:\n            #. timeout (number): The maximum delay or time allowed to successfully set the\n               lock. When timeout is exhausted before successfully setting the lock,\n               the lock ends up not acquired..\n\n    "
    },
    {
        "ID": 943,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def cmd_ssh_user(tar_aminame, inst_name): \"\"\"Calculate instance login-username based on image-name. Args: tar_aminame (str): name of the image instance created with. inst_name (str): name of the instance. Returns: username (str): name for ssh based on AMI-name. \"\"\" if tar_aminame == \"Unknown\": tar_aminame = inst_name # first 5 chars of AMI-name can be anywhere in AMI-Name userlu = {\"ubunt\": \"ubuntu\", \"debia\": \"admin\", \"fedor\": \"root\", \"cento\": \"centos\", \"openb\": \"root\"} usertemp = ['name'] + [value for key, value in list(userlu.items()) if key in tar_aminame.lower()] usertemp = dict(zip(usertemp[::2], usertemp[1::2])) username = usertemp.get('name', 'ec2-user') debg.dprint(\"loginuser Calculated: \", username) return username\n\n    ### Response: Calculate instance login-username based on image-name.\n\n    Args:\n        tar_aminame (str): name of the image instance created with.\n        inst_name (str): name of the instance.\n    Returns:\n        username (str): name for ssh based on AMI-name..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String resolveSchemaName(final Class<?> type, final String defaultSchemaName) { String schemaName = null; final DbTable dbTable = type.getAnnotation(DbTable.class); if (dbTable != null) { schemaName = dbTable.schema().trim(); } if ((schemaName == null) || (schemaName.length() == 0)) { schemaName = defaultSchemaName; } return schemaName; }\n\n    ### Response:",
        "ground_truth": "Resolves schema name from a type. Uses default schema name if not specified.",
        "predict": " Calculate instance login-username based on image-name.\n\n    Args:\n        tar_aminame (str): name of the image instance created with.\n        inst_name (str): name of the instance.\n    Returns:\n        username (str): name for ssh based on AMI-name..\n\n    "
    },
    {
        "ID": 944,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function saveOptions(CustomField $field, Field $customfield) { if (is_null($field->options)) { return false; } $options = ($field->options instanceof Closure) ? call_user_func($field->options) : $field->options; foreach ($options as $value => $label) { FieldTypeOption::query()->firstOrCreate([ 'field_id' => $customfield->id, 'label' => $label, 'value' => $value ]); } return true; }\n\n    ### Response: Saves customfield options\n\n@param CustomField $field\n@param Field $customfield\n@return boolean.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static DbEntityColumnDescriptor resolveColumnDescriptors( final DbEntityDescriptor dbEntityDescriptor, final PropertyDescriptor property, final boolean isAnnotated, final ColumnNamingStrategy columnNamingStrategy) { String columnName = null; boolean isId = false; Class<? extends SqlType> sqlTypeClass = null; // read ID annotation DbId dbId = null; if (property.getFieldDescriptor() != null) { dbId = property.getFieldDescriptor().getField().getAnnotation(DbId.class); } if (dbId == null && property.getReadMethodDescriptor() != null) { dbId = property.getReadMethodDescriptor().getMethod().getAnnotation(DbId.class); } if (dbId == null && property.getWriteMethodDescriptor() != null) { dbId = property.getWriteMethodDescriptor().getMethod().getAnnotation(DbId.class); } if (dbId != null) { columnName = dbId.value().trim(); sqlTypeClass = dbId.sqlType(); isId = true; } else { DbColumn dbColumn = null; if (property.getFieldDescriptor() != null) { dbColumn = property.getFieldDescriptor().getField().getAnnotation(DbColumn.class); } if (dbColumn == null && property.getReadMethodDescriptor() != null) { dbColumn = property.getReadMethodDescriptor().getMethod().getAnnotation(DbColumn.class); } if (dbColumn == null && property.getWriteMethodDescriptor() != null) { dbColumn = property.getWriteMethodDescriptor().getMethod().getAnnotation(DbColumn.class); } if (dbColumn != null) { columnName = dbColumn.value().trim(); sqlTypeClass = dbColumn.sqlType(); } else { if (isAnnotated) { return null; } } } if (StringUtil.isEmpty(columnName)) { // default annotation value columnName = columnNamingStrategy.convertPropertyNameToColumnName(property.getName()); } else { if (!columnNamingStrategy.isStrictAnnotationNames()) { columnName = columnNamingStrategy.applyToColumnName(columnName); } } if (sqlTypeClass == SqlType.class) { sqlTypeClass = null; } return new DbEntityColumnDescriptor( dbEntityDescriptor, quoteIfRequired(columnName, columnNamingStrategy.isAlwaysQuoteNames(), columnNamingStrategy.getQuoteChar()), property.getName(), property.getType(), isId, sqlTypeClass); }\n\n    ### Response:",
        "ground_truth": "Resolves column descriptor from property. If property is annotated value will be read\nfrom annotation. If property is not annotated, then property will be ignored\nif entity is annotated. Otherwise, column name is generated from the property name.",
        "predict": " Saves customfield options\n\n@param CustomField $field\n@param Field $customfield\n@return boolean.\n\n    "
    },
    {
        "ID": 945,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static int[] randomPermutation(int size) { Random r = new Random(); int[] result = new int[size]; for (int j = 0; j < size; j++) { result[j] = j; } for (int j = size - 1; j > 0; j--) { int k = r.nextInt(j); int temp = result[j]; result[j] = result[k]; result[k] = temp; } return result; }\n\n    ### Response: Create a random permutation of the numbers 0, ..., size - 1.\n\nsee Algorithm P, D.E. Knuth: The Art of Computer Programming, Vol. 2, p. 145.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void init(final long[] key, final long[] tweak) { final int newNw = key.length; // only create new arrays if the value of N{w} changes (different key size) if (nw != newNw) { nw = newNw; switch (nw) { case WORDS_4: pi = PI4; rpi = RPI4; r = R4; break; case WORDS_8: pi = PI8; rpi = RPI8; r = R8; break; case WORDS_16: pi = PI16; rpi = RPI16; r = R16; break; default: throw new RuntimeException(\"Invalid threefish key\"); } this.k = new long[nw + 1]; // instantiation of these fields here for performance reasons vd = new long[nw]; // v is the intermediate value v{d} at round d ed = new long[nw]; // ed is the value of e{d} at round d fd = new long[nw]; // fd is the value of f{d} at round d ksd = new long[nw]; // ksd is the value of k{s} at round d } System.arraycopy(key, 0, this.k, 0, key.length); long knw = EXTENDED_KEY_SCHEDULE_CONST; for (int i = 0; i < nw; i++) { knw ^= this.k[i]; } this.k[nw] = knw; // set tweak values t[0] = tweak[0]; t[1] = tweak[1]; t[2] = t[0] ^ t[1]; }\n\n    ### Response:",
        "ground_truth": "Initialize the cipher using the key and the tweak value.\n\n@param key the Threefish key to use\n@param tweak the tweak values to use",
        "predict": " Create a random permutation of the numbers 0, ..., size - 1.\n\nsee Algorithm P, D.E. Knuth: The Art of Computer Programming, Vol. 2, p. 145.\n\n    "
    },
    {
        "ID": 946,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (ab *AtomicBool) SetTo(yes bool) { if yes { atomic.StoreInt32((*int32)(ab), 1) } else { atomic.StoreInt32((*int32)(ab), 0) } }\n\n    ### Response: // SetTo sets the boolean with given Boolean.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void mix(final int j, final int d) { y[0] = x[0] + x[1]; final long rotl = r[d % DEPTH_OF_D_IN_R][j]; // java left rotation for a long y[1] = (x[1] << rotl) | (x[1] >>> (Long.SIZE - rotl)); y[1] ^= y[0]; }\n\n    ### Response:",
        "ground_truth": "Implementation of the MIX function.\n\n@param j the index in the rotation constants\n@param d the round",
        "predict": " // SetTo sets the boolean with given Boolean.\n\n    "
    },
    {
        "ID": 947,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func WriteUInt64( clientAddr chan<- protocol.Addr, clientData chan<- protocol.WriteData, clientResp <-chan protocol.WriteResp, bufferedAccess bool, writeAddr uintptr, writeData uint64) bool { // Issue write request. go func() { clientAddr <- protocol.Addr{ Addr: writeAddr &^ uintptr(0x7), Size: [3]bool{true, true, false}, Burst: [2]bool{true, false}, Cache: [4]bool{bufferedAccess, true, false, false}} }() // Perform full width 64-bit AXI write. writeStrobe := [8]bool{ true, true, true, true, true, true, true, true} clientData <- protocol.WriteData{ Data: writeData, Strb: writeStrobe, Last: true} writeResp := <-clientResp return !writeResp.Resp[1] }\n\n    ### Response: //\n// WriteUInt64 writes a single 64-bit unsigned data value to a word aligned\n// address on the specified AXI memory bus, with the bottom three address bits\n// being ignored. The status of the write transaction is returned as the boolean\n// 'writeOk' flag.\n//.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void demix(final int j, final int d) { y[1] ^= y[0]; final long rotr = r[d % DEPTH_OF_D_IN_R][j]; // NOTE performance: darn, creation on stack! // right shift x[1] = (y[1] << (Long.SIZE - rotr)) | (y[1] >>> rotr); x[0] = y[0] - x[1]; }\n\n    ### Response:",
        "ground_truth": "Implementation of the un-MIX function.",
        "predict": " //\n// WriteUInt64 writes a single 64-bit unsigned data value to a word aligned\n// address on the specified AXI memory bus, with the bottom three address bits\n// being ignored. The status of the write transaction is returned as the boolean\n// 'writeOk' flag.\n//.\n\n    "
    },
    {
        "ID": 948,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def orthogonal(*args) -> bool: \"\"\"Determine if a set of arrays are orthogonal. Parameters ---------- args : array-likes or array shapes Returns ------- bool Array orthogonality condition. \"\"\" for i, arg in enumerate(args): if hasattr(arg, \"shape\"): args[i] = arg.shape for s in zip(*args): if np.product(s) != max(s): return False return True\n\n    ### Response: Determine if a set of arrays are orthogonal.\n\n    Parameters\n    ----------\n    args : array-likes or array shapes\n\n    Returns\n    -------\n    bool\n        Array orthogonality condition..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void keySchedule(final int s) { for (int i = 0; i < nw; i++) { // just put in the main key first ksd[i] = k[(s + i) % (nw + 1)]; // don't add anything for i = 0,...,Nw - 4 if (i == nw - 3) { // second to last ksd[i] += t[s % TWEAK_VALUES]; } else if (i == nw - 2) { // first to last ksd[i] += t[(s + 1) % TWEAK_VALUES]; } else if (i == nw - 1) { // last ksd[i] += s; } } }\n\n    ### Response:",
        "ground_truth": "Creates the subkeys.\n\n@param s the value of the round devided by 4",
        "predict": " Determine if a set of arrays are orthogonal.\n\n    Parameters\n    ----------\n    args : array-likes or array shapes\n\n    Returns\n    -------\n    bool\n        Array orthogonality condition..\n\n    "
    },
    {
        "ID": 949,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function addMentionsFromBody() { $entity = $this->getItem(); $usernames = $this->extractMentions($entity->body); foreach ($usernames as $username) { $entity->addMention(trim($username)); } $this->_newly_mentioned = $usernames; }\n\n    ### Response: Extracts mention usernames from the entity body and add them to the item..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void init(final String keyMessage, final long tweak1, final long tweak2) { long[] tweak = new long[] {tweak1, tweak2}; byte[] key = new byte[blockSize / Byte.SIZE]; byte[] keyData = StringUtil.getBytes(keyMessage); System.arraycopy(keyData, 0, key, 0, key.length < keyData.length ? key.length : keyData.length); init(bytesToLongs(key), tweak); }\n\n    ### Response:",
        "ground_truth": "Initializes cipher in a simple way.",
        "predict": " Extracts mention usernames from the entity body and add them to the item..\n\n    "
    },
    {
        "ID": 950,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected static PGPPrivateKey findSecretKey(InputStream keyStream, long keyId, char[] password) throws Exception { PGPSecretKeyRingCollection keyRings = new PGPSecretKeyRingCollection(PGPUtil.getDecoderStream(keyStream), new BcKeyFingerprintCalculator()); PGPSecretKey secretKey = keyRings.getSecretKey(keyId); if(secretKey == null) { return null; } PBESecretKeyDecryptor decryptor = new JcePBESecretKeyDecryptorBuilder( new JcaPGPDigestCalculatorProviderBuilder().setProvider(PROVIDER).build()) .setProvider(PROVIDER).build(password); return secretKey.extractPrivateKey(decryptor); }\n\n    ### Response: Extracts the PGP private key from an encoded stream.\n@param keyStream stream providing the encoded private key\n@param keyId id of the secret key to extract\n@param password passphrase for the secret key\n@return the private key object\n@throws IOException if there is an error reading from the stream\n@throws PGPException if the secret key cannot be extracted.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public byte[] encryptBlock(final byte[] content, final int offset) { long[] contentBlock = bytesToLongs(content, offset, blockSizeInBytes); long[] encryptedBlock = new long[blockSize / Long.SIZE]; blockEncrypt(contentBlock, encryptedBlock); return longsToBytes(encryptedBlock); }\n\n    ### Response:",
        "ground_truth": "Encrypts a block.",
        "predict": " Extracts the PGP private key from an encoded stream.\n@param keyStream stream providing the encoded private key\n@param keyId id of the secret key to extract\n@param password passphrase for the secret key\n@return the private key object\n@throws IOException if there is an error reading from the stream\n@throws PGPException if the secret key cannot be extracted.\n\n    "
    },
    {
        "ID": 951,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def cookie(self): \"\"\" Cookie values. \"\"\" if self._cookie is None: self._cookie = self.arg_container() data = compat.parse_qs(self.http_header('cookie') or '') for k, v in data.items(): self._cookie[k.strip()] = v[0] return self._cookie\n\n    ### Response: Cookie values..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected static long[] bytesToLongs(final byte[] ba, final int offset, final int size) { long[] result = new long[size >> 3]; int i8 = offset; for (int i = 0; i < result.length; i++) { result[i] = Bits.getLong(ba, i8); i8 += 8; } return result; }\n\n    ### Response:",
        "ground_truth": "Converts segment of byte array into long array.",
        "predict": " Cookie values..\n\n    "
    },
    {
        "ID": 952,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function OnlineCheckout(body) { if (!body) throw new Error('No data provided') const config = this.config const hubtelurl = 'https://api.hubtel.com/v1/merchantaccount/onlinecheckout/invoice/create' const auth = 'Basic ' + Buffer.from(config.clientid + ':' + config.secretid).toString('base64') return request.post(hubtelurl, { body: body, headers: { Authorization: auth, 'content-type': 'application/json', }, json: true, }) }\n\n    ### Response: Use Hubtel Online Checkout Service\n@param {object} body.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static String removeAnyBounding(final char s, final char e, final String str) { if (str == null || str.length() < 2) { return str; } if (str.startsWith(String.valueOf(s)) && str.endsWith(String.valueOf(e))) { return str.substring(1, str.length() - 1); } return str; }\n\n    ### Response:",
        "ground_truth": "If the string starts and ends with start and end char, remove them,\notherwise return the string as it was passed in.",
        "predict": " Use Hubtel Online Checkout Service\n@param {object} body.\n\n    "
    },
    {
        "ID": 953,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (in *ClusterTestTypeList) DeepCopy() *ClusterTestTypeList { if in == nil { return nil } out := new(ClusterTestTypeList) in.DeepCopyInto(out) return out }\n\n    ### Response: // DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterTestTypeList..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String path() { if (methref != null) { final String methodName = methref.ref(); return target.getName() + '#' + methodName; } return path; }\n\n    ### Response:",
        "ground_truth": "Returns path value.",
        "predict": " // DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterTestTypeList..\n\n    "
    },
    {
        "ID": 954,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public byte[] md5(String toHash) { try { MessageDigest messageDigest = MessageDigest.getInstance(Hash.MD5.toString()); messageDigest.reset(); messageDigest.update(toHash.getBytes(UTF_8)); return messageDigest.digest(); } catch (NoSuchAlgorithmException e) { // Should not happen as every JVM must support D5, SHA-1 and SHA-256. throw new RuntimeException(e); } }\n\n    ### Response: Computes the MD5 hash of the given String.\n\n@param toHash the string to hash\n@return the MD5 hash.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static File zlib(final File file) throws IOException { if (file.isDirectory()) { throw new IOException(\"Can't zlib folder\"); } FileInputStream fis = new FileInputStream(file); Deflater deflater = new Deflater(Deflater.BEST_COMPRESSION); String zlibFileName = file.getAbsolutePath() + ZLIB_EXT; DeflaterOutputStream dos = new DeflaterOutputStream(new FileOutputStream(zlibFileName), deflater); try { StreamUtil.copy(fis, dos); } finally { StreamUtil.close(dos); StreamUtil.close(fis); } return new File(zlibFileName); }\n\n    ### Response:",
        "ground_truth": "Compresses a file into zlib archive.",
        "predict": " Computes the MD5 hash of the given String.\n\n@param toHash the string to hash\n@return the MD5 hash.\n\n    "
    },
    {
        "ID": 955,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function delete_privkey($keyid) { try { $this->gpg->deletePrivateKey($keyid); return true; } catch (Exception $e) { return $this->get_error_from_exception($e); } }\n\n    ### Response: Private key deletion..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static File gzip(final File file) throws IOException { if (file.isDirectory()) { throw new IOException(\"Can't gzip folder\"); } FileInputStream fis = new FileInputStream(file); String gzipName = file.getAbsolutePath() + GZIP_EXT; GZIPOutputStream gzos = new GZIPOutputStream(new FileOutputStream(gzipName)); try { StreamUtil.copy(fis, gzos); } finally { StreamUtil.close(gzos); StreamUtil.close(fis); } return new File(gzipName); }\n\n    ### Response:",
        "ground_truth": "Compresses a file into gzip archive.",
        "predict": " Private key deletion..\n\n    "
    },
    {
        "ID": 956,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static function comb(bool $msb = true): Uuid { $hash = bin2hex(random_bytes(10)); $time = explode(' ', microtime()); $milliseconds = sprintf('%d%03d', $time[1], $time[0] * 1000); $timestamp = sprintf('%012x', $milliseconds); if ($msb) { $hex = $timestamp.$hash; } else { $hex = $hash.$timestamp; } return static::fromUnformatted($hex, static::VERSION_RANDOM); }\n\n    ### Response: Creates a sequential pseudo-random instance\n\nThis variation is not covered by RFC 4122, but it should provide\nperformance increases when using UUIDs as primary keys. The timestamp\nshould cover most significant bits or least significant bits depending\non how the database orders GUID values.\n\n@param bool $msb Whether or not timestamp covers most significant bits\n\n@return Uuid.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static File ungzip(final File file) throws IOException { String outFileName = FileNameUtil.removeExtension(file.getAbsolutePath()); File out = new File(outFileName); out.createNewFile(); FileOutputStream fos = new FileOutputStream(out); GZIPInputStream gzis = new GZIPInputStream(new FileInputStream(file)); try { StreamUtil.copy(gzis, fos); } finally { StreamUtil.close(fos); StreamUtil.close(gzis); } return out; }\n\n    ### Response:",
        "ground_truth": "Decompress gzip archive.",
        "predict": " Creates a sequential pseudo-random instance\n\nThis variation is not covered by RFC 4122, but it should provide\nperformance increases when using UUIDs as primary keys. The timestamp\nshould cover most significant bits or least significant bits depending\non how the database orders GUID values.\n\n@param bool $msb Whether or not timestamp covers most significant bits\n\n@return Uuid.\n\n    "
    },
    {
        "ID": 957,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static boolean matchesConfiguredImages(String imageList, ImageConfiguration imageConfig) { if (imageList == null) { return true; } Set<String> imagesAllowed = new HashSet<>(Arrays.asList(imageList.split(\"\\\\s*,\\\\s*\"))); return imagesAllowed.contains(imageConfig.getName()) || imagesAllowed.contains(imageConfig.getAlias()); }\n\n    ### Response: Check if the provided image configuration matches the given.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static List<String> listZip(final File zipFile) throws IOException { List<String> entries = new ArrayList<>(); ZipFile zip = new ZipFile(zipFile); Enumeration zipEntries = zip.entries(); while (zipEntries.hasMoreElements()) { ZipEntry entry = (ZipEntry) zipEntries.nextElement(); String entryName = entry.getName(); entries.add(entryName); } return Collections.unmodifiableList(entries); }\n\n    ### Response:",
        "ground_truth": "Lists zip content.",
        "predict": " Check if the provided image configuration matches the given.\n\n    "
    },
    {
        "ID": 958,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def mktk03(terms, seed, G2, G3): \"\"\" generates a list of gauss coefficients drawn from the TK03 distribution \"\"\" # random.seed(n) p = 0 n = seed gh = [] g10, sfact, afact = -18e3, 3.8, 2.4 g20 = G2 * g10 g30 = G3 * g10 alpha = g10/afact s1 = s_l(1, alpha) s10 = sfact * s1 gnew = random.normal(g10, s10) if p == 1: print(1, 0, gnew, 0) gh.append(gnew) gh.append(random.normal(0, s1)) gnew = gh[-1] gh.append(random.normal(0, s1)) hnew = gh[-1] if p == 1: print(1, 1, gnew, hnew) for l in range(2, terms + 1): for m in range(l + 1): OFF = 0.0 if l == 2 and m == 0: OFF = g20 if l == 3 and m == 0: OFF = g30 s = s_l(l, alpha) j = (l - m) % 2 if j == 1: s = s * sfact gh.append(random.normal(OFF, s)) gnew = gh[-1] if m == 0: hnew = 0 else: gh.append(random.normal(0, s)) hnew = gh[-1] if p == 1: print(l, m, gnew, hnew) return gh\n\n    ### Response: generates a list of gauss coefficients drawn from the TK03 distribution.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void unzip(final String zipFile, final String destDir, final String... patterns) throws IOException { unzip(new File(zipFile), new File(destDir), patterns); }\n\n    ### Response:",
        "ground_truth": "Extracts zip file content to the target directory.\n@see #unzip(java.io.File, java.io.File, String...)",
        "predict": " generates a list of gauss coefficients drawn from the TK03 distribution.\n\n    "
    },
    {
        "ID": 959,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function replaceVars(value, vars) { if (typeof value != \"string\") { value = value(vars); } else if (vars) { value = value.replace(/%(\\w+)/g, function (str, name) { return vars[name] || str; }); } return value; }\n\n    ### Response: Replaces variables in the value. The variable format is %var.\n\n@private\n@param {String} value Value to replace variables in.\n@param {Object} vars Name/value array with variables to replace.\n@return {String} New value with replaced variables..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void addToZip(final ZipOutputStream zos, final File file, String path, final String comment, final boolean recursive) throws IOException { if (!file.exists()) { throw new FileNotFoundException(file.toString()); } if (path == null) { path = file.getName(); } while (path.length() != 0 && path.charAt(0) == '/') { path = path.substring(1); } boolean isDir = file.isDirectory(); if (isDir) { // add folder record if (!StringUtil.endsWithChar(path, '/')) { path += '/'; } } ZipEntry zipEntry = new ZipEntry(path); zipEntry.setTime(file.lastModified()); if (comment != null) { zipEntry.setComment(comment); } if (isDir) { zipEntry.setSize(0); zipEntry.setCrc(0); } zos.putNextEntry(zipEntry); if (!isDir) { InputStream is = new FileInputStream(file); try { StreamUtil.copy(is, zos); } finally { StreamUtil.close(is); } } zos.closeEntry(); // continue adding if (recursive && file.isDirectory()) { boolean noRelativePath = StringUtil.isEmpty(path); final File[] children = file.listFiles(); if (children != null && children.length != 0) { for (File child : children) { String childRelativePath = (noRelativePath ? StringPool.EMPTY : path) + child.getName(); addToZip(zos, child, childRelativePath, comment, recursive); } } } }\n\n    ### Response:",
        "ground_truth": "Adds single entry to ZIP output stream.\n\n@param zos zip output stream\n@param file file or folder to add\n@param path relative path of file entry; if null files name will be used instead\n@param comment optional comment\n@param recursive when set to true content of added folders will be added, too",
        "predict": " Replaces variables in the value. The variable format is %var.\n\n@private\n@param {String} value Value to replace variables in.\n@param {Object} vars Name/value array with variables to replace.\n@return {String} New value with replaced variables..\n\n    "
    },
    {
        "ID": 960,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (s *NicService) NewRemoveIpFromNicParams(id string) *RemoveIpFromNicParams { p := &RemoveIpFromNicParams{} p.p = make(map[string]interface{}) p.p[\"id\"] = id return p }\n\n    ### Response: // You should always use this function to get a new RemoveIpFromNicParams instance,\n// as then you are sure you have configured all required params.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void addToZip(final ZipOutputStream zos, final byte[] content, String path, final String comment) throws IOException { while (path.length() != 0 && path.charAt(0) == '/') { path = path.substring(1); } if (StringUtil.endsWithChar(path, '/')) { path = path.substring(0, path.length() - 1); } ZipEntry zipEntry = new ZipEntry(path); zipEntry.setTime(System.currentTimeMillis()); if (comment != null) { zipEntry.setComment(comment); } zos.putNextEntry(zipEntry); InputStream is = new ByteArrayInputStream(content); try { StreamUtil.copy(is, zos); } finally { StreamUtil.close(is); } zos.closeEntry(); }\n\n    ### Response:",
        "ground_truth": "Adds byte content into the zip as a file.",
        "predict": " // You should always use this function to get a new RemoveIpFromNicParams instance,\n// as then you are sure you have configured all required params.\n\n    "
    },
    {
        "ID": 961,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def main_view(request, ident, stateless=False, cache_id=None, **kwargs): 'Main view for a dash app' _, app = DashApp.locate_item(ident, stateless, cache_id=cache_id) view_func = app.locate_endpoint_function() resp = view_func() return HttpResponse(resp)\n\n    ### Response: Main view for a dash app.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public FieldDescriptor getFieldDescriptor(final String name, final boolean declared) { final FieldDescriptor fieldDescriptor = getFields().getFieldDescriptor(name); if (fieldDescriptor != null) { if (!fieldDescriptor.matchDeclared(declared)) { return null; } } return fieldDescriptor; }\n\n    ### Response:",
        "ground_truth": "Returns field descriptor.",
        "predict": " Main view for a dash app.\n\n    "
    },
    {
        "ID": 962,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function setContentType($var) { GPBUtil::checkEnum($var, \\Google\\Cloud\\Asset\\V1\\ContentType::class); $this->content_type = $var; return $this; }\n\n    ### Response: Asset content type. If not specified, no content but the asset name will be\nreturned.\n\nGenerated from protobuf field .google.cloud.asset.v1.ContentType content_type = 4;\n@param int $var\n@return $this.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public PropertyDescriptor getPropertyDescriptor(final String name, final boolean declared) { PropertyDescriptor propertyDescriptor = getProperties().getPropertyDescriptor(name); if ((propertyDescriptor != null) && propertyDescriptor.matchDeclared(declared)) { return propertyDescriptor; } return null; }\n\n    ### Response:",
        "ground_truth": "Returns property descriptor. Declared flag is matched on both read and write\nmethods.",
        "predict": " Asset content type. If not specified, no content but the asset name will be\nreturned.\n\nGenerated from protobuf field .google.cloud.asset.v1.ContentType content_type = 4;\n@param int $var\n@return $this.\n\n    "
    },
    {
        "ID": 963,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function assert_rating_matches($expected, $stored) { $this->assertEquals($expected->rating, $stored->rating); $this->assertEquals($expected->userid, $stored->author); }\n\n    ### Response: Assert that the rating matches.\n\n@param   \\stdClass           $expected   The expected rating structure\n@param   \\stdClass           $stored     The actual rating structure.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void setRequestBundleName(final ServletRequest request, final String bundleName) { if (log.isDebugEnabled()) { log.debug(\"Bundle name for this request: \" + bundleName); } request.setAttribute(REQUEST_BUNDLE_NAME_ATTR, bundleName); }\n\n    ### Response:",
        "ground_truth": "Sets bundle name for provided servlet request.",
        "predict": " Assert that the rating matches.\n\n@param   \\stdClass           $expected   The expected rating structure\n@param   \\stdClass           $stored     The actual rating structure.\n\n    "
    },
    {
        "ID": 964,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function objectAttributes($builder) { $relationName = $this->getRelationName($builder); $relatedClass = $builder->getClassNameFromBuilder($builder->getNewStubObjectBuilder($this->getForeignTable())); $aggregateName = $this->getParameter('aggregate_name'); return \"/** * @var $relatedClass */ protected \\$old{$relationName}{$aggregateName}; \"; }\n\n    ### Response: which already has a hook.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void setSessionLocale(final HttpSession session, final String localeCode) { if (log.isDebugEnabled()) { log.debug(\"Locale stored to session: \" + localeCode); } Locale locale = Locale.forLanguageTag(localeCode); session.setAttribute(SESSION_LOCALE_ATTR, locale); }\n\n    ### Response:",
        "ground_truth": "Saves Locale to HTTP session.",
        "predict": " which already has a hook.\n\n    "
    },
    {
        "ID": 965,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _login(self): \"\"\"Login to Asterisk Manager Interface.\"\"\" self._sendAction(\"login\", ( (\"Username\", self._amiuser), (\"Secret\", self._amipass), (\"Events\", \"off\"), )) resp = self._getResponse() if resp.get(\"Response\") == \"Success\": return True else: raise Exception(\"Authentication to Asterisk Manager Interface Failed.\")\n\n    ### Response: Login to Asterisk Manager Interface..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Locale getSessionLocale(final HttpSession session) { Locale locale = (Locale) session.getAttribute(SESSION_LOCALE_ATTR); return locale == null ? MESSAGE_RESOLVER.getFallbackLocale() : locale; }\n\n    ### Response:",
        "ground_truth": "Returns current locale from session.\ns",
        "predict": " Login to Asterisk Manager Interface..\n\n    "
    },
    {
        "ID": 966,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private function addTrustedHosts($siteUrl) { $trustedHosts = array(); // extract host from the request header if (($host = $this->extractHost('http://' . Url::getHost())) !== false) { $trustedHosts[] = $host; } // extract host from first web site if (($host = $this->extractHost(urldecode($siteUrl))) !== false) { $trustedHosts[] = $host; } $trustedHosts = array_unique($trustedHosts); if (count($trustedHosts)) { $general = Config::getInstance()->General; $general['trusted_hosts'] = $trustedHosts; Config::getInstance()->General = $general; Config::getInstance()->forceSave(); } }\n\n    ### Response: Add trusted hosts.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String[] filterParametersForBeanName(String beanName, final boolean resolveReferenceParams) { beanName = beanName + '.'; List<String> list = new ArrayList<>(); for (Map.Entry<String, Object> entry : params.entrySet()) { String key = entry.getKey(); if (!key.startsWith(beanName)) { continue; } list.add(key); if (!resolveReferenceParams) { continue; } // resolve all references String value = PropertiesUtil.resolveProperty(params, key); entry.setValue(value); } if (list.isEmpty()) { return StringPool.EMPTY_ARRAY; } else { return list.toArray(new String[0]); } }\n\n    ### Response:",
        "ground_truth": "Returns an array of param keys that belongs to provided bean.\nOptionally resolves the value of returned parameters.",
        "predict": " Add trusted hosts.\n\n    "
    },
    {
        "ID": 967,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def put_changes_document_stream_with_http_info(request) raise ArgumentError, 'Incorrect request type' unless request.is_a? PutChangesDocumentStreamRequest @api_client.config.logger.debug 'Calling API: ChangesApi.put_changes_document_stream ...' if @api_client.config.debugging # resource path local_var_path = '/comparison/compareDocuments/changes/stream' # query parameters query_params = {} # header parameters header_params = {} # HTTP header 'Accept' (if needed) header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml']) # HTTP header 'Content-Type' header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/xml']) # form parameters form_params = {} # http body (model) post_body = @api_client.object_to_http_body(request.request) data, status_code, headers = @api_client.call_api(:PUT, local_var_path, header_params: header_params, query_params: query_params, form_params: form_params, body: post_body, access_token: get_access_token, return_type: 'File') if @api_client.config.debugging @api_client.config.logger.debug \"API called: ChangesApi#put_changes_document_stream\\nData: #{data.inspect}\\nStatus code: #{status_code}\\nHeaders: #{headers}\" end [data, status_code, headers] end\n\n    ### Response: Applies changes to the document and returns stream of document with the result of comparison\n\n @param request put_changes_document_stream_request\n @return [Array]\n File data, response status code and response headers.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public PropsEntries profile(final String... profiles) { if (profiles == null) { return this; } for (String profile : profiles) { addProfiles(profile); } return this; }\n\n    ### Response:",
        "ground_truth": "Enables profiles to iterate.",
        "predict": " Applies changes to the document and returns stream of document with the result of comparison\n\n @param request put_changes_document_stream_request\n @return [Array]\n File data, response status code and response headers.\n\n    "
    },
    {
        "ID": 968,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public ProjectCalendarException getException(Date date) { ProjectCalendarException exception = null; // We're working with expanded exceptions, which includes any recurring exceptions // expanded into individual entries. populateExpandedExceptions(); if (!m_expandedExceptions.isEmpty()) { sortExceptions(); int low = 0; int high = m_expandedExceptions.size() - 1; long targetDate = date.getTime(); while (low <= high) { int mid = (low + high) >>> 1; ProjectCalendarException midVal = m_expandedExceptions.get(mid); int cmp = 0 - DateHelper.compare(midVal.getFromDate(), midVal.getToDate(), targetDate); if (cmp < 0) { low = mid + 1; } else { if (cmp > 0) { high = mid - 1; } else { exception = midVal; break; } } } } if (exception == null && getParent() != null) { // Check base calendar as well for an exception. exception = getParent().getException(date); } return (exception); }\n\n    ### Response: Retrieve a calendar exception which applies to this date.\n\n@param date target date\n@return calendar exception, or null if none match this date.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static long getLongLittleEndian(final byte[] buf, final int offset) { return ((long) buf[offset + 7] << 56) // no mask needed | ((buf[offset + 6] & 0xffL) << 48) | ((buf[offset + 5] & 0xffL) << 40) | ((buf[offset + 4] & 0xffL) << 32) | ((buf[offset + 3] & 0xffL) << 24) | ((buf[offset + 2] & 0xffL) << 16) | ((buf[offset + 1] & 0xffL) << 8) | ((buf[offset] & 0xffL)); // no shift needed }\n\n    ### Response:",
        "ground_truth": "Gets a long from a byte buffer in little endian byte order.",
        "predict": " Retrieve a calendar exception which applies to this date.\n\n@param date target date\n@return calendar exception, or null if none match this date.\n\n    "
    },
    {
        "ID": 969,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (b *EvalBroker) Nack(evalID, token string) error { b.l.Lock() defer b.l.Unlock() // Always delete the requeued evaluation since the Nack means the requeue is // invalid. delete(b.requeue, token) // Lookup the unack'd eval unack, ok := b.unack[evalID] if !ok { return fmt.Errorf(\"Evaluation ID not found\") } if unack.Token != token { return fmt.Errorf(\"Token does not match for Evaluation ID\") } // Stop the timer, doesn't matter if we've missed it unack.NackTimer.Stop() // Cleanup delete(b.unack, evalID) // Update the stats b.stats.TotalUnacked -= 1 bySched := b.stats.ByScheduler[unack.Eval.Type] bySched.Unacked -= 1 // Check if we've hit the delivery limit, and re-enqueue // in the failedQueue if dequeues := b.evals[evalID]; dequeues >= b.deliveryLimit { b.enqueueLocked(unack.Eval, failedQueue) } else { e := unack.Eval e.Wait = b.nackReenqueueDelay(e, dequeues) // See if there should be a delay before re-enqueuing if e.Wait > 0 { b.processWaitingEnqueue(e) } else { b.enqueueLocked(e, e.Type) } } return nil }\n\n    ### Response: // Nack is used to negatively acknowledge handling an evaluation.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static byte[] readStream(final InputStream inputStream, final boolean close) throws IOException { if (inputStream == null) { throw new IOException(\"Class not found\"); } try { ByteArrayOutputStream outputStream = new ByteArrayOutputStream(); byte[] data = new byte[INPUT_STREAM_DATA_CHUNK_SIZE]; int bytesRead; while ((bytesRead = inputStream.read(data, 0, data.length)) != -1) { outputStream.write(data, 0, bytesRead); } outputStream.flush(); return outputStream.toByteArray(); } finally { if (close) { inputStream.close(); } } }\n\n    ### Response:",
        "ground_truth": "Reads the given input stream and returns its content as a byte array.\n\n@param inputStream an input stream.\n@param close true to close the input stream after reading.\n@return the content of the given input stream.\n@throws IOException if a problem occurs during reading.",
        "predict": " // Nack is used to negatively acknowledge handling an evaluation.\n\n    "
    },
    {
        "ID": 970,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function filterBackend(CollectionInterface $results) { return $results->filter(function (Language $language) { return $language->available_at_backend === true; }); }\n\n    ### Response: Filter the provided result set by languages that are available at the backend.\n\n@param CollectionInterface $results The collection to filter.\n@return FilterIterator.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected Label readLabel(final int bytecodeOffset, final Label[] labels) { if (labels[bytecodeOffset] == null) { labels[bytecodeOffset] = new Label(); } return labels[bytecodeOffset]; }\n\n    ### Response:",
        "ground_truth": "Returns the label corresponding to the given bytecode offset. The default implementation of\nthis method creates a label for the given offset if it has not been already created.\n\n@param bytecodeOffset a bytecode offset in a method.\n@param labels the already created labels, indexed by their offset. If a label already exists\nfor bytecodeOffset this method must not create a new one. Otherwise it must store the new\nlabel in this array.\n@return a non null Label, which must be equal to labels[bytecodeOffset].",
        "predict": " Filter the provided result set by languages that are available at the backend.\n\n@param CollectionInterface $results The collection to filter.\n@return FilterIterator.\n\n    "
    },
    {
        "ID": 971,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def adapts(**schemas): \"\"\"Create a decorator for validating and adapting function parameters. Example:: @adapts(a=\"number\", body={\"+field_ids\": [V.AdaptTo(int)], \"is_ok\": bool}) def f(a, body): print (a, body.field_ids, body.is_ok) :param schemas: The schema for adapting a given parameter. \"\"\" validate = parse(schemas).validate @decorator def adapting(func, *args, **kwargs): adapted = validate(inspect.getcallargs(func, *args, **kwargs), adapt=True) argspec = inspect.getargspec(func) if argspec.varargs is argspec.keywords is None: # optimization for the common no varargs, no keywords case return func(**adapted) adapted_varargs = adapted.pop(argspec.varargs, ()) adapted_keywords = adapted.pop(argspec.keywords, {}) if not adapted_varargs: # keywords only if adapted_keywords: adapted.update(adapted_keywords) return func(**adapted) adapted_posargs = [adapted[arg] for arg in argspec.args] adapted_posargs.extend(adapted_varargs) return func(*adapted_posargs, **adapted_keywords) return adapting\n\n    ### Response: Create a decorator for validating and adapting function parameters.\n\n    Example::\n\n        @adapts(a=\"number\", body={\"+field_ids\": [V.AdaptTo(int)], \"is_ok\": bool})\n        def f(a, body):\n            print (a, body.field_ids, body.is_ok)\n\n    :param schemas: The schema for adapting a given parameter..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private int getTypeAnnotationBytecodeOffset( final int[] typeAnnotationOffsets, final int typeAnnotationIndex) { if (typeAnnotationOffsets == null || typeAnnotationIndex >= typeAnnotationOffsets.length || readByte(typeAnnotationOffsets[typeAnnotationIndex]) < TypeReference.INSTANCEOF) { return -1; } return readUnsignedShort(typeAnnotationOffsets[typeAnnotationIndex] + 1); }\n\n    ### Response:",
        "ground_truth": "Returns the bytecode offset corresponding to the specified JVMS 'type_annotation' structure, or\n-1 if there is no such type_annotation of if it does not have a bytecode offset.\n\n@param typeAnnotationOffsets the offset of each 'type_annotation' entry in a\nRuntime[In]VisibleTypeAnnotations attribute, or null.\n@param typeAnnotationIndex the index a 'type_annotation' entry in typeAnnotationOffsets.\n@return bytecode offset corresponding to the specified JVMS 'type_annotation' structure, or -1\nif there is no such type_annotation of if it does not have a bytecode offset.",
        "predict": " Create a decorator for validating and adapting function parameters.\n\n    Example::\n\n        @adapts(a=\"number\", body={\"+field_ids\": [V.AdaptTo(int)], \"is_ok\": bool})\n        def f(a, body):\n            print (a, body.field_ids, body.is_ok)\n\n    :param schemas: The schema for adapting a given parameter..\n\n    "
    },
    {
        "ID": 972,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func isDockerfile(info os.FileInfo) bool { return info.Name() == \"Dockerfile\" && (info.Mode().IsRegular() || info.Mode()&os.ModeSymlink != 0) }\n\n    ### Response: // isDockerfile returns true if info looks like a Dockerfile. It must be named\n// \"Dockerfile\" and be either a regular file or a symlink..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private int readElementValues( final AnnotationVisitor annotationVisitor, final int annotationOffset, final boolean named, final char[] charBuffer) { int currentOffset = annotationOffset; // Read the num_element_value_pairs field (or num_values field for an array_value). int numElementValuePairs = readUnsignedShort(currentOffset); currentOffset += 2; if (named) { // Parse the element_value_pairs array. while (numElementValuePairs-- > 0) { String elementName = readUTF8(currentOffset, charBuffer); currentOffset = readElementValue(annotationVisitor, currentOffset + 2, elementName, charBuffer); } } else { // Parse the array_value array. while (numElementValuePairs-- > 0) { currentOffset = readElementValue(annotationVisitor, currentOffset, /* named = */ null, charBuffer); } } if (annotationVisitor != null) { annotationVisitor.visitEnd(); } return currentOffset; }\n\n    ### Response:",
        "ground_truth": "Reads the element values of a JVMS 'annotation' structure and makes the given visitor visit\nthem. This method can also be used to read the values of the JVMS 'array_value' field of an\nannotation's 'element_value'.\n\n@param annotationVisitor the visitor that must visit the values.\n@param annotationOffset the start offset of an 'annotation' structure (excluding its type_index\nfield) or of an 'array_value' structure.\n@param named if the annotation values are named or not. This should be true to parse the values\nof a JVMS 'annotation' structure, and false to parse the JVMS 'array_value' of an\nannotation's element_value.\n@param charBuffer the buffer used to read strings in the constant pool.\n@return the end offset of the JVMS 'annotation' or 'array_value' structure.",
        "predict": " // isDockerfile returns true if info looks like a Dockerfile. It must be named\n// \"Dockerfile\" and be either a regular file or a symlink..\n\n    "
    },
    {
        "ID": 973,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def float(self, item, default=None): \"\"\" Return value of key as a float :param item: key of value to transform :param default: value to return if item does not exist :return: float of value \"\"\" try: item = self.__getattr__(item) except AttributeError as err: if default is not None: return default raise err return float(item)\n\n    ### Response: Return value of key as a float\n\n        :param item: key of value to transform\n        :param default: value to return if item does not exist\n        :return: float of value.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private int readVerificationTypeInfo( final int verificationTypeInfoOffset, final Object[] frame, final int index, final char[] charBuffer, final Label[] labels) { int currentOffset = verificationTypeInfoOffset; int tag = b[currentOffset++] & 0xFF; switch (tag) { case Frame.ITEM_TOP: frame[index] = Opcodes.TOP; break; case Frame.ITEM_INTEGER: frame[index] = Opcodes.INTEGER; break; case Frame.ITEM_FLOAT: frame[index] = Opcodes.FLOAT; break; case Frame.ITEM_DOUBLE: frame[index] = Opcodes.DOUBLE; break; case Frame.ITEM_LONG: frame[index] = Opcodes.LONG; break; case Frame.ITEM_NULL: frame[index] = Opcodes.NULL; break; case Frame.ITEM_UNINITIALIZED_THIS: frame[index] = Opcodes.UNINITIALIZED_THIS; break; case Frame.ITEM_OBJECT: frame[index] = readClass(currentOffset, charBuffer); currentOffset += 2; break; case Frame.ITEM_UNINITIALIZED: frame[index] = createLabel(readUnsignedShort(currentOffset), labels); currentOffset += 2; break; default: throw new IllegalArgumentException(); } return currentOffset; }\n\n    ### Response:",
        "ground_truth": "Reads a JVMS 'verification_type_info' structure and stores it at the given index in the given\narray.\n\n@param verificationTypeInfoOffset the start offset of the 'verification_type_info' structure to\nread.\n@param frame the array where the parsed type must be stored.\n@param index the index in 'frame' where the parsed type must be stored.\n@param charBuffer the buffer used to read strings in the constant pool.\n@param labels the labels of the method currently being parsed, indexed by their offset. If the\nparsed type is an ITEM_Uninitialized, a new label for the corresponding NEW instruction is\nstored in this array if it does not already exist.\n@return the end offset of the JVMS 'verification_type_info' structure.",
        "predict": " Return value of key as a float\n\n        :param item: key of value to transform\n        :param default: value to return if item does not exist\n        :return: float of value.\n\n    "
    },
    {
        "ID": 974,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void setSourceDirectory (final File directory) { if (!directory.isAbsolute ()) { throw new IllegalArgumentException (\"source directory is not absolute: \" + directory); } this.scanner.setBasedir (directory); }\n\n    ### Response: Sets the absolute path to the source directory to scan for grammar files.\nThis directory must exist or the scanner will report an error.\n\n@param directory\nThe absolute path to the source directory to scan, must not be\nnull..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private int[] readBootstrapMethodsAttribute(final int maxStringLength) { char[] charBuffer = new char[maxStringLength]; int currentAttributeOffset = getFirstAttributeOffset(); int[] currentBootstrapMethodOffsets = null; for (int i = readUnsignedShort(currentAttributeOffset - 2); i > 0; --i) { // Read the attribute_info's attribute_name and attribute_length fields. String attributeName = readUTF8(currentAttributeOffset, charBuffer); int attributeLength = readInt(currentAttributeOffset + 2); currentAttributeOffset += 6; if (Constants.BOOTSTRAP_METHODS.equals(attributeName)) { // Read the num_bootstrap_methods field and create an array of this size. currentBootstrapMethodOffsets = new int[readUnsignedShort(currentAttributeOffset)]; // Compute and store the offset of each 'bootstrap_methods' array field entry. int currentBootstrapMethodOffset = currentAttributeOffset + 2; for (int j = 0; j < currentBootstrapMethodOffsets.length; ++j) { currentBootstrapMethodOffsets[j] = currentBootstrapMethodOffset; // Skip the bootstrap_method_ref and num_bootstrap_arguments fields (2 bytes each), // as well as the bootstrap_arguments array field (of size num_bootstrap_arguments * 2). currentBootstrapMethodOffset += 4 + readUnsignedShort(currentBootstrapMethodOffset + 2) * 2; } return currentBootstrapMethodOffsets; } currentAttributeOffset += attributeLength; } return null; }\n\n    ### Response:",
        "ground_truth": "Reads the BootstrapMethods attribute to compute the offset of each bootstrap method.\n\n@param maxStringLength a conservative estimate of the maximum length of the strings contained\nin the constant pool of the class.\n@return the offsets of the bootstrap methods or null.",
        "predict": " Sets the absolute path to the source directory to scan for grammar files.\nThis directory must exist or the scanner will report an error.\n\n@param directory\nThe absolute path to the source directory to scan, must not be\nnull..\n\n    "
    },
    {
        "ID": 975,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function mergeAttribute(string $key, $mergeValue) { $current = $this[$key]; if ($current instanceof DataObjectInterface && method_exists($current, 'merge')) { $class = get_class($current); if (is_array($mergeValue)) { $mergeValue = new $class($mergeValue); } // If we have nothing to merge with, don't bother if (null === $mergeValue) { return; } $mergeValue = $current->merge($mergeValue); } if (null === $mergeValue) { return; } $this[$key] = $mergeValue; }\n\n    ### Response: Merges a single attribute by key with a new given value.\n\n@param string $key\n@param mixed  $mergeValue.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected CtorDescriptor[] inspectConstructors() { Class type = classDescriptor.getType(); Constructor[] ctors = type.getDeclaredConstructors(); CtorDescriptor[] allCtors = new CtorDescriptor[ctors.length]; for (int i = 0; i < ctors.length; i++) { Constructor ctor = ctors[i]; CtorDescriptor ctorDescriptor = createCtorDescriptor(ctor); allCtors[i] = ctorDescriptor; if (ctorDescriptor.isDefault()) { defaultCtor = ctorDescriptor; } } return allCtors; }\n\n    ### Response:",
        "ground_truth": "Inspects all declared constructors of a target type.",
        "predict": " Merges a single attribute by key with a new given value.\n\n@param string $key\n@param mixed  $mergeValue.\n\n    "
    },
    {
        "ID": 976,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (o *LaunchSpecification) SetLabels(v []*Label) *LaunchSpecification { if o.Labels = v; o.Labels == nil { o.nullFields = append(o.nullFields, \"Labels\") } return o }\n\n    ### Response: // SetLabels sets the labels to be used with the group.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public CtorDescriptor getCtorDescriptor(final Class... args) { ctors: for (CtorDescriptor ctorDescriptor : allCtors) { Class[] arg = ctorDescriptor.getParameters(); if (arg.length != args.length) { continue; } for (int j = 0; j < arg.length; j++) { if (arg[j] != args[j]) { continue ctors; } } return ctorDescriptor; } return null; }\n\n    ### Response:",
        "ground_truth": "Finds constructor description that matches given argument types.",
        "predict": " // SetLabels sets the labels to be used with the group.\n\n    "
    },
    {
        "ID": 977,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def constant_action(self, text, loc, const): \"\"\"Code executed after recognising a constant\"\"\" exshared.setpos(loc, text) if DEBUG > 0: print(\"CONST:\",const) if DEBUG == 2: self.symtab.display() if DEBUG > 2: return return self.symtab.insert_constant(const[0], const[1])\n\n    ### Response: Code executed after recognising a constant.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SuppressWarnings(\"unchecked\") protected Map<String, TransientBeanData> getRequestMap(final HttpServletRequest servletRequest) { return (Map<String, TransientBeanData>) servletRequest.getAttribute(ATTR_NAME); }\n\n    ### Response:",
        "ground_truth": "",
        "predict": " Code executed after recognising a constant.\n\n    "
    },
    {
        "ID": 978,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function addObjectIdentitiesTable() { $table = $this->createTable($this->options['oid_table_name']); $table->addColumn('id', 'integer', array('unsigned' => true, 'autoincrement' => true)); $table->addColumn('class_id', 'integer', array('unsigned' => true)); $table->addColumn('object_identifier', 'string', array('length' => 100)); $table->addColumn('parent_object_identity_id', 'integer', array('unsigned' => true, 'notnull' => false)); $table->addColumn('entries_inheriting', 'boolean'); $table->setPrimaryKey(array('id')); $table->addUniqueIndex(array('object_identifier', 'class_id')); $table->addIndex(array('parent_object_identity_id')); $table->addForeignKeyConstraint($table, array('parent_object_identity_id'), array('id')); }\n\n    ### Response: Adds the object identity table to the schema..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected Map<String, TransientBeanData> createRequestMap(final HttpServletRequest servletRequest) { Map<String, TransientBeanData> map = new HashMap<>(); servletRequest.setAttribute(ATTR_NAME, map); return map; }\n\n    ### Response:",
        "ground_truth": "Creates instance map and stores it in the request.",
        "predict": " Adds the object identity table to the schema..\n\n    "
    },
    {
        "ID": 979,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static DesignDocument create(String body, String name) throws DesignParseException { DesignDocument doc = new DesignDocument(body); doc.id = \"_design/\" + name; doc.load(); return doc; }\n\n    ### Response: Create a new design document\n@param body The JSON encoded source of this design document\n@param name The name of the design document. This should be the simple name, e.g. {@code beer}. If the\n{@code body} contains a {@code _id} property, then that property will override\n{@code name}\n@return A new design document\n@throws DesignParseException if a design parse error occurs.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected long[] convertArrayToArray(final Object value) { final Class valueComponentType = value.getClass().getComponentType(); final long[] result; if (valueComponentType.isPrimitive()) { result = convertPrimitiveArrayToArray(value, valueComponentType); } else { // convert object array to target array final Object[] array = (Object[]) value; result = new long[array.length]; for (int i = 0; i < array.length; i++) { result[i] = convertType(array[i]); } } return result; }\n\n    ### Response:",
        "ground_truth": "Converts array value to array.",
        "predict": " Create a new design document\n@param body The JSON encoded source of this design document\n@param name The name of the design document. This should be the simple name, e.g. {@code beer}. If the\n{@code body} contains a {@code _id} property, then that property will override\n{@code name}\n@return A new design document\n@throws DesignParseException if a design parse error occurs.\n\n    "
    },
    {
        "ID": 980,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static int[] getDeconvolutionOutputSize(INDArray inputData, int[] kernel, int[] strides, int[] padding, ConvolutionMode convolutionMode, int[] dilation) { // FIXME: int cast int hIn = (int) inputData.size(2); int wIn = (int) inputData.size(3); int[] eKernel = effectiveKernelSize(kernel, dilation); if (convolutionMode == ConvolutionMode.Same) { int hOut = strides[0] * hIn; int wOut = strides[1] * wIn; return new int[]{hOut, wOut}; } int hOut = strides[0] * (hIn - 1) + eKernel[0] - 2 * padding[0]; int wOut = strides[1] * (wIn - 1) + eKernel[1] - 2 * padding[1]; return new int[]{hOut, wOut}; }\n\n    ### Response: Get the output size of a deconvolution operation for given input data. In deconvolution, we compute the inverse\nof the shape computation of a convolution.\n\n@param inputData       Input data\n@param kernel          Kernel size (height/width)\n@param strides         Strides (height/width)\n@param padding         Padding (height/width)\n@param convolutionMode Convolution mode (Same, Strict, Truncate)\n@param dilation        Kernel dilation (height/width)\n@return Output size: int[2] with output height/width.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public void init(final FilterConfig filterConfig) throws ServletException { // final String decoraManagerClass = filterConfig.getInitParameter(PARAM_DECORA_MANAGER); if (decoraManagerClass != null) { try { final Class decoraManagerType = ClassLoaderUtil.loadClass(decoraManagerClass); decoraManager = (DecoraManager) ClassUtil.newInstance(decoraManagerType); } catch (Exception ex) { log.error(\"Unable to load Decora manager class: \" + decoraManagerClass, ex); throw new ServletException(ex); } } else { decoraManager = createDecoraManager(); } // final String decoraParserClass = filterConfig.getInitParameter(PARAM_DECORA_PARSER); if (decoraParserClass != null) { try { final Class decoraParserType = ClassLoaderUtil.loadClass(decoraParserClass); decoraParser = (DecoraParser) ClassUtil.newInstance(decoraParserType); } catch (Exception ex) { log.error(\"Unable to load Decora parser class: \" + decoraParserClass, ex); throw new ServletException(ex); } } else { decoraParser = createDecoraParser(); } // final String decoraCache = filterConfig.getInitParameter(PARAM_DECORA_CACHE); if (decoraCache != null) { cached = Converter.get().toBoolean(decoraCache, false); } }\n\n    ### Response:",
        "ground_truth": "Initializes Decora filter. Loads manager and parser from init parameters.",
        "predict": " Get the output size of a deconvolution operation for given input data. In deconvolution, we compute the inverse\nof the shape computation of a convolution.\n\n@param inputData       Input data\n@param kernel          Kernel size (height/width)\n@param strides         Strides (height/width)\n@param padding         Padding (height/width)\n@param convolutionMode Convolution mode (Same, Strict, Truncate)\n@param dilation        Kernel dilation (height/width)\n@return Output size: int[2] with output height/width.\n\n    "
    },
    {
        "ID": 981,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static <T> Future<T> ofError(final Throwable error) { final CompletableFuture<T> cf = new CompletableFuture<>(); cf.completeExceptionally(error); return Future.<T> of(cf); }\n\n    ### Response: Construct a completed-with-error Future from the given Exception\n\n@param error\nTo wrap inside a Future\n@return Future containing supplied error.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public FindFile onFile(final Consumer<File> fileConsumer) { if (consumers == null) { consumers = Consumers.of(fileConsumer); } else { consumers.add(fileConsumer); } return this; }\n\n    ### Response:",
        "ground_truth": "Registers file consumer",
        "predict": " Construct a completed-with-error Future from the given Exception\n\n@param error\nTo wrap inside a Future\n@return Future containing supplied error.\n\n    "
    },
    {
        "ID": 982,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static function stripToEmpty($str) { return (null === $str) ? self::EMPTY_STR : self::strip($str, null); }\n\n    ### Response: Strips whitespace from the start and end of a `string` returning an empty\n`string` if `null` input.\n\nThis is similar to {@see trimToEmpty} but removes whitespace.\n\nStringUtils::stripToEmpty(null);     // ''\nStringUtils::stripToEmpty('');       // ''\nStringUtils::stripToEmpty('   ');    // ''\nStringUtils::stripToEmpty('abc');    // 'abc'\nStringUtils::stripToEmpty('  abc');  // 'abc'\nStringUtils::stripToEmpty('abc  ');  // 'abc'\nStringUtils::stripToEmpty(' abc ');  // 'abc'\nStringUtils::stripToEmpty(' ab c '); // 'ab c'\n\n@param string $str The `string` to be stripped.\n\n@return string The stripped `string` or an empty `string` if `null`\ninput..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public FindFile searchPath(final URI searchPath) { File file; try { file = new File(searchPath); } catch (Exception ex) { throw new FindFileException(\"URI error: \" + searchPath, ex); } addPath(file); return this; }\n\n    ### Response:",
        "ground_truth": "Specifies the search path. Throws an exception if URI is invalid.",
        "predict": " Strips whitespace from the start and end of a `string` returning an empty\n`string` if `null` input.\n\nThis is similar to {@see trimToEmpty} but removes whitespace.\n\nStringUtils::stripToEmpty(null);     // ''\nStringUtils::stripToEmpty('');       // ''\nStringUtils::stripToEmpty('   ');    // ''\nStringUtils::stripToEmpty('abc');    // 'abc'\nStringUtils::stripToEmpty('  abc');  // 'abc'\nStringUtils::stripToEmpty('abc  ');  // 'abc'\nStringUtils::stripToEmpty(' abc ');  // 'abc'\nStringUtils::stripToEmpty(' ab c '); // 'ab c'\n\n@param string $str The `string` to be stripped.\n\n@return string The stripped `string` or an empty `string` if `null`\ninput..\n\n    "
    },
    {
        "ID": 983,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def gevent_monkey_patch_report(self): \"\"\" Report effective gevent monkey patching on the logs. \"\"\" try: import gevent.socket import socket if gevent.socket.socket is socket.socket: self.log(\"gevent monkey patching is active\") return True else: self.notify_user(\"gevent monkey patching failed.\") except ImportError: self.notify_user(\"gevent is not installed, monkey patching failed.\") return False\n\n    ### Response: Report effective gevent monkey patching on the logs..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public FindFile searchPath(final URL searchPath) { File file = FileUtil.toContainerFile(searchPath); if (file == null) { throw new FindFileException(\"URL error: \" + searchPath); } addPath(file); return this; }\n\n    ### Response:",
        "ground_truth": "Specifies the search path. Throws an exception if URL is invalid.",
        "predict": " Report effective gevent monkey patching on the logs..\n\n    "
    },
    {
        "ID": 984,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function renderSimpleField(array $field) { if (!empty($field['ajax'])) { $field = $this->addAjax($field); } $output = ''; // Split attributes over label and element. $attributes = $field['attributes']; $labelAttributes = array(); if (!empty($attributes['label'])) { $labelAttributes = $attributes['label']; unset($attributes['label']); } if (!empty($attributes['required'])) { $labelAttributes['required'] = $attributes['required']; } $field['attributes'] = $attributes; if ($field['type'] !== 'hidden') { $output .= $this->getWrapper('element'); // Do not use a <label> with an \"id\" attribute on the label for a // set of radio buttons, a set of checkboxes, or on markup. $id = in_array($field['type'], array('radio', 'checkbox', 'markup')) ? '' : $field['id']; $output .= $this->renderLabel($field['label'], $id, $labelAttributes, true); $output .= $this->getWrapper('inputDescription'); } $output .= $this->renderElement($field); if ($field['type'] !== 'hidden') { $output .= $this->renderDescription($field['description']); $output .= $this->getWrapperEnd('inputDescription'); $output .= $this->getWrapperEnd('element'); } return $output; }\n\n    ### Response: Renders a form field including its label and description.\n\n@param array $field\n\n@return string\nHtml for this form field..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public FindFile include(final String... patterns) { for (String pattern : patterns) { rules.include(pattern); } return this; }\n\n    ### Response:",
        "ground_truth": "Defines include patterns.",
        "predict": " Renders a form field including its label and description.\n\n@param array $field\n\n@return string\nHtml for this form field..\n\n    "
    },
    {
        "ID": 985,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public FileMeta ingest( String entityTypeId, String url, String loader, String jobExecutionID, Progress progress) { if (!\"CSV\".equals(loader)) { throw new FileIngestException(\"Unknown loader '\" + loader + \"'\"); } progress.setProgressMax(2); progress.progress(0, \"Downloading url '\" + url + \"'\"); File file = fileStoreDownload.downloadFile(url, jobExecutionID, entityTypeId + \".csv\"); progress.progress(1, \"Importing...\"); FileRepositoryCollection repoCollection = fileRepositoryCollectionFactory.createFileRepositoryCollection(file); ImportService importService = importServiceFactory.getImportService(file, repoCollection); EntityImportReport report = importService.doImport(repoCollection, MetadataAction.UPSERT, ADD_UPDATE_EXISTING, null); progress.status(\"Ingestion of url '\" + url + \"' done.\"); Integer count = report.getNrImportedEntitiesMap().get(entityTypeId); count = count != null ? count : 0; progress.progress(2, \"Successfully imported \" + count + \" \" + entityTypeId + \" entities.\"); FileMeta fileMeta = createFileMeta(jobExecutionID, file); FileIngestJobExecution fileIngestJobExecution = (FileIngestJobExecution) progress.getJobExecution(); fileIngestJobExecution.setFile(fileMeta); dataService.add(FILE_META, fileMeta); return fileMeta; }\n\n    ### Response: Imports a csv file defined in the fileIngest entity\n\n@see FileIngestJobExecutionMetadata.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public FindFile exclude(final String... patterns) { for (String pattern : patterns) { rules.exclude(pattern); } return this; }\n\n    ### Response:",
        "ground_truth": "Defines exclude patterns.",
        "predict": " Imports a csv file defined in the fileIngest entity\n\n@see FileIngestJobExecutionMetadata.\n\n    "
    },
    {
        "ID": 986,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def push_primary_analyses_for_removal(self, analysis_request, analyses): \"\"\"Stores the analyses to be removed after partitions creation \"\"\" to_remove = self.analyses_to_remove.get(analysis_request, []) to_remove.extend(analyses) self.analyses_to_remove[analysis_request] = list(set(to_remove))\n\n    ### Response: Stores the analyses to be removed after partitions creation.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void addPath(final File path) { if (!path.exists()) { return; } if (pathList == null) { pathList = new LinkedList<>(); } pathList.add(path); }\n\n    ### Response:",
        "ground_truth": "Adds existing search path to the file list.\nNon existing files are ignored.\nIf path is a folder, it will be scanned for all files.",
        "predict": " Stores the analyses to be removed after partitions creation.\n\n    "
    },
    {
        "ID": 987,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static double logPdf(double x, double mu, double sigma) { return -0.5*log(2*PI) - log(sigma) + -pow(x-mu,2)/(2*sigma*sigma); }\n\n    ### Response: Computes the log probability of a given value\n@param x the value to the get log(pdf) of\n@param mu the mean of the distribution\n@param sigma the standard deviation of the distribution\n@return the log probability.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public List<File> findAll() { List<File> allFiles = new ArrayList<>(); File file; while ((file = nextFile()) != null) { allFiles.add(file); } return allFiles; }\n\n    ### Response:",
        "ground_truth": "Finds all files and returns list of founded files.",
        "predict": " Computes the log probability of a given value\n@param x the value to the get log(pdf) of\n@param mu the mean of the distribution\n@param sigma the standard deviation of the distribution\n@return the log probability.\n\n    "
    },
    {
        "ID": 988,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func caasHistoryRewriteDoc(jujuStatus, caasStatus status.StatusInfo, expectWorkload bool, displayStatus displayStatusFunc, clock clock.Clock) (*statusDoc, error) { modifiedStatus := displayStatus(jujuStatus, caasStatus, expectWorkload) if modifiedStatus.Status == jujuStatus.Status && modifiedStatus.Message == jujuStatus.Message { return nil, nil } return &statusDoc{ Status: modifiedStatus.Status, StatusInfo: modifiedStatus.Message, StatusData: utils.EscapeKeys(modifiedStatus.Data), Updated: timeOrNow(modifiedStatus.Since, clock).UnixNano(), }, nil }\n\n    ### Response: // caasHistoryRewriteDoc determines which status should be stored as history..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void init() { rules.detectMode(); todoFiles = new LinkedList<>(); todoFolders = new LinkedList<>(); if (pathList == null) { pathList = new LinkedList<>(); return; } if (pathListOriginal == null) { pathListOriginal = (LinkedList<File>) pathList.clone(); } String[] files = new String[pathList.size()]; int index = 0; Iterator<File> iterator = pathList.iterator(); while (iterator.hasNext()) { File file = iterator.next(); if (file.isFile()) { files[index++] = file.getAbsolutePath(); iterator.remove(); } } if (index != 0) { FilesIterator filesIterator = new FilesIterator(files); todoFiles.add(filesIterator); } }\n\n    ### Response:",
        "ground_truth": "Initializes file walking.\nSeparates input files and folders.",
        "predict": " // caasHistoryRewriteDoc determines which status should be stored as history..\n\n    "
    },
    {
        "ID": 989,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def exists?(type, hash) if directory(type, hash) && directory(type, hash).files.head(key_component(type, hash)) true else false end end\n\n    ### Response: Returns true if a object with the given hash exists.\n\n    layer.exists?(\"documents\", hash).\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public Iterator<File> iterator() { return new Iterator<File>() { private File nextFile; @Override public boolean hasNext() { nextFile = nextFile(); return nextFile != null; } @Override public File next() { if (nextFile == null) { throw new NoSuchElementException(); } return nextFile; } @Override public void remove() { throw new UnsupportedOperationException(); } }; }\n\n    ### Response:",
        "ground_truth": "Returns file walking iterator.",
        "predict": " Returns true if a object with the given hash exists.\n\n    layer.exists?(\"documents\", hash).\n\n    "
    },
    {
        "ID": 990,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function create(appName, callback) { commons.post(format('/%s/apps/', deis.version), { id: appName }, callback); }\n\n    ### Response: Create a new application.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public WiringMode resolveBeanWiringMode(final Class type) { PetiteBean petiteBean = ((Class<?>) type).getAnnotation(PetiteBean.class); return petiteBean != null ? petiteBean.wiring() : WiringMode.DEFAULT; }\n\n    ### Response:",
        "ground_truth": "Resolves bean's auto-wire flag from the annotation. Returns default auto-wire if annotation doesn't exist.",
        "predict": " Create a new application.\n\n    "
    },
    {
        "ID": 991,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    void movePath(int geom, int before_path, int path_to_move) { if (path_to_move == -1) throw new IllegalArgumentException(); if (before_path == path_to_move) return; int next = getNextPath(path_to_move); int prev = getPrevPath(path_to_move); int geom_src = getGeometryFromPath(path_to_move); if (prev == -1) { setFirstPath_(geom_src, next); } else { setNextPath_(prev, next); } if (next == -1) { setLastPath_(geom_src, prev); } else { setPrevPath_(next, prev); } setGeometryVertexCount_(geom_src, getPointCount(geom_src) - getPathSize(path_to_move)); setGeometryPathCount_(geom_src, getPathCount(geom_src) - 1); if (before_path == -1) prev = getLastPath(geom); else prev = getPrevPath(before_path); setPrevPath_(path_to_move, prev); setNextPath_(path_to_move, before_path); if (before_path == -1) setLastPath_(geom, path_to_move); else setPrevPath_(before_path, path_to_move); if (prev == -1) setFirstPath_(geom, path_to_move); else setNextPath_(prev, path_to_move); setGeometryVertexCount_(geom, getPointCount(geom) + getPathSize(path_to_move)); setGeometryPathCount_(geom, getPathCount(geom) + 1); setPathGeometry_(path_to_move, geom); }\n\n    ### Response: before_path can be -1, then the path is moved to the end of the dst_geom..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String resolveBeanName(final Class type, final boolean useLongTypeName) { PetiteBean petiteBean = ((Class<?>)type).getAnnotation(PetiteBean.class); String name = null; if (petiteBean != null) { name = petiteBean.value().trim(); } if ((name == null) || (name.length() == 0)) { if (useLongTypeName) { name = type.getName(); } else { name = StringUtil.uncapitalize(type.getSimpleName()); } } return name; }\n\n    ### Response:",
        "ground_truth": "Resolves bean's name from bean annotation or type name. May be used for resolving bean name\nof base type during registration of bean subclass.",
        "predict": " before_path can be -1, then the path is moved to the end of the dst_geom..\n\n    "
    },
    {
        "ID": 992,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def update(self): \"\"\"Update the status of the range setting.\"\"\" self._controller.update(self._id, wake_if_asleep=False) data = self._controller.get_charging_params(self._id) if data and (time.time() - self.__manual_update_time > 60): self.__maxrange_state = data['charge_to_max_range']\n\n    ### Response: Update the status of the range setting..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public PrintWriter getWriter() { if (outWriter == null) { if (outStream != null) { throw new IllegalStateException(\"Can't call getWriter() after getOutputStream()\"); } bufferedWriter = new FastCharArrayWriter(); outWriter = new PrintWriter(bufferedWriter) { @Override public void close() { // do not close the print writer after rendering // since it will remove reference to bufferedWriter } }; } return outWriter; }\n\n    ### Response:",
        "ground_truth": "Returns a writer.",
        "predict": " Update the status of the range setting..\n\n    "
    },
    {
        "ID": 993,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public int appendTask(long sourceHSId, TransactionInfoBaseMessage task) throws IOException { Preconditions.checkState(compiledSize == 0, \"buffer is already compiled\"); final int msgSerializedSize = task.getSerializedSize(); ensureCapacity(taskHeaderSize() + msgSerializedSize); ByteBuffer bb = m_container.b(); bb.putInt(msgSerializedSize); bb.putLong(sourceHSId); int limit = bb.limit(); bb.limit(bb.position() + msgSerializedSize); task.flattenToBuffer(bb.slice()); bb.limit(limit); bb.position(bb.position() + msgSerializedSize); // Don't allow any further expansion to the underlying buffer if (bb.position() + taskHeaderSize() > DEFAULT_BUFFER_SIZE) { compile(); return 0; } else { return DEFAULT_BUFFER_SIZE - (bb.position() + taskHeaderSize()); } }\n\n    ### Response: Appends a task message to the buffer.\n@param sourceHSId\n@param task\n@throws IOException If the buffer is not of the type TASK\n@return how many bytes are left in this buffer for adding a new task.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public ServletOutputStream getOutputStream() { if (outStream == null) { if (outWriter != null) { throw new IllegalStateException(\"Can't call getOutputStream() after getWriter()\"); } bufferOutputStream = new FastByteArrayServletOutputStream(); outStream = bufferOutputStream; } return outStream; }\n\n    ### Response:",
        "ground_truth": "Returns a servlet output stream.",
        "predict": " Appends a task message to the buffer.\n@param sourceHSId\n@param task\n@throws IOException If the buffer is not of the type TASK\n@return how many bytes are left in this buffer for adding a new task.\n\n    "
    },
    {
        "ID": 994,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func newStatements(policy BucketPolicy, bucketName string, prefix string) (statements []Statement) { statements = []Statement{} ns := newBucketStatement(policy, bucketName, prefix) statements = append(statements, ns...) ns = newObjectStatement(policy, bucketName, prefix) statements = append(statements, ns...) return statements }\n\n    ### Response: // Returns new statements for given policy, bucket and prefix..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String getClassName() { switch (sort) { case VOID: return \"void\"; case BOOLEAN: return \"boolean\"; case CHAR: return \"char\"; case BYTE: return \"byte\"; case SHORT: return \"short\"; case INT: return \"int\"; case FLOAT: return \"float\"; case LONG: return \"long\"; case DOUBLE: return \"double\"; case ARRAY: StringBuilder stringBuilder = new StringBuilder(getElementType().getClassName()); for (int i = getDimensions(); i > 0; --i) { stringBuilder.append(\"[]\"); } return stringBuilder.toString(); case OBJECT: case INTERNAL: return valueBuffer.substring(valueBegin, valueEnd).replace('/', '.'); default: throw new AssertionError(); } }\n\n    ### Response:",
        "ground_truth": "Returns the binary name of the class corresponding to this type. This method must not be used\non method types.\n\n@return the binary name of the class corresponding to this type.",
        "predict": " // Returns new statements for given policy, bucket and prefix..\n\n    "
    },
    {
        "ID": 995,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (db *DB) STTL(key []byte) (int64, error) { if err := checkKeySize(key); err != nil { return -1, err } return db.ttl(SetType, key) }\n\n    ### Response: // STTL gets the TTL of set..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String getConstructorDescriptor(final Constructor<?> constructor) { StringBuilder stringBuilder = new StringBuilder(); stringBuilder.append('('); Class<?>[] parameters = constructor.getParameterTypes(); for (Class<?> parameter : parameters) { appendDescriptor(parameter, stringBuilder); } return stringBuilder.append(\")V\").toString(); }\n\n    ### Response:",
        "ground_truth": "Returns the descriptor corresponding to the given constructor.\n\n@param constructor a {@link Constructor} object.\n@return the descriptor of the given constructor.",
        "predict": " // STTL gets the TTL of set..\n\n    "
    },
    {
        "ID": 996,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (m *managerImpl) UpdateConfiguration(throttlerName string, configuration *throttlerdatapb.Configuration, copyZeroValues bool) ([]string, error) { m.mu.Lock() defer m.mu.Unlock() // Note: The calls to t.UpdateConfiguration() below return no error but the // called protobuf library functions may panic. This is fine because the // throttler RPC service has a panic handler which will catch this. if throttlerName != \"\" { t, ok := m.throttlers[throttlerName] if !ok { return nil, fmt.Errorf(\"throttler: %v does not exist\", throttlerName) } if err := t.UpdateConfiguration(configuration, copyZeroValues); err != nil { return nil, fmt.Errorf(\"failed to update throttler: %v err: %v\", throttlerName, err) } return []string{throttlerName}, nil } for name, t := range m.throttlers { if err := t.UpdateConfiguration(configuration, copyZeroValues); err != nil { return nil, fmt.Errorf(\"failed to update throttler: %v err: %v\", name, err) } } return m.throttlerNamesLocked(), nil }\n\n    ### Response: // UpdateConfiguration implements the \"Manager\" interface..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String getMethodDescriptor(final Type returnType, final Type... argumentTypes) { StringBuilder stringBuilder = new StringBuilder(); stringBuilder.append('('); for (Type argumentType : argumentTypes) { argumentType.appendDescriptor(stringBuilder); } stringBuilder.append(')'); returnType.appendDescriptor(stringBuilder); return stringBuilder.toString(); }\n\n    ### Response:",
        "ground_truth": "Returns the descriptor corresponding to the given argument and return types.\n\n@param returnType the return type of the method.\n@param argumentTypes the argument types of the method.\n@return the descriptor corresponding to the given argument and return types.",
        "predict": " // UpdateConfiguration implements the \"Manager\" interface..\n\n    "
    },
    {
        "ID": 997,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def delete_cookie(self, key, **kwargs): ''' Delete a cookie. Be sure to use the same `domain` and `path` parameters as used to create the cookie. ''' kwargs['max_age'] = -1 kwargs['expires'] = 0 self.set_cookie(key, '', **kwargs)\n\n    ### Response: Delete a cookie. Be sure to use the same `domain` and `path`\n            parameters as used to create the cookie..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String getMethodDescriptor(final Method method) { StringBuilder stringBuilder = new StringBuilder(); stringBuilder.append('('); Class<?>[] parameters = method.getParameterTypes(); for (Class<?> parameter : parameters) { appendDescriptor(parameter, stringBuilder); } stringBuilder.append(')'); appendDescriptor(method.getReturnType(), stringBuilder); return stringBuilder.toString(); }\n\n    ### Response:",
        "ground_truth": "Returns the descriptor corresponding to the given method.\n\n@param method a {@link Method} object.\n@return the descriptor of the given method.",
        "predict": " Delete a cookie. Be sure to use the same `domain` and `path`\n            parameters as used to create the cookie..\n\n    "
    },
    {
        "ID": 998,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def get_with_http_info(resource_group_name, nat_gateway_name, expand:nil, custom_headers:nil) get_async(resource_group_name, nat_gateway_name, expand:expand, custom_headers:custom_headers).value! end\n\n    ### Response: Gets the specified nat gateway in a specified resource group.\n\n @param resource_group_name [String] The name of the resource group.\n @param nat_gateway_name [String] The name of the nat gateway.\n @param expand [String] Expands referenced resources.\n @param custom_headers [Hash{String => String}] A hash of custom headers that\n will be added to the HTTP request.\n\n @return [MsRestAzure::AzureOperationResponse] HTTP response information..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void appendDescriptor(final StringBuilder stringBuilder) { if (sort == OBJECT) { stringBuilder.append(valueBuffer, valueBegin - 1, valueEnd + 1); } else if (sort == INTERNAL) { stringBuilder.append('L').append(valueBuffer, valueBegin, valueEnd).append(';'); } else { stringBuilder.append(valueBuffer, valueBegin, valueEnd); } }\n\n    ### Response:",
        "ground_truth": "Appends the descriptor corresponding to this type to the given string buffer.\n\n@param stringBuilder the string builder to which the descriptor must be appended.",
        "predict": " Gets the specified nat gateway in a specified resource group.\n\n @param resource_group_name [String] The name of the resource group.\n @param nat_gateway_name [String] The name of the nat gateway.\n @param expand [String] Expands referenced resources.\n @param custom_headers [Hash{String => String}] A hash of custom headers that\n will be added to the HTTP request.\n\n @return [MsRestAzure::AzureOperationResponse] HTTP response information..\n\n    "
    },
    {
        "ID": 999,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Pure public static String getPreferredAttributeNameForRoadName() { final Preferences prefs = Preferences.userNodeForPackage(RoadNetworkConstants.class); if (prefs != null) { return prefs.get(\"ROAD_NAME_ATTR_NAME\", DEFAULT_ATTR_ROAD_NAME); //$NON-NLS-1$ } return DEFAULT_ATTR_ROAD_NAME; }\n\n    ### Response: Replies the preferred name for the name of the roads.\n\n@return the preferred name for the name of the roads.\n@see #DEFAULT_ATTR_ROAD_NAME.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public int getSize() { switch (sort) { case VOID: return 0; case BOOLEAN: case CHAR: case BYTE: case SHORT: case INT: case FLOAT: case ARRAY: case OBJECT: case INTERNAL: return 1; case LONG: case DOUBLE: return 2; default: throw new AssertionError(); } }\n\n    ### Response:",
        "ground_truth": "Returns the size of values of this type. This method must not be used for method types.\n\n@return the size of values of this type, i.e., 2 for {@code long} and {@code double}, 0 for\n{@code void} and 1 otherwise.",
        "predict": " Replies the preferred name for the name of the roads.\n\n@return the preferred name for the name of the roads.\n@see #DEFAULT_ATTR_ROAD_NAME.\n\n    "
    },
    {
        "ID": 1000,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def add_value_option(self, *args, **kwargs): \"\"\" Add a value option. @keyword dest: Destination attribute, derived from long option name if not given. @keyword action: How to handle the option. @keyword help: Option description. @keyword default: If given, add this value to the help string. \"\"\" kwargs['metavar'] = args[-1] if 'dest' not in kwargs: kwargs['dest'] = [o for o in args if o.startswith(\"--\")][0].replace(\"--\", \"\").replace(\"-\", \"_\") if 'default' in kwargs and kwargs['default']: kwargs['help'] += \" [%s]\" % kwargs['default'] self.parser.add_option(*args[:-1], **kwargs)\n\n    ### Response: Add a value option.\n\n            @keyword dest: Destination attribute, derived from long option name if not given.\n            @keyword action: How to handle the option.\n            @keyword help: Option description.\n            @keyword default: If given, add this value to the help string..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static int getArgumentsAndReturnSizes(final String methodDescriptor) { int argumentsSize = 1; // Skip the first character, which is always a '('. int currentOffset = 1; int currentChar = methodDescriptor.charAt(currentOffset); // Parse the argument types and compute their size, one at a each loop iteration. while (currentChar != ')') { if (currentChar == 'J' || currentChar == 'D') { currentOffset++; argumentsSize += 2; } else { while (methodDescriptor.charAt(currentOffset) == '[') { currentOffset++; } if (methodDescriptor.charAt(currentOffset++) == 'L') { // Skip the argument descriptor content. currentOffset = methodDescriptor.indexOf(';', currentOffset) + 1; } argumentsSize += 1; } currentChar = methodDescriptor.charAt(currentOffset); } currentChar = methodDescriptor.charAt(currentOffset + 1); if (currentChar == 'V') { return argumentsSize << 2; } else { int returnSize = (currentChar == 'J' || currentChar == 'D') ? 2 : 1; return argumentsSize << 2 | returnSize; } }\n\n    ### Response:",
        "ground_truth": "Computes the size of the arguments and of the return value of a method.\n\n@param methodDescriptor a method descriptor.\n@return the size of the arguments of the method (plus one for the implicit this argument),\nargumentsSize, and the size of its return value, returnSize, packed into a single int i =\n{@code (argumentsSize << 2) | returnSize} (argumentsSize is therefore equal to {@code\ni >> 2}, and returnSize to {@code i & 0x03}).",
        "predict": " Add a value option.\n\n            @keyword dest: Destination attribute, derived from long option name if not given.\n            @keyword action: How to handle the option.\n            @keyword help: Option description.\n            @keyword default: If given, add this value to the help string..\n\n    "
    },
    {
        "ID": 1001,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (m *activeDeadlineHandler) ShouldEvict(pod *v1.Pod) lifecycle.ShouldEvictResponse { if !m.pastActiveDeadline(pod) { return lifecycle.ShouldEvictResponse{Evict: false} } m.recorder.Eventf(pod, v1.EventTypeNormal, reason, message) return lifecycle.ShouldEvictResponse{Evict: true, Reason: reason, Message: message} }\n\n    ### Response: // ShouldEvict returns true if the pod is past its active deadline.\n// It dispatches an event that the pod should be evicted if it is past its deadline..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void setRollbackOnly(final Throwable th) { if (!isNoTransaction()) { if ((status != STATUS_MARKED_ROLLBACK) && (status != STATUS_ACTIVE)) { throw new JtxException(\"TNo active TX that can be marked as rollback only\"); } } rollbackCause = th; status = STATUS_MARKED_ROLLBACK; }\n\n    ### Response:",
        "ground_truth": "Modify the transaction associated with the target object such that the only possible outcome\nof the transaction is to roll back the transaction.",
        "predict": " // ShouldEvict returns true if the pod is past its active deadline.\n// It dispatches an event that the pod should be evicted if it is past its deadline..\n\n    "
    },
    {
        "ID": 1002,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function() { return new ImageUrl({ transformations: this.transformations.slice(0), baseUrl: this.rootUrl, user: this.user, publicKey: this.publicKey, privateKey: this.privateKey, imageIdentifier: this.imageIdentifier, extension: this.extension, queryString: this.queryString, path: this.path }); }\n\n    ### Response: Clone this ImageUrl instance\n\n@return {Imbo.ImageUrl}.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void commitOrRollback(boolean doCommit) { if (log.isDebugEnabled()) { if (doCommit) { log.debug(\"Commit JTX\"); } else { log.debug(\"Rollback JTX\"); } } boolean forcedRollback = false; if (!isNoTransaction()) { if (isRollbackOnly()) { if (doCommit) { doCommit = false; forcedRollback = true; } } else if (!isActive()) { if (isCompleted()) { throw new JtxException(\"TX is already completed, commit or rollback should be called once per TX\"); } throw new JtxException(\"No active TX to \" + (doCommit ? \"commit\" : \"rollback\")); } } if (doCommit) { commitAllResources(); } else { rollbackAllResources(forcedRollback); } }\n\n    ### Response:",
        "ground_truth": "Performs either commit or rollback on all transaction resources.",
        "predict": " Clone this ImageUrl instance\n\n@return {Imbo.ImageUrl}.\n\n    "
    },
    {
        "ID": 1003,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function addInfo($key, $val = null) { if (is_array($key)) { foreach ($key as $a => $b) { $this->addInfo($a, $b); } return $this; } $this->debug(\"Gathered info: $key=$val\"); $this->info[$key] = $val; return $this; }\n\n    ### Response: Add additional info to be stored in user session.\n\n@param string|array $key\n@param mixed $val\n\n@return $this.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void rollbackAllResources(final boolean wasForced) { status = STATUS_ROLLING_BACK; Exception lastException = null; Iterator<JtxResource> it = resources.iterator(); while (it.hasNext()) { JtxResource resource = it.next(); try { resource.rollbackTransaction(); } catch (Exception ex) { lastException = ex; } finally { it.remove(); } } txManager.removeTransaction(this); status = STATUS_ROLLEDBACK; if (lastException != null) { status = STATUS_UNKNOWN; throw new JtxException(\"Rollback failed: one or more TX resources couldn't rollback a TX\", lastException); } if (wasForced) { throw new JtxException(\"TX rolled back because it has been marked as rollback-only\", rollbackCause); } }\n\n    ### Response:",
        "ground_truth": "Rollbacks all attached resources. Resource will be closed. and detached from this transaction.\nIf exception occurs, it will be rethrown at the end.",
        "predict": " Add additional info to be stored in user session.\n\n@param string|array $key\n@param mixed $val\n\n@return $this.\n\n    "
    },
    {
        "ID": 1004,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (g *GRPCLogger) Info(args ...interface{}) { args = append([]interface{}{\"[INFO] \"}, args...) g.l.Print(args...) }\n\n    ### Response: // Info implements grpclog.LoggerV2.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public <E> E requestResource(final Class<E> resourceType) { if (isCompleted()) { throw new JtxException(\"TX is already completed, resource are not available after commit or rollback\"); } if (isRollbackOnly()) { throw new JtxException(\"TX is marked as rollback only, resource are not available\", rollbackCause); } if (!isNoTransaction() && !isActive()) { throw new JtxException(\"Resources are not available since TX is not active\"); } checkTimeout(); E resource = lookupResource(resourceType); if (resource == null) { int maxResources = txManager.getMaxResourcesPerTransaction(); if ((maxResources != -1) && (resources.size() >= maxResources)) { throw new JtxException(\"TX already has attached max. number of resources\"); } JtxResourceManager<E> resourceManager = txManager.lookupResourceManager(resourceType); resource = resourceManager.beginTransaction(mode, isActive()); resources.add(new JtxResource<>(this, resourceManager, resource)); } return resource; }\n\n    ### Response:",
        "ground_truth": "Requests a resource. If resource is not found, it will be created and new transaction will be started on it.",
        "predict": " // Info implements grpclog.LoggerV2.\n\n    "
    },
    {
        "ID": 1005,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private function createFilterDefinition($type, $filterString) { if ('role' === $type) { return new Definition('Behat\\Gherkin\\Filter\\RoleFilter', array($filterString)); } if ('name' === $type) { return new Definition('Behat\\Gherkin\\Filter\\NameFilter', array($filterString)); } if ('tags' === $type) { return new Definition('Behat\\Gherkin\\Filter\\TagFilter', array($filterString)); } if ('narrative' === $type) { return new Definition('Behat\\Gherkin\\Filter\\NarrativeFilter', array($filterString)); } throw new ExtensionException(sprintf( '`%s` filter is not supported by the `filters` option of gherkin extension. Supported types are `%s`.', $type, implode('`, `', array('narrative', 'role', 'name', 'tags')) ), 'gherkin'); }\n\n    ### Response: Creates filter definition of provided type.\n\n@param string $type\n@param string $filterString\n\n@return Definition\n\n@throws ExtensionException If filter type is not recognised.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void popName() { if (isPushed) { if (pushedComma) { writeComma(); } String name = pushedName; pushedName = null; isPushed = false; writeName(name); } }\n\n    ### Response:",
        "ground_truth": "Writes stored name to JSON string. Cleans storage.",
        "predict": " Creates filter definition of provided type.\n\n@param string $type\n@param string $filterString\n\n@return Definition\n\n@throws ExtensionException If filter type is not recognised.\n\n    "
    },
    {
        "ID": 1006,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function calcMod10V1(string $number, string $separator = \"\", int $minimumLength = 6): string { $revstr = strrev((string) intval($number)); $revstrLen = strlen($revstr); $total = 0; for ($i = 0; $i < $revstrLen; $i++) { if ($i % 2 == 0) { $multiplier = 2; } else { $multiplier = 1; } $subtotal = intval($revstr[$i]) * $multiplier; if ($subtotal >= 10) { $temp = (string) $subtotal; $subtotal = intval($temp[0]) + intval($temp[1]); } $total += $subtotal; } $checkDigit = (10 - ($total % 10)) % 10; $crn = str_pad(ltrim($number, \"0\"), $minimumLength - 1, \"0\", STR_PAD_LEFT) . $separator . $checkDigit; return $crn; }\n\n    ### Response: Calculate Modulus 10 Version 1.\n\n@param string $number\n@param string $separator\n@param int $minimumLength\n@return string.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void writeString(final String value) { popName(); write(StringPool.QUOTE); int len = value.length(); for (int i = 0; i < len; i++) { char c = value.charAt(i); switch (c) { case '\"': write(\"\\\\\\\"\"); break; case '\\\\': write(\"\\\\\\\\\"); break; case '/': if (strictStringEncoding) { write(\"\\\\/\"); } else { write(c); } break; case '\\b': write(\"\\\\b\"); break; case '\\f': write(\"\\\\f\"); break; case '\\n': write(\"\\\\n\"); break; case '\\r': write(\"\\\\r\"); break; case '\\t': write(\"\\\\t\"); break; default: if (Character.isISOControl(c)) { unicode(c); } else { write(c); } } } write(StringPool.QUOTE); }\n\n    ### Response:",
        "ground_truth": "Write a quoted and escaped value to the output.",
        "predict": " Calculate Modulus 10 Version 1.\n\n@param string $number\n@param string $separator\n@param int $minimumLength\n@return string.\n\n    "
    },
    {
        "ID": 1007,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static function assert($value, $varName) { if(!is_array($value)) return Exceptions::InvalidTypeException('HashMapEntry', $varName, $value); if(count($value) > 1) return Exceptions::InvalidTypeException('HashMapEntry', $varName, $value); $keys = array_keys($value); $key = end($keys); Str::assert($key, 'HashMapEntry of \"' . $varName . '\": \"' . $key . '\"'); return $value; }\n\n    ### Response: Asserts if the given value is a hash map entry\n\n@param  mixed  $value\n@param  string $varName\n@return mixed\n@throws InvalidTypeException\n\n@SuppressWarnings(\"PHPMD.StaticAccess\").\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void unicode(final char c) { write(\"\\\\u\"); int n = c; for (int i = 0; i < 4; ++i) { int digit = (n & 0xf000) >> 12; char hex = CharUtil.int2hex(digit); write(hex); n <<= 4; } }\n\n    ### Response:",
        "ground_truth": "Writes unicode representation of a character.",
        "predict": " Asserts if the given value is a hash map entry\n\n@param  mixed  $value\n@param  string $varName\n@return mixed\n@throws InvalidTypeException\n\n@SuppressWarnings(\"PHPMD.StaticAccess\").\n\n    "
    },
    {
        "ID": 1008,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func ApplyManifest(ctx Context, manifest *Manifest) error { for _, resource := range manifest.Resources { if err := ctx.Apply(resource); err != nil { return err } } return nil }\n\n    ### Response: // ApplyManifest applies on the resources in a manifest to\n// the given context..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void write(final CharSequence charSequence) { popName(); try { out.append(charSequence); } catch (IOException ioex) { throw new JsonException(ioex); } }\n\n    ### Response:",
        "ground_truth": "Appends char sequence to the buffer. Used for numbers, nulls, booleans, etc.",
        "predict": " // ApplyManifest applies on the resources in a manifest to\n// the given context..\n\n    "
    },
    {
        "ID": 1009,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def ddtodms(self, dd): \"\"\"Take in dd string and convert to dms\"\"\" negative = dd < 0 dd = abs(dd) minutes,seconds = divmod(dd*3600,60) degrees,minutes = divmod(minutes,60) if negative: if degrees > 0: degrees = -degrees elif minutes > 0: minutes = -minutes else: seconds = -seconds return (degrees,minutes,seconds)\n\n    ### Response: Take in dd string and convert to dms.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public LagartoDomBuilderConfig setParsingErrorLogLevelName(String logLevel) { logLevel = logLevel.trim().toUpperCase(); parsingErrorLogLevel = Logger.Level.valueOf(logLevel); return this; }\n\n    ### Response:",
        "ground_truth": "Sets parsing error log level as a name.",
        "predict": " Take in dd string and convert to dms.\n\n    "
    },
    {
        "ID": 1010,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def processes(self, processes): '''Set the number of concurrent processes the ABC will utilize for fitness function evaluation; if <= 1, single process is used Args: processes (int): number of concurrent processes ''' if self._processes > 1: self._pool.close() self._pool.join() self._pool = multiprocessing.Pool(processes) else: self._pool = None self._logger.log('debug', 'Number of processes set to {}'.format( processes ))\n\n    ### Response: Set the number of concurrent processes the ABC will utilize for\n        fitness function evaluation; if <= 1, single process is used\n\n        Args:\n            processes (int): number of concurrent processes.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void startRegion(final int start, final int tagLen, final int deepLevel) { this.regionStart = start + tagLen; this.regionLength = 0; this.regionTagStart = start; this.deepLevel = deepLevel; }\n\n    ### Response:",
        "ground_truth": "Starts defining region by setting the start index and reset region length to zero.",
        "predict": " Set the number of concurrent processes the ABC will utilize for\n        fitness function evaluation; if <= 1, single process is used\n\n        Args:\n            processes (int): number of concurrent processes.\n\n    "
    },
    {
        "ID": 1011,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function get($key, $default = null) { if (!array_key_exists($key, $this->settings)) { if (is_null($default)) { throw new InvalidKeyException(); } return $default; } return $this->settings[$key]; }\n\n    ### Response: Get configuration from repository\n\nAccepts a default value to be returned if 'key' isn't set\n\n@param $key string\n\n@param $default string (optional)\n\n@throws InvalidKeyException if the provided key doesn't exist and no\ndefault value is given\n\n@return string.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public boolean isContaining(final String include) { if (value == null) { return false; } if (splits == null) { splits = StringUtil.splitc(value, ' '); } for (String s: splits) { if (s.equals(include)) { return true; } } return false; }\n\n    ### Response:",
        "ground_truth": "Returns true if attribute is containing some value.",
        "predict": " Get configuration from repository\n\nAccepts a default value to be returned if 'key' isn't set\n\n@param $key string\n\n@param $default string (optional)\n\n@throws InvalidKeyException if the provided key doesn't exist and no\ndefault value is given\n\n@return string.\n\n    "
    },
    {
        "ID": 1012,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def publish(self, user, provider, obj, comment, **kwargs): ''' user - django User or UserSocialAuth instance provider - name of publisher provider obj - sharing object comment - string ''' social_user = self._get_social_user(user, provider) backend = self.get_backend(social_user, provider, context=kwargs) return backend.publish(obj, comment)\n\n    ### Response: user - django User or UserSocialAuth instance\n            provider - name of publisher provider\n            obj - sharing object\n            comment - string.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void registerPseudoFunction(final Class<? extends PseudoFunction> pseudoFunctionType) { PseudoFunction pseudoFunction; try { pseudoFunction = ClassUtil.newInstance(pseudoFunctionType); } catch (Exception ex) { throw new CSSellyException(ex); } PSEUDO_FUNCTION_MAP.put(pseudoFunction.getPseudoFunctionName(), pseudoFunction); }\n\n    ### Response:",
        "ground_truth": "Registers pseudo function.",
        "predict": " user - django User or UserSocialAuth instance\n            provider - name of publisher provider\n            obj - sharing object\n            comment - string.\n\n    "
    },
    {
        "ID": 1013,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static function nav($type, $items, $htmlOptions = array()) { self::addCssClass('nav', $htmlOptions); if (!empty($type)) { self::addCssClass('nav-' . $type, $htmlOptions); } $stacked = TbArray::popValue('stacked', $htmlOptions, false); if ($type !== self::NAV_TYPE_LIST && $stacked) { self::addCssClass('nav-stacked', $htmlOptions); } return self::menu($items, $htmlOptions); }\n\n    ### Response: Generates a navigation menu.\n@param string $type the menu type.\n@param array $items the menu items.\n@param array $htmlOptions additional HTML attributes.\n@return string the generated menu..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static PseudoFunction<?> lookupPseudoFunction(final String pseudoFunctionName) { PseudoFunction pseudoFunction = PSEUDO_FUNCTION_MAP.get(pseudoFunctionName); if (pseudoFunction == null) { throw new CSSellyException(\"Unsupported pseudo function: \" + pseudoFunctionName); } return pseudoFunction; }\n\n    ### Response:",
        "ground_truth": "Lookups pseudo function for given pseudo function name.",
        "predict": " Generates a navigation menu.\n@param string $type the menu type.\n@param array $items the menu items.\n@param array $htmlOptions additional HTML attributes.\n@return string the generated menu..\n\n    "
    },
    {
        "ID": 1014,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function write($text, $color = null, $bgColor = null) { $this->adapter->write($text, $color, $bgColor); }\n\n    ### Response: Write a chunk of text to console.\n\n@param string   $text\n@param null|int $color\n@param null|int $bgColor\n\n@return void.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public void visit(final int version, int access, final String name, final String signature, final String superName, final String[] interfaces) { wd.init(name, superName, this.suffix, this.reqProxyClassName); // change access of destination access &= ~AsmUtil.ACC_ABSTRACT; // write destination class final int v = ProxettaAsmUtil.resolveJavaVersion(version); wd.dest.visit(v, access, wd.thisReference, signature, wd.superName, null); wd.proxyAspects = new ProxyAspectData[aspects.length]; for (int i = 0; i < aspects.length; i++) { wd.proxyAspects[i] = new ProxyAspectData(wd, aspects[i], i); } }\n\n    ### Response:",
        "ground_truth": "Creates destination subclass header from current target class. Destination name is created from targets by\nadding a suffix and, optionally, a number. Destination extends the target.",
        "predict": " Write a chunk of text to console.\n\n@param string   $text\n@param null|int $color\n@param null|int $bgColor\n\n@return void.\n\n    "
    },
    {
        "ID": 1015,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function sale(HpsCheck $check, $amount, $clientTransactionId = null) { return $this->_buildTransaction('SALE', $check, $amount, $clientTransactionId); }\n\n    ### Response: A Sale transaction is used to process transactions using bank account information as the payment method.\nThe transaction service can be used to perform a Sale or Return transaction by indicating the Check Action.\n\nNOTE: The Portico Gateway supports both GETI and HPS Colonnade for processing check transactions. While\nthe available services are the same regardless of the check processor, the services may have different behaviors.\nFor example, GETI-processed Check Sale transactions support the ability to override a Check Sale transaction\nalready presented as well as the ability to verify a check.\n\n@param \\HpsCheck|string $check  The Check information.\n@param string           $amount The amount of the sale.\n\n@param null             $clientTransactionId\n\n@return \\HpsCheckResponse\n@throws \\HpsInvalidRequestException\n@internal param string $action Type of Check Action (Sale, Return, Override).\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public AnnotationVisitor visitAnnotation(final String desc, final boolean visible) { AnnotationVisitor destAnn = wd.dest.visitAnnotation(desc, visible); // [A3] return new AnnotationVisitorAdapter(destAnn); }\n\n    ### Response:",
        "ground_truth": "Copies all destination type annotations to the target.",
        "predict": " A Sale transaction is used to process transactions using bank account information as the payment method.\nThe transaction service can be used to perform a Sale or Return transaction by indicating the Check Action.\n\nNOTE: The Portico Gateway supports both GETI and HPS Colonnade for processing check transactions. While\nthe available services are the same regardless of the check processor, the services may have different behaviors.\nFor example, GETI-processed Check Sale transactions support the ability to override a Check Sale transaction\nalready presented as well as the ability to verify a check.\n\n@param \\HpsCheck|string $check  The Check information.\n@param string           $amount The amount of the sale.\n\n@param null             $clientTransactionId\n\n@return \\HpsCheckResponse\n@throws \\HpsInvalidRequestException\n@internal param string $action Type of Check Action (Sale, Return, Override).\n\n    "
    },
    {
        "ID": 1016,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function (err_toArray, array) { if (err_toArray) { return l_notifyError(clt_name, 'getPage.toArray', err_toArray, cb); } //LOG.sys('array found succces, length: ' + array.length, 'SR.DB'); // NOTE: probably no need to check if (array.length === _opts.limit) { UTIL.safeCall(cb, null, array, array[array.length - 1]); } else { UTIL.safeCall(cb, null, array, null); } }\n\n    ### Response: convert result to an array.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void makeStaticInitBlock() { if (wd.adviceClinits != null) { MethodVisitor mv = wd.dest.visitMethod(AsmUtil.ACC_STATIC, CLINIT, DESC_VOID, null, null); mv.visitCode(); for (String name : wd.adviceClinits) { mv.visitMethodInsn( INVOKESTATIC, wd.thisReference, name, DESC_VOID, false); } mv.visitInsn(RETURN); mv.visitMaxs(0, 0); mv.visitEnd(); } }\n\n    ### Response:",
        "ground_truth": "Creates static initialization block that simply calls all\nadvice static init methods in correct order.",
        "predict": " convert result to an array.\n\n    "
    },
    {
        "ID": 1017,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function resetParts(array $partNames = array()) { if (empty($partNames)) { $partNames = array_keys($this->parts); } foreach ($partNames as $partName) { $this->resetPart($partName); } return $this; }\n\n    ### Response: Resets query parts.\n\n@param array $partNames The query part names to reset.\n\n@return \\Fridge\\DBAL\\Query\\QueryBuilder The query builder..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void makeProxyConstructor() { MethodVisitor mv = wd.dest.visitMethod(AsmUtil.ACC_PRIVATE | AsmUtil.ACC_FINAL, ProxettaNames.initMethodName, DESC_VOID, null, null); mv.visitCode(); if (wd.adviceInits != null) { for (String name : wd.adviceInits) { mv.visitVarInsn(ALOAD, 0); mv.visitMethodInsn (INVOKESPECIAL, wd.thisReference, name, DESC_VOID, false); } } mv.visitInsn(RETURN); mv.visitMaxs(0, 0); mv.visitEnd(); }\n\n    ### Response:",
        "ground_truth": "Creates init method that simply calls all advice constructor methods in correct order.\nThis created init method is called from each destination's constructor.",
        "predict": " Resets query parts.\n\n@param array $partNames The query part names to reset.\n\n@return \\Fridge\\DBAL\\Query\\QueryBuilder The query builder..\n\n    "
    },
    {
        "ID": 1018,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function getPlayerCounters(player, attacker, game) { return player.hand .map((card) => { return card.validCounters ? card.validCounters(player, attacker, game) : [] }) .reduce((acc, array) => { return acc.concat(array) }, []) .sort((counterA, counterB) => counterB.weight - counterA.weight) }\n\n    ### Response: Get a list of possible counter moves, sorted by best option.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void processSuperMethods() { for (ClassReader cr : targetClassInfo.superClassReaders) { cr.accept(new EmptyClassVisitor() { String declaredClassName; @Override public void visit(final int version, final int access, final String name, final String signature, final String superName, final String[] interfaces) { declaredClassName = name; } @Override public MethodVisitor visitMethod(final int access, final String name, final String desc, final String signature, final String[] exceptions) { if (name.equals(INIT) || name.equals(CLINIT)) { return null; } MethodSignatureVisitor msign = targetClassInfo.lookupMethodSignatureVisitor(access, name, desc, declaredClassName); if (msign == null) { return null; } return applyProxy(msign); } }, 0); } }\n\n    ### Response:",
        "ground_truth": "Checks for all public super methods that are not overridden.",
        "predict": " Get a list of possible counter moves, sorted by best option.\n\n    "
    },
    {
        "ID": 1019,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function getAttr(obj, name) { return _.find(obj.attr, function(item) { return item.name == name; }).value; }\n\n    ### Response: get the value of attribute with the given name of the given object.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public int findLast(int low, int high) { int ndx = -1; while (low <= high) { int mid = (low + high) >>> 1; int delta = compare(mid); if (delta > 0) { high = mid - 1; } else { if (delta == 0) { ndx = mid; } low = mid + 1; } } if (ndx == -1) { return -(low + 1); } return ndx; }\n\n    ### Response:",
        "ground_truth": "Finds very last index of given element in inclusive index range. Returns negative\nvalue if element is not found.",
        "predict": " get the value of attribute with the given name of the given object.\n\n    "
    },
    {
        "ID": 1020,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (s *SourceService) DeleteSource(ctx context.Context, id platform.ID) error { u, err := newURL(s.Addr, sourceIDPath(id)) if err != nil { return err } req, err := http.NewRequest(\"DELETE\", u.String(), nil) if err != nil { return err } SetToken(s.Token, req) hc := newClient(u.Scheme, s.InsecureSkipVerify) resp, err := hc.Do(req) if err != nil { return err } defer resp.Body.Close() return CheckErrorStatus(http.StatusNoContent, resp) }\n\n    ### Response: // DeleteSource removes a source by ID..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String on(final String string) { if (!enabled) { return string; } final StringBuilder sb = new StringBuilder(); if (prefix != null) { sb.append(prefix).append(\"m\"); } sb.append(string); if (suffix != null) { sb.append(suffix).append(\"m\"); } return sb.toString(); }\n\n    ### Response:",
        "ground_truth": "Returns chalked string.",
        "predict": " // DeleteSource removes a source by ID..\n\n    "
    },
    {
        "ID": 1021,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public final void acceptBoth(Consumer<? super L> left, Consumer<? super R> right, L defaultLeft, R defaultRight) { left.accept(isLeft() ? getLeft() : defaultLeft); right.accept(isRight() ? getRight() : defaultRight); }\n\n    ### Response: Accepts both the left and right consumers, using the default values to set the empty side..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private byte[] replaceAsmInstructions(final byte[] classFile, final boolean hasFrames) { final Attribute[] attributes = getAttributePrototypes(); firstField = null; lastField = null; firstMethod = null; lastMethod = null; lastRuntimeVisibleAnnotation = null; lastRuntimeInvisibleAnnotation = null; lastRuntimeVisibleTypeAnnotation = null; lastRuntimeInvisibleTypeAnnotation = null; moduleWriter = null; nestHostClassIndex = 0; numberOfNestMemberClasses = 0; nestMemberClasses = null; firstAttribute = null; compute = hasFrames ? MethodWriter.COMPUTE_INSERTED_FRAMES : MethodWriter.COMPUTE_NOTHING; new ClassReader(classFile, 0, /* checkClassVersion = */ false) .accept( this, attributes, (hasFrames ? ClassReader.EXPAND_FRAMES : 0) | ClassReader.EXPAND_ASM_INSNS); return toByteArray(); }\n\n    ### Response:",
        "ground_truth": "Returns the equivalent of the given class file, with the ASM specific instructions replaced\nwith standard ones. This is done with a ClassReader -> ClassWriter round trip.\n\n@param classFile a class file containing ASM specific instructions, generated by this\nClassWriter.\n@param hasFrames whether there is at least one stack map frames in 'classFile'.\n@return an equivalent of 'classFile', with the ASM specific instructions replaced with standard\nones.",
        "predict": " Accepts both the left and right consumers, using the default values to set the empty side..\n\n    "
    },
    {
        "ID": 1022,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def process_task(self): \"\"\"Called when the registration request should be sent to the BBMD.\"\"\" pdu = RegisterForeignDevice(self.bbmdTimeToLive) pdu.pduDestination = self.bbmdAddress # send it downstream self.request(pdu)\n\n    ### Response: Called when the registration request should be sent to the BBMD..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private Attribute[] getAttributePrototypes() { Attribute.Set attributePrototypes = new Attribute.Set(); attributePrototypes.addAttributes(firstAttribute); FieldWriter fieldWriter = firstField; while (fieldWriter != null) { fieldWriter.collectAttributePrototypes(attributePrototypes); fieldWriter = (FieldWriter) fieldWriter.fv; } MethodWriter methodWriter = firstMethod; while (methodWriter != null) { methodWriter.collectAttributePrototypes(attributePrototypes); methodWriter = (MethodWriter) methodWriter.mv; } return attributePrototypes.toArray(); }\n\n    ### Response:",
        "ground_truth": "Returns the prototypes of the attributes used by this class, its fields and its methods.\n\n@return the prototypes of the attributes used by this class, its fields and its methods.",
        "predict": " Called when the registration request should be sent to the BBMD..\n\n    "
    },
    {
        "ID": 1023,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function getIsAuthenticated() { if (!$this->authenticated) { try { $proxy = $this->getProxy(); $this->authenticated = $proxy->hasValidAccessToken(); } catch (\\OAuth\\Common\\Exception\\Exception $e) { throw new ErrorException($e->getMessage(), $e->getCode(), 1, $e->getFile(), $e->getLine(), $e); } } return parent::getIsAuthenticated(); }\n\n    ### Response: For OAuth we can check existing access token.\nUseful for API calls.\n\n@return bool\n@throws ErrorException.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void registerDefaults() { register(Integer.class, IntegerSqlType.class); register(int.class, IntegerSqlType.class); register(MutableInteger.class, IntegerSqlType.class); register(Float.class, FloatSqlType.class); register(float.class, FloatSqlType.class); register(MutableFloat.class, FloatSqlType.class); register(Double.class, DoubleSqlType.class); register(double.class, DoubleSqlType.class); register(MutableDouble.class, DoubleSqlType.class); register(Byte.class, ByteSqlType.class); register(byte.class, ByteSqlType.class); register(MutableByte.class, ByteSqlType.class); register(Boolean.class, BooleanSqlType.class); register(boolean.class, BooleanSqlType.class); register(MutableBoolean.class, BooleanSqlType.class); register(Long.class, LongSqlType.class); register(long.class, LongSqlType.class); register(MutableLong.class, LongSqlType.class); register(Short.class, ShortSqlType.class); register(short.class, ShortSqlType.class); register(MutableShort.class, ShortSqlType.class); register(Character.class, CharacterSqlType.class); register(char.class, CharacterSqlType.class); register(BigDecimal.class, BigDecimalSqlType.class); register(BigInteger.class, BigIntegerSqlType.class); register(String.class, StringSqlType.class); register(LocalDateTime.class, LocalDateTimeSqlType.class); register(LocalDate.class, LocalDateSqlType.class); register(LocalTime.class, LocalTimeSqlType.class); register(Date.class, SqlDateSqlType.class); register(Timestamp.class, TimestampSqlType.class); register(Time.class, TimeSqlType.class); register(java.util.Date.class, DateSqlType.class); register(JulianDate.class, JulianDateSqlType.class); register(byte[].class, ByteArraySqlType.class); register(URL.class, URLSqlType.class); register(Blob.class, BlobSqlType.class); register(Clob.class, ClobSqlType.class); register(Array.class, SqlArraySqlType.class); register(Ref.class, SqlRefSqlType.class); }\n\n    ### Response:",
        "ground_truth": "Registers default set of SQL types.",
        "predict": " For OAuth we can check existing access token.\nUseful for API calls.\n\n@return bool\n@throws ErrorException.\n\n    "
    },
    {
        "ID": 1024,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function getConfigurator() { if (!$this->getContainer()->has(Configuration::class)) { $this->getContainer()->share(Configuration::class, (new Configuration([], true))); } return $this->getContainer()->get(Configuration::class); }\n\n    ### Response: Get configuration container\n\n@return \\Hawkbit\\Configuration.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void register(final Class type, final Class<? extends SqlType> sqlTypeClass) { types.put(type, lookupSqlType(sqlTypeClass)); }\n\n    ### Response:",
        "ground_truth": "Registers sql type for provided type.",
        "predict": " Get configuration container\n\n@return \\Hawkbit\\Configuration.\n\n    "
    },
    {
        "ID": 1025,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function linkify(\\Reflector $reflector, $constant = null){ static $docRefRoot = null, $docRefExt = null; // most people don't have this set if(!$docRefRoot) $docRefRoot = ($docRefRoot = rtrim(ini_get('docref_root'), '/')) ? $docRefRoot : 'http://php.net/manual/en'; if(!$docRefExt) $docRefExt = ($docRefExt = ini_get('docref_ext')) ? $docRefExt : '.php'; $phpNetSchemes = array( 'class' => $docRefRoot . '/class.%s' . $docRefExt, 'function' => $docRefRoot . '/function.%s' . $docRefExt, 'method' => $docRefRoot . '/%2$s.%1$s' . $docRefExt, 'property' => $docRefRoot . '/class.%2$s' . $docRefExt . '#%2$s.props.%1$s', 'constant' => $docRefRoot . '/class.%2$s' . $docRefExt . '#%2$s.constants.%1$s', ); $url = null; $args = array(); // determine scheme if($constant !== null){ $type = 'constant'; $args[] = $constant; }else{ $type = explode('\\\\', get_class($reflector)); $type = strtolower(ltrim(end($type), 'Reflection')); if($type === 'object') $type = 'class'; } // properties don't have the internal flag; // also note that many internal classes use some kind of magic as properties (eg. DateTime); // these will only get linkifed if the declared class is internal one, and not an extension :( $parent = ($type !== 'property') ? $reflector : $reflector->getDeclaringClass(); // internal function/method/class/property/constant if($parent->isInternal()){ $args[] = $reflector->name; if(in_array($type, array('method', 'property'), true)) $args[] = $reflector->getDeclaringClass()->getName(); $args = array_map(function($text){ return str_replace('_', '-', ltrim(strtolower($text), '\\\\_')); }, $args); // check for some special cases that have no links $valid = (($type === 'method') || (strcasecmp($parent->name, 'stdClass') !== 0)) && (($type !== 'method') || (($reflector->name === '__construct') || strpos($reflector->name, '__') !== 0)); if($valid) $url = vsprintf($phpNetSchemes[$type], $args); // custom }else{ switch(true){ // WordPress function; // like pretty much everything else in WordPress, API links are inconsistent as well; // so we're using queryposts.com as doc source for API case ($type === 'function') && class_exists('WP') && defined('ABSPATH') && defined('WPINC'): if(strpos($reflector->getFileName(), realpath(ABSPATH . WPINC)) === 0){ $url = sprintf('http://queryposts.com/function/%s', urlencode(strtolower($reflector->getName()))); break; } // @todo: handle more apps } } return $url; }\n\n    ### Response: Generates an URL that points to the documentation page relevant for the requested context\n\nFor internal functions and classes, the URI will point to the local PHP manual\nif installed and configured, otherwise to php.net/manual (the english one)\n\n@param   Reflector $reflector    Reflector object (used to determine the URL scheme for internal stuff)\n@param   string|null $constant   Constant name, if this is a request to linkify a constant\n@return  string|null             URL.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public SqlType lookup(final Class clazz) { SqlType sqlType; for (Class x = clazz; x != null; x = x.getSuperclass()) { sqlType = types.get(clazz); if (sqlType != null) { return sqlType; } Class[] interfaces = x.getInterfaces(); for (Class i : interfaces) { sqlType = types.get(i); if (sqlType != null) { return sqlType; } } } return null; }\n\n    ### Response:",
        "ground_truth": "Retrieves SQL type for provided type. All subclasses and interfaces are examined\nfor matching sql type.",
        "predict": " Generates an URL that points to the documentation page relevant for the requested context\n\nFor internal functions and classes, the URI will point to the local PHP manual\nif installed and configured, otherwise to php.net/manual (the english one)\n\n@param   Reflector $reflector    Reflector object (used to determine the URL scheme for internal stuff)\n@param   string|null $constant   Constant name, if this is a request to linkify a constant\n@return  string|null             URL.\n\n    "
    },
    {
        "ID": 1026,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function getConnection() { $connection = $this->getClient()->getConnection(); if ($connection instanceof ReplicationInterface) { $connection->switchTo('master'); } return $connection; }\n\n    ### Response: Returns the underlying connection to be used by the pipeline.\n\n@return ConnectionInterface.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public SqlType lookupSqlType(final Class<? extends SqlType> sqlTypeClass) { SqlType sqlType = sqlTypes.get(sqlTypeClass); if (sqlType == null) { try { sqlType = ClassUtil.newInstance(sqlTypeClass); } catch (Exception ex) { throw new DbSqlException(\"SQL type not found: \" + sqlTypeClass.getSimpleName(), ex); } sqlTypes.put(sqlTypeClass, sqlType); } return sqlType; }\n\n    ### Response:",
        "ground_truth": "Returns sql type instance. Instances are stored for better performances.",
        "predict": " Returns the underlying connection to be used by the pipeline.\n\n@return ConnectionInterface.\n\n    "
    },
    {
        "ID": 1027,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function checkCompletion(Dropzone $dropzone, array $users, Drop $drop = null) { $fixedStatusList = [ AbstractResourceEvaluation::STATUS_COMPLETED, AbstractResourceEvaluation::STATUS_PASSED, AbstractResourceEvaluation::STATUS_FAILED, ]; $teamId = !empty($drop) ? $drop->getTeamUuid() : null; $this->om->startFlushSuite(); /* By default drop is complete if teacher review is enabled or drop is unlocked for user */ $isComplete = !empty($drop) ? $drop->isFinished() && (!$dropzone->isPeerReview() || $drop->isUnlockedUser()) : false; /* If drop is not complete by default, checks for the number of finished corrections done by user */ if (!$isComplete) { $expectedCorrectionTotal = $dropzone->getExpectedCorrectionTotal(); $finishedPeerDrops = $this->getFinishedPeerDrops($dropzone, $users[0], $teamId); $isComplete = count($finishedPeerDrops) >= $expectedCorrectionTotal; } if ($isComplete) { foreach ($users as $user) { $userEval = $this->resourceEvalManager->getResourceUserEvaluation($dropzone->getResourceNode(), $user, false); if (!empty($userEval) && !in_array($userEval->getStatus(), $fixedStatusList)) { $this->resourceEvalManager->createResourceEvaluation( $dropzone->getResourceNode(), $user, null, ['status' => AbstractResourceEvaluation::STATUS_COMPLETED, 'progression' => 100] ); } elseif (!empty($drop)) { $this->updateDropProgression($dropzone, $drop, 100); } //TODO user whose score is available must be notified by LogDropGradeAvailableEvent, when he has done his corrections AND his drop has been corrected } } $this->om->endFlushSuite(); }\n\n    ### Response: Computes Complete status for a user.\n\n@param Dropzone $dropzone\n@param array    $users\n@param Drop     $drop.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static ProxyInfo socks4Proxy(final String proxyAddress, final int proxyPort, final String proxyUser) { return new ProxyInfo(ProxyType.SOCKS4, proxyAddress, proxyPort, proxyUser, null); }\n\n    ### Response:",
        "ground_truth": "Creates SOCKS4 proxy.",
        "predict": " Computes Complete status for a user.\n\n@param Dropzone $dropzone\n@param array    $users\n@param Drop     $drop.\n\n    "
    },
    {
        "ID": 1028,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function getFieldData($field) { // $this->data could only be array or object, which has been checked by $this->setData if ((is_array($this->data) && array_key_exists($field, $this->data)) || ($this->data instanceof \\ArrayAccess && $this->data->offsetExists($field)) ) { return $this->data[$field]; } elseif (isset($this->data->$field)) { return $this->data->$field; } elseif (method_exists($this->data, 'get' . $field)) { return $this->data->{'get' . $field}(); } else { return null; } }\n\n    ### Response: Returns validation field data\n\n@param string $field The name of field\n@return mixed.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static ProxyInfo socks5Proxy(final String proxyAddress, final int proxyPort, final String proxyUser, final String proxyPassword) { return new ProxyInfo(ProxyType.SOCKS5, proxyAddress, proxyPort, proxyUser, proxyPassword); }\n\n    ### Response:",
        "ground_truth": "Creates SOCKS5 proxy.",
        "predict": " Returns validation field data\n\n@param string $field The name of field\n@return mixed.\n\n    "
    },
    {
        "ID": 1029,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private BoundedPriorityQueue<Result> computeKnnIVFADC(int k, double[] qVector) throws Exception { BoundedPriorityQueue<Result> nn = new BoundedPriorityQueue<Result>(new Result(), k); // find the w nearest coarse centroids int[] nearestCoarseCentroidIndices = computeNearestCoarseIndices(qVector, w); for (int i = 0; i < w; i++) { // for each assignment // quantize to the i-th closest centroid of the coarse quantizer and compute residual vector int nearestCoarseIndex = nearestCoarseCentroidIndices[i]; double[] residualVectorQuery = computeResidualVector(qVector, nearestCoarseIndex); // apply a random transformation if needed if (transformation == TransformationType.RandomRotation) { residualVectorQuery = rr.rotate(residualVectorQuery); } else if (transformation == TransformationType.RandomPermutation) { residualVectorQuery = rp.permute(residualVectorQuery); } // compute lookup table double[][] lookUpTable = computeLookupADC(residualVectorQuery); for (int j = 0; j < invertedLists[nearestCoarseIndex].size(); j++) { int iid = invertedLists[nearestCoarseIndex].getQuick(j); double l2distance = 0; int codeStart = j * numSubVectors; if (numProductCentroids <= 256) { byte[] pqCode = pqByteCodes[nearestCoarseIndex].toArray(codeStart, numSubVectors); for (int m = 0; m < pqCode.length; m++) { // plus 128 because byte range is -128..127 l2distance += lookUpTable[m][pqCode[m] + 128]; } } else { short[] pqCode = pqShortCodes[nearestCoarseIndex].toArray(codeStart, numSubVectors); for (int m = 0; m < pqCode.length; m++) { l2distance += lookUpTable[m][pqCode[m]]; } } nn.offer(new Result(iid, l2distance)); } } return nn; }\n\n    ### Response: Computes and returns the k nearest neighbors of the query vector using the IVFADC approach.\n\n@param k\nThe number of nearest neighbors to be returned\n@param qVector\nThe query vector\n@return\n@throws Exception.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static ProxyInfo httpProxy(final String proxyAddress, final int proxyPort, final String proxyUser, final String proxyPassword) { return new ProxyInfo(ProxyType.HTTP, proxyAddress, proxyPort, proxyUser, proxyPassword); }\n\n    ### Response:",
        "ground_truth": "Creates HTTP proxy.",
        "predict": " Computes and returns the k nearest neighbors of the query vector using the IVFADC approach.\n\n@param k\nThe number of nearest neighbors to be returned\n@param qVector\nThe query vector\n@return\n@throws Exception.\n\n    "
    },
    {
        "ID": 1030,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (s *String) UnmarshalText(text []byte) error { r := csv.NewReader(bytes.NewReader(text)) var words []string for { record, err := r.Read() if err == io.EOF { break } if err != nil { return err } words = append(words, record...) } *s = String(words) return nil }\n\n    ### Response: // UnmarshalText will unmarshall text value into\n// the string slice representation of this value..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public int totalThreadTransactions() { ArrayList<JtxTransaction> txList = txStack.get(); if (txList == null) { return 0; } return txList.size(); }\n\n    ### Response:",
        "ground_truth": "Returns total number of transactions associated with current thread.",
        "predict": " // UnmarshalText will unmarshall text value into\n// the string slice representation of this value..\n\n    "
    },
    {
        "ID": 1031,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String[] getPreReleaseParts() { if (this.preReleaseParts.length == 0) { return EMPTY_ARRAY; } return Arrays.copyOf(this.preReleaseParts, this.preReleaseParts.length); }\n\n    ### Response: Gets the pre release identifier parts of this version as array. Modifying the\nresulting array will have no influence on the internal state of this object.\n\n@return Pre release version as array. Array is empty if this version has no pre\nrelease part..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public int totalThreadTransactionsWithStatus(final JtxStatus status) { ArrayList<JtxTransaction> txlist = txStack.get(); if (txlist == null) { return 0; } int count = 0; for (JtxTransaction tx : txlist) { if (tx.getStatus() == status) { count++; } } return count; }\n\n    ### Response:",
        "ground_truth": "Returns total number of transactions of the specified status associated with current thread.",
        "predict": " Gets the pre release identifier parts of this version as array. Modifying the\nresulting array will have no influence on the internal state of this object.\n\n@return Pre release version as array. Array is empty if this version has no pre\nrelease part..\n\n    "
    },
    {
        "ID": 1032,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def transform(self, tfms:TfmList, tfm_y:bool=None, **kwargs): \"Set the `tfms` and `tfm_y` value to be applied to the inputs and targets.\" _check_kwargs(self.x, tfms, **kwargs) if tfm_y is None: tfm_y = self.tfm_y if tfm_y: _check_kwargs(self.y, tfms, **kwargs) self.tfms, self.tfmargs = tfms,kwargs self.tfm_y, self.tfmargs_y = tfm_y,kwargs self.tfms_y = None if tfms is None else list(filter(lambda t: t.use_on_y, listify(tfms))) return self\n\n    ### Response: Set the `tfms` and `tfm_y` value to be applied to the inputs and targets..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void associateTransaction(final JtxTransaction tx) { totalTransactions++; ArrayList<JtxTransaction> txList = txStack.get(); if (txList == null) { txList = new ArrayList<>(); txStack.set(txList); } txList.add(tx); // add last }\n\n    ### Response:",
        "ground_truth": "Associate transaction to current thread.",
        "predict": " Set the `tfms` and `tfm_y` value to be applied to the inputs and targets..\n\n    "
    },
    {
        "ID": 1033,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (v *memdbView) Get(id string) (*Snapshot, error) { s, err := v.txn.First(memdbContainersTable, memdbIDIndex, id) if err != nil { return nil, err } if s == nil { return nil, NoSuchContainerError{id: id} } return v.transform(s.(*Container)), nil }\n\n    ### Response: // Get returns an item by id. Returned objects must never be modified..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void continueTx(final JtxTransaction sourceTx, final JtxTransactionMode destMode) { if (!validateExistingTransaction) { return; } JtxTransactionMode sourceMode = sourceTx.getTransactionMode(); JtxIsolationLevel destIsolationLevel = destMode.getIsolationLevel(); if (destIsolationLevel != ISOLATION_DEFAULT) { JtxIsolationLevel currentIsolationLevel = sourceMode.getIsolationLevel(); if (currentIsolationLevel != destIsolationLevel) { throw new JtxException(\"Participating TX specifies isolation level: \" + destIsolationLevel + \" which is incompatible with existing TX: \" + currentIsolationLevel); } } if ((!destMode.isReadOnly()) && (sourceMode.isReadOnly())) { throw new JtxException(\"Participating TX is not marked as read-only, but existing TX is\"); } }\n\n    ### Response:",
        "ground_truth": "Check if propagation of a transaction is possible, due to source and destination transaction modes.\n@see #setValidateExistingTransaction(boolean)",
        "predict": " // Get returns an item by id. Returned objects must never be modified..\n\n    "
    },
    {
        "ID": 1034,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function getMatchedAbilityId($abilityMap, $applicable) { foreach ($abilityMap as $id => $identifier) { if ($applicable->contains($identifier)) { return $id; } } }\n\n    ### Response: Get the ID of the ability that matches one of the applicable abilities.\n\n@param  \\Illuminate\\Support\\Collection  $abilityMap\n@param  \\Illuminate\\Support\\Collection  $applicable\n@return int|null.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected <E> JtxResourceManager<E> lookupResourceManager(final Class<E> resourceType) { //noinspection unchecked JtxResourceManager<E> resourceManager = this.resourceManagers.get(resourceType); if (resourceManager == null) { throw new JtxException(\"No registered resource manager for resource type: \" + resourceType.getSimpleName()); } return resourceManager; }\n\n    ### Response:",
        "ground_truth": "Lookups resource manager for provided type. Throws an exception if provider doesn't exists.",
        "predict": " Get the ID of the ability that matches one of the applicable abilities.\n\n@param  \\Illuminate\\Support\\Collection  $abilityMap\n@param  \\Illuminate\\Support\\Collection  $applicable\n@return int|null.\n\n    "
    },
    {
        "ID": 1035,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def get_identity(resource_group_name, service_name, custom_headers:nil) response = get_identity_async(resource_group_name, service_name, custom_headers:custom_headers).value! response.body unless response.nil? end\n\n    ### Response: Returns calling user identity information.\n\n @param resource_group_name [String] The name of the resource group.\n @param service_name [String] The name of the API Management service.\n @param custom_headers [Hash{String => String}] A hash of custom headers that\n will be added to the HTTP request.\n\n @return [CurrentUserIdentity] operation results..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected C createProxyObject(Class<C> target) { target = ProxettaUtil.resolveTargetClass(target); Class proxyClass = cache.get(target); if (proxyClass == null) { proxyClass = proxetta.defineProxy(target); cache.put(target, proxyClass); } C proxy; try { proxy = (C) ClassUtil.newInstance(proxyClass); } catch (Exception ex) { throw new PathrefException(ex); } return proxy; }\n\n    ### Response:",
        "ground_truth": "Creates proxy object.",
        "predict": " Returns calling user identity information.\n\n @param resource_group_name [String] The name of the resource group.\n @param service_name [String] The name of the API Management service.\n @param custom_headers [Hash{String => String}] A hash of custom headers that\n will be added to the HTTP request.\n\n @return [CurrentUserIdentity] operation results..\n\n    "
    },
    {
        "ID": 1036,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def a_message_callback(ctx): \"\"\"Message the captured pattern.\"\"\" message = ctx.ctrl.after.strip().splitlines()[-1] ctx.device.chain.connection.emit_message(message, log_level=logging.INFO) return True\n\n    ### Response: Message the captured pattern..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void append(final String methodName) { if (path.length() != 0) { path += StringPool.DOT; } if (methodName.startsWith(StringPool.LEFT_SQ_BRACKET)) { path = StringUtil.substring(path, 0, -1); } path += methodName; }\n\n    ### Response:",
        "ground_truth": "Appends method name to existing path.",
        "predict": " Message the captured pattern..\n\n    "
    },
    {
        "ID": 1037,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _valid_comparison(time_a, time_b, event_a, event_b): \"\"\"True if times can be compared.\"\"\" if time_a == time_b: # Ties are only informative if exactly one event happened return event_a != event_b if event_a and event_b: return True if event_a and time_a < time_b: return True if event_b and time_b < time_a: return True return False\n\n    ### Response: True if times can be compared..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String alignLeftAndPad(final String text, final int size) { int textLength = text.length(); if (textLength > size) { return text.substring(0, size); } final StringBuilder sb = new StringBuilder(size); sb.append(text); while (textLength++ < size) { sb.append(' '); } return sb.toString(); }\n\n    ### Response:",
        "ground_truth": "Puts the text to the left and pads with spaces until the size is reached.",
        "predict": " True if times can be compared..\n\n    "
    },
    {
        "ID": 1038,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (d *Datum) Copy() *Datum { ret := *d if d.b != nil { ret.b = make([]byte, len(d.b)) copy(ret.b, d.b) } switch ret.Kind() { case KindMysqlDecimal: d := *d.GetMysqlDecimal() ret.SetMysqlDecimal(&d) case KindMysqlTime: ret.SetMysqlTime(d.GetMysqlTime()) } return &ret }\n\n    ### Response: // Copy deep copies a Datum..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String toPrettyString(final Object value) { if (value == null) { return StringPool.NULL; } final Class<?> type = value.getClass(); if (type.isArray()) { final Class componentType = type.getComponentType(); if (componentType.isPrimitive()) { final StringBuilder sb = new StringBuilder(); sb.append('['); if (componentType == int.class) { sb.append(ArraysUtil.toString((int[]) value)); } else if (componentType == long.class) { sb.append(ArraysUtil.toString((long[]) value)); } else if (componentType == double.class) { sb.append(ArraysUtil.toString((double[]) value)); } else if (componentType == float.class) { sb.append(ArraysUtil.toString((float[]) value)); } else if (componentType == boolean.class) { sb.append(ArraysUtil.toString((boolean[]) value)); } else if (componentType == short.class) { sb.append(ArraysUtil.toString((short[]) value)); } else if (componentType == byte.class) { sb.append(ArraysUtil.toString((byte[]) value)); } else { throw new IllegalArgumentException(); } sb.append(']'); return sb.toString(); } else { final StringBuilder sb = new StringBuilder(); sb.append('['); final Object[] array = (Object[]) value; for (int i = 0; i < array.length; i++) { if (i > 0) { sb.append(','); } sb.append(toPrettyString(array[i])); } sb.append(']'); return sb.toString(); } } else if (value instanceof Iterable) { final Iterable iterable = (Iterable) value; final StringBuilder sb = new StringBuilder(); sb.append('{'); int i = 0; for (final Object o : iterable) { if (i > 0) { sb.append(','); } sb.append(toPrettyString(o)); i++; } sb.append('}'); return sb.toString(); } return value.toString(); }\n\n    ### Response:",
        "ground_truth": "Converts object into pretty string. All arrays are iterated.",
        "predict": " // Copy deep copies a Datum..\n\n    "
    },
    {
        "ID": 1039,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def host_first(self): \"\"\"First available host in this subnet.\"\"\" if (self.version() == 4 and self.mask > 30) or \\ (self.version() == 6 and self.mask > 126): return self else: return IP(self.network_long() + 1, version=self.version())\n\n    ### Response: First available host in this subnet..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String toCamelCase(final String input, final boolean firstCharUppercase, final char separator) { final int length = input.length(); final StringBuilder sb = new StringBuilder(length); boolean upperCase = firstCharUppercase; for (int i = 0; i < length; i++) { final char ch = input.charAt(i); if (ch == separator) { upperCase = true; } else if (upperCase) { sb.append(Character.toUpperCase(ch)); upperCase = false; } else { sb.append(ch); } } return sb.toString(); }\n\n    ### Response:",
        "ground_truth": "Converts separated string value to CamelCase.",
        "predict": " First available host in this subnet..\n\n    "
    },
    {
        "ID": 1040,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (s *Service) Installed() (bool, error) { names, err := ListServices() if err != nil { return false, s.errorf(err, \"failed to list services\") } for _, name := range names { if name == s.Service.Name { return true, nil } } return false, nil }\n\n    ### Response: // Installed implements Service..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String formatParagraph(final String src, final int len, final boolean breakOnWhitespace) { StringBuilder str = new StringBuilder(); int total = src.length(); int from = 0; while (from < total) { int to = from + len; if (to >= total) { to = total; } else if (breakOnWhitespace) { int ndx = StringUtil.lastIndexOfWhitespace(src, to - 1, from); if (ndx != -1) { to = ndx + 1; } } int cutFrom = StringUtil.indexOfNonWhitespace(src, from, to); if (cutFrom != -1) { int cutTo = StringUtil.lastIndexOfNonWhitespace(src, to - 1, from) + 1; str.append(src, cutFrom, cutTo); } str.append('\\n'); from = to; } return str.toString(); }\n\n    ### Response:",
        "ground_truth": "Formats provided string as paragraph.",
        "predict": " // Installed implements Service..\n\n    "
    },
    {
        "ID": 1041,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def construct_formatdb_cmd(filename, outdir, blastdb_exe=pyani_config.FORMATDB_DEFAULT): \"\"\"Returns a single formatdb command. - filename - input filename - blastdb_exe - path to the formatdb executable \"\"\" title = os.path.splitext(os.path.split(filename)[-1])[0] newfilename = os.path.join(outdir, os.path.split(filename)[-1]) shutil.copy(filename, newfilename) return ( \"{0} -p F -i {1} -t {2}\".format(blastdb_exe, newfilename, title), newfilename, )\n\n    ### Response: Returns a single formatdb command.\n\n    - filename - input filename\n    - blastdb_exe - path to the formatdb executable.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String convertTabsToSpaces(final String line, final int tabWidth) { int tab_index, tab_size; int last_tab_index = 0; int added_chars = 0; if (tabWidth == 0) { return StringUtil.remove(line, '\\t'); } StringBuilder result = new StringBuilder(); while ((tab_index = line.indexOf('\\t', last_tab_index)) != -1) { tab_size = tabWidth - ((tab_index + added_chars) % tabWidth); if (tab_size == 0) { tab_size = tabWidth; } added_chars += tab_size - 1; result.append(line, last_tab_index, tab_index); result.append(StringUtil.repeat(' ', tab_size)); last_tab_index = tab_index+1; } if (last_tab_index == 0) { return line; } result.append(line.substring(last_tab_index)); return result.toString(); }\n\n    ### Response:",
        "ground_truth": "Converts all tabs on a line to spaces according to the provided tab width.\nThis is not a simple tab to spaces replacement, since the resulting\nindentation remains the same.",
        "predict": " Returns a single formatdb command.\n\n    - filename - input filename\n    - blastdb_exe - path to the formatdb executable.\n\n    "
    },
    {
        "ID": 1042,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static function shutdownHook(array $files) { foreach ($files as $file) { // Break and allow a response if the timeout has been reached. if ((connection_status() & CONNECTION_TIMEOUT) == CONNECTION_TIMEOUT) { break; } if (isset($file['tmp_name'])) { if (is_array($file['tmp_name'])) { foreach($file['tmp_name'] as $name) { self::checkAndUnlinkFile($name); } } else { self::checkAndUnlinkFile($file['tmp_name']); } } } }\n\n    ### Response: Remove any left over uploads.\n\n@param array $files\nAssociative array of uploaded files ($_FILES)..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String escapeJava(final String string) { int strLen = string.length(); StringBuilder sb = new StringBuilder(strLen); for (int i = 0; i < strLen; i++) { char c = string.charAt(i); switch (c) { case '\\b' : sb.append(\"\\\\b\"); break; case '\\t' : sb.append(\"\\\\t\"); break; case '\\n' : sb.append(\"\\\\n\"); break; case '\\f' : sb.append(\"\\\\f\"); break; case '\\r' : sb.append(\"\\\\r\"); break; case '\\\"' : sb.append(\"\\\\\\\"\"); break; case '\\\\' : sb.append(\"\\\\\\\\\"); break; default: if ((c < 32) || (c > 127)) { String hex = Integer.toHexString(c); sb.append(\"\\\\u\"); for (int k = hex.length(); k < 4; k++) { sb.append('0'); } sb.append(hex); } else { sb.append(c); } } } return sb.toString(); }\n\n    ### Response:",
        "ground_truth": "Escapes a string using java rules.",
        "predict": " Remove any left over uploads.\n\n@param array $files\nAssociative array of uploaded files ($_FILES)..\n\n    "
    },
    {
        "ID": 1043,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function matchPattern(string $pattern) : Element { $this->attributes['pattern'] = $pattern; return $this->addTest('pattern', function ($value) use ($pattern) { return preg_match(\"@^$pattern$@\", trim($value)); }); }\n\n    ### Response: The field must match the pattern supplied.\n\n@param string $pattern Regex the field must match\n@return self.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String unescapeJava(final String str) { char[] chars = str.toCharArray(); StringBuilder sb = new StringBuilder(str.length()); for (int i = 0; i < chars.length; i++) { char c = chars[i]; if (c != '\\\\') { sb.append(c); continue; } i++; c = chars[i]; switch (c) { case 'b': sb.append('\\b'); break; case 't': sb.append('\\t'); break; case 'n': sb.append('\\n'); break; case 'f': sb.append('\\f'); break; case 'r': sb.append('\\r'); break; case '\"': sb.append('\\\"'); break; case '\\\\': sb.append('\\\\'); break; case 'u' : char hex = (char) Integer.parseInt(new String(chars, i + 1, 4), 16); sb.append(hex); i += 4; break; default: throw new IllegalArgumentException(\"Invalid escaping character: \" + c); } } return sb.toString(); }\n\n    ### Response:",
        "ground_truth": "Unescapes a string using java rules.",
        "predict": " The field must match the pattern supplied.\n\n@param string $pattern Regex the field must match\n@return self.\n\n    "
    },
    {
        "ID": 1044,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function addRepository(name, rep, directory, gitOptions, options) { var userConfig = options || {}; REPOSITORIES.push(_.extend({ name: name, options: _.extend({ repository: rep, directory: directory || name }, gitOptions || {}) }, userConfig)); }\n\n    ### Response: Helper function to add a new repo to our module list.\n@param name {string} That is the unique name of the module.\n@param rep {string} The repository url.\n@param directory {null|string} The target directory to clone the module into.\n@param gitOptions {null|object} A mixin to override default git options for the module added.\n@param options {null|object} A mixin to override default options for the module added..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SuppressWarnings({\"unchecked\"}) public <T> T getBean(final Class<T> type) { String name = resolveBeanName(type); return (T) getBean(name); }\n\n    ### Response:",
        "ground_truth": "Returns Petite bean instance. Bean name will be resolved from provided type.",
        "predict": " Helper function to add a new repo to our module list.\n@param name {string} That is the unique name of the module.\n@param rep {string} The repository url.\n@param directory {null|string} The target directory to clone the module into.\n@param gitOptions {null|object} A mixin to override default git options for the module added.\n@param options {null|object} A mixin to override default options for the module added..\n\n    "
    },
    {
        "ID": 1045,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def replace_source(self, source, name, modules, prefix): \"\"\"Scan C source code for string literals as well as function calls and do replacement using the specified replacing function. Note that the regular expression currently used for strings is naive or quick and dirty. \"\"\" needs_windll = False def _func_replacer(match, modules, windll): matched = match.group(0) if matched in self.BLACKLIST: return matched module = self.database.query_func_module(matched) if module: try: modules[module[0]] += [module[1]] except KeyError: modules[module[0]] = [module[1]] if windll: return '{}->{}.{}'.format(windll, *module) return '{}->{}'.format(*module) return matched replacer = partial( _func_replacer, modules=modules, windll='windll') replaced = re.sub(r'[_\\w][_\\w\\d]*(?=\\s*\\()', replacer, source) if source != replaced: needs_windll = True str_table = {} def _string_replacer(match): matched = match.group()[1:-1] try: number = str_table[matched] except KeyError: number = len(str_table) + 1 str_table.update({matched: number}) return '{}{}'.format(prefix, number) replaced = re.sub(r'\".+?\"', _string_replacer, replaced) strings, relocs = self.build_strings(str_table, prefix) strings = ''.join(strings).strip() windll32 = reloc_var('windll', 'reloc_delta', True, 'windll_t') if needs_windll: relocs += [windll32] if strings: strings = '\\n' + strings if not needs_windll: relocs += [windll32] needs_windll = True windll64 = '' if needs_windll: windll64 = '{0} *{1} = &_{1};\\n'.format('windll_t', 'windll') relocs = reloc_both(''.join(relocs), windll64) if name in ['main']: replaced = '\\ninit();' + replaced return strings + relocs + replaced\n\n    ### Response: Scan C source code for string literals as well as\n        function calls and do replacement using the specified\n        replacing function.\n        Note that the regular expression currently used for strings\n        is naive or quick and dirty..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public <T> T getBean(final String name) { // Lookup for registered bean definition. BeanDefinition def = lookupBeanDefinition(name); if (def == null) { // try provider ProviderDefinition providerDefinition = providers.get(name); if (providerDefinition != null) { return (T) invokeProvider(providerDefinition); } return null; } // Find the bean in its scope Object bean = def.scopeLookup(); if (bean == null) { // Create new bean in the scope initBeanDefinition(def); final BeanData beanData = new BeanData(this, def); registerBeanAndWireAndInjectParamsAndInvokeInitMethods(beanData); bean = beanData.bean(); } return (T) bean; }\n\n    ### Response:",
        "ground_truth": "Returns Petite bean instance.\nPetite container will find the bean in corresponding scope and all its dependencies,\neither by constructor or property injection. When using constructor injection, cyclic dependencies\ncan not be prevented, but at least they are detected.\n\n@see PetiteContainer#createBean(Class)",
        "predict": " Scan C source code for string literals as well as\n        function calls and do replacement using the specified\n        replacing function.\n        Note that the regular expression currently used for strings\n        is naive or quick and dirty..\n\n    "
    },
    {
        "ID": 1046,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function setHost($host) { $this->host = (string) $host; if (empty($this->host)) { throw new InvalidArgumentException('empty host'); } return $this; }\n\n    ### Response: Setter for instance host\n@param string $host instance host\n@throws \\InvalidArgumentException\n@return AbstractConnection self.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void initBeanDefinition(final BeanDefinition def) { // init methods if (def.initMethods == null) { def.initMethods = petiteResolvers.resolveInitMethodPoint(def.type); } // destroy methods if (def.destroyMethods == null) { def.destroyMethods = petiteResolvers.resolveDestroyMethodPoint(def.type); } // properties if (def.properties == null) { def.properties = petiteResolvers.resolvePropertyInjectionPoint(def.type, def.wiringMode == WiringMode.AUTOWIRE); } // methods if (def.methods == null) { def.methods = petiteResolvers.resolveMethodInjectionPoint(def.type); } // ctors if (def.ctor == null) { def.ctor = petiteResolvers.resolveCtorInjectionPoint(def.type); } // values if (def.values == null) { def.values = paramManager.resolveParamInjectionPoints(def.type); } // sets if (def.sets == null) { def.sets = petiteResolvers.resolveSetInjectionPoint(def.type, def.wiringMode == WiringMode.AUTOWIRE); } // params if (def.params == null) { def.params = paramManager.filterParametersForBeanName(def.name, petiteConfig.getResolveReferenceParameters()); } }\n\n    ### Response:",
        "ground_truth": "Resolves and initializes bean definition. May be called multiple times.",
        "predict": " Setter for instance host\n@param string $host instance host\n@throws \\InvalidArgumentException\n@return AbstractConnection self.\n\n    "
    },
    {
        "ID": 1047,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def find_min_required(path): \"\"\"Inspect terraform files and find minimum version.\"\"\" found_min_required = '' for filename in glob.glob(os.path.join(path, '*.tf')): with open(filename, 'r') as stream: tf_config = hcl.load(stream) if tf_config.get('terraform', {}).get('required_version'): found_min_required = tf_config.get('terraform', {}).get('required_version') break if found_min_required: if re.match(r'^!=.+', found_min_required): LOGGER.error('Min required Terraform version is a negation (%s) ' '- unable to determine required version', found_min_required) sys.exit(1) else: found_min_required = re.search(r'[0-9]*\\.[0-9]*(?:\\.[0-9]*)?', found_min_required).group(0) LOGGER.debug(\"Detected minimum terraform version is %s\", found_min_required) return found_min_required LOGGER.error('Terraform version specified as min-required, but unable to ' 'find a specified version requirement in this module\\'s tf ' 'files') sys.exit(1)\n\n    ### Response: Inspect terraform files and find minimum version..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected Object invokeProvider(final ProviderDefinition provider) { if (provider.method != null) { final Object bean; if (provider.beanName != null) { // instance factory method bean = getBean(provider.beanName); } else { // static factory method bean = null; } try { return provider.method.invoke(bean); } catch (Exception ex) { throw new PetiteException(\"Invalid provider method: \" + provider.method.getName(), ex); } } throw new PetiteException(\"Invalid provider\"); }\n\n    ### Response:",
        "ground_truth": "Invokes provider to get a bean.",
        "predict": " Inspect terraform files and find minimum version..\n\n    "
    },
    {
        "ID": 1048,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function asJson($default = null) { return Validate::asJson($this->params[$this->key] ?? $this->params, $default); }\n\n    ### Response: Data sanitation and return as JSON.\n\n@since 2.0.0\n\n@param mixed $default \u2192 default value\n\n@return mixed \u2192 value, null or customized return value.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void addBean(final String name, final Object bean, WiringMode wiringMode) { wiringMode = petiteConfig.resolveWiringMode(wiringMode); registerPetiteBean(bean.getClass(), name, SingletonScope.class, wiringMode, false, null); BeanDefinition def = lookupExistingBeanDefinition(name); registerBeanAndWireAndInjectParamsAndInvokeInitMethods(new BeanData(this, def, bean)); }\n\n    ### Response:",
        "ground_truth": "Adds object instance to the container as singleton bean.",
        "predict": " Data sanitation and return as JSON.\n\n@since 2.0.0\n\n@param mixed $default \u2192 default value\n\n@return mixed \u2192 value, null or customized return value.\n\n    "
    },
    {
        "ID": 1049,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def parse(self, data, extent): # type: (bytes, int) -> None ''' Parse the passed in data into a UDF Descriptor tag. Parameters: data - The data to parse. extent - The extent to compare against for the tag location. Returns: Nothing. ''' if self._initialized: raise pycdlibexception.PyCdlibInternalError('UDF Tag already initialized') (self.tag_ident, self.desc_version, tag_checksum, reserved, self.tag_serial_number, desc_crc, self.desc_crc_length, self.tag_location) = struct.unpack_from(self.FMT, data, 0) if reserved != 0: raise pycdlibexception.PyCdlibInvalidISO('Reserved data not 0!') if _compute_csum(data[:16]) != tag_checksum: raise pycdlibexception.PyCdlibInvalidISO('Tag checksum does not match!') if self.tag_location != extent: # In theory, we should abort (throw an exception) if we see that a # tag location that doesn't match an actual location. However, we # have seen UDF ISOs in the wild (most notably PS2 GT4 ISOs) that # have an invalid tag location for the second anchor and File Set # Terminator. So that we can support those ISOs, just silently # fix it up. We lose a little bit of detection of whether this is # \"truly\" a UDFTag, but it is really not a big risk. self.tag_location = extent if self.desc_version not in (2, 3): raise pycdlibexception.PyCdlibInvalidISO('Tag version not 2 or 3') if (len(data) - 16) < self.desc_crc_length: raise pycdlibexception.PyCdlibInternalError('Not enough CRC bytes to compute (expected at least %d, got %d)' % (self.desc_crc_length, len(data) - 16)) if desc_crc != crc_ccitt(data[16:16 + self.desc_crc_length]): raise pycdlibexception.PyCdlibInvalidISO('Tag CRC does not match!') self._initialized = True\n\n    ### Response: Parse the passed in data into a UDF Descriptor tag.\n\n        Parameters:\n         data - The data to parse.\n         extent - The extent to compare against for the tag location.\n        Returns:\n         Nothing..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void setBeanProperty(final String name, final Object value) { Object bean = null; int ndx = name.length(); while (true) { ndx = name.lastIndexOf('.', ndx); if (ndx == -1) { break; } String beanName = name.substring(0, ndx); bean = getBean(beanName); if (bean != null) { break; } ndx--; } if (bean == null) { throw new PetiteException(\"Invalid bean property: \" + name); } try { BeanUtil.declared.setProperty(bean, name.substring(ndx + 1), value); } catch (Exception ex) { throw new PetiteException(\"Invalid bean property: \" + name, ex); } }\n\n    ### Response:",
        "ground_truth": "Sets petite bean property.",
        "predict": " Parse the passed in data into a UDF Descriptor tag.\n\n        Parameters:\n         data - The data to parse.\n         extent - The extent to compare against for the tag location.\n        Returns:\n         Nothing..\n\n    "
    },
    {
        "ID": 1050,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (s *Service) AddOnRegionCapabilityListByRegion(ctx context.Context, regionIdentity string, lr *ListRange) (AddOnRegionCapabilityListByRegionResult, error) { var addOnRegionCapability AddOnRegionCapabilityListByRegionResult return addOnRegionCapability, s.Get(ctx, &addOnRegionCapability, fmt.Sprintf(\"/regions/%v/addon-region-capabilities\", regionIdentity), nil, lr) }\n\n    ### Response: // List existing add-on region capabilities for a region..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Object getBeanProperty(final String name) { int ndx = name.indexOf('.'); if (ndx == -1) { throw new PetiteException(\"Only bean name is specified, missing property name: \" + name); } String beanName = name.substring(0, ndx); Object bean = getBean(beanName); if (bean == null) { throw new PetiteException(\"Bean doesn't exist: \" + name); } try { return BeanUtil.declared.getProperty(bean, name.substring(ndx + 1)); } catch (Exception ex) { throw new PetiteException(\"Invalid bean property: \" + name, ex); } }\n\n    ### Response:",
        "ground_truth": "Returns petite bean property value.",
        "predict": " // List existing add-on region capabilities for a region..\n\n    "
    },
    {
        "ID": 1051,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public long getLongByTriple(final long[] triple) { if (n == 0) return defRetValue; final int[] e = new int[3]; final int chunk = chunkShift == Long.SIZE ? 0 : (int)(triple[0] >>> chunkShift); final long chunkOffset = offset[chunk]; HypergraphSorter.tripleToEdge(triple, seed[chunk], (int)(offset[chunk + 1] - chunkOffset), e); if (e[0] == -1) return defRetValue; final long result = rank(chunkOffset + e[(int)(values.getLong(e[0] + chunkOffset) + values.getLong(e[1] + chunkOffset) + values.getLong(e[2] + chunkOffset)) % 3]); if (signatureMask != 0) return result >= n || signatures.getLong(result) != (triple[0] & signatureMask) ? defRetValue : result; // Out-of-set strings can generate bizarre 3-hyperedges. return result < n ? result : defRetValue; }\n\n    ### Response: Low-level access to the output of this minimal perfect hash function.\n\nThis method makes it possible to build several kind of functions on the same {@link ChunkedHashStore} and\nthen retrieve the resulting values by generating a single triple of hashes. The method\n{@link TwoStepsMWHCFunction#getLong(Object)} is a good example of this technique.\n\n@param triple a triple generated as documented in {@link ChunkedHashStore}.\n@return the output of the function..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void shutdown() { scopes.forEachValue(Scope::shutdown); externalsCache.clear(); beans.clear(); beansAlt.clear(); scopes.clear(); providers.clear(); beanCollections.clear(); }\n\n    ### Response:",
        "ground_truth": "Shutdowns container. After container is down, it can't be used anymore.",
        "predict": " Low-level access to the output of this minimal perfect hash function.\n\nThis method makes it possible to build several kind of functions on the same {@link ChunkedHashStore} and\nthen retrieve the resulting values by generating a single triple of hashes. The method\n{@link TwoStepsMWHCFunction#getLong(Object)} is a good example of this technique.\n\n@param triple a triple generated as documented in {@link ChunkedHashStore}.\n@return the output of the function..\n\n    "
    },
    {
        "ID": 1052,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func OpenGroup(headPath string, groupOptions ...func(*Group)) (g *Group, err error) { dir := path.Dir(headPath) head, err := OpenAutoFile(headPath) if err != nil { return nil, err } g = &Group{ ID: \"group:\" + head.ID, Head: head, headBuf: bufio.NewWriterSize(head, 4096*10), Dir: dir, headSizeLimit: defaultHeadSizeLimit, totalSizeLimit: defaultTotalSizeLimit, groupCheckDuration: defaultGroupCheckDuration, minIndex: 0, maxIndex: 0, doneProcessTicks: make(chan struct{}), } for _, option := range groupOptions { option(g) } g.BaseService = *cmn.NewBaseService(nil, \"Group\", g) gInfo := g.readGroupInfo() g.minIndex = gInfo.MinIndex g.maxIndex = gInfo.MaxIndex return }\n\n    ### Response: // OpenGroup creates a new Group with head at headPath. It returns an error if\n// it fails to open head file..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static MethodParameter[] resolveParameters(final AccessibleObject methodOrCtor) { Class[] paramTypes; Class declaringClass; String name; if (methodOrCtor instanceof Method) { Method method = (Method) methodOrCtor; paramTypes = method.getParameterTypes(); name = method.getName(); declaringClass = method.getDeclaringClass(); } else { Constructor constructor = (Constructor) methodOrCtor; paramTypes = constructor.getParameterTypes(); declaringClass = constructor.getDeclaringClass(); name = CTOR_METHOD; } if (paramTypes.length == 0) { return MethodParameter.EMPTY_ARRAY; } InputStream stream; try { stream = ClassLoaderUtil.getClassAsStream(declaringClass); } catch (IOException ioex) { throw new ParamoException(\"Failed to read class bytes: \" + declaringClass.getName(), ioex); } if (stream == null) { throw new ParamoException(\"Class not found: \" + declaringClass); } try { ClassReader reader = new ClassReader(stream); MethodFinder visitor = new MethodFinder(declaringClass, name, paramTypes); reader.accept(visitor, 0); return visitor.getResolvedParameters(); } catch (IOException ioex) { throw new ParamoException(ioex); } finally { StreamUtil.close(stream); } }\n\n    ### Response:",
        "ground_truth": "Resolves method parameters from a method or constructor.\nReturns an empty array when target does not contain any parameter.\nNo caching is involved in this process, i.e. class bytecode\nis examined every time this method is called.",
        "predict": " // OpenGroup creates a new Group with head at headPath. It returns an error if\n// it fails to open head file..\n\n    "
    },
    {
        "ID": 1053,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _poll_for_refresh(self, check_id): \"\"\" Given a Trusted Advisor check_id that has just been refreshed, poll until the refresh is complete. Once complete, return the check result. :param check_id: the Trusted Advisor check ID :type check_id: str :returns: dict check result. The return value of :py:meth:`Support.Client.describe_trusted_advisor_check_result` :rtype: dict \"\"\" logger.warning('Polling for TA check %s refresh...', check_id) if self.refresh_timeout is None: # no timeout... cutoff = datetime_now() + timedelta(days=365) else: cutoff = datetime_now() + timedelta(seconds=self.refresh_timeout) last_status = None while datetime_now() <= cutoff: logger.debug('Checking refresh status') status = self.conn.describe_trusted_advisor_check_refresh_statuses( checkIds=[check_id] )['statuses'][0]['status'] if status in ['success', 'abandoned']: logger.info('Refresh status: %s; done polling', status) break if status == 'none' and last_status not in ['none', None]: logger.warning('Trusted Advisor check refresh status went ' 'from \"%s\" to \"%s\"; refresh is either complete ' 'or timed out on AWS side. Continuing', last_status, status) break last_status = status logger.info('Refresh status: %s; sleeping 30s', status) sleep(30) else: logger.error('Timed out waiting for TA Check refresh; status=%s', status) logger.info('Done polling for check refresh') result, last_dt = self._get_check_result(check_id) logger.debug('Check shows last refresh time of: %s', last_dt) return result\n\n    ### Response: Given a Trusted Advisor check_id that has just been refreshed, poll\n        until the refresh is complete. Once complete, return the check result.\n\n        :param check_id: the Trusted Advisor check ID\n        :type check_id: str\n        :returns: dict check result. The return value of\n          :py:meth:`Support.Client.describe_trusted_advisor_check_result`\n        :rtype: dict.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public int doAfterBody() throws JspException { BodyContent body = getBodyContent(); JspWriter out = body.getEnclosingWriter(); String bodytext = populateForm(body.getString(), name -> value(name, pageContext)); try { out.print(bodytext); } catch (IOException ioex) { throw new JspException(ioex); } return SKIP_BODY; }\n\n    ### Response:",
        "ground_truth": "Performs smart form population.",
        "predict": " Given a Trusted Advisor check_id that has just been refreshed, poll\n        until the refresh is complete. Once complete, return the check result.\n\n        :param check_id: the Trusted Advisor check ID\n        :type check_id: str\n        :returns: dict check result. The return value of\n          :py:meth:`Support.Client.describe_trusted_advisor_check_result`\n        :rtype: dict.\n\n    "
    },
    {
        "ID": 1054,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def request_password_change_mail(self, password): \"\"\"Request password change mail :param password: current account password :type password: :class:`str` :return: result :rtype: :class:`.EResult` \"\"\" message = Msg(EMsg.ClientRequestChangeMail, extended=True) message.body.password = password resp = self.send_job_and_wait(message, timeout=10) if resp is None: return EResult.Timeout else: return EResult(resp.eresult)\n\n    ### Response: Request password change mail\n\n        :param password: current account password\n        :type  password: :class:`str`\n        :return: result\n        :rtype: :class:`.EResult`.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String getValue(final String... profiles) { if (hasMacro) { return propsData.resolveMacros(value, profiles); } return value; }\n\n    ### Response:",
        "ground_truth": "Returns the property value, with replaced macros.",
        "predict": " Request password change mail\n\n        :param password: current account password\n        :type  password: :class:`str`\n        :return: result\n        :rtype: :class:`.EResult`.\n\n    "
    },
    {
        "ID": 1055,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def sign(self, h, sig_format=SER_BINARY): \"\"\" Signs the message with SHA-512 hash `h' with this private key. \"\"\" outlen = (self.curve.sig_len_compact if sig_format == SER_COMPACT else self.curve.sig_len_bin) sig = self._ECDSA_sign(h) return serialize_number(sig, sig_format, outlen)\n\n    ### Response: Signs the message with SHA-512 hash `h' with this private key..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public void end() { if (parentNode != rootNode) { Node thisNode = parentNode; while (thisNode != rootNode) { if (domBuilder.config.isImpliedEndTags()) { if (implRules.implicitlyCloseTagOnEOF(thisNode.getNodeName())) { thisNode = thisNode.getParentNode(); continue; } } error(\"Unclosed tag closed: <\" + thisNode.getNodeName() + \">\"); thisNode = thisNode.getParentNode(); } } // remove whitespaces if (domBuilder.config.isIgnoreWhitespacesBetweenTags()) { removeLastChildNodeIfEmptyText(parentNode, true); } // foster if (domBuilder.config.isUseFosterRules()) { HtmlFosterRules fosterRules = new HtmlFosterRules(); fosterRules.fixFosterElements(rootNode); } // elapsed rootNode.end(); if (log.isDebugEnabled()) { log.debug(\"LagartoDom tree created in \" + rootNode.getElapsedTime() + \" ms\"); } }\n\n    ### Response:",
        "ground_truth": "Finishes the tree building. Closes unclosed tags.",
        "predict": " Signs the message with SHA-512 hash `h' with this private key..\n\n    "
    },
    {
        "ID": 1056,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function init() { if (!is_string($this->queryClass) || empty($this->queryClass)) { $this->queryClass = BaseRedisMessageQuery::class; } if ($this->skipInit) { return; } $this->initMessageEvents(); parent::init(); }\n\n    ### Response: 7 days..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected Element createElementNode(final Tag tag) { boolean hasVoidTags = htmlVoidRules != null; boolean isVoid = false; boolean selfClosed = false; if (hasVoidTags) { isVoid = htmlVoidRules.isVoidTag(tag.getName()); // HTML and XHTML if (isVoid) { // it's void tag, lookup the flag selfClosed = domBuilder.config.isSelfCloseVoidTags(); } } else { // XML, no voids, lookup the flag selfClosed = domBuilder.config.isSelfCloseVoidTags(); } return new Element(rootNode, tag, isVoid, selfClosed); }\n\n    ### Response:",
        "ground_truth": "Creates new element with correct configuration.",
        "predict": " 7 days..\n\n    "
    },
    {
        "ID": 1057,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def unitcheck(u, nonperiodic=None): \"\"\"Check whether `u` is inside the unit cube. Given a masked array `nonperiodic`, also allows periodic boundaries conditions to exceed the unit cube.\"\"\" if nonperiodic is None: # No periodic boundary conditions provided. return np.all(u > 0.) and np.all(u < 1.) else: # Alternating periodic and non-periodic boundary conditions. return (np.all(u[nonperiodic] > 0.) and np.all(u[nonperiodic] < 1.) and np.all(u[~nonperiodic] > -0.5) and np.all(u[~nonperiodic] < 1.5))\n\n    ### Response: Check whether `u` is inside the unit cube. Given a masked array\n    `nonperiodic`, also allows periodic boundaries conditions to exceed\n    the unit cube..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public void tag(final Tag tag) { if (!enabled) { return; } TagType tagType = tag.getType(); Element node; switch (tagType) { case START: if (domBuilder.config.isIgnoreWhitespacesBetweenTags()) { removeLastChildNodeIfEmptyText(parentNode, false); } node = createElementNode(tag); if (domBuilder.config.isImpliedEndTags()) { while (true) { String parentNodeName = parentNode.getNodeName(); if (!implRules.implicitlyCloseParentTagOnNewTag(parentNodeName, node.getNodeName())) { break; } parentNode = parentNode.getParentNode(); if (log.isDebugEnabled()) { log.debug(\"Implicitly closed tag <\" + node.getNodeName() + \"> \"); } } } parentNode.addChild(node); if (!node.isVoidElement()) { parentNode = node; } break; case END: if (domBuilder.config.isIgnoreWhitespacesBetweenTags()) { removeLastChildNodeIfEmptyText(parentNode, true); } String tagName = tag.getName().toString(); Node matchingParent = findMatchingParentOpenTag(tagName); if (matchingParent == parentNode) { // regular situation parentNode = parentNode.getParentNode(); break; } if (matchingParent == null) { // matching open tag not found, remove it error(\"Orphan closed tag ignored: </\" + tagName + \"> \" + tag.getTagPosition()); break; } // try to close it implicitly if (domBuilder.config.isImpliedEndTags()) { boolean fixed = false; while (implRules.implicitlyCloseParentTagOnTagEnd(parentNode.getNodeName(), tagName)) { parentNode = parentNode.getParentNode(); if (log.isDebugEnabled()) { log.debug(\"Implicitly closed tag <\" + tagName + \">\"); } if (parentNode == matchingParent) { parentNode = matchingParent.parentNode; fixed = true; break; } } if (fixed) { break; } } // matching tag found, but it is not a regular situation // therefore close all unclosed tags in between fixUnclosedTagsUpToMatchingParent(tag, matchingParent); break; case SELF_CLOSING: if (domBuilder.config.isIgnoreWhitespacesBetweenTags()) { removeLastChildNodeIfEmptyText(parentNode, false); } node = createElementNode(tag); parentNode.addChild(node); break; } }\n\n    ### Response:",
        "ground_truth": "Visits tags.",
        "predict": " Check whether `u` is inside the unit cube. Given a masked array\n    `nonperiodic`, also allows periodic boundaries conditions to exceed\n    the unit cube..\n\n    "
    },
    {
        "ID": 1058,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def delete_action(plugin, action_id) the_plugin = hawk_escape plugin the_action_id = hawk_escape action_id http_delete \"/actions/#{the_plugin}/#{the_action_id}\" end\n\n    ### Response: Deletes the action of given action plugin.\n @param [String] plugin Id of the action plugin\n @param [String] action_id Id of the action.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void removeLastChildNodeIfEmptyText(final Node parentNode, final boolean closedTag) { if (parentNode == null) { return; } Node lastChild = parentNode.getLastChild(); if (lastChild == null) { return; } if (lastChild.getNodeType() != Node.NodeType.TEXT) { return; } if (closedTag) { if (parentNode.getChildNodesCount() == 1) { return; } } Text text = (Text) lastChild; if (text.isBlank()) { lastChild.detachFromParent(); } }\n\n    ### Response:",
        "ground_truth": "Removes last child node if contains just empty text.",
        "predict": " Deletes the action of given action plugin.\n @param [String] plugin Id of the action plugin\n @param [String] action_id Id of the action.\n\n    "
    },
    {
        "ID": 1059,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected PdfFormField getField(boolean isRadio) throws IOException, DocumentException { PdfFormField field = null; if (isRadio) field = PdfFormField.createEmpty(writer); else field = PdfFormField.createCheckBox(writer); field.setWidget(box, PdfAnnotation.HIGHLIGHT_INVERT); if (!isRadio) { field.setFieldName(fieldName); if ((options & READ_ONLY) != 0) field.setFieldFlags(PdfFormField.FF_READ_ONLY); if ((options & REQUIRED) != 0) field.setFieldFlags(PdfFormField.FF_REQUIRED); field.setValueAsName(checked ? onValue : \"Off\"); } if (text != null) field.setMKNormalCaption(text); if (rotation != 0) field.setMKRotation(rotation); field.setBorderStyle(new PdfBorderDictionary(borderWidth, borderStyle, new PdfDashPattern(3))); PdfAppearance tpon = getAppearance(isRadio, true); PdfAppearance tpoff = getAppearance(isRadio, false); field.setAppearance(PdfAnnotation.APPEARANCE_NORMAL, onValue, tpon); field.setAppearance(PdfAnnotation.APPEARANCE_NORMAL, \"Off\", tpoff); field.setAppearanceState(checked ? onValue : \"Off\"); PdfAppearance da = (PdfAppearance)tpon.getDuplicate(); da.setFontAndSize(getRealFont(), fontSize); if (textColor == null) da.setGrayFill(0); else da.setColorFill(textColor); field.setDefaultAppearanceString(da); if (borderColor != null) field.setMKBorderColor(borderColor); if (backgroundColor != null) field.setMKBackgroundColor(backgroundColor); switch (visibility) { case HIDDEN: field.setFlags(PdfAnnotation.FLAGS_PRINT | PdfAnnotation.FLAGS_HIDDEN); break; case VISIBLE_BUT_DOES_NOT_PRINT: break; case HIDDEN_BUT_PRINTABLE: field.setFlags(PdfAnnotation.FLAGS_PRINT | PdfAnnotation.FLAGS_NOVIEW); break; default: field.setFlags(PdfAnnotation.FLAGS_PRINT); break; } return field; }\n\n    ### Response: Gets a radio or check field.\n@param isRadio true to get a radio field, false to get\na check field\n@throws IOException on error\n@throws DocumentException on error\n@return the field.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String getQueryString() { if (sqlTemplate == null) { return toString(); } if (parameterValues == null) { return sqlTemplate; } final StringBuilder sb = new StringBuilder(); int qMarkCount = 0; final StringTokenizer tok = new StringTokenizer(sqlTemplate + ' ', \"?\"); while (tok.hasMoreTokens()) { final String oneChunk = tok.nextToken(); sb.append(oneChunk); try { Object value = null; if (parameterValues.size() > 1 + qMarkCount) { value = parameterValues.get(1 + qMarkCount); qMarkCount++; } else { if (!tok.hasMoreTokens()) { value = \"\"; } } if (value == null) { value = \"?\"; } sb.append(value); } catch (Throwable th) { sb.append(\"--- Building query failed: \").append(th.toString()); } } return sb.toString().trim(); }\n\n    ### Response:",
        "ground_truth": "Returns the query string.",
        "predict": " Gets a radio or check field.\n@param isRadio true to get a radio field, false to get\na check field\n@throws IOException on error\n@throws DocumentException on error\n@return the field.\n\n    "
    },
    {
        "ID": 1060,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def check_num_tasks(chain, task_count): \"\"\"Make sure there are a specific number of specific task types. Currently we only check decision tasks. Args: chain (ChainOfTrust): the chain we're operating on task_count (dict): mapping task type to the number of links. Raises: CoTError: on failure. \"\"\" errors = [] # hardcode for now. If we need a different set of constraints, either # go by cot_product settings or by task_count['docker-image'] + 1 min_decision_tasks = 1 if task_count['decision'] < min_decision_tasks: errors.append(\"{} decision tasks; we must have at least {}!\".format( task_count['decision'], min_decision_tasks )) raise_on_errors(errors)\n\n    ### Response: Make sure there are a specific number of specific task types.\n\n    Currently we only check decision tasks.\n\n    Args:\n        chain (ChainOfTrust): the chain we're operating on\n        task_count (dict): mapping task type to the number of links.\n\n    Raises:\n        CoTError: on failure..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected String getActionClassName(final Object action) { Class clazz = action.getClass(); clazz = ProxettaUtil.resolveTargetClass(clazz); return clazz.getName(); }\n\n    ### Response:",
        "ground_truth": "Returns correct action class name. Detects Proxetta classes.",
        "predict": " Make sure there are a specific number of specific task types.\n\n    Currently we only check decision tasks.\n\n    Args:\n        chain (ChainOfTrust): the chain we're operating on\n        task_count (dict): mapping task type to the number of links.\n\n    Raises:\n        CoTError: on failure..\n\n    "
    },
    {
        "ID": 1061,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function parseMatrix(matrix) { if (!(matrix instanceof SVG.Matrix)) matrix = new SVG.Matrix(matrix) return matrix }\n\n    ### Response: Parse matrix if required.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected int calculateTo(final int from, final int count, final int size) { int to = size; if (count != -1) { to = from + count; if (to > size) { to = size; } } return to; }\n\n    ### Response:",
        "ground_truth": "Calculates 'TO'.",
        "predict": " Parse matrix if required.\n\n    "
    },
    {
        "ID": 1062,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function getViewTag(view, offset) { var tag = '', i; for (i = offset; i < offset + 4; i += 1) { tag += String.fromCharCode(view.getInt8(i)); } return tag; }\n\n    ### Response: Retrieve a 4-character tag from the DataView.\n\n@param  {DataView} view       DataView\n@param  {number} strLen     string length\n@param  {number} byteOffset byteOffset\n@return {string}            string.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void iterateCollection(final Collection collection, final int from, final int count, final PageContext pageContext) throws JspException { JspFragment body = getJspBody(); Iterator iter = collection.iterator(); int i = 0; int to = calculateTo(from, count, collection.size()); while (i < to) { Object item = iter.next(); if (i >= from) { if (status != null) { iteratorStatus.next(!iter.hasNext()); } TagUtil.setScopeAttribute(var, item, scope, pageContext); TagUtil.invokeBody(body); } i++; } }\n\n    ### Response:",
        "ground_truth": "Iterates collection.",
        "predict": " Retrieve a 4-character tag from the DataView.\n\n@param  {DataView} view       DataView\n@param  {number} strLen     string length\n@param  {number} byteOffset byteOffset\n@return {string}            string.\n\n    "
    },
    {
        "ID": 1063,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def date_to_epiweek(date=datetime.date.today()) -> Epiweek: \"\"\" Convert python date to Epiweek \"\"\" year = date.year start_dates = list(map(_start_date_of_year, [year - 1, year, year + 1])) start_date = start_dates[1] if start_dates[1] > date: start_date = start_dates[0] elif date >= start_dates[2]: start_date = start_dates[2] return Epiweek( year=(start_date + datetime.timedelta(days=7)).year, week=((date - start_date).days // 7) + 1, day=(date.isoweekday() % 7) + 1 )\n\n    ### Response: Convert python date to Epiweek.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void iterateArray(final Object[] array, final int from, final int count, final PageContext pageContext) throws JspException { JspFragment body = getJspBody(); int len = array.length; int to = calculateTo(from, count, len); int last = to - 1; for (int i = from; i < to; i++) { Object item = array[i]; if (status != null) { iteratorStatus.next(i == last); } TagUtil.setScopeAttribute(var, item, scope, pageContext); TagUtil.invokeBody(body); } }\n\n    ### Response:",
        "ground_truth": "Iterates arrays.",
        "predict": " Convert python date to Epiweek.\n\n    "
    },
    {
        "ID": 1064,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _put_bucket_policy(self): \"\"\"Attach a bucket policy to app bucket.\"\"\" if self.s3props['bucket_policy']: policy_str = json.dumps(self.s3props['bucket_policy']) _response = self.s3client.put_bucket_policy(Bucket=self.bucket, Policy=policy_str) else: _response = self.s3client.delete_bucket_policy(Bucket=self.bucket) LOG.debug('Response adding bucket policy: %s', _response) LOG.info('S3 Bucket Policy Attached')\n\n    ### Response: Attach a bucket policy to app bucket..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String replace(final String s, final String sub, final String with) { if (sub.isEmpty()) { return s; } int c = 0; int i = s.indexOf(sub, c); if (i == -1) { return s; } int length = s.length(); StringBuilder sb = new StringBuilder(length + with.length()); do { sb.append(s, c, i); sb.append(with); c = i + sub.length(); } while ((i = s.indexOf(sub, c)) != -1); if (c < length) { sb.append(s, c, length); } return sb.toString(); }\n\n    ### Response:",
        "ground_truth": "Replaces all occurrences of a certain pattern in a string with a\nreplacement string. This is the fastest replace function known to author.\n\n@param s      string to be inspected\n@param sub    string pattern to be replaced\n@param with   string that should go where the pattern was",
        "predict": " Attach a bucket policy to app bucket..\n\n    "
    },
    {
        "ID": 1065,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public int getNumArgumentsIncludingObjectInstance(InvokeInstruction ins, ConstantPoolGen cpg) throws DataflowAnalysisException { int numConsumed = ins.consumeStack(cpg); if (numConsumed == Const.UNPREDICTABLE) { throw new DataflowAnalysisException(\"Unpredictable stack consumption in \" + ins); } return numConsumed; }\n\n    ### Response: Get the number of arguments passed to given method invocation, including\nthe object instance if the call is to an instance method.\n\n@param ins\nthe method invocation instruction\n@param cpg\nthe ConstantPoolGen for the class containing the method\n@return number of arguments, including object instance if appropriate\n@throws DataflowAnalysisException.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String replaceChar(final String s, final char sub, final char with) { int startIndex = s.indexOf(sub); if (startIndex == -1) { return s; } char[] str = s.toCharArray(); for (int i = startIndex; i < str.length; i++) { if (str[i] == sub) { str[i] = with; } } return new String(str); }\n\n    ### Response:",
        "ground_truth": "Replaces all occurrences of a character in a string.\n\n@param s      input string\n@param sub    character to replace\n@param with   character to replace with",
        "predict": " Get the number of arguments passed to given method invocation, including\nthe object instance if the call is to an instance method.\n\n@param ins\nthe method invocation instruction\n@param cpg\nthe ConstantPoolGen for the class containing the method\n@return number of arguments, including object instance if appropriate\n@throws DataflowAnalysisException.\n\n    "
    },
    {
        "ID": 1066,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def put_design(self, design_name, design, verbose=False): \"\"\" Updates a design document for the loaded databases design_name <str> name of the design design <str> json string of the design document \"\"\" try: try: # check if there is a previous revision of the # specified design, if there is get the _rev # id from it and apply it to the new version existing = self.get_design(design_name) design = json.loads(design) if design.get(\"version\") and existing.get(\"version\") == design.get(\"version\"): if verbose: print \"No change in design... skipping update!\" return design[\"_rev\"] = existing[\"_rev\"] design = json.dumps(design) except RESTException: pass r = requests.request( \"PUT\", \"%s/%s/_design/%s\" % ( self.host, self.database_name, design_name ), auth=self.auth, data=design, headers={\"content-type\" : \"application/json\"} ) return self.result(r.text) except: raise\n\n    ### Response: Updates a design document for the loaded databases\n\n    design_name  name of the design\n    design  json string of the design document.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String replaceChars(final String s, final char[] sub, final char[] with) { char[] str = s.toCharArray(); for (int i = 0; i < str.length; i++) { char c = str[i]; for (int j = 0; j < sub.length; j++) { if (c == sub[j]) { str[i] = with[j]; break; } } } return new String(str); }\n\n    ### Response:",
        "ground_truth": "Replaces all occurrences of a characters in a string.\n\n@param s      input string\n@param sub    characters to replace\n@param with   characters to replace with",
        "predict": " Updates a design document for the loaded databases\n\n    design_name  name of the design\n    design  json string of the design document.\n\n    "
    },
    {
        "ID": 1067,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (w *settingsAckSwallowWriter) Write(p []byte) (int, error) { if !w.didSwallow { w.buf = append(w.buf, p...) // Process all the frames we have collected into w.buf for { // Append until we get full frame header which is 9 bytes if len(w.buf) < 9 { break } // Check if we have collected a whole frame. fh, err := http2.ReadFrameHeader(bytes.NewBuffer(w.buf)) if err != nil { // Corrupted frame, fail current Write return 0, err } fSize := fh.Length + 9 if uint32(len(w.buf)) < fSize { // Have not collected whole frame. Stop processing buf, and withhold on // forward bytes to w.Writer until we get the full frame. break } // We have now collected a whole frame. if fh.Type == http2.FrameSettings && fh.Flags.Has(http2.FlagSettingsAck) { // If Settings ACK frame, do not forward to underlying writer, remove // bytes from w.buf, and record that we have swallowed Settings Ack // frame. w.didSwallow = true w.buf = w.buf[fSize:] continue } // Not settings ack frame. Forward bytes to w.Writer. if _, err := w.Writer.Write(w.buf[:fSize]); err != nil { // Couldn't forward bytes. Fail current Write. return 0, err } w.buf = w.buf[fSize:] } return len(p), nil } return w.Writer.Write(p) }\n\n    ### Response: // Write implements io.Writer interface. Normally forwards bytes to w.Writer,\n// except for the first Settings ACK frame that it sees..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String replaceFirst(final String s, final String sub, final String with) { int i = s.indexOf(sub); if (i == -1) { return s; } return s.substring(0, i) + with + s.substring(i + sub.length()); }\n\n    ### Response:",
        "ground_truth": "Replaces the very first occurrence of a substring with supplied string.\n\n@param s      source string\n@param sub    substring to replace\n@param with   substring to replace with",
        "predict": " // Write implements io.Writer interface. Normally forwards bytes to w.Writer,\n// except for the first Settings ACK frame that it sees..\n\n    "
    },
    {
        "ID": 1068,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def plot_xtb(fignum, XTB, Bs, e, f): \"\"\" function to plot series of chi measurements as a function of temperature, holding frequency constant and varying B \"\"\" plt.figure(num=fignum) plt.xlabel('Temperature (K)') plt.ylabel('Susceptibility (m^3/kg)') k = 0 Blab = [] for field in XTB: T, X = [], [] for xt in field: X.append(xt[0]) T.append(xt[1]) plt.plot(T, X) plt.text(T[-1], X[-1], '%8.2e' % (Bs[k]) + ' T') # Blab.append('%8.1e'%(Bs[k])+' T') k += 1 plt.title(e + ': f = ' + '%i' % (int(f)) + ' Hz')\n\n    ### Response: function to plot series of chi measurements as a function of temperature, holding frequency constant and varying B.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String replaceFirst(final String s, final char sub, final char with) { int index = s.indexOf(sub); if (index == -1) { return s; } char[] str = s.toCharArray(); str[index] = with; return new String(str); }\n\n    ### Response:",
        "ground_truth": "Replaces the very first occurrence of a character in a string.\n\n@param s      string\n@param sub    char to replace\n@param with   char to replace with",
        "predict": " function to plot series of chi measurements as a function of temperature, holding frequency constant and varying B.\n\n    "
    },
    {
        "ID": 1069,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function bookmark($id) { $token = $this->oauth->getToken(); // Set parameters. $parameters = array( 'oauth_token' => $token['key'] ); // Set the success response code. $this->oauth->setOption('success_code', 201); // Set the API base $base = '/v1/people/~/job-bookmarks'; // Build xml. $xml = '<job-bookmark><job><id>' . $id . '</id></job></job-bookmark>'; // Build the request path. $path = $this->getOption('api.url') . $base; $header['Content-Type'] = 'text/xml'; // Send the request. $response = $this->oauth->oauthRequest($path, 'POST', $parameters, $xml, $header); return $response; }\n\n    ### Response: Method to bookmark a job to the current user's account.\n\n@param   integer  $id  The unique identifier for a job.\n\n@return  array  The decoded JSON response\n\n@since   1.0.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String replaceLast(final String s, final String sub, final String with) { int i = s.lastIndexOf(sub); if (i == -1) { return s; } return s.substring(0, i) + with + s.substring(i + sub.length()); }\n\n    ### Response:",
        "ground_truth": "Replaces the very last occurrence of a substring with supplied string.\n\n@param s      source string\n@param sub    substring to replace\n@param with   substring to replace with",
        "predict": " Method to bookmark a job to the current user's account.\n\n@param   integer  $id  The unique identifier for a job.\n\n@return  array  The decoded JSON response\n\n@since   1.0.\n\n    "
    },
    {
        "ID": 1070,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function getArrayTreeEmployee($id = null, $includeRoot = true, $includeBlocked = false, $includeFields = null) { $cachePath = 'employees_tree_arr_' . md5(serialize(func_get_args())); $cached = Cache::read($cachePath, CAKE_LDAP_CACHE_KEY_TREE_EMPLOYEES); if ($cached !== false) { return $cached; } $result = []; $conditions = $this->_getConditionsForEmployeeTreeInfo($id, $includeRoot, $includeBlocked); if ($conditions === false) { return $result; } if (empty($includeFields)) { $includeFields = []; } elseif (!is_array($includeFields)) { $includeFields = [$includeFields]; } $fields = [ $this->alias . '.id', $this->alias . '.parent_id', $this->alias . '.lft', $this->alias . '.rght', $this->Employee->alias . '.id', $this->Employee->alias . '.' . $this->Employee->displayField ]; if ($this->Employee->hasField(CAKE_LDAP_LDAP_ATTRIBUTE_TITLE)) { $fields[] = $this->Employee->alias . '.' . CAKE_LDAP_LDAP_ATTRIBUTE_TITLE; } if ($includeBlocked && $this->Employee->hasField('block')) { $fields[] = $this->Employee->alias . '.block'; } if (!empty($includeFields)) { $fields = array_values(array_unique(array_merge($fields, $includeFields))); } $order = [ $this->alias . '.lft' => 'asc' ]; $contain = [ 'Employee' ]; $data = $this->find('threaded', compact('conditions', 'fields', 'order', 'contain')); if ($data !== false) { $result = $data; } Cache::write($cachePath, $result, CAKE_LDAP_CACHE_KEY_TREE_EMPLOYEES); return $result; }\n\n    ### Response: Return tree of subordinate employees\n\n@param int|string $id ID of record as root element\n@param bool $includeRoot If True, include root element in result\n@param bool $includeBlocked If False, include only non-blocked employees.\n@param array|string $includeFields List of fields for encluding to tree.\n@return array Return tree of subordinate employees..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String replaceLast(final String s, final char sub, final char with) { int index = s.lastIndexOf(sub); if (index == -1) { return s; } char[] str = s.toCharArray(); str[index] = with; return new String(str); }\n\n    ### Response:",
        "ground_truth": "Replaces the very last occurrence of a character in a string.\n\n@param s      string\n@param sub    char to replace\n@param with   char to replace with",
        "predict": " Return tree of subordinate employees\n\n@param int|string $id ID of record as root element\n@param bool $includeRoot If True, include root element in result\n@param bool $includeBlocked If False, include only non-blocked employees.\n@param array|string $includeFields List of fields for encluding to tree.\n@return array Return tree of subordinate employees..\n\n    "
    },
    {
        "ID": 1071,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void addRootGroup(final Group nextRootGroup) { this.getRootGroups().add(nextRootGroup); RepositoryConnection conn = null; try { conn = this.repository.getConnection(); conn.begin(); this.storeGroup(nextRootGroup, conn, true); conn.commit(); } catch(final RepositoryException e) { this.log.error(\"Found exception while storing root group\", e); if(conn != null) { try { conn.rollback(); } catch(final RepositoryException e1) { this.log.error(\"Found exception while trying to roll back connection\", e1); } } } finally { if(conn != null) { try { conn.close(); } catch(final RepositoryException e) { this.log.error(\"Found exception closing repository connection\", e); } } } }\n\n    ### Response: Adds a fully populated root group to the underlying repository, including a statement\nindicating that this group is a root group.\n\n@param nextRootGroup The next root group to add..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String remove(final String s, final String sub) { int c = 0; int sublen = sub.length(); if (sublen == 0) { return s; } int i = s.indexOf(sub, c); if (i == -1) { return s; } StringBuilder sb = new StringBuilder(s.length()); do { sb.append(s, c, i); c = i + sublen; } while ((i = s.indexOf(sub, c)) != -1); if (c < s.length()) { sb.append(s, c, s.length()); } return sb.toString(); }\n\n    ### Response:",
        "ground_truth": "Removes all substring occurrences from the string.\n\n@param s      source string\n@param sub    substring to remove",
        "predict": " Adds a fully populated root group to the underlying repository, including a statement\nindicating that this group is a root group.\n\n@param nextRootGroup The next root group to add..\n\n    "
    },
    {
        "ID": 1072,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def cluster(points, radius): \"\"\" Clustering of points in space. `radius` is the radius of local search. Individual subsets can be accessed through ``actor.clusters``. .. hint:: |clustering| |clustering.py|_ \"\"\" if isinstance(points, vtk.vtkActor): poly = points.GetMapper().GetInput() else: src = vtk.vtkPointSource() src.SetNumberOfPoints(len(points)) src.Update() vpts = src.GetOutput().GetPoints() for i, p in enumerate(points): vpts.SetPoint(i, p) poly = src.GetOutput() cluster = vtk.vtkEuclideanClusterExtraction() cluster.SetInputData(poly) cluster.SetExtractionModeToAllClusters() cluster.SetRadius(radius) cluster.ColorClustersOn() cluster.Update() idsarr = cluster.GetOutput().GetPointData().GetArray(\"ClusterId\") Nc = cluster.GetNumberOfExtractedClusters() sets = [[] for i in range(Nc)] for i, p in enumerate(points): sets[idsarr.GetValue(i)].append(p) acts = [] for i, aset in enumerate(sets): acts.append(vs.Points(aset, c=i)) actor = Assembly(acts) actor.info[\"clusters\"] = sets print(\"Nr. of extracted clusters\", Nc) if Nc > 10: print(\"First ten:\") for i in range(Nc): if i > 9: print(\"...\") break print(\"Cluster #\" + str(i) + \", N =\", len(sets[i])) print(\"Access individual clusters through attribute: actor.cluster\") return actor\n\n    ### Response: Clustering of points in space.\n\n    `radius` is the radius of local search.\n    Individual subsets can be accessed through ``actor.clusters``.\n\n    .. hint:: |clustering| |clustering.py|_.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String remove(final String string, final char ch) { int stringLen = string.length(); char[] result = new char[stringLen]; int offset = 0; for (int i = 0; i < stringLen; i++) { char c = string.charAt(i); if (c == ch) { continue; } result[offset] = c; offset++; } if (offset == stringLen) { return string; // no changes } return new String(result, 0, offset); }\n\n    ### Response:",
        "ground_truth": "Removes a single character from string.\n\n@param string    source string\n@param ch  character to remove",
        "predict": " Clustering of points in space.\n\n    `radius` is the radius of local search.\n    Individual subsets can be accessed through ``actor.clusters``.\n\n    .. hint:: |clustering| |clustering.py|_.\n\n    "
    },
    {
        "ID": 1073,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (l *list) Front() *element { if l.len == 0 { return nil } return l.root.next }\n\n    ### Response: // Front returns the first element of list l or nil.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static boolean isAllEmpty(final String... strings) { for (String string : strings) { if (!isEmpty(string)) { return false; } } return true; }\n\n    ### Response:",
        "ground_truth": "Determines if string array contains empty strings.\n@see #isEmpty(CharSequence)",
        "predict": " // Front returns the first element of list l or nil.\n\n    "
    },
    {
        "ID": 1074,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public final void channelRead(final ChannelHandlerContext ctx, final Object msg) { try { JNRPERequest req = (JNRPERequest) msg; ReturnValue ret = commandInvoker.invoke(req.getCommand(), req.getArguments()); JNRPEResponse res = new JNRPEResponse(); res.setResult(ret.getStatus().intValue(), ret.getMessage()); ChannelFuture channelFuture = ctx.writeAndFlush(res); channelFuture.addListener(ChannelFutureListener.CLOSE); } catch ( RuntimeException re ) { re.printStackTrace(); } finally { ReferenceCountUtil.release(msg); } }\n\n    ### Response: Method channelRead.\n@param ctx ChannelHandlerContext\n@param msg Object\n@see io.netty.channel.ChannelInboundHandler#channelRead(ChannelHandlerContext, Object).\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static boolean isAllBlank(final String... strings) { for (String string : strings) { if (!isBlank(string)) { return false; } } return true; }\n\n    ### Response:",
        "ground_truth": "Determines if string array contains just blank strings.",
        "predict": " Method channelRead.\n@param ctx ChannelHandlerContext\n@param msg Object\n@see io.netty.channel.ChannelInboundHandler#channelRead(ChannelHandlerContext, Object).\n\n    "
    },
    {
        "ID": 1075,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function removeOwnerFromGroup($email, $groupId) { $uri = self::APPS_BASE_FEED_URI . self::APPS_GROUP_PATH . '/'; $uri .= $this->getDomain() . '/' . $groupId . '/owner/' . $email; return $this->delete($uri); }\n\n    ### Response: Remove email as an owner of a group\n\n@param string $email Owner's email\n@param string $groupId The unique identifier for the group.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String[] toStringArray(final Object value) { if (value == null) { return new String[0]; } Class<?> type = value.getClass(); if (!type.isArray()) { return new String[] {value.toString()}; } Class componentType = type.getComponentType(); if (componentType.isPrimitive()) { if (componentType == int.class) { return ArraysUtil.toStringArray((int[]) value); } else if (componentType == long.class) { return ArraysUtil.toStringArray((long[]) value); } else if (componentType == double.class) { return ArraysUtil.toStringArray((double[]) value); } else if (componentType == float.class) { return ArraysUtil.toStringArray((float[]) value); } else if (componentType == boolean.class) { return ArraysUtil.toStringArray((boolean[]) value); } else if (componentType == short.class) { return ArraysUtil.toStringArray((short[]) value); } else if (componentType == byte.class) { return ArraysUtil.toStringArray((byte[]) value); } else { throw new IllegalArgumentException(); } } else { return ArraysUtil.toStringArray((Object[]) value); } }\n\n    ### Response:",
        "ground_truth": "Converts an array object to array of strings, where every element\nof input array is converted to a string. If input is not an array,\nthe result will still be an array with one element.",
        "predict": " Remove email as an owner of a group\n\n@param string $email Owner's email\n@param string $groupId The unique identifier for the group.\n\n    "
    },
    {
        "ID": 1076,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function (node, scope) { var finder = infer.typeFinder[node.type]; return finder ? finder(node, scope) : infer.ANull; }\n\n    ### Response: Re-implement Tern's internal findType..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static String changeFirstCharacterCase(final boolean capitalize, final String string) { int strLen = string.length(); if (strLen == 0) { return string; } char ch = string.charAt(0); char modifiedCh; if (capitalize) { modifiedCh = Character.toUpperCase(ch); } else { modifiedCh = Character.toLowerCase(ch); } if (modifiedCh == ch) { // no change, return unchanged string return string; } char[] chars = string.toCharArray(); chars[0] = modifiedCh; return new String(chars); }\n\n    ### Response:",
        "ground_truth": "Internal method for changing the first character case.",
        "predict": " Re-implement Tern's internal findType..\n\n    "
    },
    {
        "ID": 1077,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def write_header(self): \"\"\"Write `header` to `file`. See Also -------- write_data \"\"\" for properties in self.header.values(): value = properties['value'] offset_bytes = int(properties['offset']) self.file.seek(offset_bytes) value.tofile(self.file)\n\n    ### Response: Write `header` to `file`.\n\n        See Also\n        --------\n        write_data.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String title(final String string) { char[] chars = string.toCharArray(); boolean wasWhitespace = true; for (int i = 0; i < chars.length; i++) { char c = chars[i]; if (CharUtil.isWhitespace(c)) { wasWhitespace = true; } else { if (wasWhitespace) { chars[i] = Character.toUpperCase(c); } else { chars[i] = Character.toLowerCase(c); } wasWhitespace = false; } } return new String(chars); }\n\n    ### Response:",
        "ground_truth": "Makes a title-cased string from given input.",
        "predict": " Write `header` to `file`.\n\n        See Also\n        --------\n        write_data.\n\n    "
    },
    {
        "ID": 1078,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function writeDrushAlias() { $drush_alias_file_path = \"{$_SERVER['HOME']}/.drush/terra.{$this->app->name}.aliases.drushrc.php\"; $drush_alias_file = array(); $drush_alias_file[] = '<?php'; foreach ($this->app->environments as $environment_name => $environment) { $factory = new self($environment, $this->app); $path = \"/app/\" . $environment['document_root']; $drush_alias_file[] = '// DO NOT EDIT. This is generated by Terra. Any changes will be overridden when the environment is re-enabled.'; $drush_alias_file[] = \"\\$aliases['{$environment_name}'] = array(\"; $drush_alias_file[] = \" 'uri' => '{$factory->getHost()}:{$factory->getPort()}',\"; $drush_alias_file[] = \" 'root' => '$path',\"; $drush_alias_file[] = \" 'remote-host' => '{$factory->getHost()}',\"; $drush_alias_file[] = \" 'remote-user' => 'terra',\"; $drush_alias_file[] = \" 'ssh-options' => '-p {$factory->getDrushPort()}',\"; $drush_alias_file[] = ');'; } $fs = new FileSystem(); try { $fs->dumpFile($drush_alias_file_path, implode(\"\\n\", $drush_alias_file)); return true; } catch (IOException $e) { return false; } }\n\n    ### Response: Writes a local drush alias file..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String compressChars(final String s, final char c) { int len = s.length(); StringBuilder sb = new StringBuilder(len); boolean wasChar = false; for (int i = 0; i < len; i++) { char c1 = s.charAt(i); if (c1 == c) { if (wasChar) { continue; } wasChar = true; } else { wasChar = false; } sb.append(c1); } if (sb.length() == len) { return s; } return sb.toString(); }\n\n    ### Response:",
        "ground_truth": "Compress multiple occurrences of given char into one appearance.",
        "predict": " Writes a local drush alias file..\n\n    "
    },
    {
        "ID": 1079,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def get_subscription_deployment_locations(custom_headers:nil) response = get_subscription_deployment_locations_async(custom_headers:custom_headers).value! response.body unless response.nil? end\n\n    ### Response: Gets list of available geo regions plus ministamps\n\n Gets list of available geo regions plus ministamps\n\n @param custom_headers [Hash{String => String}] A hash of custom headers that\n will be added to the HTTP request.\n\n @return [DeploymentLocations] operation results..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static boolean startsWithIgnoreCase(final String src, final String subS, final int startIndex) { String sub = subS.toLowerCase(); int sublen = sub.length(); if (startIndex + sublen > src.length()) { return false; } int j = 0; int i = startIndex; while (j < sublen) { char source = Character.toLowerCase(src.charAt(i)); if (sub.charAt(j) != source) { return false; } j++; i++; } return true; }\n\n    ### Response:",
        "ground_truth": "Tests if this string starts with the specified prefix with ignored case\nand with the specified prefix beginning a specified index.\n\n@param src        source string to test\n@param subS       starting substring\n@param startIndex index from where to test\n\n@return true if the character sequence represented by the argument is\na prefix of the character sequence represented by this string;\nfalse otherwise.",
        "predict": " Gets list of available geo regions plus ministamps\n\n Gets list of available geo regions plus ministamps\n\n @param custom_headers [Hash{String => String}] A hash of custom headers that\n will be added to the HTTP request.\n\n @return [DeploymentLocations] operation results..\n\n    "
    },
    {
        "ID": 1080,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function pickUpTranslation( Project $project, array $languages, array $domains, bool $revision ) : ? Translation { $repositories = $project ->getRepositories( $domains, $languages ); $translations = array_reduce( $repositories, function (Repository $repository) use ($revision) { $translations = $repository->getTranslations(); return array_filter( $translations, function (Translation $translation) use ($revision) { return $revision === ($translation->getValue() == ''); } ); } ); $position = array_rand($translations); return $translations[$position]; }\n\n    ### Response: Given a Project, a set of languages and a set of domains, return a random\nnon filled yet Translation object.\n\nIf the flag revision is enabled, then only already translated elements\nwill be picked up\n\nReturn translation found or null if none translation is available\n\n@param Project $project   Project\n@param array   $languages Languages\n@param array   $domains   Domains\n@param bool    $revision  Revision only\n\n@return Translation|null.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static boolean endsWithChar(final String s, final char c) { if (s.length() == 0) { return false; } return s.charAt(s.length() - 1) == c; }\n\n    ### Response:",
        "ground_truth": "Returns if string ends with provided character.",
        "predict": " Given a Project, a set of languages and a set of domains, return a random\nnon filled yet Translation object.\n\nIf the flag revision is enabled, then only already translated elements\nwill be picked up\n\nReturn translation found or null if none translation is available\n\n@param Project $project   Project\n@param array   $languages Languages\n@param array   $domains   Domains\n@param bool    $revision  Revision only\n\n@return Translation|null.\n\n    "
    },
    {
        "ID": 1081,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static final byte[] getAsByteArray(Object object, ExternalContext ctx) { ByteArrayOutputStream outputStream = new ByteArrayOutputStream(); // get the Factory that was instantiated @ startup SerialFactory serialFactory = (SerialFactory) ctx.getApplicationMap().get(SERIAL_FACTORY); if(serialFactory == null) { throw new NullPointerException(\"serialFactory\"); } try { ObjectOutputStream writer = serialFactory.getObjectOutputStream(outputStream); writer.writeObject(object); byte[] bytes = outputStream.toByteArray(); writer.close(); outputStream.close(); writer = null; outputStream = null; return bytes; } catch (IOException e) { throw new FacesException(e); } }\n\n    ### Response: Performs serialization with the serialization provider created by the\nSerialFactory.\n\n@param object\n@param ctx\n@return.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static int countIgnoreCase(final String source, final String sub) { int count = 0; int j = 0; int sublen = sub.length(); if (sublen == 0) { return 0; } while (true) { int i = indexOfIgnoreCase(source, sub, j); if (i == -1) { break; } count++; j = i + sublen; } return count; }\n\n    ### Response:",
        "ground_truth": "Count substring occurrences in a source string, ignoring case.\n\n@param source\tsource string\n@param sub\t\tsubstring to count\n@return\t\t\tnumber of substring occurrences",
        "predict": " Performs serialization with the serialization provider created by the\nSerialFactory.\n\n@param object\n@param ctx\n@return.\n\n    "
    },
    {
        "ID": 1082,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function get_image_title() { if ($return = $this->get_image_tags(SIMPLEPIE_NAMESPACE_RSS_10, 'title')) { return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT); } elseif ($return = $this->get_image_tags(SIMPLEPIE_NAMESPACE_RSS_090, 'title')) { return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT); } elseif ($return = $this->get_image_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'title')) { return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT); } elseif ($return = $this->get_image_tags(SIMPLEPIE_NAMESPACE_DC_11, 'title')) { return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT); } elseif ($return = $this->get_image_tags(SIMPLEPIE_NAMESPACE_DC_10, 'title')) { return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT); } return null; }\n\n    ### Response: Get the feed logo's title\n\nRSS 0.9.0, 1.0 and 2.0 feeds are allowed to have a \"feed logo\" title.\n\nUses `` or ``\n\n@return string|null.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static boolean equalsIgnoreCase(final String[] as, final String[] as1) { if (as.length != as1.length) { return false; } for (int i = 0; i < as.length; i++) { if (!as[i].equalsIgnoreCase(as1[i])) { return false; } } return true; }\n\n    ### Response:",
        "ground_truth": "Compares two string arrays.\n\n@param as     first string array\n@param as1    second string array\n\n@return true if all array elements matches",
        "predict": " Get the feed logo's title\n\nRSS 0.9.0, 1.0 and 2.0 feeds are allowed to have a \"feed logo\" title.\n\nUses `` or ``\n\n@return string|null.\n\n    "
    },
    {
        "ID": 1083,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def post_parse(self): \"\"\"Called after parsing is done\"\"\" if self.cache and not self.cache_loaded: self.cache_writer_cls(self.file_name, self.wavefront).write()\n\n    ### Response: Called after parsing is done.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static int indexOfWhitespace(final String string, final int startindex, final int endindex) { for (int i = startindex; i < endindex; i++) { if (CharUtil.isWhitespace(string.charAt(i))) { return i; } } return -1; }\n\n    ### Response:",
        "ground_truth": "Returns first index of a whitespace character, starting from specified index offset.",
        "predict": " Called after parsing is done.\n\n    "
    },
    {
        "ID": 1084,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func ExplainExpressionList(exprs []Expression) []byte { buffer := bytes.NewBufferString(\"\") for i, expr := range exprs { buffer.WriteString(expr.ExplainInfo()) if i+1 < len(exprs) { buffer.WriteString(\", \") } } return buffer.Bytes() }\n\n    ### Response: // ExplainExpressionList generates explain information for a list of expressions..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String stripLeadingChar(final String string, final char c) { if (string.length() > 0) { if (string.charAt(0) == c) { return string.substring(1); } } return string; }\n\n    ### Response:",
        "ground_truth": "Strips leading char if string starts with one.",
        "predict": " // ExplainExpressionList generates explain information for a list of expressions..\n\n    "
    },
    {
        "ID": 1085,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (e *Engine) prevReleaseDay() time.Time { prevRelease := e.midnight(e.timeManager.Now()) day := prevRelease.Weekday() var dayHours int if day < releaseDay || (day == releaseDay && prevRelease.Hour() < releaseHourCheck) { dayHours = 24 * (7 - int(releaseDay-day)) } else if day > releaseDay || (day == releaseDay && prevRelease.Hour() > releaseHourCheck) { dayHours = 24 * int(day-releaseDay) } hours := releaseHourCheck - dayHours - prevRelease.Hour() prevRelease = prevRelease.Add(time.Duration(hours) * time.Hour) return prevRelease }\n\n    ### Response: // prevReleaseDay returns the date of the last release day, calculated based on\n// the `releaseHourCheck`-th hour of the previous `releaseDay` weekday..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String stripTrailingChar(final String string, final char c) { if (string.length() > 0) { if (string.charAt(string.length() - 1) == c) { return string.substring(0, string.length() - 1); } } return string; }\n\n    ### Response:",
        "ground_truth": "Strips trailing char if string ends with one.",
        "predict": " // prevReleaseDay returns the date of the last release day, calculated based on\n// the `releaseHourCheck`-th hour of the previous `releaseDay` weekday..\n\n    "
    },
    {
        "ID": 1086,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def cmd_velocity(self, args): '''velocity x-ms y-ms z-ms''' if (len(args) != 3): print(\"Usage: velocity x y z (m/s)\") return if (len(args) == 3): x_mps = float(args[0]) y_mps = float(args[1]) z_mps = float(args[2]) #print(\"x:%f, y:%f, z:%f\" % (x_mps, y_mps, z_mps)) self.master.mav.set_position_target_local_ned_send( 0, # time_boot_ms (not used) 0, 0, # target system, target component mavutil.mavlink.MAV_FRAME_LOCAL_NED, # frame 0b0000111111000111, # type_mask (only speeds enabled) 0, 0, 0, # x, y, z positions (not used) x_mps, y_mps, -z_mps, # x, y, z velocity in m/s 0, 0, 0, # x, y, z acceleration (not supported yet, ignored in GCS_Mavlink) 0, 0)\n\n    ### Response: velocity x-ms y-ms z-ms.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String stripChar(final String string, final char c) { if (string.length() == 0) { return string; } if (string.length() == 1) { if (string.charAt(0) == c) { return StringPool.EMPTY; } return string; } int left = 0; int right = string.length(); if (string.charAt(left) == c) { left++; } if (string.charAt(right - 1) == c) { right--; } return string.substring(left, right); }\n\n    ### Response:",
        "ground_truth": "Strips leading and trailing char from given string.",
        "predict": " velocity x-ms y-ms z-ms.\n\n    "
    },
    {
        "ID": 1087,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func VerifyWithJKU(buf []byte, jwkurl string) ([]byte, error) { key, err := jwk.FetchHTTP(jwkurl) if err != nil { return nil, errors.Wrap(err, `failed to fetch jwk via HTTP`) } return VerifyWithJWKSet(buf, key, nil) }\n\n    ### Response: // VerifyWithJKU verifies the JWS message using a remote JWK\n// file represented in the url..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String stripToChar(final String string, final char c) { int ndx = string.indexOf(c); if (ndx == -1) { return string; } return string.substring(ndx); }\n\n    ### Response:",
        "ground_truth": "Strips everything up to the first appearance of given char.\nCharacter IS included in the returned string.",
        "predict": " // VerifyWithJKU verifies the JWS message using a remote JWK\n// file represented in the url..\n\n    "
    },
    {
        "ID": 1088,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (e *Element) GetSource() (string, error) { e.lock.RLock() id := e.id e.lock.RUnlock() if e.invalidated { return \"\", &InvalidElementErr{} } e.tab.debugf(\"id: %d\\n\", id) outerParams := &gcdapi.DOMGetOuterHTMLParams{NodeId: id} return e.tab.DOM.GetOuterHTMLWithParams(outerParams) }\n\n    ### Response: // Returns the outer html of the element..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String stripFromChar(final String string, final char c) { int ndx = string.indexOf(c); if (ndx == -1) { return string; } return string.substring(0, ndx); }\n\n    ### Response:",
        "ground_truth": "Strips everything from the first appearance of given char.\nCharacter IS NOT included in the returned string.",
        "predict": " // Returns the outer html of the element..\n\n    "
    },
    {
        "ID": 1089,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function buildInProjectMode($projectMake) { $drushHelper = $this->getDrushHelper(); $drushHelper->ensureInstalled(); $drushFlags = $this->getDrushFlags(); $drupalRoot = $this->getWebRoot(); $args = array_merge( ['make', $projectMake, $drupalRoot], $drushFlags ); // Create a lock file automatically. if (!strpos($projectMake, '.lock') && !empty($this->settings['lock']) && $drushHelper->supportsMakeLock()) { $args[] = \"--lock=$projectMake.lock\"; } // Run Drush make. // // Note that this is run inside the make file's directory. This fixes an // issue with the 'copy' Drush Make download type. According to the // Drush documentation, URLs for copying files can be either absolute or // relative to the make file's directory. However, in Drush's actual // implementation, it's actually relative to the current working // directory. $drushHelper->execute($args, dirname($projectMake), true, false); $this->processSettingsPhp(); $this->ignoredFiles[] = '*.make'; $this->ignoredFiles[] = '*.make.lock'; $this->ignoredFiles[] = '*.make.yml'; $this->ignoredFiles[] = '*.make.yml.lock'; $this->ignoredFiles[] = 'settings.local.php'; $this->specialDestinations['sites.php'] = '{webroot}/sites'; // Symlink, non-recursively, all files from the app into the // 'sites/default' directory. $this->fsHelper->symlinkAll( $this->appRoot, $drupalRoot . '/sites/default', true, false, array_merge($this->ignoredFiles, array_keys($this->specialDestinations)), $this->copy ); }\n\n    ### Response: Build in 'project' mode, i.e. just using a Drush make file.\n\n@param string $projectMake.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void cropAll(final String... strings) { for (int i = 0; i < strings.length; i++) { String string = strings[i]; if (string != null) { string = crop(strings[i]); } strings[i] = string; } }\n\n    ### Response:",
        "ground_truth": "Crops all elements of string array.",
        "predict": " Build in 'project' mode, i.e. just using a Drush make file.\n\n@param string $projectMake.\n\n    "
    },
    {
        "ID": 1090,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def update_status(dbfile,status_file,nas_addr): ''' update status db ''' try: total = 0 params = [] for sid, su in parse_status_file(status_file, nas_addr).items(): if 'session_id' in su and 'inbytes' in su and 'outbytes' in su: params.append((su['inbytes'],su['outbytes'],su['session_id'])) total += 1 statusdb.batch_update_client(dbfile,params) log.msg('update_status total = %s' % total) except Exception, e: log.err('batch update status error') log.err(e)\n\n    ### Response: update status db.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String trimLeft(final String src) { int len = src.length(); int st = 0; while ((st < len) && (CharUtil.isWhitespace(src.charAt(st)))) { st++; } return st > 0 ? src.substring(st) : src; }\n\n    ### Response:",
        "ground_truth": "Trim whitespaces from the left.",
        "predict": " update status db.\n\n    "
    },
    {
        "ID": 1091,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def get_object_metadata(obj, **kw): \"\"\"Get object metadata :param obj: Content object :returns: Dictionary of extracted object metadata \"\"\" # inject metadata of volatile data metadata = { \"actor\": get_user_id(), \"roles\": get_roles(), \"action\": \"\", \"review_state\": api.get_review_status(obj), \"active\": api.is_active(obj), \"snapshot_created\": DateTime().ISO(), \"modified\": api.get_modification_date(obj).ISO(), \"remote_address\": \"\", \"user_agent\": \"\", \"referer\": \"\", \"comments\": \"\", } # Update request data metadata.update(get_request_data()) # allow metadata overrides metadata.update(kw) return metadata\n\n    ### Response: Get object metadata\n\n    :param obj: Content object\n    :returns: Dictionary of extracted object metadata.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String trimRight(final String src) { int len = src.length(); int count = len; while ((len > 0) && (CharUtil.isWhitespace(src.charAt(len - 1)))) { len--; } return (len < count) ? src.substring(0, len) : src; }\n\n    ### Response:",
        "ground_truth": "Trim whitespaces from the right.",
        "predict": " Get object metadata\n\n    :param obj: Content object\n    :returns: Dictionary of extracted object metadata.\n\n    "
    },
    {
        "ID": 1092,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def resolve_dependency_graph(self, target): \"\"\" resolves the build order for interdependent build targets Assumes no cyclic dependencies \"\"\" targets = self.deep_dependendants(target) # print \"deep dependants:\", targets return sorted(targets, cmp=lambda a, b: 1 if b in self.deep_dependendants(a) else -1 if a in self.deep_dependendants(b) else 0)\n\n    ### Response: resolves the build order for interdependent build targets\n\n            Assumes no cyclic dependencies.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static int[] indexOfRegion(final String string, final String leftBoundary, final String rightBoundary, final int offset) { int ndx = offset; int[] res = new int[4]; ndx = string.indexOf(leftBoundary, ndx); if (ndx == -1) { return null; } res[0] = ndx; ndx += leftBoundary.length(); res[1] = ndx; ndx = string.indexOf(rightBoundary, ndx); if (ndx == -1) { return null; } res[2] = ndx; res[3] = ndx + rightBoundary.length(); return res; }\n\n    ### Response:",
        "ground_truth": "Returns indexes of the first region without escaping character.\n@see #indexOfRegion(String, String, String, char, int)",
        "predict": " resolves the build order for interdependent build targets\n\n            Assumes no cyclic dependencies.\n\n    "
    },
    {
        "ID": 1093,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function toSeconds() { var seconds = this.seconds + 60 * this.minutes + 3600 * this.hours + 86400 * this.days + 7 * 86400 * this.weeks; return (this.isNegative ? -seconds : seconds); }\n\n    ### Response: The duration value expressed as a number of seconds.\n\n@return {Number}             The duration value in seconds.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String join(final Collection collection, final char separator) { if (collection == null) { return null; } if (collection.size() == 0) { return StringPool.EMPTY; } final StringBuilder sb = new StringBuilder(collection.size() * 16); final Iterator it = collection.iterator(); for (int i = 0; i < collection.size(); i++) { if (i > 0) { sb.append(separator); } sb.append(it.next()); } return sb.toString(); }\n\n    ### Response:",
        "ground_truth": "Joins an collection of objects into one string with separator.",
        "predict": " The duration value expressed as a number of seconds.\n\n@return {Number}             The duration value in seconds.\n\n    "
    },
    {
        "ID": 1094,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static <T extends BasicMessage> T fromJSON(String json, Class<T> clazz) { try { Method buildObjectMapperForDeserializationMethod = findBuildObjectMapperForDeserializationMethod(clazz); final ObjectMapper mapper = (ObjectMapper) buildObjectMapperForDeserializationMethod.invoke(null); if (FailOnUnknownProperties.class.isAssignableFrom(clazz)) { mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true); } return mapper.readValue(json, clazz); } catch (Exception e) { throw new IllegalStateException(\"JSON message cannot be converted to object of type [\" + clazz + \"]\", e); } }\n\n    ### Response: Convenience static method that converts a JSON string to a particular message object.\n\n@param json the JSON string\n@param clazz the class whose instance is represented by the JSON string\n\n@return the message object that was represented by the JSON string.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String join(final Object[] array, final String separator) { if (array == null) { return null; } if (array.length == 0) { return StringPool.EMPTY; } if (array.length == 1) { return String.valueOf(array[0]); } final StringBuilder sb = new StringBuilder(array.length * 16); for (int i = 0; i < array.length; i++) { if (i > 0) { sb.append(separator); } sb.append(array[i]); } return sb.toString(); }\n\n    ### Response:",
        "ground_truth": "Joins an array of objects into one string with separator.",
        "predict": " Convenience static method that converts a JSON string to a particular message object.\n\n@param json the JSON string\n@param clazz the class whose instance is represented by the JSON string\n\n@return the message object that was represented by the JSON string.\n\n    "
    },
    {
        "ID": 1095,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def clear(self): \"\"\"Remove all sources from this configuration.\"\"\" super(LazyConfig, self).clear() self._lazy_suffix = [] self._lazy_prefix = []\n\n    ### Response: Remove all sources from this configuration..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String convertCharset(final String source, final String srcCharsetName, final String newCharsetName) { if (srcCharsetName.equals(newCharsetName)) { return source; } return StringUtil.newString(StringUtil.getBytes(source, srcCharsetName), newCharsetName); }\n\n    ### Response:",
        "ground_truth": "Converts string charset. If charset names are the same, the same string is returned.",
        "predict": " Remove all sources from this configuration..\n\n    "
    },
    {
        "ID": 1096,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public void visitInsn(int opcode) { if (opcode == ATHROW && !enabledListeners.isEmpty()) { String key = createKey(); ProbeImpl probe = getProbe(key); long probeId = probe.getIdentifier(); setProbeInProgress(true); visitInsn(DUP); // throwable throwable visitLdcInsn(Long.valueOf(probeId)); // throwable throwable long1 long2 visitInsn(DUP2_X1); // throwable long1 long2 throwable long1 long2 visitInsn(POP2); // throwable long1 long2 throwable if (isStatic()) { visitInsn(ACONST_NULL); // throwable long1 long2 throwable this } else { visitVarInsn(ALOAD, 0); // throwable long1 long2 throwable this } visitInsn(SWAP); // throwable long1 long2 this throwable visitInsn(ACONST_NULL); // throwable long1 long2 this throwable null visitInsn(SWAP); // throwable long1 long2 this null throwable visitFireProbeInvocation(); // throwable setProbeInProgress(false); setProbeListeners(probe, enabledListeners); } super.visitInsn(opcode); }\n\n    ### Response: Inject code to fire a probe before any throw instruction..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static boolean isCharAtEqual(final String string, final int index, final char charToCompare) { if ((index < 0) || (index >= string.length())) { return false; } return string.charAt(index) == charToCompare; }\n\n    ### Response:",
        "ground_truth": "Safely compares provided char with char on given location.",
        "predict": " Inject code to fire a probe before any throw instruction..\n\n    "
    },
    {
        "ID": 1097,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function toArray() { $r = [ 'from' => $this->from, 'where' => $this->where, 'order' => $this->order, 'limit' => $this->limit, 'offset' => $this->offset ]; return $r; }\n\n    ### Response: Return an array representation of this query.\n\n@return array Returns an array with keys representing the query parts..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String surround(String string, final String prefix, final String suffix) { if (!string.startsWith(prefix)) { string = prefix + string; } if (!string.endsWith(suffix)) { string += suffix; } return string; }\n\n    ### Response:",
        "ground_truth": "Surrounds the string with provided prefix and suffix if such missing from string.",
        "predict": " Return an array representation of this query.\n\n@return array Returns an array with keys representing the query parts..\n\n    "
    },
    {
        "ID": 1098,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void deploy(DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException { DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit(); if(!ProcessApplicationAttachments.isProcessApplication(deploymentUnit)) { return; } final Module module = deploymentUnit.getAttachment(MODULE); // read @ProcessApplication annotation of PA-component String[] deploymentDescriptors = getDeploymentDescriptors(deploymentUnit); // load all processes.xml files List<URL> deploymentDescriptorURLs = getDeploymentDescriptorUrls(module, deploymentDescriptors); for (URL processesXmlResource : deploymentDescriptorURLs) { VirtualFile processesXmlFile = getFile(processesXmlResource); // parse processes.xml metadata. ProcessesXml processesXml = null; if(isEmptyFile(processesXmlResource)) { processesXml = ProcessesXml.EMPTY_PROCESSES_XML; } else { processesXml = parseProcessesXml(processesXmlResource); } // add the parsed metadata to the attachment list ProcessApplicationAttachments.addProcessesXml(deploymentUnit, new ProcessesXmlWrapper(processesXml, processesXmlFile)); } }\n\n    ### Response: this can happen ASAP in the POST_MODULE Phase.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String prefix(String string, final String prefix) { if (!string.startsWith(prefix)) { string = prefix + string; } return string; }\n\n    ### Response:",
        "ground_truth": "Inserts prefix if doesn't exist.",
        "predict": " this can happen ASAP in the POST_MODULE Phase.\n\n    "
    },
    {
        "ID": 1099,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected static final int dataBucketOffset(final long pDataKey) { // INDIRECT_BUCKET_COUNT[3] is only taken to get the difference between 2^7 and the actual // datakey as offset. It has nothing to do with the levels. final long dataBucketOffset = (pDataKey - ((pDataKey >> IConstants.INDIRECT_BUCKET_COUNT[3]) << IConstants.INDIRECT_BUCKET_COUNT[3])); return (int)dataBucketOffset; }\n\n    ### Response: Calculate data bucket offset for a given data key.\n\n@param pDataKey\ndata key to find offset for.\n@return Offset into data bucket..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String suffix(String string, final String suffix) { if (!string.endsWith(suffix)) { string += suffix; } return string; }\n\n    ### Response:",
        "ground_truth": "Appends suffix if doesn't exist.",
        "predict": " Calculate data bucket offset for a given data key.\n\n@param pDataKey\ndata key to find offset for.\n@return Offset into data bucket..\n\n    "
    },
    {
        "ID": 1100,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void assertIsSatisfied() { if (firstError != null) { throw firstError; } else if (!dispatcher.isSatisfied()) { throw expectationErrorTranslator.translate( ExpectationError.notAllSatisfied(this)); } }\n\n    ### Response: Fails the test if there are any expectations that have not been met..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String cutToIndexOf(String string, final String substring) { int i = string.indexOf(substring); if (i != -1) { string = string.substring(0, i); } return string; }\n\n    ### Response:",
        "ground_truth": "Cuts the string from beginning to the first index of provided substring.",
        "predict": " Fails the test if there are any expectations that have not been met..\n\n    "
    },
    {
        "ID": 1101,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override protected URL findResource(String name) { try { return Whitebox.invokeMethod(deferTo, \"findResource\", name); } catch (Exception e) { throw new RuntimeException(e); } }\n\n    ### Response: Finds the resource with the specified name on the search path.\n\n@param name the name of the resource\n@return a {@code URL} for the resource, or {@code null} if the\nresource could not be found..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String cutFromIndexOf(String string, final String substring) { int i = string.indexOf(substring); if (i != -1) { string = string.substring(i); } return string; }\n\n    ### Response:",
        "ground_truth": "Cuts the string from the first index of provided substring to the end.",
        "predict": " Finds the resource with the specified name on the search path.\n\n@param name the name of the resource\n@return a {@code URL} for the resource, or {@code null} if the\nresource could not be found..\n\n    "
    },
    {
        "ID": 1102,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function asyncForEach(promise, iterator, scope, limit) { return asyncArray(asyncLoop(promise, iterator, scope, limit).chain(function (results) { return results.arr; })); }\n\n    ### Response: Loops through the results of an promise. The promise can return an array or just a single item.\n\n```\nfunction asyncArr(){\nvar ret = new comb.Promise();\nprocess.nextTick(ret.callback.bind(ret, [1,2,3,4,5]);\nreturn ret.promise;\n}\n\ncomb.async.forEach(asyncArr(), function(){\n//do something with it\n}).then(function(arr){\nconsole.log(arr); //[1,2,3,4,5];\n});\n\n```\n\nYou may also return a promise from the iterator block.\n\n```\nvar myNewArr = [];\n\ncomb.async.forEach(asyncArr(), function(item, index){\nvar ret = new comb.Promise();\nprocess.nextTick(function(){\nmyNewArr.push([item, index]);\nret.callback();\n});\nreturn ret.promise();\n}).then(function(){\nconsole.log(myNewArr) //[[1,0], [2,1], [3,2], [4,3], [5,4]]\n});\n```\n\n\n@param {comb.Promise|Array} promise the promise or array to loop through\n@param {Function} iterator a function to invoke for each item\n@param [scope] optional scope to execute the function in.\n@return {comb.Promise} a promise that is resolved with the original array.\n@static\n@memberof comb.async\n@name forEach.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String cutPrefix(String string, final String prefix) { if (string.startsWith(prefix)) { string = string.substring(prefix.length()); } return string; }\n\n    ### Response:",
        "ground_truth": "Cuts prefix if exists.",
        "predict": " Loops through the results of an promise. The promise can return an array or just a single item.\n\n```\nfunction asyncArr(){\nvar ret = new comb.Promise();\nprocess.nextTick(ret.callback.bind(ret, [1,2,3,4,5]);\nreturn ret.promise;\n}\n\ncomb.async.forEach(asyncArr(), function(){\n//do something with it\n}).then(function(arr){\nconsole.log(arr); //[1,2,3,4,5];\n});\n\n```\n\nYou may also return a promise from the iterator block.\n\n```\nvar myNewArr = [];\n\ncomb.async.forEach(asyncArr(), function(item, index){\nvar ret = new comb.Promise();\nprocess.nextTick(function(){\nmyNewArr.push([item, index]);\nret.callback();\n});\nreturn ret.promise();\n}).then(function(){\nconsole.log(myNewArr) //[[1,0], [2,1], [3,2], [4,3], [5,4]]\n});\n```\n\n\n@param {comb.Promise|Array} promise the promise or array to loop through\n@param {Function} iterator a function to invoke for each item\n@param [scope] optional scope to execute the function in.\n@return {comb.Promise} a promise that is resolved with the original array.\n@static\n@memberof comb.async\n@name forEach.\n\n    "
    },
    {
        "ID": 1103,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void refreshCredentials() { if (this.credsProvider == null) return; try { AlibabaCloudCredentials creds = this.credsProvider.getCredentials(); this.accessKeyID = creds.getAccessKeyId(); this.accessKeySecret = creds.getAccessKeySecret(); if (creds instanceof BasicSessionCredentials) { this.securityToken = ((BasicSessionCredentials) creds).getSessionToken(); } } catch (Exception e) { e.printStackTrace(); } }\n\n    ### Response: refresh credentials if CredentialProvider set.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String cutSuffix(String string, final String suffix) { if (string.endsWith(suffix)) { string = string.substring(0, string.length() - suffix.length()); } return string; }\n\n    ### Response:",
        "ground_truth": "Cuts sufix if exists.",
        "predict": " refresh credentials if CredentialProvider set.\n\n    "
    },
    {
        "ID": 1104,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def load_bmp(path): \"\"\"Load a surface from a file. Args: path (str): Path to the BMP file to load. Returns: Surface: A surface containing the pixels loaded from the file. Raises: SDLError: If the file cannot be loaded. \"\"\" surface = object.__new__(Surface) surface._ptr = check_ptr_err(lib.SDL_LoadBMP_RW(lib.SDL_RWFromFile(path, \"rb\"), 1)) return surface\n\n    ### Response: Load a surface from a file.\n\n        Args:\n            path (str): Path to the BMP file to load.\n\n        Returns:\n            Surface: A surface containing the pixels loaded from the file.\n\n        Raises:\n            SDLError: If the file cannot be loaded..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String cutSurrounding(final String string, final String prefix, final String suffix) { int start = 0; int end = string.length(); if (string.startsWith(prefix)) { start = prefix.length(); } if (string.endsWith(suffix)) { end -= suffix.length(); } if (end <= start) { return StringPool.EMPTY; } return string.substring(start, end); }\n\n    ### Response:",
        "ground_truth": "Removes surrounding prefix and suffixes.",
        "predict": " Load a surface from a file.\n\n        Args:\n            path (str): Path to the BMP file to load.\n\n        Returns:\n            Surface: A surface containing the pixels loaded from the file.\n\n        Raises:\n            SDLError: If the file cannot be loaded..\n\n    "
    },
    {
        "ID": 1105,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function translateExists() { $translator = new static; // translate the subselect list($subQuery, $subQueryParameters) = $translator->translate($this->attr('select')); // merge the parameters foreach($subQueryParameters as $parameter) { $this->addParameter($parameter); } return 'select exists(' . $subQuery .') as `exists`'; }\n\n    ### Response: Translate the exists querry\n\n@return string.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String insert(final String src, final String insert, int offset) { if (offset < 0) { offset = 0; } if (offset > src.length()) { offset = src.length(); } StringBuilder sb = new StringBuilder(src); sb.insert(offset, insert); return sb.toString(); }\n\n    ### Response:",
        "ground_truth": "Inserts a string on provided offset.",
        "predict": " Translate the exists querry\n\n@return string.\n\n    "
    },
    {
        "ID": 1106,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def commit( self, project_id, mode, mutations, transaction=None, retry=google.api_core.gapic_v1.method.DEFAULT, timeout=google.api_core.gapic_v1.method.DEFAULT, metadata=None, ): \"\"\" Commits a transaction, optionally creating, deleting or modifying some entities. Example: >>> from google.cloud import datastore_v1 >>> from google.cloud.datastore_v1 import enums >>> >>> client = datastore_v1.DatastoreClient() >>> >>> # TODO: Initialize `project_id`: >>> project_id = '' >>> >>> # TODO: Initialize `mode`: >>> mode = enums.CommitRequest.Mode.MODE_UNSPECIFIED >>> >>> # TODO: Initialize `mutations`: >>> mutations = [] >>> >>> response = client.commit(project_id, mode, mutations) Args: project_id (str): The ID of the project against which to make the request. mode (~google.cloud.datastore_v1.types.Mode): The type of commit to perform. Defaults to ``TRANSACTIONAL``. mutations (list[Union[dict, ~google.cloud.datastore_v1.types.Mutation]]): The mutations to perform. When mode is ``TRANSACTIONAL``, mutations affecting a single entity are applied in order. The following sequences of mutations affecting a single entity are not permitted in a single ``Commit`` request: - ``insert`` followed by ``insert`` - ``update`` followed by ``insert`` - ``upsert`` followed by ``insert`` - ``delete`` followed by ``update`` When mode is ``NON_TRANSACTIONAL``, no two mutations may affect a single entity. If a dict is provided, it must be of the same form as the protobuf message :class:`~google.cloud.datastore_v1.types.Mutation` transaction (bytes): The identifier of the transaction associated with the commit. A transaction identifier is returned by a call to ``Datastore.BeginTransaction``. retry (Optional[google.api_core.retry.Retry]): A retry object used to retry requests. If ``None`` is specified, requests will not be retried. timeout (Optional[float]): The amount of time, in seconds, to wait for the request to complete. Note that if ``retry`` is specified, the timeout applies to each individual attempt. metadata (Optional[Sequence[Tuple[str, str]]]): Additional metadata that is provided to the method. Returns: A :class:`~google.cloud.datastore_v1.types.CommitResponse` instance. Raises: google.api_core.exceptions.GoogleAPICallError: If the request failed for any reason. google.api_core.exceptions.RetryError: If the request failed due to a retryable error and retry attempts failed. ValueError: If the parameters are invalid. \"\"\" # Wrap the transport method to add retry and timeout logic. if \"commit\" not in self._inner_api_calls: self._inner_api_calls[ \"commit\" ] = google.api_core.gapic_v1.method.wrap_method( self.transport.commit, default_retry=self._method_configs[\"Commit\"].retry, default_timeout=self._method_configs[\"Commit\"].timeout, client_info=self._client_info, ) # Sanity check: We have some fields which are mutually exclusive; # raise ValueError if more than one is sent. google.api_core.protobuf_helpers.check_oneof(transaction=transaction) request = datastore_pb2.CommitRequest( project_id=project_id, mode=mode, mutations=mutations, transaction=transaction, ) if metadata is None: metadata = [] metadata = list(metadata) try: routing_header = [(\"project_id\", project_id)] except AttributeError: pass else: routing_metadata = google.api_core.gapic_v1.routing_header.to_grpc_metadata( routing_header ) metadata.append(routing_metadata) return self._inner_api_calls[\"commit\"]( request, retry=retry, timeout=timeout, metadata=metadata )\n\n    ### Response: Commits a transaction, optionally creating, deleting or modifying some\n        entities.\n\n        Example:\n            >>> from google.cloud import datastore_v1\n            >>> from google.cloud.datastore_v1 import enums\n            >>>\n            >>> client = datastore_v1.DatastoreClient()\n            >>>\n            >>> # TODO: Initialize `project_id`:\n            >>> project_id = ''\n            >>>\n            >>> # TODO: Initialize `mode`:\n            >>> mode = enums.CommitRequest.Mode.MODE_UNSPECIFIED\n            >>>\n            >>> # TODO: Initialize `mutations`:\n            >>> mutations = []\n            >>>\n            >>> response = client.commit(project_id, mode, mutations)\n\n        Args:\n            project_id (str): The ID of the project against which to make the request.\n            mode (~google.cloud.datastore_v1.types.Mode): The type of commit to perform. Defaults to ``TRANSACTIONAL``.\n            mutations (list[Union[dict, ~google.cloud.datastore_v1.types.Mutation]]): The mutations to perform.\n\n                When mode is ``TRANSACTIONAL``, mutations affecting a single entity are\n                applied in order. The following sequences of mutations affecting a\n                single entity are not permitted in a single ``Commit`` request:\n\n                -  ``insert`` followed by ``insert``\n                -  ``update`` followed by ``insert``\n                -  ``upsert`` followed by ``insert``\n                -  ``delete`` followed by ``update``\n\n                When mode is ``NON_TRANSACTIONAL``, no two mutations may affect a single\n                entity.\n\n                If a dict is provided, it must be of the same form as the protobuf\n                message :class:`~google.cloud.datastore_v1.types.Mutation`\n            transaction (bytes): The identifier of the transaction associated with the commit. A\n                transaction identifier is returned by a call to\n                ``Datastore.BeginTransaction``.\n            retry (Optional[google.api_core.retry.Retry]):  A retry object used\n                to retry requests. If ``None`` is specified, requests will not\n                be retried.\n            timeout (Optional[float]): The amount of time, in seconds, to wait\n                for the request to complete. Note that if ``retry`` is\n                specified, the timeout applies to each individual attempt.\n            metadata (Optional[Sequence[Tuple[str, str]]]): Additional metadata\n                that is provided to the method.\n\n        Returns:\n            A :class:`~google.cloud.datastore_v1.types.CommitResponse` instance.\n\n        Raises:\n            google.api_core.exceptions.GoogleAPICallError: If the request\n                    failed for any reason.\n            google.api_core.exceptions.RetryError: If the request failed due\n                    to a retryable error and retry attempts failed.\n            ValueError: If the parameters are invalid..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String repeat(final String source, int count) { StringBand result = new StringBand(count); while (count > 0) { result.append(source); count--; } return result.toString(); }\n\n    ### Response:",
        "ground_truth": "Creates a new string that contains the provided string a number of times.",
        "predict": " Commits a transaction, optionally creating, deleting or modifying some\n        entities.\n\n        Example:\n            >>> from google.cloud import datastore_v1\n            >>> from google.cloud.datastore_v1 import enums\n            >>>\n            >>> client = datastore_v1.DatastoreClient()\n            >>>\n            >>> # TODO: Initialize `project_id`:\n            >>> project_id = ''\n            >>>\n            >>> # TODO: Initialize `mode`:\n            >>> mode = enums.CommitRequest.Mode.MODE_UNSPECIFIED\n            >>>\n            >>> # TODO: Initialize `mutations`:\n            >>> mutations = []\n            >>>\n            >>> response = client.commit(project_id, mode, mutations)\n\n        Args:\n            project_id (str): The ID of the project against which to make the request.\n            mode (~google.cloud.datastore_v1.types.Mode): The type of commit to perform. Defaults to ``TRANSACTIONAL``.\n            mutations (list[Union[dict, ~google.cloud.datastore_v1.types.Mutation]]): The mutations to perform.\n\n                When mode is ``TRANSACTIONAL``, mutations affecting a single entity are\n                applied in order. The following sequences of mutations affecting a\n                single entity are not permitted in a single ``Commit`` request:\n\n                -  ``insert`` followed by ``insert``\n                -  ``update`` followed by ``insert``\n                -  ``upsert`` followed by ``insert``\n                -  ``delete`` followed by ``update``\n\n                When mode is ``NON_TRANSACTIONAL``, no two mutations may affect a single\n                entity.\n\n                If a dict is provided, it must be of the same form as the protobuf\n                message :class:`~google.cloud.datastore_v1.types.Mutation`\n            transaction (bytes): The identifier of the transaction associated with the commit. A\n                transaction identifier is returned by a call to\n                ``Datastore.BeginTransaction``.\n            retry (Optional[google.api_core.retry.Retry]):  A retry object used\n                to retry requests. If ``None`` is specified, requests will not\n                be retried.\n            timeout (Optional[float]): The amount of time, in seconds, to wait\n                for the request to complete. Note that if ``retry`` is\n                specified, the timeout applies to each individual attempt.\n            metadata (Optional[Sequence[Tuple[str, str]]]): Additional metadata\n                that is provided to the method.\n\n        Returns:\n            A :class:`~google.cloud.datastore_v1.types.CommitResponse` instance.\n\n        Raises:\n            google.api_core.exceptions.GoogleAPICallError: If the request\n                    failed for any reason.\n            google.api_core.exceptions.RetryError: If the request failed due\n                    to a retryable error and retry attempts failed.\n            ValueError: If the parameters are invalid..\n\n    "
    },
    {
        "ID": 1107,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (c *consulClient) Close() { if c.controllers != nil { c.controllers.RemoveAll() } if c.lease != \"\" { c.Session().Destroy(c.lease, nil) } }\n\n    ### Response: // Close closes the consul session.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String reverse(final String s) { StringBuilder result = new StringBuilder(s.length()); for (int i = s.length() -1; i >= 0; i--) { result.append(s.charAt(i)); } return result.toString(); }\n\n    ### Response:",
        "ground_truth": "Reverse a string.",
        "predict": " // Close closes the consul session.\n\n    "
    },
    {
        "ID": 1108,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def validate_headers(self): \"\"\"Validate headers fields from schema \"\"\" pc = getToolByName(self, 'portal_catalog') pu = getToolByName(self, \"plone_utils\") client = self.aq_parent # Verify Client Name if self.getClientName() != client.Title(): self.error(\"%s: value is invalid (%s).\" % ( 'Client name', self.getClientName())) # Verify Client ID if self.getClientID() != client.getClientID(): self.error(\"%s: value is invalid (%s).\" % ( 'Client ID', self.getClientID())) existing_arimports = pc(portal_type='ARImport', review_state=['valid', 'imported']) # Verify Client Order Number for arimport in existing_arimports: if arimport.UID == self.UID() \\ or not arimport.getClientOrderNumber(): continue arimport = arimport.getObject() if arimport.getClientOrderNumber() == self.getClientOrderNumber(): self.error('%s: already used by existing ARImport.' % 'ClientOrderNumber') break # Verify Client Reference for arimport in existing_arimports: if arimport.UID == self.UID() \\ or not arimport.getClientReference(): continue arimport = arimport.getObject() if arimport.getClientReference() == self.getClientReference(): self.error('%s: already used by existing ARImport.' % 'ClientReference') break # getCCContacts has no value if object is not complete (eg during test) if self.getCCContacts(): cc_contacts = self.getCCContacts()[0] contacts = [x for x in client.objectValues('Contact')] contact_names = [c.Title() for c in contacts] # validate Contact existence in this Client for k in ['CCNamesReport', 'CCNamesInvoice']: for val in cc_contacts[k]: if val and val not in contact_names: self.error('%s: value is invalid (%s)' % (k, val)) else: cc_contacts = {'CCNamesReport': [], 'CCEmailsReport': [], 'CCNamesInvoice': [], 'CCEmailsInvoice': [] } # validate Contact existence in this Client for k in ['CCEmailsReport', 'CCEmailsInvoice']: for val in cc_contacts.get(k, []): if val and not pu.validateSingleNormalizedEmailAddress(val): self.error('%s: value is invalid (%s)' % (k, val))\n\n    ### Response: Validate headers fields from schema.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String maxCommonPrefix(final String one, final String two) { final int minLength = Math.min(one.length(), two.length()); final StringBuilder sb = new StringBuilder(minLength); for (int pos = 0; pos < minLength; pos++) { final char currentChar = one.charAt(pos); if (currentChar != two.charAt(pos)) { break; } sb.append(currentChar); } return sb.toString(); }\n\n    ### Response:",
        "ground_truth": "Returns max common prefix of two strings.",
        "predict": " Validate headers fields from schema.\n\n    "
    },
    {
        "ID": 1109,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void setHeader(HasJqmHeader header) { removeHeader(); this.header = header; if (this.header == null) return; addLogical(header.getHeaderStage()); if (panel == null) { getElement().insertBefore(header.getJqmHeader().getElement(), getElement().getFirstChild()); } else { getElement().insertAfter(header.getJqmHeader().getElement(), panel.getElement()); } }\n\n    ### Response: Sets the header element, overriding an existing header if any..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String findCommonPrefix(final String... strings) { StringBuilder prefix = new StringBuilder(); int index = 0; char c = 0; loop: while (true) { for (int i = 0; i < strings.length; i++) { String s = strings[i]; if (index == s.length()) { break loop; } if (i == 0) { c = s.charAt(index); } else { if (s.charAt(index) != c) { break loop; } } } index++; prefix.append(c); } return prefix.length() == 0 ? StringPool.EMPTY : prefix.toString(); }\n\n    ### Response:",
        "ground_truth": "Finds common prefix for several strings. Returns an empty string if\narguments do not have a common prefix.",
        "predict": " Sets the header element, overriding an existing header if any..\n\n    "
    },
    {
        "ID": 1110,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func genAll() ([]string, error) { zipSource() for _, platform := range []string{\"linux\", \"darwin\", \"windows\"} { genBinaries(platform) packBinaries(platform) } getVersions() return []string{ \"perkeep-darwin.tar.gz\", \"perkeep-linux.tar.gz\", \"perkeep-src.zip\", \"perkeep-windows.zip\", }, nil }\n\n    ### Response: // genAll creates all the zips and tarballs, and returns their filenames..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String shorten(String s, int length, final String suffix) { length -= suffix.length(); if (s.length() > length) { for (int j = length; j >= 0; j--) { if (CharUtil.isWhitespace(s.charAt(j))) { length = j; break; } } String temp = s.substring(0, length); s = temp.concat(suffix); } return s; }\n\n    ### Response:",
        "ground_truth": "Shorten string to given length.",
        "predict": " // genAll creates all the zips and tarballs, and returns their filenames..\n\n    "
    },
    {
        "ID": 1111,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (in *GroupVersionKind) DeepCopy() *GroupVersionKind { if in == nil { return nil } out := new(GroupVersionKind) in.DeepCopyInto(out) return out }\n\n    ### Response: // DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GroupVersionKind..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String toUpperCase(final String s, Locale locale) { if (s == null) { return null; } StringBuilder sb = null; for (int i = 0; i < s.length(); i++) { char c = s.charAt(i); if (c > 127) { // found non-ascii char, fallback to the slow unicode detection if (locale == null) { locale = Locale.getDefault(); } return s.toUpperCase(locale); } if ((c >= 'a') && (c <= 'z')) { if (sb == null) { sb = new StringBuilder(s); } sb.setCharAt(i, (char)(c - 32)); } } if (sb == null) { return s; } return sb.toString(); }\n\n    ### Response:",
        "ground_truth": "Converts all of the characters in the string to upper case, based on the\nlocale.\n\n@param  s the string to convert\n@param  locale apply this locale's rules\n@return the string, converted to upper case, or null if the\nstring is null",
        "predict": " // DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GroupVersionKind..\n\n    "
    },
    {
        "ID": 1112,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function removeChild($childNode) { if ($childNode instanceof Element) { $childNode = $childNode->getNode(); } if (!$childNode instanceof DOMNode) { throw new InvalidArgumentException(sprintf('Argument 1 passed to %s must be an instance of %s or DOMNode, %s given', __METHOD__, __CLASS__, (is_object($childNode) ? get_class($childNode) : gettype($childNode)))); } $removedNode = $this->node->removeChild($childNode); return new Element($removedNode); }\n\n    ### Response: Removes child from list of children.\n\n@param \\DOMNode|\\DiDom\\Element $childNode\n\n@return \\DiDom\\Element the node that has been removed.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String removeQuotes(final String string) { if ( (startsWithChar(string, '\\'') && endsWithChar(string, '\\'')) || (startsWithChar(string, '\"') && endsWithChar(string, '\"')) || (startsWithChar(string, '`') && endsWithChar(string, '`')) ) { return substring(string, 1, -1); } return string; }\n\n    ### Response:",
        "ground_truth": "Removes starting and ending single or double quotes.",
        "predict": " Removes child from list of children.\n\n@param \\DOMNode|\\DiDom\\Element $childNode\n\n@return \\DiDom\\Element the node that has been removed.\n\n    "
    },
    {
        "ID": 1113,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (m *MockAgent) Metadata() *Metadata { ret := m.ctrl.Call(m, \"Metadata\") ret0, _ := ret[0].(*Metadata) return ret0 }\n\n    ### Response: // Metadata mocks base method.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String toHexString(final byte[] bytes) { char[] chars = new char[bytes.length * 2]; int i = 0; for (byte b : bytes) { chars[i++] = CharUtil.int2hex((b & 0xF0) >> 4); chars[i++] = CharUtil.int2hex(b & 0x0F); } return new String(chars); }\n\n    ### Response:",
        "ground_truth": "Converts bytes to hex string.",
        "predict": " // Metadata mocks base method.\n\n    "
    },
    {
        "ID": 1114,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private String format(final String original) { final String[] parts = original.split(\"\\\\\" + mDecimalSeparator, -1); String number = parts[0] // since we split with limit -1 there will always be at least 1 part .replaceAll(mNumberFilterRegex, \"\") .replaceFirst(LEADING_ZERO_FILTER_REGEX, \"\"); // only add grouping separators for non custom decimal separator if (!hasCustomDecimalSeparator) { // add grouping separators, need to reverse back and forth since Java regex does not support // right to left matching number = StringUtils.reverse( StringUtils.reverse(number).replaceAll(\"(.{3})\", \"$1\" + GROUPING_SEPARATOR)); // remove leading grouping separator if any number = StringUtils.removeStart(number, String.valueOf(GROUPING_SEPARATOR)); } // add fraction part if any if (parts.length > 1) { if (parts[1].length() > 2) { number += mDecimalSeparator + parts[1].substring(parts[1].length() - 2, parts[1].length()); } else { number += mDecimalSeparator + parts[1]; } } return number; }\n\n    ### Response: Add grouping separators to string\n\n@param original original string, may already contains incorrect grouping separators\n@return string with correct grouping separators.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static byte[] getBytes(final String string) { try { return string.getBytes(JoddCore.encoding); } catch (UnsupportedEncodingException e) { throw new RuntimeException(e); } }\n\n    ### Response:",
        "ground_truth": "Returns String bytes using Jodds default encoding.",
        "predict": " Add grouping separators to string\n\n@param original original string, may already contains incorrect grouping separators\n@return string with correct grouping separators.\n\n    "
    },
    {
        "ID": 1115,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static function uppercase($str): string { if (!$str || !\\is_string($str)) { return \\is_int($str) ? $str : ''; } if (\\function_exists('mb_strtoupper')) { return \\mb_strtoupper($str, 'utf-8'); } return \\strtoupper($str); }\n\n    ### Response: string to uppercase\n@param string|int $str\n@return string.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static char detectQuoteChar(final String str) { if (str.length() < 2) { return 0; } final char c = str.charAt(0); if (c != str.charAt(str.length() - 1)) { return 0; } if (c == '\\'' || c == '\"' || c == '`') { return c; } return 0; }\n\n    ### Response:",
        "ground_truth": "Detects quote character or return 0.",
        "predict": " string to uppercase\n@param string|int $str\n@return string.\n\n    "
    },
    {
        "ID": 1116,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def add(self, method_name, completeness=False, **fields): \"\"\" Class decorator. Decorate `method_name` by adding a call to `set_defaults` and `check_config`. Then, save into the registry a callable function with the same signature of the original method. :param str method_name: the method to decorate :param bool completeness: True if the method accepts in input an optional parameter for the completeness table :param fields: a dictionary of field spec corresponding to the keys expected to be present in the config dictionary for the decorated method, e.g. time_bin=numpy.float, b_value=1E-6 \"\"\" def class_decorator(class_obj): original_method = getattr(class_obj, method_name) if sys.version[0] == '2': # Python 2 original_method = original_method.im_func def caller(fn, obj, catalogue, config=None, *args, **kwargs): config = config or {} self.set_defaults(config, fields) self.check_config(config, fields) return fn(obj, catalogue, config, *args, **kwargs) new_method = decorator(caller, original_method) setattr(class_obj, method_name, new_method) instance = class_obj() func = functools.partial(new_method, instance) func.fields = fields func.model = instance func.completeness = completeness functools.update_wrapper(func, new_method) self[class_obj.__name__] = func return class_obj return class_decorator\n\n    ### Response: Class decorator.\n\n        Decorate `method_name` by adding a call to `set_defaults` and\n        `check_config`. Then, save into the registry a callable\n        function with the same signature of the original method.\n\n        :param str method_name:\n            the method to decorate\n        :param bool completeness:\n            True if the method accepts in input an optional parameter\n            for the completeness table\n        :param fields:\n            a dictionary of field spec corresponding to the\n            keys expected to be present in the config dictionary\n            for the decorated method, e.g.\n            time_bin=numpy.float,\n            b_value=1E-6.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void visit(final String name, final Object value) { if (av != null) { av.visit(name, value); } }\n\n    ### Response:",
        "ground_truth": "Visits a primitive value of the annotation.\n\n@param name the value name.\n@param value the actual value, whose type must be {@link Byte}, {@link Boolean}, {@link\nCharacter}, {@link Short}, {@link Integer} , {@link Long}, {@link Float}, {@link Double},\n{@link String} or {@link Type} of {@link Type#OBJECT} or {@link Type#ARRAY} sort. This\nvalue can also be an array of byte, boolean, short, char, int, long, float or double values\n(this is equivalent to using {@link #visitArray} and visiting each array element in turn,\nbut is more convenient).",
        "predict": " Class decorator.\n\n        Decorate `method_name` by adding a call to `set_defaults` and\n        `check_config`. Then, save into the registry a callable\n        function with the same signature of the original method.\n\n        :param str method_name:\n            the method to decorate\n        :param bool completeness:\n            True if the method accepts in input an optional parameter\n            for the completeness table\n        :param fields:\n            a dictionary of field spec corresponding to the\n            keys expected to be present in the config dictionary\n            for the decorated method, e.g.\n            time_bin=numpy.float,\n            b_value=1E-6.\n\n    "
    },
    {
        "ID": 1117,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static function drop($typeName, $cascade = false) { $db = static::getDb(); return $db->createCommand( 'DROP TYPE IF EXISTS ' . $db->quoteColumnName($typeName) . ($cascade ? ' CASCADE' : '') )->execute(); }\n\n    ### Response: Drop an enum type\n\n@param string $typeName name of the enum type\n@param bool $cascade if true, automatically drop objects that depend on the type (such as table columns, functions, operators).\n@return int number of rows affected by the execution..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void visitEnum(final String name, final String descriptor, final String value) { if (av != null) { av.visitEnum(name, descriptor, value); } }\n\n    ### Response:",
        "ground_truth": "Visits an enumeration value of the annotation.\n\n@param name the value name.\n@param descriptor the class descriptor of the enumeration class.\n@param value the actual enumeration value.",
        "predict": " Drop an enum type\n\n@param string $typeName name of the enum type\n@param bool $cascade if true, automatically drop objects that depend on the type (such as table columns, functions, operators).\n@return int number of rows affected by the execution..\n\n    "
    },
    {
        "ID": 1118,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def get_user_by_username(name) resp = request('getUserByUsername', username: name)['user'] resp['user_id'].nil? ? nil : User.new(self, resp) end\n\n    ### Response: Find user by username.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public AnnotationVisitor visitAnnotation(final String name, final String descriptor) { if (av != null) { return av.visitAnnotation(name, descriptor); } return null; }\n\n    ### Response:",
        "ground_truth": "Visits a nested annotation value of the annotation.\n\n@param name the value name.\n@param descriptor the class descriptor of the nested annotation class.\n@return a visitor to visit the actual nested annotation value, or {@literal null} if this\nvisitor is not interested in visiting this nested annotation. The nested annotation\nvalue must be fully visited before calling other methods on this annotation visitor.",
        "predict": " Find user by username.\n\n    "
    },
    {
        "ID": 1119,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function (x, y, points) { this.pos.set(x, y); if (!Array.isArray(points)) { return this; } // convert given points to me.Vector2d if required if (!(points[0] instanceof me.Vector2d)) { var _points = this.points = []; points.forEach(function (point) { _points.push(new me.Vector2d(point.x, point.y)); }); } else { // array of me.Vector2d this.points = points; } this.recalc(); this.updateBounds(); return this; }\n\n    ### Response: set new value to the Polygon\n@name setShape\n@memberOf me.Polygon.prototype\n@function\n@param {Number} x position of the Polygon\n@param {Number} y position of the Polygon\n@param {me.Vector2d[]} points array of vector defining the Polygon.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public <E> DbEntityDescriptor<E> registerType(final Class<E> type) { DbEntityDescriptor<E> ded = createDbEntityDescriptor(type); DbEntityDescriptor<E> existing = descriptorsMap.put(type, ded); if (log.isDebugEnabled()) { log.debug(\"Register \" + type.getName() + \" as \" + ded.getTableName()); } if (existing != null) { if (ded.getType() == type) { return ded; } throw new DbOomException(\"Type already registered: \" + existing.getType()); } existing = entityNamesMap.put(ded.getEntityName(), ded); if (existing != null) { throw new DbOomException(\"Name '\" + ded.getEntityName() + \"' already mapped to an entity: \" + existing.getType()); } return ded; }\n\n    ### Response:",
        "ground_truth": "Registers just type and entity names. Enough for most usages.",
        "predict": " set new value to the Polygon\n@name setShape\n@memberOf me.Polygon.prototype\n@function\n@param {Number} x position of the Polygon\n@param {Number} y position of the Polygon\n@param {me.Vector2d[]} points array of vector defining the Polygon.\n\n    "
    },
    {
        "ID": 1120,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def coerce(cls, version_string, partial=False): \"\"\"Coerce an arbitrary version string into a semver-compatible one. The rule is: - If not enough components, fill minor/patch with zeroes; unless partial=True - If more than 3 dot-separated components, extra components are \"build\" data. If some \"build\" data already appeared, append it to the extra components Examples: >>> Version.coerce('0.1') Version(0, 1, 0) >>> Version.coerce('0.1.2.3') Version(0, 1, 2, (), ('3',)) >>> Version.coerce('0.1.2.3+4') Version(0, 1, 2, (), ('3', '4')) >>> Version.coerce('0.1+2-3+4_5') Version(0, 1, 0, (), ('2-3', '4-5')) \"\"\" base_re = re.compile(r'^\\d+(?:\\.\\d+(?:\\.\\d+)?)?') match = base_re.match(version_string) if not match: raise ValueError( \"Version string lacks a numerical component: %r\" % version_string ) version = version_string[:match.end()] if not partial: # We need a not-partial version. while version.count('.') < 2: version += '.0' if match.end() == len(version_string): return Version(version, partial=partial) rest = version_string[match.end():] # Cleanup the 'rest' rest = re.sub(r'[^a-zA-Z0-9+.-]', '-', rest) if rest[0] == '+': # A 'build' component prerelease = '' build = rest[1:] elif rest[0] == '.': # An extra version component, probably 'build' prerelease = '' build = rest[1:] elif rest[0] == '-': rest = rest[1:] if '+' in rest: prerelease, build = rest.split('+', 1) else: prerelease, build = rest, '' elif '+' in rest: prerelease, build = rest.split('+', 1) else: prerelease, build = rest, '' build = build.replace('+', '.') if prerelease: version = '%s-%s' % (version, prerelease) if build: version = '%s+%s' % (version, build) return cls(version, partial=partial)\n\n    ### Response: Coerce an arbitrary version string into a semver-compatible one.\n\n        The rule is:\n        - If not enough components, fill minor/patch with zeroes; unless\n          partial=True\n        - If more than 3 dot-separated components, extra components are \"build\"\n          data. If some \"build\" data already appeared, append it to the\n          extra components\n\n        Examples:\n            >>> Version.coerce('0.1')\n            Version(0, 1, 0)\n            >>> Version.coerce('0.1.2.3')\n            Version(0, 1, 2, (), ('3',))\n            >>> Version.coerce('0.1.2.3+4')\n            Version(0, 1, 2, (), ('3', '4'))\n            >>> Version.coerce('0.1+2-3+4_5')\n            Version(0, 1, 0, (), ('2-3', '4-5')).\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public <E> DbEntityDescriptor<E> registerEntity(final Class<E> type, final boolean force) { if (force) { removeEntity(type); } return registerEntity(type); }\n\n    ### Response:",
        "ground_truth": "Registers entity. Existing entity will be removed if exist, so no exception will be thrown.",
        "predict": " Coerce an arbitrary version string into a semver-compatible one.\n\n        The rule is:\n        - If not enough components, fill minor/patch with zeroes; unless\n          partial=True\n        - If more than 3 dot-separated components, extra components are \"build\"\n          data. If some \"build\" data already appeared, append it to the\n          extra components\n\n        Examples:\n            >>> Version.coerce('0.1')\n            Version(0, 1, 0)\n            >>> Version.coerce('0.1.2.3')\n            Version(0, 1, 2, (), ('3',))\n            >>> Version.coerce('0.1.2.3+4')\n            Version(0, 1, 2, (), ('3', '4'))\n            >>> Version.coerce('0.1+2-3+4_5')\n            Version(0, 1, 0, (), ('2-3', '4-5')).\n\n    "
    },
    {
        "ID": 1121,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function editor($config) { $config = new AnConfig($config); $config->append(array( 'name' => 'description', 'content' => '', 'value' => '', )); $config->append(array( 'html' => array( 'id' => $config->name, 'width' => '100%', 'height' => '500', 'cols' => '75', 'rows' => '20', ), )); if (!$config->content) { $config->content = ''; } $tags = $this->getService('com:base.template.helper.html'); $textarea = $tags->textarea($config->name, $config->content, AnConfig::unbox($config->html)); $textarea->set('data-behavior', 'Editor')->id(rand()); return $textarea; }\n\n    ### Response: Renders an editor.\n\n@param array $options\n\n@return string.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public <E> DbEntityDescriptor<E> removeEntity(final Class<E> type) { DbEntityDescriptor<E> ded = descriptorsMap.remove(type); if (ded == null) { ded = createDbEntityDescriptor(type); } entityNamesMap.remove(ded.getEntityName()); tableNamesMap.remove(ded.getTableName()); return ded; }\n\n    ### Response:",
        "ground_truth": "Removes entity and returns removed descriptor.",
        "predict": " Renders an editor.\n\n@param array $options\n\n@return string.\n\n    "
    },
    {
        "ID": 1122,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function getAppointments($respondentId, $organizationId, $patientNr = null, $where = null) { $select = $this->_getAppointmentSelect(); if ($where) { $select->where($where); } if ($respondentId) { $select->where('gap_id_user = ?', $respondentId) ->where('gap_id_organization = ?', $organizationId); } else { // Join might have been created in _getAppointmentSelect $from = $select->getPart(\\Zend_Db_Select::FROM); if (! isset($from['gems__respondent2org'])) { $select->joinInner( 'gems__respondent2org', 'gap_id_user = gr2o_id_user AND gap_id_organization = gr2o_id_organization', array() ); } $select->where('gr2o_patient_nr = ?', $patientNr) ->where('gr2o_id_organization = ?', $organizationId); } // \\MUtil_Echo::track($select->__toString()); $rows = $this->db->fetchAll($select); if (! $rows) { return array(); } $results = array(); foreach ($rows as $row) { $results[$row['gap_id_appointment']] = $this->getAppointmentDisplay($row); } return $results; }\n\n    ### Response: Get all appointments for a respondent\n\n@param int $respondentId When null $patientNr is required\n@param int $organizationId\n@param string $patientNr Optional for when $respondentId is null\n@param string $where Optional extra where statement\n@return array appointmentId => appointment description.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public <E> E createEntityInstance(final Class<E> type) { try { return ClassUtil.newInstance(type); } catch (Exception ex) { throw new DbOomException(ex); } }\n\n    ### Response:",
        "ground_truth": "Creates new entity instances.",
        "predict": " Get all appointments for a respondent\n\n@param int $respondentId When null $patientNr is required\n@param int $organizationId\n@param string $patientNr Optional for when $respondentId is null\n@param string $where Optional extra where statement\n@return array appointmentId => appointment description.\n\n    "
    },
    {
        "ID": 1123,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function getData($xpath) { $xpath = trim($xpath, '/'); if (isset($this->data[$xpath])) { return $this->data[$xpath]; } throw new EssenceException('Unregistered Element XPath: \"/'.$xpath.'\"'); }\n\n    ### Response: Get registered Element data\n\n@param   string  $xpath Element XPath\n@throws  EssenceException\n@return  mixed.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public WrapperProxettaFactory setTargetInterface(final Class targetInterface) { if (!targetInterface.isInterface()) { throw new ProxettaException(\"Not an interface: \" + targetInterface.getName()); } this.targetInterface = targetInterface; return this; }\n\n    ### Response:",
        "ground_truth": "Defines the interface of the resulting class.",
        "predict": " Get registered Element data\n\n@param   string  $xpath Element XPath\n@throws  EssenceException\n@return  mixed.\n\n    "
    },
    {
        "ID": 1124,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (s *ReservationAggregates) SetTotalPotentialRISavings(v string) *ReservationAggregates { s.TotalPotentialRISavings = &v return s }\n\n    ### Response: // SetTotalPotentialRISavings sets the TotalPotentialRISavings field's value..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void injectTargetIntoWrapper(final Object target, final Object wrapper) { ProxettaUtil.injectTargetIntoWrapper(target, wrapper, targetFieldName); }\n\n    ### Response:",
        "ground_truth": "Injects target into wrapper.",
        "predict": " // SetTotalPotentialRISavings sets the TotalPotentialRISavings field's value..\n\n    "
    },
    {
        "ID": 1125,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function(str, options) { // get settings var settings; if (_.isUndefined(options) && defaultSettings !== null) { settings = defaultSettings; } else if (!_.isUndefined(options)) { settings = util.parseOptions(options, defaultOptions); } else { settings = util.parseOptions(defaultOptions); defaultSettings = settings; } // return processed string return util.replaceMatches(str, settings); }\n\n    ### Response: Replaces all curse words in the given content string with cartoon-like\ngrawlixes.\n@param  {String}  str               Content string\n@param  {Object}  options           Options object. Optional.\n@param  {Object}  options.style     Style of grawlix to use for replacements.\nCan be either a string, with the name of\nthe style to use; or an object with a\nrequired `name` property. See readme for\nmore details and available options.\nDefaults to the `ascii` style.\n@param  {Boolean} options.randomize Whether or not to replace curses with\nrandomized or fixed grawlixes. Default is\ntrue.\n@param  {Array}   options.allowed   Array of strings, representing\nwhitelisted words that would otherwise be\nreplaced. Optional.\n@param  {Array}   options.filters   Array of custom filter objects. These can\neither reconfigure one of the existing\ndefault filter, or represent an entirely\nnew filter. See readme for details.\nOptional.\n@param  {Array}   options.plugins   Array of either plugin factory functions\nor GrawlixPlugin objects. See docs for\ndetails. Optional.\n@return {String}                    Processed string.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected PropertyDescriptor[] lookupAnnotatedProperties(final Class type) { PropertyDescriptor[] properties = annotatedProperties.get(type); if (properties != null) { return properties; } ClassDescriptor cd = ClassIntrospector.get().lookup(type); PropertyDescriptor[] allProperties = cd.getAllPropertyDescriptors(); List<PropertyDescriptor> list = new ArrayList<>(); for (PropertyDescriptor propertyDescriptor : allProperties) { Annotation ann = null; if (propertyDescriptor.getFieldDescriptor() != null) { ann = propertyDescriptor.getFieldDescriptor().getField().getAnnotation(annotations); } if (ann == null && propertyDescriptor.getWriteMethodDescriptor() != null) { ann = propertyDescriptor.getWriteMethodDescriptor().getMethod().getAnnotation(annotations); } if (ann == null && propertyDescriptor.getReadMethodDescriptor() != null) { ann = propertyDescriptor.getReadMethodDescriptor().getMethod().getAnnotation(annotations); } if (ann != null) { list.add(propertyDescriptor); } } if (list.isEmpty()) { properties = EMPTY; } else { properties = list.toArray(new PropertyDescriptor[0]); } annotatedProperties.put(type, properties); return properties; }\n\n    ### Response:",
        "ground_truth": "Lookups for annotated properties. Caches all annotated properties on the first\naction class scan.",
        "predict": " Replaces all curse words in the given content string with cartoon-like\ngrawlixes.\n@param  {String}  str               Content string\n@param  {Object}  options           Options object. Optional.\n@param  {Object}  options.style     Style of grawlix to use for replacements.\nCan be either a string, with the name of\nthe style to use; or an object with a\nrequired `name` property. See readme for\nmore details and available options.\nDefaults to the `ascii` style.\n@param  {Boolean} options.randomize Whether or not to replace curses with\nrandomized or fixed grawlixes. Default is\ntrue.\n@param  {Array}   options.allowed   Array of strings, representing\nwhitelisted words that would otherwise be\nreplaced. Optional.\n@param  {Array}   options.filters   Array of custom filter objects. These can\neither reconfigure one of the existing\ndefault filter, or represent an entirely\nnew filter. See readme for details.\nOptional.\n@param  {Array}   options.plugins   Array of either plugin factory functions\nor GrawlixPlugin objects. See docs for\ndetails. Optional.\n@return {String}                    Processed string.\n\n    "
    },
    {
        "ID": 1126,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function buildPropertyMappingConfiguration($type = PropertyMappingConfiguration::class) { /** @var PropertyMappingConfiguration $configuration */ $configuration = new $type(); $configuration->setTypeConverterOptions(TypeConverter\\PersistentObjectConverter::class, [ TypeConverter\\PersistentObjectConverter::CONFIGURATION_CREATION_ALLOWED => true, TypeConverter\\PersistentObjectConverter::CONFIGURATION_MODIFICATION_ALLOWED => true ]); $configuration->allowAllProperties(); return $configuration; }\n\n    ### Response: Builds the default property mapping configuration.\n\n@param string $type the implementation class name of the PropertyMappingConfiguration to instantiate; must be a subclass of Neos\\Flow\\Property\\PropertyMappingConfiguration\n@return PropertyMappingConfiguration.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public DbServer detectDatabaseAndConfigureDbOom( final ConnectionProvider cp, final DbOomConfig dbOomConfig) { cp.init(); final Connection connection = cp.getConnection(); final DbServer dbServer = detectDatabase(connection); cp.closeConnection(connection); dbServer.accept(dbOomConfig); return dbServer; }\n\n    ### Response:",
        "ground_truth": "Detects database and configure DbOom engine.",
        "predict": " Builds the default property mapping configuration.\n\n@param string $type the implementation class name of the PropertyMappingConfiguration to instantiate; must be a subclass of Neos\\Flow\\Property\\PropertyMappingConfiguration\n@return PropertyMappingConfiguration.\n\n    "
    },
    {
        "ID": 1127,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def slerp(R1, R2, t1, t2, t_out): \"\"\"Spherical linear interpolation of rotors This function uses a simpler interface than the more fundamental `slerp_evaluate` and `slerp_vectorized` functions. The latter are fast, being implemented at the C level, but take input `tau` instead of time. This function adjusts the time accordingly. Parameters ---------- R1: quaternion Quaternion at beginning of interpolation R2: quaternion Quaternion at end of interpolation t1: float Time corresponding to R1 t2: float Time corresponding to R2 t_out: float or array of floats Times to which the rotors should be interpolated \"\"\" tau = (t_out-t1)/(t2-t1) return np.slerp_vectorized(R1, R2, tau)\n\n    ### Response: Spherical linear interpolation of rotors\n\n    This function uses a simpler interface than the more fundamental\n    `slerp_evaluate` and `slerp_vectorized` functions.  The latter\n    are fast, being implemented at the C level, but take input `tau`\n    instead of time.  This function adjusts the time accordingly.\n\n    Parameters\n    ----------\n    R1: quaternion\n        Quaternion at beginning of interpolation\n    R2: quaternion\n        Quaternion at end of interpolation\n    t1: float\n        Time corresponding to R1\n    t2: float\n        Time corresponding to R2\n    t_out: float or array of floats\n        Times to which the rotors should be interpolated.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public void close() throws IOException { if (closed) { return; } if (gzipstream != null) { flushToGZip(); gzipstream.close(); gzipstream = null; } else { if (bufferCount > 0) { output.write(buffer, 0, bufferCount); bufferCount = 0; } } output.close(); closed = true; }\n\n    ### Response:",
        "ground_truth": "Closes this output stream, causing any buffered data to be flushed and any\nfurther output data to throw an IOException.",
        "predict": " Spherical linear interpolation of rotors\n\n    This function uses a simpler interface than the more fundamental\n    `slerp_evaluate` and `slerp_vectorized` functions.  The latter\n    are fast, being implemented at the C level, but take input `tau`\n    instead of time.  This function adjusts the time accordingly.\n\n    Parameters\n    ----------\n    R1: quaternion\n        Quaternion at beginning of interpolation\n    R2: quaternion\n        Quaternion at end of interpolation\n    t1: float\n        Time corresponding to R1\n    t2: float\n        Time corresponding to R2\n    t_out: float or array of floats\n        Times to which the rotors should be interpolated.\n\n    "
    },
    {
        "ID": 1128,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def variant(self, case_id, variant_id): \"\"\"Fetch a single variant from variant source.\"\"\" case_obj = self.case(case_id) plugin, case_id = self.select_plugin(case_obj) variant = plugin.variant(case_id, variant_id) return variant\n\n    ### Response: Fetch a single variant from variant source..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public void write(final int b) throws IOException { if (closed) { throw new IOException(\"Cannot write to a closed output stream\"); } if (bufferCount >= buffer.length) { flushToGZip(); } buffer[bufferCount++] = (byte) b; }\n\n    ### Response:",
        "ground_truth": "Writes the specified byte to our output stream.",
        "predict": " Fetch a single variant from variant source..\n\n    "
    },
    {
        "ID": 1129,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def lock_excl(self, timeout='default'): \"\"\"Establish an exclusive lock to the resource. :param timeout: Absolute time period (in milliseconds) that a resource waits to get unlocked by the locking session before returning an error. (Defaults to self.timeout) \"\"\" timeout = self.timeout if timeout == 'default' else timeout timeout = self._cleanup_timeout(timeout) self.visalib.lock(self.session, constants.AccessModes.exclusive_lock, timeout, None)\n\n    ### Response: Establish an exclusive lock to the resource.\n\n        :param timeout: Absolute time period (in milliseconds) that a resource\n                        waits to get unlocked by the locking session before\n                        returning an error. (Defaults to self.timeout).\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public void doFilter(final ServletRequest request, final ServletResponse response, final FilterChain chain) throws IOException, ServletException { HttpServletRequest httpRequest = (HttpServletRequest) request; HttpServletResponse httpResponse = (HttpServletResponse) response; if (isRequestedSessionIdFromURL(httpRequest)) { HttpSession session = httpRequest.getSession(false); if (session != null) { session.invalidate(); // clear session if session id in URL } } // wrap response to remove URL encoding HttpServletResponseWrapper wrappedResponse = new HttpServletResponseWrapper(httpResponse) { @Override public String encodeRedirectUrl(final String url) { return url; } @Override public String encodeRedirectURL(final String url) { return url; } @Override public String encodeUrl(final String url) { return url; } @Override public String encodeURL(final String url) { return url; } }; chain.doFilter(request, wrappedResponse); }\n\n    ### Response:",
        "ground_truth": "Filters requests to remove URL-based session identifiers.",
        "predict": " Establish an exclusive lock to the resource.\n\n        :param timeout: Absolute time period (in milliseconds) that a resource\n                        waits to get unlocked by the locking session before\n                        returning an error. (Defaults to self.timeout).\n\n    "
    },
    {
        "ID": 1130,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    final public function getName(): string { try { $reflexionConstant = new ReflectionClassConstant($this, 'NAME'); $this->name = $reflexionConstant->getValue(); } catch (Exception $e) { } return $this->name; }\n\n    ### Response: Returns the theme name.\n\n@return string The Theme name.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String getEncodedName() { if (name == null) { return null; } try { return MimeUtility.encodeText(name); } catch (final UnsupportedEncodingException ueex) { throw new MailException(ueex); } }\n\n    ### Response:",
        "ground_truth": "Returns encoded attachment name.\n\n@return encoded attachment name. Value may be {@code null}.",
        "predict": " Returns the theme name.\n\n@return string The Theme name.\n\n    "
    },
    {
        "ID": 1131,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (d *Decoder) Next() bool { d.i += 1 if d.i >= d.n { d.read() } return len(d.bytes) >= 8 || (d.i >= 0 && d.i < d.n) }\n\n    ### Response: // Next returns true if there are remaining values to be read.  Successive\n// calls to Next advance the current element pointer..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public byte[] toByteArray() { final FastByteArrayOutputStream out; if (size != -1) { out = new FastByteArrayOutputStream(size); } else { out = new FastByteArrayOutputStream(); } writeToStream(out); return out.toByteArray(); }\n\n    ### Response:",
        "ground_truth": "Returns byte content of the attachment.\n\n@return byte array with content of the attachment.",
        "predict": " // Next returns true if there are remaining values to be read.  Successive\n// calls to Next advance the current element pointer..\n\n    "
    },
    {
        "ID": 1132,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String[] getHeaderNames() { Set<String> headers = this.headers.keySet(); return headers.toArray(new String[headers.size()]); }\n\n    ### Response: Gets the header names of all headers set in this response.\n\n@return an array of {@code String}s.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void writeToFile(final File destination) { InputStream input = null; final OutputStream output; try { input = getDataSource().getInputStream(); output = new FileOutputStream(destination); StreamUtil.copy(input, output); } catch (final IOException ioex) { throw new MailException(ioex); } finally { StreamUtil.close(input); } }\n\n    ### Response:",
        "ground_truth": "Saves attachment to a file.\n\n@param destination The destination file to be written.",
        "predict": " Gets the header names of all headers set in this response.\n\n@return an array of {@code String}s.\n\n    "
    },
    {
        "ID": 1133,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Nullable public DATATYPE getIfChanged (@Nullable final DATATYPE aUnchangedValue) { return m_eChange.isChanged () ? m_aObj : aUnchangedValue; }\n\n    ### Response: Get the store value if this is a change. Otherwise the passed unchanged\nvalue is returned.\n\n@param aUnchangedValue\nThe unchanged value to be used. May be null.\n@return Either the stored value or the unchanged value. May be\nnull..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void writeToStream(final OutputStream out) { InputStream input = null; try { input = getDataSource().getInputStream(); StreamUtil.copy(input, out); } catch (final IOException ioex) { throw new MailException(ioex); } finally { StreamUtil.close(input); } }\n\n    ### Response:",
        "ground_truth": "Saves attachment to the output stream.\n\n@param out OutputStream where attachment should be copied to.",
        "predict": " Get the store value if this is a change. Otherwise the passed unchanged\nvalue is returned.\n\n@param aUnchangedValue\nThe unchanged value to be used. May be null.\n@return Either the stored value or the unchanged value. May be\nnull..\n\n    "
    },
    {
        "ID": 1134,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void removeOverlaps(Collection<TermOccurrence> referenceSet, Collection<TermOccurrence> occurrenceSet) { Iterator<TermOccurrence> it = occurrenceSet.iterator(); while(it.hasNext()) { TermOccurrence occ = it.next(); for(TermOccurrence refOcc:referenceSet) { if(occ.getSourceDocument().equals(refOcc.getSourceDocument()) && areOffsetsOverlapping(occ, refOcc)) { it.remove(); break; } } } }\n\n    ### Response: Removes from an occurrence set all occurrences that overlap\nat least one occurrence in a reference occurrence set.\n\n@param referenceSet\nthe reference set, not modified by this method\n@param occurrenceSet\nthe occurrence set to analyze, will be modified by this method.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected static String appendArgument(final String desc, final String type) { int ndx = desc.indexOf(')'); return desc.substring(0, ndx) + type + desc.substring(ndx); }\n\n    ### Response:",
        "ground_truth": "Appends argument to the existing description.",
        "predict": " Removes from an occurrence set all occurrences that overlap\nat least one occurrence in a reference occurrence set.\n\n@param referenceSet\nthe reference set, not modified by this method\n@param occurrenceSet\nthe occurrence set to analyze, will be modified by this method.\n\n    "
    },
    {
        "ID": 1135,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private function flattenArgs($args, $level = 0, &$count = 0) { $result = []; foreach ($args as $key => $value) { if (++$count > 10000) { return ['array', '*SKIPPED over 10000 entries*']; } if ($value instanceof \\__PHP_Incomplete_Class) { // is_object() returns false on PHP<=7.1 $result[$key] = ['incomplete-object', $this->getClassNameFromIncomplete($value)]; } elseif (is_object($value)) { $result[$key] = ['object', get_class($value)]; } elseif (is_array($value)) { if ($level > 10) { $result[$key] = ['array', '*DEEP NESTED ARRAY*']; } else { $result[$key] = ['array', $this->flattenArgs($value, $level + 1, $count)]; } } elseif (null === $value) { $result[$key] = ['null', null]; } elseif (is_bool($value)) { $result[$key] = ['boolean', $value]; } elseif (is_int($value)) { $result[$key] = ['integer', $value]; } elseif (is_float($value)) { $result[$key] = ['float', $value]; } elseif (is_resource($value)) { $result[$key] = ['resource', get_resource_type($value)]; } else { $result[$key] = ['string', (string)$value]; } } return $result; }\n\n    ### Response: Allows you to sterilize the Exception trace arguments\n@param array $args\n@param int $level recursion level\n@param int $count number of records counter\n@return array arguments tracing..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected static String prependArgument(final String desc, final String type) { int ndx = desc.indexOf('('); ndx++; return desc.substring(0, ndx) + type + desc.substring(ndx); }\n\n    ### Response:",
        "ground_truth": "Prepends argument to the existing description.",
        "predict": " Allows you to sterilize the Exception trace arguments\n@param array $args\n@param int $level recursion level\n@param int $count number of records counter\n@return array arguments tracing..\n\n    "
    },
    {
        "ID": 1136,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func WithTCPKeepAliveTimeout(t time.Duration) Option { return func(c *config) { c.tcpKeepAliveTimeout = t } }\n\n    ### Response: // WithTCPKeepAliveTimeout sets the keep-alive period for an active TCP\n// connection.\n//\n// A setting of 0 disables TCP keep-alives..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected static String changeReturnType(final String desc, final String type) { int ndx = desc.indexOf(')'); return desc.substring(0, ndx + 1) + type; }\n\n    ### Response:",
        "ground_truth": "Changes return type.",
        "predict": " // WithTCPKeepAliveTimeout sets the keep-alive period for an active TCP\n// connection.\n//\n// A setting of 0 disables TCP keep-alives..\n\n    "
    },
    {
        "ID": 1137,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (v *vserver) unconfigureVIPs() { ncc := v.engine.ncc if err := ncc.Dial(); err != nil { log.Fatalf(\"%v: failed to connect to NCC: %v\", v, err) } defer ncc.Close() // TODO(jsing): At a later date this will need to support VLAN // interfaces and dedicated VIP subnets. for vip := range v.vips { v.unconfigureVIP(&vip) } }\n\n    ### Response: // unconfigureVIPs removes unicast VIPs from the load balancing interface..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public void text(final CharSequence text) { if (!strip) { super.text(text); return; } int textLength = text.length(); char[] dest = new char[textLength]; int ndx = 0; boolean regularChar = true; for (int i = 0; i < textLength; i++) { char c = text.charAt(i); if (CharUtil.isWhitespace(c)) { if (regularChar) { regularChar = false; c = ' '; } else { continue; } } else { regularChar = true; } dest[ndx] = c; ndx++; } if (regularChar || (ndx != 1)) { super.text(CharBuffer.wrap(dest, 0, ndx)); strippedCharsCount += textLength - ndx; } else { strippedCharsCount += textLength; } }\n\n    ### Response:",
        "ground_truth": "Cleans unnecessary whitespaces.",
        "predict": " // unconfigureVIPs removes unicast VIPs from the load balancing interface..\n\n    "
    },
    {
        "ID": 1138,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def relay_info(self, relay, attribute=None): \"\"\" Return information about a relay. :param relay: The relay being queried. :type relay: int :param attribute: The attribute being queried, or all attributes for that relay if None is specified. :type attribute: string or None :returns: The attribute being queried or None if not found. :rtype: string or int \"\"\" # Check if the relay number is valid. if (relay < 0) or (relay > (self.num_relays - 1)): # Invalid relay index specified. return None else: if attribute is None: # Return all the relay attributes. return self.relays[relay] else: try: return self.relays[relay][attribute] except KeyError: # Invalid key specified. return None\n\n    ### Response: Return information about a relay.\n\n        :param relay: The relay being queried.\n        :type relay: int\n        :param attribute: The attribute being queried, or all attributes for\n                          that relay if None is specified.\n        :type attribute: string or None\n        :returns: The attribute being queried or None if not found.\n        :rtype: string or int.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public <T> void register(final Class<T> type, final TypeConverter<T> typeConverter) { converters.put(type, typeConverter); }\n\n    ### Response:",
        "ground_truth": "Registers a converter for specified type.\nUser must register converter for all super-classes as well.\n\n@param type\t\tclass that converter is for\n@param typeConverter\tconverter for provided class",
        "predict": " Return information about a relay.\n\n        :param relay: The relay being queried.\n        :type relay: int\n        :param attribute: The attribute being queried, or all attributes for\n                          that relay if None is specified.\n        :type attribute: string or None\n        :returns: The attribute being queried or None if not found.\n        :rtype: string or int.\n\n    "
    },
    {
        "ID": 1139,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private boolean smoothSlideTo(float slideOffset) { final int topBound = getPaddingTop(); int x = (int) (slideOffset * (getWidth() - transformer.getMinWidthPlusMarginRight())); int y = (int) (topBound + slideOffset * getVerticalDragRange()); if (viewDragHelper.smoothSlideViewTo(dragView, x, y)) { ViewCompat.postInvalidateOnAnimation(this); return true; } return false; }\n\n    ### Response: Realize an smooth slide to an slide offset passed as argument. This method is the base of\nmaximize, minimize and close methods.\n\n@param slideOffset to apply\n@return true if the view is slided..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public <T> TypeConverter<T> lookup(final Class<T> type) { return converters.get(type); }\n\n    ### Response:",
        "ground_truth": "Retrieves converter for provided type. Only registered types are matched,\ntherefore subclasses must be also registered.\n\n@return founded converter or null",
        "predict": " Realize an smooth slide to an slide offset passed as argument. This method is the base of\nmaximize, minimize and close methods.\n\n@param slideOffset to apply\n@return true if the view is slided..\n\n    "
    },
    {
        "ID": 1140,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static function set($enabled, $params) { $docs = self::documentations(); $content = $docs['enabled'].self::enbaledFormat($enabled); $content .= $docs['kernel'].self::arrayFormat($params['kernel'], 'kernel'); $content .= $docs['exceptions'].self::arrayFormat($params['exceptions'], 'exceptions'); $content .= $docs['controllers'].self::arrayFormat($params['controllers'], 'controllers'); $content .= $docs['models'].self::arrayFormat($params['models'], 'models'); $content .= $docs['mailables'].self::arrayFormat($params['mailables'], 'mailables'); if (array_has($params, 'querying')) { $content .= $docs['querying'].self::arrayFormat($params['querying'], 'querying'); } $content = self::fileFormat($content); return self::setFile($content); }\n\n    ### Response: Set the config params.\n\n@param bool  $enabled\n@param array $params\n\n@return bool.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public List<Node> select(final String query) { Collection<List<CssSelector>> selectorsCollection = CSSelly.parse(query); return select(selectorsCollection); }\n\n    ### Response:",
        "ground_truth": "Selects nodes using CSS3 selector query.",
        "predict": " Set the config params.\n\n@param bool  $enabled\n@param array $params\n\n@return bool.\n\n    "
    },
    {
        "ID": 1141,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function mapSpecToResult(spec) { var firstFailedExpectation = spec.failedExpectations[0] || {}; var result = { testName: spec.fullName, testFramework: \"jasmine2\", durationMilliseconds: elapsed(spec.__startTime, spec.__endTime), outcome: getOutcome(spec), ErrorMessage: firstFailedExpectation.message, ErrorStackTrace: firstFailedExpectation.stack }; return result; }\n\n    ### Response: map jasmine spec to AppVeyor test result.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public List<Node> select(final Collection<List<CssSelector>> selectorsCollection) { List<Node> results = new ArrayList<>(); for (List<CssSelector> selectors : selectorsCollection) { processSelectors(results, selectors); } return results; }\n\n    ### Response:",
        "ground_truth": "Selected nodes using pre-parsed CSS selectors. Take in consideration\ncollection type for results grouping order.",
        "predict": " map jasmine spec to AppVeyor test result.\n\n    "
    },
    {
        "ID": 1142,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static char eatPercentage(String a, int[] n) { // Length 0 if (!a.startsWith(\"%\") || a.length() < 3) { n[0] = 0; return ((char) 0); } char c; // Try to parse first char try { c = (char) Integer.parseInt(a.substring(1, 3), 16); } catch (Exception e) { n[0] = -1; return ((char) 0); } // For non-UTF8, return the char int len = Utf8Length(c); n[0] = 3; if (len <= 1) return (c); // Else collect the UTF8 String dec = \"\" + c; for (int i = 1; i < len; i++) { try { dec += (char) Integer.parseInt(a.substring(1 + i * 3, 3 + i * 3), 16); } catch (Exception e) { return (c); } } // Try to decode the UTF8 int[] eatLength = new int[1]; char utf8 = eatUtf8(dec, eatLength); if (eatLength[0] != len) return (c); n[0] = len * 3; return (utf8); }\n\n    ### Response: Eats a String of the form \"%xx\" from a string, where\nxx is a hexadecimal code. If xx is a UTF8 code start,\ntries to complete the UTF8-code and decodes it..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void processSelectors(final List<Node> results, final List<CssSelector> selectors) { List<Node> selectedNodes = select(rootNode, selectors); for (Node selectedNode : selectedNodes) { if (!results.contains(selectedNode)) { results.add(selectedNode); } } }\n\n    ### Response:",
        "ground_truth": "Process selectors and keep adding results.",
        "predict": " Eats a String of the form \"%xx\" from a string, where\nxx is a hexadecimal code. If xx is a UTF8 code start,\ntries to complete the UTF8-code and decodes it..\n\n    "
    },
    {
        "ID": 1143,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def Remove(self,directory,filename): \"\"\"Deletes post from wordpress\"\"\" db = self._loadDB(directory) logger.debug(\"wp: Attempting to remove %s from wp\"%(filename)) # See if this already exists in our DB if db.has_key(filename): pid=db[filename] logger.debug('wp: Found %s in DB with post id %s'%(filename,pid)) else: print(\"wp: %s not in our local DB file [%s]\"\\ %(filename,self.DB_FILE)) return False self._connectToWP() self.wp.call(DeletePost(pid)) del db[filename] self._saveDB(directory,db) return True\n\n    ### Response: Deletes post from wordpress.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Node selectFirst(final String query) { List<Node> selectedNodes = select(query); if (selectedNodes.isEmpty()) { return null; } return selectedNodes.get(0); }\n\n    ### Response:",
        "ground_truth": "Selects nodes using CSS3 selector query and returns the very first one.",
        "predict": " Deletes post from wordpress.\n\n    "
    },
    {
        "ID": 1144,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (s *RealtimeEndpointInfo) SetEndpointUrl(v string) *RealtimeEndpointInfo { s.EndpointUrl = &v return s }\n\n    ### Response: // SetEndpointUrl sets the EndpointUrl field's value..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void walkDescendantsIteratively(final LinkedList<Node> nodes, final CssSelector cssSelector, final List<Node> result) { while (!nodes.isEmpty()) { Node node = nodes.removeFirst(); selectAndAdd(node, cssSelector, result); // append children in walking order to be processed right after this node int childCount = node.getChildNodesCount(); for (int i = childCount - 1; i >= 0; i--) { nodes.addFirst(node.getChild(i)); } } }\n\n    ### Response:",
        "ground_truth": "Walks over the child notes, maintaining the tree order and not using recursion.",
        "predict": " // SetEndpointUrl sets the EndpointUrl field's value..\n\n    "
    },
    {
        "ID": 1145,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public int iamax(INDArray arr) { if (arr.isSparse()) { return Nd4j.getSparseBlasWrapper().level1().iamax(arr); } if (Nd4j.getExecutioner().getProfilingMode() == OpExecutioner.ProfilingMode.ALL) OpProfiler.getInstance().processBlasCall(false, arr); if (arr.data().dataType() == DataType.DOUBLE) { DefaultOpExecutioner.validateDataType(DataType.DOUBLE, arr); return idamax(arr.length(), arr, BlasBufferUtil.getBlasStride(arr)); } else { DefaultOpExecutioner.validateDataType(DataType.FLOAT, arr); return isamax(arr.length(), arr, BlasBufferUtil.getBlasStride(arr)); } }\n\n    ### Response: finds the element of a\nvector that has the largest absolute value.\n\n@param arr\n@return.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void walk(final Node rootNode, final CssSelector cssSelector, final List<Node> result) { // previous combinator determines the behavior CssSelector previousCssSelector = cssSelector.getPrevCssSelector(); Combinator combinator = previousCssSelector != null ? previousCssSelector.getCombinator() : Combinator.DESCENDANT; switch (combinator) { case DESCENDANT: LinkedList<Node> nodes = new LinkedList<>(); int childCount = rootNode.getChildNodesCount(); for (int i = 0; i < childCount; i++) { nodes.add(rootNode.getChild(i)); // recursive // selectAndAdd(node, cssSelector, result); // walk(node, cssSelector, result); } walkDescendantsIteratively(nodes, cssSelector, result); break; case CHILD: childCount = rootNode.getChildNodesCount(); for (int i = 0; i < childCount; i++) { Node node = rootNode.getChild(i); selectAndAdd(node, cssSelector, result); } break; case ADJACENT_SIBLING: Node node = rootNode.getNextSiblingElement(); if (node != null) { selectAndAdd(node, cssSelector, result); } break; case GENERAL_SIBLING: node = rootNode; while (true) { node = node.getNextSiblingElement(); if (node == null) { break; } selectAndAdd(node, cssSelector, result); } break; } }\n\n    ### Response:",
        "ground_truth": "Finds nodes in the tree that matches single selector.",
        "predict": " finds the element of a\nvector that has the largest absolute value.\n\n@param arr\n@return.\n\n    "
    },
    {
        "ID": 1146,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def collect_summands(cls, ops, kwargs): \"\"\"Collect summands that occur multiple times into a single summand Also filters out zero-summands. Example: >>> A, B, C = (OperatorSymbol(s, hs=0) for s in ('A', 'B', 'C')) >>> collect_summands( ... OperatorPlus, (A, B, C, ZeroOperator, 2 * A, B, -C) , {}) ((3 * A^(0), 2 * B^(0)), {}) >>> collect_summands(OperatorPlus, (A, -A), {}) ZeroOperator >>> collect_summands(OperatorPlus, (B, A, -B), {}) A^(0) \"\"\" from qnet.algebra.core.abstract_quantum_algebra import ( ScalarTimesQuantumExpression) coeff_map = OrderedDict() for op in ops: if isinstance(op, ScalarTimesQuantumExpression): coeff, term = op.coeff, op.term else: coeff, term = 1, op if term in coeff_map: coeff_map[term] += coeff else: coeff_map[term] = coeff fops = [] for (term, coeff) in coeff_map.items(): op = coeff * term if not op.is_zero: fops.append(op) if len(fops) == 0: return cls._zero elif len(fops) == 1: return fops[0] else: return tuple(fops), kwargs\n\n    ### Response: Collect summands that occur multiple times into a single summand\n\n    Also filters out zero-summands.\n\n    Example:\n        >>> A, B, C = (OperatorSymbol(s, hs=0) for s in ('A', 'B', 'C'))\n        >>> collect_summands(\n        ...     OperatorPlus, (A, B, C, ZeroOperator, 2 * A, B, -C) , {})\n        ((3 * A^(0), 2 * B^(0)), {})\n        >>> collect_summands(OperatorPlus, (A, -A), {})\n        ZeroOperator\n        >>> collect_summands(OperatorPlus, (B, A, -B), {})\n        A^(0).\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void selectAndAdd(final Node node, final CssSelector cssSelector, final List<Node> result) { // ignore all nodes that are not elements if (node.getNodeType() != Node.NodeType.ELEMENT) { return; } boolean matched = cssSelector.accept(node); if (matched) { // check for duplicates if (result.contains(node)) { return; } // no duplicate found, add it to the results result.add(node); } }\n\n    ### Response:",
        "ground_truth": "Selects single node for single selector and appends it to the results.",
        "predict": " Collect summands that occur multiple times into a single summand\n\n    Also filters out zero-summands.\n\n    Example:\n        >>> A, B, C = (OperatorSymbol(s, hs=0) for s in ('A', 'B', 'C'))\n        >>> collect_summands(\n        ...     OperatorPlus, (A, B, C, ZeroOperator, 2 * A, B, -C) , {})\n        ((3 * A^(0), 2 * B^(0)), {})\n        >>> collect_summands(OperatorPlus, (A, -A), {})\n        ZeroOperator\n        >>> collect_summands(OperatorPlus, (B, A, -B), {})\n        A^(0).\n\n    "
    },
    {
        "ID": 1147,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function mapOneFromResult($obj_result) { // Key & Ancestry list($obj_gds_entity, $bol_schema_match) = $this->createEntityWithKey($obj_result); /** @var Entity $obj_gds_entity */ // Properties if(isset($obj_result->entity->properties)) { $arr_property_definitions = $this->obj_schema->getProperties(); foreach ($obj_result->entity->properties as $str_field => $obj_property) { if ($bol_schema_match && isset($arr_property_definitions[$str_field])) { $obj_gds_entity->__set($str_field, $this->extractPropertyValue($arr_property_definitions[$str_field]['type'], $obj_property)); } else { $obj_gds_entity->__set($str_field, $this->extractPropertyValue(Schema::PROPERTY_DETECT, $obj_property)); } } } // Done return $obj_gds_entity; }\n\n    ### Response: Map a single result out of the Raw response data array FROM Google TO a GDS Entity\n\n@param object $obj_result\n@return Entity\n@throws \\Exception.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected boolean filter(final List<Node> currentResults, final Node node, final CssSelector cssSelector, final int index) { return cssSelector.accept(currentResults, node, index); }\n\n    ### Response:",
        "ground_truth": "Filter nodes.",
        "predict": " Map a single result out of the Raw response data array FROM Google TO a GDS Entity\n\n@param object $obj_result\n@return Entity\n@throws \\Exception.\n\n    "
    },
    {
        "ID": 1148,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function error($message) { $message = printPretty($message, $return=true); $hStream = CLI ? \\STDERR : fopen('php://stderr', 'a'); fwrite($hStream, $message); if (!CLI) fclose($hStream); }\n\n    ### Response: Write a message to STDERR.\n\n@param  mixed $message.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static char [] zzUnpackCMap(final String packed) { char [] map = new char[0x110000]; int i = 0; /* index in packed string */ int j = 0; /* index in unpacked array */ while (i < 128) { int count = packed.charAt(i++); char value = packed.charAt(i++); do map[j++] = value; while (--count > 0); } return map; }\n\n    ### Response:",
        "ground_truth": "Unpacks the compressed character translation table.\n\n@param packed   the packed character translation table\n@return         the unpacked character translation table",
        "predict": " Write a message to STDERR.\n\n@param  mixed $message.\n\n    "
    },
    {
        "ID": 1149,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public List<ICalendar> readAll() throws IOException { List<ICalendar> icals = new ArrayList<ICalendar>(); ICalendar ical; while ((ical = readNext()) != null) { icals.add(ical); } return icals; }\n\n    ### Response: Reads all iCalendar objects from the data stream.\n@return the iCalendar objects\n@throws IOException if there's a problem reading from the stream.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private boolean zzRefill() { if (zzBuffer == null) { zzBuffer = zzChars; zzEndRead += zzChars.length; return false; } return true; }\n\n    ### Response:",
        "ground_truth": "Refills the input buffer.\n\n@return      false, iff there was new input.",
        "predict": " Reads all iCalendar objects from the data stream.\n@return the iCalendar objects\n@throws IOException if there's a problem reading from the stream.\n\n    "
    },
    {
        "ID": 1150,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public SpannedExpression getLogicalFormForSpan(int spanStart, int spanEnd) { CcgParse spanningParse = getParseForSpan(spanStart, spanEnd); Expression2 lf = spanningParse.getPreUnaryLogicalForm(); if (lf != null) { return new SpannedExpression(spanningParse.getHeadedSyntacticCategory(), spanningParse.getLogicalForm(), spanningParse.getSpanStart(), spanningParse.getSpanEnd()); } else { return null; } }\n\n    ### Response: Returns the logical form for the smallest subtree of the parse which\ncompletely contains the given span.\n\n@param spanStart\n@param spanEnd\n@return.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected <T> PageData<T> page(String sql, final Map params, final int page, final int pageSize, final String sortColumnName, final boolean ascending, final Class[] target) { if (sortColumnName != null) { sql = buildOrderSql(sql, sortColumnName, ascending); } int from = (page - 1) * pageSize; String pageSql = buildPageSql(sql, from, pageSize); DbSqlBuilder dbsql = sql(pageSql); DbOomQuery query = query(dbsql); query.setMaxRows(pageSize); query.setFetchSize(pageSize); query.setMap(params); List<T> list = query.list(pageSize, target); query.close(); String countSql = buildCountSql(sql); dbsql = sql(countSql); query = query(dbsql); query.setMap(params); long count = query.executeCount(); query.close(); return new PageData<>(page, (int) count, pageSize, list); }\n\n    ### Response:",
        "ground_truth": "Pages given page.\n\n@param sql sql query that lists all items\n@param params map of SQL parameters\n@param page current page to show\n@param pageSize number of items to show\n@param sortColumnName name of sorting column, null for no sorting\n@param ascending true for ascending order\n@param target db entities for mapping (sa usual in DbOom)",
        "predict": " Returns the logical form for the smallest subtree of the parse which\ncompletely contains the given span.\n\n@param spanStart\n@param spanEnd\n@return.\n\n    "
    },
    {
        "ID": 1151,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def __get_all_scrapers(self): \"\"\"Find all available scraper references. Returns: list(obj): The scraper references. \"\"\" modules_strings = self.__get_all_scrapers_modules() modules = [] for module_string in modules_strings: module = importlib.import_module(\"nyawc.scrapers.\" + module_string) modules.append(getattr(module, module_string)) return modules\n\n    ### Response: Find all available scraper references.\n\n        Returns:\n            list(obj): The scraper references..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected String removeSelect(String sql) { int ndx = StringUtil.indexOfIgnoreCase(sql, \"select\"); if (ndx != -1) { sql = sql.substring(ndx + 6); // select.length() } return sql; }\n\n    ### Response:",
        "ground_truth": "Removes the first 'select' from the sql query.",
        "predict": " Find all available scraper references.\n\n        Returns:\n            list(obj): The scraper references..\n\n    "
    },
    {
        "ID": 1152,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function andRespondentTracks($fields = '*', $groupBy = false) { $this->sql_select->join('gems__respondent2track', 'gto_id_respondent_track = gr2t_id_respondent_track', $fields); if ($groupBy && is_array($fields)) { $this->sql_select->group($fields); } return $this; }\n\n    ### Response: Add Respondent Track info to the select statement\n\n@param string|array $fields\n@param boolean $groupBy Optional, add these fields to group by statement\n@return \\Gems_Tracker_Token_TokenSelect.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected String removeToFrom(String sql) { int from = 0; int fromCount = 1; int selectCount = 0; int lastNdx = 0; while (true) { int ndx = StringUtil.indexOfIgnoreCase(sql, \"from\", from); if (ndx == -1) { break; } // count selects in left part String left = sql.substring(lastNdx, ndx); selectCount += StringUtil.countIgnoreCase(left, \"select\"); if (fromCount >= selectCount) { sql = sql.substring(ndx); break; } // find next 'from' lastNdx = ndx; from = ndx + 4; fromCount++; } return sql; }\n\n    ### Response:",
        "ground_truth": "Removes the first part of the sql up to the relevant 'from'.\nTries to detect sub-queries in the 'select' part.",
        "predict": " Add Respondent Track info to the select statement\n\n@param string|array $fields\n@param boolean $groupBy Optional, add these fields to group by statement\n@return \\Gems_Tracker_Token_TokenSelect.\n\n    "
    },
    {
        "ID": 1153,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    async def async_get_sensor_log(self, index: int) -> Optional[SensorLogResponse]: \"\"\" Get an entry from the Special sensor log. :param index: Index for the sensor log entry to be obtained. :return: Response containing the sensor log entry, or None if not found. \"\"\" response = await self._protocol.async_execute( GetSensorLogCommand(index)) if isinstance(response, SensorLogResponse): return response return None\n\n    ### Response: Get an entry from the Special sensor log.\n\n        :param index: Index for the sensor log entry to be obtained.\n        :return: Response containing the sensor log entry, or None if not found..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected String removeLastOrderBy(String sql) { int ndx = StringUtil.lastIndexOfIgnoreCase(sql, \"order by\"); if (ndx != -1) { int ndx2 = sql.lastIndexOf(sql, ')'); if (ndx > ndx2) { sql = sql.substring(0, ndx); } } return sql; }\n\n    ### Response:",
        "ground_truth": "Removes everything from last \"order by\".",
        "predict": " Get an entry from the Special sensor log.\n\n        :param index: Index for the sensor log entry to be obtained.\n        :return: Response containing the sensor log entry, or None if not found..\n\n    "
    },
    {
        "ID": 1154,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function loadThemedJS($name) { if ($this->isDevServerActive()) { Requirements::javascript($this->getDevServerURL($this->ext($name, 'js'))); } else { Requirements::themedJavascript($name); } }\n\n    ### Response: Loads the themed JavaScript with the given name.\n\n@param string $name Name of themed JavaScript file.\n\n@return void.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String decode(final String html) { int ndx = html.indexOf('&'); if (ndx == -1) { return html; } StringBuilder result = new StringBuilder(html.length()); int lastIndex = 0; int len = html.length(); mainloop: while (ndx != -1) { result.append(html.substring(lastIndex, ndx)); lastIndex = ndx; while (html.charAt(lastIndex) != ';') { lastIndex++; if (lastIndex == len) { lastIndex = ndx; break mainloop; } } if (html.charAt(ndx + 1) == '#') { // decimal/hex char c = html.charAt(ndx + 2); int radix; if ((c == 'x') || (c == 'X')) { radix = 16; ndx += 3; } else { radix = 10; ndx += 2; } String number = html.substring(ndx, lastIndex); int i = Integer.parseInt(number, radix); result.append((char) i); lastIndex++; } else { // token String encodeToken = html.substring(ndx + 1, lastIndex); char[] replacement = ENTITY_MAP.get(encodeToken); if (replacement == null) { result.append('&'); lastIndex = ndx + 1; } else { result.append(replacement); lastIndex++; } } ndx = html.indexOf('&', lastIndex); } result.append(html.substring(lastIndex)); return result.toString(); }\n\n    ### Response:",
        "ground_truth": "Decodes HTML text. Assumes that all character references are properly closed with semi-colon.",
        "predict": " Loads the themed JavaScript with the given name.\n\n@param string $name Name of themed JavaScript file.\n\n@return void.\n\n    "
    },
    {
        "ID": 1155,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void doExportToWave() { doStopPlaying(); if (currentContainer==null) { JOptionPane.showMessageDialog(this, \"You need to load a file first!\", \"Ups!\", JOptionPane.ERROR_MESSAGE); } else { do { String fileName = Helpers.createLocalFileStringFromURL(currentContainer.getFileURL(), true); fileName = fileName.substring(fileName.lastIndexOf(File.separatorChar)+1); String exportToWav = exportPath + File.separatorChar + fileName + \".WAV\"; FileChooserResult selectedFile = Helpers.selectFileNameFor(this, exportToWav, \"Export to wave\", fileFilterExport, 1, false, false); if (selectedFile!=null) { File f = selectedFile.getSelectedFile(); if (f!=null) { if (f.exists()) { int result = JOptionPane.showConfirmDialog(this, \"File already exists! Overwrite?\", \"Overwrite confirmation\", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE); if (result==JOptionPane.CANCEL_OPTION) return; if (result==JOptionPane.NO_OPTION) continue; // Reselect boolean ok = f.delete(); if (!ok) { JOptionPane.showMessageDialog(MainForm.this, \"Overwrite failed. Is file write protected or in use?\", \"Failed\", JOptionPane.ERROR_MESSAGE); return; } } // get Export Type from selected filechooser index (find the index ;) ) String modFileName = f.getAbsolutePath(); int i = modFileName.lastIndexOf(File.separatorChar); exportPath = modFileName.substring(0, i); int result = JOptionPane.showConfirmDialog(this, \"Continue playback while exporting?\", \"Playback?\", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE); Mixer mixer = createNewMixer(); mixer.setPlayDuringExport(result==JOptionPane.YES_OPTION); mixer.setExportFile(f); playerThread = new PlayThread(mixer, this); playerThread.start(); inExportMode = true; // Signal, that we are exporting right now... } } return; } while (true); } }\n\n    ### Response: Exports to a Wavefile\n@since 01.07.2006.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String detectName(final char[] input, int ndx) { final Ptr ptr = new Ptr(); int firstIndex = 0; int lastIndex = ENTITY_NAMES.length - 1; int len = input.length; char[] lastName = null; final BinarySearchBase binarySearch = new BinarySearchBase() { @Override protected int compare(final int index) { char[] name = ENTITY_NAMES[index]; if (ptr.offset >= name.length) { return -1; } return name[ptr.offset] - ptr.c; } }; while (true) { ptr.c = input[ndx]; if (!CharUtil.isAlphaOrDigit(ptr.c)) { return lastName != null ? new String(lastName) : null; } firstIndex = binarySearch.findFirst(firstIndex, lastIndex); if (firstIndex < 0) { return lastName != null ? new String(lastName) : null; } char[] element = ENTITY_NAMES[firstIndex]; if (element.length == ptr.offset + 1) { // total match, remember position, continue for finding the longer name lastName = ENTITY_NAMES[firstIndex]; } lastIndex = binarySearch.findLast(firstIndex, lastIndex); if (firstIndex == lastIndex) { // only one element found, check the rest for (int i = ptr.offset; i < element.length; i++) { if (element[i] != input[ndx]) { return lastName != null ? new String(lastName) : null; } ndx++; } return new String(element); } ptr.offset++; ndx++; if (ndx == len) { return lastName != null ? new String(lastName) : null; } } }\n\n    ### Response:",
        "ground_truth": "Detects the longest character reference name on given position in char array.",
        "predict": " Exports to a Wavefile\n@since 01.07.2006.\n\n    "
    },
    {
        "ID": 1156,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function() { if (this._property_changed_listener && (this._value_container.getValue() != this._property_container)) { // currently listening to the parent's old data source this._property_changed_listener && this._property_container.removePropertyListener(this._property_changed_listener); this._enumerable_changed_listener && this._property_container.removeListener(this._enumerable_changed_listener); this._property_changed_listener = null; this._enumerable_changed_listener = null; this._property_container = null; } this._queueForRefresh(); }\n\n    ### Response: Data source for this instance has changed. Remove listeners to old data source and schedule refresh.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override protected String buildOrderSql(String sql, final String column, final boolean ascending) { sql += \" order by \" + column; if (!ascending) { sql += \" desc\"; } return sql; }\n\n    ### Response:",
        "ground_truth": "Appends ORDER BY keyword.",
        "predict": " Data source for this instance has changed. Remove listeners to old data source and schedule refresh.\n\n    "
    },
    {
        "ID": 1157,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function getVersionModel($version_id) { $version = $this->versions()->where(\"version_id\", \"=\", $version_id)->first(); if (!is_null($version)) { return $version->getModel(); } return null; }\n\n    ### Response: Get a model based on the version id\n\n@param $version_id\n\n@return $this|null.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override protected String buildPageSql(String sql, final int from, final int pageSize) { sql = removeSelect(sql); return \"select LIMIT \" + from + ' ' + pageSize + sql; }\n\n    ### Response:",
        "ground_truth": "Builds page sql using LIMIT keyword after the SELECT.",
        "predict": " Get a model based on the version id\n\n@param $version_id\n\n@return $this|null.\n\n    "
    },
    {
        "ID": 1158,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function isValueObject($object) { if (!is_string($object)) { $object = get_class($object); } return array_key_exists($object, $this->valueClasses); }\n\n    ### Response: Return true is the object is registered as value object.\n\n@param mixed $object\n\n@return bool.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void resolveColumnsAndProperties(final Class type) { PropertyDescriptor[] allProperties = ClassIntrospector.get().lookup(type).getAllPropertyDescriptors(); List<DbEntityColumnDescriptor> decList = new ArrayList<>(allProperties.length); int idcount = 0; HashSet<String> names = new HashSet<>(allProperties.length); for (PropertyDescriptor propertyDescriptor : allProperties) { DbEntityColumnDescriptor dec = DbMetaUtil.resolveColumnDescriptors(this, propertyDescriptor, isAnnotated, columnNamingStrategy); if (dec != null) { if (!names.add(dec.getColumnName())) { throw new DbOomException(\"Duplicate column name: \" + dec.getColumnName()); } decList.add(dec); if (dec.isId) { idcount++; } } } if (decList.isEmpty()) { throw new DbOomException(\"No column mappings in entity: \" + type); } columnDescriptors = decList.toArray(new DbEntityColumnDescriptor[0]); Arrays.sort(columnDescriptors); // extract ids from sorted list if (idcount > 0) { idColumnDescriptors = new DbEntityColumnDescriptor[idcount]; idcount = 0; for (DbEntityColumnDescriptor dec : columnDescriptors) { if (dec.isId) { idColumnDescriptors[idcount++] = dec; } } } }\n\n    ### Response:",
        "ground_truth": "Resolves list of all columns and properties.",
        "predict": " Return true is the object is registered as value object.\n\n@param mixed $object\n\n@return bool.\n\n    "
    },
    {
        "ID": 1159,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static function createVirtualColumns(string $tableName, string $column, array $virtualColumns, bool $isJson = true) { if(Schema::hasTable($tableName)) { Schema::table( $tableName, function ($table) use ($tableName, $column, $virtualColumns, $isJson) { foreach ($virtualColumns as $virtualColumn){ $length = (is_array($virtualColumn) && isset($virtualColumn['length']) && $virtualColumn['length']) ? $virtualColumn['length'] : null; $type = (is_array($virtualColumn) && isset($virtualColumn['type']) && $virtualColumn['type']) ? $virtualColumn['type'] : \"string\"; $isIndex = (is_array($virtualColumn) && isset($virtualColumn['index']) ? $virtualColumn['index'] : false); $virtualColumnName = (is_array($virtualColumn) ? $virtualColumn['name'] : $virtualColumn); if(Schema::hasColumn($tableName, $column.\"_\".$virtualColumnName)) { continue; } if($isJson) { $virtualAs = \"(JSON_UNQUOTE($column->\\\"$.$virtualColumnName\\\"))\"; }else{ $virtualAs = $column; } if($length) { $table->$type($column.\"_\".$virtualColumnName, $length)->virtualAs($virtualAs)->nullable(); }else{ $table->$type($column.\"_\".$virtualColumnName)->virtualAs($virtualAs)->nullable(); } // make it index if ($isIndex) { $table->index($column.\"_\".$virtualColumnName); } } } ); } }\n\n    ### Response: Create virtual columns for selected table an column.\n\n@param string $tableName\n@param string $column\n@param array  $virtualColumns\n@param bool   $isJson.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public DbEntityColumnDescriptor findByColumnName(final String columnName) { if (columnName == null) { return null; } init(); for (DbEntityColumnDescriptor columnDescriptor : columnDescriptors) { if (columnDescriptor.columnName.equalsIgnoreCase(columnName)) { return columnDescriptor; } } return null; }\n\n    ### Response:",
        "ground_truth": "Finds column descriptor by column name. Case is ignored.",
        "predict": " Create virtual columns for selected table an column.\n\n@param string $tableName\n@param string $column\n@param array  $virtualColumns\n@param bool   $isJson.\n\n    "
    },
    {
        "ID": 1160,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def parse_xmlsec_output(output): \"\"\" Parse the output from xmlsec to try to find out if the command was successfull or not. :param output: The output from Popen :return: A boolean; True if the command was a success otherwise False \"\"\" for line in output.splitlines(): if line == 'OK': return True elif line == 'FAIL': raise XmlsecError(output) raise XmlsecError(output)\n\n    ### Response: Parse the output from xmlsec to try to find out if the\n    command was successfull or not.\n\n    :param output: The output from Popen\n    :return: A boolean; True if the command was a success otherwise False.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public DbEntityColumnDescriptor findByPropertyName(final String propertyName) { if (propertyName == null) { return null; } init(); for (DbEntityColumnDescriptor columnDescriptor : columnDescriptors) { if (columnDescriptor.propertyName.equals(propertyName)) { return columnDescriptor; } } return null; }\n\n    ### Response:",
        "ground_truth": "Finds column descriptor by property name.",
        "predict": " Parse the output from xmlsec to try to find out if the\n    command was successfull or not.\n\n    :param output: The output from Popen\n    :return: A boolean; True if the command was a success otherwise False.\n\n    "
    },
    {
        "ID": 1161,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function diffInRealHours($date = null, $absolute = true) { return (int) ($this->diffInRealSeconds($date, $absolute) / static::SECONDS_PER_MINUTE / static::MINUTES_PER_HOUR); }\n\n    ### Response: Get the difference in hours using timestamps.\n\n@param Carbon|\\DateTimeInterface|string|null $date\n@param bool                                  $absolute Get the absolute of the difference\n\n@return int.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String getPropertyName(final String columnName) { DbEntityColumnDescriptor dec = findByColumnName(columnName); return dec == null ? null : dec.propertyName; }\n\n    ### Response:",
        "ground_truth": "Returns property name for specified column name.",
        "predict": " Get the difference in hours using timestamps.\n\n@param Carbon|\\DateTimeInterface|string|null $date\n@param bool                                  $absolute Get the absolute of the difference\n\n@return int.\n\n    "
    },
    {
        "ID": 1162,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def label(self, value): \"\"\" Returns a pretty text version of the key for the inputted value. :param value | <variant> :return <str> \"\"\" return self._labels.get(value) or text.pretty(self(value))\n\n    ### Response: Returns a pretty text version of the key for the inputted value.\n\n        :param      value | \n\n        :return     .\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String getColumnName(final String propertyName) { DbEntityColumnDescriptor dec = findByPropertyName(propertyName); return dec == null ? null : dec.columnName; }\n\n    ### Response:",
        "ground_truth": "Returns column name for specified property name..",
        "predict": " Returns a pretty text version of the key for the inputted value.\n\n        :param      value | \n\n        :return     .\n\n    "
    },
    {
        "ID": 1163,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _fetch(self, statement, commit, max_attempts=5): \"\"\" Execute a SQL query and return a result. Recursively disconnect and reconnect to the database if an error occurs. \"\"\" if self._auto_reconnect: attempts = 0 while attempts < max_attempts: try: # Execute statement self._cursor.execute(statement) fetch = self._cursor.fetchall() rows = self._fetch_rows(fetch) if commit: self._commit() # Return a single item if the list only has one item return rows[0] if len(rows) == 1 else rows except Exception as e: if attempts >= max_attempts: raise e else: attempts += 1 self.reconnect() continue else: # Execute statement self._cursor.execute(statement) fetch = self._cursor.fetchall() rows = self._fetch_rows(fetch) if commit: self._commit() # Return a single item if the list only has one item return rows[0] if len(rows) == 1 else rows\n\n    ### Response: Execute a SQL query and return a result.\n\n        Recursively disconnect and reconnect to the database\n        if an error occurs..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Object getIdValue(final E object) { final String propertyName = getIdPropertyName(); return BeanUtil.declared.getProperty(object, propertyName); }\n\n    ### Response:",
        "ground_truth": "Returns ID value for given entity instance.",
        "predict": " Execute a SQL query and return a result.\n\n        Recursively disconnect and reconnect to the database\n        if an error occurs..\n\n    "
    },
    {
        "ID": 1164,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func IsMemoryDB(dbName string) bool { if dbName == \"information_schema\" { return true } for _, driver := range drivers { if driver.DBInfo.Name.L == dbName { return true } } return false }\n\n    ### Response: // IsMemoryDB checks if the db is in memory..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void setIdValue(final E object, final Object value) { final String propertyName = getIdPropertyName(); BeanUtil.declared.setProperty(object, propertyName, value); }\n\n    ### Response:",
        "ground_truth": "Sets ID value for given entity.",
        "predict": " // IsMemoryDB checks if the db is in memory..\n\n    "
    },
    {
        "ID": 1165,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    void loadEagerSingletons(InjectorImpl injector, Stage stage, final Errors errors) { List<BindingImpl<?>> candidateBindings = new ArrayList<>(); @SuppressWarnings(\"unchecked\") // casting Collection<Binding> to Collection<BindingImpl> is safe Collection<BindingImpl<?>> bindingsAtThisLevel = (Collection) injector.state.getExplicitBindingsThisLevel().values(); candidateBindings.addAll(bindingsAtThisLevel); synchronized (injector.state.lock()) { // jit bindings must be accessed while holding the lock. candidateBindings.addAll(injector.jitBindings.values()); } InternalContext context = injector.enterContext(); try { for (BindingImpl<?> binding : candidateBindings) { if (isEagerSingleton(injector, binding, stage)) { Dependency<?> dependency = Dependency.get(binding.getKey()); Dependency previous = context.pushDependency(dependency, binding.getSource()); try { binding.getInternalFactory().get(context, dependency, false); } catch (InternalProvisionException e) { errors.withSource(dependency).merge(e); } finally { context.popStateAndSetDependency(previous); } } } } finally { context.close(); } }\n\n    ### Response: Loads eager singletons, or all singletons if we're in Stage.PRODUCTION. Bindings discovered\nwhile we're binding these singletons are not be eager..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String getKeyValue(final E object) { Object idValue = getIdValue(object); String idValueString = idValue == null ? StringPool.NULL : idValue.toString(); return type.getName().concat(StringPool.COLON).concat(idValueString); }\n\n    ### Response:",
        "ground_truth": "Returns unique key for this entity. Returned key\nis built from entity class and id value.",
        "predict": " Loads eager singletons, or all singletons if we're in Stage.PRODUCTION. Bindings discovered\nwhile we're binding these singletons are not be eager..\n\n    "
    },
    {
        "ID": 1166,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function (paranoia) { var entropyRequired = this._PARANOIA_LEVELS[ paranoia ? paranoia : this._defaultParanoia ]; if (this._strength >= entropyRequired) { return 1.0; } else { return (this._poolStrength > entropyRequired) ? 1.0 : this._poolStrength / entropyRequired; } }\n\n    ### Response: Get the generator's progress toward readiness, as a fraction.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public StringBand append(String s) { if (s == null) { s = StringPool.NULL; } if (index >= array.length) { expandCapacity(); } array[index++] = s; length += s.length(); return this; }\n\n    ### Response:",
        "ground_truth": "Appends a string.",
        "predict": " Get the generator's progress toward readiness, as a fraction.\n\n    "
    },
    {
        "ID": 1167,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function loadClass($className) { $cache = $this->getCache(); $entries = $cache->load($this->cacheKey); if($entries == false) { $entries = array(); } $status = $this->tryAndLoadClass($className, $entries); if($status) { // class loaded return true; } if(preg_match($this->ignoreClassNamesRegexp, $className)) { return false; } foreach($this->classPaths as $path) { // Scan for file $realPath = $this->searchForClassFile($className, $path); if($realPath !== false) { $entries[$className] = $realPath; break; } } $cache->save($entries, $this->cacheKey); $status = $this->tryAndLoadClass($className, $entries); return $status; }\n\n    ### Response: Returns true if the class file was found and included, false if not.\n\n@return boolean.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void setIndex(final int newIndex) { if (newIndex < 0) { throw new ArrayIndexOutOfBoundsException(newIndex); } if (newIndex > array.length) { String[] newArray = new String[newIndex]; System.arraycopy(array, 0, newArray, 0, index); array = newArray; } if (newIndex > index) { for (int i = index; i < newIndex; i++) { array[i] = StringPool.EMPTY; } } else if (newIndex < index) { for (int i = newIndex; i < index; i++) { array[i] = null; } } index = newIndex; length = calculateLength(); }\n\n    ### Response:",
        "ground_truth": "Specifies the new index.",
        "predict": " Returns true if the class file was found and included, false if not.\n\n@return boolean.\n\n    "
    },
    {
        "ID": 1168,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function stopService($services) { $services = is_array($services) ? $services : func_get_args(); foreach ($services as $service) { if ($this->installed($service)) { info(\"Stopping {$service}...\"); $this->cli->quietly('sudo brew services stop '.$service); } } }\n\n    ### Response: Stop the given Homebrew services.\n\n@param.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void expandCapacity() { String[] newArray = new String[array.length << 1]; System.arraycopy(array, 0, newArray, 0, index); array = newArray; }\n\n    ### Response:",
        "ground_truth": "Expands internal string array by multiplying its size by 2.",
        "predict": " Stop the given Homebrew services.\n\n@param.\n\n    "
    },
    {
        "ID": 1169,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def cursor_position(self, value): \"\"\" Setting cursor position. \"\"\" assert isinstance(value, int) assert value <= len(self.text) changed = self._set_cursor_position(value) if changed: self._cursor_position_changed()\n\n    ### Response: Setting cursor position..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected int calculateLength() { int len = 0; for (int i = 0; i < index; i++) { len += array[i].length(); } return len; }\n\n    ### Response:",
        "ground_truth": "Calculates string length.",
        "predict": " Setting cursor position..\n\n    "
    },
    {
        "ID": 1170,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def isosurface_from_data(data, isolevel, origin, spacing): \"\"\"Small wrapper to get directly vertices and faces to feed into programs \"\"\" spacing = np.array(extent/resolution) if isolevel >= 0: triangles = marching_cubes(data, isolevel) else: # Wrong traingle unwinding roder -- god only knows why triangles = marching_cubes(-data, -isolevel) faces = [] verts = [] for i, t in enumerate(triangles): faces.append([i * 3, i * 3 +1, i * 3 + 2]) verts.extend(t) faces = np.array(faces) verts = origin + spacing/2 + np.array(verts)*spacing return verts, faces\n\n    ### Response: Small wrapper to get directly vertices and faces to feed into programs.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected String createMixingMessage(final BeanDefinition targetBeanDefinition, final BeanDefinition refBeanDefinition) { return \"Scopes mixing detected: \" + refBeanDefinition.name + \"@\" + refBeanDefinition.scope.getClass().getSimpleName() + \" -> \" + targetBeanDefinition.name + \"@\" + targetBeanDefinition.scope.getClass().getSimpleName(); }\n\n    ### Response:",
        "ground_truth": "Creates mixed scope message.",
        "predict": " Small wrapper to get directly vertices and faces to feed into programs.\n\n    "
    },
    {
        "ID": 1171,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private function getWhereInString() { // String holder $string = ''; // If there are not where in conditions, return empty if (!count($this->whereIn)) { return $string; } // Iterate where creating the full conditions foreach ($this->whereIn as $where) { $string .= ' AND ' . $where['column'] . ' IN (' . implode(', ', $where['values']) . ')'; } // Return complete where in string return $string; }\n\n    ### Response: Returns the where in array as a WHERE IN string\n\n@return string WHERE string.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected Object createScopedProxyBean(final PetiteContainer petiteContainer, final BeanDefinition refBeanDefinition) { Class beanType = refBeanDefinition.type; Class proxyClass = proxyClasses.get(beanType); if (proxyClass == null) { // create proxy class only once if (refBeanDefinition instanceof ProxettaBeanDefinition) { // special case, double proxy! ProxettaBeanDefinition pbd = (ProxettaBeanDefinition) refBeanDefinition; ProxyProxetta proxetta = Proxetta.proxyProxetta().withAspects(ArraysUtil.insert(pbd.proxyAspects, aspect, 0)); proxetta.setClassNameSuffix(\"$ScopedProxy\"); proxetta.setVariableClassName(true); ProxyProxettaFactory builder = proxetta.proxy().setTarget(pbd.originalTarget); proxyClass = builder.define(); proxyClasses.put(beanType, proxyClass); } else { ProxyProxetta proxetta = Proxetta.proxyProxetta().withAspect(aspect); proxetta.setClassNameSuffix(\"$ScopedProxy\"); proxetta.setVariableClassName(true); ProxyProxettaFactory builder = proxetta.proxy().setTarget(beanType); proxyClass = builder.define(); proxyClasses.put(beanType, proxyClass); } } Object proxy; try { proxy = ClassUtil.newInstance(proxyClass); Field field = proxyClass.getField(\"$__petiteContainer$0\"); field.set(proxy, petiteContainer); field = proxyClass.getField(\"$__name$0\"); field.set(proxy, refBeanDefinition.name); } catch (Exception ex) { throw new PetiteException(ex); } return proxy; }\n\n    ### Response:",
        "ground_truth": "Creates scoped proxy bean for given bean definition.",
        "predict": " Returns the where in array as a WHERE IN string\n\n@return string WHERE string.\n\n    "
    },
    {
        "ID": 1172,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def clean(self, timeout=60): \"\"\"Deletes the contents of the index. This method blocks until the index is empty, because it needs to restore values at the end of the operation. :param timeout: The time-out period for the operation, in seconds (the default is 60). :type timeout: ``integer`` :return: The :class:`Index`. \"\"\" self.refresh() tds = self['maxTotalDataSizeMB'] ftp = self['frozenTimePeriodInSecs'] was_disabled_initially = self.disabled try: if (not was_disabled_initially and \\ self.service.splunk_version < (5,)): # Need to disable the index first on Splunk 4.x, # but it doesn't work to disable it on 5.0. self.disable() self.update(maxTotalDataSizeMB=1, frozenTimePeriodInSecs=1) self.roll_hot_buckets() # Wait until event count goes to 0. start = datetime.now() diff = timedelta(seconds=timeout) while self.content.totalEventCount != '0' and datetime.now() < start+diff: sleep(1) self.refresh() if self.content.totalEventCount != '0': raise OperationError(\"Cleaning index %s took longer than %s seconds; timing out.\" % (self.name, timeout)) finally: # Restore original values self.update(maxTotalDataSizeMB=tds, frozenTimePeriodInSecs=ftp) if (not was_disabled_initially and \\ self.service.splunk_version < (5,)): # Re-enable the index if it was originally enabled and we messed with it. self.enable() return self\n\n    ### Response: Deletes the contents of the index.\n\n        This method blocks until the index is empty, because it needs to restore\n        values at the end of the operation.\n\n        :param timeout: The time-out period for the operation, in seconds (the\n            default is 60).\n        :type timeout: ``integer``\n\n        :return: The :class:`Index`..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void loopBody() throws JspException { JspFragment body = getJspBody(); if (body == null) { return; } LoopIterator loopIterator = new LoopIterator(start, end, step, modulus); if (status != null) { getJspContext().setAttribute(status, loopIterator); } while (loopIterator.next()) { TagUtil.invokeBody(body); } if (status != null) { getJspContext().removeAttribute(status); } }\n\n    ### Response:",
        "ground_truth": "Loops body.",
        "predict": " Deletes the contents of the index.\n\n        This method blocks until the index is empty, because it needs to restore\n        values at the end of the operation.\n\n        :param timeout: The time-out period for the operation, in seconds (the\n            default is 60).\n        :type timeout: ``integer``\n\n        :return: The :class:`Index`..\n\n    "
    },
    {
        "ID": 1173,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func RematchPointersToClusters( clusters []*clustering.Cluster, pointers []geo.Pointer, distancer clustering.ClusterDistancer, threshold float64, ) []*clustering.Cluster { if len(clusters) == 0 { return []*clustering.Cluster{} } newClusters := make([]*clustering.Cluster, 0, len(clusters)) // clear the current members for _, c := range clusters { newClusters = append(newClusters, clustering.NewClusterWithCentroid(c.Centroid)) } // remap all the groupers to these new groups for _, pointer := range pointers { minDist := math.MaxFloat64 index := 0 pointerCluster := clustering.NewCluster(pointer) // find the closest group for i, c := range newClusters { if d := distancer.ClusterDistance(c, pointerCluster); d < minDist { minDist = d index = i } } if minDist < threshold { // leaves the center as found by the previous clustering newClusters[index].Pointers = append(newClusters[index].Pointers, pointer) } } return newClusters }\n\n    ### Response: // RematchPointersToClusters will take a set of pointers and map them to the closest cluster.\n// Basically creates a new cluster from that one point and does the ClusterDistance between them.\n// Will return a new list..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void init() { File[] filesArray = dir.listFiles(); filesCount = 0; if (filesArray != null) { filesCount = filesArray.length; for (File file : filesArray) { if (!acceptFile(file)) { continue; } map.put(file, new MutableLong(file.lastModified())); } } }\n\n    ### Response:",
        "ground_truth": "Initializes dir watcher by reading all files\nfrom watched folder.",
        "predict": " // RematchPointersToClusters will take a set of pointers and map them to the closest cluster.\n// Basically creates a new cluster from that one point and does the ClusterDistance between them.\n// Will return a new list..\n\n    "
    },
    {
        "ID": 1174,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function buildAPIs(vueObj) { const funcArray = [propsAPIObject, methodsAPIObject, eventsAPIObject, slotsAPIObject] const compAPIObj = funcArray.reduce((apiObj, curFn) => { const obj = curFn(vueObj) if (obj !== null) { Object.assign(apiObj, obj) } return apiObj }, {}) return compAPIObj }\n\n    ### Response: build data objects for Vue props, methods, events, and slots\n@param {Object} vueObj -- JSON object returned by vue-docgen-api library\n@returns {Object} -- obJect representing different parts of component API.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected boolean acceptFile(final File file) { if (!file.isFile()) { return false; // ignore non-files } String fileName = file.getName(); if (ignoreDotFiles) { if (fileName.startsWith(StringPool.DOT)) { return false; // ignore hidden files } } if (patterns == null) { return true; } return Wildcard.matchOne(fileName, patterns) != -1; }\n\n    ### Response:",
        "ground_truth": "Accepts if a file is going to be watched.",
        "predict": " build data objects for Vue props, methods, events, and slots\n@param {Object} vueObj -- JSON object returned by vue-docgen-api library\n@returns {Object} -- obJect representing different parts of component API.\n\n    "
    },
    {
        "ID": 1175,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function getValue() { $options = parent::getValue(); if (count($options)) { if (empty( $options[0] )) { $collection = $options->getValues(); return $collection[0]->getName(); } return $options[0]->getName(); } return ''; }\n\n    ### Response: Get the selected value\n\n@return string.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public DirWatcher useWatchFile(final String name) { watchFile = new File(dir, name); if (!watchFile.isFile() || !watchFile.exists()) { try { FileUtil.touch(watchFile); } catch (IOException ioex) { throw new DirWatcherException(\"Invalid watch file: \" + name, ioex); } } watchFileLastAccessTime = watchFile.lastModified(); return this; }\n\n    ### Response:",
        "ground_truth": "Enables usage of provided watch file.",
        "predict": " Get the selected value\n\n@return string.\n\n    "
    },
    {
        "ID": 1176,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void calculateFitness(List<S> solutionSet) { // Obtains the lower and upper bounds of the population double[] maximumValues = new double[problem.getNumberOfObjectives()]; double[] minimumValues = new double[problem.getNumberOfObjectives()]; for (int i = 0; i < problem.getNumberOfObjectives(); i++) { maximumValues[i] = -Double.MAX_VALUE; minimumValues[i] = Double.MAX_VALUE; } for (S solution : solutionSet) { for (int obj = 0; obj < problem.getNumberOfObjectives(); obj++) { double value = solution.getObjective(obj); if (value > maximumValues[obj]) { maximumValues[obj] = value; } if (value < minimumValues[obj]) { minimumValues[obj] = value; } } } computeIndicatorValuesHD(solutionSet, maximumValues, minimumValues); for (int pos = 0; pos < solutionSet.size(); pos++) { fitness(solutionSet, pos); } }\n\n    ### Response: Calculate the fitness for the entire population..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void start(final long pollingInterval) { if (timer == null) { if (!startBlank) { init(); } timer = new Timer(true); timer.schedule(new WatchTask(), 0, pollingInterval); } }\n\n    ### Response:",
        "ground_truth": "Starts the watcher.",
        "predict": " Calculate the fitness for the entire population..\n\n    "
    },
    {
        "ID": 1177,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected static function setDebugHeader($txt) { if (Container::get('config')->get('app_debug')) { Container::get('response')->setHeader('Kotori-Debug', str_replace(\"\\r\\n\", ' ', $txt)); } }\n\n    ### Response: output debug info to header\n\n@param  string $txt\n@return void.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void onChange(final DirWatcherEvent.Type type, final File file) { listeners.accept(new DirWatcherEvent(type, file)); }\n\n    ### Response:",
        "ground_truth": "Triggers listeners on file change.",
        "predict": " output debug info to header\n\n@param  string $txt\n@return void.\n\n    "
    },
    {
        "ID": 1178,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void ensureSize(int maxPartitionOrder) { if (capacityByOrder >= maxPartitionOrder) return; parameters = new int[(1 << maxPartitionOrder)]; rawBits = new int[(1 << maxPartitionOrder)]; capacityByOrder = maxPartitionOrder; }\n\n    ### Response: Ensure enough menory has been allocated.\n@param maxPartitionOrder The maximum partition order.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void add(final Enumeration<T> enumeration) { if (allEnumerations.contains(enumeration)) { throw new IllegalArgumentException(\"Duplicate enumeration\"); } allEnumerations.add(enumeration); }\n\n    ### Response:",
        "ground_truth": "Adds an enumeration to this composite.",
        "predict": " Ensure enough menory has been allocated.\n@param maxPartitionOrder The maximum partition order.\n\n    "
    },
    {
        "ID": 1179,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def write_fc3_to_hdf5(fc3, filename='fc3.hdf5', p2s_map=None, compression=None): \"\"\"Write third-order force constants in hdf5 format. Parameters ---------- force_constants : ndarray Force constants shape=(n_satom, n_satom, n_satom, 3, 3, 3) or (n_patom, n_satom, n_satom,3,3,3), dtype=double filename : str Filename to be used. p2s_map : ndarray, optional Primitive atom indices in supercell index system shape=(n_patom,), dtype=intc compression : str or int, optional h5py's lossless compression filters (e.g., \"gzip\", \"lzf\"). See the detail at docstring of h5py.Group.create_dataset. Default is None. \"\"\" with h5py.File(filename, 'w') as w: w.create_dataset('fc3', data=fc3, compression=compression) if p2s_map is not None: w.create_dataset('p2s_map', data=p2s_map)\n\n    ### Response: Write third-order force constants in hdf5 format.\n\n    Parameters\n    ----------\n    force_constants : ndarray\n        Force constants\n        shape=(n_satom, n_satom, n_satom, 3, 3, 3) or\n        (n_patom, n_satom, n_satom,3,3,3), dtype=double\n    filename : str\n        Filename to be used.\n    p2s_map : ndarray, optional\n        Primitive atom indices in supercell index system\n        shape=(n_patom,), dtype=intc\n    compression : str or int, optional\n        h5py's lossless compression filters (e.g., \"gzip\", \"lzf\").\n        See the detail at docstring of h5py.Group.create_dataset. Default is\n        None..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    int computeFieldInfoSize() { // The access_flags, name_index, descriptor_index and attributes_count fields use 8 bytes. int size = 8; // For ease of reference, we use here the same attribute order as in Section 4.7 of the JVMS. if (constantValueIndex != 0) { // ConstantValue attributes always use 8 bytes. symbolTable.addConstantUtf8(Constants.CONSTANT_VALUE); size += 8; } // Before Java 1.5, synthetic fields are represented with a Synthetic attribute. if ((accessFlags & Opcodes.ACC_SYNTHETIC) != 0 && symbolTable.getMajorVersion() < Opcodes.V1_5) { // Synthetic attributes always use 6 bytes. symbolTable.addConstantUtf8(Constants.SYNTHETIC); size += 6; } if (signatureIndex != 0) { // Signature attributes always use 8 bytes. symbolTable.addConstantUtf8(Constants.SIGNATURE); size += 8; } // ACC_DEPRECATED is ASM specific, the ClassFile format uses a Deprecated attribute instead. if ((accessFlags & Opcodes.ACC_DEPRECATED) != 0) { // Deprecated attributes always use 6 bytes. symbolTable.addConstantUtf8(Constants.DEPRECATED); size += 6; } if (lastRuntimeVisibleAnnotation != null) { size += lastRuntimeVisibleAnnotation.computeAnnotationsSize( Constants.RUNTIME_VISIBLE_ANNOTATIONS); } if (lastRuntimeInvisibleAnnotation != null) { size += lastRuntimeInvisibleAnnotation.computeAnnotationsSize( Constants.RUNTIME_INVISIBLE_ANNOTATIONS); } if (lastRuntimeVisibleTypeAnnotation != null) { size += lastRuntimeVisibleTypeAnnotation.computeAnnotationsSize( Constants.RUNTIME_VISIBLE_TYPE_ANNOTATIONS); } if (lastRuntimeInvisibleTypeAnnotation != null) { size += lastRuntimeInvisibleTypeAnnotation.computeAnnotationsSize( Constants.RUNTIME_INVISIBLE_TYPE_ANNOTATIONS); } if (firstAttribute != null) { size += firstAttribute.computeAttributesSize(symbolTable); } return size; }\n\n    ### Response:",
        "ground_truth": "Returns the size of the field_info JVMS structure generated by this FieldWriter. Also adds the\nnames of the attributes of this field in the constant pool.\n\n@return the size in bytes of the field_info JVMS structure.",
        "predict": " Write third-order force constants in hdf5 format.\n\n    Parameters\n    ----------\n    force_constants : ndarray\n        Force constants\n        shape=(n_satom, n_satom, n_satom, 3, 3, 3) or\n        (n_patom, n_satom, n_satom,3,3,3), dtype=double\n    filename : str\n        Filename to be used.\n    p2s_map : ndarray, optional\n        Primitive atom indices in supercell index system\n        shape=(n_patom,), dtype=intc\n    compression : str or int, optional\n        h5py's lossless compression filters (e.g., \"gzip\", \"lzf\").\n        See the detail at docstring of h5py.Group.create_dataset. Default is\n        None..\n\n    "
    },
    {
        "ID": 1180,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void removeAllDependencies() { registryLock.writeLock().lock(); try { dependingRegistryMapLock.writeLock().lock(); try { List<Registry> dependingRegistryList = new ArrayList<>(dependingRegistryMap.keySet()); Collections.reverse(dependingRegistryList); dependingRegistryList.stream().forEach((registry) -> { dependingRegistryMap.remove(registry).shutdown(); }); } finally { dependingRegistryMapLock.writeLock().unlock(); } } finally { registryLock.writeLock().unlock(); } }\n\n    ### Response: Removal of all registered registry dependencies in the reversed order in which they where added..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    void putFieldInfo(final ByteVector output) { boolean useSyntheticAttribute = symbolTable.getMajorVersion() < Opcodes.V1_5; // Put the access_flags, name_index and descriptor_index fields. int mask = useSyntheticAttribute ? Opcodes.ACC_SYNTHETIC : 0; output.putShort(accessFlags & ~mask).putShort(nameIndex).putShort(descriptorIndex); // Compute and put the attributes_count field. // For ease of reference, we use here the same attribute order as in Section 4.7 of the JVMS. int attributesCount = 0; if (constantValueIndex != 0) { ++attributesCount; } if ((accessFlags & Opcodes.ACC_SYNTHETIC) != 0 && useSyntheticAttribute) { ++attributesCount; } if (signatureIndex != 0) { ++attributesCount; } if ((accessFlags & Opcodes.ACC_DEPRECATED) != 0) { ++attributesCount; } if (lastRuntimeVisibleAnnotation != null) { ++attributesCount; } if (lastRuntimeInvisibleAnnotation != null) { ++attributesCount; } if (lastRuntimeVisibleTypeAnnotation != null) { ++attributesCount; } if (lastRuntimeInvisibleTypeAnnotation != null) { ++attributesCount; } if (firstAttribute != null) { attributesCount += firstAttribute.getAttributeCount(); } output.putShort(attributesCount); // Put the field_info attributes. // For ease of reference, we use here the same attribute order as in Section 4.7 of the JVMS. if (constantValueIndex != 0) { output .putShort(symbolTable.addConstantUtf8(Constants.CONSTANT_VALUE)) .putInt(2) .putShort(constantValueIndex); } if ((accessFlags & Opcodes.ACC_SYNTHETIC) != 0 && useSyntheticAttribute) { output.putShort(symbolTable.addConstantUtf8(Constants.SYNTHETIC)).putInt(0); } if (signatureIndex != 0) { output .putShort(symbolTable.addConstantUtf8(Constants.SIGNATURE)) .putInt(2) .putShort(signatureIndex); } if ((accessFlags & Opcodes.ACC_DEPRECATED) != 0) { output.putShort(symbolTable.addConstantUtf8(Constants.DEPRECATED)).putInt(0); } if (lastRuntimeVisibleAnnotation != null) { lastRuntimeVisibleAnnotation.putAnnotations( symbolTable.addConstantUtf8(Constants.RUNTIME_VISIBLE_ANNOTATIONS), output); } if (lastRuntimeInvisibleAnnotation != null) { lastRuntimeInvisibleAnnotation.putAnnotations( symbolTable.addConstantUtf8(Constants.RUNTIME_INVISIBLE_ANNOTATIONS), output); } if (lastRuntimeVisibleTypeAnnotation != null) { lastRuntimeVisibleTypeAnnotation.putAnnotations( symbolTable.addConstantUtf8(Constants.RUNTIME_VISIBLE_TYPE_ANNOTATIONS), output); } if (lastRuntimeInvisibleTypeAnnotation != null) { lastRuntimeInvisibleTypeAnnotation.putAnnotations( symbolTable.addConstantUtf8(Constants.RUNTIME_INVISIBLE_TYPE_ANNOTATIONS), output); } if (firstAttribute != null) { firstAttribute.putAttributes(symbolTable, output); } }\n\n    ### Response:",
        "ground_truth": "Puts the content of the field_info JVMS structure generated by this FieldWriter into the given\nByteVector.\n\n@param output where the field_info structure must be put.",
        "predict": " Removal of all registered registry dependencies in the reversed order in which they where added..\n\n    "
    },
    {
        "ID": 1181,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @View(name = \"by_username\", map = \"function(doc) { if(doc.username){ emit(doc.username, doc) } }\") public CouchDbProfileDocument findByUsername(final String username) { return queryView(\"by_username\", username).stream().findFirst().orElse(null); }\n\n    ### Response: Find profile by username.\n@param username to be searched for\n@return profile found.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Target ofValue(final Object value, final ScopeData scopeData) { return new Target(value, null, scopeData, null, VALUE_INSTANCE_CREATOR); }\n\n    ### Response:",
        "ground_truth": "Creates a common target over a value, with known scope data.",
        "predict": " Find profile by username.\n@param username to be searched for\n@return profile found.\n\n    "
    },
    {
        "ID": 1182,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function fingerprint(str) { var /** @type {?} */ utf8 = utf8Encode(str); var _a = [hash32(utf8, 0), hash32(utf8, 102072)], hi = _a[0], lo = _a[1]; if (hi == 0 && (lo == 0 || lo == 1)) { hi = hi ^ 0x130f9bef; lo = lo ^ -0x6b5f56d8; } return [hi, lo]; }\n\n    ### Response: Compute the fingerprint of the given string\n\nThe output is 64 bit number encoded as a decimal string\n\nbased on:\nhttps://github.com/google/closure-compiler/blob/master/src/com/google/javascript/jscomp/GoogleJsMessageIdGenerator.java\n@param {?} str\n@return {?}.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void writeValue(final InjectionPoint injectionPoint, final Object propertyValue, final boolean silent) { writeValue(injectionPoint.targetName(), propertyValue, silent); }\n\n    ### Response:",
        "ground_truth": "Writes value to this target. Depending on a flag, writing the value can be\ncompletely silent, when no exception is thrown and with top performances.\nOtherwise, an exception is thrown on a failure.",
        "predict": " Compute the fingerprint of the given string\n\nThe output is 64 bit number encoded as a decimal string\n\nbased on:\nhttps://github.com/google/closure-compiler/blob/master/src/com/google/javascript/jscomp/GoogleJsMessageIdGenerator.java\n@param {?} str\n@return {?}.\n\n    "
    },
    {
        "ID": 1183,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func DigestTranslator(prefix string) func(digest.Digest) string { return func(dgst digest.Digest) string { return prefix + \"@\" + dgst.String() } }\n\n    ### Response: // DigestTranslator creates a digest reference by adding the\n// digest to an image name.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void decorate(final Writer writer, final char[] pageContent, final char[] decoraContent) throws IOException { DecoraTag[] decoraTags = parseDecorator(decoraContent); parsePage(pageContent, decoraTags); writeDecoratedPage(writer, decoraContent, pageContent, decoraTags); }\n\n    ### Response:",
        "ground_truth": "Decorates page content with decorator template and outputs the result.",
        "predict": " // DigestTranslator creates a digest reference by adding the\n// digest to an image name.\n\n    "
    },
    {
        "ID": 1184,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function pushLanguage(int $lanId): void { $this->language = Abc::$DL->abcBabelCoreLanguageGetDetails($lanId); array_push($this->stack, $this->language); }\n\n    ### Response: Sets and pushes a new current language.\n\n@param int $lanId The ID of the new current language.\n\n@return void\n\n@since 1.0.0\n@api.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void parsePage(final char[] pageContent, final DecoraTag[] decoraTags) { LagartoParser lagartoParser = new LagartoParser(pageContent); PageRegionExtractor writer = new PageRegionExtractor(decoraTags); lagartoParser.parse(writer); }\n\n    ### Response:",
        "ground_truth": "Parses target page and extracts Decora regions for replacements.",
        "predict": " Sets and pushes a new current language.\n\n@param int $lanId The ID of the new current language.\n\n@return void\n\n@since 1.0.0\n@api.\n\n    "
    },
    {
        "ID": 1185,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function writeSshFile($sshCommand) { $tempDir = sys_get_temp_dir(); $tempFile = tempnam($tempDir, 'cli-git-ssh'); if (!$tempFile) { throw new \\RuntimeException('Failed to create temporary file in: ' . $tempDir); } if (!file_put_contents($tempFile, trim($sshCommand) . \"\\n\")) { throw new \\RuntimeException('Failed to write temporary file: ' . $tempFile); } if (!chmod($tempFile, 0750)) { throw new \\RuntimeException('Failed to make temporary SSH command file executable: ' . $tempFile); } $this->sshCommandFile = $tempFile; return $tempFile; }\n\n    ### Response: Write an SSH command to a temporary file to be used with GIT_SSH.\n\n@param string $sshCommand\n\n@return string.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void writeDecoratedPage(final Writer out, final char[] decoratorContent, final char[] pageContent, final DecoraTag[] decoraTags) throws IOException { int ndx = 0; for (DecoraTag decoraTag : decoraTags) { // [1] just copy content before the Decora tag int decoratorLen = decoraTag.getStartIndex() - ndx; if (decoratorLen <= 0) { continue; } out.write(decoratorContent, ndx, decoratorLen); ndx = decoraTag.getEndIndex(); // [2] now write region at the place of Decora tag int regionLen = decoraTag.getRegionLength(); if (regionLen == 0) { if (decoraTag.hasDefaultValue()) { out.write(decoratorContent, decoraTag.getDefaultValueStart(), decoraTag.getDefaultValueLength()); } } else { writeRegion(out, pageContent, decoraTag, decoraTags); } } // write remaining content out.write(decoratorContent, ndx, decoratorContent.length - ndx); }\n\n    ### Response:",
        "ground_truth": "Writes decorated content.",
        "predict": " Write an SSH command to a temporary file to be used with GIT_SSH.\n\n@param string $sshCommand\n\n@return string.\n\n    "
    },
    {
        "ID": 1186,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function setLocale(Locale $locale) { putenv('LANG='.$locale); setlocale(LC_ALL, [$locale.'.utf8', $locale]); $this->curLocale = $locale; $this->sessionSegment->set('locale', $locale); }\n\n    ### Response: Set the current locale.\n\n@param Locale $locale Locale.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void writeRegion(final Writer out, final char[] pageContent, final DecoraTag decoraTag, final DecoraTag[] decoraTags) throws IOException { int regionStart = decoraTag.getRegionStart(); int regionLen = decoraTag.getRegionLength(); int regionEnd = regionStart + regionLen; for (DecoraTag innerDecoraTag : decoraTags) { if (decoraTag == innerDecoraTag) { continue; } if (decoraTag.isRegionUndefined()) { continue; } if (innerDecoraTag.isInsideOtherTagRegion(decoraTag)) { // write everything from region start to the inner Decora tag out.write(pageContent, regionStart, innerDecoraTag.getRegionTagStart() - regionStart); regionStart = innerDecoraTag.getRegionTagEnd(); } } // write remaining content of the region out.write(pageContent, regionStart, regionEnd - regionStart); }\n\n    ### Response:",
        "ground_truth": "Writes region to output, but extracts all inner regions.",
        "predict": " Set the current locale.\n\n@param Locale $locale Locale.\n\n    "
    },
    {
        "ID": 1187,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def post_message(self, channel_id, message, **kwargs): \"\"\" Send a message using the slack Event API. Event messages should be used for more complex messages. See https://api.slack.com/methods/chat.postMessage for details on arguments can be included with your message. When using the post_message API, to have your message look like it's sent from your bot you'll need to include the `as_user` kwarg. Example of how to do this: server.slack.post_message(msg['channel'], 'My message', as_user=server.slack.username) \"\"\" params = { \"post_data\": { \"text\": message, \"channel\": channel_id, } } params[\"post_data\"].update(kwargs) return self.api_call(\"chat.postMessage\", **params)\n\n    ### Response: Send a message using the slack Event API.\n\n        Event messages should be used for more complex messages. See\n        https://api.slack.com/methods/chat.postMessage for details on arguments can be included\n        with your message.\n\n        When using the post_message API, to have your message look like it's sent from your bot\n        you'll need to include the `as_user` kwarg. Example of how to do this:\n            server.slack.post_message(msg['channel'], 'My message', as_user=server.slack.username).\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void start() throws IOException { serverSocket = new ServerSocket(listenPort, socketBacklog); serverSocket.setReuseAddress(true); executorService = Executors.newFixedThreadPool(threadPoolSize); running = true; while (running) { Socket socket = serverSocket.accept(); socket.setKeepAlive(false); executorService.execute(onSocketConnection(socket)); } executorService.shutdown(); }\n\n    ### Response:",
        "ground_truth": "Starts HTTP tunnel. Method ends when the tunnel is stopped.",
        "predict": " Send a message using the slack Event API.\n\n        Event messages should be used for more complex messages. See\n        https://api.slack.com/methods/chat.postMessage for details on arguments can be included\n        with your message.\n\n        When using the post_message API, to have your message look like it's sent from your bot\n        you'll need to include the `as_user` kwarg. Example of how to do this:\n            server.slack.post_message(msg['channel'], 'My message', as_user=server.slack.username).\n\n    "
    },
    {
        "ID": 1188,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def SoS_exec(script: str, _dict: dict = None, return_result: bool = True) -> None: '''Execute a statement.''' if _dict is None: _dict = env.sos_dict.dict() if not return_result: exec( compile(script, filename=stmtHash.hash(script), mode='exec'), _dict) return None try: stmts = list(ast.iter_child_nodes(ast.parse(script))) if not stmts: return if isinstance(stmts[-1], ast.Expr): # the last one is an expression and we will try to return the results # so we first execute the previous statements if len(stmts) > 1: exec( compile( ast.Module(body=stmts[:-1]), filename=stmtHash.hash(script), mode=\"exec\"), _dict) # then we eval the last one res = eval( compile( ast.Expression(body=stmts[-1].value), filename=stmtHash.hash(script), mode=\"eval\"), _dict) else: # otherwise we just execute the entire code exec( compile(script, filename=stmtHash.hash(script), mode='exec'), _dict) res = None except SyntaxError as e: raise SyntaxError(f\"Invalid code {script}: {e}\") # if check_readonly: # env.sos_dict.check_readonly_vars() return res\n\n    ### Response: Execute a statement..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static ProcessResult run(final Process process) throws InterruptedException { final ByteArrayOutputStream baos = new ByteArrayOutputStream(); final StreamGobbler outputGobbler = new StreamGobbler(process.getInputStream(), baos, OUTPUT_PREFIX); final StreamGobbler errorGobbler = new StreamGobbler(process.getErrorStream(), baos, ERROR_PREFIX); outputGobbler.start(); errorGobbler.start(); final int result = process.waitFor(); outputGobbler.waitFor(); errorGobbler.waitFor(); return new ProcessResult(result, baos.toString()); }\n\n    ### Response:",
        "ground_truth": "Executes a process and returns the process output and exit code.",
        "predict": " Execute a statement..\n\n    "
    },
    {
        "ID": 1189,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func init() { // algorithm taken from https://github.com/zenazn/goji/blob/master/web/middleware/request_id.go#L44-L50 var buf [12]byte var b64 string for len(b64) < 10 { rand.Read(buf[:]) b64 = base64.StdEncoding.EncodeToString(buf[:]) b64 = strings.NewReplacer(\"+\", \"\", \"/\", \"\").Replace(b64) } reqPrefix = string(b64[0:10]) }\n\n    ### Response: // Initialize common prefix on process startup..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override protected IMAPSSLStore getStore(final Session session) { SimpleAuthenticator simpleAuthenticator = (SimpleAuthenticator) authenticator; final URLName url; if (simpleAuthenticator == null) { url = new URLName( PROTOCOL_IMAP, host, port, StringPool.EMPTY, null, null); } else { final PasswordAuthentication pa = simpleAuthenticator.getPasswordAuthentication(); url = new URLName( PROTOCOL_IMAP, host, port, StringPool.EMPTY, pa.getUserName(), pa.getPassword()); } return new IMAPSSLStore(session, url); }\n\n    ### Response:",
        "ground_truth": "Returns email store.\n\n@param session {@link Session}\n@return {@link com.sun.mail.imap.IMAPSSLStore}",
        "predict": " // Initialize common prefix on process startup..\n\n    "
    },
    {
        "ID": 1190,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function setTerminalDimensions($width, $height) { @trigger_error(sprintf('%s is deprecated as of 3.2 and will be removed in 4.0. Set the COLUMNS and LINES env vars instead.', __METHOD__), E_USER_DEPRECATED); putenv('COLUMNS='.$width); putenv('LINES='.$height); return $this; }\n\n    ### Response: Sets terminal dimensions.\n\nCan be useful to force terminal dimensions for functional tests.\n\n@param int $width  The width\n@param int $height The height\n\n@return $this\n\n@deprecated since version 3.2, to be removed in 4.0. Set the COLUMNS and LINES env vars instead..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public ServletOutputStream createOutputStream() throws IOException { GzipResponseStream gzstream = new GzipResponseStream(origResponse); gzstream.setBuffer(threshold); return gzstream; }\n\n    ### Response:",
        "ground_truth": "Creates and returns a ServletOutputStream to write the content associated\nwith this Response.",
        "predict": " Sets terminal dimensions.\n\nCan be useful to force terminal dimensions for functional tests.\n\n@param int $width  The width\n@param int $height The height\n\n@return $this\n\n@deprecated since version 3.2, to be removed in 4.0. Set the COLUMNS and LINES env vars instead..\n\n    "
    },
    {
        "ID": 1191,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function(val, sendUpdatedEvt) { // don't always rewrite the value to able selections with Ctrl+A var uppered = val.toUpperCase(); if(uppered != this.getValue()) { inputEx.UpperCaseField.superclass.setValue.call(this, uppered, sendUpdatedEvt); } }\n\n    ### Response: Set the value and call toUpperCase\n@param {String} val The string\n@param {boolean} [sendUpdatedEvt] (optional) Wether this setValue should fire the updatedEvt or not (default is true, pass false to NOT send the event).\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public void init(final TemplateData templateData) { super.init(templateData); if (hint != null) { templateData.incrementHintsCount(); } }\n\n    ### Response:",
        "ground_truth": "Counts actual real hints.",
        "predict": " Set the value and call toUpperCase\n@param {String} val The string\n@param {boolean} [sendUpdatedEvt] (optional) Wether this setValue should fire the updatedEvt or not (default is true, pass false to NOT send the event).\n\n    "
    },
    {
        "ID": 1192,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static int optimalNumOfBits(long inputEntries, double fpp) { int numBits = (int) (-inputEntries * Math.log(fpp) / (Math.log(2) * Math.log(2))); return numBits; }\n\n    ### Response: Compute optimal bits number with given input entries and expected false positive probability.\n\n@param inputEntries\n@param fpp\n@return optimal bits number.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void appendAlias(final StringBuilder query, final DbEntityDescriptor ded, final DbEntityColumnDescriptor dec) { final ColumnAliasType columnAliasType = templateData.getColumnAliasType(); if (columnAliasType == null || columnAliasType == ColumnAliasType.TABLE_REFERENCE) { final String tableName = ded.getTableName(); final String columnName = dec.getColumnNameForQuery(); templateData.registerColumnDataForTableRef(tableRef, tableName); query.append(tableRef).append(columnAliasSeparator).append(columnName); } else if (columnAliasType == ColumnAliasType.COLUMN_CODE) { final String tableName = ded.getTableName(); final String columnName = dec.getColumnName(); final String code = templateData.registerColumnDataForColumnCode(tableName, columnName); query.append(code); } else if (columnAliasType == ColumnAliasType.TABLE_NAME) { final String tableName = ded.getTableNameForQuery(); final String columnName = dec.getColumnNameForQuery(); query.append(tableName).append(columnAliasSeparator).append(columnName); } }\n\n    ### Response:",
        "ground_truth": "Appends alias.",
        "predict": " Compute optimal bits number with given input entries and expected false positive probability.\n\n@param inputEntries\n@param fpp\n@return optimal bits number.\n\n    "
    },
    {
        "ID": 1193,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def import_locations(self, zone_file): \"\"\"Parse zoneinfo zone description data files. ``import_locations()`` returns a list of :class:`Zone` objects. It expects data files in one of the following formats:: AN +1211-06900 America/Curacao AO -0848+01314 Africa/Luanda AQ -7750+16636 Antarctica/McMurdo McMurdo Station, Ross Island Files containing the data in this format can be found in the :file:`zone.tab` file that is normally found in :file:`/usr/share/zoneinfo` on UNIX-like systems, or from the `standard distribution site`_. When processed by ``import_locations()`` a ``list`` object of the following style will be returned:: [Zone(None, None, \"AN\", \"America/Curacao\", None), Zone(None, None, \"AO\", \"Africa/Luanda\", None), Zone(None, None, \"AO\", \"Antartica/McMurdo\", [\"McMurdo Station\", \"Ross Island\"])] Args: zone_file (iter): ``zone.tab`` data to read Returns: list: Locations as :class:`Zone` objects Raises: FileFormatError: Unknown file format .. _standard distribution site: ftp://elsie.nci.nih.gov/pub/ \"\"\" self._zone_file = zone_file field_names = ('country', 'location', 'zone', 'comments') data = utils.prepare_csv_read(zone_file, field_names, delimiter=r\" \") for row in (x for x in data if not x['country'].startswith('#')): if row['comments']: row['comments'] = row['comments'].split(', ') self.append(Zone(**row))\n\n    ### Response: Parse zoneinfo zone description data files.\n\n        ``import_locations()`` returns a list of :class:`Zone` objects.\n\n        It expects data files in one of the following formats::\n\n            AN\t+1211-06900\tAmerica/Curacao\n            AO\t-0848+01314\tAfrica/Luanda\n            AQ\t-7750+16636\tAntarctica/McMurdo\tMcMurdo Station, Ross Island\n\n        Files containing the data in this format can be found in the\n        :file:`zone.tab` file that is normally found in\n        :file:`/usr/share/zoneinfo` on UNIX-like systems, or from the `standard\n        distribution site`_.\n\n        When processed by ``import_locations()`` a ``list`` object of the\n        following style will be returned::\n\n            [Zone(None, None, \"AN\", \"America/Curacao\", None),\n             Zone(None, None, \"AO\", \"Africa/Luanda\", None),\n             Zone(None, None, \"AO\", \"Antartica/McMurdo\",\n                  [\"McMurdo Station\", \"Ross Island\"])]\n\n        Args:\n            zone_file (iter): ``zone.tab`` data to read\n\n        Returns:\n            list: Locations as :class:`Zone` objects\n\n        Raises:\n            FileFormatError: Unknown file format\n\n        .. _standard distribution site: ftp://elsie.nci.nih.gov/pub/.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void appendColumnName(final StringBuilder query, final DbEntityDescriptor ded, final DbEntityColumnDescriptor dec) { query.append(resolveTable(tableRef, ded)).append('.').append(dec.getColumnName()); if (templateData.getColumnAliasType() != null) { // create column aliases query.append(AS); switch (templateData.getColumnAliasType()) { case TABLE_NAME: { final String tableName = ded.getTableNameForQuery(); query.append(tableName).append(columnAliasSeparator).append(dec.getColumnNameForQuery()); break; } case TABLE_REFERENCE: { final String tableName = ded.getTableName(); templateData.registerColumnDataForTableRef(tableRef, tableName); query.append(tableRef).append(columnAliasSeparator).append(dec.getColumnNameForQuery()); break; } case COLUMN_CODE: { final String tableName = ded.getTableName(); final String code = templateData.registerColumnDataForColumnCode(tableName, dec.getColumnName()); query.append(code); break; } } } }\n\n    ### Response:",
        "ground_truth": "Simply appends column name with optional table reference and alias.",
        "predict": " Parse zoneinfo zone description data files.\n\n        ``import_locations()`` returns a list of :class:`Zone` objects.\n\n        It expects data files in one of the following formats::\n\n            AN\t+1211-06900\tAmerica/Curacao\n            AO\t-0848+01314\tAfrica/Luanda\n            AQ\t-7750+16636\tAntarctica/McMurdo\tMcMurdo Station, Ross Island\n\n        Files containing the data in this format can be found in the\n        :file:`zone.tab` file that is normally found in\n        :file:`/usr/share/zoneinfo` on UNIX-like systems, or from the `standard\n        distribution site`_.\n\n        When processed by ``import_locations()`` a ``list`` object of the\n        following style will be returned::\n\n            [Zone(None, None, \"AN\", \"America/Curacao\", None),\n             Zone(None, None, \"AO\", \"Africa/Luanda\", None),\n             Zone(None, None, \"AO\", \"Antartica/McMurdo\",\n                  [\"McMurdo Station\", \"Ross Island\"])]\n\n        Args:\n            zone_file (iter): ``zone.tab`` data to read\n\n        Returns:\n            list: Locations as :class:`Zone` objects\n\n        Raises:\n            FileFormatError: Unknown file format\n\n        .. _standard distribution site: ftp://elsie.nci.nih.gov/pub/.\n\n    "
    },
    {
        "ID": 1194,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func LookupCAA(host string, server string, c *dns.Client, m *dns.Msg) (addrs []string, err error) { m.SetQuestion(dns.Fqdn(host), dns.TypeCAA) r, _, err := c.Exchange(m, net.JoinHostPort(server, \"53\")) if err != nil { return nil, err } for _, ans := range r.Answer { if t, ok := ans.(*dns.CAA); ok { flag := strconv.Itoa(int(t.Flag)) caarec := strings.Join([]string{flag, t.Tag, t.Value}, \" \") addrs = append(addrs, caarec) } } return }\n\n    ### Response: // CAA record lookup.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void addRule(final D ruleDefinition, final boolean include) { if (rules == null) { rules = new ArrayList<>(); } if (include) { includesCount++; } else { excludesCount++; } Rule<R> newRule = new Rule<>(makeRule(ruleDefinition), include); if (rules.contains(newRule)) { return; } rules.add(newRule); }\n\n    ### Response:",
        "ground_truth": "Adds a rule. Duplicates are not allowed and will be ignored.",
        "predict": " // CAA record lookup.\n\n    "
    },
    {
        "ID": 1195,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function setModuleDirs($dirs) { if(!is_array($dirs) && !($dirs instanceof \\Traversable)){ throw new \\InvalidArgumentException('Invalid argument $dirs; array or instance of Traversable expected'); } $this->moduleDirs = array(); foreach($dirs as $dir){ if(!is_dir($dir) || !is_readable($dir)){ throw new \\Exception('Illegal module directory specified: '.$dir); } $this->moduleDirs[] = $dir; } }\n\n    ### Response: Set module directories\n\n@param array $moduleDirs.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public boolean apply(final V value, final boolean blacklist, boolean flag) { if (rules == null) { return flag; } if (blacklist) { flag = processExcludes(value, flag); flag = processIncludes(value, flag); } else { flag = processIncludes(value, flag); flag = processExcludes(value, flag); } return flag; }\n\n    ### Response:",
        "ground_truth": "Applies rules on given flag. Flag is only changed if at least one rule\nmatched. Otherwise, the same value is returned. This way you can\nchain several rules and have the rule engine change the flag\nonly when a rule is matched.",
        "predict": " Set module directories\n\n@param array $moduleDirs.\n\n    "
    },
    {
        "ID": 1196,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (daemon *Daemon) ContainerUpdate(name string, hostConfig *container.HostConfig) (container.ContainerUpdateOKBody, error) { var warnings []string c, err := daemon.GetContainer(name) if err != nil { return container.ContainerUpdateOKBody{Warnings: warnings}, err } warnings, err = daemon.verifyContainerSettings(c.OS, hostConfig, nil, true) if err != nil { return container.ContainerUpdateOKBody{Warnings: warnings}, errdefs.InvalidParameter(err) } if err := daemon.update(name, hostConfig); err != nil { return container.ContainerUpdateOKBody{Warnings: warnings}, err } return container.ContainerUpdateOKBody{Warnings: warnings}, nil }\n\n    ### Response: // ContainerUpdate updates configuration of the container.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected boolean processIncludes(final V value, boolean include) { if (includesCount > 0) { if (!include) { for (Rule<R> rule : rules) { if (!rule.include) { continue; } if (inExRuleMatcher.accept(value, rule.value, true)) { include = true; break; } } } } return include; }\n\n    ### Response:",
        "ground_truth": "Process includes rules.",
        "predict": " // ContainerUpdate updates configuration of the container.\n\n    "
    },
    {
        "ID": 1197,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function check_STEP_file(filename, callback) { \"use strict\"; // \"ISO-10303-21;\" // \"HEADER;\" var stream = fs.createReadStream(filename, {flags:\"r\"}); var fileData = \"\"; stream.on('data', function (data) { fileData += data; // The next lines should be improved var lines = fileData.split(\"\\n\"); if (lines.length >= 2) { stream.destroy(); if (!pattern_ISO_10303_21.test(lines[0])) { my_callback(new Error(\"this file is not a STEP FILE : ISO_10303_21 missing\")); } else { my_callback(null, lines[0]); } } }); stream.on('error', function () { my_callback('Error', null); }); stream.on('end', function () { my_callback('File end reached without finding line', null); }); var callback_called = false; function my_callback(err, data) { if (!callback_called) { callback_called = true; callback(err, data); } } }\n\n    ### Response: return true if the file is a correct STEP file\na correct STEP file starts with\nISO-10303-21;\nHEADER;\n\n@param filename\n@param callback.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected boolean processExcludes(final V value, boolean include) { if (excludesCount > 0) { if (include) { for (Rule<R> rule : rules) { if (rule.include) { continue; } if (inExRuleMatcher.accept(value, rule.value, false)) { include = false; break; } } } } return include; }\n\n    ### Response:",
        "ground_truth": "Process excludes rules.",
        "predict": " return true if the file is a correct STEP file\na correct STEP file starts with\nISO-10303-21;\nHEADER;\n\n@param filename\n@param callback.\n\n    "
    },
    {
        "ID": 1198,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void addFunctionParameter(final String param) { if (param == null || param.isEmpty()) { throw new IllegalArgumentException(\"Parameter cannot be null or empty\"); } if (func_params == null) { func_params = Lists.newArrayList(); } func_params.add(param); }\n\n    ### Response: Adds parameters for the root expression only.\n@param param The parameter to add, cannot be null or empty\n@throws IllegalArgumentException if the parameter is null or empty.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String getPseudoClassName() { String name = getClass().getSimpleName().toLowerCase(); name = name.replace('_', '-'); return name; }\n\n    ### Response:",
        "ground_truth": "Returns pseudo-class name from simple class name.",
        "predict": " Adds parameters for the root expression only.\n@param param The parameter to add, cannot be null or empty\n@throws IllegalArgumentException if the parameter is null or empty.\n\n    "
    },
    {
        "ID": 1199,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def match(self, query): \"\"\"Try to find a match for a query in the channel commands. \"\"\" if not self.can_select: ch_id = self._device._properties['selected_channel'].get_value() if ch_id in self._ids: self._selected = ch_id else: return response = self._match_dialog(query, self._dialogues['__default__']) if response is not None: return response response = self._match_getters(query, self._getters['__default__']) if response is not None: return response else: for ch_id in self._ids: self._selected = ch_id response = self._match_dialog(query, self._dialogues[ch_id]) if response is not None: return response response = self._match_getters(query, self._getters[ch_id]) if response is not None: return response return self._match_setters(query)\n\n    ### Response: Try to find a match for a query in the channel commands..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public boolean addAll(final Collection<? extends E> c) { Iterator<? extends E> i = c.iterator(); boolean changed = false; while (i.hasNext()) { boolean ret = add(i.next()); if (!changed) { changed = ret; } } return changed; }\n\n    ### Response:",
        "ground_truth": "Add all of the elements in the given collection to this list.",
        "predict": " Try to find a match for a query in the channel commands..\n\n    "
    },
    {
        "ID": 1200,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function isIncluded($_name) { for ($i = 0, $_i = count($this->includes); $i < $_i; $i++) { if ($this->matchPath($this->includes[$i], $_name, $this->isCaseSensitive)) { return true; } } return false; }\n\n    ### Response: Tests whether a name matches against at least one include pattern.\n\n@param  string $_name the name to match\n@return bool true when the name matches against at least one.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected int findInsertionPoint(final E o, int low, int high) { while (low <= high) { int mid = (low + high) >>> 1; int delta = compare(get(mid), o); if (delta > 0) { high = mid - 1; } else { low = mid + 1; } } return low; }\n\n    ### Response:",
        "ground_truth": "Conducts a binary search to find the index where Object\nshould be inserted.",
        "predict": " Tests whether a name matches against at least one include pattern.\n\n@param  string $_name the name to match\n@return bool true when the name matches against at least one.\n\n    "
    },
    {
        "ID": 1201,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def create_asset(self, ): \"\"\"Create a asset and store it in the self.asset :returns: None :rtype: None :raises: None \"\"\" name = self.name_le.text() if not name: self.name_le.setPlaceholderText(\"Please enter a name!\") return desc = self.desc_pte.toPlainText() if not self.atype: atypei = self.atype_cb.currentIndex() assert atypei >= 0 self.atype = self.atypes[atypei] try: asset = djadapter.models.Asset(atype=self.atype, project=self.project, name=name, description=desc) asset.save() self.asset = asset self.accept() except: log.exception(\"Could not create new asset\")\n\n    ### Response: Create a asset and store it in the self.asset\n\n        :returns: None\n        :rtype: None\n        :raises: None.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void bindAnnotationConfig(final Class<? extends Annotation> annotationType, final Class<? extends ActionConfig> actionConfigClass) { final ActionConfig actionConfig = registerNewActionConfiguration(actionConfigClass); actionConfigs.put(annotationType, actionConfig); for (final AnnotationParser annotationParser : annotationParsers) { if (annotationType.equals(annotationParser.getAnnotationType())) { // parser already exists return; } } annotationParsers = ArraysUtil.append(annotationParsers, new AnnotationParser(annotationType, Action.class)); }\n\n    ### Response:",
        "ground_truth": "Binds action annotation and the action config. This can overwrite the default annotation\nconfiguration of an annotation.",
        "predict": " Create a asset and store it in the self.asset\n\n        :returns: None\n        :rtype: None\n        :raises: None.\n\n    "
    },
    {
        "ID": 1202,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def authenticate(self, request): \"\"\" Authenticate request using HTTP Basic authentication protocl. If the user is successfully identified, the corresponding user object is stored in `request.user`. If the request has already been authenticated (i.e. `request.user` has authenticated user object), this function does nothing. Raises Forbidden or Unauthorized if the user authentication fails. If no exception is thrown, the `request.user` will contain authenticated user object. \"\"\" # todo: can we trust that request.user variable is even defined? if request.user and request.user.is_authenticated(): return request.user if 'HTTP_AUTHORIZATION' in request.META: auth = request.META['HTTP_AUTHORIZATION'].split() if len(auth) == 2: if auth[0].lower() == \"basic\": uname, passwd = base64.b64decode(auth[1]).split(':') user = authenticate(username=uname, password=passwd) if user is not None: if user.is_active: request.user = user return user else: raise Forbidden() # either no auth header or using some other auth protocol, # we'll return a challenge for the user anyway raise Unauthorized()\n\n    ### Response: Authenticate request using HTTP Basic authentication protocl.\n\n        If the user is successfully identified, the corresponding user\n        object is stored in `request.user`. If the request has already\n        been authenticated (i.e. `request.user` has authenticated user\n        object), this function does nothing.\n\n        Raises Forbidden or Unauthorized if the user authentication\n        fails. If no exception is thrown, the `request.user` will\n        contain authenticated user object..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected ActionConfig registerNewActionConfiguration(final Class<? extends ActionConfig> actionConfigClass) { final ActionConfig newActionConfig = createActionConfig(actionConfigClass); actionConfigs.put(actionConfigClass, newActionConfig); return newActionConfig; }\n\n    ### Response:",
        "ground_truth": "Registers action configuration for given type.",
        "predict": " Authenticate request using HTTP Basic authentication protocl.\n\n        If the user is successfully identified, the corresponding user\n        object is stored in `request.user`. If the request has already\n        been authenticated (i.e. `request.user` has authenticated user\n        object), this function does nothing.\n\n        Raises Forbidden or Unauthorized if the user authentication\n        fails. If no exception is thrown, the `request.user` will\n        contain authenticated user object..\n\n    "
    },
    {
        "ID": 1203,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private function fixupPresentationRoleHypercubes( $roleKey ) { // $this->log()->info( \"$role\" ); if ( ! isset( $this->context->presentationRoleRefs[ $roleKey ] ) ) return; if ( ! isset( $this->context->presentationRoleRefs[ $roleKey ]['href'] ) ) return; // BMS 2016-02-15 /** * @var XBRL $home_taxonomy */ $home_taxonomy = $this->getTaxonomyForXSD( $this->context->presentationRoleRefs[ $roleKey ]['href'] ); // $home_taxonomy = $this; if ( ! isset( $this->context->presentationRoleRefs[ $roleKey ]['hierarchy'] ) ) return; $home_taxonomy->ResetAllItemCaches(); $roleHypercubes = $home_taxonomy->assignNodeHypercubes( $this->context->presentationRoleRefs[ $roleKey ]['hierarchy'], $this->context->presentationRoleRefs[ $roleKey ]['locators'], $roleKey ); $this->context->presentationRoleRefs[ $roleKey ]['hypercubes'] = $roleHypercubes; $this->pruneNodeHypercubes( $this->context->presentationRoleRefs[ $roleKey ]['hierarchy'] ); $before = count( $this->context->presentationRoleRefs[ $roleKey ]['paths'] ); // Although a 'paths' index has been built it needs to be re-built // because the 'pruneNodeHypercubes' function is likely to have removed // some nodes meaning the existing index will contain invalid entries $this->context->presentationRoleRefs[ $roleKey ]['paths'] = $home_taxonomy->createHierarchyPaths( $this->context->presentationRoleRefs[ $roleKey ]['hierarchy'] ); $after = count( $this->context->presentationRoleRefs[ $roleKey ]['paths'] ); if ( $before != $after ) { // $x = 1; } }\n\n    ### Response: Assign dimensions to presentation nodes for a specific role\n@param string  $roleKey \tThe role of the presentation node being\n@return void.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public ActionConfig lookup(final Class actionTypeOrAnnotationType) { final ActionConfig actionConfig = actionConfigs.get(actionTypeOrAnnotationType); if (actionConfig == null) { throw new MadvocException(\"ActionConfiguration not registered:\" + actionTypeOrAnnotationType.getName()); } return actionConfig; }\n\n    ### Response:",
        "ground_truth": "Lookup for the action configuration. Typically, the input argument is either the action type or annotation type.",
        "predict": " Assign dimensions to presentation nodes for a specific role\n@param string  $roleKey \tThe role of the presentation node being\n@return void.\n\n    "
    },
    {
        "ID": 1204,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function applyMixins(derivedCtor, baseCtors) { baseCtors.forEach(baseCtor => { Object.getOwnPropertyNames(baseCtor.prototype).forEach(name => { if (name !== 'constructor') { derivedCtor.prototype[name] = baseCtor.prototype[name]; } }); }); }\n\n    ### Response: Hack for multiple inheritance.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public <T extends ActionConfig> void with(final Class<T> actionConfigType, final Consumer<T> actionConfigConsumer) { final T actionConfig = (T) lookup(actionConfigType); actionConfigConsumer.accept(actionConfig); }\n\n    ### Response:",
        "ground_truth": "Fetch some action config and consumes it.",
        "predict": " Hack for multiple inheritance.\n\n    "
    },
    {
        "ID": 1205,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def match_path( ypath_str ) depth = 0 matches = [] YPath.each_path( ypath_str ) do |ypath| seg = match_segment( ypath, 0 ) matches += seg if seg end matches.uniq end\n\n    ### Response: YPath search returning a complete depth array.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected static void setupSystemMailProperties() { System.setProperty(\"mail.mime.encodefilename\", Boolean.valueOf(Defaults.mailMimeEncodefilename).toString()); System.setProperty(\"mail.mime.decodefilename\", Boolean.valueOf(Defaults.mailMimeDecodefilename).toString()); }\n\n    ### Response:",
        "ground_truth": "Setups the system email properties.",
        "predict": " YPath search returning a complete depth array.\n\n    "
    },
    {
        "ID": 1206,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected long executeTimers() { assert (Thread.currentThread() == worker); changed = false; // Fast track. if (timers.isEmpty()) { return 0L; } // Get the current time. long current = clock(); // Execute the timers that are already due. for (Entry<TimerInfo, Long> entry : timers.entries()) { final TimerInfo timerInfo = entry.getKey(); if (timerInfo.cancelled) { timers.remove(entry.getValue(), timerInfo); continue; } // If we have to wait to execute the item, same will be true about // all the following items (multimap is sorted). Thus we can stop // checking the subsequent timers and return the time to wait for // the next timer (at least 1ms). final Long key = entry.getValue(); if (key > current) { return key - current; } // Remove it from the list of active timers. timers.remove(key, timerInfo); // Trigger the timer. timerInfo.sink.timerEvent(timerInfo.id); } // Remove empty list object for (Entry<TimerInfo, Long> entry : timers.entries()) { final Long key = entry.getValue(); if (!timers.hasValues(key)) { timers.remove(key); } } if (changed) { return executeTimers(); } // There are no more timers. return 0L; }\n\n    ### Response: to wait to match the next timer or 0 meaning \"no timers\"..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void validateWithin(final ValidationContext vctx, final Object value) { vtor.validate(vctx, value, name); }\n\n    ### Response:",
        "ground_truth": "Validates provided context and value withing this constraint content.",
        "predict": " to wait to match the next timer or 0 meaning \"no timers\"..\n\n    "
    },
    {
        "ID": 1207,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function init() { self::$app = $this; spl_autoload_register(array($this['loader'], 'load')); $this->registerProviders(); $this->registerAliases(); }\n\n    ### Response: Register the auto-loader.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected Element findLastTable(final Node node) { Node tableNode = node; while (tableNode != null) { if (tableNode.getNodeType() == Node.NodeType.ELEMENT) { String tableNodeName = tableNode.getNodeName().toLowerCase(); if (tableNodeName.equals(\"table\")) { break; } } tableNode = tableNode.getParentNode(); } return (Element) tableNode; }\n\n    ### Response:",
        "ground_truth": "Finds the last table in stack of open elements.",
        "predict": " Register the auto-loader.\n\n    "
    },
    {
        "ID": 1208,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function _normalizeEOL($data) { return strtr($data, array( \"\\r\\n\" => $this->sep, \"\\r\" => $this->sep, \"\\n\" => $this->sep )); }\n\n    ### Response: Normalizes EOLs in string data.\n\n@param string $data  Data.\n\n@return string  Normalized data..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void fixElements() { for (Element fosterElement : fosterElements) { // find parent table Element lastTable = findLastTable(fosterElement); Node fosterElementParent = fosterElement.getParentNode(); // filter our foster element Node[] fosterChilds = fosterElement.getChildNodes(); for (Node fosterChild : fosterChilds) { if (fosterChild.getNodeType() == Node.NodeType.ELEMENT) { if (isOneOfTableElements((Element) fosterChild)) { // move all child table elements outside // the foster element fosterChild.detachFromParent(); fosterElementParent.insertBefore(fosterChild, fosterElement); } } } // finally, move foster element above the table fosterElement.detachFromParent(); lastTable.getParentNode().insertBefore(fosterElement, lastTable); } }\n\n    ### Response:",
        "ground_truth": "Performs the fix for elements.",
        "predict": " Normalizes EOLs in string data.\n\n@param string $data  Data.\n\n@return string  Normalized data..\n\n    "
    },
    {
        "ID": 1209,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _write(self, body, id): \"\"\" Respond to a WRITE command, sending some data over a virtual channel created by VIRTUAL. The answer is simply an acknowledgement, as it is simply meant to note that the write went through without errors. An occurrence of I{Write} on the wire, together with the response generated by this method, might have this apperance:: C: -Command: Write C: -Ask: 1 C: -Length: 13 C: Id: glyph@divmod.com->radix@twistedmatrix.com:q2q-example:0 C: C: HELLO WORLD C: S: -Answer: 1 S: \"\"\" if id not in self.connections: raise error.ConnectionDone() connection = self.connections[id] connection.dataReceived(body) return {}\n\n    ### Response: Respond to a WRITE command, sending some data over a virtual channel\n        created by VIRTUAL.  The answer is simply an acknowledgement, as it is\n        simply meant to note that the write went through without errors.\n\n        An occurrence of I{Write} on the wire, together with the response\n        generated by this method, might have this apperance::\n\n            C: -Command: Write\n            C: -Ask: 1\n            C: -Length: 13\n            C: Id: glyph@divmod.com->radix@twistedmatrix.com:q2q-example:0\n            C:\n            C: HELLO WORLD\n            C:\n            S: -Answer: 1\n            S:.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected Map<String, BeanData> registerSessionBeans(final HttpSession httpSession) { SessionBeans sessionBeans = new SessionBeans(); httpSession.setAttribute(SESSION_BEANS_NAME, sessionBeans); return sessionBeans.getBeanMap(); }\n\n    ### Response:",
        "ground_truth": "Registers new session destroy callback if not already registered.",
        "predict": " Respond to a WRITE command, sending some data over a virtual channel\n        created by VIRTUAL.  The answer is simply an acknowledgement, as it is\n        simply meant to note that the write went through without errors.\n\n        An occurrence of I{Write} on the wire, together with the response\n        generated by this method, might have this apperance::\n\n            C: -Command: Write\n            C: -Ask: 1\n            C: -Length: 13\n            C: Id: glyph@divmod.com->radix@twistedmatrix.com:q2q-example:0\n            C:\n            C: HELLO WORLD\n            C:\n            S: -Answer: 1\n            S:.\n\n    "
    },
    {
        "ID": 1210,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (l *LedDriver) Off() (err error) { if err = l.connection.DigitalWrite(l.Pin(), 0); err != nil { return } l.high = false return }\n\n    ### Response: // Off sets the led to a low state..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SuppressWarnings(\"unchecked\") protected Map<String, BeanData> getSessionMap(final HttpSession session) { SessionBeans sessionBeans = (SessionBeans) session.getAttribute(SESSION_BEANS_NAME); if (sessionBeans == null) { return null; } return sessionBeans.getBeanMap(); }\n\n    ### Response:",
        "ground_truth": "",
        "predict": " // Off sets the led to a low state..\n\n    "
    },
    {
        "ID": 1211,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def file_to_list(path): \"\"\" Return the contents of a file as a list when given a path. \"\"\" if not os.path.exists(path): ui.error(c.MESSAGES[\"path_missing\"], path) sys.exit(1) with codecs.open(path, \"r\", \"UTF-8\") as contents: lines = contents.read().splitlines() return lines\n\n    ### Response: Return the contents of a file as a list when given a path..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void init(String name, final String superName, final String suffix, final String reqProxyClassName) { int lastSlash = name.lastIndexOf('/'); this.targetPackage = lastSlash == -1 ? StringPool.EMPTY : name.substring(0, lastSlash).replace('/', '.'); this.targetClassname = name.substring(lastSlash + 1); this.nextSupername = superName; this.superName = name; // create proxy name if (reqProxyClassName != null) { if (reqProxyClassName.startsWith(DOT)) { name = name.substring(0, lastSlash) + '/' + reqProxyClassName.substring(1); } else if (reqProxyClassName.endsWith(DOT)) { name = reqProxyClassName.replace('.', '/') + this.targetClassname; } else { name = reqProxyClassName.replace('.', '/'); } } // add optional suffix if (suffix != null) { name += suffix; } this.thisReference = name; this.superReference = this.superName; }\n\n    ### Response:",
        "ground_truth": "Work data initialization.",
        "predict": " Return the contents of a file as a list when given a path..\n\n    "
    },
    {
        "ID": 1212,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (chat *Chat) ServiceHookToken() string { data, _ := chat.getData() //TODO: test backward compatibility cases for _, hook := range data.Hooks { for _, service := range hook.Services { if service == chat.ctx.ServiceName { return hook.Token } } } token := \"c\" + rndStr.Get(10) chat.addHook(serviceHook{ Token: token, Services: []string{chat.ctx.ServiceName}, }) return token }\n\n    ### Response: // ServiceHookToken returns Chats's hook token to use in webhook handling.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    void addAdviceInitMethod(final String name) { if (adviceInits == null) { adviceInits = new ArrayList<>(); } adviceInits.add(name); }\n\n    ### Response:",
        "ground_truth": "Saves used constructors of advices.",
        "predict": " // ServiceHookToken returns Chats's hook token to use in webhook handling.\n\n    "
    },
    {
        "ID": 1213,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (bf *Filter) MatchesOutPoint(outpoint *wire.OutPoint) bool { bf.mtx.Lock() match := bf.matchesOutPoint(outpoint) bf.mtx.Unlock() return match }\n\n    ### Response: // MatchesOutPoint returns true if the bloom filter might contain the passed\n// outpoint and false if it definitely does not.\n//\n// This function is safe for concurrent access..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void end() { if (newAction) { bundleId = bundlesManager.registerBundle(contextPath, actionPath, bundleId, bundleContentType, sources); } }\n\n    ### Response:",
        "ground_truth": "Called on end of parsing.",
        "predict": " // MatchesOutPoint returns true if the bloom filter might contain the passed\n// outpoint and false if it definitely does not.\n//\n// This function is safe for concurrent access..\n\n    "
    },
    {
        "ID": 1214,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (gce *Cloud) CreateInstanceGroup(name string, zone string) (*compute.InstanceGroup, error) { op, err := gce.service.InstanceGroups.Insert( gce.projectID, zone, &compute.InstanceGroup{Name: name}).Do() if err != nil { return nil, err } if err = gce.waitForZoneOp(op, zone); err != nil { return nil, err } return gce.GetInstanceGroup(name, zone) }\n\n    ### Response: // InstanceGroup Management\n// CreateInstanceGroup creates an instance group with the given instances. It is the callers responsibility to add named ports..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void add( final String section, final String key, final StringBuilder value, final boolean trim, final Operator operator) { // ignore lines without : or = if (key == null) { return; } String fullKey = key; if (section != null) { if (fullKey.length() != 0) { fullKey = section + '.' + fullKey; } else { fullKey = section; } } String v = value.toString(); if (trim) { if (valueTrimLeft && valueTrimRight) { v = v.trim(); } else if (valueTrimLeft) { v = StringUtil.trimLeft(v); } else { v = StringUtil.trimRight(v); } } if (v.length() == 0 && skipEmptyProps) { return; } extractProfilesAndAdd(fullKey, v, operator); }\n\n    ### Response:",
        "ground_truth": "Adds accumulated value to key and current section.",
        "predict": " // InstanceGroup Management\n// CreateInstanceGroup creates an instance group with the given instances. It is the callers responsibility to add named ports..\n\n    "
    },
    {
        "ID": 1215,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static function getCaller($count=1) { $dbts=debug_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS,6+$count); if ( ! is_array($dbts) || count($dbts) < 2 ) return null; if ( ! isset($dbts[0]['file']) ) return null; $myfile = $dbts[0]['file']; $retval = ''; foreach($dbts as $dbt) { if ( ! isset($dbt['file']) ) continue; if ( ! isset($dbt['line']) ) continue; if ( $myfile != $dbt['file'] ) { if ( strlen($retval) > 0 ) $retval .= \" \"; $retval.= $dbt['file'].':'.$dbt['line']; $count--; if ( $count < 1 ) return $retval; } } return $retval; }\n\n    ### Response: Need to replicate the code or U.php will be in the traceback.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void extractProfilesAndAdd(final String key, final String value, final Operator operator) { String fullKey = key; int ndx = fullKey.indexOf(PROFILE_LEFT); if (ndx == -1) { justAdd(fullKey, value, null, operator); return; } // extract profiles ArrayList<String> keyProfiles = new ArrayList<>(); while (true) { ndx = fullKey.indexOf(PROFILE_LEFT); if (ndx == -1) { break; } final int len = fullKey.length(); int ndx2 = fullKey.indexOf(PROFILE_RIGHT, ndx + 1); if (ndx2 == -1) { ndx2 = len; } // remember profile final String profile = fullKey.substring(ndx + 1, ndx2); keyProfiles.add(profile); // extract profile from key ndx2++; final String right = (ndx2 == len) ? StringPool.EMPTY : fullKey.substring(ndx2); fullKey = fullKey.substring(0, ndx) + right; } if (fullKey.startsWith(StringPool.DOT)) { // check for special case when only profile is defined in section fullKey = fullKey.substring(1); } // add value to extracted profiles justAdd(fullKey, value, keyProfiles, operator); }\n\n    ### Response:",
        "ground_truth": "Extracts profiles from the key name and adds key-value to them.",
        "predict": " Need to replicate the code or U.php will be in the traceback.\n\n    "
    },
    {
        "ID": 1216,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (s *Endpoint) SetCachePeriodInMinutes(v int64) *Endpoint { s.CachePeriodInMinutes = &v return s }\n\n    ### Response: // SetCachePeriodInMinutes sets the CachePeriodInMinutes field's value..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void justAdd(final String key, final String value, final ArrayList<String> keyProfiles, final Operator operator) { if (operator == Operator.COPY) { HashMap<String,Object> target = new HashMap<>(); String[] profiles = null; if (keyProfiles != null) { profiles = keyProfiles.toArray(new String[0]); } String[] sources = StringUtil.splitc(value, ','); for (String source : sources) { source = source.trim(); // try to extract profile for parsing String[] lookupProfiles = profiles; String lookupProfilesString = null; int leftIndex = source.indexOf('<'); if (leftIndex != -1) { int rightIndex = source.indexOf('>'); lookupProfilesString = source.substring(leftIndex + 1, rightIndex); source = source.substring(0, leftIndex).concat(source.substring(rightIndex + 1)); lookupProfiles = StringUtil.splitc(lookupProfilesString, ','); StringUtil.trimAll(lookupProfiles); } String[] wildcards = new String[] {source + \".*\"}; propsData.extract(target, lookupProfiles, wildcards, null); for (Map.Entry<String, Object> entry : target.entrySet()) { String entryKey = entry.getKey(); String suffix = entryKey.substring(source.length()); String newKey = key + suffix; String newValue = \"${\" + entryKey; if (lookupProfilesString != null) { newValue += \"<\" + lookupProfilesString + \">\"; } newValue += \"}\"; if (profiles == null) { propsData.putBaseProperty(newKey, newValue, false); } else { for (final String p : profiles) { propsData.putProfileProperty(newKey, newValue, p, false); } } } } return; } boolean append = operator == Operator.QUICK_APPEND; if (keyProfiles == null) { propsData.putBaseProperty(key, value, append); return; } for (final String p : keyProfiles) { propsData.putProfileProperty(key, value, p, append); } }\n\n    ### Response:",
        "ground_truth": "Core key-value addition.",
        "predict": " // SetCachePeriodInMinutes sets the CachePeriodInMinutes field's value..\n\n    "
    },
    {
        "ID": 1217,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func IsServiceNotFoundError(err error) bool { cause := errors.Cause(err) if nErr, ok := cause.(ServiceNotFoundError); ok { return nErr.ServiceNotFoundError() } return false }\n\n    ### Response: // IsServiceNotFoundError indicates whether the passed error occurred due to\n// the requested service not being found..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String typedesc2ClassName(final String desc) { String className = desc; switch (desc.charAt(0)) { case 'B': case 'C': case 'D': case 'F': case 'I': case 'J': case 'S': case 'Z': case 'V': if (desc.length() != 1) { throw new IllegalArgumentException(INVALID_BASE_TYPE + desc); } break; case 'L': className = className.substring(1, className.length() - 1); break; case '[': // uses less-known feature of class loaders for loading array types // using bytecode-like signatures. className = className.replace('/', '.'); break; default: throw new IllegalArgumentException(INVALID_TYPE_DESCRIPTION + desc); } return className; }\n\n    ### Response:",
        "ground_truth": "Converts bytecode-like description to java class name that can be loaded\nwith a classloader. Uses less-known feature of class loaders for loading\narray classes.\n\n@see #typedescToSignature(String, jodd.mutable.MutableInteger)",
        "predict": " // IsServiceNotFoundError indicates whether the passed error occurred due to\n// the requested service not being found..\n\n    "
    },
    {
        "ID": 1218,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function createRouter(App $app, array $config = []): Router { $routes = $this->mergeRoutes($app, $this->buildRoutes($config)); return new PathRouter(...$this->generateRouterData($routes)); }\n\n    ### Response: Create a path router and URI generator from the given routes..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String typeref2Name(final String desc) { if (desc.charAt(0) != TYPE_REFERENCE) { throw new IllegalArgumentException(INVALID_TYPE_DESCRIPTION + desc); } String name = desc.substring(1, desc.length() - 1); return name.replace('/', '.'); }\n\n    ### Response:",
        "ground_truth": "Converts type reference to java-name.",
        "predict": " Create a path router and URI generator from the given routes..\n\n    "
    },
    {
        "ID": 1219,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (c *Connection) Set(path string, node client.Node) error { c.RLock() defer c.RUnlock() if err := c.isClosed(); err != nil { return err } return c.set(path, node) }\n\n    ### Response: // Set assigns a value to an existing node at a given path.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String typedescToSignature(final String desc, final MutableInteger from) { int fromIndex = from.get(); from.value++; // default usage for most cases switch (desc.charAt(fromIndex)) { case 'B': return \"byte\"; case 'C': return \"char\"; case 'D': return \"double\"; case 'F': return \"float\"; case 'I': return \"int\"; case 'J': return \"long\"; case 'S': return \"short\"; case 'Z': return \"boolean\"; case 'V': return \"void\"; case 'L': int index = desc.indexOf(';', fromIndex); if (index < 0) { throw new IllegalArgumentException(INVALID_TYPE_DESCRIPTION + desc); } from.set(index + 1); String str = desc.substring(fromIndex + 1, index); return str.replace('/', '.'); case 'T': return desc.substring(from.value); case '[': StringBuilder brackets = new StringBuilder(); int n = fromIndex; while (desc.charAt(n) == '[') { // count opening brackets brackets.append(\"[]\"); n++; } from.value = n; String type = typedescToSignature(desc, from); // the rest of the string denotes a `<field_type>' return type + brackets; default: if (from.value == 0) { throw new IllegalArgumentException(INVALID_TYPE_DESCRIPTION + desc); } // generics! return desc.substring(from.value); } }\n\n    ### Response:",
        "ground_truth": "Returns java-like signature of a bytecode-like description.\nOnly first description is parsed.\n\nThe field signature represents the value of an argument to a function or\nthe value of a variable. It is a series of bytes generated by the\nfollowing grammar:\n\n{@code\n ::= \n      ::= ||\n       ::= B|C|D|F|I|J|S|Z\n     ::= L;\n      ::= [\n\nThe meaning of the base types is as follows:\nB byte signed byte\nC char character\nD double double precision IEEE float\nF float single precision IEEE float\nI int integer\nJ long long integer\nL; ... an object of the given class\nS short signed short\nZ boolean true or false\n[ ... array\n}\n\nThis method converts this string into a Java type declaration such as\nString[].",
        "predict": " // Set assigns a value to an existing node at a given path.\n\n    "
    },
    {
        "ID": 1220,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (s *CreateGroupMembershipOutput) SetGroupMember(v *GroupMember) *CreateGroupMembershipOutput { s.GroupMember = v return s }\n\n    ### Response: // SetGroupMember sets the GroupMember field's value..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String typeToTyperef(final Class type) { if (!type.isArray()) { if (!type.isPrimitive()) { return 'L' + typeToSignature(type) + ';'; } if (type == int.class) { return \"I\"; } if (type == long.class) { return \"J\"; } if (type == boolean.class) { return \"Z\"; } if (type == double.class) { return \"D\"; } if (type == float.class) { return \"F\"; } if (type == short.class) { return \"S\"; } if (type == void.class) { return \"V\"; } if (type == byte.class) { return \"B\"; } if (type == char.class) { return \"C\"; } } return type.getName(); }\n\n    ### Response:",
        "ground_truth": "Converts type to byteccode type ref.",
        "predict": " // SetGroupMember sets the GroupMember field's value..\n\n    "
    },
    {
        "ID": 1221,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func getFiles(paths []string, globs []string) []file { var fs []file for _, p := range paths { for _, g := range globs { ms, _ := filepath.Glob(filepath.Join(p, g)) for _, m := range ms { r, err1 := filepath.Rel(p, m) fi, err2 := os.Stat(m) if err1 == nil && err2 == nil && !fi.IsDir() { fs = append(fs, file{Abs: m, Rel: r}) } } } } return fs }\n\n    ### Response: // getFiles returns a list of files found by applying the glob matching on\n// all the specified paths. This function ignores any errors..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Consumers<T> addAll(final Consumer<T>... consumers) { Collections.addAll(consumerList, consumers); return this; }\n\n    ### Response:",
        "ground_truth": "Registers additional consumers.",
        "predict": " // getFiles returns a list of files found by applying the glob matching on\n// all the specified paths. This function ignores any errors..\n\n    "
    },
    {
        "ID": 1222,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (s *server) State() string { s.mutex.RLock() defer s.mutex.RUnlock() return s.state }\n\n    ### Response: // Retrieves the current state of the server..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SuppressWarnings(\"unchecked\") protected Collection<T> createCollection(final int length) { if (collectionType.isInterface()) { if (collectionType == List.class) { if (length > 0) { return new ArrayList<>(length); } else { return new ArrayList<>(); } } if (collectionType == Set.class) { if (length > 0) { return new HashSet<>(length); } else { return new HashSet<>(); } } throw new TypeConversionException(\"Unknown collection: \" + collectionType.getName()); } if (length > 0) { try { Constructor<Collection<T>> ctor = (Constructor<Collection<T>>) collectionType.getConstructor(int.class); return ctor.newInstance(Integer.valueOf(length)); } catch (Exception ex) { // ignore exception } } try { return collectionType.getDeclaredConstructor().newInstance(); } catch (Exception ex) { throw new TypeConversionException(ex); } }\n\n    ### Response:",
        "ground_truth": "Creates new collection of target component type.\nDefault implementation uses reflection to create\nan collection of target type. Override it for better performances.",
        "predict": " // Retrieves the current state of the server..\n\n    "
    },
    {
        "ID": 1223,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def subscribe(channel, last_message_id: nil, &callback) raise InvalidChannel unless channel.to_s.start_with?(\"/\") raise MissingBlock unless block_given? last_message_id = -1 if last_message_id && !last_message_id.is_a?(Integer) @channels[channel] ||= Channel.new channel = @channels[channel] channel.last_message_id = last_message_id if last_message_id channel.callbacks.push(callback) start if stopped? end\n\n    ### Response: Subscribes to a channel which executes the given callback when a message\n is published to the channel\n\n @example Subscribing to a channel for message\n   client = MessageBus::HTTPClient.new('http://some.test.com')\n\n   client.subscribe(\"/test\") do |payload, _message_id, _global_id|\n     puts payload\n   end\n\n A last_message_id may be provided.\n  * -1 will subscribe to all new messages\n  * -2 will recieve last message + all new messages\n  * -3 will recieve last 2 message + all new messages\n\n @example Subscribing to a channel with `last_message_id`\n   client.subscribe(\"/test\", last_message_id: -2) do |payload|\n     puts payload\n   end\n\n @param channel [String] channel to listen for messages on\n @param last_message_id [Integer] last message id to start polling on.\n\n @yield [data, message_id, global_id]\n  callback to be executed whenever a message is received\n\n @yieldparam data [Hash] data payload of the message received on the channel\n @yieldparam message_id [Integer] id of the message in the channel\n @yieldparam global_id [Integer] id of the message in the global backlog\n @yieldreturn [void]\n\n @return [Integer] the current status of the client.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected Collection<T> convertToSingleElementCollection(final Object value) { Collection<T> collection = createCollection(0); //noinspection unchecked collection.add((T) value); return collection; }\n\n    ### Response:",
        "ground_truth": "Creates a collection with single element.",
        "predict": " Subscribes to a channel which executes the given callback when a message\n is published to the channel\n\n @example Subscribing to a channel for message\n   client = MessageBus::HTTPClient.new('http://some.test.com')\n\n   client.subscribe(\"/test\") do |payload, _message_id, _global_id|\n     puts payload\n   end\n\n A last_message_id may be provided.\n  * -1 will subscribe to all new messages\n  * -2 will recieve last message + all new messages\n  * -3 will recieve last 2 message + all new messages\n\n @example Subscribing to a channel with `last_message_id`\n   client.subscribe(\"/test\", last_message_id: -2) do |payload|\n     puts payload\n   end\n\n @param channel [String] channel to listen for messages on\n @param last_message_id [Integer] last message id to start polling on.\n\n @yield [data, message_id, global_id]\n  callback to be executed whenever a message is received\n\n @yieldparam data [Hash] data payload of the message received on the channel\n @yieldparam message_id [Integer] id of the message in the channel\n @yieldparam global_id [Integer] id of the message in the global backlog\n @yieldreturn [void]\n\n @return [Integer] the current status of the client.\n\n    "
    },
    {
        "ID": 1224,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def count_lines(self): # type: () -> LineCounts \"\"\"Count the lines in the matched files. Returns: `~LineCounts`: A named tuple containing line counts. Example: >>> import fs >>> fs.open_fs('~/projects').glob('**/*.py').count_lines() LineCounts(lines=5767102, non_blank=4915110) \"\"\" lines = 0 non_blank = 0 for path, info in self._make_iter(): if info.is_file: for line in self.fs.open(path, \"rb\"): lines += 1 if line.rstrip(): non_blank += 1 return LineCounts(lines=lines, non_blank=non_blank)\n\n    ### Response: Count the lines in the matched files.\n\n        Returns:\n            `~LineCounts`: A named tuple containing line counts.\n\n        Example:\n            >>> import fs\n            >>> fs.open_fs('~/projects').glob('**/*.py').count_lines()\n            LineCounts(lines=5767102, non_blank=4915110).\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected Collection<T> convertValueToCollection(Object value) { if (value instanceof Iterable) { Iterable iterable = (Iterable) value; Collection<T> collection = createCollection(0); for (Object element : iterable) { collection.add(convertType(element)); } return collection; } if (value instanceof CharSequence) { value = CsvUtil.toStringArray(value.toString()); } Class type = value.getClass(); if (type.isArray()) { // convert arrays Class componentType = type.getComponentType(); if (componentType.isPrimitive()) { return convertPrimitiveArrayToCollection(value, componentType); } else { Object[] array = (Object[]) value; Collection<T> result = createCollection(array.length); for (Object a : array) { result.add(convertType(a)); } return result; } } // everything else: return convertToSingleElementCollection(value); }\n\n    ### Response:",
        "ground_truth": "Converts non-collection value to collection.",
        "predict": " Count the lines in the matched files.\n\n        Returns:\n            `~LineCounts`: A named tuple containing line counts.\n\n        Example:\n            >>> import fs\n            >>> fs.open_fs('~/projects').glob('**/*.py').count_lines()\n            LineCounts(lines=5767102, non_blank=4915110).\n\n    "
    },
    {
        "ID": 1225,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function message($message, $lineWidth = 80, $style = 'info') { if (null === $lineWidth) { $lineWidth = 80; } if (is_string($message)) { $message = explode(\"\\n\", wordwrap($message, $lineWidth, \"\\n\", true)); } foreach ($message as $line) { $line = str_pad(OutputFormatter::escape($line), $lineWidth); $this->getOutput()->writeln(\"<{$style}>{$line}</{$style}>\"); } }\n\n    ### Response: Write a message in the given style, with line breaks at the given length.\n@param string|array    $message      Message to be formatted.\n@param int             $lineWidth    Maximum line width of the message.\n@param string          $style        Style to be used for formatting the message..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected Collection<T> convertCollectionToCollection(final Collection value) { Collection<T> collection = createCollection(value.size()); for (Object v : value) { collection.add(convertType(v)); } return collection; }\n\n    ### Response:",
        "ground_truth": "Converts collection value to target collection.\nEach element is converted to target component type.",
        "predict": " Write a message in the given style, with line breaks at the given length.\n@param string|array    $message      Message to be formatted.\n@param int             $lineWidth    Maximum line width of the message.\n@param string          $style        Style to be used for formatting the message..\n\n    "
    },
    {
        "ID": 1226,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def reset(self): \"\"\" Set everything back to zero \"\"\" self.trnOverlaps = [] self.activeTRNSegments = [] self.activeTRNCellIndices = [] self.relayOverlaps = [] self.activeRelaySegments = [] self.burstReadyCellIndices = [] self.burstReadyCells = np.zeros((self.relayWidth, self.relayHeight))\n\n    ### Response: Set everything back to zero.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SuppressWarnings(\"AutoBoxing\") protected Collection<T> convertPrimitiveArrayToCollection(final Object value, final Class primitiveComponentType) { Collection<T> result = null; if (primitiveComponentType == int.class) { int[] array = (int[]) value; result = createCollection(array.length); for (int a : array) { result.add(convertType(a)); } } else if (primitiveComponentType == long.class) { long[] array = (long[]) value; result = createCollection(array.length); for (long a : array) { result.add(convertType(a)); } } else if (primitiveComponentType == float.class) { float[] array = (float[]) value; result = createCollection(array.length); for (float a : array) { result.add(convertType(a)); } } else if (primitiveComponentType == double.class) { double[] array = (double[]) value; result = createCollection(array.length); for (double a : array) { result.add(convertType(a)); } } else if (primitiveComponentType == short.class) { short[] array = (short[]) value; result = createCollection(array.length); for (short a : array) { result.add(convertType(a)); } } else if (primitiveComponentType == byte.class) { byte[] array = (byte[]) value; result = createCollection(array.length); for (byte a : array) { result.add(convertType(a)); } } else if (primitiveComponentType == char.class) { char[] array = (char[]) value; result = createCollection(array.length); for (char a : array) { result.add(convertType(a)); } } else if (primitiveComponentType == boolean.class) { boolean[] array = (boolean[]) value; result = createCollection(array.length); for (boolean a : array) { result.add(convertType(a)); } } return result; }\n\n    ### Response:",
        "ground_truth": "Converts primitive array to target collection.",
        "predict": " Set everything back to zero.\n\n    "
    },
    {
        "ID": 1227,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void prepare() { for(JavaClass jc: heap.getAllClasses()) { for(TypeFilterStep it: interestingTypes) { if (it.evaluate(jc)) { rootClasses.add(jc.getName()); } } for(TypeFilterStep bt: blacklistedTypes) { if (bt.evaluate(jc)) { blacklist.add(jc.getName()); } } for(PathStep[] bp: blacklistedMethods) { TypeFilterStep ts = (TypeFilterStep) bp[0]; String fn = ((FieldStep) bp[1]).getFieldName(); if (ts.evaluate(jc)) { for(Field f: jc.getFields()) { if (fn == null || fn.equals(f.getName())) { blacklist.add(jc.getName() + \"#\" + f.getName()); } } } } } }\n\n    ### Response: Process entry point and blacklist configuration.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    final void addLineNumber(final int lineNumber) { if (this.lineNumber == 0) { this.lineNumber = (short) lineNumber; } else { if (otherLineNumbers == null) { otherLineNumbers = new int[LINE_NUMBERS_CAPACITY_INCREMENT]; } int otherLineNumberIndex = ++otherLineNumbers[0]; if (otherLineNumberIndex >= otherLineNumbers.length) { int[] newLineNumbers = new int[otherLineNumbers.length + LINE_NUMBERS_CAPACITY_INCREMENT]; System.arraycopy(otherLineNumbers, 0, newLineNumbers, 0, otherLineNumbers.length); otherLineNumbers = newLineNumbers; } otherLineNumbers[otherLineNumberIndex] = lineNumber; } }\n\n    ### Response:",
        "ground_truth": "Adds a source line number corresponding to this label.\n\n@param lineNumber a source line number (which should be strictly positive).",
        "predict": " Process entry point and blacklist configuration.\n\n    "
    },
    {
        "ID": 1228,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def buildIVMmask(self ,chip, dqarr, scale): \"\"\" Builds a weight mask from an input DQ array and either an IVM array provided by the user or a self-generated IVM array derived from the flat-field reference file associated with the input image. \"\"\" sci_chip = self._image[self.scienceExt,chip] ivmname = self.outputNames['ivmFile'] if ivmname is not None: log.info(\"Applying user supplied IVM files for chip %s\" % chip) #Parse the input file name to get the extension we are working on extn = \"IVM,{}\".format(chip) #Open the mask image for updating and the IVM image ivm = fileutil.openImage(ivmname, mode='readonly', memmap=False) ivmfile = fileutil.getExtn(ivm, extn) # Multiply the IVM file by the input mask in place. ivmarr = ivmfile.data * dqarr ivm.close() else: log.info(\"Automatically creating IVM files for chip %s\" % chip) # If no IVM files were provided by the user we will # need to automatically generate them based upon # instrument specific information. flat = self.getflat(chip) RN = self.getReadNoiseImage(chip) darkimg = self.getdarkimg(chip) skyimg = self.getskyimg(chip) #exptime = self.getexptimeimg(chip) #exptime = sci_chip._exptime #ivm = (flat*exptime)**2/(darkimg+(skyimg*flat)+RN**2) ivm = (flat)**2/(darkimg+(skyimg*flat)+RN**2) # Multiply the IVM file by the input mask in place. ivmarr = ivm * dqarr # Update 'wt_scl' parameter to match use of IVM file sci_chip._wtscl = pow(sci_chip._exptime,2)/pow(scale,4) #sci_chip._wtscl = 1.0/pow(scale,4) return ivmarr.astype(np.float32)\n\n    ### Response: Builds a weight mask from an input DQ array and either an IVM array\n        provided by the user or a self-generated IVM array derived from the\n        flat-field reference file associated with the input image..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    final void accept(final MethodVisitor methodVisitor, final boolean visitLineNumbers) { methodVisitor.visitLabel(this); if (visitLineNumbers && lineNumber != 0) { methodVisitor.visitLineNumber(lineNumber & 0xFFFF, this); if (otherLineNumbers != null) { for (int i = 1; i <= otherLineNumbers[0]; ++i) { methodVisitor.visitLineNumber(otherLineNumbers[i], this); } } } }\n\n    ### Response:",
        "ground_truth": "Makes the given visitor visit this label and its source line numbers, if applicable.\n\n@param methodVisitor a method visitor.\n@param visitLineNumbers whether to visit of the label's source line numbers, if any.",
        "predict": " Builds a weight mask from an input DQ array and either an IVM array\n        provided by the user or a self-generated IVM array derived from the\n        flat-field reference file associated with the input image..\n\n    "
    },
    {
        "ID": 1229,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static function WriteDefinitions($fp, $Definitions) { // Write the definitions. uksort($Definitions, 'strcasecmp'); $LastC = ''; foreach ($Definitions as $Key => $Value) { // Add a blank line between letters of the alphabet. if (isset($Key[0]) && strcasecmp($LastC, $Key[0]) != 0) { fwrite($fp, \"\\n\"); $LastC = $Key[0]; } $Str = '$Definition['.var_export($Key, TRUE).'] = '.var_export($Value, TRUE).\";\\n\"; fwrite($fp, $Str); } }\n\n    ### Response: Write a locale's definitions to a file.\n\n@param resource $fp The file to write to.\n@param array $Definitions The definitions to write..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    final void put( final ByteVector code, final int sourceInsnBytecodeOffset, final boolean wideReference) { if ((flags & FLAG_RESOLVED) == 0) { if (wideReference) { addForwardReference(sourceInsnBytecodeOffset, FORWARD_REFERENCE_TYPE_WIDE, code.length); code.putInt(-1); } else { addForwardReference(sourceInsnBytecodeOffset, FORWARD_REFERENCE_TYPE_SHORT, code.length); code.putShort(-1); } } else { if (wideReference) { code.putInt(bytecodeOffset - sourceInsnBytecodeOffset); } else { code.putShort(bytecodeOffset - sourceInsnBytecodeOffset); } } }\n\n    ### Response:",
        "ground_truth": "Puts a reference to this label in the bytecode of a method. If the bytecode offset of the label\nis known, the relative bytecode offset between the label and the instruction referencing it is\ncomputed and written directly. Otherwise, a null relative offset is written and a new forward\nreference is declared for this label.\n\n@param code the bytecode of the method. This is where the reference is appended.\n@param sourceInsnBytecodeOffset the bytecode offset of the instruction that contains the\nreference to be appended.\n@param wideReference whether the reference must be stored in 4 bytes (instead of 2 bytes).",
        "predict": " Write a locale's definitions to a file.\n\n@param resource $fp The file to write to.\n@param array $Definitions The definitions to write..\n\n    "
    },
    {
        "ID": 1230,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void run(ExceptionalRunnable runnable) throws Exception { initStartTotal(); long startInvokation = System.currentTimeMillis(); runnable.run(); invoked(System.currentTimeMillis() - startInvokation); }\n\n    ### Response: Measure the invokation time of the given ExceptionalRunnable..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void addForwardReference( final int sourceInsnBytecodeOffset, final int referenceType, final int referenceHandle) { if (forwardReferences == null) { forwardReferences = new int[FORWARD_REFERENCES_CAPACITY_INCREMENT]; } int lastElementIndex = forwardReferences[0]; if (lastElementIndex + 2 >= forwardReferences.length) { int[] newValues = new int[forwardReferences.length + FORWARD_REFERENCES_CAPACITY_INCREMENT]; System.arraycopy(forwardReferences, 0, newValues, 0, forwardReferences.length); forwardReferences = newValues; } forwardReferences[++lastElementIndex] = sourceInsnBytecodeOffset; forwardReferences[++lastElementIndex] = referenceType | referenceHandle; forwardReferences[0] = lastElementIndex; }\n\n    ### Response:",
        "ground_truth": "Adds a forward reference to this label. This method must be called only for a true forward\nreference, i.e. only if this label is not resolved yet. For backward references, the relative\nbytecode offset of the reference can be, and must be, computed and stored directly.\n\n@param sourceInsnBytecodeOffset the bytecode offset of the instruction that contains the\nreference stored at referenceHandle.\n@param referenceType either {@link #FORWARD_REFERENCE_TYPE_SHORT} or {@link\n#FORWARD_REFERENCE_TYPE_WIDE}.\n@param referenceHandle the offset in the bytecode where the forward reference value must be\nstored.",
        "predict": " Measure the invokation time of the given ExceptionalRunnable..\n\n    "
    },
    {
        "ID": 1231,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def load_config(config_file): \"\"\" Validates the given file for use as the settings file for BGPSpeaker and loads the configuration from the given file as a module instance. \"\"\" if not config_file or not os.path.isfile(config_file): raise ApplicationException( desc='Invalid configuration file: %s' % config_file) # Loads the configuration from the given file, if available. try: return load_source('bgpspeaker.application.settings', config_file) except Exception as e: raise ApplicationException(desc=str(e))\n\n    ### Response: Validates the given file for use as the settings file for BGPSpeaker\n    and loads the configuration from the given file as a module instance..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    final boolean resolve(final byte[] code, final int bytecodeOffset) { this.flags |= FLAG_RESOLVED; this.bytecodeOffset = bytecodeOffset; if (forwardReferences == null) { return false; } boolean hasAsmInstructions = false; for (int i = forwardReferences[0]; i > 0; i -= 2) { final int sourceInsnBytecodeOffset = forwardReferences[i - 1]; final int reference = forwardReferences[i]; final int relativeOffset = bytecodeOffset - sourceInsnBytecodeOffset; int handle = reference & FORWARD_REFERENCE_HANDLE_MASK; if ((reference & FORWARD_REFERENCE_TYPE_MASK) == FORWARD_REFERENCE_TYPE_SHORT) { if (relativeOffset < Short.MIN_VALUE || relativeOffset > Short.MAX_VALUE) { // Change the opcode of the jump instruction, in order to be able to find it later in // ClassReader. These ASM specific opcodes are similar to jump instruction opcodes, except // that the 2 bytes offset is unsigned (and can therefore represent values from 0 to // 65535, which is sufficient since the size of a method is limited to 65535 bytes). int opcode = code[sourceInsnBytecodeOffset] & 0xFF; if (opcode < Opcodes.IFNULL) { // Change IFEQ ... JSR to ASM_IFEQ ... ASM_JSR. code[sourceInsnBytecodeOffset] = (byte) (opcode + Constants.ASM_OPCODE_DELTA); } else { // Change IFNULL and IFNONNULL to ASM_IFNULL and ASM_IFNONNULL. code[sourceInsnBytecodeOffset] = (byte) (opcode + Constants.ASM_IFNULL_OPCODE_DELTA); } hasAsmInstructions = true; } code[handle++] = (byte) (relativeOffset >>> 8); code[handle] = (byte) relativeOffset; } else { code[handle++] = (byte) (relativeOffset >>> 24); code[handle++] = (byte) (relativeOffset >>> 16); code[handle++] = (byte) (relativeOffset >>> 8); code[handle] = (byte) relativeOffset; } } return hasAsmInstructions; }\n\n    ### Response:",
        "ground_truth": "Sets the bytecode offset of this label to the given value and resolves the forward references\nto this label, if any. This method must be called when this label is added to the bytecode of\nthe method, i.e. when its bytecode offset becomes known. This method fills in the blanks that\nwhere left in the bytecode by each forward reference previously added to this label.\n\n@param code the bytecode of the method.\n@param bytecodeOffset the bytecode offset of this label.\n@return {@literal true} if a blank that was left for this label was too small to store the\noffset. In such a case the corresponding jump instruction is replaced with an equivalent\nASM specific instruction using an unsigned two bytes offset. These ASM specific\ninstructions are later replaced with standard bytecode instructions with wider offsets (4\nbytes instead of 2), in ClassReader.",
        "predict": " Validates the given file for use as the settings file for BGPSpeaker\n    and loads the configuration from the given file as a module instance..\n\n    "
    },
    {
        "ID": 1232,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void read(final byte[] messageBytes, final MultiObserver observer) { try (final InputStream inputStream = new ByteArrayInputStream(messageBytes)) { // Binary decoder for both the header and the message. final BinaryDecoder decoder = DecoderFactory.get().binaryDecoder(inputStream, null); // Read the header message. final Header header = this.headerReader.read(null, decoder); final String classId = header.getClassName().toString(); LOG.log(Level.FINEST, \"Deserializing Avro message: {0}\", classId); // Get the appropriate deserializer and deserialize the message. final IMessageDeserializer deserializer = this.nameToDeserializerMap.get(classId); if (deserializer != null) { deserializer.deserialize(decoder, observer, header.getSequence()); } else { throw new RuntimeException(\"Request to deserialize unknown message type: \" + classId); } } catch (final IOException e) { throw new RuntimeException(\"Failure reading message\", e); } catch (final InvocationTargetException | IllegalAccessException e) { throw new RuntimeException(\"Error deserializing message body\", e); } }\n\n    ### Response: Read a message from the input byte stream and send it to the event handler.\n@param messageBytes An array of bytes that contains the message to be deserialized.\n@param observer An implementation of the MultiObserver interface which will be called\nto process the deserialized message..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    final void markSubroutine(final short subroutineId) { // Data flow algorithm: put this basic block in a list of blocks to process (which are blocks // belonging to subroutine subroutineId) and, while there are blocks to process, remove one from // the list, mark it as belonging to the subroutine, and add its successor basic blocks in the // control flow graph to the list of blocks to process (if not already done). Label listOfBlocksToProcess = this; listOfBlocksToProcess.nextListElement = EMPTY_LIST; while (listOfBlocksToProcess != EMPTY_LIST) { // Remove a basic block from the list of blocks to process. Label basicBlock = listOfBlocksToProcess; listOfBlocksToProcess = listOfBlocksToProcess.nextListElement; basicBlock.nextListElement = null; // If it is not already marked as belonging to a subroutine, mark it as belonging to // subroutineId and add its successors to the list of blocks to process (unless already done). if (basicBlock.subroutineId == 0) { basicBlock.subroutineId = subroutineId; listOfBlocksToProcess = basicBlock.pushSuccessors(listOfBlocksToProcess); } } }\n\n    ### Response:",
        "ground_truth": "Finds the basic blocks that belong to the subroutine starting with the basic block\ncorresponding to this label, and marks these blocks as belonging to this subroutine. This\nmethod follows the control flow graph to find all the blocks that are reachable from the\ncurrent basic block WITHOUT following any jsr target.\n\nNote: a precondition and postcondition of this method is that all labels must have a null\n{@link #nextListElement}.\n\n@param subroutineId the id of the subroutine starting with the basic block corresponding to\nthis label.",
        "predict": " Read a message from the input byte stream and send it to the event handler.\n@param messageBytes An array of bytes that contains the message to be deserialized.\n@param observer An implementation of the MultiObserver interface which will be called\nto process the deserialized message..\n\n    "
    },
    {
        "ID": 1233,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (m *Discriminator) ToRawInfo() interface{} { info := yaml.MapSlice{} if m == nil { return info } // always include this required field. info = append(info, yaml.MapItem{Key: \"propertyName\", Value: m.PropertyName}) if m.Mapping != nil { info = append(info, yaml.MapItem{Key: \"mapping\", Value: m.Mapping.ToRawInfo()}) } // &{Name:mapping Type:Strings StringEnumValues:[] MapType: Repeated:false Pattern: Implicit:false Description:} return info }\n\n    ### Response: // ToRawInfo returns a description of Discriminator suitable for JSON or YAML export..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    final void addSubroutineRetSuccessors(final Label subroutineCaller) { // Data flow algorithm: put this basic block in a list blocks to process (which are blocks // belonging to a subroutine starting with this label) and, while there are blocks to process, // remove one from the list, put it in a list of blocks that have been processed, add a return // edge to the successor of subroutineCaller if applicable, and add its successor basic blocks // in the control flow graph to the list of blocks to process (if not already done). Label listOfProcessedBlocks = EMPTY_LIST; Label listOfBlocksToProcess = this; listOfBlocksToProcess.nextListElement = EMPTY_LIST; while (listOfBlocksToProcess != EMPTY_LIST) { // Move a basic block from the list of blocks to process to the list of processed blocks. Label basicBlock = listOfBlocksToProcess; listOfBlocksToProcess = basicBlock.nextListElement; basicBlock.nextListElement = listOfProcessedBlocks; listOfProcessedBlocks = basicBlock; // Add an edge from this block to the successor of the caller basic block, if this block is // the end of a subroutine and if this block and subroutineCaller do not belong to the same // subroutine. if ((basicBlock.flags & FLAG_SUBROUTINE_END) != 0 && basicBlock.subroutineId != subroutineCaller.subroutineId) { basicBlock.outgoingEdges = new Edge( basicBlock.outputStackSize, // By construction, the first outgoing edge of a basic block that ends with a jsr // instruction leads to the jsr continuation block, i.e. where execution continues // when ret is called (see {@link #FLAG_SUBROUTINE_CALLER}). subroutineCaller.outgoingEdges.successor, basicBlock.outgoingEdges); } // Add its successors to the list of blocks to process. Note that {@link #pushSuccessors} does // not push basic blocks which are already in a list. Here this means either in the list of // blocks to process, or in the list of already processed blocks. This second list is // important to make sure we don't reprocess an already processed block. listOfBlocksToProcess = basicBlock.pushSuccessors(listOfBlocksToProcess); } // Reset the {@link #nextListElement} of all the basic blocks that have been processed to null, // so that this method can be called again with a different subroutine or subroutine caller. while (listOfProcessedBlocks != EMPTY_LIST) { Label newListOfProcessedBlocks = listOfProcessedBlocks.nextListElement; listOfProcessedBlocks.nextListElement = null; listOfProcessedBlocks = newListOfProcessedBlocks; } }\n\n    ### Response:",
        "ground_truth": "Finds the basic blocks that end a subroutine starting with the basic block corresponding to\nthis label and, for each one of them, adds an outgoing edge to the basic block following the\ngiven subroutine call. In other words, completes the control flow graph by adding the edges\ncorresponding to the return from this subroutine, when called from the given caller basic\nblock.\n\nNote: a precondition and postcondition of this method is that all labels must have a null\n{@link #nextListElement}.\n\n@param subroutineCaller a basic block that ends with a jsr to the basic block corresponding to\nthis label. This label is supposed to correspond to the start of a subroutine.",
        "predict": " // ToRawInfo returns a description of Discriminator suitable for JSON or YAML export..\n\n    "
    },
    {
        "ID": 1234,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (*TeleportCertAuthorityMarshaler) MarshalCertAuthority(ca CertAuthority, opts ...MarshalOption) ([]byte, error) { cfg, err := collectOptions(opts) if err != nil { return nil, trace.Wrap(err) } type cav1 interface { V1() *CertAuthorityV1 } type cav2 interface { V2() *CertAuthorityV2 } version := cfg.GetVersion() switch version { case V1: v, ok := ca.(cav1) if !ok { return nil, trace.BadParameter(\"don't know how to marshal %v\", V1) } return utils.FastMarshal(v.V1()) case V2: v, ok := ca.(cav2) if !ok { return nil, trace.BadParameter(\"don't know how to marshal %v\", V2) } v2 := v.V2() if !cfg.PreserveResourceID { // avoid modifying the original object // to prevent unexpected data races copy := *v2 copy.SetResourceID(0) v2 = &copy } return utils.FastMarshal(v2) default: return nil, trace.BadParameter(\"version %v is not supported\", version) } }\n\n    ### Response: // MarshalCertAuthority marshalls cert authority into JSON.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected int[] compareDigits(final String str1, int ndx1, final String str2, int ndx2) { // iterate all digits in the first string int zeroCount1 = 0; while (charAt(str1, ndx1) == '0') { zeroCount1++; ndx1++; } int len1 = 0; while (true) { final char char1 = charAt(str1, ndx1); final boolean isDigitChar1 = CharUtil.isDigit(char1); if (!isDigitChar1) { break; } len1++; ndx1++; } // iterate all digits in the second string and compare with the first int zeroCount2 = 0; while (charAt(str2, ndx2) == '0') { zeroCount2++; ndx2++; } int len2 = 0; int ndx1_new = ndx1 - len1; int equalNumbers = 0; while (true) { final char char2 = charAt(str2, ndx2); final boolean isDigitChar2 = CharUtil.isDigit(char2); if (!isDigitChar2) { break; } if (equalNumbers == 0 && (ndx1_new < ndx1)) { equalNumbers = charAt(str1, ndx1_new++) - char2; } len2++; ndx2++; } // compare if (len1 != len2) { // numbers are not equals size return new int[] {len1 - len2}; } if (equalNumbers != 0) { return new int[] {equalNumbers}; } // numbers are equal, but number of zeros is different return new int[] {0, zeroCount1 - zeroCount2, ndx1, ndx2}; }\n\n    ### Response:",
        "ground_truth": "Compare digits at certain position in two strings.\nThe longest run of digits wins. That aside, the greatest\nvalue wins.\n@return if numbers are different, only 1 element is returned.",
        "predict": " // MarshalCertAuthority marshalls cert authority into JSON.\n\n    "
    },
    {
        "ID": 1235,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function normalizeIdentifier(identifier) { if (identifier === \".\") { // '.' might be referencing either the root or a locally scoped variable // called '.'. So try for the locally scoped variable first and then // default to the root return \"(data['.'] || data)\"; } return \"data\" + identifier.split(\".\").map(function(property) { return property ? \"['\" + property + \"']\" : \"\"; }).join(\"\"); }\n\n    ### Response: Normalizes properties in the identifier to be looked up via hash-style\ninstead of dot-notation.\n\n@private\n@param {string} identifier - The identifier to normalize.\n@returns {string} The identifier normalized..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private char fixAccent(final char c) { for (int i = 0; i < ACCENT_CHARS.length; i+=2) { final char accentChar = ACCENT_CHARS[i]; if (accentChar == c) { return ACCENT_CHARS[i + 1]; } } return c; }\n\n    ### Response:",
        "ground_truth": "Fixes accent char.",
        "predict": " Normalizes properties in the identifier to be looked up via hash-style\ninstead of dot-notation.\n\n@private\n@param {string} identifier - The identifier to normalize.\n@returns {string} The identifier normalized..\n\n    "
    },
    {
        "ID": 1236,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def build_wheel(wheel_directory, config_settings=None, metadata_directory=None): \"\"\"Builds a wheel, places it in wheel_directory\"\"\" poetry = Poetry.create(\".\") return unicode( WheelBuilder.make_in( poetry, SystemEnv(Path(sys.prefix)), NullIO(), Path(wheel_directory) ) )\n\n    ### Response: Builds a wheel, places it in wheel_directory.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public ByteVector putByte(final int byteValue) { int currentLength = length; if (currentLength + 1 > data.length) { enlarge(1); } data[currentLength++] = (byte) byteValue; length = currentLength; return this; }\n\n    ### Response:",
        "ground_truth": "Puts a byte into this byte vector. The byte vector is automatically enlarged if necessary.\n\n@param byteValue a byte.\n@return this byte vector.",
        "predict": " Builds a wheel, places it in wheel_directory.\n\n    "
    },
    {
        "ID": 1237,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function wheelDelta(event){ var delta = 0; if ('deltaY' in event) delta = -event.deltaY; // safari & gecko else if ('wheelDelta' in event) delta = event.wheelDelta; // IE, webkit, opera else if (event.type == 'DOMMouseScroll') delta = -event.detail; // old gecko return delta && (delta / Math.abs(delta)); }\n\n    ### Response: Returns mouse wheel delta.\n@param {Event} event\n@return {number} -1, 0, 1.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    final ByteVector put11(final int byteValue1, final int byteValue2) { int currentLength = length; if (currentLength + 2 > data.length) { enlarge(2); } byte[] currentData = data; currentData[currentLength++] = (byte) byteValue1; currentData[currentLength++] = (byte) byteValue2; length = currentLength; return this; }\n\n    ### Response:",
        "ground_truth": "Puts two bytes into this byte vector. The byte vector is automatically enlarged if necessary.\n\n@param byteValue1 a byte.\n@param byteValue2 another byte.\n@return this byte vector.",
        "predict": " Returns mouse wheel delta.\n@param {Event} event\n@return {number} -1, 0, 1.\n\n    "
    },
    {
        "ID": 1238,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function validate(boxes, box) { var a = box for (var i = 0; i < boxes.length; i++) { var b = boxes[i] if (intersects(a, b)) { return false } } return true }\n\n    ### Response: determines if the region specified by `box` is clear of all other `boxes`.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public ByteVector putShort(final int shortValue) { int currentLength = length; if (currentLength + 2 > data.length) { enlarge(2); } byte[] currentData = data; currentData[currentLength++] = (byte) (shortValue >>> 8); currentData[currentLength++] = (byte) shortValue; length = currentLength; return this; }\n\n    ### Response:",
        "ground_truth": "Puts a short into this byte vector. The byte vector is automatically enlarged if necessary.\n\n@param shortValue a short.\n@return this byte vector.",
        "predict": " determines if the region specified by `box` is clear of all other `boxes`.\n\n    "
    },
    {
        "ID": 1239,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def user_is_blacklisted(self, user): ''' Takes a username as a string and returns a boolean. True indicates that the provided user has been blacklisted ''' return not salt.utils.stringutils.check_whitelist_blacklist(user, blacklist=self.blacklist.get('users', []))\n\n    ### Response: Takes a username as a string and returns a boolean. True indicates that\n        the provided user has been blacklisted.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    final ByteVector put12(final int byteValue, final int shortValue) { int currentLength = length; if (currentLength + 3 > data.length) { enlarge(3); } byte[] currentData = data; currentData[currentLength++] = (byte) byteValue; currentData[currentLength++] = (byte) (shortValue >>> 8); currentData[currentLength++] = (byte) shortValue; length = currentLength; return this; }\n\n    ### Response:",
        "ground_truth": "Puts a byte and a short into this byte vector. The byte vector is automatically enlarged if\nnecessary.\n\n@param byteValue a byte.\n@param shortValue a short.\n@return this byte vector.",
        "predict": " Takes a username as a string and returns a boolean. True indicates that\n        the provided user has been blacklisted.\n\n    "
    },
    {
        "ID": 1240,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (s *Server) LANSegmentMembers(segment string) ([]serf.Member, error) { if segment == \"\" { return s.LANMembers(), nil } return nil, structs.ErrSegmentsNotSupported }\n\n    ### Response: // LANSegmentMembers is used to return the members of the given LAN segment..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    final ByteVector put112(final int byteValue1, final int byteValue2, final int shortValue) { int currentLength = length; if (currentLength + 4 > data.length) { enlarge(4); } byte[] currentData = data; currentData[currentLength++] = (byte) byteValue1; currentData[currentLength++] = (byte) byteValue2; currentData[currentLength++] = (byte) (shortValue >>> 8); currentData[currentLength++] = (byte) shortValue; length = currentLength; return this; }\n\n    ### Response:",
        "ground_truth": "Puts two bytes and a short into this byte vector. The byte vector is automatically enlarged if\nnecessary.\n\n@param byteValue1 a byte.\n@param byteValue2 another byte.\n@param shortValue a short.\n@return this byte vector.",
        "predict": " // LANSegmentMembers is used to return the members of the given LAN segment..\n\n    "
    },
    {
        "ID": 1241,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function getOperatorToken(node) { return sourceCode.getFirstTokenBetween(node.left, node.right, token => token.value === node.operator); }\n\n    ### Response: Returns the operator token of an AssignmentExpression or BinaryExpression\n@param {ASTNode} node An AssignmentExpression or BinaryExpression node\n@returns {Token} The operator token in the node.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public ByteVector putInt(final int intValue) { int currentLength = length; if (currentLength + 4 > data.length) { enlarge(4); } byte[] currentData = data; currentData[currentLength++] = (byte) (intValue >>> 24); currentData[currentLength++] = (byte) (intValue >>> 16); currentData[currentLength++] = (byte) (intValue >>> 8); currentData[currentLength++] = (byte) intValue; length = currentLength; return this; }\n\n    ### Response:",
        "ground_truth": "Puts an int into this byte vector. The byte vector is automatically enlarged if necessary.\n\n@param intValue an int.\n@return this byte vector.",
        "predict": " Returns the operator token of an AssignmentExpression or BinaryExpression\n@param {ASTNode} node An AssignmentExpression or BinaryExpression node\n@returns {Token} The operator token in the node.\n\n    "
    },
    {
        "ID": 1242,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (s *CustomerConnectorInfo) SetActiveConnectors(v int64) *CustomerConnectorInfo { s.ActiveConnectors = &v return s }\n\n    ### Response: // SetActiveConnectors sets the ActiveConnectors field's value..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    final ByteVector put122(final int byteValue, final int shortValue1, final int shortValue2) { int currentLength = length; if (currentLength + 5 > data.length) { enlarge(5); } byte[] currentData = data; currentData[currentLength++] = (byte) byteValue; currentData[currentLength++] = (byte) (shortValue1 >>> 8); currentData[currentLength++] = (byte) shortValue1; currentData[currentLength++] = (byte) (shortValue2 >>> 8); currentData[currentLength++] = (byte) shortValue2; length = currentLength; return this; }\n\n    ### Response:",
        "ground_truth": "Puts one byte and two shorts into this byte vector. The byte vector is automatically enlarged\nif necessary.\n\n@param byteValue a byte.\n@param shortValue1 a short.\n@param shortValue2 another short.\n@return this byte vector.",
        "predict": " // SetActiveConnectors sets the ActiveConnectors field's value..\n\n    "
    },
    {
        "ID": 1243,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void populateCalendar(Record record, ProjectCalendar calendar, boolean isBaseCalendar) { if (isBaseCalendar == true) { calendar.setName(record.getString(0)); } else { calendar.setParent(m_projectFile.getCalendarByName(record.getString(0))); } calendar.setWorkingDay(Day.SUNDAY, DayType.getInstance(record.getInteger(1))); calendar.setWorkingDay(Day.MONDAY, DayType.getInstance(record.getInteger(2))); calendar.setWorkingDay(Day.TUESDAY, DayType.getInstance(record.getInteger(3))); calendar.setWorkingDay(Day.WEDNESDAY, DayType.getInstance(record.getInteger(4))); calendar.setWorkingDay(Day.THURSDAY, DayType.getInstance(record.getInteger(5))); calendar.setWorkingDay(Day.FRIDAY, DayType.getInstance(record.getInteger(6))); calendar.setWorkingDay(Day.SATURDAY, DayType.getInstance(record.getInteger(7))); m_eventManager.fireCalendarReadEvent(calendar); }\n\n    ### Response: Populates a calendar instance.\n\n@param record MPX record\n@param calendar calendar instance\n@param isBaseCalendar true if this is a base calendar.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public ByteVector putLong(final long longValue) { int currentLength = length; if (currentLength + 8 > data.length) { enlarge(8); } byte[] currentData = data; int intValue = (int) (longValue >>> 32); currentData[currentLength++] = (byte) (intValue >>> 24); currentData[currentLength++] = (byte) (intValue >>> 16); currentData[currentLength++] = (byte) (intValue >>> 8); currentData[currentLength++] = (byte) intValue; intValue = (int) longValue; currentData[currentLength++] = (byte) (intValue >>> 24); currentData[currentLength++] = (byte) (intValue >>> 16); currentData[currentLength++] = (byte) (intValue >>> 8); currentData[currentLength++] = (byte) intValue; length = currentLength; return this; }\n\n    ### Response:",
        "ground_truth": "Puts a long into this byte vector. The byte vector is automatically enlarged if necessary.\n\n@param longValue a long.\n@return this byte vector.",
        "predict": " Populates a calendar instance.\n\n@param record MPX record\n@param calendar calendar instance\n@param isBaseCalendar true if this is a base calendar.\n\n    "
    },
    {
        "ID": 1244,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static synchronized Map<String, Statistics> getStatistics() { Map<String, Statistics> result = new HashMap<String, Statistics>(); for(Statistics stat: statisticsTable.values()) { result.put(stat.getScheme(), stat); } return result; }\n\n    ### Response: Get the Map of Statistics object indexed by URI Scheme.\n@return a Map having a key as URI scheme and value as Statistics object\n@deprecated use {@link #getAllStatistics} instead.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public ByteVector putByteArray( final byte[] byteArrayValue, final int byteOffset, final int byteLength) { if (length + byteLength > data.length) { enlarge(byteLength); } if (byteArrayValue != null) { System.arraycopy(byteArrayValue, byteOffset, data, length, byteLength); } length += byteLength; return this; }\n\n    ### Response:",
        "ground_truth": "Puts an array of bytes into this byte vector. The byte vector is automatically enlarged if\nnecessary.\n\n@param byteArrayValue an array of bytes. May be {@literal null} to put {@code byteLength} null\nbytes into this byte vector.\n@param byteOffset index of the first byte of byteArrayValue that must be copied.\n@param byteLength number of bytes of byteArrayValue that must be copied.\n@return this byte vector.",
        "predict": " Get the Map of Statistics object indexed by URI Scheme.\n@return a Map having a key as URI scheme and value as Statistics object\n@deprecated use {@link #getAllStatistics} instead.\n\n    "
    },
    {
        "ID": 1245,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function index() { if (!userHasPermission('admin:cdn:utilities:findOrphan')) { unauthorised(); } // -------------------------------------------------------------------------- $oInput = Factory::service('Input'); if ($oInput::isCli()) { $this->indexCli(); } else { if ($oInput->post()) { // A little form validation $type = $oInput->post('type'); $parser = $oInput->post('parser'); $error = ''; if ($type == 'db' && $parser == 'create') { $error = 'Cannot use \"Add to database\" results parser when finding orphaned database objects.'; } if (empty($error)) { switch ($type) { case 'db': $oCdn = Factory::service('Cdn', 'nails/module-cdn'); $this->data['orphans'] = $oCdn->findOrphanedObjects(); break; // @TODO case 'file': $this->data['message'] = '<strong>TODO:</strong> find orphaned files.'; break; // Invalid request default: $this->data['error'] = 'Invalid search type.'; break; } if (isset($this->data['orphans'])) { switch ($parser) { case 'list': $this->data['success'] = '<strong>Search complete!</strong> your results are show below.'; break; // @todo: keep the unset(), it prevents the table from rendering case 'purge': $this->data['message'] = '<strong>TODO:</strong> purge results.'; unset($this->data['orphans']); break; case 'create': $this->data['message'] = '<strong>TODO:</strong> create objects using results.'; unset($this->data['orphans']); break; // Invalid request default: $this->data['error'] = 'Invalid result parse selected.'; unset($this->data['orphans']); break; } } } else { $this->data['error'] = 'An error occurred. ' . $error; } } // -------------------------------------------------------------------------- $this->data['page']->title = 'CDN: Find Orphaned Objects'; // -------------------------------------------------------------------------- Helper::loadView('index'); } }\n\n    ### Response: Find orphaned CDN objects\n@return void.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void enlarge(final int size) { int doubleCapacity = 2 * data.length; int minimalCapacity = length + size; byte[] newData = new byte[doubleCapacity > minimalCapacity ? doubleCapacity : minimalCapacity]; System.arraycopy(data, 0, newData, 0, length); data = newData; }\n\n    ### Response:",
        "ground_truth": "Enlarges this byte vector so that it can receive 'size' more bytes.\n\n@param size number of additional bytes that this byte vector should be able to receive.",
        "predict": " Find orphaned CDN objects\n@return void.\n\n    "
    },
    {
        "ID": 1246,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void handleDirectRequest(HttpServerExchange exchange) { Log.Info(this,\"direct request received \"+exchange); getDirectRequestResponse(exchange.getRequestPath()).then( (s,err) -> { exchange.setResponseCode(200); exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, \"text/html; charset=utf-8\"); exchange.getResponseSender().send(s == null ? \"\"+err : s ); }); }\n\n    ### Response: reply a request catched by interceptor, note this is server dependent and bound to undertow.\nfor servlet containers, just override KontraktorServlet methods\n@param exchange.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected T authenticateUserViaHttpSession(final ActionRequest actionRequest) { final HttpServletRequest servletRequest = actionRequest.getHttpServletRequest(); final UserSession<T> userSession = UserSession.get(servletRequest); if (userSession == null) { return null; } final T authToken = userSession.getAuthToken(); if (authToken == null) { return null; } // granted final T newAuthToken = userAuth().rotateToken(authToken); if (newAuthToken != authToken) { final UserSession<T> newUserSesion = new UserSession<>(newAuthToken, userAuth().tokenValue(newAuthToken)); newUserSesion.start(servletRequest, actionRequest.getHttpServletResponse()); } return newAuthToken; }\n\n    ### Response:",
        "ground_truth": "Tries to authenticate user via HTTP session. Returns the token if user is authenticated.\nReturned token may be rotated.",
        "predict": " reply a request catched by interceptor, note this is server dependent and bound to undertow.\nfor servlet containers, just override KontraktorServlet methods\n@param exchange.\n\n    "
    },
    {
        "ID": 1247,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (v *RevNat4Value) ToNetwork() RevNatValue { n := *v n.Port = byteorder.HostToNetwork(n.Port).(uint16) return &n }\n\n    ### Response: // ToNetwork converts RevNat4Value to network byte order..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected T authenticateUserViaToken(final ActionRequest actionRequest) { final HttpServletRequest servletRequest = actionRequest.getHttpServletRequest(); // then try the auth token final String token = ServletUtil.resolveAuthBearerToken(servletRequest); if (token == null) { return null; } final T authToken = userAuth().validateToken(token); if (authToken == null) { return null; } // granted final T newAuthToken = userAuth().rotateToken(authToken); actionRequest.getHttpServletResponse().setHeader(\"Authentication\", \"Bearer: \" + userAuth().tokenValue(newAuthToken)); return newAuthToken; }\n\n    ### Response:",
        "ground_truth": "Tries to authenticate user via token. Returns the token if user is authenticated.\nReturned token may be rotated.",
        "predict": " // ToNetwork converts RevNat4Value to network byte order..\n\n    "
    },
    {
        "ID": 1248,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected ViewQuery createQuery(String viewName) { return new ViewQuery() .dbPath(db.path()) .designDocId(stdDesignDocumentId) .viewName(viewName); }\n\n    ### Response: Creates a ViewQuery pre-configured with correct dbPath, design document id and view name.\n@param viewName\n@return.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected T authenticateUserViaBasicAuth(final ActionRequest actionRequest) { final HttpServletRequest servletRequest = actionRequest.getHttpServletRequest(); final String username = ServletUtil.resolveAuthUsername(servletRequest); if (username == null) { return null; } final String password = ServletUtil.resolveAuthPassword(servletRequest); final T authToken = userAuth().login(username, password); if (authToken == null) { return null; } return authToken; }\n\n    ### Response:",
        "ground_truth": "Tires to authenticate user via the basic authentication. Returns the token if user is authenticated.",
        "predict": " Creates a ViewQuery pre-configured with correct dbPath, design document id and view name.\n@param viewName\n@return.\n\n    "
    },
    {
        "ID": 1249,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function getDirectoryName(string $path) : string { if (!$this->exists($path)) { throw new FileSystemException(\"File at path $path not found\"); } return pathinfo($path, PATHINFO_DIRNAME); }\n\n    ### Response: Gets the directory name of a file\n\n@param string $path The path to check\n@return string The directory name of the file\n@throws FileSystemException Thrown if the file does not exist.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String findDefaultMessage(final Locale locale, final String key) { String indexedKey = calcIndexKey(key); String msg = getMessage(fallbackBundlename, locale, key, indexedKey); if (msg != null) { return msg; } for (String bname : defaultBundles) { msg = getMessage(bname, locale, key, indexedKey); if (msg != null) { return msg; } } return null; }\n\n    ### Response:",
        "ground_truth": "Finds message in default bundles only, starting from fallback bundlename.",
        "predict": " Gets the directory name of a file\n\n@param string $path The path to check\n@return string The directory name of the file\n@throws FileSystemException Thrown if the file does not exist.\n\n    "
    },
    {
        "ID": 1250,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _decode_message_set_iter(cls, data): \"\"\" Iteratively decode a MessageSet Reads repeated elements of (offset, message), calling decode_message to decode a single message. Since compressed messages contain futher MessageSets, these two methods have been decoupled so that they may recurse easily. \"\"\" cur = 0 read_message = False while cur < len(data): try: ((offset, ), cur) = relative_unpack('>q', data, cur) (msg, cur) = read_int_string(data, cur) for (offset, message) in KafkaProtocol._decode_message(msg, offset): read_message = True yield OffsetAndMessage(offset, message) except BufferUnderflowError: # NOTE: Not sure this is correct error handling: # Is it possible to get a BUE if the message set is somewhere # in the middle of the fetch response? If so, we probably have # an issue that's not fetch size too small. # Aren't we ignoring errors if we fail to unpack data by # raising StopIteration()? # If _decode_message() raises a ChecksumError, couldn't that # also be due to the fetch size being too small? if read_message is False: # If we get a partial read of a message, but haven't # yielded anything there's a problem raise ConsumerFetchSizeTooSmall() else: raise StopIteration()\n\n    ### Response: Iteratively decode a MessageSet\n\n        Reads repeated elements of (offset, message), calling decode_message\n        to decode a single message. Since compressed messages contain futher\n        MessageSets, these two methods have been decoupled so that they may\n        recurse easily..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected ResourceBundle getBundle(final String bundleName, final Locale locale, final ClassLoader classLoader) { return ResourceBundle.getBundle(bundleName, locale, classLoader); }\n\n    ### Response:",
        "ground_truth": "Returns specified bundle. Invoked every time if cache is disabled.\nInput arguments are always valid.",
        "predict": " Iteratively decode a MessageSet\n\n        Reads repeated elements of (offset, message), calling decode_message\n        to decode a single message. Since compressed messages contain futher\n        MessageSets, these two methods have been decoupled so that they may\n        recurse easily..\n\n    "
    },
    {
        "ID": 1251,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    async function migrate (direction) { let config = require(path.join(process.cwd(), '.', 'config')) let db = require(path.join(process.cwd(), '.', 'db')) if (direction === 'up') { await db.migrate.latest(config.db) } else if (direction === 'down') { await db.migrate.rollback(config.db) } else { cli.showHelp(0) } process.exit(0) }\n\n    ### Response: Run the migrations in a given direction.\n\n@param {String} direction - The direcation to run, can be 'up' or 'down'.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected K get(final K[] array, final int index) { return (K) Array.get(array, index); }\n\n    ### Response:",
        "ground_truth": "Returns array's element at given index.",
        "predict": " Run the migrations in a given direction.\n\n@param {String} direction - The direcation to run, can be 'up' or 'down'.\n\n    "
    },
    {
        "ID": 1252,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def rhat(data, var_names=None): r\"\"\"Compute estimate of Split R-hat for a set of traces. The Split R-hat diagnostic tests for lack of convergence by comparing the variance between multiple chains to the variance within each chain. If convergence has been achieved, the between-chain and within-chain variances should be identical. To be most effective in detecting evidence for nonconvergence, each chain should have been initialized to starting values that are dispersed relative to the target distribution. Parameters ---------- data : obj Any object that can be converted to an az.InferenceData object Refer to documentation of az.convert_to_dataset for details At least 2 posterior chains are needed to compute this diagnostic of one or more stochastic parameters. For ndarray: shape = (chain, draw). var_names : list Names of variables to include in the rhat report Returns ------- r_hat : xarray.Dataset Returns dictionary of the potential scale reduction factors, :math:`\\hat{R}` Notes ----- The diagnostic is computed by: .. math:: \\hat{R} = \\frac{\\hat{V}}{W} where :math:`W` is the within-chain variance and :math:`\\hat{V}` is the posterior variance estimate for the pooled traces. This is the potential scale reduction factor, which converges to unity when each of the traces is a sample from the target posterior. Values greater than one indicate that one or more chains have not yet converged. References ---------- Gelman et al. BDA (2014) Brooks and Gelman (1998) Gelman and Rubin (1992) \"\"\" if isinstance(data, np.ndarray): return _get_split_rhat(data) dataset = convert_to_dataset(data, group=\"posterior\") var_names = _var_names(var_names, dataset) dataset = dataset if var_names is None else dataset[var_names] return xr.apply_ufunc(_rhat_ufunc, dataset, input_core_dims=((\"chain\", \"draw\"),))\n\n    ### Response: r\"\"\"Compute estimate of Split R-hat for a set of traces.\n\n    The Split R-hat diagnostic tests for lack of convergence by comparing the variance between\n    multiple chains to the variance within each chain. If convergence has been achieved, the\n    between-chain and within-chain variances should be identical. To be most effective in\n    detecting evidence for nonconvergence, each chain should have been initialized to starting\n    values that are dispersed relative to the target distribution.\n\n    Parameters\n    ----------\n    data : obj\n        Any object that can be converted to an az.InferenceData object\n        Refer to documentation of az.convert_to_dataset for details\n        At least 2 posterior chains are needed to compute this diagnostic of one or more\n        stochastic parameters.\n        For ndarray: shape = (chain, draw).\n    var_names : list\n      Names of variables to include in the rhat report\n\n    Returns\n    -------\n    r_hat : xarray.Dataset\n      Returns dictionary of the potential scale reduction factors, :math:`\\hat{R}`\n\n    Notes\n    -----\n    The diagnostic is computed by:\n\n      .. math:: \\hat{R} = \\frac{\\hat{V}}{W}\n\n    where :math:`W` is the within-chain variance and :math:`\\hat{V}` is the posterior variance\n    estimate for the pooled traces. This is the potential scale reduction factor, which converges\n    to unity when each of the traces is a sample from the target posterior. Values greater than one\n    indicate that one or more chains have not yet converged.\n\n    References\n    ----------\n    Gelman et al. BDA (2014)\n    Brooks and Gelman (1998)\n    Gelman and Rubin (1992).\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected <E, ID> void setEntityId(final DbEntityDescriptor<E> ded, final E entity, final ID newIdValue) { ded.setIdValue(entity, newIdValue); }\n\n    ### Response:",
        "ground_truth": "Sets new ID value for entity.",
        "predict": " r\"\"\"Compute estimate of Split R-hat for a set of traces.\n\n    The Split R-hat diagnostic tests for lack of convergence by comparing the variance between\n    multiple chains to the variance within each chain. If convergence has been achieved, the\n    between-chain and within-chain variances should be identical. To be most effective in\n    detecting evidence for nonconvergence, each chain should have been initialized to starting\n    values that are dispersed relative to the target distribution.\n\n    Parameters\n    ----------\n    data : obj\n        Any object that can be converted to an az.InferenceData object\n        Refer to documentation of az.convert_to_dataset for details\n        At least 2 posterior chains are needed to compute this diagnostic of one or more\n        stochastic parameters.\n        For ndarray: shape = (chain, draw).\n    var_names : list\n      Names of variables to include in the rhat report\n\n    Returns\n    -------\n    r_hat : xarray.Dataset\n      Returns dictionary of the potential scale reduction factors, :math:`\\hat{R}`\n\n    Notes\n    -----\n    The diagnostic is computed by:\n\n      .. math:: \\hat{R} = \\frac{\\hat{V}}{W}\n\n    where :math:`W` is the within-chain variance and :math:`\\hat{V}` is the posterior variance\n    estimate for the pooled traces. This is the potential scale reduction factor, which converges\n    to unity when each of the traces is a sample from the target posterior. Values greater than one\n    indicate that one or more chains have not yet converged.\n\n    References\n    ----------\n    Gelman et al. BDA (2014)\n    Brooks and Gelman (1998)\n    Gelman and Rubin (1992).\n\n    "
    },
    {
        "ID": 1253,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function remove($e) { if (!EnumUtil::isEnum($e, $this->class)) throw new InvalidArgumentException(sprintf('Element must be an instance of %s.', $this->class)); if (!$this->contains($e)) return false; $this->entries &= ~$this->universe[$e->ordinal()]; return true; }\n\n    ### Response: Removes a single instance of an object from this set, if it is present.\n\n@param  Enum $e the element to remove from this set, if present\n@return boolean true if this set changed as a result of this call.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void save(final Object entity) { final DbQuery q = query(dbOom.entities().insert(entity)); q.autoClose().executeUpdate(); }\n\n    ### Response:",
        "ground_truth": "Simply inserts object into the database.",
        "predict": " Removes a single instance of an object from this set, if it is present.\n\n@param  Enum $e the element to remove from this set, if present\n@return boolean true if this set changed as a result of this call.\n\n    "
    },
    {
        "ID": 1254,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public URL getDownloadUrl(ReportDownloadOptions options) throws RemoteException, MalformedURLException { ReportJobStatus status = reportService.getReportJobStatus(reportJobId); Preconditions.checkState(status == ReportJobStatus.COMPLETED, \"Report \" + reportJobId + \" must be completed before downloading. It is currently: \" + status); return new URL(reportService.getReportDownloadUrlWithOptions(reportJobId, options)); }\n\n    ### Response: Gets the download URL for a GZip or plain-text format report. If you requested\na compressed report, you may want to save your file with a gz or zip extension.\n\n\nURL url = reportDownloader.getDownloadUrl(options);\nResources.asByteSource(url).copyTo(Files.asByteSink(file));\n\n\n@param options the options to download the report with\n@return the URL for the report download\n@throws RemoteException if there was an error performing any Axis call\n@throws MalformedURLException if there is an error forming the download URL\n@throws IllegalStateException if the report is not ready to be downloaded.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void update(final Object entity) { query(dbOom.entities().updateAll(entity)).autoClose().executeUpdate(); }\n\n    ### Response:",
        "ground_truth": "Updates single entity.",
        "predict": " Gets the download URL for a GZip or plain-text format report. If you requested\na compressed report, you may want to save your file with a gz or zip extension.\n\n\nURL url = reportDownloader.getDownloadUrl(options);\nResources.asByteSource(url).copyTo(Files.asByteSink(file));\n\n\n@param options the options to download the report with\n@return the URL for the report download\n@throws RemoteException if there was an error performing any Axis call\n@throws MalformedURLException if there is an error forming the download URL\n@throws IllegalStateException if the report is not ready to be downloaded.\n\n    "
    },
    {
        "ID": 1255,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (b *Boxer) signEncryptMarshal(data interface{}, encryptionKey libkb.NaclSecretBoxKey, signingKeyPair libkb.NaclSigningKeyPair, prefix kbcrypto.SignaturePrefix) (chat1.SignEncryptedData, error) { encoded, err := b.marshal(data) if err != nil { return chat1.SignEncryptedData{}, err } return b.signEncrypt(encoded, encryptionKey, signingKeyPair, prefix) }\n\n    ### Response: // signEncryptMarshal signencrypts data given an encryption and signing key, returning a chat1.SignEncryptedData.\n// It marshals data before signing..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public <E> E updateProperty(final E entity, final String name, final Object newValue) { query(dbOom.entities().updateColumn(entity, name, newValue)).autoClose().executeUpdate(); BeanUtil.declared.setProperty(entity, name, newValue); return entity; }\n\n    ### Response:",
        "ground_truth": "Updates single property in database and in the bean.",
        "predict": " // signEncryptMarshal signencrypts data given an encryption and signing key, returning a chat1.SignEncryptedData.\n// It marshals data before signing..\n\n    "
    },
    {
        "ID": 1256,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static function array_merge_deep(array $dest, array $src, $appendIntegerKeys = true) { foreach ($src as $key => $value) { if (is_int($key) and $appendIntegerKeys) { $dest[] = $value; } elseif (isset($dest[$key]) and is_array($dest[$key]) and is_array($value)) { $dest[$key] = static::array_merge_deep($dest[$key], $value, $appendIntegerKeys); } else { $dest[$key] = $value; } } return $dest; }\n\n    ### Response: Merges two arrays recursively and returns the result.\n\n@param   array   $dest               Destination array\n@param   array   $src                Source array\n@param   boolean $appendIntegerKeys  Whether to append elements of $src\nto $dest if the key is an integer.\nThis is the default behavior.\nOtherwise elements from $src will\noverwrite the ones in $dest.\n@return  array.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public <E> E updateProperty(final E entity, final String name) { Object value = BeanUtil.declared.getProperty(entity, name); query(dbOom.entities().updateColumn(entity, name, value)).autoClose().executeUpdate(); return entity; }\n\n    ### Response:",
        "ground_truth": "Updates property in the database by storing the current property value.",
        "predict": " Merges two arrays recursively and returns the result.\n\n@param   array   $dest               Destination array\n@param   array   $src                Source array\n@param   boolean $appendIntegerKeys  Whether to append elements of $src\nto $dest if the key is an integer.\nThis is the default behavior.\nOtherwise elements from $src will\noverwrite the ones in $dest.\n@return  array.\n\n    "
    },
    {
        "ID": 1257,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (s *SampledHTTPRequest) SetRequest(v *HTTPRequest) *SampledHTTPRequest { s.Request = v return s }\n\n    ### Response: // SetRequest sets the Request field's value..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public <E, ID> E findById(final Class<E> entityType, final ID id) { return query(dbOom.entities().findById(entityType, id)).autoClose().find(entityType); }\n\n    ### Response:",
        "ground_truth": "Finds single entity by its id.",
        "predict": " // SetRequest sets the Request field's value..\n\n    "
    },
    {
        "ID": 1258,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function ensureEvents(obj, name) { obj._events = obj._events || {}; obj._events[name] = obj._events[name] || []; }\n\n    ### Response: Ensure an object to have the needed _events property\n@param  {*} obj\n@param  {String} name.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public <E> E findOneByProperty(final Class<E> entityType, final String name, final Object value) { return query(dbOom.entities().findByColumn(entityType, name, value)).autoClose().find(entityType); }\n\n    ### Response:",
        "ground_truth": "Finds single entity by matching property.",
        "predict": " Ensure an object to have the needed _events property\n@param  {*} obj\n@param  {String} name.\n\n    "
    },
    {
        "ID": 1259,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def image_name(self): \"\"\" The image_name of a container is the concatenation of the ``image_index``, ``image_name_prefix``, and ``name`` of the image. Also, if $EXTRA_IMAGE_NAME is defined, that is appended \"\"\" if getattr(self, \"_image_name\", NotSpecified) is NotSpecified: self._image_name = self.prefixed_image_name if self.image_index: self._image_name = \"{0}{1}\".format(self.image_index, self._image_name) if \"EXTRA_IMAGE_NAME\" in os.environ: self._image_name = \"{0}{1}\".format(self._image_name, os.environ[\"EXTRA_IMAGE_NAME\"]) return self._image_name\n\n    ### Response: The image_name of a container is the concatenation of the ``image_index``,\n        ``image_name_prefix``, and ``name`` of the image.\n\n        Also, if $EXTRA_IMAGE_NAME is defined, that is appended.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SuppressWarnings({\"unchecked\"}) public <E> E findOne(final Object criteria) { return (E) query(dbOom.entities().find(criteria)).autoClose().find(criteria.getClass()); }\n\n    ### Response:",
        "ground_truth": "Finds one entity for given criteria.",
        "predict": " The image_name of a container is the concatenation of the ``image_index``,\n        ``image_name_prefix``, and ``name`` of the image.\n\n        Also, if $EXTRA_IMAGE_NAME is defined, that is appended.\n\n    "
    },
    {
        "ID": 1260,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    static boolean isEmptyBlock(Node block) { if (!block.isBlock()) { return false; } for (Node n = block.getFirstChild(); n != null; n = n.getNext()) { if (!n.isEmpty()) { return false; } } return true; }\n\n    ### Response: Returns whether this a BLOCK node with no children.\n\n@param block The node..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public <ID> void deleteById(final Class entityType, final ID id) { query(dbOom.entities().deleteById(entityType, id)).autoClose().executeUpdate(); }\n\n    ### Response:",
        "ground_truth": "Deleted single entity by its id.",
        "predict": " Returns whether this a BLOCK node with no children.\n\n@param block The node..\n\n    "
    },
    {
        "ID": 1261,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def load_adjustments(self, dates, assets, should_include_splits, should_include_mergers, should_include_dividends, adjustment_type): \"\"\" Load collection of Adjustment objects from underlying adjustments db. Parameters ---------- dates : pd.DatetimeIndex Dates for which adjustments are needed. assets : pd.Int64Index Assets for which adjustments are needed. should_include_splits : bool Whether split adjustments should be included. should_include_mergers : bool Whether merger adjustments should be included. should_include_dividends : bool Whether dividend adjustments should be included. adjustment_type : str Whether price adjustments, volume adjustments, or both, should be included in the output. Returns ------- adjustments : dict[str -> dict[int -> Adjustment]] A dictionary containing price and/or volume adjustment mappings from index to adjustment objects to apply at that index. \"\"\" return load_adjustments_from_sqlite( self.conn, dates, assets, should_include_splits, should_include_mergers, should_include_dividends, adjustment_type, )\n\n    ### Response: Load collection of Adjustment objects from underlying adjustments db.\n\n        Parameters\n        ----------\n        dates : pd.DatetimeIndex\n            Dates for which adjustments are needed.\n        assets : pd.Int64Index\n            Assets for which adjustments are needed.\n        should_include_splits : bool\n            Whether split adjustments should be included.\n        should_include_mergers : bool\n            Whether merger adjustments should be included.\n        should_include_dividends : bool\n            Whether dividend adjustments should be included.\n        adjustment_type : str\n            Whether price adjustments, volume adjustments, or both, should be\n            included in the output.\n\n        Returns\n        -------\n        adjustments : dict[str -> dict[int -> Adjustment]]\n            A dictionary containing price and/or volume adjustment mappings\n            from index to adjustment objects to apply at that index..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void deleteById(final Object entity) { if (entity != null) { int result = query(dbOom.entities().deleteById(entity)).autoClose().executeUpdate(); if (result != 0) { // now reset the ID value Class type = entity.getClass(); DbEntityDescriptor ded = dbOom.entityManager().lookupType(type); setEntityId(ded, entity, 0); } } }\n\n    ### Response:",
        "ground_truth": "Delete single object by its id. Resets ID value.",
        "predict": " Load collection of Adjustment objects from underlying adjustments db.\n\n        Parameters\n        ----------\n        dates : pd.DatetimeIndex\n            Dates for which adjustments are needed.\n        assets : pd.Int64Index\n            Assets for which adjustments are needed.\n        should_include_splits : bool\n            Whether split adjustments should be included.\n        should_include_mergers : bool\n            Whether merger adjustments should be included.\n        should_include_dividends : bool\n            Whether dividend adjustments should be included.\n        adjustment_type : str\n            Whether price adjustments, volume adjustments, or both, should be\n            included in the output.\n\n        Returns\n        -------\n        adjustments : dict[str -> dict[int -> Adjustment]]\n            A dictionary containing price and/or volume adjustment mappings\n            from index to adjustment objects to apply at that index..\n\n    "
    },
    {
        "ID": 1262,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (ngram *Ngram) Hash() uint64 { h := fnv.New64a() h.Write((*ngram)[:]) return h.Sum64() }\n\n    ### Response: // Hash hashes a ngram.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public long count(final Class entityType) { return query(dbOom.entities().count(entityType)).autoClose().executeCount(); }\n\n    ### Response:",
        "ground_truth": "Counts number of all entities.",
        "predict": " // Hash hashes a ngram.\n\n    "
    },
    {
        "ID": 1263,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    async def refresh_token(self): \"\"\"Refresh oauth access token attached to this HTTP session. Raises: :exc:`.GCPAuthError`: if no token was found in the response. :exc:`.GCPHTTPError`: if any exception occurred, specifically a :exc:`.GCPHTTPResponseError`, if the exception is associated with a response status code. \"\"\" url, headers, body = self._setup_token_request() request_id = uuid.uuid4() logging.debug(_utils.REQ_LOG_FMT.format( request_id=request_id, method='POST', url=url, kwargs=None)) async with self._session.post(url, headers=headers, data=body) as resp: log_kw = { 'request_id': request_id, 'method': 'POST', 'url': resp.url, 'status': resp.status, 'reason': resp.reason, } logging.debug(_utils.RESP_LOG_FMT.format(**log_kw)) # avoid leaky abstractions and wrap http errors with our own try: resp.raise_for_status() except aiohttp.ClientResponseError as e: msg = f'[{request_id}] Issue connecting to {resp.url}: {e}' logging.error(msg, exc_info=e) raise exceptions.GCPHTTPResponseError(msg, resp.status) response = await resp.json() try: self.token = response['access_token'] except KeyError: msg = '[{request_id}] No access token in response.' logging.error(msg) raise exceptions.GCPAuthError(msg) self.expiry = _client._parse_expiry(response)\n\n    ### Response: Refresh oauth access token attached to this HTTP session.\n\n        Raises:\n            :exc:`.GCPAuthError`: if no token was found in the\n                response.\n            :exc:`.GCPHTTPError`: if any exception occurred,\n                specifically a :exc:`.GCPHTTPResponseError`, if the\n                exception is associated with a response status code..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public <ID> void increaseProperty(final Class entityType, final ID id, final String name, final Number delta) { query(dbOom.entities().increaseColumn(entityType, id, name, delta, true)).autoClose().executeUpdate(); }\n\n    ### Response:",
        "ground_truth": "Increases a property.",
        "predict": " Refresh oauth access token attached to this HTTP session.\n\n        Raises:\n            :exc:`.GCPAuthError`: if no token was found in the\n                response.\n            :exc:`.GCPHTTPError`: if any exception occurred,\n                specifically a :exc:`.GCPHTTPResponseError`, if the\n                exception is associated with a response status code..\n\n    "
    },
    {
        "ID": 1264,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public void stop() throws Exception { log.info(\"Stopping {}...\", name); submitBuffer(true); if (coreContainer != null) { coreContainer.shutdown(); } if (consumer != null) { try { consumer.close(); } catch (JMSException jmse) { log.warn(\"Failed to close consumer: {}\", jmse.getMessage()); throw jmse; } } if (session != null) { try { session.close(); } catch (JMSException jmse) { log.warn(\"Failed to close consumer session: {}\", jmse); } } if (connection != null) { try { connection.close(); } catch (JMSException jmse) { log.warn(\"Failed to close connection: {}\", jmse); } } timer.cancel(); }\n\n    ### Response: Stop the Render Queue Consumer. Including stopping the storage and\nindexer.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public <ID> void decreaseProperty(final Class entityType, final ID id, final String name, final Number delta) { query(dbOom.entities().increaseColumn(entityType, id, name, delta, false)).autoClose().executeUpdate(); }\n\n    ### Response:",
        "ground_truth": "Decreases a property.",
        "predict": " Stop the Render Queue Consumer. Including stopping the storage and\nindexer.\n\n    "
    },
    {
        "ID": 1265,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function keyuri(user = 'user', service = 'service', secret = '') { const protocol = 'otpauth://totp/'; const value = data .replace('{user}', encodeURIComponent(user)) .replace('{secret}', secret) .replace(/{service}/g, encodeURIComponent(service)); return protocol + value; }\n\n    ### Response: Generates an otpauth uri\n\nThe \"user\" and \"service\" parameters will\nbe passed to encodeURIComponent for encoding\n\n@namespace otplib/impl/authenticator\n@module otplib-authenticator/keyuri\n@param {string} user - the name/id of your user\n@param {string} service - the name of your service\n@param {string} secret - your secret that is used to generate the token\n@return {string} otpauth uri. Example: otpauth://totp/user:localhost?secret=NKEIBAOUFA.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public <E> List<E> findRelated(final Class<E> target, final Object source) { return query(dbOom.entities().findForeign(target, source)).autoClose().list(target); }\n\n    ### Response:",
        "ground_truth": "Finds related entity.",
        "predict": " Generates an otpauth uri\n\nThe \"user\" and \"service\" parameters will\nbe passed to encodeURIComponent for encoding\n\n@namespace otplib/impl/authenticator\n@module otplib-authenticator/keyuri\n@param {string} user - the name/id of your user\n@param {string} service - the name of your service\n@param {string} secret - your secret that is used to generate the token\n@return {string} otpauth uri. Example: otpauth://totp/user:localhost?secret=NKEIBAOUFA.\n\n    "
    },
    {
        "ID": 1266,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _update_guide(self, guide, update=False, clear=True): \"\"\"Update a single specified guide\"\"\" kml_filename = os.path.join(self.cache_path, guide + '.kml') geojson_filename = os.path.join(self.cache_path, guide + '.geojson') if not os.path.exists(geojson_filename) or update: try: data = request.urlopen(self.guides[guide]).read().decode( 'utf-8') except (request.URLError, request.HTTPError) as e: self.log('Could not get web guide data:', e, type(e), lvl=warn) return with open(kml_filename, 'w') as f: f.write(data) self._translate(kml_filename, geojson_filename) with open(geojson_filename, 'r') as f: json_data = json.loads(f.read()) if len(json_data['features']) == 0: self.log('No features found!', lvl=warn) return layer = objectmodels['layer'].find_one({'name': guide}) if clear and layer is not None: layer.delete() layer = None if layer is None: layer_uuid = std_uuid() layer = objectmodels['layer']({ 'uuid': layer_uuid, 'name': guide, 'type': 'geoobjects' }) layer.save() else: layer_uuid = layer.uuid if clear: for item in objectmodels['geoobject'].find({'layer': layer_uuid}): self.log('Deleting old guide location', lvl=debug) item.delete() locations = [] for item in json_data['features']: self.log('Adding new guide location:', item, lvl=verbose) location = objectmodels['geoobject']({ 'uuid': std_uuid(), 'layer': layer_uuid, 'geojson': item, 'type': 'Skipperguide', 'name': 'Guide for %s' % (item['properties']['Name']) }) locations.append(location) self.log('Bulk inserting guide locations', lvl=debug) objectmodels['geoobject'].bulk_create(locations)\n\n    ### Response: Update a single specified guide.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public <E> List<E> listAll(final Class<E> target) { return query(dbOom.entities().from(target)).autoClose().list(target); }\n\n    ### Response:",
        "ground_truth": "List all entities.",
        "predict": " Update a single specified guide.\n\n    "
    },
    {
        "ID": 1267,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def get_events_with_cluster_size(event_number, cluster_size, condition='cluster_size==1'): '''Selects the events with cluster of a given cluster size. Parameters ---------- event_number : numpy.array cluster_size : numpy.array condition : string Returns ------- numpy.array ''' logging.debug(\"Calculate events with clusters with \" + condition) return np.unique(event_number[ne.evaluate(condition)])\n\n    ### Response: Selects the events with cluster of a given cluster size.\n\n    Parameters\n    ----------\n    event_number : numpy.array\n    cluster_size : numpy.array\n    condition : string\n\n    Returns\n    -------\n    numpy.array.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public void clear() { entries = null; Iterator<String> keys = getAttributeNames(); while (keys.hasNext()) { removeAttribute(keys.next()); } }\n\n    ### Response:",
        "ground_truth": "Removes all attributes from the request as well as clears entries in this map.",
        "predict": " Selects the events with cluster of a given cluster size.\n\n    Parameters\n    ----------\n    event_number : numpy.array\n    cluster_size : numpy.array\n    condition : string\n\n    Returns\n    -------\n    numpy.array.\n\n    "
    },
    {
        "ID": 1268,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def add_kv_store(self, key, value): \"\"\"Add a key-value store entry. :param key: string :param value: string \"\"\" data = { 'operation': 'STORE', 'key': key, 'value': value } return self.post(self.make_url(\"/useragent-kv\"), data=to_json(data), headers=self.default_headers).text\n\n    ### Response: Add a key-value store entry.\n\n        :param key: string\n        :param value: string.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public Set<Entry<String, Object>> entrySet() { if (entries == null) { entries = new HashSet<>(); Iterator<String> iterator = getAttributeNames(); while (iterator.hasNext()) { final String key = iterator.next(); final Object value = getAttribute(key); entries.add(new Entry<String, Object>() { @Override public boolean equals(final Object obj) { if (obj == null) { return false; } if (this.getClass() != obj.getClass()) { return false; } Entry entry = (Entry) obj; return ((key == null) ? (entry.getKey() == null) : key.equals(entry.getKey())) && ((value == null) ? (entry.getValue() == null) : value.equals(entry.getValue())); } @Override public int hashCode() { return ((key == null) ? 0 : key.hashCode()) ^ ((value == null) ? 0 : value.hashCode()); } @Override public String getKey() { return key; } @Override public Object getValue() { return value; } @Override public Object setValue(final Object obj) { setAttribute(key, obj); return value; } }); } } return entries; }\n\n    ### Response:",
        "ground_truth": "",
        "predict": " Add a key-value store entry.\n\n        :param key: string\n        :param value: string.\n\n    "
    },
    {
        "ID": 1269,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static function FromString($Parent, $String, $Tag, $Name = 'Configuration') { $ConfigurationData = self::ParseString($String, $Name); if ($ConfigurationData === FALSE) throw new Exception('Could not parse config string.'); return new Gdn_ConfigurationSource($Parent, 'string', $Tag, $Name, $ConfigurationData); }\n\n    ### Response: Load config data from a string\n\n@param Gdn_Configuration $Parent Parent config object\n@param string $String Config data string\n@param string $Tag Internal friendly name\n@param string $Name Optional setting name\n@return Gdn_ConfigurationSource.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public Object put(final String key, final Object value) { entries = null; Object previous = get(key); setAttribute(key, value); return previous; }\n\n    ### Response:",
        "ground_truth": "Saves an attribute in the request.",
        "predict": " Load config data from a string\n\n@param Gdn_Configuration $Parent Parent config object\n@param string $String Config data string\n@param string $Tag Internal friendly name\n@param string $Name Optional setting name\n@return Gdn_ConfigurationSource.\n\n    "
    },
    {
        "ID": 1270,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func MaxConcurrentRequestsPerFile(n int) ClientOption { return func(c *Client) error { if n < 1 { return errors.Errorf(\"n must be greater or equal to 1\") } c.maxConcurrentRequests = n return nil } }\n\n    ### Response: // MaxConcurrentRequestsPerFile sets the maximum concurrent requests allowed for a single file.\n//\n// The default maximum concurrent requests is 64..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public Object remove(final Object key) { entries = null; Object value = get(key); removeAttribute(key.toString()); return value; }\n\n    ### Response:",
        "ground_truth": "Removes the specified request attribute.",
        "predict": " // MaxConcurrentRequestsPerFile sets the maximum concurrent requests allowed for a single file.\n//\n// The default maximum concurrent requests is 64..\n\n    "
    },
    {
        "ID": 1271,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _get_connection(self): \"\"\" Returns connection to sqlite db. Returns: connection to the sqlite db who stores mpr data. \"\"\" if getattr(self, '_connection', None): logger.debug('Connection to sqlite db already exists. Using existing one.') else: dsn = self._dsn if dsn == 'sqlite://': dsn = ':memory:' else: dsn = dsn.replace('sqlite:///', '') logger.debug( 'Creating new apsw connection.\\n dsn: {}, config_dsn: {}' .format(dsn, self._dsn)) self._connection = apsw.Connection(dsn) return self._connection\n\n    ### Response: Returns connection to sqlite db.\n\n        Returns:\n            connection to the sqlite db who stores mpr data..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SuppressWarnings({\"ThrowCaughtLocally\"}) public static StackTraceElement[] getCurrentStackTrace() { StackTraceElement[] ste = new Exception().getStackTrace(); if (ste.length > 1) { StackTraceElement[] result = new StackTraceElement[ste.length - 1]; System.arraycopy(ste, 1, result, 0, ste.length - 1); return result; } else { return ste; } }\n\n    ### Response:",
        "ground_truth": "Returns current stack trace in form of array of stack trace elements.\nFirst stack trace element is removed.\nSince an exception is thrown internally, this method is slow.",
        "predict": " Returns connection to sqlite db.\n\n        Returns:\n            connection to the sqlite db who stores mpr data..\n\n    "
    },
    {
        "ID": 1272,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function getData($object) { if (! $this->has($object) ) throw new \\Exception('Object Not Found.'); $hash = $this->genETag($object); return $this->_objs[$hash]['data']; }\n\n    ### Response: Get Tag Data Of Specific Object\n\nnote: use ETag to attain target object for\nperformance\n\n@param $object\n\n@throws \\Exception Object not stored\n@return array.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static StackTraceElement[] getStackTrace(final Throwable t, final String[] allow, final String[] deny) { StackTraceElement[] st = t.getStackTrace(); ArrayList<StackTraceElement> result = new ArrayList<>(st.length); elementLoop: for (StackTraceElement element : st) { String className = element.getClassName(); if (allow != null) { boolean validElemenet = false; for (String filter : allow) { if (className.contains(filter)) { validElemenet = true; break; } } if (!validElemenet) { continue; } } if (deny != null) { for (String filter : deny) { if (className.contains(filter)) { continue elementLoop; } } } result.add(element); } st = new StackTraceElement[result.size()]; return result.toArray(st); }\n\n    ### Response:",
        "ground_truth": "Returns stack trace filtered by class names.",
        "predict": " Get Tag Data Of Specific Object\n\nnote: use ETag to attain target object for\nperformance\n\n@param $object\n\n@throws \\Exception Object not stored\n@return array.\n\n    "
    },
    {
        "ID": 1273,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func CountOrganizations() int64 { count, _ := x.Where(\"type=1\").Count(new(User)) return count }\n\n    ### Response: // CountOrganizations returns number of organizations..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static StackTraceElement[][] getStackTraceChain(Throwable t, final String[] allow, final String[] deny) { ArrayList<StackTraceElement[]> result = new ArrayList<>(); while (t != null) { StackTraceElement[] stack = getStackTrace(t, allow, deny); result.add(stack); t = t.getCause(); } StackTraceElement[][] allStacks = new StackTraceElement[result.size()][]; for (int i = 0; i < allStacks.length; i++) { allStacks[i] = result.get(i); } return allStacks; }\n\n    ### Response:",
        "ground_truth": "Returns stack trace chain filtered by class names.",
        "predict": " // CountOrganizations returns number of organizations..\n\n    "
    },
    {
        "ID": 1274,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private function existsParamTagWithArgument($parameters, ArgumentDescriptor $argument) { foreach ($parameters as $parameter) { if ($argument->getName() == $parameter->getVariableName()) { return true; } } return false; }\n\n    ### Response: Returns whether the list of param tags features the given argument.\n\n@param ParamDescriptor[]|Collection $parameters\n@param ArgumentDescriptor           $argument\n\n@return boolean.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Throwable[] getExceptionChain(Throwable throwable) { ArrayList<Throwable> list = new ArrayList<>(); list.add(throwable); while ((throwable = throwable.getCause()) != null) { list.add(throwable); } Throwable[] result = new Throwable[list.size()]; return list.toArray(result); }\n\n    ### Response:",
        "ground_truth": "Returns exception chain starting from top up to root cause.",
        "predict": " Returns whether the list of param tags features the given argument.\n\n@param ParamDescriptor[]|Collection $parameters\n@param ArgumentDescriptor           $argument\n\n@return boolean.\n\n    "
    },
    {
        "ID": 1275,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def buildASNList(rootnames, asnname, check_for_duplicates=True): \"\"\" Return the list of filenames for a given set of rootnames \"\"\" # Recognize when multiple valid inputs with the same rootname are present # this would happen when both CTE-corrected (_flc) and non-CTE-corrected (_flt) # products are in the same directory as an ASN table filelist, duplicates = checkForDuplicateInputs(rootnames) if check_for_duplicates and duplicates: # Build new ASN tables for each set of input files origasn = changeSuffixinASN(asnname, 'flt') dupasn = changeSuffixinASN(asnname, 'flc') errstr = 'ERROR:\\nMultiple valid input files found:\\n' for fname, dname in zip(filelist, duplicates): errstr += ' %s %s\\n' % (fname, dname) errstr += ('\\nNew association files have been generated for each ' 'version of these files.\\n %s\\n %s\\n\\nPlease ' 're-start astrodrizzle using of these new ASN files or ' 'use widlcards for the input to only select one type of ' 'input file.' % (dupasn, origasn)) print(textutil.textbox(errstr), file=sys.stderr) # generate new ASN files for each case, # report this case of duplicate inputs to the user then quit raise ValueError return filelist\n\n    ### Response: Return the list of filenames for a given set of rootnames.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String exceptionStackTraceToString(final Throwable t) { StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw, true); t.printStackTrace(pw); StreamUtil.close(pw); StreamUtil.close(sw); return sw.toString(); }\n\n    ### Response:",
        "ground_truth": "Prints stack trace into a String.",
        "predict": " Return the list of filenames for a given set of rootnames.\n\n    "
    },
    {
        "ID": 1276,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function unlock($key) { $path = $key.'.lock'; try { $this->filesystem->delete($path); } catch (FileNotFoundException $e) { return false; } return true; }\n\n    ### Response: Release the lock for a given key.\n\n@param string $key\n\n@return bool.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String exceptionChainToString(Throwable t) { StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw, true); while (t != null) { t.printStackTrace(pw); t = t.getCause(); } StreamUtil.close(pw); StreamUtil.close(sw); return sw.toString(); }\n\n    ### Response:",
        "ground_truth": "Prints full exception stack trace, from top to root cause, into a String.",
        "predict": " Release the lock for a given key.\n\n@param string $key\n\n@return bool.\n\n    "
    },
    {
        "ID": 1277,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public final void setIcon(@NonNull final Context context, @DrawableRes final int resourceId) { Condition.INSTANCE.ensureNotNull(context, \"The context may not be null\"); this.icon = ContextCompat.getDrawable(context, resourceId); }\n\n    ### Response: Sets the icon, which should be shown, if the validation fails.\n\n@param context\nThe context, which should be used to retrieve the icon, as an instance of the class\n{@link Context}. The context may not be null\n@param resourceId\nThe resource ID of the drawable resource, which contains the icon, which should be\nset, as an {@link Integer} value. The resource ID must correspond to a valid drawable\nresource.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String buildMessage(final String message, Throwable cause) { if (cause != null) { cause = getRootCause(cause); StringBuilder buf = new StringBuilder(); if (message != null) { buf.append(message).append(\"; \"); } buf.append(\"<--- \").append(cause); return buf.toString(); } else { return message; } }\n\n    ### Response:",
        "ground_truth": "Build a message for the given base message and its cause.",
        "predict": " Sets the icon, which should be shown, if the validation fails.\n\n@param context\nThe context, which should be used to retrieve the icon, as an instance of the class\n{@link Context}. The context may not be null\n@param resourceId\nThe resource ID of the drawable resource, which contains the icon, which should be\nset, as an {@link Integer} value. The resource ID must correspond to a valid drawable\nresource.\n\n    "
    },
    {
        "ID": 1278,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def parse(node) node.xpath('*').each do |node_child| case node_child.name when 'alpha' @alpha = (node_child.attribute('val').value.to_f / 1_000.0).round when 'lumMod' @luminance_modulation = node_child.attribute('val').value.to_f / 100_000.0 when 'lumOff' @luminance_offset = node_child.attribute('val').value.to_f / 100_000.0 when 'tint' @tint = node_child.attribute('val').value.to_f / 100_000.0 end end self end\n\n    ### Response: Parse ColorProperties object\n @param node [Nokogiri::XML:Element] node to parse\n @return [ColorProperties] result of parsing.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Throwable unwrapThrowable(final Throwable wrappedThrowable) { Throwable unwrapped = wrappedThrowable; while (true) { if (unwrapped instanceof InvocationTargetException) { unwrapped = ((InvocationTargetException) unwrapped).getTargetException(); } else if (unwrapped instanceof UndeclaredThrowableException) { unwrapped = ((UndeclaredThrowableException) unwrapped).getUndeclaredThrowable(); } else { return unwrapped; } } }\n\n    ### Response:",
        "ground_truth": "Unwraps invocation and undeclared exceptions to real cause.",
        "predict": " Parse ColorProperties object\n @param node [Nokogiri::XML:Element] node to parse\n @return [ColorProperties] result of parsing.\n\n    "
    },
    {
        "ID": 1279,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function fromBarcode($barcode) { $destinationUrl = $this->client->getRedirectLocation('/items', ['item_barcode' => $barcode]); // Extract the MMS ID from the redirect target URL. // Example: https://api-eu.hosted.exlibrisgroup.com/almaws/v1/bibs/999211285764702204/holdings/22156746440002204/items/23156746430002204 if (!is_null($destinationUrl) && preg_match('$bibs/([0-9]+)/holdings/([0-9]+)/items/([0-9]+)$', $destinationUrl, $matches)) { $mmsId = $matches[1]; return $this->get($mmsId); } }\n\n    ### Response: Get a Bib object from a item barcode.\n\n@param string $barcode\n\n@return Bib.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void registerAsConsumer(final ClassScanner classScanner) { classScanner.registerEntryConsumer(classPathEntry -> { final String entryName = classPathEntry.name(); if (entryName.endsWith(actionClassSuffix)) { try { acceptActionClass(classPathEntry.loadClass()); } catch (Exception ex) { log.debug(\"Invalid Madvoc action, ignoring: \" + entryName); } } else if (classPathEntry.isTypeSignatureInUse(MADVOC_COMPONENT_ANNOTATION)) { try { acceptMadvocComponentClass(classPathEntry.loadClass()); } catch (Exception ex) { log.debug(\"Invalid Madvoc component ignoring: {}\" + entryName); } } }); }\n\n    ### Response:",
        "ground_truth": "Parses class name that matches madvoc-related names.",
        "predict": " Get a Bib object from a item barcode.\n\n@param string $barcode\n\n@return Bib.\n\n    "
    },
    {
        "ID": 1280,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def build_config(ctx, target, config_path, c, extra_path, ignore, verbose, silent, debug): \"\"\" Creates a LintConfig object based on a set of commandline parameters. \"\"\" config_builder = LintConfigBuilder() try: # Config precedence: # First, load default config or config from configfile if config_path: config_builder.set_from_config_file(config_path) elif os.path.exists(DEFAULT_CONFIG_FILE): config_builder.set_from_config_file(DEFAULT_CONFIG_FILE) # Then process any commandline configuration flags config_builder.set_config_from_string_list(c) # Finally, overwrite with any convenience commandline flags if ignore: config_builder.set_option('general', 'ignore', ignore) if silent: config_builder.set_option('general', 'verbosity', 0) elif verbose > 0: config_builder.set_option('general', 'verbosity', verbose) if extra_path: config_builder.set_option('general', 'extra-path', extra_path) if target: config_builder.set_option('general', 'target', target) if debug: config_builder.set_option('general', 'debug', debug) config = config_builder.build() return config, config_builder except LintConfigError as e: click.echo(u\"Config Error: {0}\".format(ustr(e))) ctx.exit(CONFIG_ERROR_CODE)\n\n    ### Response: Creates a LintConfig object based on a set of commandline parameters..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void acceptMadvocComponentClass(final Class componentClass) { if (componentClass == null) { return; } if (!checkClass(componentClass)) { return; } madvocComponents.add(() -> madvocContainer.registerComponent(componentClass)); }\n\n    ### Response:",
        "ground_truth": "Registers new Madvoc component.",
        "predict": " Creates a LintConfig object based on a set of commandline parameters..\n\n    "
    },
    {
        "ID": 1281,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function findByKey($target, $default = '') { foreach ($this->collection as $group => $hashMap) { if (array_key_exists($target, $hashMap)) { return $hashMap[$target]; } } return $default; }\n\n    ### Response: Find a value by its associated key\n\n@param string $key\n@param mixed $default Default value to be returned\n@return mixed.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static ClassLoader getSystemClassLoader() { if (System.getSecurityManager() == null) { return ClassLoader.getSystemClassLoader(); } else { return AccessController.doPrivileged( (PrivilegedAction<ClassLoader>) ClassLoader::getSystemClassLoader); } }\n\n    ### Response:",
        "ground_truth": "Returns system class loader.",
        "predict": " Find a value by its associated key\n\n@param string $key\n@param mixed $default Default value to be returned\n@return mixed.\n\n    "
    },
    {
        "ID": 1282,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public ComplexPixel mult(double r, double i){ double thisr = real(), thisi = imag(); return setComplex(thisr*r-thisi*i, thisr*i+thisi*r); }\n\n    ### Response: Multiplies a complex number to this pixel. This performs a complex multiplication\nand stores the result in this pixel.\n@param r real part to multiply\n@param i imaginary part to multiply\n@return this.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static InputStream getResourceAsStream(final String resourceName, final ClassLoader callingClass) throws IOException { URL url = getResourceUrl(resourceName, callingClass); if (url != null) { return url.openStream(); } return null; }\n\n    ### Response:",
        "ground_truth": "Opens a resource of the specified name for reading.\n@see #getResourceUrl(String, ClassLoader)",
        "predict": " Multiplies a complex number to this pixel. This performs a complex multiplication\nand stores the result in this pixel.\n@param r real part to multiply\n@param i imaginary part to multiply\n@return this.\n\n    "
    },
    {
        "ID": 1283,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function getValue (key, cookieString, converter = null) { let result = createJWPCookie(key, cookieString, converter); // if `key` is undefined we want the entire cookie return _.isUndefined(key) ? result : result.value; }\n\n    ### Response: takes a JavaScript cookiestring and parses it for the value given the key.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static InputStream getResourceAsStream(final String resourceName, final ClassLoader callingClass, final boolean useCache) throws IOException { URL url = getResourceUrl(resourceName, callingClass); if (url != null) { URLConnection urlConnection = url.openConnection(); urlConnection.setUseCaches(useCache); return urlConnection.getInputStream(); } return null; }\n\n    ### Response:",
        "ground_truth": "Opens a resource of the specified name for reading. Controls caching,\nthat is important when the same jar is reloaded using custom classloader.",
        "predict": " takes a JavaScript cookiestring and parses it for the value given the key.\n\n    "
    },
    {
        "ID": 1284,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function BuildHead(metaObject = {}) { const metaCopy = Object.assign({}, metaObject); let finalString = \"\"; if (metaCopy.title) { finalString += `<title>${metaCopy.title}</title>`; } if (metaCopy.meta) { throw new Error(\"WARNING - DEPRECATED: It looks like you're using the old meta object, please migrate to the new one\"); } if (metaCopy.metas) { for (let index = 0; index < metaCopy.metas.length; index++) { const headItem = metaCopy.metas[index]; const processedItem = ProcessMetaItem(headItem); if (processedItem !== undefined) { finalString += processedItem; } } } if (metaCopy.scripts) { for (let index = 0; index < metaCopy.scripts.length; index++) { const headItem = metaCopy.scripts[index]; const processedItem = ProcessScriptItem(headItem); if (processedItem !== undefined) { finalString += processedItem; } } } if (metaCopy.styles) { for (let index = 0; index < metaCopy.styles.length; index++) { const headItem = metaCopy.styles[index]; const processedItem = ProcessStyleItem(headItem); if (processedItem !== undefined) { finalString += processedItem; } } } if (metaCopy.structuredData) { finalString += `<script type=\"application/ld+json\">${JSON.stringify(metaCopy.structuredData)}</script>`; } return finalString; }\n\n    ### Response: BuildHead takes the array and splits it up for processing\n@param {object} metaObject\n@returns {String}.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static InputStream getClassAsStream(final Class clazz) throws IOException { return getResourceAsStream(ClassUtil.convertClassNameToFileName(clazz), clazz.getClassLoader()); }\n\n    ### Response:",
        "ground_truth": "Opens a class of the specified name for reading using class classloader.\n@see #getResourceAsStream(String, ClassLoader)",
        "predict": " BuildHead takes the array and splits it up for processing\n@param {object} metaObject\n@returns {String}.\n\n    "
    },
    {
        "ID": 1285,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function ymllink($str) { return preg_replace_callback( '/ ([a-z0-9_-]+\\.yml)/i', function ($matches) { $path = $this->urlGenerator->generate('fileedit', ['namespace' => 'config', 'file' => $matches[1]]); $link = sprintf(' <a href=\"%s\">%s</a>', $path, $matches[1]); return $link; }, $str ); }\n\n    ### Response: Create a link to edit a .yml file, if a filename is detected in the string. Mostly\nfor use in Flashbag messages, to allow easy editing.\n\n@param string $str\n\n@return string Resulting string.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static InputStream getClassAsStream(final String className, final ClassLoader classLoader) throws IOException { return getResourceAsStream(ClassUtil.convertClassNameToFileName(className), classLoader); }\n\n    ### Response:",
        "ground_truth": "Opens a class of the specified name for reading using provided class loader.",
        "predict": " Create a link to edit a .yml file, if a filename is detected in the string. Mostly\nfor use in Flashbag messages, to allow easy editing.\n\n@param string $str\n\n@return string Resulting string.\n\n    "
    },
    {
        "ID": 1286,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function button( $label = null, $url = null, $status = null, $icon = null, $block = false, $disabled = false, $flat = false, $size = Button::SIZE_NORMAL) { $button = new Button($label, $url, $status, $icon, $block, $disabled, $flat, $size); return $this->addButton($button); }\n\n    ### Response: Create a new button\n@param string $label\n@param string $url\n@param string $status\n@param string $icon\n@param bool $block\n@param bool $disabled\n@param bool $flat\n@param string $size\n@return $this.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public RouteChunk add(final String newValue) { RouteChunk routeChunk = new RouteChunk(routes, this, newValue); if (children == null) { children = new RouteChunk[] {routeChunk}; } else { children = ArraysUtil.append(children, routeChunk); } return routeChunk; }\n\n    ### Response:",
        "ground_truth": "Adds a new child to the tree.",
        "predict": " Create a new button\n@param string $label\n@param string $url\n@param string $status\n@param string $icon\n@param bool $block\n@param bool $disabled\n@param bool $flat\n@param string $size\n@return $this.\n\n    "
    },
    {
        "ID": 1287,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void setSchemaOnConnection(Connection connection) throws SQLException { logger.finest(\"Entering \" + CLASSNAME +\".setSchemaOnConnection()\"); String dbProductName = connection.getMetaData().getDatabaseProductName(); if (!\"Oracle\".equals(dbProductName) && !\"Microsoft SQL Server\".equals(dbProductName)) { PreparedStatement ps = null; if (\"MySQL\".equals(dbProductName)) { ps = connection.prepareStatement(\"USE \" + schema); } else { ps = connection.prepareStatement(\"SET SCHEMA ?\"); ps.setString(1, schema); } ps.executeUpdate(); ps.close(); } logger.finest(\"Exiting \" + CLASSNAME +\".setSchemaOnConnection()\"); }\n\n    ### Response: Set the default schema JBATCH or the schema defined in batch-config on the connection object.\n\n@param connection\n@throws SQLException.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public RouteChunk findOrCreateChild(final String value) { if (children != null) { for (RouteChunk child : children) { if (child.get().equals(value)) { return child; } } } return add(value); }\n\n    ### Response:",
        "ground_truth": "Finds existing chunk or creates a new one if does not exist.",
        "predict": " Set the default schema JBATCH or the schema defined in batch-config on the connection object.\n\n@param connection\n@throws SQLException.\n\n    "
    },
    {
        "ID": 1288,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static function debug($frame, $binary_mode = false) { if ($binary_mode) { foreach ($frame as &$frameLine) { $frameLine = join('<span class=\"m\">&nbsp;&nbsp;</span>', explode('0', $frameLine)); $frameLine = join('&#9608;&#9608;', explode('1', $frameLine)); } echo '<style> .m { background-color: white; } </style> '; echo '<pre><tt><br/ ><br/ ><br/ >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'; echo join(\"<br/ >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\", $frame); echo '</tt></pre><br/ ><br/ ><br/ ><br/ ><br/ ><br/ >'; } else { foreach ($frame as &$frameLine) { $frameLine = strtr($frameLine, array( \"\\xc0\" => '<span class=\"m\">&nbsp;</span>', //marker 0 \"\\xc1\" => '<span class=\"m\">&#9618;</span>', //marker 1 \"\\xa0\" => '<span class=\"p\">&nbsp;</span>', //submarker 0 \"\\xa1\" => '<span class=\"p\">&#9618;</span>', //submarker 1 \"\\x84\" => '<span class=\"s\">F</span>', //format 0 \"\\x85\" => '<span class=\"s\">f</span>', //format 1 \"\\x81\" => '<span class=\"x\">S</span>', //special bit \"\\x90\" => '<span class=\"c\">C</span>', //clock 0 \"\\x91\" => '<span class=\"c\">c</span>', //clock 1 \"\\x88\" => '<span class=\"f\">&nbsp;</span>', //version 0 \"\\x89\" => '<span class=\"f\">&#9618;</span>', //version 1 \"\\x03\" => '1', // 1 \"\\x02\" => '0', // 0 )); } echo '<style>'; echo ' .p { background-color: yellow; }'; echo ' .m { background-color: #00FF00; }'; echo ' .s { background-color: #FF0000; }'; echo ' .c { background-color: aqua; }'; echo ' .x { background-color: pink; }'; echo ' .f { background-color: gold; }'; echo '</style>'; echo \"<tt>\"; echo join(\"<br/ >\", $frame); echo \"<br/>Legend:<br/>\"; echo '1 - data 1<br/>'; echo '0 - data 0<br/>'; echo '<span class=\"m\">&nbsp;</span> - marker bit 0<br/>'; echo '<span class=\"m\">&#9618;</span> - marker bit 1<br/>'; echo '<span class=\"p\">&nbsp;</span> - secondary marker bit 0<br/>'; echo '<span class=\"p\">&#9618;</span> - secondary marker bit 1<br/>'; echo '<span class=\"s\">F</span> - format bit 0<br/>'; echo '<span class=\"s\">f</span> - format bit 1<br/>'; echo '<span class=\"x\">S</span> - special bit<br/>'; echo '<span class=\"c\">C</span> - clock bit 0<br/>'; echo '<span class=\"c\">c</span> - clock bit 1<br/>'; echo '<span class=\"f\">&nbsp;</span> - version bit 0<br/>'; echo '<span class=\"f\">&#9618;</span> - version bit 1<br/>'; echo \"</tt>\"; } }\n\n    ### Response: Dumps debug HTML of frame.\n@param Array $frame code frame\n@param Boolean $binary_mode in binary mode only contents is dumped, without styling.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void parseRequest() throws IOException { if (ServletUtil.isMultipartRequest(request)) { parseRequestStream(request.getInputStream(), characterEncoding); } else { Enumeration names = request.getParameterNames(); while (names.hasMoreElements()) { String paramName = (String) names.nextElement(); String[] values = request.getParameterValues(paramName); putParameters(paramName, values); } } }\n\n    ### Response:",
        "ground_truth": "Checks if request if multi-part and parse it. If request is not multi-part it\ncopies all parameters, to make usage the same in both cases.\n\n@see MultipartRequestWrapper",
        "predict": " Dumps debug HTML of frame.\n@param Array $frame code frame\n@param Boolean $binary_mode in binary mode only contents is dumped, without styling.\n\n    "
    },
    {
        "ID": 1289,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public int bufferToFields(FieldList record, boolean bDisplayOption, int iMoveMode) { this.resetPosition(); // Start at the first field int iFieldCount = record.getFieldCount(); // Number of fields to read in int iErrorCode = Constants.NORMAL_RETURN; int iTempError; for (int iFieldSeq = Constants.MAIN_FIELD; iFieldSeq <= iFieldCount + Constants.MAIN_FIELD - 1; iFieldSeq++) { FieldInfo field = record.getField(iFieldSeq); if (this.skipField(field)) iTempError = field.initField(bDisplayOption); else iTempError = this.getNextField(field, bDisplayOption, iMoveMode); if (iTempError != Constants.NORMAL_RETURN) iErrorCode = iTempError; } return iErrorCode; }\n\n    ### Response: Move the output buffer to all the fields.\nThis is a utility method that populates the record.\n@param record The target record.\n@param bDisplayOption The display option for the movetofield call.\n@param iMoveMove The move mode for the movetofield call.\n@return The error code..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SuppressWarnings(\"unchecked\") protected Object convertToCollection(final Object value, final Class destinationType, final Class componentType) { return typeConverterManager.convertToCollection(value, destinationType, componentType); }\n\n    ### Response:",
        "ground_truth": "Converter to collection.",
        "predict": " Move the output buffer to all the fields.\nThis is a utility method that populates the record.\n@param record The target record.\n@param bDisplayOption The display option for the movetofield call.\n@param iMoveMove The move mode for the movetofield call.\n@return The error code..\n\n    "
    },
    {
        "ID": 1290,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def get_devices(self, category_filter=''): \"\"\"Get list of connected devices. category_filter param is an array of strings \"\"\" # pylint: disable=too-many-branches # the Vera rest API is a bit rough so we need to make 2 calls to get # all the info e need self.get_simple_devices_info() j = self.data_request({'id': 'status', 'output_format': 'json'}).json() self.devices = [] items = j.get('devices') for item in items: item['deviceInfo'] = self.device_id_map.get(item.get('id')) if item.get('deviceInfo'): device_category = item.get('deviceInfo').get('category') if device_category == CATEGORY_DIMMER: device = VeraDimmer(item, self) elif ( device_category == CATEGORY_SWITCH or device_category == CATEGORY_VERA_SIREN): device = VeraSwitch(item, self) elif device_category == CATEGORY_THERMOSTAT: device = VeraThermostat(item, self) elif device_category == CATEGORY_LOCK: device = VeraLock(item, self) elif device_category == CATEGORY_CURTAIN: device = VeraCurtain(item, self) elif device_category == CATEGORY_ARMABLE: device = VeraBinarySensor(item, self) elif (device_category == CATEGORY_SENSOR or device_category == CATEGORY_HUMIDITY_SENSOR or device_category == CATEGORY_TEMPERATURE_SENSOR or device_category == CATEGORY_LIGHT_SENSOR or device_category == CATEGORY_POWER_METER or device_category == CATEGORY_UV_SENSOR): device = VeraSensor(item, self) elif (device_category == CATEGORY_SCENE_CONTROLLER or device_category == CATEGORY_REMOTE): device = VeraSceneController(item, self) elif device_category == CATEGORY_GARAGE_DOOR: device = VeraGarageDoor(item, self) else: device = VeraDevice(item, self) self.devices.append(device) if (device.is_armable and not ( device_category == CATEGORY_SWITCH or device_category == CATEGORY_VERA_SIREN or device_category == CATEGORY_CURTAIN or device_category == CATEGORY_GARAGE_DOOR)): self.devices.append(VeraArmableDevice(item, self)) else: self.devices.append(VeraDevice(item, self)) if not category_filter: return self.devices devices = [] for device in self.devices: if (device.category_name is not None and device.category_name != '' and device.category_name in category_filter): devices.append(device) return devices\n\n    ### Response: Get list of connected devices.\n\n        category_filter param is an array of strings.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected Object invokeSetter(final Setter setter, final BeanProperty bp, Object value) { try { final MapperFunction setterMapperFunction = setter.getMapperFunction(); if (setterMapperFunction != null) { value = setterMapperFunction.apply(value); } final Class type = setter.getSetterRawType(); if (ClassUtil.isTypeOf(type, Collection.class)) { Class componentType = setter.getSetterRawComponentType(); value = convertToCollection(value, type, componentType); } else { // no collections value = convertType(value, type); } setter.invokeSetter(bp.bean, value); } catch (Exception ex) { if (isSilent) { return null; } throw new BeanException(\"Setter failed: \" + setter, ex); } return value; }\n\n    ### Response:",
        "ground_truth": "Invokes setter, but first converts type to match the setter type.",
        "predict": " Get list of connected devices.\n\n        category_filter param is an array of strings.\n\n    "
    },
    {
        "ID": 1291,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function _submit(){ // execute the request and use the metadata if available if (that.bUseBatch) { that.updateSecurityToken(); // batch requests only need the path without the service URL // extract query of url and combine it with the path... var sUriQuery = URI.parse(oRequest.requestUri).query; //var sRequestUrl = sPath.replace(/\\/$/, \"\"); // remove trailing slash if any //sRequestUrl += sUriQuery ? \"?\" + sUriQuery : \"\"; var sRequestUrl = that._createRequestUrl(sPath, null, sUriQuery, that.bUseBatch); oRequest = that._createRequest(sRequestUrl, \"GET\", true); var oBatchRequest = that._createBatchRequest([oRequest],true); oRequestHandle = that._request(oBatchRequest, _handleSuccess, _handleError, OData.batchHandler, undefined, that.getServiceMetadata()); } else { oRequestHandle = that._request(oRequest, _handleSuccess, _handleError, that.oHandler, undefined, that.getServiceMetadata()); } if (fnHandleUpdate) { // Create a wrapper for the request handle to be able to differentiate // between intentionally aborted requests and failed requests var oWrappedHandle = { abort: function() { oRequestHandle.bAborted = true; oRequestHandle.abort(); } }; fnHandleUpdate(oWrappedHandle); } }\n\n    ### Response: this method is used to retrieve all desired data. It triggers additional read requests if the server paging size\npermits to return all the requested data. This could only happen for servers with support for oData > 2.0..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void arrayForcedSet(final BeanProperty bp, Object array, final int index, Object value) { Class componentType = array.getClass().getComponentType(); array = ensureArraySize(bp, array, componentType, index); value = convertType(value, componentType); Array.set(array, index, value); }\n\n    ### Response:",
        "ground_truth": "Sets the array element forced. If index is greater then arrays length, array will be expanded to the index.\nIf speed is critical, it is better to allocate an array with proper size before using this method.",
        "predict": " this method is used to retrieve all desired data. It triggers additional read requests if the server paging size\npermits to return all the requested data. This could only happen for servers with support for oData > 2.0..\n\n    "
    },
    {
        "ID": 1292,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function(data) { data = data.replace(/{% highlight ([^ ]*) %}/g, '<pre class=\"prettyprint lang-$1\">'); data = data.replace(/{% endhighlight %}/g, '</pre>'); return data; }\n\n    ### Response: Replaces liquid tag highlight directives with prettyprint HTML tags.\n\n@param {String} The text for a post\n@return {String}.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected Object createBeanProperty(final BeanProperty bp) { Setter setter = bp.getSetter(true); if (setter == null) { return null; } Class type = setter.getSetterRawType(); Object newInstance; try { newInstance = ClassUtil.newInstance(type); } catch (Exception ex) { if (isSilent) { return null; } throw new BeanException(\"Invalid property: \" + bp.name, bp, ex); } newInstance = invokeSetter(setter, bp, newInstance); return newInstance; }\n\n    ### Response:",
        "ground_truth": "Creates new instance for current property name through its setter.\nIt uses default constructor!",
        "predict": " Replaces liquid tag highlight directives with prettyprint HTML tags.\n\n@param {String} The text for a post\n@return {String}.\n\n    "
    },
    {
        "ID": 1293,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func errstr(errno int) string { // ask windows for the remaining errors var flags uint32 = syscall.FORMAT_MESSAGE_FROM_SYSTEM | syscall.FORMAT_MESSAGE_ARGUMENT_ARRAY | syscall.FORMAT_MESSAGE_IGNORE_INSERTS b := make([]uint16, 300) n, err := syscall.FormatMessage(flags, 0, uint32(errno), 0, b, nil) if err != nil { return fmt.Sprintf(\"error %d (FormatMessage failed with: %v)\", errno, err) } // trim terminating \\r and \\n for ; n > 0 && (b[n-1] == '\\n' || b[n-1] == '\\r'); n-- { } return string(utf16.Decode(b[:n])) }\n\n    ### Response: // errstr converts error code to string..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected Class extractType(final BeanProperty bp) { Getter getter = bp.getGetter(isDeclared); if (getter != null) { if (bp.index != null) { Class type = getter.getGetterRawComponentType(); return type == null ? Object.class : type; } return getter.getGetterRawType(); } return null; // this should not happens }\n\n    ### Response:",
        "ground_truth": "Extracts type of current property.",
        "predict": " // errstr converts error code to string..\n\n    "
    },
    {
        "ID": 1294,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function getAuthorizeUrl($scope) { $url = 'https://app.rakuten.co.jp/services/authorize'; $parameter = array(); $parameter = array( 'response_type' => 'code', 'client_id' => $this->developerId, 'redirect_uri' => $this->redirectUrl, 'scope' => $scope ); return $url.'?'.http_build_query($parameter); }\n\n    ### Response: Gets OAuth2 Authorize URL\n\n@param string $scope The scopes that is separated by ','\n@return string The Authorize URL.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void stop(final HttpServletRequest servletRequest, final HttpServletResponse servletResponse) { final HttpSession httpSession = servletRequest.getSession(false); if (httpSession != null) { httpSession.removeAttribute(AUTH_SESSION_NAME); } final Cookie cookie = ServletUtil.getCookie(servletRequest, AUTH_COOKIE_NAME); if (cookie == null) { return; } cookie.setMaxAge(0); cookie.setPath(\"/\"); servletResponse.addCookie(cookie); }\n\n    ### Response:",
        "ground_truth": "",
        "predict": " Gets OAuth2 Authorize URL\n\n@param string $scope The scopes that is separated by ','\n@return string The Authorize URL.\n\n    "
    },
    {
        "ID": 1295,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def html_parts(input_string, source_path=None, destination_path=None, input_encoding='unicode', doctitle=1, initial_header_level=1): \"\"\" Given an input string, returns a dictionary of HTML document parts. Dictionary keys are the names of parts, and values are Unicode strings; encoding is up to the client. Parameters: - `input_string`: A multi-line text string; required. - `source_path`: Path to the source file or object. Optional, but useful for diagnostic output (system messages). - `destination_path`: Path to the file or object which will receive the output; optional. Used for determining relative paths (stylesheets, source links, etc.). - `input_encoding`: The encoding of `input_string`. If it is an encoded 8-bit string, provide the correct encoding. If it is a Unicode string, use \"unicode\", the default. - `doctitle`: Disable the promotion of a lone top-level section title to document title (and subsequent section title to document subtitle promotion); enabled by default. - `initial_header_level`: The initial level for header elements (e.g. 1 for \"<h1>\"). \"\"\" overrides = { 'input_encoding': input_encoding, 'doctitle_xform': doctitle, 'initial_header_level': initial_header_level, 'report_level': 5 } parts = core.publish_parts( source=input_string, source_path=source_path, destination_path=destination_path, writer_name='html', settings_overrides=overrides) return parts\n\n    ### Response: Given an input string, returns a dictionary of HTML document parts.\n\n    Dictionary keys are the names of parts, and values are Unicode strings;\n    encoding is up to the client.\n\n    Parameters:\n\n    - `input_string`: A multi-line text string; required.\n    - `source_path`: Path to the source file or object.  Optional, but useful\n      for diagnostic output (system messages).\n    - `destination_path`: Path to the file or object which will receive the\n      output; optional.  Used for determining relative paths (stylesheets,\n      source links, etc.).\n    - `input_encoding`: The encoding of `input_string`.  If it is an encoded\n      8-bit string, provide the correct encoding.  If it is a Unicode string,\n      use \"unicode\", the default.\n    - `doctitle`: Disable the promotion of a lone top-level section title to\n      document title (and subsequent section title to document subtitle\n      promotion); enabled by default.\n    - `initial_header_level`: The initial level for header elements (e.g. 1\n      for \"\")..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void start(final HttpServletRequest httpServletRequest, final HttpServletResponse httpServletResponse) { final HttpSession httpSession = httpServletRequest.getSession(true); httpSession.setAttribute(AUTH_SESSION_NAME, this); final Cookie cookie = new Cookie(AUTH_COOKIE_NAME, authTokenValue); //cookie.setDomain(SSORealm.SSO_DOMAIN); cookie.setMaxAge(cookieMaxAge); cookie.setPath(\"/\"); httpServletResponse.addCookie(cookie); }\n\n    ### Response:",
        "ground_truth": "Starts new user session.",
        "predict": " Given an input string, returns a dictionary of HTML document parts.\n\n    Dictionary keys are the names of parts, and values are Unicode strings;\n    encoding is up to the client.\n\n    Parameters:\n\n    - `input_string`: A multi-line text string; required.\n    - `source_path`: Path to the source file or object.  Optional, but useful\n      for diagnostic output (system messages).\n    - `destination_path`: Path to the file or object which will receive the\n      output; optional.  Used for determining relative paths (stylesheets,\n      source links, etc.).\n    - `input_encoding`: The encoding of `input_string`.  If it is an encoded\n      8-bit string, provide the correct encoding.  If it is a Unicode string,\n      use \"unicode\", the default.\n    - `doctitle`: Disable the promotion of a lone top-level section title to\n      document title (and subsequent section title to document subtitle\n      promotion); enabled by default.\n    - `initial_header_level`: The initial level for header elements (e.g. 1\n      for \"\")..\n\n    "
    },
    {
        "ID": 1296,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Waiter<HeadBucketRequest> bucketNotExists() { return new WaiterBuilder<HeadBucketRequest, HeadBucketResult>() .withSdkFunction(new HeadBucketFunction(client)) .withAcceptors( new HttpFailureStatusAcceptor<HeadBucketResult>(404, WaiterState.SUCCESS)) .withDefaultPollingStrategy( new PollingStrategy(new MaxAttemptsRetryStrategy(20), new FixedDelayStrategy(5))) .withExecutorService(executorService).build(); }\n\n    ### Response: Builds a BucketNotExists waiter by using custom parameters\nwaiterParameters and other parameters defined in the waiters\nspecification, and then polls until it determines whether the resource\nentered the desired state or not, where polling criteria is bound by\neither default polling strategy or custom polling strategy..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Date toDate(final LocalDate localDate) { return Date.from(localDate.atStartOfDay(ZoneId.systemDefault()).toInstant()); }\n\n    ### Response:",
        "ground_truth": "Converts local date to Date.",
        "predict": " Builds a BucketNotExists waiter by using custom parameters\nwaiterParameters and other parameters defined in the waiters\nspecification, and then polls until it determines whether the resource\nentered the desired state or not, where polling criteria is bound by\neither default polling strategy or custom polling strategy..\n\n    "
    },
    {
        "ID": 1297,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public int log2Chunks(final int log2chunks) { this.chunks = 1 << log2chunks; diskChunkStep = (int)Math.max(DISK_CHUNKS / chunks, 1); virtualDiskChunks = DISK_CHUNKS / diskChunkStep; if (DEBUG) { System.err.print(\"Chunk sizes: \"); final double avg = filteredSize / (double)DISK_CHUNKS; double var = 0; for(int i = 0; i < DISK_CHUNKS; i++) { System.err.print(i + \":\" + count[i] + \" \"); var += (count[i] - avg) * (count[i] - avg); } System.err.println(); System.err.println(\"Average: \" + avg); System.err.println(\"Variance: \" + var / filteredSize); } chunkShift = Long.SIZE - log2chunks; LOGGER.debug(\"Number of chunks: \" + chunks); LOGGER.debug(\"Number of disk chunks: \" + DISK_CHUNKS); LOGGER.debug(\"Number of virtual disk chunks: \" + virtualDiskChunks); return chunkShift; }\n\n    ### Response: Sets the number of chunks.\n\nOnce the store is filled, you must call this method to set the number of chunks. The store will take\ncare of merging or fragmenting disk chunks to get exactly the desired chunks.\n\n@param log2chunks the base-2 logarithm of the number of chunks.\n@return the shift to be applied to the first hash of a triple to get the chunk number (see the {@linkplain ChunkedHashStore introduction})..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Calendar toCalendar(final LocalDateTime localDateTime) { return GregorianCalendar.from(ZonedDateTime.of(localDateTime, ZoneId.systemDefault())); }\n\n    ### Response:",
        "ground_truth": "Converts local date time to Calendar.",
        "predict": " Sets the number of chunks.\n\nOnce the store is filled, you must call this method to set the number of chunks. The store will take\ncare of merging or fragmenting disk chunks to get exactly the desired chunks.\n\n@param log2chunks the base-2 logarithm of the number of chunks.\n@return the shift to be applied to the first hash of a triple to get the chunk number (see the {@linkplain ChunkedHashStore introduction})..\n\n    "
    },
    {
        "ID": 1298,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public synchronized void addJob(JobInProgress job) { String poolName = getPoolName(job); LOG.info(\"Adding job \" + job.getJobID() + \" to pool \" + poolName + \", originally from pool \" + job.getJobConf().get(EXPLICIT_POOL_PROPERTY)); getPool(poolName).addJob(job); }\n\n    ### Response: Add a job in the appropriate pool.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Class defineProxy(final Class target) { ProxyProxettaFactory builder = proxetta.proxy(); builder.setTarget(target); return builder.define(); }\n\n    ### Response:",
        "ground_truth": "Generates new class.",
        "predict": " Add a job in the appropriate pool.\n\n    "
    },
    {
        "ID": 1299,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function setEvent(\\Claroline\\AgendaBundle\\Entity\\Event $event) { $this->event = $event; return $this; }\n\n    ### Response: Set event.\n\n@param \\Claroline\\AgendaBundle\\Entity\\Event $event\n\n@return EventInvitation.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void add(final Check check) { String name = check.getName(); List<Check> list = map.computeIfAbsent(name, k -> new ArrayList<>()); list.add(check); }\n\n    ### Response:",
        "ground_truth": "Adds validation checks.",
        "predict": " Set event.\n\n@param \\Claroline\\AgendaBundle\\Entity\\Event $event\n\n@return EventInvitation.\n\n    "
    },
    {
        "ID": 1300,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static void writeToFile(String text, String logFilePath, boolean isDetailed) { if (isSDCardAvailable() && isSDCardWritable() && text != null) { try { File file = new File(logFilePath); OutputStream os = new FileOutputStream(file, true); if (isDetailed) { os.write((\"---\" + new SimpleDateFormat(\"yyyy/MM/dd HH:mm:ss.SSS\").format(Calendar.getInstance().getTime()) + \"---\\n\").getBytes()); } os.write((text + \"\\n\").getBytes()); // os.write((\"------\\n\").getBytes()); os.close(); } catch (Exception e) { QuickUtils.log.e(\"Exception\", e); } } else { return; } }\n\n    ### Response: private write to file method\n\n@param text        text to append\n@param logFilePath path to the file\n@param isDetailed  if it should show the timestamp or not.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static ValidationContext resolveFor(final Class<?> target) { ValidationContext vc = new ValidationContext(); vc.addClassChecks(target); return vc; }\n\n    ### Response:",
        "ground_truth": "Resolve validation context for provided target class.\n@see #addClassChecks(Class)",
        "predict": " private write to file method\n\n@param text        text to append\n@param logFilePath path to the file\n@param isDetailed  if it should show the timestamp or not.\n\n    "
    },
    {
        "ID": 1301,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _string_substr(self, start, length=None): \"\"\" Pull substrings out of each string value by position and maximum length. Parameters ---------- start : int First character to start splitting, indices starting at 0 (like Python) length : int, optional Maximum length of each substring. If not supplied, splits each string to the end Returns ------- substrings : type of caller \"\"\" op = ops.Substring(self, start, length) return op.to_expr()\n\n    ### Response: Pull substrings out of each string value by position and maximum\n    length.\n\n    Parameters\n    ----------\n    start : int\n      First character to start splitting, indices starting at 0 (like\n      Python)\n    length : int, optional\n      Maximum length of each substring. If not supplied, splits each string\n      to the end\n\n    Returns\n    -------\n    substrings : type of caller.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void addClassChecks(final Class target) { final List<Check> list = cache.get(target, () -> { final List<Check> newList = new ArrayList<>(); final ClassDescriptor cd = ClassIntrospector.get().lookup(target); final PropertyDescriptor[] allProperties = cd.getAllPropertyDescriptors(); for (PropertyDescriptor propertyDescriptor : allProperties) { collectPropertyAnnotationChecks(newList, propertyDescriptor); } return newList; }); addAll(list); }\n\n    ### Response:",
        "ground_truth": "Parses class annotations and adds all checks.\n@see #resolveFor(Class)",
        "predict": " Pull substrings out of each string value by position and maximum\n    length.\n\n    Parameters\n    ----------\n    start : int\n      First character to start splitting, indices starting at 0 (like\n      Python)\n    length : int, optional\n      Maximum length of each substring. If not supplied, splits each string\n      to the end\n\n    Returns\n    -------\n    substrings : type of caller.\n\n    "
    },
    {
        "ID": 1302,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def fast_group_adder(wires_to_add, reducer=wallace_reducer, final_adder=kogge_stone): \"\"\" A generalization of the carry save adder, this is designed to add many numbers together in a both area and time efficient manner. Uses a tree reducer to achieve this performance :param [WireVector] wires_to_add: an array of wirevectors to add :param reducer: the tree reducer to use :param final_adder: The two value adder to use at the end :return: a wirevector with the result of the addition The length of the result is: max(len(w) for w in wires_to_add) + ceil(len(wires_to_add)) \"\"\" import math longest_wire_len = max(len(w) for w in wires_to_add) result_bitwidth = longest_wire_len + int(math.ceil(math.log(len(wires_to_add), 2))) bits = [[] for i in range(longest_wire_len)] for wire in wires_to_add: for bit_loc, bit in enumerate(wire): bits[bit_loc].append(bit) return reducer(bits, result_bitwidth, final_adder)\n\n    ### Response: A generalization of the carry save adder, this is designed to add many numbers\n    together in a both area and time efficient manner. Uses a tree reducer\n    to achieve this performance\n\n\n    :param [WireVector] wires_to_add: an array of wirevectors to add\n    :param reducer: the tree reducer to use\n    :param final_adder: The two value adder to use at the end\n    :return: a wirevector with the result of the addition\n      The length of the result is:\n      max(len(w) for w in wires_to_add) + ceil(len(wires_to_add)).\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void collectPropertyAnnotationChecks(final List<Check> annChecks, final PropertyDescriptor propertyDescriptor) { FieldDescriptor fd = propertyDescriptor.getFieldDescriptor(); if (fd != null) { Annotation[] annotations = fd.getField().getAnnotations(); collectAnnotationChecks(annChecks, propertyDescriptor.getType(), propertyDescriptor.getName(), annotations); } MethodDescriptor md = propertyDescriptor.getReadMethodDescriptor(); if (md != null) { Annotation[] annotations = md.getMethod().getAnnotations(); collectAnnotationChecks(annChecks, propertyDescriptor.getType(), propertyDescriptor.getName(), annotations); } md = propertyDescriptor.getWriteMethodDescriptor(); if (md != null) { Annotation[] annotations = md.getMethod().getAnnotations(); collectAnnotationChecks(annChecks, propertyDescriptor.getType(), propertyDescriptor.getName(), annotations); } }\n\n    ### Response:",
        "ground_truth": "Process all annotations of provided properties.",
        "predict": " A generalization of the carry save adder, this is designed to add many numbers\n    together in a both area and time efficient manner. Uses a tree reducer\n    to achieve this performance\n\n\n    :param [WireVector] wires_to_add: an array of wirevectors to add\n    :param reducer: the tree reducer to use\n    :param final_adder: The two value adder to use at the end\n    :return: a wirevector with the result of the addition\n      The length of the result is:\n      max(len(w) for w in wires_to_add) + ceil(len(wires_to_add)).\n\n    "
    },
    {
        "ID": 1303,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function onGetFileEvent(ObjectFileEvent $event) { //====================================================================// // Verify if File Exists if (!Splash::file()->isFile($event->getPath(), $event->getMd5())) { return false; } //====================================================================// // Read File Contents $fileArray = Splash::file()->readFile($event->getPath(), $event->getMd5()); if (!is_array($fileArray) || !isset($fileArray[\"raw\"])) { return false; } //====================================================================// // Push File Contents to Event $event->setContents($fileArray); return true; }\n\n    ### Response: Read File from Local Server with Md5 Protection\n\n@param ObjectFileEvent $event\n\n@return bool.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SuppressWarnings({\"unchecked\"}) protected void collectAnnotationChecks(final List<Check> annChecks, final Class targetType, final String targetName, final Annotation[] annotations) { for (Annotation annotation : annotations) { Constraint c = annotation.annotationType().getAnnotation(Constraint.class); Class<? extends ValidationConstraint> constraintClass; if (c == null) { // if constraint is not available, try lookup String constraintClassName = annotation.annotationType().getName() + \"Constraint\"; try { constraintClass = ClassLoaderUtil.loadClass(constraintClassName, this.getClass().getClassLoader()); } catch (ClassNotFoundException ingore) { continue; } } else { constraintClass = c.value(); } ValidationConstraint vc; try { vc = newConstraint(constraintClass, targetType); } catch (Exception ex) { throw new VtorException(\"Invalid constraint: \" + constraintClass.getClass().getName(), ex); } vc.configure(annotation); Check check = new Check(targetName, vc); copyDefaultCheckProperties(check, annotation); annChecks.add(check); } }\n\n    ### Response:",
        "ground_truth": "Collect annotations for some target.",
        "predict": " Read File from Local Server with Md5 Protection\n\n@param ObjectFileEvent $event\n\n@return bool.\n\n    "
    },
    {
        "ID": 1304,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def calc_humidity_stats(self): \"\"\" Calculates statistics in order to derive diurnal patterns of relative humidity. \"\"\" a1, a0 = melodist.calculate_dewpoint_regression(self.data, return_stats=False) self.hum.update(a0=a0, a1=a1) self.hum.kr = 12 self.hum.month_hour_precip_mean = melodist.calculate_month_hour_precip_mean(self.data)\n\n    ### Response: Calculates statistics in order to derive diurnal patterns of relative humidity..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void copyDefaultCheckProperties(final Check destCheck, final Annotation annotation) { Integer severity = (Integer) ClassUtil.readAnnotationValue(annotation, ANN_SEVERITY); destCheck.setSeverity(severity.intValue()); String[] profiles = (String[]) ClassUtil.readAnnotationValue(annotation, ANN_PROFILES); destCheck.setProfiles(profiles); String message = (String) ClassUtil.readAnnotationValue(annotation, ANN_MESSAGE); destCheck.setMessage(message); }\n\n    ### Response:",
        "ground_truth": "Copies default properties from annotation to the check.",
        "predict": " Calculates statistics in order to derive diurnal patterns of relative humidity..\n\n    "
    },
    {
        "ID": 1305,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public ZonedDateTime nextTimeAfter(ZonedDateTime afterTime, long durationInMillis) { return nextTimeAfter(afterTime, afterTime.plus(Duration.ofMillis(durationInMillis))); }\n\n    ### Response: This will search for the next time within the next durationInMillis\nmillisecond. Be aware that the duration is specified in millis,\nbut in fact the limit is checked on a day-to-day basis.\n\n@param afterTime        A date-time with a time-zone in the ISO-8601 calendar system\n@param durationInMillis The maximum duration in millis after a given time\n@return The next time within given duration.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static String encodeUriComponent(final String source, final String encoding, final URIPart uriPart) { if (source == null) { return null; } byte[] bytes = encodeBytes(StringUtil.getBytes(source, encoding), uriPart); char[] chars = new char[bytes.length]; for (int i = 0; i < bytes.length; i++) { chars[i] = (char) bytes[i]; } return new String(chars); }\n\n    ### Response:",
        "ground_truth": "Encodes single URI component.",
        "predict": " This will search for the next time within the next durationInMillis\nmillisecond. Be aware that the duration is specified in millis,\nbut in fact the limit is checked on a day-to-day basis.\n\n@param afterTime        A date-time with a time-zone in the ISO-8601 calendar system\n@param durationInMillis The maximum duration in millis after a given time\n@return The next time within given duration.\n\n    "
    },
    {
        "ID": 1306,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public final OrderSpecifier<T> desc() { if (desc == null) { desc = new OrderSpecifier<T>(Order.DESC, mixin); } return desc; }\n\n    ### Response: Create an OrderSpecifier for descending order of this expression\n\n@return descending order by this.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String encode(final String string, final String encoding) { return encodeUriComponent(string, encoding, URIPart.UNRESERVED); }\n\n    ### Response:",
        "ground_truth": "Encodes string using default RFCP rules.",
        "predict": " Create an OrderSpecifier for descending order of this expression\n\n@return descending order by this.\n\n    "
    },
    {
        "ID": 1307,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def get_links(html, outformat): \"\"\"Return a list of reference links from the html. Parameters ---------- html : str outformat : int the output format of the citations Returns ------- List[str] the links to the references \"\"\" if outformat == FORMAT_BIBTEX: refre = re.compile(r'<a href=\"https://scholar.googleusercontent.com(/scholar\\.bib\\?[^\"]*)') elif outformat == FORMAT_ENDNOTE: refre = re.compile(r'<a href=\"https://scholar.googleusercontent.com(/scholar\\.enw\\?[^\"]*)\"') elif outformat == FORMAT_REFMAN: refre = re.compile(r'<a href=\"https://scholar.googleusercontent.com(/scholar\\.ris\\?[^\"]*)\"') elif outformat == FORMAT_WENXIANWANG: refre = re.compile(r'<a href=\"https://scholar.googleusercontent.com(/scholar\\.ral\\?[^\"]*)\"') reflist = refre.findall(html) # escape html entities reflist = [re.sub('&(%s);' % '|'.join(name2codepoint), lambda m: chr(name2codepoint[m.group(1)]), s) for s in reflist] return reflist\n\n    ### Response: Return a list of reference links from the html.\n\n    Parameters\n    ----------\n    html : str\n    outformat : int\n        the output format of the citations\n\n    Returns\n    -------\n    List[str]\n        the links to the references.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String encodeScheme(final String scheme, final String encoding) { return encodeUriComponent(scheme, encoding, URIPart.SCHEME); }\n\n    ### Response:",
        "ground_truth": "Encodes the given URI scheme with the given encoding.",
        "predict": " Return a list of reference links from the html.\n\n    Parameters\n    ----------\n    html : str\n    outformat : int\n        the output format of the citations\n\n    Returns\n    -------\n    List[str]\n        the links to the references.\n\n    "
    },
    {
        "ID": 1308,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func SecretRemove(id string) error { return mgr.Do(func(ctx context.Context, cli *client.Client) (err error) { return cli.SecretRemove(ctx, id) }) }\n\n    ### Response: // SecretRemove remove a secret..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String encodeHost(final String host, final String encoding) { return encodeUriComponent(host, encoding, URIPart.HOST); }\n\n    ### Response:",
        "ground_truth": "Encodes the given URI host with the given encoding.",
        "predict": " // SecretRemove remove a secret..\n\n    "
    },
    {
        "ID": 1309,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def success(channel, title, datapacks): \"\"\" Creates an embed UI containing the help message Args: channel (discord.Channel): The Discord channel to bind the embed to title (str): The title of the embed datapacks (list): The hex value Returns: ui (ui_embed.UI): The embed UI object \"\"\" # Create embed UI object gui = ui_embed.UI( channel, title, \"\", modulename=modulename, datapacks=datapacks ) return gui\n\n    ### Response: Creates an embed UI containing the help message\n\n    Args:\n        channel (discord.Channel): The Discord channel to bind the embed to\n        title (str): The title of the embed\n        datapacks (list): The hex value\n\n    Returns:\n        ui (ui_embed.UI): The embed UI object.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String encodePort(final String port, final String encoding) { return encodeUriComponent(port, encoding, URIPart.PORT); }\n\n    ### Response:",
        "ground_truth": "Encodes the given URI port with the given encoding.",
        "predict": " Creates an embed UI containing the help message\n\n    Args:\n        channel (discord.Channel): The Discord channel to bind the embed to\n        title (str): The title of the embed\n        datapacks (list): The hex value\n\n    Returns:\n        ui (ui_embed.UI): The embed UI object.\n\n    "
    },
    {
        "ID": 1310,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func ValidateUriList(baseUriList string, redirectUri string, separator string) (realRedirectUri string, err error) { // make a list of uris var slist []string if separator != \"\" { slist = strings.Split(baseUriList, separator) } else { slist = make([]string, 0) slist = append(slist, baseUriList) } for _, sitem := range slist { realRedirectUri, err = ValidateUri(sitem, redirectUri) // validated, return no error if err == nil { return realRedirectUri, nil } // if there was an error that is not a validation error, return it if _, iok := err.(UriValidationError); !iok { return \"\", err } } return \"\", newUriValidationError(\"urls don't validate\", baseUriList, redirectUri) }\n\n    ### Response: // ValidateUriList validates that redirectUri is contained in baseUriList.\n// baseUriList may be a string separated by separator.\n// If separator is blank, validate only 1 URI..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String encodePath(final String path, final String encoding) { return encodeUriComponent(path, encoding, URIPart.PATH); }\n\n    ### Response:",
        "ground_truth": "Encodes the given URI path with the given encoding.",
        "predict": " // ValidateUriList validates that redirectUri is contained in baseUriList.\n// baseUriList may be a string separated by separator.\n// If separator is blank, validate only 1 URI..\n\n    "
    },
    {
        "ID": 1311,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (s *SourceService) DeleteSource(ctx context.Context, id influxdb.ID) error { m, err := s.s.FindSourceByID(ctx, id) if err != nil { return err } if err := authorizeWriteSource(ctx, m.OrganizationID, id); err != nil { return err } return s.s.DeleteSource(ctx, id) }\n\n    ### Response: // DeleteSource checks to see if the authorizer on context has write access to the source provided..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String encodeQuery(final String query, final String encoding) { return encodeUriComponent(query, encoding, URIPart.QUERY); }\n\n    ### Response:",
        "ground_truth": "Encodes the given URI query with the given encoding.",
        "predict": " // DeleteSource checks to see if the authorizer on context has write access to the source provided..\n\n    "
    },
    {
        "ID": 1312,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function createPaneDriver(string $name): Handlers\\Pane { $config = $this->app->make('config')->get(\"orchestra/widget::pane.{$name}\", []); return new Handlers\\Pane($name, $config); }\n\n    ### Response: Create Pane driver.\n\n@param  string  $name\n\n@return \\Orchestra\\Widget\\Handlers\\Pane.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String encodeQueryParam(final String queryParam, final String encoding) { return encodeUriComponent(queryParam, encoding, URIPart.QUERY_PARAM); }\n\n    ### Response:",
        "ground_truth": "Encodes the given URI query parameter with the given encoding.",
        "predict": " Create Pane driver.\n\n@param  string  $name\n\n@return \\Orchestra\\Widget\\Handlers\\Pane.\n\n    "
    },
    {
        "ID": 1313,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function isValidCurrencyId($id) { $this->sError = FALSE; if (!$this->getCurrencyId2Code($id)) { $this->sError = 'Incorect currency id: ' . $id; return FALSE; } return TRUE; }\n\n    ### Response: Validate currency ID\n@param char $id currency id\n@return boolean.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String encodeFragment(final String fragment, final String encoding) { return encodeUriComponent(fragment, encoding, URIPart.FRAGMENT); }\n\n    ### Response:",
        "ground_truth": "Encodes the given URI fragment with the given encoding.",
        "predict": " Validate currency ID\n@param char $id currency id\n@return boolean.\n\n    "
    },
    {
        "ID": 1314,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function throttle(int $throttleDuration, SchedulerInterface $scheduler = null): Observable { return $this->lift(function () use ($throttleDuration, $scheduler) { return new ThrottleOperator($throttleDuration, $scheduler ?: Scheduler::getDefault()); }); }\n\n    ### Response: Returns an Observable that emits only the first item emitted by the source Observable during\nsequential time windows of a specified duration.\n\nIf items are emitted on the source observable prior to the expiration of the time period,\nthe last item emitted on the source observable will be emitted.\n\n@param $throttleDuration\n@param SchedulerInterface $scheduler\n@return Observable\n\n@demo throttle/throttle.php\n@operator\n@reactivex debounce.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected HashMap<String, PropertyDescriptor> inspectProperties() { boolean scanAccessible = classDescriptor.isScanAccessible(); Class type = classDescriptor.getType(); HashMap<String, PropertyDescriptor> map = new HashMap<>(); Method[] methods = scanAccessible ? ClassUtil.getAccessibleMethods(type) : ClassUtil.getSupportedMethods(type); for (int iteration = 0; iteration < 2; iteration++) { // first find the getters, and then the setters! for (Method method : methods) { if (Modifier.isStatic(method.getModifiers())) { continue; // ignore static methods } boolean add = false; boolean issetter = false; String propertyName; if (iteration == 0) { propertyName = ClassUtil.getBeanPropertyGetterName(method); if (propertyName != null) { add = true; issetter = false; } } else { propertyName = ClassUtil.getBeanPropertySetterName(method); if (propertyName != null) { add = true; issetter = true; } } if (add) { MethodDescriptor methodDescriptor = classDescriptor.getMethodDescriptor(method.getName(), method.getParameterTypes(), true); addProperty(map, propertyName, methodDescriptor, issetter); } } } if (classDescriptor.isIncludeFieldsAsProperties()) { FieldDescriptor[] fieldDescriptors = classDescriptor.getAllFieldDescriptors(); String[] prefix = classDescriptor.getPropertyFieldPrefix(); for (FieldDescriptor fieldDescriptor : fieldDescriptors) { Field field = fieldDescriptor.getField(); if (Modifier.isStatic(field.getModifiers())) { continue; // ignore static fields } String name = field.getName(); if (prefix != null) { for (String p : prefix) { if (!name.startsWith(p)) { continue; } name = name.substring(p.length()); break; } } if (!map.containsKey(name)) { // add missing field as a potential property map.put(name, createPropertyDescriptor(name, fieldDescriptor)); } } } return map; }\n\n    ### Response:",
        "ground_truth": "Inspects all properties of target type.",
        "predict": " Returns an Observable that emits only the first item emitted by the source Observable during\nsequential time windows of a specified duration.\n\nIf items are emitted on the source observable prior to the expiration of the time period,\nthe last item emitted on the source observable will be emitted.\n\n@param $throttleDuration\n@param SchedulerInterface $scheduler\n@return Observable\n\n@demo throttle/throttle.php\n@operator\n@reactivex debounce.\n\n    "
    },
    {
        "ID": 1315,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def get_valid_actions(self) -> List[Dict[str, Tuple[torch.Tensor, torch.Tensor, List[int]]]]: \"\"\" Returns a list of valid actions for each element of the group. \"\"\" return [state.get_valid_actions() for state in self.grammar_state]\n\n    ### Response: Returns a list of valid actions for each element of the group..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public PropertyDescriptor[] getAllPropertyDescriptors() { if (allProperties == null) { PropertyDescriptor[] allProperties = new PropertyDescriptor[propertyDescriptors.size()]; int index = 0; for (PropertyDescriptor propertyDescriptor : propertyDescriptors.values()) { allProperties[index] = propertyDescriptor; index++; } Arrays.sort(allProperties, new Comparator<PropertyDescriptor>() { @Override public int compare(final PropertyDescriptor pd1, final PropertyDescriptor pd2) { return pd1.getName().compareTo(pd2.getName()); } }); this.allProperties = allProperties; } return allProperties; }\n\n    ### Response:",
        "ground_truth": "Returns all property descriptors.\nProperties are sorted by name.",
        "predict": " Returns a list of valid actions for each element of the group..\n\n    "
    },
    {
        "ID": 1316,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static function sanitizeLength($input, $maxLen) { if(isset($input[$maxLen])) // take string as array of chars return substr($input,0,$maxLen); else return $input; }\n\n    ### Response: Shortens the input string to the max length if it is to long.\n@param string $input\n@param int $maxLen\n@return string sanitized string.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Cookie[] cookies() { List<String> newCookies = headers(\"set-cookie\"); if (newCookies == null) { return new Cookie[0]; } List<Cookie> cookieList = new ArrayList<>(newCookies.size()); for (String cookieValue : newCookies) { try { Cookie cookie = new Cookie(cookieValue); cookieList.add(cookie); } catch (Exception ex) { // ignore } } return cookieList.toArray(new Cookie[0]); }\n\n    ### Response:",
        "ground_truth": "Returns list of valid cookies sent from server.\nIf no cookie found, returns an empty array. Invalid cookies are ignored.",
        "predict": " Shortens the input string to the max length if it is to long.\n@param string $input\n@param int $maxLen\n@return string sanitized string.\n\n    "
    },
    {
        "ID": 1317,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private function isValueValid(array $values): bool { foreach ($values as $value) { if (\\preg_match(\"/[^\\t\\r\\n\\x20-\\x7e\\x80-\\xfe]|\\r\\n/\", $value)) { return false; } } return true; }\n\n    ### Response: Determines if the given value is a valid header value.\n\n@param string[] $values\n\n@return bool\n\n@throws \\Error If the given value cannot be converted to a string and is not an array of values that can be\nconverted to strings..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public HttpResponse unzip() { String contentEncoding = contentEncoding(); if (contentEncoding != null && contentEncoding().equals(\"gzip\")) { if (body != null) { headerRemove(HEADER_CONTENT_ENCODING); try { ByteArrayInputStream in = new ByteArrayInputStream(body.getBytes(StringPool.ISO_8859_1)); GZIPInputStream gzipInputStream = new GZIPInputStream(in); ByteArrayOutputStream out = new ByteArrayOutputStream(); StreamUtil.copy(gzipInputStream, out); body(out.toString(StringPool.ISO_8859_1)); } catch (IOException ioex) { throw new HttpException(ioex); } } } return this; }\n\n    ### Response:",
        "ground_truth": "Unzips GZip-ed body content, removes the content-encoding header\nand sets the new content-length value.",
        "predict": " Determines if the given value is a valid header value.\n\n@param string[] $values\n\n@return bool\n\n@throws \\Error If the given value cannot be converted to a string and is not an array of values that can be\nconverted to strings..\n\n    "
    },
    {
        "ID": 1318,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _call_system_profiler(datatype): ''' Call out to system_profiler. Return a dictionary of the stuff we are interested in. ''' p = subprocess.Popen( [PROFILER_BINARY, '-detailLevel', 'full', '-xml', datatype], stdout=subprocess.PIPE) (sysprofresults, sysprof_stderr) = p.communicate(input=None) if six.PY2: plist = plistlib.readPlistFromString(sysprofresults) else: plist = plistlib.readPlistFromBytes(sysprofresults) try: apps = plist[0]['_items'] except (IndexError, KeyError): apps = [] return apps\n\n    ### Response: Call out to system_profiler.  Return a dictionary\n    of the stuff we are interested in..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public HttpResponse close() { HttpConnection httpConnection = httpRequest.httpConnection; if (httpConnection != null) { httpConnection.close(); httpRequest.httpConnection = null; } return this; }\n\n    ### Response:",
        "ground_truth": "Closes requests connection if it was open.\nShould be called when using keep-alive connections.\nOtherwise, connection will be already closed.",
        "predict": " Call out to system_profiler.  Return a dictionary\n    of the stuff we are interested in..\n\n    "
    },
    {
        "ID": 1319,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static synchronized void mockStaticNice(Class<?> type, Method... methods) { doMock(type, true, new NiceMockStrategy(), null, methods); }\n\n    ### Response: Enable nice static mocking for a class.\n\n@param type    the class to enable static mocking\n@param methods optionally what methods to mock.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public boolean accept(final Scope referenceScope) { Class<? extends Scope> refScopeType = referenceScope.getClass(); if (refScopeType == ProtoScope.class) { return true; } if (refScopeType == SingletonScope.class) { return true; } if (refScopeType == ThreadLocalScope.class) { return true; } return false; }\n\n    ### Response:",
        "ground_truth": "Defines allowed referenced scopes that can be injected into the\nthread-local scoped bean.",
        "predict": " Enable nice static mocking for a class.\n\n@param type    the class to enable static mocking\n@param methods optionally what methods to mock.\n\n    "
    },
    {
        "ID": 1320,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private int getFileId(Path filePath, Connection conn) throws SQLException { int fileId = readFileId(filePath, conn); if (fileId == -1) { Statement stmt = conn.createStatement(); String insertFileSql = \"insert into file (path, name) values ('\" + filePath.getParent() + \"', '\" + filePath.getFileName() + \"');\"; stmt.executeUpdate(insertFileSql); stmt.close(); fileId = readFileId(filePath, conn); if (fileId == -1) { throw new InternalError(\"Impossible to read the ID for the file \" + filePath + \" in database \" + databasePath); } stmt.close(); } return fileId; }\n\n    ### Response: Read file ID from the database. If it does not exits, then insert it to the database and return the file ID.\n\n@param filePath  File to insert\n@param conn      Database connection\n@return          File ID in the database.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void printRoutes(final int width) { final ActionsManager actionsManager = webApp.madvocContainer().lookupComponent(ActionsManager.class); final List<ActionRuntime> actions = actionsManager.getAllActionRuntimes(); final Map<String, String> aliases = actionsManager.getAllAliases(); if (actions.isEmpty()) { return; } final Print print = new Print(); print.line(\"Routes\", width); actions.stream() .sorted(Comparator.comparing( actionRuntime -> actionRuntime.getActionPath() + ' ' + actionRuntime.getActionMethod())) .forEach(ar -> { final String actionMethod = ar.getActionMethod(); print.out(Chalk256.chalk().yellow(), actionMethod == null ? \"*\" : actionMethod, 7); print.space(); final String signature = ClassUtil.getShortClassName( ProxettaUtil.resolveTargetClass(ar.getActionClass()), 2) + '#' + ar.getActionClassMethod().getName(); print.outLeftRightNewLine( Chalk256.chalk().green(), ar.getActionPath(), Chalk256.chalk().blue(), signature, width - 7 - 1 ); }); if (!aliases.isEmpty()) { print.line(\"Aliases\", width); actions.stream() .sorted(Comparator.comparing( actionRuntime -> actionRuntime.getActionPath() + ' ' + actionRuntime.getActionMethod())) .forEach(ar -> { final String actionPath = ar.getActionPath(); for (final Map.Entry<String, String> entry : aliases.entrySet()) { if (entry.getValue().equals(actionPath)) { print.space(8); print.outLeftRightNewLine( Chalk256.chalk().green(), entry.getValue(), Chalk256.chalk().blue(), entry.getKey(), width - 8 ); } } }); } print.line(width); }\n\n    ### Response:",
        "ground_truth": "Prints routes to console.",
        "predict": " Read file ID from the database. If it does not exits, then insert it to the database and return the file ID.\n\n@param filePath  File to insert\n@param conn      Database connection\n@return          File ID in the database.\n\n    "
    },
    {
        "ID": 1321,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def name_include(records, filter_regex): \"\"\" Given a set of sequences, filter out any sequences with names that do not match the specified regular expression. Ignore case. \"\"\" logging.info('Applying _name_include generator: ' 'including only IDs matching ' + filter_regex + ' in results.') regex = re.compile(filter_regex) for record in records: if regex.search(record.id) or regex.search(record.description): yield record\n\n    ### Response: Given a set of sequences, filter out any sequences with names\n    that do not match the specified regular expression.  Ignore case..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public byte[] encrypt(final byte[] content) { FastByteBuffer fbb = new FastByteBuffer(); int length = content.length + 1; int blockCount = length / blockSizeInBytes; int remaining = length; int offset = 0; for (int i = 0; i < blockCount; i++) { if (remaining == blockSizeInBytes) { break; } byte[] encrypted = encryptBlock(content, offset); fbb.append(encrypted); offset += blockSizeInBytes; remaining -= blockSizeInBytes; } if (remaining != 0) { // process remaining bytes byte[] block = new byte[blockSizeInBytes]; System.arraycopy(content, offset, block, 0, remaining - 1); block[remaining - 1] = TERMINATOR; byte[] encrypted = encryptBlock(block, 0); fbb.append(encrypted); } return fbb.toArray(); }\n\n    ### Response:",
        "ground_truth": "Encrypts complete content, block by block.",
        "predict": " Given a set of sequences, filter out any sequences with names\n    that do not match the specified regular expression.  Ignore case..\n\n    "
    },
    {
        "ID": 1322,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function _emptyValue($value) { if ($value === true) { return ['' => '']; } if (is_scalar($value)) { return ['' => $value]; } if (is_array($value)) { return $value; } return []; }\n\n    ### Response: Generate the empty value based on the input.\n\n@param string|bool|array $value The provided empty value.\n@return array The generated option key/value..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public byte[] decrypt(final byte[] encryptedContent) { FastByteBuffer fbb = new FastByteBuffer(); int length = encryptedContent.length; int blockCount = length / blockSizeInBytes; int offset = 0; for (int i = 0; i < blockCount - 1; i++) { byte[] decrypted = decryptBlock(encryptedContent, offset); fbb.append(decrypted); offset += blockSizeInBytes; } // process last block byte[] decrypted = decryptBlock(encryptedContent, offset); // find terminator int ndx = blockSizeInBytes - 1; while (ndx >= 0) { if (decrypted[ndx] == TERMINATOR) { break; } ndx--; } fbb.append(decrypted, 0, ndx); return fbb.toArray(); }\n\n    ### Response:",
        "ground_truth": "Decrypts the whole content, block by block.",
        "predict": " Generate the empty value based on the input.\n\n@param string|bool|array $value The provided empty value.\n@return array The generated option key/value..\n\n    "
    },
    {
        "ID": 1323,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function setProfiles($profiles) { $profileIds = []; foreach ($profiles as $profile) { $profileIds[] = $this->extractProfileId($profile); } $this->content['profileIds'] = $profileIds; return $this; }\n\n    ### Response: Replaces the profiles associated to this user.\n\n@param string[]|Profile[] $profiles Unique ids or Kuzzle\\Security\\Profile instances corresponding to the new associated profiles\n@return $this.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Object map2bean(final Map map, Class targetType) { Object target = null; // create targets type String className = (String) map.get(classMetadataName); if (className == null) { if (targetType == null) { // nothing to do, no information about target type found target = map; } } else { checkClassName(jsonParser.classnameWhitelist, className); try { targetType = ClassLoaderUtil.loadClass(className); } catch (ClassNotFoundException cnfex) { throw new JsonException(cnfex); } } if (target == null) { target = jsonParser.newObjectInstance(targetType); } ClassDescriptor cd = ClassIntrospector.get().lookup(target.getClass()); boolean targetIsMap = target instanceof Map; for (Object key : map.keySet()) { String keyName = key.toString(); if (classMetadataName != null) { if (keyName.equals(classMetadataName)) { continue; } } PropertyDescriptor pd = cd.getPropertyDescriptor(keyName, declared); if (!targetIsMap && pd == null) { // target property does not exist, continue continue; } // value is one of JSON basic types, like Number, Map, List... Object value = map.get(key); Class propertyType = pd == null ? null : pd.getType(); Class componentType = pd == null ? null : pd.resolveComponentType(true); if (value != null) { if (value instanceof List) { if (componentType != null && componentType != String.class) { value = generifyList((List) value, componentType); } } else if (value instanceof Map) { // if the value we want to inject is a Map... if (!ClassUtil.isTypeOf(propertyType, Map.class)) { // ... and if target is NOT a map value = map2bean((Map) value, propertyType); } else { // target is also a Map, but we might need to generify it Class keyType = pd == null ? null : pd.resolveKeyType(true); if (keyType != String.class || componentType != String.class) { // generify value = generifyMap((Map) value, keyType, componentType); } } } } if (targetIsMap) { ((Map)target).put(keyName, value); } else { try { setValue(target, pd, value); } catch (Exception ignore) { ignore.printStackTrace(); } } } return target; }\n\n    ### Response:",
        "ground_truth": "Converts map to target type.",
        "predict": " Replaces the profiles associated to this user.\n\n@param string[]|Profile[] $profiles Unique ids or Kuzzle\\Security\\Profile instances corresponding to the new associated profiles\n@return $this.\n\n    "
    },
    {
        "ID": 1324,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private function _findFile(string $dirName, string $fileName): ?FileHandler { $dirs = glob($dirName . '*'); $file = null; foreach ($dirs as $d) { if (is_file($d)) { $pathInfo = \\pathinfo($d); $pathInfo2 = \\pathinfo($fileName); if (isset($pathInfo2[\"extension\"])) { $condition = $pathInfo[\"basename\"] === $pathInfo2[\"basename\"]; } else { $condition = $pathInfo[\"filename\"] === $pathInfo2[\"filename\"]; } if ($condition) { return new FileHandler($dirName . \"/\" . $pathInfo[\"basename\"]); } } else if (is_dir($d)) { $tmp = $this->_findFile($d . \"/\", $fileName); if (null !== $tmp) { $file = $tmp; } } } return $file; }\n\n    ### Response: finds a file in the given dir\n\n@param $dirName\n@param $fileName\n@return string.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private Object generifyList(final List list, final Class componentType) { for (int i = 0; i < list.size(); i++) { Object element = list.get(i); if (element != null) { if (element instanceof Map) { Object bean = map2bean((Map) element, componentType); list.set(i, bean); } else { Object value = convert(element, componentType); list.set(i, value); } } } return list; }\n\n    ### Response:",
        "ground_truth": "Converts type of all list elements to match the component type.",
        "predict": " finds a file in the given dir\n\n@param $dirName\n@param $fileName\n@return string.\n\n    "
    },
    {
        "ID": 1325,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Nullable public static TreePath findEnclosingMethodOrLambdaOrInitializer(TreePath path) { TreePath curPath = path.getParentPath(); while (curPath != null) { if (curPath.getLeaf() instanceof MethodTree || curPath.getLeaf() instanceof LambdaExpressionTree) { return curPath; } TreePath parent = curPath.getParentPath(); if (parent != null && parent.getLeaf() instanceof ClassTree) { if (curPath.getLeaf() instanceof BlockTree) { // found initializer block return curPath; } if (curPath.getLeaf() instanceof VariableTree && ((VariableTree) curPath.getLeaf()).getInitializer() != null) { // found field with an inline initializer return curPath; } } curPath = parent; } return null; }\n\n    ### Response: find the enclosing method, lambda expression or initializer block for the leaf of some tree\npath\n\n@param path the tree path\n@return the closest enclosing method / lambda.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void setValue(final Object target, final PropertyDescriptor pd, Object value) throws InvocationTargetException, IllegalAccessException { Class propertyType; Setter setter = pd.getSetter(true); if (setter != null) { if (value != null) { propertyType = setter.getSetterRawType(); value = jsonParser.convertType(value, propertyType); } setter.invokeSetter(target, value); } }\n\n    ### Response:",
        "ground_truth": "Sets the property value.",
        "predict": " find the enclosing method, lambda expression or initializer block for the leaf of some tree\npath\n\n@param path the tree path\n@return the closest enclosing method / lambda.\n\n    "
    },
    {
        "ID": 1326,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function getFormGroupOptions($name = null, array $options = []) { $class = 'form-group'; if ($name) { $class .= ' ' . $this->getFieldErrorClass($name); } return array_merge(['class' => $class], $options); }\n\n    ### Response: Merge the options provided for a form group with the default options\nrequired for Bootstrap styling.\n\n@param  string $name\n@param  array  $options\n@return array.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected <K,V> Map<K, V> generifyMap(final Map<Object, Object> map, final Class<K> keyType, final Class<V> valueType) { if (keyType == String.class) { // only value type is changed, we can make value replacements for (Map.Entry<Object, Object> entry : map.entrySet()) { Object value = entry.getValue(); Object newValue = convert(value, valueType); if (value != newValue) { entry.setValue(newValue); } } return (Map<K, V>) map; } // key is changed too, we need a new map Map<K, V> newMap = new HashMap<>(map.size()); for (Map.Entry<Object, Object> entry : map.entrySet()) { Object key = entry.getKey(); Object newKey = convert(key, keyType); Object value = entry.getValue(); Object newValue = convert(value, valueType); newMap.put((K)newKey, (V)newValue); } return newMap; }\n\n    ### Response:",
        "ground_truth": "Change map elements to match key and value types.",
        "predict": " Merge the options provided for a form group with the default options\nrequired for Bootstrap styling.\n\n@param  string $name\n@param  array  $options\n@return array.\n\n    "
    },
    {
        "ID": 1327,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (met *Metrics) Add(name string, value int64) { atomic.AddInt64(met.get(name), value) }\n\n    ### Response: // Add adds a number to a given metric..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public int compareTo(final Object o) { DbEntityColumnDescriptor that = (DbEntityColumnDescriptor) o; if (this.isId != that.isId) { return this.isId ? -1 : 1; // IDs should be the first in the array } return this.columnName.compareTo(that.columnName); }\n\n    ### Response:",
        "ground_truth": "Compares two column descriptors. Identity columns should be the first on the list.\nEach group then will be sorted by column name.",
        "predict": " // Add adds a number to a given metric..\n\n    "
    },
    {
        "ID": 1328,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function cobble(){ var args = [], last; for(var i = 0; i < arguments.length; ++i) { last = arguments[i]; if( isArray(last) ) args = args.concat(last) else args[args.length] = last } return cobble.into({}, args) }\n\n    ### Response: compose objects into a new object, leaving the original objects untouched\n@param {...object} an object to be composed.\n@return {object}.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public HttpBrowser setDefaultHeader(final String name, final String value) { defaultHeaders.addHeader(name, value); return this; }\n\n    ### Response:",
        "ground_truth": "Adds default header to all requests.",
        "predict": " compose objects into a new object, leaving the original objects untouched\n@param {...object} an object to be composed.\n@return {object}.\n\n    "
    },
    {
        "ID": 1329,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _cached_same_codes(self): \"\"\"If a cached copy is available, return it\"\"\" cache_file = self._same_cache_file if os.path.exists(cache_file): maxage = datetime.now() - timedelta(minutes=4320) file_ts = datetime.fromtimestamp(os.stat(cache_file).st_mtime) if file_ts > maxage: try: cache = open(cache_file, 'rb') self._samecodes = cPickle.load(cache) cache.close() return True finally: pass self.reload()\n\n    ### Response: If a cached copy is available, return it.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public HttpResponse sendRequest(HttpRequest httpRequest) { elapsedTime = System.currentTimeMillis(); // send request httpRequest.followRedirects(false); while (true) { this.httpRequest = httpRequest; HttpResponse previousResponse = this.httpResponse; this.httpResponse = null; addDefaultHeaders(httpRequest); addCookies(httpRequest); // send request if (catchTransportExceptions) { try { this.httpResponse = _sendRequest(httpRequest, previousResponse); } catch (HttpException httpException) { httpResponse = new HttpResponse(); httpResponse.assignHttpRequest(httpRequest); httpResponse.statusCode(503); httpResponse.statusPhrase(\"Service unavailable. \" + ExceptionUtil.message(httpException)); } } else { this.httpResponse =_sendRequest(httpRequest, previousResponse); } readCookies(httpResponse); int statusCode = httpResponse.statusCode(); // 301: moved permanently if (statusCode == 301) { String newPath = httpResponse.location(); if (newPath == null) { break; } httpRequest = HttpRequest.get(newPath); continue; } // 302: redirect, 303: see other if (statusCode == 302 || statusCode == 303) { String newPath = httpResponse.location(); if (newPath == null) { break; } httpRequest = HttpRequest.get(newPath); continue; } // 307: temporary redirect, 308: permanent redirect if (statusCode == 307 || statusCode == 308) { String newPath = httpResponse.location(); if (newPath == null) { break; } String originalMethod = httpRequest.method(); httpRequest = new HttpRequest() .method(originalMethod) .set(newPath); continue; } break; } elapsedTime = System.currentTimeMillis() - elapsedTime; return this.httpResponse; }\n\n    ### Response:",
        "ground_truth": "Sends new request as a browser. Before sending,\nall browser cookies are added to the request.\nAfter sending, the cookies are read from the response.\nMoreover, status codes 301 and 302 are automatically\nhandled. Returns very last response.",
        "predict": " If a cached copy is available, return it.\n\n    "
    },
    {
        "ID": 1330,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def process_dynesty_run(results): \"\"\"Transforms results from a dynesty run into the nestcheck dictionary format for analysis. This function has been tested with dynesty v9.2.0. Note that the nestcheck point weights and evidence will not be exactly the same as the dynesty ones as nestcheck calculates logX volumes more precisely (using the trapezium rule). This function does not require the birth_inds_given_contours and threads_given_birth_inds functions as dynesty results objects already include thread labels via their samples_id property. If the dynesty run is dynamic, the batch_bounds property is need to determine the threads' starting birth contours. Parameters ---------- results: dynesty results object N.B. the remaining live points at termination must be included in the results (dynesty samplers' run_nested method does this if add_live_points=True - its default value). Returns ------- ns_run: dict Nested sampling run dict (see the module docstring for more details). \"\"\" samples = np.zeros((results.samples.shape[0], results.samples.shape[1] + 3)) samples[:, 0] = results.logl samples[:, 1] = results.samples_id samples[:, 3:] = results.samples unique_th, first_inds = np.unique(results.samples_id, return_index=True) assert np.array_equal(unique_th, np.asarray(range(unique_th.shape[0]))) thread_min_max = np.full((unique_th.shape[0], 2), np.nan) try: # Try processing standard nested sampling results assert unique_th.shape[0] == results.nlive assert np.array_equal( np.unique(results.samples_id[-results.nlive:]), np.asarray(range(results.nlive))), ( 'perhaps the final live points are not included?') thread_min_max[:, 0] = -np.inf except AttributeError: # If results has no nlive attribute, it must be dynamic nested sampling assert unique_th.shape[0] == sum(results.batch_nlive) for th_lab, ind in zip(unique_th, first_inds): thread_min_max[th_lab, 0] = ( results.batch_bounds[results.samples_batch[ind], 0]) for th_lab in unique_th: final_ind = np.where(results.samples_id == th_lab)[0][-1] thread_min_max[th_lab, 1] = results.logl[final_ind] samples[final_ind, 2] = -1 assert np.all(~np.isnan(thread_min_max)) run = nestcheck.ns_run_utils.dict_given_run_array(samples, thread_min_max) nestcheck.ns_run_utils.check_ns_run(run) return run\n\n    ### Response: Transforms results from a dynesty run into the nestcheck dictionary\n    format for analysis. This function has been tested with dynesty v9.2.0.\n\n    Note that the nestcheck point weights and evidence will not be exactly\n    the same as the dynesty ones as nestcheck calculates logX volumes more\n    precisely (using the trapezium rule).\n\n    This function does not require the birth_inds_given_contours and\n    threads_given_birth_inds functions as dynesty results objects\n    already include thread labels via their samples_id property. If the\n    dynesty run is dynamic, the batch_bounds property is need to determine\n    the threads' starting birth contours.\n\n    Parameters\n    ----------\n    results: dynesty results object\n        N.B. the remaining live points at termination must be included in the\n        results (dynesty samplers' run_nested method does this if\n        add_live_points=True - its default value).\n\n    Returns\n    -------\n    ns_run: dict\n        Nested sampling run dict (see the module docstring for more details)..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected HttpResponse _sendRequest(final HttpRequest httpRequest, final HttpResponse previouseResponse) { if (!keepAlive) { httpRequest.open(httpConnectionProvider); } else { // keeping alive if (previouseResponse == null) { httpRequest.open(httpConnectionProvider).connectionKeepAlive(true); } else { httpRequest.keepAlive(previouseResponse, true); } } return httpRequest.send(); }\n\n    ### Response:",
        "ground_truth": "Opens connection and sends a response.",
        "predict": " Transforms results from a dynesty run into the nestcheck dictionary\n    format for analysis. This function has been tested with dynesty v9.2.0.\n\n    Note that the nestcheck point weights and evidence will not be exactly\n    the same as the dynesty ones as nestcheck calculates logX volumes more\n    precisely (using the trapezium rule).\n\n    This function does not require the birth_inds_given_contours and\n    threads_given_birth_inds functions as dynesty results objects\n    already include thread labels via their samples_id property. If the\n    dynesty run is dynamic, the batch_bounds property is need to determine\n    the threads' starting birth contours.\n\n    Parameters\n    ----------\n    results: dynesty results object\n        N.B. the remaining live points at termination must be included in the\n        results (dynesty samplers' run_nested method does this if\n        add_live_points=True - its default value).\n\n    Returns\n    -------\n    ns_run: dict\n        Nested sampling run dict (see the module docstring for more details)..\n\n    "
    },
    {
        "ID": 1331,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def gravatar_for(user, options = {}) options = { size: 80, default: :identicon }.merge(options || {}) options[:default] = options[:default].to_s.to_sym unless options[:default].nil? || options[:default].is_a?(Symbol) gravatar_id = Digest::MD5::hexdigest(user.email.downcase) size = options[:size] default = [:mm, :identicon, :monsterid, :wavatar, :retro].include?(options[:default]) ? \"&d=#{options[:default]}\" : '' gravatar_url = \"https://secure.gravatar.com/avatar/#{gravatar_id}?s=#{size}#{default}\" image_tag(gravatar_url, alt: user.name, class: 'gravatar', style: \"width: #{size}px, height: #{size}px\") end\n\n    ### Response: Returns the Gravatar for the given user.\n\n Based on the tutorial from [www.railstutorial.org](www.railstutorial.org).\n\n The +user+ is the user you want to get the gravatar for.\n\n Valid options:\n *   +size+ The size (in pixels) for the returned gravatar.  The gravatar will be a square image using this\n     value as both the width and height.  The default is 80 pixels.\n *   +default+ The default image to return when no image is set. This can be nil, :mm, :identicon, :monsterid,\n     :wavatar, or :retro.  The default is :identicon..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void addDefaultHeaders(final HttpRequest httpRequest) { for (Map.Entry<String, String> entry : defaultHeaders.entries()) { String name = entry.getKey(); if (!httpRequest.headers.contains(name)) { httpRequest.headers.add(name, entry.getValue()); } } }\n\n    ### Response:",
        "ground_truth": "Add default headers to the request. If request already has a header set,\ndefault header will be ignored.",
        "predict": " Returns the Gravatar for the given user.\n\n Based on the tutorial from [www.railstutorial.org](www.railstutorial.org).\n\n The +user+ is the user you want to get the gravatar for.\n\n Valid options:\n *   +size+ The size (in pixels) for the returned gravatar.  The gravatar will be a square image using this\n     value as both the width and height.  The default is 80 pixels.\n *   +default+ The default image to return when no image is set. This can be nil, :mm, :identicon, :monsterid,\n     :wavatar, or :retro.  The default is :identicon..\n\n    "
    },
    {
        "ID": 1332,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def invitation_accepted(event): \"\"\" When an invitation is accepted, add the user to the team \"\"\" request = getRequest() storage = get_storage() if event.token_id not in storage: return ws_uid, username = storage[event.token_id] storage[event.token_id] acl_users = api.portal.get_tool('acl_users') acl_users.updateCredentials( request, request.response, username, None ) catalog = api.portal.get_tool(name=\"portal_catalog\") brain = catalog.unrestrictedSearchResults(UID=ws_uid)[0] with api.env.adopt_roles([\"Manager\"]): ws = IWorkspace(brain.getObject()) for name in ws.members: member = api.user.get(username=name) if member is not None: if member.getUserName() == username: api.portal.show_message( _('Oh boy, oh boy, you are already a member'), request, ) break else: ws.add_to_team(user=username) api.portal.show_message( _('Welcome to our family, Stranger'), request, )\n\n    ### Response: When an invitation is accepted, add the user to the team.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void readCookies(final HttpResponse httpResponse) { Cookie[] newCookies = httpResponse.cookies(); for (Cookie cookie : newCookies) { cookies.add(cookie.getName(), cookie); } }\n\n    ### Response:",
        "ground_truth": "Reads cookies from response and adds to cookies list.",
        "predict": " When an invitation is accepted, add the user to the team.\n\n    "
    },
    {
        "ID": 1333,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static function getAttachment($attachmentID,$options = []) { $result = null; $downloader = new Priloha($attachmentID,$options); if ($downloader->lastResponseCode == 200) { $downloader->doCurlRequest(self::getDownloadURL($downloader), 'GET'); if ($downloader->lastResponseCode == 200) { $result = $downloader->lastCurlResponse; } } return $result; }\n\n    ### Response: Gives you attachment body as return value\n\n@param int   $attachmentID\n@param array $options      Additional Connection Options\n\n@return string.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void addCookies(final HttpRequest httpRequest) { // prepare all cookies List<Cookie> cookiesList = new ArrayList<>(); if (!cookies.isEmpty()) { for (Map.Entry<String, Cookie> cookieEntry : cookies) { cookiesList.add(cookieEntry.getValue()); } httpRequest.cookies(cookiesList.toArray(new Cookie[0])); } }\n\n    ### Response:",
        "ground_truth": "Add cookies to the request.",
        "predict": " Gives you attachment body as return value\n\n@param int   $attachmentID\n@param array $options      Additional Connection Options\n\n@return string.\n\n    "
    },
    {
        "ID": 1334,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public ServiceCall<ListCollectionsResponse> listCollections(ListCollectionsOptions listCollectionsOptions) { Validator.notNull(listCollectionsOptions, \"listCollectionsOptions cannot be null\"); String[] pathSegments = { \"v1/environments\", \"collections\" }; String[] pathParameters = { listCollectionsOptions.environmentId() }; RequestBuilder builder = RequestBuilder.get(RequestBuilder.constructHttpUrl(getEndPoint(), pathSegments, pathParameters)); builder.query(\"version\", versionDate); Map<String, String> sdkHeaders = SdkCommon.getSdkHeaders(\"discovery\", \"v1\", \"listCollections\"); for (Entry<String, String> header : sdkHeaders.entrySet()) { builder.header(header.getKey(), header.getValue()); } builder.header(\"Accept\", \"application/json\"); if (listCollectionsOptions.name() != null) { builder.query(\"name\", listCollectionsOptions.name()); } return createServiceCall(builder.build(), ResponseConverterUtils.getObject(ListCollectionsResponse.class)); }\n\n    ### Response: List collections.\n\nLists existing collections for the service instance.\n\n@param listCollectionsOptions the {@link ListCollectionsOptions} containing the options for the call\n@return a {@link ServiceCall} with a response type of {@link ListCollectionsResponse}.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String sendMail(final Email email) { try { final MimeMessage msg = createMessage(email); getService().sendMessage(msg, msg.getAllRecipients()); return msg.getMessageID(); } catch (final MessagingException msgexc) { throw new MailException(\"Failed to send email: \" + email, msgexc); } }\n\n    ### Response:",
        "ground_truth": "Prepares message and sends it. Returns Message ID of sent email.\n\n@param email {@link Email} to send.\n@return String representing message ID.",
        "predict": " List collections.\n\nLists existing collections for the service instance.\n\n@param listCollectionsOptions the {@link ListCollectionsOptions} containing the options for the call\n@return a {@link ServiceCall} with a response type of {@link ListCollectionsResponse}.\n\n    "
    },
    {
        "ID": 1335,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function afterUpdatingComment( $comment, $notified, $time ) { $user = eZUser::fetch( $comment->attribute( 'user_id' ) ); // if notified is true, add subscription, else cleanup the subscription on the user and content $contentID = $comment->attribute( 'contentobject_id' ); $languageID = $comment->attribute( 'language_id' ); $subscriptionType = 'ezcomcomment'; if ( !is_null( $notified ) ) { $subscriptionManager = ezcomSubscriptionManager::instance(); if ( $notified === true ) { //add subscription but not send activation try { $subscriptionManager->addSubscription( $comment->attribute( 'email' ), $user, $contentID, $languageID, $subscriptionType, $time, false ); } catch ( Exception $e ) { eZDebug::writeError( $e->getMessage(), __METHOD__ ); switch ( $e->getCode() ) { case ezcomSubscriptionManager::ERROR_SUBSCRIBER_DISABLED: return 'The subscriber is disabled.'; default: return false; } } } else { $subscriptionManager->deleteSubscription( $comment->attribute( 'email' ), $comment->attribute( 'contentobject_id' ), $comment->attribute( 'language_id' ) ); } } //3. update queue. If there is subscription, add one record into queue table // if there is subcription on this content, add one item into queue if ( ezcomSubscription::exists( $contentID, $languageID, $subscriptionType ) ) { $notification = ezcomNotification::create(); $notification->setAttribute( 'contentobject_id', $comment->attribute( 'contentobject_id' ) ); $notification->setAttribute( 'language_id', $comment->attribute( 'language_id' ) ); $notification->setAttribute( 'comment_id', $comment->attribute( 'id' ) ); $notification->store(); eZDebugSetting::writeNotice( 'extension-ezcomments', 'There are subscriptions, added an update notification to the queue.', __METHOD__ ); } else { // todo: if there is no subscription on this content, consider to clean up the queue } return true; }\n\n    ### Response: clean up subscription after updating comment\n@see extension/ezcomments/classes/ezcomCommentManager#afterUpdatingComment($comment, $notified).\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void setSubject(final Email emailWithData, final MimeMessage msgToSet) throws MessagingException { if (emailWithData.subjectEncoding() != null) { msgToSet.setSubject(emailWithData.subject(), emailWithData.subjectEncoding()); } else { msgToSet.setSubject(emailWithData.subject()); } }\n\n    ### Response:",
        "ground_truth": "Sets subject in msgToSet from subject in emailWithData.\n\n@param emailWithData {@link Email} with data\n@param msgToSet      {@link MimeMessage} to set data into.\n@throws MessagingException if there is a failure",
        "predict": " clean up subscription after updating comment\n@see extension/ezcomments/classes/ezcomCommentManager#afterUpdatingComment($comment, $notified).\n\n    "
    },
    {
        "ID": 1336,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def files(self): 'iterate over found files' for _f in self.searchresult.files.iterchildren(): yield ProtoFile.factory(_f, jfs=self.jfs, parentpath=unicode(_f.abspath))\n\n    ### Response: iterate over found files.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void setSentDate(final Email emailWithData, final MimeMessage msgToSet) throws MessagingException { Date date = emailWithData.sentDate(); if (date == null) { date = new Date(); } msgToSet.setSentDate(date); }\n\n    ### Response:",
        "ground_truth": "Sets sent date in msgToSet with sent date from emailWithData.\n\n@param emailWithData {@link Email} with data\n@param msgToSet      {@link MimeMessage} to set data into.\n@throws MessagingException if there is a failure",
        "predict": " iterate over found files.\n\n    "
    },
    {
        "ID": 1337,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static function compareVersion($version1, $version2) { if ($version1 == $version2) { return 0; } $v1 = Parser::parse($version1); $v2 = Parser::parse($version2); return self::compare($v1, $v2); }\n\n    ### Response: Compare two version as string.\n\nIt supports wildcard in one of the version\n\n@param string $version1\n@param string $version2\n\n@return int 0 if equal, -1 if $version1  $version2.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void setHeaders(final Email emailWithData, final MimeMessage msgToSet) throws MessagingException { final Map<String, String> headers = emailWithData.headers(); if (headers != null) { for (final Map.Entry<String, String> entry : headers.entrySet()) { msgToSet.setHeader(entry.getKey(), entry.getValue()); } } }\n\n    ### Response:",
        "ground_truth": "Sets headers in msgToSet with headers from emailWithData.\n\n@param emailWithData {@link Email} with data\n@param msgToSet      {@link MimeMessage} to set data into.\n@throws MessagingException if there is a failure",
        "predict": " Compare two version as string.\n\nIt supports wildcard in one of the version\n\n@param string $version1\n@param string $version2\n\n@return int 0 if equal, -1 if $version1  $version2.\n\n    "
    },
    {
        "ID": 1338,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def circle(origin_x, origin_y, perim_x, perim_y) primitive 'circle ' + format('%g,%g %g,%g', origin_x, origin_y, perim_x, perim_y) end\n\n    ### Response: Draw a circle.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void setPeople(final Email emailWithData, final MimeMessage msgToSet) throws MessagingException { msgToSet.setFrom(emailWithData.from().toInternetAddress()); msgToSet.setReplyTo(EmailAddress.convert(emailWithData.replyTo())); setRecipients(emailWithData, msgToSet); }\n\n    ### Response:",
        "ground_truth": "Sets FROM, REPLY-TO and recipients.\n\n@param emailWithData {@link Email} with data\n@param msgToSet      {@link MimeMessage} to set data into.\n@throws MessagingException if there is a failure",
        "predict": " Draw a circle.\n\n    "
    },
    {
        "ID": 1339,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Test public void MPJwtNoMpJwtConfig_formLoginInWebXML_mpJwtInApp() throws Exception { genericLoginConfigFormLoginVariationTest( MpJwtFatConstants.LOGINCONFIG_FORM_LOGIN_IN_WEB_XML_SERVLET_MP_JWT_IN_APP_ROOT_CONTEXT, MpJwtFatConstants.LOGINCONFIG_FORM_LOGIN_IN_WEB_XML_SERVLET_MP_JWT_IN_APP, MpJwtFatConstants.MPJWT_APP_CLASS_LOGIN_CONFIG_FORMLOGININWEBXML_MPJWTINAPP, UseJWTToken.NO); }\n\n    ### Response: login-config does exist in web.xml, but is set to FORM_LOGIN\nlogin-config does exist in the app and is set to MP-JWT\nthe mpJwt feature is NOT enabled\nWe should use FORM_LOGIN\n\n@throws Exception.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void setRecipients(final Email emailWithData, final MimeMessage msgToSet) throws MessagingException { // TO final InternetAddress[] to = EmailAddress.convert(emailWithData.to()); if (to.length > 0) { msgToSet.setRecipients(RecipientType.TO, to); } // CC final InternetAddress[] cc = EmailAddress.convert(emailWithData.cc()); if (cc.length > 0) { msgToSet.setRecipients(RecipientType.CC, cc); } // BCC final InternetAddress[] bcc = EmailAddress.convert(emailWithData.bcc()); if (bcc.length > 0) { msgToSet.setRecipients(RecipientType.BCC, bcc); } }\n\n    ### Response:",
        "ground_truth": "Sets TO, CC and BCC in msgToSet with TO, CC and BCC from emailWithData.\n\n@param emailWithData {@link Email} with data\n@param msgToSet      {@link MimeMessage} to set data into.\n@throws MessagingException if there is a failure.",
        "predict": " login-config does exist in web.xml, but is set to FORM_LOGIN\nlogin-config does exist in the app and is set to MP-JWT\nthe mpJwt feature is NOT enabled\nWe should use FORM_LOGIN\n\n@throws Exception.\n\n    "
    },
    {
        "ID": 1340,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static function getCustomMenuItems($user) { $menuItems = []; if (array_key_exists('menu', config('laralum'))) { foreach (config('laralum.menu') as $custom_menu) { $pm = new self(); $pm->name(ucfirst($custom_menu['title'])); $pm->items = array_merge($pm->items, static::getPackageMenuItems($custom_menu, $user)); if (count($pm->items) > 0) { array_push($menuItems, $pm); } } } return $menuItems; }\n\n    ### Response: Get custom menus defined in the laralum config.\n\n@return [type] [description].\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void addBodyData(final Email emailWithData, final MimeMessage msgToSet) throws MessagingException { final List<EmailMessage> messages = emailWithData.messages(); final int totalMessages = messages.size(); // Need to use new list since filterEmbeddedAttachments(List) removes attachments from the source List final List<EmailAttachment<? extends DataSource>> attachments = new ArrayList<>(emailWithData.attachments()); if (attachments.isEmpty() && totalMessages == 1) { // special case: no attachments and just one content setContent(messages.get(0), msgToSet); } else { final MimeMultipart multipart = new MimeMultipart(); final MimeMultipart msgMultipart = new MimeMultipart(ALTERNATIVE); multipart.addBodyPart(getBaseBodyPart(msgMultipart)); for (final EmailMessage emailMessage : messages) { msgMultipart.addBodyPart(getBodyPart(emailMessage, attachments)); } addAnyAttachments(attachments, multipart); msgToSet.setContent(multipart); } }\n\n    ### Response:",
        "ground_truth": "Adds message data and attachments.\n\n@param emailWithData {@link Email} with data\n@param msgToSet      {@link MimeMessage} to set data into.\n@throws MessagingException if there is a failure.",
        "predict": " Get custom menus defined in the laralum config.\n\n@return [type] [description].\n\n    "
    },
    {
        "ID": 1341,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def ParseMessage(self, parser_mediator, key, date_time, tokens): \"\"\"Produces an event from a syslog body that matched one of the grammars. Args: parser_mediator (ParserMediator): mediates interactions between parsers and other components, such as storage and dfvfs. key (str): name of the matching grammar. date_time (dfdatetime.DateTimeValues): date and time values. tokens (dict[str, str]): tokens derived from a syslog message based on the defined grammar. Raises: ValueError: If an unknown key is provided. \"\"\" if key not in ('failed_connection', 'login', 'opened_connection'): raise ValueError('Unknown grammar key: {0:s}'.format(key)) if key == 'login': event_data = SSHLoginEventData() elif key == 'failed_connection': event_data = SSHFailedConnectionEventData() elif key == 'opened_connection': event_data = SSHOpenedConnectionEventData() event_data.address = tokens.get('address', None) event_data.authentication_method = tokens.get( 'authentication_method', None) event_data.body = tokens.get('body', None) event_data.fingerprint = tokens.get('fingerprint', None) event_data.hostname = tokens.get('hostname', None) # TODO: pass line number to offset or remove. event_data.offset = 0 event_data.pid = tokens.get('pid', None) event_data.protocol = tokens.get('protocol', None) event_data.port = tokens.get('port', None) event_data.reporter = tokens.get('reporter', None) event_data.severity = tokens.get('severity', None) event_data.username = tokens.get('username', None) event = time_events.DateTimeValuesEvent( date_time, definitions.TIME_DESCRIPTION_WRITTEN) parser_mediator.ProduceEventWithEventData(event, event_data)\n\n    ### Response: Produces an event from a syslog body that matched one of the grammars.\n\n    Args:\n      parser_mediator (ParserMediator): mediates interactions between parsers\n          and other components, such as storage and dfvfs.\n      key (str): name of the matching grammar.\n      date_time (dfdatetime.DateTimeValues): date and time values.\n      tokens (dict[str, str]): tokens derived from a syslog message based on\n          the defined grammar.\n\n    Raises:\n      ValueError: If an unknown key is provided..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void setContent(final EmailMessage emailWithData, final Part partToSet) throws MessagingException { partToSet.setContent(emailWithData.getContent(), emailWithData.getMimeType() + CHARSET + emailWithData.getEncoding()); }\n\n    ### Response:",
        "ground_truth": "Sets emailWithData content into msgToSet.\n\n@param emailWithData {@link EmailMessage} with data.\n@param partToSet     {@link Part} to set data into.\n@throws MessagingException if there is a failure.",
        "predict": " Produces an event from a syslog body that matched one of the grammars.\n\n    Args:\n      parser_mediator (ParserMediator): mediates interactions between parsers\n          and other components, such as storage and dfvfs.\n      key (str): name of the matching grammar.\n      date_time (dfdatetime.DateTimeValues): date and time values.\n      tokens (dict[str, str]): tokens derived from a syslog message based on\n          the defined grammar.\n\n    Raises:\n      ValueError: If an unknown key is provided..\n\n    "
    },
    {
        "ID": 1342,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def get_site_packages_dir(self, arch=None): '''Returns the location of site-packages in the python-install build dir. ''' if self.python_recipe.name == 'python2legacy': return join(self.get_python_install_dir(), 'lib', 'python2.7', 'site-packages') return self.get_python_install_dir()\n\n    ### Response: Returns the location of site-packages in the python-install build\n        dir..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected MimeBodyPart createAttachmentBodyPart(final EmailAttachment<? extends DataSource> attachment) throws MessagingException { final MimeBodyPart part = new MimeBodyPart(); final String attachmentName = attachment.getEncodedName(); if (attachmentName != null) { part.setFileName(attachmentName); } part.setDataHandler(new DataHandler(attachment.getDataSource())); if (attachment.getContentId() != null) { part.setContentID(StringPool.LEFT_CHEV + attachment.getContentId() + StringPool.RIGHT_CHEV); } if (attachment.isInline()) { part.setDisposition(INLINE); } return part; }\n\n    ### Response:",
        "ground_truth": "Creates attachment body part. Handles regular and inline attachments.\n\n@param attachment Body part {@link EmailAttachment}.\n@return {@link MimeBodyPart} which represents body part attachment.\n@throws MessagingException if there is a failure.",
        "predict": " Returns the location of site-packages in the python-install build\n        dir..\n\n    "
    },
    {
        "ID": 1343,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private function scanPathsForBlob(array $outputLines) { // no children, empty folder or blob! if (count($this->children) > 0) { return; } // root, no blob if ($this->isRoot()) { return; } if (1 === count($outputLines)) { $treeObject = NodeObject::createFromOutputLine($this->repository, $outputLines[0]); if ($treeObject->getSha() === $this->subject->getSha()) { $this->blob = $treeObject; } } }\n\n    ### Response: check if the path is equals to a fullPath\nto tell if it's a blob\n\n@param array $outputLines output lines\n\n@return mixed.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private String getContentType(final String dataHeader) { String token = \"Content-Type:\"; int start = dataHeader.indexOf(token); if (start == -1) { return StringPool.EMPTY; } start += token.length(); return dataHeader.substring(start).trim(); }\n\n    ### Response:",
        "ground_truth": "Strips content type information from requests data header.\n@param dataHeader data header string\n@return content type or an empty string if no content type defined",
        "predict": " check if the path is equals to a fullPath\nto tell if it's a blob\n\n@param array $outputLines output lines\n\n@return mixed.\n\n    "
    },
    {
        "ID": 1344,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function header ( $header, $value ) { if( $this->write_started ) { throw new InvalidOperationException( \"Can not write header, body writing has started.\" ); } fwrite( $this->socket, \"$header: $value\\r\\n\" ); fflush( $this->socket ); }\n\n    ### Response: Add an HTTP header\n\n@param $header\n@param $value.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void saveResultSet(final ResultSet rs) { if (resultSets == null) { resultSets = new HashSet<>(); } resultSets.add(rs); }\n\n    ### Response:",
        "ground_truth": "Stores result set.",
        "predict": " Add an HTTP header\n\n@param $header\n@param $value.\n\n    "
    },
    {
        "ID": 1345,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function render_closing_template_wrappers() { // Echo closing inner wrapper. if ( ! empty( $this->inner_wrapper_tag ) ) { printf( '</%s>', esc_attr( $this->inner_wrapper_tag ) ); } // Echo closing outer wrapper. if ( ! empty( $this->outer_wrapper_tag ) ) { printf( '</%s>', esc_attr( $this->outer_wrapper_tag ) ); } }\n\n    ### Response: Render module wrapper closing tags after template include.\n\n@return void.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Q closeAllResultSets() { final SQLException sex = closeQueryResultSets(); if (sex != null) { throw new DbSqlException(\"Close associated ResultSets error\", sex); } return _this(); }\n\n    ### Response:",
        "ground_truth": "Closes all result sets created by this query. Query remains active.",
        "predict": " Render module wrapper closing tags after template include.\n\n@return void.\n\n    "
    },
    {
        "ID": 1346,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function compileUpdate(string $table, array $updates, array $whereTokens = []): string { $table = $this->quote($table, true); //Preparing update column statement $updates = $this->prepareUpdates($updates); //Where statement is optional for update queries $whereStatement = $this->optional(\"\\nWHERE\", $this->compileWhere($whereTokens)); return rtrim(\"UPDATE {$table}\\nSET {$updates} {$whereStatement}\"); }\n\n    ### Response: Create update statement.\n\n@param string $table\n@param array  $updates\n@param array  $whereTokens\n\n@return string\n\n@throws CompilerException.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected SQLException closeQuery() { SQLException sqlException = closeQueryResultSets(); if (statement != null) { try { statement.close(); } catch (SQLException sex) { if (sqlException == null) { sqlException = sex; } else { sqlException.setNextException(sex); } } statement = null; } query = null; queryState = CLOSED; return sqlException; }\n\n    ### Response:",
        "ground_truth": "Closes all assigned result sets and then closes the query. Query becomes closed.",
        "predict": " Create update statement.\n\n@param string $table\n@param array  $updates\n@param array  $whereTokens\n\n@return string\n\n@throws CompilerException.\n\n    "
    },
    {
        "ID": 1347,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (s *ModifyReplicationGroupShardConfigurationInput) SetReshardingConfiguration(v []*ReshardingConfiguration) *ModifyReplicationGroupShardConfigurationInput { s.ReshardingConfiguration = v return s }\n\n    ### Response: // SetReshardingConfiguration sets the ReshardingConfiguration field's value..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override @SuppressWarnings({\"ClassReferencesSubclass\"}) public void close() { final SQLException sqlException = closeQuery(); connection = null; if (this.session != null) { this.session.detachQuery(this); } if (sqlException != null) { throw new DbSqlException(\"Close query error\", sqlException); } }\n\n    ### Response:",
        "ground_truth": "Closes the query and all created results sets and detaches itself from the session.",
        "predict": " // SetReshardingConfiguration sets the ReshardingConfiguration field's value..\n\n    "
    },
    {
        "ID": 1348,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static <C> JULLogTemplate<C> toJUL(String loggerName, Level level) { return new JULLogTemplate<>(loggerName, level); }\n\n    ### Response: Produces a concrete log template which logs messages into a Java Util Logging Logger.\n\n@param loggerName Logger name\n@param level Level (warn, fine, finer, etc.)\n@return Logger.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Q setFetchSize(final int rows) { checkNotClosed(); this.fetchSize = rows; if (statement != null) { try { statement.setFetchSize(fetchSize); } catch (SQLException sex) { throw new DbSqlException(this, \"Unable to set fetch size: \" + fetchSize, sex); } } return _this(); }\n\n    ### Response:",
        "ground_truth": "Gives the JDBC driver a hint as to the number of rows that should be fetched from the database when\nmore rows are needed. The number of rows specified affects only result sets created using this statement.\nIf the value specified is zero, then the hint is ignored. The default value is zero.\n@see Statement#setFetchSize(int)",
        "predict": " Produces a concrete log template which logs messages into a Java Util Logging Logger.\n\n@param loggerName Logger name\n@param level Level (warn, fine, finer, etc.)\n@return Logger.\n\n    "
    },
    {
        "ID": 1349,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def decode(pieces, sequence_length, model_file=None, model_proto=None, reverse=False, name=None): \"\"\"Decode pieces into postprocessed text. Args: pieces: A 2D int32 or string tensor [batch_size x max_length] of encoded sequences. sequence_length: A 1D int32 tensor [batch_size] representing the length of pieces. model_file: The sentencepiece model file path. model_proto: The sentencepiece model serialized proto. Either `model_file` or `model_proto` must be set. reverse: Reverses the tokenized sequence (Default = false) name: The name argument that is passed to the op function. Returns: text: A 1D string tensor of decoded string. \"\"\" return _gen_sentencepiece_processor_op.sentencepiece_decode( pieces, sequence_length, model_file=model_file, model_proto=model_proto, reverse=reverse, name=name)\n\n    ### Response: Decode pieces into postprocessed text.\n\n  Args:\n    pieces: A 2D int32 or string tensor [batch_size x max_length] of\n            encoded sequences.\n    sequence_length: A 1D int32 tensor [batch_size] representing the\n                   length of pieces.\n    model_file: The sentencepiece model file path.\n    model_proto: The sentencepiece model serialized proto.\n                 Either `model_file` or `model_proto` must be set.\n    reverse: Reverses the tokenized sequence (Default = false)\n    name: The name argument that is passed to the op function.\n\n  Returns:\n    text: A 1D string tensor of decoded string..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Q setMaxRows(final int maxRows) { checkNotClosed(); this.maxRows = maxRows; if (statement != null) { try { statement.setMaxRows(maxRows); } catch (SQLException sex) { throw new DbSqlException(this, \"Unable to set max rows: \" + maxRows, sex); } } return _this(); }\n\n    ### Response:",
        "ground_truth": "Sets the limit for the maximum number of rows that any ResultSet object can contain to the given number.\nIf the limit is exceeded, the excess rows are silently dropped. Zero means there is no limit.\n@see Statement#setMaxRows(int)",
        "predict": " Decode pieces into postprocessed text.\n\n  Args:\n    pieces: A 2D int32 or string tensor [batch_size x max_length] of\n            encoded sequences.\n    sequence_length: A 1D int32 tensor [batch_size] representing the\n                   length of pieces.\n    model_file: The sentencepiece model file path.\n    model_proto: The sentencepiece model serialized proto.\n                 Either `model_file` or `model_proto` must be set.\n    reverse: Reverses the tokenized sequence (Default = false)\n    name: The name argument that is passed to the op function.\n\n  Returns:\n    text: A 1D string tensor of decoded string..\n\n    "
    },
    {
        "ID": 1350,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def get_value(self): \"\"\" Retrieves the value to inject in the component :return: The value to inject \"\"\" with self._lock: # The value field must be a deep copy of our dictionary if self._future_value is not None: return { key: value[:] for key, value in self._future_value.items() } return None\n\n    ### Response: Retrieves the value to inject in the component\n\n        :return: The value to inject.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected int executeUpdate(final boolean closeQuery) { start = System.currentTimeMillis(); init(); final int result; if (log.isDebugEnabled()) { log.debug(\"Executing update: \" + getQueryString()); } try { if (preparedStatement == null) { if (generatedColumns != null) { if (generatedColumns.length == 0) { result = statement.executeUpdate(query.sql, Statement.RETURN_GENERATED_KEYS); } else { result = statement.executeUpdate(query.sql, generatedColumns); } } else { result = statement.executeUpdate(query.sql); } } else { result = preparedStatement.executeUpdate(); } } catch (SQLException sex) { throw new DbSqlException(this, \"Query execution failed\", sex); } if (closeQuery) { close(); } elapsed = System.currentTimeMillis() - start; if (log.isDebugEnabled()) { log.debug(\"execution time: \" + elapsed + \"ms\"); } return result; }\n\n    ### Response:",
        "ground_truth": "Executes UPDATE, INSERT or DELETE queries and optionally closes the query.\n@see Statement#executeUpdate(String)",
        "predict": " Retrieves the value to inject in the component\n\n        :return: The value to inject.\n\n    "
    },
    {
        "ID": 1351,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func newzconn(zclient *client.Client, path string) *zconn { zconn := &zconn{ client: zclient, connC: make(chan chan<- client.Connection), shutdownC: make(chan struct{}), } go zconn.monitor(path) return zconn }\n\n    ### Response: // newzconn instantiates a new connection listener.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected long executeCount(final boolean close) { start = System.currentTimeMillis(); init(); ResultSet rs = null; if (log.isDebugEnabled()) { log.debug(\"Executing prepared count: \" + getQueryString()); } try { if (preparedStatement == null) { rs = statement.executeQuery(query.sql); } else { rs = preparedStatement.executeQuery(); } final long firstLong = DbUtil.getFirstLong(rs); elapsed = System.currentTimeMillis() - start; if (log.isDebugEnabled()) { log.debug(\"execution time: \" + elapsed + \"ms\"); } return firstLong; } catch (SQLException sex) { throw new DbSqlException(this, \"Count query failed\", sex); } finally { DbUtil.close(rs); if (close) { close(); } } }\n\n    ### Response:",
        "ground_truth": "Executes count queries and optionally closes query afterwards.",
        "predict": " // newzconn instantiates a new connection listener.\n\n    "
    },
    {
        "ID": 1352,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (q *Query) CopyTo(w io.Writer, query interface{}, params ...interface{}) (Result, error) { params = append(params, q.model) return q.db.CopyTo(w, query, params...) }\n\n    ### Response: // CopyTo is an alias from DB.CopyTo..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public ResultSet getGeneratedColumns() { checkInitialized(); if (generatedColumns == null) { throw new DbSqlException(this, \"No column is specified as auto-generated\"); } final ResultSet rs; try { rs = statement.getGeneratedKeys(); } catch (SQLException sex) { throw new DbSqlException(this, \"No generated keys\", sex); } saveResultSet(rs); totalOpenResultSetCount++; return rs; }\n\n    ### Response:",
        "ground_truth": "Returns generated columns.",
        "predict": " // CopyTo is an alias from DB.CopyTo..\n\n    "
    },
    {
        "ID": 1353,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def start(self): \"\"\"Use this method to start the Client after creating it. Requires no parameters. Raises: :class:`RPCError <pyrogram.RPCError>` in case of a Telegram RPC error. ``ConnectionError`` in case you try to start an already started Client. \"\"\" if self.is_started: raise ConnectionError(\"Client has already been started\") if self.BOT_TOKEN_RE.match(self.session_name): self.is_bot = True self.bot_token = self.session_name self.session_name = self.session_name.split(\":\")[0] log.warning('\\nWARNING: You are using a bot token as session name!\\n' 'This usage will be deprecated soon. Please use a session file name to load ' 'an existing session and the bot_token argument to create new sessions.\\n' 'More info: https://docs.pyrogram.ml/start/Setup#bot-authorization\\n') self.load_config() self.load_session() self.load_plugins() self.session = Session( self, self.dc_id, self.auth_key ) self.session.start() self.is_started = True try: if self.user_id is None: if self.bot_token is None: self.is_bot = False self.authorize_user() else: self.is_bot = True self.authorize_bot() self.save_session() if not self.is_bot: if self.takeout: self.takeout_id = self.send(functions.account.InitTakeoutSession()).id log.warning(\"Takeout session {} initiated\".format(self.takeout_id)) now = time.time() if abs(now - self.date) > Client.OFFLINE_SLEEP: self.peers_by_username = {} self.peers_by_phone = {} self.get_initial_dialogs() self.get_contacts() else: self.send(functions.messages.GetPinnedDialogs()) self.get_initial_dialogs_chunk() else: self.send(functions.updates.GetState()) except Exception as e: self.is_started = False self.session.stop() raise e for i in range(self.UPDATES_WORKERS): self.updates_workers_list.append( Thread( target=self.updates_worker, name=\"UpdatesWorker#{}\".format(i + 1) ) ) self.updates_workers_list[-1].start() for i in range(self.DOWNLOAD_WORKERS): self.download_workers_list.append( Thread( target=self.download_worker, name=\"DownloadWorker#{}\".format(i + 1) ) ) self.download_workers_list[-1].start() self.dispatcher.start() mimetypes.init() Syncer.add(self) return self\n\n    ### Response: Use this method to start the Client after creating it.\n        Requires no parameters.\n\n        Raises:\n            :class:`RPCError ` in case of a Telegram RPC error.\n            ``ConnectionError`` in case you try to start an already started Client..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String getQueryString() { if (debug) { if ((callableStatement != null)) { if (preparedStatement instanceof LoggableCallableStatement) { return ((LoggableCallableStatement) callableStatement).getQueryString(); } } if (preparedStatement != null) { if (preparedStatement instanceof LoggablePreparedStatement) { return ((LoggablePreparedStatement) preparedStatement).getQueryString(); } } } if (query != null) { return query.sql; } return sqlString; }\n\n    ### Response:",
        "ground_truth": "Returns query SQL string. For prepared statements, returned sql string with quick-and-dirty replaced values.",
        "predict": " Use this method to start the Client after creating it.\n        Requires no parameters.\n\n        Raises:\n            :class:`RPCError ` in case of a Telegram RPC error.\n            ``ConnectionError`` in case you try to start an already started Client..\n\n    "
    },
    {
        "ID": 1354,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private function deserializeQuestionType(Item $question, array $data, array $options = []) { $type = $this->itemDefinitions->getConvertedType($question->getMimeType()); $definition = $this->itemDefinitions->get($type); // Deserialize item type data $type = $definition->deserializeQuestion($data, $question->getInteraction(), $options); $type->setQuestion($question); if (in_array(Transfer::REFRESH_UUID, $options)) { $definition->refreshIdentifiers($question->getInteraction()); } }\n\n    ### Response: Deserializes Item data specific to its type.\nForwards the serialization to the correct handler.\n\n@param Item  $question\n@param array $data\n@param array $options.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SuppressWarnings(\"unchecked\") public static <T> T proxyOf(final T target, final Class<? extends Aspect> aspectClass) { final Aspect aspect; try { aspect = ClassUtil.newInstance(aspectClass, target); } catch (Exception e) { throw new IllegalArgumentException(\"Can't create new instance of aspect class\", e); } return (T) newProxyInstance(target.getClass().getClassLoader(), aspect, target.getClass().getInterfaces()); }\n\n    ### Response:",
        "ground_truth": "Creates a proxy of given target and the aspect.",
        "predict": " Deserializes Item data specific to its type.\nForwards the serialization to the correct handler.\n\n@param Item  $question\n@param array $data\n@param array $options.\n\n    "
    },
    {
        "ID": 1355,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function to($authority) { $authorities = is_array($authority) ? $authority : [$authority]; $roles = Models::role()->findOrCreateRoles($this->roles); foreach (Helpers::mapAuthorityByClass($authorities) as $class => $ids) { $this->assignRoles($roles, $class, new Collection($ids)); } return true; }\n\n    ### Response: Assign the roles to the given authority.\n\n@param  \\Illuminate\\Database\\Eloquent\\Model|array|int  $authority\n@return bool.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static <T> Collection<T> collectionOf(final Iterator<? extends T> iterator) { final List<T> list = new ArrayList<>(); while (iterator.hasNext()) { list.add(iterator.next()); } return list; }\n\n    ### Response:",
        "ground_truth": "Returns a collection containing all elements of the iterator.",
        "predict": " Assign the roles to the given authority.\n\n@param  \\Illuminate\\Database\\Eloquent\\Model|array|int  $authority\n@return bool.\n\n    "
    },
    {
        "ID": 1356,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _file_exists(path, filename): \"\"\"Checks if the filename exists under the path.\"\"\" return os.path.isfile(os.path.join(path, filename))\n\n    ### Response: Checks if the filename exists under the path..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static <T> Stream<T> streamOf(final Iterator<T> iterator) { return StreamSupport.stream(((Iterable<T>) () -> iterator).spliterator(), false); }\n\n    ### Response:",
        "ground_truth": "Converts iterator to a stream.",
        "predict": " Checks if the filename exists under the path..\n\n    "
    },
    {
        "ID": 1357,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (b BuilderID) SelfLink(project string) string { return model.BuilderIDLink(string(b), project) }\n\n    ### Response: // SelfLink returns LUCI URL of the builder..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public int compare(final T o1, final T o2) { for (Comparator<T> comparator : comparators) { int result = comparator.compare(o1, o2); if (result != 0) { return result; } } return 0; }\n\n    ### Response:",
        "ground_truth": "Compares two objects starting with first comparator; if they are equals\nproceeds to the next comparator and so on.",
        "predict": " // SelfLink returns LUCI URL of the builder..\n\n    "
    },
    {
        "ID": 1358,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function fileGetContents($path) { if (! $this->isFile($path)) return false; return $this->at($path)->content; }\n\n    ### Response: Equivalent to PHP `file_get_contents` function.\n\n@param  string  $path\n@return boolean.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public PetiteConfig setDefaultWiringMode(final WiringMode defaultWiringMode) { if ((defaultWiringMode == null) || (defaultWiringMode == WiringMode.DEFAULT)) { throw new PetiteException(\"Invalid default wiring mode: \" + defaultWiringMode); } this.defaultWiringMode = defaultWiringMode; return this; }\n\n    ### Response:",
        "ground_truth": "Specifies default wiring mode.",
        "predict": " Equivalent to PHP `file_get_contents` function.\n\n@param  string  $path\n@return boolean.\n\n    "
    },
    {
        "ID": 1359,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def init_logging(logfile=None, loglevel=logging.INFO, configfile=None): \"\"\" Configures the logging using either basic filename + loglevel or passed config file path. This is performed separately from L{init_config()} in order to support the case where logging should happen independent of (usu. *after*) other aspects of the configuration initialization. For example, if logging may need to be initialized within a daemon context. @param logfile: An explicitly specified logfile destination. If this is specified in addition to default logging, a warning will be issued. @type logfile: C{str} @param loglevel: Which level to use when logging to explicitly specified file or stdout. @type loglevel: C{int} @param configfile: The path to a configuration file. This takes precedence over any explicitly specified logfile/loglevel (but a warning will be logged if both are specified). If the file is not specified or does not exist annd no logfile was specified, then the default.cfg configuration file will be used to initialize logging. @type configfile: C{str} \"\"\" # If a config file was specified, we will use that in place of the # explicitly use_configfile = False if configfile and os.path.exists(configfile): testcfg = ConfigParser() read = testcfg.read(configfile) use_configfile = (read and testcfg.has_section('loggers')) if use_configfile: logging.config.fileConfig(configfile) if logfile: msg = \"Config file conflicts with explicitly specified logfile; config file takes precedence.\" logging.warn(msg) else: format = '%(asctime)s [%(threadName)s] %(name)s - %(levelname)s - %(message)s' if logfile: logging.basicConfig( filename=logfile, level=loglevel, format=format) else: logging.basicConfig(level=loglevel, format=format)\n\n    ### Response: Configures the logging using either basic filename + loglevel or passed config file path.\n\n    This is performed separately from L{init_config()} in order to support the case where \n    logging should happen independent of (usu. *after*) other aspects of the configuration \n    initialization. For example, if logging may need to be initialized within a  daemon \n    context.\n\n    @param logfile: An explicitly specified logfile destination.  If this is specified in addition\n                    to default logging, a warning will be issued.\n    @type logfile: C{str}\n\n    @param loglevel: Which level to use when logging to explicitly specified file or stdout.\n    @type loglevel: C{int}\n\n    @param configfile: The path to a configuration file.  This takes precedence over any explicitly\n                        specified logfile/loglevel (but a warning will be logged if both are specified).\n                        If the file is not specified or does not exist annd no logfile was specified, \n                        then the default.cfg configuration file will be used to initialize logging.\n    @type configfile: C{str}.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void print(final Level level, final String message, final Throwable throwable) { if (!isEnabled(level)) { return; } StringBuilder msg = new StringBuilder() .append(slf.getElapsedTime()).append(' ').append('[') .append(level).append(']').append(' ') .append(getCallerClass()).append(' ').append('-') .append(' ').append(message); System.out.println(msg.toString()); if (throwable != null) { throwable.printStackTrace(System.out); } }\n\n    ### Response:",
        "ground_truth": "Prints error message if level is enabled.",
        "predict": " Configures the logging using either basic filename + loglevel or passed config file path.\n\n    This is performed separately from L{init_config()} in order to support the case where \n    logging should happen independent of (usu. *after*) other aspects of the configuration \n    initialization. For example, if logging may need to be initialized within a  daemon \n    context.\n\n    @param logfile: An explicitly specified logfile destination.  If this is specified in addition\n                    to default logging, a warning will be issued.\n    @type logfile: C{str}\n\n    @param loglevel: Which level to use when logging to explicitly specified file or stdout.\n    @type loglevel: C{int}\n\n    @param configfile: The path to a configuration file.  This takes precedence over any explicitly\n                        specified logfile/loglevel (but a warning will be logged if both are specified).\n                        If the file is not specified or does not exist annd no logfile was specified, \n                        then the default.cfg configuration file will be used to initialize logging.\n    @type configfile: C{str}.\n\n    "
    },
    {
        "ID": 1360,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def match_mopfiles(mopfile1, mopfile2): \"\"\" Given an input list of 'real' detections and candidate detections provide a result file that contains the measured values from candidate detections with a flag indicating if they are real or false. @rtype MOPFile @return mopfile2 with a new column containing index of matching entry in mopfile1 \"\"\" pos1 = pos2 = numpy.array([]) if len(mopfile1.data) > 0: X_COL = \"X_{}\".format(mopfile1.header.file_ids[0]) Y_COL = \"Y_{}\".format(mopfile1.header.file_ids[0]) pos1 = numpy.array([mopfile1.data[X_COL].data, mopfile1.data[Y_COL].data]).transpose() if len(mopfile2.data) > 0: X_COL = \"X_{}\".format(mopfile2.header.file_ids[0]) Y_COL = \"Y_{}\".format(mopfile2.header.file_ids[0]) pos2 = numpy.array([mopfile2.data[X_COL].data, mopfile2.data[Y_COL].data]).transpose() # match_idx is an order list. The list is in the order of the first list of positions and each entry # is the index of the matching position from the second list. match_idx1, match_idx2 = util.match_lists(pos1, pos2) mopfile1.data.add_column(Column(data=match_idx1.filled(-1), name=\"real\", length=len(mopfile1.data))) idx = 0 for file_id in mopfile1.header.file_ids: idx += 1 mopfile1.data.add_column(Column(data=[file_id]*len(mopfile1.data), name=\"ID_{}\".format(idx))) return mopfile1\n\n    ### Response: Given an input list of 'real' detections and candidate detections provide a result file that contains\n    the measured values from candidate detections with a flag indicating if they are real or false.\n\n    @rtype MOPFile\n    @return mopfile2 with a new column containing index of matching entry in mopfile1.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected String getCallerClass() { Exception exception = new Exception(); StackTraceElement[] stackTrace = exception.getStackTrace(); for (StackTraceElement stackTraceElement : stackTrace) { String className = stackTraceElement.getClassName(); if (className.equals(SimpleLoggerProvider.class.getName())) { continue; } if (className.equals(SimpleLogger.class.getName())) { continue; } if (className.equals(Logger.class.getName())) { continue; } return shortenClassName(className) + '.' + stackTraceElement.getMethodName() + ':' + stackTraceElement.getLineNumber(); } return \"N/A\"; }\n\n    ### Response:",
        "ground_truth": "Returns called class.",
        "predict": " Given an input list of 'real' detections and candidate detections provide a result file that contains\n    the measured values from candidate detections with a flag indicating if they are real or false.\n\n    @rtype MOPFile\n    @return mopfile2 with a new column containing index of matching entry in mopfile1.\n\n    "
    },
    {
        "ID": 1361,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (db *DB) NodeSeq(id ID) uint64 { return db.fetchUint64(nodeItemKey(id, zeroIP, dbNodeSeq)) }\n\n    ### Response: // NodeSeq returns the stored record sequence number of the given node..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected String shortenClassName(final String className) { int lastDotIndex = className.lastIndexOf('.'); if (lastDotIndex == -1) { return className; } StringBuilder shortClassName = new StringBuilder(className.length()); int start = 0; while(true) { shortClassName.append(className.charAt(start)); int next = className.indexOf('.', start); if (next == lastDotIndex) { break; } start = next + 1; shortClassName.append('.'); } shortClassName.append(className.substring(lastDotIndex)); return shortClassName.toString(); }\n\n    ### Response:",
        "ground_truth": "Returns shorten class name.",
        "predict": " // NodeSeq returns the stored record sequence number of the given node..\n\n    "
    },
    {
        "ID": 1362,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private function getCreateChangeSetHandler() { return function ($key, $value, $obj) { if (null !== $value) { $obj[$key] = $value; } return $obj; }; }\n\n    ### Response: Gets the change set handler Closure for create.\n\n@return  Closure.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public JsonSerializer excludeTypes(final Class... types) { if (excludedTypes == null) { excludedTypes = types; } else { excludedTypes = ArraysUtil.join(excludedTypes, types); } return this; }\n\n    ### Response:",
        "ground_truth": "Excludes types. Supports interfaces and subclasses as well.",
        "predict": " Gets the change set handler Closure for create.\n\n@return  Closure.\n\n    "
    },
    {
        "ID": 1363,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (s *LoadBalancerDescription) SetCanonicalHostedZoneName(v string) *LoadBalancerDescription { s.CanonicalHostedZoneName = &v return s }\n\n    ### Response: // SetCanonicalHostedZoneName sets the CanonicalHostedZoneName field's value..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void serialize(final Object source, final Appendable target) { JsonContext jsonContext = createJsonContext(target); jsonContext.serialize(source); }\n\n    ### Response:",
        "ground_truth": "Serializes object into provided appendable.",
        "predict": " // SetCanonicalHostedZoneName sets the CanonicalHostedZoneName field's value..\n\n    "
    },
    {
        "ID": 1364,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func getFailedEdge(route *route.Route, errSource route.Vertex) ( *EdgeLocator, error) { hopCount := len(route.Hops) fromNode := route.SourcePubKey for i, hop := range route.Hops { toNode := hop.PubKeyBytes // Determine if we have a failure from the final hop. // // TODO(joostjager): In this case, certain types of errors are // not expected. For example FailUnknownNextPeer. This could be // a reason to prune the node? finalHopFailing := i == hopCount-1 && errSource == toNode // As this error indicates that the target channel was unable to // carry this HTLC (for w/e reason), we'll return the _outgoing_ // channel that the source of the error was meant to pass the // HTLC along to. // // If the errSource is the final hop, we assume that the failing // channel is the incoming channel. if errSource == fromNode || finalHopFailing { return newEdgeLocatorByPubkeys( hop.ChannelID, &fromNode, &toNode, ), nil } fromNode = toNode } return nil, fmt.Errorf(\"cannot find error source node in route\") }\n\n    ### Response: // getFailedEdge tries to locate the failing channel given a route and the\n// pubkey of the node that sent the error. It will assume that the error is\n// associated with the outgoing channel of the error node..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String serialize(final Object source) { FastCharBuffer fastCharBuffer = new FastCharBuffer(); serialize(source, fastCharBuffer); return fastCharBuffer.toString(); }\n\n    ### Response:",
        "ground_truth": "Serializes object into source.",
        "predict": " // getFailedEdge tries to locate the failing channel given a route and the\n// pubkey of the node that sent the error. It will assume that the error is\n// associated with the outgoing channel of the error node..\n\n    "
    },
    {
        "ID": 1365,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function collectionModelLoader() { $loader = $this->collectionLoader(); if (!$loader->hasModel()) { $loader->setModel($this->proto()); $pagination = $this->pagination(); if (!empty($pagination)) { $loader->setPagination($pagination); } $orders = $this->orders(); if (!empty($orders)) { $loader->setOrders($orders); } $filters = $this->filters(); if (!empty($filters)) { $loader->setFilters($filters); } } return $loader; }\n\n    ### Response: Retrieve the prepared model collection loader.\n\n@return CollectionLoader.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static <T extends Serializable> T cloneViaSerialization(final T obj) throws IOException, ClassNotFoundException { FastByteArrayOutputStream bos = new FastByteArrayOutputStream(); ObjectOutputStream out = null; ObjectInputStream in = null; Object objCopy = null; try { out = new ObjectOutputStream(bos); out.writeObject(obj); out.flush(); byte[] bytes = bos.toByteArray(); in = new ObjectInputStream(new ByteArrayInputStream(bytes)); objCopy = in.readObject(); } finally { StreamUtil.close(out); StreamUtil.close(in); } return (T) objCopy; }\n\n    ### Response:",
        "ground_truth": "Create object copy using serialization mechanism.",
        "predict": " Retrieve the prepared model collection loader.\n\n@return CollectionLoader.\n\n    "
    },
    {
        "ID": 1366,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function renderPropertiesCode() { $code = ''; foreach ($this->properties as $name => $attributes) { if (!empty($attributes['docComment'])) { $code .= ' ' . $attributes['docComment'] . \"\\n\"; } $code .= ' ' . $attributes['visibility'] . ' $' . $name . ' = ' . $attributes['initialValueCode'] . \";\\n\\n\"; } return $code; }\n\n    ### Response: Renders code for the added class properties\n\n@return string.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void writeObject(final File dest, final Object object) throws IOException { FileOutputStream fos = null; BufferedOutputStream bos = null; ObjectOutputStream oos = null; try { fos = new FileOutputStream(dest); bos = new BufferedOutputStream(fos); oos = new ObjectOutputStream(bos); oos.writeObject(object); } finally { StreamUtil.close(oos); StreamUtil.close(bos); StreamUtil.close(fos); } }\n\n    ### Response:",
        "ground_truth": "Writes serializable object to a file. Existing file will be overwritten.",
        "predict": " Renders code for the added class properties\n\n@return string.\n\n    "
    },
    {
        "ID": 1367,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static function get_handler_class() { global $CFG, $DB; if (PHPUNIT_TEST) { return '\\core\\session\\file'; } else if (!empty($CFG->session_handler_class)) { return $CFG->session_handler_class; } else if (!empty($CFG->dbsessions) and $DB->session_lock_supported()) { return '\\core\\session\\database'; } return '\\core\\session\\file'; }\n\n    ### Response: Get fully qualified name of session handler class.\n\n@return string The name of the handler class.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Object readObject(final File source) throws IOException, ClassNotFoundException { Object result = null; FileInputStream fis = null; BufferedInputStream bis = null; ObjectInputStream ois = null; try { fis = new FileInputStream(source); bis = new BufferedInputStream(fis); ois = new ObjectInputStream(bis); result = ois.readObject(); } finally { StreamUtil.close(ois); StreamUtil.close(bis); StreamUtil.close(fis); } return result; }\n\n    ### Response:",
        "ground_truth": "Reads serialized object from the file.",
        "predict": " Get fully qualified name of session handler class.\n\n@return string The name of the handler class.\n\n    "
    },
    {
        "ID": 1368,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def get_without(self, fragments, use_lookup=None): \"\"\"Return self without the specified fragments. Args: fragments: Either a list of :class:`~chemcoord.Cartesian` or a :class:`~chemcoord.Cartesian`. use_lookup (bool): Use a lookup variable for :meth:`~chemcoord.Cartesian.get_bonds`. The default is specified in ``settings['defaults']['use_lookup']`` Returns: list: List containing :class:`~chemcoord.Cartesian`. \"\"\" if use_lookup is None: use_lookup = settings['defaults']['use_lookup'] if pd.api.types.is_list_like(fragments): for fragment in fragments: try: index_of_all_fragments |= fragment.index except NameError: index_of_all_fragments = fragment.index else: index_of_all_fragments = fragments.index missing_part = self.loc[self.index.difference(index_of_all_fragments)] missing_part = missing_part.fragmentate(use_lookup=use_lookup) return sorted(missing_part, key=len, reverse=True)\n\n    ### Response: Return self without the specified fragments.\n\n        Args:\n            fragments: Either a list of :class:`~chemcoord.Cartesian` or a\n                :class:`~chemcoord.Cartesian`.\n            use_lookup (bool): Use a lookup variable for\n                :meth:`~chemcoord.Cartesian.get_bonds`. The default is\n                specified in ``settings['defaults']['use_lookup']``\n\n        Returns:\n            list: List containing :class:`~chemcoord.Cartesian`..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static byte[] objectToByteArray(final Object obj) throws IOException { FastByteArrayOutputStream bos = new FastByteArrayOutputStream(); ObjectOutputStream oos = null; try { oos = new ObjectOutputStream(bos); oos.writeObject(obj); } finally { StreamUtil.close(oos); } return bos.toByteArray(); }\n\n    ### Response:",
        "ground_truth": "Serialize an object to byte array.",
        "predict": " Return self without the specified fragments.\n\n        Args:\n            fragments: Either a list of :class:`~chemcoord.Cartesian` or a\n                :class:`~chemcoord.Cartesian`.\n            use_lookup (bool): Use a lookup variable for\n                :meth:`~chemcoord.Cartesian.get_bonds`. The default is\n                specified in ``settings['defaults']['use_lookup']``\n\n        Returns:\n            list: List containing :class:`~chemcoord.Cartesian`..\n\n    "
    },
    {
        "ID": 1369,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func medianAdjustedTime(chainState *blockchain.BestState, timeSource blockchain.MedianTimeSource) time.Time { // The timestamp for the block must not be before the median timestamp // of the last several blocks. Thus, choose the maximum between the // current time and one second after the past median time. The current // timestamp is truncated to a second boundary before comparison since a // block timestamp does not supported a precision greater than one // second. newTimestamp := timeSource.AdjustedTime() minTimestamp := MinimumMedianTime(chainState) if newTimestamp.Before(minTimestamp) { newTimestamp = minTimestamp } return newTimestamp }\n\n    ### Response: // medianAdjustedTime returns the current time adjusted to ensure it is at least\n// one second after the median timestamp of the last several blocks per the\n// chain consensus rules..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Object byteArrayToObject(final byte[] data) throws IOException, ClassNotFoundException { Object retObj = null; ByteArrayInputStream bais = new ByteArrayInputStream(data); ObjectInputStream ois = null; try { ois = new ObjectInputStream(bais); retObj = ois.readObject(); } finally { StreamUtil.close(ois); } return retObj; }\n\n    ### Response:",
        "ground_truth": "De-serialize an object from byte array.",
        "predict": " // medianAdjustedTime returns the current time adjusted to ensure it is at least\n// one second after the median timestamp of the last several blocks per the\n// chain consensus rules..\n\n    "
    },
    {
        "ID": 1370,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public HttpResponse replaceHeader(String name, String... values) { this.headers.replaceEntry(name, values); return this; }\n\n    ### Response: Update header to return as a Header object, if a header with\nthe same name already exists it will be modified\n\n@param name   the header name\n@param values the header values.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected String[][] resolveMappedTypesTableNames(final Class[] types) { if (cachedMappedNames == null) { String[][] names = new String[types.length][]; for (int i = 0; i < types.length; i++) { Class type = types[i]; if (type != null) { DbEntityDescriptor ded = cachedDbEntityDescriptors[i]; if (ded != null) { Class[] mappedTypes = ded.getMappedTypes(); if (mappedTypes != null) { names[i] = createTypesTableNames(mappedTypes); } } } } cachedMappedNames = names; } return cachedMappedNames; }\n\n    ### Response:",
        "ground_truth": "Resolved mapped type names for each type.",
        "predict": " Update header to return as a Header object, if a header with\nthe same name already exists it will be modified\n\n@param name   the header name\n@param values the header values.\n\n    "
    },
    {
        "ID": 1371,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function reduceLogicalOr(Node $node, $inGroup = false) { if ($this->stack->count() <= 1 || !$this->isTopStackToken(Tokenizer::TOKEN_LOGICAL_OR)) { return $node; } // If inside a group don't look for following logical AND if (!$inGroup) { $this->popWhitespace(); // If the next token is logical AND, put the node on stack // as that has precedence over logical OR if ($this->isToken(reset($this->tokens), Tokenizer::TOKEN_LOGICAL_AND)) { $this->stack->push($node); return null; } } $token = $this->stack->pop(); $leftOperand = $this->stack->pop(); return new LogicalOr($leftOperand, $node, $token); }\n\n    ### Response: Reduce logical OR.\n\n@param \\QueryTranslator\\Values\\Node $node\n@param bool $inGroup Reduce inside a group\n\n@return null|\\QueryTranslator\\Languages\\Galach\\Values\\Node\\LogicalOr|\\QueryTranslator\\Values\\Node.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected String[] createTypesTableNames(final Class[] types) { String[] names = new String[types.length]; for (int i = 0; i < types.length; i++) { if (types[i] == null) { names[i] = null; continue; } DbEntityDescriptor ded = dbEntityManager.lookupType(types[i]); if (ded != null) { String tableName = ded.getTableName(); tableName = tableName.toUpperCase(); names[i] = tableName; } } return names; }\n\n    ### Response:",
        "ground_truth": "Creates table names for given types.",
        "predict": " Reduce logical OR.\n\n@param \\QueryTranslator\\Values\\Node $node\n@param bool $inGroup Reduce inside a group\n\n@return null|\\QueryTranslator\\Languages\\Galach\\Values\\Node\\LogicalOr|\\QueryTranslator\\Values\\Node.\n\n    "
    },
    {
        "ID": 1372,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function assignAfter($instance, $route, $request, $method) { foreach ($instance->getAfterFilters() as $filter) { // If the filter applies, we will add it to the route, since it has already been // registered on the filterer by the controller, and will just let the normal // router take care of calling these filters so we do not duplicate logics. if ($this->filterApplies($filter, $request, $method)) { $route->after($this->getAssignableAfter($filter)); } } }\n\n    ### Response: Apply the applicable after filters to the route.\n\n@param  \\Fly\\Routing\\Controller  $instance\n@param  \\Fly\\Routing\\Route  $route\n@param  \\Fly\\Http\\Request  $request\n@param  string  $method\n@return mixed.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SuppressWarnings({\"unchecked\"}) protected Object readColumnValue(final int colNdx, final Class destinationType, final Class<? extends SqlType> sqlTypeClass, final int columnDbSqlType) { if (colNdx != cachedColumnNdx) { try { SqlType sqlType; if (sqlTypeClass != null) { sqlType = SqlTypeManager.get().lookupSqlType(sqlTypeClass); } else { sqlType = SqlTypeManager.get().lookup(destinationType); } if (sqlType != null) { cachedColumnValue = sqlType.readValue(resultSet, colNdx + 1, destinationType, columnDbSqlType); } else { cachedColumnValue = resultSet.getObject(colNdx + 1); cachedColumnValue = TypeConverterManager.get().convertType(cachedColumnValue, destinationType); } } catch (SQLException sex) { throw new DbOomException(dbOomQuery, \"Invalid value for column #\" + (colNdx + 1), sex); } cachedColumnNdx = colNdx; } return cachedColumnValue; }\n\n    ### Response:",
        "ground_truth": "Reads column value from result set. Since this method may be called more then once for\nthe same column, it caches column values.",
        "predict": " Apply the applicable after filters to the route.\n\n@param  \\Fly\\Routing\\Controller  $instance\n@param  \\Fly\\Routing\\Route  $route\n@param  \\Fly\\Http\\Request  $request\n@param  string  $method\n@return mixed.\n\n    "
    },
    {
        "ID": 1373,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def tmatrix_sampler(C, reversible=False, mu=None, T0=None, nsteps=None, prior='sparse'): r\"\"\"Generate transition matrix sampler object. Parameters ---------- C : (M, M) ndarray or scipy.sparse matrix Count matrix reversible : bool If true sample from the ensemble of transition matrices restricted to those obeying a detailed balance condition, else draw from the whole ensemble of stochastic matrices. mu : array_like A fixed stationary distribution. Transition matrices with that stationary distribution will be sampled T0 : ndarray, shape=(n, n) or scipy.sparse matrix Starting point of the MC chain of the sampling algorithm. Has to obey the required constraints. nstep : int, default=None number of full Gibbs sampling sweeps per sample. This option is meant to ensure approximately uncorrelated samples for every call to sample(). If None, the number of steps will be automatically determined based on the other options and the matrix size. nstep>1 will only be used for reversible sampling, because nonreversible sampling generates statistically independent transition matrices every step. Returns ------- sampler : A :py:class:dense.tmatrix_sampler.TransitionMatrixSampler object that can be used to generate samples. Notes ----- The transition matrix sampler generates transition matrices from the posterior distribution. The posterior distribution is given as a product of Dirichlet distributions .. math:: \\mathbb{P}(T|C) \\propto \\prod_{i=1}^{M} \\left( \\prod_{j=1}^{M} p_{ij}^{c_{ij}} \\right) The method can generate samples from the posterior under the following constraints **Reversible sampling** Using a MCMC sampler outlined in .. [1] it is ensured that samples from the posterior are reversible, i.e. there is a probability vector :math:`(\\mu_i)` such that :math:`\\mu_i t_{ij} = \\mu_j t_{ji}` holds for all :math:`i,j`. **Reversible sampling with fixed stationary vector** Using a MCMC sampler outlined in .. [2] it is ensured that samples from the posterior fulfill detailed balance with respect to a given probability vector :math:`(\\mu_i)`. References ---------- .. [1] Noe, F. Probability distributions of molecular observables computed from Markov state models. J Chem Phys 128: 244103 (2008) .. [2] Trendelkamp-Schroer, B., H. Wu, F. Paul and F. Noe: Estimation and uncertainty of reversible Markov models. J. Chem. Phys. (submitted) \"\"\" if issparse(C): _showSparseConversionWarning() C = C.toarray() from .dense.tmatrix_sampler import TransitionMatrixSampler sampler = TransitionMatrixSampler(C, reversible=reversible, mu=mu, P0=T0, nsteps=nsteps, prior=prior) return sampler\n\n    ### Response: r\"\"\"Generate transition matrix sampler object.\n\n    Parameters\n    ----------\n    C : (M, M) ndarray or scipy.sparse matrix\n        Count matrix\n    reversible : bool\n        If true sample from the ensemble of transition matrices\n        restricted to those obeying a detailed balance condition,\n        else draw from the whole ensemble of stochastic matrices.\n    mu : array_like\n        A fixed stationary distribution. Transition matrices with that\n        stationary distribution will be sampled\n    T0 : ndarray, shape=(n, n) or scipy.sparse matrix\n        Starting point of the MC chain of the sampling algorithm.\n        Has to obey the required constraints.\n    nstep : int, default=None\n        number of full Gibbs sampling sweeps per sample. This option is meant\n        to ensure approximately uncorrelated samples for every call to\n        sample(). If None, the number of steps will be automatically determined\n        based on the other options and  the matrix size. nstep>1 will only be\n        used for reversible sampling, because nonreversible sampling generates\n        statistically independent transition matrices every step.\n\n    Returns\n    -------\n    sampler : A :py:class:dense.tmatrix_sampler.TransitionMatrixSampler object that can be used to generate samples.\n\n    Notes\n    -----\n    The transition matrix sampler generates transition matrices from\n    the posterior distribution. The posterior distribution is given as\n    a product of Dirichlet distributions\n\n    .. math:: \\mathbb{P}(T|C) \\propto \\prod_{i=1}^{M} \\left( \\prod_{j=1}^{M} p_{ij}^{c_{ij}} \\right)\n\n    The method can generate samples from the posterior under the following constraints\n\n    **Reversible sampling**\n\n    Using a MCMC sampler outlined in .. [1] it is ensured that samples\n    from the posterior are reversible, i.e. there is a probability\n    vector :math:`(\\mu_i)` such that :math:`\\mu_i t_{ij} = \\mu_j\n    t_{ji}` holds for all :math:`i,j`.\n\n    **Reversible sampling with fixed stationary vector**\n\n    Using a MCMC sampler outlined in .. [2] it is ensured that samples\n    from the posterior fulfill detailed balance with respect to a given\n    probability vector :math:`(\\mu_i)`.\n\n    References\n    ----------\n    .. [1] Noe, F. Probability distributions of molecular observables\n        computed from Markov state models. J Chem Phys 128: 244103 (2008)\n\n    .. [2] Trendelkamp-Schroer, B., H. Wu, F. Paul and F. Noe: Estimation and\n        uncertainty of reversible Markov models. J. Chem. Phys. (submitted).\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void cacheResultSetEntities(final Object[] result) { if (entitiesCache == null) { entitiesCache = new HashMap<>(); } for (int i = 0; i < result.length; i++) { Object object = result[i]; if (object == null) { continue; } DbEntityDescriptor ded = cachedDbEntityDescriptors[i]; if (ded == null) { // not a type, continue continue; } // calculate key Object key; if (ded.hasIdColumn()) { //noinspection unchecked key = ded.getKeyValue(object); } else { key = object; } Object cachedObject = entitiesCache.get(key); if (cachedObject == null) { // object is not in the cache, add it entitiesCache.put(key, object); } else { // object is in the cache, replace it result[i] = cachedObject; } } }\n\n    ### Response:",
        "ground_truth": "Caches returned entities. Replaces new instances with existing ones.",
        "predict": " r\"\"\"Generate transition matrix sampler object.\n\n    Parameters\n    ----------\n    C : (M, M) ndarray or scipy.sparse matrix\n        Count matrix\n    reversible : bool\n        If true sample from the ensemble of transition matrices\n        restricted to those obeying a detailed balance condition,\n        else draw from the whole ensemble of stochastic matrices.\n    mu : array_like\n        A fixed stationary distribution. Transition matrices with that\n        stationary distribution will be sampled\n    T0 : ndarray, shape=(n, n) or scipy.sparse matrix\n        Starting point of the MC chain of the sampling algorithm.\n        Has to obey the required constraints.\n    nstep : int, default=None\n        number of full Gibbs sampling sweeps per sample. This option is meant\n        to ensure approximately uncorrelated samples for every call to\n        sample(). If None, the number of steps will be automatically determined\n        based on the other options and  the matrix size. nstep>1 will only be\n        used for reversible sampling, because nonreversible sampling generates\n        statistically independent transition matrices every step.\n\n    Returns\n    -------\n    sampler : A :py:class:dense.tmatrix_sampler.TransitionMatrixSampler object that can be used to generate samples.\n\n    Notes\n    -----\n    The transition matrix sampler generates transition matrices from\n    the posterior distribution. The posterior distribution is given as\n    a product of Dirichlet distributions\n\n    .. math:: \\mathbb{P}(T|C) \\propto \\prod_{i=1}^{M} \\left( \\prod_{j=1}^{M} p_{ij}^{c_{ij}} \\right)\n\n    The method can generate samples from the posterior under the following constraints\n\n    **Reversible sampling**\n\n    Using a MCMC sampler outlined in .. [1] it is ensured that samples\n    from the posterior are reversible, i.e. there is a probability\n    vector :math:`(\\mu_i)` such that :math:`\\mu_i t_{ij} = \\mu_j\n    t_{ji}` holds for all :math:`i,j`.\n\n    **Reversible sampling with fixed stationary vector**\n\n    Using a MCMC sampler outlined in .. [2] it is ensured that samples\n    from the posterior fulfill detailed balance with respect to a given\n    probability vector :math:`(\\mu_i)`.\n\n    References\n    ----------\n    .. [1] Noe, F. Probability distributions of molecular observables\n        computed from Markov state models. J Chem Phys 128: 244103 (2008)\n\n    .. [2] Trendelkamp-Schroer, B., H. Wu, F. Paul and F. Noe: Estimation and\n        uncertainty of reversible Markov models. J. Chem. Phys. (submitted).\n\n    "
    },
    {
        "ID": 1374,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void setCustomOffColor(final CustomColorDef CUSTOM_OFF_COLOR) { customOffColor = CUSTOM_OFF_COLOR; init(getInnerBounds().width, getInnerBounds().height); repaint(getInnerBounds()); }\n\n    ### Response: Sets the custom color definition that is used to visualize the off state of the symbol\n@param CUSTOM_OFF_COLOR.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public ProviderDefinition[] resolve(final Class type, final String name) { ClassDescriptor cd = ClassIntrospector.get().lookup(type); MethodDescriptor[] methods = cd.getAllMethodDescriptors(); List<ProviderDefinition> list = new ArrayList<>(); for (MethodDescriptor methodDescriptor : methods) { Method method = methodDescriptor.getMethod(); PetiteProvider petiteProvider = method.getAnnotation(PetiteProvider.class); if (petiteProvider == null) { continue; } String providerName = petiteProvider.value(); if (StringUtil.isBlank(providerName)) { // default provider name providerName = method.getName(); if (providerName.endsWith(\"Provider\")) { providerName = StringUtil.substring(providerName, 0, -8); } } ProviderDefinition providerDefinition; if (Modifier.isStatic(method.getModifiers())) { providerDefinition = new ProviderDefinition(providerName, method); } else { providerDefinition = new ProviderDefinition(providerName, name, method); } list.add(providerDefinition); } ProviderDefinition[] providers; if (list.isEmpty()) { providers = ProviderDefinition.EMPTY; } else { providers = list.toArray(new ProviderDefinition[0]); } return providers; }\n\n    ### Response:",
        "ground_truth": "Resolves all providers in the class",
        "predict": " Sets the custom color definition that is used to visualize the off state of the symbol\n@param CUSTOM_OFF_COLOR.\n\n    "
    },
    {
        "ID": 1375,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected BufferedImage create_BACKGROUND_Image(final int WIDTH, final int HEIGHT, BufferedImage image) { if (WIDTH <= 0 || HEIGHT <= 0) { return UTIL.createImage(1, 1, Transparency.TRANSLUCENT); } if (image == null) { image = UTIL.createImage(WIDTH, HEIGHT, Transparency.TRANSLUCENT); } final Graphics2D G2 = image.createGraphics(); G2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON); G2.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL, RenderingHints.VALUE_STROKE_NORMALIZE); final int IMAGE_WIDTH = image.getWidth(); final int IMAGE_HEIGHT = image.getHeight(); // Draw the background image BACKGROUND_FACTORY.createLinearBackground(WIDTH, HEIGHT, getBackgroundColor(), getModel().getCustomBackground(), getModel().getTextureColor(), image); // Draw the custom layer if selected if (isCustomLayerVisible()) { G2.drawImage(UTIL.getScaledInstance(getCustomLayer(), IMAGE_WIDTH, IMAGE_HEIGHT, RenderingHints.VALUE_INTERPOLATION_BICUBIC), 0, 0, null); } G2.dispose(); return image; }\n\n    ### Response: Returns the background image with the currently active backgroundcolor\nwith the given width and height.\n@param WIDTH\n@param HEIGHT\n@param image\n@return buffered image containing the background with the selected background design.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String applyToTableName(final String tableName) { String entityName = convertTableNameToEntityName(tableName); return convertEntityNameToTableName(entityName); }\n\n    ### Response:",
        "ground_truth": "Applies table naming strategy to given table name hint.\nReturns full table name.",
        "predict": " Returns the background image with the currently active backgroundcolor\nwith the given width and height.\n@param WIDTH\n@param HEIGHT\n@param image\n@return buffered image containing the background with the selected background design.\n\n    "
    },
    {
        "ID": 1376,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func createMcConfigDir() *probe.Error { p, err := getMcConfigDir() if err != nil { return err.Trace() } if e := os.MkdirAll(p, 0700); e != nil { return probe.NewError(e) } return nil }\n\n    ### Response: // createMcConfigDir - create MinIO Client config folder.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private boolean isConnectionValid(final ConnectionData connectionData, final long now) { if (!validateConnection) { return true; } if (now < connectionData.lastUsed + validationTimeout) { return true; } Connection conn = connectionData.connection; if (validationQuery == null) { try { return !conn.isClosed(); } catch (SQLException sex) { return false; } } boolean valid = true; Statement st = null; try { st = conn.createStatement(); st.execute(validationQuery); } catch (SQLException sex) { valid = false; } finally { if (st != null) { try { st.close(); } catch (SQLException ignore) { } } } return valid; }\n\n    ### Response:",
        "ground_truth": "Checks if existing connection is valid and available. It may happens\nthat if connection is not used for a while it becomes inactive,\nalthough not technically closed.",
        "predict": " // createMcConfigDir - create MinIO Client config folder.\n\n    "
    },
    {
        "ID": 1377,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def get_migrations_to_down(self, migration_id): \"\"\"Find migrations to rollback.\"\"\" migration_id = MigrationFile.validate_id(migration_id) if not migration_id: return [] migrations = self.get_migration_files() last_migration_id = self.get_last_migrated_id() if migration_id in (m.id for m in self.get_unregistered_migrations()): logger.error('Migration is not applied %s' % migration_id) return [] try: migration = [m for m in migrations if m.id == migration_id][0] except IndexError: logger.error('Migration does not exists %s' % migration_id) return [] return list(reversed([m for m in migrations if migration.id <= m.id <= last_migration_id]))\n\n    ### Response: Find migrations to rollback..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override protected void renderView(final ActionRequest actionRequest, final String target) throws Exception { HttpServletRequest request = actionRequest.getHttpServletRequest(); HttpServletResponse response = actionRequest.getHttpServletResponse(); RequestDispatcher dispatcher = request.getRequestDispatcher(target); if (dispatcher == null) { response.sendError(SC_NOT_FOUND, \"Result not found: \" + target); // should never happened return; } // If we're included, then include the view, otherwise do forward. // This allow the page to, for example, set content type. if (DispatcherUtil.isPageIncluded(request, response)) { dispatcher.include(request, response); } else { dispatcher.forward(request, response); } }\n\n    ### Response:",
        "ground_truth": "Renders the view by dispatching to the target JSP.",
        "predict": " Find migrations to rollback..\n\n    "
    },
    {
        "ID": 1378,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function getRelatedFieldValue(string $field, string $value): array { $table = TableRegistry::get($this->searchFields[$field]['source']); // avoid infinite recursion if ($this->table->getAlias() === $table->getAlias()) { return []; } $search = new Search($table, $this->user); $basicSearch = new BasicSearch($table, $this->user); $criteria = $basicSearch->getCriteria($value); if (empty($criteria)) { return []; } $data = [ 'aggregator' => 'OR', 'criteria' => $criteria ]; $resultSet = $search->execute($data)->all(); if ($resultSet->isEmpty()) { return []; } $result = []; foreach ($resultSet as $entity) { $result[] = $entity->id; } return [ 'type' => $this->searchFields[$field]['type'], 'operator' => key($this->searchFields[$field]['operators']), 'value' => $result ]; }\n\n    ### Response: Gets basic search values from Related module.\n\nThis method is useful when you do a basic search on a related field,\nin which the values are always uuid's. What this method will do is\nrun a search in the related module (recursively) to fetch and\nreturn the entities IDs matching the search string.\n\n@param string $field Field name\n@param string $value Search query value\n@return mixed[].\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override protected String locateTarget(final ActionRequest actionRequest, String path) { String target; if (path.endsWith(StringPool.SLASH)) { path = path + defaultViewPageName; } for (final String ext : defaultViewExtensions) { target = path + ext; if (targetExists(actionRequest, target)) { return target; } } return null; }\n\n    ### Response:",
        "ground_truth": "Locates target using path with various extensions appended.",
        "predict": " Gets basic search values from Related module.\n\nThis method is useful when you do a basic search on a related field,\nin which the values are always uuid's. What this method will do is\nrun a search in the related module (recursively) to fetch and\nreturn the entities IDs matching the search string.\n\n@param string $field Field name\n@param string $value Search query value\n@return mixed[].\n\n    "
    },
    {
        "ID": 1379,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (c Conversation) Integer(name string) (int, error) { return c.match.Integer(name) }\n\n    ### Response: // Integer returns integer parameter.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public PrintWriter getWriter() throws IOException { preResponseCommit(); if (buffer == null) { return getResponse().getWriter(); } return buffer.getWriter(); }\n\n    ### Response:",
        "ground_truth": "Returns buffered writer if buffering is enabled,\notherwise returns the original writer.",
        "predict": " // Integer returns integer parameter.\n\n    "
    },
    {
        "ID": 1380,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected User safeGetRecipient(MessageEnvelope envelope) { if (envelope != null && envelope.getRecipient() != null && envelope.getRecipient().getId() != null) { return envelope.getRecipient(); } return new User(); }\n\n    ### Response: Retrieves the recipient from an envelope. It never returns null.\n\n@param envelope\nthe message envelope.\n@return a {@link User} containing the recipient if found, empty\notherwise. It never returns null..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public ServletOutputStream getOutputStream() throws IOException { preResponseCommit(); if (buffer == null) { return getResponse().getOutputStream(); } return buffer.getOutputStream(); }\n\n    ### Response:",
        "ground_truth": "Returns buffered output stream if buffering is enabled,\notherwise returns the original stream.",
        "predict": " Retrieves the recipient from an envelope. It never returns null.\n\n@param envelope\nthe message envelope.\n@return a {@link User} containing the recipient if found, empty\notherwise. It never returns null..\n\n    "
    },
    {
        "ID": 1381,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def find_all(short, options = {}) return to_enum(:find_all, short, options) unless block_given? short = ::Pathname.new(short) options = DEFAULT_FIND_OPTIONS.merge(options) @paths.reverse.each do |path| joined = path_join(path, short, options) yield joined if (options[:file] && joined.file?) || joined.exist? end nil end\n\n    ### Response: Finds all versions of the short path name in the paths in the path\n sets.  If no block is given, it returns an enumerable; otherwise, if\n a block is given, it yields the joined path if it exists.\n\n @raise NoFileError If no file could be found.\n @param short [::String, ::Pathname] The \"short\" path to resolve.\n @param options [{::Symbol => ::Object}] The options for finding.\n @option options [Boolean] :allow_absolute (false)\n @option options [Boolean] :file (true) Whether or not the full path\n   must be a file for it to be considered existant.  This should be set\n   to true, because in most cases, it's the desired behavior.\n @yield [path] For every file that exists.\n @yieldparam path [::Pathname] The path to the file.  This is guarenteed\n   to exist.\n @return [void].\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void writeContentToResponse(final char[] content) throws IOException { if (buffer == null) { return; } if (buffer.isUsingStream()) { ServletOutputStream outputStream = getResponse().getOutputStream(); String encoding = getContentTypeEncoding(); if (encoding == null) { outputStream.write(CharUtil.toByteArray(content)); } else { outputStream.write(CharUtil.toByteArray(content, encoding)); } outputStream.flush(); } else { Writer out = getResponse().getWriter(); out.write(content); out.flush(); } }\n\n    ### Response:",
        "ground_truth": "Writes content to original output stream, using either output stream or writer, depending\non how the content was buffered. It is assumed that provided content is a modified\nwrapped content.",
        "predict": " Finds all versions of the short path name in the paths in the path\n sets.  If no block is given, it returns an enumerable; otherwise, if\n a block is given, it yields the joined path if it exists.\n\n @raise NoFileError If no file could be found.\n @param short [::String, ::Pathname] The \"short\" path to resolve.\n @param options [{::Symbol => ::Object}] The options for finding.\n @option options [Boolean] :allow_absolute (false)\n @option options [Boolean] :file (true) Whether or not the full path\n   must be a file for it to be considered existant.  This should be set\n   to true, because in most cases, it's the desired behavior.\n @yield [path] For every file that exists.\n @yieldparam path [::Pathname] The path to the file.  This is guarenteed\n   to exist.\n @return [void].\n\n    "
    },
    {
        "ID": 1382,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def draw_actions(self): \"\"\"Draw the actions so that they can be inspected for accuracy.\"\"\" now = time.time() for act in self._past_actions: if act.pos and now < act.deadline: remain = (act.deadline - now) / (act.deadline - act.time) if isinstance(act.pos, point.Point): size = remain / 3 self.all_surfs(_Surface.draw_circle, act.color, act.pos, size, 1) else: # Fade with alpha would be nice, but doesn't seem to work. self.all_surfs(_Surface.draw_rect, act.color, act.pos, 1)\n\n    ### Response: Draw the actions so that they can be inspected for accuracy..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public void setContentType(final String type) { super.setContentType(type); contentTypeResolver = new ContentTypeHeaderResolver(type); if (bufferContentType(type, contentTypeResolver.getMimeType(), contentTypeResolver.getEncoding())) { enableBuffering(); } else { disableBuffering(); } }\n\n    ### Response:",
        "ground_truth": "Sets the content type and enables or disables buffering.",
        "predict": " Draw the actions so that they can be inspected for accuracy..\n\n    "
    },
    {
        "ID": 1383,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func fetchOffers(st Backend, applications map[string]*state.Application) (map[string]offerStatus, error) { offersMap := make(map[string]offerStatus) offers, err := st.AllApplicationOffers() if err != nil { return nil, err } for _, offer := range offers { offerInfo := offerStatus{ ApplicationOffer: crossmodel.ApplicationOffer{ OfferName: offer.OfferName, OfferUUID: offer.OfferUUID, ApplicationName: offer.ApplicationName, Endpoints: offer.Endpoints, }, } app, ok := applications[offer.ApplicationName] if !ok { continue } curl, _ := app.CharmURL() offerInfo.charmURL = curl.String() rc, err := st.RemoteConnectionStatus(offer.OfferUUID) if err != nil && !errors.IsNotFound(err) { offerInfo.err = err continue } else if err == nil { offerInfo.totalConnectedCount = rc.TotalConnectionCount() offerInfo.activeConnectedCount = rc.ActiveConnectionCount() } offersMap[offer.OfferName] = offerInfo } return offersMap, nil }\n\n    ### Response: // fetchOfferConnections returns a map from relation id to offer connection..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void print(final String string) throws IOException { if (isBufferStreamBased()) { String encoding = getContentTypeEncoding(); byte[] bytes; if (encoding == null) { bytes = string.getBytes(); } else { bytes = string.getBytes(encoding); } buffer.getOutputStream().write(bytes); return; } // make sure at least writer is initialized buffer.getWriter().write(string); }\n\n    ### Response:",
        "ground_truth": "Appends string to the buffer.",
        "predict": " // fetchOfferConnections returns a map from relation id to offer connection..\n\n    "
    },
    {
        "ID": 1384,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function rulesets($ruleSetFileNames) { if (!is_array($ruleSetFileNames)) { $ruleSetFileNames = [$ruleSetFileNames]; } $this->rulesets = array_unique(array_merge($this->rulesets, $ruleSetFileNames)); return $this; }\n\n    ### Response: Sets the rule-sets.\n\n@param array|string $ruleSetFileNames\nArray of rule-set filenames or identifiers.\n\n@return $this.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected JsonResult login() { T authToken; authToken = loginViaBasicAuth(servletRequest); if (authToken == null) { authToken = loginViaRequestParams(servletRequest); } if (authToken == null) { log.warn(\"Login failed.\"); return JsonResult.of(HttpStatus.error401().unauthorized(\"Login failed.\")); } log.info(\"login OK!\"); final UserSession<T> userSession = new UserSession<>(authToken, userAuth.tokenValue(authToken)); userSession.start(servletRequest, servletResponse); // return token return tokenAsJson(authToken); }\n\n    ### Response:",
        "ground_truth": "Authenticate user and start user session.",
        "predict": " Sets the rule-sets.\n\n@param array|string $ruleSetFileNames\nArray of rule-set filenames or identifiers.\n\n@return $this.\n\n    "
    },
    {
        "ID": 1385,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function bind($properties, $updateNulls = true) { // Check the properties data type. if (!\\is_array($properties) && !\\is_object($properties)) { throw new \\InvalidArgumentException(sprintf('%s(%s)', __METHOD__, \\gettype($properties))); } // Check if the object is traversable. if ($properties instanceof \\Traversable) { // Convert iterator to array. $properties = iterator_to_array($properties); } elseif (\\is_object($properties)) { // Convert properties to an array. $properties = (array) $properties; } // Bind the properties. foreach ($properties as $property => $value) { // Check if the value is null and should be bound. if ($value === null && !$updateNulls) { continue; } // Set the property. $this->setProperty($property, $value); } return $this; }\n\n    ### Response: Binds an array or object to this object.\n\n@param   mixed    $properties   An associative array of properties or an object.\n@param   boolean  $updateNulls  True to bind null values, false to ignore null values.\n\n@return  DataObject  Returns itself to allow chaining.\n\n@since   1.0\n@throws  \\InvalidArgumentException.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected JsonResult tokenAsJson(final T authToken) { final JsonObject jsonObject = new JsonObject(); jsonObject.put(\"token\", userAuth.tokenValue(authToken)); return JsonResult.of(jsonObject); }\n\n    ### Response:",
        "ground_truth": "Prepares the JSON payload that carries on the token value.",
        "predict": " Binds an array or object to this object.\n\n@param   mixed    $properties   An associative array of properties or an object.\n@param   boolean  $updateNulls  True to bind null values, false to ignore null values.\n\n@return  DataObject  Returns itself to allow chaining.\n\n@since   1.0\n@throws  \\InvalidArgumentException.\n\n    "
    },
    {
        "ID": 1386,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (b *Bucket) GetFileInfoByName(name string) (*FileInfo, error) { l := b.ListFiles(name) l.SetPageCount(1) if l.Next() { if l.FileInfo().Name == name { return l.FileInfo(), nil } } if err := l.Err(); err != nil { return nil, l.Err() } return nil, FileNotFoundError }\n\n    ### Response: // GetFileInfoByName obtains a FileInfo for a given name.\n//\n// If the file doesn't exist, FileNotFoundError is returned.\n// If multiple versions of the file exist, only the latest is returned..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected T loginViaBasicAuth(final HttpServletRequest servletRequest) { final String username = ServletUtil.resolveAuthUsername(servletRequest); if (username == null) { return null; } final String password = ServletUtil.resolveAuthPassword(servletRequest); return userAuth.login(username, password); }\n\n    ### Response:",
        "ground_truth": "Tries to login user with basic authentication.",
        "predict": " // GetFileInfoByName obtains a FileInfo for a given name.\n//\n// If the file doesn't exist, FileNotFoundError is returned.\n// If multiple versions of the file exist, only the latest is returned..\n\n    "
    },
    {
        "ID": 1387,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static List<FastaSequence> readFasta(final InputStream inStream) throws IOException { final List<FastaSequence> seqs = new ArrayList<FastaSequence>(); final BufferedReader infasta = new BufferedReader( new InputStreamReader(inStream, \"UTF8\"), 16000); final Pattern pattern = Pattern.compile(\"//s+\"); String line; String sname = \"\", seqstr = null; do { line = infasta.readLine(); if ((line == null) || line.startsWith(\">\")) { if (seqstr != null) { seqs.add(new FastaSequence(sname.substring(1), seqstr)); } sname = line; // remove > seqstr = \"\"; } else { final String subseq = pattern.matcher(line).replaceAll(\"\"); seqstr += subseq; } } while (line != null); infasta.close(); return seqs; }\n\n    ### Response: Reads fasta sequences from inStream into the list of FastaSequence\nobjects\n\n@param inStream\nfrom\n@return list of FastaSequence objects\n@throws IOException.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected JsonResult logout() { log.debug(\"logout user\"); UserSession.stop(servletRequest, servletResponse); return JsonResult.of(HttpStatus.ok()); }\n\n    ### Response:",
        "ground_truth": "Logout hook.",
        "predict": " Reads fasta sequences from inStream into the list of FastaSequence\nobjects\n\n@param inStream\nfrom\n@return list of FastaSequence objects\n@throws IOException.\n\n    "
    },
    {
        "ID": 1388,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function setGapChoices(GapChoiceCollection $gapChoices) { if (count($gapChoices) > 0) { $this->gapChoices = $gapChoices; } else { $msg = \"A GapMatchInteraction object must be composed of at least one GapChoice object, none given.\"; throw new InvalidArgumentException($msg); } }\n\n    ### Response: Set the collection of choices for filling the gaps.\n\n@param \\qtism\\data\\content\\interactions\\GapChoiceCollection $gapChoices A collection of at least one GapChoice object.\n@throws \\InvalidArgumentException If $gapChoices is empty..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static File toContainerFile(final URL url) { String protocol = url.getProtocol(); if (protocol.equals(FILE_PROTOCOL)) { return toFile(url); } String path = url.getPath(); return new File(URI.create( path.substring(ZERO, path.lastIndexOf(\"!/\")))); }\n\n    ### Response:",
        "ground_truth": "Returns a file of either a folder or a containing archive.",
        "predict": " Set the collection of choices for filling the gaps.\n\n@param \\qtism\\data\\content\\interactions\\GapChoiceCollection $gapChoices A collection of at least one GapChoice object.\n@throws \\InvalidArgumentException If $gapChoices is empty..\n\n    "
    },
    {
        "ID": 1389,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _aggregate(self): \"\"\"Helper method to aggregate RemoteTasks into single ssh session.\"\"\" # pylint: disable=W0212 nonremote = [t for t in self._tasks if not isinstance(t, RemoteTask)] remote = [t for t in self._tasks if isinstance(t, RemoteTask)] host_dict = defaultdict(list) for task in remote: host_dict[task.host].append(task) aggregated = [] for task_group in host_dict.values(): # Build up combined command combined_cmd = [] for task in task_group: if combined_cmd: combined_cmd.append('&') combined_cmd.append(' '.join(task._remote_command)) # Now, generated aggregate task t0 = task_group[0] # pylint: disable=C0103 task = RemoteTask( t0.host, combined_cmd, t0._quiet, t0._return_output, t0._kill_remote, t0._identity_file) aggregated.append(task) self._tasks = nonremote + aggregated\n\n    ### Response: Helper method to aggregate RemoteTasks into single ssh session..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static File mkdirs(final File dirs) throws IOException { if (dirs.exists()) { checkIsDirectory(dirs); return dirs; } return checkCreateDirectory(dirs); }\n\n    ### Response:",
        "ground_truth": "Creates all directories at once.\n\n@param dirs Directories to make.\n@throws IOException if cannot create directory.",
        "predict": " Helper method to aggregate RemoteTasks into single ssh session..\n\n    "
    },
    {
        "ID": 1390,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func NewProcess() *Process { p := &Process{ Port: DefaultPort, BinDir: DefaultBinDir, DataDir: DefaultDataDir, Password: DefaultPassword, OpTimeout: DefaultOpTimeout, ReplTimeout: DefaultReplTimeout, Logger: log15.New(\"app\", \"redis\"), } p.stopping.Store(false) return p }\n\n    ### Response: // NewProcess returns a new instance of Process with defaults..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static File mkdir(final File dir) throws IOException { if (dir.exists()) { checkIsDirectory(dir); return dir; } return checkCreateDirectory(dir); }\n\n    ### Response:",
        "ground_truth": "Creates single directory.\n\n@throws IOException if cannot create directory.",
        "predict": " // NewProcess returns a new instance of Process with defaults..\n\n    "
    },
    {
        "ID": 1391,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function init() { $this->timetable = []; $dimensions['service'] = $this->inflateServices(); $dimensions['date'] = $this->inflateDates(); $dimensions['time'] = $this->inflateTimes(); foreach ($dimensions['service'] as $service) { foreach ($dimensions['date'] as $date) { foreach ($dimensions['time'] as $time) { $this->capacity($date, $time, $service, 0); } } } return $this; }\n\n    ### Response: Initialize Timetable.\n\n@return $this.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static void _copyFile(final File srcFile, final File destFile) throws IOException { if (destFile.exists()) { if (destFile.isDirectory()) { throw new IOException(\"Destination '\" + destFile + \"' is a directory\"); } } // do copy file FileInputStream input = null; FileOutputStream output = null; try { input = new FileInputStream(srcFile); output = new FileOutputStream(destFile, false); StreamUtil.copy(input, output); } finally { StreamUtil.close(output); StreamUtil.close(input); } // done if (srcFile.length() != destFile.length()) { throw new IOException(\"Copy file failed of '\" + srcFile + \"' to '\" + destFile + \"' due to different sizes\"); } destFile.setLastModified(srcFile.lastModified()); }\n\n    ### Response:",
        "ground_truth": "Internal file copy when most of the pre-checking has passed.\n\n@param srcFile  Source {@link File}.\n@param destFile Destination {@link File}.\n@throws IOException if cannot copy",
        "predict": " Initialize Timetable.\n\n@return $this.\n\n    "
    },
    {
        "ID": 1392,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void on(String op, OnListener listener) { getInstance().mEvents.add(new Event(op, listener)); }\n\n    ### Response: Connect && Disconnect events.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void copyDir(final File srcDir, final File destDir) throws IOException { checkDirCopy(srcDir, destDir); _copyDirectory(srcDir, destDir); }\n\n    ### Response:",
        "ground_truth": "Copies directory with specified copy params.\n\n@see #_copyDirectory(File, File)",
        "predict": " Connect && Disconnect events.\n\n    "
    },
    {
        "ID": 1393,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def read_paraphrase_file(filename): ''' Reads in a GermaNet wiktionary paraphrase file and returns its contents as a list of dictionary structures. Arguments: - `filename`: ''' with open(filename, 'rb') as input_file: doc = etree.parse(input_file) assert doc.getroot().tag == 'wiktionaryParaphrases' paraphrases = [] for child in doc.getroot(): if child.tag == 'wiktionaryParaphrase': paraphrase = child warn_attribs('', paraphrase, PARAPHRASE_ATTRIBS) if 0 < len(paraphrase): print('unrecognised child of <wiktionaryParaphrase>', list(paraphrase)) paraphrase_dict = dict(paraphrase.items()) if paraphrase_dict['edited'] not in MAP_YESNO_TO_BOOL: print('<paraphrase> attribute \"edited\" has unexpected value', paraphrase_dict['edited']) else: paraphrase_dict['edited'] = MAP_YESNO_TO_BOOL[ paraphrase_dict['edited']] if not paraphrase_dict['wiktionarySenseId'].isdigit(): print('<paraphrase> attribute \"wiktionarySenseId\" has ' 'non-integer value', paraphrase_dict['edited']) else: paraphrase_dict['wiktionarySenseId'] = \\ int(paraphrase_dict['wiktionarySenseId'], 10) paraphrases.append(paraphrase_dict) else: print('unknown child of <wiktionaryParaphrases>', child) return paraphrases\n\n    ### Response: Reads in a GermaNet wiktionary paraphrase file and returns its\n    contents as a list of dictionary structures.\n\n    Arguments:\n    - `filename`:.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static File moveFileToDir(final File srcFile, final File destDir) throws IOException { checkExistsAndDirectory(destDir); return moveFile(srcFile, file(destDir, srcFile.getName())); }\n\n    ### Response:",
        "ground_truth": "Moves a file to a directory.\n\n@param srcFile Source {@link File}.\n@param destDir Destination directory.\n@throws IOException if there is an error during move.",
        "predict": " Reads in a GermaNet wiktionary paraphrase file and returns its\n    contents as a list of dictionary structures.\n\n    Arguments:\n    - `filename`:.\n\n    "
    },
    {
        "ID": 1394,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (o *ServiceControllerOptions) AddFlags(fs *pflag.FlagSet) { if o == nil { return } fs.Int32Var(&o.ConcurrentServiceSyncs, \"concurrent-service-syncs\", o.ConcurrentServiceSyncs, \"The number of services that are allowed to sync concurrently. Larger number = more responsive service management, but more CPU (and network) load\") }\n\n    ### Response: // AddFlags adds flags related to ServiceController for controller manager to the specified FlagSet..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static void _moveDirectory(final File srcDest, File destDir) throws IOException { if (destDir.exists()) { checkIsDirectory(destDir); destDir = file(destDir, destDir.getName()); destDir.mkdir(); } final boolean rename = srcDest.renameTo(destDir); if (!rename) { _copyDirectory(srcDest, destDir); deleteDir(srcDest); } }\n\n    ### Response:",
        "ground_truth": "Moves a directory.\n\n@param srcDest Source directory\n@param destDir Destination directory.\n@throws IOException if there is an error during move.",
        "predict": " // AddFlags adds flags related to ServiceController for controller manager to the specified FlagSet..\n\n    "
    },
    {
        "ID": 1395,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def recalculate_concepts(self, concepts, lang=None): \"\"\" Recalculated given concepts for given users Args: concepts (dict): user id (int -> set of concepts to recalculate) lang(Optional[str]): language used to get items in all concepts (cached). Defaults to None, in that case are get items only in used concepts \"\"\" if len(concepts) == 0: return if lang is None: items = Concept.objects.get_concept_item_mapping(concepts=Concept.objects.filter(pk__in=set(flatten(concepts.values())))) else: items = Concept.objects.get_concept_item_mapping(lang=lang) environment = get_environment() mastery_threshold = get_mastery_trashold() for user, concepts in concepts.items(): all_items = list(set(flatten([items[c] for c in concepts]))) answer_counts = environment.number_of_answers_more_items(all_items, user) correct_answer_counts = environment.number_of_correct_answers_more_items(all_items, user) predictions = dict(list(zip(all_items, get_predictive_model(). predict_more_items(environment, user, all_items, time=get_time_for_knowledge_overview())))) new_user_stats = [] stats_to_delete_condition = Q() for concept in concepts: answer_aggregates = Answer.objects.filter(user=user, item__in=items[concept]).aggregate( time_spent=Sum(\"response_time\"), sessions=Count(\"session\", True), time_first=Min(\"time\"), time_last=Max(\"time\"), ) stats = { \"answer_count\": sum(answer_counts[i] for i in items[concept]), \"correct_answer_count\": sum(correct_answer_counts[i] for i in items[concept]), \"item_count\": len(items[concept]), \"practiced_items_count\": sum([answer_counts[i] > 0 for i in items[concept]]), \"mastered_items_count\": sum([predictions[i] >= mastery_threshold for i in items[concept]]), \"prediction\": sum([predictions[i] for i in items[concept]]) / len(items[concept]), \"time_spent\": answer_aggregates[\"time_spent\"] / 1000, \"session_count\": answer_aggregates[\"sessions\"], \"time_first\": answer_aggregates[\"time_first\"].timestamp(), \"time_last\": answer_aggregates[\"time_last\"].timestamp(), } stats_to_delete_condition |= Q(user=user, concept=concept) for stat_name, value in stats.items(): new_user_stats.append(UserStat(user_id=user, concept_id=concept, stat=stat_name, value=value)) self.filter(stats_to_delete_condition).delete() self.bulk_create(new_user_stats)\n\n    ### Response: Recalculated given concepts for given users\n\n        Args:\n            concepts (dict): user id (int -> set of concepts to recalculate)\n            lang(Optional[str]): language used to get items in all concepts (cached).\n                Defaults to None, in that case are get items only in used concepts.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void cleanDir(final File destDir) throws IOException { checkExists(destDir); checkIsDirectory(destDir); File[] files = destDir.listFiles(); if (files == null) { throw new IOException(\"Failed to list contents of: \" + destDir); } IOException exception = null; for (File file : files) { try { if (file.isDirectory()) { deleteDir(file); } else { file.delete(); } } catch (IOException ioex) { exception = ioex; continue; } } if (exception != null) { throw exception; } }\n\n    ### Response:",
        "ground_truth": "Cleans a directory without deleting it.\n\n@param destDir destination to clean.\n@throws IOException if something went wrong.",
        "predict": " Recalculated given concepts for given users\n\n        Args:\n            concepts (dict): user id (int -> set of concepts to recalculate)\n            lang(Optional[str]): language used to get items in all concepts (cached).\n                Defaults to None, in that case are get items only in used concepts.\n\n    "
    },
    {
        "ID": 1396,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def phase_flip( p: Optional[float] = None ) -> Union[common_gates.ZPowGate, PhaseFlipChannel]: r\"\"\" Returns a PhaseFlipChannel that flips a qubit's phase with probability p if p is None, return a guaranteed phase flip in the form of a Z operation. This channel evolves a density matrix via: $$ \\rho \\rightarrow M_0 \\rho M_0^\\dagger + M_1 \\rho M_1^\\dagger $$ With: $$ \\begin{aligned} M_0 =& \\sqrt{p} \\begin{bmatrix} 1 & 0 \\\\ 0 & 1 \\end{bmatrix} \\\\ M_1 =& \\sqrt{1-p} \\begin{bmatrix} 1 & 0 \\\\ 0 & -1 \\end{bmatrix} \\end{aligned} $$ Args: p: the probability of a phase flip. Raises: ValueError: if p is not a valid probability. \"\"\" if p is None: return _phase_flip_Z() return _phase_flip(p)\n\n    ### Response: r\"\"\"\n    Returns a PhaseFlipChannel that flips a qubit's phase with probability p\n    if p is None, return a guaranteed phase flip in the form of a Z operation.\n\n    This channel evolves a density matrix via:\n\n        $$\n        \\rho \\rightarrow M_0 \\rho M_0^\\dagger + M_1 \\rho M_1^\\dagger\n        $$\n\n    With:\n\n        $$\n        \\begin{aligned}\n        M_0 =& \\sqrt{p} \\begin{bmatrix}\n                            1 & 0  \\\\\n                            0 & 1\n                       \\end{bmatrix}\n        \\\\\n        M_1 =& \\sqrt{1-p} \\begin{bmatrix}\n                            1 & 0 \\\\\n                            0 & -1\n                         \\end{bmatrix}\n        \\end{aligned}\n        $$\n\n    Args:\n        p: the probability of a phase flip.\n\n    Raises:\n        ValueError: if p is not a valid probability..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static char[] readUTFChars(final File file) throws IOException { checkExists(file); checkIsFile(file); UnicodeInputStream in = unicodeInputStreamOf(file); try { return StreamUtil.readChars(in, detectEncoding(in)); } finally { StreamUtil.close(in); } }\n\n    ### Response:",
        "ground_truth": "Reads UTF file content as char array.\n\n@param file {@link File} to read.\n@return array of characters.\n@throws IOException if something went wrong.",
        "predict": " r\"\"\"\n    Returns a PhaseFlipChannel that flips a qubit's phase with probability p\n    if p is None, return a guaranteed phase flip in the form of a Z operation.\n\n    This channel evolves a density matrix via:\n\n        $$\n        \\rho \\rightarrow M_0 \\rho M_0^\\dagger + M_1 \\rho M_1^\\dagger\n        $$\n\n    With:\n\n        $$\n        \\begin{aligned}\n        M_0 =& \\sqrt{p} \\begin{bmatrix}\n                            1 & 0  \\\\\n                            0 & 1\n                       \\end{bmatrix}\n        \\\\\n        M_1 =& \\sqrt{1-p} \\begin{bmatrix}\n                            1 & 0 \\\\\n                            0 & -1\n                         \\end{bmatrix}\n        \\end{aligned}\n        $$\n\n    Args:\n        p: the probability of a phase flip.\n\n    Raises:\n        ValueError: if p is not a valid probability..\n\n    "
    },
    {
        "ID": 1397,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _combine_costs(self, Npwl, Hpwl, Cpwl, fparm_pwl, any_pwl, Npol, Hpol, Cpol, fparm_pol, npol, nw): \"\"\" Combines pwl, polynomial and user-defined costs. \"\"\" NN = vstack([n for n in [Npwl, Npol] if n is not None], \"csr\") if (Hpwl is not None) and (Hpol is not None): Hpwl = hstack([Hpwl, csr_matrix((any_pwl, npol))]) Hpol = hstack([csr_matrix((npol, any_pwl)), Hpol]) # if H is not None: # H = hstack([csr_matrix((nw, any_pwl+npol)), H]) HHw = vstack([h for h in [Hpwl, Hpol] if h is not None], \"csr\") CCw = r_[Cpwl, Cpol] ffparm = r_[fparm_pwl, fparm_pol] return NN, HHw, CCw, ffparm\n\n    ### Response: Combines pwl, polynomial and user-defined costs..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static char[] readChars(final File file, final String encoding) throws IOException { checkExists(file); checkIsFile(file); InputStream in = streamOf(file, encoding); try { return StreamUtil.readChars(in, encoding); } finally { StreamUtil.close(in); } }\n\n    ### Response:",
        "ground_truth": "Reads file content as char array.\n\n@param file     {@link File} to read.\n@param encoding Encoding to use.\n@return array of characters.\n@throws IOException if something went wrong.",
        "predict": " Combines pwl, polynomial and user-defined costs..\n\n    "
    },
    {
        "ID": 1398,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def image_generator(images, labels): \"\"\"Generator for images that takes image and labels lists and creates pngs. Args: images: list of images given as [width x height x channels] numpy arrays. labels: list of ints, same length as images. Yields: A dictionary representing the images with the following fields: * image/encoded: the string encoding the image as PNG, * image/format: the string \"png\" representing image format, * image/class/label: an integer representing the label, * image/height: an integer representing the height, * image/width: an integer representing the width. Every field is actually a singleton list of the corresponding type. Raises: ValueError: if images is an empty list. \"\"\" if not images: raise ValueError(\"Must provide some images for the generator.\") width, height, _ = images[0].shape for (enc_image, label) in zip(encode_images_as_png(images), labels): yield { \"image/encoded\": [enc_image], \"image/format\": [\"png\"], \"image/class/label\": [int(label)], \"image/height\": [height], \"image/width\": [width] }\n\n    ### Response: Generator for images that takes image and labels lists and creates pngs.\n\n  Args:\n    images: list of images given as [width x height x channels] numpy arrays.\n    labels: list of ints, same length as images.\n\n  Yields:\n    A dictionary representing the images with the following fields:\n    * image/encoded: the string encoding the image as PNG,\n    * image/format: the string \"png\" representing image format,\n    * image/class/label: an integer representing the label,\n    * image/height: an integer representing the height,\n    * image/width: an integer representing the width.\n    Every field is actually a singleton list of the corresponding type.\n\n  Raises:\n    ValueError: if images is an empty list..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void writeChars(final File dest, final char[] data, final String encoding) throws IOException { outChars(dest, data, encoding, false); }\n\n    ### Response:",
        "ground_truth": "Write characters. append = false\n\n@see #outChars(File, char[], String, boolean)",
        "predict": " Generator for images that takes image and labels lists and creates pngs.\n\n  Args:\n    images: list of images given as [width x height x channels] numpy arrays.\n    labels: list of ints, same length as images.\n\n  Yields:\n    A dictionary representing the images with the following fields:\n    * image/encoded: the string encoding the image as PNG,\n    * image/format: the string \"png\" representing image format,\n    * image/class/label: an integer representing the label,\n    * image/height: an integer representing the height,\n    * image/width: an integer representing the width.\n    Every field is actually a singleton list of the corresponding type.\n\n  Raises:\n    ValueError: if images is an empty list..\n\n    "
    },
    {
        "ID": 1399,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function _checkCurrencyId( $currencyid, $null = true ) { if( $null === false && $currencyid === null ) { throw new MShop_Exception( sprintf( 'Invalid ISO currency code \"%1$s\"', '<null>' ) ); } if( $currencyid !== null && preg_match( '/^[A-Z]{3}$/', $currencyid ) !== 1 ) { throw new MShop_Exception( sprintf( 'Invalid ISO currency code \"%1$s\"', $currencyid ) ); } }\n\n    ### Response: Tests if the currency ID parameter represents an ISO currency format.\n\n@param string|null $currencyid Three letter ISO currency format, e.g. EUR\n@param boolean $null True if null is allowed, false if not\n@throws MShop_Exception If the currency ID is invalid.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void writeString(final File dest, final String data, final String encoding) throws IOException { outString(dest, data, encoding, false); }\n\n    ### Response:",
        "ground_truth": "Writes String. append = false\n\n@see #outString(File, String, String, boolean)",
        "predict": " Tests if the currency ID parameter represents an ISO currency format.\n\n@param string|null $currencyid Three letter ISO currency format, e.g. EUR\n@param boolean $null True if null is allowed, false if not\n@throws MShop_Exception If the currency ID is invalid.\n\n    "
    },
    {
        "ID": 1400,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function (name, data, o) { // be sure sub folders exist var parent = parentFolder(name), dataType = JSZip.utils.getTypeOf(data); if (parent) { folderAdd.call(this, parent); } o = prepareFileAttrs(o); if (o.dir || data === null || typeof data === \"undefined\") { o.base64 = false; o.binary = false; data = null; } else if (dataType === \"string\") { if (o.binary && !o.base64) { // optimizedBinaryString == true means that the file has already been filtered with a 0xFF mask if (o.optimizedBinaryString !== true) { // this is a string, not in a base64 format. // Be sure that this is a correct \"binary string\" data = JSZip.utils.string2binary(data); } } } else { // arraybuffer, uint8array, ... o.base64 = false; o.binary = true; if (!dataType && !(data instanceof JSZip.CompressedObject)) { throw new Error(\"The data of '\" + name + \"' is in an unsupported format !\"); } // special case : it's way easier to work with Uint8Array than with ArrayBuffer if (dataType === \"arraybuffer\") { data = JSZip.utils.transformTo(\"uint8array\", data); } } return this.files[name] = new ZipObject(name, data, o); }\n\n    ### Response: Add a file in the current folder.\n@private\n@param {string} name the name of the file\n@param {String|ArrayBuffer|Uint8Array|Buffer} data the data of the file\n@param {Object} o the options of the file\n@return {Object} the new file..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void appendString(final File dest, final String data, final String encoding) throws IOException { outString(dest, data, encoding, true); }\n\n    ### Response:",
        "ground_truth": "Appends String. append = true\n\n@see #outString(File, String, String, boolean)",
        "predict": " Add a file in the current folder.\n@private\n@param {string} name the name of the file\n@param {String|ArrayBuffer|Uint8Array|Buffer} data the data of the file\n@param {Object} o the options of the file\n@return {Object} the new file..\n\n    "
    },
    {
        "ID": 1401,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def is_canonical(version, loosedev=False): # type: (str, bool) -> bool \"\"\" Return whether or not the version string is canonical according to Pep 440 \"\"\" if loosedev: return loose440re.match(version) is not None return pep440re.match(version) is not None\n\n    ### Response: Return whether or not the version string is canonical according to Pep 440.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static byte[] readBytes(final File file, final int count) throws IOException { checkExists(file); checkIsFile(file); long numToRead = file.length(); if (numToRead >= Integer.MAX_VALUE) { throw new IOException(\"File is larger then max array size\"); } if (count > NEGATIVE_ONE && count < numToRead) { numToRead = count; } byte[] bytes = new byte[(int) numToRead]; RandomAccessFile randomAccessFile = new RandomAccessFile(file, \"r\"); randomAccessFile.readFully(bytes); randomAccessFile.close(); return bytes; }\n\n    ### Response:",
        "ground_truth": "Read file and returns byte array with contents.\n\n@param file  {@link File} to read\n@param count number of bytes to read\n@return byte array from {@link File} contents.\n@throws IOException if not a {@link File} or {@link File} does not exist or file size is\nlarger than {@link Integer#MAX_VALUE}.",
        "predict": " Return whether or not the version string is canonical according to Pep 440.\n\n    "
    },
    {
        "ID": 1402,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func toAdminAPIErrCode(ctx context.Context, err error) APIErrorCode { switch err { case errXLWriteQuorum: return ErrAdminConfigNoQuorum default: return toAPIErrorCode(ctx, err) } }\n\n    ### Response: // toAdminAPIErrCode - converts errXLWriteQuorum error to admin API\n// specific error..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void writeBytes(final File dest, final byte[] data, final int off, final int len) throws IOException { outBytes(dest, data, off, len, false); }\n\n    ### Response:",
        "ground_truth": "Write bytes. append = false\n\n@see #outBytes(File, byte[], int, int, boolean)",
        "predict": " // toAdminAPIErrCode - converts errXLWriteQuorum error to admin API\n// specific error..\n\n    "
    },
    {
        "ID": 1403,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function handle() { if ($this->wsdlmode) { // Prepare the response. $this->response = $this->wsdl->to_xml(); // Send the results back in correct format. $this->send_response(); } else { $wsdlurl = clone($this->serverurl); $wsdlurl->param('wsdl', 1); $options = array( 'uri' => $this->serverurl->out(false) ); // Initialise the SOAP server. $this->soapserver = new SoapServer($wsdlurl->out(false), $options); if (!empty($this->serviceclass)) { $this->soapserver->setClass($this->serviceclass); // Get all the methods for the generated service class then register to the SOAP server. $functions = get_class_methods($this->serviceclass); $this->soapserver->addFunction($functions); } // Get soap request from raw POST data. $soaprequest = file_get_contents('php://input'); // Handle the request. try { $this->soapserver->handle($soaprequest); } catch (Exception $e) { $this->fault($e); } } }\n\n    ### Response: Handles the web service function call..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void appendBytes(final File dest, final byte[] data, final int off, final int len) throws IOException { outBytes(dest, data, off, len, true); }\n\n    ### Response:",
        "ground_truth": "Appends bytes. append = true\n\n@see #outBytes(File, byte[], int, int, boolean)",
        "predict": " Handles the web service function call..\n\n    "
    },
    {
        "ID": 1404,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function(layer, callback) { layer = layer == undefined ? 0: layer; var self = this; this.getTiles(function(urls) { if(!urls) { callback(null); return; } if(callback) { callback(self._tileJSONfromTiles(layer, urls)); } }); }\n\n    ### Response: get tile json for layer.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void copy(final File src, final File dest) throws IOException { if (src.isDirectory()) { copyDir(src, dest); return; } if (dest.isDirectory()) { copyFileToDir(src, dest); return; } copyFile(src, dest); }\n\n    ### Response:",
        "ground_truth": "Smart copy. If source is a directory, copy it to destination.\nOtherwise, if destination is directory, copy source file to it.\nOtherwise, try to copy source file to destination file.\n\n@param src  source {@link File}\n@param dest destination {@link File}\n@throws IOException if there is an error copying.\n@see #copyDir(File, File)\n@see #copyFileToDir(File, File)\n@see #copyFile(File, File)",
        "predict": " get tile json for layer.\n\n    "
    },
    {
        "ID": 1405,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void parseIDFromCookies(RequestMessage request) { if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) { Tr.debug(tc, \"Looking for ID in cookies\"); } Enumeration<String> list = request.getHeaders(\"Cookie\"); while (list.hasMoreElements()) { String item = list.nextElement(); int index = item.indexOf(getSessionConfig().getIDName()); if (-1 != index) { index = item.indexOf('=', index); if (-1 != index) { index++; // TODO this is assuming that the full value is valid and // grabbing just the 4 digit id... if (item.length() >= (index + 4)) { this.id = item.substring(index, index + 4); this.fromCookie = true; break; } } } } }\n\n    ### Response: Look for a possible session id in the cookies of the request message.\n\n@param request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void delete(final File dest) throws IOException { if (dest.isDirectory()) { deleteDir(dest); return; } deleteFile(dest); }\n\n    ### Response:",
        "ground_truth": "Smart delete of destination file or directory.\n\n@throws IOException if there is an issue deleting the file/directory.\n@see #deleteFile(File)\n@see #deleteDir(File)",
        "predict": " Look for a possible session id in the cookies of the request message.\n\n@param request.\n\n    "
    },
    {
        "ID": 1406,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def remove_capability(capability, image=None, restart=False): ''' Uninstall a capability Args: capability(str): The capability to be removed image (Optional[str]): The path to the root directory of an offline Windows image. If `None` is passed, the running operating system is targeted. Default is None. restart (Optional[bool]): Reboot the machine if required by the install Raises: NotImplementedError: For all versions of Windows that are not Windows 10 and later. Server editions of Windows use ServerManager instead. Returns: dict: A dictionary containing the results of the command CLI Example: .. code-block:: bash salt '*' dism.remove_capability Tools.Graphics.DirectX~~~~0.0.1.0 ''' if salt.utils.versions.version_cmp(__grains__['osversion'], '10') == -1: raise NotImplementedError( '`uninstall_capability` is not available on this version of ' 'Windows: {0}'.format(__grains__['osversion'])) cmd = ['DISM', '/Quiet', '/Image:{0}'.format(image) if image else '/Online', '/Remove-Capability', '/CapabilityName:{0}'.format(capability)] if not restart: cmd.append('/NoRestart') return __salt__['cmd.run_all'](cmd)\n\n    ### Response: Uninstall a capability\n\n    Args:\n        capability(str): The capability to be removed\n        image (Optional[str]): The path to the root directory of an offline\n            Windows image. If `None` is passed, the running operating system is\n            targeted. Default is None.\n        restart (Optional[bool]): Reboot the machine if required by the install\n\n    Raises:\n        NotImplementedError: For all versions of Windows that are not Windows 10\n        and later. Server editions of Windows use ServerManager instead.\n\n    Returns:\n        dict: A dictionary containing the results of the command\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' dism.remove_capability Tools.Graphics.DirectX~~~~0.0.1.0.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static File createTempDirectory(final String prefix, final String suffix, final File tempDir) throws IOException { File file = createTempFile(prefix, suffix, tempDir); file.delete(); file.mkdir(); return file; }\n\n    ### Response:",
        "ground_truth": "Creates temporary directory.\n\n@see #createTempFile(String, String, File)",
        "predict": " Uninstall a capability\n\n    Args:\n        capability(str): The capability to be removed\n        image (Optional[str]): The path to the root directory of an offline\n            Windows image. If `None` is passed, the running operating system is\n            targeted. Default is None.\n        restart (Optional[bool]): Reboot the machine if required by the install\n\n    Raises:\n        NotImplementedError: For all versions of Windows that are not Windows 10\n        and later. Server editions of Windows use ServerManager instead.\n\n    Returns:\n        dict: A dictionary containing the results of the command\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' dism.remove_capability Tools.Graphics.DirectX~~~~0.0.1.0.\n\n    "
    },
    {
        "ID": 1407,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _folder_item_calculation(self, analysis_brain, item): \"\"\"Set the analysis' calculation and interims to the item passed in. :param analysis_brain: Brain that represents an analysis :param item: analysis' dictionary counterpart that represents a row \"\"\" is_editable = self.is_analysis_edition_allowed(analysis_brain) # Set interim fields. Note we add the key 'formatted_value' to the list # of interims the analysis has already assigned. interim_fields = analysis_brain.getInterimFields or list() for interim_field in interim_fields: interim_keyword = interim_field.get('keyword', '') if not interim_keyword: continue interim_value = interim_field.get('value', '') interim_formatted = formatDecimalMark(interim_value, self.dmk) interim_field['formatted_value'] = interim_formatted item[interim_keyword] = interim_field item['class'][interim_keyword] = 'interim' # Note: As soon as we have a separate content type for field # analysis, we can solely rely on the field permission # \"senaite.core: Field: Edit Analysis Result\" if is_editable: if self.has_permission(FieldEditAnalysisResult, analysis_brain): item['allow_edit'].append(interim_keyword) # Add this analysis' interim fields to the interim_columns list interim_hidden = interim_field.get('hidden', False) if not interim_hidden: interim_title = interim_field.get('title') self.interim_columns[interim_keyword] = interim_title item['interimfields'] = interim_fields self.interim_fields[analysis_brain.UID] = interim_fields # Set calculation calculation_uid = analysis_brain.getCalculationUID has_calculation = calculation_uid and True or False item['calculation'] = has_calculation\n\n    ### Response: Set the analysis' calculation and interims to the item passed in.\n\n        :param analysis_brain: Brain that represents an analysis\n        :param item: analysis' dictionary counterpart that represents a row.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static boolean isBinary(final File file) throws IOException { byte[] bytes = readBytes(file, 128); for (byte b : bytes) { if (b < 32 && b != 9 && b != 10 && b != 13) { return true; } } return false; }\n\n    ### Response:",
        "ground_truth": "Checks the start of the file for ASCII control characters\n\n@param file {@link File}\n@return true if the the start of the {@link File} is ASCII control characters.",
        "predict": " Set the analysis' calculation and interims to the item passed in.\n\n        :param analysis_brain: Brain that represents an analysis\n        :param item: analysis' dictionary counterpart that represents a row.\n\n    "
    },
    {
        "ID": 1408,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (l *PluginLoader) Reattach(name, pluginType string, config *plugin.ReattachConfig) (PluginInstance, error) { return l.dispensePlugin(pluginType, \"\", \"\", nil, config, l.logger) }\n\n    ### Response: // Reattach reattaches to a previously launched external plugin..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static void checkDirCopy(final File srcDir, final File destDir) throws IOException { checkExists(srcDir); checkIsDirectory(srcDir); if (equals(srcDir, destDir)) { throw new IOException(\"Source '\" + srcDir + \"' and destination '\" + destDir + \"' are equal\"); } }\n\n    ### Response:",
        "ground_truth": "Checks that srcDir exists, that it is a directory and if srcDir and destDir are not equal.\n\n@param srcDir  Source directory\n@param destDir Destination directory\n@throws IOException if any of the above conditions are not true.",
        "predict": " // Reattach reattaches to a previously launched external plugin..\n\n    "
    },
    {
        "ID": 1409,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def stream(self, muted=values.unset, hold=values.unset, coaching=values.unset, limit=None, page_size=None): \"\"\" Streams ParticipantInstance records from the API as a generator stream. This operation lazily loads records as efficiently as possible until the limit is reached. The results are returned as a generator, so this operation is memory efficient. :param bool muted: Whether to return only participants that are muted :param bool hold: Whether to return only participants that are on hold :param bool coaching: Whether to return only participants who are coaching another call :param int limit: Upper limit for the number of records to return. stream() guarantees to never return more than limit. Default is no limit :param int page_size: Number of records to fetch per request, when not set will use the default value of 50 records. If no page_size is defined but a limit is defined, stream() will attempt to read the limit with the most efficient page size, i.e. min(limit, 1000) :returns: Generator that will yield up to limit results :rtype: list[twilio.rest.api.v2010.account.conference.participant.ParticipantInstance] \"\"\" limits = self._version.read_limits(limit, page_size) page = self.page(muted=muted, hold=hold, coaching=coaching, page_size=limits['page_size'], ) return self._version.stream(page, limits['limit'], limits['page_limit'])\n\n    ### Response: Streams ParticipantInstance records from the API as a generator stream.\n        This operation lazily loads records as efficiently as possible until the limit\n        is reached.\n        The results are returned as a generator, so this operation is memory efficient.\n\n        :param bool muted: Whether to return only participants that are muted\n        :param bool hold: Whether to return only participants that are on hold\n        :param bool coaching: Whether to return only participants who are coaching another call\n        :param int limit: Upper limit for the number of records to return. stream()\n                          guarantees to never return more than limit.  Default is no limit\n        :param int page_size: Number of records to fetch per request, when not set will use\n                              the default value of 50 records.  If no page_size is defined\n                              but a limit is defined, stream() will attempt to read the\n                              limit with the most efficient page size, i.e. min(limit, 1000)\n\n        :returns: Generator that will yield up to limit results\n        :rtype: list[twilio.rest.api.v2010.account.conference.participant.ParticipantInstance].\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static void checkFileCopy(final File srcFile, final File destFile) throws IOException { checkExists(srcFile); checkIsFile(srcFile); if (equals(srcFile, destFile)) { throw new IOException(\"Files '\" + srcFile + \"' and '\" + destFile + \"' are equal\"); } File destParent = destFile.getParentFile(); if (destParent != null && !destParent.exists()) { checkCreateDirectory(destParent); } }\n\n    ### Response:",
        "ground_truth": "Checks that file copy can occur.\n\n@param srcFile  Source {@link File}\n@param destFile Destination {@link File}\n@throws IOException if srcFile does not exist or is not a file or\nsrcFile and destFile are equal or cannot create ancestor directories.",
        "predict": " Streams ParticipantInstance records from the API as a generator stream.\n        This operation lazily loads records as efficiently as possible until the limit\n        is reached.\n        The results are returned as a generator, so this operation is memory efficient.\n\n        :param bool muted: Whether to return only participants that are muted\n        :param bool hold: Whether to return only participants that are on hold\n        :param bool coaching: Whether to return only participants who are coaching another call\n        :param int limit: Upper limit for the number of records to return. stream()\n                          guarantees to never return more than limit.  Default is no limit\n        :param int page_size: Number of records to fetch per request, when not set will use\n                              the default value of 50 records.  If no page_size is defined\n                              but a limit is defined, stream() will attempt to read the\n                              limit with the most efficient page size, i.e. min(limit, 1000)\n\n        :returns: Generator that will yield up to limit results\n        :rtype: list[twilio.rest.api.v2010.account.conference.participant.ParticipantInstance].\n\n    "
    },
    {
        "ID": 1410,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def instruction(self, val): \"\"\"Set the action and command from an instruction\"\"\" self._instruction = val if isinstance(val, tuple): if len(val) is 2: self._action, self.command = val else: self._action, self.command, self.extra = val else: split = val.split(\" \", 1) if split[0] == \"FROM\": split = val.split(\" \", 2) if len(split) == 3: self._action, self.command, self.extra = split else: self._action, self.command = split\n\n    ### Response: Set the action and command from an instruction.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void printUsage(final String commandName) { final StringBuilder usage = new StringBuilder(commandName); for (final Option option : options) { if (option.shortName != null) { usage.append(\" [-\").append(option.shortName).append(\"]\"); } else if (option.longName != null) { usage.append(\" [--\").append(option.longName).append(\"]\"); } } for (final Param param : params) { usage.append(\" \").append(param.label); } System.out.println(usage); }\n\n    ### Response:",
        "ground_truth": "Prints the usage line.",
        "predict": " Set the action and command from an instruction.\n\n    "
    },
    {
        "ID": 1411,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (mr *MockExtensionsV1beta1InterfaceMockRecorder) PodSecurityPolicies() *gomock.Call { return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"PodSecurityPolicies\", reflect.TypeOf((*MockExtensionsV1beta1Interface)(nil).PodSecurityPolicies)) }\n\n    ### Response: // PodSecurityPolicies indicates an expected call of PodSecurityPolicies.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Method resolveActionMethod(final Class<?> actionClass, final String methodName) { MethodDescriptor methodDescriptor = ClassIntrospector.get().lookup(actionClass).getMethodDescriptor(methodName, false); if (methodDescriptor == null) { throw new MadvocException(\"Public method not found: \" + actionClass.getSimpleName() + \"#\" + methodName); } return methodDescriptor.getMethod(); }\n\n    ### Response:",
        "ground_truth": "Resolves action method for given action class ane method name.",
        "predict": " // PodSecurityPolicies indicates an expected call of PodSecurityPolicies.\n\n    "
    },
    {
        "ID": 1412,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (m *manager) ServerHealthy() bool { m.certAccessLock.RLock() defer m.certAccessLock.RUnlock() return m.serverHealth }\n\n    ### Response: // ServerHealthy returns true if the cert manager believes the server\n// is currently alive..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public ActionRuntime registerAction(final Class actionClass, final String actionMethodName, final ActionDefinition actionDefinition) { Method actionMethod = resolveActionMethod(actionClass, actionMethodName); return registerAction(actionClass, actionMethod, actionDefinition); }\n\n    ### Response:",
        "ground_truth": "Registers action with provided action class and method name.\n@see #registerAction(Class, Method, ActionDefinition)",
        "predict": " // ServerHealthy returns true if the cert manager believes the server\n// is currently alive..\n\n    "
    },
    {
        "ID": 1413,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def infer_attribute(self, context=None): \"\"\"infer an Attribute node by using getattr on the associated object\"\"\" for owner in self.expr.infer(context): if owner is util.Uninferable: yield owner continue if context and context.boundnode: # This handles the situation where the attribute is accessed through a subclass # of a base class and the attribute is defined at the base class's level, # by taking in consideration a redefinition in the subclass. if isinstance(owner, bases.Instance) and isinstance( context.boundnode, bases.Instance ): try: if helpers.is_subtype( helpers.object_type(context.boundnode), helpers.object_type(owner), ): owner = context.boundnode except exceptions._NonDeducibleTypeHierarchy: # Can't determine anything useful. pass try: context.boundnode = owner yield from owner.igetattr(self.attrname, context) context.boundnode = None except (exceptions.AttributeInferenceError, exceptions.InferenceError): context.boundnode = None except AttributeError: # XXX method / function context.boundnode = None return dict(node=self, context=context)\n\n    ### Response: infer an Attribute node by using getattr on the associated object.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void registerPathAlias(final String alias, final String path) { final String existing = pathAliases.put(alias, path); if (existing != null) { throw new MadvocException(\"Duplicated alias detected: [\" + alias + \"] for paths: \" + path + \", \" + existing); } }\n\n    ### Response:",
        "ground_truth": "Registers new path alias.",
        "predict": " infer an Attribute node by using getattr on the associated object.\n\n    "
    },
    {
        "ID": 1414,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    void preBackout(Transaction transaction) throws ObjectManagerException { final String methodName = \"preBackout\"; if (Tracing.isAnyTracingEnabled() && trace.isEntryEnabled()) trace.entry(this, cclass, methodName, new Object[] { transaction }); // Allow any last minute changes before we backout. for (java.util.Iterator tokenIterator = callbackTokens.iterator(); tokenIterator.hasNext();) { Token token = (Token) tokenIterator.next(); ManagedObject managedObject = token.getManagedObject(); // Drive the preBackout method for the object. managedObject.preBackout(transaction); } // for... callbackTokens. if (Tracing.isAnyTracingEnabled() && trace.isEntryEnabled()) trace.exit(this, cclass, methodName); }\n\n    ### Response: Before the transaction is backed out, give the ManagedObjects a chance to adjust their transient state to reflect\nthe final outcome. It is too late for them to adjust persistent state as that is already written to the log\nassuming an outcome of Commit.\n\n@param transaction the external Transaction.\n@throws ObjectManagerException.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public boolean next() { if (!looping) { return false; } if (last) { return false; } if (count == 0) { value = start; first = true; } else { value += step; first = false; } count++; last = isLastIteration(value + step); return true; }\n\n    ### Response:",
        "ground_truth": "Iterates to next value at the beginning of the loop.",
        "predict": " Before the transaction is backed out, give the ManagedObjects a chance to adjust their transient state to reflect\nthe final outcome. It is too late for them to adjust persistent state as that is already written to the log\nassuming an outcome of Commit.\n\n@param transaction the external Transaction.\n@throws ObjectManagerException.\n\n    "
    },
    {
        "ID": 1415,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public void validate(byte[] blockBuffer, int rowOffset, int rowHead, int blobTail) { int offset = rowOffset + offset(); int blobLen = BitsUtil.readInt16(blockBuffer, offset + 2); int blobOffset = BitsUtil.readInt16(blockBuffer, offset); if (blobLen == 0) { return; } if (blobOffset < 0 || blobTail < blobOffset) { throw new IllegalStateException(L.l(\"{0}: corrupted blob offset {1} with blobTail={2}\", this, blobOffset, blobTail)); } if ((blobLen & LARGE_BLOB_MASK) != 0) { blobLen &= ~LARGE_BLOB_MASK; if (blobLen != 4) { throw new IllegalStateException(L.l(\"{0}: corrupted blob len {1} for large blob.\", this, blobOffset)); } } if (blobLen < 0 || blobTail < blobLen + blobOffset) { throw new IllegalStateException(L.l(\"{0}: corrupted blob len {1} with blobOffset={2} blobTail={3}\", this, blobLen, blobOffset, blobTail)); } }\n\n    ### Response: Validates the column, checking for corruption..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static CharArraySequence from(final char[] value, final int offset, final int len) { final char[] buffer = new char[value.length]; System.arraycopy(value, offset, buffer, 0, len); return new CharArraySequence(buffer); }\n\n    ### Response:",
        "ground_truth": "Static constructor that creates a char sequence by making a copy of provided char array.",
        "predict": " Validates the column, checking for corruption..\n\n    "
    },
    {
        "ID": 1416,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def remove_rule_entry(self, rule_info): \"\"\"Remove host data object from rule_info list.\"\"\" temp_list = list(self.rule_info) for rule in temp_list: if (rule.ip == rule_info.get('ip') and rule.mac == rule_info.get('mac') and rule.port == rule_info.get('port')): LOG.debug('Removed rule info %s from the list', rule_info) self.rule_info.remove(rule)\n\n    ### Response: Remove host data object from rule_info list..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Object execute() throws Exception { String methodName = ProxyTarget.targetMethodName(); Class[] argTypes = ProxyTarget.createArgumentsClassArray(); Object[] args = ProxyTarget.createArgumentsArray(); // lookup method on target object class (and not #targetClass!() Class type = _target.getClass(); Method method = type.getMethod(methodName, argTypes); // remember context classloader ClassLoader contextClassLoader = Thread.currentThread().getContextClassLoader(); Object result; try { // change class loader Thread.currentThread().setContextClassLoader(type.getClassLoader()); // invoke result = method.invoke(_target, args); } finally { // return context classloader Thread.currentThread().setContextClassLoader(contextClassLoader); } return ProxyTarget.returnValue(result); }\n\n    ### Response:",
        "ground_truth": "Looks up for method in target object and invokes it using reflection.",
        "predict": " Remove host data object from rule_info list..\n\n    "
    },
    {
        "ID": 1417,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function burst($filepattern = null) { $this->constrainSingleFile(); $this->getCommand()->setOperation('burst'); $this->_output = $filepattern===null ? 'pg_%04d.pdf' : $filepattern; return $this->execute(); }\n\n    ### Response: Split the PDF document into pages\n\n@param string|null $filepattern the output name in sprintf format or null for default 'pg_%04d.pdf'\n@return bool whether the burst command was successful\n@return bool whether the burst operation was successful.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public final boolean matchUpperCase(final char[] uppercaseTarget) { if (ndx + uppercaseTarget.length > total) { return false; } int j = ndx; for (int i = 0; i < uppercaseTarget.length; i++, j++) { final char c = CharUtil.toUpperAscii(input[j]); if (c != uppercaseTarget[i]) { return false; } } return true; }\n\n    ### Response:",
        "ground_truth": "Matches char buffer given in uppercase with content at current location, that will\nbe converted to upper case to make case-insensitive matching.",
        "predict": " Split the PDF document into pages\n\n@param string|null $filepattern the output name in sprintf format or null for default 'pg_%04d.pdf'\n@return bool whether the burst command was successful\n@return bool whether the burst operation was successful.\n\n    "
    },
    {
        "ID": 1418,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function check(packages, opt) { let deps = []; const pkgJson = (opt) ? findPackageJson(opt.startDir) : findPackageJson(); let fileJson; if (!pkgJson) { throw new Error(\"Could not find a package.json file. Run 'npm init' to create one.\"); } try { fileJson = JSON.parse(fs.readFileSync(pkgJson, \"utf8\")); } catch (e) { const error = new Error(e); error.messageTemplate = \"failed-to-read-json\"; error.messageData = { path: pkgJson, message: e.message }; throw error; } if (opt.devDependencies && typeof fileJson.devDependencies === \"object\") { deps = deps.concat(Object.keys(fileJson.devDependencies)); } if (opt.dependencies && typeof fileJson.dependencies === \"object\") { deps = deps.concat(Object.keys(fileJson.dependencies)); } return packages.reduce((status, pkg) => { status[pkg] = deps.indexOf(pkg) !== -1; return status; }, {}); }\n\n    ### Response: Check whether node modules are include in a project's package.json.\n\n@param   {string[]} packages           Array of node module names\n@param   {Object}  opt                 Options Object\n@param   {boolean} opt.dependencies    Set to true to check for direct dependencies\n@param   {boolean} opt.devDependencies Set to true to check for development dependencies\n@param   {boolean} opt.startdir        Directory to begin searching from\n@returns {Object}                      An object whose keys are the module names\nand values are booleans indicating installation..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected final CharSequence charSequence(final int from, final int to) { if (from == to) { return CharArraySequence.EMPTY; } return CharArraySequence.of(input, from, to - from); }\n\n    ### Response:",
        "ground_truth": "Creates char sub-sequence from the input.",
        "predict": " Check whether node modules are include in a project's package.json.\n\n@param   {string[]} packages           Array of node module names\n@param   {Object}  opt                 Options Object\n@param   {boolean} opt.dependencies    Set to true to check for direct dependencies\n@param   {boolean} opt.devDependencies Set to true to check for development dependencies\n@param   {boolean} opt.startdir        Directory to begin searching from\n@returns {Object}                      An object whose keys are the module names\nand values are booleans indicating installation..\n\n    "
    },
    {
        "ID": 1419,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (s *DescribeMatchmakingOutput) SetTicketList(v []*MatchmakingTicket) *DescribeMatchmakingOutput { s.TicketList = v return s }\n\n    ### Response: // SetTicketList sets the TicketList field's value..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static URL[] of(ClassLoader classLoader, Class clazz) { if (clazz == null) { clazz = ClassPathURLs.class; } if (classLoader == null) { classLoader = clazz.getClassLoader(); } final Set<URL> urls = new LinkedHashSet<>(); while (classLoader != null) { if (classLoader instanceof URLClassLoader) { URLClassLoader urlClassLoader = (URLClassLoader) classLoader; URL[] allURLS = urlClassLoader.getURLs(); Collections.addAll(urls, allURLS); break; } URL classUrl = classModuleUrl(classLoader, clazz); if (classUrl != null) { urls.add(classUrl); } classUrl = classModuleUrl(classLoader, ClassPathURLs.class); if (classUrl != null) { urls.add(classUrl); } ModuleDescriptor moduleDescriptor = clazz.getModule().getDescriptor(); if (moduleDescriptor != null) { moduleDescriptor.requires().forEach(req -> { ModuleLayer.boot() .findModule(req.name()) .ifPresent(mod -> { ClassLoader moduleClassLoader = mod.getClassLoader(); if (moduleClassLoader != null) { URL url = moduleClassLoader.getResource(MANIFEST); if (url != null) { url = fixManifestUrl(url); urls.add(url); } } }); }); } classLoader = classLoader.getParent(); } return urls.toArray(new URL[0]); }\n\n    ### Response:",
        "ground_truth": "Returns urls for the classloader.\n\n@param classLoader classloader in which to find urls\n@return list of urls or {@code null} if not found",
        "predict": " // SetTicketList sets the TicketList field's value..\n\n    "
    },
    {
        "ID": 1420,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function canAdd(ResourceEntityInterface $entity) { return empty($this->className) || get_class($entity) == $this->className; }\n\n    ### Response: Verifica que la entidad sea del tipo correcto.\n@param ResourceEntityInterface $entity\n@return boolean.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Email bcc(final EmailAddress... bccs) { this.bcc = ArraysUtil.join(this.bcc, valueOrEmptyArray(bccs)); return _this(); }\n\n    ### Response:",
        "ground_truth": "Appends one or more BCC addresses.\n\n@param bccs vararg of {@link EmailAddress}es to set.\n@return this",
        "predict": " Verifica que la entidad sea del tipo correcto.\n@param ResourceEntityInterface $entity\n@return boolean.\n\n    "
    },
    {
        "ID": 1421,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _get_datetimes(self, timestep=1): \"\"\"List of datetimes based on design day date and timestep.\"\"\" start_moy = DateTime(self._month, self._day_of_month).moy if timestep == 1: start_moy = start_moy + 30 num_moys = 24 * timestep return tuple( DateTime.from_moy(start_moy + (i * (1 / timestep) * 60)) for i in xrange(num_moys) )\n\n    ### Response: List of datetimes based on design day date and timestep..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void register(final Class type, final TypeJsonSerializer typeJsonSerializer) { map.put(type, typeJsonSerializer); cache.clear(); }\n\n    ### Response:",
        "ground_truth": "Registers new serializer.",
        "predict": " List of datetimes based on design day date and timestep..\n\n    "
    },
    {
        "ID": 1422,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static function make(string $path, int $ifExists = Directory::MAKE_DIRECTORY_EXISTS_THROW_EXCEPTION) : Directory { $exists = Directory::exists($path); if($exists) { if($ifExists === Directory::MAKE_DIRECTORY_EXISTS_OVERWRITE) { unlink($path); } else if($ifExists === Directory::MAKE_DIRECTORY_EXISTS_OPEN) { return new Directory($path); } else { throw new DirectoryAlreadyExists($path); } } if(!mkdir($path)) { throw new CouldntCreateDirectory($path); } return new Directory($path); }\n\n    ### Response: Makes a directory.\n\nThe second parameter specifies what to do in case directory already exists:\n\n* `\\Alexya\\FileSystem\\Directory::MAKE_DIRECTORY_EXISTS_THROW_EXCEPTION`, throws an exception (default).\n* `\\Alexya\\FileSystem\\Directory::MAKE_DIRECTORY_EXISTS_OVERWRITE`, deletes the directory and recreates it.\n* `\\Alexya\\FileSystem\\Directory::MAKE_DIRECTORY_EXISTS_OPEN`, opens the directory.\n\n@param string $path     Path to the directory.\n@param int    $ifExists What to do if directory exists.\n\n@return Directory Directory object.\n\n@throws DirectoryAlreadyExists If $path already exists as a directory.\n@throws CouldntCreateDirectory If the directory can't be created..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected TypeJsonSerializer lookupSerializer(final Class type) { TypeJsonSerializer tjs = map.get(type); if (tjs == null) { if (defaultSerializerMap != null) { tjs = defaultSerializerMap.map.get(type); } } return tjs; }\n\n    ### Response:",
        "ground_truth": "Get type serializer from map. First the current map is used.\nIf element is missing, default map will be used, if exist.",
        "predict": " Makes a directory.\n\nThe second parameter specifies what to do in case directory already exists:\n\n* `\\Alexya\\FileSystem\\Directory::MAKE_DIRECTORY_EXISTS_THROW_EXCEPTION`, throws an exception (default).\n* `\\Alexya\\FileSystem\\Directory::MAKE_DIRECTORY_EXISTS_OVERWRITE`, deletes the directory and recreates it.\n* `\\Alexya\\FileSystem\\Directory::MAKE_DIRECTORY_EXISTS_OPEN`, opens the directory.\n\n@param string $path     Path to the directory.\n@param int    $ifExists What to do if directory exists.\n\n@return Directory Directory object.\n\n@throws DirectoryAlreadyExists If $path already exists as a directory.\n@throws CouldntCreateDirectory If the directory can't be created..\n\n    "
    },
    {
        "ID": 1423,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function getDuplicates(): array { $dupes = []; foreach ($this->visitor->getCounts() as $type => $names) { foreach ($names as $name => $count) { if ($count > 1) { $dupes[] = [ 'type' => $type, 'name' => $type === 'globals' ? '$' . $name : ltrim($name, '\\\\'), 'count' => $count, ]; } } } usort($dupes, function (array $a, array $b): int { return $a['type'] <=> $b['type'] ?: $a['name'] <=> $b['name']; }); return $dupes; }\n\n    ### Response: Returns a list which includes any symbols for which more than one\ndeclaration was found during stub generation.\n\n@return (string|int)[][]\n@psalm-return array.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void parseRequestStream(final InputStream inputStream, final String encoding) throws IOException { setParsed(); MultipartRequestInputStream input = new MultipartRequestInputStream(inputStream); input.readBoundary(); while (true) { FileUploadHeader header = input.readDataHeader(encoding); if (header == null) { break; } if (header.isFile) { String fileName = header.fileName; if (fileName.length() > 0) { if (header.contentType.indexOf(\"application/x-macbinary\") > 0) { input.skipBytes(128); } } FileUpload newFile = fileUploadFactory.create(input); newFile.processStream(); if (fileName.length() == 0) { // file was specified, but no name was provided, therefore it was not uploaded if (newFile.getSize() == 0) { newFile.size = -1; } } putFile(header.formFieldName, newFile); } else { // no file, therefore it is regular form parameter. FastByteArrayOutputStream fbos = new FastByteArrayOutputStream(); input.copyAll(fbos); String value = encoding != null ? new String(fbos.toByteArray(), encoding) : new String(fbos.toByteArray()); putParameter(header.formFieldName, value); } input.skipBytes(1); input.mark(1); // read byte, but may be end of stream int nextByte = input.read(); if (nextByte == -1 || nextByte == '-') { input.reset(); break; } input.reset(); } }\n\n    ### Response:",
        "ground_truth": "Extracts uploaded files and parameters from the request data.",
        "predict": " Returns a list which includes any symbols for which more than one\ndeclaration was found during stub generation.\n\n@return (string|int)[][]\n@psalm-return array.\n\n    "
    },
    {
        "ID": 1424,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (m *Monitor) Run(looper director.Looper) { looper.Loop(func() error { log.Debugf(\"Running checks\") var wg sync.WaitGroup // Make immutable copy of m.Checks (checks are still mutable) m.RLock() checks := make(map[string]*Check, len(m.Checks)) for k, v := range m.Checks { checks[k] = v } m.RUnlock() wg.Add(len(checks)) for _, check := range checks { // Run all checks in parallel in goroutines resultChan := make(chan checkResult, 1) go func(check *Check, resultChan chan checkResult) { result, err := check.Command.Run(check.Args) resultChan <- checkResult{result, err} }(check, resultChan) // copy check pointer for the goroutine go func(check *Check, resultChan chan checkResult) { defer wg.Done() // We make the call but we time out if it gets too close to the // m.CheckInterval. select { case result := <-resultChan: check.UpdateStatus(result.status, result.err) case <-time.After(m.CheckInterval - 1*time.Millisecond): log.Errorf(\"Error, check %s timed out! (%v)\", check.ID, check.Args) check.UpdateStatus(UNKNOWN, errors.New(\"Timed out!\")) } }(check, resultChan) // copy check pointer for the goroutine } // Let's make sure we don't continue to spool up // huge quantities of goroutines. Wait on all of them // to complete before moving on. This could slow down // our check loop if something doesn't time out properly. wg.Wait() return nil }) }\n\n    ### Response: // Run runs the main monitoring loop. The looper controls the actual run behavior..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String getParameter(final String paramName) { if (requestParameters == null) { return null; } String[] values = requestParameters.get(paramName); if ((values != null) && (values.length > 0)) { return values[0]; } return null; }\n\n    ### Response:",
        "ground_truth": "Returns single value of a parameter. If parameter name is used for\nmore then one parameter, only the first one will be returned.\n\n@return parameter value, or null if not found",
        "predict": " // Run runs the main monitoring loop. The looper controls the actual run behavior..\n\n    "
    },
    {
        "ID": 1425,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function resolveCarbon($date = null) { if (!$date) { return $this->nowWithSameTz(); } if (is_string($date)) { return static::parse($date, $this->getTimezone()); } static::expectDateTime($date, ['null', 'string']); return $date instanceof self ? $date : static::instance($date); }\n\n    ### Response: Return the Carbon instance passed through, a now instance in the same timezone\nif null given or parse the input if string given.\n\n@param \\Carbon\\Carbon|\\DateTimeInterface|string|null $date\n\n@return static|CarbonInterface.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String[] getParameterValues(final String paramName) { if (requestParameters == null) { return null; } return requestParameters.get(paramName); }\n\n    ### Response:",
        "ground_truth": "Returns all values all of the values the given request parameter has.",
        "predict": " Return the Carbon instance passed through, a now instance in the same timezone\nif null given or parse the input if string given.\n\n@param \\Carbon\\Carbon|\\DateTimeInterface|string|null $date\n\n@return static|CarbonInterface.\n\n    "
    },
    {
        "ID": 1426,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function(topology) { const maxWireVersion = topology.lastIsMaster().maxWireVersion; if (maxWireVersion < RETRYABLE_WIRE_VERSION) { return false; } if (!topology.logicalSessionTimeoutMinutes) { return false; } if (topologyType(topology) === TopologyType.Single) { return false; } return true; }\n\n    ### Response: Determines whether the provided topology supports retryable writes\n\n@param {Mongos|Replset} topology.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public FileUpload getFile(final String paramName) { if (requestFiles == null) { return null; } FileUpload[] values = requestFiles.get(paramName); if ((values != null) && (values.length > 0)) { return values[0]; } return null; }\n\n    ### Response:",
        "ground_truth": "Returns uploaded file.\n@param paramName parameter name of the uploaded file\n@return uploaded file or null if parameter name not found",
        "predict": " Determines whether the provided topology supports retryable writes\n\n@param {Mongos|Replset} topology.\n\n    "
    },
    {
        "ID": 1427,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def open(options) password = (options[:password].nil? ? nil : options[:password].to_s) if !options[:server_id].nil? Klass.openRemote(@handle, options[:server_id].to_s, password) else Klass.openRemoteIP(@handle, options[:address].to_s, options[:port].to_i, password) end sleep 1 true end\n\n    ### Response: Opens a PhidgetDictionary over the WebService.\n If you are not programming with the block method, you will have to call this explicitly.\n This is called automatically if you are programming with the block method.\n\n Usage:\n\n Open a PhidgetDictionary using an address, port, and an optional password.\n  options = {:address => 'localhost', :port => 5001, :password => nil}\n  dict.open(options)\n\n Open a PhidgetDictionary using a server id, and an optional password.\n  options = {:server_id => 'localhost', :password => nil}\n  dict.open(options)\n @return [Boolean] returns true or raises an error.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public FileUpload[] getFiles(final String paramName) { if (requestFiles == null) { return null; } return requestFiles.get(paramName); }\n\n    ### Response:",
        "ground_truth": "Returns all uploaded files the given request parameter has.",
        "predict": " Opens a PhidgetDictionary over the WebService.\n If you are not programming with the block method, you will have to call this explicitly.\n This is called automatically if you are programming with the block method.\n\n Usage:\n\n Open a PhidgetDictionary using an address, port, and an optional password.\n  options = {:address => 'localhost', :port => 5001, :password => nil}\n  dict.open(options)\n\n Open a PhidgetDictionary using a server id, and an optional password.\n  options = {:server_id => 'localhost', :password => nil}\n  dict.open(options)\n @return [Boolean] returns true or raises an error.\n\n    "
    },
    {
        "ID": 1428,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def lnlike(self, theta): \"\"\" Logarithm of the likelihood \"\"\" params,loglike = self.params,self.loglike kwargs = dict(list(zip(params,theta))) try: lnlike = loglike.value(**kwargs) except ValueError as AssertionError: lnlike = -np.inf return lnlike\n\n    ### Response: Logarithm of the likelihood.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public void init(final FilterConfig filterConfig) { this.filterConfig = filterConfig; this.encoding = filterConfig.getInitParameter(\"encoding\"); if (this.encoding == null) { this.encoding = JoddCore.encoding; } this.ignore = Converter.get().toBooleanValue(filterConfig.getInitParameter(\"ignore\"), true); }\n\n    ### Response:",
        "ground_truth": "Place this filter into service.\n\n@param filterConfig The filter configuration object",
        "predict": " Logarithm of the likelihood.\n\n    "
    },
    {
        "ID": 1429,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _special_value_size(em): ''' handle \"size\" property, which has different behaviour for input vs everything else ''' if em.tagName == 'input': # TODO: \"size\" on an input is implemented very weirdly. Negative values are treated as invalid, # A value of \"0\" raises an exception (and does not set HTML attribute) # No upper limit. return convertToPositiveInt(em.getAttribute('size', 20), invalidDefault=20) return em.getAttribute('size', '')\n\n    ### Response: handle \"size\" property, which has different behaviour for input vs everything else.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void parse(final DbSqlBuilder sqlBuilder, final String template) { int length = template.length(); int last = 0; while (true) { int mark = template.indexOf('$', last); if (mark == -1) { if (last < length) { sqlBuilder.appendRaw(template.substring(last)); } break; } int escapesCount = countEscapes(template, mark); // check if escaped if (escapesCount > 0) { boolean isEscaped = escapesCount % 2 != 0; int escapesToAdd = escapesCount >> 1; sqlBuilder.appendRaw(template.substring(last, mark - escapesCount + escapesToAdd) + '$'); if (isEscaped) { last = mark + 1; continue; } } else { sqlBuilder.appendRaw(template.substring(last, mark)); } int end; if (template.startsWith(MACRO_TABLE, mark)) { mark += MACRO_TABLE.length(); end = findMacroEnd(template, mark); onTable(sqlBuilder, template.substring(mark, end)); } else if (template.startsWith(MACRO_COLUMN, mark)) { mark += MACRO_COLUMN.length(); end = findMacroEnd(template, mark); onColumn(sqlBuilder, template.substring(mark, end)); } else if (template.startsWith(MACRO_MATCH, mark)) { mark += MACRO_MATCH.length(); end = findMacroEnd(template, mark); onMatch(sqlBuilder, template.substring(mark, end)); } else if (template.startsWith(MACRO_VALUE, mark)) { mark += MACRO_VALUE.length(); end = findMacroEnd(template, mark); onValue(sqlBuilder, template.substring(mark, end)); } else { mark++; // reference found end = mark; // find macro end while (end < length) { if (!isReferenceChar(template, end)) { break; } end++; } onReference(sqlBuilder, template.substring(mark, end)); end--; } end++; last = end; } }\n\n    ### Response:",
        "ground_truth": "Parses template and returns generated sql builder.",
        "predict": " handle \"size\" property, which has different behaviour for input vs everything else.\n\n    "
    },
    {
        "ID": 1430,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (s *Selection) IsFunction(f func(int, *Selection) bool) bool { return s.FilterFunction(f).Length() > 0 }\n\n    ### Response: // IsFunction checks the current matched set of elements against a predicate and\n// returns true if at least one of these elements matches..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected int findMacroEnd(final String template, final int fromIndex) { int endIndex = template.indexOf('}', fromIndex); if (endIndex == -1) { throw new DbSqlBuilderException(\"Template syntax error, some macros are not closed. Error at: '...\" + template.substring(fromIndex)); } return endIndex; }\n\n    ### Response:",
        "ground_truth": "Finds macros end.",
        "predict": " // IsFunction checks the current matched set of elements against a predicate and\n// returns true if at least one of these elements matches..\n\n    "
    },
    {
        "ID": 1431,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function enableTracy($logDirectory = null, $email = null) { Tracy\\Debugger::$strictMode = true; Tracy\\Debugger::enable($this->mode, $logDirectory, $email); }\n\n    ### Response: Enable Tracy Tools.\n@param string $logDirectory\n@param string $email.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected int countEscapes(final String template, int macroIndex) { macroIndex--; int escapeCount = 0; while (macroIndex >= 0) { if (template.charAt(macroIndex) != ESCAPE_CHARACTER) { break; } escapeCount++; macroIndex--; } return escapeCount; }\n\n    ### Response:",
        "ground_truth": "Count escapes to the left.",
        "predict": " Enable Tracy Tools.\n@param string $logDirectory\n@param string $email.\n\n    "
    },
    {
        "ID": 1432,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function dontSeeMonthInYear($date, $month) { \\PHPUnit_Framework_Assert::assertNotEquals($month, $this->_ParseDate($date)->month); }\n\n    ### Response: See the month in the year is not a given value.\n\n@param string $date\n@param int    $month.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String buildQuery(final HttpMultiMap<?> queryMap, final String encoding) { if (queryMap.isEmpty()) { return StringPool.EMPTY; } int queryMapSize = queryMap.size(); StringBand query = new StringBand(queryMapSize * 4); int count = 0; for (Map.Entry<String, ?> entry : queryMap) { String key = entry.getKey(); key = URLCoder.encodeQueryParam(key, encoding); Object value = entry.getValue(); if (value == null) { if (count != 0) { query.append('&'); } query.append(key); count++; } else { if (count != 0) { query.append('&'); } query.append(key); count++; query.append('='); String valueString = URLCoder.encodeQueryParam(value.toString(), encoding); query.append(valueString); } } return query.toString(); }\n\n    ### Response:",
        "ground_truth": "Builds a query string from given query map.",
        "predict": " See the month in the year is not a given value.\n\n@param string $date\n@param int    $month.\n\n    "
    },
    {
        "ID": 1433,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void isSocketBindable(InetSocketAddress addr) throws IOException { if (addr == null) { return; } ServerSocket socket = new ServerSocket(); try { socket.bind(addr); } finally { socket.close(); } }\n\n    ### Response: Tries to bind to the given address. Throws an exception on failure.\nUsed to fail earlier and verify configuration values..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static HttpMultiMap<String> parseQuery(final String query, final boolean decode) { final HttpMultiMap<String> queryMap = HttpMultiMap.newCaseInsensitiveMap(); if (StringUtil.isBlank(query)) { return queryMap; } int lastNdx = 0; while (lastNdx < query.length()) { int ndx = query.indexOf('&', lastNdx); if (ndx == -1) { ndx = query.length(); } final String paramAndValue = query.substring(lastNdx, ndx); ndx = paramAndValue.indexOf('='); if (ndx == -1) { queryMap.add(paramAndValue, null); } else { String name = paramAndValue.substring(0, ndx); if (decode) { name = URLDecoder.decodeQuery(name); } String value = paramAndValue.substring(ndx + 1); if (decode) { value = URLDecoder.decodeQuery(value); } queryMap.add(name, value); } lastNdx += paramAndValue.length() + 1; } return queryMap; }\n\n    ### Response:",
        "ground_truth": "Parses query from give query string. Values are optionally decoded.",
        "predict": " Tries to bind to the given address. Throws an exception on failure.\nUsed to fail earlier and verify configuration values..\n\n    "
    },
    {
        "ID": 1434,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function isAuthentic() { if (!isset($this->unique_id) || !isset($this->notificationObj->signature)) { throw new \\Genesis\\Exceptions\\InvalidArgument( 'Missing field(s), required for validation!' ); } $messageSig = trim($this->notificationObj->signature); $customerPwd = trim(\\Genesis\\Config::getPassword()); switch (strlen($messageSig)) { default: case 40: $hashType = 'sha1'; break; case 128: $hashType = 'sha512'; break; } if ($messageSig === hash($hashType, $this->unique_id . $customerPwd)) { return true; } return false; }\n\n    ### Response: Verify the signature on the parsed Notification\n\n@return bool\n@throws \\Genesis\\Exceptions\\InvalidArgument.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String prepareHeaderParameterName(final String headerName) { // special cases if (headerName.equals(\"etag\")) { return HttpBase.HEADER_ETAG; } if (headerName.equals(\"www-authenticate\")) { return \"WWW-Authenticate\"; } char[] name = headerName.toCharArray(); boolean capitalize = true; for (int i = 0; i < name.length; i++) { char c = name[i]; if (c == '-') { capitalize = true; continue; } if (capitalize) { name[i] = Character.toUpperCase(c); capitalize = false; } else { name[i] = Character.toLowerCase(c); } } return new String(name); }\n\n    ### Response:",
        "ground_truth": "Makes nice header names.",
        "predict": " Verify the signature on the parsed Notification\n\n@return bool\n@throws \\Genesis\\Exceptions\\InvalidArgument.\n\n    "
    },
    {
        "ID": 1435,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String getKeyString(Server server, Query query, Result result, List<String> typeNames, String rootPrefix) { StringBuilder sb = new StringBuilder(); addRootPrefix(rootPrefix, sb); addAlias(server, sb); addSeparator(sb); addMBeanIdentifier(query, result, sb); addSeparator(sb); addTypeName(query, result, typeNames, sb); addKeyString(query, result, sb); return sb.toString(); }\n\n    ### Response: Gets the key string.\n\n\n@param server\n@param query      the query\n@param result     the result\n@param typeNames  the type names\n@param rootPrefix the root prefix\n@return the key string.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String extractMediaType(final String contentType) { int index = contentType.indexOf(';'); if (index == -1) { return contentType; } return contentType.substring(0, index); }\n\n    ### Response:",
        "ground_truth": "Extracts media-type from value of \"Content Type\" header.",
        "predict": " Gets the key string.\n\n\n@param server\n@param query      the query\n@param result     the result\n@param typeNames  the type names\n@param rootPrefix the root prefix\n@return the key string.\n\n    "
    },
    {
        "ID": 1436,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void addFiles(FileSet fs) { // Get the files included in the fileset. DirectoryScanner ds = fs.getDirectoryScanner(getProject()); // The base directory for all files. File basedir = ds.getBasedir(); // Loop over each file creating a File object. for (String f : ds.getIncludedFiles()) { if (SourceType.hasSourceFileExtension(f)) { sourceFiles.add(new File(basedir, f)); } } }\n\n    ### Response: Utility method that adds all of the files in a fileset to the list of\nfiles to be processed. Duplicate files appear only once in the final\nlist. Files not ending with a valid source file extension are ignored.\n\n@param fs\nFileSet from which to get the file names.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String toHtml(final Node node, final Appendable appendable) { NodeVisitor renderer = createRenderer(appendable); node.visit(renderer); return appendable.toString(); }\n\n    ### Response:",
        "ground_truth": "Renders node to appendable.",
        "predict": " Utility method that adds all of the files in a fileset to the list of\nfiles to be processed. Duplicate files appear only once in the final\nlist. Files not ending with a valid source file extension are ignored.\n\n@param fs\nFileSet from which to get the file names.\n\n    "
    },
    {
        "ID": 1437,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _handle_config_update(self, config_m, config_key): \"\"\"Handles changes in config values The method ensure that the correct list stores are updated with the new values. :param ConfigModel config_m: The config model that has been changed :param config_key: The config key who's value has been changed :return: \"\"\" if config_key == \"LIBRARY_PATHS\": self.update_libraries_list_store() if config_key == \"SHORTCUTS\": self.update_shortcut_settings() else: self.update_config_value(config_m, config_key)\n\n    ### Response: Handles changes in config values\n\n        The method ensure that the correct list stores are updated with the new values.\n\n\n        :param ConfigModel config_m: The config model that has been changed\n        :param config_key: The config key who's value has been changed\n        :return:.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String toInnerHtml(final Node node, final Appendable appendable) { NodeVisitor renderer = createRenderer(appendable); node.visitChildren(renderer); return appendable.toString(); }\n\n    ### Response:",
        "ground_truth": "Renders node children to appendable.",
        "predict": " Handles changes in config values\n\n        The method ensure that the correct list stores are updated with the new values.\n\n\n        :param ConfigModel config_m: The config model that has been changed\n        :param config_key: The config key who's value has been changed\n        :return:.\n\n    "
    },
    {
        "ID": 1438,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func Convert_core_Probe_To_v1_Probe(in *core.Probe, out *v1.Probe, s conversion.Scope) error { return autoConvert_core_Probe_To_v1_Probe(in, out, s) }\n\n    ### Response: // Convert_core_Probe_To_v1_Probe is an autogenerated conversion function..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void configureWith(final ServletContext servletContext) { webAppClassName = servletContext.getInitParameter(PARAM_MADVOC_WEBAPP); paramsFiles = Converter.get().toStringArray(servletContext.getInitParameter(PARAM_MADVOC_PARAMS)); madvocConfiguratorClassName = servletContext.getInitParameter(PARAM_MADVOC_CONFIGURATOR); }\n\n    ### Response:",
        "ground_truth": "Configures Madvoc by reading context init parameters.",
        "predict": " // Convert_core_Probe_To_v1_Probe is an autogenerated conversion function..\n\n    "
    },
    {
        "ID": 1439,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function ensureClassExists($name, $stmt) { if (!$this->classExists($name)) { throw $this->createError(\\sprintf('Class \\'%s\\' not found', $name), $stmt); } }\n\n    ### Response: Ensure that a referenced class exists.\n\n@throws FatalErrorException\n\n@param string $name\n@param Stmt   $stmt.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void reset() { this.ndx = 0; this.textLen = 0; this.path = new Path(); this.notFirstObject = false; if (useAltPaths) { path.altPath = new Path(); } if (classMetadataName != null) { mapToBean = createMapToBean(classMetadataName); } }\n\n    ### Response:",
        "ground_truth": "Resets JSON parser, so it can be reused.",
        "predict": " Ensure that a referenced class exists.\n\n@throws FatalErrorException\n\n@param string $name\n@param Stmt   $stmt.\n\n    "
    },
    {
        "ID": 1440,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _resolve_value(self, name): \"\"\" Returns an appropriate value for the given name. \"\"\" name = str(name) if name in self._metadata._meta.elements: element = self._metadata._meta.elements[name] # Look in instances for an explicit value if element.editable: value = getattr(self, name) if value: return value # Otherwise, return an appropriate default value (populate_from) populate_from = element.populate_from if isinstance(populate_from, collections.Callable): return populate_from(self, **self._populate_from_kwargs()) elif isinstance(populate_from, Literal): return populate_from.value elif populate_from is not NotSet: return self._resolve_value(populate_from) # If this is not an element, look for an attribute on metadata try: value = getattr(self._metadata, name) except AttributeError: pass else: if isinstance(value, collections.Callable): if getattr(value, '__self__', None): return value(self) else: return value(self._metadata, obj=self) return value\n\n    ### Response: Returns an appropriate value for the given name..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public JsonParser lazy(final boolean lazy) { this.lazy = lazy; this.mapSupplier = lazy ? LAZYMAP_SUPPLIER : HASHMAP_SUPPLIER; this.listSupplier = lazy ? LAZYLIST_SUPPLIER : ARRAYLIST_SUPPLIER; return this; }\n\n    ### Response:",
        "ground_truth": "Defines how JSON parser works. In non-lazy mode, the whole JSON is parsed as it is.\nIn the lazy mode, not everything is parsed, but some things are left lazy.\nThis way we gain performance, especially on partial usage of the whole JSON.\nHowever, be aware that parser holds the input memory until the returned\nobjects are disposed.",
        "predict": " Returns an appropriate value for the given name..\n\n    "
    },
    {
        "ID": 1441,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def stop(self): \"\"\"Stop all tasks, and the local proxy server if it's running.\"\"\" self._done() if self._server: self._server.stop() self._server = None log.info('Stop!')\n\n    ### Response: Stop all tasks, and the local proxy server if it's running..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected Class replaceWithMappedTypeForPath(final Class target) { if (mappings == null) { return target; } Class newType; // first try alt paths Path altPath = path.getAltPath(); if (altPath != null) { if (!altPath.equals(path)) { newType = mappings.get(altPath); if (newType != null) { return newType; } } } // now check regular paths newType = mappings.get(path); if (newType != null) { return newType; } return target; }\n\n    ### Response:",
        "ground_truth": "Replaces type with mapped type for current path.",
        "predict": " Stop all tasks, and the local proxy server if it's running..\n\n    "
    },
    {
        "ID": 1442,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (s *Server) HasChannel(name string) bool { _, ok := s.channels[name] return ok }\n\n    ### Response: // HasChannel returns true if the channel associated with name exists..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public <T> List<T> parseAsList(final String string, final Class<T> componentType) { return new JsonParser() .map(JsonParser.VALUES, componentType) .parse(string); }\n\n    ### Response:",
        "ground_truth": "Parses input JSON to a list with specified component type.",
        "predict": " // HasChannel returns true if the channel associated with name exists..\n\n    "
    },
    {
        "ID": 1443,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function isMatch($selector){ return $this->isMatchingTail($selector->getEnd(), $this->depth - 1, count($this->stack[$this->depth - 1]) - 1); }\n\n    ### Response: Returns true if this path matches the give selector\n@param \\csslib\\Selector $selector\n@return boolean.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public <K, V> Map<K, V> parseAsMap( final String string, final Class<K> keyType, final Class<V> valueType) { return new JsonParser() .map(JsonParser.KEYS, keyType) .map(JsonParser.VALUES, valueType) .parse(string); }\n\n    ### Response:",
        "ground_truth": "Parses input JSON to a list with specified key and value types.",
        "predict": " Returns true if this path matches the give selector\n@param \\csslib\\Selector $selector\n@return boolean.\n\n    "
    },
    {
        "ID": 1444,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void setFieldNames(List<String> fieldNames) { this.fieldNames = fieldNames; if (fields.length != fieldNames.size()) { Object[] oldFields = fields; fields = new Object[fieldNames.size()]; System.arraycopy(oldFields, 0, fields, 0, Math.min(oldFields.length, fieldNames.size())); } }\n\n    ### Response: Change the names and number of fields in the struct. No effect if the number of\nfields is the same. The old field values are copied to the new array.\n@param numFields the new number of fields.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private Object resolveLazyValue(Object value) { if (value instanceof Supplier) { value = ((Supplier)value).get(); } return value; }\n\n    ### Response:",
        "ground_truth": "Resolves lazy value during the parsing runtime.",
        "predict": " Change the names and number of fields in the struct. No effect if the number of\nfields is the same. The old field values are copied to the new array.\n@param numFields the new number of fields.\n\n    "
    },
    {
        "ID": 1445,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (bc *BuildController) getBuildByKey(key string) (*buildv1.Build, error) { obj, exists, err := bc.buildInformer.GetIndexer().GetByKey(key) if err != nil { klog.V(2).Infof(\"Unable to retrieve build %q from store: %v\", key, err) return nil, err } if !exists { klog.V(2).Infof(\"Build %q has been deleted\", key) return nil, nil } return obj.(*buildv1.Build), nil }\n\n    ### Response: // getBuildByKey looks up a build by key in the buildInformer cache.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void skipObject() { int bracketCount = 1; boolean insideString = false; while (ndx < total) { final char c = input[ndx]; if (insideString) { if (c == '\\\"' && notPrecededByEvenNumberOfBackslashes()) { insideString = false; } } else if (c == '\\\"') { insideString = true; } else if (c == '{') { bracketCount++; } else if (c == '}') { bracketCount--; if (bracketCount == 0) { ndx++; return; } } ndx++; } }\n\n    ### Response:",
        "ground_truth": "Skips over complete object. It is not parsed, just skipped. It will be\nparsed later, but only if required.",
        "predict": " // getBuildByKey looks up a build by key in the buildInformer cache.\n\n    "
    },
    {
        "ID": 1446,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected final void addChrstianHoliday (final ChronoLocalDate aDate, final String sPropertiesKey, final IHolidayType aHolidayType, final HolidayMap holidays) { final LocalDate convertedDate = LocalDate.from (aDate); holidays.add (convertedDate, new ResourceBundleHoliday (aHolidayType, sPropertiesKey)); }\n\n    ### Response: Adds the given day to the list of holidays.\n\n@param aDate\nThe day\n@param sPropertiesKey\na {@link java.lang.String} object.\n@param aHolidayType\na {@link HolidayType} object.\n@param holidays\na {@link java.util.Set} object..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected String parseString() { char quote = '\\\"'; if (looseMode) { quote = consumeOneOf('\\\"', '\\''); if (quote == 0) { return parseUnquotedStringContent(); } } else { consume(quote); } return parseStringContent(quote); }\n\n    ### Response:",
        "ground_truth": "Parses a string.",
        "predict": " Adds the given day to the list of holidays.\n\n@param aDate\nThe day\n@param sPropertiesKey\na {@link java.lang.String} object.\n@param aHolidayType\na {@link HolidayType} object.\n@param holidays\na {@link java.util.Set} object..\n\n    "
    },
    {
        "ID": 1447,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public ServiceCall<QueryEntitiesResponse> queryEntities(QueryEntitiesOptions queryEntitiesOptions) { Validator.notNull(queryEntitiesOptions, \"queryEntitiesOptions cannot be null\"); String[] pathSegments = { \"v1/environments\", \"collections\", \"query_entities\" }; String[] pathParameters = { queryEntitiesOptions.environmentId(), queryEntitiesOptions.collectionId() }; RequestBuilder builder = RequestBuilder.post(RequestBuilder.constructHttpUrl(getEndPoint(), pathSegments, pathParameters)); builder.query(\"version\", versionDate); Map<String, String> sdkHeaders = SdkCommon.getSdkHeaders(\"discovery\", \"v1\", \"queryEntities\"); for (Entry<String, String> header : sdkHeaders.entrySet()) { builder.header(header.getKey(), header.getValue()); } builder.header(\"Accept\", \"application/json\"); final JsonObject contentJson = new JsonObject(); if (queryEntitiesOptions.feature() != null) { contentJson.addProperty(\"feature\", queryEntitiesOptions.feature()); } if (queryEntitiesOptions.entity() != null) { contentJson.add(\"entity\", GsonSingleton.getGson().toJsonTree(queryEntitiesOptions.entity())); } if (queryEntitiesOptions.context() != null) { contentJson.add(\"context\", GsonSingleton.getGson().toJsonTree(queryEntitiesOptions.context())); } if (queryEntitiesOptions.count() != null) { contentJson.addProperty(\"count\", queryEntitiesOptions.count()); } if (queryEntitiesOptions.evidenceCount() != null) { contentJson.addProperty(\"evidence_count\", queryEntitiesOptions.evidenceCount()); } builder.bodyJson(contentJson); return createServiceCall(builder.build(), ResponseConverterUtils.getObject(QueryEntitiesResponse.class)); }\n\n    ### Response: Knowledge Graph entity query.\n\nSee the [Knowledge Graph documentation](https://cloud.ibm.com/docs/services/discovery?topic=discovery-kg#kg) for\nmore details.\n\n@param queryEntitiesOptions the {@link QueryEntitiesOptions} containing the options for the call\n@return a {@link ServiceCall} with a response type of {@link QueryEntitiesResponse}.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected String parseStringContent(final char quote) { final int startNdx = ndx; // roll-out until the end of the string or the escape char while (true) { final char c = input[ndx]; if (c == quote) { // no escapes found, just use existing string ndx++; return new String(input, startNdx, ndx - 1 - startNdx); } if (c == '\\\\') { break; } ndx++; } // escapes found, proceed differently textLen = ndx - startNdx; growEmpty(); // for (int i = startNdx, j = 0; j < textLen; i++, j++) { // text[j] = input[i]; // } System.arraycopy(input, startNdx, text, 0, textLen); // escape char, process everything until the end while (true) { char c = input[ndx]; if (c == quote) { // done ndx++; final String str = new String(text, 0, textLen); textLen = 0; return str; } if (c == '\\\\') { // escape char found ndx++; c = input[ndx]; switch (c) { case '\\\"' : c = '\\\"'; break; case '\\\\' : c = '\\\\'; break; case '/' : c = '/'; break; case 'b' : c = '\\b'; break; case 'f' : c = '\\f'; break; case 'n' : c = '\\n'; break; case 'r' : c = '\\r'; break; case 't' : c = '\\t'; break; case 'u' : ndx++; c = parseUnicode(); break; default: if (looseMode) { if (c != '\\'') { c = '\\\\'; ndx--; } } else { syntaxError(\"Invalid escape char: \" + c); } } } text[textLen] = c; textLen++; growAndCopy(); ndx++; } }\n\n    ### Response:",
        "ground_truth": "Parses string content, once when starting quote has been consumed.",
        "predict": " Knowledge Graph entity query.\n\nSee the [Knowledge Graph documentation](https://cloud.ibm.com/docs/services/discovery?topic=discovery-kg#kg) for\nmore details.\n\n@param queryEntitiesOptions the {@link QueryEntitiesOptions} containing the options for the call\n@return a {@link ServiceCall} with a response type of {@link QueryEntitiesResponse}.\n\n    "
    },
    {
        "ID": 1448,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function execute() { $quoteId = $this->getRequest()->getParam('quote_id'); //no quote id redirect to base url if (!$quoteId) { return $this->_redirect(''); } /** @var \\Magento\\Quote\\Model\\Quote $quoteModel */ $quoteModel = $this->quoteFactory->create(); $this->quoteResource->load($quoteModel, $quoteId); //no quote id redirect to base url if (! $quoteModel->getId()) { return $this->_redirect(''); } //set quoteModel to _quote property for later use $this->quote = $quoteModel; if ($quoteModel->getCustomerId()) { return $this->handleCustomerBasket(); } else { return $this->handleGuestBasket(); } }\n\n    ### Response: Wishlist page to display the user items with specific email.\n\n@return null.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected char parseUnicode() { int i0 = CharUtil.hex2int(input[ndx++]); int i1 = CharUtil.hex2int(input[ndx++]); int i2 = CharUtil.hex2int(input[ndx++]); int i3 = CharUtil.hex2int(input[ndx]); return (char) ((i0 << 12) + (i1 << 8) + (i2 << 4) + i3); }\n\n    ### Response:",
        "ground_truth": "Parses 4 characters and returns unicode character.",
        "predict": " Wishlist page to display the user items with specific email.\n\n@return null.\n\n    "
    },
    {
        "ID": 1449,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function checkErrors($response) { $body = $response->body; $httpStatusCode = $response->status_code; try { $body = json_decode($response->body, true); } catch (Exception $e) { $this->throwServerError($body, $httpStatusCode); } if (($httpStatusCode < 200) or ($httpStatusCode >= 300)) { $this->processError($body, $httpStatusCode, $response); } }\n\n    ### Response: Process the statusCode of the response and throw exception if necessary\n@param Object $response The response object returned by Requests.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected String parseUnquotedStringContent() { final int startNdx = ndx; while (true) { final char c = input[ndx]; if (c <= ' ' || CharUtil.equalsOne(c, UNQUOTED_DELIMETERS)) { final int currentNdx = ndx; // done skipWhiteSpaces(); return new String(input, startNdx, currentNdx - startNdx); } ndx++; } }\n\n    ### Response:",
        "ground_truth": "Parses un-quoted string content.",
        "predict": " Process the statusCode of the response and throw exception if necessary\n@param Object $response The response object returned by Requests.\n\n    "
    },
    {
        "ID": 1450,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void updateInitSignature(int idx, State<O> succ, O out) { StateSignature<O> sig = init.getSignature(); State<O> oldSucc = sig.successors.array[idx]; if (oldSucc == succ && Objects.equals(out, sig.outputs.array[idx])) { return; } if (oldSucc != null) { oldSucc.decreaseIncoming(); } sig.successors.array[idx] = succ; sig.outputs.array[idx] = out; succ.increaseIncoming(); }\n\n    ### Response: Updates the signature of the initial state, changing both the successor state and the output symbol.\n\n@param idx\nthe transition index to change\n@param succ\nthe new successor state\n@param out\nthe output symbol.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected Number parseNumber() { final int startIndex = ndx; char c = input[ndx]; boolean isDouble = false; boolean isExp = false; if (c == '-') { ndx++; } while (true) { if (isEOF()) { break; } c = input[ndx]; if (c >= '0' && c <= '9') { ndx++; continue; } if (c <= 32) { // white space break; } if (c == ',' || c == '}' || c == ']') { // delimiter break; } if (c == '.') { isDouble = true; } else if (c == 'e' || c == 'E') { isExp = true; } ndx++; } final String value = new String(input, startIndex, ndx - startIndex); if (isDouble) { return Double.valueOf(value); } long longNumber; if (isExp) { longNumber = Double.valueOf(value).longValue(); } else { if (value.length() >= 19) { // if string is 19 chars and longer, it can be over the limit BigInteger bigInteger = new BigInteger(value); if (isGreaterThanLong(bigInteger)) { return bigInteger; } longNumber = bigInteger.longValue(); } else { longNumber = Long.parseLong(value); } } if ((longNumber >= Integer.MIN_VALUE) && (longNumber <= Integer.MAX_VALUE)) { return (int) longNumber; } return longNumber; }\n\n    ### Response:",
        "ground_truth": "Parses JSON numbers.",
        "predict": " Updates the signature of the initial state, changing both the successor state and the output symbol.\n\n@param idx\nthe transition index to change\n@param succ\nthe new successor state\n@param out\nthe output symbol.\n\n    "
    },
    {
        "ID": 1451,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def phi_coef_curve(self, delta_tau=0.01): \"\"\" Computes the relationship between probability threshold and classification phi coefficient. \"\"\" # compute thresholds based on the sorted probabilities orig_thresh = self.threshold sorted_labels, sorted_probs = self.sorted_values scores = [] taus = [] tau = 0 for k in range(len(sorted_labels)): # compute new accuracy self.threshold = tau scores.append(self.phi_coef) taus.append(tau) # update threshold tau = sorted_probs[k] # add last datapoint tau = 1.0 self.threshold = tau scores.append(self.phi_coef) taus.append(tau) self.threshold = orig_thresh return scores, taus\n\n    ### Response: Computes the relationship between probability threshold\n        and classification phi coefficient..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected Object parseArrayContent(Class targetType, Class componentType) { // detect special case if (targetType == Object.class) { targetType = List.class; } // continue targetType = replaceWithMappedTypeForPath(targetType); if (componentType == null && targetType != null && targetType.isArray()) { componentType = targetType.getComponentType(); } path.push(VALUES); componentType = replaceWithMappedTypeForPath(componentType); Collection<Object> target = newArrayInstance(targetType); boolean koma = false; mainloop: while (true) { skipWhiteSpaces(); char c = input[ndx]; if (c == ']') { if (koma) { syntaxError(\"Trailing comma\"); } ndx++; path.pop(); return target; } Object value = parseValue(componentType, null, null); target.add(value); skipWhiteSpaces(); c = input[ndx]; switch (c) { case ']': ndx++; break mainloop; case ',': ndx++; koma = true; break; default: syntaxError(\"Invalid char: expected ] or ,\"); } } path.pop(); if (targetType != null) { return convertType(target, targetType); } return target; }\n\n    ### Response:",
        "ground_truth": "Parses arrays, once when open bracket has been consumed.",
        "predict": " Computes the relationship between probability threshold\n        and classification phi coefficient..\n\n    "
    },
    {
        "ID": 1452,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function getCustomerOutstandingInvoices($code = null) { $subscription = $this->getCustomerSubscription($code); foreach ($subscription['invoices'] as $key => $i) { // if the billing date is in the future or has been paid if ($i['paidTransactionId'] || strtotime($i['billingDatetime']) > time()) { unset($subscription['invoices'][$key]); } } if ($subscription['invoices']) { return $subscription['invoices']; } return false; }\n\n    ### Response: Get an array representation of a single customer's outstanding invoices\n\n@param $code string your code for the customer - required if more than one customer is in the response\n@throws CheddarGetter_Response_Exception if the response type is incompatible or if a $code is not provided and the response contains more than one customer\n@return array|false.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void createEmptyCtor() { final MethodVisitor mv = wd.dest.visitMethod(AsmUtil.ACC_PUBLIC, INIT, \"()V\", null, null); mv.visitCode(); mv.visitVarInsn(Opcodes.ALOAD, 0); mv.visitMethodInsn( Opcodes.INVOKESPECIAL, AsmUtil.SIGNATURE_JAVA_LANG_OBJECT, INIT, \"()V\", false); mv.visitInsn(Opcodes.RETURN); mv.visitMaxs(1, 1); mv.visitEnd(); }\n\n    ### Response:",
        "ground_truth": "Created empty default constructor.",
        "predict": " Get an array representation of a single customer's outstanding invoices\n\n@param $code string your code for the customer - required if more than one customer is in the response\n@throws CheddarGetter_Response_Exception if the response type is incompatible or if a $code is not provided and the response contains more than one customer\n@return array|false.\n\n    "
    },
    {
        "ID": 1453,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    BlockInfo[] setReplication(String src, short replication, int[] oldReplication ) throws IOException { waitForReady(); BlockInfo[] fileBlocks = unprotectedSetReplication(src, replication, oldReplication); if (fileBlocks != null) // log replication change fsImage.getEditLog().logSetReplication(src, replication); return fileBlocks; }\n\n    ### Response: Set file replication\n\n@param src file name\n@param replication new replication\n@param oldReplication old replication - output parameter\n@return array of file blocks\n@throws IOException.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void createSimpleMethodWrapper(final MethodSignatureVisitor msign) { int access = msign.getAccessFlags(); access &= ~ACC_ABSTRACT; access &= ~ACC_NATIVE; MethodVisitor mv = wd.dest.visitMethod( access, msign.getMethodName(), msign.getDescription(), msign.getAsmMethodSignature(), msign.getExceptions()); mv.visitCode(); mv.visitVarInsn(ALOAD, 0); mv.visitFieldInsn(GETFIELD, wd.thisReference, wd.wrapperRef, wd.wrapperType); loadVirtualMethodArguments(mv, msign); if (wd.wrapInterface) { mv.visitMethodInsn( INVOKEINTERFACE, wd.wrapperType.substring(1, wd.wrapperType.length() - 1), msign.getMethodName(), msign.getDescription(), true); } else { mv.visitMethodInsn( INVOKEVIRTUAL, wd.wrapperType.substring(1, wd.wrapperType.length() - 1), msign.getMethodName(), msign.getDescription(), false); } ProxettaAsmUtil.prepareReturnValue(mv, msign, 0); visitReturn(mv, msign, true); mv.visitMaxs(0, 0); mv.visitEnd(); }\n\n    ### Response:",
        "ground_truth": "Creates simple method wrapper without proxy.",
        "predict": " Set file replication\n\n@param src file name\n@param replication new replication\n@param oldReplication old replication - output parameter\n@return array of file blocks\n@throws IOException.\n\n    "
    },
    {
        "ID": 1454,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void onClick(View targetView, BaseCell cell, int eventType) { if (cell instanceof Cell) { onClick(targetView, (Cell) cell, eventType); } else { onClick(targetView, cell, eventType, null); } }\n\n    ### Response: Handler click event on item\n\n@param targetView the view that trigger the click event, not the view respond the cell!\n@param cell       the corresponding cell\n@param eventType       click event type, defined by developer..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private String resolveRawTypeName(String typeName) { if (typeName == null) { return null; } boolean isArray = typeName.startsWith(StringPool.LEFT_SQ_BRACKET); if (isArray) { typeName = typeName.substring(1); } String rawTypeName; if (generics.containsKey(typeName)) { rawTypeName = generics.get(typeName); } else { rawTypeName = declaredTypeGeneric.getOrDefault(typeName, typeName); } if (isArray) { rawTypeName = '[' + rawTypeName; } return rawTypeName; }\n\n    ### Response:",
        "ground_truth": "Resolves raw type name using the generics information from the class\nor method information.",
        "predict": " Handler click event on item\n\n@param targetView the view that trigger the click event, not the view respond the cell!\n@param cell       the corresponding cell\n@param eventType       click event type, defined by developer..\n\n    "
    },
    {
        "ID": 1455,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func Convert_v1beta1_DeploymentCondition_To_apps_DeploymentCondition(in *v1beta1.DeploymentCondition, out *apps.DeploymentCondition, s conversion.Scope) error { return autoConvert_v1beta1_DeploymentCondition_To_apps_DeploymentCondition(in, out, s) }\n\n    ### Response: // Convert_v1beta1_DeploymentCondition_To_apps_DeploymentCondition is an autogenerated conversion function..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public BeanReferences resolveReferenceFromValue(final PropertyDescriptor propertyDescriptor, final String refName) { BeanReferences references; if (refName == null || refName.isEmpty()) { references = buildDefaultReference(propertyDescriptor); } else { references = BeanReferences.of(refName); } references = references.removeDuplicateNames(); return references; }\n\n    ### Response:",
        "ground_truth": "Resolves reference from given values. Returns bean reference of given value or defaults\nif given name is blank.",
        "predict": " // Convert_v1beta1_DeploymentCondition_To_apps_DeploymentCondition is an autogenerated conversion function..\n\n    "
    },
    {
        "ID": 1456,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def get_image_code(self, id_code, access_token=None, user_id=None): \"\"\" Get the image of a code, by its id \"\"\" if access_token: self.req.credential.set_token(access_token) if user_id: self.req.credential.set_user_id(user_id) if not self.check_credentials(): raise CredentialsError('credentials invalid') return self.req.get('/Codes/' + id_code + '/export/png/url')\n\n    ### Response: Get the image of a code, by its id.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public BeanReferences[] resolveReferenceFromValues(final Executable methodOrCtor, final String... parameterReferences) { BeanReferences[] references = convertRefToReferences(parameterReferences); if (references == null || references.length == 0) { references = buildDefaultReferences(methodOrCtor); } if (methodOrCtor.getParameterTypes().length != references.length) { throw new PetiteException(\"Different number of method parameters and references for: \" + methodOrCtor.getDeclaringClass().getName() + '#' + methodOrCtor.getName()); } removeAllDuplicateNames(references); return references; }\n\n    ### Response:",
        "ground_truth": "Takes given parameters references and returns reference set for given method or constructor.",
        "predict": " Get the image of a code, by its id.\n\n    "
    },
    {
        "ID": 1457,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def calc_et0_wet0_v1(self): \"\"\"Correct the given reference evapotranspiration and update the corresponding log sequence. Required control parameters: |NHRU| |KE| |WfET0| Required input sequence: |PET| Calculated flux sequence: |ET0| Updated log sequence: |WET0| Basic equations: :math:`ET0_{new} = WfET0 \\\\cdot KE \\\\cdot PET + (1-WfET0) \\\\cdot ET0_{alt}` Example: Prepare four hydrological response units with different value combinations of parameters |KE| and |WfET0|: >>> from hydpy.models.lland import * >>> parameterstep('1d') >>> simulationstep('12h') >>> nhru(4) >>> ke(0.8, 1.2, 0.8, 1.2) >>> wfet0(2.0, 2.0, 0.2, 0.2) Note that the actual value of time dependend parameter |WfET0| is reduced due the difference between the given parameter and simulation time steps: >>> from hydpy import round_ >>> round_(wfet0.values) 1.0, 1.0, 0.1, 0.1 For the first two hydrological response units, the given |PET| value is modified by -0.4 mm and +0.4 mm, respectively. For the other two response units, which weight the \"new\" evaporation value with 10 %, |ET0| does deviate from the old value of |WET0| by -0.04 mm and +0.04 mm only: >>> inputs.pet = 2.0 >>> logs.wet0 = 2.0 >>> model.calc_et0_wet0_v1() >>> fluxes.et0 et0(1.6, 2.4, 1.96, 2.04) >>> logs.wet0 wet0([[1.6, 2.4, 1.96, 2.04]]) \"\"\" con = self.parameters.control.fastaccess inp = self.sequences.inputs.fastaccess flu = self.sequences.fluxes.fastaccess log = self.sequences.logs.fastaccess for k in range(con.nhru): flu.et0[k] = (con.wfet0[k]*con.ke[k]*inp.pet + (1.-con.wfet0[k])*log.wet0[0, k]) log.wet0[0, k] = flu.et0[k]\n\n    ### Response: Correct the given reference evapotranspiration and update the\n    corresponding log sequence.\n\n    Required control parameters:\n      |NHRU|\n      |KE|\n      |WfET0|\n\n    Required input sequence:\n      |PET|\n\n    Calculated flux sequence:\n      |ET0|\n\n    Updated log sequence:\n      |WET0|\n\n    Basic equations:\n      :math:`ET0_{new} = WfET0 \\\\cdot KE \\\\cdot PET +\n      (1-WfET0) \\\\cdot ET0_{alt}`\n\n    Example:\n\n        Prepare four hydrological response units with different value\n        combinations of parameters |KE| and |WfET0|:\n\n        >>> from hydpy.models.lland import *\n        >>> parameterstep('1d')\n        >>> simulationstep('12h')\n        >>> nhru(4)\n        >>> ke(0.8, 1.2, 0.8, 1.2)\n        >>> wfet0(2.0, 2.0, 0.2, 0.2)\n\n        Note that the actual value of time dependend parameter |WfET0|\n        is reduced due the difference between the given parameter and\n        simulation time steps:\n\n        >>> from hydpy import round_\n        >>> round_(wfet0.values)\n        1.0, 1.0, 0.1, 0.1\n\n        For the first two hydrological response units, the given |PET|\n        value is modified by -0.4 mm and +0.4 mm, respectively.  For the\n        other two response units, which weight the \"new\" evaporation\n        value with 10 %, |ET0| does deviate from the old value of |WET0|\n        by -0.04 mm and +0.04 mm only:\n\n        >>> inputs.pet = 2.0\n        >>> logs.wet0 = 2.0\n        >>> model.calc_et0_wet0_v1()\n        >>> fluxes.et0\n        et0(1.6, 2.4, 1.96, 2.04)\n        >>> logs.wet0\n        wet0([[1.6, 2.4, 1.96, 2.04]]).\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public BeanReferences[] readAllReferencesFromAnnotation(final Executable methodOrCtor) { PetiteInject petiteInject = methodOrCtor.getAnnotation(PetiteInject.class); final Parameter[] parameters = methodOrCtor.getParameters(); BeanReferences[] references; final boolean hasAnnotationOnMethodOrCtor; if (petiteInject != null) { references = convertAnnValueToReferences(petiteInject.value()); hasAnnotationOnMethodOrCtor = true; } else { references = new BeanReferences[parameters.length]; hasAnnotationOnMethodOrCtor = false; } int parametersWithAnnotationCount = 0; for (int i = 0; i < parameters.length; i++) { Parameter parameter = parameters[i]; petiteInject = parameter.getAnnotation(PetiteInject.class); if (petiteInject == null) { // no annotation on argument continue; } // there is annotation on argument, override values String annotationValue = readAnnotationValue(petiteInject); if (annotationValue != null) { references[i] = BeanReferences.of(annotationValue); } parametersWithAnnotationCount++; } if (!hasAnnotationOnMethodOrCtor) { if (parametersWithAnnotationCount == 0) { return null; } if (parametersWithAnnotationCount != parameters.length) { throw new PetiteException(\"All arguments must be annotated with PetiteInject\"); } } references = updateReferencesWithDefaultsIfNeeded(methodOrCtor, references); removeAllDuplicateNames(references); return references; }\n\n    ### Response:",
        "ground_truth": "Extracts references from method or constructor annotation.",
        "predict": " Correct the given reference evapotranspiration and update the\n    corresponding log sequence.\n\n    Required control parameters:\n      |NHRU|\n      |KE|\n      |WfET0|\n\n    Required input sequence:\n      |PET|\n\n    Calculated flux sequence:\n      |ET0|\n\n    Updated log sequence:\n      |WET0|\n\n    Basic equations:\n      :math:`ET0_{new} = WfET0 \\\\cdot KE \\\\cdot PET +\n      (1-WfET0) \\\\cdot ET0_{alt}`\n\n    Example:\n\n        Prepare four hydrological response units with different value\n        combinations of parameters |KE| and |WfET0|:\n\n        >>> from hydpy.models.lland import *\n        >>> parameterstep('1d')\n        >>> simulationstep('12h')\n        >>> nhru(4)\n        >>> ke(0.8, 1.2, 0.8, 1.2)\n        >>> wfet0(2.0, 2.0, 0.2, 0.2)\n\n        Note that the actual value of time dependend parameter |WfET0|\n        is reduced due the difference between the given parameter and\n        simulation time steps:\n\n        >>> from hydpy import round_\n        >>> round_(wfet0.values)\n        1.0, 1.0, 0.1, 0.1\n\n        For the first two hydrological response units, the given |PET|\n        value is modified by -0.4 mm and +0.4 mm, respectively.  For the\n        other two response units, which weight the \"new\" evaporation\n        value with 10 %, |ET0| does deviate from the old value of |WET0|\n        by -0.04 mm and +0.04 mm only:\n\n        >>> inputs.pet = 2.0\n        >>> logs.wet0 = 2.0\n        >>> model.calc_et0_wet0_v1()\n        >>> fluxes.et0\n        et0(1.6, 2.4, 1.96, 2.04)\n        >>> logs.wet0\n        wet0([[1.6, 2.4, 1.96, 2.04]]).\n\n    "
    },
    {
        "ID": 1458,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function copyMerged(source, target) { for (var key, descriptor, value, tvalue, names = oK(source), i = 0; i < names.length; i++ ) { key = names[i]; descriptor = gOPD(source, key); // target already has this property if (hOP.call(target, key)) { // verify the descriptor can be merged if (hOP.call(descriptor, VALUE)) { value = descriptor[VALUE]; // which means, verify it's an object if (isObject(value)) { // in such case, verify the target can be modified descriptor = gOPD(target, key); // meaning verify it's a data descriptor if (hOP.call(descriptor, VALUE)) { tvalue = descriptor[VALUE]; // and it's actually an object if (isObject(tvalue)) { copyMerged(value, tvalue); } } } } } else { // target has no property at all if (hOP.call(descriptor, VALUE)) { // copy deep if it's an object copyValueIfObject(descriptor, copyDeep); } defineProperty(target, key, descriptor); } } }\n\n    ### Response: given two objects, performs a deep copy per each property not present in the target otherwise merges, without overwriting, all properties within the object.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private BeanReferences[] buildDefaultReferences(final Executable methodOrCtor) { final boolean useParamo = petiteConfig.getUseParamo(); final PetiteReferenceType[] lookupReferences = petiteConfig.getLookupReferences(); MethodParameter[] methodParameters = null; if (useParamo) { methodParameters = Paramo.resolveParameters(methodOrCtor); } final Class[] paramTypes = methodOrCtor.getParameterTypes(); final BeanReferences[] references = new BeanReferences[paramTypes.length]; for (int j = 0; j < paramTypes.length; j++) { String[] ref = new String[lookupReferences.length]; references[j] = BeanReferences.of(ref); for (int i = 0; i < ref.length; i++) { switch (lookupReferences[i]) { case NAME: ref[i] = methodParameters != null ? methodParameters[j].getName() : null; break; case TYPE_SHORT_NAME: ref[i] = StringUtil.uncapitalize(paramTypes[j].getSimpleName()); break; case TYPE_FULL_NAME: ref[i] = paramTypes[j].getName(); break; } } } return references; }\n\n    ### Response:",
        "ground_truth": "Builds default method references.",
        "predict": " given two objects, performs a deep copy per each property not present in the target otherwise merges, without overwriting, all properties within the object.\n\n    "
    },
    {
        "ID": 1459,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func NewAuthorizerFromCLI() (autorest.Authorizer, error) { settings, err := GetSettingsFromEnvironment() if err != nil { return nil, err } if settings.Values[Resource] == \"\" { settings.Values[Resource] = settings.Environment.ResourceManagerEndpoint } return NewAuthorizerFromCLIWithResource(settings.Values[Resource]) }\n\n    ### Response: // NewAuthorizerFromCLI creates an Authorizer configured from Azure CLI 2.0 for local development scenarios..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public BeanReferences buildDefaultReference(final PropertyDescriptor propertyDescriptor) { final PetiteReferenceType[] lookupReferences = petiteConfig.getLookupReferences(); final String[] references = new String[lookupReferences.length]; for (int i = 0; i < references.length; i++) { switch (lookupReferences[i]) { case NAME: references[i] = propertyDescriptor.getName(); break; case TYPE_SHORT_NAME: references[i] = StringUtil.uncapitalize(propertyDescriptor.getType().getSimpleName()); break; case TYPE_FULL_NAME: references[i] = propertyDescriptor.getType().getName(); break; } } return BeanReferences.of(references); }\n\n    ### Response:",
        "ground_truth": "Builds default field references.",
        "predict": " // NewAuthorizerFromCLI creates an Authorizer configured from Azure CLI 2.0 for local development scenarios..\n\n    "
    },
    {
        "ID": 1460,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function checkApiKey(key) { if (!GLOBAL.config.apis || !GLOBAL.config.apis[key]) { GLOBAL.error('no GLOBAL.config.apis.bing'); return false; } return true; }\n\n    ### Response: Check if an API key exists, return false if not.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void removeAllDuplicateNames(final BeanReferences[] allBeanReferences) { for (int i = 0; i < allBeanReferences.length; i++) { BeanReferences references = allBeanReferences[i]; allBeanReferences[i] = references.removeDuplicateNames(); } }\n\n    ### Response:",
        "ground_truth": "Removes duplicate names from bean references.",
        "predict": " Check if an API key exists, return false if not.\n\n    "
    },
    {
        "ID": 1461,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (pb *ProgressBar) SetCurrentProgress(progress float64) error { if progress < 0 || progress > 1 { return ErrorProgressOutOfBounds } pb.lock.Lock() pb.currentProgress = progress pb.lock.Unlock() return nil }\n\n    ### Response: // SetCurrentProgress sets the progress of this ProgressBar. The progress must\n// be between 0 and 1 inclusive..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private BeanReferences[] convertRefToReferences(final String[] references) { if (references == null) { return null; } BeanReferences[] ref = new BeanReferences[references.length]; for (int i = 0; i < references.length; i++) { ref[i] = BeanReferences.of(references[i]); } return ref; }\n\n    ### Response:",
        "ground_truth": "Converts single string array to an array of bean references.",
        "predict": " // SetCurrentProgress sets the progress of this ProgressBar. The progress must\n// be between 0 and 1 inclusive..\n\n    "
    },
    {
        "ID": 1462,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def find_package(cls, team, user, package, pkghash=None, store_dir=None): \"\"\" Finds an existing package in one of the package directories. \"\"\" cls.check_name(team, user, package) dirs = cls.find_store_dirs() for store_dir in dirs: store = PackageStore(store_dir) pkg = store.get_package(team, user, package, pkghash=pkghash) if pkg is not None: return store, pkg return None, None\n\n    ### Response: Finds an existing package in one of the package directories..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private BeanReferences[] convertAnnValueToReferences(String value) { if (value == null) { return null; } value = value.trim(); if (value.length() == 0) { return null; } String[] refNames = Converter.get().toStringArray(value); BeanReferences[] references = new BeanReferences[refNames.length]; for (int i = 0; i < refNames.length; i++) { references[i] = BeanReferences.of(refNames[i].trim()); } return references; }\n\n    ### Response:",
        "ground_truth": "Converts comma-separated string into array of Bean references.",
        "predict": " Finds an existing package in one of the package directories..\n\n    "
    },
    {
        "ID": 1463,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (n *NetStore) Put(ctx context.Context, ch Chunk) error { n.mu.Lock() defer n.mu.Unlock() // put to the chunk to the store, there should be no error err := n.store.Put(ctx, ch) if err != nil { return err } // if chunk is now put in the store, check if there was an active fetcher and call deliver on it // (this delivers the chunk to requestors via the fetcher) log.Trace(\"n.getFetcher\", \"ref\", ch.Address()) if f := n.getFetcher(ch.Address()); f != nil { log.Trace(\"n.getFetcher deliver\", \"ref\", ch.Address()) f.deliver(ctx, ch) } return nil }\n\n    ### Response: // Put stores a chunk in localstore, and delivers to all requestor peers using the fetcher stored in\n// the fetchers cache.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void runJoy(final Consumer<JoddJoyRuntime> consumer) { final JoddJoy joddJoy = new JoddJoy(); final JoddJoyRuntime joyRuntime = joddJoy.startOnlyBackend(); joddJoy.withDb(joyDb -> setJtxManager(joyRuntime.getJtxManager())); final JtxTransaction tx = startRwTx(); final Print print = new Print(); try { print.line(\"START\", 80); print.newLine(); consumer.accept(joyRuntime); print.newLine(); print.line(\"END\", 80); if (tx != null) { tx.commit(); } } catch (Throwable throwable) { throwable.printStackTrace(); if (tx != null) { tx.rollback(); } } joddJoy.stop(); }\n\n    ### Response:",
        "ground_truth": "Runs JOY in standalone mode, with only backend.",
        "predict": " // Put stores a chunk in localstore, and delivers to all requestor peers using the fetcher stored in\n// the fetchers cache.\n\n    "
    },
    {
        "ID": 1464,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function setQuery($query) { $this->cacheRows = null; $this->size = null; $this->paginator = new Paginator($query); return $this; }\n\n    ### Response: Set query.\n\n@param Query|QueryBuilder $query\n\n@return DoctrineOrmDataSource.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Method findMethod(final Class c, final String methodName) { return findDeclaredMethod(c, methodName, true); }\n\n    ### Response:",
        "ground_truth": "Returns method from an object, matched by name. This may be considered as\na slow operation, since methods are matched one by one.\nReturns only accessible methods.\nOnly first method is matched.\n\n@param c          class to examine\n@param methodName Full name of the method.\n@return null if method not found",
        "predict": " Set query.\n\n@param Query|QueryBuilder $query\n\n@return DoctrineOrmDataSource.\n\n    "
    },
    {
        "ID": 1465,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function getDiscounts() { if ($this->getTotalDiscount() && $this->getTotalDiscount()->getBruttoPrice() == 0 && count($this->_aItemDiscounts) == 0) { return []; } return array_merge($this->_aItemDiscounts, $this->_aDiscounts); }\n\n    ### Response: Returns applied discount information array\n\n@return array.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static <T> Constructor<T> findConstructor(final Class<T> clazz, final Class<?>... parameterTypes) { final Constructor<?>[] constructors = clazz.getConstructors(); Class<?>[] pts; for (Constructor<?> constructor : constructors) { pts = constructor.getParameterTypes(); if (isAllAssignableFrom(pts, parameterTypes)) { return (Constructor<T>) constructor; } } return null; }\n\n    ### Response:",
        "ground_truth": "Finds constructor with given parameter types. First matched ctor is returned.",
        "predict": " Returns applied discount information array\n\n@return array.\n\n    "
    },
    {
        "ID": 1466,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function() { var self = this || Howler; // Create a global ID counter. self._counter = 1000; // Pool of unlocked HTML5 Audio objects. self._html5AudioPool = []; self.html5PoolSize = 10; // Internal properties. self._codecs = {}; self._howls = []; self._muted = false; self._volume = 1; self._canPlayEvent = 'canplaythrough'; self._navigator = (typeof window !== 'undefined' && window.navigator) ? window.navigator : null; // Public properties. self.masterGain = null; self.noAudio = false; self.usingWebAudio = true; self.autoSuspend = true; self.ctx = null; // Set to false to disable the auto audio unlocker. self.autoUnlock = true; // Setup the various state values for global tracking. self._setup(); return self; }\n\n    ### Response: Initialize the global Howler object.\n@return {Howler}.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Class[] resolveAllInterfaces(final Class type) { Set<Class> bag = new LinkedHashSet<>(); _resolveAllInterfaces(type, bag); return bag.toArray(new Class[0]); }\n\n    ### Response:",
        "ground_truth": "Resolves all interfaces of a type. No duplicates are returned.\nDirect interfaces are prior the interfaces of subclasses in\nthe returned array.",
        "predict": " Initialize the global Howler object.\n@return {Howler}.\n\n    "
    },
    {
        "ID": 1467,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func materializeWithJSON(logFields []*jThrift.Tag) ([]byte, error) { fields := make(map[string]string, len(logFields)) for i := range logFields { fields[logFields[i].Key] = tagValueToString(logFields[i]) } if event, ok := fields[\"event\"]; ok && len(fields) == 1 { return []byte(event), nil } return json.Marshal(fields) }\n\n    ### Response: // materializeWithJSON converts log Fields into JSON string, or just the field\n// value of the event field, if present..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static boolean compareParameters(final Class[] first, final Class[] second) { if (first.length != second.length) { return false; } for (int i = 0; i < first.length; i++) { if (first[i] != second[i]) { return false; } } return true; }\n\n    ### Response:",
        "ground_truth": "Compares classes, usually method or ctor parameters.",
        "predict": " // materializeWithJSON converts log Fields into JSON string, or just the field\n// value of the event field, if present..\n\n    "
    },
    {
        "ID": 1468,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public com.google.api.ads.adwords.axis.v201809.cm.UniversalAppCampaignAdsPolicyDecisions[] getAdsPolicyDecisions() { return adsPolicyDecisions; }\n\n    ### Response: Gets the adsPolicyDecisions value for this UniversalAppCampaignSetting.\n\n@return adsPolicyDecisions   * Ads policy decisions associated with asset(s)..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void forceAccess(final AccessibleObject accObject) { try { if (System.getSecurityManager() == null) accObject.setAccessible(true); else { AccessController.doPrivileged((PrivilegedAction) () -> { accObject.setAccessible(true); return null; }); } } catch (SecurityException sex) { // ignore } }\n\n    ### Response:",
        "ground_truth": "Suppress access check against a reflection object. SecurityException is silently ignored.\nChecks first if the object is already accessible.",
        "predict": " Gets the adsPolicyDecisions value for this UniversalAppCampaignSetting.\n\n@return adsPolicyDecisions   * Ads policy decisions associated with asset(s)..\n\n    "
    },
    {
        "ID": 1469,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def parse_intervals(path, as_context=False): \"\"\" Parse path strings into a collection of Intervals. `path` is a string describing a region in a file. It's format is dotted.module.name:[line | start-stop | context] `dotted.module.name` is a python module `line` is a single line number in the module (1-offset) `start-stop` is a right-open interval of line numbers `context` is a '.' delimited, nested name of a class or function. For example FooClass.method_a.inner_method identifies the innermost function in code like class FooClass: def method_a(self): def inner_method(): pass Parameters ---------- path : str Region description (see above) as_context : bool (optional, default=False) If `True`, return `ContextInterval`s instead of `LineInterval`s. If `path` provides a line number or range, the result will include all contexts that intersect this line range. Returns ------- list of `Interval`s \"\"\" def _regions_from_range(): if as_context: ctxs = list(set(pf.lines[start - 1: stop - 1])) return [ ContextInterval(filename, ctx) for ctx in ctxs ] else: return [LineInterval(filename, start, stop)] if ':' in path: path, subpath = path.split(':') else: subpath = '' pf = PythonFile.from_modulename(path) filename = pf.filename rng = NUMBER_RE.match(subpath) if rng: # specified a line or line range start, stop = map(int, rng.groups(0)) stop = stop or start + 1 return _regions_from_range() elif not subpath: # asked for entire module if as_context: return [ContextInterval(filename, pf.prefix)] start, stop = 1, pf.line_count + 1 return _regions_from_range() else: # specified a context name context = pf.prefix + ':' + subpath if context not in pf.lines: raise ValueError(\"%s is not a valid context for %s\" % (context, pf.prefix)) if as_context: return [ContextInterval(filename, context)] else: start, stop = pf.context_range(context) return [LineInterval(filename, start, stop)]\n\n    ### Response: Parse path strings into a collection of Intervals.\n\n    `path` is a string describing a region in a file. It's format is\n\n        dotted.module.name:[line | start-stop | context]\n\n    `dotted.module.name` is a python module\n    `line` is a single line number in the module (1-offset)\n    `start-stop` is a right-open interval of line numbers\n    `context` is a '.' delimited, nested name of a class or function.\n        For example FooClass.method_a.inner_method\n\n    identifies the innermost function in code like\n\n    class FooClass:\n        def method_a(self):\n            def inner_method():\n                pass\n\n    Parameters\n    ----------\n    path : str\n        Region description (see above)\n    as_context : bool (optional, default=False)\n        If `True`, return `ContextInterval`s instead of `LineInterval`s.\n        If `path` provides a line number or range, the result will include\n        all contexts that intersect this line range.\n\n    Returns\n    -------\n    list of `Interval`s.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SuppressWarnings(\"unchecked\") public static <T> T newInstance(final Class<T> clazz, final Object... params) throws InstantiationException, IllegalAccessException, InvocationTargetException, NoSuchMethodException { if (params.length == 0) { return newInstance(clazz); } final Class<?>[] paramTypes = getClasses(params); final Constructor<?> constructor = findConstructor(clazz, paramTypes); if (constructor == null) { throw new InstantiationException(\"No constructor matched parameter types.\"); } return (T) constructor.newInstance(params); }\n\n    ### Response:",
        "ground_truth": "Creates new instance of given class with given optional arguments.",
        "predict": " Parse path strings into a collection of Intervals.\n\n    `path` is a string describing a region in a file. It's format is\n\n        dotted.module.name:[line | start-stop | context]\n\n    `dotted.module.name` is a python module\n    `line` is a single line number in the module (1-offset)\n    `start-stop` is a right-open interval of line numbers\n    `context` is a '.' delimited, nested name of a class or function.\n        For example FooClass.method_a.inner_method\n\n    identifies the innermost function in code like\n\n    class FooClass:\n        def method_a(self):\n            def inner_method():\n                pass\n\n    Parameters\n    ----------\n    path : str\n        Region description (see above)\n    as_context : bool (optional, default=False)\n        If `True`, return `ContextInterval`s instead of `LineInterval`s.\n        If `path` provides a line number or range, the result will include\n        all contexts that intersect this line range.\n\n    Returns\n    -------\n    list of `Interval`s.\n\n    "
    },
    {
        "ID": 1470,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func Gt(expectedValue interface{}) *gtMatcher { matcher := new(gtMatcher) matcher.expectedValue = expectedValue return matcher }\n\n    ### Response: // Gt checks if the value is greater the expected value.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Class[] getSuperclasses(final Class type) { int i = 0; for (Class x = type.getSuperclass(); x != null; x = x.getSuperclass()) { i++; } Class[] result = new Class[i]; i = 0; for (Class x = type.getSuperclass(); x != null; x = x.getSuperclass()) { result[i] = x; i++; } return result; }\n\n    ### Response:",
        "ground_truth": "Returns all superclasses.",
        "predict": " // Gt checks if the value is greater the expected value.\n\n    "
    },
    {
        "ID": 1471,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public InfoOperation getInfoOperation(final Field destination, final Field source) { Class<?> dClass = destination.getType(); Class<?> sClass = source.getType(); Class<?> dItem = null; Class<?> sItem = null; InfoOperation operation = new InfoOperation().setConversionType(UNDEFINED); // Array[] = Collection<> if(dClass.isArray() && collectionIsAssignableFrom(sClass)){ dItem = dClass.getComponentType(); sItem = getCollectionItemClass(source); operation.setInstructionType(ARRAY_LIST); if(areMappedObjects(dItem,sItem,xml)) return operation.setInstructionType(ARRAY_LIST_WITH_MAPPED_ITEMS) .setConfigChosen(configChosen(dItem,sItem,xml)); } // Collection<> = Array[] if(collectionIsAssignableFrom(dClass) && sClass.isArray()){ dItem = getCollectionItemClass(destination); sItem = sClass.getComponentType(); operation.setInstructionType(LIST_ARRAY); if(areMappedObjects(dItem,sItem,xml)) return operation.setInstructionType(LIST_ARRAY_WITH_MAPPED_ITEMS) .setConfigChosen(configChosen(dItem,sItem,xml)); } if(isAssignableFrom(dItem,sItem)) return operation.setConversionType(ABSENT); // if components are primitive or wrapper types, apply implicit conversion if(areBasic(dItem,sItem)) return operation.setConversionType(getConversionType(dItem, sItem)); return operation; }\n\n    ### Response: This method calculates and returns information relating the operation to be performed.\n@param destination destination field to be analyzed\n@param source source field to be analyzed\n@return all information relating the operation to be performed.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Class<?> childClassOf(final Class<?> parentClass, final Object instance) { if (instance == null || instance == Object.class) { return null; } if (parentClass != null) { if (parentClass.isInterface()) { return null; } } Class<?> childClass = instance.getClass(); while (true) { Class<?> parent = childClass.getSuperclass(); if (parent == parentClass) { return childClass; } if (parent == null) { return null; } childClass = parent; } }\n\n    ### Response:",
        "ground_truth": "Returns the class of the immediate subclass of the given parent class for\nthe given object instance; or null if such immediate subclass cannot be\nuniquely identified for the given object instance.",
        "predict": " This method calculates and returns information relating the operation to be performed.\n@param destination destination field to be analyzed\n@param source source field to be analyzed\n@return all information relating the operation to be performed.\n\n    "
    },
    {
        "ID": 1472,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function checkForDev(): bool { $return = false; if (\\function_exists('checkForDev')) { $return = checkForDev(); } else { // for testing with dev-address $noDev = isset($_GET['noDev']) ? (int) $_GET['noDev'] : 0; $remoteAddr = $_SERVER['REMOTE_ADDR'] ?? 'NO_REMOTE_ADDR'; if ( $noDev !== 1 && ( $remoteAddr === '127.0.0.1' || $remoteAddr === '::1' || \\PHP_SAPI === 'cli' ) ) { $return = true; } } return $return; }\n\n    ### Response: Check for local developer.\n\n@return bool.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static JarFile jarFileOf(final Class<?> klass) { URL url = klass.getResource( \"/\" + klass.getName().replace('.', '/') + \".class\"); if (url == null) { return null; } String s = url.getFile(); int beginIndex = s.indexOf(\"file:\") + \"file:\".length(); int endIndex = s.indexOf(\".jar!\"); if (endIndex == -1) { return null; } endIndex += \".jar\".length(); String f = s.substring(beginIndex, endIndex); // decode URL string - it may contain encoded chars (e.g. whitespaces) which are not supported for file-instances f = URLDecoder.decode(f, \"UTF-8\"); File file = new File(f); try { return file.exists() ? new JarFile(file) : null; } catch (IOException e) { throw new IllegalStateException(e); } }\n\n    ### Response:",
        "ground_truth": "Returns the jar file from which the given class is loaded; or null\nif no such jar file can be located.",
        "predict": " Check for local developer.\n\n@return bool.\n\n    "
    },
    {
        "ID": 1473,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def autocrop(im, autocrop=False, **kwargs): \"\"\" Remove any unnecessary whitespace from the edges of the source image. This processor should be listed before :func:`scale_and_crop` so the whitespace is removed from the source image before it is resized. autocrop Activates the autocrop method for this image. \"\"\" if autocrop: # If transparent, flatten. if utils.is_transparent(im): no_alpha = Image.new('L', im.size, (255)) no_alpha.paste(im, mask=im.split()[-1]) else: no_alpha = im.convert('L') # Convert to black and white image. bw = no_alpha.convert('L') # bw = bw.filter(ImageFilter.MedianFilter) # White background. bg = Image.new('L', im.size, 255) bbox = ImageChops.difference(bw, bg).getbbox() if bbox: im = im.crop(bbox) return im\n\n    ### Response: Remove any unnecessary whitespace from the edges of the source image.\n\n    This processor should be listed before :func:`scale_and_crop` so the\n    whitespace is removed from the source image before it is resized.\n\n    autocrop\n        Activates the autocrop method for this image..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void sleep(final long ms) { try { Thread.sleep(ms); } catch (InterruptedException iex) { Thread.currentThread().interrupt(); } }\n\n    ### Response:",
        "ground_truth": "Puts a thread to sleep, without throwing an InterruptedException.\n\n@param ms     the length of time to sleep in milliseconds",
        "predict": " Remove any unnecessary whitespace from the edges of the source image.\n\n    This processor should be listed before :func:`scale_and_crop` so the\n    whitespace is removed from the source image before it is resized.\n\n    autocrop\n        Activates the autocrop method for this image..\n\n    "
    },
    {
        "ID": 1474,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private function loadDefaultTranslations() { $language = $this->appConfig->getLanguage(); if ($language !== null) { $this->loadTranslationMessages($language); } }\n\n    ### Response: Loads default translations if default language is defined\n\n@return void.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void sleep() { try { Thread.sleep(Long.MAX_VALUE); } catch (InterruptedException iex) { Thread.currentThread().interrupt(); } }\n\n    ### Response:",
        "ground_truth": "Puts a thread to sleep forever.",
        "predict": " Loads default translations if default language is defined\n\n@return void.\n\n    "
    },
    {
        "ID": 1475,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def begin_resume(resource_group_name, server_name, custom_headers:nil) response = begin_resume_async(resource_group_name, server_name, custom_headers:custom_headers).value! nil end\n\n    ### Response: Resumes operation of the specified Analysis Services server instance.\n\n @param resource_group_name [String] The name of the Azure Resource group of\n which a given Analysis Services server is part. This name must be at least 1\n character in length, and no more than 90.\n @param server_name [String] The name of the Analysis Services server. It must\n be at least 3 characters in length, and no more than 63.\n @param custom_headers [Hash{String => String}] A hash of custom headers that\n will be added to the HTTP request..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void wait(final Object obj) { synchronized (obj) { try { obj.wait(); } catch (InterruptedException inex) { Thread.currentThread().interrupt(); } } }\n\n    ### Response:",
        "ground_truth": "Waits for a object for synchronization purposes.",
        "predict": " Resumes operation of the specified Analysis Services server instance.\n\n @param resource_group_name [String] The name of the Azure Resource group of\n which a given Analysis Services server is part. This name must be at least 1\n character in length, and no more than 90.\n @param server_name [String] The name of the Analysis Services server. It must\n be at least 3 characters in length, and no more than 63.\n @param custom_headers [Hash{String => String}] A hash of custom headers that\n will be added to the HTTP request..\n\n    "
    },
    {
        "ID": 1476,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void setText(final String text, final Serializable... args) { getOrCreateComponentModel().text = I18nUtilities.asMessage(text, args); }\n\n    ### Response: Sets the text displayed on the link.\n\n@param text the text to set, using {@link MessageFormat} syntax.\n@param args optional arguments for the message format string..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static ThreadFactory daemonThreadFactory(final String name, final int priority) { return new ThreadFactory() { private AtomicInteger count = new AtomicInteger(); @Override public Thread newThread(final Runnable r) { Thread thread = new Thread(r); thread.setName(name + '-' + count.incrementAndGet()); thread.setDaemon(true); thread.setPriority(priority); return thread; } }; }\n\n    ### Response:",
        "ground_truth": "Creates new daemon thread factory.",
        "predict": " Sets the text displayed on the link.\n\n@param text the text to set, using {@link MessageFormat} syntax.\n@param args optional arguments for the message format string..\n\n    "
    },
    {
        "ID": 1477,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def drop_columns_with_unique_values( data: pd.DataFrame, max_unique_values: int = 0.25 ): \"\"\" Remove columns when the proportion of the total of unique values is more than the max_unique_values threshold, just for columns with type as object or category :param data: :param max_unique_values: :return: \"\"\" size = data.shape[0] df_uv = data.apply( lambda se: ( (se.dropna().unique().shape[0]/size) > max_unique_values and se.dtype in ['object', 'category'] ) ) data.drop(df_uv[df_uv].index, axis=1, inplace=True)\n\n    ### Response: Remove columns when the proportion\n    of the total of unique values is more than the max_unique_values\n    threshold, just for columns with type as object or category\n\n    :param data:\n    :param max_unique_values:\n    :return:.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public T get() { if (!initialized) { synchronized (this) { if (!initialized) { final T t = supplier.get(); value = t; initialized = true; supplier = null; return t; } } } return value; }\n\n    ### Response:",
        "ground_truth": "Returns the value. Value will be computed on first call.",
        "predict": " Remove columns when the proportion\n    of the total of unique values is more than the max_unique_values\n    threshold, just for columns with type as object or category\n\n    :param data:\n    :param max_unique_values:\n    :return:.\n\n    "
    },
    {
        "ID": 1478,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func NewUser(httpResponse *http.Response) (*User, error) { userResponse := &User{HTTPResponse: httpResponse} defer closeResponseBody(httpResponse) body, err := ioutil.ReadAll(httpResponse.Body) if err != nil { Logger.Println(\"Error reading from API:\", err) return userResponse, err } err = json.Unmarshal(body, userResponse) if err != nil { Logger.Println(\"Error parsing JSON:\", err) return userResponse, err } userResponse.ID = strconv.Itoa(userResponse.UserData.ID) return userResponse, nil }\n\n    ### Response: // NewUser returns an instance of User.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void visitParameter(final String name, final int access) { if (api < Opcodes.ASM5) { throw new UnsupportedOperationException(REQUIRES_ASM5); } if (mv != null) { mv.visitParameter(name, access); } }\n\n    ### Response:",
        "ground_truth": "Visits a parameter of this method.\n\n@param name parameter name or null if none is provided.\n@param access the parameter's access flags, only {@code ACC_FINAL}, {@code ACC_SYNTHETIC}\nor/and {@code ACC_MANDATED} are allowed (see {@link Opcodes}).",
        "predict": " // NewUser returns an instance of User.\n\n    "
    },
    {
        "ID": 1479,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def define_context(context_name) rule_sets.fetch(context_name) do |context_name| rule_sets[context_name] = RuleSet.new end self end\n\n    ### Response: Initialize and assign a RuleSet for the named context\n\n @param [Symbol] context_name\n   the name of the context to be defined. noop if already defined\n\n @return [self]\n\n @api private.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public AnnotationVisitor visitAnnotation(final String descriptor, final boolean visible) { if (mv != null) { return mv.visitAnnotation(descriptor, visible); } return null; }\n\n    ### Response:",
        "ground_truth": "Visits an annotation of this method.\n\n@param descriptor the class descriptor of the annotation class.\n@param visible {@literal true} if the annotation is visible at runtime.\n@return a visitor to visit the annotation values, or {@literal null} if this visitor is not\ninterested in visiting this annotation.",
        "predict": " Initialize and assign a RuleSet for the named context\n\n @param [Symbol] context_name\n   the name of the context to be defined. noop if already defined\n\n @return [self]\n\n @api private.\n\n    "
    },
    {
        "ID": 1480,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _is_api_key_correct(request): \"\"\"Return whether the Geckoboard API key on the request is correct.\"\"\" api_key = getattr(settings, 'GECKOBOARD_API_KEY', None) if api_key is None: return True auth = request.META.get('HTTP_AUTHORIZATION', '').split() if len(auth) == 2: if auth[0].lower() == b'basic': request_key = base64.b64decode(auth[1]).split(b':')[0] return request_key == api_key return False\n\n    ### Response: Return whether the Geckoboard API key on the request is correct..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public AnnotationVisitor visitTypeAnnotation( final int typeRef, final TypePath typePath, final String descriptor, final boolean visible) { if (api < Opcodes.ASM5) { throw new UnsupportedOperationException(REQUIRES_ASM5); } if (mv != null) { return mv.visitTypeAnnotation(typeRef, typePath, descriptor, visible); } return null; }\n\n    ### Response:",
        "ground_truth": "Visits an annotation on a type in the method signature.\n\n@param typeRef a reference to the annotated type. The sort of this type reference must be\n{@link TypeReference#METHOD_TYPE_PARAMETER}, {@link\nTypeReference#METHOD_TYPE_PARAMETER_BOUND}, {@link TypeReference#METHOD_RETURN}, {@link\nTypeReference#METHOD_RECEIVER}, {@link TypeReference#METHOD_FORMAL_PARAMETER} or {@link\nTypeReference#THROWS}. See {@link TypeReference}.\n@param typePath the path to the annotated type argument, wildcard bound, array element type, or\nstatic inner type within 'typeRef'. May be {@literal null} if the annotation targets\n'typeRef' as a whole.\n@param descriptor the class descriptor of the annotation class.\n@param visible {@literal true} if the annotation is visible at runtime.\n@return a visitor to visit the annotation values, or {@literal null} if this visitor is not\ninterested in visiting this annotation.",
        "predict": " Return whether the Geckoboard API key on the request is correct..\n\n    "
    },
    {
        "ID": 1481,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func statValuesToDatapoints(vals []IOStatValue, prefix string, tags map[string]string, ts string) []producers.Datapoint { var datapoints []producers.Datapoint for _, s := range vals { op := strings.ToLower(s.Operation) d := producers.Datapoint{ Name: prefix + \".\" + op, Value: s.Value, Tags: tags, Timestamp: ts, Unit: bytes, } datapoints = append(datapoints, d) } return datapoints }\n\n    ### Response: // statValuesToDatapoints converts a list of IO stats to a list of datapoints.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public AnnotationVisitor visitParameterAnnotation( final int parameter, final String descriptor, final boolean visible) { if (mv != null) { return mv.visitParameterAnnotation(parameter, descriptor, visible); } return null; }\n\n    ### Response:",
        "ground_truth": "Visits an annotation of a parameter this method.\n\n@param parameter the parameter index. This index must be strictly smaller than the number of\nparameters in the method descriptor, and strictly smaller than the parameter count\nspecified in {@link #visitAnnotableParameterCount}. Important note: a parameter index i\nis not required to correspond to the i'th parameter descriptor in the method\ndescriptor",
        "predict": " // statValuesToDatapoints converts a list of IO stats to a list of datapoints.\n\n    "
    },
    {
        "ID": 1482,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def convert(ctype, img, palette_img, dither=False): \"\"\"Convert an image to palette type. Parameters ---------- ctype : `int` Conversion type. img : `PIL.Image` Image to convert. palette_img : `PIL.Image` Palette source image. dither : `bool`, optional Enable dithering (default: `False`). Raises ------ ValueError If palette_img has no palette. Returns ------- `PIL.Image` Converted image. \"\"\" if ctype == 0: img2 = img.convert(mode='P') img2.putpalette(palette_img.getpalette()) return img2 img.load() palette_img.load() if palette_img.palette is None: raise ValueError('invalid palette image') im = img.im.convert('P', int(dither), palette_img.im) return img._new(im)\n\n    ### Response: Convert an image to palette type.\n\n    Parameters\n    ----------\n    ctype : `int`\n        Conversion type.\n    img : `PIL.Image`\n        Image to convert.\n    palette_img : `PIL.Image`\n        Palette source image.\n    dither : `bool`, optional\n        Enable dithering (default: `False`).\n\n    Raises\n    ------\n    ValueError\n        If palette_img has no palette.\n\n    Returns\n    -------\n    `PIL.Image`\n        Converted image..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void visitFieldInsn( final int opcode, final String owner, final String name, final String descriptor) { if (mv != null) { mv.visitFieldInsn(opcode, owner, name, descriptor); } }\n\n    ### Response:",
        "ground_truth": "Visits a field instruction. A field instruction is an instruction that loads or stores the\nvalue of a field of an object.\n\n@param opcode the opcode of the type instruction to be visited. This opcode is either\nGETSTATIC, PUTSTATIC, GETFIELD or PUTFIELD.\n@param owner the internal name of the field's owner class (see {@link Type#getInternalName()}).\n@param name the field's name.\n@param descriptor the field's descriptor (see {@link Type}).",
        "predict": " Convert an image to palette type.\n\n    Parameters\n    ----------\n    ctype : `int`\n        Conversion type.\n    img : `PIL.Image`\n        Image to convert.\n    palette_img : `PIL.Image`\n        Palette source image.\n    dither : `bool`, optional\n        Enable dithering (default: `False`).\n\n    Raises\n    ------\n    ValueError\n        If palette_img has no palette.\n\n    Returns\n    -------\n    `PIL.Image`\n        Converted image..\n\n    "
    },
    {
        "ID": 1483,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static function getNextQuotedPrintableToken($str) { if(substr($str, 0, 1) == \"=\") { $token = substr($str, 0, 3); } else { $token = substr($str, 0, 1); } return $token; }\n\n    ### Response: Retrieves the first token from a quoted printable string.\n\n@param  string $str\n@return string.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void visitMethodInsn( final int opcode, final String owner, final String name, final String descriptor, final boolean isInterface) { if (api < Opcodes.ASM5) { if (isInterface != (opcode == Opcodes.INVOKEINTERFACE)) { throw new IllegalArgumentException(\"INVOKESPECIAL/STATIC on interfaces requires ASM5\"); } visitMethodInsn(opcode, owner, name, descriptor); return; } if (mv != null) { mv.visitMethodInsn(opcode, owner, name, descriptor, isInterface); } }\n\n    ### Response:",
        "ground_truth": "Visits a method instruction. A method instruction is an instruction that invokes a method.\n\n@param opcode the opcode of the type instruction to be visited. This opcode is either\nINVOKEVIRTUAL, INVOKESPECIAL, INVOKESTATIC or INVOKEINTERFACE.\n@param owner the internal name of the method's owner class (see {@link\nType#getInternalName()}).\n@param name the method's name.\n@param descriptor the method's descriptor (see {@link Type}).\n@param isInterface if the method's owner class is an interface.",
        "predict": " Retrieves the first token from a quoted printable string.\n\n@param  string $str\n@return string.\n\n    "
    },
    {
        "ID": 1484,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func NewStoreSchemaCommandBuilder() *StoreSchemaCommandBuilder { protobuf := &rpbRiakYZ.RpbYokozunaSchemaPutReq{ Schema: &rpbRiakYZ.RpbYokozunaSchema{}, } builder := &StoreSchemaCommandBuilder{protobuf: protobuf} return builder }\n\n    ### Response: // NewStoreSchemaCommandBuilder is a factory function for generating the command builder struct.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void visitInvokeDynamicInsn( final String name, final String descriptor, final Handle bootstrapMethodHandle, final Object... bootstrapMethodArguments) { if (api < Opcodes.ASM5) { throw new UnsupportedOperationException(REQUIRES_ASM5); } if (mv != null) { mv.visitInvokeDynamicInsn(name, descriptor, bootstrapMethodHandle, bootstrapMethodArguments); } }\n\n    ### Response:",
        "ground_truth": "Visits an invokedynamic instruction.\n\n@param name the method's name.\n@param descriptor the method's descriptor (see {@link Type}).\n@param bootstrapMethodHandle the bootstrap method.\n@param bootstrapMethodArguments the bootstrap method constant arguments. Each argument must be\nan {@link Integer}, {@link Float}, {@link Long}, {@link Double}, {@link String}, {@link\nType}, {@link Handle} or {@link ConstantDynamic} value. This method is allowed to modify\nthe content of the array so a caller should expect that this array may change.",
        "predict": " // NewStoreSchemaCommandBuilder is a factory function for generating the command builder struct.\n\n    "
    },
    {
        "ID": 1485,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def filter_with_schema(self, collection=None, context=None): \"\"\" Perform collection items filtering with schema \"\"\" if collection is None or self.schema is None: return try: for item in collection: self._schema.filter( model=item, context=context if self.use_context else None ) except TypeError: pass\n\n    ### Response: Perform collection items filtering with schema.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void visitJumpInsn(final int opcode, final Label label) { if (mv != null) { mv.visitJumpInsn(opcode, label); } }\n\n    ### Response:",
        "ground_truth": "Visits a jump instruction. A jump instruction is an instruction that may jump to another\ninstruction.\n\n@param opcode the opcode of the type instruction to be visited. This opcode is either IFEQ,\nIFNE, IFLT, IFGE, IFGT, IFLE, IF_ICMPEQ, IF_ICMPNE, IF_ICMPLT, IF_ICMPGE, IF_ICMPGT,\nIF_ICMPLE, IF_ACMPEQ, IF_ACMPNE, GOTO, JSR, IFNULL or IFNONNULL.\n@param label the operand of the instruction to be visited. This operand is a label that\ndesignates the instruction to which the jump instruction may jump.",
        "predict": " Perform collection items filtering with schema.\n\n    "
    },
    {
        "ID": 1486,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function purifyInputs(array $inputs) { $newInputs = []; foreach ($inputs as $key => $value) { if (is_array($value)) { throw new InvalidArgumentException('Input array can NOT contain nested arrays.'); } if (strlen((string)$key) > $this->maxTextLength) { throw new TextTooLongException(\"Input array has at least one key whose name exceeds the max length allowed.\"); } if (strlen((string)$value) > $this->maxTextLength) { throw new TextTooLongException(\"Input array has at least one language value whose value exceeds the max length allowed.\"); } $newInputs[e($key)] = e($value); } return $newInputs; }\n\n    ### Response: Escape input array. Keys beginning with _ are discarded. If the file already exists, it gets overwritten.\n\n@param  array $inputs\n\n@throws InvalidArgumentException\n@throws TextTooLongException\n\n@return array.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void visitMultiANewArrayInsn(final String descriptor, final int numDimensions) { if (mv != null) { mv.visitMultiANewArrayInsn(descriptor, numDimensions); } }\n\n    ### Response:",
        "ground_truth": "Visits a MULTIANEWARRAY instruction.\n\n@param descriptor an array type descriptor (see {@link Type}).\n@param numDimensions the number of dimensions of the array to allocate.",
        "predict": " Escape input array. Keys beginning with _ are discarded. If the file already exists, it gets overwritten.\n\n@param  array $inputs\n\n@throws InvalidArgumentException\n@throws TextTooLongException\n\n@return array.\n\n    "
    },
    {
        "ID": 1487,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (v *VersioningTestV2) GetNewmap() (o map[int32]int32) { if v != nil && v.Newmap != nil { return v.Newmap } return }\n\n    ### Response: // GetNewmap returns the value of Newmap if it is set or its\n// zero value if it is unset..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void visitTryCatchBlock( final Label start, final Label end, final Label handler, final String type) { if (mv != null) { mv.visitTryCatchBlock(start, end, handler, type); } }\n\n    ### Response:",
        "ground_truth": "Visits a try catch block.\n\n@param start the beginning of the exception handler's scope (inclusive).\n@param end the end of the exception handler's scope (exclusive).\n@param handler the beginning of the exception handler's code.\n@param type the internal name of the type of exceptions handled by the handler, or {@literal\nnull} to catch any exceptions (for \"finally\" blocks).\n@throws IllegalArgumentException if one of the labels has already been visited by this visitor\n(by the {@link #visitLabel} method).",
        "predict": " // GetNewmap returns the value of Newmap if it is set or its\n// zero value if it is unset..\n\n    "
    },
    {
        "ID": 1488,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def find_model_by_id(self, constructor, id_, *, columns=None): \"\"\"Searches for a model by id, according to its class' primary_key_name. If primary_key_name is a tuple, id_ must be a tuple with a matching length. \"\"\" return self.find_model( constructor, get_id_constraints(constructor.primary_key_name, id_), columns=columns)\n\n    ### Response: Searches for a model by id, according to its class' primary_key_name.\n\n    If primary_key_name is a tuple, id_ must be a tuple with a matching length..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public AnnotationVisitor visitLocalVariableAnnotation( final int typeRef, final TypePath typePath, final Label[] start, final Label[] end, final int[] index, final String descriptor, final boolean visible) { if (api < Opcodes.ASM5) { throw new UnsupportedOperationException(REQUIRES_ASM5); } if (mv != null) { return mv.visitLocalVariableAnnotation( typeRef, typePath, start, end, index, descriptor, visible); } return null; }\n\n    ### Response:",
        "ground_truth": "Visits an annotation on a local variable type.\n\n@param typeRef a reference to the annotated type. The sort of this type reference must be\n{@link TypeReference#LOCAL_VARIABLE} or {@link TypeReference#RESOURCE_VARIABLE}. See {@link\nTypeReference}.\n@param typePath the path to the annotated type argument, wildcard bound, array element type, or\nstatic inner type within 'typeRef'. May be {@literal null} if the annotation targets\n'typeRef' as a whole.\n@param start the fist instructions corresponding to the continuous ranges that make the scope\nof this local variable (inclusive).\n@param end the last instructions corresponding to the continuous ranges that make the scope of\nthis local variable (exclusive). This array must have the same size as the 'start' array.\n@param index the local variable's index in each range. This array must have the same size as\nthe 'start' array.\n@param descriptor the class descriptor of the annotation class.\n@param visible {@literal true} if the annotation is visible at runtime.\n@return a visitor to visit the annotation values, or {@literal null} if this visitor is not\ninterested in visiting this annotation.",
        "predict": " Searches for a model by id, according to its class' primary_key_name.\n\n    If primary_key_name is a tuple, id_ must be a tuple with a matching length..\n\n    "
    },
    {
        "ID": 1489,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func robustNormalWithLength(x, y r3.Vector) (r3.Vector, float64) { var pt r3.Vector // This computes 2 * (x.Cross(y)), but has much better numerical // stability when x and y are unit length. tmp := x.Sub(y).Cross(x.Add(y)) length := tmp.Norm() if length != 0 { pt = tmp.Mul(1 / length) } return pt, 0.5 * length // Since tmp == 2 * (x.Cross(y)) }\n\n    ### Response: // Computes the cross product of two vectors, normalized to be unit length.\n// Also returns the length of the cross\n// product before normalization, which is useful for estimating the amount of\n// error in the result.  For numerical stability, the vectors should both be\n// approximately unit length..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    void convertToWriter(final Writer writer, final Properties properties, final Map<String, Properties> profiles) throws IOException { final BufferedWriter bw = getBufferedWriter(writer); writeBaseAndProfileProperties(bw, properties, profiles); writeProfilePropertiesThatAreNotInTheBase(bw, properties, profiles); bw.flush(); }\n\n    ### Response:",
        "ground_truth": "Convert Java Properties to Jodd Props format\n\n@param writer     Writer to write Props formatted file content to\n@param properties Properties to convert to Props format\n@param profiles   Properties per profile to convert and add to the Props format\n@throws IOException On any I/O error when writing to the writer",
        "predict": " // Computes the cross product of two vectors, normalized to be unit length.\n// Also returns the length of the cross\n// product before normalization, which is useful for estimating the amount of\n// error in the result.  For numerical stability, the vectors should both be\n// approximately unit length..\n\n    "
    },
    {
        "ID": 1490,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def text(x, y, text) Kernel.raise ArgumentError, 'missing text argument' if text.to_s.empty? if text.length > 2 && /\\A(?:\\\"[^\\\"]+\\\"|\\'[^\\']+\\'|\\{[^\\}]+\\})\\z/.match(text) # text already quoted elsif !text['\\''] text = '\\'' + text + '\\'' elsif !text['\"'] text = '\"' + text + '\"' elsif !(text['{'] || text['}']) text = '{' + text + '}' else # escape existing braces, surround with braces text = '{' + text.gsub(/[}]/) { |b| '\\\\' + b } + '}' end primitive \"text #{x},#{y} #{text}\" end\n\n    ### Response: Draw text at position x,y. Add quotes to text that is not already quoted..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public void processStream() throws IOException { FastByteArrayOutputStream out = new FastByteArrayOutputStream(); size = 0; if (maxFileSize == -1) { size += input.copyAll(out); } else { size += input.copyMax(out, maxFileSize + 1); // one more byte to detect larger files if (size > maxFileSize) { fileTooBig = true; valid = false; input.skipToBoundary(); return; } } data = out.toByteArray(); size = data.length; valid = true; }\n\n    ### Response:",
        "ground_truth": "Reads data from input stream into byte array and stores file size.",
        "predict": " Draw text at position x,y. Add quotes to text that is not already quoted..\n\n    "
    },
    {
        "ID": 1491,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func SplitHostPort(addr string) (host string, port int, err error) { h, p, err := net.SplitHostPort(addr) if err != nil { return \"\", -1, err } if p == \"\" { return \"\", -1, &net.AddrError{Err: \"missing port in address\", Addr: addr} } pi, err := strconv.Atoi(p) if err != nil { return \"\", -1, err } return h, pi, nil }\n\n    ### Response: // SplitHostPort splits a network address into a host and a port.\n// The port is -1 when there is no port to be found.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public T next() { if (hasNext == null) { hasNext = Boolean.valueOf(moveToNext()); } if (hasNext == false) { throw new NoSuchElementException(); } if (!entityAwareMode) { hasNext = null; return newElement; } count++; T result = previousElement; previousElement = newElement; hasNext = null; return result; }\n\n    ### Response:",
        "ground_truth": "Returns next mapped object.",
        "predict": " // SplitHostPort splits a network address into a host and a port.\n// The port is -1 when there is no port to be found.\n\n    "
    },
    {
        "ID": 1492,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def strip_cdata(text): \"\"\"Removes all CDATA blocks from `text` if it contains them. Note: If the function contains escaped XML characters outside of a CDATA block, they will be unescaped. Args: A string containing one or more CDATA blocks. Returns: An XML unescaped string with CDATA block qualifiers removed. \"\"\" if not is_cdata(text): return text xml = \"<e>{0}</e>\".format(text) node = etree.fromstring(xml) return node.text\n\n    ### Response: Removes all CDATA blocks from `text` if it contains them.\n\n    Note:\n        If the function contains escaped XML characters outside of a\n        CDATA block, they will be unescaped.\n\n    Args:\n        A string containing one or more CDATA blocks.\n\n    Returns:\n        An XML unescaped string with CDATA block qualifiers removed..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private boolean moveToNext() { if (last) { // last has been set to true, so no more rows to iterate - close everything if (closeOnEnd) { query.close(); } else { query.closeResultSet(resultSetMapper.getResultSet()); } return false; } while (true) { if (!resultSetMapper.next()) { // no more rows, no more parsing, previousElement is the last one to iterate last = true; return entityAwareMode; } // parse row Object[] objects = resultSetMapper.parseObjects(types); Object row = query.resolveRowResults(objects); newElement = (T) row; if (entityAwareMode) { if (count == 0 && previousElement == null) { previousElement = newElement; continue; } if (previousElement != null && newElement != null) { boolean equals; if (newElement.getClass().isArray()) { equals = Arrays.equals((Object[]) previousElement, (Object[]) newElement); } else { equals = previousElement.equals(newElement); } if (equals) { continue; } } } break; } return true; }\n\n    ### Response:",
        "ground_truth": "Moves to next element.",
        "predict": " Removes all CDATA blocks from `text` if it contains them.\n\n    Note:\n        If the function contains escaped XML characters outside of a\n        CDATA block, they will be unescaped.\n\n    Args:\n        A string containing one or more CDATA blocks.\n\n    Returns:\n        An XML unescaped string with CDATA block qualifiers removed..\n\n    "
    },
    {
        "ID": 1493,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static function getNodeName($nodeString) { $positionOfFirstAttribute = strpos($nodeString, '[@'); if ($positionOfFirstAttribute === false) { return $nodeString; } return substr($nodeString, 0, $positionOfFirstAttribute); }\n\n    ### Response: Returns node name extracted from node string\n\nThe internal representation of CLDR uses array keys like:\n'calendar[@type=\"gregorian\"]'\nThis method helps to extract the node name from such keys.\n\n@param string $nodeString String with node name and optional attribute(s)\n@return string Name of the node.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SuppressWarnings({\"unchecked\"}) public static <T> T[] join(T[]... arrays) { Class<T> componentType = (Class<T>) arrays.getClass().getComponentType().getComponentType(); return join(componentType, arrays); }\n\n    ### Response:",
        "ground_truth": "Joins arrays. Component type is resolved from the array argument.",
        "predict": " Returns node name extracted from node string\n\nThe internal representation of CLDR uses array keys like:\n'calendar[@type=\"gregorian\"]'\nThis method helps to extract the node name from such keys.\n\n@param string $nodeString String with node name and optional attribute(s)\n@return string Name of the node.\n\n    "
    },
    {
        "ID": 1494,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def get_package_data(): \"\"\" Returns the packages with static files of HaTeMiLe for Python. :return: The packages with static files of HaTeMiLe for Python. :rtype: dict(str, list(str)) \"\"\" package_data = { '': ['*.xml'], 'js': ['*.js'], LOCALES_DIRECTORY: ['*'] } for directory in os.listdir(LOCALES_DIRECTORY): package_data[LOCALES_DIRECTORY + '.' + directory] = ['*.json'] return package_data\n\n    ### Response: Returns the packages with static files of HaTeMiLe for Python.\n\n    :return: The packages with static files of HaTeMiLe for Python.\n    :rtype: dict(str, list(str)).\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SuppressWarnings({\"unchecked\"}) public static <T> T[] join(Class<T> componentType, T[][] arrays) { if (arrays.length == 1) { return arrays[0]; } int length = 0; for (T[] array : arrays) { length += array.length; } T[] result = (T[]) Array.newInstance(componentType, length); length = 0; for (T[] array : arrays) { System.arraycopy(array, 0, result, length, array.length); length += array.length; } return result; }\n\n    ### Response:",
        "ground_truth": "Joins arrays using provided component type.",
        "predict": " Returns the packages with static files of HaTeMiLe for Python.\n\n    :return: The packages with static files of HaTeMiLe for Python.\n    :rtype: dict(str, list(str)).\n\n    "
    },
    {
        "ID": 1495,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def first(self): \"\"\"Extract the first AppNexus object present in the response\"\"\" page = self.get_page(num_elements=1) data = self.extract_data(page) if data: return data[0]\n\n    ### Response: Extract the first AppNexus object present in the response.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static <T> T[] resize(T[] buffer, int newSize) { Class<T> componentType = (Class<T>) buffer.getClass().getComponentType(); T[] temp = (T[]) Array.newInstance(componentType, newSize); System.arraycopy(buffer, 0, temp, 0, buffer.length >= newSize ? newSize : buffer.length); return temp; }\n\n    ### Response:",
        "ground_truth": "Resizes an array.",
        "predict": " Extract the first AppNexus object present in the response.\n\n    "
    },
    {
        "ID": 1496,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func legacyBuildFieldSelectorKeyConversionFunc(label, value string) (internalLabel, internalValue string, err error) { switch label { case \"status\", \"podName\": return label, value, nil default: return apihelpers.LegacyMetaV1FieldSelectorConversionWithName(label, value) } }\n\n    ### Response: // because field selectors can vary in support by version they are exposed under, we have one function for each\n// groupVersion we're registering for.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static <T> T[] append(T[] buffer, T newElement) { T[] t = resize(buffer, buffer.length + 1); t[buffer.length] = newElement; return t; }\n\n    ### Response:",
        "ground_truth": "Appends an element to array.",
        "predict": " // because field selectors can vary in support by version they are exposed under, we have one function for each\n// groupVersion we're registering for.\n\n    "
    },
    {
        "ID": 1497,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _compile_signature(self, iexec, call_name): \"\"\"Compiles the signature for the specified executable and returns as a dictionary.\"\"\" if iexec is not None: summary = iexec.summary if isinstance(iexec, Function): summary = iexec.returns + \"| \" + iexec.summary elif isinstance(iexec, Subroutine) and len(iexec.modifiers) > 0: summary = \", \".join(iexec.modifiers) + \" | \" + iexec.summary elif isinstance(iexec, Interface): summary = iexec.describe() else: summary = iexec.summary #Add the name of the module who owns the method. Useful in case the #same executable is defined in multiple modules, but only one is #referenced in the current context. if iexec.parent is not None: summary += \" | MODULE: {}\".format(iexec.module.name) else: summary += \" | BUILTIN\" return dict( params=[p.name for p in iexec.ordered_parameters], index=0, call_name=call_name, description=summary, ) else: return []\n\n    ### Response: Compiles the signature for the specified executable and returns\n        as a dictionary..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SuppressWarnings({\"unchecked\"}) public static <T> T[] remove(T[] buffer, int offset, int length, Class<T> componentType) { int len2 = buffer.length - length; T[] temp = (T[]) Array.newInstance(componentType, len2); System.arraycopy(buffer, 0, temp, 0, offset); System.arraycopy(buffer, offset + length, temp, offset, len2 - offset); return temp; }\n\n    ### Response:",
        "ground_truth": "Removes sub-array.",
        "predict": " Compiles the signature for the specified executable and returns\n        as a dictionary..\n\n    "
    },
    {
        "ID": 1498,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void sameTextNode() throws TTIOException, XMLStreamException { // Update variables. mInsert = EInsert.NOINSERT; mDelete = EDelete.NODELETE; mInserted = false; mInsertedEndTag = false; mRemovedNode = false; // Check if last node reached. // checkIfLastNode(false); // Skip whitespace events. skipWhitespaces(mReader); // Move to right sibling if next node isn't an end tag. if (mReader.peek().getEventType() != XMLStreamConstants.END_ELEMENT) { // // Check if next node matches or not. // boolean found = false; // if (mReader.peek().getEventType() == // XMLStreamConstants.START_ELEMENT) { // found = checkElement(mReader.peek().asStartElement()); // } else if (mReader.peek().getEventType() == // XMLStreamConstants.CHARACTERS) { // found = checkText(mReader.peek().asCharacters()); // } // // // If next node doesn't match/isn't the same move on. // if (!found) { if (mWtx.moveTo(((ITreeStructData)mWtx.getNode()).getRightSiblingKey())) { mMovedToRightSibling = true; } else { mMovedToRightSibling = false; } // } } mInsert = EInsert.ATMIDDLEBOTTOM; }\n\n    ### Response: In case they are the same nodes move cursor to next node and update\nstack.\n\n@throws TTIOException\nIn case of any Treetank error.\n@throws XMLStreamException\nIn case of any StAX parsing error..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static int indexOf(char[] array, char value) { for (int i = 0; i < array.length; i++) { if (array[i] == value) { return i; } } return -1; }\n\n    ### Response:",
        "ground_truth": "Finds the first occurrence of an element in an array.",
        "predict": " In case they are the same nodes move cursor to next node and update\nstack.\n\n@throws TTIOException\nIn case of any Treetank error.\n@throws XMLStreamException\nIn case of any StAX parsing error..\n\n    "
    },
    {
        "ID": 1499,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def start(self) -> None: \"\"\" Start monitoring the base unit. \"\"\" self._shutdown = False # Start listening (if server) / Open connection (if client) if isinstance(self._protocol, Server): self.create_task(self._async_listen) elif isinstance(self._protocol, Client): self.create_task(self._async_open) else: raise NotImplementedError\n\n    ### Response: Start monitoring the base unit..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static int indexOf(Object[] array, Object value) { for (int i = 0; i < array.length; i++) { if (array[i].equals(value)) { return i; } } return -1; }\n\n    ### Response:",
        "ground_truth": "Finds the first occurrence in an array.",
        "predict": " Start monitoring the base unit..\n\n    "
    },
    {
        "ID": 1500,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static function call() { $arguments = func_get_args(); // get the key $key = array_shift( $arguments ); // container call if ( is_string( $key ) && array_key_exists( $key, static::$_container ) && is_callable( static::$_container[$key] ) ) { return call_user_func_array( static::$_container[$key], $arguments ); } if ( !is_callable( $key ) ) { throw new CCException( \"CCContainer::call - Cannot call '\".$key.\"' invalid callback.\" ); } // default callback return call_user_func_array( $key, $arguments ); }\n\n    ### Response: call a container\n\n@param string \t$key\n@param mixed\t\t$callback\n@return void.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static int indexOf(byte[] array, byte[] sub, int startIndex) { return indexOf(array, sub, startIndex, array.length); }\n\n    ### Response:",
        "ground_truth": "Finds the first occurrence in an array from specified given position.",
        "predict": " call a container\n\n@param string \t$key\n@param mixed\t\t$callback\n@return void.\n\n    "
    },
    {
        "ID": 1501,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def __field_callback(self, field, event, *args, **kwargs): # type: (str, str, *Any, **Any) -> Any \"\"\" Calls the registered method in the component for the given field event :param field: A field name :param event: An event (IPOPO_CALLBACK_VALIDATE, ...) :return: The callback result, or None :raise Exception: Something went wrong \"\"\" # Get the field callback info cb_info = self.context.get_field_callback(field, event) if not cb_info: # No registered callback return True # Extract information callback, if_valid = cb_info if if_valid and self.state != StoredInstance.VALID: # Don't call the method if the component state isn't satisfying return True # Call it result = callback(self.instance, field, *args, **kwargs) if result is None: # Special case, if the call back returns nothing return True return result\n\n    ### Response: Calls the registered method in the component for the given field event\n\n        :param field: A field name\n        :param event: An event (IPOPO_CALLBACK_VALIDATE, ...)\n        :return: The callback result, or None\n        :raise Exception: Something went wrong.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public LagartoDOMBuilder enableXhtmlMode() { config.ignoreWhitespacesBetweenTags = false; // collect all whitespaces config.setCaseSensitive(true); // XHTML is case sensitive config.setEnableRawTextModes(false); // all tags are parsed in the same way config.enabledVoidTags = true; // list of void tags config.selfCloseVoidTags = true; // self close void tags config.impliedEndTags = false; // no implied tag ends config.setEnableConditionalComments(false); // don't enable IE conditional comments config.setParseXmlTags(false); // enable XML mode in parsing return this; }\n\n    ### Response:",
        "ground_truth": "Enables XHTML mode.",
        "predict": " Calls the registered method in the component for the given field event\n\n        :param field: A field name\n        :param event: An event (IPOPO_CALLBACK_VALIDATE, ...)\n        :return: The callback result, or None\n        :raise Exception: Something went wrong.\n\n    "
    },
    {
        "ID": 1502,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private function getParameterValues ($function, array $parameters = []) { $functionParams = []; $parameterIndex = 0; foreach ($function->getParameters() as $parameter) { $parameterName = $parameter->getName(); $parameterValue = null; if (array_key_exists($parameterName, $parameters)) { $parameterValue = $parameters[$parameterName]; } else if ($parameter->hasType()) { $type = $parameter->getType(); if (!$type->isBuiltin()) { $typeName = (string)$type; if (array_key_exists($typeName, $parameters)) { $parameterValue = $parameters[$typeName]; } else if (!$parameter->isDefaultValueAvailable()) { $typeClass = new ReflectionClass($typeName); foreach ($typeClass->getMethods(ReflectionMethod::IS_STATIC) as $staticMethod) { if ($staticMethod->getReturnType() != null && ((string)$staticMethod->getReturnType() == $typeName) && $staticMethod->getNumberOfParameters() == 0) { $parameterValue = $staticMethod->invoke(null); break; } } } } } if ($parameterValue == null) { if (array_key_exists($parameterIndex, $parameters)) { $parameterValue = $parameters[$parameterIndex]; $parameterIndex++; } else if ($parameter->isDefaultValueAvailable()) { $parameterValue = $parameter->getDefaultValue(); } } $functionParams[] = $parameterValue; } return $functionParams; }\n\n    ### Response: Returns the parameters values for a function\n@param ReflectionMethod|ReflectionFunction $function\n@param array $parameters\n@return array\n@throws \\ReflectionException.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public Document parse(final char[] content) { LagartoParser lagartoParser = new LagartoParser(content); return doParse(lagartoParser); }\n\n    ### Response:",
        "ground_truth": "Creates DOM tree from provided content.",
        "predict": " Returns the parameters values for a function\n@param ReflectionMethod|ReflectionFunction $function\n@param array $parameters\n@return array\n@throws \\ReflectionException.\n\n    "
    },
    {
        "ID": 1503,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function page(int $page, int $perPage): ArrayCollection { return $this->slice(($page - 1) * $perPage, $perPage); }\n\n    ### Response: Creates a paginated collection\n\n@param int $page    The page number\n@param int $perPage The number of items per page\n\n@return ArrayCollection.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected Document doParse(final LagartoParser lagartoParser) { lagartoParser.setConfig(config); LagartoDOMBuilderTagVisitor domBuilderTagVisitor = new LagartoDOMBuilderTagVisitor(this); lagartoParser.parse(domBuilderTagVisitor); return domBuilderTagVisitor.getDocument(); }\n\n    ### Response:",
        "ground_truth": "Parses the content using provided lagarto parser.",
        "predict": " Creates a paginated collection\n\n@param int $page    The page number\n@param int $perPage The number of items per page\n\n@return ArrayCollection.\n\n    "
    },
    {
        "ID": 1504,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function flush() { echo \"\\nFlushing directories... \"; foreach ($this->flushPaths as $dir) { $path = $this->basePath . '/' . $dir; if (file_exists($path)) { $this->flushDirectory($path); } $this->ensureDirectory($path); } echo \"done\\n\"; }\n\n    ### Response: Flushes directories..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void endCurrentBasicBlockWithNoSuccessor() { if (compute == COMPUTE_ALL_FRAMES) { Label nextBasicBlock = new Label(); nextBasicBlock.frame = new Frame(nextBasicBlock); nextBasicBlock.resolve(code.data, code.length); lastBasicBlock.nextBasicBlock = nextBasicBlock; lastBasicBlock = nextBasicBlock; currentBasicBlock = null; } else if (compute == COMPUTE_MAX_STACK_AND_LOCAL) { currentBasicBlock.outputStackMax = (short) maxRelativeStackSize; currentBasicBlock = null; } }\n\n    ### Response:",
        "ground_truth": "Ends the current basic block. This method must be used in the case where the current basic\nblock does not have any successor.\n\nWARNING: this method must be called after the currently visited instruction has been put in\n{@link #code} (if frames are computed, this method inserts a new Label to start a new basic\nblock after the current instruction).",
        "predict": " Flushes directories..\n\n    "
    },
    {
        "ID": 1505,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _collapse_subtree(self, name, recursive=True): \"\"\"Collapse a sub-tree.\"\"\" oname = name children = self._db[name][\"children\"] data = self._db[name][\"data\"] del_list = [] while (len(children) == 1) and (not data): del_list.append(name) name = children[0] children = self._db[name][\"children\"] data = self._db[name][\"data\"] parent = self._db[oname][\"parent\"] self._db[name][\"parent\"] = parent if parent: self._db[parent][\"children\"].remove(oname) self._db[parent][\"children\"] = sorted(self._db[parent][\"children\"] + [name]) else: self._root = name self._root_hierarchy_length = len( self.root_name.split(self._node_separator) ) for node in del_list: self._del_node(node) if recursive: for child in copy.copy(children): self._collapse_subtree(child)\n\n    ### Response: Collapse a sub-tree..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    final void collectAttributePrototypes(final Attribute.Set attributePrototypes) { attributePrototypes.addAttributes(firstAttribute); attributePrototypes.addAttributes(firstCodeAttribute); }\n\n    ### Response:",
        "ground_truth": "Collects the attributes of this method into the given set of attribute prototypes.\n\n@param attributePrototypes a set of attribute prototypes.",
        "predict": " Collapse a sub-tree..\n\n    "
    },
    {
        "ID": 1506,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def getSampleTypes(self, active_only=True): \"\"\"Return all sampletypes \"\"\" catalog = api.get_tool(\"bika_setup_catalog\") query = { \"portal_type\": \"SampleType\", # N.B. The `sortable_title` index sorts case sensitive. Since there # is no sort key for sample types, it makes more sense to sort # them alphabetically in the selection \"sort_on\": \"title\", \"sort_order\": \"ascending\" } results = catalog(query) if active_only: results = filter(api.is_active, results) sampletypes = map( lambda brain: (brain.UID, brain.Title), results) return DisplayList(sampletypes)\n\n    ### Response: Return all sampletypes.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void injectContext(final Object targetObject) { final Class targetType = targetObject.getClass(); final ScopeData scopeData = scopeDataInspector.inspectClassScopesWithCache(targetType); final Targets targets = new Targets(targetObject, scopeData); // inject no context scopeResolver.forEachScope(madvocScope -> madvocScope.inject(targets)); // inject special case scopeResolver.forScope(ParamsScope.class, scope -> scope.inject(targets)); // inject servlet context final ServletContext servletContext = madvocController.getApplicationContext(); if (servletContext != null) { scopeResolver.forEachScope(madvocScope -> madvocScope.inject(servletContext, targets)); } }\n\n    ### Response:",
        "ground_truth": "Inject context into target.",
        "predict": " Return all sampletypes.\n\n    "
    },
    {
        "ID": 1507,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (r *DynamicRouter) HandleFunc(pattern string, handler Handler, filters ...HttpFilter) { r.registerHandler(SplitPath(pattern), handler, filters...) }\n\n    ### Response: // HandleFunc register a new Handler for a given pattern.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void registerPseudoClass(final Class<? extends PseudoClass> pseudoClassType) { PseudoClass pseudoClass; try { pseudoClass = ClassUtil.newInstance(pseudoClassType); } catch (Exception ex) { throw new CSSellyException(ex); } PSEUDO_CLASS_MAP.put(pseudoClass.getPseudoClassName(), pseudoClass); }\n\n    ### Response:",
        "ground_truth": "Registers pseudo class.",
        "predict": " // HandleFunc register a new Handler for a given pattern.\n\n    "
    },
    {
        "ID": 1508,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func Polygon(box orb.Bound, p orb.Polygon, o orb.Orientation) orb.MultiPolygon { if len(p) == 0 { return nil } open, closed := clipRings(box, p) if len(open) == 0 { // nothing was clipped if len(closed) == 0 { return nil // everything outside bound } return orb.MultiPolygon{p} // everything inside bound } result := smartWrap(box, open, o) if len(result) == 1 { result[0] = append(result[0], closed...) } else { for _, i := range closed { result = addToMultiPolygon(result, i) } } return result }\n\n    ### Response: // Polygon will smart clip a polygon to the bound.\n// Rings that are NOT closed AND have an endpoint in the bound will be\n// implicitly closed..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static PseudoClass lookupPseudoClass(final String pseudoClassName) { PseudoClass pseudoClass = PSEUDO_CLASS_MAP.get(pseudoClassName); if (pseudoClass == null) { throw new CSSellyException(\"Unsupported pseudo class: \" + pseudoClassName); } return pseudoClass; }\n\n    ### Response:",
        "ground_truth": "Lookups pseudo class for given pseudo class name.",
        "predict": " // Polygon will smart clip a polygon to the bound.\n// Rings that are NOT closed AND have an endpoint in the bound will be\n// implicitly closed..\n\n    "
    },
    {
        "ID": 1509,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def add_before(self, pipeline): \"\"\"Add a Pipeline to be applied before this processing pipeline. Arguments: pipeline: The Pipeline or callable to apply before this Pipeline. \"\"\" if not isinstance(pipeline, Pipeline): pipeline = Pipeline(pipeline) self.pipes = pipeline.pipes[:] + self.pipes[:] return self\n\n    ### Response: Add a Pipeline to be applied before this processing pipeline.\n\n        Arguments:\n            pipeline: The Pipeline or callable to apply before this\n                Pipeline..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void invoke(final ActionRequest actionRequest) { if (executorService == null) { throw new MadvocException(\"No action is marked as async!\"); } final HttpServletRequest servletRequest = actionRequest.getHttpServletRequest(); log.debug(() -> \"Async call to: \" + actionRequest); final AsyncContext asyncContext = servletRequest.startAsync(); executorService.submit(() -> { try { actionRequest.invoke(); } catch (Exception ex) { log.error(\"Invoking async action path failed: \" , ExceptionUtil.unwrapThrowable(ex)); } finally { asyncContext.complete(); } }); }\n\n    ### Response:",
        "ground_truth": "Invokes an action asynchronously by submitting it to the thread pool.",
        "predict": " Add a Pipeline to be applied before this processing pipeline.\n\n        Arguments:\n            pipeline: The Pipeline or callable to apply before this\n                Pipeline..\n\n    "
    },
    {
        "ID": 1510,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (c *FakeOAuthAccessTokens) Delete(name string, options *v1.DeleteOptions) error { _, err := c.Fake. Invokes(testing.NewRootDeleteAction(oauthaccesstokensResource, name), &oauth.OAuthAccessToken{}) return err }\n\n    ### Response: // Delete takes name of the oAuthAccessToken and deletes it. Returns an error if one occurs..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected String[] getAllBeanPropertyNames(final Class type, final boolean declared) { ClassDescriptor classDescriptor = ClassIntrospector.get().lookup(type); PropertyDescriptor[] propertyDescriptors = classDescriptor.getAllPropertyDescriptors(); ArrayList<String> names = new ArrayList<>(propertyDescriptors.length); for (PropertyDescriptor propertyDescriptor : propertyDescriptors) { MethodDescriptor getter = propertyDescriptor.getReadMethodDescriptor(); if (getter != null) { if (getter.matchDeclared(declared)) { names.add(propertyDescriptor.getName()); } } else if (includeFields) { FieldDescriptor field = propertyDescriptor.getFieldDescriptor(); if (field != null) { if (field.matchDeclared(declared)) { names.add(field.getName()); } } } } return names.toArray(new String[0]); }\n\n    ### Response:",
        "ground_truth": "Returns all bean property names.",
        "predict": " // Delete takes name of the oAuthAccessToken and deletes it. Returns an error if one occurs..\n\n    "
    },
    {
        "ID": 1511,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public synchronized SpiderMonitor register(Spider... spiders) throws JMException { for (Spider spider : spiders) { MonitorSpiderListener monitorSpiderListener = new MonitorSpiderListener(); if (spider.getSpiderListeners() == null) { List<SpiderListener> spiderListeners = new ArrayList<SpiderListener>(); spiderListeners.add(monitorSpiderListener); spider.setSpiderListeners(spiderListeners); } else { spider.getSpiderListeners().add(monitorSpiderListener); } SpiderStatusMXBean spiderStatusMBean = getSpiderStatusMBean(spider, monitorSpiderListener); registerMBean(spiderStatusMBean); spiderStatuses.add(spiderStatusMBean); } return this; }\n\n    ### Response: Register spider for monitor.\n\n@param spiders spiders\n@return this\n@throws JMException JMException.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void visit() { String[] properties = resolveProperties(source, declared); for (String name : properties) { if (name == null) { continue; } if (!rules.match(name, blacklist)) { continue; } Object value; String propertyName = name; if (isSourceMap) { propertyName = LEFT_SQ_BRACKET + name + RIGHT_SQ_BRACKET; } if (declared) { value = BeanUtil.declared.getProperty(source, propertyName); } else { value = BeanUtil.pojo.getProperty(source, propertyName); } if (value == null && ignoreNullValues) { continue; } if (value instanceof String && StringUtil.isEmpty((String) value)) { continue; } visitProperty(name, value); } }\n\n    ### Response:",
        "ground_truth": "Starts visiting properties.",
        "predict": " Register spider for monitor.\n\n@param spiders spiders\n@return this\n@throws JMException JMException.\n\n    "
    },
    {
        "ID": 1512,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function linkProperties($FromNode, $ToNode, array $Settings) { if (!isset($this->Data[$FromNode])) { return 0; } if (!isset($this->Data[$ToNode])) { return 0; } $R = isset($Settings[\"R\"]) ? $Settings[\"R\"] : 0; $G = isset($Settings[\"G\"]) ? $Settings[\"G\"] : 0; $B = isset($Settings[\"B\"]) ? $Settings[\"B\"] : 0; $Alpha = isset($Settings[\"Alpha\"]) ? $Settings[\"Alpha\"] : 100; $Name = isset($Settings[\"Name\"]) ? $Settings[\"Name\"] : null; $Ticks = isset($Settings[\"Ticks\"]) ? $Settings[\"Ticks\"] : null; $this->Links[$FromNode][$ToNode][\"R\"] = $R; $this->Links[$ToNode][$FromNode][\"R\"] = $R; $this->Links[$FromNode][$ToNode][\"G\"] = $G; $this->Links[$ToNode][$FromNode][\"G\"] = $G; $this->Links[$FromNode][$ToNode][\"B\"] = $B; $this->Links[$ToNode][$FromNode][\"B\"] = $B; $this->Links[$FromNode][$ToNode][\"Alpha\"] = $Alpha; $this->Links[$ToNode][$FromNode][\"Alpha\"] = $Alpha; $this->Links[$FromNode][$ToNode][\"Name\"] = $Name; $this->Links[$ToNode][$FromNode][\"Name\"] = $Name; $this->Links[$FromNode][$ToNode][\"Ticks\"] = $Ticks; $this->Links[$ToNode][$FromNode][\"Ticks\"] = $Ticks; }\n\n    ### Response: Set link properties\n@param int $FromNode\n@param int $ToNode\n@param array $Settings\n@return null|int.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public boolean accept(final String propertyName, final String rule, final boolean include) { return propertyName.equals(rule); }\n\n    ### Response:",
        "ground_truth": "Compares property name to the rules.",
        "predict": " Set link properties\n@param int $FromNode\n@param int $ToNode\n@param array $Settings\n@return null|int.\n\n    "
    },
    {
        "ID": 1513,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (n *node) addChild(c nodeContent) (*node, error) { if !n.isAllowed(c, false) { return nil, errors.New(ErrDuplicate, errorMessages) } child := &node{ container: n.container, parent: n, content: c, } n.children = append(n.children, child) return child, nil }\n\n    ### Response: // addChild adds a child node depending on allowed duplicates..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public MethodInjectionPoint[] resolve(final Class type) { // lookup methods ClassDescriptor cd = ClassIntrospector.get().lookup(type); List<MethodInjectionPoint> list = new ArrayList<>(); MethodDescriptor[] allMethods = cd.getAllMethodDescriptors(); for (MethodDescriptor methodDescriptor : allMethods) { Method method = methodDescriptor.getMethod(); if (ClassUtil.isBeanPropertySetter(method)) { // ignore setters continue; } if (method.getParameterTypes().length == 0) { // ignore methods with no argument continue; } BeanReferences[] references = referencesResolver.readAllReferencesFromAnnotation(method); if (references != null) { MethodInjectionPoint methodInjectionPoint = new MethodInjectionPoint(method, references); list.add(methodInjectionPoint); } } final MethodInjectionPoint[] methodInjectionPoints; if (list.isEmpty()) { methodInjectionPoints = MethodInjectionPoint.EMPTY; } else { methodInjectionPoints = list.toArray(new MethodInjectionPoint[0]); } return methodInjectionPoints; }\n\n    ### Response:",
        "ground_truth": "Resolve method injection points in given class.",
        "predict": " // addChild adds a child node depending on allowed duplicates..\n\n    "
    },
    {
        "ID": 1514,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function cacheGet($name) { /* Do cache garbage collection. */ $this->cacheGc(); try { $data = $this->store->read('cache', $this->cacheId($name)); } catch (\\phpSec\\Exception $e) { return false; } if($data ==! false) { if($data['ttl'] > time()) { return unserialize($data['data']); } $this->store->delete('cache', $this->cacheId($name)); } return false; }\n\n    ### Response: Get data from the cache.\n\n@param string $name\nString containing the name of the data to get.\n\n@return mixed\nReturns data in it's original form, or false if no data stored..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void readFilterConfigParameters(final FilterConfig filterConfig, final Object target, final String... parameters) { for (String parameter : parameters) { String value = filterConfig.getInitParameter(parameter); if (value != null) { BeanUtil.declared.setProperty(target, parameter, value); } } }\n\n    ### Response:",
        "ground_truth": "Reads filter config parameters and set into destination target.",
        "predict": " Get data from the cache.\n\n@param string $name\nString containing the name of the data to get.\n\n@return mixed\nReturns data in it's original form, or false if no data stored..\n\n    "
    },
    {
        "ID": 1515,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function setInstalledPackages(array $installedPackages) { $dictionary = []; foreach ($installedPackages as $installedPackage) { $dictionary[$installedPackage->getPackageHandle()] = $installedPackage; } $this->installedPackages = $dictionary; return $this; }\n\n    ### Response: Set the list of installed packages.\n\n@param Package[] $installedPackages\n\n@return $this.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void sendBundleFile(final HttpServletResponse resp, final File bundleFile) throws IOException { OutputStream out = resp.getOutputStream(); FileInputStream fileInputStream = new FileInputStream(bundleFile); try { StreamUtil.copy(fileInputStream, out); } finally { StreamUtil.close(fileInputStream); } }\n\n    ### Response:",
        "ground_truth": "Outputs bundle file to the response.",
        "predict": " Set the list of installed packages.\n\n@param Package[] $installedPackages\n\n@return $this.\n\n    "
    },
    {
        "ID": 1516,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def fetch_request_ids(item_ids, cls, attr_name, verification_list=None): \"\"\"Return a list of cls instances for all the ids provided in item_ids. :param item_ids: The list of ids to fetch objects for :param cls: The class to fetch the ids from :param attr_name: The name of the attribute for exception purposes :param verification_list: If provided, a list of acceptable instances Raise InvalidId exception using attr_name if any do not exist, or are not present in the verification_list. \"\"\" if not item_ids: return [] items = [] for item_id in item_ids: item = cls.fetch_by_id(item_id) if not item or (verification_list is not None and item not in verification_list): raise InvalidId(attr_name) items.append(item) return items\n\n    ### Response: Return a list of cls instances for all the ids provided in item_ids.\n\n    :param item_ids: The list of ids to fetch objects for\n    :param cls: The class to fetch the ids from\n    :param attr_name: The name of the attribute for exception purposes\n    :param verification_list: If provided, a list of acceptable instances\n\n    Raise InvalidId exception using attr_name if any do not\n        exist, or are not present in the verification_list..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public File lookupBundleFile(String bundleId) { if ((mirrors != null) && (!mirrors.isEmpty())) { String realBundleId = mirrors.remove(bundleId); if (realBundleId != null) { bundleId = realBundleId; } } return createBundleFile(bundleId); }\n\n    ### Response:",
        "ground_truth": "Lookups for bundle file.",
        "predict": " Return a list of cls instances for all the ids provided in item_ids.\n\n    :param item_ids: The list of ids to fetch objects for\n    :param cls: The class to fetch the ids from\n    :param attr_name: The name of the attribute for exception purposes\n    :param verification_list: If provided, a list of acceptable instances\n\n    Raise InvalidId exception using attr_name if any do not\n        exist, or are not present in the verification_list..\n\n    "
    },
    {
        "ID": 1517,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func KerlBytesToTrits(b []byte) (Trits, error) { if len(b) != HashBytesSize { return nil, errors.Wrapf(ErrInvalidBytesLength, \"must be %d in size\", HashBytesSize) } rb := make([]byte, len(b)) copy(rb, b) bigint.Reverse(rb) t := Trits(make([]int8, HashTrinarySize)) t[HashTrinarySize-1] = 0 base := (*(*[]uint32)(unsafe.Pointer(&rb)))[0:IntLength] // 12 * 32 bits = 384 bits if bigint.IsNull(base) { return t, nil } var flipTrits bool // Check if the MSB is 0, i.e. we have a positive number msbM := (unsafe.Sizeof(base[IntLength-1]) * 8) - 1 switch { case base[IntLength-1]>>msbM == 0: bigint.MustAdd(base, halfThree) default: bigint.Not(base) if bigint.MustCmp(base, halfThree) == 1 { bigint.MustSub(base, halfThree) flipTrits = true } else { bigint.AddSmall(base, 1) tmp := make([]uint32, IntLength) copy(tmp, halfThree) bigint.MustSub(tmp, base) copy(base, tmp) } } var rem uint64 for i := range t[0 : HashTrinarySize-1] { rem = 0 for j := IntLength - 1; j >= 0; j-- { lhs := (rem << 32) | uint64(base[j]) rhs := uint64(TrinaryRadix) q := uint32(lhs / rhs) r := uint32(lhs % rhs) base[j] = q rem = uint64(r) } t[i] = int8(rem) - 1 } if flipTrits { for i := range t { t[i] = -t[i] } } return t, nil }\n\n    ### Response: // KerlBytesToTrits converts binary to trinary.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public File lookupGzipBundleFile(final File file) throws IOException { String path = file.getPath() + ZipUtil.GZIP_EXT; File gzipFile = new File(path); if (!gzipFile.exists()) { if (log.isDebugEnabled()) { log.debug(\"gzip bundle to \" + path); } ZipUtil.gzip(file); } return gzipFile; }\n\n    ### Response:",
        "ground_truth": "Locates gzipped version of bundle file. If gzip file\ndoes not exist, it will be created.",
        "predict": " // KerlBytesToTrits converts binary to trinary.\n\n    "
    },
    {
        "ID": 1518,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String getValue(String key) throws Exception{ Object val = null; for (ObjectName oname: hadoopObjectNames) { try { val = mbsc.getAttribute(oname, key); } catch (AttributeNotFoundException anfe) { /*just go to the next */ continue; } catch(ReflectionException re) { if (re.getCause() instanceof NoSuchMethodException) { continue; } } err(\"Info: key = \" + key + \"; val = \" + val); break; } return (val == null) ? null : val.toString(); }\n\n    ### Response: get single value by key.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public synchronized String registerBundle(final String contextPath, final String actionPath, final String tempBundleId, final String bundleContentType, final List<String> sources) { if (tempBundleId == null || sources.isEmpty()) { if (strategy == Strategy.ACTION_MANAGED) { // page does not include any resource source file actionBundles.put(actionPath, StringPool.EMPTY); } return null; } // create unique digest from the collected sources String[] sourcesArray = sources.toArray(new String[0]); for (int i = 0, sourcesArrayLength = sourcesArray.length; i < sourcesArrayLength; i++) { sourcesArray[i] = sourcesArray[i].trim().toLowerCase(); } if (sortResources) { Arrays.sort(sourcesArray); } StringBand sb = new StringBand(sourcesArray.length); for (String src : sourcesArray) { sb.append(src); } String sourcesString = sb.toString(); String bundleId = createDigest(sourcesString); bundleId += '.' + bundleContentType; // bundle appears for the first time, create the bundle if (strategy == Strategy.ACTION_MANAGED) { actionBundles.put(actionPath, bundleId); mirrors.put(tempBundleId, bundleId); } try { createBundle(contextPath, actionPath, bundleId, sources); } catch (IOException ioex) { throw new HtmlStaplerException(\"Can't create bundle\", ioex); } return bundleId; }\n\n    ### Response:",
        "ground_truth": "Registers new bundle that consist of provided list of source paths.\nReturns the real bundle id, as provided one is just a temporary bundle id.",
        "predict": " get single value by key.\n\n    "
    },
    {
        "ID": 1519,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def check_redis_connected(client): \"\"\" A built-in check to connect to Redis using the given client and see if it responds to the ``PING`` command. It's automatically added to the list of Dockerflow checks if a :class:`~redis.StrictRedis` instances is passed to the :class:`~dockerflow.flask.app.Dockerflow` class during instantiation, e.g.:: import redis from flask import Flask from dockerflow.flask import Dockerflow app = Flask(__name__) redis_client = redis.StrictRedis(host='localhost', port=6379, db=0) dockerflow = Dockerflow(app, redis=redis) An alternative approach to instantiating a Redis client directly would be using the `Flask-Redis <https://github.com/underyx/flask-redis>`_ Flask extension:: from flask import Flask from flask_redis import FlaskRedis from dockerflow.flask import Dockerflow app = Flask(__name__) app.config['REDIS_URL'] = 'redis://:password@localhost:6379/0' redis_store = FlaskRedis(app) dockerflow = Dockerflow(app, redis=redis_store) \"\"\" import redis errors = [] try: result = client.ping() except redis.ConnectionError as e: msg = 'Could not connect to redis: {!s}'.format(e) errors.append(Error(msg, id=health.ERROR_CANNOT_CONNECT_REDIS)) except redis.RedisError as e: errors.append(Error('Redis error: \"{!s}\"'.format(e), id=health.ERROR_REDIS_EXCEPTION)) else: if not result: errors.append(Error('Redis ping failed', id=health.ERROR_REDIS_PING_FAILED)) return errors\n\n    ### Response: A built-in check to connect to Redis using the given client and see\n    if it responds to the ``PING`` command.\n\n    It's automatically added to the list of Dockerflow checks if a\n    :class:`~redis.StrictRedis` instances is passed\n    to the :class:`~dockerflow.flask.app.Dockerflow` class during\n    instantiation, e.g.::\n\n        import redis\n        from flask import Flask\n        from dockerflow.flask import Dockerflow\n\n        app = Flask(__name__)\n        redis_client = redis.StrictRedis(host='localhost', port=6379, db=0)\n\n        dockerflow = Dockerflow(app, redis=redis)\n\n    An alternative approach to instantiating a Redis client directly\n    would be using the `Flask-Redis `_\n    Flask extension::\n\n        from flask import Flask\n        from flask_redis import FlaskRedis\n        from dockerflow.flask import Dockerflow\n\n        app = Flask(__name__)\n        app.config['REDIS_URL'] = 'redis://:password@localhost:6379/0'\n        redis_store = FlaskRedis(app)\n\n        dockerflow = Dockerflow(app, redis=redis_store).\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected String createDigest(final String source) { final DigestEngine digestEngine = DigestEngine.sha256(); final byte[] bytes = digestEngine.digest(CharUtil.toSimpleByteArray(source)); String digest = Base32.encode(bytes); if (uniqueDigestKey != null) { digest += uniqueDigestKey; } return digest; }\n\n    ### Response:",
        "ground_truth": "Creates digest i.e. bundle id from given string.\nReturned digest must be filename safe, for all platforms.",
        "predict": " A built-in check to connect to Redis using the given client and see\n    if it responds to the ``PING`` command.\n\n    It's automatically added to the list of Dockerflow checks if a\n    :class:`~redis.StrictRedis` instances is passed\n    to the :class:`~dockerflow.flask.app.Dockerflow` class during\n    instantiation, e.g.::\n\n        import redis\n        from flask import Flask\n        from dockerflow.flask import Dockerflow\n\n        app = Flask(__name__)\n        redis_client = redis.StrictRedis(host='localhost', port=6379, db=0)\n\n        dockerflow = Dockerflow(app, redis=redis)\n\n    An alternative approach to instantiating a Redis client directly\n    would be using the `Flask-Redis `_\n    Flask extension::\n\n        from flask import Flask\n        from flask_redis import FlaskRedis\n        from dockerflow.flask import Dockerflow\n\n        app = Flask(__name__)\n        app.config['REDIS_URL'] = 'redis://:password@localhost:6379/0'\n        redis_store = FlaskRedis(app)\n\n        dockerflow = Dockerflow(app, redis=redis_store).\n\n    "
    },
    {
        "ID": 1520,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public void visit(NodeVisitor v) { if (v.visit(this) && value != null) { value.visit(v); } }\n\n    ### Response: Visits this node, and if present, the yielded value..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void createBundle(final String contextPath, final String actionPath, final String bundleId, final List<String>sources) throws IOException { final File bundleFile = createBundleFile(bundleId); if (bundleFile.exists()) { return; } StringBand sb = new StringBand(sources.size() * 2); for (String src : sources) { if (sb.length() != 0) { sb.append(StringPool.NEWLINE); } String content; if (isExternalResource(src)) { content = downloadString(src); } else { if (!downloadLocal) { // load local resource from file system String localFile = webRoot; if (src.startsWith(contextPath + '/')) { src = src.substring(contextPath.length()); } if (src.startsWith(StringPool.SLASH)) { // absolute path localFile += src; } else { // relative path localFile += '/' + FileNameUtil.getPathNoEndSeparator(actionPath) + '/' + src; } // trim link parameters, if any int qmndx = localFile.indexOf('?'); if (qmndx != -1) { localFile = localFile.substring(0, qmndx); } try { content = FileUtil.readString(localFile); } catch (IOException ioex) { if (notFoundExceptionEnabled) { throw ioex; } if (log.isWarnEnabled()) { log.warn(ioex.getMessage()); } content = null; } } else { // download local resource String localUrl = localAddressAndPort; if (src.startsWith(StringPool.SLASH)) { localUrl += contextPath + src; } else { localUrl += contextPath + FileNameUtil.getPath(actionPath) + '/' + src; } content = downloadString(localUrl); } if (content != null) { if (isCssResource(src)) { content = fixCssRelativeUrls(content, src); } } } if (content != null) { content = onResourceContent(content); sb.append(content); } } FileUtil.writeString(bundleFile, sb.toString()); if (log.isInfoEnabled()) { log.info(\"Bundle created: \" + bundleId); } }\n\n    ### Response:",
        "ground_truth": "Creates bundle file by loading resource files content. If bundle file already\nexist it will not be recreated!",
        "predict": " Visits this node, and if present, the yielded value..\n\n    "
    },
    {
        "ID": 1521,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void insertAttributeAt(Attribute attribute, int position) { if (this.instanceInformation == null) { this.instanceInformation = new InstanceInformation(); } this.instanceInformation.insertAttributeAt(attribute, position); for (int i = 0; i < numInstances(); i++) { instance(i).setDataset(null); instance(i).insertAttributeAt(i); instance(i).setDataset(this); } }\n\n    ### Response: Insert attribute at.\n\n@param attribute the attribute\n@param position the position.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public synchronized void reset() { if (strategy == Strategy.ACTION_MANAGED) { actionBundles.clear(); mirrors.clear(); } final FindFile ff = new FindFile(); ff.includeDirs(false); ff.searchPath(new File(bundleFolder, staplerPath)); File f; int count = 0; while ((f = ff.nextFile()) != null) { f.delete(); count++; } if (log.isInfoEnabled()) { log.info(\"reset: \" + count + \" bundle files deleted.\"); } }\n\n    ### Response:",
        "ground_truth": "Clears all settings and removes all created bundle files from file system.",
        "predict": " Insert attribute at.\n\n@param attribute the attribute\n@param position the position.\n\n    "
    },
    {
        "ID": 1522,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (d *Document) GetLayout(ctx context.Context) (*Layout, APIResponse) { var layout Layout resp, err := d.client.makeAPIRequest(ctx, \"GET\", d.Links.Layout, nil, nil, \"\") if err != nil { return nil, apiResponse(ErrHTTPGetFailed, d.ID, resp, err) } defer resp.Body.Close() if resp.StatusCode != http.StatusOK { return nil, apiResponse(ErrDocumentLayout, d.ID, resp, errors.New(ErrDocumentLayout)) } if err := json.NewDecoder(resp.Body).Decode(&layout); err != nil { return nil, apiResponse(\"decoding failed\", d.ID, resp, err) } return &layout, apiResponse(\"layout completed\", d.ID, resp, err) }\n\n    ### Response: // GetLayout returns the JSON representation of a documents layout parsed as\n// Layout struct.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected String fixCssRelativeUrls(final String content, final String src) { final String path = FileNameUtil.getPath(src); final Matcher matcher = CSS_URL_PATTERN.matcher(content); final StringBuilder sb = new StringBuilder(content.length()); int start = 0; while (matcher.find()) { sb.append(content, start, matcher.start()); final String matchedUrl = StringUtil.removeChars(matcher.group(1), \"'\\\"\"); final String url; if (matchedUrl.startsWith(\"https://\") || matchedUrl.startsWith(\"http://\") || matchedUrl.startsWith(\"data:\")) { url = \"url('\" + matchedUrl + \"')\"; } else { url = fixRelativeUrl(matchedUrl, path); } sb.append(url); start = matcher.end(); } sb.append(content.substring(start)); return sb.toString(); }\n\n    ### Response:",
        "ground_truth": "Returns the content with all relative URLs fixed.",
        "predict": " // GetLayout returns the JSON representation of a documents layout parsed as\n// Layout struct.\n\n    "
    },
    {
        "ID": 1523,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function formatOutOfCountryKeepingAlphaChars(PhoneNumber $number, $regionCallingFrom) { $rawInput = $number->getRawInput(); // If there is no raw input, then we can't keep alpha characters because there aren't any. // In this case, we return formatOutOfCountryCallingNumber. if (mb_strlen($rawInput) == 0) { return $this->formatOutOfCountryCallingNumber($number, $regionCallingFrom); } $countryCode = $number->getCountryCode(); if (!$this->hasValidCountryCallingCode($countryCode)) { return $rawInput; } // Strip any prefix such as country calling code, IDD, that was present. We do this by comparing // the number in raw_input with the parsed number. // To do this, first we normalize punctuation. We retain number grouping symbols such as \" \" // only. $rawInput = self::normalizeHelper($rawInput, static::$ALL_PLUS_NUMBER_GROUPING_SYMBOLS, true); // Now we trim everything before the first three digits in the parsed number. We choose three // because all valid alpha numbers have 3 digits at the start - if it does not, then we don't // trim anything at all. Similarly, if the national number was less than three digits, we don't // trim anything at all. $nationalNumber = $this->getNationalSignificantNumber($number); if (mb_strlen($nationalNumber) > 3) { $firstNationalNumberDigit = strpos($rawInput, substr($nationalNumber, 0, 3)); if ($firstNationalNumberDigit !== false) { $rawInput = substr($rawInput, $firstNationalNumberDigit); } } $metadataForRegionCallingFrom = $this->getMetadataForRegion($regionCallingFrom); if ($countryCode == static::NANPA_COUNTRY_CODE) { if ($this->isNANPACountry($regionCallingFrom)) { return $countryCode . ' ' . $rawInput; } } elseif ($metadataForRegionCallingFrom !== null && $countryCode == $this->getCountryCodeForValidRegion($regionCallingFrom) ) { $formattingPattern = $this->chooseFormattingPatternForNumber( $metadataForRegionCallingFrom->numberFormats(), $nationalNumber ); if ($formattingPattern === null) { // If no pattern above is matched, we format the original input. return $rawInput; } $newFormat = new NumberFormat(); $newFormat->mergeFrom($formattingPattern); // The first group is the first group of digits that the user wrote together. $newFormat->setPattern(\"(\\\\d+)(.*)\"); // Here we just concatenate them back together after the national prefix has been fixed. $newFormat->setFormat('$1$2'); // Now we format using this pattern instead of the default pattern, but with the national // prefix prefixed if necessary. // This will not work in the cases where the pattern (and not the leading digits) decide // whether a national prefix needs to be used, since we have overridden the pattern to match // anything, but that is not the case in the metadata to date. return $this->formatNsnUsingPattern($rawInput, $newFormat, PhoneNumberFormat::NATIONAL); } $internationalPrefixForFormatting = ''; // If an unsupported region-calling-from is entered, or a country with multiple international // prefixes, the international format of the number is returned, unless there is a preferred // international prefix. if ($metadataForRegionCallingFrom !== null) { $internationalPrefix = $metadataForRegionCallingFrom->getInternationalPrefix(); $uniqueInternationalPrefixMatcher = new Matcher(static::SINGLE_INTERNATIONAL_PREFIX, $internationalPrefix); $internationalPrefixForFormatting = $uniqueInternationalPrefixMatcher->matches() ? $internationalPrefix : $metadataForRegionCallingFrom->getPreferredInternationalPrefix(); } $formattedNumber = $rawInput; $regionCode = $this->getRegionCodeForCountryCode($countryCode); // Metadata cannot be null because the country calling code is valid. $metadataForRegion = $this->getMetadataForRegionOrCallingCode($countryCode, $regionCode); $this->maybeAppendFormattedExtension( $number, $metadataForRegion, PhoneNumberFormat::INTERNATIONAL, $formattedNumber ); if (mb_strlen($internationalPrefixForFormatting) > 0) { $formattedNumber = $internationalPrefixForFormatting . ' ' . $countryCode . ' ' . $formattedNumber; } else { // Invalid region entered as country-calling-from (so no metadata was found for it) or the // region chosen has multiple international dialling prefixes. $this->prefixNumberWithCountryCallingCode( $countryCode, PhoneNumberFormat::INTERNATIONAL, $formattedNumber ); } return $formattedNumber; }\n\n    ### Response: Formats a phone number for out-of-country dialing purposes.\n\nNote that in this version, if the number was entered originally using alpha characters and\nthis version of the number is stored in raw_input, this representation of the number will be\nused rather than the digit representation. Grouping information, as specified by characters\nsuch as \"-\" and \" \", will be retained.\n\nCaveats:\n\n This will not produce good results if the country calling code is both present in the raw\ninput _and_ is the start of the national number. This is not a problem in the regions\nwhich typically use alpha numbers.\n This will also not produce good results if the raw input has any grouping information\nwithin the first three digits of the national number, and if the function needs to strip\npreceding digits/words in the raw input before these digits. Normally people group the\nfirst three digits together so this is not a huge problem - and will be fixed if it\nproves to be so.\n\n\n@param PhoneNumber $number the phone number that needs to be formatted\n@param String $regionCallingFrom the region where the call is being placed\n@return String the formatted phone number.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public DbSqlBuilder updateColumn(final Object entity, final String columnRef) { final Object value = BeanUtil.pojo.getProperty(entity, columnRef); return updateColumn(entity, columnRef, value); }\n\n    ### Response:",
        "ground_truth": "Reads property value and updates the DB.",
        "predict": " Formats a phone number for out-of-country dialing purposes.\n\nNote that in this version, if the number was entered originally using alpha characters and\nthis version of the number is stored in raw_input, this representation of the number will be\nused rather than the digit representation. Grouping information, as specified by characters\nsuch as \"-\" and \" \", will be retained.\n\nCaveats:\n\n This will not produce good results if the country calling code is both present in the raw\ninput _and_ is the start of the national number. This is not a problem in the regions\nwhich typically use alpha numbers.\n This will also not produce good results if the raw input has any grouping information\nwithin the first three digits of the national number, and if the function needs to strip\npreceding digits/words in the raw input before these digits. Normally people group the\nfirst three digits together so this is not a huge problem - and will be fixed if it\nproves to be so.\n\n\n@param PhoneNumber $number the phone number that needs to be formatted\n@param String $regionCallingFrom the region where the call is being placed\n@return String the formatted phone number.\n\n    "
    },
    {
        "ID": 1524,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _build_session_metric_values(self, session_name): \"\"\"Builds the session metric values.\"\"\" # result is a list of api_pb2.MetricValue instances. result = [] metric_infos = self._experiment.metric_infos for metric_info in metric_infos: metric_name = metric_info.name try: metric_eval = metrics.last_metric_eval( self._context.multiplexer, session_name, metric_name) except KeyError: # It's ok if we don't find the metric in the session. # We skip it here. For filtering and sorting purposes its value is None. continue # metric_eval is a 3-tuple of the form [wall_time, step, value] result.append(api_pb2.MetricValue(name=metric_name, wall_time_secs=metric_eval[0], training_step=metric_eval[1], value=metric_eval[2])) return result\n\n    ### Response: Builds the session metric values..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected static String createTableRefName(final Object entity) { Class type = entity.getClass(); type = (type == Class.class ? (Class) entity : type); return (type.getSimpleName() + '_'); }\n\n    ### Response:",
        "ground_truth": "Creates table reference name from entity type.\nAlways appends an underscore to reference name in order\nto circumvent SQL compatibility issues when entity class name\nequals to a reserved word.",
        "predict": " Builds the session metric values..\n\n    "
    },
    {
        "ID": 1525,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function display($info = null, $details = null, $origin = null, $time = null) { if (!$this->hasCommand()) { return; } // Build handle $comment = $this->getTree().$this->getFork(); // Add details if ($info) { $comment .= ' <info>'.$info.'</info>'; } if ($details) { $comment .= ' <comment>('.$details.')</comment>'; } if ($origin) { $comment .= ' fired by <info>'.$origin.'</info>'; } if ($time) { $comment .= ' [~'.$time.'s]'; } $this->command->writeln($comment); }\n\n    ### Response: Display a status.\n\n@param string|null $info\n@param string|null $details\n@param string|null $origin\n@param float|null  $time.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public DbSession getDbSession() { log.debug(\"Requesting db TX manager session\"); final DbJtxTransaction jtx = (DbJtxTransaction) jtxTxManager.getTransaction(); if (jtx == null) { throw new DbSqlException( \"No transaction is in progress and DbSession can't be provided. \" + \"It seems that transaction manager is not used to begin a transaction.\"); } return jtx.requestResource(); }\n\n    ### Response:",
        "ground_truth": "Returns session from JTX transaction manager and started transaction.",
        "predict": " Display a status.\n\n@param string|null $info\n@param string|null $details\n@param string|null $origin\n@param float|null  $time.\n\n    "
    },
    {
        "ID": 1526,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def update(self): \"\"\"Update the cloud stats. Return the stats (dict) \"\"\" # Init new stats stats = self.get_init_value() # Requests lib is needed to get stats from the Cloud API if import_error_tag: return stats # Update the stats if self.input_method == 'local': stats = self.OPENSTACK.stats # Example: # Uncomment to test on physical computer # stats = {'ami-id': 'ami-id', # 'instance-id': 'instance-id', # 'instance-type': 'instance-type', # 'region': 'placement/availability-zone'} # Update the stats self.stats = stats return self.stats\n\n    ### Response: Update the cloud stats.\n\n        Return the stats (dict).\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected T[] convertToSingleElementArray(final Object value) { T[] singleElementArray = createArray(1); singleElementArray[0] = convertType(value); return singleElementArray; }\n\n    ### Response:",
        "ground_truth": "Creates an array with single element.",
        "predict": " Update the cloud stats.\n\n        Return the stats (dict).\n\n    "
    },
    {
        "ID": 1527,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function duplicate($doWrite = true, $manyMany = 'many_many') { // Versioned 1.0 has a bug where [] will result in _all_ relations being duplicated if ($manyMany === 'many_many' && !$this->manyMany()) { $manyMany = null; } $clonedNode = parent::duplicate(true, $manyMany); foreach ($this->Options() as $field) { /** @var EditableOption $newField */ $newField = $field->duplicate(false); $newField->ParentID = $clonedNode->ID; $newField->Version = 0; $newField->write(); } return $clonedNode; }\n\n    ### Response: Duplicate a pages content. We need to make sure all the fields attached\nto that page go with it\n\n{@inheritDoc}.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Map<String, String> parseSignatureForGenerics(final String signature, final boolean isInterface) { if (signature == null) { return Collections.emptyMap(); } final Map<String, String> genericsMap = new HashMap<>(); SignatureReader sr = new SignatureReader(signature); StringBuilder sb = new StringBuilder(); TraceSignatureVisitor v = new TraceSignatureVisitor(sb, isInterface) { String genericName; @Override public void visitFormalTypeParameter(final String name) { genericName = name; super.visitFormalTypeParameter(name); } @Override public void visitClassType(final String name) { if (genericName != null) { genericsMap.put(genericName, 'L' + name + ';'); genericName = null; } super.visitClassType(name); } }; sr.accept(v); return genericsMap; }\n\n    ### Response:",
        "ground_truth": "Parses signature for generic information and returns a map where key is generic name\nand value is raw type. Returns an empty map if signature does not define any generics.",
        "predict": " Duplicate a pages content. We need to make sure all the fields attached\nto that page go with it\n\n{@inheritDoc}.\n\n    "
    },
    {
        "ID": 1528,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function has_summary() { if (isset($this->record->hassummary)) { return !empty($this->record->hassummary); } if (!isset($this->record->summary)) { // We need to retrieve summary. $this->__get('summary'); } return !empty($this->record->summary); }\n\n    ### Response: Indicates if the course has non-empty summary field\n\n@return bool.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public SetInjectionPoint[] resolve(final Class type, final boolean autowire) { ClassDescriptor cd = ClassIntrospector.get().lookup(type); List<SetInjectionPoint> list = new ArrayList<>(); PropertyDescriptor[] allProperties = cd.getAllPropertyDescriptors(); for (PropertyDescriptor propertyDescriptor : allProperties) { if (propertyDescriptor.isGetterOnly()) { continue; } Class propertyType = propertyDescriptor.getType(); if (!ClassUtil.isTypeOf(propertyType, Collection.class)) { continue; } MethodDescriptor writeMethodDescriptor = propertyDescriptor.getWriteMethodDescriptor(); FieldDescriptor fieldDescriptor = propertyDescriptor.getFieldDescriptor(); PetiteInject ref = null; if (writeMethodDescriptor != null) { ref = writeMethodDescriptor.getMethod().getAnnotation(PetiteInject.class); } if (ref == null && fieldDescriptor != null) { ref = fieldDescriptor.getField().getAnnotation(PetiteInject.class); } if ((!autowire) && (ref == null)) { continue; } list.add(new SetInjectionPoint(propertyDescriptor)); } SetInjectionPoint[] fields; if (list.isEmpty()) { fields = SetInjectionPoint.EMPTY; } else { fields = list.toArray(new SetInjectionPoint[0]); } return fields; }\n\n    ### Response:",
        "ground_truth": "Resolves all collections for given type.",
        "predict": " Indicates if the course has non-empty summary field\n\n@return bool.\n\n    "
    },
    {
        "ID": 1529,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def formatted copy = dup @formats.rcompact! if copy.length < @formats.size copy.concat Array.new(@formats.size - copy.length) end copy end\n\n    ### Response: Returns a copy of self with nil-values appended for empty cells that have\n an associated Format.\n This is primarily a helper-function for the writer classes..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public boolean matchIgnoredPropertyTypes(final Class propertyType, final boolean excludeMaps, final boolean include) { if (!include) { return false; } if (propertyType != null) { if (!jsonSerializer.deep) { ClassDescriptor propertyTypeClassDescriptor = ClassIntrospector.get().lookup(propertyType); if (propertyTypeClassDescriptor.isArray()) { return false; } if (propertyTypeClassDescriptor.isCollection()) { return false; } if (excludeMaps) { if (propertyTypeClassDescriptor.isMap()) { return false; } } } // still not excluded, continue with excluded types and type names // + excluded types if (jsonSerializer.excludedTypes != null) { for (Class excludedType : jsonSerializer.excludedTypes) { if (ClassUtil.isTypeOf(propertyType, excludedType)) { return false; } } } // + exclude type names final String propertyTypeName = propertyType.getName(); if (jsonSerializer.excludedTypeNames != null) { for (String excludedTypeName : jsonSerializer.excludedTypeNames) { if (Wildcard.match(propertyTypeName, excludedTypeName)) { return false; } } } } return true; }\n\n    ### Response:",
        "ground_truth": "Matches property types that are ignored by default.",
        "predict": " Returns a copy of self with nil-values appended for empty cells that have\n an associated Format.\n This is primarily a helper-function for the writer classes..\n\n    "
    },
    {
        "ID": 1530,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function processParts(array $parts) { $strValue = ''; $ret = []; $filtered = $this->filterIgnoredSpaces($parts); foreach ($filtered as $part) { if ($part instanceof CommentPart) { $ret[] = $part; continue; // getValue() is empty anyway, but for clarity... } $strValue .= $part->getValue(); } array_unshift($ret, $this->partFactory->newReceivedPart($this->getPartName(), $strValue)); return $ret; }\n\n    ### Response: Overridden to combine all part values into a single string and return it\nas the first element, followed by any comment elements as subsequent\nelements.\n\n@param \\ZBateson\\MailMimeParser\\Header\\Part\\HeaderPart[] $parts\n@return \\ZBateson\\MailMimeParser\\Header\\Part\\HeaderPart[]|\n\\ZBateson\\MailMimeParser\\Header\\Part\\CommentPart[]|\narray.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void openConnectionForQuery() { if (connection == null) { connection = connectionProvider.getConnection(); txActive = false; // txAction should already be false try { connection.setAutoCommit(true); } catch (SQLException sex) { throw new DbSqlException(\"Failed to open non-TX connection\", sex); } } }\n\n    ### Response:",
        "ground_truth": "Opens connection in auto-commit mode, if already not opened.",
        "predict": " Overridden to combine all part values into a single string and return it\nas the first element, followed by any comment elements as subsequent\nelements.\n\n@param \\ZBateson\\MailMimeParser\\Header\\Part\\HeaderPart[] $parts\n@return \\ZBateson\\MailMimeParser\\Header\\Part\\HeaderPart[]|\n\\ZBateson\\MailMimeParser\\Header\\Part\\CommentPart[]|\narray.\n\n    "
    },
    {
        "ID": 1531,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected Frame scoreImpl(Frame adaptFrm) { if (isSupervised()) { int ridx = adaptFrm.find(responseName()); assert ridx == -1 : \"Adapted frame should not contain response in scoring method!\"; assert nfeatures() == adaptFrm.numCols() : \"Number of model features \" + nfeatures() + \" != number of test set columns: \" + adaptFrm.numCols(); assert adaptFrm.vecs().length == nfeatures() : \"Scoring data set contains wrong number of columns: \" + adaptFrm.vecs().length + \" instead of \" + nfeatures(); } // Create a new vector for response // If the model produces a classification/enum, copy the domain into the // result vector. int nc = nclasses(); Vec [] newVecs = new Vec[]{adaptFrm.anyVec().makeZero(classNames())}; if(nc > 1) newVecs = Utils.join(newVecs,adaptFrm.anyVec().makeZeros(nc)); String [] names = new String[newVecs.length]; names[0] = \"predict\"; for(int i = 1; i < names.length; ++i) names[i] = classNames()[i-1]; final int num_features = nfeatures(); new MRTask2() { @Override public void map( Chunk chks[] ) { double tmp [] = new double[num_features]; // We do not need the last field representing response float preds[] = new float [nclasses()==1?1:nclasses()+1]; int len = chks[0]._len; for( int row=0; row<len; row++ ) { float p[] = score0(chks,row,tmp,preds); for( int c=0; c<preds.length; c++ ) chks[num_features+c].set0(row,p[c]); } } }.doAll(Utils.join(adaptFrm.vecs(),newVecs)); // Return just the output columns return new Frame(names,newVecs); }\n\n    ### Response: Score already adapted frame.\n\n@param adaptFrm\n@return.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void openTx() { if (connection == null) { connection = connectionProvider.getConnection(); } txActive = true; try { connection.setAutoCommit(false); if (txMode.getIsolation() != DbTransactionMode.ISOLATION_DEFAULT) { connection.setTransactionIsolation(txMode.getIsolation()); } connection.setReadOnly(txMode.isReadOnly()); } catch (SQLException sex) { throw new DbSqlException(\"Open TX failed\", sex); } }\n\n    ### Response:",
        "ground_truth": "Opens a transaction.",
        "predict": " Score already adapted frame.\n\n@param adaptFrm\n@return.\n\n    "
    },
    {
        "ID": 1532,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function perform_update_metadata( array $changes ) { if ( ! $this->meta_type ) { return; } $mapping = $this->get_mapping(); $changes = $this->recently_created ? array_keys( $mapping ) : $this->get_changes_only( $changes, array_keys( $mapping ) ); // Don't do anything if nothing changes. if ( empty( $changes ) ) { return; } $updated = []; foreach ( $changes as $attribute ) { $meta_key = $this->get_mapping_metakey( $attribute ); if ( is_null( $meta_key ) ) { continue; } if ( $this->update_meta( $meta_key, $this->get_attribute( $attribute ) ) ) { $updated[] = $attribute; } } return $updated; }\n\n    ### Response: Run perform update object metadata.\n\n@param  array $changes The attributes changed.\n@return array|null.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void closeTx() { txActive = false; try { connection.setAutoCommit(true); } catch (SQLException sex) { throw new DbSqlException(\"Close TX failed\", sex); } }\n\n    ### Response:",
        "ground_truth": "Closes current transaction.",
        "predict": " Run perform update object metadata.\n\n@param  array $changes The attributes changed.\n@return array|null.\n\n    "
    },
    {
        "ID": 1533,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static synchronized RenderEngine getInstance(String name) { if (null == availableEngines) { availableEngines = new HashMap(); } //Logger.debug(\"Engines: \" + availableEngines); return (RenderEngine) availableEngines.get(name); }\n\n    ### Response: Get an instance of a RenderEngine. This is a factory method.\n\n@param name Name of the RenderEngine to get\n@return engine RenderEngine for the requested name.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void commitTransaction() { log.debug(\"Committing transaction\"); assertTxIsActive(); try { connection.commit(); } catch (SQLException sex) { throw new DbSqlException(\"Commit TX failed\", sex); } finally { closeTx(); } }\n\n    ### Response:",
        "ground_truth": "Commit the current transaction, writing any unflushed changes to the database.\nTransaction mode is closed.",
        "predict": " Get an instance of a RenderEngine. This is a factory method.\n\n@param name Name of the RenderEngine to get\n@return engine RenderEngine for the requested name.\n\n    "
    },
    {
        "ID": 1534,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def pricing width, height, pcb_layers, quantity = nil post_request \"pricing\", {width_in_mils: width, height_in_mils: height, pcb_layers: pcb_layers, quantity: quantity} end\n\n    ### Response: Request a price estimate\n\n @param width  In thousands of an Inch\n @param height In thousands of an Inch\n @param layers\n @param quantity Optional Defaults to the minimum quantity.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void rollbackTransaction() { log.debug(\"Rolling-back transaction\"); assertTxIsActive(); try { connection.rollback(); } catch (SQLException sex) { throw new DbSqlException(\"Rollback TX failed\", sex); } finally { closeTx(); } }\n\n    ### Response:",
        "ground_truth": "Roll back the current transaction. Transaction mode is closed.",
        "predict": " Request a price estimate\n\n @param width  In thousands of an Inch\n @param height In thousands of an Inch\n @param layers\n @param quantity Optional Defaults to the minimum quantity.\n\n    "
    },
    {
        "ID": 1535,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function flush() { $count = count($this->queue); $success = true; while ($count > 0 && $success) { $batch = array_splice($this->queue, 0, min($this->batch_size, $count)); $success = $this->flushBatch($batch); $count = count($this->queue); } return $success; }\n\n    ### Response: Flushes our queue of messages by batching them to the server.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Properties createFromFile(final File file) throws IOException { Properties prop = new Properties(); loadFromFile(prop, file); return prop; }\n\n    ### Response:",
        "ground_truth": "Create properties from the file.\n\n@param file properties file to load",
        "predict": " Flushes our queue of messages by batching them to the server.\n\n    "
    },
    {
        "ID": 1536,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function insert($position, $str) { $string = (string)$str; $string = substr_replace($this->text, $string, $position, 0); return new MString($string); }\n\n    ### Response: Inserts the string str at the given index position and returns a reference to this string.\n\n@param int $position\n@param string|MString $str\n@return MString.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Properties createFromString(final String data) throws IOException { Properties p = new Properties(); loadFromString(p, data); return p; }\n\n    ### Response:",
        "ground_truth": "Creates properties from string.",
        "predict": " Inserts the string str at the given index position and returns a reference to this string.\n\n@param int $position\n@param string|MString $str\n@return MString.\n\n    "
    },
    {
        "ID": 1537,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void add(String name, String... values) { if (containsKey(name)) { List<String> list = get(name); for (String value: values) { list.add(value); } } else { put(name, values); } }\n\n    ### Response: Appends a list of values to the list for a parameter.\n@param name\tthe parameter\n@param values\tthe values to add to the list.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void loadFromString(final Properties p, final String data) throws IOException { try (ByteArrayInputStream is = new ByteArrayInputStream(data.getBytes(StringPool.ISO_8859_1))) { p.load(is); } }\n\n    ### Response:",
        "ground_truth": "Loads properties from string.",
        "predict": " Appends a list of values to the list for a parameter.\n@param name\tthe parameter\n@param values\tthe values to add to the list.\n\n    "
    },
    {
        "ID": 1538,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function reverseTransform($object, $config, $local_config = null, $result_type = 'object') { $value = $this->setLocalConfig($local_config)->reverseProcess($config, $object); $value = $this->converter->convertTo($value, $result_type); return $value; }\n\n    ### Response: This method reverses the transforming.\n\n@param object|object|string     $object\n@param array|object|string      $config\n@param null|array|string|object $local_config\n@param string                   $result_type\n\n@return array|\\stdClass|string\n@throws \\Enm\\Transformer\\Exceptions\\TransformerException.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Properties subset(final Properties p, String prefix, final boolean stripPrefix) { if (StringUtil.isBlank(prefix)) { return p; } if (!prefix.endsWith(StringPool.DOT)) { prefix += '.'; } Properties result = new Properties(); int baseLen = prefix.length(); for (Object o : p.keySet()) { String key = (String) o; if (key.startsWith(prefix)) { result.setProperty(stripPrefix ? key.substring(baseLen) : key, p.getProperty(key)); } } return result; }\n\n    ### Response:",
        "ground_truth": "Creates new Properties object from the original one, by copying\nthose properties that have specified first part of the key name.\nPrefix may be optionally stripped during this process.\n\n@param p         source properties, from which new object will be created\n@param prefix    key names prefix\n\n@return subset properties",
        "predict": " This method reverses the transforming.\n\n@param object|object|string     $object\n@param array|object|string      $config\n@param null|array|string|object $local_config\n@param string                   $result_type\n\n@return array|\\stdClass|string\n@throws \\Enm\\Transformer\\Exceptions\\TransformerException.\n\n    "
    },
    {
        "ID": 1539,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function initActionGet() : array { $rem = $this->di->get(\"remserver\"); $rem->init(); $json = [ \"message\" => \"The session is initiated with the default dataset(s).\", \"dataset\" => $rem->getDefaultDataset(), ]; return [$json]; }\n\n    ### Response: Init or re-init the REM Server.\n\n@return array.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Properties createFromClasspath(final String... rootTemplate) { Properties p = new Properties(); return loadFromClasspath(p, rootTemplate); }\n\n    ### Response:",
        "ground_truth": "Creates properties from classpath.",
        "predict": " Init or re-init the REM Server.\n\n@return array.\n\n    "
    },
    {
        "ID": 1540,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func encodeRemoteAddr(remoteAddr net.Addr) []byte { if udpAddr, ok := remoteAddr.(*net.UDPAddr); ok { return append([]byte{cookiePrefixIP}, udpAddr.IP...) } return append([]byte{cookiePrefixString}, []byte(remoteAddr.String())...) }\n\n    ### Response: // encodeRemoteAddr encodes a remote address such that it can be saved in the Cookie.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String getProperty(final Map map, final String key, final String defaultValue) { Object val = map.get(key); return (val instanceof String) ? (String) val : defaultValue; }\n\n    ### Response:",
        "ground_truth": "Returns String property from a map.\n@see #getProperty(java.util.Map, String)",
        "predict": " // encodeRemoteAddr encodes a remote address such that it can be saved in the Cookie.\n\n    "
    },
    {
        "ID": 1541,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (v *TApplicationException) MarshalLogObject(enc zapcore.ObjectEncoder) (err error) { if v == nil { return nil } if v.Message != nil { enc.AddString(\"message\", *v.Message) } if v.Type != nil { err = multierr.Append(err, enc.AddObject(\"type\", *v.Type)) } return err }\n\n    ### Response: // MarshalLogObject implements zapcore.ObjectMarshaler, enabling\n// fast logging of TApplicationException..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void resolveAllVariables(final Properties prop) { for (Object o : prop.keySet()) { String key = (String) o; String value = resolveProperty(prop, key); prop.setProperty(key, value); } }\n\n    ### Response:",
        "ground_truth": "Resolves all variables.",
        "predict": " // MarshalLogObject implements zapcore.ObjectMarshaler, enabling\n// fast logging of TApplicationException..\n\n    "
    },
    {
        "ID": 1542,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private boolean contains(List<String> list, String item) { return (null == list) ? false : list.contains(item); }\n\n    ### Response: Query whether the target list contains the item.\n\n@param list\n@param item\n@return boolean.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String resolveProperty(final Map map, final String key) { String value = getProperty(map, key); if (value == null) { return null; } value = stp.parse(value, macroName -> getProperty(map, macroName)); return value; }\n\n    ### Response:",
        "ground_truth": "Returns property with resolved variables.",
        "predict": " Query whether the target list contains the item.\n\n@param list\n@param item\n@return boolean.\n\n    "
    },
    {
        "ID": 1543,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function get($key) { $item = $this->pool->getItem($key); if ($item->isMiss() === false) { return $this->serializer->deserialize($item->get()); } else { return null; } }\n\n    ### Response: Gets a cache entry\nreturning null if not in cache\n\n@param $key\n@return null|mixed.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String resolveScope(final Class type, final String methodName) { if (scopePattern == null) { return null; } String ctx = scopePattern; ctx = StringUtil.replace(ctx, JTXCTX_PATTERN_CLASS, type.getName()); ctx = StringUtil.replace(ctx, JTXCTX_PATTERN_METHOD, methodName); return ctx; }\n\n    ### Response:",
        "ground_truth": "Resolves tx scope from scope pattern.",
        "predict": " Gets a cache entry\nreturning null if not in cache\n\n@param $key\n@return null|mixed.\n\n    "
    },
    {
        "ID": 1544,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def eval(self, expr): \"\"\"Evaluate an expression. This does **not** add its argument (or its result) as an element of me! That is the responsibility of the code that created the object. This means that you need to :meth:`Environment.rec_new` any expression you get from user input before evaluating it. This, and any wrappers around it, are the **only** entry points to expression evaluation you should call from ordinary code (i.e., code that isn't part of a extension). Args: expr (LispVal): The expression to evaluate. Returns: LispVal: The result of evaluating the expression. Raises: ~parthial.errs.LimitationError: If evaluating the expression would require more nesting, more time, or the allocation of more values than is permissible. \"\"\" if self.depth >= self.max_depth: raise LimitationError('too much nesting') if self.steps >= self.max_steps: raise LimitationError('too many steps') self.depth += 1 self.steps += 1 res = expr.eval(self) self.depth -= 1 return res\n\n    ### Response: Evaluate an expression.\n\n        This does **not** add its argument (or its result) as an element of me!\n        That is the responsibility of the code that created the object. This\n        means that you need to :meth:`Environment.rec_new` any expression you\n        get from user input before evaluating it.\n\n        This, and any wrappers around it, are the **only** entry points to\n        expression evaluation you should call from ordinary code (i.e., code\n        that isn't part of a extension).\n\n        Args:\n            expr (LispVal): The expression to evaluate.\n\n        Returns:\n            LispVal: The result of evaluating the expression.\n\n        Raises:\n            ~parthial.errs.LimitationError: If evaluating the expression would\n                require more nesting, more time, or the allocation of more\n                values than is permissible..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public synchronized JtxTransactionMode getTxMode(final Class type, final String methodName, final Class[] methodArgTypes, final String unique) { String signature = type.getName() + '#' + methodName + '%' + unique; JtxTransactionMode txMode = txmap.get(signature); if (txMode == null) { if (!txmap.containsKey(signature)) { final Method m; try { m = type.getMethod(methodName, methodArgTypes); } catch (NoSuchMethodException nsmex) { throw new ProxettaException(nsmex); } final TransactionAnnotationValues txAnn = readTransactionAnnotation(m); if (txAnn != null) { txMode = new JtxTransactionMode( txAnn.propagation(), txAnn.isolation(), txAnn.readOnly(), txAnn.timeout() ); } else { txMode = defaultTransactionMode; } txmap.put(signature, txMode); } } return txMode; }\n\n    ### Response:",
        "ground_truth": "Reads transaction mode from method annotation. Annotations are cached for better performances.\n@param type target class\n@param methodName target method name over which the transaction should be wrapped\n@param methodArgTypes types of arguments, used to find the method\n@param unique unique method fingerprint that contains return and arguments type information",
        "predict": " Evaluate an expression.\n\n        This does **not** add its argument (or its result) as an element of me!\n        That is the responsibility of the code that created the object. This\n        means that you need to :meth:`Environment.rec_new` any expression you\n        get from user input before evaluating it.\n\n        This, and any wrappers around it, are the **only** entry points to\n        expression evaluation you should call from ordinary code (i.e., code\n        that isn't part of a extension).\n\n        Args:\n            expr (LispVal): The expression to evaluate.\n\n        Returns:\n            LispVal: The result of evaluating the expression.\n\n        Raises:\n            ~parthial.errs.LimitationError: If evaluating the expression would\n                require more nesting, more time, or the allocation of more\n                values than is permissible..\n\n    "
    },
    {
        "ID": 1545,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (s *messageStore) Get(id uint64) *Message { s.mutex.RLock() defer s.mutex.RUnlock() m, ok := s.messages[id] if ok { return m } return nil }\n\n    ### Response: // Get returns the message with given id, or nil if not found.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SuppressWarnings( {\"unchecked\"}) public void registerAnnotations(final Class<? extends Annotation>[] annotations) { this.annotations = annotations; this.annotationParsers = new AnnotationParser[annotations.length]; for (int i = 0; i < annotations.length; i++) { annotationParsers[i] = TransactionAnnotationValues.parserFor(annotations[i]); } }\n\n    ### Response:",
        "ground_truth": "Registers new TX annotations.",
        "predict": " // Get returns the message with given id, or nil if not found.\n\n    "
    },
    {
        "ID": 1546,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function wrapValues (values, objtypes) { var result = []; for(var i=0; i < objtypes.length; i++) result.push(wrapValue(values[i], objtypes[i])); return result; }\n\n    ### Response: Accepts an Array of raw objc pointers and other values, and an array of ObjC\ntypes, and returns an array of wrapped values where appropriate..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected TransactionAnnotationValues readTransactionAnnotation(final Method method) { for (AnnotationParser annotationParser : annotationParsers) { TransactionAnnotationValues tad = TransactionAnnotationValues.of(annotationParser, method); if (tad != null) { return tad; } } return null; }\n\n    ### Response:",
        "ground_truth": "Finds TX annotation.",
        "predict": " Accepts an Array of raw objc pointers and other values, and an array of ObjC\ntypes, and returns an array of wrapped values where appropriate..\n\n    "
    },
    {
        "ID": 1547,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def save_to_cache(url, response_json): \"\"\" Save an HTTP response json object to the cache. If the request was sent to server via POST instead of GET, then URL should be a GET-style representation of request. Users should always pass OrderedDicts instead of dicts of parameters into request functions, so that the parameters stay in the same order each time, producing the same URL string, and thus the same hash. Otherwise the cache will eventually contain multiple saved responses for the same request because the URL's parameters appeared in a different order each time. Parameters ---------- url : string the url of the request response_json : dict the json response Returns ------- None \"\"\" if settings.use_cache: if response_json is None: log('Saved nothing to cache because response_json is None') else: # create the folder on the disk if it doesn't already exist if not os.path.exists(settings.cache_folder): os.makedirs(settings.cache_folder) # hash the url (to make filename shorter than the often extremely # long url) filename = hashlib.md5(url.encode('utf-8')).hexdigest() cache_path_filename = os.path.join(settings.cache_folder, os.extsep.join([filename, 'json'])) # dump to json, and save to file json_str = make_str(json.dumps(response_json)) with io.open(cache_path_filename, 'w', encoding='utf-8') as cache_file: cache_file.write(json_str) log('Saved response to cache file \"{}\"'.format(cache_path_filename))\n\n    ### Response: Save an HTTP response json object to the cache.\n\n    If the request was sent to server via POST instead of GET, then URL should\n    be a GET-style representation of request. Users should always pass\n    OrderedDicts instead of dicts of parameters into request functions, so that\n    the parameters stay in the same order each time, producing the same URL\n    string, and thus the same hash. Otherwise the cache will eventually contain\n    multiple saved responses for the same request because the URL's parameters\n    appeared in a different order each time.\n\n    Parameters\n    ----------\n    url : string\n        the url of the request\n    response_json : dict\n        the json response\n\n    Returns\n    -------\n    None.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public boolean accept(final Node node) { // match element name with node name if (!matchElement(node)) { return false; } // match attributes int totalSelectors = selectorsCount(); for (int i = 0; i < totalSelectors; i++) { Selector selector = getSelector(i); // just attr name existence switch (selector.getType()) { case ATTRIBUTE: if (!((AttributeSelector) selector).accept(node)) { return false; } break; case PSEUDO_CLASS: if (!((PseudoClassSelector) selector).accept(node)) { return false; } break; case PSEUDO_FUNCTION: if (!((PseudoFunctionSelector) selector).accept(node)) { return false; } break; } } return true; }\n\n    ### Response:",
        "ground_truth": "Accepts single node.",
        "predict": " Save an HTTP response json object to the cache.\n\n    If the request was sent to server via POST instead of GET, then URL should\n    be a GET-style representation of request. Users should always pass\n    OrderedDicts instead of dicts of parameters into request functions, so that\n    the parameters stay in the same order each time, producing the same URL\n    string, and thus the same hash. Otherwise the cache will eventually contain\n    multiple saved responses for the same request because the URL's parameters\n    appeared in a different order each time.\n\n    Parameters\n    ----------\n    url : string\n        the url of the request\n    response_json : dict\n        the json response\n\n    Returns\n    -------\n    None.\n\n    "
    },
    {
        "ID": 1548,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function create_item_permissions_check( $request ) { $post_type = get_post_type_object( $this->post_type ); if ( ! empty( $request['author'] ) && get_current_user_id() !== $request['author'] && ! current_user_can( $post_type->cap->edit_others_posts ) ) { return new WP_Error( 'rest_cannot_edit_others', __( 'You are not allowed to create posts as this user.' ), array( 'status' => rest_authorization_required_code() ) ); } if ( ! empty( $request['sticky'] ) && ! current_user_can( $post_type->cap->edit_others_posts ) ) { return new WP_Error( 'rest_cannot_assign_sticky', __( 'You do not have permission to make posts sticky.' ), array( 'status' => rest_authorization_required_code() ) ); } if ( ! current_user_can( $post_type->cap->create_posts ) ) { return new WP_Error( 'rest_cannot_create', __( 'Sorry, you are not allowed to create new posts.' ), array( 'status' => rest_authorization_required_code() ) ); } return true; }\n\n    ### Response: Check if a given request has access to create a post.\n\n@param  WP_REST_Request $request Full details about the request.\n@return WP_Error|boolean.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected boolean matchElement(final Node node) { if (node.getNodeType() != Node.NodeType.ELEMENT) { return false; } String element = getElement(); String nodeName = node.getNodeName(); return element.equals(StringPool.STAR) || element.equals(nodeName); }\n\n    ### Response:",
        "ground_truth": "Matches element to css selector. All non-element types are ignored.",
        "predict": " Check if a given request has access to create a post.\n\n@param  WP_REST_Request $request Full details about the request.\n@return WP_Error|boolean.\n\n    "
    },
    {
        "ID": 1549,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _prepare_calls(result_file, out_dir, data): \"\"\"Write summary file of results of HLA typing by allele. \"\"\" sample = dd.get_sample_name(data) out_file = os.path.join(out_dir, \"%s-optitype.csv\" % (sample)) if not utils.file_uptodate(out_file, result_file): hla_truth = bwakit.get_hla_truthset(data) with file_transaction(data, out_file) as tx_out_file: with open(tx_out_file, \"w\") as out_handle: writer = csv.writer(out_handle) allele_info = _parse_result_file(result_file) if len(allele_info) == 1: writer.writerow([\"sample\", \"locus\", \"alleles\", \"expected\", \"validates\"]) else: writer.writerow([\"sample\", \"local\", \"index\", \"alleles\", \"score\"]) for j, (alleles, score) in enumerate(allele_info): for hla_locus, call_alleles in alleles: truth_alleles = tz.get_in([sample, hla_locus], hla_truth, []) if len(allele_info) == 1: writer.writerow([sample, hla_locus, \";\".join(call_alleles), \";\".join(truth_alleles), bwakit.matches_truth(call_alleles, truth_alleles, data)]) else: writer.writerow([sample, hla_locus, j, \";\".join(call_alleles), score]) return out_file\n\n    ### Response: Write summary file of results of HLA typing by allele..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public boolean accept(final List<Node> currentResults, final Node node, final int index) { // match attributes int totalSelectors = selectorsCount(); for (int i = 0; i < totalSelectors; i++) { Selector selector = getSelector(i); // just attr name existence switch (selector.getType()) { case PSEUDO_FUNCTION: if (!((PseudoFunctionSelector) selector).accept(currentResults, node, index)) { return false; } break; case PSEUDO_CLASS: if (!((PseudoClassSelector) selector).accept(currentResults, node, index)) { return false; } break; default: } } return true; }\n\n    ### Response:",
        "ground_truth": "Accepts node within current results.",
        "predict": " Write summary file of results of HLA typing by allele..\n\n    "
    },
    {
        "ID": 1550,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def call_interval(freq, **kwargs): \"\"\"Decorator for the CallInterval wrapper\"\"\" def wrapper(f): return CallInterval(f, freq, **kwargs) return wrapper\n\n    ### Response: Decorator for the CallInterval wrapper.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected String unescape(final String value) { if (value.indexOf('\\\\') == -1) { return value; } return StringUtil.remove(value, '\\\\'); }\n\n    ### Response:",
        "ground_truth": "Unescapes CSS string by removing all backslash characters from it.",
        "predict": " Decorator for the CallInterval wrapper.\n\n    "
    },
    {
        "ID": 1551,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (t *terminal) Wait() (*ExecResult, error) { err := t.cmd.Wait() if err != nil { if exitErr, ok := err.(*exec.ExitError); ok { status := exitErr.Sys().(syscall.WaitStatus) return &ExecResult{Code: status.ExitStatus(), Command: t.cmd.Path}, nil } return nil, err } status, ok := t.cmd.ProcessState.Sys().(syscall.WaitStatus) if !ok { return nil, trace.Errorf(\"unknown exit status: %T(%v)\", t.cmd.ProcessState.Sys(), t.cmd.ProcessState.Sys()) } return &ExecResult{ Code: status.ExitStatus(), Command: t.cmd.Path, }, nil }\n\n    ### Response: // Wait will block until the terminal is complete..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private String[] buildJrePackages(final int javaVersionNumber) { final ArrayList<String> packages = new ArrayList<>(); switch (javaVersionNumber) { case 9: case 8: case 7: case 6: case 5: // in Java1.5, the apache stuff moved packages.add(\"com.sun.org.apache\"); // fall through... case 4: if (javaVersionNumber == 4) { packages.add(\"org.apache.crimson\"); packages.add(\"org.apache.xalan\"); packages.add(\"org.apache.xml\"); packages.add(\"org.apache.xpath\"); } packages.add(\"org.ietf.jgss\"); packages.add(\"org.w3c.dom\"); packages.add(\"org.xml.sax\"); // fall through... case 3: packages.add(\"org.omg\"); packages.add(\"com.sun.corba\"); packages.add(\"com.sun.jndi\"); packages.add(\"com.sun.media\"); packages.add(\"com.sun.naming\"); packages.add(\"com.sun.org.omg\"); packages.add(\"com.sun.rmi\"); packages.add(\"sunw.io\"); packages.add(\"sunw.util\"); // fall through... case 2: packages.add(\"com.sun.java\"); packages.add(\"com.sun.image\"); // fall through... case 1: default: // core stuff packages.add(\"sun\"); packages.add(\"java\"); packages.add(\"javax\"); break; } return packages.toArray(new String[0]); }\n\n    ### Response:",
        "ground_truth": "Builds a set of java core packages.",
        "predict": " // Wait will block until the terminal is complete..\n\n    "
    },
    {
        "ID": 1552,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function set(Arguments $arguments, $property, $type, array $options = []) { $options = $this->validateAndUpdateOptions($options, $type); $constraints = []; if (is_array($this->constraints) && isset($this->constraints[$property])) { $constraints = $this->constraints[$property]; } $options['constraints'] = $constraints; $options['property'] = $property; if ($options['default'] === null && $arguments->get($property, null) !== null) { $options['default'] = $arguments[$property]; } $result = $this->ask($type, $options); $arguments[$property] = $result; }\n\n    ### Response: Set the value of a property in arguments to the value interactively retrieved.\n@param Arguments                 $arguments\n@param string                    $property\n@param string|InputTypeInterface $type\n@param array                     $options.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected <T extends Node> T cloneTo(final T dest) { // dest.nodeValue = nodeValue; // already in clone implementations! dest.parentNode = parentNode; if (attributes != null) { dest.attributes = new ArrayList<>(attributes.size()); for (int i = 0, attributesSize = attributes.size(); i < attributesSize; i++) { Attribute attr = attributes.get(i); dest.attributes.add(attr.clone()); } } if (childNodes != null) { dest.childNodes = new ArrayList<>(childNodes.size()); for (int i = 0, childNodesSize = childNodes.size(); i < childNodesSize; i++) { Node child = childNodes.get(i); Node childClone = child.clone(); childClone.parentNode = dest; // fix parent! dest.childNodes.add(childClone); } } return dest; }\n\n    ### Response:",
        "ground_truth": "Copies all non-final values to the empty cloned object.\nCache-related values are not copied.",
        "predict": " Set the value of a property in arguments to the value interactively retrieved.\n@param Arguments                 $arguments\n@param string                    $property\n@param string|InputTypeInterface $type\n@param array                     $options.\n\n    "
    },
    {
        "ID": 1553,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function performTermOperationOnExpression(expression, op, term) { const node = (Node.Type.isOperator(expression) ? Node.Creator.parenthesis(expression) : expression); term.changeGroup = 1; const newNode = Node.Creator.operator(op, [node, term]); return newNode; }\n\n    ### Response: Performs an operation of a term on an entire given expression.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void detachFromParent() { if (parentNode == null) { return; } if (parentNode.childNodes != null) { parentNode.childNodes.remove(siblingIndex); parentNode.reindexChildren(); } parentNode = null; }\n\n    ### Response:",
        "ground_truth": "Removes this node from DOM tree.",
        "predict": " Performs an operation of a term on an entire given expression.\n\n    "
    },
    {
        "ID": 1554,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function copyFile(remotePath, targetRemotePath, options) { const copyOptions = merge(baseOptions, options || {}); return copy.copyFile(remotePath, targetRemotePath, copyOptions); }\n\n    ### Response: Copy a remote item to another path\n@param {String} remotePath The remote item path\n@param {String} targetRemotePath The path file will be copied to\n@param {UserOptions=} options Options for the request\n@memberof ClientInterface\n@returns {Promise} A promise that resolves once the request has completed\n@example\nawait client.copyFile(\"/photos/pic1.jpg\", \"/backup/pic1.jpg\");.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void addChild(final Node... nodes) { if (nodes.length == 0) { return; // nothing to add } for (Node node : nodes) { node.detachFromParent(); node.parentNode = this; initChildNodes(node); childNodes.add(node); } reindexChildrenOnAdd(nodes.length); }\n\n    ### Response:",
        "ground_truth": "Appends several child nodes at once.\nReindex is done only once, after all children are added.",
        "predict": " Copy a remote item to another path\n@param {String} remotePath The remote item path\n@param {String} targetRemotePath The path file will be copied to\n@param {UserOptions=} options Options for the request\n@memberof ClientInterface\n@returns {Promise} A promise that resolves once the request has completed\n@example\nawait client.copyFile(\"/photos/pic1.jpg\", \"/backup/pic1.jpg\");.\n\n    "
    },
    {
        "ID": 1555,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (c *cookies) Float64(key string) (float64, error) { ck, err := c.req.Cookie(key) if err != nil { return 0, err } return strconv.ParseFloat(ck.Value, 32) }\n\n    ### Response: // Float64 get cookie as float64.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void insertChild(final Node node, final int index) { node.detachFromParent(); node.parentNode = this; try { initChildNodes(node); childNodes.add(index, node); } catch (IndexOutOfBoundsException ignore) { throw new LagartoDOMException(\"Invalid node index: \" + index); } reindexChildren(); }\n\n    ### Response:",
        "ground_truth": "Inserts node at given index.",
        "predict": " // Float64 get cookie as float64.\n\n    "
    },
    {
        "ID": 1556,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def get_expected_acls(self): \"\"\"Query the neutron DB for Security Groups and Rules Groups and rules are returned as a dict of rule sets: {<eos_acl1_name>: set([<eos_acl1_rules>]), <eos_acl2_name>: set([<eos_acl2_rules>]), ..., } \"\"\" security_groups = db_lib.get_security_groups() expected_acls = collections.defaultdict(set) for sg in security_groups: in_rules, out_rules = self._format_rules_for_eos(sg['rules']) ingress_acl_name = self._acl_name(sg['id'], n_const.INGRESS_DIRECTION) egress_acl_name = self._acl_name(sg['id'], n_const.EGRESS_DIRECTION) expected_acls[ingress_acl_name].update(in_rules) expected_acls[egress_acl_name].update(out_rules) return expected_acls\n\n    ### Response: Query the neutron DB for Security Groups and Rules\n\n        Groups and rules are returned as a dict of rule sets:\n        {: set([]),\n         : set([]),\n         ...,\n        }.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void insertBefore(final Node newChild, final Node refChild) { int siblingIndex = refChild.getSiblingIndex(); refChild.parentNode.insertChild(newChild, siblingIndex); }\n\n    ### Response:",
        "ground_truth": "Inserts node before provided node.",
        "predict": " Query the neutron DB for Security Groups and Rules\n\n        Groups and rules are returned as a dict of rule sets:\n        {: set([]),\n         : set([]),\n         ...,\n        }.\n\n    "
    },
    {
        "ID": 1557,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def master_distribution_point(refresh = false) @master_distribution_point = nil if refresh return @master_distribution_point if @master_distribution_point all_dps = JSS::DistributionPoint.all refresh, api: self @master_distribution_point = case all_dps.size when 0 raise JSS::NoSuchItemError, 'No distribution points defined' when 1 JSS::DistributionPoint.fetch id: all_dps.first[:id], api: self else JSS::DistributionPoint.fetch id: :master, api: self end end\n\n    ### Response: Get the DistributionPoint instance for the master\n distribution point in the JSS. If there's only one\n in the JSS, return it even if not marked as master.\n\n @param refresh[Boolean] re-read from the API?\n\n @return [JSS::DistributionPoint].\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void insertBefore(final Node[] newChilds, final Node refChild) { if (newChilds.length == 0) { return; } int siblingIndex = refChild.getSiblingIndex(); refChild.parentNode.insertChild(newChilds, siblingIndex); }\n\n    ### Response:",
        "ground_truth": "Inserts several child nodes before provided node.",
        "predict": " Get the DistributionPoint instance for the master\n distribution point in the JSS. If there's only one\n in the JSS, return it even if not marked as master.\n\n @param refresh[Boolean] re-read from the API?\n\n @return [JSS::DistributionPoint].\n\n    "
    },
    {
        "ID": 1558,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def disable_all_for_web_app(resource_group_name, site_name, custom_headers:nil) response = disable_all_for_web_app_async(resource_group_name, site_name, custom_headers:custom_headers).value! nil end\n\n    ### Response: Disable all recommendations for an app.\n\n Disable all recommendations for an app.\n\n @param resource_group_name [String] Name of the resource group to which the\n resource belongs.\n @param site_name [String] Name of the app.\n @param custom_headers [Hash{String => String}] A hash of custom headers that\n will be added to the HTTP request..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void insertAfter(final Node newChild, final Node refChild) { int siblingIndex = refChild.getSiblingIndex() + 1; if (siblingIndex == refChild.parentNode.getChildNodesCount()) { refChild.parentNode.addChild(newChild); } else { refChild.parentNode.insertChild(newChild, siblingIndex); } }\n\n    ### Response:",
        "ground_truth": "Inserts node after provided node.",
        "predict": " Disable all recommendations for an app.\n\n Disable all recommendations for an app.\n\n @param resource_group_name [String] Name of the resource group to which the\n resource belongs.\n @param site_name [String] Name of the app.\n @param custom_headers [Hash{String => String}] A hash of custom headers that\n will be added to the HTTP request..\n\n    "
    },
    {
        "ID": 1559,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def prune_cache(mtime=15) # get old, unused entries and discard from DB and filesystem entries = remove_old_items(mtime) entries.each do |key, entry| FileUtils.rm_f(entry[:file]) end end\n\n    ### Response: the fastest way to prune this is to use the local find command.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void insertAfter(final Node[] newChilds, final Node refChild) { if (newChilds.length == 0) { return; } int siblingIndex = refChild.getSiblingIndex() + 1; if (siblingIndex == refChild.parentNode.getChildNodesCount()) { refChild.parentNode.addChild(newChilds); } else { refChild.parentNode.insertChild(newChilds, siblingIndex); } }\n\n    ### Response:",
        "ground_truth": "Inserts several child nodes after referent node.",
        "predict": " the fastest way to prune this is to use the local find command.\n\n    "
    },
    {
        "ID": 1560,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (f *FakeCloud) CurrentNodeName(ctx context.Context, hostname string) (types.NodeName, error) { return types.NodeName(hostname), nil }\n\n    ### Response: // Implementation of Instances.CurrentNodeName.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void removeAllChilds() { List<Node> removedNodes = childNodes; childNodes = null; childElementNodes = null; childElementNodesCount = 0; if (removedNodes != null) { for (int i = 0, removedNodesSize = removedNodes.size(); i < removedNodesSize; i++) { Node removedNode = removedNodes.get(i); removedNode.detachFromParent(); } } }\n\n    ### Response:",
        "ground_truth": "Removes all child nodes. Each child node will be detached from this parent.",
        "predict": " // Implementation of Instances.CurrentNodeName.\n\n    "
    },
    {
        "ID": 1561,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function (entry) { if (typeof entry === 'number' && entry < entryServers.length) { entryServers.splice(entry, 1); return true; } else if (typeof entry === 'string') { for (var i=0; i < entryServers.length; i++) { if (entryServers[i] === entry) { entryServers.splice(i, 1); SR.Log('remove entry: ' + entry + '. entries left: ' + entryServers.length); return true; } } } return false; }\n\n    ### Response: remove a given entry server.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Node findChildNodeWithName(final String name) { if (childNodes == null) { return null; } for (final Node childNode : childNodes) { if (childNode.getNodeName().equals(name)) { return childNode; } } return null; }\n\n    ### Response:",
        "ground_truth": "Finds the first child node with given node name.",
        "predict": " remove a given entry server.\n\n    "
    },
    {
        "ID": 1562,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def git_reset_all_repos(cat, hard=True, origin=False, clean=True): \"\"\"Perform a 'git reset' in each data repository. \"\"\" log = cat.log log.debug(\"gitter.git_reset_all_repos()\") all_repos = cat.PATHS.get_all_repo_folders() for repo in all_repos: log.warning(\"Repo in: '{}'\".format(repo)) # Get the initial git SHA sha_beg = get_sha(repo) log.debug(\"Current SHA: '{}'\".format(sha_beg)) grepo = git.cmd.Git(repo) # Fetch first log.info(\"fetching\") grepo.fetch() args = [] if hard: args.append('--hard') if origin: args.append('origin/master') log.info(\"resetting\") retval = grepo.reset(*args) if len(retval): log.warning(\"Git says: '{}'\".format(retval)) # Clean if clean: log.info(\"cleaning\") # [q]uiet, [f]orce, [d]irectories retval = grepo.clean('-qdf') if len(retval): log.warning(\"Git says: '{}'\".format(retval)) sha_end = get_sha(repo) if sha_end != sha_beg: log.debug(\"Updated SHA: '{}'\".format(sha_end)) return\n\n    ### Response: Perform a 'git reset' in each data repository..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Node[] filterChildNodes(final Predicate<Node> nodePredicate) { if (childNodes == null) { return new Node[0]; } return childNodes.stream() .filter(nodePredicate) .toArray(Node[]::new); }\n\n    ### Response:",
        "ground_truth": "Filters child nodes.",
        "predict": " Perform a 'git reset' in each data repository..\n\n    "
    },
    {
        "ID": 1563,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def is_valid_version_ip(param): \"\"\"Checks if the parameter is a valid ip version value. :param param: Value to be validated. :return: True if the parameter has a valid ip version value, or False otherwise. \"\"\" if param is None: return False if param == IP_VERSION.IPv4[0] or param == IP_VERSION.IPv6[0]: return True return False\n\n    ### Response: Checks if the parameter is a valid ip version value.\n\n    :param param: Value to be validated.\n\n    :return: True if the parameter has a valid ip version value, or False otherwise..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public boolean check() { if (childNodes == null) { return true; } // children int siblingElementIndex = 0; for (int i = 0, childNodesSize = childNodes.size(); i < childNodesSize; i++) { Node childNode = childNodes.get(i); if (childNode.siblingIndex != i) { return false; } if (childNode.getNodeType() == NodeType.ELEMENT) { if (childNode.siblingElementIndex != siblingElementIndex) { return false; } siblingElementIndex++; } } if (childElementNodesCount != siblingElementIndex) { return false; } // child element nodes if (childElementNodes != null) { if (childElementNodes.length != childElementNodesCount) { return false; } int childCount = getChildNodesCount(); for (int i = 0; i < childCount; i++) { Node child = getChild(i); if (child.siblingElementIndex >= 0) { if (childElementNodes[child.siblingElementIndex] != child) { return false; } } } } // sibling names if (siblingNameIndex != -1) { List<Node> siblings = parentNode.childNodes; int index = 0; for (int i = 0, siblingsSize = siblings.size(); i < siblingsSize; i++) { Node sibling = siblings.get(i); if (sibling.siblingNameIndex == -1 && nodeType == NodeType.ELEMENT && nodeName.equals(sibling.getNodeName())) { if (sibling.siblingNameIndex != index++) { return false; } } } } // process children for (Node childNode : childNodes) { if (!childNode.check()) { return false; } } return true; }\n\n    ### Response:",
        "ground_truth": "Checks the health of child nodes. Useful during complex tree manipulation,\nto check if everything is OK. Not optimized for speed, should be used just\nfor testing purposes.",
        "predict": " Checks if the parameter is a valid ip version value.\n\n    :param param: Value to be validated.\n\n    :return: True if the parameter has a valid ip version value, or False otherwise..\n\n    "
    },
    {
        "ID": 1564,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def multiply(a, col): \"\"\"Multiply a matrix by one column.\"\"\" a = a.reshape(4, 4, 4) col = col.reshape(4, 8) return fcat( rowxcol(a[0], col), rowxcol(a[1], col), rowxcol(a[2], col), rowxcol(a[3], col), )\n\n    ### Response: Multiply a matrix by one column..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void initChildElementNodes() { if (childElementNodes == null) { childElementNodes = new Element[childElementNodesCount]; int childCount = getChildNodesCount(); for (int i = 0; i < childCount; i++) { Node child = getChild(i); if (child.siblingElementIndex >= 0) { childElementNodes[child.siblingElementIndex] = (Element) child; } } } }\n\n    ### Response:",
        "ground_truth": "Initializes list of child elements.",
        "predict": " Multiply a matrix by one column..\n\n    "
    },
    {
        "ID": 1565,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _repeat(self, index, stage, stop): \"\"\" Repeat a stage. :param index: Stage index. :param stage: Stage object to repeat. :param iterations: Number of iterations (default infinite). :param stages: Stages back to repeat (default 1). \"\"\" times = None if 'iterations' in stage.kwargs: times = stage.kwargs['iterations'] - 1 stages_back = 1 if 'stages' in stage.kwargs: stages_back = stage.kwargs['stages'] i = 0 while i != times: if stop.is_set(): break for forward in range(stages_back): if stop.is_set(): break stage_index = index - stages_back + forward self._execute_stage(stage_index, self._pipe[stage_index], stop) i += 1\n\n    ### Response: Repeat a stage.\n\n        :param index: Stage index.\n        :param stage: Stage object to repeat.\n        :param iterations: Number of iterations (default infinite).\n        :param stages: Stages back to repeat (default 1)..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void initSiblingNames() { if (siblingNameIndex == -1) { List<Node> siblings = parentNode.childNodes; int index = 0; for (int i = 0, siblingsSize = siblings.size(); i < siblingsSize; i++) { Node sibling = siblings.get(i); if (sibling.siblingNameIndex == -1 && nodeType == NodeType.ELEMENT && nodeName.equals(sibling.getNodeName())) { sibling.siblingNameIndex = index++; } } } }\n\n    ### Response:",
        "ground_truth": "Initializes siblings elements of the same name.",
        "predict": " Repeat a stage.\n\n        :param index: Stage index.\n        :param stage: Stage object to repeat.\n        :param iterations: Number of iterations (default infinite).\n        :param stages: Stages back to repeat (default 1)..\n\n    "
    },
    {
        "ID": 1566,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static function merge() { // get all arguments $arrs = func_get_args(); $return = array(); foreach ( $arrs as $arr ) { if ( !is_array( $arr ) ) { throw new \\InvalidArgumentException('CCArr::merge - all arguments have to be arrays.'); } foreach ( $arr as $key => $value ) { if ( array_key_exists( $key, $return ) ) { if ( is_array( $value ) && is_array( $return[$key] ) ) { $value = static::merge( $return[$key], $value ); } } $return[$key] = $value; } } return $return; }\n\n    ### Response: merge arrays recursivly together\n\n@param array \t\t$array ...\n@return array.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void initChildNodes(final Node newNode) { if (childNodes == null) { childNodes = new ArrayList<>(); } if (ownerDocument != null) { if (newNode.ownerDocument != ownerDocument) { changeOwnerDocument(newNode, ownerDocument); } } }\n\n    ### Response:",
        "ground_truth": "Initializes child nodes list when needed.\nAlso fix owner document for new node, if needed.",
        "predict": " merge arrays recursivly together\n\n@param array \t\t$array ...\n@return array.\n\n    "
    },
    {
        "ID": 1567,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static void setupContributionAndDoubleBonds(IAtomContainer molecule, EdgeToBondMap bonds, int[][] graph, int[] contribution, int[] dbs) { // fill the contribution and dbs vectors for (int v = 0; v < graph.length; v++) { // hydrogens, valence, and connectivity int hyd = molecule.getAtom(v).getImplicitHydrogenCount(); int val = hyd; int con = hyd + graph[v].length; for (int w : graph[v]) { IBond bond = bonds.get(v, w); val += bond.getOrder().numeric(); if (bond.getOrder() == IBond.Order.DOUBLE) { dbs[v] = dbs[v] == -1 ? w : -2; } } contribution[v] = contribution(molecule.getAtom(v).getAtomicNumber(), con, val); } }\n\n    ### Response: Internal - sets up the 'contribution' and 'dbs' vectors. These define how many pi electrons\nan atom can contribute and provide a lookup of the double bonded neighbour.\n\n@param molecule     structure representation\n@param bonds        edge to bond map lookup\n@param graph        adjacency list graph representation of structure\n@param contribution vector of p electron contributions from each vertex\n@param dbs          vector of double-bond pairs, index stored double-bonded index.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void changeOwnerDocument(final Node node, final Document ownerDocument) { node.ownerDocument = ownerDocument; int childCount = node.getChildNodesCount(); for (int i = 0; i < childCount; i++) { Node child = node.getChild(i); changeOwnerDocument(child, ownerDocument); } }\n\n    ### Response:",
        "ground_truth": "Changes owner document for given node and all its children.",
        "predict": " Internal - sets up the 'contribution' and 'dbs' vectors. These define how many pi electrons\nan atom can contribute and provide a lookup of the double bonded neighbour.\n\n@param molecule     structure representation\n@param bonds        edge to bond map lookup\n@param graph        adjacency list graph representation of structure\n@param contribution vector of p electron contributions from each vertex\n@param dbs          vector of double-bond pairs, index stored double-bonded index.\n\n    "
    },
    {
        "ID": 1568,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function titleAttributes() { // Convert to an array so I can test for the presence of values. As an // object, it would throw exceptions $row = $this->getAttributes(); // Name before title to cover the case of people with job titles if (isset($row['name'])) { return ['name']; } // Search full names if people-type fields if (isset($row['first_name']) && isset($row['last_name'])) { return ['first_name', 'last_name']; } // Standard location for the title if (isset($row['title'])) { return ['title']; } // Default to no searchable attributes return []; }\n\n    ### Response: Deduce the source for the title of the model\n\n@return array.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Node getPreviousSiblingName() { if (nodeName == null) { return null; } initSiblingNames(); int index = siblingNameIndex -1; for (int i = siblingIndex; i >= 0; i--) { Node sibling = parentNode.childNodes.get(i); if ((index == sibling.siblingNameIndex) && nodeName.equals(sibling.getNodeName())) { return sibling; } } return null; }\n\n    ### Response:",
        "ground_truth": "Returns this node's previous sibling element with the same name.",
        "predict": " Deduce the source for the title of the model\n\n@return array.\n\n    "
    },
    {
        "ID": 1569,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void scanPlatformPath(PackageSymbol p) throws IOException { fillIn(p, PLATFORM_CLASS_PATH, list(PLATFORM_CLASS_PATH, p, p.fullname.toString(), allowSigFiles ? EnumSet.of(JavaFileObject.Kind.CLASS, JavaFileObject.Kind.OTHER) : EnumSet.of(JavaFileObject.Kind.CLASS))); }\n\n    ### Response: Scans platform class path for files in given package..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String getTextContent() { StringBuilder sb = new StringBuilder(getChildNodesCount() + 1); appendTextContent(sb); return sb.toString(); }\n\n    ### Response:",
        "ground_truth": "Returns the text content of this node and its descendants.\n@see #appendTextContent(Appendable)",
        "predict": " Scans platform class path for files in given package..\n\n    "
    },
    {
        "ID": 1570,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function Metric(key, value, ts) { var m = this; this.key = key; this.value = value; this.ts = ts; // return a string representation of this metric appropriate // for sending to the graphite collector. does not include // a trailing newline. this.toText = function() { return m.key + \" \" + m.value + \" \" + m.ts; }; this.toPickle = function() { return MARK + STRING + '\\'' + m.key + '\\'\\n' + MARK + LONG + m.ts + 'L\\n' + STRING + '\\'' + m.value + '\\'\\n' + TUPLE + TUPLE + APPEND; }; }\n\n    ### Response: A single measurement for sending to graphite..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String getHtml() { LagartoDomBuilderConfig lagartoDomBuilderConfig; if (ownerDocument == null) { lagartoDomBuilderConfig = ((Document) this).getConfig(); } else { lagartoDomBuilderConfig = ownerDocument.getConfig(); } LagartoHtmlRenderer lagartoHtmlRenderer = lagartoDomBuilderConfig.getLagartoHtmlRenderer(); return lagartoHtmlRenderer.toHtml(this, new StringBuilder()); }\n\n    ### Response:",
        "ground_truth": "Generates HTML.",
        "predict": " A single measurement for sending to graphite..\n\n    "
    },
    {
        "ID": 1571,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (s *Selection) PrevMatcherUntilSelection(filter Matcher, sel *Selection) *Selection { if sel == nil { return s.PrevMatcher(filter) } return s.PrevMatcherUntilNodes(filter, sel.Nodes...) }\n\n    ### Response: // PrevMatcherUntilSelection is like PrevUntilSelection, with the\n// option to filter the results based on a matcher. It returns a new\n// Selection object containing the matched elements..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String getInnerHtml() { LagartoDomBuilderConfig lagartoDomBuilderConfig; if (ownerDocument == null) { lagartoDomBuilderConfig = ((Document) this).getConfig(); } else { lagartoDomBuilderConfig = ownerDocument.getConfig(); } LagartoHtmlRenderer lagartoHtmlRenderer = lagartoDomBuilderConfig.getLagartoHtmlRenderer(); return lagartoHtmlRenderer.toInnerHtml(this, new StringBuilder()); }\n\n    ### Response:",
        "ground_truth": "Generates inner HTML.",
        "predict": " // PrevMatcherUntilSelection is like PrevUntilSelection, with the\n// option to filter the results based on a matcher. It returns a new\n// Selection object containing the matched elements..\n\n    "
    },
    {
        "ID": 1572,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private MutationStatus incrCoords(KeySpec ks) { final StorageVBucketCoordinates curCoord; synchronized (vbCoords) { curCoord = vbCoords[ks.vbId]; } long seq = curCoord.incrSeqno(); long uuid = curCoord.getUuid(); VBucketCoordinates coord = new BasicVBucketCoordinates(uuid, seq); return new MutationStatus(coord); }\n\n    ### Response: Increments the current coordinates for a new mutation.\n@param ks The key spec containing the vBucket ID whose coordinates should be increases\n@return A status object..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void visitChildren(final NodeVisitor nodeVisitor) { if (childNodes != null) { for (int i = 0, childNodesSize = childNodes.size(); i < childNodesSize; i++) { Node childNode = childNodes.get(i); childNode.visit(nodeVisitor); } } }\n\n    ### Response:",
        "ground_truth": "Visits children nodes.",
        "predict": " Increments the current coordinates for a new mutation.\n@param ks The key spec containing the vBucket ID whose coordinates should be increases\n@return A status object..\n\n    "
    },
    {
        "ID": 1573,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def apply_plot_params(plot_params,ax): \"\"\"Apply parameters to current axis.\"\"\" import matplotlib.pyplot as plt if plot_params['xlim'] is not None: ax.set_xlim(plot_params['xlim']) if plot_params['reverse_x'] and plot_params['xlim'][0] < plot_params['xlim'][1]: ax.invert_xaxis() elif plot_params['reverse_x']: ax.invert_xaxis() if plot_params['ylim'] is not None: ax.set_ylim(plot_params['ylim']) ax.grid(plot_params['grid']) ax.set_title(plot_params['title'],fontsize=plot_params['fontsize'],y=1.02) ax.set_xlabel(plot_params['xlabel'],fontsize=plot_params['tick_fontsize']) ax.set_ylabel(plot_params['ylabel'],fontsize=plot_params['tick_fontsize']) ax.set_axis_bgcolor(plot_params['axis_bg_color']) # Apply some properties to the line(s) line_handles = ax.get_lines() plt.setp(line_handles, lw=plot_params['line_width'], ls=plot_params['line_style'], marker=plot_params['marker']) if plot_params['line_color'] is not 'default': plt.setp(line_handles,'color', plot_params['line_color']) # Autoscale data on the y-axis to reflect changes to the x-axis if plot_params['autoscale_y']: ax = autoscale_y(ax,margin=0.05) if plot_params['use_sci_format_yaxis']: # Use scientific notation for the y-axis labels ax.ticklabel_format(axis='y',style='sci',scilimits=(-2,2)) if plot_params['use_sci_format_xaxis']: # Use scientific notation for the x-axis labels ax.ticklabel_format(axis='x',style='sci',scilimits=(-2,2)) ax.tick_params(labelsize=plot_params['tick_fontsize']) return ax\n\n    ### Response: Apply parameters to current axis..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String getCssPath() { StringBuilder path = new StringBuilder(); Node node = this; while (node != null) { String nodeName = node.getNodeName(); if (nodeName != null) { StringBuilder sb = new StringBuilder(); sb.append(' ').append(nodeName); String id = node.getAttribute(\"id\"); if (id != null) { sb.append('#').append(id); } path.insert(0, sb); } node = node.getParentNode(); } if (path.charAt(0) == ' ') { return path.substring(1); } return path.toString(); }\n\n    ### Response:",
        "ground_truth": "Returns CSS path to this node from document root.",
        "predict": " Apply parameters to current axis..\n\n    "
    },
    {
        "ID": 1574,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void resize(GVRMesh mesh, float size) { float dim[] = getBoundingSize(mesh); float maxsize = 0.0f; if (dim[0] > maxsize) maxsize = dim[0]; if (dim[1] > maxsize) maxsize = dim[1]; if (dim[2] > maxsize) maxsize = dim[2]; scale(mesh, size / maxsize); }\n\n    ### Response: Resize the given mesh keeping its aspect ration.\n@param mesh Mesh to be resized.\n@param size Max size for the axis..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void onDecoraTag(final Tag tag) { String tagName = tag.getName().toString(); if (tag.getType() == TagType.SELF_CLOSING) { checkNestedDecoraTags(); decoraTagName = tagName.substring(7); decoraTagStart = tag.getTagPosition(); decoraTagEnd = tag.getTagPosition() + tag.getTagLength(); defineDecoraTag(); return; } if (tag.getType() == TagType.START) { checkNestedDecoraTags(); decoraTagName = tagName.substring(7); decoraTagStart = tag.getTagPosition(); decoraTagDefaultValueStart = tag.getTagPosition() + tag.getTagLength(); return; } // closed tag type decoraTagEnd = tag.getTagPosition() + tag.getTagLength(); decoraTagDefaultValueEnd = tag.getTagPosition(); defineDecoraTag(); }\n\n    ### Response:",
        "ground_truth": "Handle Decora tags.",
        "predict": " Resize the given mesh keeping its aspect ration.\n@param mesh Mesh to be resized.\n@param size Max size for the axis..\n\n    "
    },
    {
        "ID": 1575,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static PIXSourceAuditor getAuditor() { AuditorModuleContext ctx = AuditorModuleContext.getContext(); return (PIXSourceAuditor)ctx.getAuditor(PIXSourceAuditor.class); }\n\n    ### Response: Get an instance of the PIX Source Auditor from the\nglobal context\n\n@return PIX Source Auditor instance.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void onIdAttrStart(final Tag tag) { String id = tag.getId().toString().substring(7); String tagName; String idName; int dashIndex = id.indexOf('-'); if (dashIndex == -1) { tagName = id; idName = null; } else { tagName = id.substring(0, dashIndex); idName = id.substring(dashIndex + 1); } if (tag.getType() == TagType.SELF_CLOSING) { checkNestedDecoraTags(); decoraTagName = tagName; decoraIdName = idName; decoraTagStart = tag.getTagPosition(); decoraTagEnd = tag.getTagPosition() + tag.getTagLength(); defineDecoraTag(); return; } if (tag.getType() == TagType.START) { checkNestedDecoraTags(); decoraTagName = tagName; decoraIdName = idName; decoraTagStart = tag.getTagPosition(); decoraTagDefaultValueStart = tag.getTagPosition() + tag.getTagLength(); closingTagName = tag.getName().toString(); closingTagDeepLevel = tag.getDeepLevel(); } }\n\n    ### Response:",
        "ground_truth": "Handle open and empty ID attribute tags.",
        "predict": " Get an instance of the PIX Source Auditor from the\nglobal context\n\n@return PIX Source Auditor instance.\n\n    "
    },
    {
        "ID": 1576,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function applyTemplate($str, $params = NULL, $escapeFields = FALSE) { if (!$params) return ($str); $rez = $str; foreach ($params as $nam => $val) { if ($val !== NULL) { $valn = $vals = $escapeFields ? $this->strEscape($val) : $val; } else { $vals = ''; $valn = 'null'; } $rez = str_replace(\"'{\" . $nam . \"}'\", \"'\" . urlencode($vals) . \"'\", $rez); $rez = str_replace(\"{\" . $nam . \"}\", urlencode($valn), $rez); } return ($rez); }\n\n    ### Response: apply bind variables to template.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void defineDecoraTag() { DecoraTag decoraTag = decoraTagDefaultValueStart == 0 ? new DecoraTag(decoraTagName, decoraIdName, decoraTagStart, decoraTagEnd) : new DecoraTag( decoraTagName, decoraIdName, decoraTagStart, decoraTagEnd, decoraTagDefaultValueStart, decoraTagDefaultValueEnd - decoraTagDefaultValueStart); decoraTags.add(decoraTag); decoraTagName = null; decoraIdName = null; closingTagName = null; decoraTagDefaultValueStart = 0; }\n\n    ### Response:",
        "ground_truth": "Defines Decora tag position inside decorator content.\nResets current Decora tag tracking.",
        "predict": " apply bind variables to template.\n\n    "
    },
    {
        "ID": 1577,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func Print(vs ...interface{}) { args, options := extractOptions(vs...) New(os.Stdout, options...).Print(args...) }\n\n    ### Response: // Print writes a representation of v to os.Stdout, separated by spaces..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public JoyProxetta addProxyAspect(final ProxyAspect proxyAspect) { requireNotStarted(proxetta); this.proxyAspects.add(proxyAspect); return this; }\n\n    ### Response:",
        "ground_truth": "Adds a proxy aspect.",
        "predict": " // Print writes a representation of v to os.Stdout, separated by spaces..\n\n    "
    },
    {
        "ID": 1578,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func NewAuth(r *Robot) *Auth { a := &Auth{robot: r} c := &authConfig{} env.MustProcess(c) if c.Enabled { if c.Admins != \"\" { a.admins = strings.Split(c.Admins, \",\") } r.Handle( addUserRoleHandler, removeUserRoleHandler, listUserRolesHandler, listAdminsHandler, ) } return a }\n\n    ### Response: // NewAuth returns a pointer to an initialized Auth.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void addRootPackage(final String rootPackage, String mapping) { if (packages == null) { packages = new String[0]; } if (mappings == null) { mappings = new String[0]; } // fix mapping if (mapping.length() > 0) { // mapping must start with the slash if (!mapping.startsWith(StringPool.SLASH)) { mapping = StringPool.SLASH + mapping; } // mapping must NOT end with the slash if (mapping.endsWith(StringPool.SLASH)) { mapping = StringUtil.substring(mapping, 0, -1); } } // detect duplicates for (int i = 0; i < packages.length; i++) { if (packages[i].equals(rootPackage)) { if (mappings[i].equals(mapping)) { // both package and the mappings are the same return; } throw new MadvocException(\"Different mappings for the same root package: \" + rootPackage); } } packages = ArraysUtil.append(packages, rootPackage); mappings = ArraysUtil.append(mappings, mapping); }\n\n    ### Response:",
        "ground_truth": "Adds root package and its path mapping. Duplicate root packages\nare ignored, if mapping path is equals, otherwise exception is thrown.",
        "predict": " // NewAuth returns a pointer to an initialized Auth.\n\n    "
    },
    {
        "ID": 1579,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function Client (args, options) { // Ensure Client instantiated with 'new' if (!(this instanceof Client)) { return new Client(args, options); } var servers = [] , weights = {} , regular = 'localhost:11211' , key; // Parse down the connection arguments switch (Object.prototype.toString.call(args)) { case '[object Object]': weights = args; servers = Object.keys(args); break; case '[object Array]': servers = args.length ? args : [regular]; break; default: servers.push(args || regular); break; } if (!servers.length) { throw new Error('No servers where supplied in the arguments'); } // merge with global and user config Utils.merge(this, Client.config); Utils.merge(this, options); this.servers = servers; var compatibility = this.compatibility || this.compatiblity; this.HashRing = new HashRing(args, this.algorithm, { 'compatibility': compatibility, 'default port': compatibility === 'ketama' ? 11211 : null }); this.connections = {}; this.issues = []; }\n\n    ### Response: Constructs a new memcached client\n\n@constructor\n@param {Mixed} args Array, string or object with servers\n@param {Object} options options\n@api public.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void addRootPackageOf(final Class actionClass, final String mapping) { addRootPackage(actionClass.getPackage().getName(), mapping); }\n\n    ### Response:",
        "ground_truth": "Sets root package to package of given class.",
        "predict": " Constructs a new memcached client\n\n@constructor\n@param {Mixed} args Array, string or object with servers\n@param {Object} options options\n@api public.\n\n    "
    },
    {
        "ID": 1580,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def __embed_branch_recursive(u, dfs_data): \"\"\"A recursive implementation of the EmbedBranch function, as defined on pages 8 and 22 of the paper.\"\"\" #print \"\\nu: {}\\nadj: {}\".format(u, dfs_data['adj'][u]) #print 'Pre-inserts' #print \"FG: {}\".format(dfs_data['FG']) #print \"LF: {}\".format(dfs_data['LF']) #print \"RF: {}\".format(dfs_data['RF']) for v in dfs_data['adj'][u]: #print \"\\nu, v: {}, {}\".format(u, v) #print \"dfs_u, dfs_v: {}, {}\".format(D(u, dfs_data), D(v, dfs_data)) nonplanar = True if a(v, dfs_data) == u: #print 'Ancestor block entered:', u, v if b(v, dfs_data) == u: successful = __insert_branch(u, v, dfs_data) if not successful: #print 'InsertBranch({}, {}) Failed'.format(u, v) nonplanar = True return nonplanar nonplanar = __embed_branch_recursive(v, dfs_data) if nonplanar: return nonplanar elif is_frond(u, v, dfs_data): #print 'Frond block entered:', u, v successful = __embed_frond(u, v, dfs_data) if not successful: #print 'EmbedFrond({}, {}) Failed'.format(u, v) nonplanar = True return nonplanar #print 'Post EmbedFrond' #print \"FG: {}\".format(dfs_data['FG']) #print \"LF: {}\".format(dfs_data['LF']) #print \"RF: {}\".format(dfs_data['RF']) else: # This block is totally valid, and there will be multiple cases when it gets hit. # We only want to do things if an edge is a tree edge (parent to child along the spine of the DFS tree), # or if it's a frond edge (an edge moving up the tree from lower along the spine). # Every non-tree edge will eventually get handled by the frond edge code as we recurse up the spine. pass #print \"{}: Should be planar\".format(u) #print 'Post-inserts' #print \"FG: {}\".format(dfs_data['FG']) #print \"LF: {}\".format(dfs_data['LF']) #print \"RF: {}\".format(dfs_data['RF']) nonplanar = False return nonplanar\n\n    ### Response: A recursive implementation of the EmbedBranch function, as defined on pages 8 and 22 of the paper..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String findRootPackageForActionPath(final String actionPath) { if (mappings == null) { return null; } int ndx = -1; int delta = Integer.MAX_VALUE; for (int i = 0; i < mappings.length; i++) { String mapping = mappings[i]; boolean found = false; if (actionPath.equals(mapping)) { found = true; } else { mapping += StringPool.SLASH; if (actionPath.startsWith(mapping)) { found = true; } } if (found) { int distance = actionPath.length() - mapping.length(); if (distance < delta) { ndx = i; delta = distance; } } } if (ndx == -1) { return null; } return packages[ndx]; }\n\n    ### Response:",
        "ground_truth": "Finds closest root package for the given action path.",
        "predict": " A recursive implementation of the EmbedBranch function, as defined on pages 8 and 22 of the paper..\n\n    "
    },
    {
        "ID": 1581,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def list_split(val, split_on_comma=True): \"\"\"Try to split each member of a list with comma separator. If we don't have to split just return val :param val: value to split :type val: :param split_on_comma: :type split_on_comma: bool :return: list with members split on comma :rtype: list >>> list_split(['a,b,c'], False) ['a,b,c'] >>> list_split(['a,b,c']) ['a', 'b', 'c'] >>> list_split('') [] \"\"\" if not split_on_comma: return val new_val = [] for subval in val: # This may happen when re-serializing if isinstance(subval, list): continue new_val.extend(subval.split(',')) return new_val\n\n    ### Response: Try to split each member of a list with comma separator.\n    If we don't have to split just return val\n\n    :param val: value to split\n    :type val:\n    :param split_on_comma:\n    :type split_on_comma: bool\n    :return: list with members split on comma\n    :rtype: list\n\n    >>> list_split(['a,b,c'], False)\n    ['a,b,c']\n\n    >>> list_split(['a,b,c'])\n    ['a', 'b', 'c']\n\n    >>> list_split('')\n    [].\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String resolveValidationMessage(final HttpServletRequest request, final Violation violation) { ValidationConstraint vc = violation.getConstraint(); String key = vc != null ? vc.getClass().getName() : violation.getName(); String msg = LocalizationUtil.findMessage(request, key); if (msg != null) { return beanTemplateParser.parseWithBean(msg, violation); } return null; }\n\n    ### Response:",
        "ground_truth": "Prepares validation messages.\nKey is either validation constraint class name or violation name.",
        "predict": " Try to split each member of a list with comma separator.\n    If we don't have to split just return val\n\n    :param val: value to split\n    :type val:\n    :param split_on_comma:\n    :type split_on_comma: bool\n    :return: list with members split on comma\n    :rtype: list\n\n    >>> list_split(['a,b,c'], False)\n    ['a,b,c']\n\n    >>> list_split(['a,b,c'])\n    ['a', 'b', 'c']\n\n    >>> list_split('')\n    [].\n\n    "
    },
    {
        "ID": 1582,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public Serializable invokeCommand(String key, String commandName, Serializable commandData) throws SIConnectionDroppedException, SIConnectionUnavailableException, SINotAuthorizedException, SIResourceException, SIIncorrectCallException, SICommandInvocationFailedException { return _delegateConnection.invokeCommand(key, commandName, commandData); }\n\n    ### Response: Calls invokeCommand on the delegate connection.\n\n@throws SINotAuthorizedException\n@throws SICommandInvocationFailedException\n@throws SIIncorrectCallException\n@throws SIResourceException\n@throws SIConnectionUnavailableException\n@throws SIConnectionDroppedException\n@see com.ibm.wsspi.sib.core.SICoreConnection#invokeCommand(java.lang.String, java.lang.String, java.io.Serializable).\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public BeanReferences removeDuplicateNames() { if (names.length < 2) { return this; } int nullCount = 0; for (int i = 1; i < names.length; i++) { String thisRef = names[i]; if (thisRef == null) { nullCount++; continue; } for (int j = 0; j < i; j++) { if (names[j] == null) { continue; } if (thisRef.equals(names[j])) { names[i] = null; break; } } } if (nullCount == 0) { return this; } String[] newRefs = new String[names.length - nullCount]; int ndx = 0; for (String name : names) { if (name == null) { continue; } newRefs[ndx] = name; ndx++; } return new BeanReferences(newRefs); }\n\n    ### Response:",
        "ground_truth": "Removes later duplicated references in an array.\nReturns new instance of BeanReferences if there was changes,\notherwise returns the same instance.",
        "predict": " Calls invokeCommand on the delegate connection.\n\n@throws SINotAuthorizedException\n@throws SICommandInvocationFailedException\n@throws SIIncorrectCallException\n@throws SIResourceException\n@throws SIConnectionUnavailableException\n@throws SIConnectionDroppedException\n@see com.ibm.wsspi.sib.core.SICoreConnection#invokeCommand(java.lang.String, java.lang.String, java.io.Serializable).\n\n    "
    },
    {
        "ID": 1583,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def flat_map(self, column_names, fn, column_types='auto', seed=None): \"\"\" Map each row of the SFrame to multiple rows in a new SFrame via a function. The output of `fn` must have type List[List[...]]. Each inner list will be a single row in the new output, and the collection of these rows within the outer list make up the data for the output SFrame. All rows must have the same length and the same order of types to make sure the result columns are homogeneously typed. For example, if the first element emitted into in the outer list by `fn` is [43, 2.3, 'string'], then all other elements emitted into the outer list must be a list with three elements, where the first is an int, second is a float, and third is a string. If column_types is not specified, the first 10 rows of the SFrame are used to determine the column types of the returned sframe. Parameters ---------- column_names : list[str] The column names for the returned SFrame. fn : function The function that maps each of the sframe row into multiple rows, returning List[List[...]]. All outputted rows must have the same length and order of types. column_types : list[type], optional The column types of the output SFrame. Default value will be automatically inferred by running `fn` on the first 10 rows of the input. If the types cannot be inferred from the first 10 rows, an error is raised. seed : int, optional Used as the seed if a random number generator is included in `fn`. Returns ------- out : SFrame A new SFrame containing the results of the flat_map of the original SFrame. Examples --------- Repeat each row according to the value in the 'number' column. >>> sf = turicreate.SFrame({'letter': ['a', 'b', 'c'], ... 'number': [1, 2, 3]}) >>> sf.flat_map(['number', 'letter'], ... lambda x: [list(x.itervalues()) for i in range(0, x['number'])]) +--------+--------+ | number | letter | +--------+--------+ | 1 | a | | 2 | b | | 2 | b | | 3 | c | | 3 | c | | 3 | c | +--------+--------+ [6 rows x 2 columns] \"\"\" assert callable(fn), \"Input must be callable\" if seed is None: seed = abs(hash(\"%0.20f\" % time.time())) % (2 ** 31) # determine the column_types if column_types == 'auto': types = set() sample = self[0:10] results = [fn(row) for row in sample] for rows in results: if type(rows) is not list: raise TypeError(\"Output type of the lambda function must be a list of lists\") # note: this skips empty lists for row in rows: if type(row) is not list: raise TypeError(\"Output type of the lambda function must be a list of lists\") types.add(tuple([type(v) for v in row])) if len(types) == 0: raise TypeError( \"Could not infer output column types from the first ten rows \" +\\ \"of the SFrame. Please use the 'column_types' parameter to \" +\\ \"set the types.\") if len(types) > 1: raise TypeError(\"Mapped rows must have the same length and types\") column_types = list(types.pop()) assert type(column_types) is list, \"'column_types' must be a list.\" assert len(column_types) == len(column_names), \"Number of output columns must match the size of column names\" with cython_context(): return SFrame(_proxy=self.__proxy__.flat_map(fn, column_names, column_types, seed))\n\n    ### Response: Map each row of the SFrame to multiple rows in a new SFrame via a\n        function.\n\n        The output of `fn` must have type List[List[...]].  Each inner list\n        will be a single row in the new output, and the collection of these\n        rows within the outer list make up the data for the output SFrame.\n        All rows must have the same length and the same order of types to\n        make sure the result columns are homogeneously typed.  For example, if\n        the first element emitted into in the outer list by `fn` is\n        [43, 2.3, 'string'], then all other elements emitted into the outer\n        list must be a list with three elements, where the first is an int,\n        second is a float, and third is a string.  If column_types is not\n        specified, the first 10 rows of the SFrame are used to determine the\n        column types of the returned sframe.\n\n        Parameters\n        ----------\n        column_names : list[str]\n            The column names for the returned SFrame.\n\n        fn : function\n            The function that maps each of the sframe row into multiple rows,\n            returning List[List[...]].  All outputted rows must have the same\n            length and order of types.\n\n        column_types : list[type], optional\n            The column types of the output SFrame. Default value will be\n            automatically inferred by running `fn` on the first 10 rows of the\n            input. If the types cannot be inferred from the first 10 rows, an\n            error is raised.\n\n        seed : int, optional\n            Used as the seed if a random number generator is included in `fn`.\n\n        Returns\n        -------\n        out : SFrame\n            A new SFrame containing the results of the flat_map of the\n            original SFrame.\n\n        Examples\n        ---------\n        Repeat each row according to the value in the 'number' column.\n\n        >>> sf = turicreate.SFrame({'letter': ['a', 'b', 'c'],\n        ...                       'number': [1, 2, 3]})\n        >>> sf.flat_map(['number', 'letter'],\n        ...             lambda x: [list(x.itervalues()) for i in range(0, x['number'])])\n        +--------+--------+\n        | number | letter |\n        +--------+--------+\n        |   1    |   a    |\n        |   2    |   b    |\n        |   2    |   b    |\n        |   3    |   c    |\n        |   3    |   c    |\n        |   3    |   c    |\n        +--------+--------+\n        [6 rows x 2 columns].\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public JoyProps addPropsFile(final String namePattern) { requireNotStarted(props); this.propsNamePatterns.add(namePattern); return this; }\n\n    ### Response:",
        "ground_truth": "Adds props files or patterns.",
        "predict": " Map each row of the SFrame to multiple rows in a new SFrame via a\n        function.\n\n        The output of `fn` must have type List[List[...]].  Each inner list\n        will be a single row in the new output, and the collection of these\n        rows within the outer list make up the data for the output SFrame.\n        All rows must have the same length and the same order of types to\n        make sure the result columns are homogeneously typed.  For example, if\n        the first element emitted into in the outer list by `fn` is\n        [43, 2.3, 'string'], then all other elements emitted into the outer\n        list must be a list with three elements, where the first is an int,\n        second is a float, and third is a string.  If column_types is not\n        specified, the first 10 rows of the SFrame are used to determine the\n        column types of the returned sframe.\n\n        Parameters\n        ----------\n        column_names : list[str]\n            The column names for the returned SFrame.\n\n        fn : function\n            The function that maps each of the sframe row into multiple rows,\n            returning List[List[...]].  All outputted rows must have the same\n            length and order of types.\n\n        column_types : list[type], optional\n            The column types of the output SFrame. Default value will be\n            automatically inferred by running `fn` on the first 10 rows of the\n            input. If the types cannot be inferred from the first 10 rows, an\n            error is raised.\n\n        seed : int, optional\n            Used as the seed if a random number generator is included in `fn`.\n\n        Returns\n        -------\n        out : SFrame\n            A new SFrame containing the results of the flat_map of the\n            original SFrame.\n\n        Examples\n        ---------\n        Repeat each row according to the value in the 'number' column.\n\n        >>> sf = turicreate.SFrame({'letter': ['a', 'b', 'c'],\n        ...                       'number': [1, 2, 3]})\n        >>> sf.flat_map(['number', 'letter'],\n        ...             lambda x: [list(x.itervalues()) for i in range(0, x['number'])])\n        +--------+--------+\n        | number | letter |\n        +--------+--------+\n        |   1    |   a    |\n        |   2    |   b    |\n        |   2    |   b    |\n        |   3    |   c    |\n        |   3    |   c    |\n        |   3    |   c    |\n        +--------+--------+\n        [6 rows x 2 columns].\n\n    "
    },
    {
        "ID": 1584,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function isNumeric(input) { return input !== undefined && input !== null && (typeof input === 'number' || parseInt(input, 10) == input); }\n\n    ### Response: Determines if the specified string consists entirely of numeric characters..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void forEachTarget(final Consumer<Target> targetConsumer) { for (final Target target : targets) { targetConsumer.accept(target); } }\n\n    ### Response:",
        "ground_truth": "Iterates all targets.",
        "predict": " Determines if the specified string consists entirely of numeric characters..\n\n    "
    },
    {
        "ID": 1585,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def get_prep_lookup(self, lookup_name, rhs): \"\"\" Perform preliminary non-db specific lookup checks and conversions \"\"\" if lookup_name == 'exact': if not isinstance(rhs, Model): raise FilteredGenericForeignKeyFilteringException( \"For exact lookup, please pass a single Model instance.\") elif lookup_name in ['in', 'in_raw']: if type(rhs) == QuerySet: return rhs, None if not is_iterable(rhs): raise FilteredGenericForeignKeyFilteringException( \"For 'in' lookup, please pass an iterable or a QuerySet.\") else: raise FilteredGenericForeignKeyFilteringException( \"Lookup %s not supported.\" % lookup_name) return rhs, None\n\n    ### Response: Perform preliminary non-db specific lookup checks and conversions.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void forEachTargetAndIn(final MadvocScope scope, final BiConsumer<Target, InjectionPoint> biConsumer) { for (final Target target : targets) { final ScopeData scopeData = target.scopeData(); if (scopeData.in() == null) { continue; } for (final InjectionPoint in : scopeData.in()) { if (in.scope() != scope) { continue; } biConsumer.accept(target, in); } } }\n\n    ### Response:",
        "ground_truth": "Iterates all targets and for each target iterates all IN injection points of given scope.",
        "predict": " Perform preliminary non-db specific lookup checks and conversions.\n\n    "
    },
    {
        "ID": 1586,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Synchronized public <T extends Notification> void removeListener(final String type, final Listener<T> listener) { map.get(type).removeIf(e -> e.getListener().equals(listener)); }\n\n    ### Response: Remove Listener of a given notification type.\n\n@param       Type of notification.\n@param type     Type of notification listener.\n@param listener Listener to be removed..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void forEachTargetAndOut(final MadvocScope scope, final BiConsumer<Target, InjectionPoint> biConsumer) { for (final Target target : targets) { final ScopeData scopeData = target.scopeData(); if (scopeData.out() == null) { continue; } for (final InjectionPoint out : scopeData.out()) { if (out.scope() != scope) { continue; } biConsumer.accept(target, out); } } }\n\n    ### Response:",
        "ground_truth": "Iterates all targets and for each target iterates all OUT injection points of given scope.",
        "predict": " Remove Listener of a given notification type.\n\n@param       Type of notification.\n@param type     Type of notification listener.\n@param listener Listener to be removed..\n\n    "
    },
    {
        "ID": 1587,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function addColumn($column, $options) { if (is_string($options)) { $options = ['type' => $options]; } $options = $options + [ 'field' => $column, 'type' => '', 'length' => '', 'default' => '', 'comment' => '', 'charset' => '', 'collate' => '', 'null' => true, 'ai' => false, 'index' => false, // KEY index (field[, field]) 'primary' => false, // [CONSTRAINT symbol] PRIMARY KEY (field[, field]) 'unique' => false, // [CONSTRAINT symbol] UNIQUE KEY index (field[, field]) 'foreign' => false // [CONSTRAINT symbol] FOREIGN KEY (field) REFERENCES table(field) [ON DELETE CASCADE, etc] ]; // Force to NOT NULL for primary or auto increment columns if ($options['primary'] || $options['ai']) { $options['null'] = false; } // Filter out values so that type defaults can be inherited $this->_columns[$column] = array_filter($options, function($value) { return ($value !== '' && $value !== false); }); if ($options['primary']) { $this->addPrimary($column, $options['primary']); } else if ($options['unique']) { $this->addUnique($column, $options['unique']); } else if ($options['foreign']) { $this->addForeign($column, $options['foreign']); } if ($options['index']) { $this->addIndex($column, $options['index']); } return $this; }\n\n    ### Response: Add a column to the table schema.\n\n@param string $column\n@param array $options {\n@type string $type      The column data type (one of Titon\\Db\\Driver\\Type)\n@type int $length       The column data length\n@type mixed $default    The default value\n@type string $comment   The comment\n@type string $charset   The character set for encoding\n@type string $collation The collation set\n@type bool $null        Does the column allow nulls\n@type bool $ai          Is this an auto incrementing column\n@type mixed $index      Is this an index\n@type mixed $primary    Is this a primary key\n@type mixed $unique     Is this a unique key\n@type mixed $foreign    Is this a foreign key\n}\n@return $this.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Object[] extractParametersValues() { final Object[] values = new Object[targets.length - 1]; for (int i = 1; i < targets.length; i++) { values[i - 1] = targets[i].value(); } return values; }\n\n    ### Response:",
        "ground_truth": "Collects all parameters from target into an array.",
        "predict": " Add a column to the table schema.\n\n@param string $column\n@param array $options {\n@type string $type      The column data type (one of Titon\\Db\\Driver\\Type)\n@type int $length       The column data length\n@type mixed $default    The default value\n@type string $comment   The comment\n@type string $charset   The character set for encoding\n@type string $collation The collation set\n@type bool $null        Does the column allow nulls\n@type bool $ai          Is this an auto incrementing column\n@type mixed $index      Is this an index\n@type mixed $primary    Is this a primary key\n@type mixed $unique     Is this a unique key\n@type mixed $foreign    Is this a foreign key\n}\n@return $this.\n\n    "
    },
    {
        "ID": 1588,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function _settingsCallback(Model $model, array $options) { if (method_exists($model, 'beforeUpload')) { $options = $model->beforeUpload($options); } if ($options['transforms'] && method_exists($model, 'beforeTransform')) { foreach ($options['transforms'] as $i => $transform) { $options['transforms'][$i] = $model->beforeTransform($transform); } } if ($options['transport'] && method_exists($model, 'beforeTransport')) { $options['transport'] = $model->beforeTransport($options['transport']); } return $options; }\n\n    ### Response: Trigger callback methods to modify attachment settings before uploading.\n\n@param Model $model\n@param array $options\n@return array.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected Target[] makeTargets(final Target actionTarget, final MethodParam[] methodParams) { if (methodParams == null) { // action does not have method parameters, so there is just one target return new Target[]{actionTarget}; } // action has method arguments, so there is more then one target final Target[] target = new Target[methodParams.length + 1]; target[0] = actionTarget; final Object action = actionTarget.value(); for (int i = 0; i < methodParams.length; i++) { final MethodParam methodParam = methodParams[i]; final Class paramType = methodParam.type(); final Target paramTarget; if (methodParam.annotationType() == null) { // parameter is NOT annotated, create new value for the target // the class itself will be a base class, and should be scanned final ScopeData newScopeData = methodParam.scopeData().inspector().inspectClassScopesWithCache(paramType); paramTarget = Target.ofValue(createActionMethodArgument(paramType, action), newScopeData); } else if (methodParam.annotationType() == Out.class) { // parameter is annotated with *only* OUT annotation // create the output value now AND to save the type paramTarget = Target.ofMethodParam(methodParam, createActionMethodArgument(paramType, action)); } else { // parameter is annotated with any IN annotation // create target with NO value, as the value will be created later paramTarget = Target.ofMethodParam(methodParam, type -> createActionMethodArgument(type, action)); } target[i + 1] = paramTarget; } return target; }\n\n    ### Response:",
        "ground_truth": "Joins action and parameters into one single array of Targets.",
        "predict": " Trigger callback methods to modify attachment settings before uploading.\n\n@param Model $model\n@param array $options\n@return array.\n\n    "
    },
    {
        "ID": 1589,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public List<JAXBElement<Object>> get_GenericApplicationPropertyOfWaterGroundSurface() { if (_GenericApplicationPropertyOfWaterGroundSurface == null) { _GenericApplicationPropertyOfWaterGroundSurface = new ArrayList<JAXBElement<Object>>(); } return this._GenericApplicationPropertyOfWaterGroundSurface; }\n\n    ### Response: Gets the value of the genericApplicationPropertyOfWaterGroundSurface property.\n\n\nThis accessor method returns a reference to the live list,\nnot a snapshot. Therefore any modification you make to the\nreturned list will be present inside the JAXB object.\nThis is why there is not a set method for the genericApplicationPropertyOfWaterGroundSurface property.\n\n\nFor example, to add a new item, do as follows:\n\nget_GenericApplicationPropertyOfWaterGroundSurface().add(newItem);\n\n\n\n\nObjects of the following type(s) are allowed in the list\n{@link JAXBElement }{@code }\n{@link JAXBElement }{@code }.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SuppressWarnings({\"unchecked\", \"NullArgumentToVariableArgMethod\"}) protected Object createActionMethodArgument(final Class type, final Object action) { try { if (type.getEnclosingClass() == null || Modifier.isStatic(type.getModifiers())) { // regular or static class return ClassUtil.newInstance(type); } else { // member class Constructor ctor = type.getDeclaredConstructor(type.getDeclaringClass()); ctor.setAccessible(true); return ctor.newInstance(action); } } catch (Exception ex) { throw new MadvocException(ex); } }\n\n    ### Response:",
        "ground_truth": "Creates action method arguments.",
        "predict": " Gets the value of the genericApplicationPropertyOfWaterGroundSurface property.\n\n\nThis accessor method returns a reference to the live list,\nnot a snapshot. Therefore any modification you make to the\nreturned list will be present inside the JAXB object.\nThis is why there is not a set method for the genericApplicationPropertyOfWaterGroundSurface property.\n\n\nFor example, to add a new item, do as follows:\n\nget_GenericApplicationPropertyOfWaterGroundSurface().add(newItem);\n\n\n\n\nObjects of the following type(s) are allowed in the list\n{@link JAXBElement }{@code }\n{@link JAXBElement }{@code }.\n\n    "
    },
    {
        "ID": 1590,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static function fromPath($path, $as = '') { clearstatcache(false, $path); if (!file_exists($path)) { throw new FileInfoException(\"$path does not exist\"); } $stat = stat($path); $file = new FileInfo(); $file->setPath($path); $file->setIsdir(is_dir($path)); $file->setMode(fileperms($path)); $file->setOwner(fileowner($path)); $file->setGroup(filegroup($path)); $file->setSize(filesize($path)); $file->setUid($stat['uid']); $file->setGid($stat['gid']); $file->setMtime($stat['mtime']); if ($as) { $file->setPath($as); } return $file; }\n\n    ### Response: Factory to build FileInfo from existing file or directory\n\n@param string $path path to a file on the local file system\n@param string $as   optional path to use inside the archive\n@throws FileInfoException\n@return FileInfo.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public void sessionCreated(final HttpSessionEvent httpSessionEvent) { HttpSession session = httpSessionEvent.getSession(); sessionMap.putIfAbsent(session.getId(), session); for (HttpSessionListener listener : listeners) { listener.sessionCreated(httpSessionEvent); } }\n\n    ### Response:",
        "ground_truth": "Stores session in map and broadcasts event to registered listeners.",
        "predict": " Factory to build FileInfo from existing file or directory\n\n@param string $path path to a file on the local file system\n@param string $as   optional path to use inside the archive\n@throws FileInfoException\n@return FileInfo.\n\n    "
    },
    {
        "ID": 1591,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def ram2disk(self): \"\"\"Move internal data from RAM to disk.\"\"\" values = self.series self.deactivate_ram() self.diskflag = True self._save_int(values) self.update_fastaccess()\n\n    ### Response: Move internal data from RAM to disk..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public void sessionDestroyed(final HttpSessionEvent httpSessionEvent) { HttpSession session = httpSessionEvent.getSession(); sessionMap.remove(session.getId()); for (HttpSessionListener listener : listeners) { listener.sessionDestroyed(httpSessionEvent); } }\n\n    ### Response:",
        "ground_truth": "Removes session from a map and broadcasts event to registered listeners.",
        "predict": " Move internal data from RAM to disk..\n\n    "
    },
    {
        "ID": 1592,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static authenticationnegotiatepolicy_authenticationvserver_binding[] get(nitro_service service, String name) throws Exception{ authenticationnegotiatepolicy_authenticationvserver_binding obj = new authenticationnegotiatepolicy_authenticationvserver_binding(); obj.set_name(name); authenticationnegotiatepolicy_authenticationvserver_binding response[] = (authenticationnegotiatepolicy_authenticationvserver_binding[]) obj.get_resources(service); return response; }\n\n    ### Response: Use this API to fetch authenticationnegotiatepolicy_authenticationvserver_binding resources of given name ..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public JsonArray add(Object value) { Objects.requireNonNull(value); value = JsonObject.resolveValue(value); list.add(value); return this; }\n\n    ### Response:",
        "ground_truth": "Adds an object to the JSON array.",
        "predict": " Use this API to fetch authenticationnegotiatepolicy_authenticationvserver_binding resources of given name ..\n\n    "
    },
    {
        "ID": 1593,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function getBreadCrumb() { $result = []; $current = $this->getCurrent(); while (!is_null($current)) { array_unshift($result, $current); $current = $current->getParent(); } return $result; }\n\n    ### Response: Get breadcrumb path for current menu item.\n\n@return MenuItem[].\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public JsonArray addAll(final JsonArray array) { Objects.requireNonNull(array); list.addAll(array.list); return this; }\n\n    ### Response:",
        "ground_truth": "Appends all of the elements in the specified array to the end of this JSON array.",
        "predict": " Get breadcrumb path for current menu item.\n\n@return MenuItem[].\n\n    "
    },
    {
        "ID": 1594,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (m *Registry) SchemaDrop(schema, name string, objectType lex.TokenType) error { name = strings.ToLower(name) switch objectType { case lex.TokenSchema, lex.TokenSource: m.mu.RLock() s, ok := m.schemas[name] m.mu.RUnlock() if !ok { return ErrNotFound } return m.applyer.Drop(s, s) case lex.TokenTable: m.mu.RLock() s, ok := m.schemas[schema] m.mu.RUnlock() if !ok { return ErrNotFound } t, _ := s.Table(name) if t == nil { return ErrNotFound } return m.applyer.Drop(s, t) } return fmt.Errorf(\"Object type %s not recognized to DROP\", objectType) }\n\n    ### Response: // SchemaDrop removes a schema.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Object remove(final int pos) { Object removed = list.remove(pos); if (removed instanceof Map) { return new JsonObject((Map) removed); } if (removed instanceof ArrayList) { return new JsonArray((List) removed); } return removed; }\n\n    ### Response:",
        "ground_truth": "Removes the value at the specified position in the JSON array.",
        "predict": " // SchemaDrop removes a schema.\n\n    "
    },
    {
        "ID": 1595,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def slice_to_numerical_args(slice_, num_examples): \"\"\"Translate a slice's attributes into numerical attributes. Parameters ---------- slice_ : :class:`slice` Slice for which numerical attributes are wanted. num_examples : int Number of examples in the indexable that is to be sliced through. This determines the numerical value for the `stop` attribute in case it's `None`. \"\"\" start = slice_.start if slice_.start is not None else 0 stop = slice_.stop if slice_.stop is not None else num_examples step = slice_.step if slice_.step is not None else 1 return start, stop, step\n\n    ### Response: Translate a slice's attributes into numerical attributes.\n\n        Parameters\n        ----------\n        slice_ : :class:`slice`\n            Slice for which numerical attributes are wanted.\n        num_examples : int\n            Number of examples in the indexable that is to be sliced\n            through. This determines the numerical value for the `stop`\n            attribute in case it's `None`..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected String resolveTarget(final ActionRequest actionRequest, final String resultValue) { String resultBasePath = actionRequest.getActionRuntime().getResultBasePath(); ResultPath resultPath = resultMapper.resolveResultPath(resultBasePath, resultValue); String actionPath = resultPath.path(); String path = actionPath; String value = resultPath.value(); if (StringUtil.isEmpty(value)) { value = null; } String target; while (true) { // variant #1: with value if (value != null) { if (path == null) { // only value remains int lastSlashNdx = actionPath.lastIndexOf('/'); if (lastSlashNdx != -1) { target = actionPath.substring(0, lastSlashNdx + 1) + value; } else { target = '/' + value; } } else { target = path + '.' + value; } target = locateTarget(actionRequest, target); if (target != null) { break; } } if (path != null) { // variant #2: without value target = locateTarget(actionRequest, path); if (target != null) { break; } } // continue if (path == null) { // path not found return null; } int dotNdx = MadvocUtil.lastIndexOfDotAfterSlash(path); if (dotNdx == -1) { path = null; } else { path = path.substring(0, dotNdx); } } return target; }\n\n    ### Response:",
        "ground_truth": "Locates the target file from action path and the result value.",
        "predict": " Translate a slice's attributes into numerical attributes.\n\n        Parameters\n        ----------\n        slice_ : :class:`slice`\n            Slice for which numerical attributes are wanted.\n        num_examples : int\n            Number of examples in the indexable that is to be sliced\n            through. This determines the numerical value for the `stop`\n            attribute in case it's `None`..\n\n    "
    },
    {
        "ID": 1596,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void setLinearUpperLimits(float limitX, float limitY, float limitZ) { Native3DGenericConstraint.setLinearUpperLimits(getNative(), limitX, limitY, limitZ); }\n\n    ### Response: Sets the upper limits for the \"moving\" body translation relative to joint point.\n\n@param limitX the X upper lower translation limit\n@param limitY the Y upper lower translation limit\n@param limitZ the Z upper lower translation limit.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void targetNotFound(final ActionRequest actionRequest, final String actionAndResultPath) throws IOException { final HttpServletResponse response = actionRequest.getHttpServletResponse(); if (!response.isCommitted()) { response.sendError(SC_NOT_FOUND, \"Result not found: \" + actionAndResultPath); } }\n\n    ### Response:",
        "ground_truth": "Called when target not found. By default sends 404 to the response.",
        "predict": " Sets the upper limits for the \"moving\" body translation relative to joint point.\n\n@param limitX the X upper lower translation limit\n@param limitY the Y upper lower translation limit\n@param limitZ the Z upper lower translation limit.\n\n    "
    },
    {
        "ID": 1597,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static function populateObject($output, $source) { $source = json_decode(json_encode($source), true); foreach($source as $key => $value) { $method = self::createMethodNames($key); // Changed method_exists() to is_callable() because of the magic functions // @source: http://php.net/manual/en/function.method-exists.php if(is_callable([$output, $method])) { call_user_func([$output, $method], $value); } } return $output; }\n\n    ### Response: Helper function to set Array data to a object.\n\n@param Object $output\n@param mixed $source\n@return Object.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected String valueToString(final String name, final Object valueObject) { if (!valueObject.getClass().isArray()) { return valueObject.toString(); } // array String[] array = (String[]) valueObject; if (valueNameIndexes == null) { valueNameIndexes = new HashMap<>(); } MutableInteger index = valueNameIndexes.get(name); if (index == null) { index = new MutableInteger(0); valueNameIndexes.put(name, index); } if (index.value >= array.length) { return null; } String result = array[index.value]; index.value++; return result; }\n\n    ### Response:",
        "ground_truth": "Converts value to a string.",
        "predict": " Helper function to set Array data to a object.\n\n@param Object $output\n@param mixed $source\n@return Object.\n\n    "
    },
    {
        "ID": 1598,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function decideOnSuccess() { $this->state = static::STATE_SUCCESS; $this->operationError = null; $this->operationErrorDescription = null; }\n\n    ### Response: Decides on success..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SuppressWarnings(\"unchecked\") public <T extends ActionFilter> MadvocRouter filter(final Class<T> actionFilterClass) { filtersManager.resolve(actionFilterClass); return this; }\n\n    ### Response:",
        "ground_truth": "Returns action filter instance for further configuration.",
        "predict": " Decides on success..\n\n    "
    },
    {
        "ID": 1599,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static function makeAnchorLink(ObjectId $oid, ObjectId $anchorOID, $anchorName=null) { $str = self::makeLink($oid).\"/\".$anchorOID->__toString(); if ($anchorName != null) { $str .= \"#\".$anchorName; } return $str; }\n\n    ### Response: Make an internal link to an object\n@param $oid The object id of the object to link to\n@param $anchorOID The object id of the subobject to link to\n@param $anchorName The name inside the subobject to link to (null, if the object itself should be linked) (default: _null_)\n@return The link.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String getPseudoFunctionName() { String name = getClass().getSimpleName().toLowerCase(); name = name.replace('_', '-'); return name; }\n\n    ### Response:",
        "ground_truth": "Returns pseudo-function name.",
        "predict": " Make an internal link to an object\n@param $oid The object id of the object to link to\n@param $anchorOID The object id of the subobject to link to\n@param $anchorName The name inside the subobject to link to (null, if the object itself should be linked) (default: _null_)\n@return The link.\n\n    "
    },
    {
        "ID": 1600,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private Status overwriteMatchingMethod(MethodSnippet msi) { String qpt = msi.qualifiedParameterTypes(); List<MethodSnippet> matching = state.methods() .filter(sn -> sn != null && sn != msi && sn.status().isActive() && sn.name().equals(msi.name()) && qpt.equals(sn.qualifiedParameterTypes())) .collect(toList()); // Look through all methods for a method of the same name, with the // same computed qualified parameter types Status overwrittenStatus = null; for (MethodSnippet sn : matching) { overwrittenStatus = sn.status(); SnippetEvent se = new SnippetEvent( sn, overwrittenStatus, OVERWRITTEN, false, msi, null, null); sn.setOverwritten(); secondaryEvents.add(se); state.debug(DBG_EVNT, \"Overwrite event #%d -- key: %s before: %s status: %s sig: %b cause: %s\\n\", secondaryEvents.size(), se.snippet(), se.previousStatus(), se.status(), se.isSignatureChange(), se.causeSnippet()); } return overwrittenStatus; }\n\n    ### Response: types are the same. if so, consider it an overwrite replacement..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public PropertyInjectionPoint[] resolve(Class type, final boolean autowire) { final List<PropertyInjectionPoint> list = new ArrayList<>(); final Set<String> usedPropertyNames = new HashSet<>(); // lookup fields while (type != Object.class) { final ClassDescriptor cd = ClassIntrospector.get().lookup(type); final PropertyDescriptor[] allPropertyDescriptors = cd.getAllPropertyDescriptors(); for (PropertyDescriptor propertyDescriptor : allPropertyDescriptors) { if (propertyDescriptor.isGetterOnly()) { continue; } if (usedPropertyNames.contains(propertyDescriptor.getName())) { continue; } Class propertyType = propertyDescriptor.getType(); if (ClassUtil.isTypeOf(propertyType, Collection.class)) { continue; } BeanReferences reference = referencesResolver.readReferenceFromAnnotation(propertyDescriptor); if (reference == null) { if (!autowire) { continue; } else { reference = referencesResolver.buildDefaultReference(propertyDescriptor); } } list.add(new PropertyInjectionPoint(propertyDescriptor, reference)); usedPropertyNames.add(propertyDescriptor.getName()); } // go to the supertype type = type.getSuperclass(); } final PropertyInjectionPoint[] fields; if (list.isEmpty()) { fields = PropertyInjectionPoint.EMPTY; } else { fields = list.toArray(new PropertyInjectionPoint[0]); } return fields; }\n\n    ### Response:",
        "ground_truth": "Resolves all properties for given type.",
        "predict": " types are the same. if so, consider it an overwrite replacement..\n\n    "
    },
    {
        "ID": 1601,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def get_location(self, obj): \"\"\" return user's location \"\"\" if not obj.city and not obj.country: return None elif obj.city and obj.country: return '%s, %s' % (obj.city, obj.country) elif obj.city or obj.country: return obj.city or obj.country\n\n    ### Response: return user's location.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private Socket createSocks4ProxySocket(final String host, final int port) { Socket socket = null; final String proxyHost = proxy.getProxyAddress(); final int proxyPort = proxy.getProxyPort(); final String user = proxy.getProxyUsername(); try { socket = Sockets.connect(proxyHost, proxyPort, connectionTimeout); final InputStream in = socket.getInputStream(); final OutputStream out = socket.getOutputStream(); socket.setTcpNoDelay(true); byte[] buf = new byte[1024]; // 1) CONNECT int index = 0; buf[index++] = 4; buf[index++] = 1; buf[index++] = (byte) (port >>> 8); buf[index++] = (byte) (port & 0xff); InetAddress addr = InetAddress.getByName(host); byte[] byteAddress = addr.getAddress(); for (byte byteAddres : byteAddress) { buf[index++] = byteAddres; } if (user != null) { System.arraycopy(user.getBytes(), 0, buf, index, user.length()); index += user.length(); } buf[index++] = 0; out.write(buf, 0, index); // 2) RESPONSE int len = 6; int s = 0; while (s < len) { int i = in.read(buf, s, len - s); if (i <= 0) { throw new HttpException(ProxyInfo.ProxyType.SOCKS4, \"stream is closed\"); } s += i; } if (buf[0] != 0) { throw new HttpException(ProxyInfo.ProxyType.SOCKS4, \"proxy returned VN \" + buf[0]); } if (buf[1] != 90) { try { socket.close(); } catch (Exception ignore) { } throw new HttpException(ProxyInfo.ProxyType.SOCKS4, \"proxy returned CD \" + buf[1]); } byte[] temp = new byte[2]; in.read(temp, 0, 2); return socket; } catch (RuntimeException rtex) { closeSocket(socket); throw rtex; } catch (Exception ex) { closeSocket(socket); throw new HttpException(ProxyInfo.ProxyType.SOCKS4, ex.toString(), ex); } }\n\n    ### Response:",
        "ground_truth": "Connects to the SOCKS4 proxy and returns proxified socket.",
        "predict": " return user's location.\n\n    "
    },
    {
        "ID": 1602,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function apnsFeedback() { $feedback_tokens = array(); if (!$this->existCertificate()) { return $feedback_tokens; } //connect to the APNS feedback servers $ctx = $this->composeStreamSocket(); // Open a connection to the APNS server try { $apns = stream_socket_client($this->feedbackUrl, $errcode, $errstr, 60, STREAM_CLIENT_CONNECT, $ctx); //Read the data on the connection: while (!feof($apns)) { $data = fread($apns, 38); if (strlen($data)) { $feedback_tokens['apnsFeedback'][] = unpack(\"N1timestamp/n1length/H*devtoken\", $data); } } fclose($apns); } catch (\\Exception $e) { //if stream socket can't be established, try again if ($this->canRetry()) { return $this->apnsFeedback(); } $response = [ 'success' => false, 'error' => 'APNS feedback connection problem: ' . $e->getMessage() . PHP_EOL ]; $this->setFeedback(json_decode(json_encode($response))); } finally { $this->resetAttempts(); return $feedback_tokens; } }\n\n    ### Response: Get the unregistered device tokens from the apns feedback.\nConnect to apn server in order to collect the tokens of the apps which were removed from the device.\n\n@return array.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    final int getAttributeCount() { int count = 0; Attribute attribute = this; while (attribute != null) { count += 1; attribute = attribute.nextAttribute; } return count; }\n\n    ### Response:",
        "ground_truth": "Returns the number of attributes of the attribute list that begins with this attribute.\n\n@return the number of attributes of the attribute list that begins with this attribute.",
        "predict": " Get the unregistered device tokens from the apns feedback.\nConnect to apn server in order to collect the tokens of the apps which were removed from the device.\n\n@return array.\n\n    "
    },
    {
        "ID": 1603,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (c *Clique) verifySeal(chain consensus.ChainReader, header *types.Header, parents []*types.Header) error { // Verifying the genesis block is not supported number := header.Number.Uint64() if number == 0 { return errUnknownBlock } // Retrieve the snapshot needed to verify this header and cache it snap, err := c.snapshot(chain, number-1, header.ParentHash, parents) if err != nil { return err } // Resolve the authorization key and check against signers signer, err := ecrecover(header, c.signatures) if err != nil { return err } if _, ok := snap.Signers[signer]; !ok { return errUnauthorizedSigner } for seen, recent := range snap.Recents { if recent == signer { // Signer is among recents, only fail if the current block doesn't shift it out if limit := uint64(len(snap.Signers)/2 + 1); seen > number-limit { return errRecentlySigned } } } // Ensure that the difficulty corresponds to the turn-ness of the signer if !c.fakeDiff { inturn := snap.inturn(header.Number.Uint64(), signer) if inturn && header.Difficulty.Cmp(diffInTurn) != 0 { return errWrongDifficulty } if !inturn && header.Difficulty.Cmp(diffNoTurn) != 0 { return errWrongDifficulty } } return nil }\n\n    ### Response: // verifySeal checks whether the signature contained in the header satisfies the\n// consensus protocol requirements. The method accepts an optional list of parent\n// headers that aren't yet part of the local blockchain to generate the snapshots\n// from..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Set<ActionResult> getAllActionResults() { final Set<ActionResult> set = new HashSet<>(allResults.size()); allResults.forEachValue(set::add); return set; }\n\n    ### Response:",
        "ground_truth": "Returns all action results as new set.",
        "predict": " // verifySeal checks whether the signature contained in the header satisfies the\n// consensus protocol requirements. The method accepts an optional list of parent\n// headers that aren't yet part of the local blockchain to generate the snapshots\n// from..\n\n    "
    },
    {
        "ID": 1604,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (s *ListStacksOutput) SetStackSummaries(v []*StackSummary) *ListStacksOutput { s.StackSummaries = v return s }\n\n    ### Response: // SetStackSummaries sets the StackSummaries field's value..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static boolean equalsOne(final char c, final CharSequence match) { for (int i = 0; i < match.length(); i++) { char aMatch = match.charAt(i); if (c == aMatch) { return true; } } return false; }\n\n    ### Response:",
        "ground_truth": "Match if one character equals to any of the given character.\n\n@return true if characters match any character from given array,\notherwise false",
        "predict": " // SetStackSummaries sets the StackSummaries field's value..\n\n    "
    },
    {
        "ID": 1605,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function addContextMenu(array $menu) { foreach ($menu as &$item) { if (!\\is_array($item) || !isset($item['title'])) { throw new InvalidArgumentException('Invalid structure. Example: [ [\\'title\\' => \\'TEST\\', \\'href\\' => \\'http://www.google.com\\', \\'popup\\' => \\'true\\', \\'confirm\\' => \\'true\\'] , [..] , ...]'); } } unset($item); foreach ($menu as $menu_key => &$item) { if (!isset($item['js'])) { $item['js'] = ''; } if (!isset($item['href'])) { $item['href'] = ''; } if (!isset($item['popup'])) { $item['popup'] = false; } if (!isset($item['confirm'])) { $item['confirm'] = false; } foreach ($item as $item_key => $item_value) { $item[$item_key] = str_replace([\"'\", '\"'], [\"\\'\", ''], $item[$item_key]); } // Bool to int for javascript $item['confirm'] = (int)$item['confirm']; $item['popup'] = (int)$item['popup']; $this->context_menu_items[] = $item; } return $this; }\n\n    ### Response: context menu for table rows, with dynamic parameters\n@param array $menu array( array('title' => 'TEST', 'confirm' => true // not obligate //, 'popup' => true // not obligate //, 'href' => 'http://www.google.com', 'js' => 'alert();') ,  array(..) , ...)\n@return $this\n@throws \\InvalidArgumentException.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static int findFirstEqual(final CharSequence source, final int index, final CharSequence match) { for (int i = index; i < source.length(); i++) { if (equalsOne(source.charAt(i), match)) { return i; } } return -1; }\n\n    ### Response:",
        "ground_truth": "Finds index of the first character in given charsequence the matches any from the\ngiven set of characters.\n\n@return index of matched character or -1",
        "predict": " context menu for table rows, with dynamic parameters\n@param array $menu array( array('title' => 'TEST', 'confirm' => true // not obligate //, 'popup' => true // not obligate //, 'href' => 'http://www.google.com', 'js' => 'alert();') ,  array(..) , ...)\n@return $this\n@throws \\InvalidArgumentException.\n\n    "
    },
    {
        "ID": 1606,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def join(self, dic): \"\"\" Add dic pairs to self.data \"\"\" for k,v in dic.iteritems(): if k in self.data: self[k] += dic[k] else: self[k] = deepcopy(v) return self\n\n    ### Response: Add dic pairs to self.data.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static int findFirstEqual(final char[] source, final int index, final char match) { for (int i = index; i < source.length; i++) { if (source[i] == match) { return i; } } return -1; }\n\n    ### Response:",
        "ground_truth": "Finds index of the first character in given array the matches any from the\ngiven set of characters.\n\n@return index of matched character or -1",
        "predict": " Add dic pairs to self.data.\n\n    "
    },
    {
        "ID": 1607,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function index(Request $request) { $spammers = $this->paginate($this->blocker->all(), $request, $this->perPage); $this->setTitle($title = trans('seo::spammers.titles.spammers-list')); $this->addBreadcrumb($title); return $this->view('admin.spammers.index', compact('spammers')); }\n\n    ### Response: List all the spammers.\n\n@param  \\Illuminate\\Http\\Request  $request\n\n@return \\Illuminate\\View\\View.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public CommandLine args(final String... arguments) { if (arguments != null && arguments.length > 0) { Collections.addAll(cmdLine, arguments); } return this; }\n\n    ### Response:",
        "ground_truth": "Adds several arguments.",
        "predict": " List all the spammers.\n\n@param  \\Illuminate\\Http\\Request  $request\n\n@return \\Illuminate\\View\\View.\n\n    "
    },
    {
        "ID": 1608,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static function start_attempt_parameters() { return new external_function_parameters ( array( 'quizid' => new external_value(PARAM_INT, 'quiz instance id'), 'preflightdata' => new external_multiple_structure( new external_single_structure( array( 'name' => new external_value(PARAM_ALPHANUMEXT, 'data name'), 'value' => new external_value(PARAM_RAW, 'data value'), ) ), 'Preflight required data (like passwords)', VALUE_DEFAULT, array() ), 'forcenew' => new external_value(PARAM_BOOL, 'Whether to force a new attempt or not.', VALUE_DEFAULT, false), ) ); }\n\n    ### Response: Describes the parameters for start_attempt.\n\n@return external_function_parameters\n@since Moodle 3.1.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public CommandLine env(final String key, final String value) { if (env == null) { env = new HashMap<>(); } env.put(key, value); return this; }\n\n    ### Response:",
        "ground_truth": "Sets environment variable.",
        "predict": " Describes the parameters for start_attempt.\n\n@return external_function_parameters\n@since Moodle 3.1.\n\n    "
    },
    {
        "ID": 1609,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Notification updateNotification(BigInteger alertId, BigInteger notificationId, Notification notification) throws IOException, TokenExpiredException { String requestUrl = RESOURCE + \"/\" + alertId.toString() + \"/notifications/\" + notificationId.toString(); ArgusResponse response = getClient().executeHttpRequest(ArgusHttpClient.RequestType.PUT, requestUrl, notification); assertValidResponse(response, requestUrl); return fromJson(response.getResult(), Notification.class); }\n\n    ### Response: Updates an existing notification.\n\n@param   alertId         The ID of the alert that owns the notification.\n@param   notificationId  The ID of the notification to update.\n@param   notification    The updated notification information.\n\n@return  The updated notification.\n\n@throws  IOException  If the server cannot be reached.\n@throws  TokenExpiredException   If the token sent along with the request has expired.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public ProcessRunner.ProcessResult run() { ByteArrayOutputStream baos = new ByteArrayOutputStream(); out = err = baos; try { baos.write(StringUtil.join(cmdLine, ' ').getBytes()); baos.write(StringPool.BYTES_NEW_LINE); } catch (IOException ignore) { } ProcessBuilder processBuilder = new ProcessBuilder(); processBuilder.command(cmdLine); if (cleanEnvironment) { processBuilder.environment().clear(); } if (env != null) { processBuilder.environment().putAll(env); } processBuilder.directory(workingDirectory); Process process = null; try { process = processBuilder.start(); } catch (IOException ioex) { return writeException(baos, ioex); } StreamGobbler outputGobbler = new StreamGobbler(process.getInputStream(), out, outPrefix); StreamGobbler errorGobbler = new StreamGobbler(process.getErrorStream(), err, errPrefix); outputGobbler.start(); errorGobbler.start(); int result; try { result = process.waitFor(); } catch (InterruptedException iex) { return writeException(baos, iex); } outputGobbler.waitFor(); errorGobbler.waitFor(); return new ProcessRunner.ProcessResult(result, baos.toString()); }\n\n    ### Response:",
        "ground_truth": "Runs command and returns process result.",
        "predict": " Updates an existing notification.\n\n@param   alertId         The ID of the alert that owns the notification.\n@param   notificationId  The ID of the notification to update.\n@param   notification    The updated notification information.\n\n@return  The updated notification.\n\n@throws  IOException  If the server cannot be reached.\n@throws  TokenExpiredException   If the token sent along with the request has expired.\n\n    "
    },
    {
        "ID": 1610,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function addSelection() { $this->selection = $this->table->addColumn(null, 'CheckBox'); // Move element to the beginning $k = array_search($this->selection, $this->table->columns); $this->table->columns = [$k => $this->table->columns[$k]] + $this->table->columns; return $this->selection; }\n\n    ### Response: Makes rows of this grid selectable by creating new column on the left with\ncheckboxes.\n\n@return TableColumn\\CheckBox.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void invoke(final Object listener, final Class listenerType) { if (listenerType == Init.class) { ((Init) listener).init(); return; } if (listenerType == Start.class) { ((Start) listener).start(); return; } if (listenerType == Ready.class) { ((Ready) listener).ready(); return; } if (listenerType == Stop.class) { ((Stop) listener).stop(); return; } throw new MadvocException(\"Invalid listener\"); }\n\n    ### Response:",
        "ground_truth": "Invoke the listener based on type.\nNot very OOP, but works.",
        "predict": " Makes rows of this grid selectable by creating new column on the left with\ncheckboxes.\n\n@return TableColumn\\CheckBox.\n\n    "
    },
    {
        "ID": 1611,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function prepareSearchEntity(array $options = array()) { $alias = $options['alias']; /** * @var Entity $search_entity */ $search_entity = $this->controller->{$alias}->newEntity(); $search_entity->setAccess('*', true); $this->controller->{$alias}->patchEntity($search_entity, $this->controller->request->getData()); $this->controller->set(compact('search_entity')); }\n\n    ### Response: Prepare Entity used to display search filters in the view\n@param array $options\n@return void.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    final void copyFrom(final Frame frame) { inputLocals = frame.inputLocals; inputStack = frame.inputStack; outputStackStart = 0; outputLocals = frame.outputLocals; outputStack = frame.outputStack; outputStackTop = frame.outputStackTop; initializationCount = frame.initializationCount; initializations = frame.initializations; }\n\n    ### Response:",
        "ground_truth": "Sets this frame to the value of the given frame.\n\nWARNING: after this method is called the two frames share the same data structures. It is\nrecommended to discard the given frame to avoid unexpected side effects.\n\n@param frame The new frame value.",
        "predict": " Prepare Entity used to display search filters in the view\n@param array $options\n@return void.\n\n    "
    },
    {
        "ID": 1612,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (c *services) Create(svc *api.Service) (result *api.Service, err error) { result = &api.Service{} err = c.r.Post().Namespace(c.ns).Resource(\"services\").Body(svc).Do().Into(result) return }\n\n    ### Response: // Create creates a new service..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    static int getAbstractTypeFromApiFormat(final SymbolTable symbolTable, final Object type) { if (type instanceof Integer) { return CONSTANT_KIND | ((Integer) type).intValue(); } else if (type instanceof String) { String descriptor = Type.getObjectType((String) type).getDescriptor(); return getAbstractTypeFromDescriptor(symbolTable, descriptor, 0); } else { return UNINITIALIZED_KIND | symbolTable.addUninitializedType(\"\", ((Label) type).bytecodeOffset); } }\n\n    ### Response:",
        "ground_truth": "Returns the abstract type corresponding to the given public API frame element type.\n\n@param symbolTable the type table to use to lookup and store type {@link Symbol}.\n@param type a frame element type described using the same format as in {@link\nMethodVisitor#visitFrame}, i.e. either {@link Opcodes#TOP}, {@link Opcodes#INTEGER}, {@link\nOpcodes#FLOAT}, {@link Opcodes#LONG}, {@link Opcodes#DOUBLE}, {@link Opcodes#NULL}, or\n{@link Opcodes#UNINITIALIZED_THIS}, or the internal name of a class, or a Label designating\na NEW instruction (for uninitialized types).\n@return the abstract type corresponding to the given frame element type.",
        "predict": " // Create creates a new service..\n\n    "
    },
    {
        "ID": 1613,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def longest_run_1d(arr): \"\"\"Return the length of the longest consecutive run of identical values. Parameters ---------- arr : bool array Input array Returns ------- int Length of longest run. \"\"\" v, rl = rle_1d(arr)[:2] return np.where(v, rl, 0).max()\n\n    ### Response: Return the length of the longest consecutive run of identical values.\n\n    Parameters\n    ----------\n    arr : bool array\n      Input array\n\n    Returns\n    -------\n    int\n      Length of longest run..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static int getAbstractTypeFromDescriptor( final SymbolTable symbolTable, final String buffer, final int offset) { String internalName; switch (buffer.charAt(offset)) { case 'V': return 0; case 'Z': case 'C': case 'B': case 'S': case 'I': return INTEGER; case 'F': return FLOAT; case 'J': return LONG; case 'D': return DOUBLE; case 'L': internalName = buffer.substring(offset + 1, buffer.length() - 1); return REFERENCE_KIND | symbolTable.addType(internalName); case '[': int elementDescriptorOffset = offset + 1; while (buffer.charAt(elementDescriptorOffset) == '[') { ++elementDescriptorOffset; } int typeValue; switch (buffer.charAt(elementDescriptorOffset)) { case 'Z': typeValue = BOOLEAN; break; case 'C': typeValue = CHAR; break; case 'B': typeValue = BYTE; break; case 'S': typeValue = SHORT; break; case 'I': typeValue = INTEGER; break; case 'F': typeValue = FLOAT; break; case 'J': typeValue = LONG; break; case 'D': typeValue = DOUBLE; break; case 'L': internalName = buffer.substring(elementDescriptorOffset + 1, buffer.length() - 1); typeValue = REFERENCE_KIND | symbolTable.addType(internalName); break; default: throw new IllegalArgumentException(); } return ((elementDescriptorOffset - offset) << DIM_SHIFT) | typeValue; default: throw new IllegalArgumentException(); } }\n\n    ### Response:",
        "ground_truth": "Returns the abstract type corresponding to the given type descriptor.\n\n@param symbolTable the type table to use to lookup and store type {@link Symbol}.\n@param buffer a string ending with a type descriptor.\n@param offset the start offset of the type descriptor in buffer.\n@return the abstract type corresponding to the given type descriptor.",
        "predict": " Return the length of the longest consecutive run of identical values.\n\n    Parameters\n    ----------\n    arr : bool array\n      Input array\n\n    Returns\n    -------\n    int\n      Length of longest run..\n\n    "
    },
    {
        "ID": 1614,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    final public function setMinLevel($minLevel) { if (isset($this->levels[$minLevel])) { $this->minLevel = $this->levels[$minLevel]; } return $this; }\n\n    ### Response: If set then only messages with level equal or greater then minLevel will be logged.\n\n@param string $minLevel\n@return $this fluent interface.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    final void setInputFrameFromApiFormat( final SymbolTable symbolTable, final int numLocal, final Object[] local, final int numStack, final Object[] stack) { int inputLocalIndex = 0; for (int i = 0; i < numLocal; ++i) { inputLocals[inputLocalIndex++] = getAbstractTypeFromApiFormat(symbolTable, local[i]); if (local[i] == Opcodes.LONG || local[i] == Opcodes.DOUBLE) { inputLocals[inputLocalIndex++] = TOP; } } while (inputLocalIndex < inputLocals.length) { inputLocals[inputLocalIndex++] = TOP; } int numStackTop = 0; for (int i = 0; i < numStack; ++i) { if (stack[i] == Opcodes.LONG || stack[i] == Opcodes.DOUBLE) { ++numStackTop; } } inputStack = new int[numStack + numStackTop]; int inputStackIndex = 0; for (int i = 0; i < numStack; ++i) { inputStack[inputStackIndex++] = getAbstractTypeFromApiFormat(symbolTable, stack[i]); if (stack[i] == Opcodes.LONG || stack[i] == Opcodes.DOUBLE) { inputStack[inputStackIndex++] = TOP; } } outputStackTop = 0; initializationCount = 0; }\n\n    ### Response:",
        "ground_truth": "Sets the input frame from the given public API frame description.\n\n@param symbolTable the type table to use to lookup and store type {@link Symbol}.\n@param numLocal the number of local variables.\n@param local the local variable types, described using the same format as in {@link\nMethodVisitor#visitFrame}.\n@param numStack the number of operand stack elements.\n@param stack the operand stack types, described using the same format as in {@link\nMethodVisitor#visitFrame}.",
        "predict": " If set then only messages with level equal or greater then minLevel will be logged.\n\n@param string $minLevel\n@return $this fluent interface.\n\n    "
    },
    {
        "ID": 1615,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def execute_project_models_sql_scripts(force_update=False): \"\"\" Used to get project information from MinC database and convert to this application Project models. Uses bulk_create if database is clean \"\"\" # TODO: Remove except and use ignore_conflicts # on bulk_create when django 2.2. is released with open(MODEL_FILE, \"r\") as file_content: query = file_content.read() db = db_connector() query_result = db.execute_pandas_sql_query(query) db.close() try: projects = Project.objects.bulk_create( (Project(**vals) for vals in query_result.to_dict(\"records\")), # ignore_conflicts=True available on django 2.2. ) indicators = [FinancialIndicator(project=p) for p in projects] FinancialIndicator.objects.bulk_create(indicators) except IntegrityError: # happens when there are duplicated projects LOG(\"Projects bulk_create failed, creating one by one...\") with transaction.atomic(): if force_update: for item in query_result.to_dict(\"records\"): p, _ = Project.objects.update_or_create(**item) FinancialIndicator.objects.update_or_create(project=p) else: for item in query_result.to_dict(\"records\"): p, _ = Project.objects.get_or_create(**item) FinancialIndicator.objects.update_or_create(project=p)\n\n    ### Response: Used to get project information from MinC database\n        and convert to this application Project models.\n        Uses bulk_create if database is clean.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private int getLocal(final int localIndex) { if (outputLocals == null || localIndex >= outputLocals.length) { // If this local has never been assigned in this basic block, it is still equal to its value // in the input frame. return LOCAL_KIND | localIndex; } else { int abstractType = outputLocals[localIndex]; if (abstractType == 0) { // If this local has never been assigned in this basic block, so it is still equal to its // value in the input frame. abstractType = outputLocals[localIndex] = LOCAL_KIND | localIndex; } return abstractType; } }\n\n    ### Response:",
        "ground_truth": "Returns the abstract type stored at the given local variable index in the output frame.\n\n@param localIndex the index of the local variable whose value must be returned.\n@return the abstract type stored at the given local variable index in the output frame.",
        "predict": " Used to get project information from MinC database\n        and convert to this application Project models.\n        Uses bulk_create if database is clean.\n\n    "
    },
    {
        "ID": 1616,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function removeDuplicates() { $this->request->allowMethod('post'); $this->DatabaseLogs->removeDuplicates((bool)$this->request->getQuery('strict')); $this->Flash->success(__('Duplicates have been removed.')); return $this->redirect(['action' => 'index']); }\n\n    ### Response: Remove duplicates action\n\n@return \\Cake\\Http\\Response|null.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void setLocal(final int localIndex, final int abstractType) { // Create and/or resize the output local variables array if necessary. if (outputLocals == null) { outputLocals = new int[10]; } int outputLocalsLength = outputLocals.length; if (localIndex >= outputLocalsLength) { int[] newOutputLocals = new int[Math.max(localIndex + 1, 2 * outputLocalsLength)]; System.arraycopy(outputLocals, 0, newOutputLocals, 0, outputLocalsLength); outputLocals = newOutputLocals; } // Set the local variable. outputLocals[localIndex] = abstractType; }\n\n    ### Response:",
        "ground_truth": "Replaces the abstract type stored at the given local variable index in the output frame.\n\n@param localIndex the index of the output frame local variable that must be set.\n@param abstractType the value that must be set.",
        "predict": " Remove duplicates action\n\n@return \\Cake\\Http\\Response|null.\n\n    "
    },
    {
        "ID": 1617,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private List<Object> findUsingLucene(EntityMetadata m, Client client, Object[] primaryKeys) { String idField = m.getIdAttribute().getName(); String equals = \"=\"; MetamodelImpl metaModel = (MetamodelImpl) kunderaMetadata.getApplicationMetadata().getMetamodel( m.getPersistenceUnit()); EntityType entityType = metaModel.entity(m.getEntityClazz()); String columnName = ((AbstractAttribute) entityType.getAttribute(idField)).getJPAColumnName(); List<Object> result = new ArrayList<Object>(); Queue queue = getKunderaQuery().getFilterClauseQueue(); KunderaQuery kunderaQuery = getKunderaQuery(); for (Object primaryKey : primaryKeys) { FilterClause filterClause = kunderaQuery.new FilterClause(columnName, equals, primaryKey, idField); kunderaQuery.setFilter(kunderaQuery.getEntityAlias() + \".\" + columnName + \" = \" + primaryKey); queue.clear(); queue.add(filterClause); List<Object> object = findUsingLucene(m, client); if (object != null && !object.isEmpty()) result.add(object.get(0)); } return result; }\n\n    ### Response: find data using lucene.\n\n@param m\nthe m\n@param client\nthe client\n@param primaryKeys\nthe primary keys\n@return the list.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void push(final int abstractType) { // Create and/or resize the output stack array if necessary. if (outputStack == null) { outputStack = new int[10]; } int outputStackLength = outputStack.length; if (outputStackTop >= outputStackLength) { int[] newOutputStack = new int[Math.max(outputStackTop + 1, 2 * outputStackLength)]; System.arraycopy(outputStack, 0, newOutputStack, 0, outputStackLength); outputStack = newOutputStack; } // Pushes the abstract type on the output stack. outputStack[outputStackTop++] = abstractType; // Updates the maximum size reached by the output stack, if needed (note that this size is // relative to the input stack size, which is not known yet). short outputStackSize = (short) (outputStackStart + outputStackTop); if (outputStackSize > owner.outputStackMax) { owner.outputStackMax = outputStackSize; } }\n\n    ### Response:",
        "ground_truth": "Pushes the given abstract type on the output frame stack.\n\n@param abstractType an abstract type.",
        "predict": " find data using lucene.\n\n@param m\nthe m\n@param client\nthe client\n@param primaryKeys\nthe primary keys\n@return the list.\n\n    "
    },
    {
        "ID": 1618,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _get_token(self): ''' requests an communication token from Grooveshark ''' self.session.token = self.request( 'getCommunicationToken', {'secretKey': self.session.secret}, {'uuid': self.session.user, 'session': self.session.session, 'clientRevision': grooveshark.const.CLIENTS['htmlshark']['version'], 'country': self.session.country, 'privacy': 0, 'client': 'htmlshark'})[1] self.session.time = time.time()\n\n    ### Response: requests an communication token from Grooveshark.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void push(final SymbolTable symbolTable, final String descriptor) { int typeDescriptorOffset = descriptor.charAt(0) == '(' ? descriptor.indexOf(')') + 1 : 0; int abstractType = getAbstractTypeFromDescriptor(symbolTable, descriptor, typeDescriptorOffset); if (abstractType != 0) { push(abstractType); if (abstractType == LONG || abstractType == DOUBLE) { push(TOP); } } }\n\n    ### Response:",
        "ground_truth": "Pushes the abstract type corresponding to the given descriptor on the output frame stack.\n\n@param symbolTable the type table to use to lookup and store type {@link Symbol}.\n@param descriptor a type or method descriptor (in which case its return type is pushed).",
        "predict": " requests an communication token from Grooveshark.\n\n    "
    },
    {
        "ID": 1619,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function _fireComponentEvent($eventType, Kwf_Component_Event_Component_AbstractFlag $ev) { $cls = 'Kwf_Component_Event_Component_'.$eventType; $g = $this->_getGenerator(); foreach ($ev->component->getChildComponents(array('generator'=>$g->getGeneratorKey())) as $c) { $this->fireEvent(new $cls($c->componentClass, $c, $ev->flag)); } }\n\n    ### Response: overridden in Page_Events_Static.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void pop(final int elements) { if (outputStackTop >= elements) { outputStackTop -= elements; } else { // If the number of elements to be popped is greater than the number of elements in the output // stack, clear it, and pop the remaining elements from the input stack. outputStackStart -= elements - outputStackTop; outputStackTop = 0; } }\n\n    ### Response:",
        "ground_truth": "Pops the given number of abstract types from the output frame stack.\n\n@param elements the number of abstract types that must be popped.",
        "predict": " overridden in Page_Events_Static.\n\n    "
    },
    {
        "ID": 1620,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static void getAccountInfoBySettingClient() { try { Account response = Account.getter() .client(client) .get(); System.out.println(response); } catch (PlivoRestException | IOException e) { e.printStackTrace(); } }\n\n    ### Response: trying to get account info by setting the client.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void pop(final String descriptor) { char firstDescriptorChar = descriptor.charAt(0); if (firstDescriptorChar == '(') { pop((Type.getArgumentsAndReturnSizes(descriptor) >> 2) - 1); } else if (firstDescriptorChar == 'J' || firstDescriptorChar == 'D') { pop(2); } else { pop(1); } }\n\n    ### Response:",
        "ground_truth": "Pops as many abstract types from the output frame stack as described by the given descriptor.\n\n@param descriptor a type or method descriptor (in which case its argument types are popped).",
        "predict": " trying to get account info by setting the client.\n\n    "
    },
    {
        "ID": 1621,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private String localize(String key, String defaultValue) { String result = defaultValue; if (bundle != null) { try { result = bundle.getString(key); } catch (MissingResourceException mre) { } } return result; }\n\n    ### Response: Looks up key in the ResourceBundle and returns the corresponding value.\nIf the bundle or the key doesn't exist, returns the default value..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void addInitializedType(final int abstractType) { // Create and/or resize the initializations array if necessary. if (initializations == null) { initializations = new int[2]; } int initializationsLength = initializations.length; if (initializationCount >= initializationsLength) { int[] newInitializations = new int[Math.max(initializationCount + 1, 2 * initializationsLength)]; System.arraycopy(initializations, 0, newInitializations, 0, initializationsLength); initializations = newInitializations; } // Store the abstract type. initializations[initializationCount++] = abstractType; }\n\n    ### Response:",
        "ground_truth": "Adds an abstract type to the list of types on which a constructor is invoked in the basic\nblock.\n\n@param abstractType an abstract type on a which a constructor is invoked.",
        "predict": " Looks up key in the ResourceBundle and returns the corresponding value.\nIf the bundle or the key doesn't exist, returns the default value..\n\n    "
    },
    {
        "ID": 1622,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (o *PortTemplate) CreateVLANTemplate(child *VLANTemplate) *bambou.Error { return bambou.CurrentSession().CreateChild(o, child) }\n\n    ### Response: // CreateVLANTemplate creates a new child VLANTemplate under the PortTemplate.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private int getInitializedType(final SymbolTable symbolTable, final int abstractType) { if (abstractType == UNINITIALIZED_THIS || (abstractType & (DIM_MASK | KIND_MASK)) == UNINITIALIZED_KIND) { for (int i = 0; i < initializationCount; ++i) { int initializedType = initializations[i]; int dim = initializedType & DIM_MASK; int kind = initializedType & KIND_MASK; int value = initializedType & VALUE_MASK; if (kind == LOCAL_KIND) { initializedType = dim + inputLocals[value]; } else if (kind == STACK_KIND) { initializedType = dim + inputStack[inputStack.length - value]; } if (abstractType == initializedType) { if (abstractType == UNINITIALIZED_THIS) { return REFERENCE_KIND | symbolTable.addType(symbolTable.getClassName()); } else { return REFERENCE_KIND | symbolTable.addType(symbolTable.getType(abstractType & VALUE_MASK).value); } } } } return abstractType; }\n\n    ### Response:",
        "ground_truth": "Returns the \"initialized\" abstract type corresponding to the given abstract type.\n\n@param symbolTable the type table to use to lookup and store type {@link Symbol}.\n@param abstractType an abstract type.\n@return the REFERENCE_KIND abstract type corresponding to abstractType if it is\nUNINITIALIZED_THIS or an UNINITIALIZED_KIND abstract type for one of the types on which a\nconstructor is invoked in the basic block. Otherwise returns abstractType.",
        "predict": " // CreateVLANTemplate creates a new child VLANTemplate under the PortTemplate.\n\n    "
    },
    {
        "ID": 1623,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def init_copy(self, connection): \"\"\" Override to perform custom queries. Any code here will be formed in the same transaction as the main copy, just prior to copying data. Example use cases include truncating the table or removing all data older than X in the database to keep a rolling window of data available in the table. \"\"\" # TODO: remove this after sufficient time so most people using the # clear_table attribtue will have noticed it doesn't work anymore if hasattr(self, \"clear_table\"): raise Exception(\"The clear_table attribute has been removed. Override init_copy instead!\") if self.enable_metadata_columns: self._add_metadata_columns(connection.cursor())\n\n    ### Response: Override to perform custom queries.\n\n        Any code here will be formed in the same transaction as the main copy, just prior to copying data.\n        Example use cases include truncating the table or removing all data older than X in the database\n        to keep a rolling window of data available in the table..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    static void putAbstractType( final SymbolTable symbolTable, final int abstractType, final ByteVector output) { int arrayDimensions = (abstractType & Frame.DIM_MASK) >> DIM_SHIFT; if (arrayDimensions == 0) { int typeValue = abstractType & VALUE_MASK; switch (abstractType & KIND_MASK) { case CONSTANT_KIND: output.putByte(typeValue); break; case REFERENCE_KIND: output .putByte(ITEM_OBJECT) .putShort(symbolTable.addConstantClass(symbolTable.getType(typeValue).value).index); break; case UNINITIALIZED_KIND: output.putByte(ITEM_UNINITIALIZED).putShort((int) symbolTable.getType(typeValue).data); break; default: throw new AssertionError(); } } else { // Case of an array type, we need to build its descriptor first. StringBuilder typeDescriptor = new StringBuilder(); while (arrayDimensions-- > 0) { typeDescriptor.append('['); } if ((abstractType & KIND_MASK) == REFERENCE_KIND) { typeDescriptor .append('L') .append(symbolTable.getType(abstractType & VALUE_MASK).value) .append(';'); } else { switch (abstractType & VALUE_MASK) { case Frame.ITEM_ASM_BOOLEAN: typeDescriptor.append('Z'); break; case Frame.ITEM_ASM_BYTE: typeDescriptor.append('B'); break; case Frame.ITEM_ASM_CHAR: typeDescriptor.append('C'); break; case Frame.ITEM_ASM_SHORT: typeDescriptor.append('S'); break; case Frame.ITEM_INTEGER: typeDescriptor.append('I'); break; case Frame.ITEM_FLOAT: typeDescriptor.append('F'); break; case Frame.ITEM_LONG: typeDescriptor.append('J'); break; case Frame.ITEM_DOUBLE: typeDescriptor.append('D'); break; default: throw new AssertionError(); } } output .putByte(ITEM_OBJECT) .putShort(symbolTable.addConstantClass(typeDescriptor.toString()).index); } }\n\n    ### Response:",
        "ground_truth": "Put the given abstract type in the given ByteVector, using the JVMS verification_type_info\nformat used in StackMapTable attributes.\n\n@param symbolTable the type table to use to lookup and store type {@link Symbol}.\n@param abstractType an abstract type, restricted to {@link Frame#CONSTANT_KIND}, {@link\nFrame#REFERENCE_KIND} or {@link Frame#UNINITIALIZED_KIND} types.\n@param output where the abstract type must be put.\n@see JVMS\n4.7.4",
        "predict": " Override to perform custom queries.\n\n        Any code here will be formed in the same transaction as the main copy, just prior to copying data.\n        Example use cases include truncating the table or removing all data older than X in the database\n        to keep a rolling window of data available in the table..\n\n    "
    },
    {
        "ID": 1624,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function mergeTemplateResources(TemplateResources $templateResources) { $this->stylesheets = array_merge($this->stylesheets, $templateResources->getStylesheets()); $this->headerScripts = array_merge($this->headerScripts, $templateResources->getHeaderScripts()); $this->headerIncludes = array_merge($this->headerIncludes, $templateResources->getHeaderIncludes()); $this->footerScripts = array_merge($this->footerScripts, $templateResources->getFooterScripts()); $this->footerIncludes = array_merge($this->footerIncludes, $templateResources->getFooterIncludes()); }\n\n    ### Response: Merge a set of template resources\n\n@param TemplateResources $templateResources Template resources.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override protected int pruneCache() { int count = 0; Iterator<CacheObject<K,V>> values = cacheMap.values().iterator(); while (values.hasNext()) { CacheObject co = values.next(); if (co.isExpired()) { values.remove(); count++; } } return count; }\n\n    ### Response:",
        "ground_truth": "Prunes expired elements from the cache. Returns the number of removed objects.",
        "predict": " Merge a set of template resources\n\n@param TemplateResources $templateResources Template resources.\n\n    "
    },
    {
        "ID": 1625,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func convertDatapointToStatsd(datapoint producers.Datapoint) (string, string, bool) { val, err := normalize(datapoint.Value) if err != nil { // This is only debug-level because we expect many NaNs in regular usage log.Debugf(\"Metric %s failed to convert: %q\", datapoint.Name, err) return \"\", \"\", false } return datapoint.Name, fmt.Sprintf(\"%d|g\", val), true }\n\n    ### Response: // convertDatapointToStatsd attempts to convert a datapoint to a statsd format\n// name + value, returning a false ok flag if the conversion failed..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void schedulePrune(final long delay) { if (pruneTimer != null) { pruneTimer.cancel(); } pruneTimer = new Timer(); pruneTimer.schedule( new TimerTask() { @Override public void run() { prune(); } }, delay, delay ); }\n\n    ### Response:",
        "ground_truth": "Schedules prune.",
        "predict": " // convertDatapointToStatsd attempts to convert a datapoint to a statsd format\n// name + value, returning a false ok flag if the conversion failed..\n\n    "
    },
    {
        "ID": 1626,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public ArrayList<String> findReplacements(String word) { final List<CandidateData> result = findReplacementCandidates(word); final ArrayList<String> resultSuggestions = new ArrayList<String>(result.size()); for (CandidateData cd : result) { resultSuggestions.add(cd.getWord()); } return resultSuggestions; }\n\n    ### Response: Find suggestions by using K. Oflazer's algorithm. See Jan Daciuk's s_fsa\npackage, spell.cc for further explanation.\n\n@param word The original misspelled word.\n@return A list of suggested replacements..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public ModuleVisitor visitModule(final String name, final int access, final String version) { if (api < Opcodes.ASM6) { throw new UnsupportedOperationException(\"This feature requires ASM6\"); } if (cv != null) { return cv.visitModule(name, access, version); } return null; }\n\n    ### Response:",
        "ground_truth": "Visit the module corresponding to the class.\n\n@param name the fully qualified name (using dots) of the module.\n@param access the module access flags, among {@code ACC_OPEN}, {@code ACC_SYNTHETIC} and {@code\nACC_MANDATED}.\n@param version the module version, or {@literal null}.\n@return a visitor to visit the module values, or {@literal null} if this visitor is not\ninterested in visiting this module.",
        "predict": " Find suggestions by using K. Oflazer's algorithm. See Jan Daciuk's s_fsa\npackage, spell.cc for further explanation.\n\n@param word The original misspelled word.\n@return A list of suggested replacements..\n\n    "
    },
    {
        "ID": 1627,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def close(self): \"\"\"Perform a clean shutdown. Waits for all the currently scheduled work to finish, kills the workers, and closes the connection pool. .. note:: Ensure your code does not submit new work while the connection is closing. Where possible, it is recommended you use a context manager (a :code:`with Client.from_config(...) as` construct) to ensure your code properly closes all resources. Examples: This example creates a client (based on an auto-detected configuration file), executes some code (represented by a placeholder comment), and then closes the client. >>> from dwave.cloud import Client >>> client = Client.from_config() >>> # code that uses client >>> client.close() \"\"\" # Finish all the work that requires the connection _LOGGER.debug(\"Joining submission queue\") self._submission_queue.join() _LOGGER.debug(\"Joining cancel queue\") self._cancel_queue.join() _LOGGER.debug(\"Joining poll queue\") self._poll_queue.join() _LOGGER.debug(\"Joining load queue\") self._load_queue.join() # Send kill-task to all worker threads # Note: threads can't be 'killed' in Python, they have to die by # natural causes for _ in self._submission_workers: self._submission_queue.put(None) for _ in self._cancel_workers: self._cancel_queue.put(None) for _ in self._poll_workers: self._poll_queue.put((-1, None)) for _ in self._load_workers: self._load_queue.put(None) # Wait for threads to die for worker in chain(self._submission_workers, self._cancel_workers, self._poll_workers, self._load_workers): worker.join() # Close the requests session self.session.close()\n\n    ### Response: Perform a clean shutdown.\n\n        Waits for all the currently scheduled work to finish, kills the workers,\n        and closes the connection pool.\n\n        .. note:: Ensure your code does not submit new work while the connection is closing.\n\n        Where possible, it is recommended you use a context manager (a :code:`with Client.from_config(...) as`\n        construct) to ensure your code properly closes all resources.\n\n        Examples:\n            This example creates a client (based on an auto-detected configuration file), executes\n            some code (represented by a placeholder comment), and then closes the client.\n\n            >>> from dwave.cloud import Client\n            >>> client = Client.from_config()\n            >>> # code that uses client\n            >>> client.close().\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void visitNestHost(final String nestHost) { if (api < Opcodes.ASM7) { throw new UnsupportedOperationException(\"This feature requires ASM7\"); } if (cv != null) { cv.visitNestHost(nestHost); } }\n\n    ### Response:",
        "ground_truth": "Visits the nest host class of the class. A nest is a set of classes of the same package that\nshare access to their private members. One of these classes, called the host, lists the other\nmembers of the nest, which in turn should link to the host of their nest. This method must be\ncalled only once and only if the visited class is a non-host member of a nest. A class is\nimplicitly its own nest, so it's invalid to call this method with the visited class name as\nargument.\n\n@param nestHost the internal name of the host class of the nest.",
        "predict": " Perform a clean shutdown.\n\n        Waits for all the currently scheduled work to finish, kills the workers,\n        and closes the connection pool.\n\n        .. note:: Ensure your code does not submit new work while the connection is closing.\n\n        Where possible, it is recommended you use a context manager (a :code:`with Client.from_config(...) as`\n        construct) to ensure your code properly closes all resources.\n\n        Examples:\n            This example creates a client (based on an auto-detected configuration file), executes\n            some code (represented by a placeholder comment), and then closes the client.\n\n            >>> from dwave.cloud import Client\n            >>> client = Client.from_config()\n            >>> # code that uses client\n            >>> client.close().\n\n    "
    },
    {
        "ID": 1628,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function divide($value) { if (!$value instanceof self) { $value = new self($value, $this->getScale(), false); } $rawValue = $value->getValue(); if ($rawValue == 0) { throw new InvalidArgumentException('Cannot divide by zero.'); } $newValue = bcdiv($this->getValue(), $rawValue, $this->getScale()); return $this->assignValue($newValue); }\n\n    ### Response: Divides this value by the given value.\n\n@param float|int|string|BigNumber $value The value to divide by.\n@return BigNumber.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void visitOuterClass(final String owner, final String name, final String descriptor) { if (cv != null) { cv.visitOuterClass(owner, name, descriptor); } }\n\n    ### Response:",
        "ground_truth": "Visits the enclosing class of the class. This method must be called only if the class has an\nenclosing class.\n\n@param owner internal name of the enclosing class of the class.\n@param name the name of the method that contains the class, or {@literal null} if the class is\nnot enclosed in a method of its enclosing class.\n@param descriptor the descriptor of the method that contains the class, or {@literal null} if\nthe class is not enclosed in a method of its enclosing class.",
        "predict": " Divides this value by the given value.\n\n@param float|int|string|BigNumber $value The value to divide by.\n@return BigNumber.\n\n    "
    },
    {
        "ID": 1629,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function render(renderable $widget) { $classparts = explode('\\\\', get_class($widget)); // Strip namespaces. $classname = array_pop($classparts); // Remove _renderable suffixes $classname = preg_replace('/_renderable$/', '', $classname); $rendermethod = 'render_'.$classname; if (method_exists($this, $rendermethod)) { return $this->$rendermethod($widget); } if ($widget instanceof templatable) { $component = array_shift($classparts); if (!$component) { $component = 'core'; } $template = $component . '/' . $classname; $context = $widget->export_for_template($this); return $this->render_from_template($template, $context); } throw new coding_exception('Can not render widget, renderer method ('.$rendermethod.') not found.'); }\n\n    ### Response: Returns rendered widget.\n\nThe provided widget needs to be an object that extends the renderable\ninterface.\nIf will then be rendered by a method based upon the classname for the widget.\nFor instance a widget of class `crazywidget` will be rendered by a protected\nrender_crazywidget method of this renderer.\nIf no render_crazywidget method exists and crazywidget implements templatable,\nlook for the 'crazywidget' template in the same component and render that.\n\n@param renderable $widget instance with renderable interface\n@return string.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public AnnotationVisitor visitAnnotation(final String descriptor, final boolean visible) { if (cv != null) { return cv.visitAnnotation(descriptor, visible); } return null; }\n\n    ### Response:",
        "ground_truth": "Visits an annotation of the class.\n\n@param descriptor the class descriptor of the annotation class.\n@param visible {@literal true} if the annotation is visible at runtime.\n@return a visitor to visit the annotation values, or {@literal null} if this visitor is not\ninterested in visiting this annotation.",
        "predict": " Returns rendered widget.\n\nThe provided widget needs to be an object that extends the renderable\ninterface.\nIf will then be rendered by a method based upon the classname for the widget.\nFor instance a widget of class `crazywidget` will be rendered by a protected\nrender_crazywidget method of this renderer.\nIf no render_crazywidget method exists and crazywidget implements templatable,\nlook for the 'crazywidget' template in the same component and render that.\n\n@param renderable $widget instance with renderable interface\n@return string.\n\n    "
    },
    {
        "ID": 1630,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function upload() { try { if ($this->getRequestMethod() !== \\Request::HTTP_POST) { throw new \\common_exception_NotImplemented('Only post method is accepted.'); } if (!isset($_POST['upload']) || !is_string($_POST['upload'])) { throw new \\common_exception_InconsistentData(\"'upload' POST variable is missed.\"); } $size = mb_strlen($_POST['upload'], '8bit'); $result = ['success' => true, 'size' => $size]; } catch (\\common_exception_NotImplemented $e) { $result = ['success' => false, 'error' => $e->getMessage()]; $this->logWarning($e->getMessage()); } catch (\\common_exception_InconsistentData $e) { $result = ['success' => false, 'error' => $e->getMessage()]; $this->logWarning($e->getMessage()); } catch (\\Exception $e) { $result = ['success' => false, 'type' => 'error', 'message' => 'Please contact administrator']; $this->logWarning($e->getMessage()); } $this->returnJson($result); }\n\n    ### Response: Action is used to check upload speed from client side..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void visitNestMember(final String nestMember) { if (api < Opcodes.ASM7) { throw new UnsupportedOperationException(\"This feature requires ASM7\"); } if (cv != null) { cv.visitNestMember(nestMember); } }\n\n    ### Response:",
        "ground_truth": "Visits a member of the nest. A nest is a set of classes of the same package that share access\nto their private members. One of these classes, called the host, lists the other members of the\nnest, which in turn should link to the host of their nest. This method must be called only if\nthe visited class is the host of a nest. A nest host is implicitly a member of its own nest, so\nit's invalid to call this method with the visited class name as argument.\n\n@param nestMember the internal name of a nest member.",
        "predict": " Action is used to check upload speed from client side..\n\n    "
    },
    {
        "ID": 1631,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (cf *Filter) Insert(data []byte) bool { i1, i2, fp := getIndicesAndFingerprint(data, uint(len(cf.buckets))) if cf.insert(fp, i1) || cf.insert(fp, i2) { return true } return cf.reinsert(fp, randi(i1, i2)) }\n\n    ### Response: // Insert inserts data into the counter and returns true upon success.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void visitInnerClass( final String name, final String outerName, final String innerName, final int access) { if (cv != null) { cv.visitInnerClass(name, outerName, innerName, access); } }\n\n    ### Response:",
        "ground_truth": "Visits information about an inner class. This inner class is not necessarily a member of the\nclass being visited.\n\n@param name the internal name of an inner class (see {@link Type#getInternalName()}).\n@param outerName the internal name of the class to which the inner class belongs (see {@link\nType#getInternalName()}). May be {@literal null} for not member classes.\n@param innerName the (simple) name of the inner class inside its enclosing class. May be\n{@literal null} for anonymous inner classes.\n@param access the access flags of the inner class as originally declared in the enclosing\nclass.",
        "predict": " // Insert inserts data into the counter and returns true upon success.\n\n    "
    },
    {
        "ID": 1632,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def parse_uri(uri_string): \"\"\"Creates a Uri object which corresponds to the URI string. This method can accept partial URIs, but it will leave missing members of the Uri unset. \"\"\" parts = urlparse.urlparse(uri_string) uri = Uri() if parts[0]: uri.scheme = parts[0] if parts[1]: host_parts = parts[1].split(':') if host_parts[0]: uri.host = host_parts[0] if len(host_parts) > 1: uri.port = int(host_parts[1]) if parts[2]: uri.path = parts[2] if parts[4]: param_pairs = parts[4].split('&') for pair in param_pairs: pair_parts = pair.split('=') if len(pair_parts) > 1: uri.query[urllib.unquote_plus(pair_parts[0])] = ( urllib.unquote_plus(pair_parts[1])) elif len(pair_parts) == 1: uri.query[urllib.unquote_plus(pair_parts[0])] = None return uri\n\n    ### Response: Creates a Uri object which corresponds to the URI string.\n \n    This method can accept partial URIs, but it will leave missing\n    members of the Uri unset..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public FieldVisitor visitField( final int access, final String name, final String descriptor, final String signature, final Object value) { if (cv != null) { return cv.visitField(access, name, descriptor, signature, value); } return null; }\n\n    ### Response:",
        "ground_truth": "Visits a field of the class.\n\n@param access the field's access flags (see {@link Opcodes}). This parameter also indicates if\nthe field is synthetic and/or deprecated.\n@param name the field's name.\n@param descriptor the field's descriptor (see {@link Type}).\n@param signature the field's signature. May be {@literal null} if the field's type does not use\ngeneric types.\n@param value the field's initial value. This parameter, which may be {@literal null} if the\nfield does not have an initial value, must be an {@link Integer}, a {@link Float}, a {@link\nLong}, a {@link Double} or a {@link String} (for {@code int}, {@code float}, {@code long}\nor {@code String} fields respectively). This parameter is only used for static\nfields. Its value is ignored for non static fields, which must be initialized through\nbytecode instructions in constructors or methods.\n@return a visitor to visit field annotations and attributes, or {@literal null} if this class\nvisitor is not interested in visiting these annotations and attributes.",
        "predict": " Creates a Uri object which corresponds to the URI string.\n \n    This method can accept partial URIs, but it will leave missing\n    members of the Uri unset..\n\n    "
    },
    {
        "ID": 1633,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function replaceRaws(&$sql, &$params) { $i = 0; $sql = preg_replace_callback('/\\?/', function() use(&$i, &$params) { if($params[$i] instanceof static) { $r = $params[$i]; $sql = $r->buildSQL(); $params = array_merge(array_slice($params, 0, $i), $r->getParameters(), array_slice($params, $i+1)); return '('.$sql.')'; } if($params[$i] instanceof Raw) { $r = $params[$i]; $sql = $r->getSQL(); $params = array_merge(array_slice($params, 0, $i), $r->getParameters(), array_slice($params, $i+1)); return $sql; } else return '?'; }, $sql); }\n\n    ### Response: Replace ? with raw queries.\n@param  string &$sql\n@param  array  &$params.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static DbThreadSession getThreadSession() { DbThreadSession session = (DbThreadSession) ThreadDbSessionHolder.get(); if (session == null) { session = new DbThreadSession(); } return session; }\n\n    ### Response:",
        "ground_truth": "Returns existing thread session, or new one if already not exist. If session doesn't exist, it will be created\nusing default connection provider.",
        "predict": " Replace ? with raw queries.\n@param  string &$sql\n@param  array  &$params.\n\n    "
    },
    {
        "ID": 1634,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function dontHaveAttachmentFilesInDatabase($attachmentIds) { $postmeta = $this->grabPostmetaTableName(); foreach ((array)$attachmentIds as $attachmentId) { $attachedFile = $this->grabAttachmentAttachedFile($attachmentId); $attachmentMetadata = $this->grabAttachmentMetadata($attachmentId); $fs = $this->getWpFilesystemModule(); $filesPath = Utils::untrailslashit($fs->getUploadsPath(dirname($attachedFile))); if (!isset($attachmentMetadata['sizes']) && is_array($attachmentMetadata['sizes'])) { continue; } foreach ($attachmentMetadata['sizes'] as $size => $sizeData) { $filePath = $filesPath . '/' . $sizeData['file']; $fs->deleteUploadedFile($filePath); } $fs->deleteUploadedFile($attachedFile); } }\n\n    ### Response: Removes all the files attached with an attachment post, it will not remove the database entries.\nRequires the `WPFilesystem` module to be loaded in the suite.\n\n@example\n```php\n$posts = $I->grabPostsTableName();\n$attachmentIds = $I->grabColumnFromDatabase($posts, 'ID', ['post_type' => 'attachment']);\n// This will only remove the files, not the database entries.\n$I->dontHaveAttachmentFilesInDatabase($attachmentIds);\n```\n\n@param array|int $attachmentIds An attachment post ID or an array of attachment post IDs.\n\n@throws \\Codeception\\Exception\\ModuleException If the `WPFilesystem` module is not loaded in the suite..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void closeThreadSession() { DbThreadSession session = (DbThreadSession) ThreadDbSessionHolder.get(); if (session != null) { session.closeSession(); } }\n\n    ### Response:",
        "ground_truth": "Closes thread session.",
        "predict": " Removes all the files attached with an attachment post, it will not remove the database entries.\nRequires the `WPFilesystem` module to be loaded in the suite.\n\n@example\n```php\n$posts = $I->grabPostsTableName();\n$attachmentIds = $I->grabColumnFromDatabase($posts, 'ID', ['post_type' => 'attachment']);\n// This will only remove the files, not the database entries.\n$I->dontHaveAttachmentFilesInDatabase($attachmentIds);\n```\n\n@param array|int $attachmentIds An attachment post ID or an array of attachment post IDs.\n\n@throws \\Codeception\\Exception\\ModuleException If the `WPFilesystem` module is not loaded in the suite..\n\n    "
    },
    {
        "ID": 1635,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def get_model_metadata(model_file): \"\"\" Returns the name and shape information of input and output tensors of the given ONNX model file. Notes ----- This method is available when you ``import mxnet.contrib.onnx`` Parameters ---------- model_file : str ONNX model file name Returns ------- model_metadata : dict A dictionary object mapping various metadata to its corresponding value. The dictionary will have the following template:: 'input_tensor_data' : list of tuples representing the shape of the input paramters 'output_tensor_data' : list of tuples representing the shape of the output of the model \"\"\" graph = GraphProto() try: import onnx except ImportError: raise ImportError(\"Onnx and protobuf need to be installed. \" + \"Instructions to install - https://github.com/onnx/onnx\") model_proto = onnx.load_model(model_file) metadata = graph.get_graph_metadata(model_proto.graph) return metadata\n\n    ### Response: Returns the name and shape information of input and output tensors of the given ONNX model file.\n\n    Notes\n    -----\n    This method is available when you ``import mxnet.contrib.onnx``\n\n    Parameters\n    ----------\n    model_file : str\n        ONNX model file name\n\n    Returns\n    -------\n    model_metadata : dict\n        A dictionary object mapping various metadata to its corresponding value.\n        The dictionary will have the following template::\n\n          'input_tensor_data' : list of tuples representing the shape of the input paramters\n          'output_tensor_data' : list of tuples representing the shape of the output of the model.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected ActionWrapper[] createExecutionArray() { int totalInterceptors = (this.actionRuntime.getInterceptors() != null ? this.actionRuntime.getInterceptors().length : 0); int totalFilters = (this.actionRuntime.getFilters() != null ? this.actionRuntime.getFilters().length : 0); ActionWrapper[] executionArray = new ActionWrapper[totalFilters + 1 + totalInterceptors + 1]; // filters int index = 0; if (totalFilters > 0) { System.arraycopy(actionRuntime.getFilters(), 0, executionArray, index, totalFilters); index += totalFilters; } // result is executed AFTER the action AND interceptors executionArray[index++] = actionRequest -> { Object actionResult = actionRequest.invoke(); ActionRequest.this.madvocController.render(ActionRequest.this, actionResult); return actionResult; }; // interceptors if (totalInterceptors > 0) { System.arraycopy(actionRuntime.getInterceptors(), 0, executionArray, index, totalInterceptors); index += totalInterceptors; } // action executionArray[index] = actionRequest -> { actionResult = invokeActionMethod(); return actionResult; }; return executionArray; }\n\n    ### Response:",
        "ground_truth": "Creates execution array that will invoke all filters, actions and results\nin correct order.",
        "predict": " Returns the name and shape information of input and output tensors of the given ONNX model file.\n\n    Notes\n    -----\n    This method is available when you ``import mxnet.contrib.onnx``\n\n    Parameters\n    ----------\n    model_file : str\n        ONNX model file name\n\n    Returns\n    -------\n    model_metadata : dict\n        A dictionary object mapping various metadata to its corresponding value.\n        The dictionary will have the following template::\n\n          'input_tensor_data' : list of tuples representing the shape of the input paramters\n          'output_tensor_data' : list of tuples representing the shape of the output of the model.\n\n    "
    },
    {
        "ID": 1636,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def regular_subset(spikes, n_spikes_max=None, offset=0): \"\"\"Prune the current selection to get at most n_spikes_max spikes.\"\"\" assert spikes is not None # Nothing to do if the selection already satisfies n_spikes_max. if n_spikes_max is None or len(spikes) <= n_spikes_max: # pragma: no cover return spikes step = math.ceil(np.clip(1. / n_spikes_max * len(spikes), 1, len(spikes))) step = int(step) # Note: randomly-changing selections are confusing... my_spikes = spikes[offset::step][:n_spikes_max] assert len(my_spikes) <= len(spikes) assert len(my_spikes) <= n_spikes_max return my_spikes\n\n    ### Response: Prune the current selection to get at most n_spikes_max spikes..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected Object invokeActionMethod() throws Exception { if (actionRuntime.isActionHandlerDefined()) { actionRuntime.getActionHandler().handle(this); return null; } final Object[] params = targets.extractParametersValues(); try { return actionRuntime.getActionClassMethod().invoke(action, params); } catch(InvocationTargetException itex) { throw wrapToException(unwrapThrowable(itex)); } }\n\n    ### Response:",
        "ground_truth": "Invokes action method after starting all interceptors.\nAfter method invocation, all interceptors will finish, in opposite order.",
        "predict": " Prune the current selection to get at most n_spikes_max spikes..\n\n    "
    },
    {
        "ID": 1637,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function _fnSortListener ( settings, colIdx, append, callback ) { var col = settings.aoColumns[ colIdx ]; var sorting = settings.aaSorting; var asSorting = col.asSorting; var nextSortIdx; var next = function ( a ) { var idx = a._idx; if ( idx === undefined ) { idx = $.inArray( a[1], asSorting ); } return idx+1 >= asSorting.length ? 0 : idx+1; }; // If appending the sort then we are multi-column sorting if ( append && settings.oFeatures.bSortMulti ) { // Are we already doing some kind of sort on this column? var sortIdx = $.inArray( colIdx, _pluck(sorting, '0') ); if ( sortIdx !== -1 ) { // Yes, modify the sort nextSortIdx = next( sorting[sortIdx] ); sorting[sortIdx][1] = asSorting[ nextSortIdx ]; sorting[sortIdx]._idx = nextSortIdx; } else { // No sort on this column yet sorting.push( [ colIdx, asSorting[0], 0 ] ); sorting[sorting.length-1]._idx = 0; } } else if ( sorting.length && sorting[0][0] == colIdx ) { // Single column - already sorting on this column, modify the sort nextSortIdx = next( sorting[0] ); sorting.length = 1; sorting[0][1] = asSorting[ nextSortIdx ]; sorting[0]._idx = nextSortIdx; } else { // Single column - sort only on this column sorting.length = 0; sorting.push( [ colIdx, asSorting[0] ] ); sorting[0]._idx = 0; } // Run the sort by calling a full redraw _fnReDraw( settings ); // callback used for async user interaction if ( typeof callback == 'function' ) { callback( settings ); } }\n\n    ### Response: Function to run on user sort request\n@param {object} settings dataTables settings object\n@param {node} attachTo node to attach the handler to\n@param {int} colIdx column sorting index\n@param {boolean} [append=false] Append the requested sort to the existing\nsort if true (i.e. multi-column sort)\n@param {function} [callback] callback function\n@memberof DataTable#oApi.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String readRequestBody() { if (requestBody == null) { try { requestBody = ServletUtil.readRequestBodyFromStream(getHttpServletRequest()); } catch (IOException ioex) { requestBody = StringPool.EMPTY; } } return requestBody; }\n\n    ### Response:",
        "ground_truth": "Reads request body only once and returns it to user.",
        "predict": " Function to run on user sort request\n@param {object} settings dataTables settings object\n@param {node} attachTo node to attach the handler to\n@param {int} colIdx column sorting index\n@param {boolean} [append=false] Append the requested sort to the existing\nsort if true (i.e. multi-column sort)\n@param {function} [callback] callback function\n@memberof DataTable#oApi.\n\n    "
    },
    {
        "ID": 1638,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function _initSessionData() { /** @var Utilities $oUtils */ $oUtils = $this->getInstance(\"Utilities\"); //storing country value settings to session $sCountryLang = $oUtils->getRequestVar(\"country_lang\", \"post\"); if (isset($sCountryLang)) { $this->setSessionParam('country_lang', $sCountryLang); } //storing shop language value settings to session $sShopLang = $oUtils->getRequestVar(\"sShopLang\", \"post\"); if (isset($sShopLang)) { $this->setSessionParam('sShopLang', $sShopLang); } //storing if send information to OXID $blSendInformation = $oUtils->getRequestVar(\"send_technical_information_to_oxid\", \"post\"); if (isset($blSendInformation)) { $this->setSessionParam('send_technical_information_to_oxid', $blSendInformation); } //storing check for updates settings to session $blCheckForUpdates = $oUtils->getRequestVar(\"check_for_updates\", \"post\"); if (isset($blCheckForUpdates)) { $this->setSessionParam('check_for_updates', $blCheckForUpdates); } // store eula to session $iEula = $oUtils->getRequestVar(\"iEula\", \"post\"); if (isset($iEula)) { $this->setSessionParam('eula', $iEula); } }\n\n    ### Response: Initializes setup session data array.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static int calcFirstItemIndexOfPage(int page, final int pageSize, final int total) { if (total == 0) { return 0; } if (page < 1) { page = 1; } int first = (page - 1) * pageSize; if (first >= total) { first = ((total - 1) / pageSize) * pageSize; // first item on the last page } return first; }\n\n    ### Response:",
        "ground_truth": "Calculates the first item index of requested page.",
        "predict": " Initializes setup session data array.\n\n    "
    },
    {
        "ID": 1639,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (s *StateDB) IntermediateRoot(deleteEmptyObjects bool) common.Hash { s.Finalise(deleteEmptyObjects) // Track the amount of time wasted on hashing the account trie if metrics.EnabledExpensive { defer func(start time.Time) { s.AccountHashes += time.Since(start) }(time.Now()) } return s.trie.Hash() }\n\n    ### Response: // IntermediateRoot computes the current root hash of the state trie.\n// It is called in between transactions to get the root hash that\n// goes into transaction receipts..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static int calcFirstItemIndexOfPage(final PageRequest pageRequest, final int total) { return calcFirstItemIndexOfPage(pageRequest.getPage(), pageRequest.getSize(), total); }\n\n    ### Response:",
        "ground_truth": "Calculates first item index of the page.",
        "predict": " // IntermediateRoot computes the current root hash of the state trie.\n// It is called in between transactions to get the root hash that\n// goes into transaction receipts..\n\n    "
    },
    {
        "ID": 1640,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def copy(self): \"\"\" Returns a new instance copy of this column. :return: <orb.Column> \"\"\" out = type(self)( name=self.__name, field=self.__field, display=self.__display, flags=self.__flags, default=self.__default, defaultOrder=self.__defaultOrder, getter=self.__gettermethod, setter=self.__settermethod, queryFilter=self.__query_filter, shortcut=self.__shortcut, readPermit=self.__readPermit, writePermit=self.__writePermit, order=self.__order ) return out\n\n    ### Response: Returns a new instance copy of this column.\n\n        :return: .\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public boolean match(final int value) { if (a == 0) { return value == b; } if (a > 0) { if (value < b) { return false; } return (value - b) % a == 0; } if (value > b) { return false; } return (b - value) % (-a) == 0; }\n\n    ### Response:",
        "ground_truth": "Matches expression with the value.",
        "predict": " Returns a new instance copy of this column.\n\n        :return: .\n\n    "
    },
    {
        "ID": 1641,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (c *i2cConnection) ReadByte() (val byte, err error) { c.mutex.Lock() defer c.mutex.Unlock() if err := c.bus.SetAddress(c.address); err != nil { return 0, err } return c.bus.ReadByte() }\n\n    ### Response: // ReadByte reads a single byte from the i2c device..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static byte[] toRawByteArray(final char[] carr) { byte[] barr = new byte[carr.length << 1]; for (int i = 0, bpos = 0; i < carr.length; i++) { char c = carr[i]; barr[bpos++] = (byte) ((c & 0xFF00) >> 8); barr[bpos++] = (byte) (c & 0x00FF); } return barr; }\n\n    ### Response:",
        "ground_truth": "Converts char array into byte array by replacing each character with two bytes.",
        "predict": " // ReadByte reads a single byte from the i2c device..\n\n    "
    },
    {
        "ID": 1642,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function compile() { $loader = $this->loaderFactory->newInstance(); $cache = $this->cacheFactory->produce(); if(true === $cache->expired()) { $config = $this->loadConfig($loader); $cache->write($config); } else { $config = $cache->get(); } return $config; }\n\n    ### Response: Builds the configuration tree out of all of the App configuration definitions.\n\n@return array Array of configuration values..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static int findFirstDiff(final char[] source, final int index, final char[] match) { for (int i = index; i < source.length; i++) { if (!equalsOne(source[i], match)) { return i; } } return -1; }\n\n    ### Response:",
        "ground_truth": "Finds index of the first character in given array the differs from the\ngiven set of characters.\n\n@return index of matched character or -1",
        "predict": " Builds the configuration tree out of all of the App configuration definitions.\n\n@return array Array of configuration values..\n\n    "
    },
    {
        "ID": 1643,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func NewHTTPClient( options ClientOptions, logger boshlog.Logger, ) HTTPClient { return HTTPClient{ options: options, logger: logger, } }\n\n    ### Response: // NewHTTPClient creates a new BOSH Registry Client..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected String resolveNodeName(final Node node) { switch (tagCase) { case DEFAULT: return node.getNodeName(); case RAW: return node.getNodeRawName(); case LOWERCASE: return node.getNodeRawName().toLowerCase(); case UPPERCASE: return node.getNodeRawName().toUpperCase(); } return null; }\n\n    ### Response:",
        "ground_truth": "Renders node name.",
        "predict": " // NewHTTPClient creates a new BOSH Registry Client..\n\n    "
    },
    {
        "ID": 1644,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function _buildArguments($arguments) { $output = []; foreach ($arguments as $argument => $value) { $output[] = $argument . ' ' . $value; } return implode(' ', $output); }\n\n    ### Response: Builds a shell safe argument list\n\n@param array $arguments arguments to pass to pdftk\n@return string list of arguments.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected String resolveAttributeName(final Node node, final Attribute attribute) { switch (attributeCase) { case DEFAULT: return attribute.getName(); case RAW: return attribute.getRawName(); case LOWERCASE: return attribute.getRawName().toLowerCase(); case UPPERCASE: return attribute.getRawName().toUpperCase(); } return null; }\n\n    ### Response:",
        "ground_truth": "Renders attribute name.",
        "predict": " Builds a shell safe argument list\n\n@param array $arguments arguments to pass to pdftk\n@return string list of arguments.\n\n    "
    },
    {
        "ID": 1645,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function forget($key) { if (is_string($key)) { $this->unsetVal($key); } else { foreach ($this->items as $keys => $value) { if ($key === $keys) { $this->unsetVal($key); } } } return $this; }\n\n    ### Response: forget a item of the items\n\n@param mixed $key\n@return object.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void renderAttribute(final Node node, final Attribute attribute, final Appendable appendable) throws IOException { String name = resolveAttributeName(node, attribute); String value = attribute.getValue(); appendable.append(name); if (value != null) { appendable.append('='); appendable.append('\\\"'); appendable.append(HtmlEncoder.attributeDoubleQuoted(value)); appendable.append('\\\"'); } }\n\n    ### Response:",
        "ground_truth": "Renders attribute.",
        "predict": " forget a item of the items\n\n@param mixed $key\n@return object.\n\n    "
    },
    {
        "ID": 1646,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override protected <T> T instantiateClass(Class<T> clazz) throws Throwable { // Get the current BeanManager for this module. If one doesn't exist it is because // the module isn't CDI enabled and we fall back to the original behavior. ManagedObject<T> mo = null; if (releasableFactory != null) { mo = releasableFactory.createValidationReleasable(clazz); } if (mo != null) { if (releasables == null) { releasables = new LinkedList<ValidationReleasable<?>>(); } // Save off the context under which the class was created as a CDI managed // bean so it can be cleaned up upon stopping the module. //releasables.add(mo); return mo.getObject(); } else { return super.instantiateClass(clazz); } }\n\n    ### Response: Override the base implementation so that when a class is instantiated\nit is done so as a CDI managed bean..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Props load(final File file) throws IOException { final String extension = FileNameUtil.getExtension(file.getAbsolutePath()); final String data; if (extension.equalsIgnoreCase(\"properties\")) { data = FileUtil.readString(file, StringPool.ISO_8859_1); } else { data = FileUtil.readString(file); } parse(data); return this; }\n\n    ### Response:",
        "ground_truth": "Loads props from the file. Assumes UTF8 encoding unless\nthe file ends with '.properties', than it uses ISO 8859-1.",
        "predict": " Override the base implementation so that when a class is instantiated\nit is done so as a CDI managed bean..\n\n    "
    },
    {
        "ID": 1647,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public File getNextFile() { File nextFile = null; try { String sNextName = generateName(); nextFile = new File(backupSetDir.getAbsoluteFile() + File.separator + sNextName); if (isFullBackup && isDirectoryForFullBackup) { if (!PrivilegedFileHelper.exists(nextFile)) { PrivilegedFileHelper.mkdirs(nextFile); } } else { PrivilegedFileHelper.createNewFile(nextFile); } } catch (IOException e) { LOG.error(\"Can nit get next file : \" + e.getLocalizedMessage(), e); } return nextFile; }\n\n    ### Response: Get next file in backup set.\n\n@return\nfile.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Props load(final File file, final String encoding) throws IOException { parse(FileUtil.readString(file, encoding)); return this; }\n\n    ### Response:",
        "ground_truth": "Loads properties from the file in provided encoding.",
        "predict": " Get next file in backup set.\n\n@return\nfile.\n\n    "
    },
    {
        "ID": 1648,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def recurse(self, data={}, delay=None): \"\"\"Have a stage invoke itself with a modified set of arguments.\"\"\" return self.emit(stage=self.stage.name, data=data, delay=delay)\n\n    ### Response: Have a stage invoke itself with a modified set of arguments..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Props load(final InputStream in) throws IOException { final Writer out = new FastCharArrayWriter(); StreamUtil.copy(in, out); parse(out.toString()); return this; }\n\n    ### Response:",
        "ground_truth": "Loads properties from input stream. Stream is not closed at the end.",
        "predict": " Have a stage invoke itself with a modified set of arguments..\n\n    "
    },
    {
        "ID": 1649,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void handleRemoveUser(String jsonp, String target, HttpServletRequest request, HttpServletResponse response, AuthenticationResult ar) throws IOException, ServletException { try { DeploymentType newDeployment = CatalogUtil.getDeployment(new ByteArrayInputStream(getDeploymentBytes())); User user = null; String[] splitTarget = target.split(\"/\"); if (splitTarget.length == 3) { user = findUser(splitTarget[2], newDeployment); } if (user == null) { response.setStatus(HttpServletResponse.SC_NOT_FOUND); response.getWriter().print(buildClientResponse(jsonp, ClientResponse.UNEXPECTED_FAILURE, \"User not found\")); return; } if (newDeployment.getUsers().getUser().size() == 1) { newDeployment.setUsers(null); } else { newDeployment.getUsers().getUser().remove(user); } String dep = CatalogUtil.getDeployment(newDeployment); if (dep == null || dep.trim().length() <= 0) { response.setStatus(HttpServletResponse.SC_BAD_REQUEST); response.getWriter().print(buildClientResponse(jsonp, ClientResponse.UNEXPECTED_FAILURE, \"Failed to build deployment information.\")); return; } Object[] params = new Object[]{null, dep}; //Call sync as nothing else can happen when this is going on. SyncCallback cb = new SyncCallback(); httpClientInterface.callProcedure(request.getRemoteHost(), ar, BatchTimeoutOverrideType.NO_TIMEOUT, cb, \"@UpdateApplicationCatalog\", params); cb.waitForResponse(); ClientResponseImpl r = ClientResponseImpl.class.cast(cb.getResponse()); response.setStatus(HttpServletResponse.SC_NO_CONTENT); if (r.getStatus() == ClientResponse.SUCCESS) { response.getWriter().print(buildClientResponse(jsonp, ClientResponse.SUCCESS, \"User Removed.\")); } else { response.getWriter().print(HTTPClientInterface.asJsonp(jsonp, r.toJSONString())); } } catch (Exception ex) { m_log.error(\"Failed to update role from API\", ex); response.setStatus(HttpServletResponse.SC_BAD_REQUEST); response.getWriter().print(buildClientResponse(jsonp, ClientResponse.UNEXPECTED_FAILURE, Throwables.getStackTraceAsString(ex))); } }\n\n    ### Response: Handle DELETE for users.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Props load(final Map<?, ?> p) { for (final Map.Entry<?, ?> entry : p.entrySet()) { final String name = entry.getKey().toString(); final Object value = entry.getValue(); if (value == null) { continue; } data.putBaseProperty(name, value.toString(), false); } return this; }\n\n    ### Response:",
        "ground_truth": "Loads base properties from the provided java properties.\nNull values are ignored.",
        "predict": " Handle DELETE for users.\n\n    "
    },
    {
        "ID": 1650,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function BlankField(type, options) { Field.call(this, type, options); this.element = util.createElement(this.document, 'div'); this.onFieldChange = util.createEvent('BlankField.onFieldChange'); }\n\n    ### Response: For use with delegate types that do not yet have anything to resolve to.\nBlankFields are not for general use..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SuppressWarnings(\"unchecked\") public Props load(final Map<?, ?> map, final String prefix) { String realPrefix = prefix; realPrefix += '.'; for (final Map.Entry entry : map.entrySet()) { final String name = entry.getKey().toString(); final Object value = entry.getValue(); if (value == null) { continue; } data.putBaseProperty(realPrefix + name, value.toString(), false); } return this; }\n\n    ### Response:",
        "ground_truth": "Loads base properties from java Map using provided prefix.\nNull values are ignored.",
        "predict": " For use with delegate types that do not yet have anything to resolve to.\nBlankFields are not for general use..\n\n    "
    },
    {
        "ID": 1651,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (model *Model) WatchForModelConfigChanges() NotifyWatcher { return newEntityWatcher(model.st, settingsC, model.st.docID(modelGlobalKey)) }\n\n    ### Response: // WatchForModelConfigChanges returns a NotifyWatcher waiting for the Model\n// Config to change..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Props loadFromClasspath(final String... patterns) { ClassScanner.create() .registerEntryConsumer(entryData -> { String usedEncoding = JoddCore.encoding; if (StringUtil.endsWithIgnoreCase(entryData.name(), \".properties\")) { usedEncoding = StringPool.ISO_8859_1; } final String encoding = usedEncoding; UncheckedException.runAndWrapException(() -> load(entryData.openInputStream(), encoding)); }) .includeResources(true) .ignoreException(true) .excludeCommonJars() .excludeAllEntries(true) .includeEntries(patterns) .scanDefaultClasspath() .start(); return this; }\n\n    ### Response:",
        "ground_truth": "Loads props and properties from the classpath.",
        "predict": " // WatchForModelConfigChanges returns a NotifyWatcher waiting for the Model\n// Config to change..\n\n    "
    },
    {
        "ID": 1652,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def sum(event_collection, target_property, timeframe=None, timezone=None, interval=None, filters=None, group_by=None, order_by=None, max_age=None, limit=None): \"\"\" Performs a sum query Adds the values of a target property for events that meet the given criteria. :param event_collection: string, the name of the collection to query :param target_property: string, the name of the event property you would like use :param timeframe: string or dict, the timeframe in which the events happened example: \"previous_7_days\" :param timezone: int, the timezone you'd like to use for the timeframe and interval in seconds :param interval: string, the time interval used for measuring data over time example: \"daily\" :param filters: array of dict, contains the filters you'd like to apply to the data example: [{\"property_name\":\"device\", \"operator\":\"eq\", \"property_value\":\"iPhone\"}] :param group_by: string or array of strings, the name(s) of the properties you would like to group you results by. example: \"customer.id\" or [\"browser\",\"operating_system\"] :param order_by: dictionary or list of dictionary objects containing the property_name(s) to order by and the desired direction(s) of sorting. Example: {\"property_name\":\"result\", \"direction\":keen.direction.DESCENDING} May not be used without a group_by specified. :param limit: positive integer limiting the displayed results of a query using order_by :param max_age: an integer, greater than 30 seconds, the maximum 'staleness' you're willing to trade for increased query performance, in seconds \"\"\" _initialize_client_from_environment() return _client.sum(event_collection=event_collection, timeframe=timeframe, timezone=timezone, interval=interval, filters=filters, group_by=group_by, order_by=order_by, target_property=target_property, max_age=max_age, limit=limit)\n\n    ### Response: Performs a sum query\n\n    Adds the values of a target property for events that meet the given criteria.\n\n    :param event_collection: string, the name of the collection to query\n    :param target_property: string, the name of the event property you would like use\n    :param timeframe: string or dict, the timeframe in which the events\n    happened example: \"previous_7_days\"\n    :param timezone: int, the timezone you'd like to use for the timeframe\n    and interval in seconds\n    :param interval: string, the time interval used for measuring data over\n    time example: \"daily\"\n    :param filters: array of dict, contains the filters you'd like to apply to the data\n    example: [{\"property_name\":\"device\", \"operator\":\"eq\", \"property_value\":\"iPhone\"}]\n    :param group_by: string or array of strings, the name(s) of the properties you would\n    like to group you results by.  example: \"customer.id\" or [\"browser\",\"operating_system\"]\n    :param order_by: dictionary or list of dictionary objects containing the property_name(s)\n    to order by and the desired direction(s) of sorting.\n    Example: {\"property_name\":\"result\", \"direction\":keen.direction.DESCENDING}\n    May not be used without a group_by specified.\n    :param limit: positive integer limiting the displayed results of a query using order_by\n    :param max_age: an integer, greater than 30 seconds, the maximum 'staleness' you're\n    willing to trade for increased query performance, in seconds.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String getValueOrDefault(final String key, final String defaultValue) { initialize(); final String value = data.lookupValue(key, activeProfiles); if (value == null) { return defaultValue; } return value; }\n\n    ### Response:",
        "ground_truth": "Returns value of property, using active profiles or default value if not found.",
        "predict": " Performs a sum query\n\n    Adds the values of a target property for events that meet the given criteria.\n\n    :param event_collection: string, the name of the collection to query\n    :param target_property: string, the name of the event property you would like use\n    :param timeframe: string or dict, the timeframe in which the events\n    happened example: \"previous_7_days\"\n    :param timezone: int, the timezone you'd like to use for the timeframe\n    and interval in seconds\n    :param interval: string, the time interval used for measuring data over\n    time example: \"daily\"\n    :param filters: array of dict, contains the filters you'd like to apply to the data\n    example: [{\"property_name\":\"device\", \"operator\":\"eq\", \"property_value\":\"iPhone\"}]\n    :param group_by: string or array of strings, the name(s) of the properties you would\n    like to group you results by.  example: \"customer.id\" or [\"browser\",\"operating_system\"]\n    :param order_by: dictionary or list of dictionary objects containing the property_name(s)\n    to order by and the desired direction(s) of sorting.\n    Example: {\"property_name\":\"result\", \"direction\":keen.direction.DESCENDING}\n    May not be used without a group_by specified.\n    :param limit: positive integer limiting the displayed results of a query using order_by\n    :param max_age: an integer, greater than 30 seconds, the maximum 'staleness' you're\n    willing to trade for increased query performance, in seconds.\n\n    "
    },
    {
        "ID": 1653,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void setFallbackIntervalPattern(String fallbackPattern) { if ( frozen ) { throw new UnsupportedOperationException(\"no modification is allowed after DII is frozen\"); } int firstPatternIndex = fallbackPattern.indexOf(\"{0}\"); int secondPatternIndex = fallbackPattern.indexOf(\"{1}\"); if ( firstPatternIndex == -1 || secondPatternIndex == -1 ) { throw new IllegalArgumentException(\"no pattern {0} or pattern {1} in fallbackPattern\"); } if ( firstPatternIndex > secondPatternIndex ) { fFirstDateInPtnIsLaterDate = true; } fFallbackIntervalPattern = fallbackPattern; }\n\n    ### Response: Re-set the fallback interval pattern.\n\nIn construction, default fallback pattern is set as \"{0} - {1}\".\nAnd constructor taking locale as parameter will set the\nfallback pattern as what defined in the locale resource file.\n\nThis method provides a way for user to replace the fallback pattern.\n\n@param fallbackPattern                 fall-back interval pattern.\n@throws UnsupportedOperationException  if the object is frozen\n@throws IllegalArgumentException       if there is no pattern {0} or\npattern {1} in fallbakckPattern.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void setValue(final String key, final String value, final String profile) { if (profile == null) { data.putBaseProperty(key, value, false); } else { data.putProfileProperty(key, value, profile, false); } initialized = false; }\n\n    ### Response:",
        "ground_truth": "Sets value on some profile.",
        "predict": " Re-set the fallback interval pattern.\n\nIn construction, default fallback pattern is set as \"{0} - {1}\".\nAnd constructor taking locale as parameter will set the\nfallback pattern as what defined in the locale resource file.\n\nThis method provides a way for user to replace the fallback pattern.\n\n@param fallbackPattern                 fall-back interval pattern.\n@throws UnsupportedOperationException  if the object is frozen\n@throws IllegalArgumentException       if there is no pattern {0} or\npattern {1} in fallbakckPattern.\n\n    "
    },
    {
        "ID": 1654,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function bracketDevicePixelRatio() { var i, scale, brackets = [ 1, 1.3, 1.5, 2, 2.6, 3 ], baseRatio = window.devicePixelRatio || 1; for ( i = 0; i < brackets.length; i++ ) { scale = brackets[ i ]; if ( scale >= baseRatio || ( baseRatio - scale ) < 0.1 ) { return scale; } } return brackets[ brackets.length - 1 ]; }\n\n    ### Response: eslint-disable-line func-names Allow user to change style via the ?s=xxx URL parameter Uses \"osm-intl\" as the default style.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void extractProps(final Map target) { initialize(); data.extract(target, activeProfiles, null, null); }\n\n    ### Response:",
        "ground_truth": "Extracts props belonging to active profiles.",
        "predict": " eslint-disable-line func-names Allow user to change style via the ?s=xxx URL parameter Uses \"osm-intl\" as the default style.\n\n    "
    },
    {
        "ID": 1655,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func writeBlockHeader(w io.Writer, pver uint32, bh *BlockHeader) error { sec := uint32(bh.Timestamp.Unix()) return writeElements(w, bh.Version, &bh.PrevBlock, &bh.MerkleRoot, sec, bh.Bits, bh.Nonce) }\n\n    ### Response: // writeBlockHeader writes a bitcoin block header to w.  See Serialize for\n// encoding block headers to be stored to disk, such as in a database, as\n// opposed to encoding for the wire..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void extractProps(final Map target, final String... profiles) { initialize(); data.extract(target, profiles, null, null); }\n\n    ### Response:",
        "ground_truth": "Extract props of given profiles.",
        "predict": " // writeBlockHeader writes a bitcoin block header to w.  See Serialize for\n// encoding block headers to be stored to disk, such as in a database, as\n// opposed to encoding for the wire..\n\n    "
    },
    {
        "ID": 1656,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public List<Integer> get(Integer out_task_id, String stream, List<Object> tuple, Collection<Tuple> anchors, Object root_id) { // in order to improve acker's performance, skip checking // String target_component = // topologyContext.getComponentId(out_task_id); // Map<String, MkGrouper> component_prouping = streamComponentGrouper // .get(stream); // MkGrouper grouping = component_prouping.get(target_component); // if (grouping != null && // !GrouperType.direct.equals(grouping.gettype())) { // throw new IllegalArgumentException( // \"Cannot emitDirect to a task expecting a regular grouping\"); // } if (isDebug(anchors, root_id)) { LOG.info(debugIdStr + stream + \" to \" + out_task_id + \":\" + tuple); } taskStats.send_tuple(stream, 1); List<Integer> out_tasks = new ArrayList<>(); out_tasks.add(out_task_id); return out_tasks; }\n\n    ### Response: direct send tuple to special task.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void extractSubProps(final Map target, final String... wildcardPatterns) { initialize(); data.extract(target, activeProfiles, wildcardPatterns, null); }\n\n    ### Response:",
        "ground_truth": "Extracts subset of properties that matches given wildcards.",
        "predict": " direct send tuple to special task.\n\n    "
    },
    {
        "ID": 1657,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String printUUID(UUID guid) { return guid == null ? null : \"{\" + guid.toString().toUpperCase() + \"}\"; }\n\n    ### Response: Retrieve a UUID in the form required by Primavera PMXML.\n\n@param guid UUID instance\n@return formatted UUID.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SuppressWarnings(\"unchecked\") public Map<String, Object> innerMap(final String prefix) { initialize(); return data.extract(null, activeProfiles, null, prefix); }\n\n    ### Response:",
        "ground_truth": "Returns inner map from the props with given prefix. Keys in returned map\nwill not have the prefix.",
        "predict": " Retrieve a UUID in the form required by Primavera PMXML.\n\n@param guid UUID instance\n@return formatted UUID.\n\n    "
    },
    {
        "ID": 1658,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static function constructFromIntervalPattern($patternString) { $scale = self::resolveScaleFromIntervalPattern($patternString); return new Scale($scale, $root, $direction); }\n\n    ### Response: Scales are sometimes expressed as a stack of intervals ascending.\naccept an interval pattern like \"2122122\" and figure out what scale that is.\n@param  string $structureString\n@return [type]                  [description].\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void addInnerMap(String prefix, final Map<?, ?> map, final String profile) { if (!StringUtil.endsWithChar(prefix, '.')) { prefix += StringPool.DOT; } for (Map.Entry<?, ?> entry : map.entrySet()) { String key = entry.getKey().toString(); key = prefix + key; setValue(key, entry.getValue().toString(), profile); } }\n\n    ### Response:",
        "ground_truth": "Adds child map to the props on given prefix.",
        "predict": " Scales are sometimes expressed as a stack of intervals ascending.\naccept an interval pattern like \"2122122\" and figure out what scale that is.\n@param  string $structureString\n@return [type]                  [description].\n\n    "
    },
    {
        "ID": 1659,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void tryFoldForCondition(Node forCondition) { if (NodeUtil.getPureBooleanValue(forCondition) == TernaryValue.TRUE) { reportChangeToEnclosingScope(forCondition); forCondition.replaceWith(IR.empty()); } }\n\n    ### Response: Remove always true loop conditions..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void resolveActiveProfiles() { if (activeProfilesProp == null) { activeProfiles = null; return; } final PropsEntry pv = data.getBaseProperty(activeProfilesProp); if (pv == null) { // no active profile set as the property, exit return; } final String value = pv.getValue(); if (StringUtil.isBlank(value)) { activeProfiles = null; return; } activeProfiles = StringUtil.splitc(value, ','); StringUtil.trimAll(activeProfiles); }\n\n    ### Response:",
        "ground_truth": "Resolves active profiles from special property.\nThis property can be only a base property!\nIf default active property is not defined, nothing happens.\nOtherwise, it will replace currently active profiles.",
        "predict": " Remove always true loop conditions..\n\n    "
    },
    {
        "ID": 1660,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function get($id, $invalidBehavior = self::EXCEPTION_ON_INVALID_REFERENCE) { if ($this->isSilverStripeServiceRequest($id)) { return $this->getSilverStripeService($id); } else { return parent::get($id, $invalidBehavior); } }\n\n    ### Response: Use SilverStripe's Dependency Injection system if the service is namespaced silverstripe\n\n@param  string $id\n@param  int|void $invalidBehavior\n@return object.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String[] getAllProfiles() { String[] profiles = new String[data.profileProperties.size()]; int index = 0; for (String profileName : data.profileProperties.keySet()) { profiles[index] = profileName; index++; } return profiles; }\n\n    ### Response:",
        "ground_truth": "Returns all profiles names.",
        "predict": " Use SilverStripe's Dependency Injection system if the service is namespaced silverstripe\n\n@param  string $id\n@param  int|void $invalidBehavior\n@return object.\n\n    "
    },
    {
        "ID": 1661,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func Measure(id string, f func()) time.Duration { m := BeginMeasuring(id) f() return m.EndMeasuring() }\n\n    ### Response: // Measure the execution of a function..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String[] getProfilesFor(final String propKeyNameWildcard) { HashSet<String> profiles = new HashSet<>(); profile: for (Map.Entry<String, Map<String, PropsEntry>> entries : data.profileProperties.entrySet()) { String profileName = entries.getKey(); Map<String, PropsEntry> value = entries.getValue(); for (String propKeyName : value.keySet()) { if (Wildcard.equalsOrMatch(propKeyName, propKeyNameWildcard)) { profiles.add(profileName); continue profile; } } } return profiles.toArray(new String[0]); }\n\n    ### Response:",
        "ground_truth": "Returns all the profiles that define certain prop's key name.\nKey name is given as a wildcard, or it can be matched fully.",
        "predict": " // Measure the execution of a function..\n\n    "
    },
    {
        "ID": 1662,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function setDefaultAcrs(array $defaultAcrs = null) { ValidationUtility::ensureNullOrArrayOfString('$defaultAcrs', $defaultAcrs); $this->defaultAcrs = $defaultAcrs; return $this; }\n\n    ### Response: Set the default list of Authentication Context Class References.\n\nThis corresponds to the `default_acr_values` metadata defined in\n[2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata)\nof [OpenID Connect Dynamic Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html).\n\n@param string[] $defaultAcrs\nThe default list of Authentication Context Class References.\n\n@return Client\n`$this` object..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void addPropertyInjectionPoint(final PropertyInjectionPoint pip) { if (properties == null) { properties = new PropertyInjectionPoint[1]; properties[0] = pip; } else { properties = ArraysUtil.append(properties, pip); } }\n\n    ### Response:",
        "ground_truth": "Adds property injection point.",
        "predict": " Set the default list of Authentication Context Class References.\n\nThis corresponds to the `default_acr_values` metadata defined in\n[2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata)\nof [OpenID Connect Dynamic Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html).\n\n@param string[] $defaultAcrs\nThe default list of Authentication Context Class References.\n\n@return Client\n`$this` object..\n\n    "
    },
    {
        "ID": 1663,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function defaultOpts(opts, parentId) { var targets = opts.targets && opts.targets.length ? asArray(opts.targets) : [defaultTarget(parentId)]; return mixin({targets: targets, grep: [/\\.js$/], ungrep: opts.ungrep && opts.ungrep.length ? asArray(opts.ungrep) : defaultUngrep(targets), scope: {}, recurse: true}, opts, true); }\n\n    ### Response: Returns the default options for this module merged\nwith the given options passed to this function.\n\nThe defaults are as follows:\n- grep: any file ending in `.js`\n- ungrep: any path including `node_modules`\n- scope: an empty object\n- recurse: true\n- targets: return value from `defaultTargets()`\n\n@param {Object} opts The options to merge the defaults into.\n@param {String} parentId The path of the requiring module.\n@returns {Object} The merged options.\n@api private.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void addSetInjectionPoint(final SetInjectionPoint sip) { if (sets == null) { sets = new SetInjectionPoint[1]; sets[0] = sip; } else { sets = ArraysUtil.append(sets, sip); } }\n\n    ### Response:",
        "ground_truth": "Adds set injection point.",
        "predict": " Returns the default options for this module merged\nwith the given options passed to this function.\n\nThe defaults are as follows:\n- grep: any file ending in `.js`\n- ungrep: any path including `node_modules`\n- scope: an empty object\n- recurse: true\n- targets: return value from `defaultTargets()`\n\n@param {Object} opts The options to merge the defaults into.\n@param {String} parentId The path of the requiring module.\n@returns {Object} The merged options.\n@api private.\n\n    "
    },
    {
        "ID": 1664,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def validate_instance(instance): \"\"\"Validating if the instance should be logged, or is excluded\"\"\" excludes = settings.AUTOMATED_LOGGING['exclude']['model'] for excluded in excludes: if (excluded in [instance._meta.app_label.lower(), instance.__class__.__name__.lower()] or instance.__module__.lower().startswith(excluded)): return False return True\n\n    ### Response: Validating if the instance should be logged, or is excluded.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void addMethodInjectionPoint(final MethodInjectionPoint mip) { if (methods == null) { methods = new MethodInjectionPoint[1]; methods[0] = mip; } else { methods = ArraysUtil.append(methods, mip); } }\n\n    ### Response:",
        "ground_truth": "Adds method injection point.",
        "predict": " Validating if the instance should be logged, or is excluded.\n\n    "
    },
    {
        "ID": 1665,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function getByIdContinuouslyOrFail($id, array $columns = ['*'], $retries = 10, $delayMs = 100) { $result = $this->getByContinuously('id', $id, $columns, $retries, $delayMs); if (empty($result)) { throw new EntityNotFoundException(sprintf('%s not found continuously by Id with value [%s]', get_class($this->getModel()), $id)); } return $result; }\n\n    ### Response: Retrieve entity by ID. Will retry with a delay until found or throw an exception.\n\nShould only be used in queues, where databases are in a cluster\nand there's a chance it's not always in sync\n\n@author Rasmus Ebbesen \n\n@param  int $id\n@param  array   $columns\n@param  int $retries\n@param  int $delayMs\n@return \\Illuminate\\Database\\Eloquent\\Model\n@throws \\Nodes\\Database\\Exceptions\\EntityNotFoundException.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void addInitMethodPoints(final InitMethodPoint[] methods) { if (initMethods == null) { initMethods = methods; } else { initMethods = ArraysUtil.join(initMethods, methods); } }\n\n    ### Response:",
        "ground_truth": "Adds init methods.",
        "predict": " Retrieve entity by ID. Will retry with a delay until found or throw an exception.\n\nShould only be used in queues, where databases are in a cluster\nand there's a chance it's not always in sync\n\n@author Rasmus Ebbesen \n\n@param  int $id\n@param  array   $columns\n@param  int $retries\n@param  int $delayMs\n@return \\Illuminate\\Database\\Eloquent\\Model\n@throws \\Nodes\\Database\\Exceptions\\EntityNotFoundException.\n\n    "
    },
    {
        "ID": 1666,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def on_top_level_changed(self, top_level): \"\"\"Actions to perform when a plugin is undocked to be moved.\"\"\" if top_level: self.undock_action.setDisabled(True) else: self.undock_action.setDisabled(False)\n\n    ### Response: Actions to perform when a plugin is undocked to be moved..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void addDestroyMethodPoints(final DestroyMethodPoint[] methods) { if (destroyMethods == null) { destroyMethods = methods; } else { destroyMethods = ArraysUtil.join(destroyMethods, methods); } }\n\n    ### Response:",
        "ground_truth": "Adds destroy methods.",
        "predict": " Actions to perform when a plugin is undocked to be moved..\n\n    "
    },
    {
        "ID": 1667,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def update_mock_repo(): \"\"\" Clone and gzip the memote-mock-repo used for CLI and integration tests. The repo is hosted at 'https://github.com/ChristianLieven/memote-mock-repo.git' and maintained separately from \"\"\" target_file = os.path.abspath( join(\"tests\", \"data\", \"memote-mock-repo.tar.gz\") ) temp_dir = mkdtemp(prefix='tmp_mock') previous_wd = os.getcwd() try: LOGGER.info(\"Cloning repository.\") os.chdir(temp_dir) check_output( ['git', 'clone', 'https://github.com/ChristianLieven/memote-mock-repo.git'] ) os.chdir('memote-mock-repo/') LOGGER.info(\"Setting git to ignore filemode changes.\") call( ['git', 'config', 'core.fileMode', 'false'] ) call( ['git', 'config', 'user.email', 'memote@opencobra.com'] ) call( ['git', 'config', 'user.name', 'memote-bot'] ) finally: LOGGER.info(\"Compressing to tarball.\") tar = tarfile.open(target_file, \"w:gz\") tar.add( join(temp_dir, 'memote-mock-repo/'), arcname=\"memote-mock-repo\" ) tar.close() LOGGER.info(\"Success!\") LOGGER.info(\"Removing temporary directory.\") rmtree(temp_dir) LOGGER.info(\"Success! The mock repo has been updated.\") os.chdir(previous_wd)\n\n    ### Response: Clone and gzip the memote-mock-repo used for CLI and integration tests.\n\n    The repo is hosted at\n    'https://github.com/ChristianLieven/memote-mock-repo.git' and maintained\n    separately from.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Class resolveTargetClass(final Class proxy) { final String name = proxy.getName(); if (name.endsWith(ProxettaNames.proxyClassNameSuffix)) { return proxy.getSuperclass(); } if (name.endsWith(ProxettaNames.wrapperClassNameSuffix)) { return getTargetWrapperType(proxy); } return proxy; }\n\n    ### Response:",
        "ground_truth": "Returns target class if proxetta applied on given class.\nIf not, returns given class as result.",
        "predict": " Clone and gzip the memote-mock-repo used for CLI and integration tests.\n\n    The repo is hosted at\n    'https://github.com/ChristianLieven/memote-mock-repo.git' and maintained\n    separately from.\n\n    "
    },
    {
        "ID": 1668,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _getPaddingToSectionOffset(self): \"\"\" Returns the offset to last section header present in the PE file. @rtype: int @return: The offset where the end of the last section header resides in the PE file. \"\"\" return len(str(self.dosHeader) + str(self.dosStub) + str(self.ntHeaders) + str(self.sectionHeaders))\n\n    ### Response: Returns the offset to last section header present in the PE file.\n        \n        @rtype: int\n        @return: The offset where the end of the last section header resides in the PE file..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void injectTargetIntoWrapper(final Object target, final Object wrapper) { injectTargetIntoWrapper(target, wrapper, ProxettaNames.wrapperTargetFieldName); }\n\n    ### Response:",
        "ground_truth": "Injects target instance into proxy using default target field name.\n@see #injectTargetIntoWrapper(Object, Object, String)",
        "predict": " Returns the offset to last section header present in the PE file.\n        \n        @rtype: int\n        @return: The offset where the end of the last section header resides in the PE file..\n\n    "
    },
    {
        "ID": 1669,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def face_angles_sparse(mesh): \"\"\" A sparse matrix representation of the face angles. Returns ---------- sparse: scipy.sparse.coo_matrix with: dtype: float shape: (len(mesh.vertices), len(mesh.faces)) \"\"\" matrix = coo_matrix((mesh.face_angles.flatten(), (mesh.faces_sparse.row, mesh.faces_sparse.col)), mesh.faces_sparse.shape) return matrix\n\n    ### Response: A sparse matrix representation of the face angles.\n\n    Returns\n    ----------\n    sparse: scipy.sparse.coo_matrix with:\n            dtype: float\n            shape: (len(mesh.vertices), len(mesh.faces)).\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Class getTargetWrapperType(final Class wrapperClass) { try { final Field field = wrapperClass.getDeclaredField(ProxettaNames.wrapperTargetFieldName); return field.getType(); } catch (NoSuchFieldException nsfex) { throw new ProxettaException(nsfex); } }\n\n    ### Response:",
        "ground_truth": "Returns wrapper target type.",
        "predict": " A sparse matrix representation of the face angles.\n\n    Returns\n    ----------\n    sparse: scipy.sparse.coo_matrix with:\n            dtype: float\n            shape: (len(mesh.vertices), len(mesh.faces)).\n\n    "
    },
    {
        "ID": 1670,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def get_filtered_feed(self, feed_filter): \"\"\"Get your feed containing only posts filtered by ``feed_filter`` :type feed_filter: FeedFilter :param feed_filter: Must be an instance of either: UnreadFilter, FollowingFilter, or FolderFilter :rtype: dict \"\"\" assert isinstance(feed_filter, (UnreadFilter, FollowingFilter, FolderFilter)) return self._rpc.filter_feed(**feed_filter.to_kwargs())\n\n    ### Response: Get your feed containing only posts filtered by ``feed_filter``\n\n        :type feed_filter: FeedFilter\n        :param feed_filter: Must be an instance of either: UnreadFilter,\n            FollowingFilter, or FolderFilter\n        :rtype: dict.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected FieldDescriptor findField(final String fieldName) { FieldDescriptor fieldDescriptor = classDescriptor.getFieldDescriptor(fieldName, true); if (fieldDescriptor != null) { return fieldDescriptor; } // field descriptor not found in this class // try to locate it in the superclasses Class[] superclasses = classDescriptor.getAllSuperclasses(); for (Class superclass : superclasses) { ClassDescriptor classDescriptor = ClassIntrospector.get().lookup(superclass); fieldDescriptor = classDescriptor.getFieldDescriptor(fieldName, true); if (fieldDescriptor != null) { return fieldDescriptor; } } // nothing found return null; }\n\n    ### Response:",
        "ground_truth": "Locates property field. Field is being searched also in all\nsuperclasses of current class.",
        "predict": " Get your feed containing only posts filtered by ``feed_filter``\n\n        :type feed_filter: FeedFilter\n        :param feed_filter: Must be an instance of either: UnreadFilter,\n            FollowingFilter, or FolderFilter\n        :rtype: dict.\n\n    "
    },
    {
        "ID": 1671,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function retrievePageAction() { $configPath = 'meliscore/datas'; $melisConfig = $this->getServiceLocator()->get('MelisCoreConfig'); $cfg = $melisConfig->getItemPerPlatform($configPath); $pathAppConfigForm = '/meliscore/forms/meliscore_forgot'; $melisMelisCoreConfig = $this->serviceLocator->get('MelisCoreConfig'); $melisLostPass = $this->getServiceLocator()->get('MelisCoreLostPassword'); $appConfigForm = $melisMelisCoreConfig->getItem($pathAppConfigForm); $factory = new \\Zend\\Form\\Factory(); $forgotForm = $factory->createForm($appConfigForm); $translator = $this->getServiceLocator()->get('translator'); $this->getServiceLocator()->get('ViewHelperManager')->get('HeadTitle')->set($translator->translate('tr_meliscore_forgot_page_title')); $view = new ViewModel(); $view->setVariable('meliscore_forgot', $forgotForm); $view->setVariable('formFactory', $factory); $view->setVariable('formConfig', $appConfigForm); $this->layout()->schemes = $this->getSchemes(); return $view; }\n\n    ### Response: Renders to the Lost Password form\n@return \\Zend\\View\\Model\\ViewModel.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Class getType() { if (type == null) { if (fieldDescriptor != null) { type = fieldDescriptor.getRawType(); } else if (readMethodDescriptor != null) { type = getGetter(true).getGetterRawType(); //type = readMethodDescriptor.getGetterRawType(); } else if (writeMethodDescriptor != null) { type = getSetter(true).getSetterRawType(); //type = writeMethodDescriptor.getSetterRawType(); } } return type; }\n\n    ### Response:",
        "ground_truth": "Returns property type. Raw types are detected.",
        "predict": " Renders to the Lost Password form\n@return \\Zend\\View\\Model\\ViewModel.\n\n    "
    },
    {
        "ID": 1672,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (db *DB) LRange(key []byte, start int32, stop int32) ([][]byte, error) { if err := checkKeySize(key); err != nil { return nil, err } var headSeq int32 var llen int32 var err error metaKey := db.lEncodeMetaKey(key) it := db.bucket.NewIterator() defer it.Close() if headSeq, _, llen, err = db.lGetMeta(it, metaKey); err != nil { return nil, err } if start < 0 { start = llen + start } if stop < 0 { stop = llen + stop } if start < 0 { start = 0 } if start > stop || start >= llen { return [][]byte{}, nil } if stop >= llen { stop = llen - 1 } limit := (stop - start) + 1 headSeq += start v := make([][]byte, 0, limit) startKey := db.lEncodeListKey(key, headSeq) rit := store.NewRangeLimitIterator(it, &store.Range{ Min: startKey, Max: nil, Type: store.RangeClose}, &store.Limit{ Offset: 0, Count: int(limit)}) for ; rit.Valid(); rit.Next() { v = append(v, rit.Value()) } return v, nil }\n\n    ### Response: // LRange gets the value of list at range..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Class resolveKeyType(final boolean declared) { Class keyType = null; Getter getter = getGetter(declared); if (getter != null) { keyType = getter.getGetterRawKeyComponentType(); } if (keyType == null) { FieldDescriptor fieldDescriptor = getFieldDescriptor(); if (fieldDescriptor != null) { keyType = fieldDescriptor.getRawKeyComponentType(); } } return keyType; }\n\n    ### Response:",
        "ground_truth": "Resolves key type for given property descriptor.",
        "predict": " // LRange gets the value of list at range..\n\n    "
    },
    {
        "ID": 1673,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def get_term_size(): '''Gets the size of your terminal. May not work everywhere. YMMV.''' rows, columns = os.popen('stty size', 'r').read().split() return int(rows), int(columns)\n\n    ### Response: Gets the size of your terminal. May not work everywhere. YMMV..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Class resolveComponentType(final boolean declared) { Class componentType = null; Getter getter = getGetter(declared); if (getter != null) { componentType = getter.getGetterRawComponentType(); } if (componentType == null) { FieldDescriptor fieldDescriptor = getFieldDescriptor(); if (fieldDescriptor != null) { componentType = fieldDescriptor.getRawComponentType(); } } return componentType; }\n\n    ### Response:",
        "ground_truth": "Resolves component type for given property descriptor.",
        "predict": " Gets the size of your terminal. May not work everywhere. YMMV..\n\n    "
    },
    {
        "ID": 1674,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private int getNumberOfPlaceholderViews() { int numColumns = getNumColumnsCompatible(); int adapterCount = adapter.getEncapsulatedAdapter().getCount(); int lastLineCount = adapterCount % numColumns; return lastLineCount > 0 ? numColumns - lastLineCount : 0; }\n\n    ### Response: Returns the number of placeholder views, which are necessary to complement the items of the\nencapsulated adapter in order to fill up all columns..\n\n@return The number of placeholder views, which are necessary to complement the items of the\nencapsulated adapter in order to fill up all columns, as an {@link Integer} value.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static JsonResult of(final Object object) { final String json = JsonSerializer.create().deep(true).serialize(object); return new JsonResult(json); }\n\n    ### Response:",
        "ground_truth": "Creates JSON result from given object. The object will be serialized to JSON.",
        "predict": " Returns the number of placeholder views, which are necessary to complement the items of the\nencapsulated adapter in order to fill up all columns..\n\n@return The number of placeholder views, which are necessary to complement the items of the\nencapsulated adapter in order to fill up all columns, as an {@link Integer} value.\n\n    "
    },
    {
        "ID": 1675,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function template(str, data, options) { var data = data || {}; var options = options || {}; var keys = Array.isArray(data) ? Array.apply(null, { length: data.length }).map(Number.call, Number) : Object.keys(data); var len = keys.length; if (!len) { return str; } var before = options.before !== undefined ? options.before : '${'; var after = options.after !== undefined ? options.after : '}'; var escape = options.escape !== undefined ? options.escape : '\\\\'; var clean = options.clean !== undefined ? options.clean : false; cache[escape] = cache[escape] || escapeRegExp(escape); cache[before] = cache[before] || escapeRegExp(before); cache[after] = cache[after] || escapeRegExp(after); var begin = escape ? '(' + cache[escape] + ')?' + cache[before] : cache[before]; var end = cache[after]; for (var i = 0; i < len; i++) { str = str.replace(new RegExp(begin + String(keys[i]) + end, 'g'), function(match, behind) { return behind ? match : String(data[keys[i]]) }); } if (escape) { str = str.replace(new RegExp(escapeRegExp(escape) + escapeRegExp(before), 'g'), before); } return clean ? template.clean(str, options) : str; }\n\n    ### Response: Replaces variable placeholders inside a string with any given data. Each key\nin `data` corresponds to a variable placeholder name in `str`.\n\nUsage:\n{{{\ntemplate('My name is ${name} and I am ${age} years old.', { name: 'Bob', age: '65' });\n}}}\n\n@param  String str     A string containing variable place-holders.\n@param  Object data    A key, value array where each key stands for a place-holder variable\nname to be replaced with value.\n@param  Object options Available options are:\n- `'before'`: The character or string in front of the name of the variable\nplace-holder (defaults to `'${'`).\n- `'after'`: The character or string after the name of the variable\nplace-holder (defaults to `}`).\n- `'escape'`: The character or string used to escape the before character or string\n(defaults to `'\\\\'`).\n- `'clean'`: A boolean or array with instructions for cleaning.\n@return String.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static JsonResult of(final Exception exception) { final HashMap<String, Object> errorMap = new HashMap<>(); errorMap.put(\"message\", ExceptionUtil.message(exception)); errorMap.put(\"error\", exception.getClass().getName()); errorMap.put(\"cause\", exception.getCause() != null ? exception.getCause().getClass().getName() : null); final ArrayList<String> details = new ArrayList<>(); final StackTraceElement[] ste = ExceptionUtil.getStackTrace(exception, null, null); for (StackTraceElement stackTraceElement : ste) { details.add(stackTraceElement.toString()); } errorMap.put(\"details\", details); final String json = JsonSerializer.create().deep(true).serialize(errorMap); return new JsonResult(json).status(HttpStatus.error500().internalError()); }\n\n    ### Response:",
        "ground_truth": "Creates a JSON response from an exception. Response body will have information about the\nexception and response status will be set to 500.",
        "predict": " Replaces variable placeholders inside a string with any given data. Each key\nin `data` corresponds to a variable placeholder name in `str`.\n\nUsage:\n{{{\ntemplate('My name is ${name} and I am ${age} years old.', { name: 'Bob', age: '65' });\n}}}\n\n@param  String str     A string containing variable place-holders.\n@param  Object data    A key, value array where each key stands for a place-holder variable\nname to be replaced with value.\n@param  Object options Available options are:\n- `'before'`: The character or string in front of the name of the variable\nplace-holder (defaults to `'${'`).\n- `'after'`: The character or string after the name of the variable\nplace-holder (defaults to `}`).\n- `'escape'`: The character or string used to escape the before character or string\n(defaults to `'\\\\'`).\n- `'clean'`: A boolean or array with instructions for cleaning.\n@return String.\n\n    "
    },
    {
        "ID": 1676,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def safe_reload(modname: types.ModuleType) -> Union[None, str]: \"\"\"Catch and log any errors that arise from reimporting a module, but do not die. :return: None when import was successful. String is the first line of the error message \"\"\" try: importlib.reload(modname) return None except Exception as e: logging.error(\"Failed to reimport module: %s\", modname) msg, _ = backtrace.output_traceback(e) return msg\n\n    ### Response: Catch and log any errors that arise from reimporting a module, but do not die.\n\n    :return: None when import was successful. String is the first line of the error message.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected String resolveHttpMethodFromMethodName(final String methodName) { int i = 0; while (i < methodName.length()) { if (CharUtil.isUppercaseAlpha(methodName.charAt(i))) { break; } i++; } final String name = methodName.substring(0, i).toUpperCase(); for (final HttpMethod httpMethod : HttpMethod.values()) { if (httpMethod.equalsName(name)) { return httpMethod.name(); } } return null; }\n\n    ### Response:",
        "ground_truth": "Resolves HTTP method name from method name.\nIf method name or first camel-case word of a method equals to\na HTTP method, it will be used as that HTTP methods.",
        "predict": " Catch and log any errors that arise from reimporting a module, but do not die.\n\n    :return: None when import was successful. String is the first line of the error message.\n\n    "
    },
    {
        "ID": 1677,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (n node) HumanType() string { switch k := n.Kind(); k { case reflect.Slice: c := n.Type().Elem() return \"[]\" + node{Value: reflect.New(c).Elem()}.HumanType() default: return k.String() } }\n\n    ### Response: // HumanType returns the human-consumable string representation of the type of\n// the node..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static boolean match(final CharSequence string, final CharSequence pattern, int sNdx, int pNdx) { int pLen = pattern.length(); if (pLen == 1) { if (pattern.charAt(0) == '*') { // speed-up return true; } } int sLen = string.length(); boolean nextIsNotWildcard = false; while (true) { // check if end of string and/or pattern occurred if ((sNdx >= sLen)) { // end of string still may have pending '*' in pattern while ((pNdx < pLen) && (pattern.charAt(pNdx) == '*')) { pNdx++; } return pNdx >= pLen; } if (pNdx >= pLen) { // end of pattern, but not end of the string return false; } char p = pattern.charAt(pNdx); // pattern char // perform logic if (!nextIsNotWildcard) { if (p == '\\\\') { pNdx++; nextIsNotWildcard = true; continue; } if (p == '?') { sNdx++; pNdx++; continue; } if (p == '*') { char pNext = 0; // next pattern char if (pNdx + 1 < pLen) { pNext = pattern.charAt(pNdx + 1); } if (pNext == '*') { // double '*' have the same effect as one '*' pNdx++; continue; } int i; pNdx++; // find recursively if there is any substring from the end of the // line that matches the rest of the pattern !!! for (i = string.length(); i >= sNdx; i--) { if (match(string, pattern, i, pNdx)) { return true; } } return false; } } else { nextIsNotWildcard = false; } // check if pattern char and string char are equals if (p != string.charAt(sNdx)) { return false; } // everything matches for now, continue sNdx++; pNdx++; } }\n\n    ### Response:",
        "ground_truth": "Internal matching recursive function.",
        "predict": " // HumanType returns the human-consumable string representation of the type of\n// the node..\n\n    "
    },
    {
        "ID": 1678,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function getLocalizationState($document) { if ($document instanceof ShadowLocaleBehavior) { if (true === $document->isShadowLocaleEnabled()) { return LocalizationState::SHADOW; } } $originalLocale = $document->getOriginalLocale(); $currentLocale = $document->getLocale(); if ($originalLocale === $currentLocale) { return LocalizationState::LOCALIZED; } return LocalizationState::GHOST; }\n\n    ### Response: Return the localization state of the node.\n\n@param object $document\n\n@return string.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected Loading resolveLoading(final boolean parentFirstStrategy, final String className) { boolean withParent = true; boolean withLoader = true; if (parentFirstStrategy) { if (isMatchingRules(className, loaderOnlyRules)) { withParent = false; } else if (isMatchingRules(className, parentOnlyRules)) { withLoader = false; } } else { if (isMatchingRules(className, parentOnlyRules)) { withLoader = false; } else if (isMatchingRules(className, loaderOnlyRules)) { withParent = false; } } return new Loading(withParent, withLoader); }\n\n    ### Response:",
        "ground_truth": "Resolves loading rules.",
        "predict": " Return the localization state of the node.\n\n@param object $document\n\n@return string.\n\n    "
    },
    {
        "ID": 1679,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function validateDescriptionCategory() { $fields = array( 'description_1' => $this->translation->text('First description'), 'description_2' => $this->translation->text('Second description') ); $errors = 0; foreach ($fields as $field => $label) { $value = $this->getSubmitted($field); if (isset($value) && mb_strlen($value) > 65535) { $errors++; $this->setErrorLengthRange($field, $label, 0, 65535); } } return empty($errors); }\n\n    ### Response: Validates first and second description\n@return boolean.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected Loading resolveResourceLoading(final boolean parentFirstStrategy, String resourceName) { if (matchResourcesAsPackages) { resourceName = StringUtil.replaceChar(resourceName, '/', '.'); } return resolveLoading(parentFirstStrategy, resourceName); }\n\n    ### Response:",
        "ground_truth": "Resolves resources.",
        "predict": " Validates first and second description\n@return boolean.\n\n    "
    },
    {
        "ID": 1680,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private function addOption($string, $value) { foreach ($this->optionList as $option) { if ($option->matches($string)) { if ($option->mode() == Getopt::IS_FLAG) { if (is_null($value)) { $value = isset($this->options[$string]) ? !$this->options[$string]->getValue() : ($option->getArgument()->hasDefaultValue() ? !$option->getArgument()->getDefaultValue() : true); } } else { if ($option->mode() == Getopt::REQUIRED_ARGUMENT && !mb_strlen($value)) { throw new \\UnexpectedValueException(\"Option '$string' must have a value\"); } if ($option->getArgument()->hasValidation()) { if ((mb_strlen($value) > 0) && !$option->getArgument()->validates($value)) { throw new \\UnexpectedValueException(\"Option '$string' has an invalid value\"); } } // for no-argument options, check if they are duplicate if ($option->mode() == Getopt::NO_ARGUMENT) { $oldValue = isset($this->options[$string]) ? $this->options[$string]->getValue() : null; $value = is_null($oldValue) ? 1 : $oldValue + 1; } // for optional-argument options, set value to 1 if none was given $value = (mb_strlen($value) > 0) ? $value : 1; } // add both long and short names (if they exist) to the option array to facilitate lookup if ($option->short()) { $this->options[$option->short()] = new Value($value); } if ($option->long()) { $this->options[$option->long()] = new Value($value); } return; } } throw new \\UnexpectedValueException(\"Option '$string' is unknown\"); }\n\n    ### Response: Add an option to the list of known options.\n\n@param string $string the option's name\n@param string $value  the option's value (or null)\n\n@throws \\UnexpectedValueException.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override protected synchronized Class<?> loadClass(final String className, final boolean resolve) throws ClassNotFoundException { // check first if the class has already been loaded Class<?> c = findLoadedClass(className); if (c != null) { if (resolve) { resolveClass(c); } return c; } // class not loaded yet Loading loading = resolveLoading(parentFirst, className); if (parentFirst) { // PARENT FIRST if (loading.withParent) { try { c = parentClassLoader.loadClass(className); } catch (ClassNotFoundException ignore) { } } if (c == null) { if (loading.withLoader) { c = this.findClass(className); } else { throw new ClassNotFoundException(\"Class not found: \" + className); } } } else { // THIS FIRST if (loading.withLoader) { try { c = this.findClass(className); } catch (ClassNotFoundException ignore) { } } if (c == null) { if (loading.withParent) { c = parentClassLoader.loadClass(className); } else { throw new ClassNotFoundException(\"Class not found: \" + className); } } } if (resolve) { resolveClass(c); } return c; }\n\n    ### Response:",
        "ground_truth": "Loads class using parent-first or parent-last strategy.",
        "predict": " Add an option to the list of known options.\n\n@param string $string the option's name\n@param string $value  the option's value (or null)\n\n@throws \\UnexpectedValueException.\n\n    "
    },
    {
        "ID": 1681,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function (data) { this.on(\"change:parent\", this._onParent); // copy the data to this object. Note this shaves a TON // of time off initializing any view, especially list items if we // use this method over @setProperties data if (false) { for(var key in data) { this[key] = data[key]; } } // necessary to properly dispose this view so it can be recycled if (this.parent) this._onParent(this.parent); }\n\n    ### Response: Called when the view is instantiated\n@method initialize\n@param {Object} options options passed when creating the view.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public URL getResource(final String resourceName) { URL url = null; Loading loading = resolveResourceLoading(parentFirst, resourceName); if (parentFirst) { // PARENT FIRST if (loading.withParent) { url = parentClassLoader.getResource(resourceName); } if (url == null) { if (loading.withLoader) { url = this.findResource(resourceName); } } } else { // THIS FIRST if (loading.withLoader) { url = this.findResource(resourceName); } if (url == null) { if (loading.withParent) { url = parentClassLoader.getResource(resourceName); } } } return url; }\n\n    ### Response:",
        "ground_truth": "Returns a resource using parent-first or parent-last strategy.",
        "predict": " Called when the view is instantiated\n@method initialize\n@param {Object} options options passed when creating the view.\n\n    "
    },
    {
        "ID": 1682,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function init (file) { if (!postcssify.entry) { if (dest) { log.info('output: %s', dest) process.on('beforeExit', () => { if (!postcssify.complete) { postcssify.complete = true bundle() } }) postcssify.entry = file } else { return } } return true }\n\n    ### Response: init => returns false if no dest is defined.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void waitFor() { try { synchronized (lock) { if (!end) { lock.wait(); } } } catch (InterruptedException ignore) { Thread.currentThread().interrupt(); } }\n\n    ### Response:",
        "ground_truth": "Waits for gobbler to end.",
        "predict": " init => returns false if no dest is defined.\n\n    "
    },
    {
        "ID": 1683,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function findXCodeProjectIn (projectPath) { // 'Searching for Xcode project in ' + projectPath); var xcodeProjFiles = shell.ls(projectPath).filter(function (name) { return path.extname(name) === '.xcodeproj'; }); if (xcodeProjFiles.length === 0) { return Q.reject('No Xcode project found in ' + projectPath); } if (xcodeProjFiles.length > 1) { events.emit('warn', 'Found multiple .xcodeproj directories in \\n' + projectPath + '\\nUsing first one'); } var projectName = path.basename(xcodeProjFiles[0], '.xcodeproj'); return Q.resolve(projectName); }\n\n    ### Response: Searches for first XCode project in specified folder\n@param  {String} projectPath Path where to search project\n@return {Promise}            Promise either fulfilled with project name or rejected.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Class<? extends Annotation> detectAnnotationType(final Annotation[] annotations) { for (final Annotation annotation : annotations) { if (annotation instanceof In) { return annotation.annotationType(); } else if (annotation instanceof Out) { return annotation.annotationType(); } } return null; }\n\n    ### Response:",
        "ground_truth": "Scans annotation and returns type of Madvoc annotations.",
        "predict": " Searches for first XCode project in specified folder\n@param  {String} projectPath Path where to search project\n@return {Promise}            Promise either fulfilled with project name or rejected.\n\n    "
    },
    {
        "ID": 1684,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def versioned_script? return chunks.size == 1 && chunks[0].pushdata? && chunks[0].canonical? && chunks[0].pushdata.bytesize > 2 end\n\n    ### Response: Returns true if this is an output script wrapped in a versioned pushdata for segwit softfork..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected InjectionPoint buildInjectionPoint( final String annotationValue, final String propertyName, final Class propertyType, final Class<? extends MadvocScope> scope) { final String value = annotationValue.trim(); final String name, targetName; if (StringUtil.isNotBlank(value)) { name = value; targetName = propertyName; } else { name = propertyName; targetName = null; } return new InjectionPoint(propertyType, name, targetName, scopeResolver.defaultOrScopeType(scope)); }\n\n    ### Response:",
        "ground_truth": "Builds injection point.",
        "predict": " Returns true if this is an output script wrapped in a versioned pushdata for segwit softfork..\n\n    "
    },
    {
        "ID": 1685,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _ReadSequenceDataTypeDefinition( self, definitions_registry, definition_values, definition_name, is_member=False): \"\"\"Reads a sequence data type definition. Args: definitions_registry (DataTypeDefinitionsRegistry): data type definitions registry. definition_values (dict[str, object]): definition values. definition_name (str): name of the definition. is_member (Optional[bool]): True if the data type definition is a member data type definition. Returns: SequenceDefinition: sequence data type definition. Raises: DefinitionReaderError: if the definitions values are missing or if the format is incorrect. \"\"\" if is_member: supported_definition_values = ( self._SUPPORTED_DEFINITION_VALUES_ELEMENTS_MEMBER_DATA_TYPE) else: supported_definition_values = ( self._SUPPORTED_DEFINITION_VALUES_ELEMENTS_DATA_TYPE) return self._ReadElementSequenceDataTypeDefinition( definitions_registry, definition_values, data_types.SequenceDefinition, definition_name, supported_definition_values)\n\n    ### Response: Reads a sequence data type definition.\n\n    Args:\n      definitions_registry (DataTypeDefinitionsRegistry): data type definitions\n          registry.\n      definition_values (dict[str, object]): definition values.\n      definition_name (str): name of the definition.\n      is_member (Optional[bool]): True if the data type definition is a member\n          data type definition.\n\n    Returns:\n      SequenceDefinition: sequence data type definition.\n\n    Raises:\n      DefinitionReaderError: if the definitions values are missing or if\n          the format is incorrect..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void visit() { ClassDescriptor classDescriptor = ClassIntrospector.get().lookup(type); if (classMetadataName != null) { // process first 'meta' fields 'class' onProperty(classMetadataName, null, false); } PropertyDescriptor[] propertyDescriptors = classDescriptor.getAllPropertyDescriptors(); for (PropertyDescriptor propertyDescriptor : propertyDescriptors) { Getter getter = propertyDescriptor.getGetter(declared); if (getter != null) { String propertyName = propertyDescriptor.getName(); boolean isTransient = false; // check for transient flag FieldDescriptor fieldDescriptor = propertyDescriptor.getFieldDescriptor(); if (fieldDescriptor != null) { isTransient = Modifier.isTransient(fieldDescriptor.getField().getModifiers()); } onProperty(propertyName, propertyDescriptor, isTransient); } } }\n\n    ### Response:",
        "ground_truth": "Visits a type.",
        "predict": " Reads a sequence data type definition.\n\n    Args:\n      definitions_registry (DataTypeDefinitionsRegistry): data type definitions\n          registry.\n      definition_values (dict[str, object]): definition values.\n      definition_name (str): name of the definition.\n      is_member (Optional[bool]): True if the data type definition is a member\n          data type definition.\n\n    Returns:\n      SequenceDefinition: sequence data type definition.\n\n    Raises:\n      DefinitionReaderError: if the definitions values are missing or if\n          the format is incorrect..\n\n    "
    },
    {
        "ID": 1686,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (t *TarFile) Create(name string) error { t.configureName(name) file, err := os.Create(name) if err != nil { return err } if t.Compressed { t.GzWriter = gzip.NewWriter(file) t.Writer = tar.NewWriter(t.GzWriter) } else { t.Writer = tar.NewWriter(file) } t.out = file return nil }\n\n    ### Response: // Create new Tar file.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static URL[] of(ClassLoader classLoader, Class clazz) { if (clazz == null) { clazz = ClassPathURLs.class; } if (classLoader == null) { classLoader = clazz.getClassLoader(); } final Set<URL> urls = new LinkedHashSet<>(); while (classLoader != null) { if (classLoader instanceof URLClassLoader) { final URLClassLoader urlClassLoader = (URLClassLoader) classLoader; return urlClassLoader.getURLs(); } final URL url = classModuleUrl(classLoader, clazz); if (url != null) { urls.add(url); } classLoader = classLoader.getParent(); } return urls.toArray(new URL[0]); }\n\n    ### Response:",
        "ground_truth": "Returns urls for the classloader\n\n@param classLoader classloader in which to find urls\n@return list of urls or {@code null} if not found",
        "predict": " // Create new Tar file.\n\n    "
    },
    {
        "ID": 1687,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _vis_calibrate(data, chn, calib_type, pre_launch_coeffs=False, calib_coeffs=None, mask=False): \"\"\"Visible channel calibration only. *calib_type* in count, reflectance, radiance \"\"\" # Calibration count to albedo, the calibration is performed separately for # two value ranges. if calib_type not in ['counts', 'radiance', 'reflectance']: raise ValueError('Calibration ' + calib_type + ' unknown!') arr = data[\"hrpt\"][:, :, chn] mask |= arr == 0 channel = arr.astype(np.float) if calib_type == 'counts': return channel if calib_type == 'radiance': logger.info(\"Radiances are not yet supported for \" + \"the VIS/NIR channels!\") if pre_launch_coeffs: coeff_idx = 2 else: # check that coeffs are valid if np.all(data[\"calvis\"][:, chn, 0, 4] == 0): logger.info( \"No valid operational coefficients, fall back to pre-launch\") coeff_idx = 2 else: coeff_idx = 0 intersection = data[\"calvis\"][:, chn, coeff_idx, 4] if calib_coeffs is not None: logger.info(\"Updating from external calibration coefficients.\") # intersection = np.expand_dims slope1 = np.expand_dims(calib_coeffs[0], 1) intercept1 = np.expand_dims(calib_coeffs[1], 1) slope2 = np.expand_dims(calib_coeffs[2], 1) intercept2 = np.expand_dims(calib_coeffs[3], 1) else: slope1 = np.expand_dims(data[\"calvis\"][:, chn, coeff_idx, 0] * 1e-10, 1) intercept1 = np.expand_dims(data[\"calvis\"][:, chn, coeff_idx, 1] * 1e-7, 1) slope2 = np.expand_dims(data[\"calvis\"][:, chn, coeff_idx, 2] * 1e-10, 1) intercept2 = np.expand_dims(data[\"calvis\"][:, chn, coeff_idx, 3] * 1e-7, 1) if chn == 2: slope2[slope2 < 0] += 0.4294967296 mask1 = channel <= np.expand_dims(intersection, 1) mask2 = channel > np.expand_dims(intersection, 1) channel[mask1] = (channel * slope1 + intercept1)[mask1] channel[mask2] = (channel * slope2 + intercept2)[mask2] channel = channel.clip(min=0) return np.where(mask, np.nan, channel)\n\n    ### Response: Visible channel calibration only.\n\n    *calib_type* in count, reflectance, radiance.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void setBean(final Object bean) { this.bean = bean; this.cd = (bean == null ? null : introspector.lookup(bean.getClass())); this.first = false; this.updateProperty = true; }\n\n    ### Response:",
        "ground_truth": "Sets new bean instance.",
        "predict": " Visible channel calibration only.\n\n    *calib_type* in count, reflectance, radiance.\n\n    "
    },
    {
        "ID": 1688,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _checksum(cls, line): \"\"\"Compute the checksum of a full line Args: line (str): Line to compute the checksum from Return: int: Checksum (modulo 10) \"\"\" tr_table = str.maketrans({c: None for c in ascii_uppercase + \"+ .\"}) no_letters = line[:68].translate(tr_table).replace(\"-\", \"1\") return sum([int(l) for l in no_letters]) % 10\n\n    ### Response: Compute the checksum of a full line\n\n        Args:\n            line (str): Line to compute the checksum from\n        Return:\n            int: Checksum (modulo 10).\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void updateBean(final Object bean) { this.setBean(bean); if (this.cd != null && this.cd.isSupplier()) { final Object newBean = ((Supplier)this.bean).get(); setBean(newBean); } }\n\n    ### Response:",
        "ground_truth": "Updates the bean. Detects special case of suppliers.",
        "predict": " Compute the checksum of a full line\n\n        Args:\n            line (str): Line to compute the checksum from\n        Return:\n            int: Checksum (modulo 10).\n\n    "
    },
    {
        "ID": 1689,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function getRelatedDocumentsGridField() { $gridField = GridField::create( 'RelatedDocuments', _t('DMSDocument.RELATEDDOCUMENTS', 'Related Documents'), $this->RelatedDocuments(), new GridFieldConfig_RelationEditor ); $gridFieldConfig = $gridField->getConfig(); $gridFieldConfig->removeComponentsByType('GridFieldEditButton'); $gridFieldConfig->addComponent(new DMSGridFieldEditButton(), 'GridFieldDeleteAction'); $gridField->getConfig()->removeComponentsByType('GridFieldAddNewButton'); // Move the autocompleter to the left $gridField->getConfig()->removeComponentsByType('GridFieldAddExistingAutocompleter'); $gridField->getConfig()->addComponent( $addExisting = new GridFieldAddExistingAutocompleter('buttons-before-left') ); // Ensure that current document doesn't get returned in the autocompleter $addExisting->setSearchList($this->getRelatedDocumentsForAutocompleter()); // Restrict search fields to specific fields only $addExisting->setSearchFields(array('Title:PartialMatch', 'Filename:PartialMatch')); $addExisting->setResultsFormat('$Filename'); $this->extend('updateRelatedDocumentsGridField', $gridField); return $gridField; }\n\n    ### Response: Get a GridField for managing related documents\n\n@return GridField.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void loadPropertyDescriptor() { if (updateProperty) { if (cd == null) { propertyDescriptor = null; } else { propertyDescriptor = cd.getPropertyDescriptor(name, true); } updateProperty = false; } }\n\n    ### Response:",
        "ground_truth": "Loads property descriptor, if property was updated.",
        "predict": " Get a GridField for managing related documents\n\n@return GridField.\n\n    "
    },
    {
        "ID": 1690,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function indent(str, prefix) { prefix = prefix || ' '; var lines = str.split(\"\\n\"); lines.forEach(function(line, i) { lines[i] = prefix + line; }); return lines.join(\"\\n\"); }\n\n    ### Response: Indent a block of text..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Getter getGetter(final boolean declared) { loadPropertyDescriptor(); return propertyDescriptor != null ? propertyDescriptor.getGetter(declared) : null; }\n\n    ### Response:",
        "ground_truth": "Returns getter.",
        "predict": " Indent a block of text..\n\n    "
    },
    {
        "ID": 1691,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (l *WAL) LastWriteTime() time.Time { l.mu.RLock() defer l.mu.RUnlock() return l.lastWriteTime }\n\n    ### Response: // LastWriteTime is the last time anything was written to the WAL..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Setter getSetter(final boolean declared) { loadPropertyDescriptor(); return propertyDescriptor != null ? propertyDescriptor.getSetter(declared) : null; }\n\n    ### Response:",
        "ground_truth": "Returns setter.",
        "predict": " // LastWriteTime is the last time anything was written to the WAL..\n\n    "
    },
    {
        "ID": 1692,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def max_date(self, symbol): \"\"\" Return the maximum datetime stored for a particular symbol Parameters ---------- symbol : `str` symbol name for the item \"\"\" res = self._collection.find_one({SYMBOL: symbol}, projection={ID: 0, END: 1}, sort=[(START, pymongo.DESCENDING)]) if res is None: raise NoDataFoundException(\"No Data found for {}\".format(symbol)) return utc_dt_to_local_dt(res[END])\n\n    ### Response: Return the maximum datetime stored for a particular symbol\n\n        Parameters\n        ----------\n        symbol : `str`\n            symbol name for the item.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public DbOom connect() { connectionProvider.init(); final DbDetector dbDetector = new DbDetector(); dbDetector.detectDatabaseAndConfigureDbOom(connectionProvider, dbOomConfig); return this; }\n\n    ### Response:",
        "ground_truth": "Initializes the DbOom by connecting to the database. Database will be detected\nand DbOom will be configured to match it.",
        "predict": " Return the maximum datetime stored for a particular symbol\n\n        Parameters\n        ----------\n        symbol : `str`\n            symbol name for the item.\n\n    "
    },
    {
        "ID": 1693,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def add_entry(self, path_object): \"\"\"Adds a child FakeFile to this directory. Args: path_object: FakeFile instance to add as a child of this directory. Raises: OSError: if the directory has no write permission (Posix only) OSError: if the file or directory to be added already exists \"\"\" if (not is_root() and not self.st_mode & PERM_WRITE and not self.filesystem.is_windows_fs): exception = IOError if IS_PY2 else OSError raise exception(errno.EACCES, 'Permission Denied', self.path) if path_object.name in self.contents: self.filesystem.raise_os_error(errno.EEXIST, self.path) self.contents[path_object.name] = path_object path_object.parent_dir = self self.st_nlink += 1 path_object.st_nlink += 1 path_object.st_dev = self.st_dev if path_object.st_nlink == 1: self.filesystem.change_disk_usage( path_object.size, path_object.name, self.st_dev)\n\n    ### Response: Adds a child FakeFile to this directory.\n\n        Args:\n            path_object: FakeFile instance to add as a child of this directory.\n\n        Raises:\n            OSError: if the directory has no write permission (Posix only)\n            OSError: if the file or directory to be added already exists.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void add(final Iterator<T> iterator) { if (allIterators.contains(iterator)) { throw new IllegalArgumentException(\"Duplicate iterator\"); } allIterators.add(iterator); }\n\n    ### Response:",
        "ground_truth": "Adds an iterator to this composite.",
        "predict": " Adds a child FakeFile to this directory.\n\n        Args:\n            path_object: FakeFile instance to add as a child of this directory.\n\n        Raises:\n            OSError: if the directory has no write permission (Posix only)\n            OSError: if the file or directory to be added already exists.\n\n    "
    },
    {
        "ID": 1694,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private int getNearestBondtoAGivenAtom(IAtomContainer mol, IAtom atom, IBond bond) { int nearestBond = 0; double[] values; double distance = 0; IAtom atom0 = bond.getBegin(); List<IBond> bondsAtLeft = mol.getConnectedBondsList(atom0); int partial; for (int i = 0; i < bondsAtLeft.size(); i++) { IBond curBond = bondsAtLeft.get(i); values = calculateDistanceBetweenAtomAndBond(atom, curBond); partial = mol.indexOf(curBond); if (i == 0) { nearestBond = mol.indexOf(curBond); distance = values[0]; } else { if (values[0] < distance) { nearestBond = partial; } } } return nearestBond; }\n\n    ### Response: this method returns a bond bonded to this double bond.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void printLogo() { System.out.println(Chalk256.chalk().yellow().on(Jodd.JODD)); }\n\n    ### Response:",
        "ground_truth": "Prints a logo.",
        "predict": " this method returns a bond bonded to this double bond.\n\n    "
    },
    {
        "ID": 1695,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function addFileRule($attribute, $size, $mimes, $count = 1, $isRequired = false) { if ($this->has($attribute) && is_string($this->$attribute)) { $this->rules[$attribute] = \"elfinder_max:{$size}|elfinder:{$mimes}\"; } else if ($this->file($attribute) && is_array($this->$attribute)){ $this->rules[$attribute] = \"array|max:{$count}\"; foreach($this->file($attribute) as $key => $file) { if(array_search($key, ['x','y','width','height']) !== false) { continue; } $this->rules[$attribute . '.' . $key] = \"max:{$size}|image|mimes:{$mimes}\"; if ($isRequired) { $this->rules[$attribute . '.' . $key] = \"required|{$this->rules[$attribute . '.' . $key]}\"; } } } else if ($this->has($attribute) && is_array($this->$attribute)) { $this->rules[$attribute] = \"array|max:{$count}\"; foreach($this->get($attribute) as $key => $file) { if(array_search($key, ['x','y','width','height']) !== false) { continue; } $this->rules[$attribute . '.' . $key] = \"elfinder_max:{$size}|elfinder:{$mimes}\"; if ($isRequired) { $this->rules[$attribute . '.' . $key] = \"required|{$this->rules[$attribute . '.' . $key]}\"; } } } else if ($this->file($attribute)) { $this->rules[$attribute] = \"max:{$size}|image|mimes:{$mimes}\"; } if ($isRequired) { $this->rules[$attribute] = \"required|{$this->rules[$attribute]}\"; } }\n\n    ### Response: add file rule to rules\n\n@param string $attribute\n@param string $size\n@param string $mimes\n@param integer $count\n@param boolean $isRequired\n@return void.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void stop() { joyProps.stop(); try { joyDb.stop(); joyPetite.stop(); } catch (Exception ignore) { } if (log != null) { log.info(\"Joy is down. Bye, bye!\"); } }\n\n    ### Response:",
        "ground_truth": "Stops the Joy.",
        "predict": " add file rule to rules\n\n@param string $attribute\n@param string $size\n@param string $mimes\n@param integer $count\n@param boolean $isRequired\n@return void.\n\n    "
    },
    {
        "ID": 1696,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function getTimezones() { $country = locale_get_region($this->getLanguage()); $timezones = timezone_identifiers_list(\\DateTimeZone::PER_COUNTRY, $country); return $timezones; }\n\n    ### Response: Get a list of timezones acceptable by the client\n\n@return array|false.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected Socket createSocket(final String host, final int port, final int connectionTimeout) throws IOException { final SocketFactory socketFactory = getSocketFactory(proxy, false, false, connectionTimeout); if (connectionTimeout < 0) { return socketFactory.createSocket(host, port); } else { // creates unconnected socket Socket socket = socketFactory.createSocket(); socket.connect(new InetSocketAddress(host, port), connectionTimeout); return socket; } }\n\n    ### Response:",
        "ground_truth": "Creates a socket using socket factory.",
        "predict": " Get a list of timezones acceptable by the client\n\n@return array|false.\n\n    "
    },
    {
        "ID": 1697,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function remove_counter($key, $super_column, $column=null, $consistency_level=null) { $cp = new ColumnPath(); $packed_key = $this->pack_key($key); $cp->column_family = $this->column_family; $cp->super_column = $this->pack_name($super_column, true); if ($column !== null) $cp->column = $this->pack_name($column); $this->pool->call(\"remove_counter\", $packed_key, $cp, $this->wcl($consistency_level)); }\n\n    ### Response: Remove a counter at the specified location.\n\nNote that counters have limited support for deletes: if you remove a\ncounter, you must wait to issue any following update until the delete\nhas reached all the nodes and all of them have been fully compacted.\n\nAvailable in Cassandra 0.8.0 and later.\n\n@param string $key the key for the row\n@param mixed $super_column the super column the counter is in\n@param mixed $column the column name of the counter; if left as null,\nthe entire super column will be removed\n@param ConsistencyLevel $consistency_level affects the guaranteed\nnumber of nodes that must respond before the operation returns.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected SSLSocket createSSLSocket( final String host, final int port, final int connectionTimeout, final boolean trustAll, final boolean verifyHttpsHost) throws IOException { final SocketFactory socketFactory = getSocketFactory(proxy, true, trustAll, connectionTimeout); final Socket socket; if (connectionTimeout < 0) { socket = socketFactory.createSocket(host, port); } else { // creates unconnected socket // unfortunately, this does not work always // sslSocket = (SSLSocket) socketFactory.createSocket(); // sslSocket.connect(new InetSocketAddress(host, port), connectionTimeout); // // Note: SSLSocketFactory has several create() methods. // Those that take arguments all connect immediately // and have no options for specifying a connection timeout. // // So, we have to create a socket and connect it (with a // connection timeout), then have the SSLSocketFactory wrap // the already-connected socket. // socket = Sockets.connect(host, port, connectionTimeout); //sock.setSoTimeout(readTimeout); //socket.connect(new InetSocketAddress(host, port), connectionTimeout); // continue to wrap this plain socket with ssl socket... } // wrap plain socket in an SSL socket SSLSocket sslSocket; if (socket instanceof SSLSocket) { sslSocket = (SSLSocket) socket; } else { if (socketFactory instanceof SSLSocketFactory) { sslSocket = (SSLSocket) ((SSLSocketFactory)socketFactory).createSocket(socket, host, port, true); } else { sslSocket = (SSLSocket) (getDefaultSSLSocketFactory(trustAll)).createSocket(socket, host, port, true); } } // sslSocket is now ready if (secureEnabledProtocols != null) { final String[] values = StringUtil.splitc(secureEnabledProtocols, ','); StringUtil.trimAll(values); sslSocket.setEnabledProtocols(values); } // set SSL parameters to allow host name verifier if (verifyHttpsHost) { final SSLParameters sslParams = new SSLParameters(); sslParams.setEndpointIdentificationAlgorithm(\"HTTPS\"); sslSocket.setSSLParameters(sslParams); } return sslSocket; }\n\n    ### Response:",
        "ground_truth": "Creates a SSL socket. Enables default secure enabled protocols if specified.",
        "predict": " Remove a counter at the specified location.\n\nNote that counters have limited support for deletes: if you remove a\ncounter, you must wait to issue any following update until the delete\nhas reached all the nodes and all of them have been fully compacted.\n\nAvailable in Cassandra 0.8.0 and later.\n\n@param string $key the key for the row\n@param mixed $super_column the super column the counter is in\n@param mixed $column the column name of the counter; if left as null,\nthe entire super column will be removed\n@param ConsistencyLevel $consistency_level affects the guaranteed\nnumber of nodes that must respond before the operation returns.\n\n    "
    },
    {
        "ID": 1698,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func HTTPGetToFile(client *http.Client, url string, header http.Header, fileName string) error { rc, err := HTTPGet(client, url, header) if err != nil { return err } defer rc.Close() os.MkdirAll(filepath.Dir(fileName), os.ModePerm) f, err := os.Create(fileName) if err != nil { return err } defer f.Close() _, err = io.Copy(f, rc) return err }\n\n    ### Response: // HTTPGetToFile gets the specified resource and writes to file.\n// ErrNotFound is returned if the server responds with status 404..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected SSLSocketFactory getDefaultSSLSocketFactory(final boolean trustAllCertificates) throws IOException { if (trustAllCertificates) { try { SSLContext sc = SSLContext.getInstance(sslProtocol); sc.init(null, TrustManagers.TRUST_ALL_CERTS, new java.security.SecureRandom()); return sc.getSocketFactory(); } catch (NoSuchAlgorithmException | KeyManagementException e) { throw new IOException(e); } } else { return (SSLSocketFactory) SSLSocketFactory.getDefault(); } }\n\n    ### Response:",
        "ground_truth": "Returns default SSL socket factory allowing setting trust managers.",
        "predict": " // HTTPGetToFile gets the specified resource and writes to file.\n// ErrNotFound is returned if the server responds with status 404..\n\n    "
    },
    {
        "ID": 1699,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (f *RenderFilter) include(k string) bool { if f == nil { return true } k = strings.ToLower(k) f.once.Do(f.init) if len(f.includeSet) > 0 { _, ok := f.includeSet[k] return ok } if len(f.excludeSet) > 0 { _, ok := f.excludeSet[k] return !ok } return true }\n\n    ### Response: // Include checks whether a key should be included..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected SocketFactory getSocketFactory( final ProxyInfo proxy, final boolean ssl, final boolean trustAllCertificates, final int connectionTimeout) throws IOException { switch (proxy.getProxyType()) { case NONE: if (ssl) { return getDefaultSSLSocketFactory(trustAllCertificates); } else { return SocketFactory.getDefault(); } case HTTP: return new HTTPProxySocketFactory(proxy, connectionTimeout); case SOCKS4: return new Socks4ProxySocketFactory(proxy, connectionTimeout); case SOCKS5: return new Socks5ProxySocketFactory(proxy, connectionTimeout); default: return null; } }\n\n    ### Response:",
        "ground_truth": "Returns socket factory based on proxy type and SSL requirements.",
        "predict": " // Include checks whether a key should be included..\n\n    "
    },
    {
        "ID": 1700,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def run(self): \"\"\" Performs actual nwchem run. \"\"\" with zopen(self.output_file, 'w') as fout: return subprocess.Popen(self.nwchem_cmd + [self.input_file], stdout=fout)\n\n    ### Response: Performs actual nwchem run..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String random(int count, final char[] chars) { if (count == 0) { return StringPool.EMPTY; } final char[] result = new char[count]; while (count-- > 0) { result[count] = chars[rnd.nextInt(chars.length)]; } return new String(result); }\n\n    ### Response:",
        "ground_truth": "Creates random string whose length is the number of characters specified.\nCharacters are chosen from the set of characters specified.",
        "predict": " Performs actual nwchem run..\n\n    "
    },
    {
        "ID": 1701,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public INDArray arange(double begin, double end, double step) { return Nd4j.create(ArrayUtil.toDoubles(ArrayUtil.range((int) begin, (int) end, (int)step))); }\n\n    ### Response: Array of evenly spaced values.\n\n@param begin the begin of the range\n@param end   the end of the range\n@return the range vector.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String random(int count, final char start, final char end) { if (count == 0) { return StringPool.EMPTY; } final char[] result = new char[count]; final int len = end - start + 1; while (count-- > 0) { result[count] = (char) (rnd.nextInt(len) + start); } return new String(result); }\n\n    ### Response:",
        "ground_truth": "Creates random string whose length is the number of characters specified.\nCharacters are chosen from the provided range.",
        "predict": " Array of evenly spaced values.\n\n@param begin the begin of the range\n@param end   the end of the range\n@return the range vector.\n\n    "
    },
    {
        "ID": 1702,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (_ *AttachISO) CheckChanges(a, e, changes *AttachISO) error { glog.Info(\"AttachISO.CheckChanges invoked!\") return nil }\n\n    ### Response: // CheckChanges is a no-op for this task..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String randomRanges(int count, final char... ranges) { if (count == 0) { return StringPool.EMPTY; } int i = 0; int len = 0; final int[] lens = new int[ranges.length]; while (i < ranges.length) { int gap = ranges[i + 1] - ranges[i] + 1; len += gap; lens[i] = len; i += 2; } final char[] result = new char[count]; while (count-- > 0) { char c = 0; int r = rnd.nextInt(len); for (i = 0; i < ranges.length; i += 2) { if (r < lens[i]) { r += ranges[i]; if (i != 0) { r -= lens[i - 2]; } c = (char) r; break; } } result[count] = c; } return new String(result); }\n\n    ### Response:",
        "ground_truth": "Creates random string whose length is the number of characters specified.\nCharacters are chosen from the multiple sets defined by range pairs.\nAll ranges must be in acceding order.",
        "predict": " // CheckChanges is a no-op for this task..\n\n    "
    },
    {
        "ID": 1703,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function _makeMROFListEntry(path, pane, cursorPos) { return { file: path, paneId: pane, cursor: cursorPos }; }\n\n    ### Response: Creates an entry for MROF list\n@private\n@param {String} path - full path of a doc\n@param {String} pane - the pane holding the editor for the doc\n@param {Object} cursorPos - current cursor position\n@return {Object} a frame containing file path, pane and last known cursor.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SuppressWarnings(\"unchecked\") protected Collection<Object> newArrayInstance(final Class targetType) { if (targetType == null || targetType == List.class || targetType == Collection.class || targetType.isArray()) { return listSupplier.get(); } if (targetType == Set.class) { return new HashSet<>(); } try { return (Collection<Object>) targetType.getDeclaredConstructor().newInstance(); } catch (Exception e) { throw new JsonException(e); } }\n\n    ### Response:",
        "ground_truth": "Creates new type for JSON array objects.\nIt returns a collection.\nLater, the collection will be converted into the target type.",
        "predict": " Creates an entry for MROF list\n@private\n@param {String} path - full path of a doc\n@param {String} pane - the pane holding the editor for the doc\n@param {Object} cursorPos - current cursor position\n@return {Object} a frame containing file path, pane and last known cursor.\n\n    "
    },
    {
        "ID": 1704,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    static public String rand() { UUID uid = UUID.randomUUID(); long l1 = uid.getLeastSignificantBits(); long l2 = uid. getMostSignificantBits(); return \"_\"+Long.toHexString(l1)+Long.toHexString(l2); }\n\n    ### Response: A random string, useful as a Key name or partial Key suffix..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void injectValueIntoObject(final Object target, final PropertyDescriptor pd, final Object value) { Object convertedValue = value; if (value != null) { Class targetClass = pd.getType(); convertedValue = convertType(value, targetClass); } try { Setter setter = pd.getSetter(true); if (setter != null) { setter.invokeSetter(target, convertedValue); } } catch (Exception ex) { throw new JsonException(ex); } }\n\n    ### Response:",
        "ground_truth": "Injects value into the targets property.",
        "predict": " A random string, useful as a Key name or partial Key suffix..\n\n    "
    },
    {
        "ID": 1705,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function(eventName, cpuNumber, pid, ts, eventBase) { var event = /crtc=(\\d+), seq=(\\d+)/.exec(eventBase.details); if (!event) return false; var crtc = parseInt(event[1]); var seq = parseInt(event[2]); this.drmVblankSlice(ts, 'vblank:' + crtc, { crtc: crtc, seq: seq }); return true; }\n\n    ### Response: Parses drm driver events and sets up state in the importer..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected Object convertType(final Object value, final Class targetType) { final Class valueClass = value.getClass(); if (valueClass == targetType) { return value; } try { return TypeConverterManager.get().convertType(value, targetType); } catch (Exception ex) { if (!strictTypes) { return null; } throw new JsonException(\"Type conversion failed\", ex); } }\n\n    ### Response:",
        "ground_truth": "Converts type of the given value.",
        "predict": " Parses drm driver events and sets up state in the importer..\n\n    "
    },
    {
        "ID": 1706,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def delete_customer_card(customer_id, card_id, opts = {}) data, _status_code, _headers = delete_customer_card_with_http_info(customer_id, card_id, opts) return data end\n\n    ### Response: DeleteCustomerCard\n Removes a card on file from a customer.\n @param customer_id The ID of the customer that the card on file belongs to.\n @param card_id The ID of the card on file to delete.\n @param [Hash] opts the optional parameters\n @return [DeleteCustomerCardResponse].\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void visitProvide(final String service, final String... providers) { if (mv != null) { mv.visitProvide(service, providers); } }\n\n    ### Response:",
        "ground_truth": "Visit an implementation of a service.\n\n@param service the internal name of the service.\n@param providers the internal names of the implementations of the service (there is at least\none provider).",
        "predict": " DeleteCustomerCard\n Removes a card on file from a customer.\n @param customer_id The ID of the customer that the card on file belongs to.\n @param card_id The ID of the card on file to delete.\n @param [Hash] opts the optional parameters\n @return [DeleteCustomerCardResponse].\n\n    "
    },
    {
        "ID": 1707,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (cm *rpcConnManager) AddRebroadcastInventory(iv *wire.InvVect, data interface{}) { cm.server.AddRebroadcastInventory(iv, data) }\n\n    ### Response: // AddRebroadcastInventory adds the provided inventory to the list of\n// inventories to be rebroadcast at random intervals until they show up in a\n// block.\n//\n// This function is safe for concurrent access and is part of the\n// rpcserverConnManager interface implementation..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SuppressWarnings(\"unchecked\") public static <A> TypeCache<A> createDefault() { return (TypeCache<A>)Defaults.implementation.get(); }\n\n    ### Response:",
        "ground_truth": "Creates default implementation of the type cache.",
        "predict": " // AddRebroadcastInventory adds the provided inventory to the list of\n// inventories to be rebroadcast at random intervals until they show up in a\n// block.\n//\n// This function is safe for concurrent access and is part of the\n// rpcserverConnManager interface implementation..\n\n    "
    },
    {
        "ID": 1708,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def export_deleted_fields(self): \"\"\" Resturns a list with any deleted fields form original data. In tree models, deleted fields on children will be appended. \"\"\" result = self.__deleted_fields__.copy() for key, value in self.__original_data__.items(): if key in result: continue try: partial = value.export_deleted_fields() result.extend(['.'.join([key, key2]) for key2 in partial]) except AttributeError: pass return result\n\n    ### Response: Resturns a list with any deleted fields form original data.\n        In tree models, deleted fields on children will be appended..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public T put(final Class<?> type, final T value) { return map.put(type, value); }\n\n    ### Response:",
        "ground_truth": "Add values to the map.",
        "predict": " Resturns a list with any deleted fields form original data.\n        In tree models, deleted fields on children will be appended..\n\n    "
    },
    {
        "ID": 1709,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func MaximumDiskSize(size int64) Option { return func(p *params) { p.ext4opts = append(p.ext4opts, compactext4.MaximumDiskSize(size)) } }\n\n    ### Response: // MaximumDiskSize instructs the writer to limit the disk size to the specified\n// value. This also reserves enough metadata space for the specified disk size.\n// If not provided, then 16GB is the default..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public MethodDescriptor[] getAllMethodDescriptors() { if (allMethods == null) { final List<MethodDescriptor> allMethodsList = new ArrayList<>(); for (MethodDescriptor[] methodDescriptors : methodsMap.values()) { Collections.addAll(allMethodsList, methodDescriptors); } final MethodDescriptor[] allMethods = allMethodsList.toArray(new MethodDescriptor[0]); Arrays.sort(allMethods, Comparator.comparing(md -> md.getMethod().getName())); this.allMethods = allMethods; } return allMethods; }\n\n    ### Response:",
        "ground_truth": "Returns all methods. Cached. Lazy.",
        "predict": " // MaximumDiskSize instructs the writer to limit the disk size to the specified\n// value. This also reserves enough metadata space for the specified disk size.\n// If not provided, then 16GB is the default..\n\n    "
    },
    {
        "ID": 1710,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function detach() { parent::detach(); if (method_exists($this->owner, \"getPrimaryKey\")) { $this->name = $this->_oldName; } }\n\n    ### Response: Detaches the entity from a component.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String resolveIpAddress(final String hostname) { try { InetAddress netAddress; if (hostname == null || hostname.equalsIgnoreCase(LOCAL_HOST)) { netAddress = InetAddress.getLocalHost(); } else { netAddress = Inet4Address.getByName(hostname); } return netAddress.getHostAddress(); } catch (UnknownHostException ignore) { return null; } }\n\n    ### Response:",
        "ground_truth": "Resolves IP address from a hostname.",
        "predict": " Detaches the entity from a component.\n\n    "
    },
    {
        "ID": 1711,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (g *generators) add(cb starlark.Callable) error { if g.runningNow { return fmt.Errorf(\"can't add a generator while already running them\") } g.gen = append(g.gen, cb) return nil }\n\n    ### Response: // add registers a new generator callback..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static int getIpAsInt(final String ipAddress) { int ipIntValue = 0; String[] tokens = StringUtil.splitc(ipAddress, '.'); for (String token : tokens) { if (ipIntValue > 0) { ipIntValue <<= 8; } ipIntValue += Integer.parseInt(token); } return ipIntValue; }\n\n    ### Response:",
        "ground_truth": "Returns IP address as integer.",
        "predict": " // add registers a new generator callback..\n\n    "
    },
    {
        "ID": 1712,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function transform(array $elasticaObjects) { $results = array(); foreach ($elasticaObjects as $elasticaObject) { $elasticaObject = $elasticaObject->getHit(); $obj = new $this->objectClass(); $obj->setId($elasticaObject['_id']); foreach ($elasticaObject['_source'] as $attributeName => $attributeValue) { if (property_exists($this->objectClass, $attributeName)) { $method = 'set' . str_replace(' ', '', ucwords(str_replace('_', ' ', $attributeName))); $obj->{$method}($attributeValue); } } $results[$obj->getId()] = $obj; } return $results; }\n\n    ### Response: Transforms an array of elastica objects into an array of\nmodel objects\n\n@param  array             $elasticaObjects of elastica objects\n@throws \\RuntimeException\n@return array.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static boolean validateAgaintIPAdressV4Format(final String input) { if (input == null) { return false; } int hitDots = 0; char[] data = input.toCharArray(); for (int i = 0; i < data.length; i++) { char c = data[i]; int b = 0; do { if (c < '0' || c > '9') { return false; } b = (b * 10 + c) - 48; if (++i >= data.length) { break; } c = data[i]; } while (c != '.'); if (b > 255) { return false; } hitDots++; } return hitDots == 4; }\n\n    ### Response:",
        "ground_truth": "Checks given string against IP address v4 format.\n\n@param input an ip address - may be null\n@return true if param has a valid ip v4 format false otherwise\n@see ip address v4",
        "predict": " Transforms an array of elastica objects into an array of\nmodel objects\n\n@param  array             $elasticaObjects of elastica objects\n@throws \\RuntimeException\n@return array.\n\n    "
    },
    {
        "ID": 1713,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function setOptions(command, query) { var count, opts; command = commands[command]; if (!command) { return; } opts = {}; count = Object.keys(query).length; [options.common].concat(command.options).some(function someTypes(options) { if (!options) { return; } Object.keys(options).some(function someOptions(key) { var valid = options[key].valid; if (key in query) { if (options[key].bool) { opts[options[key].name] = !reBool.test(query[key]); } else if (!valid || (valid && valid.test(query[key]))) { opts[options[key].name] = decodeURIComponent(query[key]); } count -= 1; } return count === 0; }); return count === 0; }); return opts; }\n\n    ### Response: set valid options only per command.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String resolveHostName(final byte[] ip) { try { InetAddress address = InetAddress.getByAddress(ip); return address.getHostName(); } catch (UnknownHostException ignore) { return null; } }\n\n    ### Response:",
        "ground_truth": "Resolves host name from IP address bytes.",
        "predict": " set valid options only per command.\n\n    "
    },
    {
        "ID": 1714,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def generate sitemaps.group_by(&:folder).each do |folder, sitemaps| index_path = \"#{DynamicSitemaps.temp_path}/#{folder}/#{DynamicSitemaps.index_file_name}\" if !DynamicSitemaps.always_generate_index && sitemaps.count == 1 && sitemaps.first.files.count == 1 file_path = \"#{DynamicSitemaps.temp_path}/#{folder}/#{sitemaps.first.files.first}\" FileUtils.copy file_path, index_path File.delete file_path else File.open(index_path, \"w\") do |file| write_beginning(file) write_sitemaps(file, sitemaps) write_end(file) end end end end\n\n    ### Response: Array of sitemap results\n Initialize the class with an array of SitemapResult.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static byte[] downloadBytes(final String url) throws IOException { try (InputStream inputStream = new URL(url).openStream()) { return StreamUtil.readBytes(inputStream); } }\n\n    ### Response:",
        "ground_truth": "Downloads resource as byte array.",
        "predict": " Array of sitemap results\n Initialize the class with an array of SitemapResult.\n\n    "
    },
    {
        "ID": 1715,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func RTClock(clock timetools.TimeProvider) rrOptSetter { return func(r *RTMetrics) error { r.clock = clock return nil } }\n\n    ### Response: // RTClock sets a clock.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String downloadString(final String url, final String encoding) throws IOException { try (InputStream inputStream = new URL(url).openStream()) { return new String(StreamUtil.readChars(inputStream, encoding)); } }\n\n    ### Response:",
        "ground_truth": "Downloads resource as String.",
        "predict": " // RTClock sets a clock.\n\n    "
    },
    {
        "ID": 1716,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    Format identifyFormat( String pom ) { for ( String separator : LINE_SEPARATORS ) { if ( pom.contains( separator ) ) { return new Format( separator ); } } throw new IllegalArgumentException( \"The pom.xml has no known line separator.\" ); }\n\n    ### Response: Identifies the output format for the given POM.\n\n@param pom the POM.\n@return the output format..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void downloadFile(final String url, final File file) throws IOException { try ( InputStream inputStream = new URL(url).openStream(); ReadableByteChannel rbc = Channels.newChannel(inputStream); FileChannel fileChannel = FileChannel.open( file.toPath(), StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING, StandardOpenOption.WRITE) ) { fileChannel.transferFrom(rbc, 0, Long.MAX_VALUE); } }\n\n    ### Response:",
        "ground_truth": "Downloads resource to a file, potentially very efficiently.",
        "predict": " Identifies the output format for the given POM.\n\n@param pom the POM.\n@return the output format..\n\n    "
    },
    {
        "ID": 1717,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function setRetryFactor($factor) { if (!(is_int($factor) || is_float($factor)) || $factor < 1) { throw new \\Plop\\Exception('Invalid value'); } $this->retryFactor = $factor; return $this; }\n\n    ### Response: Set the factor applied to the delay\nbetween each reconnection attempt.\n\n\\param int|float $factor\nDelay factor.\nThis value must be greater or equal to 1.\n\n\\retval Plop::HandlerInterface\nThe current handler instance (ie. \\a $this)..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void inject(final ActionRequest actionRequest) { final Targets targets = actionRequest.getTargets(); final ServletContext servletContext = actionRequest.getHttpServletRequest().getServletContext(); scopeResolver.forEachScope(madvocScope -> madvocScope.inject(servletContext, targets)); scopeResolver.forEachScope(madvocScope -> madvocScope.inject(actionRequest, targets)); }\n\n    ### Response:",
        "ground_truth": "Performs injection.",
        "predict": " Set the factor applied to the delay\nbetween each reconnection attempt.\n\n\\param int|float $factor\nDelay factor.\nThis value must be greater or equal to 1.\n\n\\retval Plop::HandlerInterface\nThe current handler instance (ie. \\a $this)..\n\n    "
    },
    {
        "ID": 1718,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _fill_cache(self, namespace): \"\"\"Load all modules found in a namespace\"\"\" modules = self._findPluginModules(namespace) self._cache = list(modules)\n\n    ### Response: Load all modules found in a namespace.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void outject(final ActionRequest actionRequest) { final Targets targets = actionRequest.getTargets(); scopeResolver.forEachScope(madvocScope -> madvocScope.outject(actionRequest, targets)); }\n\n    ### Response:",
        "ground_truth": "Performs outjection.",
        "predict": " Load all modules found in a namespace.\n\n    "
    },
    {
        "ID": 1719,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (tf tFiles) searchNumLess(num int64) int { return sort.Search(len(tf), func(i int) bool { return tf[i].fd.Num < num }) }\n\n    ### Response: // Searches smallest index of tables whose its file number\n// is smaller than the given number..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Socket connect(final String hostname, final int port) throws IOException { final Socket socket = new Socket(); socket.connect(new InetSocketAddress(hostname, port)); return socket; }\n\n    ### Response:",
        "ground_truth": "Creates a socket.",
        "predict": " // Searches smallest index of tables whose its file number\n// is smaller than the given number..\n\n    "
    },
    {
        "ID": 1720,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def describe_policy(policyName, region=None, key=None, keyid=None, profile=None): ''' Given a policy name describe its properties. Returns a dictionary of interesting properties. CLI Example: .. code-block:: bash salt myminion boto_iot.describe_policy mypolicy ''' try: conn = _get_conn(region=region, key=key, keyid=keyid, profile=profile) policy = conn.get_policy(policyName=policyName) if policy: keys = ('policyName', 'policyArn', 'policyDocument', 'defaultVersionId') return {'policy': dict([(k, policy.get(k)) for k in keys])} else: return {'policy': None} except ClientError as e: err = __utils__['boto3.get_error'](e) if e.response.get('Error', {}).get('Code') == 'ResourceNotFoundException': return {'policy': None} return {'error': __utils__['boto3.get_error'](e)}\n\n    ### Response: Given a policy name describe its properties.\n\n    Returns a dictionary of interesting properties.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt myminion boto_iot.describe_policy mypolicy.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Socket connect(final String hostname, final int port, final int connectionTimeout) throws IOException { final Socket socket = new Socket(); if (connectionTimeout <= 0) { socket.connect(new InetSocketAddress(hostname, port)); } else { socket.connect(new InetSocketAddress(hostname, port), connectionTimeout); } return socket; }\n\n    ### Response:",
        "ground_truth": "Creates a socket with a timeout.",
        "predict": " Given a policy name describe its properties.\n\n    Returns a dictionary of interesting properties.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt myminion boto_iot.describe_policy mypolicy.\n\n    "
    },
    {
        "ID": 1721,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @JsonProperty(\"paging\") void paging(String paging) { builder.paging(IndexPagingState.fromByteBuffer(ByteBufferUtils.byteBuffer(paging))); }\n\n    ### Response: Sets the specified starting partition key.\n\n@param paging a paging state.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static int getPrimitiveClassNameIndex(final String className) { int dotIndex = className.indexOf('.'); if (dotIndex != -1) { return -1; } return Arrays.binarySearch(PRIMITIVE_TYPE_NAMES, className); }\n\n    ### Response:",
        "ground_truth": "Detects if provided class name is a primitive type.\nReturns >= 0 number if so.",
        "predict": " Sets the specified starting partition key.\n\n@param paging a paging state.\n\n    "
    },
    {
        "ID": 1722,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String formatBigDecimal(BigDecimal number) { if (number.signum() != -1) { return \"+\" + number.toString(); } else { return number.toString(); } }\n\n    ### Response: Returns a signed string representation of the given number.\n\n@param number\n@return String for BigDecimal value.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public Class loadClass(final String className, final ClassLoader classLoader) throws ClassNotFoundException { String arrayClassName = prepareArrayClassnameForLoading(className); if ((className.indexOf('.') == -1) && (arrayClassName == null)) { // maybe a primitive int primitiveNdx = getPrimitiveClassNameIndex(className); if (primitiveNdx >= 0) { return PRIMITIVE_TYPES[primitiveNdx]; } } // try #1 - using provided class loader if (classLoader != null) { Class klass = loadClass(className, arrayClassName, classLoader); if (klass != null) { return klass; } } // try #2 - using thread class loader ClassLoader currentThreadClassLoader = Thread.currentThread().getContextClassLoader(); if ((currentThreadClassLoader != null) && (currentThreadClassLoader != classLoader)) { Class klass = loadClass(className, arrayClassName, currentThreadClassLoader); if (klass != null) { return klass; } } // try #3 - using caller classloader, similar as Class.forName() //Class callerClass = ReflectUtil.getCallerClass(2); Class callerClass = ClassUtil.getCallerClass(); ClassLoader callerClassLoader = callerClass.getClassLoader(); if ((callerClassLoader != classLoader) && (callerClassLoader != currentThreadClassLoader)) { Class klass = loadClass(className, arrayClassName, callerClassLoader); if (klass != null) { return klass; } } // try #4 - everything failed, try alternative array loader if (arrayClassName != null) { try { return loadArrayClassByComponentType(className, classLoader); } catch (ClassNotFoundException ignore) { } } throw new ClassNotFoundException(\"Class not found: \" + className); }\n\n    ### Response:",
        "ground_truth": "Loads class by name.",
        "predict": " Returns a signed string representation of the given number.\n\n@param number\n@return String for BigDecimal value.\n\n    "
    },
    {
        "ID": 1723,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def stations resp = self.connection.request( :get, Citibike::Station.path ) return resp if @options[:unwrapped] Citibike::Responses::Station.new(resp) end\n\n    ### Response: Wrapper around a call to list all stations\n\n @return [Response] [A response object unless].\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected Class loadArrayClassByComponentType(final String className, final ClassLoader classLoader) throws ClassNotFoundException { int ndx = className.indexOf('['); int multi = StringUtil.count(className, '['); String componentTypeName = className.substring(0, ndx); Class componentType = loadClass(componentTypeName, classLoader); if (multi == 1) { return Array.newInstance(componentType, 0).getClass(); } int[] multiSizes; if (multi == 2) { multiSizes = new int[] {0, 0}; } else if (multi == 3) { multiSizes = new int[] {0, 0, 0}; } else { multiSizes = (int[]) Array.newInstance(int.class, multi); } return Array.newInstance(componentType, multiSizes).getClass(); }\n\n    ### Response:",
        "ground_truth": "Loads array class using component type.",
        "predict": " Wrapper around a call to list all stations\n\n @return [Response] [A response object unless].\n\n    "
    },
    {
        "ID": 1724,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (h *guiHandler) serveStatic(w http.ResponseWriter, req *http.Request) { logger.Debugf(\"serving Juju GUI static files\") staticDir := filepath.Join(h.rootDir, \"static\") fs := http.FileServer(http.Dir(staticDir)) http.StripPrefix(h.hashedPath(\"static/\"), fs).ServeHTTP(w, req) }\n\n    ### Response: // serveStatic serves the GUI static files..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public void shutdown() { for (final BeanData beanData : instances.values()) { beanData.callDestroyMethods(); } instances.clear(); }\n\n    ### Response:",
        "ground_truth": "Iterate all beans and invokes registered destroy methods.",
        "predict": " // serveStatic serves the GUI static files..\n\n    "
    },
    {
        "ID": 1725,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def sha_match?(file, gav, use_sha_file=false) if File.exists?(file) if gav.sha1.nil? gav.sha1 = gav_data(gav)['sha1'] end sha(file,use_sha_file) == gav.sha1 else false end end\n\n    ### Response: sha_match? returns bool by comparing the sha1 of the nexus gav artifact and the local file.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static <T extends Comparable> BinarySearch<T> forArray(final T[] array) { return new BinarySearch<T>() { @Override @SuppressWarnings( {\"unchecked\"}) protected int compare(final int index, final T element) { return array[index].compareTo(element); } @Override protected int getLastIndex() { return array.length - 1; } }; }\n\n    ### Response:",
        "ground_truth": "Creates binary search wrapper over an array.",
        "predict": " sha_match? returns bool by comparing the sha1 of the nexus gav artifact and the local file.\n\n    "
    },
    {
        "ID": 1726,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function loadFromFile($additionalPath = '') { $path = $this->testPath($this->realPath($additionalPath)); if ($path === false) { return ''; } return file_get_contents($path); }\n\n    ### Response: Loads the content from the file\n\n@access public\n@param string $additionalPath\n@return string.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static <T> BinarySearch<T> forArray(final T[] array, final Comparator<T> comparator) { return new BinarySearch<T>() { @Override @SuppressWarnings( {\"unchecked\"}) protected int compare(final int index, final T element) { return comparator.compare(array[index], element); } @Override protected int getLastIndex() { return array.length - 1; } }; }\n\n    ### Response:",
        "ground_truth": "Creates binary search wrapper over an array with given comparator.",
        "predict": " Loads the content from the file\n\n@access public\n@param string $additionalPath\n@return string.\n\n    "
    },
    {
        "ID": 1727,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _offline_fcp_device(self, fcp, target_wwpn, target_lun, multipath): \"\"\"rhel offline zfcp. sampe to all rhel distro.\"\"\" offline_dev = 'chccwdev -d %s' % fcp delete_records = self._delete_zfcp_config_records(fcp, target_wwpn, target_lun) return '\\n'.join((offline_dev, delete_records))\n\n    ### Response: rhel offline zfcp. sampe to all rhel distro..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public T exclude(final String... excludes) { for (String ex : excludes) { rules.exclude(ex); } return _this(); }\n\n    ### Response:",
        "ground_truth": "Defines excluded property names.",
        "predict": " rhel offline zfcp. sampe to all rhel distro..\n\n    "
    },
    {
        "ID": 1728,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def get_rule_class_by_name(klass) klass = camelize(klass) Validation::Rule.const_get(klass) rescue NameError => e raise InvalidRule.new(e) end\n\n    ### Response: Resolves the specified rule name to a rule class.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public T include(final String... includes) { for (String in : includes) { rules.include(in); } return _this(); }\n\n    ### Response:",
        "ground_truth": "Defines included property names.",
        "predict": " Resolves the specified rule name to a rule class.\n\n    "
    },
    {
        "ID": 1729,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _process_locale(self, locale): \"\"\"Return True if this locale should be processed.\"\"\" if locale.lower().startswith('en'): return False return (locale in self.enabled_locales or self.reverse_locale_map.get(locale.lower(), None) in self.enabled_locales or locale in self.lower_locales or self.reverse_locale_map.get(locale.lower(), None) in self.lower_locales )\n\n    ### Response: Return True if this locale should be processed..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public T includeAs(final Class template) { blacklist = false; String[] properties = getAllBeanPropertyNames(template, false); include(properties); return _this(); }\n\n    ### Response:",
        "ground_truth": "Defines included property names as public properties\nof given template class. Sets to black list mode.",
        "predict": " Return True if this locale should be processed..\n\n    "
    },
    {
        "ID": 1730,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public List<SDVariable> diff(List<SDVariable> i_v1) { List<SDVariable> vals = doDiff(i_v1); if(vals == null){ throw new IllegalStateException(\"Error executing diff operation: doDiff returned null for op: \" + this.opName()); } val outputVars = args(); boolean copied = false; for(int i = 0; i < vals.size(); i++) { SDVariable var = outputVars[i]; SDVariable grad = var.hasGradient() ? var.getGradient() : null; if(grad != null) { if(!copied){ //Don't mutate the original - this could mess with the original op's state! vals = new ArrayList<>(vals); copied = true; } SDVariable gradVar = f().add(grad, vals.get(i)); vals.set(i, gradVar); sameDiff.setGradientForVariableName(var.getVarName(), gradVar); } else { SDVariable gradVar = vals.get(i); sameDiff.updateVariableNameAndReference(gradVar,var.getVarName() + \"-grad\"); sameDiff.setGradientForVariableName(var.getVarName(), gradVar); sameDiff.setForwardVariableForVarName(gradVar.getVarName(),var); } } return vals; }\n\n    ### Response: Perform automatic differentiation\nwrt the input variables\n@param i_v1 the input variables\n@return the differentiated output\nwrt each input variable.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void start(final int startIndex) { this.tagStartIndex = startIndex; this.name = null; this.idNdx = -1; this.attributesCount = 0; this.tagLength = 0; this.modified = false; this.type = TagType.START; this.rawTag = false; }\n\n    ### Response:",
        "ground_truth": "Starts the tag with the index of first '<'.\nResets all tag data.",
        "predict": " Perform automatic differentiation\nwrt the input variables\n@param i_v1 the input variables\n@return the differentiated output\nwrt each input variable.\n\n    "
    },
    {
        "ID": 1731,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def request(self, method, url, **kwargs): \"\"\" Overrides ``requests.Session.request`` to provide basic access authentication. \"\"\" auth = None if self._username is not None and self._password is not None: auth = (self._username, self._password) return super(BasicSession, self).request( method, url, auth=auth, **kwargs)\n\n    ### Response: Overrides ``requests.Session.request`` to provide basic access\n        authentication..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public <T> void registerComponent(final String name, final Class<T> component, final Consumer<T> consumer) { log.debug(() -> \"Madvoc WebApp component: [\" + name + \"] --> \" + component.getName()); madpc.removeBean(name); madpc.registerPetiteBean(component, name, null, null, false, consumer); }\n\n    ### Response:",
        "ground_truth": "Registers Madvoc component with given name.",
        "predict": " Overrides ``requests.Session.request`` to provide basic access\n        authentication..\n\n    "
    },
    {
        "ID": 1732,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (c *Client) TermVectors(index, typ string) *TermvectorsService { builder := NewTermvectorsService(c) builder = builder.Index(index).Type(typ) return builder }\n\n    ### Response: // TermVectors returns information and statistics on terms in the fields\n// of a particular document..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void resolveColumnDbSqlType(final Connection connection, final DbEntityColumnDescriptor dec) { if (dec.dbSqlType != SqlType.DB_SQLTYPE_UNKNOWN) { return; } ResultSet rs = null; DbEntityDescriptor ded = dec.getDbEntityDescriptor(); try { DatabaseMetaData dmd = connection.getMetaData(); rs = dmd.getColumns(null, ded.getSchemaName(), ded.getTableName(), dec.getColumnName()); if (rs.next()) { dec.dbSqlType = rs.getInt(\"DATA_TYPE\"); } else { dec.dbSqlType = SqlType.DB_SQLTYPE_NOT_AVAILABLE; if (log.isWarnEnabled()) { log.warn(\"Column SQL type not available: \" + ded.toString() + '.' + dec.getColumnName()); } } } catch (SQLException sex) { dec.dbSqlType = SqlType.DB_SQLTYPE_NOT_AVAILABLE; if (log.isWarnEnabled()) { log.warn(\"Column SQL type not resolved: \" + ded.toString() + '.' + dec.getColumnName(), sex); } } finally { DbUtil.close(rs); } }\n\n    ### Response:",
        "ground_truth": "Resolves column db sql type and populates it in column descriptor if missing.",
        "predict": " // TermVectors returns information and statistics on terms in the fields\n// of a particular document..\n\n    "
    },
    {
        "ID": 1733,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def url_get_html(url_str) url = URI.parse(URI.encode(url_str)) # first get total size req = Net::HTTP::Get.new(url.to_s) res = Net::HTTP.start(url.host, url.port) { |http| http.request(req) } res.body end\n\n    ### Response: Send url to get response.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected String preprocessSql(String sqlString) { // detects callable statement if (sqlString.charAt(0) == '{') { return sqlString; } // quickly detect if SQL string is a key if (!CharUtil.isAlpha(sqlString.charAt(0))) { sqlString = sqlString.substring(1); } else if (sqlString.indexOf(' ') != -1) { return sqlString; } final String sqlFromMap = dbOom.queryMap().getQuery(sqlString); if (sqlFromMap != null) { sqlString = sqlFromMap.trim(); } return sqlString; }\n\n    ### Response:",
        "ground_truth": "Pre-process SQL before using it. If string starts with a non-ascii char\nor it has no spaces, it will be loaded from the query map.",
        "predict": " Send url to get response.\n\n    "
    },
    {
        "ID": 1734,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def get_view_for_id(self, view_class, element_id, parent_item=None): \"\"\"Searches and returns the View for the given id and type :param view_class: The view type to search for :param element_id: The id of element of the searched view :param gaphas.item.Item parent_item: Restrict the search to this parent item :return: The view for the given id or None if not found \"\"\" from rafcon.gui.mygaphas.items.state import StateView from rafcon.gui.mygaphas.items.connection import DataFlowView, TransitionView if parent_item is None: items = self.get_all_items() else: items = self.get_children(parent_item) for item in items: if view_class is StateView and isinstance(item, StateView) and item.model.state.state_id == element_id: return item if view_class is TransitionView and isinstance(item, TransitionView) and \\ item.model.transition.transition_id == element_id: return item if view_class is DataFlowView and isinstance(item, DataFlowView) and \\ item.model.data_flow.data_flow_id == element_id: return item return None\n\n    ### Response: Searches and returns the View for the given id and type\n\n        :param view_class: The view type to search for\n        :param element_id: The id of element of the searched view\n        :param gaphas.item.Item parent_item: Restrict the search to this parent item\n        :return: The view for the given id or None if not found.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected ResultSetMapper createResultSetMapper(final ResultSet resultSet) { final Map<String, ColumnData> columnAliases = sqlgen != null ? sqlgen.getColumnData() : null; return new DefaultResultSetMapper(dbOom, resultSet, columnAliases, cacheEntities, this); }\n\n    ### Response:",
        "ground_truth": "Factory for result sets mapper.",
        "predict": " Searches and returns the View for the given id and type\n\n        :param view_class: The view type to search for\n        :param element_id: The id of element of the searched view\n        :param gaphas.item.Item parent_item: Restrict the search to this parent item\n        :return: The view for the given id or None if not found.\n\n    "
    },
    {
        "ID": 1735,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function getFutureAmount( $change = FALSE ) { $result = self::calculateFutureAmount( $this->amount, $this->interest, $this->periods ); if( $change ) $this->amount = $result; return $result; }\n\n    ### Response: Calculates and returns Future Amount from Present Amount.\n@access\t\tpublic\n@return\t\tfloat.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public <T> T findGeneratedKey(final Class<T> type) { return find(new Class[] {type}, false, getGeneratedColumns()); }\n\n    ### Response:",
        "ground_truth": "Finds generated key column of given type.",
        "predict": " Calculates and returns Future Amount from Present Amount.\n@access\t\tpublic\n@return\t\tfloat.\n\n    "
    },
    {
        "ID": 1736,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function resetLanguage($langId) { if ((int) $langId === 0) { return; } $tables = $this->getAllTables(); // removing tables which does not requires reset foreach ($this->_aSkipTablesOnReset as $skipTable) { if (($skipId = array_search($skipTable, $tables)) !== false) { unset($tables[$skipId]); } } foreach ($tables as $tableName) { $this->resetMultilangFields($langId, $tableName); } }\n\n    ### Response: Resetting all multi-language fields with specific language id\nto default value in all tables. Only if language ID > 0.\n\n@param int $langId Language id\n\n@return null.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void populateGeneratedKeys(final Object entity) { final String[] generatedColumns = getGeneratedColumnNames(); if (generatedColumns == null) { return; } DbEntityDescriptor ded = dbOom.entityManager().lookupType(entity.getClass()); // prepare key types Class[] keyTypes = new Class[generatedColumns.length]; String[] properties = new String[generatedColumns.length]; for (int i = 0; i < generatedColumns.length; i++) { String column = generatedColumns[i]; DbEntityColumnDescriptor decd = ded.findByColumnName(column); if (decd != null) { keyTypes[i] = decd.getPropertyType(); properties[i] = decd.getPropertyName(); } } final Object keyValues = findGeneratedColumns(keyTypes); if (!keyValues.getClass().isArray()) { BeanUtil.declared.setProperty(entity, properties[0], keyValues); } else { for (int i = 0; i < properties.length; i++) { BeanUtil.declared.setProperty(entity, properties[i], ((Object[]) keyValues)[i]); } } }\n\n    ### Response:",
        "ground_truth": "Populates entity with generated column values from executed query.",
        "predict": " Resetting all multi-language fields with specific language id\nto default value in all tables. Only if language ID > 0.\n\n@param int $langId Language id\n\n@return null.\n\n    "
    },
    {
        "ID": 1737,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def update_milestone(id, **kwargs): \"\"\" Update a ProductMilestone \"\"\" data = update_milestone_raw(id, **kwargs) if data: return utils.format_json(data)\n\n    ### Response: Update a ProductMilestone.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override protected <R extends ActionInterceptor> R createWrapper(final Class<R> wrapperClass) { return petiteContainer.createBean(wrapperClass); }\n\n    ### Response:",
        "ground_truth": "Acquires interceptor from Petite container.",
        "predict": " Update a ProductMilestone.\n\n    "
    },
    {
        "ID": 1738,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def visit_ClassDef(self, node, **kwargs): \"\"\" Handles class definitions within code. Process the docstring. Note though that in Python Class definitions are used to define interfaces in addition to classes. If a class definition appears to be an interface definition tag it as an interface definition for Doxygen. Otherwise tag it as a class definition for Doxygen. \"\"\" lineNum = node.lineno - 1 # Push either 'interface' or 'class' onto our containing nodes # hierarchy so we can keep track of context. This will let us tell # if a function is a method or an interface method definition or if # a class is fully contained within another class. containingNodes = kwargs.get('containingNodes') or [] if not self.options.object_respect: # Remove object class of the inherited class list to avoid that all # new-style class inherits from object in the hierarchy class line = self.lines[lineNum] match = AstWalker.__classRE.match(line) if match: if match.group(2) == 'object': self.lines[lineNum] = line[:match.start(2)] + line[match.end(2):] match = AstWalker.__interfaceRE.match(self.lines[lineNum]) if match: if self.options.debug: stderr.write(\"# Interface {0.name}{1}\".format(node, linesep)) containingNodes.append((node.name, 'interface')) else: if self.options.debug: stderr.write(\"# Class {0.name}{1}\".format(node, linesep)) containingNodes.append((node.name, 'class')) if self.options.topLevelNamespace: fullPathNamespace = self._getFullPathName(containingNodes) contextTag = '.'.join(pathTuple[0] for pathTuple in fullPathNamespace) tail = '@namespace {0}'.format(contextTag) else: tail = '' # Class definitions have one Doxygen-significant special case: # interface definitions. if match: contextTag = '{0}{1}# @interface {2}'.format(tail, linesep, match.group(1)) else: contextTag = tail contextTag = self._processMembers(node, contextTag) if get_docstring(node): self._processDocstring(node, contextTag, containingNodes=containingNodes) # Visit any contained nodes. self.generic_visit(node, containingNodes=containingNodes) # Remove the item we pushed onto the containing nodes hierarchy. containingNodes.pop()\n\n    ### Response: Handles class definitions within code.\n\n        Process the docstring.  Note though that in Python Class definitions\n        are used to define interfaces in addition to classes.\n        If a class definition appears to be an interface definition tag it as an\n        interface definition for Doxygen.  Otherwise tag it as a class\n        definition for Doxygen..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Q setBean(final String beanName, final Object bean) { if (bean == null) { return _this(); } init(); final String beanNamePrefix = beanName + '.'; query.forEachNamedParameter(p -> { final String paramName = p.name; if (paramName.startsWith(beanNamePrefix)) { final String propertyName = paramName.substring(beanNamePrefix.length()); if (BeanUtil.declared.hasRootProperty(bean, propertyName)) { final Object value = BeanUtil.declared.getProperty(bean, propertyName); setObject(paramName, value); } } }); return _this(); }\n\n    ### Response:",
        "ground_truth": "Sets bean parameters from bean. Non-existing bean properties are ignored.",
        "predict": " Handles class definitions within code.\n\n        Process the docstring.  Note though that in Python Class definitions\n        are used to define interfaces in addition to classes.\n        If a class definition appears to be an interface definition tag it as an\n        interface definition for Doxygen.  Otherwise tag it as a class\n        definition for Doxygen..\n\n    "
    },
    {
        "ID": 1739,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Pure public static MACNumber getPrimaryAdapter() { final Enumeration<NetworkInterface> interfaces; try { interfaces = NetworkInterface.getNetworkInterfaces(); } catch (SocketException exception) { return null; } if (interfaces != null) { NetworkInterface inter; while (interfaces.hasMoreElements()) { inter = interfaces.nextElement(); try { final byte[] addr = inter.getHardwareAddress(); if (addr != null) { return new MACNumber(addr); } } catch (SocketException exception) { // Continue to the next loop. } } } return null; }\n\n    ### Response: Try to determine the primary ethernet address of the machine.\n\n@return the primary MACNumber or null.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Q setMap(final Map parameters) { if (parameters == null) { return _this(); } init(); query.forEachNamedParameter(p -> { final String paramName = p.name; setObject(paramName, parameters.get(paramName)); }); return _this(); }\n\n    ### Response:",
        "ground_truth": "Sets properties from the map.",
        "predict": " Try to determine the primary ethernet address of the machine.\n\n@return the primary MACNumber or null.\n\n    "
    },
    {
        "ID": 1740,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (e *ExtractOpenTracingSpan) Do( ctx context.Context, req *Request, ) (context.Context, opentracing.Span) { tags := opentracing.Tags{ \"rpc.caller\": req.Caller, \"rpc.service\": req.Service, \"rpc.encoding\": req.Encoding, \"rpc.transport\": e.TransportName, } for k, v := range e.ExtraTags { tags[k] = v } span := e.Tracer.StartSpan( req.Procedure, opentracing.StartTime(e.StartTime), tags, // parentSpanCtx may be nil // this implies ChildOf ext.RPCServerOption(e.ParentSpanContext), ) ext.PeerService.Set(span, req.Caller) ext.SpanKindRPCServer.Set(span) ctx = opentracing.ContextWithSpan(ctx, span) return ctx, span }\n\n    ### Response: // Do derives a new context from SpanContext. The created context has a\n// reference to the started span. parentSpanCtx may be nil.\n// This should be called before a Inbound handles a request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Q setObjects(final Object... objects) { int index = 1; for (final Object object : objects) { setObject(index++, object); } return _this(); }\n\n    ### Response:",
        "ground_truth": "Sets an array of objects parameters in given order.",
        "predict": " // Do derives a new context from SpanContext. The created context has a\n// reference to the started span. parentSpanCtx may be nil.\n// This should be called before a Inbound handles a request.\n\n    "
    },
    {
        "ID": 1741,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Point getRenderViewOffset(float partialTick) { Entity entity = Minecraft.getMinecraft().getRenderViewEntity(); if (partialTick == 0) return new Point(entity.posX, entity.posY, entity.posZ); double x = entity.lastTickPosX + (entity.posX - entity.lastTickPosX) * partialTick; double y = entity.lastTickPosY + (entity.posY - entity.lastTickPosY) * partialTick; double z = entity.lastTickPosZ + (entity.posZ - entity.lastTickPosZ) * partialTick; return new Point(x, y, z); }\n\n    ### Response: Gets the render view offset for the current view entity.\n\n@param partialTick the partial tick\n@return the render view offset.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void insertChunkAfter(final SqlChunk previous) { SqlChunk next = previous.nextChunk; previous.nextChunk = this; this.previousChunk = previous; if (next != null) { next.previousChunk = this; this.nextChunk = next; } }\n\n    ### Response:",
        "ground_truth": "Appends chunk to previous one and maintains the double-linked list of the previous chunk.\nCurrent surrounding connections of this chunk will be cut-off.",
        "predict": " Gets the render view offset for the current view entity.\n\n@param partialTick the partial tick\n@return the render view offset.\n\n    "
    },
    {
        "ID": 1742,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function unregisterFileSystem($id) { $adapters = $this->getOption(self::OPTION_ADAPTERS); if (isset($adapters[$id])) { unset($adapters[$id]); if (isset($this->filesystems[$id])) { unset($this->filesystems[$id]); } $this->setOption(self::OPTION_ADAPTERS, $adapters); return true; } else { return false; } }\n\n    ### Response: Remove a filesystem adapter\n\n@param string $id\n@return boolean.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected DbEntityDescriptor lookupType(final Class entity) { final DbEntityDescriptor ded = dbEntityManager.lookupType(entity); if (ded == null) { throw new DbSqlBuilderException(\"Invalid or not-persistent entity: \" + entity.getName()); } return ded; }\n\n    ### Response:",
        "ground_truth": "Lookups for entity name and throws an exception if entity type is invalid.",
        "predict": " Remove a filesystem adapter\n\n@param string $id\n@return boolean.\n\n    "
    },
    {
        "ID": 1743,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def from_chords(self, chords, duration=1): \"\"\"Add chords to the Track. The given chords should be a list of shorthand strings or list of list of shorthand strings, etc. Each sublist divides the value by 2. If a tuning is set, chords will be expanded so they have a proper fingering. Example: >>> t = Track().from_chords(['C', ['Am', 'Dm'], 'G7', 'C#'], 1) \"\"\" tun = self.get_tuning() def add_chord(chord, duration): if type(chord) == list: for c in chord: add_chord(c, duration * 2) else: chord = NoteContainer().from_chord(chord) if tun: chord = tun.find_chord_fingering(chord, return_best_as_NoteContainer=True) if not self.add_notes(chord, duration): # This should be the standard behaviour of add_notes dur = self.bars[-1].value_left() self.add_notes(chord, dur) # warning should hold note self.add_notes(chord, value.subtract(duration, dur)) for c in chords: if c is not None: add_chord(c, duration) else: self.add_notes(None, duration) return self\n\n    ### Response: Add chords to the Track.\n\n        The given chords should be a list of shorthand strings or list of\n        list of shorthand strings, etc.\n\n        Each sublist divides the value by 2.\n\n        If a tuning is set, chords will be expanded so they have a proper\n        fingering.\n\n        Example:\n        >>> t = Track().from_chords(['C', ['Am', 'Dm'], 'G7', 'C#'], 1).\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected DbEntityDescriptor findColumnRef(final String columnRef) { DbEntityDescriptor ded = templateData.findTableDescriptorByColumnRef(columnRef); if (ded == null) { throw new DbSqlBuilderException(\"Invalid column reference: [\" + columnRef + \"]\"); } return ded; }\n\n    ### Response:",
        "ground_truth": "Finds a table that contains given column.",
        "predict": " Add chords to the Track.\n\n        The given chords should be a list of shorthand strings or list of\n        list of shorthand strings, etc.\n\n        Each sublist divides the value by 2.\n\n        If a tuning is set, chords will be expanded so they have a proper\n        fingering.\n\n        Example:\n        >>> t = Track().from_chords(['C', ['Am', 'Dm'], 'G7', 'C#'], 1).\n\n    "
    },
    {
        "ID": 1744,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def predict_array(self, arr): \"\"\" This over-ride is necessary because otherwise the learner method accesses the wrong model when it is called with precompute set to true Args: arr: a numpy array to be used as input to the model for prediction purposes Returns: a numpy array containing the predictions from the model \"\"\" precompute = self.precompute self.precompute = False pred = super().predict_array(arr) self.precompute = precompute return pred\n\n    ### Response: This over-ride is necessary because otherwise the learner method accesses the wrong model when it is called\n        with precompute set to true\n\n        Args:\n            arr: a numpy array to be used as input to the model for prediction purposes\n        Returns:\n            a numpy array containing the predictions from the model.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected String resolveTable(final String tableRef, final DbEntityDescriptor ded) { String tableAlias = templateData.getTableAlias(tableRef); if (tableAlias != null) { return tableAlias; } return ded.getTableNameForQuery(); }\n\n    ### Response:",
        "ground_truth": "Resolves table name or alias that will be used in the query.",
        "predict": " This over-ride is necessary because otherwise the learner method accesses the wrong model when it is called\n        with precompute set to true\n\n        Args:\n            arr: a numpy array to be used as input to the model for prediction purposes\n        Returns:\n            a numpy array containing the predictions from the model.\n\n    "
    },
    {
        "ID": 1745,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def create_proxy_credentials(issuer_cred, public_key, lifetime_hours): \"\"\" Given an issuer credentials PEM file in the form of a string, a public_key string from an activation requirements document, and an int for the proxy lifetime, returns credentials as a unicode string in PEM format containing a new proxy certificate and an extended proxy chain. \"\"\" # parse the issuer credential loaded_cert, loaded_private_key, issuer_chain = parse_issuer_cred(issuer_cred) # load the public_key into a cryptography object loaded_public_key = serialization.load_pem_public_key( public_key.encode(\"ascii\"), backend=default_backend() ) # check that the issuer certificate is not an old proxy # and is using the keyUsage section as required confirm_not_old_proxy(loaded_cert) validate_key_usage(loaded_cert) # create the proxy cert cryptography object new_cert = create_proxy_cert( loaded_cert, loaded_private_key, loaded_public_key, lifetime_hours ) # extend the proxy chain as a unicode string extended_chain = loaded_cert.public_bytes(serialization.Encoding.PEM).decode( \"ascii\" ) + six.u(issuer_chain) # return in PEM format as a unicode string return ( new_cert.public_bytes(serialization.Encoding.PEM).decode(\"ascii\") + extended_chain )\n\n    ### Response: Given an issuer credentials PEM file in the form of a string, a public_key\n    string from an activation requirements document, and an int for the\n    proxy lifetime, returns credentials as a unicode string in PEM format\n    containing a new proxy certificate and an extended proxy chain..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected static Class resolveClass(final Object object) { Class type = object.getClass(); return type == Class.class ? (Class) object : type; }\n\n    ### Response:",
        "ground_truth": "Resolves object to a class.",
        "predict": " Given an issuer credentials PEM file in the form of a string, a public_key\n    string from an activation requirements document, and an int for the\n    proxy lifetime, returns credentials as a unicode string in PEM format\n    containing a new proxy certificate and an extended proxy chain..\n\n    "
    },
    {
        "ID": 1746,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (w *HashAggPartialWorker) getGroupKey(sc *stmtctx.StatementContext, row chunk.Row) ([]byte, error) { w.groupValDatums = w.groupValDatums[:0] for _, item := range w.groupByItems { v, err := item.Eval(row) if err != nil { return nil, err } // This check is used to avoid error during the execution of `EncodeDecimal`. if item.GetType().Tp == mysql.TypeNewDecimal { v.SetLength(0) } w.groupValDatums = append(w.groupValDatums, v) } var err error w.groupKey, err = codec.EncodeValue(sc, w.groupKey[:0], w.groupValDatums...) return w.groupKey, err }\n\n    ### Response: // getGroupKey evaluates the group items and args of aggregate functions..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void appendMissingSpace(final StringBuilder out) { int len = out.length(); if (len == 0) { return; } len--; if (!CharUtil.isWhitespace(out.charAt(len))) { out.append(' '); } }\n\n    ### Response:",
        "ground_truth": "Appends missing space if the output doesn't end with whitespace.",
        "predict": " // getGroupKey evaluates the group items and args of aggregate functions..\n\n    "
    },
    {
        "ID": 1747,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def as_binning(obj, copy: bool = False) -> BinningBase: \"\"\"Ensure that an object is a binning Parameters --------- obj : BinningBase or array_like Can be a binning, numpy-like bins or full physt bins copy : If true, ensure that the returned object is independent \"\"\" if isinstance(obj, BinningBase): if copy: return obj.copy() else: return obj else: bins = make_bin_array(obj) return StaticBinning(bins)\n\n    ### Response: Ensure that an object is a binning\n\n    Parameters\n    ---------\n    obj : BinningBase or array_like\n        Can be a binning, numpy-like bins or full physt bins\n    copy : If true, ensure that the returned object is independent.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Enumeration<String> getFileParameterNames() { if (mreq == null) { return null; } return Collections.enumeration(mreq.getFileParameterNames()); }\n\n    ### Response:",
        "ground_truth": "Get an enumeration of the parameter names for uploaded files",
        "predict": " Ensure that an object is a binning\n\n    Parameters\n    ---------\n    obj : BinningBase or array_like\n        Can be a binning, numpy-like bins or full physt bins\n    copy : If true, ensure that the returned object is independent.\n\n    "
    },
    {
        "ID": 1748,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected static function getOption($optionName, $castToInt = true) { $optionValue = isset(self::$options[$optionName]) ? self::$options[$optionName] : get_option($optionName); return $castToInt === true ? (int) $optionValue : $optionValue; }\n\n    ### Response: Get the specified option.\n\n@since 3.1.0\n\n@param string $optionName Key for the option.\n@param bool $castToInt When true, cast the option's value to integer before returning.\n\n@return mixed.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static boolean include(final ServletRequest request, final ServletResponse response, final String page) throws IOException, ServletException { RequestDispatcher dispatcher = request.getRequestDispatcher(page); if (dispatcher != null) { dispatcher.include(request, response); return true; } return false; }\n\n    ### Response:",
        "ground_truth": "Include page which path is relative to the current HTTP request.",
        "predict": " Get the specified option.\n\n@since 3.1.0\n\n@param string $optionName Key for the option.\n@param bool $castToInt When true, cast the option's value to integer before returning.\n\n@return mixed.\n\n    "
    },
    {
        "ID": 1749,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def setup_configuration(config_path): \"\"\"Loads the core configuration from the specified path and uses its content for further setup :param config_path: Path to the core config file \"\"\" if config_path is not None: config_path, config_file = filesystem.separate_folder_path_and_file_name(config_path) global_config.load(config_file=config_file, path=config_path) else: global_config.load(path=config_path) # Initialize libraries core_singletons.library_manager.initialize()\n\n    ### Response: Loads the core configuration from the specified path and uses its content for further setup\n\n    :param config_path: Path to the core config file.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String getUrl(final HttpServletRequest request) { String servletPath = request.getServletPath(); String query = request.getQueryString(); if ((query != null) && (query.length() != 0)) { servletPath += '?' + query; } return servletPath; }\n\n    ### Response:",
        "ground_truth": "Returns url, without context path, convenient for request dispatcher.",
        "predict": " Loads the core configuration from the specified path and uses its content for further setup\n\n    :param config_path: Path to the core config file.\n\n    "
    },
    {
        "ID": 1750,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function doConstructorTask(constructor, task) { var finished; finished = finished_constitutors.get(constructor); if (!finished) { finished = []; finished_constitutors.set(constructor, finished); } if (finished.indexOf(task) == -1) { task.call(constructor); finished.push(task); } }\n\n    ### Response: Do the given task for a given constructor\n\n@author   Jelle De Loecker   \n@since    0.3.6\n@version  0.3.6\n\n@param    {Function}   constructor\n@param    {Function}   task.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String getRequestUri(final HttpServletRequest request) { String result = getIncludeRequestUri(request); if (result == null) { result = request.getRequestURI(); } return result; }\n\n    ### Response:",
        "ground_truth": "Get current request uri.",
        "predict": " Do the given task for a given constructor\n\n@author   Jelle De Loecker   \n@since    0.3.6\n@version  0.3.6\n\n@param    {Function}   constructor\n@param    {Function}   task.\n\n    "
    },
    {
        "ID": 1751,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func AcquireWriter(w io.Writer) *Writer { v := writerPool.Get() if v == nil { qw := &Writer{} qw.e.w = &htmlEscapeWriter{} v = qw } qw := v.(*Writer) qw.e.w.(*htmlEscapeWriter).w = w qw.n.w = w return qw }\n\n    ### Response: // AcquireWriter returns new writer from the pool.\n//\n// Return unneeded writer to the pool by calling ReleaseWriter\n// in order to reduce memory allocations..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String[] resolveParamNames(final Method actionClassMethod) { MethodParameter[] methodParameters = Paramo.resolveParameters(actionClassMethod); String[] names = new String[methodParameters.length]; for (int i = 0; i < methodParameters.length; i++) { names[i] = methodParameters[i].getName(); } return names; }\n\n    ### Response:",
        "ground_truth": "Returns method parameter names.",
        "predict": " // AcquireWriter returns new writer from the pool.\n//\n// Return unneeded writer to the pool by calling ReleaseWriter\n// in order to reduce memory allocations..\n\n    "
    },
    {
        "ID": 1752,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _build_service_uri(self, base_uri, partition, name): '''Build the proper uri for a service resource. This follows the scheme: <base_uri>/~<partition>~<<name>.app>~<name> :param base_uri: str -- base uri for container :param partition: str -- partition for this service :param name: str -- name of the service :returns: str -- uri to access this service ''' name = name.replace('/', '~') return '%s~%s~%s.app~%s' % (base_uri, partition, name, name)\n\n    ### Response: Build the proper uri for a service resource.\n\n        This follows the scheme:\n            /~~.app>~\n\n        :param base_uri: str -- base uri for container\n        :param partition: str -- partition for this service\n        :param name: str -- name of the service\n        :returns: str -- uri to access this service.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public void start() { initLogger(); log.info(\"PETITE start ----------\"); petiteContainer = createPetiteContainer(); if (externalsCache) { petiteContainer.setExternalsCache(TypeCache.createDefault()); } log.info(\"Web application? \" + isWebApplication); if (!isWebApplication) { // make session scope to act as singleton scope // if this is not a web application (and http session is not available). petiteContainer.registerScope(SessionScope.class, new SingletonScope(petiteContainer)); } // load parameters from properties files petiteContainer.defineParameters(joyPropsSupplier.get().getProps()); // automagic configuration if (autoConfiguration) { final AutomagicPetiteConfigurator automagicPetiteConfigurator = new AutomagicPetiteConfigurator(petiteContainer); automagicPetiteConfigurator.registerAsConsumer(joyScannerSupplier.get().getClassScanner()); } petiteContainerConsumers.accept(this.petiteContainer); log.info(\"PETITE OK!\"); }\n\n    ### Response:",
        "ground_truth": "Creates and initializes Petite container.\nIt will be auto-magically configured by scanning the classpath.",
        "predict": " Build the proper uri for a service resource.\n\n        This follows the scheme:\n            /~~.app>~\n\n        :param base_uri: str -- base uri for container\n        :param partition: str -- partition for this service\n        :param name: str -- name of the service\n        :returns: str -- uri to access this service.\n\n    "
    },
    {
        "ID": 1753,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public boolean isDateTimeAllowed(LocalDateTime value) { LocalDate datePortion = (value == null) ? null : value.toLocalDate(); LocalTime timePortion = (value == null) ? null : value.toLocalTime(); boolean isDateAllowed = datePicker.isDateAllowed(datePortion); boolean isTimeAllowed = timePicker.isTimeAllowed(timePortion); return (isDateAllowed && isTimeAllowed); }\n\n    ### Response: isDateTimeAllowed, This checks to see if the specified value is allowed by any currently set\nveto policies and \"allowEmptyValues\" settings of both the DatePicker and TimePicker\ncomponents.\n\nIf the specified value would be allowed by both components, then this returns true. If the\nspecified value would not be allowed by either or both components, then this returns false.\n\nFor additional details, see: DatePicker.isDateAllowed() and TimePicker.isTimeAllowed()..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public void stop() { if (log != null) { log.info(\"PETITE stop\"); } if (petiteContainer != null) { petiteContainer.shutdown(); } petiteContainer = null; }\n\n    ### Response:",
        "ground_truth": "Stops Petite container.",
        "predict": " isDateTimeAllowed, This checks to see if the specified value is allowed by any currently set\nveto policies and \"allowEmptyValues\" settings of both the DatePicker and TimePicker\ncomponents.\n\nIf the specified value would be allowed by both components, then this returns true. If the\nspecified value would not be allowed by either or both components, then this returns false.\n\nFor additional details, see: DatePicker.isDateAllowed() and TimePicker.isTimeAllowed()..\n\n    "
    },
    {
        "ID": 1754,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void removeReaction(Emoji emoji, boolean you) { Optional<Reaction> reaction = reactions.stream().filter(r -> emoji.equalsEmoji(r.getEmoji())).findAny(); reaction.ifPresent(r -> ((ReactionImpl) r).decrementCount(you)); reactions.removeIf(r -> r.getCount() <= 0); }\n\n    ### Response: Removes an emoji from the list of reactions.\n\n@param emoji The emoji.\n@param you Whether this reaction is used by you or not..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public EmailFilter subject(final String subject) { final SearchTerm subjectTerm = new SubjectTerm(subject); concat(subjectTerm); return this; }\n\n    ### Response:",
        "ground_truth": "Defines filter for SUBJECT field.\n\n@param subject The SUBJECT.\n@return this",
        "predict": " Removes an emoji from the list of reactions.\n\n@param emoji The emoji.\n@param you Whether this reaction is used by you or not..\n\n    "
    },
    {
        "ID": 1755,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def get_reactions(columns='all', n_results=20, write_db=False, **kwargs): \"\"\" Get reactions from server Give key value strings as arguments \"\"\" if write_db or columns == 'all': columns = all_columns['reactions'] queries = {} for key, value in kwargs.items(): key = map_column_names(key) if key == 'distinct': if value in [True, 'True', 'true']: queries.update({key: True}) continue if isinstance(value, int) or isinstance(value, float): queries.update({key: value}) else: queries.update({key: '{0}'.format(value)}) subtables = [] if write_db: subtables = ['reactionSystems', 'publication'] else: subtables = [] data = query(table='reactions', subtables=subtables, columns=columns, n_results=n_results, queries=queries) if not write_db: return data print('Writing result to Reactions.db') unique_ids = [] for row in data['reactions']['edges']: with CathubSQLite('Reactions.db') as db: row = row['node'] key_values = {} for key in all_columns['reactions']: v = row[key] # if isinstance(v, unicode): # v = v.encode('utf-8') try: v = json.loads(v) except BaseException: pass key_values[convert(key)] = v ase_ids = {} energy_corrections = {} for row_rs in row['reactionSystems']: if row_rs['name'] == 'N/A': continue ase_ids[row_rs['name']] = row_rs['aseId'] energy_corrections[row_rs['name']] = row_rs['energyCorrection'] if not ase_ids: ase_ids = None energy_corrections = None else: unique_ids += ase_ids.values() key_values['ase_ids'] = ase_ids key_values['energy_corrections'] = ase_ids # publications pub_key_values = {} row_p = row['publication'] for key in all_columns['publications']: pub_key_values[convert(key)] = row_p[key] db.write_publication(pub_key_values) # reactions and reaction_systems id = db.check(key_values['chemical_composition'], key_values['reaction_energy']) if id is None: id = db.write(key_values) else: db.update(id, key_values) if ase_ids is not None: # Ase structures with ase.db.connect('Reactions.db') as ase_db: con = ase_db.connection cur = con.cursor() cur.execute('SELECT unique_id from systems;') unique_ids0 = cur.fetchall() unique_ids0 = [un[0] for un in unique_ids0] unique_ids = [un for un in unique_ids if un not in unique_ids0] for unique_id in list(set(unique_ids)): # if ase_db.count('unique_id={}'.format(unique_id)) == 0: atomsrow = get_atomsrow_by_id(unique_id) ase_db.write(atomsrow) print('Writing complete!') return data\n\n    ### Response: Get reactions from server\n\n    Give key value strings as arguments.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public EmailFilter messageId(final String messageId) { final SearchTerm msgIdTerm = new MessageIDTerm(messageId); concat(msgIdTerm); return this; }\n\n    ### Response:",
        "ground_truth": "Defines filter for message id.\n\n@param messageId The message ID.\n@return this",
        "predict": " Get reactions from server\n\n    Give key value strings as arguments.\n\n    "
    },
    {
        "ID": 1756,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function reset() { $this->choiceCounter = 0; $this->setExploration(new SplStack()); $this->setExplorationMarker(array()); $this->setLastRendering(null); $this->setRenderingStack(new SplStack()); $this->setXmlBaseStack(new SplStack()); $this->setDocument(new DOMDocument('1.0', 'UTF-8')); $this->setStylesheets($this->getDocument()->createDocumentFragment()); $this->setCurrentInteraction(null); }\n\n    ### Response: Reset the engine to its initial state, in order\nto be ready for reuse i.e. render a new component. However,\nconfiguration such as policies are kept intact..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public EmailFilter from(final String fromAddress) { final SearchTerm fromTerm = new FromStringTerm(fromAddress); concat(fromTerm); return this; }\n\n    ### Response:",
        "ground_truth": "Defines filter for FROM field.\n\n@param fromAddress The FROM address\n@return this",
        "predict": " Reset the engine to its initial state, in order\nto be ready for reuse i.e. render a new component. However,\nconfiguration such as policies are kept intact..\n\n    "
    },
    {
        "ID": 1757,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function doShortcode($content) { if (false === strpos($content, '[')) { return $content; } if (empty($this->_shortcodes) || !is_array($this->_shortcodes)) return $content; /** * Clear content from ignore blocks */ $pattern = $this->getIgnorePattern(); $content = preg_replace_callback(\"~$pattern~isu\", ['self', '_stack'], $content); /** * parse nested */ $content = $this->parseContent($content); /** * Replase shorcodes in content */ $content = strtr($content, self::_stack()); return $content; }\n\n    ### Response: Parse shortcodes in given content\n@param string $content Content to parse for shortcodes\n@return string.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public EmailFilter to(final String toAddress) { final SearchTerm toTerm = new RecipientStringTerm(RecipientType.TO, toAddress); concat(toTerm); return this; }\n\n    ### Response:",
        "ground_truth": "Defines filter for TO field.\n\n@param toAddress The TO address.\n@return this",
        "predict": " Parse shortcodes in given content\n@param string $content Content to parse for shortcodes\n@return string.\n\n    "
    },
    {
        "ID": 1758,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _cast_value(value, _type): \"\"\" cast value to _type \"\"\" if _type.upper() == 'FLOAT64': return float64(value) elif _type.upper() == 'FLOAT32': return float32(value) elif _type.upper() == 'INT32': return int32(value) elif _type.upper() == 'UINT16': return uint16(value) elif _type.upper() == 'INT16': return int16(value) elif _type.upper() == 'BOOLEAN': return uint8(value) else: return float64(value)\n\n    ### Response: cast value to _type.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public EmailFilter cc(final String ccAddress) { final SearchTerm toTerm = new RecipientStringTerm(RecipientType.CC, ccAddress); concat(toTerm); return this; }\n\n    ### Response:",
        "ground_truth": "Defines filter for CC field.\n\n@param ccAddress CC addreses.\n@return this",
        "predict": " cast value to _type.\n\n    "
    },
    {
        "ID": 1759,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function getMaxAge() { if ($this->headers->hasCacheControlDirective('s-maxage')) { return (int) $this->headers->getCacheControlDirective('s-maxage'); } if ($this->headers->hasCacheControlDirective('max-age')) { return (int) $this->headers->getCacheControlDirective('max-age'); } if (NULL !== $this->getExpires()) { return $this->getExpires()->format('U') - $this->getDate()->format('U'); } return NULL; }\n\n    ### Response: Returns the number of seconds after the time specified in the response's Date\nheader when the response should no longer be considered fresh.\nFirst, it checks for a s-maxage directive, then a max-age directive, and then it falls\nback on an expires header. It returns null when no maximum age can be established.\n\n@return integer|null Number of seconds.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public EmailFilter bcc(final String bccAddress) { final SearchTerm toTerm = new RecipientStringTerm(RecipientType.BCC, bccAddress); concat(toTerm); return this; }\n\n    ### Response:",
        "ground_truth": "Defines filter for BCC field.\n\n@param bccAddress BCC address.\n@return this",
        "predict": " Returns the number of seconds after the time specified in the response's Date\nheader when the response should no longer be considered fresh.\nFirst, it checks for a s-maxage directive, then a max-age directive, and then it falls\nback on an expires header. It returns null when no maximum age can be established.\n\n@return integer|null Number of seconds.\n\n    "
    },
    {
        "ID": 1760,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (rs *Resources) Count() int { rs.mu.Lock() defer rs.mu.Unlock() return len(rs.resources) }\n\n    ### Response: // Count returns the number of resources currently held..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public EmailFilter flags(final Flags flags, final boolean value) { final SearchTerm flagTerm = new FlagTerm(flags, value); concat(flagTerm); return this; }\n\n    ### Response:",
        "ground_truth": "Defines filter for many flags at once.\n\n@param flags The {@link Flags} to filter on.\n@param value The {@link Flag} setting to check for.\n@return this",
        "predict": " // Count returns the number of resources currently held..\n\n    "
    },
    {
        "ID": 1761,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function cleanReferencingRowsCache($table = null, $viaColumn = null) { $this->result->cleanReferencingResultsCache($table, $viaColumn); }\n\n    ### Response: Cleans in-memory cache with referencing rows\n\n@param string|null $table\n@param string|null $viaColumn.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public EmailFilter flag(final Flag flag, final boolean value) { final Flags flags = new Flags(); flags.add(flag); return flags(flags, value); }\n\n    ### Response:",
        "ground_truth": "Defines filter for single flag.\n\n@param flag  The flag to filter on.\n@param value The {@link Flag} setting to check for.\n@return this",
        "predict": " Cleans in-memory cache with referencing rows\n\n@param string|null $table\n@param string|null $viaColumn.\n\n    "
    },
    {
        "ID": 1762,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def datasetScalarTimeStepChunk(lines, numberColumns, numberCells): \"\"\" Process the time step chunks for scalar datasets \"\"\" END_DATASET_TAG = 'ENDDS' # Define the result object result = {'iStatus': None, 'timestamp': None, 'cellArray': None, 'rasterText': None} # Split the chunks timeStep = pt.splitLine(lines.pop(0)) # Extract cells, ignoring the status indicators startCellsIndex = numberCells # Handle case when status cells are not included (istat = 0) iStatus = int(timeStep[1]) if iStatus == 0: startCellsIndex = 0 # Strip off ending dataset tag if END_DATASET_TAG in lines[-1]: lines.pop(-1) # Assemble the array string arrayString = '[[' columnCounter = 1 lenLines = len(lines) - 1 # Also assemble raster text field to preserve for spatial datasets rasterText = '' for index in range(startCellsIndex, len(lines)): # Check columns condition if columnCounter % numberColumns != 0 and index != lenLines: arrayString += lines[index].strip() + ', ' elif columnCounter % numberColumns == 0 and index != lenLines: arrayString += lines[index].strip() + '], [' elif index == lenLines: arrayString += lines[index].strip() + ']]' # Advance counter columnCounter += 1 rasterText += lines[index] # Get Value Array result['cellArray'] = arrayString result['rasterText'] = rasterText # Assign Result result['iStatus'] = iStatus result['timestamp'] = float(timeStep[2]) return result\n\n    ### Response: Process the time step chunks for scalar datasets.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public EmailFilter receivedDate(final Operator operator, final long milliseconds) { final SearchTerm term = new ReceivedDateTerm(operator.value, new Date(milliseconds)); concat(term); return this; }\n\n    ### Response:",
        "ground_truth": "Defines filter for received date.\n\n@return this",
        "predict": " Process the time step chunks for scalar datasets.\n\n    "
    },
    {
        "ID": 1763,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private function createObjectName($prefix, $table, $col, $type) { // max object name length is 30 chars return substr($prefix . $table . '_' . $col . '_' . $type, 0, 30); }\n\n    ### Response: Create an object name that limits to 30 chars.\n\n@param  string $prefix\n@param  string $table\n@param  string $col\n@param  string $type\n@return string.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public EmailFilter sentDate(final Operator operator, final long milliseconds) { final SearchTerm term = new SentDateTerm(operator.value, new Date(milliseconds)); concat(term); return this; }\n\n    ### Response:",
        "ground_truth": "Defines filter for sent date.\n\n@param operator     {@link Operator} to use.\n@param milliseconds the milliseconds since January 1, 1970, 00:00:00 GMT.\n@return this",
        "predict": " Create an object name that limits to 30 chars.\n\n@param  string $prefix\n@param  string $table\n@param  string $col\n@param  string $type\n@return string.\n\n    "
    },
    {
        "ID": 1764,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def prep_value(self, value): \"\"\" Prepare value before effectively render widget \"\"\" if value in MULTI_EMAIL_FIELD_EMPTY_VALUES: return \"\" elif isinstance(value, six.string_types): return value elif isinstance(value, list): return \"\\n\".join(value) raise ValidationError('Invalid format.')\n\n    ### Response: Prepare value before effectively render widget.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public EmailFilter size(final Operator comparison, final int size) { final SearchTerm term = new SizeTerm(comparison.value, size); concat(term); return this; }\n\n    ### Response:",
        "ground_truth": "Defines filter for message size.\n\n@param comparison {@link Operator}.\n@param size       size of message.\n@return this",
        "predict": " Prepare value before effectively render widget.\n\n    "
    },
    {
        "ID": 1765,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private function dumpArray(array &$value, $name): void { list($id, $ref) = $this->isReference($value); if ($ref===null) { $this->writer->writeArrayOpen($id, $name); foreach ($value as $key => &$item) { $this->recursiveDump($item, $key); } $this->writer->writeArrayClose($id, $name); } else { $this->writer->writeArrayReference($ref, $name); } }\n\n    ### Response: Dumps an array.\n\n@param array           $value The array.\n@param string|int|null $name  Variable name..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public EmailFilter and(final EmailFilter... emailFilters) { final SearchTerm[] searchTerms = new SearchTerm[emailFilters.length]; for (int i = 0; i < emailFilters.length; i++) { searchTerms[i] = emailFilters[i].searchTerm; } concat(new AndTerm(searchTerms)); return this; }\n\n    ### Response:",
        "ground_truth": "Defines AND group of filters.\n\n@param emailFilters array of {@link EmailFilter}s to AND.\n@return this",
        "predict": " Dumps an array.\n\n@param array           $value The array.\n@param string|int|null $name  Variable name..\n\n    "
    },
    {
        "ID": 1766,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @TargetApi(Build.VERSION_CODES.LOLLIPOP) public void setElegantTextHeight (boolean elegant){ if(Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) mInputView.setElegantTextHeight(elegant); }\n\n    ### Response: Set the TextView's elegant height metrics flag. This setting selects font\nvariants that have not been compacted to fit Latin-based vertical\nmetrics, and also increases top and bottom bounds to provide more space.\n\n@param elegant set the paint's elegant metrics flag.\n\n@attr ref android.R.styleable#TextView_elegantTextHeight.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public EmailFilter or(final EmailFilter... emailFilters) { final SearchTerm[] searchTerms = new SearchTerm[emailFilters.length]; for (int i = 0; i < emailFilters.length; i++) { searchTerms[i] = emailFilters[i].searchTerm; } concat(new OrTerm(searchTerms)); return this; }\n\n    ### Response:",
        "ground_truth": "Defines OR group of filters.\n\n@param emailFilters array of {@link EmailFilter}s to OR.\n@return this",
        "predict": " Set the TextView's elegant height metrics flag. This setting selects font\nvariants that have not been compacted to fit Latin-based vertical\nmetrics, and also increases top and bottom bounds to provide more space.\n\n@param elegant set the paint's elegant metrics flag.\n\n@attr ref android.R.styleable#TextView_elegantTextHeight.\n\n    "
    },
    {
        "ID": 1767,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def script_count_send(self, target_system, target_component, count, force_mavlink1=False): ''' This message is emitted as response to SCRIPT_REQUEST_LIST by the MAV to get the number of mission scripts. target_system : System ID (uint8_t) target_component : Component ID (uint8_t) count : Number of script items in the sequence (uint16_t) ''' return self.send(self.script_count_encode(target_system, target_component, count), force_mavlink1=force_mavlink1)\n\n    ### Response: This message is emitted as response to SCRIPT_REQUEST_LIST by the MAV\n                to get the number of mission scripts.\n\n                target_system             : System ID (uint8_t)\n                target_component          : Component ID (uint8_t)\n                count                     : Number of script items in the sequence (uint16_t).\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public EmailFilter not(final EmailFilter emailFilter) { final SearchTerm searchTerm = new NotTerm(emailFilter.searchTerm); concat(searchTerm); return this; }\n\n    ### Response:",
        "ground_truth": "Appends single filter as NOT.\n\n@param emailFilter {@link EmailFilter} to append.\n@return this",
        "predict": " This message is emitted as response to SCRIPT_REQUEST_LIST by the MAV\n                to get the number of mission scripts.\n\n                target_system             : System ID (uint8_t)\n                target_component          : Component ID (uint8_t)\n                count                     : Number of script items in the sequence (uint16_t).\n\n    "
    },
    {
        "ID": 1768,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function certificatePolicies(): Ext\\CertificatePoliciesExtension { /** @var Extension\\CertificatePoliciesExtension $certPolicies */ $certPolicies = $this->get(Ext\\Extension::OID_CERTIFICATE_POLICIES); return $certPolicies; }\n\n    ### Response: Get 'Certificate Policies' extension.\n\n@throws \\LogicException If extension is not present\n@return \\X509\\Certificate\\Extension\\CertificatePoliciesExtension.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void concat(SearchTerm searchTerm) { if (nextIsNot) { searchTerm = new NotTerm(searchTerm); nextIsNot = false; } if (operatorAnd) { and(searchTerm); } else { or(searchTerm); } }\n\n    ### Response:",
        "ground_truth": "Concatenates last search term with new one.\n\n@param searchTerm searchTerm {@link SearchTerm} concatenate.\n@see #and(SearchTerm)\n@see #or(SearchTerm)",
        "predict": " Get 'Certificate Policies' extension.\n\n@throws \\LogicException If extension is not present\n@return \\X509\\Certificate\\Extension\\CertificatePoliciesExtension.\n\n    "
    },
    {
        "ID": 1769,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private function calculateEndPoints($poid, $oid) { // from child... if ($this->map[\"type\"] == MAPTYPE_HORIZONTAL) { // connect from mid top... $x1 = $this->map[$oid]->x * $this->scale['x'] + ($this->labelDim['right'] - $this->labelDim['left'])/2 + $this->border; $y1 = $this->map[$oid]->y * $this->scale['y'] + $this->border - 1; } else { // connect from mid left... $x1 = $this->map[$oid]->x * $this->scale['x'] + $this->border - 1; $y1 = $this->map[$oid]->y * $this->scale['y'] + ($this->labelDim['bottom'] - $this->labelDim['top'])/2 + $this->border; } // ...to parent if ($this->map[\"type\"] == MAPTYPE_HORIZONTAL) { // ...to mid bottom $x2 = $this->map[$poid]->x * $this->scale['x'] + ($this->labelDim['right'] - $this->labelDim['left'])/2 + $this->border; $y2 = $this->map[$poid]->y * $this->scale['y'] + ($this->labelDim['bottom'] - $this->labelDim['top']) + $this->border + 1; } else { // ...to mid right $x2 = $this->map[$poid]->x * $this->scale['x'] + $this->labelDim['right'] - $this->labelDim['left'] + $this->border + 1; $y2 = $this->map[$poid]->y * $this->scale['y'] + ($this->labelDim['bottom'] - $this->labelDim['top'])/2 + $this->border; } return [new Position($x1, $y1, 0), new Position($x2, $y2, 0)]; }\n\n    ### Response: Calculate line end points.\n@param $poid The parent object's object id.\n@param $oid The object's object id.\n@return Array containing start and end position.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String encode(final byte[] bytes) { StringBuilder base32 = new StringBuilder((bytes.length * 8 + 4) / 5); int currByte, digit, i = 0; while (i < bytes.length) { // STEP 0; insert new 5 bits, leave 3 bits currByte = bytes[i++] & 255; base32.append(CHARS[currByte >> 3]); digit = (currByte & 7) << 2; if (i >= bytes.length) { base32.append(CHARS[digit]); break; } // STEP 3: insert 2 new bits, then 5 bits, leave 1 bit currByte = bytes[i++] & 255; base32.append(CHARS[digit | (currByte >> 6)]); base32.append(CHARS[(currByte >> 1) & 31]); digit = (currByte & 1) << 4; if (i >= bytes.length) { base32.append(CHARS[digit]); break; } // STEP 1: insert 4 new bits, leave 4 bit currByte = bytes[i++] & 255; base32.append(CHARS[digit | (currByte >> 4)]); digit = (currByte & 15) << 1; if (i >= bytes.length) { base32.append(CHARS[digit]); break; } // STEP 4: insert 1 new bit, then 5 bits, leave 2 bits currByte = bytes[i++] & 255; base32.append(CHARS[digit | (currByte >> 7)]); base32.append(CHARS[(currByte >> 2) & 31]); digit = (currByte & 3) << 3; if (i >= bytes.length) { base32.append(CHARS[digit]); break; } // STEP 2: insert 3 new bits, then 5 bits, leave 0 bit currByte = bytes[i++] & 255; base32.append(CHARS[digit | (currByte >> 5)]); base32.append(CHARS[currByte & 31]); } return base32.toString(); }\n\n    ### Response:",
        "ground_truth": "Encode an array of binary bytes into a Base32 string.",
        "predict": " Calculate line end points.\n@param $poid The parent object's object id.\n@param $oid The object's object id.\n@return Array containing start and end position.\n\n    "
    },
    {
        "ID": 1770,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private function isValidDomain($domain) { if (filter_var($domain, FILTER_VALIDATE_URL)) { return true; } $regex = '~^(https?:\\/\\/|(\\*\\.){1})?(\\w.+)(\\.)(?!\\s)(?!\\.\\*)(\\w{2,})$~i'; return (bool) preg_match($regex, $domain); }\n\n    ### Response: Check if the given domain is valid.\n\n@param string $domain\n@return bool.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected byte[] convertValueToArray(final Object value) { if (value instanceof Blob) { final Blob blob = (Blob) value; try { final long length = blob.length(); if (length > Integer.MAX_VALUE) { throw new TypeConversionException(\"Blob is too big.\"); } return blob.getBytes(1, (int) length); } catch (SQLException sex) { throw new TypeConversionException(value, sex); } } if (value instanceof File) { try { return FileUtil.readBytes((File) value); } catch (IOException ioex) { throw new TypeConversionException(value, ioex); } } if (value instanceof Collection) { final Collection collection = (Collection) value; final byte[] target = new byte[collection.size()]; int i = 0; for (final Object element : collection) { target[i] = convertType(element); i++; } return target; } if (value instanceof Iterable) { final Iterable iterable = (Iterable) value; final ArrayList<Byte> byteArrayList = new ArrayList<>(); for (final Object element : iterable) { final byte convertedValue = convertType(element); byteArrayList.add(Byte.valueOf(convertedValue)); } final byte[] array = new byte[byteArrayList.size()]; for (int i = 0; i < byteArrayList.size(); i++) { final Byte b = byteArrayList.get(i); array[i] = b.byteValue(); } return array; } if (value instanceof CharSequence) { final String[] strings = StringUtil.splitc(value.toString(), ArrayConverter.NUMBER_DELIMITERS); return convertArrayToArray(strings); } // everything else: return convertToSingleElementArray(value); }\n\n    ### Response:",
        "ground_truth": "Converts non-array value to array. Detects various\ntypes and collections, iterates them to make conversion\nand to create target array.",
        "predict": " Check if the given domain is valid.\n\n@param string $domain\n@return bool.\n\n    "
    },
    {
        "ID": 1771,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (s *creator) createGeneratePIN(ctx context.Context) (string, error) { length, err := termio.AskForInt(ctx, fmtfn(4, \"a\", \"How long?\"), 4) if err != nil { return \"\", err } return pwgen.GeneratePasswordCharset(length, \"0123456789\"), nil }\n\n    ### Response: // createGeneratePIN will walk through the PIN generation steps.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected boolean isGzipEligible(final HttpServletRequest request) { // request parameter name if (requestParameterName.length() != 0) { String forceGzipString = request.getParameter(requestParameterName); if (forceGzipString != null) { return Converter.get().toBooleanValue(forceGzipString, false); } } // extract uri String uri = request.getRequestURI(); if (uri == null) { return false; } uri = uri.toLowerCase(); boolean result = false; // check uri if (matches == null) { // match == * if (extensions == null) { // extensions == * return true; } // extension String extension = FileNameUtil.getExtension(uri); if (extension.length() > 0) { extension = extension.toLowerCase(); if (StringUtil.equalsOne(extension, extensions) != -1) { result = true; } } } else { if (wildcards) { result = Wildcard.matchPathOne(uri, matches) != -1; } else { for (String match : matches) { if (uri.contains(match)) { result = true; break; } } } } if ((result) && (excludes != null)) { if (wildcards) { if (Wildcard.matchPathOne(uri, excludes) != -1) { result = false; } } else { for (String exclude : excludes) { if (uri.contains(exclude)) { result = false; // excludes founded break; } } } } return result; }\n\n    ### Response:",
        "ground_truth": "Determine if request is eligible for GZipping.",
        "predict": " // createGeneratePIN will walk through the PIN generation steps.\n\n    "
    },
    {
        "ID": 1772,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (c *Client) Init() error { stdin, err := ioutil.ReadAll(os.Stdin) if err != nil { return errors.Annotate(err, \"failed to read stdin\").Err() } c.InitBuild = &pb.Build{} if err := proto.Unmarshal(stdin, c.InitBuild); err != nil { return errors.Annotate(err, \"failed to parse buildbucket.v2.Build from stdin\").Err() } if c.Logdog, err = bootstrap.Get(); err != nil { return err } buildTimestamp := c.BuildTimestamp if buildTimestamp.IsZero() { buildTimestamp = time.Now() } c.buildStream, err = c.Logdog.Client.NewStream(streamproto.Flags{ Name: streamproto.StreamNameFlag(BuildStreamName), Type: streamproto.StreamType(logpb.StreamType_DATAGRAM), ContentType: protoutil.BuildMediaType, Timestamp: clockflag.Time(buildTimestamp), }) return err }\n\n    ### Response: // Init initializes the client. Populates c.InitBuild and c.ButlerClient..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public List<Violation> validate(final Object target) { return validate(ValidationContext.resolveFor(target.getClass()), target); }\n\n    ### Response:",
        "ground_truth": "Validate object using context from the annotations.",
        "predict": " // Init initializes the client. Populates c.InitBuild and c.ButlerClient..\n\n    "
    },
    {
        "ID": 1773,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def get_export_data(self, file_format, queryset, *args, **kwargs): \"\"\" Returns file_format representation for given queryset. \"\"\" request = kwargs.pop(\"request\") if not self.has_export_permission(request): raise PermissionDenied resource_class = self.get_export_resource_class() data = resource_class(**self.get_export_resource_kwargs(request)).export(queryset, *args, **kwargs) export_data = file_format.export_data(data) return export_data\n\n    ### Response: Returns file_format representation for given queryset..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public List<Violation> validate(final ValidationContext ctx, final Object target, final String targetName) { for (Map.Entry<String, List<Check>> entry : ctx.map.entrySet()) { String name = entry.getKey(); Object value = BeanUtil.declaredSilent.getProperty(target, name); String valueName = targetName != null ? (targetName + '.' + name) : name; // move up ValidationConstraintContext vcc = new ValidationConstraintContext(this, target, valueName); for (Check check : entry.getValue()) { String[] checkProfiles = check.getProfiles(); if (!matchProfiles(checkProfiles)) { continue; } if (check.getSeverity() < severity) { continue; } ValidationConstraint constraint = check.getConstraint(); if (!constraint.isValid(vcc, value)) { addViolation(new Violation(valueName, target, value, check)); } } } return getViolations(); }\n\n    ### Response:",
        "ground_truth": "Performs validation of provided validation context and appends violations.",
        "predict": " Returns file_format representation for given queryset..\n\n    "
    },
    {
        "ID": 1774,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public HtmlPolicyBuilder allowElements( ElementPolicy policy, String... elementNames) { invalidateCompiledState(); for (String elementName : elementNames) { elementName = HtmlLexer.canonicalName(elementName); ElementPolicy newPolicy = ElementPolicy.Util.join( elPolicies.get(elementName), policy); // Don't remove if newPolicy is the always reject policy since we want // that to infect later allowElement calls for this particular element // name. rejects should have higher priority than allows. elPolicies.put(elementName, newPolicy); if (!textContainers.containsKey(elementName)) { if (METADATA.canContainPlainText(METADATA.indexForName(elementName))) { textContainers.put(elementName, true); } } } return this; }\n\n    ### Response: Allow the given elements with the given policy.\n\n@param policy May remove or add attributes, change the element name, or\ndeny the element..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void useProfile(final String profile) { if (profile == null) { return; } if (this.enabledProfiles == null) { this.enabledProfiles = new HashSet<>(); } this.enabledProfiles.add(profile); }\n\n    ### Response:",
        "ground_truth": "Enables single profile.",
        "predict": " Allow the given elements with the given policy.\n\n@param policy May remove or add attributes, change the element name, or\ndeny the element..\n\n    "
    },
    {
        "ID": 1775,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public SettingsPack connectionsLimit(int value) { sp.set_int(settings_pack.int_types.connections_limit.swigValue(), value); return this; }\n\n    ### Response: Sets a global limit on the number of connections opened. The number of\nconnections is set to a hard minimum of at least two per torrent, so\nif you set a too low connections limit, and open too many torrents,\nthe limit will not be met.\n\n@param value.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void useProfiles(final String... enabledProfiles) { if (enabledProfiles == null) { return; } if (this.enabledProfiles == null) { this.enabledProfiles = new HashSet<>(); } Collections.addAll(this.enabledProfiles, enabledProfiles); }\n\n    ### Response:",
        "ground_truth": "Enables list of profiles.",
        "predict": " Sets a global limit on the number of connections opened. The number of\nconnections is set to a hard minimum of at least two per torrent, so\nif you set a too low connections limit, and open too many torrents,\nthe limit will not be met.\n\n@param value.\n\n    "
    },
    {
        "ID": 1776,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function loadTemplate( $templateFile ) { // this function will load the requested template ($file includes full or relative pathname) // the code for the template will be modified to make it name safe, and then stored in // an array for later use // The id of the template will be returned for the user to operate on it later if ( !file_exists( $templateFile ) ) { return -1; } $code = implode( '', file( $templateFile ) ); if ( !strlen( $code ) ) { return; } $code = trim( $code ); if ( substr( $code, 0, 5 ) == '<?php' ) { $code = substr( $code, 5 ); } if ( substr( $code, -2 ) == '?>' ) { $code = substr( $code, 0, strlen( $code ) - 2 ); } if ( isset( $this->ez['numTemplates'] ) ) { $newNum = $this->ez['numTemplates']; $this->ez['numTemplates']++; } else { $newNum = 0; $this->ez['numTemplates'] = 1; $this->ez['templates'] = array(); } $this->ez['templates'][$newNum]['code'] = $code; return $newNum; }\n\n    ### Response: out a good way of doing this yet..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected boolean matchProfiles(final String[] checkProfiles) { // test for all profiles if ((checkProfiles != null) && (checkProfiles.length == 1) && checkProfiles[0].equals(ALL_PROFILES)) { return true; } if (enabledProfiles == null || enabledProfiles.isEmpty()) { if (validateAllProfilesByDefault) { return true; // all profiles are considered as enabled } // only default profile is enabled if ((checkProfiles == null) || (checkProfiles.length == 0)) { return true; } for (String profile : checkProfiles) { if (StringUtil.isEmpty(profile)) { return true; // default profile } if (profile.equals(DEFAULT_PROFILE)) { return true; } } return false; } // there are enabled profiles if ((checkProfiles == null) || (checkProfiles.length == 0)) { return enabledProfiles.contains(DEFAULT_PROFILE); } boolean result = false; for (String profile : checkProfiles) { boolean b = true; boolean must = false; if (StringUtil.isEmpty(profile)) { profile = DEFAULT_PROFILE; } else if (profile.charAt(0) == '-') { profile = profile.substring(1); b = false; } else if (profile.charAt(0) == '+') { profile = profile.substring(1); must = true; } if (enabledProfiles.contains(profile)) { if (!b) { return false; } result = true; } else { if (must) { return false; } } } return result; }\n\n    ### Response:",
        "ground_truth": "Determine if any of checks profiles is among enabled profiles.",
        "predict": " out a good way of doing this yet..\n\n    "
    },
    {
        "ID": 1777,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private int processDirty( char[] chars, int end, int i, char ch, int lastDirty, boolean fromTextNode) throws IOException { int startClean = lastDirty + 1; // if we have some clean characters accumulated // process them before the dirty one. if (i > startClean) { int lengthClean = i - startClean; m_writer.write(chars, startClean, lengthClean); } // process the \"dirty\" character if (CharInfo.S_LINEFEED == ch && fromTextNode) { m_writer.write(m_lineSep, 0, m_lineSepLen); } else { startClean = accumDefaultEscape( m_writer, (char)ch, i, chars, end, fromTextNode, false); i = startClean - 1; } // Return the index of the last character that we just processed // which is a dirty character. return i; }\n\n    ### Response: Process a dirty character and any preeceding clean characters\nthat were not yet processed.\n@param chars array of characters being processed\n@param end one (1) beyond the last character\nin chars to be processed\n@param i the index of the dirty character\n@param ch the character in chars[i]\n@param lastDirty the last dirty character previous to i\n@param fromTextNode true if the characters being processed are\nfrom a text node, false if they are from an attribute value.\n@return the index of the last character processed.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected Object parseRequestBody(final String body, final Class targetType) { return JsonParser.create().parse(body, targetType); }\n\n    ### Response:",
        "ground_truth": "Parses request body into the target type.",
        "predict": " Process a dirty character and any preeceding clean characters\nthat were not yet processed.\n@param chars array of characters being processed\n@param end one (1) beyond the last character\nin chars to be processed\n@param i the index of the dirty character\n@param ch the character in chars[i]\n@param lastDirty the last dirty character previous to i\n@param fromTextNode true if the characters being processed are\nfrom a text node, false if they are from an attribute value.\n@return the index of the last character processed.\n\n    "
    },
    {
        "ID": 1778,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public int getLength() { int length = 0; Iterator<V> it = this.values().iterator(); while (it.hasNext()) { length += ((ID3v2Frame) it.next()).getFrameLength(); } return length; }\n\n    ### Response: Returns the length in bytes of all the frames contained in this object.\n\n@return the length of all the frames contained in this object..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public long toMilliseconds() { double then = (fraction - JD_1970.fraction) * MILLIS_IN_DAY; then += (integer - JD_1970.integer) * MILLIS_IN_DAY; then += then > 0 ? 1.0e-6 : -1.0e-6; return (long) then; }\n\n    ### Response:",
        "ground_truth": "Converts to milliseconds.",
        "predict": " Returns the length in bytes of all the frames contained in this object.\n\n@return the length of all the frames contained in this object..\n\n    "
    },
    {
        "ID": 1779,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function getModelNamespace(string $name):string { if ($this->option('model')) { return $this->option('model'); } return 'App\\\\' . str_replace('Transformer', '', $name); }\n\n    ### Response: Get the full class path for the model.\n\n@param  string $name\n@return string.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public JulianDate add(final JulianDate jds) { int i = this.integer + jds.integer; double f = this.fraction + jds.fraction; return new JulianDate(i, f); }\n\n    ### Response:",
        "ground_truth": "Adds a JD to current instance.",
        "predict": " Get the full class path for the model.\n\n@param  string $name\n@return string.\n\n    "
    },
    {
        "ID": 1780,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function getParameterValues() { $values = array(); foreach ($this->parameters as $name => $parameter) { if (!$parameter->isRequired()) { $values[$name] = $parameter->getDefaultValue(); } } return $values; }\n\n    ### Response: Returns the default values of all optional parameters.\n\n@return array The default values..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public JulianDate sub(final JulianDate jds) { int i = this.integer - jds.integer; double f = this.fraction -jds.fraction; return new JulianDate(i, f); }\n\n    ### Response:",
        "ground_truth": "Subtracts a JD from current instance.",
        "predict": " Returns the default values of all optional parameters.\n\n@return array The default values..\n\n    "
    },
    {
        "ID": 1781,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func NewUpdateChecker(updater *Updater, ctx Context, tickDuration time.Duration, log Log) UpdateChecker { return UpdateChecker{ updater: updater, ctx: ctx, log: log, tickDuration: tickDuration, } }\n\n    ### Response: // NewUpdateChecker creates an update checker.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void set(final int i, double f) { integer = i; int fi = (int) f; f -= fi; integer += fi; if (f < 0) { f += 1; integer--; } this.fraction = f; }\n\n    ### Response:",
        "ground_truth": "Sets integer and fractional part with normalization.\nNormalization means that if double is out of range,\nvalues will be correctly fixed.",
        "predict": " // NewUpdateChecker creates an update checker.\n\n    "
    },
    {
        "ID": 1782,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func NewRepSocket() (*RepSocket, error) { s, err := NewSocket(AF_SP, REP) return &RepSocket{s}, err }\n\n    ### Response: // NewRepSocket creates a REP socket..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override protected void initialize(final char[] input) { super.initialize(input); this.tag = new ParsedTag(); this.doctype = new ParsedDoctype(); this.text = new char[1024]; this.textLen = 0; this.parsingTime = -1; }\n\n    ### Response:",
        "ground_truth": "Initializes parser.",
        "predict": " // NewRepSocket creates a REP socket..\n\n    "
    },
    {
        "ID": 1783,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def load(self, patterns, dirs, ignore=None): \"\"\"Load objects from the filesystem into the ``paths`` dictionary Also include an attribute on the object, ``relative_path`` which is the shortened, relative path the package/module \"\"\" for dir_ in dirs: dir_root = dir_ if os.path.exists(os.path.join(dir_, \"__init__.py\")): dir_root = os.path.abspath(os.path.join(dir_, os.pardir)) for path in self.find_files(patterns=patterns, dirs=[dir_], ignore=ignore): data = self.read_file(path=path) if data: data[\"relative_path\"] = os.path.relpath(path, dir_root) self.paths[path] = data\n\n    ### Response: Load objects from the filesystem into the ``paths`` dictionary\n\n        Also include an attribute on the object, ``relative_path`` which is the\n        shortened, relative path the package/module.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void emitComment(final int from, final int to) { if (config.enableConditionalComments) { // CC: downlevel-hidden starting if (match(CC_IF, from)) { int endBracketNdx = find(']', from + 3, to); CharSequence expression = charSequence(from + 1, endBracketNdx); ndx = endBracketNdx + 1; char c = input[ndx]; if (c != '>') { errorInvalidToken(); } visitor.condComment(expression, true, true, false); state = DATA_STATE; return; } if (to > CC_ENDIF2.length && match(CC_ENDIF2, to - CC_ENDIF2.length)) { // CC: downlevel-hidden ending visitor.condComment(_ENDIF, false, true, true); state = DATA_STATE; return; } } CharSequence comment = charSequence(from, to); visitor.comment(comment); commentStart = -1; }\n\n    ### Response:",
        "ground_truth": "Emits a comment. Also checks for conditional comments!",
        "predict": " Load objects from the filesystem into the ``paths`` dictionary\n\n        Also include an attribute on the object, ``relative_path`` which is the\n        shortened, relative path the package/module.\n\n    "
    },
    {
        "ID": 1784,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function addGlobalCustomArgs($custom_args) { if (current($custom_args) instanceof CustomArg) { foreach ($custom_args as $custom_arg) { $this->addGlobalCustomArg($custom_arg); } } else { foreach ($custom_args as $key => $value) { $this->addGlobalCustomArg($key, $value); } } }\n\n    ### Response: Adds multiple custom args to a Mail object\n\nNote that custom args added to Personalization objects override\nglobal custom args.\n\n@param array|CustomArg[] $custom_args Array of CustomArg objects\nor key/values.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void _error(String message) { if (config.calculatePosition) { Position currentPosition = position(ndx); message = message .concat(StringPool.SPACE) .concat(currentPosition.toString()); } else { message = message .concat(\" [@\") .concat(Integer.toString(ndx)) .concat(StringPool.RIGHT_SQ_BRACKET); } visitor.error(message); }\n\n    ### Response:",
        "ground_truth": "Prepares error message and reports it to the visitor.",
        "predict": " Adds multiple custom args to a Mail object\n\nNote that custom args added to Personalization objects override\nglobal custom args.\n\n@param array|CustomArg[] $custom_args Array of CustomArg objects\nor key/values.\n\n    "
    },
    {
        "ID": 1785,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (dbp *Process) ClearInternalBreakpoints() error { return dbp.breakpoints.ClearInternalBreakpoints(func(bp *proc.Breakpoint) error { if err := dbp.currentThread.ClearBreakpoint(bp); err != nil { return err } for _, thread := range dbp.threads { if thread.CurrentBreakpoint.Breakpoint == bp { thread.CurrentBreakpoint.Clear() } } return nil }) }\n\n    ### Response: // ClearInternalBreakpoints will clear all non-user set breakpoints. These\n// breakpoints are set for internal operations such as 'next'..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String createHash(final char[] password) { // Generate a random salt SecureRandom random = new SecureRandom(); byte[] salt = new byte[saltBytes]; random.nextBytes(salt); // Hash the password byte[] hash = pbkdf2(password, salt, pbkdf2Iterations, hashBytes); // format iterations:salt:hash return pbkdf2Iterations + \":\" + StringUtil.toHexString(salt) + \":\" + StringUtil.toHexString(hash); }\n\n    ### Response:",
        "ground_truth": "Returns a salted PBKDF2 hash of the password.\n\n@param password the password to hash\n@return a salted PBKDF2 hash of the password",
        "predict": " // ClearInternalBreakpoints will clear all non-user set breakpoints. These\n// breakpoints are set for internal operations such as 'next'..\n\n    "
    },
    {
        "ID": 1786,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def font_list(text=\"test\", test=False): \"\"\" Print all fonts. :param text : input text :type text : str :param test: test flag :type test: bool :return: None \"\"\" fonts = set(FONT_MAP.keys()) if test: fonts = fonts - set(TEST_FILTERED_FONTS) for item in sorted(list(fonts)): print(str(item) + \" : \") text_temp = text try: tprint(text_temp, str(item)) except Exception: print(FONT_ENVIRONMENT_WARNING)\n\n    ### Response: Print all fonts.\n\n    :param text : input text\n    :type text : str\n    :param test: test flag\n    :type test: bool\n    :return: None.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static byte[] pbkdf2(final char[] password, final byte[] salt, final int iterations, final int bytes) { PBEKeySpec spec = new PBEKeySpec(password, salt, iterations, bytes * 8); try { SecretKeyFactory skf = SecretKeyFactory.getInstance(PBKDF2_ALGORITHM); return skf.generateSecret(spec).getEncoded(); } catch (NoSuchAlgorithmException ignore) { return null; } catch (InvalidKeySpecException e) { throw new IllegalArgumentException(e); } }\n\n    ### Response:",
        "ground_truth": "Computes the PBKDF2 hash of a password.\n\n@param password the password to hash.\n@param salt the salt\n@param iterations the iteration count (slowness factor)\n@param bytes the length of the hash to compute in bytes\n@return the PBDKF2 hash of the password",
        "predict": " Print all fonts.\n\n    :param text : input text\n    :type text : str\n    :param test: test flag\n    :type test: bool\n    :return: None.\n\n    "
    },
    {
        "ID": 1787,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func HasDeployKey(keyID, repoID int64) bool { has, _ := x.Where(\"key_id = ? AND repo_id = ?\", keyID, repoID).Get(new(DeployKey)) return has }\n\n    ### Response: // HasDeployKey returns true if public key is a deploy key of given repository..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static byte[] fromHex(final String hex) { final byte[] binary = new byte[hex.length() / 2]; for (int i = 0; i < binary.length; i++) { binary[i] = (byte) Integer.parseInt(hex.substring(2 * i, 2 * i + 2), 16); } return binary; }\n\n    ### Response:",
        "ground_truth": "Converts a string of hexadecimal characters into a byte array.\n\n@param hex the hex string\n@return the hex string decoded into a byte array",
        "predict": " // HasDeployKey returns true if public key is a deploy key of given repository..\n\n    "
    },
    {
        "ID": 1788,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public final PArray getArray(final String key) { PArray result = optArray(key); if (result == null) { throw new ObjectMissingException(this, key); } return result; }\n\n    ### Response: Get a property as a array or throw exception.\n\n@param key the property name.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public ProviderDefinition[] resolveProviderDefinitions(final Class type, final String name) { return providerResolver.resolve(type, name); }\n\n    ### Response:",
        "ground_truth": "Resolves provider definition defined in a bean.",
        "predict": " Get a property as a array or throw exception.\n\n@param key the property name.\n\n    "
    },
    {
        "ID": 1789,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def delete!(force = false) if local? @lib.branch(@name, :force => force, :delete => true) else @lib.push(Process.server_name, nil, nil, :delete => @name) end end\n\n    ### Response: Delete this branch\n\n @param [Boolean] force should this force removal even if the branch has not been fully merged?\n\n @return [String] the output of running the git command.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public EmailAttachmentBuilder name(final String name) { if (name != null && !name.trim().isEmpty()) { this.name = name; } return this; }\n\n    ### Response:",
        "ground_truth": "Sets file name.\n\n@param name File name to set.\n@return this",
        "predict": " Delete this branch\n\n @param [Boolean] force should this force removal even if the branch has not been fully merged?\n\n @return [String] the output of running the git command.\n\n    "
    },
    {
        "ID": 1790,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private Animator prepareStyle2Animation() { AnimatorSet animation = new AnimatorSet(); ObjectAnimator progressAnimation = ObjectAnimator.ofFloat(drawable, CircularProgressDrawable.PROGRESS_PROPERTY, 0f, 1f); progressAnimation.setDuration(3600); progressAnimation.setInterpolator(new AccelerateDecelerateInterpolator()); ObjectAnimator colorAnimator = ObjectAnimator.ofInt(drawable, CircularProgressDrawable.RING_COLOR_PROPERTY, getResources().getColor(android.R.color.holo_red_dark), getResources().getColor(android.R.color.holo_green_light)); colorAnimator.setEvaluator(new ArgbEvaluator()); colorAnimator.setDuration(3600); animation.playTogether(progressAnimation, colorAnimator); return animation; }\n\n    ### Response: Style 2 animation will fill the outer ring while applying a color effect from red to green\n\n@return Animation.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected EmailAttachmentBuilder setContentIdFromNameIfMissing() { if (contentId == null) { if (name != null) { contentId(FileNameUtil.getName(name)); } else { contentId(NO_NAME); } } return this; }\n\n    ### Response:",
        "ground_truth": "Set content ID if it is missing.\n\n@return this\n@see #contentId(String)",
        "predict": " Style 2 animation will fill the outer ring while applying a color effect from red to green\n\n@return Animation.\n\n    "
    },
    {
        "ID": 1791,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private OriginalMapping getOriginalMappingForEntry(Entry entry) { if (entry.getSourceFileId() == UNMAPPED) { return null; } else { // Adjust the line/column here to be start at 1. Builder x = OriginalMapping.newBuilder() .setOriginalFile(sources[entry.getSourceFileId()]) .setLineNumber(entry.getSourceLine() + 1) .setColumnPosition(entry.getSourceColumn() + 1); if (entry.getNameId() != UNMAPPED) { x.setIdentifier(names[entry.getNameId()]); } return x.build(); } }\n\n    ### Response: Creates an \"OriginalMapping\" object for the given entry object..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected String resolveContentType(final String contentType) { if (contentType != null) { return contentType; } if (name == null) { return MimeTypes.MIME_APPLICATION_OCTET_STREAM; } final String extension = FileNameUtil.getExtension(name); return MimeTypes.getMimeType(extension); }\n\n    ### Response:",
        "ground_truth": "Resolves content type from all data.\n\n@param contentType Content type if we know it. {@code null} is fine to use.\n@return content type",
        "predict": " Creates an \"OriginalMapping\" object for the given entry object..\n\n    "
    },
    {
        "ID": 1792,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func GenCertificate() (cert tls.Certificate, err error) { rawCert, rawKey, err := generateKeyPair() if err != nil { return } return tls.X509KeyPair(rawCert, rawKey) }\n\n    ### Response: // GenCertificate generates a random TLS certificate..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    int computeAttributesSize() { symbolTable.addConstantUtf8(Constants.MODULE); // 6 attribute header bytes, 6 bytes for name, flags and version, and 5 * 2 bytes for counts. int size = 22 + requires.length + exports.length + opens.length + usesIndex.length + provides.length; if (packageCount > 0) { symbolTable.addConstantUtf8(Constants.MODULE_PACKAGES); // 6 attribute header bytes, and 2 bytes for package_count. size += 8 + packageIndex.length; } if (mainClassIndex > 0) { symbolTable.addConstantUtf8(Constants.MODULE_MAIN_CLASS); // 6 attribute header bytes, and 2 bytes for main_class_index. size += 8; } return size; }\n\n    ### Response:",
        "ground_truth": "Returns the size of the Module, ModulePackages and ModuleMainClass attributes generated by this\nModuleWriter. Also add the names of these attributes in the constant pool.\n\n@return the size in bytes of the Module, ModulePackages and ModuleMainClass attributes.",
        "predict": " // GenCertificate generates a random TLS certificate..\n\n    "
    },
    {
        "ID": 1793,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def get_withdrawals(self, currency=None, status=None, start=None, end=None, page=None, limit=None): \"\"\"Get deposit records for a currency https://docs.kucoin.com/#get-withdrawals-list :param currency: Name of currency (optional) :type currency: string :param status: optional - Status of deposit (PROCESSING, SUCCESS, FAILURE) :type status: string :param start: (optional) Start time as unix timestamp :type start: string :param end: (optional) End time as unix timestamp :type end: string :param page: (optional) Page to fetch :type page: int :param limit: (optional) Number of transactions :type limit: int .. code:: python withdrawals = client.get_withdrawals('NEO') :returns: ApiResponse .. code:: python { \"currentPage\": 1, \"pageSize\": 10, \"totalNum\": 1, \"totalPage\": 1, \"items\": [ { \"id\": \"5c2dc64e03aa675aa263f1ac\", \"address\": \"0x5bedb060b8eb8d823e2414d82acce78d38be7fe9\", \"memo\": \"\", \"currency\": \"ETH\", \"amount\": 1.0000000, \"fee\": 0.0100000, \"walletTxId\": \"3e2414d82acce78d38be7fe9\", \"isInner\": false, \"status\": \"FAILURE\", \"createdAt\": 1546503758000, \"updatedAt\": 1546504603000 } ] } :raises: KucoinResponseException, KucoinAPIException \"\"\" data = {} if currency: data['currency'] = currency if status: data['status'] = status if start: data['startAt'] = start if end: data['endAt'] = end if limit: data['pageSize'] = limit if page: data['page'] = page return self._get('withdrawals', True, data=data)\n\n    ### Response: Get deposit records for a currency\n\n        https://docs.kucoin.com/#get-withdrawals-list\n\n        :param currency: Name of currency (optional)\n        :type currency: string\n        :param status: optional - Status of deposit (PROCESSING, SUCCESS, FAILURE)\n        :type status: string\n        :param start: (optional) Start time as unix timestamp\n        :type start: string\n        :param end: (optional) End time as unix timestamp\n        :type end: string\n        :param page: (optional) Page to fetch\n        :type page: int\n        :param limit: (optional) Number of transactions\n        :type limit: int\n\n        .. code:: python\n\n            withdrawals = client.get_withdrawals('NEO')\n\n        :returns: ApiResponse\n\n        .. code:: python\n\n            {\n                \"currentPage\": 1,\n                \"pageSize\": 10,\n                \"totalNum\": 1,\n                \"totalPage\": 1,\n                \"items\": [\n                    {\n                        \"id\": \"5c2dc64e03aa675aa263f1ac\",\n                        \"address\": \"0x5bedb060b8eb8d823e2414d82acce78d38be7fe9\",\n                        \"memo\": \"\",\n                        \"currency\": \"ETH\",\n                        \"amount\": 1.0000000,\n                        \"fee\": 0.0100000,\n                        \"walletTxId\": \"3e2414d82acce78d38be7fe9\",\n                        \"isInner\": false,\n                        \"status\": \"FAILURE\",\n                        \"createdAt\": 1546503758000,\n                        \"updatedAt\": 1546504603000\n                    }\n                ]\n            }\n\n        :raises: KucoinResponseException, KucoinAPIException.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    void putAttributes(final ByteVector output) { // 6 bytes for name, flags and version, and 5 * 2 bytes for counts. int moduleAttributeLength = 16 + requires.length + exports.length + opens.length + usesIndex.length + provides.length; output .putShort(symbolTable.addConstantUtf8(Constants.MODULE)) .putInt(moduleAttributeLength) .putShort(moduleNameIndex) .putShort(moduleFlags) .putShort(moduleVersionIndex) .putShort(requiresCount) .putByteArray(requires.data, 0, requires.length) .putShort(exportsCount) .putByteArray(exports.data, 0, exports.length) .putShort(opensCount) .putByteArray(opens.data, 0, opens.length) .putShort(usesCount) .putByteArray(usesIndex.data, 0, usesIndex.length) .putShort(providesCount) .putByteArray(provides.data, 0, provides.length); if (packageCount > 0) { output .putShort(symbolTable.addConstantUtf8(Constants.MODULE_PACKAGES)) .putInt(2 + packageIndex.length) .putShort(packageCount) .putByteArray(packageIndex.data, 0, packageIndex.length); } if (mainClassIndex > 0) { output .putShort(symbolTable.addConstantUtf8(Constants.MODULE_MAIN_CLASS)) .putInt(2) .putShort(mainClassIndex); } }\n\n    ### Response:",
        "ground_truth": "Puts the Module, ModulePackages and ModuleMainClass attributes generated by this ModuleWriter\nin the given ByteVector.\n\n@param output where the attributes must be put.",
        "predict": " Get deposit records for a currency\n\n        https://docs.kucoin.com/#get-withdrawals-list\n\n        :param currency: Name of currency (optional)\n        :type currency: string\n        :param status: optional - Status of deposit (PROCESSING, SUCCESS, FAILURE)\n        :type status: string\n        :param start: (optional) Start time as unix timestamp\n        :type start: string\n        :param end: (optional) End time as unix timestamp\n        :type end: string\n        :param page: (optional) Page to fetch\n        :type page: int\n        :param limit: (optional) Number of transactions\n        :type limit: int\n\n        .. code:: python\n\n            withdrawals = client.get_withdrawals('NEO')\n\n        :returns: ApiResponse\n\n        .. code:: python\n\n            {\n                \"currentPage\": 1,\n                \"pageSize\": 10,\n                \"totalNum\": 1,\n                \"totalPage\": 1,\n                \"items\": [\n                    {\n                        \"id\": \"5c2dc64e03aa675aa263f1ac\",\n                        \"address\": \"0x5bedb060b8eb8d823e2414d82acce78d38be7fe9\",\n                        \"memo\": \"\",\n                        \"currency\": \"ETH\",\n                        \"amount\": 1.0000000,\n                        \"fee\": 0.0100000,\n                        \"walletTxId\": \"3e2414d82acce78d38be7fe9\",\n                        \"isInner\": false,\n                        \"status\": \"FAILURE\",\n                        \"createdAt\": 1546503758000,\n                        \"updatedAt\": 1546504603000\n                    }\n                ]\n            }\n\n        :raises: KucoinResponseException, KucoinAPIException.\n\n    "
    },
    {
        "ID": 1794,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def scansion(self,meter=None,conscious=False): \"\"\"Print out the parses and their violations in scansion format.\"\"\" meter=self.get_meter(meter) self.scansion_prepare(meter=meter,conscious=conscious) for line in self.lines(): try: line.scansion(meter=meter,conscious=conscious) except AttributeError: print \"!!! Line skipped [Unknown word]:\" print line print line.words() print\n\n    ### Response: Print out the parses and their violations in scansion format..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String decode(final String source, final String encoding) { return decode(source, encoding, false); }\n\n    ### Response:",
        "ground_truth": "Decodes URL elements. This method may be used for all\nparts of URL, except for the query parts, since it does\nnot decode the '+' character.\n@see #decodeQuery(String, String)",
        "predict": " Print out the parses and their violations in scansion format..\n\n    "
    },
    {
        "ID": 1795,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void cacheConnection(Connection connection, boolean closeExistingConnection) { if (this.connection != null && closeExistingConnection) { try { // make sure it is closed to free up any resources it was using this.connection.close(); } catch (JMSException e) { msglog.errorCannotCloseConnectionMemoryMightLeak(e); } } this.connection = connection; }\n\n    ### Response: To store a connection in this processor object, call this setter.\nIf there was already a cached connection, it will be closed.\n\nNOTE: Calling {@link #createConnection(ConnectionContext)} does\nnot set this processor's connection - that method only creates the\nconnection and puts that connection in the context. It does not save that\nconnection in this processor object. You must explicitly set the\nconnection via this method if you want that connection cached here. See\nalso {@link #createOrReuseConnection(ConnectionContext, boolean)}.\n\n@param connection the connection\n@param closeExistingConnection if true, and if there was already a connection\ncached, that connection will be closed. Otherwise\nit will be left alone but the new connection\nwill take its place.\n\n@see #createOrReuseConnection(ConnectionContext, boolean).\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String decodeQuery(final String source, final String encoding) { return decode(source, encoding, true); }\n\n    ### Response:",
        "ground_truth": "Decodes query name or value.",
        "predict": " To store a connection in this processor object, call this setter.\nIf there was already a cached connection, it will be closed.\n\nNOTE: Calling {@link #createConnection(ConnectionContext)} does\nnot set this processor's connection - that method only creates the\nconnection and puts that connection in the context. It does not save that\nconnection in this processor object. You must explicitly set the\nconnection via this method if you want that connection cached here. See\nalso {@link #createOrReuseConnection(ConnectionContext, boolean)}.\n\n@param connection the connection\n@param closeExistingConnection if true, and if there was already a connection\ncached, that connection will be closed. Otherwise\nit will be left alone but the new connection\nwill take its place.\n\n@see #createOrReuseConnection(ConnectionContext, boolean).\n\n    "
    },
    {
        "ID": 1796,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static KeyStore getKeyStore(String keystoreLocation, String keystoreType) throws NoSuchAlgorithmException, CertificateException, IOException, KeyStoreException { KeyStore keystore = KeyStore.getInstance(keystoreType); InputStream is = CipherUtil.class.getResourceAsStream(keystoreLocation); if (is == null) { is = new FileInputStream(keystoreLocation); } keystore.load(is, null); return keystore; }\n\n    ### Response: Returns a key store instance of the specified type from the specified resource.\n\n@param keystoreLocation Path to key store location.\n@param keystoreType Key store type.\n@return A key store instance.\n@throws NoSuchAlgorithmException If algorithm not supported.\n@throws CertificateException If certificate invalid.\n@throws IOException If IO exception.\n@throws KeyStoreException If key store invalid..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override @SuppressWarnings(\"unchecked\") public void start() { initLogger(); if (!databaseEnabled) { log.info(\"DB not enabled.\"); return; } log.info(\"DB start ----------\"); final PetiteContainer petiteContainer = joyPetiteSupplier.get().getPetiteContainer(); // connection pool connectionProvider = createConnectionProviderIfNotSupplied(); petiteContainer.addBean(beanNamePrefix() + \"pool\", connectionProvider); if (connectionProvider instanceof CoreConnectionPool) { final CoreConnectionPool pool = (CoreConnectionPool) connectionProvider; if (pool.getDriver() == null) { databaseEnabled = false; log.warn(\"DB configuration not set (\" + beanNamePrefix() + \"pool.*). DB will be disabled.\"); return; } } connectionProvider.init(); checkConnectionProvider(); // transactions manager jtxManager = createJtxTransactionManager(connectionProvider); jtxManager.setValidateExistingTransaction(true); final AnnotationTxAdviceManager annTxAdviceManager = new AnnotationTxAdviceManager(new LeanJtxWorker(jtxManager), jtxScopePattern); AnnotationTxAdviceSupport.manager = annTxAdviceManager; // create proxy joyProxettaSupplier.get().getProxetta().withAspect(createTxProxyAspects(annTxAdviceManager.getAnnotations())); final DbSessionProvider sessionProvider = new DbJtxSessionProvider(jtxManager); // querymap final long startTime = System.currentTimeMillis(); final QueryMap queryMap = new DbPropsQueryMap(); log.debug(\"Queries loaded in \" + (System.currentTimeMillis() - startTime) + \"ms.\"); log.debug(\"Total queries: \" + queryMap.size()); // dboom dbOom = DbOom.create() .withConnectionProvider(connectionProvider) .withSessionProvider(sessionProvider) .withQueryMap(queryMap) .get(); dbOom.connect(); final DbEntityManager dbEntityManager = dbOom.entityManager(); dbEntityManager.reset(); petiteContainer.addBean(beanNamePrefix() + \"query\", dbOom.queryConfig()); petiteContainer.addBean(beanNamePrefix() + \"oom\", dbOom.config()); // automatic configuration if (autoConfiguration) { final AutomagicDbOomConfigurator automagicDbOomConfigurator = new AutomagicDbOomConfigurator(dbEntityManager, true); automagicDbOomConfigurator.registerAsConsumer( joyScannerSupplier.get().getClassScanner()); } dbEntityManagerConsumers.accept(dbEntityManager); log.info(\"DB OK!\"); }\n\n    ### Response:",
        "ground_truth": "Initializes database. First, creates connection pool.\nand transaction manager. Then, Jodds DbEntityManager is\nconfigured. It is also configured automagically, by scanning\nthe class path for entities.",
        "predict": " Returns a key store instance of the specified type from the specified resource.\n\n@param keystoreLocation Path to key store location.\n@param keystoreType Key store type.\n@return A key store instance.\n@throws NoSuchAlgorithmException If algorithm not supported.\n@throws CertificateException If certificate invalid.\n@throws IOException If IO exception.\n@throws KeyStoreException If key store invalid..\n\n    "
    },
    {
        "ID": 1797,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (s *DockerServer) Start() error { // Start the internal service. if err := s.service.Start(); err != nil { klog.Errorf(\"Unable to start docker service\") return err } klog.V(2).Infof(\"Start dockershim grpc server\") l, err := util.CreateListener(s.endpoint) if err != nil { return fmt.Errorf(\"failed to listen on %q: %v\", s.endpoint, err) } // Create the grpc server and register runtime and image services. s.server = grpc.NewServer( grpc.MaxRecvMsgSize(maxMsgSize), grpc.MaxSendMsgSize(maxMsgSize), ) runtimeapi.RegisterRuntimeServiceServer(s.server, s.service) runtimeapi.RegisterImageServiceServer(s.server, s.service) go func() { if err := s.server.Serve(l); err != nil { klog.Fatalf(\"Failed to serve connections: %v\", err) } }() return nil }\n\n    ### Response: // Start starts the dockershim grpc server..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void checkConnectionProvider() { final Connection connection = connectionProvider.getConnection(); try { final DatabaseMetaData databaseMetaData = connection.getMetaData(); String name = databaseMetaData.getDatabaseProductName(); String version = databaseMetaData.getDatabaseProductVersion(); if (log.isInfoEnabled()) { log.info(\"Connected to database: \" + name + \" v\" + version); } } catch (SQLException sex) { log.error(\"DB connection failed: \", sex); } finally { connectionProvider.closeConnection(connection); } }\n\n    ### Response:",
        "ground_truth": "Checks if connection provider can return a connection.",
        "predict": " // Start starts the dockershim grpc server..\n\n    "
    },
    {
        "ID": 1798,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function locate($entity, Request $request, $template = null) { if (!$template) { $template = 'TenelevenGeolocatorBundle::results.html.twig'; } $provider = $this->getLocationProvider($entity); $form = $this->get('form.factory')->createNamed('', $provider->getFilterFormType(), null, array( 'method' => 'GET', 'csrf_protection' => false, 'allow_extra_fields' => true, )); foreach ($request->query->all() as $key => $value) { if ($form->has($key)) { continue; } $form->add($key, HiddenType::class, [ 'data' => $value, ]); } try { $form->handleRequest($request); } catch (QuotaExceeded $e) { $this->get('logger')->error($e->getMessage()); $this->get('session')->getFlashBag()->add('error', 'Sorry, this locator has exceeded the quota for location look-ups. Please try again at a later time.'); } if (!$form->isValid()) { return $this->render($template, array( 'map' => $map = $this->getMap(), 'form' => $form->createView() )); } $result = $provider->findLocations($form); $map = $this->buildMap($template, $result); return $this->render($template, array( 'form' => $form->createView(), 'result' => $result, 'map' => $map )); }\n\n    ### Response: Displays a geo-locator screen with map, form, and locations\n\n@param string  $entity   The entity key that the provider is registered under\n@param Request $request\n@param string  $template The template to render\n\n@return Response.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public MethodVisitor visitMethod(final int access, final String name, final String desc, final String signature, final String[] exceptions) { // if ((access & AsmUtil.ACC_FINAL) != 0) { // return null; // skip finals // } MethodSignatureVisitor msign = createMethodSignature(access, name, desc, signature, exceptions, thisReference, this.generics); String key = ProxettaAsmUtil.createMethodSignaturesKey(access, name, desc, thisReference); methodSignatures.put(key, msign); allMethodSignatures.add(msign.getCleanSignature()); return new MethodAnnotationReader(msign); }\n\n    ### Response:",
        "ground_truth": "Stores method signature for target method.",
        "predict": " Displays a geo-locator screen with map, form, and locations\n\n@param string  $entity   The entity key that the provider is registered under\n@param Request $request\n@param string  $template The template to render\n\n@return Response.\n\n    "
    },
    {
        "ID": 1799,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private function packageExists($slug, $package) { $path = Grav::instance()['locator']->findResource($package->package_type . '://' . $slug); Installer::isValidDestination($path); return Installer::lastErrorCode(); }\n\n    ### Response: Check if package exists\n\n@param string $slug\n@param Package $package\n@return int.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public void visitEnd() { // prepare class annotations if (classAnnotations != null) { annotations = classAnnotations.toArray(new AnnotationInfo[0]); classAnnotations = null; } List<String> superList = new ArrayList<>(); Set<String> allInterfaces = new HashSet<>(); if (nextInterfaces != null) { allInterfaces.addAll(nextInterfaces); } // check all public super methods that are not overridden in superclass while (nextSupername != null) { InputStream inputStream = null; ClassReader cr; try { inputStream = ClassLoaderUtil.getClassAsStream(nextSupername, classLoader); cr = new ClassReader(inputStream); } catch (IOException ioex) { throw new ProxettaException(\"Unable to inspect super class: \" + nextSupername, ioex); } finally { StreamUtil.close(inputStream); } superList.add(nextSupername); superClassReaders.add(cr); // remember the super class reader cr.accept(new SuperClassVisitor(), 0); if (cr.getInterfaces() != null) { Collections.addAll(allInterfaces, cr.getInterfaces()); } } superClasses = superList.toArray(new String[0]); // check all interface methods that are not overridden in super-interface Set<String> todoInterfaces = new HashSet<>(allInterfaces); Set<String> newCollectedInterfaces = new HashSet<>(); while (true) { for (String next : todoInterfaces) { InputStream inputStream = null; ClassReader cr; try { inputStream = ClassLoaderUtil.getClassAsStream(next, classLoader); cr = new ClassReader(inputStream); } catch (IOException ioex) { throw new ProxettaException(\"Unable to inspect super interface: \" + next, ioex); } finally { StreamUtil.close(inputStream); } superClassReaders.add(cr); // remember the super class reader cr.accept(new SuperClassVisitor(), 0); if (cr.getInterfaces() != null) { for (String newInterface : cr.getInterfaces()) { if (!allInterfaces.contains(newInterface) && !todoInterfaces.contains(newInterface)) { // new interface found newCollectedInterfaces.add(newInterface); } } } } // perform collection allInterfaces.addAll(todoInterfaces); if (newCollectedInterfaces.isEmpty()) { // no new interface found break; } todoInterfaces.clear(); todoInterfaces.addAll(newCollectedInterfaces); newCollectedInterfaces.clear(); } }\n\n    ### Response:",
        "ground_truth": "Stores signatures for all super public methods not already overridden by target class.\nAll this methods will be accepted for proxyfication.",
        "predict": " Check if package exists\n\n@param string $slug\n@param Package $package\n@return int.\n\n    "
    },
    {
        "ID": 1800,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function isolationLevel(string $level) { if (!empty($level)) { $this->isProfiling() && $this->getLogger()->info(\"Set transaction isolation level to '{$level}'\"); $this->execute(\"SET TRANSACTION ISOLATION LEVEL {$level}\"); } }\n\n    ### Response: Set transaction isolation level, this feature may not be supported by specific database\ndriver.\n\n@param string $level.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected MethodSignatureVisitor createMethodSignature( final int access, final String methodName, final String description, final String signature, final String[] exceptions, final String classname, final Map<String, String> declaredTypeGenerics) { MethodSignatureVisitor v = new MethodSignatureVisitor(methodName, access, classname, description, exceptions, signature, declaredTypeGenerics, this); new SignatureReader(signature != null ? signature : description).accept(v); return v; }\n\n    ### Response:",
        "ground_truth": "Creates method signature from method name.",
        "predict": " Set transaction isolation level, this feature may not be supported by specific database\ndriver.\n\n@param string $level.\n\n    "
    },
    {
        "ID": 1801,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function init(?string $configuration = 'stylesheets'): void { $config = Core::i()->config->getConfiguration($configuration); foreach ($config as $script) { $this->append($script); } }\n\n    ### Response: Get the stylesheets that are defined in the configuration.\n\n@param string|null $configuration The name of the settings array in the configuration\n\n@return array|void\n@throws \\Exception.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String toCsvString(final Object... elements) { StringBuilder line = new StringBuilder(); int last = elements.length -1; for (int i = 0; i < elements.length; i++) { if (elements[i] == null) { if (i != last) { line.append(FIELD_SEPARATOR); } continue; } String field = elements[i].toString(); // check for special cases int ndx = field.indexOf(FIELD_SEPARATOR); if (ndx == -1) { ndx = field.indexOf(FIELD_QUOTE); } if (ndx == -1) { if (field.startsWith(StringPool.SPACE) || field.endsWith(StringPool.SPACE)) { ndx = 1; } } if (ndx == -1) { ndx = StringUtil.indexOfChars(field, SPECIAL_CHARS); } // add field if (ndx != -1) { line.append(FIELD_QUOTE); } field = StringUtil.replace(field, StringPool.QUOTE, DOUBLE_QUOTE); line.append(field); if (ndx != -1) { line.append(FIELD_QUOTE); } // last if (i != last) { line.append(FIELD_SEPARATOR); } } return line.toString(); }\n\n    ### Response:",
        "ground_truth": "Parse fields as csv string,",
        "predict": " Get the stylesheets that are defined in the configuration.\n\n@param string|null $configuration The name of the settings array in the configuration\n\n@return array|void\n@throws \\Exception.\n\n    "
    },
    {
        "ID": 1802,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def add_cci(self,periods=14,cci_upper=100,cci_lower=-100, showbands=True,str=None,name='',**kwargs): \"\"\" Commodity Channel Indicator study to QuantFigure.studies Parameters: periods : int or list(int) Number of periods cci_upper : int Upper bands level default : 100 cci_lower : int Lower band level default : -100 showbands : boolean If True, then the cci_upper and cci_lower levels are displayed name : string Name given to the study str : string Label factory for studies The following wildcards can be used: {name} : Name of the column {study} : Name of the study {period} : Period used Examples: 'study: {study} - period: {period}' kwargs: legendgroup : bool If true, all legend items are grouped into a single one All formatting values available on iplot() \"\"\" study={'kind':'cci', 'name':name, 'params':{'periods':periods,'high':self._d['high'],'low':self._d['low'],'close':self._d['close'], 'str':str}, 'display':utils.merge_dict({'legendgroup':True,'cci_upper':cci_upper, 'cci_lower':cci_lower,'showbands':showbands},kwargs)} self._add_study(study)\n\n    ### Response: Commodity Channel Indicator study to QuantFigure.studies\n\n\t\tParameters:\n\t\t\tperiods : int or list(int)\n\t\t\t\tNumber of periods\n\t\t\tcci_upper : int\n\t\t\t\tUpper bands level\n\t\t\t\tdefault : 100\n\t\t\tcci_lower : int\n\t\t\t\tLower band level\n\t\t\t\tdefault : -100\n\t\t\tshowbands : boolean\n\t\t\t\tIf True, then the cci_upper and\n\t\t\t\tcci_lower levels are displayed\n\t\t\tname : string\n\t\t\t\tName given to the study\n\t\t\tstr : string\n\t\t\t\tLabel factory for studies\n\t\t\t\tThe following wildcards can be used:\n\t\t\t\t\t{name} : Name of the column\n\t\t\t\t\t{study} : Name of the study\n\t\t\t\t\t{period} : Period used\n\t\t\t\tExamples:\n\t\t\t\t\t'study: {study} - period: {period}'\n\t\tkwargs: \n\t\t\tlegendgroup : bool\n\t\t\t\tIf true, all legend items are grouped into a \n\t\t\t\tsingle one\n\t\t\tAll formatting values available on iplot().\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String[] toStringArray(final String line) { List<String> row = new ArrayList<>(); boolean inQuotedField = false; int fieldStart = 0; final int len = line.length(); for (int i = 0; i < len; i++) { char c = line.charAt(i); if (c == FIELD_SEPARATOR) { if (!inQuotedField) { // ignore we are quoting addField(row, line, fieldStart, i, inQuotedField); fieldStart = i + 1; } } else if (c == FIELD_QUOTE) { if (inQuotedField) { if (i + 1 == len || line.charAt(i + 1) == FIELD_SEPARATOR) { // we are already quoting - peek to see if this is the end of the field addField(row, line, fieldStart, i, inQuotedField); fieldStart = i + 2; i++; // and skip the comma inQuotedField = false; } } else if (fieldStart == i) { inQuotedField = true; // this is a beginning of a quote fieldStart++; // move field start } } } // add last field - but only if string was not empty if (len > 0 && fieldStart <= len) { addField(row, line, fieldStart, len, inQuotedField); } return row.toArray(new String[0]); }\n\n    ### Response:",
        "ground_truth": "Converts CSV line to string array.",
        "predict": " Commodity Channel Indicator study to QuantFigure.studies\n\n\t\tParameters:\n\t\t\tperiods : int or list(int)\n\t\t\t\tNumber of periods\n\t\t\tcci_upper : int\n\t\t\t\tUpper bands level\n\t\t\t\tdefault : 100\n\t\t\tcci_lower : int\n\t\t\t\tLower band level\n\t\t\t\tdefault : -100\n\t\t\tshowbands : boolean\n\t\t\t\tIf True, then the cci_upper and\n\t\t\t\tcci_lower levels are displayed\n\t\t\tname : string\n\t\t\t\tName given to the study\n\t\t\tstr : string\n\t\t\t\tLabel factory for studies\n\t\t\t\tThe following wildcards can be used:\n\t\t\t\t\t{name} : Name of the column\n\t\t\t\t\t{study} : Name of the study\n\t\t\t\t\t{period} : Period used\n\t\t\t\tExamples:\n\t\t\t\t\t'study: {study} - period: {period}'\n\t\tkwargs: \n\t\t\tlegendgroup : bool\n\t\t\t\tIf true, all legend items are grouped into a \n\t\t\t\tsingle one\n\t\t\tAll formatting values available on iplot().\n\n    "
    },
    {
        "ID": 1803,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (m *MockLambdaAPI) AddPermission(arg0 *lambda.AddPermissionInput) (*lambda.AddPermissionOutput, error) { ret := m.ctrl.Call(m, \"AddPermission\", arg0) ret0, _ := ret[0].(*lambda.AddPermissionOutput) ret1, _ := ret[1].(error) return ret0, ret1 }\n\n    ### Response: // AddPermission mocks base method.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public CtorInjectionPoint resolve(final Class type, final boolean useAnnotation) { // lookup methods ClassDescriptor cd = ClassIntrospector.get().lookup(type); CtorDescriptor[] allCtors = cd.getAllCtorDescriptors(); Constructor foundedCtor = null; Constructor defaultCtor = null; BeanReferences[] references = null; for (CtorDescriptor ctorDescriptor : allCtors) { Constructor<?> ctor = ctorDescriptor.getConstructor(); Class<?>[] paramTypes = ctor.getParameterTypes(); if (paramTypes.length == 0) { defaultCtor = ctor; // detects default ctors } if (!useAnnotation) { continue; } BeanReferences[] ctorReferences = referencesResolver.readAllReferencesFromAnnotation(ctor); if (ctorReferences == null) { continue; } if (foundedCtor != null) { throw new PetiteException(\"Two or more constructors are annotated as injection points in the bean: \" + type.getName()); } foundedCtor = ctor; references = ctorReferences; } if (foundedCtor == null) { // there is no annotated constructor if (allCtors.length == 1) { foundedCtor = allCtors[0].getConstructor(); } else { foundedCtor = defaultCtor; } if (foundedCtor == null) { // no matching ctor found // still this is not an error if bean is already instantiated. return CtorInjectionPoint.EMPTY; } references = referencesResolver.readAllReferencesFromAnnotation(foundedCtor); if (references == null) { references = new BeanReferences[0]; } } return new CtorInjectionPoint(foundedCtor, references); }\n\n    ### Response:",
        "ground_truth": "Resolves constructor injection point from type. Looks for single annotated constructor.\nIf no annotated constructors found, the total number of constructors will be checked.\nIf there is only one constructor, that one will be used as injection point. If more\nconstructors exist, the default one will be used as injection point. Otherwise, exception\nis thrown.",
        "predict": " // AddPermission mocks base method.\n\n    "
    },
    {
        "ID": 1804,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static final void registerPrimitiveClassPair(Class<?> left, Class<?> right) { PRIMITIVE_TYPE_COMPATIBLE_CLASSES.put(left, right); PRIMITIVE_TYPE_COMPATIBLE_CLASSES.put(right, left); }\n\n    ### Response: Just add two entries to the class compatibility map\n@param left\n@param right.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private ClassReader createAdviceClassReader(final Class<? extends ProxyAdvice> advice) { InputStream inputStream = null; try { inputStream = ClassLoaderUtil.getClassAsStream(advice); return new ClassReader(inputStream); } catch (IOException ioex) { throw new ProxettaException(ioex); } finally { StreamUtil.close(inputStream); } }\n\n    ### Response:",
        "ground_truth": "Creates advice's class reader.",
        "predict": " Just add two entries to the class compatibility map\n@param left\n@param right.\n\n    "
    },
    {
        "ID": 1805,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (d *Decoder) readUntil(sep byte) { for { b := d.readByte() if b == sep { return } d.buf.WriteByte(b) } }\n\n    ### Response: // reads data writing it to 'd.buf' until 'sep' byte is encountered, 'sep' byte\n// is consumed, but not included into the 'd.buf'.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private ClassReader getCachedAdviceClassReader(final Class<? extends ProxyAdvice> advice) { if (adviceClassReaderCache == null) { adviceClassReaderCache = TypeCache.createDefault(); } ClassReader adviceReader = adviceClassReaderCache.get(advice); if (adviceReader == null) { adviceReader = createAdviceClassReader(advice); adviceClassReaderCache.put(advice, adviceReader); } return adviceReader; }\n\n    ### Response:",
        "ground_truth": "Returns class reader for advice.",
        "predict": " // reads data writing it to 'd.buf' until 'sep' byte is encountered, 'sep' byte\n// is consumed, but not included into the 'd.buf'.\n\n    "
    },
    {
        "ID": 1806,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def validate_array(ary) correct_size = ary.size.equal?(3) correct_vals = ary.all?{ |val| val.is_a?(Integer) && val.between?(0, 255) } return true if correct_size && correct_vals raise ArgumentError, %|invalid value for PryTheme::RGB#validate_array(): \"#{ ary }\"| end\n\n    ### Response: Checks whether the +ary+ has correct number of elements and these elements\n are valid RGB numbers.\n\n @param [Array] ary\n @raise [ArgumentError] if the +ary+ is invalid\n @return [void].\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String encrypt(final String str) { try { byte[] utf8 = StringUtil.getBytes(str); // encode the string into bytes using utf-8 byte[] enc = ecipher.doFinal(utf8); // encrypt return Base64.encodeToString(enc); // encode bytes to base64 to get a string } catch (Throwable ignore) { return null; } }\n\n    ### Response:",
        "ground_truth": "Symmetrically encrypts the string.",
        "predict": " Checks whether the +ary+ has correct number of elements and these elements\n are valid RGB numbers.\n\n @param [Array] ary\n @raise [ArgumentError] if the +ary+ is invalid\n @return [void].\n\n    "
    },
    {
        "ID": 1807,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (m *DataTransmissionHandshake) Decode(buf []byte) { data := bytes.NewBuffer(buf) binary.Read(data, binary.LittleEndian, &m.SIZE) binary.Read(data, binary.LittleEndian, &m.WIDTH) binary.Read(data, binary.LittleEndian, &m.HEIGHT) binary.Read(data, binary.LittleEndian, &m.PACKETS) binary.Read(data, binary.LittleEndian, &m.TYPE) binary.Read(data, binary.LittleEndian, &m.PAYLOAD) binary.Read(data, binary.LittleEndian, &m.JPG_QUALITY) }\n\n    ### Response: // Decode accepts a packed byte array and populates the fields of the DataTransmissionHandshake.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String decrypt(String str) { try { str = StringUtil.replaceChar(str, ' ', '+'); // replace spaces with chars. byte[] dec = Base64.decode(str); // decode base64 to get bytes byte[] utf8 = dcipher.doFinal(dec); // decrypt return new String(utf8, UTF_8); // decode using utf-8 } catch (Throwable ignore) { return null; } }\n\n    ### Response:",
        "ground_truth": "Symmetrically decrypts the string.",
        "predict": " // Decode accepts a packed byte array and populates the fields of the DataTransmissionHandshake.\n\n    "
    },
    {
        "ID": 1808,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def discrete(self, vertices, scale=1.0, count=None): \"\"\" Discretize the Bezier curve. Parameters ------------- vertices : (n, 2) or (n, 3) float Points in space scale : float Scale of overall drawings (for precision) count : int Number of segments to return Returns ------------- discrete : (m, 2) or (m, 3) float Curve as line segments \"\"\" discrete = discretize_bezier(vertices[self.points], count=count, scale=scale) return self._orient(discrete)\n\n    ### Response: Discretize the Bezier curve.\n\n        Parameters\n        -------------\n        vertices : (n, 2) or (n, 3) float\n          Points in space\n        scale : float\n          Scale of overall drawings (for precision)\n        count : int\n          Number of segments to return\n\n        Returns\n        -------------\n        discrete : (m, 2) or (m, 3) float\n          Curve as line segments.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Logger getLogger(final String name) { if (loggers == null) { return loggerProvider.apply(name); } return loggers.computeIfAbsent(name, loggerProvider); }\n\n    ### Response:",
        "ground_truth": "Returns logger for given name. Repeated calls to this method with the\nsame argument should return the very same instance of the logger.",
        "predict": " Discretize the Bezier curve.\n\n        Parameters\n        -------------\n        vertices : (n, 2) or (n, 3) float\n          Points in space\n        scale : float\n          Scale of overall drawings (for precision)\n        count : int\n          Number of segments to return\n\n        Returns\n        -------------\n        discrete : (m, 2) or (m, 3) float\n          Curve as line segments.\n\n    "
    },
    {
        "ID": 1809,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def pretty_format(obj, indent=None): \"\"\" Pretty formats the given object as a string which is returned. If indent is None, a single line will be returned. \"\"\" if indent is None: if isinstance(obj, TLObject): obj = obj.to_dict() if isinstance(obj, dict): return '{}({})'.format(obj.get('_', 'dict'), ', '.join( '{}={}'.format(k, TLObject.pretty_format(v)) for k, v in obj.items() if k != '_' )) elif isinstance(obj, str) or isinstance(obj, bytes): return repr(obj) elif hasattr(obj, '__iter__'): return '[{}]'.format( ', '.join(TLObject.pretty_format(x) for x in obj) ) else: return repr(obj) else: result = [] if isinstance(obj, TLObject): obj = obj.to_dict() if isinstance(obj, dict): result.append(obj.get('_', 'dict')) result.append('(') if obj: result.append('\\n') indent += 1 for k, v in obj.items(): if k == '_': continue result.append('\\t' * indent) result.append(k) result.append('=') result.append(TLObject.pretty_format(v, indent)) result.append(',\\n') result.pop() # last ',\\n' indent -= 1 result.append('\\n') result.append('\\t' * indent) result.append(')') elif isinstance(obj, str) or isinstance(obj, bytes): result.append(repr(obj)) elif hasattr(obj, '__iter__'): result.append('[\\n') indent += 1 for x in obj: result.append('\\t' * indent) result.append(TLObject.pretty_format(x, indent)) result.append(',\\n') indent -= 1 result.append('\\t' * indent) result.append(']') else: result.append(repr(obj)) return ''.join(result)\n\n    ### Response: Pretty formats the given object as a string which is returned.\n        If indent is None, a single line will be returned..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void setName(final String name) { if (name.contains(\";\") || name.contains(\",\") || name.startsWith(\"$\")) { throw new IllegalArgumentException(\"Invalid cookie name:\" + name); } for (int n = 0; n < name.length(); n++) { char c = name.charAt(n); if (c <= 0x20 || c >= 0x7f) { throw new IllegalArgumentException(\"Invalid cookie name:\" + name); } } this.name = name; }\n\n    ### Response:",
        "ground_truth": "Sets the cookie name and checks for validity.",
        "predict": " Pretty formats the given object as a string which is returned.\n        If indent is None, a single line will be returned..\n\n    "
    },
    {
        "ID": 1810,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static <X> String createTypeId(AnnotatedType<X> annotatedType) { String id = createTypeId(annotatedType.getJavaClass(), annotatedType.getAnnotations(), annotatedType.getMethods(), annotatedType.getFields(), annotatedType.getConstructors()); String hash = hash(id); MetadataLogger.LOG.tracef(\"Generated AnnotatedType id hash for %s: %s\", id, hash); return hash; }\n\n    ### Response: Generates a unique signature for an annotated type. Members without\nannotations are omitted to reduce the length of the signature\n\n@param \n@param annotatedType\n@return hash of a signature for a concrete annotated type.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected ActionRequest createActionRequest( final String actionPath, final String[] actionPathChunks, final ActionRuntime actionRuntime, final Object action, final HttpServletRequest servletRequest, final HttpServletResponse servletResponse) { return new ActionRequest(this, actionPath, actionPathChunks, actionRuntime, action, servletRequest, servletResponse); }\n\n    ### Response:",
        "ground_truth": "",
        "predict": " Generates a unique signature for an annotated type. Members without\nannotations are omitted to reduce the length of the signature\n\n@param \n@param annotatedType\n@return hash of a signature for a concrete annotated type.\n\n    "
    },
    {
        "ID": 1811,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func Convert_config_SessionSecrets_To_v1_SessionSecrets(in *config.SessionSecrets, out *v1.SessionSecrets, s conversion.Scope) error { return autoConvert_config_SessionSecrets_To_v1_SessionSecrets(in, out, s) }\n\n    ### Response: // Convert_config_SessionSecrets_To_v1_SessionSecrets is an autogenerated conversion function..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override protected <R extends ActionFilter> R createWrapper(final Class<R> wrapperClass) { return petiteContainer.createBean(wrapperClass); }\n\n    ### Response:",
        "ground_truth": "Acquires filter from Petite container.",
        "predict": " // Convert_config_SessionSecrets_To_v1_SessionSecrets is an autogenerated conversion function..\n\n    "
    },
    {
        "ID": 1812,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def mydot(A, B): r\"\"\"Dot-product that can handle dense and sparse arrays Parameters ---------- A : numpy ndarray or scipy sparse matrix The first factor B : numpy ndarray or scipy sparse matrix The second factor Returns C : numpy ndarray or scipy sparse matrix The dot-product of A and B \"\"\" if issparse(A) : return A.dot(B) elif issparse(B): return (B.T.dot(A.T)).T else: return np.dot(A, B)\n\n    ### Response: r\"\"\"Dot-product that can handle dense and sparse arrays\n\n    Parameters\n    ----------\n    A : numpy ndarray or scipy sparse matrix\n        The first factor\n    B : numpy ndarray or scipy sparse matrix\n        The second factor\n\n    Returns\n    C : numpy ndarray or scipy sparse matrix\n        The dot-product of A and B.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void destroyBean(final BeanData beanData) { if (destroyableBeans == null) { return; } if (!isBeanDestroyable(beanData)) { return; } if (destroyableBeans.remove(beanData)) { beanData.callDestroyMethods(); } }\n\n    ### Response:",
        "ground_truth": "Removes destroyable bean from the list and calls it destroy methods.\nIf bean is not destroyable, does nothing. Bean gets destroyed only once.",
        "predict": " r\"\"\"Dot-product that can handle dense and sparse arrays\n\n    Parameters\n    ----------\n    A : numpy ndarray or scipy sparse matrix\n        The first factor\n    B : numpy ndarray or scipy sparse matrix\n        The second factor\n\n    Returns\n    C : numpy ndarray or scipy sparse matrix\n        The dot-product of A and B.\n\n    "
    },
    {
        "ID": 1813,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (d *Destination) IP(af AF) net.IP { switch af { case IPv4: return d.Backend.IPv4Addr case IPv6: return d.Backend.IPv6Addr } return nil }\n\n    ### Response: // IP returns the destination IP address for a given address family..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public void shutdown() { if (destroyableBeans == null) { return; } for (final BeanData destroyableBean : destroyableBeans) { destroyableBean.callDestroyMethods(); } destroyableBeans.clear(); }\n\n    ### Response:",
        "ground_truth": "Shutdowns the scope and calls all collected destroyable beans.",
        "predict": " // IP returns the destination IP address for a given address family..\n\n    "
    },
    {
        "ID": 1814,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (c *Cipher) Copy() *Cipher { // This optimization maybe not necessary. But without this function, we // need to maintain a table cache for newTableCipher and use lock to // protect concurrent access to that cache. // AES and DES ciphers does not return specific types, so it's difficult // to create copy. But their initizliation time is less than 4000ns on my // 2.26 GHz Intel Core 2 Duo processor. So no need to worry. // Currently, blow-fish and cast5 initialization cost is an order of // maganitude slower than other ciphers. (I'm not sure whether this is // because the current implementation is not highly optimized, or this is // the nature of the algorithm.) nc := *c nc.enc = nil nc.dec = nil return &nc }\n\n    ### Response: // Copy creates a new cipher at it's initial state..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public ReceivedEmail[] get() { if (fromFolder != null) { session.useFolder(fromFolder); } return session.receiveMessages(filter, flagsToSet, flagsToUnset, envelopeOnly, messages -> { if (targetFolder != null) { try { session.folder.copyMessages(messages, session.getFolder(targetFolder)); } catch (MessagingException e) { throw new MailException(\"Copying messages failed\"); } } }); }\n\n    ### Response:",
        "ground_truth": "Receives the emails as specified by the builder.",
        "predict": " // Copy creates a new cipher at it's initial state..\n\n    "
    },
    {
        "ID": 1815,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function execute(argv, bin, args, req) { var config = this.configure(); var errors = this.errors, scope = this, e; var dir = config.bin || dirname(argv[1]); var local = path.join(dir, bin); var exists = fs.existsSync(local); var data = {bin: bin, dir: dir, local: local, args: args}; if(!exists) { e = new ExecError(errors.EEXEC_NOENT.message, [bin], errors.EEXEC_NOENT.code); e.data = data; throw e; } var stat = fs.statSync(local); var ps = spawn(local, args, {stdio: [0, 1, 'pipe']}); req.process = ps; this.emit('exec', ps, local, args, req); ps.on('error', function(err){ error(scope, err, [bin]); }); // suppress the execvp() error so we can cleanly // present our own error message ps.stderr.on('data', function(data) { if(!/^execvp\\(\\)/.test(data.toString())) { process.stderr.write(data); } }) ps.on('close', function (code, signal) { // NOTE: workaround for https://github.com/joyent/node/issues/3222 // NOTE: assume child process exited gracefully on SIGINT if(signal == 'SIGINT') { return process.exit(0); } // TODO: remove this event? scope.emit('close', code, signal); if(config.exit) process.exit(code); }); return ps; }\n\n    ### Response: Execute a command as an external program.\n\n@param argv The program arguments.\n@param cmd The command to execute.\n@param args Array of arguments to pass to the command.\n@param req The request object for the middleware execution..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void main(final String[] args) { loadPropertiesFiles(args); try (ClusteredServiceContainer container = launch()) { container.context().shutdownSignalBarrier().await(); System.out.println(\"Shutdown ClusteredServiceContainer...\"); } }\n\n    ### Response:",
        "ground_truth": "Launch the clustered service container and await a shutdown signal.\n\n@param args command line argument which is a list for properties files as URLs or filenames.",
        "predict": " Execute a command as an external program.\n\n@param argv The program arguments.\n@param cmd The command to execute.\n@param args Array of arguments to pass to the command.\n@param req The request object for the middleware execution..\n\n    "
    },
    {
        "ID": 1816,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function addIndex($index) { if ($index instanceof Index) { if ($this->hasIndex($index->getName())) { throw new InvalidArgumentException(sprintf('Index \"%s\" already exist.', $index->getName())); } if (!$index->getColumns()) { throw new InvalidArgumentException(sprintf('Index \"%s\" has no columns.', $index->getName())); } $index->setTable($this); // force the name to be created if empty. $this->indices[] = $index; return $index; } $idx = new Index(); $idx->loadMapping($index); foreach((array)@$index['columns'] as $column) { $idx->addColumn($column); } return $this->addIndex($idx); }\n\n    ### Response: Adds a new index to the indices list and set the\nparent table of the column to the current table.\n\n@param  Index|array $index\n@return Index\n\n@throw  InvalidArgumentException.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void run() { do { LockSupport.parkNanos(parkNs); final long currentTotalMessages = totalMessages; final long currentTotalBytes = totalBytes; final long currentTimestamp = System.nanoTime(); final long timeSpanNs = currentTimestamp - lastTimestamp; final double messagesPerSec = ((currentTotalMessages - lastTotalMessages) * (double)reportIntervalNs) / (double)timeSpanNs; final double bytesPerSec = ((currentTotalBytes - lastTotalBytes) * (double)reportIntervalNs) / (double)timeSpanNs; reportingFunc.onReport(messagesPerSec, bytesPerSec, currentTotalMessages, currentTotalBytes); lastTotalBytes = currentTotalBytes; lastTotalMessages = currentTotalMessages; lastTimestamp = currentTimestamp; } while (!halt); }\n\n    ### Response:",
        "ground_truth": "Run loop for the rate reporter",
        "predict": " Adds a new index to the indices list and set the\nparent table of the column to the current table.\n\n@param  Index|array $index\n@return Index\n\n@throw  InvalidArgumentException.\n\n    "
    },
    {
        "ID": 1817,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func NewUniterAPIV5(context facade.Context) (*UniterAPIV5, error) { uniterAPI, err := NewUniterAPIV6(context) if err != nil { return nil, err } return &UniterAPIV5{ UniterAPIV6: *uniterAPI, }, nil }\n\n    ### Response: // NewUniterAPIV5 creates an instance of the V5 uniter API..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @SuppressWarnings(\"unused\") public static void printError( final String channel, final int streamId, final int sessionId, final String message, final HeaderFlyweight cause) { System.out.println(message); }\n\n    ### Response:",
        "ground_truth": "Generic error handler that just prints message to stdout.\n\n@param channel   for the error\n@param streamId  for the error\n@param sessionId for the error, if source\n@param message   indicating what the error was\n@param cause     of the error",
        "predict": " // NewUniterAPIV5 creates an instance of the V5 uniter API..\n\n    "
    },
    {
        "ID": 1818,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function generateBucketValue($bucketingKey) { $hashCode = $this->generateHashCode($bucketingKey); $ratio = $hashCode / Bucketer::$MAX_HASH_VALUE; $bucketVal = intval(floor($ratio * Bucketer::$MAX_TRAFFIC_VALUE)); /* murmurhash3_int returns both positive and negative integers for PHP x86 versions it returns negative integers when it tries to create 2^32 integers while PHP doesn't support unsigned integers and can store integers only upto 2^31. Observing generated hashcodes and their corresponding bucket values after normalization indicates that a negative bucket number on x86 is exactly 10,000 less than it's corresponding bucket number on x64. Hence we can safely add 10,000 to a negative number to make it consistent across both of the PHP variants. */ if ($bucketVal < 0) { $bucketVal += 10000; } return $bucketVal; }\n\n    ### Response: Generate an integer to be used in bucketing user to a particular variation.\n\n@param $bucketingKey string Value used for the key of the murmur hash.\n\n@return integer Value in the closed range [0, 9999] denoting the bucket the user belongs to..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void printRate( final double messagesPerSec, final double bytesPerSec, final long totalMessages, final long totalBytes) { System.out.println(String.format( \"%.02g msgs/sec, %.02g payload bytes/sec, totals %d messages %d MB\", messagesPerSec, bytesPerSec, totalMessages, totalBytes / (1024 * 1024))); }\n\n    ### Response:",
        "ground_truth": "Print the rates to stdout\n\n@param messagesPerSec being reported\n@param bytesPerSec    being reported\n@param totalMessages  being reported\n@param totalBytes     being reported",
        "predict": " Generate an integer to be used in bucketing user to a particular variation.\n\n@param $bucketingKey string Value used for the key of the murmur hash.\n\n@return integer Value in the closed range [0, 9999] denoting the bucket the user belongs to..\n\n    "
    },
    {
        "ID": 1819,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static function get_icon_for_extension($extension) { $extension = strtolower($extension); $module = ModuleLoader::getModule('silverstripe/framework'); $candidates = [ $extension, static::get_app_category($extension), 'generic' ]; foreach ($candidates as $candidate) { $resource = $module->getResource(\"client/images/app_icons/{$candidate}_92.png\"); if ($resource->exists()) { return $resource->getURL(); } } return null; }\n\n    ### Response: Given an extension, determine the icon that should be used\n\n@param string $extension\n@return string Icon filename relative to base url.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static MappedByteBuffer mapExistingFileReadOnly(final File location) { if (!location.exists()) { final String msg = \"file not found: \" + location.getAbsolutePath(); throw new IllegalStateException(msg); } MappedByteBuffer mappedByteBuffer = null; try (RandomAccessFile file = new RandomAccessFile(location, \"r\"); FileChannel channel = file.getChannel()) { mappedByteBuffer = channel.map(READ_ONLY, 0, channel.size()); } catch (final IOException ex) { LangUtil.rethrowUnchecked(ex); } return mappedByteBuffer; }\n\n    ### Response:",
        "ground_truth": "Map an existing file as a read only buffer.\n\n@param location of file to map.\n@return the mapped file.",
        "predict": " Given an extension, determine the icon that should be used\n\n@param string $extension\n@return string Icon filename relative to base url.\n\n    "
    },
    {
        "ID": 1820,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function isPublished() { $time = time(); $published = ($this->published && ($this->publicationStart == '' || $this->publicationStart < $time) && ($this->publicationStop == '' || $this->publicationStop > $time)); return $published; }\n\n    ### Response: Return if this category is published.\n\n@return\tbool\tTrue if this category is published..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void close() { final State state = this.state; if (State.CLOSED != state) { if (isReplayActive) { isReplayActive = false; archive.stopReplay(replaySessionId); } if (State.MERGED != state) { subscription.removeDestination(replayDestination); } state(State.CLOSED); } }\n\n    ### Response:",
        "ground_truth": "Close the merge and stop any active replay. Will remove the replay destination from the subscription. Will\nNOT remove the live destination if it has been added.",
        "predict": " Return if this category is published.\n\n@return\tbool\tTrue if this category is published..\n\n    "
    },
    {
        "ID": 1821,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def MAFFT(sequences, gap_open=1.53, gap_extension=0.0, retree=2): '''A Coral wrapper for the MAFFT command line multiple sequence aligner. :param sequences: A list of sequences to align. :type sequences: List of homogeneous sequences (all DNA, or all RNA, etc.) :param gap_open: --op (gap open) penalty in MAFFT cli. :type gap_open: float :param gap_extension: --ep (gap extension) penalty in MAFFT cli. :type gap_extension: float :param retree: Number of times to build the guide tree. :type retree: int ''' arguments = ['mafft'] arguments += ['--op', str(gap_open)] arguments += ['--ep', str(gap_extension)] arguments += ['--retree', str(retree)] arguments.append('input.fasta') tempdir = tempfile.mkdtemp() try: with open(os.path.join(tempdir, 'input.fasta'), 'w') as f: for i, sequence in enumerate(sequences): if hasattr(sequence, 'name'): name = sequence.name else: name = 'sequence{}'.format(i) f.write('>{}\\n'.format(name)) f.write(str(sequence) + '\\n') process = subprocess.Popen(arguments, stdout=subprocess.PIPE, stderr=open(os.devnull, 'w'), cwd=tempdir) stdout = process.communicate()[0] finally: shutil.rmtree(tempdir) # Process stdout into something downstream process can use records = stdout.split('>') # First line is now blank records.pop(0) aligned_list = [] for record in records: lines = record.split('\\n') name = lines.pop(0) aligned_list.append(coral.DNA(''.join(lines))) return aligned_list\n\n    ### Response: A Coral wrapper for the MAFFT command line multiple sequence aligner.\n\n    :param sequences: A list of sequences to align.\n    :type sequences: List of homogeneous sequences (all DNA, or all RNA,\n                     etc.)\n    :param gap_open: --op (gap open) penalty in MAFFT cli.\n    :type gap_open: float\n    :param gap_extension: --ep (gap extension) penalty in MAFFT cli.\n    :type gap_extension: float\n    :param retree: Number of times to build the guide tree.\n    :type retree: int.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public int doWork() { int workCount = 0; switch (state) { case AWAIT_INITIAL_RECORDING_POSITION: workCount += awaitInitialRecordingPosition(); break; case AWAIT_REPLAY: workCount += awaitReplay(); break; case AWAIT_CATCH_UP: workCount += awaitCatchUp(); break; case AWAIT_CURRENT_RECORDING_POSITION: workCount += awaitUpdatedRecordingPosition(); break; case AWAIT_STOP_REPLAY: workCount += awaitStopReplay(); break; } return workCount; }\n\n    ### Response:",
        "ground_truth": "Process the operation of the merge. Do not call the processing of fragments on the subscription.\n\n@return indication of work done processing the merge.",
        "predict": " A Coral wrapper for the MAFFT command line multiple sequence aligner.\n\n    :param sequences: A list of sequences to align.\n    :type sequences: List of homogeneous sequences (all DNA, or all RNA,\n                     etc.)\n    :param gap_open: --op (gap open) penalty in MAFFT cli.\n    :type gap_open: float\n    :param gap_extension: --ep (gap extension) penalty in MAFFT cli.\n    :type gap_extension: float\n    :param retree: Number of times to build the guide tree.\n    :type retree: int.\n\n    "
    },
    {
        "ID": 1822,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def observe(self, callback, err_callback, duration=60): \"\"\"Observe resource and call callback when updated.\"\"\" def observe_callback(value): \"\"\" Called when end point is updated. Returns a Command. \"\"\" self.raw = value callback(self) return Command('get', self.path, process_result=observe_callback, err_callback=err_callback, observe=True, observe_duration=duration)\n\n    ### Response: Observe resource and call callback when updated..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public long position() { if (isClosed) { return CLOSED; } final long rawTail = rawTailVolatile(logMetaDataBuffer); final int termOffset = termOffset(rawTail, termBufferLength); return computePosition(termId(rawTail), termOffset, positionBitsToShift, initialTermId); }\n\n    ### Response:",
        "ground_truth": "Get the current position to which the publication has advanced for this stream.\n\n@return the current position to which the publication has advanced for this stream or {@link #CLOSED}.",
        "predict": " Observe resource and call callback when updated..\n\n    "
    },
    {
        "ID": 1823,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def wav_length(fn: str) -> float: \"\"\" Returns the length of the WAV file in seconds.\"\"\" args = [config.SOX_PATH, fn, \"-n\", \"stat\"] p = subprocess.Popen( args, stdin=PIPE, stdout=PIPE, stderr=PIPE) length_line = str(p.communicate()[1]).split(\"\\\\n\")[1].split() print(length_line) assert length_line[0] == \"Length\" return float(length_line[-1])\n\n    ### Response: Returns the length of the WAV file in seconds..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public long offer(final DirectBufferVector[] vectors, final ReservedValueSupplier reservedValueSupplier) { final int length = DirectBufferVector.validateAndComputeLength(vectors); long newPosition = CLOSED; if (!isClosed) { final long limit = positionLimit.getVolatile(); final ExclusiveTermAppender termAppender = termAppenders[activePartitionIndex]; final long position = termBeginPosition + termOffset; if (position < limit) { final int result; if (length <= maxPayloadLength) { result = termAppender.appendUnfragmentedMessage( termId, termOffset, headerWriter, vectors, length, reservedValueSupplier); } else { checkMaxMessageLength(length); result = termAppender.appendFragmentedMessage( termId, termOffset, headerWriter, vectors, length, maxPayloadLength, reservedValueSupplier); } newPosition = newPosition(result); } else { newPosition = backPressureStatus(position, length); } } return newPosition; }\n\n    ### Response:",
        "ground_truth": "Non-blocking publish by gathering buffer vectors into a message.\n\n@param vectors               which make up the message.\n@param reservedValueSupplier {@link ReservedValueSupplier} for the frame.\n@return The new stream position, otherwise a negative error value of {@link #NOT_CONNECTED},\n{@link #BACK_PRESSURED}, {@link #ADMIN_ACTION}, {@link #CLOSED}, or {@link #MAX_POSITION_EXCEEDED}.",
        "predict": " Returns the length of the WAV file in seconds..\n\n    "
    },
    {
        "ID": 1824,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function nodeRank($key, ?RedBlackNode $node): int { if ($node === null) { return 0; } $comp = $this->comparator->compare($key, $node->key()); if ($comp < 0) { return $this->nodeRank($key, $node->left()); } if ($comp > 0) { return 1 + $this->nodeSize($node->left()) + $this->nodeRank($key, $node->right()); } return $this->nodeSize($node->left()); }\n\n    ### Response: Retrieves the rank for a key in a subtree\n\n@param mixed             $key  The key\n@param RedBlackNode|null $node The subtree root\n\n@return int.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public long appendPadding(final int length) { checkMaxMessageLength(length); long newPosition = CLOSED; if (!isClosed) { final long limit = positionLimit.getVolatile(); final ExclusiveTermAppender termAppender = termAppenders[activePartitionIndex]; final long position = termBeginPosition + termOffset; if (position < limit) { checkPositiveLength(length); final int result = termAppender.appendPadding(termId, termOffset, headerWriter, length); newPosition = newPosition(result); } else { newPosition = backPressureStatus(position, length); } } return newPosition; }\n\n    ### Response:",
        "ground_truth": "Append a padding record log of a given length to make up the log to a position.\n\n@param length of the range to claim, in bytes..\n@return The new stream position, otherwise a negative error value of {@link #NOT_CONNECTED},\n{@link #BACK_PRESSURED}, {@link #ADMIN_ACTION}, {@link #CLOSED}, or {@link #MAX_POSITION_EXCEEDED}.\n@throws IllegalArgumentException if the length is greater than {@link #maxMessageLength()}.",
        "predict": " Retrieves the rank for a key in a subtree\n\n@param mixed             $key  The key\n@param RedBlackNode|null $node The subtree root\n\n@return int.\n\n    "
    },
    {
        "ID": 1825,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Snippet getSnippet(Integer snippetId, boolean downloadContent) throws GitLabApiException { if (snippetId == null) { throw new RuntimeException(\"snippetId can't be null\"); } Response response = get(Response.Status.OK, null, \"snippets\", snippetId); Snippet snippet = response.readEntity(Snippet.class); if (downloadContent) { snippet.setContent(getSnippetContent(snippet.getId())); } return snippet; }\n\n    ### Response: Get a specific Snippet.\n\n@param snippetId the snippet ID to get\n@param downloadContent indicating whether to download the snippet content\n@return the snippet with the given id\n@throws GitLabApiException if any exception occurs.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void close() { lock.lock(); try { if (!isClosed) { isClosed = true; archiveProxy.closeSession(controlSessionId); if (!context.ownsAeronClient()) { CloseHelper.close(controlResponsePoller.subscription()); CloseHelper.close(archiveProxy.publication()); } context.close(); } } finally { lock.unlock(); } }\n\n    ### Response:",
        "ground_truth": "Notify the archive that this control session is closed so it can promptly release resources then close the\nlocal resources associated with the client.",
        "predict": " Get a specific Snippet.\n\n@param snippetId the snippet ID to get\n@param downloadContent indicating whether to download the snippet content\n@return the snippet with the given id\n@throws GitLabApiException if any exception occurs.\n\n    "
    },
    {
        "ID": 1826,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (s *service) Edit(reqDTO rest.RequestDTO) (resDTO rest.ResponseDTO, error *servicehelper.Error) { entity, err := s.repo.FindByPublicId(reqDTO.PublicId) if err != nil { return rest.ResponseDTO{}, &servicehelper.Error{Detail: errors.New(\"no result found\"), Code: servicehelper.NotFound} } entity.FirstName = reqDTO.FirstName entity.LastName = reqDTO.LastName entity.ProfilePictureUrl = reqDTO.ProfilePictureUrl birthday, err := time.Parse(\"2006-01-02\", reqDTO.Birthday) if err != nil { return rest.ResponseDTO{}, &servicehelper.Error{Detail: errors.New(\"birthday is malformed\"), Code: servicehelper.BadRequest} } entity.Birthday = &birthday if err := s.repo.Update(entity); err != nil { return rest.ResponseDTO{}, &servicehelper.Error{ Detail: errors.New(\"could not update profile\"), Message: \"We could not update the profile, please contact us or try again later\", Code: servicehelper.UnexpectedError} } return createDTOFromEntity(entity) }\n\n    ### Response: // Edit edit user profile and ask database to save changes.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String pollForErrorResponse() { lock.lock(); try { ensureOpen(); if (controlResponsePoller.poll() != 0 && controlResponsePoller.isPollComplete()) { if (controlResponsePoller.controlSessionId() == controlSessionId && controlResponsePoller.templateId() == ControlResponseDecoder.TEMPLATE_ID && controlResponsePoller.code() == ControlResponseCode.ERROR) { return controlResponsePoller.errorMessage(); } } return null; } finally { lock.unlock(); } }\n\n    ### Response:",
        "ground_truth": "Poll the response stream once for an error. If another message is present then it will be skipped over\nso only call when not expecting another response.\n\n@return the error String otherwise null if no error is found.",
        "predict": " // Edit edit user profile and ask database to save changes.\n\n    "
    },
    {
        "ID": 1827,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public BranchEvent setCoupon(String coupon) { return addStandardProperty(Defines.Jsonkey.Coupon.getKey(), coupon); }\n\n    ### Response: Set any coupons associated with this transaction event\n\n@param coupon {@link String } with any coupon value\n@return This object for chaining builder methods.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void stopReplay(final long replaySessionId) { lock.lock(); try { ensureOpen(); final long correlationId = aeron.nextCorrelationId(); if (!archiveProxy.stopReplay(replaySessionId, correlationId, controlSessionId)) { throw new ArchiveException(\"failed to send stop replay request\"); } pollForResponse(correlationId); } finally { lock.unlock(); } }\n\n    ### Response:",
        "ground_truth": "Stop a replay session.\n\n@param replaySessionId to stop replay for.",
        "predict": " Set any coupons associated with this transaction event\n\n@param coupon {@link String } with any coupon value\n@return This object for chaining builder methods.\n\n    "
    },
    {
        "ID": 1828,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function parseDependentKeys(callExp) { // Check whether we have a MemberExpression, eg. computed(...).volatile() const isMemberExpCallExp = !callExp.arguments.length && utils.isMemberExpression(callExp.callee) && utils.isCallExpression(callExp.callee.object); const args = isMemberExpCallExp ? callExp.callee.object.arguments : callExp.arguments; const dependentKeys = args .filter(arg => utils.isLiteral(arg)) .map(literal => literal.value); return unwrapBraceExpressions(dependentKeys); }\n\n    ### Response: Parses dependent keys from call expression and returns them in an array.\n\nIt also unwraps the expressions, so that `model.{foo,bar}` becomes `model.foo, model.bar`.\n\n@param  {CallExpression} callExp CallExpression to examine\n@return {String[]}       Array of unwrapped dependent keys.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void eventAvailableImage(final Image image) { final Subscription subscription = image.subscription(); System.out.format( \"new image on %s streamId %x sessionId %x from %s%n\", subscription.channel(), subscription.streamId(), image.sessionId(), image.sourceIdentity()); }\n\n    ### Response:",
        "ground_truth": "Print the information for an available image to stdout.\n\n@param image that has been created",
        "predict": " Parses dependent keys from call expression and returns them in an array.\n\nIt also unwraps the expressions, so that `model.{foo,bar}` becomes `model.foo, model.bar`.\n\n@param  {CallExpression} callExp CallExpression to examine\n@return {String[]}       Array of unwrapped dependent keys.\n\n    "
    },
    {
        "ID": 1829,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def log_to(logger): \"\"\" Wraps a function that has a connection passed such that everything that happens on the connection is logged using the given logger. :type logger: Logger :param logger: The logger that handles the logging. \"\"\" logger_id = id(logger) def decorator(function): func = add_label(function, 'log_to', logger_id=logger_id) return func return decorator\n\n    ### Response: Wraps a function that has a connection passed such that everything that\n    happens on the connection is logged using the given logger.\n\n    :type  logger: Logger\n    :param logger: The logger that handles the logging..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void eventUnavailableImage(final Image image) { final Subscription subscription = image.subscription(); System.out.format( \"inactive image on %s streamId %d sessionId %x%n\", subscription.channel(), subscription.streamId(), image.sessionId()); }\n\n    ### Response:",
        "ground_truth": "This handler is called when image is unavailable\n\n@param image that has gone inactive",
        "predict": " Wraps a function that has a connection passed such that everything that\n    happens on the connection is logged using the given logger.\n\n    :type  logger: Logger\n    :param logger: The logger that handles the logging..\n\n    "
    },
    {
        "ID": 1830,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function exists($name, $data) { $servers = isset($this->config['servers']) ? $this->config['servers'] : null; if ((!$name || ($name && $name !== $data['name'])) && isset($data['name']) && isset($servers[$data['name']]) ) { return true; } }\n\n    ### Response: Test if a given server name exist in LDAP configuration.\n\n@param name The name of the server\n@param data An array containing LDAP informations as host, port or dn\n\n@return bool.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static StatusIndicatorReader sendChannelStatus(final CountersReader countersReader, final String channel) { StatusIndicatorReader statusReader = null; final MutableInteger id = new MutableInteger(-1); countersReader.forEach( (counterId, typeId, keyBuffer, label) -> { if (typeId == SendChannelStatus.SEND_CHANNEL_STATUS_TYPE_ID) { if (channel.startsWith(keyBuffer.getStringAscii(ChannelEndpointStatus.CHANNEL_OFFSET))) { id.value = counterId; } } }); if (Aeron.NULL_VALUE != id.value) { statusReader = new UnsafeBufferStatusIndicator(countersReader.valuesBuffer(), id.value); } return statusReader; }\n\n    ### Response:",
        "ground_truth": "Return the read-only status indicator for the given send channel URI.\n\n@param countersReader that holds the status indicator.\n@param channel        for the send channel.\n@return read-only status indicator that can be used to query the status of the send channel or null\n@see ChannelEndpointStatus for status values and indications.",
        "predict": " Test if a given server name exist in LDAP configuration.\n\n@param name The name of the server\n@param data An array containing LDAP informations as host, port or dn\n\n@return bool.\n\n    "
    },
    {
        "ID": 1831,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def validate_layout_display(self, table, display_condition): \"\"\"Check to see if the display condition passes. Args: table (str): The name of the DB table which hold the App data. display_condition (str): The \"where\" clause of the DB SQL statement. Returns: bool: True if the row count is greater than 0. \"\"\" display = False if display_condition is None: display = True else: display_query = 'select count(*) from {} where {}'.format(table, display_condition) try: cur = self.db_conn.cursor() cur.execute(display_query.replace('\"', '')) rows = cur.fetchall() if rows[0][0] > 0: display = True except sqlite3.Error as e: print('\"{}\" query returned an error: ({}).'.format(display_query, e)) sys.exit(1) return display\n\n    ### Response: Check to see if the display condition passes.\n\n        Args:\n            table (str): The name of the DB table which hold the App data.\n            display_condition (str): The \"where\" clause of the DB SQL statement.\n\n        Returns:\n            bool: True if the row count is greater than 0..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static StatusIndicatorReader receiveChannelStatus(final CountersReader countersReader, final String channel) { StatusIndicatorReader statusReader = null; final MutableInteger id = new MutableInteger(-1); countersReader.forEach( (counterId, typeId, keyBuffer, label) -> { if (typeId == ReceiveChannelStatus.RECEIVE_CHANNEL_STATUS_TYPE_ID) { if (channel.startsWith(keyBuffer.getStringAscii(ChannelEndpointStatus.CHANNEL_OFFSET))) { id.value = counterId; } } }); if (Aeron.NULL_VALUE != id.value) { statusReader = new UnsafeBufferStatusIndicator(countersReader.valuesBuffer(), id.value); } return statusReader; }\n\n    ### Response:",
        "ground_truth": "Return the read-only status indicator for the given receive channel URI.\n\n@param countersReader that holds the status indicator.\n@param channel        for the receive channel.\n@return read-only status indicator that can be used to query the status of the receive channel or null.\n@see ChannelEndpointStatus for status values and indications.",
        "predict": " Check to see if the display condition passes.\n\n        Args:\n            table (str): The name of the DB table which hold the App data.\n            display_condition (str): The \"where\" clause of the DB SQL statement.\n\n        Returns:\n            bool: True if the row count is greater than 0..\n\n    "
    },
    {
        "ID": 1832,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    async function(filePath, index, resolvers, opts) { // Use the filePath to generate a unique id const id = crypto.createHash('sha1').update(filePath).digest('hex') // File name and extension const { name: fileName, ext: fileExt } = path.parse(filePath) // Absolute directory path to the component const fileCwd = path.resolve(opts.cwd, path.dirname(filePath)) // Absolute preview URL const rawURL = '/' + rename(filePath, '.html') const processedURL = opts.url(rawURL) // Reuse data from resolver and add additional information const data = await pMap(resolvers, async (resolver, index) => { return Object.assign({}, resolver, { index, data: await getFile(fileName, fileExt, resolver.resolve, resolver.parse, fileCwd) }) }) return { index, id, name: fileName, src: filePath, url: processedURL, data } }\n\n    ### Response: Gather information about a component.\n@public\n@param {String} filePath - Relative path to component.\n@param {Number} index - Index of the current element being processed.\n@param {Array} resolvers - Array of objects with functions that return an array of paths to tell the potential location of files.\n@param {Object} opts - Options.\n@returns {Promise} Information of a component..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void limit(final int limit) { if (limit < 0 || limit >= buffer.capacity()) { throw new IllegalArgumentException( \"limit outside range: capacity=\" + buffer.capacity() + \" limit=\" + limit); } this.limit = limit; }\n\n    ### Response:",
        "ground_truth": "Set this limit for this buffer as the position at which the next append operation will occur.\n\n@param limit to be the new value.",
        "predict": " Gather information about a component.\n@public\n@param {String} filePath - Relative path to component.\n@param {Number} index - Index of the current element being processed.\n@param {Array} resolvers - Array of objects with functions that return an array of paths to tell the potential location of files.\n@param {Object} opts - Options.\n@returns {Promise} Information of a component..\n\n    "
    },
    {
        "ID": 1833,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function(e) { this.startWidth = this.headCellLiner.offsetWidth; this.startX = YAHOO.util.Event.getXY(e)[0]; this.nLinerPadding = (parseInt(YAHOO.util.Dom.getStyle(this.headCellLiner,\"paddingLeft\"),10)|0) + (parseInt(YAHOO.util.Dom.getStyle(this.headCellLiner,\"paddingRight\"),10)|0); }\n\n    ### Response: Handles mousedown events on the Column resizer.\n\n@method onMouseDown\n@param e {string} The mousedown event.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public BufferBuilder append(final DirectBuffer srcBuffer, final int srcOffset, final int length) { ensureCapacity(length); buffer.putBytes(limit, srcBuffer, srcOffset, length); limit += length; return this; }\n\n    ### Response:",
        "ground_truth": "Append a source buffer to the end of the internal buffer, resizing the internal buffer as required.\n\n@param srcBuffer from which to copy.\n@param srcOffset in the source buffer from which to copy.\n@param length    in bytes to copy from the source buffer.\n@return the builder for fluent API usage.",
        "predict": " Handles mousedown events on the Column resizer.\n\n@method onMouseDown\n@param e {string} The mousedown event.\n\n    "
    },
    {
        "ID": 1834,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function patchEvents($el) { $.each(EVENT_PROPERTIES, function(eventName, properties) { $el.on(eventName, function(event) { if (event.originalEvent) { properties.forEach(function(propertyName) { event[propertyName] = event.originalEvent[propertyName]; }); } }); }); }\n\n    ### Response: create event listeners that will copy the custom properties from the native events to the jQuery events, so jQuery users can use them seamlessly.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public int poll() { controlSessionId = -1; correlationId = -1; relevantId = -1; templateId = -1; errorMessage = null; pollComplete = false; return subscription.controlledPoll(fragmentAssembler, fragmentLimit); }\n\n    ### Response:",
        "ground_truth": "Poll for control response events.\n\n@return the number of fragments read during the operation. Zero if no events are available.",
        "predict": " create event listeners that will copy the custom properties from the native events to the jQuery events, so jQuery users can use them seamlessly.\n\n    "
    },
    {
        "ID": 1835,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void writeStringcolumn(BytesColumnVector col, int cIdx, int rowNumber, ParseWriter dout) { BufferedString bs = new BufferedString(); if(col.isRepeating) { assert col.length[0] >= 0 : getClass().getSimpleName() + \".writeStringcolumn/1: col.length[0]=\" + col.length[0] + \", col.start[0]=\" + col.start[0]; dout.addStrCol(cIdx, bs.set(col.vector[0], col.start[0], col.length[0])); for (int rowIndex = 1; rowIndex < rowNumber; ++rowIndex) dout.addStrCol(cIdx, bs); } else if (col.noNulls) { for (int rowIndex = 0; rowIndex < rowNumber; rowIndex++) { int l = col.length[rowIndex]; assert l >= 0 : getClass().getSimpleName() + \".writeStringcolumn/2: col.col.length[rowIndex]=\" + l + \", rowIndex=\" + rowIndex; dout.addStrCol(cIdx, bs.set(col.vector[rowIndex], col.start[rowIndex], l)); } } else { boolean [] isNull = col.isNull; for (int rowIndex = 0; rowIndex < rowNumber; rowIndex++) { if (isNull[rowIndex]) dout.addInvalidCol(cIdx); else { int l = col.length[rowIndex]; assert l >= 0 : getClass().getSimpleName() + \".writeStringcolumn/3: col.col.length[rowIndex]=\" + l + \", rowIndex=\" + rowIndex; dout.addStrCol(cIdx, bs.set(col.vector[rowIndex], col.start[rowIndex], col.length[rowIndex])); } } } }\n\n    ### Response: This method writes a column of H2O frame for Orc File column types of string, varchar, char and\nbinary at some point.\n\n@param col\n@param cIdx\n@param rowNumber\n@param dout.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static MappedByteBuffer mapLossReport(final String aeronDirectoryName, final int reportFileLength) { return mapNewFile(file(aeronDirectoryName), reportFileLength, false); }\n\n    ### Response:",
        "ground_truth": "Map a new loss report in the Aeron directory for a given length.\n\n@param aeronDirectoryName in which to create the file.\n@param reportFileLength   for the file.\n@return the newly mapped buffer for the file.",
        "predict": " This method writes a column of H2O frame for Orc File column types of string, varchar, char and\nbinary at some point.\n\n@param col\n@param cIdx\n@param rowNumber\n@param dout.\n\n    "
    },
    {
        "ID": 1836,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function getPageListFromPageTransclusions( $pageName, array $extraParams = [] ) { $params = array_merge( $extraParams, [ 'list' => 'embeddedin', 'eititle' => $pageName, ] ); return $this->runQuery( $params, 'eicontinue', 'embeddedin' ); }\n\n    ### Response: List pages that transclude a certain page.\n\n@link https://www.mediawiki.org/wiki/API:Embeddedin\n@since 0.5\n\n@param string $pageName\n@param array $extraParams\n\n@return Pages.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Map<StreamCompositeKey, List<StreamPosition>> snapshot() { final Map<StreamCompositeKey, List<StreamPosition>> streams = new HashMap<>(); counters.forEach( (counterId, typeId, keyBuffer, label) -> { if ((typeId >= PUBLISHER_LIMIT_TYPE_ID && typeId <= RECEIVER_POS_TYPE_ID) || typeId == SENDER_LIMIT_TYPE_ID || typeId == PER_IMAGE_TYPE_ID || typeId == PUBLISHER_POS_TYPE_ID) { final StreamCompositeKey key = new StreamCompositeKey( keyBuffer.getInt(SESSION_ID_OFFSET), keyBuffer.getInt(STREAM_ID_OFFSET), keyBuffer.getStringAscii(CHANNEL_OFFSET)); final StreamPosition position = new StreamPosition( keyBuffer.getLong(REGISTRATION_ID_OFFSET), counters.getCounterValue(counterId), typeId); streams .computeIfAbsent(key, (ignore) -> new ArrayList<>()) .add(position); } }); return streams; }\n\n    ### Response:",
        "ground_truth": "Take a snapshot of all the counters and group them by streams.\n\n@return a snapshot of all the counters and group them by streams.",
        "predict": " List pages that transclude a certain page.\n\n@link https://www.mediawiki.org/wiki/API:Embeddedin\n@since 0.5\n\n@param string $pageName\n@param array $extraParams\n\n@return Pages.\n\n    "
    },
    {
        "ID": 1837,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String[] toSourceArray(final JSModule module) { return runInCompilerThread( () -> { List<CompilerInput> inputs = module.getInputs(); int numInputs = inputs.size(); if (numInputs == 0) { return new String[0]; } String[] sources = new String[numInputs]; CodeBuilder cb = new CodeBuilder(); for (int i = 0; i < numInputs; i++) { Node scriptNode = inputs.get(i).getAstRoot(Compiler.this); if (scriptNode == null) { throw new IllegalArgumentException(\"Bad module input: \" + inputs.get(i).getName()); } cb.reset(); toSource(cb, i, scriptNode); sources[i] = cb.toString(); } return sources; }); }\n\n    ### Response: Converts the parse tree for each input in a module back to JS code..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static UnsafeBuffer createDefaultHeader(final int sessionId, final int streamId, final int termId) { final UnsafeBuffer buffer = new UnsafeBuffer( BufferUtil.allocateDirectAligned(HEADER_LENGTH, CACHE_LINE_LENGTH)); buffer.putByte(VERSION_FIELD_OFFSET, CURRENT_VERSION); buffer.putByte(FLAGS_FIELD_OFFSET, (byte)BEGIN_AND_END_FLAGS); buffer.putShort(TYPE_FIELD_OFFSET, (short)HDR_TYPE_DATA, LITTLE_ENDIAN); buffer.putInt(SESSION_ID_FIELD_OFFSET, sessionId, LITTLE_ENDIAN); buffer.putInt(STREAM_ID_FIELD_OFFSET, streamId, LITTLE_ENDIAN); buffer.putInt(TERM_ID_FIELD_OFFSET, termId, LITTLE_ENDIAN); buffer.putLong(RESERVED_VALUE_OFFSET, DEFAULT_RESERVE_VALUE); return buffer; }\n\n    ### Response:",
        "ground_truth": "Return an initialised default Data Frame Header.\n\n@param sessionId for the header\n@param streamId  for the header\n@param termId    for the header\n@return byte array containing the header",
        "predict": " Converts the parse tree for each input in a module back to JS code..\n\n    "
    },
    {
        "ID": 1838,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public void performFileBasedAction(Collection<File> modifiedFiles) { if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled()) Tr.entry(tc, \"performFileBasedAction\", new Object[] { modifiedFiles }); try { com.ibm.ws.ssl.config.KeyStoreManager.getInstance().clearJavaKeyStoresFromKeyStoreMap(modifiedFiles); com.ibm.ws.ssl.provider.AbstractJSSEProvider.clearSSLContextCache(modifiedFiles); com.ibm.ws.ssl.config.SSLConfigManager.getInstance().resetDefaultSSLContextIfNeeded(modifiedFiles); Tr.audit(tc, \"ssl.keystore.modified.CWPKI0811I\", modifiedFiles.toArray()); } catch (Exception e) { if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) { Tr.debug(tc, \"Exception while trying to reload keystore file, exception is: \" + e.getMessage()); } } if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled()) Tr.exit(tc, \"performFileBasedAction\"); }\n\n    ### Response: The specified files have been modified and we need to clear the SSLContext caches and\nkeystore caches. This will cause the new keystore file to get loaded on the next use of the\nssl context. If the keystore associated with the SSLContext that the process is using then\nthe process SSLContext needs to be reloaded..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public CounterMessageFlyweight keyBuffer(final DirectBuffer keyBuffer, final int keyOffset, final int keyLength) { buffer.putInt(KEY_LENGTH_OFFSET, keyLength); if (null != keyBuffer && keyLength > 0) { buffer.putBytes(keyBufferOffset(), keyBuffer, keyOffset, keyLength); } return this; }\n\n    ### Response:",
        "ground_truth": "Fill the key buffer.\n\n@param keyBuffer containing the optional key for the counter.\n@param keyOffset within the keyBuffer at which the key begins.\n@param keyLength of the key in the keyBuffer.\n@return flyweight",
        "predict": " The specified files have been modified and we need to clear the SSLContext caches and\nkeystore caches. This will cause the new keystore file to get loaded on the next use of the\nssl context. If the keystore associated with the SSLContext that the process is using then\nthe process SSLContext needs to be reloaded..\n\n    "
    },
    {
        "ID": 1839,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _notify_change(self): \"\"\" Notify user from external change if autoReloadChangedFiles is False then reload the changed file in the editor \"\"\" def inner_action(*args): \"\"\" Inner action: open file \"\"\" # cache cursor position before reloading so that the cursor # position is restored automatically after reload has finished. # See OpenCobolIDE/OpenCobolIDE#97 Cache().set_cursor_position( self.editor.file.path, self.editor.textCursor().position()) if os.path.exists(self.editor.file.path): self.editor.file.open(self.editor.file.path) self.file_reloaded.emit() else: # file moved just after a change, see OpenCobolIDE/OpenCobolIDE#337 self._notify_deleted_file() args = (_(\"File changed\"), _(\"The file <i>%s</i> has changed externally.\\nDo you want to \" \"reload it?\") % os.path.basename(self.editor.file.path)) kwargs = {\"expected_action\": inner_action} if self.editor.hasFocus() or self.auto_reload: self._notify(*args, **kwargs) else: # show the reload prompt as soon as the editor has focus self._notification_pending = True self._data = (args, kwargs)\n\n    ### Response: Notify user from external change if autoReloadChangedFiles is False\n        then reload the changed file in the editor.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public CounterMessageFlyweight labelBuffer( final DirectBuffer labelBuffer, final int labelOffset, final int labelLength) { buffer.putInt(labelOffset(), labelLength); buffer.putBytes(labelBufferOffset(), labelBuffer, labelOffset, labelLength); return this; }\n\n    ### Response:",
        "ground_truth": "Fill the label buffer.\n\n@param labelBuffer containing the mandatory label for the counter.\n@param labelOffset within the labelBuffer at which the label begins.\n@param labelLength of the label in the labelBuffer.\n@return flyweight",
        "predict": " Notify user from external change if autoReloadChangedFiles is False\n        then reload the changed file in the editor.\n\n    "
    },
    {
        "ID": 1840,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function dummyMarkdown() { var codeBlock = /^```/; var quoteBlock = /^>/; var listBlock = /^\\* /; var commentInline = '<!--.*-->'; var codeInline = '`.+`'; function split(content) { var pattern = new RegExp([commentInline, codeInline].join('|'), 'g'); var result = null; var last = 0; var output = []; while ((result = pattern.exec(content)) !== null) { output.push({ transform: true, content: content.slice(last, result.index)}); output.push({ transform: false, content: result[0]}); last = pattern.lastIndex; } output.push({ transform: true, content: content.slice(last)}); return output; } return function (input) { var output = []; var lines = input.split('\\n'); for (var l = 0; l < lines.length; l++) { var line = lines[l]; var e; var content; if (codeBlock.test(line)) { e = l + 1; while (!codeBlock.test(lines[e])) { e++; } output.push({ transform: false, content: lines.slice(l, e + 1).join('\\n') + '\\n\\n' }); l = e; } else if (quoteBlock.test(line)) { e = l + 1; while (quoteBlock.test(lines[e])) { e++; } content = [line].concat(lines.slice(l + 1, e).map(function (nextLine) { return nextLine.slice(2); })).join(' ') + '\\n\\n'; output = output.concat(split(content)); l = e - 1; } else if (listBlock.test(line)) { e = l + 1; while (lines[e] !== '') { if (!listBlock.test(lines[e])) { lines[e - 1] += ' ' + lines[e]; lines[e] = ''; } e++; } content = lines.slice(l, e).filter(function (line) { return line !== ''; }).join('\\n') + '\\n'; output = output.concat(split(content)); l = e - 1; } else if (line !== '') { e = l + 1; while (lines[e] !== '') { e++; } content = lines.slice(l, e).join(' ') + '\\n\\n'; output = output.concat(split(content)); l = e - 1; } } return output; }; }\n\n    ### Response: this format preprocessor is far from being full markdown, it is built to be usable for tipograph readme in the future, this may grow into full markdown support.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public boolean connect(final String responseChannel, final int responseStreamId, final long correlationId) { connectRequestEncoder .wrapAndApplyHeader(buffer, 0, messageHeaderEncoder) .correlationId(correlationId) .responseStreamId(responseStreamId) .version(AeronArchive.Configuration.SEMANTIC_VERSION) .responseChannel(responseChannel); return offerWithTimeout(connectRequestEncoder.encodedLength(), null); }\n\n    ### Response:",
        "ground_truth": "Connect to an archive on its control interface providing the response stream details.\n\n@param responseChannel  for the control message responses.\n@param responseStreamId for the control message responses.\n@param correlationId    for this request.\n@return true if successfully offered otherwise false.",
        "predict": " this format preprocessor is far from being full markdown, it is built to be usable for tipograph readme in the future, this may grow into full markdown support.\n\n    "
    },
    {
        "ID": 1841,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private CompletableFuture<IteratorBatch<T>> fetch(int position) { return openFuture.thenCompose(initialBatch -> { if (!initialBatch.complete()) { return client.applyOn(partitionId, service -> nextFunction.next(service, initialBatch.id(), position)) .thenCompose(nextBatch -> { if (nextBatch == null) { return close().thenApply(v -> null); } return CompletableFuture.completedFuture(nextBatch); }); } return CompletableFuture.completedFuture(null); }); }\n\n    ### Response: Fetches the next batch of entries from the cluster.\n\n@param position the position from which to fetch the next batch\n@return the next batch of entries from the cluster.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public boolean tryConnect(final String responseChannel, final int responseStreamId, final long correlationId) { connectRequestEncoder .wrapAndApplyHeader(buffer, 0, messageHeaderEncoder) .correlationId(correlationId) .responseStreamId(responseStreamId) .version(AeronArchive.Configuration.SEMANTIC_VERSION) .responseChannel(responseChannel); final int length = MessageHeaderEncoder.ENCODED_LENGTH + connectRequestEncoder.encodedLength(); return publication.offer(buffer, 0, length) > 0; }\n\n    ### Response:",
        "ground_truth": "Try Connect to an archive on its control interface providing the response stream details. Only one attempt will\nbe made to offer the request.\n\n@param responseChannel  for the control message responses.\n@param responseStreamId for the control message responses.\n@param correlationId    for this request.\n@return true if successfully offered otherwise false.",
        "predict": " Fetches the next batch of entries from the cluster.\n\n@param position the position from which to fetch the next batch\n@return the next batch of entries from the cluster.\n\n    "
    },
    {
        "ID": 1842,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _check_token(self): \"\"\" Simple Mercedes me API. \"\"\" need_token = (self._token_info is None or self.auth_handler.is_token_expired(self._token_info)) if need_token: new_token = \\ self.auth_handler.refresh_access_token( self._token_info['refresh_token']) # skip when refresh failed if new_token is None: return self._token_info = new_token self._auth_header = {\"content-type\": \"application/json\", \"Authorization\": \"Bearer {}\".format( self._token_info.get('access_token'))}\n\n    ### Response: Simple Mercedes me API..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public boolean closeSession(final long controlSessionId) { closeSessionRequestEncoder .wrapAndApplyHeader(buffer, 0, messageHeaderEncoder) .controlSessionId(controlSessionId); return offer(closeSessionRequestEncoder.encodedLength()); }\n\n    ### Response:",
        "ground_truth": "Close this control session with the archive.\n\n@param controlSessionId with the archive.\n@return true if successfully offered otherwise false.",
        "predict": " Simple Mercedes me API..\n\n    "
    },
    {
        "ID": 1843,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def validate_keys(dict_, expected, funcname): \"\"\"Validate that a dictionary has an expected set of keys. \"\"\" expected = set(expected) received = set(dict_) missing = expected - received if missing: raise ValueError( \"Missing keys in {}:\\n\" \"Expected Keys: {}\\n\" \"Received Keys: {}\".format( funcname, sorted(expected), sorted(received), ) ) unexpected = received - expected if unexpected: raise ValueError( \"Unexpected keys in {}:\\n\" \"Expected Keys: {}\\n\" \"Received Keys: {}\".format( funcname, sorted(expected), sorted(received), ) )\n\n    ### Response: Validate that a dictionary has an expected set of keys..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public boolean startRecording( final String channel, final int streamId, final SourceLocation sourceLocation, final long correlationId, final long controlSessionId) { startRecordingRequestEncoder .wrapAndApplyHeader(buffer, 0, messageHeaderEncoder) .controlSessionId(controlSessionId) .correlationId(correlationId) .streamId(streamId) .sourceLocation(sourceLocation) .channel(channel); return offer(startRecordingRequestEncoder.encodedLength()); }\n\n    ### Response:",
        "ground_truth": "Start recording streams for a given channel and stream id pairing.\n\n@param channel          to be recorded.\n@param streamId         to be recorded.\n@param sourceLocation   of the publication to be recorded.\n@param correlationId    for this request.\n@param controlSessionId for this request.\n@return true if successfully offered otherwise false.",
        "predict": " Validate that a dictionary has an expected set of keys..\n\n    "
    },
    {
        "ID": 1844,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function cancel() { if (!isset($this->_links->self->href)) { return $this; } $body = null; if($this->client->usesOAuth()) { $body = json_encode([ \"testmode\" => $this->mode === \"test\" ? true : false ]); } $result = $this->client->performHttpCallToFullUrl( MollieApiClient::HTTP_DELETE, $this->_links->self->href, $body ); return ResourceFactory::createFromApiResult($result, new Subscription($this->client)); }\n\n    ### Response: Cancels this subscription\n\n@return Subscription.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public boolean stopRecording( final String channel, final int streamId, final long correlationId, final long controlSessionId) { stopRecordingRequestEncoder .wrapAndApplyHeader(buffer, 0, messageHeaderEncoder) .controlSessionId(controlSessionId) .correlationId(correlationId) .streamId(streamId) .channel(channel); return offer(stopRecordingRequestEncoder.encodedLength()); }\n\n    ### Response:",
        "ground_truth": "Stop an active recording.\n\n@param channel          to be stopped.\n@param streamId         to be stopped.\n@param correlationId    for this request.\n@param controlSessionId for this request.\n@return true if successfully offered otherwise false.",
        "predict": " Cancels this subscription\n\n@return Subscription.\n\n    "
    },
    {
        "ID": 1845,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private ByteBuf writeResponse(ByteBuf buffer, Object request, ThreadContext context) { context.serializer().writeObject(request, OUTPUT.get().setByteBuf(buffer)); return buffer; }\n\n    ### Response: Writes a response to the given buffer..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public boolean replay( final long recordingId, final long position, final long length, final String replayChannel, final int replayStreamId, final long correlationId, final long controlSessionId) { replayRequestEncoder .wrapAndApplyHeader(buffer, 0, messageHeaderEncoder) .controlSessionId(controlSessionId) .correlationId(correlationId) .recordingId(recordingId) .position(position) .length(length) .replayStreamId(replayStreamId) .replayChannel(replayChannel); return offer(replayRequestEncoder.encodedLength()); }\n\n    ### Response:",
        "ground_truth": "Replay a recording from a given position.\n\n@param recordingId      to be replayed.\n@param position         from which the replay should be started.\n@param length           of the stream to be replayed. Use {@link Long#MAX_VALUE} to follow a live stream.\n@param replayChannel    to which the replay should be sent.\n@param replayStreamId   to which the replay should be sent.\n@param correlationId    for this request.\n@param controlSessionId for this request.\n@return true if successfully offered otherwise false.",
        "predict": " Writes a response to the given buffer..\n\n    "
    },
    {
        "ID": 1846,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _write_input(self, input_dir=\".\"): \"\"\" Write the packmol input file to the input directory. Args: input_dir (string): path to the input directory \"\"\" with open(os.path.join(input_dir, self.input_file), 'wt', encoding=\"utf-8\") as inp: for k, v in self.control_params.items(): inp.write('{} {}\\n'.format(k, self._format_param_val(v))) # write the structures of the constituent molecules to file and set # the molecule id and the corresponding filename in the packmol # input file. for idx, mol in enumerate(self.mols): filename = os.path.join( input_dir, '{}.{}'.format( idx, self.control_params[\"filetype\"])).encode(\"ascii\") # pdb if self.control_params[\"filetype\"] == \"pdb\": self.write_pdb(mol, filename, num=idx+1) # all other filetypes else: a = BabelMolAdaptor(mol) pm = pb.Molecule(a.openbabel_mol) pm.write(self.control_params[\"filetype\"], filename=filename, overwrite=True) inp.write(\"\\n\") inp.write( \"structure {}.{}\\n\".format( os.path.join(input_dir, str(idx)), self.control_params[\"filetype\"])) for k, v in self.param_list[idx].items(): inp.write(' {} {}\\n'.format(k, self._format_param_val(v))) inp.write('end structure\\n')\n\n    ### Response: Write the packmol input file to the input directory.\n\n        Args:\n            input_dir (string): path to the input directory.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public boolean stopReplay(final long replaySessionId, final long correlationId, final long controlSessionId) { stopReplayRequestEncoder .wrapAndApplyHeader(buffer, 0, messageHeaderEncoder) .controlSessionId(controlSessionId) .correlationId(correlationId) .replaySessionId(replaySessionId); return offer(replayRequestEncoder.encodedLength()); }\n\n    ### Response:",
        "ground_truth": "Stop an existing replay session.\n\n@param replaySessionId  that should be stopped.\n@param correlationId    for this request.\n@param controlSessionId for this request.\n@return true if successfully offered otherwise false.",
        "predict": " Write the packmol input file to the input directory.\n\n        Args:\n            input_dir (string): path to the input directory.\n\n    "
    },
    {
        "ID": 1847,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function parseHttpResponse(options, filesWithHash) { if (options.verbose) { _utils.logger.info('Parsing HTTP responses...'); } var promises = []; var _iteratorNormalCompletion5 = true; var _didIteratorError5 = false; var _iteratorError5 = undefined; try { for (var _iterator5 = filesWithHash[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) { var fileWithHash = _step5.value; if (fileWithHash.subtitlesPresent) continue; var p = (0, _utils.XML2JSON)(options, fileWithHash).catch(function (err) { if (options.verbose) { _utils.logger.info('Error in HTTP response: ', err.err); } return err.fileWithHash; }); promises.push(p); } } catch (err) { _didIteratorError5 = true; _iteratorError5 = err; } finally { try { if (!_iteratorNormalCompletion5 && _iterator5.return) { _iterator5.return(); } } finally { if (_didIteratorError5) { throw _iteratorError5; } } } return Promise.all(promises); }\n\n    ### Response: Parse HTTP response from Napiprojekt server. Format XML response to JSON and save subtitles to file.\n@param {NapijsOptions} options\n@param filesWithHash\n@returns {Promise}.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public boolean listRecordings( final long fromRecordingId, final int recordCount, final long correlationId, final long controlSessionId) { listRecordingsRequestEncoder .wrapAndApplyHeader(buffer, 0, messageHeaderEncoder) .controlSessionId(controlSessionId) .correlationId(correlationId) .fromRecordingId(fromRecordingId) .recordCount(recordCount); return offer(listRecordingsRequestEncoder.encodedLength()); }\n\n    ### Response:",
        "ground_truth": "List a range of recording descriptors.\n\n@param fromRecordingId  at which to begin listing.\n@param recordCount      for the number of descriptors to be listed.\n@param correlationId    for this request.\n@param controlSessionId for this request.\n@return true if successfully offered otherwise false.",
        "predict": " Parse HTTP response from Napiprojekt server. Format XML response to JSON and save subtitles to file.\n@param {NapijsOptions} options\n@param filesWithHash\n@returns {Promise}.\n\n    "
    },
    {
        "ID": 1848,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (gr *GoReq) RedirectPolicy(policy func(req Request, via []Request) error) *GoReq { gr.CheckRedirect = func(r *http.Request, v []*http.Request) error { vv := make([]Request, len(v)) for i, r := range v { vv[i] = Request(r) } return policy(Request(r), vv) } if gr.Client != nil { gr.Client.CheckRedirect = gr.CheckRedirect } return gr }\n\n    ### Response: // RedirectPolicy is used to set redirect policy..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public boolean listRecordingsForUri( final long fromRecordingId, final int recordCount, final String channelFragment, final int streamId, final long correlationId, final long controlSessionId) { listRecordingsForUriRequestEncoder .wrapAndApplyHeader(buffer, 0, messageHeaderEncoder) .controlSessionId(controlSessionId) .correlationId(correlationId) .fromRecordingId(fromRecordingId) .recordCount(recordCount) .streamId(streamId) .channel(channelFragment); return offer(listRecordingsForUriRequestEncoder.encodedLength()); }\n\n    ### Response:",
        "ground_truth": "List a range of recording descriptors which match a channel URI fragment and stream id.\n\n@param fromRecordingId  at which to begin listing.\n@param recordCount      for the number of descriptors to be listed.\n@param channelFragment  to match recordings on from the original channel URI in the archive descriptor.\n@param streamId         to match recordings on.\n@param correlationId    for this request.\n@param controlSessionId for this request.\n@return true if successfully offered otherwise false.",
        "predict": " // RedirectPolicy is used to set redirect policy..\n\n    "
    },
    {
        "ID": 1849,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static base_responses update(nitro_service client, clusternode resources[]) throws Exception { base_responses result = null; if (resources != null && resources.length > 0) { clusternode updateresources[] = new clusternode[resources.length]; for (int i=0;i<resources.length;i++){ updateresources[i] = new clusternode(); updateresources[i].nodeid = resources[i].nodeid; updateresources[i].state = resources[i].state; updateresources[i].backplane = resources[i].backplane; updateresources[i].priority = resources[i].priority; } result = update_bulk_request(client, updateresources); } return result; }\n\n    ### Response: Use this API to update clusternode resources..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public boolean listRecording(final long recordingId, final long correlationId, final long controlSessionId) { listRecordingRequestEncoder .wrapAndApplyHeader(buffer, 0, messageHeaderEncoder) .controlSessionId(controlSessionId) .correlationId(correlationId) .recordingId(recordingId); return offer(listRecordingRequestEncoder.encodedLength()); }\n\n    ### Response:",
        "ground_truth": "List a recording descriptor for a given recording id.\n\n@param recordingId      at which to begin listing.\n@param correlationId    for this request.\n@param controlSessionId for this request.\n@return true if successfully offered otherwise false.",
        "predict": " Use this API to update clusternode resources..\n\n    "
    },
    {
        "ID": 1850,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function excel() { $ext = '.' . strtolower($this->excelWriter); return $this->buildExcelFile()->download($this->getFilename() . $ext, $this->excelWriter); }\n\n    ### Response: Export results to Excel file.\n\n@return void.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public boolean extendRecording( final String channel, final int streamId, final SourceLocation sourceLocation, final long recordingId, final long correlationId, final long controlSessionId) { extendRecordingRequestEncoder .wrapAndApplyHeader(buffer, 0, messageHeaderEncoder) .controlSessionId(controlSessionId) .correlationId(correlationId) .recordingId(recordingId) .streamId(streamId) .sourceLocation(sourceLocation) .channel(channel); return offer(extendRecordingRequestEncoder.encodedLength()); }\n\n    ### Response:",
        "ground_truth": "Extend an existing, non-active, recorded stream for a the same channel and stream id.\n\nThe channel must be configured for the initial position from which it will be extended. This can be done\nwith {@link ChannelUriStringBuilder#initialPosition(long, int, int)}. The details required to initialise can\nbe found by calling {@link #listRecording(long, long, long)}.\n\n@param channel          to be recorded.\n@param streamId         to be recorded.\n@param sourceLocation   of the publication to be recorded.\n@param recordingId      to be extended.\n@param correlationId    for this request.\n@param controlSessionId for this request.\n@return true if successfully offered otherwise false.",
        "predict": " Export results to Excel file.\n\n@return void.\n\n    "
    },
    {
        "ID": 1851,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func ReadConfig(filename, clusterName string) (*Notification, error) { p := &pb.Cluster{} b, err := ioutil.ReadFile(filename) if err != nil { return nil, err } if err = proto.UnmarshalText(string(b), p); err != nil { return nil, err } c, err := protoToCluster(p, clusterName) if err != nil { return nil, err } return &Notification{c, false, p, SourceDisk, filename, time.Now()}, nil }\n\n    ### Response: // ReadConfig reads a cluster configuration file..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public boolean getRecordingPosition(final long recordingId, final long correlationId, final long controlSessionId) { recordingPositionRequestEncoder .wrapAndApplyHeader(buffer, 0, messageHeaderEncoder) .controlSessionId(controlSessionId) .correlationId(correlationId) .recordingId(recordingId); return offer(recordingPositionRequestEncoder.encodedLength()); }\n\n    ### Response:",
        "ground_truth": "Get the recorded position of an active recording.\n\n@param recordingId      of the active recording that the position is being requested for.\n@param correlationId    for this request.\n@param controlSessionId for this request.\n@return true if successfully offered otherwise false.",
        "predict": " // ReadConfig reads a cluster configuration file..\n\n    "
    },
    {
        "ID": 1852,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def layers(self, rev=True): \"\"\" Get list of PodmanImage for every layer in image :param rev: get layers rev :return: list of :class:`conu.PodmanImage` \"\"\" image_layers = [ PodmanImage(None, identifier=x, pull_policy=PodmanImagePullPolicy.NEVER) for x in self.get_layer_ids() ] if not rev: image_layers.reverse() return image_layers\n\n    ### Response: Get list of PodmanImage for every layer in image\n\n        :param rev: get layers rev\n        :return: list of :class:`conu.PodmanImage`.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public boolean getStopPosition(final long recordingId, final long correlationId, final long controlSessionId) { stopPositionRequestEncoder .wrapAndApplyHeader(buffer, 0, messageHeaderEncoder) .controlSessionId(controlSessionId) .correlationId(correlationId) .recordingId(recordingId); return offer(stopPositionRequestEncoder.encodedLength()); }\n\n    ### Response:",
        "ground_truth": "Get the stop position of a recording.\n\n@param recordingId      of the recording that the stop position is being requested for.\n@param correlationId    for this request.\n@param controlSessionId for this request.\n@return true if successfully offered otherwise false.",
        "predict": " Get list of PodmanImage for every layer in image\n\n        :param rev: get layers rev\n        :return: list of :class:`conu.PodmanImage`.\n\n    "
    },
    {
        "ID": 1853,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function addClassEvent($hook, $class, $priority, $accepted_args) { $callback = $this->buildClassEventCallback($class, $hook); $this->addEventListener($hook, $callback, $priority, $accepted_args); return $callback; }\n\n    ### Response: Prepare the hook callback for use in a class method.\n\n@param string $hook\n@param string $class\n@param int    $priority\n@param int    $accepted_args\n\n@throws BadMethodCallException\n\n@return array.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public boolean listRecordingSubscriptions( final int pseudoIndex, final int subscriptionCount, final String channelFragment, final int streamId, final boolean applyStreamId, final long correlationId, final long controlSessionId) { listRecordingSubscriptionsRequestEncoder .wrapAndApplyHeader(buffer, 0, messageHeaderEncoder) .controlSessionId(controlSessionId) .correlationId(correlationId) .pseudoIndex(pseudoIndex) .subscriptionCount(subscriptionCount) .applyStreamId(applyStreamId ? BooleanType.TRUE : BooleanType.FALSE) .streamId(streamId) .channel(channelFragment); return offer(listRecordingSubscriptionsRequestEncoder.encodedLength()); }\n\n    ### Response:",
        "ground_truth": "List registered subscriptions in the archive which have been used to record streams.\n\n@param pseudoIndex       in the list of active recording subscriptions.\n@param subscriptionCount for the number of descriptors to be listed.\n@param channelFragment   for a contains match on the stripped channel used with the registered subscription.\n@param streamId          for the subscription.\n@param applyStreamId     when matching.\n@param correlationId     for this request.\n@param controlSessionId  for this request.\n@return true if successfully offered otherwise false.",
        "predict": " Prepare the hook callback for use in a class method.\n\n@param string $hook\n@param string $class\n@param int    $priority\n@param int    $accepted_args\n\n@throws BadMethodCallException\n\n@return array.\n\n    "
    },
    {
        "ID": 1854,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func varyMatches(cachedResp *http.Response, req *http.Request) bool { for _, header := range headerAllCommaSepValues(cachedResp.Header, \"vary\") { header = http.CanonicalHeaderKey(header) if header != \"\" && req.Header.Get(header) != cachedResp.Header.Get(\"X-Varied-\"+header) { return false } } return true }\n\n    ### Response: // varyMatches will return false unless all of the cached values for the headers listed in Vary\n// match the new request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public boolean matchesTag(final UdpChannel udpChannel) { if (!hasTag || !udpChannel.hasTag() || tag != udpChannel.tag()) { return false; } if (udpChannel.remoteData().getAddress().isAnyLocalAddress() && udpChannel.remoteData().getPort() == 0 && udpChannel.localData().getAddress().isAnyLocalAddress() && udpChannel.localData().getPort() == 0) { return true; } throw new IllegalArgumentException(\"matching tag has set endpoint or control address\"); }\n\n    ### Response:",
        "ground_truth": "Does this channel have a tag match to another channel including endpoints.\n\n@param udpChannel to match against.\n@return true if there is a match otherwise false.",
        "predict": " // varyMatches will return false unless all of the cached values for the headers listed in Vary\n// match the new request.\n\n    "
    },
    {
        "ID": 1855,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def chartify(qs, score_field, cutoff=0, ensure_chartiness=True): \"\"\" Given a QuerySet it will go through and add a `chart_position` property to each object returning a list of the objects. If adjacent objects have the same 'score' (based on `score_field`) then they will have the same `chart_position`. This can then be used in templates for the `value` of <li> elements in an <ol>. By default any objects with a score of 0 or less will be removed. By default, if all the items in the chart have the same position, no items will be returned (it's not much of a chart). Keyword arguments: qs -- The QuerySet score_field -- The name of the numeric field that each object in the QuerySet has, that will be used to compare their positions. cutoff -- Any objects with a score of this value or below will be removed from the list. Set to None to disable this. ensure_chartiness -- If True, then if all items in the list have the same score, an empty list will be returned. \"\"\" chart = [] position = 0 prev_obj = None for counter, obj in enumerate(qs): score = getattr(obj, score_field) if score != getattr(prev_obj, score_field, None): position = counter + 1 if cutoff is None or score > cutoff: obj.chart_position = position chart.append(obj) prev_obj = obj if ensure_chartiness and len(chart) > 0: if getattr(chart[0], score_field) == getattr(chart[-1], score_field): chart = [] return chart\n\n    ### Response: Given a QuerySet it will go through and add a `chart_position` property to\n    each object returning a list of the objects.\n\n    If adjacent objects have the same 'score' (based on `score_field`) then\n    they will have the same `chart_position`. This can then be used in\n    templates for the `value` of  elements in an .\n\n    By default any objects with a score of 0 or less will be removed.\n\n    By default, if all the items in the chart have the same position, no items\n    will be returned (it's not much of a chart).\n\n    Keyword arguments:\n    qs -- The QuerySet\n    score_field -- The name of the numeric field that each object in the\n                   QuerySet has, that will be used to compare their positions.\n    cutoff -- Any objects with a score of this value or below will be removed\n              from the list. Set to None to disable this.\n    ensure_chartiness -- If True, then if all items in the list have the same\n                         score, an empty list will be returned..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static InetSocketAddress destinationAddress(final ChannelUri uri) { try { validateConfiguration(uri); return getEndpointAddress(uri); } catch (final Exception ex) { throw new InvalidChannelException(ErrorCode.INVALID_CHANNEL, ex); } }\n\n    ### Response:",
        "ground_truth": "Get the endpoint address from the URI.\n\n@param uri to check\n@return endpoint address for URI",
        "predict": " Given a QuerySet it will go through and add a `chart_position` property to\n    each object returning a list of the objects.\n\n    If adjacent objects have the same 'score' (based on `score_field`) then\n    they will have the same `chart_position`. This can then be used in\n    templates for the `value` of  elements in an .\n\n    By default any objects with a score of 0 or less will be removed.\n\n    By default, if all the items in the chart have the same position, no items\n    will be returned (it's not much of a chart).\n\n    Keyword arguments:\n    qs -- The QuerySet\n    score_field -- The name of the numeric field that each object in the\n                   QuerySet has, that will be used to compare their positions.\n    cutoff -- Any objects with a score of this value or below will be removed\n              from the list. Set to None to disable this.\n    ensure_chartiness -- If True, then if all items in the list have the same\n                         score, an empty list will be returned..\n\n    "
    },
    {
        "ID": 1856,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function loadProviders($providers) { foreach ((array) $providers as $provider) { $provider = $this->container->get($provider); if (!$provider instanceof ServiceProviderInterface) { $providerName = get_class($provider); throw new \\Exception( \"$providerName does not implement required \\\\TitaPHP\\\\Foundation\\\\ServiceProviderInterface Interface\" ); } $provider->register($this); } }\n\n    ### Response: Register Providers into the Application.\n\n@param\tarray\t$providers\n@return \tvoid\n@throws \t\\Exception.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String description() { final StringBuilder builder = new StringBuilder(\"UdpChannel - \"); if (null != localInterface) { builder .append(\"interface: \") .append(localInterface.getDisplayName()) .append(\", \"); } builder .append(\"localData: \").append(localData) .append(\", remoteData: \").append(remoteData) .append(\", ttl: \").append(multicastTtl); return builder.toString(); }\n\n    ### Response:",
        "ground_truth": "Used for debugging to get a human readable description of the channel.\n\n@return a human readable description of the channel.",
        "predict": " Register Providers into the Application.\n\n@param\tarray\t$providers\n@return \tvoid\n@throws \t\\Exception.\n\n    "
    },
    {
        "ID": 1857,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def cmd_terminate(self, argv, help): \"\"\"Terminates the instance\"\"\" from ploy.common import yesno parser = argparse.ArgumentParser( prog=\"%s terminate\" % self.progname, description=help, ) instances = self.get_instances(command='terminate') parser.add_argument(\"instance\", nargs=1, metavar=\"instance\", help=\"Name of the instance from the config.\", choices=sorted(instances)) args = parser.parse_args(argv) instance = instances[args.instance[0]] if not yesno(\"Are you sure you want to terminate '%s'?\" % instance.config_id): return instance.hooks.before_terminate(instance) instance.terminate() instance.hooks.after_terminate(instance)\n\n    ### Response: Terminates the instance.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    void addDestination(final int transportIndex, final ReceiveDestinationUdpTransport transport) { imageConnections = ArrayUtil.ensureCapacity(imageConnections, transportIndex + 1); if (transport.isMulticast()) { imageConnections[transportIndex] = new ImageConnection( cachedNanoClock.nanoTime(), transport.udpChannel().remoteControl()); } else if (transport.hasExplicitControl()) { imageConnections[transportIndex] = new ImageConnection( cachedNanoClock.nanoTime(), transport.explicitControlAddress()); } }\n\n    ### Response:",
        "ground_truth": "Add a destination to this image so it can merge streams.\n\n@param transportIndex from which packets will arrive.\n@param transport      from which packets will arrive.",
        "predict": " Terminates the instance.\n\n    "
    },
    {
        "ID": 1858,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function sadd($key, ...$members) { $members = $this->prepareArguments('sadd', ...$members); $this->init(); return $this->driver->sadd($key, ...$members); }\n\n    ### Response: Add one or more members to a set\n@param string $key\n@param array $members\n@return int number of new members added to set.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    int insertPacket( final int termId, final int termOffset, final UnsafeBuffer buffer, final int length, final int transportIndex, final InetSocketAddress srcAddress) { final boolean isHeartbeat = DataHeaderFlyweight.isHeartbeat(buffer, length); final long packetPosition = computePosition(termId, termOffset, positionBitsToShift, initialTermId); final long proposedPosition = isHeartbeat ? packetPosition : packetPosition + length; if (!isFlowControlUnderRun(packetPosition) && !isFlowControlOverRun(proposedPosition)) { trackConnection(transportIndex, srcAddress, lastPacketTimestampNs); if (isHeartbeat) { if (DataHeaderFlyweight.isEndOfStream(buffer) && !isEndOfStream && allEos(transportIndex)) { LogBufferDescriptor.endOfStreamPosition(rawLog.metaData(), proposedPosition); isEndOfStream = true; } heartbeatsReceived.incrementOrdered(); } else { final UnsafeBuffer termBuffer = termBuffers[indexByPosition(packetPosition, positionBitsToShift)]; TermRebuilder.insert(termBuffer, termOffset, buffer, length); } lastPacketTimestampNs = cachedNanoClock.nanoTime(); hwmPosition.proposeMaxOrdered(proposedPosition); } return length; }\n\n    ### Response:",
        "ground_truth": "Insert frame into term buffer.\n\n@param termId         for the data packet to insert into the appropriate term.\n@param termOffset     for the start of the packet in the term.\n@param buffer         for the data packet to insert into the appropriate term.\n@param length         of the data packet\n@param transportIndex which the packet came from.\n@param srcAddress     which the packet came from.\n@return number of bytes applied as a result of this insertion.",
        "predict": " Add one or more members to a set\n@param string $key\n@param array $members\n@return int number of new members added to set.\n\n    "
    },
    {
        "ID": 1859,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function cmdHelp(command) { let ext = ''; if (command.args && command.args.length > 0) { ext = command.args.join(' '); } if (ext && helpTopics[ext]) { const txt = `Help topic for \\`${ext}\\`\\n\\n${helpTopics[ext]}` + '\\n\\nIssue the `help` command without any parameters to see all available commands'; command.reply(txt); } else { const help = `${getCommandHelps()}\\n\\n\\\\* Help topic available.\\n\\nIssue the \\`help\\` command with an ` + 'available help topic as a parameter to read additonal help'; command.reply(help); } return Promise.resolve(); }\n\n    ### Response: Reply with help to the command !help\n\n@private\n\n@param {command} command help command\n@returns {Promise} Resolves after help text is generated.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static AtomicCounter findControlToggle(final CountersReader counters) { final AtomicBuffer buffer = counters.metaDataBuffer(); for (int i = 0, size = counters.maxCounterId(); i < size; i++) { final int recordOffset = CountersReader.metaDataOffset(i); if (counters.getCounterState(i) == RECORD_ALLOCATED && buffer.getInt(recordOffset + TYPE_ID_OFFSET) == CONTROL_TOGGLE_TYPE_ID) { return new AtomicCounter(counters.valuesBuffer(), i, null); } } return null; }\n\n    ### Response:",
        "ground_truth": "Find the control toggle counter or return null if not found.\n\n@param counters to search for the control toggle.\n@return the control toggle counter or return null if not found.",
        "predict": " Reply with help to the command !help\n\n@private\n\n@param {command} command help command\n@returns {Promise} Resolves after help text is generated.\n\n    "
    },
    {
        "ID": 1860,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function getLastCategoryId() { $value = $this->getData(); if ($this->flashed === true) { // Clear data $this->clearData(); } return $value; }\n\n    ### Response: Returns last category id\n\n@return string.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String put(final String key, final String value) { return params.put(key, value); }\n\n    ### Response:",
        "ground_truth": "Put a key and value pair in the map of params.\n\n@param key   of the param to be put.\n@param value of the param to be put.\n@return the existing value otherwise null.",
        "predict": " Returns last category id\n\n@return string.\n\n    "
    },
    {
        "ID": 1861,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def dump_seek(self, reading_id): \"\"\"Seek the dump streamer to a given ID. Returns: (int, int, int): Two error codes and the count of remaining readings. The first error code covers the seeking process. The second error code covers the stream counting process (cannot fail) The third item in the tuple is the number of readings left in the stream. \"\"\" if self.dump_walker is None: return (pack_error(ControllerSubsystem.SENSOR_LOG, SensorLogError.STREAM_WALKER_NOT_INITIALIZED), Error.NO_ERROR, 0) try: exact = self.dump_walker.seek(reading_id, target='id') except UnresolvedIdentifierError: return (pack_error(ControllerSubsystem.SENSOR_LOG, SensorLogError.NO_MORE_READINGS), Error.NO_ERROR, 0) error = Error.NO_ERROR if not exact: error = pack_error(ControllerSubsystem.SENSOR_LOG, SensorLogError.ID_FOUND_FOR_ANOTHER_STREAM) return (error, error.NO_ERROR, self.dump_walker.count())\n\n    ### Response: Seek the dump streamer to a given ID.\n\n        Returns:\n            (int, int, int): Two error codes and the count of remaining readings.\n\n            The first error code covers the seeking process.\n            The second error code covers the stream counting process (cannot fail)\n            The third item in the tuple is the number of readings left in the stream..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String channelTag() { return (null != tags && tags.length > CHANNEL_TAG_INDEX) ? tags[CHANNEL_TAG_INDEX] : null; }\n\n    ### Response:",
        "ground_truth": "Get the channel tag, if it exists, that refers to an another channel.\n\n@return channel tag if it exists or null if not in this URI.\n@see CommonContext#TAGS_PARAM_NAME\n@see CommonContext#TAG_PREFIX",
        "predict": " Seek the dump streamer to a given ID.\n\n        Returns:\n            (int, int, int): Two error codes and the count of remaining readings.\n\n            The first error code covers the seeking process.\n            The second error code covers the stream counting process (cannot fail)\n            The third item in the tuple is the number of readings left in the stream..\n\n    "
    },
    {
        "ID": 1862,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function tokenReplace($input, $replacements) { if (is_string($input)) { return strtr($input, $replacements); } if (is_scalar($input) || empty($input)) { return $input; } foreach ($input as &$i) { $i = $this->tokenReplace($i, $replacements); } return $input; }\n\n    ### Response: Helper functions to replace tokens in an array.\n\n@param string|array $input\nThe array or string containing the tokens to replace.\n@param array $replacements\nThe token replacements.\n\n@return string|array\nThe input with the tokens replaced with their values..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String entityTag() { return (null != tags && tags.length > ENTITY_TAG_INDEX) ? tags[ENTITY_TAG_INDEX] : null; }\n\n    ### Response:",
        "ground_truth": "Get the entity tag, if it exists, that refers to an entity such as subscription or publication.\n\n@return entity tag if it exists or null if not in this URI.\n@see CommonContext#TAGS_PARAM_NAME\n@see CommonContext#TAG_PREFIX",
        "predict": " Helper functions to replace tokens in an array.\n\n@param string|array $input\nThe array or string containing the tokens to replace.\n@param array $replacements\nThe token replacements.\n\n@return string|array\nThe input with the tokens replaced with their values..\n\n    "
    },
    {
        "ID": 1863,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def callback(self, filename, lines, **kwargs): \"\"\"Sends log lines to redis servers\"\"\" self._logger.debug('Redis transport called') timestamp = self.get_timestamp(**kwargs) if kwargs.get('timestamp', False): del kwargs['timestamp'] namespaces = self._beaver_config.get_field('redis_namespace', filename) if not namespaces: namespaces = self._namespace namespaces = namespaces.split(\",\") self._logger.debug('Got namespaces: '.join(namespaces)) data_type = self._data_type self._logger.debug('Got data type: ' + data_type) server = self._get_next_server() self._logger.debug('Got redis server: ' + server['url']) pipeline = server['redis'].pipeline(transaction=False) callback_map = { self.LIST_DATA_TYPE: pipeline.rpush, self.CHANNEL_DATA_TYPE: pipeline.publish, } callback_method = callback_map[data_type] for line in lines: for namespace in namespaces: callback_method( namespace.strip(), self.format(filename, line, timestamp, **kwargs) ) try: pipeline.execute() except redis.exceptions.RedisError, exception: self._logger.warn('Cannot push lines to redis server: ' + server['url']) raise TransportException(exception)\n\n    ### Response: Sends log lines to redis servers.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String addSessionId(final String channel, final int sessionId) { final ChannelUri channelUri = ChannelUri.parse(channel); channelUri.put(CommonContext.SESSION_ID_PARAM_NAME, Integer.toString(sessionId)); return channelUri.toString(); }\n\n    ### Response:",
        "ground_truth": "Add a sessionId to a given channel.\n\n@param channel   to add sessionId to.\n@param sessionId to add to channel.\n@return new string that represents channel with sessionId added.",
        "predict": " Sends log lines to redis servers.\n\n    "
    },
    {
        "ID": 1864,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (tx *Tx) unlock() { if tx.writable { tx.db.mu.Unlock() } else { tx.db.mu.RUnlock() } }\n\n    ### Response: // unlock unlocks the database based on the transaction type..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static long getTag(final String paramValue) { return isTagged(paramValue) ? AsciiEncoding.parseLongAscii(paramValue, 4, paramValue.length() - 4) : INVALID_TAG; }\n\n    ### Response:",
        "ground_truth": "Get the value of the tag from a given parameter value.\n\n@param paramValue to extract the tag value from.\n@return the value of the tag or {@link #INVALID_TAG} if not tagged.\n@see CommonContext#TAGS_PARAM_NAME\n@see CommonContext#TAG_PREFIX",
        "predict": " // unlock unlocks the database based on the transaction type..\n\n    "
    },
    {
        "ID": 1865,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def sgd_entropic_regularization(a, b, M, reg, batch_size, numItermax, lr): ''' Compute the sgd algorithm to solve the regularized discrete measures optimal transport dual problem The function solves the following optimization problem: .. math:: \\gamma = arg\\min_\\gamma <\\gamma,M>_F + reg\\cdot\\Omega(\\gamma) s.t. \\gamma 1 = a \\gamma^T 1= b \\gamma \\geq 0 Where : - M is the (ns,nt) metric cost matrix - :math:`\\Omega` is the entropic regularization term with :math:`\\Omega(\\gamma)=\\sum_{i,j} \\gamma_{i,j}\\log(\\gamma_{i,j})` - a and b are source and target weights (sum to 1) Parameters ---------- a : np.ndarray(ns,) source measure b : np.ndarray(nt,) target measure M : np.ndarray(ns, nt) cost matrix reg : float number Regularization term > 0 batch_size : int number size of the batch numItermax : int number number of iteration lr : float number learning rate Returns ------- alpha : np.ndarray(ns,) dual variable beta : np.ndarray(nt,) dual variable Examples -------- >>> n_source = 7 >>> n_target = 4 >>> reg = 1 >>> numItermax = 20000 >>> lr = 0.1 >>> batch_size = 3 >>> log = True >>> a = ot.utils.unif(n_source) >>> b = ot.utils.unif(n_target) >>> rng = np.random.RandomState(0) >>> X_source = rng.randn(n_source, 2) >>> Y_target = rng.randn(n_target, 2) >>> M = ot.dist(X_source, Y_target) >>> sgd_dual_pi, log = stochastic.solve_dual_entropic(a, b, M, reg, batch_size, numItermax, lr, log) >>> print(log['alpha'], log['beta']) >>> print(sgd_dual_pi) References ---------- [Seguy et al., 2018] : International Conference on Learning Representation (2018), arXiv preprint arxiv:1711.02283. ''' n_source = np.shape(M)[0] n_target = np.shape(M)[1] cur_alpha = np.zeros(n_source) cur_beta = np.zeros(n_target) for cur_iter in range(numItermax): k = np.sqrt(cur_iter + 1) batch_alpha = np.random.choice(n_source, batch_size, replace=False) batch_beta = np.random.choice(n_target, batch_size, replace=False) update_alpha, update_beta = batch_grad_dual(a, b, M, reg, cur_alpha, cur_beta, batch_size, batch_alpha, batch_beta) cur_alpha[batch_alpha] += (lr / k) * update_alpha[batch_alpha] cur_beta[batch_beta] += (lr / k) * update_beta[batch_beta] return cur_alpha, cur_beta\n\n    ### Response: Compute the sgd algorithm to solve the regularized discrete measures\n        optimal transport dual problem\n\n    The function solves the following optimization problem:\n\n    .. math::\n        \\gamma = arg\\min_\\gamma _F + reg\\cdot\\Omega(\\gamma)\n\n        s.t. \\gamma 1 = a\n\n             \\gamma^T 1= b\n\n             \\gamma \\geq 0\n\n    Where :\n\n    - M is the (ns,nt) metric cost matrix\n    - :math:`\\Omega` is the entropic regularization term with :math:`\\Omega(\\gamma)=\\sum_{i,j} \\gamma_{i,j}\\log(\\gamma_{i,j})`\n    - a and b are source and target weights (sum to 1)\n\n    Parameters\n    ----------\n\n    a : np.ndarray(ns,)\n        source measure\n    b : np.ndarray(nt,)\n        target measure\n    M : np.ndarray(ns, nt)\n        cost matrix\n    reg : float number\n        Regularization term > 0\n    batch_size : int number\n        size of the batch\n    numItermax : int number\n        number of iteration\n    lr : float number\n        learning rate\n\n    Returns\n    -------\n\n    alpha : np.ndarray(ns,)\n        dual variable\n    beta : np.ndarray(nt,)\n        dual variable\n\n    Examples\n    --------\n\n    >>> n_source = 7\n    >>> n_target = 4\n    >>> reg = 1\n    >>> numItermax = 20000\n    >>> lr = 0.1\n    >>> batch_size = 3\n    >>> log = True\n    >>> a = ot.utils.unif(n_source)\n    >>> b = ot.utils.unif(n_target)\n    >>> rng = np.random.RandomState(0)\n    >>> X_source = rng.randn(n_source, 2)\n    >>> Y_target = rng.randn(n_target, 2)\n    >>> M = ot.dist(X_source, Y_target)\n    >>> sgd_dual_pi, log = stochastic.solve_dual_entropic(a, b, M, reg,\n                                                          batch_size,\n                                                          numItermax, lr, log)\n    >>> print(log['alpha'], log['beta'])\n    >>> print(sgd_dual_pi)\n\n    References\n    ----------\n\n    [Seguy et al., 2018] :\n                    International Conference on Learning Representation (2018),\n                      arXiv preprint arxiv:1711.02283..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public int appendPadding( final int termId, final int termOffset, final HeaderWriter header, final int length) { final int frameLength = length + HEADER_LENGTH; final int alignedLength = align(frameLength, FRAME_ALIGNMENT); final UnsafeBuffer termBuffer = this.termBuffer; final int termLength = termBuffer.capacity(); int resultingOffset = termOffset + alignedLength; putRawTailOrdered(termId, resultingOffset); if (resultingOffset > termLength) { resultingOffset = handleEndOfLogCondition(termBuffer, termOffset, header, termLength, termId); } else { header.write(termBuffer, termOffset, frameLength, termId); frameType(termBuffer, termOffset, PADDING_FRAME_TYPE); frameLengthOrdered(termBuffer, termOffset, frameLength); } return resultingOffset; }\n\n    ### Response:",
        "ground_truth": "Pad a length of the term buffer with a padding record.\n\n@param termId     for the current term.\n@param termOffset in the term at which to append.\n@param header     for writing the default header.\n@param length     of the padding to be written.\n@return the resulting offset of the term after success otherwise {@link #FAILED}.",
        "predict": " Compute the sgd algorithm to solve the regularized discrete measures\n        optimal transport dual problem\n\n    The function solves the following optimization problem:\n\n    .. math::\n        \\gamma = arg\\min_\\gamma _F + reg\\cdot\\Omega(\\gamma)\n\n        s.t. \\gamma 1 = a\n\n             \\gamma^T 1= b\n\n             \\gamma \\geq 0\n\n    Where :\n\n    - M is the (ns,nt) metric cost matrix\n    - :math:`\\Omega` is the entropic regularization term with :math:`\\Omega(\\gamma)=\\sum_{i,j} \\gamma_{i,j}\\log(\\gamma_{i,j})`\n    - a and b are source and target weights (sum to 1)\n\n    Parameters\n    ----------\n\n    a : np.ndarray(ns,)\n        source measure\n    b : np.ndarray(nt,)\n        target measure\n    M : np.ndarray(ns, nt)\n        cost matrix\n    reg : float number\n        Regularization term > 0\n    batch_size : int number\n        size of the batch\n    numItermax : int number\n        number of iteration\n    lr : float number\n        learning rate\n\n    Returns\n    -------\n\n    alpha : np.ndarray(ns,)\n        dual variable\n    beta : np.ndarray(nt,)\n        dual variable\n\n    Examples\n    --------\n\n    >>> n_source = 7\n    >>> n_target = 4\n    >>> reg = 1\n    >>> numItermax = 20000\n    >>> lr = 0.1\n    >>> batch_size = 3\n    >>> log = True\n    >>> a = ot.utils.unif(n_source)\n    >>> b = ot.utils.unif(n_target)\n    >>> rng = np.random.RandomState(0)\n    >>> X_source = rng.randn(n_source, 2)\n    >>> Y_target = rng.randn(n_target, 2)\n    >>> M = ot.dist(X_source, Y_target)\n    >>> sgd_dual_pi, log = stochastic.solve_dual_entropic(a, b, M, reg,\n                                                          batch_size,\n                                                          numItermax, lr, log)\n    >>> print(log['alpha'], log['beta'])\n    >>> print(sgd_dual_pi)\n\n    References\n    ----------\n\n    [Seguy et al., 2018] :\n                    International Conference on Learning Representation (2018),\n                      arXiv preprint arxiv:1711.02283..\n\n    "
    },
    {
        "ID": 1866,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function get() { if (empty($this->raw_data)) { return array(); } $regexp = '/(' . preg_quote(self::SEPARATOR_ELEMENT, '/') . '|' . preg_quote(self::SEPARATOR_ITEM, '/') . '[0-9]+' . preg_quote(self::SEPARATOR_LEVEL, '/') .')/'; return preg_split($regexp, $this->raw_data); }\n\n    ### Response: Return IDs of all messages in the result. Threaded data will be flattened.\n\n@return array List of message identifiers.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    final int updatePublisherLimit() { int workCount = 0; final long senderPosition = this.senderPosition.getVolatile(); if (hasReceivers || (spiesSimulateConnection && spyPositions.length > 0)) { long minConsumerPosition = senderPosition; for (final ReadablePosition spyPosition : spyPositions) { minConsumerPosition = Math.min(minConsumerPosition, spyPosition.getVolatile()); } final long proposedPublisherLimit = minConsumerPosition + termWindowLength; if (publisherLimit.proposeMaxOrdered(proposedPublisherLimit)) { cleanBuffer(proposedPublisherLimit); workCount = 1; } } else if (publisherLimit.get() > senderPosition) { publisherLimit.setOrdered(senderPosition); } return workCount; }\n\n    ### Response:",
        "ground_truth": "Update the publishers limit for flow control as part of the conductor duty cycle.\n\n@return 1 if the limit has been updated otherwise 0.",
        "predict": " Return IDs of all messages in the result. Threaded data will be flattened.\n\n@return array List of message identifiers.\n\n    "
    },
    {
        "ID": 1867,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def maybe_dotted(module, throw=True): \"\"\" If ``module`` is a dotted string pointing to the module, imports and returns the module object. \"\"\" try: return Configurator().maybe_dotted(module) except ImportError as e: err = '%s not found. %s' % (module, e) if throw: raise ImportError(err) else: log.error(err) return None\n\n    ### Response: If ``module`` is a dotted string pointing to the module,\n    imports and returns the module object..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static UnsafeBufferPosition allocate( final MutableDirectBuffer tempBuffer, final String name, final int typeId, final CountersManager countersManager, final long registrationId, final int sessionId, final int streamId, final String channel) { return new UnsafeBufferPosition( (UnsafeBuffer)countersManager.valuesBuffer(), allocateCounterId(tempBuffer, name, typeId, countersManager, registrationId, sessionId, streamId, channel), countersManager); }\n\n    ### Response:",
        "ground_truth": "Allocate a counter for tracking a position on a stream of messages.\n\n@param tempBuffer      to be used for labels and key.\n@param name            of the counter for the label.\n@param typeId          of the counter for classification.\n@param countersManager from which to allocated the underlying storage.\n@param registrationId  to be associated with the counter.\n@param sessionId       for the stream of messages.\n@param streamId        for the stream of messages.\n@param channel         for the stream of messages.\n@return a new {@link UnsafeBufferPosition} for tracking the stream.",
        "predict": " If ``module`` is a dotted string pointing to the module,\n    imports and returns the module object..\n\n    "
    },
    {
        "ID": 1868,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def main(): \"\"\" The \"main\" entry that controls the flow of the script based on the provided arguments. \"\"\" setup_logging(logging.INFO) # Parse arguments parser = argparse.ArgumentParser( description=\"A utility to interact with AWS using Cloudera Manager.\") parser.add_argument('-H', '--hostname', action='store', dest='hostname', required=True, help='The hostname of the Cloudera Manager server.') parser.add_argument('-p', action='store', dest='port', type=int, help='The port of the Cloudera Manager server. Defaults ' 'to 7180 (http) or 7183 (https).') parser.add_argument('-u', '--username', action='store', dest='username', help='Login name.') parser.add_argument('--password', action='store', dest='password', help='Login password.') parser.add_argument('--api-version', action='store', dest='api_version', type=int, default=MINIMUM_SUPPORTED_API_VERSION, help='API version to be used. Defaults to {0}.'.format( MINIMUM_SUPPORTED_API_VERSION)) parser.add_argument('--tls', action='store_const', dest='use_tls', const=True, default=False, help='Whether to use tls (https).') parser.add_argument('-c', '--show-categories', action='store_true', default=False, dest='show_categories', help='Prints a list of supported external account ' 'category names. For example, \"AWS\" is a supported ' 'external account category name.') parser.add_argument('-t', '--show-types', action='store', dest='category_name', help='Prints a list of supported external account type ' 'names for the given CATEGORY_NAME. For example, ' '\"AWS_ACCESS_KEY_AUTH\" is a supported external ' 'account type name for external account category ' '\"AWS\".') parser.add_argument('-n', '--show-credentials', action='store', dest='type_name', help='Prints a list of available credential names for ' 'the given TYPE_NAME.') parser.add_argument('--prune', action='store', dest='credential_name', help='Runs S3Guard prune command on external account ' 'associated with the given CREDENTIAL_NAME.') parser.add_argument('--version', action='version', version='%(prog)s 1.0') args = parser.parse_args() # Use the default port if required. if not args.port: if args.use_tls: args.port = DEFAULT_HTTPS_PORT else: args.port = DEFAULT_HTTP_PORT validate_api_compatibility(args) get_login_credentials(args) initialize_api(args) # Perform the AWS operation based on the input arguments. if args.show_categories: list_supported_categories() elif args.category_name: list_supported_types(args.category_name) elif args.type_name: list_credentials_by_name(args.type_name) elif args.credential_name: call_s3guard_prune(args.credential_name) else: print (\"ERROR: No arguments given to perform any AWS operation.\") parser.print_help() sys.exit(1)\n\n    ### Response: The \"main\" entry that controls the flow of the script based\n  on the provided arguments..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String labelName(final int typeId) { switch (typeId) { case PublisherLimit.PUBLISHER_LIMIT_TYPE_ID: return PublisherLimit.NAME; case SenderPos.SENDER_POSITION_TYPE_ID: return SenderPos.NAME; case ReceiverHwm.RECEIVER_HWM_TYPE_ID: return ReceiverHwm.NAME; case SubscriberPos.SUBSCRIBER_POSITION_TYPE_ID: return SubscriberPos.NAME; case ReceiverPos.RECEIVER_POS_TYPE_ID: return ReceiverPos.NAME; case SenderLimit.SENDER_LIMIT_TYPE_ID: return SenderLimit.NAME; case PublisherPos.PUBLISHER_POS_TYPE_ID: return PublisherPos.NAME; case SenderBpe.SENDER_BPE_TYPE_ID: return SenderBpe.NAME; default: return \"<unknown>\"; } }\n\n    ### Response:",
        "ground_truth": "Return the label name for a counter type identifier.\n\n@param typeId of the counter.\n@return the label name as a String.",
        "predict": " The \"main\" entry that controls the flow of the script based\n  on the provided arguments..\n\n    "
    },
    {
        "ID": 1869,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (s *USD) SetDollars(v int64) *USD { s.Dollars = &v return s }\n\n    ### Response: // SetDollars sets the Dollars field's value..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static long scanForAvailability(final UnsafeBuffer termBuffer, final int offset, final int maxLength) { final int limit = Math.min(maxLength, termBuffer.capacity() - offset); int available = 0; int padding = 0; do { final int termOffset = offset + available; final int frameLength = frameLengthVolatile(termBuffer, termOffset); if (frameLength <= 0) { break; } int alignedFrameLength = align(frameLength, FRAME_ALIGNMENT); if (isPaddingFrame(termBuffer, termOffset)) { padding = alignedFrameLength - HEADER_LENGTH; alignedFrameLength = HEADER_LENGTH; } available += alignedFrameLength; if (available > limit) { available -= alignedFrameLength; padding = 0; break; } } while (0 == padding && available < limit); return pack(padding, available); }\n\n    ### Response:",
        "ground_truth": "Scan the term buffer for availability of new message fragments from a given offset up to a maxLength of bytes.\n\n@param termBuffer to be scanned for new message fragments.\n@param offset     at which the scan should begin.\n@param maxLength  in bytes of how much should be scanned.\n@return resulting status of the scan which packs the available bytes and padding into a long.",
        "predict": " // SetDollars sets the Dollars field's value..\n\n    "
    },
    {
        "ID": 1870,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def call(self, method, *args, **kwargs): \"\"\" Calls an RPC function \"\"\" tried_reconnect = False for _ in range(2): try: self._send_call(self.deluge_version, self.deluge_protocol_version, method, *args, **kwargs) return self._receive_response(self.deluge_version, self.deluge_protocol_version) except (socket.error, ConnectionLostException, CallTimeoutException): if self.automatic_reconnect: if tried_reconnect: raise FailedToReconnectException() else: try: self.reconnect() except (socket.error, ConnectionLostException, CallTimeoutException): raise FailedToReconnectException() tried_reconnect = True else: raise\n\n    ### Response: Calls an RPC function.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public ChannelUriStringBuilder clear() { prefix = null; media = null; endpoint = null; networkInterface = null; controlEndpoint = null; controlMode = null; tags = null; alias = null; reliable = null; ttl = null; mtu = null; termLength = null; initialTermId = null; termId = null; termOffset = null; sessionId = null; linger = null; sparse = null; eos = null; tether = null; isSessionIdTagged = false; return this; }\n\n    ### Response:",
        "ground_truth": "Clear out all the values thus setting back to the initial state.\n\n@return this for a fluent API.",
        "predict": " Calls an RPC function.\n\n    "
    },
    {
        "ID": 1871,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _graphql_request_count_per_sliding_window(self, query_hash: str) -> int: \"\"\"Return how many GraphQL requests can be done within the sliding window.\"\"\" if self.is_logged_in: max_reqs = {'1cb6ec562846122743b61e492c85999f': 20, '33ba35852cb50da46f5b5e889df7d159': 20} else: max_reqs = {'1cb6ec562846122743b61e492c85999f': 200, '33ba35852cb50da46f5b5e889df7d159': 200} return max_reqs.get(query_hash) or min(max_reqs.values())\n\n    ### Response: Return how many GraphQL requests can be done within the sliding window..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public ChannelUriStringBuilder validate() { if (null == media) { throw new IllegalStateException(\"media type is mandatory\"); } if (CommonContext.UDP_MEDIA.equals(media) && (null == endpoint && null == controlEndpoint)) { throw new IllegalStateException(\"either 'endpoint' or 'control' must be specified for UDP.\"); } int count = 0; count += null == initialTermId ? 0 : 1; count += null == termId ? 0 : 1; count += null == termOffset ? 0 : 1; if (count > 0) { if (count < 3) { throw new IllegalStateException( \"if any of then a complete set of 'initialTermId', 'termId', and 'termOffset' must be provided\"); } if (termId - initialTermId < 0) // lgtm [java/dereferenced-value-may-be-null] { throw new IllegalStateException( \"difference greater than 2^31 - 1: termId=\" + termId + \" - initialTermId=\" + initialTermId); } if (null != termLength && termOffset > termLength) // lgtm [java/dereferenced-value-may-be-null] { throw new IllegalStateException(\"termOffset=\" + termOffset + \" > termLength=\" + termLength); } } return this; }\n\n    ### Response:",
        "ground_truth": "Validates that the collection of set parameters are valid together.\n\n@return this for a fluent API.\n@throws IllegalStateException if the combination of params is invalid.",
        "predict": " Return how many GraphQL requests can be done within the sliding window..\n\n    "
    },
    {
        "ID": 1872,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public boolean isEligibleForContextRefresh() { if (this.override) { return true; } if (getFile() != null) { return CONFIG_FILE_PATTERN.matcher(getFile().toFile().getName()).find(); } return false; }\n\n    ### Response: Is eligible for context refresh ?\n\n@return the boolean.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public ChannelUriStringBuilder prefix(final String prefix) { if (null != prefix && !prefix.equals(\"\") && !prefix.equals(SPY_QUALIFIER)) { throw new IllegalArgumentException(\"invalid prefix: \" + prefix); } this.prefix = prefix; return this; }\n\n    ### Response:",
        "ground_truth": "Set the prefix for taking an addition action such as spying on an outgoing publication with \"aeron-spy\".\n\n@param prefix to be applied to the URI before the the scheme.\n@return this for a fluent API.\n@see ChannelUri#SPY_QUALIFIER",
        "predict": " Is eligible for context refresh ?\n\n@return the boolean.\n\n    "
    },
    {
        "ID": 1873,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function findDefault() { if ($this->defaultSiteNodeName === null) { return $this->findOnline()->getFirst(); } /** * @var Site $defaultSite */ $defaultSite = $this->findOneByNodeName($this->defaultSiteNodeName); if (!$defaultSite instanceof Site || $defaultSite->getState() !== Site::STATE_ONLINE) { throw new NeosException(sprintf('DefaultSiteNode %s not found or not active', $this->defaultSiteNodeName), 1476374818); } return $defaultSite; }\n\n    ### Response: Find the site that was specified in the configuration ``defaultSiteNodeName``\n\nIf the defaultSiteNodeName-setting is null the first active site is returned\nIf the site is not found or not active an exception is thrown\n\n@return Site\n@throws NeosException.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public ChannelUriStringBuilder media(final String media) { switch (media) { case CommonContext.UDP_MEDIA: case CommonContext.IPC_MEDIA: break; default: throw new IllegalArgumentException(\"invalid media: \" + media); } this.media = media; return this; }\n\n    ### Response:",
        "ground_truth": "Set the media for this channel. Valid values are \"udp\" and \"ipc\".\n\n@param media for this channel.\n@return this for a fluent API.",
        "predict": " Find the site that was specified in the configuration ``defaultSiteNodeName``\n\nIf the defaultSiteNodeName-setting is null the first active site is returned\nIf the site is not found or not active an exception is thrown\n\n@return Site\n@throws NeosException.\n\n    "
    },
    {
        "ID": 1874,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (t *Thread) Abort(err error) { if t.abort == nil { panic(\"abort: \" + err.Error()) } t.abort <- err runtime.Goexit() }\n\n    ### Response: // Abort aborts the thread's current computation,\n// causing the innermost Try to return err..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public ChannelUriStringBuilder controlMode(final String controlMode) { if (null != controlMode && !controlMode.equals(CommonContext.MDC_CONTROL_MODE_MANUAL) && !controlMode.equals(CommonContext.MDC_CONTROL_MODE_DYNAMIC)) { throw new IllegalArgumentException(\"invalid control mode: \" + controlMode); } this.controlMode = controlMode; return this; }\n\n    ### Response:",
        "ground_truth": "Set the control mode for multi-destination-cast. Set to \"manual\" for allowing control from the publication API.\n\n@param controlMode for taking control of MDC.\n@return this for a fluent API.\n@see Publication#addDestination(String)\n@see Publication#removeDestination(String)\n@see CommonContext#MDC_CONTROL_MODE_PARAM_NAME\n@see CommonContext#MDC_CONTROL_MODE_MANUAL\n@see CommonContext#MDC_CONTROL_MODE_DYNAMIC",
        "predict": " // Abort aborts the thread's current computation,\n// causing the innermost Try to return err..\n\n    "
    },
    {
        "ID": 1875,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def get_times_covered_by_files(self): \"\"\" Find the coalesced intersection of the segments of all files in the list. \"\"\" times = segments.segmentlist([]) for entry in self: times.extend(entry.segment_list) times.coalesce() return times\n\n    ### Response: Find the coalesced intersection of the segments of all files in the\n        list..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public ChannelUriStringBuilder termLength(final Integer termLength) { if (null != termLength) { LogBufferDescriptor.checkTermLength(termLength); } this.termLength = termLength; return this; }\n\n    ### Response:",
        "ground_truth": "Set the length of buffer used for each term of the log. Valid values are powers of 2 in the 64K - 1G range.\n\n@param termLength of the buffer used for each term of the log.\n@return this for a fluent API.\n@see CommonContext#TERM_LENGTH_PARAM_NAME",
        "predict": " Find the coalesced intersection of the segments of all files in the\n        list..\n\n    "
    },
    {
        "ID": 1876,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def labels(self, pores=[], throats=[], element=None, mode='union'): r\"\"\" Returns a list of labels present on the object Additionally, this function can return labels applied to a specified set of pores or throats Parameters ---------- element : string Controls whether pore or throat labels are returned. If empty then both are returned (default). pores (or throats) : array_like The pores (or throats) whose labels are sought. If left empty a list containing all pore and throat labels is returned. mode : string, optional Controls how the query should be performed. Only applicable when ``pores`` or ``throats`` are specified: **'or', 'union', 'any'**: (default) Returns the labels that are assigned to *any* of the given locations. **'and', 'intersection', 'all'**: Labels that are present on *all* the given locations. **'xor', 'exclusive_or'** : Labels that are present on *only one* of the given locations. **'nor', 'none', 'not'**: Labels that are *not* present on any of the given locations. **'nand'**: Labels that are present on *all but one* of the given locations **'xnor'**: Labels that are present on *more than one* of the given locations. 'nxor' is also accepted. Returns ------- A list containing the labels on the object. If ``pores`` or ``throats`` are given, the results are filtered according to the specified ``mode``. See Also -------- props keys Notes ----- Technically, *'nand'* and *'xnor'* should also return pores with *none* of the labels but these are not included. This makes the returned list more useful. Examples -------- >>> import openpnm as op >>> pn = op.network.Cubic(shape=[5, 5, 5]) >>> pn.labels(pores=[11, 12]) ['pore.all', 'pore.front', 'pore.internal', 'pore.surface'] \"\"\" # Short-circuit query when no pores or throats are given if (sp.size(pores) == 0) and (sp.size(throats) == 0): labels = PrintableList(self.keys(element=element, mode='labels')) elif (sp.size(pores) > 0) and (sp.size(throats) > 0): raise Exception('Cannot perform label query on pores and ' + 'throats simultaneously') elif sp.size(pores) > 0: labels = self._get_labels(element='pore', locations=pores, mode=mode) elif sp.size(throats) > 0: labels = self._get_labels(element='throat', locations=throats, mode=mode) return labels\n\n    ### Response: r\"\"\"\n        Returns a list of labels present on the object\n\n        Additionally, this function can return labels applied to a specified\n        set of pores or throats\n\n        Parameters\n        ----------\n        element : string\n            Controls whether pore or throat labels are returned.  If empty then\n            both are returned (default).\n\n        pores (or throats) : array_like\n            The pores (or throats) whose labels are sought.  If left empty a\n            list containing all pore and throat labels is returned.\n\n        mode : string, optional\n            Controls how the query should be performed.  Only applicable\n            when ``pores`` or ``throats`` are specified:\n\n            **'or', 'union', 'any'**: (default) Returns the labels that are\n            assigned to *any* of the given locations.\n\n            **'and', 'intersection', 'all'**: Labels that are present on *all*\n            the given locations.\n\n            **'xor', 'exclusive_or'** : Labels that are present on *only one*\n            of the given locations.\n\n            **'nor', 'none', 'not'**: Labels that are *not* present on any of\n            the given locations.\n\n            **'nand'**: Labels that are present on *all but one* of the given\n            locations\n\n            **'xnor'**: Labels that are present on *more than one* of the given\n            locations.  'nxor' is also accepted.\n\n        Returns\n        -------\n        A list containing the labels on the object.  If ``pores`` or\n        ``throats`` are given, the results are filtered according to the\n        specified ``mode``.\n\n        See Also\n        --------\n        props\n        keys\n\n        Notes\n        -----\n        Technically, *'nand'* and *'xnor'* should also return pores with *none*\n        of the labels but these are not included.  This makes the returned list\n        more useful.\n\n        Examples\n        --------\n        >>> import openpnm as op\n        >>> pn = op.network.Cubic(shape=[5, 5, 5])\n        >>> pn.labels(pores=[11, 12])\n        ['pore.all', 'pore.front', 'pore.internal', 'pore.surface'].\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public ChannelUriStringBuilder termOffset(final Integer termOffset) { if (null != termOffset) { if ((termOffset < 0 || termOffset > LogBufferDescriptor.TERM_MAX_LENGTH)) { throw new IllegalArgumentException(\"term offset not in range 0-1g: \" + termOffset); } if (0 != (termOffset & (FRAME_ALIGNMENT - 1))) { throw new IllegalArgumentException(\"term offset not multiple of FRAME_ALIGNMENT: \" + termOffset); } } this.termOffset = termOffset; return this; }\n\n    ### Response:",
        "ground_truth": "Set the offset within a term at which a publication will start. This when combined with the term id can establish\na starting position.\n\n@param termOffset within a term at which a publication will start.\n@return this for a fluent API.\n@see CommonContext#TERM_OFFSET_PARAM_NAME",
        "predict": " r\"\"\"\n        Returns a list of labels present on the object\n\n        Additionally, this function can return labels applied to a specified\n        set of pores or throats\n\n        Parameters\n        ----------\n        element : string\n            Controls whether pore or throat labels are returned.  If empty then\n            both are returned (default).\n\n        pores (or throats) : array_like\n            The pores (or throats) whose labels are sought.  If left empty a\n            list containing all pore and throat labels is returned.\n\n        mode : string, optional\n            Controls how the query should be performed.  Only applicable\n            when ``pores`` or ``throats`` are specified:\n\n            **'or', 'union', 'any'**: (default) Returns the labels that are\n            assigned to *any* of the given locations.\n\n            **'and', 'intersection', 'all'**: Labels that are present on *all*\n            the given locations.\n\n            **'xor', 'exclusive_or'** : Labels that are present on *only one*\n            of the given locations.\n\n            **'nor', 'none', 'not'**: Labels that are *not* present on any of\n            the given locations.\n\n            **'nand'**: Labels that are present on *all but one* of the given\n            locations\n\n            **'xnor'**: Labels that are present on *more than one* of the given\n            locations.  'nxor' is also accepted.\n\n        Returns\n        -------\n        A list containing the labels on the object.  If ``pores`` or\n        ``throats`` are given, the results are filtered according to the\n        specified ``mode``.\n\n        See Also\n        --------\n        props\n        keys\n\n        Notes\n        -----\n        Technically, *'nand'* and *'xnor'* should also return pores with *none*\n        of the labels but these are not included.  This makes the returned list\n        more useful.\n\n        Examples\n        --------\n        >>> import openpnm as op\n        >>> pn = op.network.Cubic(shape=[5, 5, 5])\n        >>> pn.labels(pores=[11, 12])\n        ['pore.all', 'pore.front', 'pore.internal', 'pore.surface'].\n\n    "
    },
    {
        "ID": 1877,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function attachProps(context, target) { if (isObject(target)) { var keys = inheritedKeys(target); for (var i = 0, l = keys.length; i < l; ++i) { context[keys[i]] = clone(target[keys[i]]); } } }\n\n    ### Response: Used to attach attributes to the error object in the constructor..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public ChannelUriStringBuilder linger(final Long lingerNs) { if (null != lingerNs && lingerNs < 0) { throw new IllegalArgumentException(\"linger value cannot be negative: \" + lingerNs); } this.linger = lingerNs; return this; }\n\n    ### Response:",
        "ground_truth": "Set the time a network publication will linger in nanoseconds after being drained. This time is so that tail loss\ncan be recovered.\n\n@param lingerNs time for the publication after it is drained.\n@return this for a fluent API.\n@see CommonContext#LINGER_PARAM_NAME",
        "predict": " Used to attach attributes to the error object in the constructor..\n\n    "
    },
    {
        "ID": 1878,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def read_json_base64 str = read_json_string m = str.length % 4 if m != 0 # Add missing padding (4 - m).times do str += '=' end end Base64.strict_decode64(str) end\n\n    ### Response: Reads a block of base64 characters, decoding it, and returns via str.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void openDatagramChannel(final AtomicCounter statusIndicator) { try { sendDatagramChannel = DatagramChannel.open(udpChannel.protocolFamily()); receiveDatagramChannel = sendDatagramChannel; if (udpChannel.isMulticast()) { if (null != connectAddress) { receiveDatagramChannel = DatagramChannel.open(udpChannel.protocolFamily()); } receiveDatagramChannel.setOption(StandardSocketOptions.SO_REUSEADDR, true); receiveDatagramChannel.bind(new InetSocketAddress(endPointAddress.getPort())); receiveDatagramChannel.join(endPointAddress.getAddress(), udpChannel.localInterface()); sendDatagramChannel.setOption(StandardSocketOptions.IP_MULTICAST_IF, udpChannel.localInterface()); if (udpChannel.isHasMulticastTtl()) { sendDatagramChannel.setOption(StandardSocketOptions.IP_MULTICAST_TTL, udpChannel.multicastTtl()); multicastTtl = sendDatagramChannel.getOption(StandardSocketOptions.IP_MULTICAST_TTL); } else if (context.socketMulticastTtl() != 0) { sendDatagramChannel.setOption(StandardSocketOptions.IP_MULTICAST_TTL, context.socketMulticastTtl()); multicastTtl = sendDatagramChannel.getOption(StandardSocketOptions.IP_MULTICAST_TTL); } } else { sendDatagramChannel.bind(bindAddress); } if (null != connectAddress) { sendDatagramChannel.connect(connectAddress); } if (0 != context.socketSndbufLength()) { sendDatagramChannel.setOption(SO_SNDBUF, context.socketSndbufLength()); } if (0 != context.socketRcvbufLength()) { receiveDatagramChannel.setOption(SO_RCVBUF, context.socketRcvbufLength()); } sendDatagramChannel.configureBlocking(false); receiveDatagramChannel.configureBlocking(false); } catch (final IOException ex) { if (null != statusIndicator) { statusIndicator.setOrdered(ChannelEndpointStatus.ERRORED); } CloseHelper.quietClose(sendDatagramChannel); if (receiveDatagramChannel != sendDatagramChannel) { CloseHelper.quietClose(receiveDatagramChannel); } sendDatagramChannel = null; receiveDatagramChannel = null; throw new AeronException( \"channel error - \" + ex.getMessage() + \" (at \" + ex.getStackTrace()[0].toString() + \"): \" + udpChannel.originalUriString(), ex); } }\n\n    ### Response:",
        "ground_truth": "Create the underlying channel for reading and writing.\n\n@param statusIndicator to set for error status",
        "predict": " Reads a block of base64 characters, decoding it, and returns via str.\n\n    "
    },
    {
        "ID": 1879,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function findCorrespondingNodeDataInTargetWorkspace(NodeInterface $node, Workspace $targetWorkspace) { $nodeData = $this->nodeDataRepository->findOneByIdentifier($node->getIdentifier(), $targetWorkspace, $node->getDimensions(), true); if ($nodeData === null || $nodeData->getWorkspace() !== $targetWorkspace) { return null; } return $nodeData; }\n\n    ### Response: Returns the NodeData instance with the given identifier from the target workspace.\nIf no NodeData instance is found in that target workspace, null is returned.\n\n@param NodeInterface $node The reference node to find a corresponding variant for\n@param Workspace $targetWorkspace The target workspace to look in\n@return NodeData Either a regular node, a shadow node or null.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void close() { if (!isClosed) { isClosed = true; try { if (null != selectionKey) { selectionKey.cancel(); } if (null != transportPoller) { transportPoller.cancelRead(this); transportPoller.selectNowWithoutProcessing(); } if (null != sendDatagramChannel) { sendDatagramChannel.close(); } if (receiveDatagramChannel != sendDatagramChannel && null != receiveDatagramChannel) { receiveDatagramChannel.close(); } if (null != transportPoller) { transportPoller.selectNowWithoutProcessing(); } } catch (final IOException ex) { errorLog.record(ex); } } }\n\n    ### Response:",
        "ground_truth": "Close transport, canceling any pending read operations and closing channel",
        "predict": " Returns the NodeData instance with the given identifier from the target workspace.\nIf no NodeData instance is found in that target workspace, null is returned.\n\n@param NodeInterface $node The reference node to find a corresponding variant for\n@param Workspace $targetWorkspace The target workspace to look in\n@return NodeData Either a regular node, a shadow node or null.\n\n    "
    },
    {
        "ID": 1880,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def validate_experimental(context, param, value): \"\"\"Load and validate an experimental data configuration.\"\"\" if value is None: return config = ExperimentConfiguration(value) config.validate() return config\n\n    ### Response: Load and validate an experimental data configuration..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public boolean isValidFrame(final UnsafeBuffer buffer, final int length) { boolean isFrameValid = true; if (frameVersion(buffer, 0) != HeaderFlyweight.CURRENT_VERSION) { isFrameValid = false; invalidPackets.increment(); } else if (length < HeaderFlyweight.MIN_HEADER_LENGTH) { isFrameValid = false; invalidPackets.increment(); } return isFrameValid; }\n\n    ### Response:",
        "ground_truth": "Is the received frame valid. This method will do some basic checks on the header and can be\noverridden in a subclass for further validation.\n\n@param buffer containing the frame.\n@param length of the frame.\n@return true if the frame is believed valid otherwise false.",
        "predict": " Load and validate an experimental data configuration..\n\n    "
    },
    {
        "ID": 1881,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void setFrameFromCenter (float centerX, float centerY, float cornerX, float cornerY) { float width = Math.abs(cornerX - centerX); float height = Math.abs(cornerY - centerY); setFrame(centerX - width, centerY - height, width * 2, height * 2); }\n\n    ### Response: Sets the location and size of the framing rectangle of this shape based on the specified\ncenter and corner points..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public InetSocketAddress receive(final ByteBuffer buffer) { buffer.clear(); InetSocketAddress address = null; try { if (receiveDatagramChannel.isOpen()) { address = (InetSocketAddress)receiveDatagramChannel.receive(buffer); } } catch (final PortUnreachableException ignored) { } catch (final Exception ex) { LangUtil.rethrowUnchecked(ex); } return address; }\n\n    ### Response:",
        "ground_truth": "Receive a datagram from the media layer.\n\n@param buffer into which the datagram will be received.\n@return the source address of the datagram if one is available otherwise false.",
        "predict": " Sets the location and size of the framing rectangle of this shape based on the specified\ncenter and corner points..\n\n    "
    },
    {
        "ID": 1882,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public ClassInfoList getClassesWithAnnotation(final String annotationName) { if (closed.get()) { throw new IllegalArgumentException(\"Cannot use a ScanResult after it has been closed\"); } if (!scanSpec.enableClassInfo || !scanSpec.enableAnnotationInfo) { throw new IllegalArgumentException( \"Please call ClassGraph#enableClassInfo() and #enableAnnotationInfo() before #scan()\"); } final ClassInfo classInfo = classNameToClassInfo.get(annotationName); return classInfo == null ? ClassInfoList.EMPTY_LIST : classInfo.getClassesWithAnnotation(); }\n\n    ### Response: Get classes with the named class annotation or meta-annotation.\n\n@param annotationName\nThe name of the class annotation or meta-annotation.\n@return A list of all non-annotation classes that were found with the named class annotation during the scan,\nor the empty list if none..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void onNak( final int termId, final int termOffset, final int length, final int termLength, final RetransmitSender retransmitSender) { if (!isInvalid(termOffset, termLength)) { if (null == activeRetransmitsMap.get(termId, termOffset) && activeRetransmitsMap.size() < MAX_RETRANSMITS_DEFAULT) { final RetransmitAction action = assignRetransmitAction(); action.termId = termId; action.termOffset = termOffset; action.length = Math.min(length, termLength - termOffset); final long delay = delayGenerator.generateDelay(); if (0 == delay) { retransmitSender.resend(termId, termOffset, action.length); action.linger(lingerTimeoutGenerator.generateDelay(), nanoClock.nanoTime()); } else { action.delay(delay, nanoClock.nanoTime()); } activeRetransmitsMap.put(termId, termOffset, action); } } }\n\n    ### Response:",
        "ground_truth": "Called on reception of a NAK to start retransmits handling.\n\n@param termId           from the NAK and the term id of the buffer to retransmit from\n@param termOffset       from the NAK and the offset of the data to retransmit\n@param length           of the missing data\n@param termLength       of the term buffer.\n@param retransmitSender to call if an immediate retransmit is required",
        "predict": " Get classes with the named class annotation or meta-annotation.\n\n@param annotationName\nThe name of the class annotation or meta-annotation.\n@return A list of all non-annotation classes that were found with the named class annotation during the scan,\nor the empty list if none..\n\n    "
    },
    {
        "ID": 1883,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function orGroup() { $conditions = func_get_args(); if (Collection::count($conditions) == 0) { throw new ErrorException('Missing arguments for orGroup() '); } // return $this->groupWhere($conditions[0], 'or', $conditions); }\n\n    ### Response: Set new OR for multi condition in where clause.\n\n@return Query.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void processTimeouts(final long nowNs, final RetransmitSender retransmitSender) { if (activeRetransmitsMap.size() > 0) { for (final RetransmitAction action : retransmitActionPool) { if (DELAYED == action.state && (action.expireNs - nowNs < 0)) { retransmitSender.resend(action.termId, action.termOffset, action.length); action.linger(lingerTimeoutGenerator.generateDelay(), nanoClock.nanoTime()); } else if (LINGERING == action.state && (action.expireNs - nowNs < 0)) { action.cancel(); activeRetransmitsMap.remove(action.termId, action.termOffset); } } } }\n\n    ### Response:",
        "ground_truth": "Called to process any outstanding timeouts.\n\n@param nowNs            time in nanoseconds\n@param retransmitSender to call on retransmissions",
        "predict": " Set new OR for multi condition in where clause.\n\n@return Query.\n\n    "
    },
    {
        "ID": 1884,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Response deleteAdminGroup(String roomName, String groupName) { return restClient.delete(\"chatrooms/\" + roomName + \"/admins/group/\" + groupName, new HashMap<String, String>()); }\n\n    ### Response: Delete admin group from chatroom.\n\n@param roomName\nthe room name\n@param groupName\nthe groupName\n@return the response.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String status(final long status) { if (INITIALIZING == status) { return \"INITIALIZING\"; } if (ERRORED == status) { return \"ERRORED\"; } if (ACTIVE == status) { return \"ACTIVE\"; } if (CLOSING == status) { return \"CLOSING\"; } return \"unknown id=\" + status; }\n\n    ### Response:",
        "ground_truth": "String representation of the channel status.\n\n@param status to be converted.\n@return representation of the channel status.",
        "predict": " Delete admin group from chatroom.\n\n@param roomName\nthe room name\n@param groupName\nthe groupName\n@return the response.\n\n    "
    },
    {
        "ID": 1885,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static function getValidatorStaticMeta(): ValidatorStaticMeta { if (null === self::$validatorStaticMeta) { self::$validatorStaticMeta = new ValidatorStaticMeta(self::getDoctrineStaticMeta()); } return self::$validatorStaticMeta; }\n\n    ### Response: Get an instance of the ValidatorStaticMeta object for this Entity\n\n@return ValidatorStaticMeta.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static AtomicCounter allocate( final MutableDirectBuffer tempBuffer, final String name, final int typeId, final CountersManager countersManager, final String channel) { final int keyLength = tempBuffer.putStringWithoutLengthAscii( CHANNEL_OFFSET + SIZE_OF_INT, channel, 0, MAX_CHANNEL_LENGTH); tempBuffer.putInt(CHANNEL_OFFSET, keyLength); int labelLength = 0; labelLength += tempBuffer.putStringWithoutLengthAscii(keyLength + labelLength, name); labelLength += tempBuffer.putStringWithoutLengthAscii(keyLength + labelLength, \": \"); labelLength += tempBuffer.putStringWithoutLengthAscii( keyLength + labelLength, channel, 0, MAX_LABEL_LENGTH - labelLength); return countersManager.newCounter(typeId, tempBuffer, 0, keyLength, tempBuffer, keyLength, labelLength); }\n\n    ### Response:",
        "ground_truth": "Allocate an indicator for tracking the status of a channel endpoint.\n\n@param tempBuffer      to be used for labels and metadata.\n@param name            of the counter for the label.\n@param typeId          of the counter for classification.\n@param countersManager from which to allocated the underlying storage.\n@param channel         for the stream of messages.\n@return a new {@link AtomicCounter} for tracking the status.",
        "predict": " Get an instance of the ValidatorStaticMeta object for this Entity\n\n@return ValidatorStaticMeta.\n\n    "
    },
    {
        "ID": 1886,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected FileWrapper handleAddFileAndUpdateCandidateDescription(Integer candidateId, File file, String candidateDescription, String externalId, FileParams params, boolean deleteFile) { // first add the file FileWrapper fileWrapper = this.handleAddFileWithFile(Candidate.class, candidateId, file, externalId, params, deleteFile); // second update the candidate try { Candidate candidateToUpdate = new Candidate(); candidateToUpdate.setId(candidateId); if (!StringUtils.isBlank(candidateDescription)) { candidateToUpdate.setDescription(candidateDescription); this.updateEntity(candidateToUpdate); } } catch (Exception e) { log.error(\"Error reading file to resume text\", e); } return fileWrapper; }\n\n    ### Response: Handles logic to add the file to the candidate entity AND updating the candidate.description with the resume text.\n\n@param candidateId\n@param file\n@param externalId\n@param params\n@param deleteFile\n@return.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public DirectBufferVector reset(final DirectBuffer buffer, final int offset, final int length) { this.buffer = buffer; this.offset = offset; this.length = length; return this; }\n\n    ### Response:",
        "ground_truth": "Reset the values.\n\n@param buffer which is the super set.\n@param offset at which the vector begins.\n@param length of the vector.\n@return this for a fluent API.",
        "predict": " Handles logic to add the file to the candidate entity AND updating the candidate.description with the resume text.\n\n@param candidateId\n@param file\n@param externalId\n@param params\n@param deleteFile\n@return.\n\n    "
    },
    {
        "ID": 1887,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (a *App) SeccompOverride() (mode string, errno string, set []string, e error) { if a.SeccompFilter == \"\" { return } for _, i := range strings.Split(a.SeccompFilter, \",\") { kv := strings.Split(i, \"=\") if len(kv) == 2 { switch kv[0] { case \"mode\": if kv[1] != \"remove\" && kv[1] != \"retain\" { e = ErrInvalidSeccompMode } mode = kv[1] case \"errno\": errno = kv[1] default: e = ErrInvalidSeccompOverride } } else { set = append(set, i) } } return }\n\n    ### Response: // SeccompFilter returns type, filter set and optional errno\n// for a seccomp filter override specified via CLI.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public DirectBufferVector validate() { final int capacity = buffer.capacity(); if (offset < 0 || offset >= capacity) { throw new IllegalArgumentException(\"offset=\" + offset + \" capacity=\" + capacity); } if (length < 0 || length > (capacity - offset)) { throw new IllegalArgumentException(\"offset=\" + offset + \" capacity=\" + capacity + \" length=\" + length); } return this; }\n\n    ### Response:",
        "ground_truth": "Ensure the vector is valid for the buffer.\n\n@throws NullPointerException if the buffer is null.\n@throws IllegalArgumentException if the offset is out of range for the buffer.\n@throws IllegalArgumentException if the length is out of range for the buffer.\n@return this for a fluent API.",
        "predict": " // SeccompFilter returns type, filter set and optional errno\n// for a seccomp filter override specified via CLI.\n\n    "
    },
    {
        "ID": 1888,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func Int(v int) *int { p := new(int) *p = v return p }\n\n    ### Response: // Int is a helper routine that allocates a new int value to store v and\n// returns a pointer to it.  This is useful when assigning optional parameters..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static int validateAndComputeLength(final DirectBufferVector[] vectors) { int messageLength = 0; for (final DirectBufferVector vector : vectors) { vector.validate(); messageLength += vector.length; if (messageLength < 0) { throw new IllegalStateException(\"length overflow: \" + Arrays.toString(vectors)); } } return messageLength; }\n\n    ### Response:",
        "ground_truth": "Validate an array of vectors to make up a message and compute the total length.\n\n@param vectors to be validated summed.\n@return the sum of the vector lengths.",
        "predict": " // Int is a helper routine that allocates a new int value to store v and\n// returns a pointer to it.  This is useful when assigning optional parameters..\n\n    "
    },
    {
        "ID": 1889,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def copyToLocal(self, paths, dst, check_crc=False): ''' Copy files that match the file source pattern to the local name. Source is kept. When copying multiple, files, the destination must be a directory. :param paths: Paths to copy :type paths: list of strings :param dst: Destination path :type dst: string :param check_crc: Check for checksum errors :type check_crc: boolean :returns: a generator that yields strings ''' if not isinstance(paths, list): raise InvalidInputException(\"Paths should be a list\") if not paths: raise InvalidInputException(\"copyToLocal: no path given\") if not dst: raise InvalidInputException(\"copyToLocal: no destination given\") dst = self._normalize_path(dst) processor = lambda path, node, dst=dst, check_crc=check_crc: self._handle_copyToLocal(path, node, dst, check_crc) for path in paths: self.base_source = None for item in self._find_items([path], processor, include_toplevel=True, recurse=True, include_children=True): if item: yield item\n\n    ### Response: Copy files that match the file source pattern\n        to the local name.  Source is kept.  When copying multiple,\n        files, the destination must be a directory.\n\n        :param paths: Paths to copy\n        :type paths: list of strings\n        :param dst: Destination path\n        :type dst: string\n        :param check_crc: Check for checksum errors\n        :type check_crc: boolean\n        :returns: a generator that yields strings.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static int producerWindowLength(final int termBufferLength, final int defaultTermWindowLength) { int termWindowLength = termBufferLength / 2; if (0 != defaultTermWindowLength) { termWindowLength = Math.min(defaultTermWindowLength, termWindowLength); } return termWindowLength; }\n\n    ### Response:",
        "ground_truth": "How far ahead a producer can get from a consumer position.\n\n@param termBufferLength        for when default is not set and considering an appropriate minimum.\n@param defaultTermWindowLength to take priority.\n@return the length to be used for the producer window.",
        "predict": " Copy files that match the file source pattern\n        to the local name.  Source is kept.  When copying multiple,\n        files, the destination must be a directory.\n\n        :param paths: Paths to copy\n        :type paths: list of strings\n        :param dst: Destination path\n        :type dst: string\n        :param check_crc: Check for checksum errors\n        :type check_crc: boolean\n        :returns: a generator that yields strings.\n\n    "
    },
    {
        "ID": 1890,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def getAnalysisRequests(self, **kwargs): \"\"\"Return all the Analysis Requests objects linked to the Batch kargs are passed directly to the catalog. \"\"\" brains = self.getAnalysisRequestsBrains(**kwargs) return [b.getObject() for b in brains]\n\n    ### Response: Return all the Analysis Requests objects linked to the Batch kargs\n        are passed directly to the catalog..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void validateSocketBufferLengths(final MediaDriver.Context ctx) { try (DatagramChannel probe = DatagramChannel.open()) { final int defaultSoSndBuf = probe.getOption(StandardSocketOptions.SO_SNDBUF); probe.setOption(StandardSocketOptions.SO_SNDBUF, Integer.MAX_VALUE); final int maxSoSndBuf = probe.getOption(StandardSocketOptions.SO_SNDBUF); if (maxSoSndBuf < ctx.socketSndbufLength()) { System.err.format( \"WARNING: Could not get desired SO_SNDBUF, adjust OS to allow %s: attempted=%d, actual=%d%n\", SOCKET_SNDBUF_LENGTH_PROP_NAME, ctx.socketSndbufLength(), maxSoSndBuf); } probe.setOption(StandardSocketOptions.SO_RCVBUF, Integer.MAX_VALUE); final int maxSoRcvBuf = probe.getOption(StandardSocketOptions.SO_RCVBUF); if (maxSoRcvBuf < ctx.socketRcvbufLength()) { System.err.format( \"WARNING: Could not get desired SO_RCVBUF, adjust OS to allow %s: attempted=%d, actual=%d%n\", SOCKET_RCVBUF_LENGTH_PROP_NAME, ctx.socketRcvbufLength(), maxSoRcvBuf); } final int soSndBuf = 0 == ctx.socketSndbufLength() ? defaultSoSndBuf : ctx.socketSndbufLength(); if (ctx.mtuLength() > soSndBuf) { throw new ConfigurationException(String.format( \"MTU greater than socket SO_SNDBUF, adjust %s to match MTU: mtuLength=%d, SO_SNDBUF=%d\", SOCKET_SNDBUF_LENGTH_PROP_NAME, ctx.mtuLength(), soSndBuf)); } if (ctx.initialWindowLength() > maxSoRcvBuf) { throw new ConfigurationException(\"window length greater than socket SO_RCVBUF, increase '\" + Configuration.INITIAL_WINDOW_LENGTH_PROP_NAME + \"' to match window: windowLength=\" + ctx.initialWindowLength() + \", SO_RCVBUF=\" + maxSoRcvBuf); } } catch (final IOException ex) { throw new AeronException(\"probe socket: \" + ex.toString(), ex); } }\n\n    ### Response:",
        "ground_truth": "Validate that the socket buffer lengths are sufficient for the media driver configuration.\n\n@param ctx to be validated.",
        "predict": " Return all the Analysis Requests objects linked to the Batch kargs\n        are passed directly to the catalog..\n\n    "
    },
    {
        "ID": 1891,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _apply_flat(cls, f, acts): \"\"\"Utility for applying f to inner dimension of acts. Flattens acts into a 2D tensor, applies f, then unflattens so that all dimesnions except innermost are unchanged. \"\"\" orig_shape = acts.shape acts_flat = acts.reshape([-1, acts.shape[-1]]) new_flat = f(acts_flat) if not isinstance(new_flat, np.ndarray): return new_flat shape = list(orig_shape[:-1]) + [-1] return new_flat.reshape(shape)\n\n    ### Response: Utility for applying f to inner dimension of acts.\n\n    Flattens acts into a 2D tensor, applies f, then unflattens so that all\n    dimesnions except innermost are unchanged..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void validatePageSize(final int pageSize) { if (pageSize < PAGE_MIN_SIZE) { throw new ConfigurationException( \"page size less than min size of \" + PAGE_MIN_SIZE + \": \" + pageSize); } if (pageSize > PAGE_MAX_SIZE) { throw new ConfigurationException( \"page size greater than max size of \" + PAGE_MAX_SIZE + \": \" + pageSize); } if (!BitUtil.isPowerOfTwo(pageSize)) { throw new ConfigurationException(\"page size not a power of 2: \" + pageSize); } }\n\n    ### Response:",
        "ground_truth": "Validate that page size is valid and alignment is valid.\n\n@param pageSize to be checked.\n@throws ConfigurationException if the size is not as expected.",
        "predict": " Utility for applying f to inner dimension of acts.\n\n    Flattens acts into a 2D tensor, applies f, then unflattens so that all\n    dimesnions except innermost are unchanged..\n\n    "
    },
    {
        "ID": 1892,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func ReceiveOCN(c context.Context, obj *GCSObject, queueName, path string) error { req := obj.ToBQJobReq() b, err := json.MarshalIndent(req, \"\", \" \") if err != nil { return err } h := make(http.Header) h.Set(\"Content-Type\", \"application/json\") t := &taskqueue.Task{ Path: path, Payload: b, Header: h, Method: \"POST\", } _, err = taskqueue.Add(c, t, queueName) return err }\n\n    ### Response: // ReceiveOCN is Process payload of Object Change Notification.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void validateSessionIdRange(final int low, final int high) { if (low > high) { throw new ConfigurationException(\"low session id value \" + low + \" must be <= high value \" + high); } if (Math.abs((long)high - low) > Integer.MAX_VALUE) { throw new ConfigurationException(\"reserved range to too large\"); } }\n\n    ### Response:",
        "ground_truth": "Validate the range of session ids based on a high and low value provided which accounts for the values wrapping.\n\n@param low  value in the range.\n@param high value in the range.\n@throws ConfigurationException if the values are not valid.",
        "predict": " // ReceiveOCN is Process payload of Object Change Notification.\n\n    "
    },
    {
        "ID": 1893,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def verify_socket(interface, pub_port, ret_port): ''' Attempt to bind to the sockets to verify that they are available ''' addr_family = lookup_family(interface) for port in pub_port, ret_port: sock = socket.socket(addr_family, socket.SOCK_STREAM) try: sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1) sock.bind((interface, int(port))) except Exception as exc: msg = 'Unable to bind socket {0}:{1}'.format(interface, port) if exc.args: msg = '{0}, error: {1}'.format(msg, str(exc)) else: msg = '{0}, this might not be a problem.'.format(msg) msg += '; Is there another salt-master running?' if is_console_configured(): log.warning(msg) else: sys.stderr.write('WARNING: {0}\\n'.format(msg)) return False finally: sock.close() return True\n\n    ### Response: Attempt to bind to the sockets to verify that they are available.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void validateUnblockTimeout( final long publicationUnblockTimeoutNs, final long clientLivenessTimeoutNs, final long timerIntervalNs) { if (publicationUnblockTimeoutNs <= clientLivenessTimeoutNs) { throw new ConfigurationException( \"publicationUnblockTimeoutNs=\" + publicationUnblockTimeoutNs + \" <= clientLivenessTimeoutNs=\" + clientLivenessTimeoutNs); } if (clientLivenessTimeoutNs <= timerIntervalNs) { throw new ConfigurationException( \"clientLivenessTimeoutNs=\" + clientLivenessTimeoutNs + \" <= timerIntervalNs=\" + timerIntervalNs); } }\n\n    ### Response:",
        "ground_truth": "Validate that the timeouts for unblocking publications from a client are valid.\n\n@param publicationUnblockTimeoutNs after which an uncommitted publication will be unblocked.\n@param clientLivenessTimeoutNs     after which a client will be considered not alive.\n@param timerIntervalNs             interval at which the driver will check timeouts.\n@throws ConfigurationException if the values are not valid.",
        "predict": " Attempt to bind to the sockets to verify that they are available.\n\n    "
    },
    {
        "ID": 1894,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def server_info_cb(self, context, server_info_p, userdata): \"\"\"Retrieves the default sink and calls request_update\"\"\" server_info = server_info_p.contents self.request_update(context)\n\n    ### Response: Retrieves the default sink and calls request_update.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public ErrorResponseFlyweight errorCode(final ErrorCode code) { buffer.putInt(offset + ERROR_CODE_OFFSET, code.value()); return this; }\n\n    ### Response:",
        "ground_truth": "Set the error code for the command.\n\n@param code for the error\n@return flyweight",
        "predict": " Retrieves the default sink and calls request_update.\n\n    "
    },
    {
        "ID": 1895,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function __isset($name) { $normalized = lcfirst($name); $property = \"_{$normalized}\"; if (property_exists($this, $property)) { return true; } return false; }\n\n    ### Response: Checks if a given property name exists and can be accessed\n\n@param string $name The property name\n\n@return bool True if a property with the provided name exists,\nfalse otherwise.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void reset() { isBallotSent = false; isLeader = false; hasRequestedJoin = false; hasSentTerminationAck = false; vote = null; candidateTermId = Aeron.NULL_VALUE; leadershipTermId = Aeron.NULL_VALUE; logPosition = NULL_POSITION; }\n\n    ### Response:",
        "ground_truth": "Reset the state of a cluster member so it can be canvassed and reestablished.",
        "predict": " Checks if a given property name exists and can be accessed\n\n@param string $name The property name\n\n@return bool True if a property with the provided name exists,\nfalse otherwise.\n\n    "
    },
    {
        "ID": 1896,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function saveImage($imageFile, $image) { // Trigger before save hook $this->triggerBeforeSaveHook($image); $imageQuality = array_get( $this->uploadFieldOptions, 'resize_image_quality', config('imageup.resize_image_quality') ); $imagePath = $this->getFileUploadPath($imageFile); $this->getStorageDisk()->put( $imagePath, (string)$image->encode(null, $imageQuality), 'public' ); // Trigger after save hook $this->triggerAfterSaveHook($image); // clean up $image->destroy(); return $imagePath; }\n\n    ### Response: Save the image to disk\n\n@param $imageFile\n@param $image\n@return string\n@throws \\Exception.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String encodeAsString(final ClusterMember[] clusterMembers) { final StringBuilder builder = new StringBuilder(); for (int i = 0, length = clusterMembers.length; i < length; i++) { final ClusterMember member = clusterMembers[i]; builder .append(member.id()) .append(',') .append(member.endpointsDetail()); if ((length - 1) != i) { builder.append('|'); } } return builder.toString(); }\n\n    ### Response:",
        "ground_truth": "Encode member details from a cluster members array to a string.\n\n@param clusterMembers to fill the details from\n@return String representation suitable for use with {@link ClusterMember#parse}",
        "predict": " Save the image to disk\n\n@param $imageFile\n@param $image\n@return string\n@throws \\Exception.\n\n    "
    },
    {
        "ID": 1897,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def check_for_period_error(data, period): \"\"\" Check for Period Error. This method checks if the developer is trying to enter a period that is larger than the data set being entered. If that is the case an exception is raised with a custom message that informs the developer that their period is greater than the data set. \"\"\" period = int(period) data_len = len(data) if data_len < period: raise Exception(\"Error: data_len < period\")\n\n    ### Response: Check for Period Error.\n\n    This method checks if the developer is trying to enter a period that is\n    larger than the data set being entered. If that is the case an exception is\n    raised with a custom message that informs the developer that their period\n    is greater than the data set..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void addMemberStatusPublications( final ClusterMember[] members, final ClusterMember exclude, final ChannelUri channelUri, final int streamId, final Aeron aeron) { for (final ClusterMember member : members) { if (member != exclude) { channelUri.put(ENDPOINT_PARAM_NAME, member.memberFacingEndpoint()); member.publication = aeron.addExclusivePublication(channelUri.toString(), streamId); } } }\n\n    ### Response:",
        "ground_truth": "Add the publications for sending status messages to the other members of the cluster.\n\n@param members    of the cluster.\n@param exclude    this member when adding publications.\n@param channelUri for the publication.\n@param streamId   for the publication.\n@param aeron      to add the publications to.",
        "predict": " Check for Period Error.\n\n    This method checks if the developer is trying to enter a period that is\n    larger than the data set being entered. If that is the case an exception is\n    raised with a custom message that informs the developer that their period\n    is greater than the data set..\n\n    "
    },
    {
        "ID": 1898,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function getUpdated() { $set = new ArrayList(); foreach ($this->updated as $arrItem) { $set->push(ArrayData::create($arrItem)); } return $set; }\n\n    ### Response: Return all updated objects\n\n@return \\SilverStripe\\ORM\\ArrayList.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void closeMemberPublications(final ClusterMember[] clusterMembers) { for (final ClusterMember member : clusterMembers) { CloseHelper.close(member.publication); } }\n\n    ### Response:",
        "ground_truth": "Close the publications associated with members of the cluster.\n\n@param clusterMembers to close the publications for.",
        "predict": " Return all updated objects\n\n@return \\SilverStripe\\ORM\\ArrayList.\n\n    "
    },
    {
        "ID": 1899,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Object readObject(DatabaseReadable pReadable) throws SQLException { return readObject(pReadable.getId(), pReadable.getClass(), pReadable.getMapping()); }\n\n    ### Response: Reads one object implementing the DatabaseReadable interface from the\ndatabase.\n\n@param readable A DatabaseReadable object\n@return The Object read, or null in no object is found.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static boolean hasActiveQuorum( final ClusterMember[] clusterMembers, final long nowMs, final long timeoutMs) { int threshold = quorumThreshold(clusterMembers.length); for (final ClusterMember member : clusterMembers) { if (member.isLeader() || nowMs <= (member.timeOfLastAppendPositionMs() + timeoutMs)) { if (--threshold <= 0) { return true; } } } return false; }\n\n    ### Response:",
        "ground_truth": "Check if the cluster leader has an active quorum of cluster followers.\n\n@param clusterMembers for the current cluster.\n@param nowMs          for the current time.\n@param timeoutMs      after which a follower is not considered active.\n@return true if quorum of cluster members are considered active.",
        "predict": " Reads one object implementing the DatabaseReadable interface from the\ndatabase.\n\n@param readable A DatabaseReadable object\n@return The Object read, or null in no object is found.\n\n    "
    },
    {
        "ID": 1900,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function concatBulkBuffer (parser) { const list = parser.bufferCache const oldOffset = parser.offset const length = parser.bigStrSize - oldOffset - 2 var chunks = list.length var offset = parser.bigStrSize - parser.totalChunkSize parser.offset = offset if (offset <= 2) { if (chunks === 2) { return list[0].slice(oldOffset, list[0].length + offset - 2) } chunks-- offset = list[list.length - 2].length + offset } resizeBuffer(length) const start = bufferOffset list[0].copy(bufferPool, start, oldOffset, list[0].length) bufferOffset += list[0].length - oldOffset for (var i = 1; i < chunks - 1; i++) { list[i].copy(bufferPool, bufferOffset) bufferOffset += list[i].length } list[i].copy(bufferPool, bufferOffset, 0, offset - 2) bufferOffset += offset - 2 return bufferPool.slice(start, bufferOffset) }\n\n    ### Response: Concat the collected chunks from parser.bufferCache.\n\nIncreases the bufferPool size beforehand if necessary.\n\n@param {JavascriptRedisParser} parser\n@returns {Buffer}.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static long quorumPosition(final ClusterMember[] members, final long[] rankedPositions) { final int length = rankedPositions.length; for (int i = 0; i < length; i++) { rankedPositions[i] = 0; } for (final ClusterMember member : members) { long newPosition = member.logPosition; for (int i = 0; i < length; i++) { final long rankedPosition = rankedPositions[i]; if (newPosition > rankedPosition) { rankedPositions[i] = newPosition; newPosition = rankedPosition; } } } return rankedPositions[length - 1]; }\n\n    ### Response:",
        "ground_truth": "Calculate the position reached by a quorum of cluster members.\n\n@param members         of the cluster.\n@param rankedPositions temp array to be used for sorting the positions to avoid allocation.\n@return the position reached by a quorum of cluster members.",
        "predict": " Concat the collected chunks from parser.bufferCache.\n\nIncreases the bufferPool size beforehand if necessary.\n\n@param {JavascriptRedisParser} parser\n@returns {Buffer}.\n\n    "
    },
    {
        "ID": 1901,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def heuristic(events, slots, objective_function=None, algorithm=heu.hill_climber, initial_solution=None, initial_solution_algorithm_kwargs={}, objective_function_algorithm_kwargs={}, **kwargs): \"\"\" Compute a schedule using a heuristic Parameters ---------- events : list or tuple of :py:class:`resources.Event` instances slots : list or tuple of :py:class:`resources.Slot` instances algorithm : callable a heuristic algorithm from conference_scheduler.heuristics initial_solution_algorithm_kwargs : dict kwargs for the heuristic algorithm for the initial solution objective_function_algorithm_kwargs : dict kwargs for the heuristic algorithm for the objective function (if necessary. objective_function: callable from lp_problem.objective_functions kwargs : keyword arguments arguments for the objective function Returns ------- list A list of tuples giving the event and slot index (for the given events and slots lists) for all scheduled items. Example ------- For a solution where * event 0 is scheduled in slot 1 * event 1 is scheduled in slot 4 * event 2 is scheduled in slot 5 the resulting list would be:: [(0, 1), (1, 4), (2, 5)] \"\"\" def count_violations(array): return len(list(val.array_violations(array, events, slots))) if initial_solution is None: X = heu.get_initial_array(events=events, slots=slots) X = algorithm(initial_array=X, objective_function=count_violations, lower_bound=0, **initial_solution_algorithm_kwargs) else: X = initial_solution if objective_function is not None: kwargs[\"beta\"] = float('inf') def func(array): return objective_function( events=events, slots=slots, X=array, **kwargs) X = algorithm(initial_array=X, objective_function=func, acceptance_criteria=count_violations, **objective_function_algorithm_kwargs) return list(zip(*np.nonzero(X)))\n\n    ### Response: Compute a schedule using a heuristic\n\n    Parameters\n    ----------\n    events : list or tuple\n        of :py:class:`resources.Event` instances\n    slots : list or tuple\n        of :py:class:`resources.Slot` instances\n    algorithm : callable\n       a heuristic algorithm from conference_scheduler.heuristics\n    initial_solution_algorithm_kwargs : dict\n       kwargs for the heuristic algorithm for the initial solution\n    objective_function_algorithm_kwargs : dict\n       kwargs for the heuristic algorithm for the objective function (if\n       necessary.\n    objective_function: callable\n        from lp_problem.objective_functions\n    kwargs : keyword arguments\n        arguments for the objective function\n\n    Returns\n    -------\n    list\n        A list of tuples giving the event and slot index (for the given\n        events and slots lists) for all scheduled items.\n\n    Example\n    -------\n    For a solution where\n\n        * event 0 is scheduled in slot 1\n        * event 1 is scheduled in slot 4\n        * event 2 is scheduled in slot 5\n\n    the resulting list would be::\n\n        [(0, 1), (1, 4), (2, 5)].\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void resetLogPositions(final ClusterMember[] clusterMembers, final long logPosition) { for (final ClusterMember member : clusterMembers) { member.logPosition(logPosition); } }\n\n    ### Response:",
        "ground_truth": "Reset the log position of all the members to the provided value.\n\n@param clusterMembers to be reset.\n@param logPosition    to set for them all.",
        "predict": " Compute a schedule using a heuristic\n\n    Parameters\n    ----------\n    events : list or tuple\n        of :py:class:`resources.Event` instances\n    slots : list or tuple\n        of :py:class:`resources.Slot` instances\n    algorithm : callable\n       a heuristic algorithm from conference_scheduler.heuristics\n    initial_solution_algorithm_kwargs : dict\n       kwargs for the heuristic algorithm for the initial solution\n    objective_function_algorithm_kwargs : dict\n       kwargs for the heuristic algorithm for the objective function (if\n       necessary.\n    objective_function: callable\n        from lp_problem.objective_functions\n    kwargs : keyword arguments\n        arguments for the objective function\n\n    Returns\n    -------\n    list\n        A list of tuples giving the event and slot index (for the given\n        events and slots lists) for all scheduled items.\n\n    Example\n    -------\n    For a solution where\n\n        * event 0 is scheduled in slot 1\n        * event 1 is scheduled in slot 4\n        * event 2 is scheduled in slot 5\n\n    the resulting list would be::\n\n        [(0, 1), (1, 4), (2, 5)].\n\n    "
    },
    {
        "ID": 1902,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def open(self, mode): \"\"\" Open the underlying .hdf5 file and the parent, if any \"\"\" if self.hdf5 == (): # not already open kw = dict(mode=mode, libver='latest') if mode == 'r': kw['swmr'] = True try: self.hdf5 = hdf5.File(self.filename, **kw) except OSError as exc: raise OSError('%s in %s' % (exc, self.filename))\n\n    ### Response: Open the underlying .hdf5 file and the parent, if any.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static boolean haveVotersReachedPosition( final ClusterMember[] clusterMembers, final long position, final long leadershipTermId) { for (final ClusterMember member : clusterMembers) { if (member.vote != null && (member.logPosition < position || member.leadershipTermId != leadershipTermId)) { return false; } } return true; }\n\n    ### Response:",
        "ground_truth": "Has the members of the cluster the voted reached the provided position in their log.\n\n@param clusterMembers   to check.\n@param position         to compare the {@link #logPosition()} against.\n@param leadershipTermId expected of the members.\n@return true if all members have reached this position otherwise false.",
        "predict": " Open the underlying .hdf5 file and the parent, if any.\n\n    "
    },
    {
        "ID": 1903,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def write(self, address, size, value): \"\"\"Write arbitrary size content to memory. \"\"\" for i in range(0, size): self.__write_byte(address + i, (value >> (i * 8)) & 0xff)\n\n    ### Response: Write arbitrary size content to memory..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static boolean hasWonVoteOnFullCount(final ClusterMember[] members, final long candidateTermId) { int votes = 0; for (final ClusterMember member : members) { if (null == member.vote || member.candidateTermId != candidateTermId) { return false; } votes += member.vote ? 1 : 0; } return votes >= ClusterMember.quorumThreshold(members.length); }\n\n    ### Response:",
        "ground_truth": "Has the candidate got unanimous support of the cluster?\n\n@param members         to check for votes.\n@param candidateTermId for the vote.\n@return false if any member has not voted for the candidate.",
        "predict": " Write arbitrary size content to memory..\n\n    "
    },
    {
        "ID": 1904,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function updateComponent() { $this->filesystem->delete(resource_path('assets/js/components/Example.vue')); $this->filesystem->copy($this->stubPath('/Example.js'), resource_path('assets/js/components/Example.js')); }\n\n    ### Response: Update the example component.\n\n@return void.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static boolean hasMajorityVote(final ClusterMember[] clusterMembers, final long candidateTermId) { int votes = 0; for (final ClusterMember member : clusterMembers) { if (Boolean.TRUE.equals(member.vote) && member.candidateTermId == candidateTermId) { ++votes; } } return votes >= ClusterMember.quorumThreshold(clusterMembers.length); }\n\n    ### Response:",
        "ground_truth": "Has sufficient votes being counted for a majority?\n\n@param clusterMembers  to check for votes.\n@param candidateTermId for the vote.\n@return true if a majority of positive votes.",
        "predict": " Update the example component.\n\n@return void.\n\n    "
    },
    {
        "ID": 1905,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function (xmlDom) { // Create a WmsCapabilities object from the XML DOM var wms = new WorldWind.WmsCapabilities(xmlDom); // Retrieve a WmsLayerCapabilities object by the desired layer name var wmsLayerCapabilities = wms.getNamedLayer(layerName); // Form a configuration object from the WmsLayerCapability object var wmsConfig = WorldWind.WmsLayer.formLayerConfiguration(wmsLayerCapabilities); // Modify the configuration objects title property to a more user friendly title wmsConfig.title = \"Average Surface Temp\"; // Create the WMS Layer from the configuration object var wmsLayer = new WorldWind.WmsLayer(wmsConfig); // Add the layers to WorldWind and update the layer manager wwd.addLayer(wmsLayer); layerManager.synchronizeLayerList(); }\n\n    ### Response: Called asynchronously to parse and create the WMS layer.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static ClusterMember determineMember( final ClusterMember[] clusterMembers, final int memberId, final String memberEndpoints) { ClusterMember member = NULL_VALUE != memberId ? ClusterMember.findMember(clusterMembers, memberId) : null; if ((null == clusterMembers || 0 == clusterMembers.length) && null == member) { member = ClusterMember.parseEndpoints(NULL_VALUE, memberEndpoints); } else { if (null == member) { throw new ClusterException(\"memberId=\" + memberId + \" not found in clusterMembers\"); } if (!\"\".equals(memberEndpoints)) { ClusterMember.validateMemberEndpoints(member, memberEndpoints); } } return member; }\n\n    ### Response:",
        "ground_truth": "Determine which member of a cluster this is and check endpoints.\n\n@param clusterMembers  for the current cluster which can be null.\n@param memberId        for this member.\n@param memberEndpoints for this member.\n@return the {@link ClusterMember} determined.",
        "predict": " Called asynchronously to parse and create the WMS layer.\n\n    "
    },
    {
        "ID": 1906,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private function determineRegisteredAutoLoader($previous) { $found = array(); $after = spl_autoload_functions(); foreach ($after as $loader) { if (!in_array($loader, $previous)) { spl_autoload_unregister($loader); $found[] = $loader; } } return $found; }\n\n    ### Response: Determine the auto load functions registered.\n\n@param array $previous The previous autoload functions.\n\n@return array.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void validateMemberEndpoints(final ClusterMember member, final String memberEndpoints) { final ClusterMember endpointMember = ClusterMember.parseEndpoints(Aeron.NULL_VALUE, memberEndpoints); if (!areSameEndpoints(member, endpointMember)) { throw new ClusterException( \"clusterMembers and memberEndpoints differ: \" + member.endpointsDetail() + \" != \" + memberEndpoints); } }\n\n    ### Response:",
        "ground_truth": "Check the member with the memberEndpoints\n\n@param member          to check memberEndpoints against\n@param memberEndpoints to check member against\n@see ConsensusModule.Context#memberEndpoints()\n@see ConsensusModule.Context#clusterMembers()",
        "predict": " Determine the auto load functions registered.\n\n@param array $previous The previous autoload functions.\n\n@return array.\n\n    "
    },
    {
        "ID": 1907,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static boolean containsAddress(final InetAddress network, final InetAddress netmask, final InetAddress ip) { LOGGER.debug(\"Checking IP address: [{}] in [{}] by [{}]\", ip, network, netmask); val networkBytes = network.getAddress(); val netmaskBytes = netmask.getAddress(); val ipBytes = ip.getAddress(); /* check IPv4/v6-compatibility or parameters: */ if (networkBytes.length != netmaskBytes.length || netmaskBytes.length != ipBytes.length) { LOGGER.debug(\"Network address [{}], subnet mask [{}] and/or host address [{}]\" + \" have different sizes! (return false ...)\", network, netmask, ip); return false; } /* Check if the masked network and ip addresses match: */ for (var i = 0; i < netmaskBytes.length; i++) { val mask = netmaskBytes[i] & HEX_RIGHT_SHIFT_COEFFICIENT; if ((networkBytes[i] & mask) != (ipBytes[i] & mask)) { LOGGER.debug(\"[{}] is not in [{}]/[{}]\", ip, network, netmask); return false; } } LOGGER.debug(\"[{}] is in [{}]/[{}]\", ip, network, netmask); return true; }\n\n    ### Response: Checks if a subnet contains a specific IP address.\n\n@param network The network address.\n@param netmask The subnet mask.\n@param ip      The IP address to check.\n@return A boolean value..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static boolean areSameEndpoints(final ClusterMember lhs, final ClusterMember rhs) { return lhs.clientFacingEndpoint().equals(rhs.clientFacingEndpoint()) && lhs.memberFacingEndpoint().equals(rhs.memberFacingEndpoint()) && lhs.logEndpoint().equals(rhs.logEndpoint()) && lhs.transferEndpoint().equals(rhs.transferEndpoint()) && lhs.archiveEndpoint().equals(rhs.archiveEndpoint()); }\n\n    ### Response:",
        "ground_truth": "Are two cluster members using the same endpoints?\n\n@param lhs to check\n@param rhs to check\n@return true if both are using the same endpoints or false if not.",
        "predict": " Checks if a subnet contains a specific IP address.\n\n@param network The network address.\n@param netmask The subnet mask.\n@param ip      The IP address to check.\n@return A boolean value..\n\n    "
    },
    {
        "ID": 1908,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private Object getTargetBean(final Invocation invocation) { final InvocationContext invocationContext = invocation.getInvocationContext(); return invocationContext.getTargetBean(); }\n\n    ### Response: Returns endpoint instance associated with current invocation.\n\n@param invocation current invocation\n@return target bean in invocation.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static boolean isUnanimousCandidate(final ClusterMember[] clusterMembers, final ClusterMember candidate) { for (final ClusterMember member : clusterMembers) { if (NULL_POSITION == member.logPosition || compareLog(candidate, member) < 0) { return false; } } return true; }\n\n    ### Response:",
        "ground_truth": "Has the member achieved a unanimous view to be a suitable candidate in an election.\n\n@param clusterMembers to compare the candidate against.\n@param candidate      for leadership.\n@return true if the candidate is suitable otherwise false.",
        "predict": " Returns endpoint instance associated with current invocation.\n\n@param invocation current invocation\n@return target bean in invocation.\n\n    "
    },
    {
        "ID": 1909,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (a *Accessory) UpdateIDs() { for _, s := range a.Services { s.SetID(a.idCount) a.idCount++ for _, c := range s.Characteristics { c.SetID(a.idCount) a.idCount++ } } }\n\n    ### Response: // UpdateIDs updates the service and characteirstic ids..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static boolean isQuorumCandidate(final ClusterMember[] clusterMembers, final ClusterMember candidate) { int possibleVotes = 0; for (final ClusterMember member : clusterMembers) { if (NULL_POSITION == member.logPosition || compareLog(candidate, member) < 0) { continue; } ++possibleVotes; } return possibleVotes >= ClusterMember.quorumThreshold(clusterMembers.length); }\n\n    ### Response:",
        "ground_truth": "Has the member achieved a quorum view to be a suitable candidate in an election.\n\n@param clusterMembers to compare the candidate against.\n@param candidate      for leadership.\n@return true if the candidate is suitable otherwise false.",
        "predict": " // UpdateIDs updates the service and characteirstic ids..\n\n    "
    },
    {
        "ID": 1910,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Collection<String> getCommands() { List<String> commands = new ArrayList<String>(); for (String cmdOwner : m_cmdsByOwnerMap.keySet()) { SortedMap<String, RESTCommand> ownerCmdMap = m_cmdsByOwnerMap.get(cmdOwner); for (String name : ownerCmdMap.keySet()) { RESTCommand cmd = ownerCmdMap.get(name); commands.add(String.format(\"%s: %s = %s\", cmdOwner, name, cmd.toString())); } } return commands; }\n\n    ### Response: Get all REST commands as a list of strings for debugging purposes.\n\n@return  List of commands for debugging..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static boolean isNotDuplicateEndpoints(final ClusterMember[] members, final String memberEndpoints) { for (final ClusterMember member : members) { if (member.endpointsDetail().equals(memberEndpoints)) { return false; } } return true; }\n\n    ### Response:",
        "ground_truth": "Is the string of member endpoints not duplicated in the members.\n\n@param members         to check if the provided endpoints have a duplicate.\n@param memberEndpoints to check for duplicates.\n@return true if no duplicate is found otherwise false.",
        "predict": " Get all REST commands as a list of strings for debugging purposes.\n\n@return  List of commands for debugging..\n\n    "
    },
    {
        "ID": 1911,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static String wrap(String line, int widthInCharacters, String indent) { StringBuilder buffer = new StringBuilder(); int lineCount = 1; int spaceIndex; // if indent is null, then do not indent the wrapped lines indent = (indent != null ? indent : EMPTY_STRING); while (line.length() > widthInCharacters) { spaceIndex = line.substring(0, widthInCharacters).lastIndexOf(SINGLE_SPACE); buffer.append(lineCount++ > 1 ? indent : EMPTY_STRING); // throws IndexOutOfBoundsException if spaceIndex is -1, implying no word boundary was found within // the given width; this also avoids the infinite loop buffer.append(line.substring(0, spaceIndex)); buffer.append(LINE_SEPARATOR); // possible infinite loop if spaceIndex is -1, see comment above line = line.substring(spaceIndex + 1); } buffer.append(lineCount > 1 ? indent : EMPTY_STRING); buffer.append(line); return buffer.toString(); }\n\n    ### Response: Wraps a line of text to no longer than the specified width, measured by the number of characters in each line,\nindenting all subsequent lines with the indent.  If the indent is null, then an empty String is used.\n\n@param line a String containing the line of text to wrap.\n@param widthInCharacters an integer value indicating the width of each line measured by the number of characters.\n@param indent the String value used to indent all subsequent lines.\n@return the line of text wrapped.\n@throws IndexOutOfBoundsException if widthInCharacters is less than 0, or there are no word boundaries within\nthe given width on any given split.\n@throws NullPointerException if the line of text is null..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static int findMemberIndex(final ClusterMember[] clusterMembers, final int memberId) { final int length = clusterMembers.length; int index = ArrayUtil.UNKNOWN_INDEX; for (int i = 0; i < length; i++) { if (clusterMembers[i].id() == memberId) { index = i; } } return index; }\n\n    ### Response:",
        "ground_truth": "Find the index at which a member id is present.\n\n@param clusterMembers to be searched.\n@param memberId       to search for.\n@return the index at which the member id is found otherwise {@link ArrayUtil#UNKNOWN_INDEX}.",
        "predict": " Wraps a line of text to no longer than the specified width, measured by the number of characters in each line,\nindenting all subsequent lines with the indent.  If the indent is null, then an empty String is used.\n\n@param line a String containing the line of text to wrap.\n@param widthInCharacters an integer value indicating the width of each line measured by the number of characters.\n@param indent the String value used to indent all subsequent lines.\n@return the line of text wrapped.\n@throws IndexOutOfBoundsException if widthInCharacters is less than 0, or there are no word boundaries within\nthe given width on any given split.\n@throws NullPointerException if the line of text is null..\n\n    "
    },
    {
        "ID": 1912,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def set_codes(self, codes, reject=False): \"\"\" Set the accepted or rejected codes codes list. :param codes: A list of the response codes. :param reject: If True, the listed codes will be rejected, and the conversion will format as \"-\"; if False, only the listed codes will be accepted, and the conversion will format as \"-\" for all the others. \"\"\" self.codes = set(codes) self.reject = reject\n\n    ### Response: Set the accepted or rejected codes codes list.\n\n        :param codes: A list of the response codes.\n        :param reject: If True, the listed codes will be rejected, and\n                       the conversion will format as \"-\"; if False,\n                       only the listed codes will be accepted, and the\n                       conversion will format as \"-\" for all the\n                       others..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static ClusterMember[] removeMember(final ClusterMember[] oldMembers, final int memberId) { return ArrayUtil.remove(oldMembers, findMemberIndex(oldMembers, memberId)); }\n\n    ### Response:",
        "ground_truth": "Remove a member from an array if found, otherwise return the array unmodified.\n\n@param oldMembers to remove a member from.\n@param memberId   of the member to remove.\n@return a new array with the member removed or the existing array if not found.",
        "predict": " Set the accepted or rejected codes codes list.\n\n        :param codes: A list of the response codes.\n        :param reject: If True, the listed codes will be rejected, and\n                       the conversion will format as \"-\"; if False,\n                       only the listed codes will be accepted, and the\n                       conversion will format as \"-\" for all the\n                       others..\n\n    "
    },
    {
        "ID": 1913,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def remove_feature(self, feature_name): \"\"\" Remove an feature from the environment root folder. \"\"\" self.clear_feature_symlinks(feature_name) if os.path.exists(self.install_directory(feature_name)): self.__remove_path(self.install_directory(feature_name))\n\n    ### Response: Remove an feature from the environment root folder..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static int highMemberId(final ClusterMember[] clusterMembers) { int highId = Aeron.NULL_VALUE; for (final ClusterMember member : clusterMembers) { highId = Math.max(highId, member.id()); } return highId; }\n\n    ### Response:",
        "ground_truth": "Find the highest member id in an array of members.\n\n@param clusterMembers to search for the highest id.\n@return the highest id otherwise {@link Aeron#NULL_VALUE} if empty.",
        "predict": " Remove an feature from the environment root folder..\n\n    "
    },
    {
        "ID": 1914,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function project($projections) { $select = $this->from(); if (1 === func_num_args() and is_array($projections)) { return $select->project($projections); } else { return $select->project(func_get_args()); } }\n\n    ### Response: Returns a new Select Manager and adds the given expressions as projections\n\n@param  array $projections|mixed $projection,...\n@return SelectManager.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public MappedByteBuffer mapExistingCncFile(final Consumer<String> logger) { final File cncFile = new File(aeronDirectory, CncFileDescriptor.CNC_FILE); if (cncFile.exists() && cncFile.length() > 0) { if (null != logger) { logger.accept(\"INFO: Aeron CnC file exists: \" + cncFile); } return IoUtil.mapExistingFile(cncFile, CncFileDescriptor.CNC_FILE); } return null; }\n\n    ### Response:",
        "ground_truth": "Map the CnC file if it exists.\n\n@param logger for feedback\n@return a new mapping for the file if it exists otherwise null;",
        "predict": " Returns a new Select Manager and adds the given expressions as projections\n\n@param  array $projections|mixed $projection,...\n@return SelectManager.\n\n    "
    },
    {
        "ID": 1915,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def instrument(client): \"\"\" Auto-instruments code to get nice spans \"\"\" from elasticapm.instrumentation.control import instrument instrument() try: import celery # noqa F401 from elasticapm.contrib.celery import register_instrumentation register_instrumentation(client) except ImportError: client.logger.debug(\"Not instrumenting Celery, couldn't import\")\n\n    ### Response: Auto-instruments code to get nice spans.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static boolean isDriverActive( final File directory, final long driverTimeoutMs, final Consumer<String> logger) { final File cncFile = new File(directory, CncFileDescriptor.CNC_FILE); if (cncFile.exists() && cncFile.length() > 0) { logger.accept(\"INFO: Aeron CnC file exists: \" + cncFile); final MappedByteBuffer cncByteBuffer = IoUtil.mapExistingFile(cncFile, \"CnC file\"); try { return isDriverActive(driverTimeoutMs, logger, cncByteBuffer); } finally { IoUtil.unmap(cncByteBuffer); } } return false; }\n\n    ### Response:",
        "ground_truth": "Is a media driver active in the given directory?\n\n@param directory       to check\n@param driverTimeoutMs for the driver liveness check.\n@param logger          for feedback as liveness checked.\n@return true if a driver is active or false if not.",
        "predict": " Auto-instruments code to get nice spans.\n\n    "
    },
    {
        "ID": 1916,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def process(action, *args) @_action_name = action.to_s unless action_name = _find_action_name(@_action_name) raise ActionNotFound, \"The action '#{action}' could not be found for #{self.class.name}\" end @_response_body = nil process_action(action_name, *args) end\n\n    ### Response: Calls the action going through the entire action dispatch stack.\n\n The actual method that is called is determined by calling\n #method_for_action. If no method can handle the action, then an\n AbstractController::ActionNotFound error is raised.\n\n ==== Returns\n * self.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public boolean isDriverActive(final long driverTimeoutMs, final Consumer<String> logger) { final MappedByteBuffer cncByteBuffer = mapExistingCncFile(logger); try { return isDriverActive(driverTimeoutMs, logger, cncByteBuffer); } finally { IoUtil.unmap(cncByteBuffer); } }\n\n    ### Response:",
        "ground_truth": "Is a media driver active in the current Aeron directory?\n\n@param driverTimeoutMs for the driver liveness check.\n@param logger          for feedback as liveness checked.\n@return true if a driver is active or false if not.",
        "predict": " Calls the action going through the entire action dispatch stack.\n\n The actual method that is called is determined by calling\n #method_for_action. If no method can handle the action, then an\n AbstractController::ActionNotFound error is raised.\n\n ==== Returns\n * self.\n\n    "
    },
    {
        "ID": 1917,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override protected Optional<DigestCredentials> retrieveCredentials(final WebContext context) { // set the www-authenticate in case of error final String nonce = calculateNonce(); context.setResponseHeader(HttpConstants.AUTHENTICATE_HEADER, \"Digest realm=\\\"\" + realm + \"\\\", qop=\\\"auth\\\", nonce=\\\"\" + nonce + \"\\\"\"); return super.retrieveCredentials(context); }\n\n    ### Response: Per RFC 2617\nIf a server receives a request for an access-protected object, and an\nacceptable Authorization header is not sent, the server responds with\na \"401 Unauthorized\" status code, and a WWW-Authenticate header.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static boolean isDriverActive( final long driverTimeoutMs, final Consumer<String> logger, final ByteBuffer cncByteBuffer) { if (null == cncByteBuffer) { return false; } final UnsafeBuffer cncMetaDataBuffer = CncFileDescriptor.createMetaDataBuffer(cncByteBuffer); final long startTimeMs = System.currentTimeMillis(); int cncVersion; while (0 == (cncVersion = cncMetaDataBuffer.getIntVolatile(CncFileDescriptor.cncVersionOffset(0)))) { if (System.currentTimeMillis() > (startTimeMs + driverTimeoutMs)) { throw new DriverTimeoutException(\"CnC file is created but not initialised.\"); } sleep(1); } if (CNC_VERSION != cncVersion) { throw new AeronException( \"Aeron CnC version does not match: required=\" + CNC_VERSION + \" version=\" + cncVersion); } final ManyToOneRingBuffer toDriverBuffer = new ManyToOneRingBuffer( CncFileDescriptor.createToDriverBuffer(cncByteBuffer, cncMetaDataBuffer)); final long timestamp = toDriverBuffer.consumerHeartbeatTime(); final long now = System.currentTimeMillis(); final long timestampAge = now - timestamp; logger.accept(\"INFO: Aeron toDriver consumer heartbeat is (ms): \" + timestampAge); return timestampAge <= driverTimeoutMs; }\n\n    ### Response:",
        "ground_truth": "Is a media driver active in the current mapped CnC buffer? If the driver is mid start then it will wait for\nup to the driverTimeoutMs by checking for the cncVersion being set.\n\n@param driverTimeoutMs for the driver liveness check.\n@param logger          for feedback as liveness checked.\n@param cncByteBuffer   for the existing CnC file.\n@return true if a driver is active or false if not.",
        "predict": " Per RFC 2617\nIf a server receives a request for an access-protected object, and an\nacceptable Authorization header is not sent, the server responds with\na \"401 Unauthorized\" status code, and a WWW-Authenticate header.\n\n    "
    },
    {
        "ID": 1918,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def get_absolute_path(some_path): \"\"\" This function will return an appropriate absolute path for the path it is given. If the input is absolute, it will return unmodified; if the input is relative, it will be rendered as relative to the current working directory. \"\"\" if os.path.isabs(some_path): return some_path else: return evaluate_relative_path(os.getcwd(), some_path)\n\n    ### Response: This function will return an appropriate absolute path for the path it is\n    given. If the input is absolute, it will return unmodified; if the input is\n    relative, it will be rendered as relative to the current working directory..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static boolean requestDriverTermination( final File directory, final DirectBuffer tokenBuffer, final int tokenOffset, final int tokenLength) { final File cncFile = new File(directory, CncFileDescriptor.CNC_FILE); if (cncFile.exists() && cncFile.length() > 0) { final MappedByteBuffer cncByteBuffer = IoUtil.mapExistingFile(cncFile, \"CnC file\"); try { final UnsafeBuffer cncMetaDataBuffer = CncFileDescriptor.createMetaDataBuffer(cncByteBuffer); final int cncVersion = cncMetaDataBuffer.getIntVolatile(cncVersionOffset(0)); if (CncFileDescriptor.CNC_VERSION != cncVersion) { throw new AeronException( \"Aeron CnC version does not match: required=\" + CNC_VERSION + \" version=\" + cncVersion); } final ManyToOneRingBuffer toDriverBuffer = new ManyToOneRingBuffer( CncFileDescriptor.createToDriverBuffer(cncByteBuffer, cncMetaDataBuffer)); final long clientId = toDriverBuffer.nextCorrelationId(); final DriverProxy driverProxy = new DriverProxy(toDriverBuffer, clientId); return driverProxy.terminateDriver(tokenBuffer, tokenOffset, tokenLength); } finally { IoUtil.unmap(cncByteBuffer); } } return false; }\n\n    ### Response:",
        "ground_truth": "Request a driver to run its termination hook.\n\n@param directory for the driver.\n@param tokenBuffer containing the optional token for the request.\n@param tokenOffset within the tokenBuffer at which the token begins.\n@param tokenLength of the token in the tokenBuffer.\n@return true if request was sent or false if request could not be sent.",
        "predict": " This function will return an appropriate absolute path for the path it is\n    given. If the input is absolute, it will return unmodified; if the input is\n    relative, it will be rendered as relative to the current working directory..\n\n    "
    },
    {
        "ID": 1919,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function emailAction() { $model = $this->getModel(); $model->setFilter($this->getSearchFilter(false)); $sort = array( 'gr2o_email' => SORT_ASC, 'grs_first_name' => SORT_ASC, 'grs_surname_prefix' => SORT_ASC, 'grs_last_name' => SORT_ASC, 'gto_valid_from' => SORT_ASC, 'gto_round_order' => SORT_ASC, 'gsu_survey_name' => SORT_ASC, ); if ($tokensData = $model->load(true, $sort)) { $params['mailTarget'] = 'token'; $params['menu'] = $this->menu; $params['model'] = $model; $params['identifier'] = $this->_getIdParam(); $params['view'] = $this->view; $params['routeAction'] = 'index'; $params['formTitle'] = sprintf($this->_('Send mail to: %s'), $this->getTopic()); $params['templateOnly'] = ! $this->currentUser->hasPrivilege('pr.token.mail.freetext'); $params['multipleTokenData'] = $tokensData; $this->addSnippet('Mail_TokenBulkMailFormSnippet', $params); } else { $this->addMessage($this->_('No tokens found.')); } }\n\n    ### Response: Bulk email action.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static int frameLengthVolatile(final UnsafeBuffer buffer, final int termOffset) { int frameLength = buffer.getIntVolatile(termOffset); if (ByteOrder.nativeOrder() != LITTLE_ENDIAN) { frameLength = Integer.reverseBytes(frameLength); } return frameLength; }\n\n    ### Response:",
        "ground_truth": "Get the length of a frame from the header as a volatile read.\n\n@param buffer     containing the frame.\n@param termOffset at which a frame begins.\n@return the value for the frame length.",
        "predict": " Bulk email action.\n\n    "
    },
    {
        "ID": 1920,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (s *Service) FindResourceLabels(ctx context.Context, filter influxdb.LabelMappingFilter) ([]*influxdb.Label, error) { filterFunc := func(mapping *influxdb.LabelMapping) bool { return (filter.ResourceID.String() == mapping.ResourceID.String()) } mappings, err := s.filterLabelMappings(ctx, filterFunc) if err != nil { return nil, err } ls := []*influxdb.Label{} for _, m := range mappings { l, err := s.FindLabelByID(ctx, m.LabelID) if err != nil { return nil, err } ls = append(ls, l) } return ls, nil }\n\n    ### Response: // FindResourceLabels returns a list of labels that are mapped to a resource..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void frameLengthOrdered(final UnsafeBuffer buffer, final int termOffset, final int frameLength) { int length = frameLength; if (ByteOrder.nativeOrder() != LITTLE_ENDIAN) { length = Integer.reverseBytes(frameLength); } buffer.putIntOrdered(termOffset, length); }\n\n    ### Response:",
        "ground_truth": "Write the length header for a frame in a memory ordered fashion.\n\n@param buffer      containing the frame.\n@param termOffset  at which a frame begins.\n@param frameLength field to be set for the frame.",
        "predict": " // FindResourceLabels returns a list of labels that are mapped to a resource..\n\n    "
    },
    {
        "ID": 1921,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static String[] getCallStackFromStackTraceElement(StackTraceElement[] exceptionCallStack) { if (exceptionCallStack == null) return null; String[] answer = new String[exceptionCallStack.length]; for (int i = 0; i < exceptionCallStack.length; i++) { answer[exceptionCallStack.length - 1 - i] = exceptionCallStack[i].getClassName(); } return answer; }\n\n    ### Response: Create the call stack array expected by diagnostic modules from an array\nof StackTraceElements\n\n@param exceptionCallStack\nThe stack trace elements\n@return The call stack.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void frameType(final UnsafeBuffer buffer, final int termOffset, final int type) { buffer.putShort(typeOffset(termOffset), (short)type, LITTLE_ENDIAN); }\n\n    ### Response:",
        "ground_truth": "Write the type field for a frame.\n\n@param buffer     containing the frame.\n@param termOffset at which a frame begins.\n@param type       type value for the frame.",
        "predict": " Create the call stack array expected by diagnostic modules from an array\nof StackTraceElements\n\n@param exceptionCallStack\nThe stack trace elements\n@return The call stack.\n\n    "
    },
    {
        "ID": 1922,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function restore() { if (!userHasPermission('admin:blog:post:' . $this->blog->id . ':restore')) { unauthorised(); } // -------------------------------------------------------------------------- // Fetch and check post $iPostId = (int) $this->uri->segment(6); // -------------------------------------------------------------------------- if ($this->blog_post_model->restore($iPostId)) { $oPost = $this->blog_post_model->getById($iPostId); $this->session->set_flashdata('success', ucfirst($this->data['postName']) . ' was restored successfully.'); // Update admin changelog $this->oChangeLogModel->add( 'restored', 'a', 'blog post', $iPostId, $oPost->title, 'admin/blog/post/create/' . $this->blog->id . '/' . $iPostId ); } else { $sStatus = 'error'; $sMessage = 'I failed to restore that ' . $this->data['postName'] . '. '; $sMessage .= $this->blog_post_model->lastError(); $this->session->set_flashdata($sStatus, $sMessage); } redirect('admin/blog/post/index/' . $this->blog->id); }\n\n    ### Response: Restore a blog post\n@return void.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void frameFlags(final UnsafeBuffer buffer, final int termOffset, final byte flags) { buffer.putByte(flagsOffset(termOffset), flags); }\n\n    ### Response:",
        "ground_truth": "Write the flags field for a frame.\n\n@param buffer     containing the frame.\n@param termOffset at which a frame begins.\n@param flags      value for the frame.",
        "predict": " Restore a blog post\n@return void.\n\n    "
    },
    {
        "ID": 1923,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def invoke( *opts ) #defaults config = { # Checks ENV for maven home, otherwise defaults /usr/share/maven # XXX: Reuse Eng.getMavenHome? :maven_home => ENV['maven.home'] || ENV['MAVEN_HOME'] || '/usr/share/maven', :local_repo => File.expand_path('~/.m2/repository') } if opts.last.is_a? Hash config = config.merge( opts.pop ) end goals = opts pom = @project.getPomFile().getAbsolutePath() invoker = Naether::Java.create(\"com.tobedevoured.naether.maven.Invoker\", config[:local_repo], config[:maven_home] ) java_list = Naether::Java.convert_to_java_list(goals) if Naether.platform == 'java' invoker.execute( pom, java_list ) else invoker._invoke('execute', 'Ljava.lang.String;Ljava.util.List;', pom, java_list) end end\n\n    ### Response: Invoke a Maven goal\n\n @params [Array] Goals names.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void frameTermOffset(final UnsafeBuffer buffer, final int termOffset) { buffer.putInt(termOffsetOffset(termOffset), termOffset, LITTLE_ENDIAN); }\n\n    ### Response:",
        "ground_truth": "Write the term offset field for a frame.\n\n@param buffer     containing the frame.\n@param termOffset at which a frame begins.",
        "predict": " Invoke a Maven goal\n\n @params [Array] Goals names.\n\n    "
    },
    {
        "ID": 1924,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Socket accept(ServerSocket serverSocket, @ClosureParams(value=SimpleType.class, options=\"java.net.Socket\") final Closure closure) throws IOException { return accept(serverSocket, true, closure); }\n\n    ### Response: Accepts a connection and passes the resulting Socket to the closure\nwhich runs in a new Thread.\n\n@param serverSocket a ServerSocket\n@param closure      a Closure\n@return a Socket\n@throws IOException if an IOException occurs.\n@see java.net.ServerSocket#accept()\n@since 1.0.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void frameTermId(final UnsafeBuffer buffer, final int termOffset, final int termId) { buffer.putInt(termIdOffset(termOffset), termId, LITTLE_ENDIAN); }\n\n    ### Response:",
        "ground_truth": "Write the term id field for a frame.\n\n@param buffer     containing the frame.\n@param termOffset at which a frame begins.\n@param termId     value for the frame.",
        "predict": " Accepts a connection and passes the resulting Socket to the closure\nwhich runs in a new Thread.\n\n@param serverSocket a ServerSocket\n@param closure      a Closure\n@return a Socket\n@throws IOException if an IOException occurs.\n@see java.net.ServerSocket#accept()\n@since 1.0.\n\n    "
    },
    {
        "ID": 1925,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def common(self): \"\"\" Common part execute uppon GET and POST request :return: * The returned value of :meth:`authenticated` if the user is authenticated and not requesting for authentication or if the authentication has just been renewed * The returned value of :meth:`not_authenticated` otherwise :rtype: django.http.HttpResponse \"\"\" # if authenticated and successfully renewed authentication if needed if self.request.session.get(\"authenticated\") and (not self.renew or self.renewed): return self.authenticated() else: return self.not_authenticated()\n\n    ### Response: Common part execute uppon GET and POST request\n\n            :return:\n                * The returned value of :meth:`authenticated` if the user is authenticated and\n                  not requesting for authentication or if the authentication has just been renewed\n                * The returned value of :meth:`not_authenticated` otherwise\n            :rtype: django.http.HttpResponse.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static int findCounterIdByRecording(final CountersReader countersReader, final long recordingId) { final DirectBuffer buffer = countersReader.metaDataBuffer(); for (int i = 0, size = countersReader.maxCounterId(); i < size; i++) { if (countersReader.getCounterState(i) == RECORD_ALLOCATED) { final int recordOffset = CountersReader.metaDataOffset(i); if (buffer.getInt(recordOffset + TYPE_ID_OFFSET) == RECORDING_POSITION_TYPE_ID && buffer.getLong(recordOffset + KEY_OFFSET + RECORDING_ID_OFFSET) == recordingId) { return i; } } } return NULL_COUNTER_ID; }\n\n    ### Response:",
        "ground_truth": "Find the active counter id for a stream based on the recording id.\n\n@param countersReader to search within.\n@param recordingId    for the active recording.\n@return the counter id if found otherwise {@link CountersReader#NULL_COUNTER_ID}.",
        "predict": " Common part execute uppon GET and POST request\n\n            :return:\n                * The returned value of :meth:`authenticated` if the user is authenticated and\n                  not requesting for authentication or if the authentication has just been renewed\n                * The returned value of :meth:`not_authenticated` otherwise\n            :rtype: django.http.HttpResponse.\n\n    "
    },
    {
        "ID": 1926,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (c *cookies) MustInt32(key string, defaults ...int32) int32 { ck, err := c.req.Cookie(key) if err != nil { if len(defaults) > 0 { return defaults[0] } return 0 } v, err := strconv.ParseInt(ck.Value, 10, 32) if len(defaults) > 0 && err != nil { return defaults[0] } return int32(v) }\n\n    ### Response: // MustInt32 get cookie as int32 with default.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static int findCounterIdBySession(final CountersReader countersReader, final int sessionId) { final DirectBuffer buffer = countersReader.metaDataBuffer(); for (int i = 0, size = countersReader.maxCounterId(); i < size; i++) { if (countersReader.getCounterState(i) == RECORD_ALLOCATED) { final int recordOffset = CountersReader.metaDataOffset(i); if (buffer.getInt(recordOffset + TYPE_ID_OFFSET) == RECORDING_POSITION_TYPE_ID && buffer.getInt(recordOffset + KEY_OFFSET + SESSION_ID_OFFSET) == sessionId) { return i; } } } return NULL_COUNTER_ID; }\n\n    ### Response:",
        "ground_truth": "Find the active counter id for a stream based on the session id.\n\n@param countersReader to search within.\n@param sessionId      for the active recording.\n@return the counter id if found otherwise {@link CountersReader#NULL_COUNTER_ID}.",
        "predict": " // MustInt32 get cookie as int32 with default.\n\n    "
    },
    {
        "ID": 1927,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def append(self, cb): \"\"\"Adds a callback.\"\"\" self.callbacks.append(cb.callb) self.monitor = self.monitor | cb.callb.bit yield from self.pi._pigpio_aio_command(_PI_CMD_NB, self.handle, self.monitor)\n\n    ### Response: Adds a callback..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static long getRecordingId(final CountersReader countersReader, final int counterId) { final DirectBuffer buffer = countersReader.metaDataBuffer(); if (countersReader.getCounterState(counterId) == RECORD_ALLOCATED) { final int recordOffset = CountersReader.metaDataOffset(counterId); if (buffer.getInt(recordOffset + TYPE_ID_OFFSET) == RECORDING_POSITION_TYPE_ID) { return buffer.getLong(recordOffset + KEY_OFFSET + RECORDING_ID_OFFSET); } } return NULL_RECORDING_ID; }\n\n    ### Response:",
        "ground_truth": "Get the recording id for a given counter id.\n\n@param countersReader to search within.\n@param counterId      for the active recording.\n@return the counter id if found otherwise {@link #NULL_RECORDING_ID}.",
        "predict": " Adds a callback..\n\n    "
    },
    {
        "ID": 1928,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function getSection($reference) { $reference = Section::trimReference($reference); $reference = strtolower(Section::normalizeReference($reference)); foreach ($this->sections as $sectionKey => $section) { $potentialMatch = strtolower(Section::normalizeReference($sectionKey)); if ($reference === $potentialMatch) { return $section; } } throw new UnexpectedValueException('Section with a reference of ' . $reference . ' cannot be found!'); }\n\n    ### Response: Returns a Section object matching the requested reference. If reference\nis not found, an empty Section object is returned instead\n\n@param string $reference\n\n@return Section\n\n@throws UnexepectedValueException if reference does not exist.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static boolean isActive(final CountersReader countersReader, final int counterId, final long recordingId) { final DirectBuffer buffer = countersReader.metaDataBuffer(); if (countersReader.getCounterState(counterId) == RECORD_ALLOCATED) { final int recordOffset = CountersReader.metaDataOffset(counterId); return buffer.getInt(recordOffset + TYPE_ID_OFFSET) == RECORDING_POSITION_TYPE_ID && buffer.getLong(recordOffset + KEY_OFFSET + RECORDING_ID_OFFSET) == recordingId; } return false; }\n\n    ### Response:",
        "ground_truth": "Is the recording counter still active.\n\n@param countersReader to search within.\n@param counterId      to search for.\n@param recordingId    to confirm it is still the same value.\n@return true if the counter is still active otherwise false.",
        "predict": " Returns a Section object matching the requested reference. If reference\nis not found, an empty Section object is returned instead\n\n@param string $reference\n\n@return Section\n\n@throws UnexepectedValueException if reference does not exist.\n\n    "
    },
    {
        "ID": 1929,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def stringToTextValues(s, listSeparator=',', charList=None, strict=False): \"\"\" Returns list of strings. \"\"\" if charList is None: charList = escapableCharList def escapableChar (c): return c in charList def error(msg): if strict: raise ParseError(msg) else: logging.error(msg) # vars which control state machine charIterator = enumerate(s) state = \"read normal\" current = [] results = [] while True: try: charIndex, char = next(charIterator) except: char = \"eof\" if state == \"read normal\": if char == '\\\\': state = \"read escaped char\" elif char == listSeparator: state = \"read normal\" current = \"\".join(current) results.append(current) current = [] elif char == \"eof\": state = \"end\" else: state = \"read normal\" current.append(char) elif state == \"read escaped char\": if escapableChar(char): state = \"read normal\" if char in 'nN': current.append('\\n') else: current.append(char) else: state = \"read normal\" # leave unrecognized escaped characters for later passes current.append('\\\\' + char) elif state == \"end\": # an end state if len(current) or len(results) == 0: current = \"\".join(current) results.append(current) return results elif state == \"error\": # an end state return results else: state = \"error\" error(\"unknown state: '{0!s}' reached in {1!s}\".format(state, s))\n\n    ### Response: Returns list of strings..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public StatusMessageFlyweight applicationSpecificFeedback(final byte[] source, final int offset, final int length) { frameLength(HEADER_LENGTH + length); putBytes(APP_SPECIFIC_FEEDBACK_FIELD_OFFSET, source, offset, length); return this; }\n\n    ### Response:",
        "ground_truth": "Set the Application Specific Feedback for the Status Message.\n\n@param source of the feedback to set\n@param offset of the feedback in the source\n@param length of the feedback in bytes\n@return flyweight",
        "predict": " Returns list of strings..\n\n    "
    },
    {
        "ID": 1930,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void setPeerProperties(String name, Properties properties) throws InvalidArgumentException { setNodeProperties(\"Peer\", name, peers, properties); }\n\n    ### Response: Set a specific peer's properties.\n\n@param name       The name of the peer's property to set.\n@param properties The properties to set.\n@throws InvalidArgumentException.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void reload() { entries.clear(); indexByLeadershipTermIdMap.clear(); indexByLeadershipTermIdMap.compact(); nextEntryIndex = 0; byteBuffer.clear(); try { while (true) { final int bytes = fileChannel.read(byteBuffer); if (byteBuffer.remaining() == 0) { byteBuffer.flip(); captureEntriesFromBuffer(byteBuffer, buffer, entries); byteBuffer.clear(); } if (-1 == bytes) { if (byteBuffer.position() > 0) { byteBuffer.flip(); captureEntriesFromBuffer(byteBuffer, buffer, entries); byteBuffer.clear(); } break; } } } catch (final IOException ex) { LangUtil.rethrowUnchecked(ex); } }\n\n    ### Response:",
        "ground_truth": "Reload the log from disk.",
        "predict": " Set a specific peer's properties.\n\n@param name       The name of the peer's property to set.\n@param properties The properties to set.\n@throws InvalidArgumentException.\n\n    "
    },
    {
        "ID": 1931,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function getFlatVertexCount(positions, size, startIndex = 0, endIndex) { endIndex = endIndex || positions.length; if (startIndex >= endIndex) { return 0; } return ( (isFlatRingClosed(positions, size, startIndex, endIndex) ? 0 : 1) + (endIndex - startIndex) / size ); }\n\n    ### Response: Counts the number of vertices in a simple flat array, closes the polygon if needed.\n@param {Array} positions - array of numbers\n@param {Number} size - size of a position, 2 (xy) or 3 (xyz)\n@param {Number} [startIndex] - start index of the path in the positions array\n@param {Number} [endIndex] - end index of the path in the positions array\n@returns {Number} vertex count.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Entry findLastTerm() { for (int i = entries.size() - 1; i >= 0; i--) { final Entry entry = entries.get(i); if (ENTRY_TYPE_TERM == entry.type) { return entry; } } return null; }\n\n    ### Response:",
        "ground_truth": "Find the last leadership term in the recording log.\n\n@return the last leadership term in the recording log.",
        "predict": " Counts the number of vertices in a simple flat array, closes the polygon if needed.\n@param {Array} positions - array of numbers\n@param {Number} size - size of a position, 2 (xy) or 3 (xyz)\n@param {Number} [startIndex] - start index of the path in the positions array\n@param {Number} [endIndex] - end index of the path in the positions array\n@returns {Number} vertex count.\n\n    "
    },
    {
        "ID": 1932,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def call(env) # Create a method called domain which will return the current domain # name Rails.application.send :define_singleton_method, 'domain_name' do env['SERVER_NAME'] end # Create `fetch_domain` method on `Rails.application` # only if it didn't already define. unless Rails.application.respond_to? :fetch_domain Rails.application.send :define_singleton_method, 'fetch_domain' do if defined? ActiveRecord Domain.find_by(nam: Rails.application.domain_name) elsif defined? Mongoid Site.where('domains.name' => Rails.application.domain_name).domains.first end end end Rails.application.send :define_singleton_method, 'site' do site = nil unless Rails.application.domain.nil? site = Rails.application.domain.site end site end Rails.application @app.call(env) end\n\n    ### Response: Middleware initializer method which gets the `app` from previous\n middleware.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public RecoveryPlan createRecoveryPlan(final AeronArchive archive, final int serviceCount) { final ArrayList<Snapshot> snapshots = new ArrayList<>(); final ArrayList<Log> logs = new ArrayList<>(); planRecovery(snapshots, logs, entries, archive, serviceCount); long lastLeadershipTermId = NULL_VALUE; long lastTermBaseLogPosition = 0; long committedLogPosition = -1; long appendedLogPosition = 0; final int snapshotStepsSize = snapshots.size(); if (snapshotStepsSize > 0) { final Snapshot snapshot = snapshots.get(0); lastLeadershipTermId = snapshot.leadershipTermId; lastTermBaseLogPosition = snapshot.termBaseLogPosition; appendedLogPosition = snapshot.logPosition; committedLogPosition = snapshot.logPosition; } if (!logs.isEmpty()) { final Log log = logs.get(0); lastLeadershipTermId = log.leadershipTermId; lastTermBaseLogPosition = log.termBaseLogPosition; appendedLogPosition = log.stopPosition; committedLogPosition = log.logPosition; } return new RecoveryPlan( lastLeadershipTermId, lastTermBaseLogPosition, appendedLogPosition, committedLogPosition, snapshots, logs); }\n\n    ### Response:",
        "ground_truth": "Create a recovery plan for the cluster that when the steps are replayed will bring the cluster back to the\nlatest stable state.\n\n@param archive      to lookup recording descriptors.\n@param serviceCount of services that may have snapshots.\n@return a new {@link RecoveryPlan} for the cluster.",
        "predict": " Middleware initializer method which gets the `app` from previous\n middleware.\n\n    "
    },
    {
        "ID": 1933,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function get($key) { // If the key is in factories the return new instance of class if (isset($this->factories[$key])) { return $this->factories[$key](); } // If the key is not in instances if (!isset($this->instances[$key])) { // If the key is in registry, instanciate the corresponding class and add it in instances if (isset($this->registry[$key])) { $this->instances[$key] = $this->registry[$key](); } else { // If the key is not in registry, instanciate the corresponding class and add it in instances $this->instances[$key] = self::newInstance($key); } } return $this->instances[$key]; }\n\n    ### Response: Get an entry by key\n\n@param string $key Key of entry\n\n@return Callable|Object.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static RecoveryPlan createRecoveryPlan(final ArrayList<RecordingLog.Snapshot> snapshots) { long lastLeadershipTermId = NULL_VALUE; long lastTermBaseLogPosition = 0; long committedLogPosition = -1; long appendedLogPosition = 0; final int snapshotStepsSize = snapshots.size(); if (snapshotStepsSize > 0) { final Snapshot snapshot = snapshots.get(0); lastLeadershipTermId = snapshot.leadershipTermId; lastTermBaseLogPosition = snapshot.termBaseLogPosition; appendedLogPosition = snapshot.logPosition; committedLogPosition = snapshot.logPosition; } return new RecoveryPlan( lastLeadershipTermId, lastTermBaseLogPosition, appendedLogPosition, committedLogPosition, snapshots, new ArrayList<>()); }\n\n    ### Response:",
        "ground_truth": "Create a recovery plan that has only snapshots. Used for dynamicJoin snapshot load.\n\n@param snapshots to construct plan from\n@return a new {@link RecoveryPlan} for the cluster",
        "predict": " Get an entry by key\n\n@param string $key Key of entry\n\n@return Callable|Object.\n\n    "
    },
    {
        "ID": 1934,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func GetAllWorkersWithStatus(status int) []*Worker { o := orm.NewOrm() var workers []*Worker num, err := o.QueryTable(\"worker\").Filter(\"status\", status).All(&workers) fmt.Printf(\"Returned Rows Num: %s, %s\", num, err) return workers }\n\n    ### Response: // GetAllWorkersWithStatus takes the status and return the workers..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void appendTerm( final long recordingId, final long leadershipTermId, final long termBaseLogPosition, final long timestamp) { final int size = entries.size(); if (size > 0) { final Entry lastEntry = entries.get(size - 1); if (lastEntry.type != NULL_VALUE && lastEntry.leadershipTermId >= leadershipTermId) { throw new ClusterException(\"leadershipTermId out of sequence: previous \" + lastEntry.leadershipTermId + \" this \" + leadershipTermId); } } indexByLeadershipTermIdMap.put(leadershipTermId, nextEntryIndex); append( ENTRY_TYPE_TERM, recordingId, leadershipTermId, termBaseLogPosition, NULL_POSITION, timestamp, NULL_VALUE); }\n\n    ### Response:",
        "ground_truth": "Append a log entry for a leadership term.\n\n@param recordingId         of the log.\n@param leadershipTermId    for the current term.\n@param termBaseLogPosition reached at the beginning of the term.\n@param timestamp           at the beginning of the term.",
        "predict": " // GetAllWorkersWithStatus takes the status and return the workers..\n\n    "
    },
    {
        "ID": 1935,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    static void checkMethodDesc(final String desc) { if (desc == null || desc.length() == 0) { throw new IllegalArgumentException( \"Invalid method descriptor (must not be null or empty)\"); } if (desc.charAt(0) != '(' || desc.length() < 3) { throw new IllegalArgumentException(\"Invalid descriptor: \" + desc); } int start = 1; if (desc.charAt(start) != ')') { do { if (desc.charAt(start) == 'V') { throw new IllegalArgumentException(\"Invalid descriptor: \" + desc); } start = checkDesc(desc, start, false); } while (start < desc.length() && desc.charAt(start) != ')'); } start = checkDesc(desc, start + 1, true); if (start != desc.length()) { throw new IllegalArgumentException(\"Invalid descriptor: \" + desc); } }\n\n    ### Response: Checks that the given string is a valid method descriptor.\n\n@param desc\nthe string to be checked..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void appendSnapshot( final long recordingId, final long leadershipTermId, final long termBaseLogPosition, final long logPosition, final long timestamp, final int serviceId) { final int size = entries.size(); if (size > 0) { final Entry entry = entries.get(size - 1); if (entry.type == ENTRY_TYPE_TERM && entry.leadershipTermId != leadershipTermId) { throw new ClusterException(\"leadershipTermId out of sequence: previous \" + entry.leadershipTermId + \" this \" + leadershipTermId); } } append( ENTRY_TYPE_SNAPSHOT, recordingId, leadershipTermId, termBaseLogPosition, logPosition, timestamp, serviceId); }\n\n    ### Response:",
        "ground_truth": "Append a log entry for a snapshot.\n\n@param recordingId         in the archive for the snapshot.\n@param leadershipTermId    for the current term\n@param termBaseLogPosition at the beginning of the leadership term.\n@param logPosition         for the position in the current term or length so far for that term.\n@param timestamp           at which the snapshot was taken.\n@param serviceId           for which the snapshot is recorded.",
        "predict": " Checks that the given string is a valid method descriptor.\n\n@param desc\nthe string to be checked..\n\n    "
    },
    {
        "ID": 1936,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function getFullPath($path, $type = null, $out = false) { if (@file_exists($path)) { return realpath($path); } $base = DirectoryHelper::slashDirname($this->getRootDirectory()); if (in_array($type, array('asset', 'assets'))) { $base .= DirectoryHelper::slashDirname($this->getAssetsDirectory()); } elseif ($type==='vendor') { $base .= DirectoryHelper::slashDirname($this->getVendorDirectory()); } elseif ($type==='assets_vendor') { $base .= DirectoryHelper::slashDirname($this->getAssetsDirectory()) . DirectoryHelper::slashDirname($this->getAssetsVendorDirectory()); } $f = $base . $path; if (@file_exists($f)) { return $f; } if ($out) { return null; } if (!in_array($type, array('asset', 'assets'))) { $f = $this->getFullPath($path, 'asset', true); if (@file_exists($f)) { return $f; } } if ($type!=='vendor') { $f = $this->getFullPath($path, 'vendor', true); if (@file_exists($f)) { return $f; } } }\n\n    ### Response: Get the absolute path in the package\n\n@param string $path The relative path to complete\n@param string $type Type of the original relative path (can be `asset`, `vendor` or `assets_vendor` - default is `null`)\n@param bool $out Must we search in `assets` and `vendor` (if `false`) or not (if `true`)\n@return string.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void commitLogPosition(final long leadershipTermId, final long logPosition) { final int index = getLeadershipTermEntryIndex(leadershipTermId); commitEntryValue(index, logPosition, LOG_POSITION_OFFSET); final Entry entry = entries.get(index); entries.set(index, new Entry( entry.recordingId, entry.leadershipTermId, entry.termBaseLogPosition, logPosition, entry.timestamp, entry.serviceId, entry.type, entry.entryIndex)); }\n\n    ### Response:",
        "ground_truth": "Commit the position reached in a leadership term before a clean shutdown.\n\n@param leadershipTermId for committing the term position reached.\n@param logPosition      reached in the leadership term.",
        "predict": " Get the absolute path in the package\n\n@param string $path The relative path to complete\n@param string $type Type of the original relative path (can be `asset`, `vendor` or `assets_vendor` - default is `null`)\n@param bool $out Must we search in `assets` and `vendor` (if `false`) or not (if `true`)\n@return string.\n\n    "
    },
    {
        "ID": 1937,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void sendEvents(EventHolder event) { // Only send events to the client if this server is the leader. if (server.isLeader()) { eventExecutor.execute(() -> { PublishRequest request = PublishRequest.builder() .withSession(sessionId().id()) .withEventIndex(event.eventIndex) .withPreviousIndex(event.previousIndex) .withEvents(event.events) .build(); log.trace(\"Sending {}\", request); protocol.publish(memberId(), request); }); } }\n\n    ### Response: Sends an event to the session..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void tombstoneEntry(final long leadershipTermId, final int entryIndex) { int index = -1; for (int i = 0, size = entries.size(); i < size; i++) { final Entry entry = entries.get(i); if (entry.leadershipTermId == leadershipTermId && entry.entryIndex == entryIndex) { index = entry.entryIndex; if (ENTRY_TYPE_TERM == entry.type) { indexByLeadershipTermIdMap.remove(leadershipTermId); } break; } } if (-1 == index) { throw new ClusterException(\"unknown entry index: \" + entryIndex); } buffer.putInt(0, NULL_VALUE, LITTLE_ENDIAN); byteBuffer.limit(SIZE_OF_INT).position(0); final long filePosition = (index * (long)ENTRY_LENGTH) + ENTRY_TYPE_OFFSET; try { if (SIZE_OF_INT != fileChannel.write(byteBuffer, filePosition)) { throw new ClusterException(\"failed to write field atomically\"); } } catch (final Exception ex) { LangUtil.rethrowUnchecked(ex); } }\n\n    ### Response:",
        "ground_truth": "Tombstone an entry in the log so it is no longer valid.\n\n@param leadershipTermId to match for validation.\n@param entryIndex       reached in the leadership term.",
        "predict": " Sends an event to the session..\n\n    "
    },
    {
        "ID": 1938,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static char eatAmpersand(String a, int[] n) { n[0] = 0; if (!a.startsWith(\"&\")) return ((char) 0); // Seek to ';' // We also accept spaces and the end of the String as a delimiter while (n[0] < a.length() && !Character.isSpaceChar(a.charAt(n[0])) && a.charAt(n[0]) != ';') n[0]++; if (n[0] <= 1) { n[0] = -1; return ((char) 0); } if (n[0] < a.length() && a.charAt(n[0]) == ';') { a = a.substring(1, n[0]); n[0]++; } else { a = a.substring(1, n[0]); } // Hexadecimal characters if (a.startsWith(\"#x\")) { try { return ((char) Integer.parseInt(a.substring(2), 16)); } catch (Exception e) { n[0] = -1; return ((char) 0); } } // Decimal characters if (a.startsWith(\"#\")) { try { return ((char) Integer.parseInt(a.substring(1))); } catch (Exception e) { n[0] = -1; return ((char) 0); } } // Others if (ampersandMap.get(a) != null) return (ampersandMap.get(a)); else if (ampersandMap.get(a.toLowerCase()) != null) return (ampersandMap.get(a.toLowerCase())); n[0] = -1; return ((char) 0); }\n\n    ### Response: Eats an HTML ampersand code from a String.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void close() { if (null != publication && publication.isConnected()) { closeSession(); } if (!ctx.ownsAeronClient()) { CloseHelper.close(subscription); CloseHelper.close(publication); } ctx.close(); }\n\n    ### Response:",
        "ground_truth": "Close session and release associated resources.",
        "predict": " Eats an HTML ampersand code from a String.\n\n    "
    },
    {
        "ID": 1939,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def get_best_frequencies(self): \"\"\" Returns the best n_local_max frequencies \"\"\" return self.freq[self.best_local_optima], self.per[self.best_local_optima]\n\n    ### Response: Returns the best n_local_max frequencies.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public long offer(final DirectBufferVector[] vectors) { if (headerVector != vectors[0]) { vectors[0] = headerVector; } return publication.offer(vectors, null); }\n\n    ### Response:",
        "ground_truth": "Non-blocking publish by gathering buffer vectors into a message. The first vector will be replaced by the cluster\ningress header so must be left unused.\n\n@param vectors which make up the message.\n@return the same as {@link Publication#offer(DirectBufferVector[])}.\n@see Publication#offer(DirectBufferVector[])",
        "predict": " Returns the best n_local_max frequencies.\n\n    "
    },
    {
        "ID": 1940,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static boolean isFileModifiedInCollectionPeriod(File file){ long diff = m_currentTimeMillis - file.lastModified(); if(diff >= 0) { return TimeUnit.MILLISECONDS.toDays(diff)+1 <= m_config.days; } return false; }\n\n    ### Response: value of diff = 0 indicates current day.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static boolean unblock( final UnsafeBuffer[] termBuffers, final UnsafeBuffer logMetaDataBuffer, final long blockedPosition, final int termLength) { final int positionBitsToShift = LogBufferDescriptor.positionBitsToShift(termLength); final int blockedTermCount = (int)(blockedPosition >> positionBitsToShift); final int blockedOffset = (int)blockedPosition & (termLength - 1); final int activeTermCount = activeTermCount(logMetaDataBuffer); if (activeTermCount == (blockedTermCount - 1) && blockedOffset == 0) { final int currentTermId = termId(rawTailVolatile(logMetaDataBuffer, indexByTermCount(activeTermCount))); return rotateLog(logMetaDataBuffer, activeTermCount, currentTermId); } final int blockedIndex = indexByTermCount(blockedTermCount); final long rawTail = rawTailVolatile(logMetaDataBuffer, blockedIndex); final int termId = termId(rawTail); final int tailOffset = termOffset(rawTail, termLength); final UnsafeBuffer termBuffer = termBuffers[blockedIndex]; switch (TermUnblocker.unblock(logMetaDataBuffer, termBuffer, blockedOffset, tailOffset, termId)) { case UNBLOCKED_TO_END: rotateLog(logMetaDataBuffer, blockedTermCount, termId); // fall through case UNBLOCKED: return true; } return false; }\n\n    ### Response:",
        "ground_truth": "Attempt to unblock a log buffer at given position\n\n@param termBuffers       for current blockedOffset\n@param logMetaDataBuffer for log buffer\n@param blockedPosition   to attempt to unblock\n@param termLength        of the buffer for each term in the log\n@return whether unblocked or not",
        "predict": " value of diff = 0 indicates current day.\n\n    "
    },
    {
        "ID": 1941,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function(name, title, url, setupTemplate, setup, showDevTools){ // Check if the window already exists if(windowManager.windows[name]){ console.log('Window ' + name + ' already exists!'); // Move the focus on it windowManager.focusOn(name); return; } // The window unique name, if omitted a serialized name will be used instead; window_1 ~> window_2 ~> ... this.name = name || ( 'window_' + ( Object.keys(windowManager.windows).length + 1 ) ); // The BrowserWindow module instance this.object = null; this.setup = { 'show': false, 'setupTemplate': setupTemplate }; if(title) this.setup.title = title; if(url) this.setup.url = url; if(showDevTools) this.setup.showDevTools = showDevTools; // If the setup is just the window dimensions, like '500x350' if(isString(setup) && setup.indexOf('x') >= 0){ const dimensions = setup.split('x'); setup = { 'width': parseInt(dimensions[0], 10), 'height': parseInt(dimensions[1], 10) }; } // Overwrite the default setup if(isObject(setup)){ this.setup = Object.assign(this.setup, setup); } // Register the window on the window manager windowManager.windows[this.name] = this; }\n\n    ### Response: Creates a new Window instance\n\n@param name [optional] The code name for the window, each window must have a unique name\n@param title [optional] The window title\n@param url [optional] The targeted page/url of the window\n@param setupTemplate [optional] The name of the setup template you want to use with this new window\n@param setup [optional] The setup object that will be passed to the BrowserWindow module\n@param showDevTools [optional] Whether to show the dev tools or not, false by default.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public String channel() { final int length = buffer.getInt(offset + CHANNEL_OFFSET); lengthOfChannel = SIZE_OF_INT + length; return buffer.getStringAscii(offset + CHANNEL_OFFSET, length); }\n\n    ### Response:",
        "ground_truth": "Get the channel field as ASCII\n\n@return channel field",
        "predict": " Creates a new Window instance\n\n@param name [optional] The code name for the window, each window must have a unique name\n@param title [optional] The window title\n@param url [optional] The targeted page/url of the window\n@param setupTemplate [optional] The name of the setup template you want to use with this new window\n@param setup [optional] The setup object that will be passed to the BrowserWindow module\n@param showDevTools [optional] Whether to show the dev tools or not, false by default.\n\n    "
    },
    {
        "ID": 1942,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func ParseCertificatePEM(certPEM []byte) (*Certificate, error) { cert, err := helpers.ParseCertificatePEM(certPEM) if err != nil { return nil, err } return ParseCertificate(cert), nil }\n\n    ### Response: // ParseCertificatePEM parses an x509 certificate PEM..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public ImageMessageFlyweight channel(final String channel) { lengthOfChannel = buffer.putStringAscii(offset + CHANNEL_OFFSET, channel); return this; }\n\n    ### Response:",
        "ground_truth": "Set the channel field as ASCII\n\n@param channel field value\n@return flyweight",
        "predict": " // ParseCertificatePEM parses an x509 certificate PEM..\n\n    "
    },
    {
        "ID": 1943,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _get_point_data_handler_for(self, point): \"\"\"Used by point instances and data callbacks\"\"\" with self.__point_data_handlers: try: return self.__point_data_handlers[point] except KeyError: return self.__point_data_handlers.setdefault(point, PointDataObjectHandler(point, self))\n\n    ### Response: Used by point instances and data callbacks.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void checkTermLength(final int termLength) { if (termLength < TERM_MIN_LENGTH) { throw new IllegalStateException( \"Term length less than min length of \" + TERM_MIN_LENGTH + \": length=\" + termLength); } if (termLength > TERM_MAX_LENGTH) { throw new IllegalStateException( \"Term length more than max length of \" + TERM_MAX_LENGTH + \": length=\" + termLength); } if (!BitUtil.isPowerOfTwo(termLength)) { throw new IllegalStateException(\"Term length not a power of 2: length=\" + termLength); } }\n\n    ### Response:",
        "ground_truth": "Check that term length is valid and alignment is valid.\n\n@param termLength to be checked.\n@throws IllegalStateException if the length is not as expected.",
        "predict": " Used by point instances and data callbacks.\n\n    "
    },
    {
        "ID": 1944,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function () { //get all open popups from InstanceManager var aAllOpenPopups = fnGetPopups(); var aValidatedPopups = []; var aInvalidatedPopups = []; aAllOpenPopups.forEach(function(oOpenPopup) { // check if non-adaptable popup var bValid = _aPopupFilters.every(function (fnFilter) { return fnFilter(oOpenPopup); }); bValid && _aPopupFilters.length > 0 ? aValidatedPopups.push(oOpenPopup) : aInvalidatedPopups.push(oOpenPopup); }); // get max Z-Index from validated popups var iMaxValidatedZIndex = aValidatedPopups.length > 0 ? Math.max.apply(null, fnGetZIndexFromPopups(aValidatedPopups)) : -1; // get minimum Z-Index from invalidated popups var iMinInvalidatedZIndex = aInvalidatedPopups.length > 0 ? Math.min.apply(null, fnGetZIndexFromPopups(aInvalidatedPopups)) : -1; // compare Z-Index of adaptable and non-adaptable popups - the higher one wins if (iMaxValidatedZIndex < iMinInvalidatedZIndex) { return this._getNextMinZIndex(iMinInvalidatedZIndex); } else { return Popup.getNextZIndex(); } }\n\n    ### Response: Calculates the reliable z-index in the current window considering the global BusyIndicator dialog.\n\nAlgorithm:\n1) When popups are already open on the screen:\nthe highest z-index of validated popups is compared with the lowest z-index of invalidated popups.\nThe invalidated popups also include any BusyIndicator that might be open.\n2) If the invalidated popups have the higher value then the next z-index is first decremented by 10,\nwhich gives the last popup z-index and then 1 is added to it.\n3) After incrementing 1 in Step 2), the resultant z-index value is compared against an array of assigned z-index values\nby the ZIndexManager. Step 3) is repeated as long as it stays under a max value and a unique value is calculated.\nThe max value is the next possible popup z-index - 3 (hardcoded by variable Z_INDICES_RESERVED).\nExample: when BusyIndicator has a z-index 100, then available indexes are:\n91, 92, 93, 94, 95, 96, 97. Indexes 98 & 99 are used by\nBusyIndicator internally, therefore we can't rely on them. The reason we start from\nthe index 91 is that in sap.ui.core.Popup.getNextZIndex() there is a hardcoded step with\na value 10 which means there are only 10 reliable indexes between the opened BusyIndicator\nand the previous absolutely positioned element on the screen;\n4) If no popups are open or if validated popups have a higher z-index,\nthen simply the next possible z-index is returned by calling sap.ui.core.Popup.getNextZIndex().\n\n@returns {int} the next available z-index value\n@public.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void checkPageSize(final int pageSize) { if (pageSize < PAGE_MIN_SIZE) { throw new IllegalStateException( \"Page size less than min size of \" + PAGE_MIN_SIZE + \": page size=\" + pageSize); } if (pageSize > PAGE_MAX_SIZE) { throw new IllegalStateException( \"Page size more than max size of \" + PAGE_MAX_SIZE + \": page size=\" + pageSize); } if (!BitUtil.isPowerOfTwo(pageSize)) { throw new IllegalStateException(\"Page size not a power of 2: page size=\" + pageSize); } }\n\n    ### Response:",
        "ground_truth": "Check that page size is valid and alignment is valid.\n\n@param pageSize to be checked.\n@throws IllegalStateException if the size is not as expected.",
        "predict": " Calculates the reliable z-index in the current window considering the global BusyIndicator dialog.\n\nAlgorithm:\n1) When popups are already open on the screen:\nthe highest z-index of validated popups is compared with the lowest z-index of invalidated popups.\nThe invalidated popups also include any BusyIndicator that might be open.\n2) If the invalidated popups have the higher value then the next z-index is first decremented by 10,\nwhich gives the last popup z-index and then 1 is added to it.\n3) After incrementing 1 in Step 2), the resultant z-index value is compared against an array of assigned z-index values\nby the ZIndexManager. Step 3) is repeated as long as it stays under a max value and a unique value is calculated.\nThe max value is the next possible popup z-index - 3 (hardcoded by variable Z_INDICES_RESERVED).\nExample: when BusyIndicator has a z-index 100, then available indexes are:\n91, 92, 93, 94, 95, 96, 97. Indexes 98 & 99 are used by\nBusyIndicator internally, therefore we can't rely on them. The reason we start from\nthe index 91 is that in sap.ui.core.Popup.getNextZIndex() there is a hardcoded step with\na value 10 which means there are only 10 reliable indexes between the opened BusyIndicator\nand the previous absolutely positioned element on the screen;\n4) If no popups are open or if validated popups have a higher z-index,\nthen simply the next possible z-index is returned by calling sap.ui.core.Popup.getNextZIndex().\n\n@returns {int} the next available z-index value\n@public.\n\n    "
    },
    {
        "ID": 1945,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Observable<List<RecoverableDatabaseInner>> listByServerAsync(String resourceGroupName, String serverName) { return listByServerWithServiceResponseAsync(resourceGroupName, serverName).map(new Func1<ServiceResponse<List<RecoverableDatabaseInner>>, List<RecoverableDatabaseInner>>() { @Override public List<RecoverableDatabaseInner> call(ServiceResponse<List<RecoverableDatabaseInner>> response) { return response.body(); } }); }\n\n    ### Response: Gets a list of recoverable databases.\n\n@param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.\n@param serverName The name of the server.\n@throws IllegalArgumentException thrown if parameters fail the validation\n@return the observable to the List&lt;RecoverableDatabaseInner&gt; object.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static boolean casActiveTermCount( final UnsafeBuffer metadataBuffer, final int expectedTermCount, final int updateTermCount) { return metadataBuffer.compareAndSetInt(LOG_ACTIVE_TERM_COUNT_OFFSET, expectedTermCount, updateTermCount); }\n\n    ### Response:",
        "ground_truth": "Compare and set the value of the current active term count.\n\n@param metadataBuffer    containing the meta data.\n@param expectedTermCount value of the active term count expected in the log\n@param updateTermCount   value of the active term count to be updated in the log\n@return true if successful otherwise false.",
        "predict": " Gets a list of recoverable databases.\n\n@param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.\n@param serverName The name of the server.\n@throws IllegalArgumentException thrown if parameters fail the validation\n@return the observable to the List&lt;RecoverableDatabaseInner&gt; object.\n\n    "
    },
    {
        "ID": 1946,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (r *RecordingStatter) Count(name string, value int64, rate float64, tags ...string) { if r.Counts == nil { r.Counts = make(map[string]int64) } r.Counts[name] += value }\n\n    ### Response: // Count implements Count..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static long computePosition( final int activeTermId, final int termOffset, final int positionBitsToShift, final int initialTermId) { final long termCount = activeTermId - initialTermId; // copes with negative activeTermId on rollover return (termCount << positionBitsToShift) + termOffset; }\n\n    ### Response:",
        "ground_truth": "Compute the current position in absolute number of bytes.\n\n@param activeTermId        active term id.\n@param termOffset          in the term.\n@param positionBitsToShift number of times to left shift the term count\n@param initialTermId       the initial term id that this stream started on\n@return the absolute position in bytes",
        "predict": " // Count implements Count..\n\n    "
    },
    {
        "ID": 1947,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function setBreadcrumbEditCategory() { $breadcrumbs = array(); $breadcrumbs[] = array( 'url' => $this->url('admin'), 'text' => $this->text('Dashboard') ); $breadcrumbs[] = array( 'url' => $this->url('admin/content/category-group'), 'text' => $this->text('Category groups') ); $breadcrumbs[] = array( 'url' => $this->url(\"admin/content/category/{$this->data_category_group['category_group_id']}\"), 'text' => $this->text('Categories of group %name', array('%name' => $this->data_category_group['title'])) ); $this->setBreadcrumbs($breadcrumbs); }\n\n    ### Response: Sets breadcrumbs on the category edit page.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static long computeLogLength(final int termLength, final int filePageSize) { if (termLength < (1024 * 1024 * 1024)) { return align((termLength * PARTITION_COUNT) + LOG_META_DATA_LENGTH, filePageSize); } return (PARTITION_COUNT * (long)termLength) + align(LOG_META_DATA_LENGTH, filePageSize); }\n\n    ### Response:",
        "ground_truth": "Compute the total length of a log file given the term length.\n\nAssumes {@link #TERM_MAX_LENGTH} is 1GB and that filePageSize is 1GB or less and a power of 2.\n\n@param termLength   on which to base the calculation.\n@param filePageSize to use for log.\n@return the total length of the log file.",
        "predict": " Sets breadcrumbs on the category edit page.\n\n    "
    },
    {
        "ID": 1948,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func GetHashFn(ref *types.Header, chain ChainContext) func(n uint64) common.Hash { var cache map[uint64]common.Hash return func(n uint64) common.Hash { // If there's no hash cache yet, make one if cache == nil { cache = map[uint64]common.Hash{ ref.Number.Uint64() - 1: ref.ParentHash, } } // Try to fulfill the request from the cache if hash, ok := cache[n]; ok { return hash } // Not cached, iterate the blocks and cache the hashes for header := chain.GetHeader(ref.ParentHash, ref.Number.Uint64()-1); header != nil; header = chain.GetHeader(header.ParentHash, header.Number.Uint64()-1) { cache[header.Number.Uint64()-1] = header.ParentHash if n == header.Number.Uint64()-1 { return header.ParentHash } } return common.Hash{} } }\n\n    ### Response: // GetHashFn returns a GetHashFunc which retrieves header hashes by number.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void storeDefaultFrameHeader(final UnsafeBuffer metadataBuffer, final DirectBuffer defaultHeader) { if (defaultHeader.capacity() != HEADER_LENGTH) { throw new IllegalArgumentException( \"Default header length not equal to HEADER_LENGTH: length=\" + defaultHeader.capacity()); } metadataBuffer.putInt(LOG_DEFAULT_FRAME_HEADER_LENGTH_OFFSET, HEADER_LENGTH); metadataBuffer.putBytes(LOG_DEFAULT_FRAME_HEADER_OFFSET, defaultHeader, 0, HEADER_LENGTH); }\n\n    ### Response:",
        "ground_truth": "Store the default frame header to the log meta data buffer.\n\n@param metadataBuffer into which the default headers should be stored.\n@param defaultHeader  to be stored.\n@throws IllegalArgumentException if the defaultHeader larger than {@link #LOG_DEFAULT_FRAME_HEADER_MAX_LENGTH}",
        "predict": " // GetHashFn returns a GetHashFunc which retrieves header hashes by number.\n\n    "
    },
    {
        "ID": 1949,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static function getIndexValue(AbstractClassContent $content, $indexedField) { if ('@' === substr($indexedField, 0, 1)) { // parameter indexation return self::getParamValue($content, substr($indexedField, 1)); } else { // element indexation return self::getContentValue($content, $indexedField); } }\n\n    ### Response: Returns the indexed value.\n\n@param  AbstractClassContent $content      The content flushed.\n@param  string               $indexedField The parameter to index.\n\n@return array                              An array of the value and the content owner..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void applyDefaultHeader( final UnsafeBuffer metadataBuffer, final UnsafeBuffer termBuffer, final int termOffset) { termBuffer.putBytes(termOffset, metadataBuffer, LOG_DEFAULT_FRAME_HEADER_OFFSET, HEADER_LENGTH); }\n\n    ### Response:",
        "ground_truth": "Apply the default header for a message in a term.\n\n@param metadataBuffer containing the default headers.\n@param termBuffer     to which the default header should be applied.\n@param termOffset     at which the default should be applied.",
        "predict": " Returns the indexed value.\n\n@param  AbstractClassContent $content      The content flushed.\n@param  string               $indexedField The parameter to index.\n\n@return array                              An array of the value and the content owner..\n\n    "
    },
    {
        "ID": 1950,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _FormatExpression(self, frame, expression): \"\"\"Evaluates a single watched expression and formats it into a string form. If expression evaluation fails, returns error message string. Args: frame: Python stack frame in which the expression is evaluated. expression: string expression to evaluate. Returns: Formatted expression value that can be used in the log message. \"\"\" rc, value = _EvaluateExpression(frame, expression) if not rc: message = _FormatMessage(value['description']['format'], value['description'].get('parameters')) return '<' + message + '>' return self._FormatValue(value)\n\n    ### Response: Evaluates a single watched expression and formats it into a string form.\n\n    If expression evaluation fails, returns error message string.\n\n    Args:\n      frame: Python stack frame in which the expression is evaluated.\n      expression: string expression to evaluate.\n\n    Returns:\n      Formatted expression value that can be used in the log message..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static boolean rotateLog(final UnsafeBuffer metadataBuffer, final int termCount, final int termId) { final int nextTermId = termId + 1; final int nextTermCount = termCount + 1; final int nextIndex = indexByTermCount(nextTermCount); final int expectedTermId = nextTermId - PARTITION_COUNT; long rawTail; do { rawTail = rawTail(metadataBuffer, nextIndex); if (expectedTermId != termId(rawTail)) { break; } } while (!casRawTail(metadataBuffer, nextIndex, rawTail, packTail(nextTermId, 0))); return casActiveTermCount(metadataBuffer, termCount, nextTermCount); }\n\n    ### Response:",
        "ground_truth": "Rotate the log and update the tail counter for the new term.\n\nThis method is safe for concurrent use.\n\n@param metadataBuffer for the log.\n@param termCount      from which to rotate.\n@param termId         to be used in the default headers.\n@return true if log was rotated.",
        "predict": " Evaluates a single watched expression and formats it into a string form.\n\n    If expression evaluation fails, returns error message string.\n\n    Args:\n      frame: Python stack frame in which the expression is evaluated.\n      expression: string expression to evaluate.\n\n    Returns:\n      Formatted expression value that can be used in the log message..\n\n    "
    },
    {
        "ID": 1951,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public SftpFileAttributes getAttributes() throws SftpStatusException, SshException { if (attrs == null) { attrs = sftp.getAttributes(getAbsolutePath()); } return attrs; }\n\n    ### Response: Get the files attributes.\n\n@return SftpFileAttributes\n@throws SshException\n@throws SftpStatusException.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void initialiseTailWithTermId( final UnsafeBuffer metadataBuffer, final int partitionIndex, final int termId) { metadataBuffer.putLong(TERM_TAIL_COUNTERS_OFFSET + (partitionIndex * SIZE_OF_LONG), packTail(termId, 0)); }\n\n    ### Response:",
        "ground_truth": "Set the initial value for the termId in the upper bits of the tail counter.\n\n@param metadataBuffer contain the tail counter.\n@param partitionIndex to be initialised.\n@param termId         to be set.",
        "predict": " Get the files attributes.\n\n@return SftpFileAttributes\n@throws SshException\n@throws SftpStatusException.\n\n    "
    },
    {
        "ID": 1952,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void copyBufferedStream(BufferedInputStream sourceStream, BufferedOutputStream destinationStream, boolean closeStreams) throws IOException { byte[] buffer = new byte[8192]; int bytesRead = 0; try { while ((bytesRead = sourceStream.read(buffer)) != -1) { destinationStream.write(buffer, 0, bytesRead); } } finally { if (closeStreams) { sourceStream.close(); destinationStream.close(); } } }\n\n    ### Response: Kopiert den Inhalt eines Datenstroms in einen anderen.\n\n@param sourceStream\nQuelldatenstrom\n@param destinationStream\nZieldatenstrom\n@throws IOException.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static int termOffset(final long rawTail, final long termLength) { final long tail = rawTail & 0xFFFF_FFFFL; return (int)Math.min(tail, termLength); }\n\n    ### Response:",
        "ground_truth": "Read the termOffset from a packed raw tail value.\n\n@param rawTail    containing the termOffset.\n@param termLength that the offset cannot exceed.\n@return the termOffset value.",
        "predict": " Kopiert den Inhalt eines Datenstroms in einen anderen.\n\n@param sourceStream\nQuelldatenstrom\n@param destinationStream\nZieldatenstrom\n@throws IOException.\n\n    "
    },
    {
        "ID": 1953,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void fillWithText(TextView view, FakerTextComponent component) { validateNotNullableView(view); validateIfIsATextView(view); validateNotNullableFakerComponent(component); view.setText(component.randomText()); }\n\n    ### Response: Fill a TextView with a specific FakerTextComponent\n@param view\n@param component.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static long rawTailVolatile(final UnsafeBuffer metadataBuffer) { final int partitionIndex = indexByTermCount(activeTermCount(metadataBuffer)); return metadataBuffer.getLongVolatile(TERM_TAIL_COUNTERS_OFFSET + (SIZE_OF_LONG * partitionIndex)); }\n\n    ### Response:",
        "ground_truth": "Get the raw value of the tail for the current active partition.\n\n@param metadataBuffer containing the tail counters.\n@return the raw value of the tail for the current active partition.",
        "predict": " Fill a TextView with a specific FakerTextComponent\n@param view\n@param component.\n\n    "
    },
    {
        "ID": 1954,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func Init(c *config.Config) (*Service, error) { return &Service{Config: c}, nil }\n\n    ### Response: // Init initializes a new service..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static boolean casRawTail( final UnsafeBuffer metadataBuffer, final int partitionIndex, final long expectedRawTail, final long updateRawTail) { final int index = TERM_TAIL_COUNTERS_OFFSET + (SIZE_OF_LONG * partitionIndex); return metadataBuffer.compareAndSetLong(index, expectedRawTail, updateRawTail); }\n\n    ### Response:",
        "ground_truth": "Compare and set the raw value of the tail for the given partition.\n\n@param metadataBuffer  containing the tail counters.\n@param partitionIndex  for the tail counter.\n@param expectedRawTail expected current value.\n@param updateRawTail   to be applied.\n@return true if the update was successful otherwise false.",
        "predict": " // Init initializes a new service..\n\n    "
    },
    {
        "ID": 1955,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function(result, raw_expression) { if (raw_expression.arguments.length != 1) Lava.t(\"Expression block requires exactly one argument\"); var config = { type: 'view', \"class\": 'Expression', argument: raw_expression.arguments[0] }; if (raw_expression.prefix == '$') { config.container = {type: 'Morph'}; } result.push(config); }\n\n    ### Response: Compile raw expression view. Will produce a view config with class=\"Expression\"\n@param {_tTemplate} result\n@param {_cRawExpression} raw_expression.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public TerminateDriverFlyweight tokenBuffer( final DirectBuffer tokenBuffer, final int tokenOffset, final int tokenLength) { buffer.putInt(TOKEN_LENGTH_OFFSET, tokenLength); if (null != tokenBuffer && tokenLength > 0) { buffer.putBytes(tokenBufferOffset(), tokenBuffer, tokenOffset, tokenLength); } return this; }\n\n    ### Response:",
        "ground_truth": "Fill the token buffer.\n\n@param tokenBuffer containing the optional token for the request.\n@param tokenOffset within the tokenBuffer at which the token begins.\n@param tokenLength of the token in the tokenBuffer.\n@return flyweight",
        "predict": " Compile raw expression view. Will produce a view config with class=\"Expression\"\n@param {_tTemplate} result\n@param {_cRawExpression} raw_expression.\n\n    "
    },
    {
        "ID": 1956,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def gammaVectorRDD(sc, shape, scale, numRows, numCols, numPartitions=None, seed=None): \"\"\" Generates an RDD comprised of vectors containing i.i.d. samples drawn from the Gamma distribution. :param sc: SparkContext used to create the RDD. :param shape: Shape (> 0) of the Gamma distribution :param scale: Scale (> 0) of the Gamma distribution :param numRows: Number of Vectors in the RDD. :param numCols: Number of elements in each Vector. :param numPartitions: Number of partitions in the RDD (default: `sc.defaultParallelism`). :param seed: Random seed (default: a random long integer). :return: RDD of Vector with vectors containing i.i.d. samples ~ Gamma(shape, scale). >>> import numpy as np >>> from math import sqrt >>> shape = 1.0 >>> scale = 2.0 >>> expMean = shape * scale >>> expStd = sqrt(shape * scale * scale) >>> mat = np.matrix(RandomRDDs.gammaVectorRDD(sc, shape, scale, 100, 100, seed=1).collect()) >>> mat.shape (100, 100) >>> abs(mat.mean() - expMean) < 0.1 True >>> abs(mat.std() - expStd) < 0.1 True \"\"\" return callMLlibFunc(\"gammaVectorRDD\", sc._jsc, float(shape), float(scale), numRows, numCols, numPartitions, seed)\n\n    ### Response: Generates an RDD comprised of vectors containing i.i.d. samples drawn\n        from the Gamma distribution.\n\n        :param sc: SparkContext used to create the RDD.\n        :param shape: Shape (> 0) of the Gamma distribution\n        :param scale: Scale (> 0) of the Gamma distribution\n        :param numRows: Number of Vectors in the RDD.\n        :param numCols: Number of elements in each Vector.\n        :param numPartitions: Number of partitions in the RDD (default: `sc.defaultParallelism`).\n        :param seed: Random seed (default: a random long integer).\n        :return: RDD of Vector with vectors containing i.i.d. samples ~ Gamma(shape, scale).\n\n        >>> import numpy as np\n        >>> from math import sqrt\n        >>> shape = 1.0\n        >>> scale = 2.0\n        >>> expMean = shape * scale\n        >>> expStd = sqrt(shape * scale * scale)\n        >>> mat = np.matrix(RandomRDDs.gammaVectorRDD(sc, shape, scale, 100, 100, seed=1).collect())\n        >>> mat.shape\n        (100, 100)\n        >>> abs(mat.mean() - expMean) >> abs(mat.std() - expStd) < 0.1\n        True.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Counter allocate( final Aeron aeron, final MutableDirectBuffer tempBuffer, final long leadershipTermId, final long logPosition, final long timestamp, final boolean hasReplay, final long... snapshotRecordingIds) { tempBuffer.putLong(LEADERSHIP_TERM_ID_OFFSET, leadershipTermId); tempBuffer.putLong(LOG_POSITION_OFFSET, logPosition); tempBuffer.putLong(TIMESTAMP_OFFSET, timestamp); tempBuffer.putInt(REPLAY_FLAG_OFFSET, hasReplay ? 1 : 0); final int serviceCount = snapshotRecordingIds.length; tempBuffer.putInt(SERVICE_COUNT_OFFSET, serviceCount); final int keyLength = SNAPSHOT_RECORDING_IDS_OFFSET + (serviceCount * SIZE_OF_LONG); if (keyLength > MAX_KEY_LENGTH) { throw new ClusterException(keyLength + \" exceeds max key length \" + MAX_KEY_LENGTH); } for (int i = 0; i < serviceCount; i++) { tempBuffer.putLong(SNAPSHOT_RECORDING_IDS_OFFSET + (i * SIZE_OF_LONG), snapshotRecordingIds[i]); } final int labelOffset = BitUtil.align(keyLength, SIZE_OF_INT); int labelLength = 0; labelLength += tempBuffer.putStringWithoutLengthAscii(labelOffset + labelLength, NAME); labelLength += tempBuffer.putLongAscii(keyLength + labelLength, leadershipTermId); labelLength += tempBuffer.putStringWithoutLengthAscii(labelOffset + labelLength, \" logPosition=\"); labelLength += tempBuffer.putLongAscii(labelOffset + labelLength, logPosition); labelLength += tempBuffer.putStringWithoutLengthAscii(labelOffset + labelLength, \" hasReplay=\" + hasReplay); return aeron.addCounter(RECOVERY_STATE_TYPE_ID, tempBuffer, 0, keyLength, tempBuffer, labelOffset, labelLength); }\n\n    ### Response:",
        "ground_truth": "Allocate a counter to represent the snapshot services should load on start.\n\n@param aeron                to allocate the counter.\n@param tempBuffer           to use for building the key and label without allocation.\n@param leadershipTermId     at which the snapshot was taken.\n@param logPosition          at which the snapshot was taken.\n@param timestamp            the snapshot was taken.\n@param hasReplay            flag is true if all or part of the log must be replayed.\n@param snapshotRecordingIds for the services to use during recovery indexed by service id.\n@return the {@link Counter} for the recovery state.",
        "predict": " Generates an RDD comprised of vectors containing i.i.d. samples drawn\n        from the Gamma distribution.\n\n        :param sc: SparkContext used to create the RDD.\n        :param shape: Shape (> 0) of the Gamma distribution\n        :param scale: Scale (> 0) of the Gamma distribution\n        :param numRows: Number of Vectors in the RDD.\n        :param numCols: Number of elements in each Vector.\n        :param numPartitions: Number of partitions in the RDD (default: `sc.defaultParallelism`).\n        :param seed: Random seed (default: a random long integer).\n        :return: RDD of Vector with vectors containing i.i.d. samples ~ Gamma(shape, scale).\n\n        >>> import numpy as np\n        >>> from math import sqrt\n        >>> shape = 1.0\n        >>> scale = 2.0\n        >>> expMean = shape * scale\n        >>> expStd = sqrt(shape * scale * scale)\n        >>> mat = np.matrix(RandomRDDs.gammaVectorRDD(sc, shape, scale, 100, 100, seed=1).collect())\n        >>> mat.shape\n        (100, 100)\n        >>> abs(mat.mean() - expMean) >> abs(mat.std() - expStd) < 0.1\n        True.\n\n    "
    },
    {
        "ID": 1957,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (s *State) Prepare() { simplify(s, s, map[*State]bool{}) sortTransitions(s, map[*State]bool{}) }\n\n    ### Response: // Prepare simplifies the FSM and sorts the transitions according to their priorities.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static int findCounterId(final CountersReader counters) { final DirectBuffer buffer = counters.metaDataBuffer(); for (int i = 0, size = counters.maxCounterId(); i < size; i++) { if (counters.getCounterState(i) == RECORD_ALLOCATED) { final int recordOffset = CountersReader.metaDataOffset(i); if (buffer.getInt(recordOffset + TYPE_ID_OFFSET) == RECOVERY_STATE_TYPE_ID) { return i; } } } return NULL_COUNTER_ID; }\n\n    ### Response:",
        "ground_truth": "Find the active counter id for recovery state.\n\n@param counters to search within.\n@return the counter id if found otherwise {@link CountersReader#NULL_COUNTER_ID}.",
        "predict": " // Prepare simplifies the FSM and sorts the transitions according to their priorities.\n\n    "
    },
    {
        "ID": 1958,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def apmAggregate(self, **criteria): \"\"\"collect all match history's apm data to report player's calculated MMR\"\"\" apms = [m.apm(self) for m in self.matchSubset(**criteria)] if not apms: return 0 # no apm information without match history return sum(apms) / len(apms)\n\n    ### Response: collect all match history's apm data to report player's calculated MMR.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static boolean hasReplay(final CountersReader counters, final int counterId) { final DirectBuffer buffer = counters.metaDataBuffer(); if (counters.getCounterState(counterId) == RECORD_ALLOCATED) { final int recordOffset = CountersReader.metaDataOffset(counterId); if (buffer.getInt(recordOffset + TYPE_ID_OFFSET) == RECOVERY_STATE_TYPE_ID) { return buffer.getInt(recordOffset + KEY_OFFSET + REPLAY_FLAG_OFFSET) == 1; } } return false; }\n\n    ### Response:",
        "ground_truth": "Has the recovery process got a log to replay?\n\n@param counters  to search within.\n@param counterId for the active recovery counter.\n@return true if a replay is required.",
        "predict": " collect all match history's apm data to report player's calculated MMR.\n\n    "
    },
    {
        "ID": 1959,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Document parseXmlStringWithXsdValidation(String _xmlStr, boolean _namespaceAware, ErrorHandler _errorHandler) throws IOException { if (_errorHandler == null) { _errorHandler = new XmlErrorHandlers.XmlErrorHandlerQuiet(); } DocumentBuilderFactory dbFac = DocumentBuilderFactory.newInstance(); dbFac.setValidating(true); dbFac.setNamespaceAware(_namespaceAware); dbFac.setAttribute(\"http://java.sun.com/xml/jaxp/properties/schemaLanguage\", \"http://www.w3.org/2001/XMLSchema\"); try { DocumentBuilder builder = dbFac.newDocumentBuilder(); builder.setErrorHandler(_errorHandler); return builder.parse(new ByteArrayInputStream(_xmlStr.getBytes(StandardCharsets.UTF_8))); } catch (IOException _ex) { throw _ex; } catch (Exception _ex) { throw new IOException(\"Failed to parse \" + StringUtil.abbreviate(_xmlStr, 500), _ex); } }\n\n    ### Response: Loads XML from string and uses referenced XSD to validate the content.\n\n\n@param _xmlStr string to validate\n@param _namespaceAware take care of namespace\n@param _errorHandler e.g. {@link XmlErrorHandlers.XmlErrorHandlerQuiet} or {@link XmlErrorHandlers.XmlErrorHandlerRuntimeException}\n@return Document\n@throws IOException on error.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static long getSnapshotRecordingId(final CountersReader counters, final int counterId, final int serviceId) { final DirectBuffer buffer = counters.metaDataBuffer(); if (counters.getCounterState(counterId) == RECORD_ALLOCATED) { final int recordOffset = CountersReader.metaDataOffset(counterId); if (buffer.getInt(recordOffset + TYPE_ID_OFFSET) == RECOVERY_STATE_TYPE_ID) { final int serviceCount = buffer.getInt(recordOffset + KEY_OFFSET + SERVICE_COUNT_OFFSET); if (serviceId < 0 || serviceId >= serviceCount) { throw new ClusterException(\"invalid serviceId \" + serviceId + \" for count of \" + serviceCount); } return buffer.getLong( recordOffset + KEY_OFFSET + SNAPSHOT_RECORDING_IDS_OFFSET + (serviceId * SIZE_OF_LONG)); } } throw new ClusterException(\"Active counter not found \" + counterId); }\n\n    ### Response:",
        "ground_truth": "Get the recording id of the snapshot for a service.\n\n@param counters  to search within.\n@param counterId for the active recovery counter.\n@param serviceId for the snapshot required.\n@return the count of replay terms if found otherwise {@link Aeron#NULL_VALUE}.",
        "predict": " Loads XML from string and uses referenced XSD to validate the content.\n\n\n@param _xmlStr string to validate\n@param _namespaceAware take care of namespace\n@param _errorHandler e.g. {@link XmlErrorHandlers.XmlErrorHandlerQuiet} or {@link XmlErrorHandlers.XmlErrorHandlerRuntimeException}\n@return Document\n@throws IOException on error.\n\n    "
    },
    {
        "ID": 1960,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def execute(self, *args, **kwargs): \"\"\"Walks each step in the underlying graph, and raises an exception if any of the steps fail. Raises: PlanFailed: Raised if any of the steps fail. \"\"\" self.walk(*args, **kwargs) failed_steps = [step for step in self.steps if step.status == FAILED] if failed_steps: raise PlanFailed(failed_steps)\n\n    ### Response: Walks each step in the underlying graph, and raises an exception if\n        any of the steps fail.\n\n        Raises:\n            PlanFailed: Raised if any of the steps fail..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static char[] flagsToChars(final short flags) { final char[] chars = new char[]{ '0', '0', '0', '0', '0', '0', '0', '0' }; final int length = chars.length; short mask = (short)(1 << (length - 1)); for (int i = 0; i < length; i++) { if ((flags & mask) == mask) { chars[i] = '1'; } mask >>= 1; } return chars; }\n\n    ### Response:",
        "ground_truth": "Convert header flags to an array of chars to be human readable.\n\n@param flags to be converted.\n@return header flags converted to an array of chars to be human readable.",
        "predict": " Walks each step in the underlying graph, and raises an exception if\n        any of the steps fail.\n\n        Raises:\n            PlanFailed: Raised if any of the steps fail..\n\n    "
    },
    {
        "ID": 1961,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function unwrap(string $ciphertext, string $kek): string { if (0 !== strlen($ciphertext) % 8) { throw new \\UnexpectedValueException( \"Ciphertext length must be a multiple of 64 bits.\"); } $this->_checkKEKSize($kek); // C = ciphertext as 64 bit blocks with integrity check value prepended $C = str_split($ciphertext, 8); list($A, $R) = $this->_unwrapBlocks($C, $kek); // check integrity value if (!hash_equals($this->_iv, $A)) { throw new \\UnexpectedValueException(\"Integrity check failed.\"); } // output the plaintext $P = array_slice($R, 1, null, true); return implode(\"\", $P); }\n\n    ### Response: Unwrap a key from a ciphertext using given key encryption key.\n\n@param string $ciphertext Ciphertext of the wrapped key\n@param string $kek Key encryption key\n@throws \\UnexpectedValueException If the ciphertext is invalid\n@return string Unwrapped key.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public PublicationMessageFlyweight channel(final String channel) { lengthOfChannel = buffer.putStringAscii(offset + CHANNEL_OFFSET, channel); return this; }\n\n    ### Response:",
        "ground_truth": "Set the channel field in ASCII\n\n@param channel field value\n@return flyweight",
        "predict": " Unwrap a key from a ciphertext using given key encryption key.\n\n@param string $ciphertext Ciphertext of the wrapped key\n@param string $kek Key encryption key\n@throws \\UnexpectedValueException If the ciphertext is invalid\n@return string Unwrapped key.\n\n    "
    },
    {
        "ID": 1962,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static <E extends Enum<E>> StreamableEnumSet<E> copyOf (StreamableEnumSet<E> s) { return s.clone(); }\n\n    ### Response: Creates a set containing all elements in the set provided..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public long offer(final DirectBuffer buffer, final int offset, final int length) { return cluster.offer(id, responsePublication, buffer, offset, length); }\n\n    ### Response:",
        "ground_truth": "Non-blocking publish of a partial buffer containing a message to a cluster.\n\n@param buffer containing message.\n@param offset offset in the buffer at which the encoded message begins.\n@param length in bytes of the encoded message.\n@return the same as {@link Publication#offer(DirectBuffer, int, int)} when in {@link Cluster.Role#LEADER}\notherwise {@link #MOCKED_OFFER}.",
        "predict": " Creates a set containing all elements in the set provided..\n\n    "
    },
    {
        "ID": 1963,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (c *LinkCache) Len() int { c.Lock() defer c.Unlock() return len(c.cache) }\n\n    ### Response: // Len returns the number of ChainLinks cached..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public final void wrap(final AtomicBuffer buffer, final int offset, final int length) { this.buffer.wrap(buffer, offset, length); }\n\n    ### Response:",
        "ground_truth": "Wrap a region of an underlying log buffer so can can represent a claimed space for use by a publisher.\n\n@param buffer to be wrapped.\n@param offset at which the claimed region begins including space for the header.\n@param length length of the underlying claimed region including space for the header.",
        "predict": " // Len returns the number of ChainLinks cached..\n\n    "
    },
    {
        "ID": 1964,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def read(self, nbytes, timeout=None): \"\"\" Read data from the pipe. The return value is a string representing the data received. The maximum amount of data to be received at once is specified by ``nbytes``. If a string of length zero is returned, the pipe has been closed. The optional ``timeout`` argument can be a nonnegative float expressing seconds, or ``None`` for no timeout. If a float is given, a `.PipeTimeout` will be raised if the timeout period value has elapsed before any data arrives. :param int nbytes: maximum number of bytes to read :param float timeout: maximum seconds to wait (or ``None``, the default, to wait forever) :return: the read data, as a ``str`` or ``bytes`` :raises: `.PipeTimeout` -- if a timeout was specified and no data was ready before that timeout \"\"\" out = bytes() self._lock.acquire() try: if len(self._buffer) == 0: if self._closed: return out # should we block? if timeout == 0.0: raise PipeTimeout() # loop here in case we get woken up but a different thread has # grabbed everything in the buffer. while (len(self._buffer) == 0) and not self._closed: then = time.time() self._cv.wait(timeout) if timeout is not None: timeout -= time.time() - then if timeout <= 0.0: raise PipeTimeout() # something's in the buffer and we have the lock! if len(self._buffer) <= nbytes: out = self._buffer_tobytes() del self._buffer[:] if (self._event is not None) and not self._closed: self._event.clear() else: out = self._buffer_tobytes(nbytes) del self._buffer[:nbytes] finally: self._lock.release() return out\n\n    ### Response: Read data from the pipe.  The return value is a string representing\n        the data received.  The maximum amount of data to be received at once\n        is specified by ``nbytes``.  If a string of length zero is returned,\n        the pipe has been closed.\n\n        The optional ``timeout`` argument can be a nonnegative float expressing\n        seconds, or ``None`` for no timeout.  If a float is given, a\n        `.PipeTimeout` will be raised if the timeout period value has elapsed\n        before any data arrives.\n\n        :param int nbytes: maximum number of bytes to read\n        :param float timeout:\n            maximum seconds to wait (or ``None``, the default, to wait forever)\n        :return: the read data, as a ``str`` or ``bytes``\n\n        :raises:\n            `.PipeTimeout` -- if a timeout was specified and no data was ready\n            before that timeout.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public final void commit() { int frameLength = buffer.capacity(); if (ByteOrder.nativeOrder() != LITTLE_ENDIAN) { frameLength = Integer.reverseBytes(frameLength); } buffer.putIntOrdered(FRAME_LENGTH_FIELD_OFFSET, frameLength); }\n\n    ### Response:",
        "ground_truth": "Commit the message to the log buffer so that is it available to subscribers.",
        "predict": " Read data from the pipe.  The return value is a string representing\n        the data received.  The maximum amount of data to be received at once\n        is specified by ``nbytes``.  If a string of length zero is returned,\n        the pipe has been closed.\n\n        The optional ``timeout`` argument can be a nonnegative float expressing\n        seconds, or ``None`` for no timeout.  If a float is given, a\n        `.PipeTimeout` will be raised if the timeout period value has elapsed\n        before any data arrives.\n\n        :param int nbytes: maximum number of bytes to read\n        :param float timeout:\n            maximum seconds to wait (or ``None``, the default, to wait forever)\n        :return: the read data, as a ``str`` or ``bytes``\n\n        :raises:\n            `.PipeTimeout` -- if a timeout was specified and no data was ready\n            before that timeout.\n\n    "
    },
    {
        "ID": 1965,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func deref(typ types.Type) types.Type { if p, ok := typ.Underlying().(*types.Pointer); ok { return p.Elem() } return typ }\n\n    ### Response: // deref returns a pointer's element type; otherwise it returns typ..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public final void abort() { int frameLength = buffer.capacity(); if (ByteOrder.nativeOrder() != LITTLE_ENDIAN) { frameLength = Integer.reverseBytes(frameLength); } buffer.putShort(TYPE_FIELD_OFFSET, (short)HDR_TYPE_PAD, LITTLE_ENDIAN); buffer.putIntOrdered(FRAME_LENGTH_FIELD_OFFSET, frameLength); }\n\n    ### Response:",
        "ground_truth": "Abort a claim of the message space to the log buffer so that the log can progress by ignoring this claim.",
        "predict": " // deref returns a pointer's element type; otherwise it returns typ..\n\n    "
    },
    {
        "ID": 1966,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function getList() { $result = $this->execute(); $list = new ArrayCollection; //Convert all of them to entities foreach ($result as $row) { $list->add($this->convertValue($row[0])); } return $list; }\n\n    ### Response: Executes the query and returns a list of results, as entities.\n\n@return ArrayCollection The query result.\n@api.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void main(final String[] args) { loadPropertiesFiles(args); final ShutdownSignalBarrier barrier = new ShutdownSignalBarrier(); final MediaDriver.Context ctx = new MediaDriver.Context(); ctx.terminationHook(barrier::signal); try (MediaDriver ignore = MediaDriver.launch(ctx)) { barrier.await(); System.out.println(\"Shutdown Driver...\"); } }\n\n    ### Response:",
        "ground_truth": "Start Media Driver as a stand-alone process.\n\n@param args command line arguments",
        "predict": " Executes the query and returns a list of results, as entities.\n\n@return ArrayCollection The query result.\n@api.\n\n    "
    },
    {
        "ID": 1967,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    function( roomID, key ) { if( roomData[ roomID ] === undefined ) { return promise.reject( 'There is no room by that id' ); } else { return promise.resolve( roomData[ roomID ][ key ] ); } }\n\n    ### Response: get a variable from the rooms data object\n\n@param {String} roomID id for the room\n@param {String} key variable name/key that you want to get\n@return {Promise} once this promise succeeds it will return the variable value it will fail if the variable does not exist.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void close() { CloseHelper.close(sharedRunner); CloseHelper.close(sharedNetworkRunner); CloseHelper.close(receiverRunner); CloseHelper.close(senderRunner); CloseHelper.close(conductorRunner); CloseHelper.close(sharedInvoker); if (ctx.useWindowsHighResTimer() && SystemUtil.osName().startsWith(\"win\")) { if (!wasHighResTimerEnabled) { HighResolutionTimer.disable(); } } }\n\n    ### Response:",
        "ground_truth": "Shutdown the media driver by stopping all threads and freeing resources.",
        "predict": " get a variable from the rooms data object\n\n@param {String} roomID id for the room\n@param {String} key variable name/key that you want to get\n@return {Promise} once this promise succeeds it will return the variable value it will fail if the variable does not exist.\n\n    "
    },
    {
        "ID": 1968,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def extract_descriptor(self): \"\"\"Extract the the description of the Graph as an instance of NetworkDescriptor.\"\"\" main_chain = self.get_main_chain() index_in_main_chain = {} for index, u in enumerate(main_chain): index_in_main_chain[u] = index ret = NetworkDescriptor() for u in main_chain: for v, layer_id in self.adj_list[u]: if v not in index_in_main_chain: continue layer = self.layer_list[layer_id] copied_layer = copy(layer) copied_layer.weights = None ret.add_layer(deepcopy(copied_layer)) for u in index_in_main_chain: for v, layer_id in self.adj_list[u]: if v not in index_in_main_chain: temp_u = u temp_v = v temp_layer_id = layer_id skip_type = None while not (temp_v in index_in_main_chain and temp_u in index_in_main_chain): if is_layer(self.layer_list[temp_layer_id], \"Concatenate\"): skip_type = NetworkDescriptor.CONCAT_CONNECT if is_layer(self.layer_list[temp_layer_id], \"Add\"): skip_type = NetworkDescriptor.ADD_CONNECT temp_u = temp_v temp_v, temp_layer_id = self.adj_list[temp_v][0] ret.add_skip_connection( index_in_main_chain[u], index_in_main_chain[temp_u], skip_type ) elif index_in_main_chain[v] - index_in_main_chain[u] != 1: skip_type = None if is_layer(self.layer_list[layer_id], \"Concatenate\"): skip_type = NetworkDescriptor.CONCAT_CONNECT if is_layer(self.layer_list[layer_id], \"Add\"): skip_type = NetworkDescriptor.ADD_CONNECT ret.add_skip_connection( index_in_main_chain[u], index_in_main_chain[v], skip_type ) return ret\n\n    ### Response: Extract the the description of the Graph as an instance of NetworkDescriptor..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public final long position() { final int resultingOffset = BitUtil.align(termOffset() + frameLength(), FRAME_ALIGNMENT); return computePosition(termId(), resultingOffset, positionBitsToShift, initialTermId); }\n\n    ### Response:",
        "ground_truth": "Get the current position to which the image has advanced on reading this message.\n\n@return the current position to which the image has advanced on reading this message.",
        "predict": " Extract the the description of the Graph as an instance of NetworkDescriptor..\n\n    "
    },
    {
        "ID": 1969,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def get_host_health_temperature_sensors(self, data=None): \"\"\"Get the health Temp Sensor report. :param: the data to retrieve from the server, defaults to None. :returns: the dictionary containing the temperature sensors information. :raises: IloConnectionError if failed connecting to the iLO. :raises: IloError, on an error from iLO. \"\"\" data = self.get_host_health_data(data) d = data['GET_EMBEDDED_HEALTH_DATA']['TEMPERATURE']['TEMP'] if not isinstance(d, list): d = [d] return d\n\n    ### Response: Get the health Temp Sensor report.\n\n        :param: the data to retrieve from the server, defaults to None.\n        :returns: the dictionary containing the temperature sensors\n            information.\n        :raises: IloConnectionError if failed connecting to the iLO.\n        :raises: IloError, on an error from iLO..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static Counter allocate( final Aeron aeron, final MutableDirectBuffer tempBuffer, final int serviceId) { tempBuffer.putInt(SERVICE_ID_OFFSET, serviceId); final int labelOffset = BitUtil.align(KEY_LENGTH, SIZE_OF_INT); int labelLength = 0; labelLength += tempBuffer.putStringWithoutLengthAscii(labelOffset + labelLength, NAME); labelLength += tempBuffer.putIntAscii(labelOffset + labelLength, serviceId); return aeron.addCounter( SERVICE_HEARTBEAT_TYPE_ID, tempBuffer, 0, KEY_LENGTH, tempBuffer, labelOffset, labelLength); }\n\n    ### Response:",
        "ground_truth": "Allocate a counter to represent the heartbeat of a clustered service.\n\n@param aeron           to allocate the counter.\n@param tempBuffer      to use for building the key and label without allocation.\n@param serviceId       of the service heartbeat.\n@return the {@link Counter} for the commit position.",
        "predict": " Get the health Temp Sensor report.\n\n        :param: the data to retrieve from the server, defaults to None.\n        :returns: the dictionary containing the temperature sensors\n            information.\n        :raises: IloConnectionError if failed connecting to the iLO.\n        :raises: IloError, on an error from iLO..\n\n    "
    },
    {
        "ID": 1970,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function getValidSpecialPriceQuery() { $qb = $this->createQueryBuilder('specialPrice') ->leftJoin('specialPrice.product', 'product') ->leftJoin('product.status', 'productStatus') ->where(':now BETWEEN specialPrice.startDate AND specialPrice.endDate') ->andWhere('productStatus.id = :productStatus') ->setParameter('productStatus', Status::ACTIVE) ->setParameter('now', new \\DateTime()); return $qb; }\n\n    ### Response: Returns special price querybuilder.\n\n@return \\Doctrine\\ORM\\QueryBuilder.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static int findCounterId(final CountersReader counters, final int serviceId) { final DirectBuffer buffer = counters.metaDataBuffer(); for (int i = 0, size = counters.maxCounterId(); i < size; i++) { if (counters.getCounterState(i) == RECORD_ALLOCATED) { final int recordOffset = CountersReader.metaDataOffset(i); if (buffer.getInt(recordOffset + TYPE_ID_OFFSET) == SERVICE_HEARTBEAT_TYPE_ID && buffer.getInt(recordOffset + KEY_OFFSET + SERVICE_ID_OFFSET) == serviceId) { return i; } } } return NULL_COUNTER_ID; }\n\n    ### Response:",
        "ground_truth": "Find the active counter id for heartbeat of a given service id.\n\n@param counters  to search within.\n@param serviceId to search for.\n@return the counter id if found otherwise {@link CountersReader#NULL_COUNTER_ID}.",
        "predict": " Returns special price querybuilder.\n\n@return \\Doctrine\\ORM\\QueryBuilder.\n\n    "
    },
    {
        "ID": 1971,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function GetBasketStatistics($oBasket) { $sBasketstatistics = ''; $sBasketstatistics .= \"------------------------------------\\r\\n\\r\\n\"; $sBasketstatistics .= TGlobal::Translate('chameleon_system_shop.cron_send_basket_stats.basket_content').\"\\r\\n\"; $sBasketstatistics .= \"------------------------------------\\r\\n\"; $oArticleList = $oBasket->GetBasketContents(); $oArticleList->GoToStart(); while ($oArticle = $oArticleList->Next()) { $sBasketstatistics .= TGlobal::Translate( 'chameleon_system_shop.cron_send_basket_stats.basket_content_line', array( '%amount%' => '', '%name%' => '', '%price%' => '', '%totalPrice%' => '', ) ).\"\\r\\n\"; } $sBasketstatistics .= TGlobal::Translate('chameleon_system_shop.cron_send_basket_stats.basket_content_total', array('%basketTotal%' => $oBasket->dCostArticlesTotal)).\"\\r\\n\"; $this->sTotalMoneyCanceled = $this->sTotalMoneyCanceled + $oBasket->dCostArticlesTotal; $sBasketstatistics .= \"------------------------------------\\r\\n\"; return $sBasketstatistics; }\n\n    ### Response: Get basket statistics for canceled basket step.\n\n@param TShopBasket $oBasket\n\n@return string.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public Map<StreamCompositeKey, StreamBacklog> snapshot() { final Map<StreamCompositeKey, StreamBacklog> streams = new HashMap<>(); counters.forEach( (counterId, typeId, keyBuffer, label) -> { if ((typeId >= PUBLISHER_LIMIT_TYPE_ID && typeId <= RECEIVER_POS_TYPE_ID) || typeId == SENDER_LIMIT_TYPE_ID || typeId == PER_IMAGE_TYPE_ID || typeId == PUBLISHER_POS_TYPE_ID) { final StreamCompositeKey key = new StreamCompositeKey( keyBuffer.getInt(SESSION_ID_OFFSET), keyBuffer.getInt(STREAM_ID_OFFSET), keyBuffer.getStringAscii(CHANNEL_OFFSET)); final StreamBacklog streamBacklog = streams.computeIfAbsent(key, (ignore) -> new StreamBacklog()); final long registrationId = keyBuffer.getLong(REGISTRATION_ID_OFFSET); final long value = counters.getCounterValue(counterId); switch (typeId) { case PublisherLimit.PUBLISHER_LIMIT_TYPE_ID: streamBacklog.createPublisherIfAbsent().registrationId(registrationId); streamBacklog.createPublisherIfAbsent().limit(value); break; case PublisherPos.PUBLISHER_POS_TYPE_ID: streamBacklog.createPublisherIfAbsent().registrationId(registrationId); streamBacklog.createPublisherIfAbsent().position(value); break; case SenderPos.SENDER_POSITION_TYPE_ID: streamBacklog.createSenderIfAbsent().registrationId(registrationId); streamBacklog.createSenderIfAbsent().position(value); break; case SenderLimit.SENDER_LIMIT_TYPE_ID: streamBacklog.createSenderIfAbsent().registrationId(registrationId); streamBacklog.createSenderIfAbsent().limit(value); break; case ReceiverHwm.RECEIVER_HWM_TYPE_ID: streamBacklog.createReceiverIfAbsent().registrationId(registrationId); streamBacklog.createReceiverIfAbsent().highWaterMark(value); break; case ReceiverPos.RECEIVER_POS_TYPE_ID: streamBacklog.createReceiverIfAbsent().registrationId(registrationId); streamBacklog.createReceiverIfAbsent().position(value); break; case SubscriberPos.SUBSCRIBER_POSITION_TYPE_ID: streamBacklog.subscriberBacklogs().put(registrationId, new Subscriber(value)); break; } } }); return streams; }\n\n    ### Response:",
        "ground_truth": "Take a snapshot of all the backlog information and group by stream.\n\n@return a snapshot of all the backlog information and group by stream.",
        "predict": " Get basket statistics for canceled basket step.\n\n@param TShopBasket $oBasket\n\n@return string.\n\n    "
    },
    {
        "ID": 1972,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function convertParameterDataToArray(array $parametersInformation) { $parameters = []; foreach ($parametersInformation as $parameterName => $parameterData) { $parameters[$parameterName] = [ 'position' => $parameterData[self::DATA_PARAMETER_POSITION], 'optional' => isset($parameterData[self::DATA_PARAMETER_OPTIONAL]), 'type' => $parameterData[self::DATA_PARAMETER_TYPE], 'class' => isset($parameterData[self::DATA_PARAMETER_CLASS]) ? $parameterData[self::DATA_PARAMETER_CLASS] : null, 'array' => isset($parameterData[self::DATA_PARAMETER_ARRAY]), 'byReference' => isset($parameterData[self::DATA_PARAMETER_BY_REFERENCE]), 'allowsNull' => isset($parameterData[self::DATA_PARAMETER_ALLOWS_NULL]), 'defaultValue' => isset($parameterData[self::DATA_PARAMETER_DEFAULT_VALUE]) ? $parameterData[self::DATA_PARAMETER_DEFAULT_VALUE] : null, 'scalarDeclaration' => isset($parameterData[self::DATA_PARAMETER_SCALAR_DECLARATION]) ]; } return $parameters; }\n\n    ### Response: Converts the internal, optimized data structure of parameter information into\na human-friendly array with speaking indexes.\n\n@param array $parametersInformation Raw, internal parameter information\n@return array Developer friendly version.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static AtomicCounter allocate( final MutableDirectBuffer tempBuffer, final String name, final int typeId, final CountersManager countersManager, final long registrationId) { return new AtomicCounter( countersManager.valuesBuffer(), allocateCounterId(tempBuffer, name, typeId, countersManager, registrationId), countersManager); }\n\n    ### Response:",
        "ground_truth": "Allocate a counter for tracking the last heartbeat of an entity.\n\n@param tempBuffer      to be used for labels and key.\n@param name            of the counter for the label.\n@param typeId          of the counter for classification.\n@param countersManager from which to allocated the underlying storage.\n@param registrationId  to be associated with the counter.\n@return a new {@link AtomicCounter} for tracking the last heartbeat.",
        "predict": " Converts the internal, optimized data structure of parameter information into\na human-friendly array with speaking indexes.\n\n@param array $parametersInformation Raw, internal parameter information\n@return array Developer friendly version.\n\n    "
    },
    {
        "ID": 1973,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def add_tarball(self, tarball, package): \"\"\"Add a tarball, possibly creating the directory if needed.\"\"\" if tarball is None: logger.error( \"No tarball found for %s: probably a renamed project?\", package) return target_dir = os.path.join(self.root_directory, package) if not os.path.exists(target_dir): os.mkdir(target_dir) logger.info(\"Created %s\", target_dir) logger.info(\"Copying tarball to %s\", target_dir) shutil.copy(tarball, target_dir)\n\n    ### Response: Add a tarball, possibly creating the directory if needed..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void close() { final MappedByteBuffer cncByteBuffer = this.cncByteBuffer; this.cncByteBuffer = null; IoUtil.unmap(cncByteBuffer); super.close(); }\n\n    ### Response:",
        "ground_truth": "Clean up all resources that the client uses to communicate with the Media Driver.",
        "predict": " Add a tarball, possibly creating the directory if needed..\n\n    "
    },
    {
        "ID": 1974,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (p *ExamplePlugin) buildData(stringVal string, uint32Val uint32, boolVal bool) *etcdexample.EtcdExample { return &etcdexample.EtcdExample{ StringVal: stringVal, Uint32Val: uint32Val, BoolVal: boolVal, } }\n\n    ### Response: // Create simple ETCD data structure with provided data values..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static void dispatchDescriptor( final RecordingDescriptorDecoder decoder, final RecordingDescriptorConsumer consumer) { consumer.onRecordingDescriptor( decoder.controlSessionId(), decoder.correlationId(), decoder.recordingId(), decoder.startTimestamp(), decoder.stopTimestamp(), decoder.startPosition(), decoder.stopPosition(), decoder.initialTermId(), decoder.segmentFileLength(), decoder.termBufferLength(), decoder.mtuLength(), decoder.sessionId(), decoder.streamId(), decoder.strippedChannel(), decoder.originalChannel(), decoder.sourceIdentity()); }\n\n    ### Response:",
        "ground_truth": "Dispatch a descriptor message to a consumer by reading the fields in the correct order.\n\n@param decoder  which wraps the encoded message ready for reading.\n@param consumer to which the decoded fields should be passed.",
        "predict": " // Create simple ETCD data structure with provided data values..\n\n    "
    },
    {
        "ID": 1975,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (c *Client) SetCharm(branchName string, cfg SetCharmConfig) error { var storageConstraints map[string]params.StorageConstraints if len(cfg.StorageConstraints) > 0 { storageConstraints = make(map[string]params.StorageConstraints) for name, cons := range cfg.StorageConstraints { size, count := cons.Size, cons.Count var sizePtr, countPtr *uint64 if size > 0 { sizePtr = &size } if count > 0 { countPtr = &count } storageConstraints[name] = params.StorageConstraints{ Pool: cons.Pool, Size: sizePtr, Count: countPtr, } } } args := params.ApplicationSetCharm{ ApplicationName: cfg.ApplicationName, CharmURL: cfg.CharmID.URL.String(), Channel: string(cfg.CharmID.Channel), ConfigSettings: cfg.ConfigSettings, ConfigSettingsYAML: cfg.ConfigSettingsYAML, Force: cfg.Force, ForceSeries: cfg.ForceSeries, ForceUnits: cfg.ForceUnits, ResourceIDs: cfg.ResourceIDs, StorageConstraints: storageConstraints, Generation: branchName, } return c.facade.FacadeCall(\"SetCharm\", args, nil) }\n\n    ### Response: // SetCharm sets the charm for a given application..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void addSlab(int minimumSize) { int nextSlabSize; if (bytesUsed == 0) { nextSlabSize = initialSlabSize; } else if (bytesUsed > maxCapacityHint / 5) { // to avoid an overhead of up to twice the needed size, we get linear when approaching target page size nextSlabSize = maxCapacityHint / 5; } else { // double the size every time nextSlabSize = bytesUsed; } if (nextSlabSize < minimumSize) { LOG.debug(\"slab size {} too small for value of size {}. Bumping up slab size\", nextSlabSize, minimumSize); nextSlabSize = minimumSize; } LOG.debug(\"used {} slabs, adding new slab of size {}\", slabs.size(), nextSlabSize); this.currentSlab = allocator.allocate(nextSlabSize); this.slabs.add(currentSlab); this.bytesAllocated += nextSlabSize; this.currentSlabIndex = 0; }\n\n    ### Response:",
        "ground_truth": "the new slab is guaranteed to be at least minimumSize\n@param minimumSize the size of the data we want to copy in the new slab",
        "predict": " // SetCharm sets the charm for a given application..\n\n    "
    },
    {
        "ID": 1976,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (d *dispatcher) RegisterFunc(c StreamType, h HandlerFunc) { d.handlers[c] = &basicHandler{h} }\n\n    ### Response: // RegisterFunc adds the HandlerFunc based on type..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void setByte(long index, byte value) { checkArgument(index < bytesUsed, \"Index: \" + index + \" is >= the current size of: \" + bytesUsed); long seen = 0; for (int i = 0; i < slabs.size(); i++) { ByteBuffer slab = slabs.get(i); if (index < seen + slab.limit()) { // ok found index slab.put((int)(index-seen), value); break; } seen += slab.limit(); } }\n\n    ### Response:",
        "ground_truth": "Replace the byte stored at position index in this stream with value\n\n@param index which byte to replace\n@param value the value to replace it with",
        "predict": " // RegisterFunc adds the HandlerFunc based on type..\n\n    "
    },
    {
        "ID": 1977,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def friendly_format(self): \"\"\"Serialize to a format more suitable for displaying to end users.\"\"\" if self.description is not None: msg = self.description else: msg = 'errorCode: {} / detailCode: {}'.format( self.errorCode, self.detailCode ) return self._fmt(self.name, msg)\n\n    ### Response: Serialize to a format more suitable for displaying to end users..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void add(Statistics<?> stats) { if (stats.hasNonNullValue()) { nullPages.add(false); Object min = stats.genericGetMin(); Object max = stats.genericGetMax(); addMinMax(min, max); pageIndexes.add(nextPageIndex); minMaxSize += sizeOf(min); minMaxSize += sizeOf(max); } else { nullPages.add(true); } nullCounts.add(stats.getNumNulls()); ++nextPageIndex; }\n\n    ### Response:",
        "ground_truth": "Adds the data from the specified statistics to this builder\n\n@param stats\nthe statistics to be added",
        "predict": " Serialize to a format more suitable for displaying to end users..\n\n    "
    },
    {
        "ID": 1978,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _parse_device(s: str) -> Tuple[List[GridQubit], Dict[str, Set[GridQubit]]]: \"\"\"Parse ASCIIart device layout into info about qubits and connectivity. Args: s: String representing the qubit layout. Each line represents a row, and each character in the row is a qubit, or a blank site if the character is a hyphen '-'. Different letters for the qubit specify which measurement line that qubit is connected to, e.g. all 'A' qubits share a measurement line. Leading and trailing spaces on each line are ignored. Returns: A list of qubits and a dict mapping measurement line name to the qubits on that measurement line. \"\"\" lines = s.strip().split('\\n') qubits = [] # type: List[GridQubit] measurement_lines = {} # type: Dict[str, Set[GridQubit]] for row, line in enumerate(lines): for col, c in enumerate(line.strip()): if c != '-': qubit = GridQubit(row, col) qubits.append(qubit) measurement_line = measurement_lines.setdefault(c, set()) measurement_line.add(qubit) return qubits, measurement_lines\n\n    ### Response: Parse ASCIIart device layout into info about qubits and connectivity.\n\n    Args:\n        s: String representing the qubit layout. Each line represents a row,\n            and each character in the row is a qubit, or a blank site if the\n            character is a hyphen '-'. Different letters for the qubit specify\n            which measurement line that qubit is connected to, e.g. all 'A'\n            qubits share a measurement line. Leading and trailing spaces on\n            each line are ignored.\n\n    Returns:\n        A list of qubits and a dict mapping measurement line name to the qubits\n        on that measurement line..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static RowRanges calculateRowRanges(FilterCompat.Filter filter, ColumnIndexStore columnIndexStore, Set<ColumnPath> paths, long rowCount) { return filter.accept(new FilterCompat.Visitor<RowRanges>() { @Override public RowRanges visit(FilterPredicateCompat filterPredicateCompat) { try { return filterPredicateCompat.getFilterPredicate() .accept(new ColumnIndexFilter(columnIndexStore, paths, rowCount)); } catch (MissingOffsetIndexException e) { LOGGER.info(e.getMessage()); return RowRanges.createSingle(rowCount); } } @Override public RowRanges visit(UnboundRecordFilterCompat unboundRecordFilterCompat) { return RowRanges.createSingle(rowCount); } @Override public RowRanges visit(NoOpFilter noOpFilter) { return RowRanges.createSingle(rowCount); } }); }\n\n    ### Response:",
        "ground_truth": "Calculates the row ranges containing the indexes of the rows might match the specified filter.\n\n@param filter\nto be used for filtering the rows\n@param columnIndexStore\nthe store for providing column/offset indexes\n@param paths\nthe paths of the columns used in the actual projection; a column not being part of the projection will be\nhandled as containing {@code null} values only even if the column has values written in the file\n@param rowCount\nthe total number of rows in the row-group\n@return the ranges of the possible matching row indexes; the returned ranges will contain all the rows if any of\nthe required offset index is missing",
        "predict": " Parse ASCIIart device layout into info about qubits and connectivity.\n\n    Args:\n        s: String representing the qubit layout. Each line represents a row,\n            and each character in the row is a qubit, or a blank site if the\n            character is a hyphen '-'. Different letters for the qubit specify\n            which measurement line that qubit is connected to, e.g. all 'A'\n            qubits share a measurement line. Leading and trailing spaces on\n            each line are ignored.\n\n    Returns:\n        A list of qubits and a dict mapping measurement line name to the qubits\n        on that measurement line..\n\n    "
    },
    {
        "ID": 1979,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function createTagIdsQuery(array $translations = null, $useAlwaysAvailable = true) { /** @var \\eZ\\Publish\\Core\\Persistence\\Database\\SelectQuery $query */ $query = $this->handler->createSelectQuery(); $query->select('DISTINCT eztags.id, eztags.keyword') ->from( $this->handler->quoteTable('eztags') ) // @todo: Joining with eztags_keyword is probably a VERY bad way to gather that information // since it creates an additional cartesian product with translations. ->leftJoin( $this->handler->quoteTable('eztags_keyword'), $query->expr->lAnd( // eztags_keyword.locale is also part of the PK but can't be // easily joined with something at this level $query->expr->eq( $this->handler->quoteColumn('keyword_id', 'eztags_keyword'), $this->handler->quoteColumn('id', 'eztags') ), $query->expr->eq( $this->handler->quoteColumn('status', 'eztags_keyword'), $query->bindValue(1, null, PDO::PARAM_INT) ) ) ); if (!empty($translations)) { if ($useAlwaysAvailable) { $query->where( $query->expr->lOr( $query->expr->in( $this->handler->quoteColumn('locale', 'eztags_keyword'), $translations ), $query->expr->lAnd( $query->expr->gt( $query->expr->bitAnd( $this->handler->quoteColumn('language_mask', 'eztags'), 1 ), 0 ), $query->expr->eq( $this->handler->quoteColumn('main_language_id', 'eztags'), $query->expr->bitAnd( $this->handler->quoteColumn('language_id', 'eztags_keyword'), -2 // -2 == PHP_INT_MAX << 1 ) ) ) ) ); } else { $query->where( $query->expr->in( $this->handler->quoteColumn('locale', 'eztags_keyword'), $translations ) ); } } return $query; }\n\n    ### Response: Creates a select query for tag objects that fetches only tag IDs.\n\nDoes not apply any WHERE conditions.\n\n@param string[] $translations\n@param bool $useAlwaysAvailable\n\n@return \\eZ\\Publish\\Core\\Persistence\\Database\\SelectQuery.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static GroupType convertArrayType(final String name, final ListTypeInfo typeInfo) { final TypeInfo subType = typeInfo.getListElementTypeInfo(); return listWrapper(name, listType(), new GroupType(Repetition.REPEATED, ParquetHiveSerDe.ARRAY.toString(), convertType(\"array_element\", subType))); }\n\n    ### Response:",
        "ground_truth": "1 anonymous element \"array_element\"",
        "predict": " Creates a select query for tag objects that fetches only tag IDs.\n\nDoes not apply any WHERE conditions.\n\n@param string[] $translations\n@param bool $useAlwaysAvailable\n\n@return \\eZ\\Publish\\Core\\Persistence\\Database\\SelectQuery.\n\n    "
    },
    {
        "ID": 1980,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def find_matching_link(self, mode, group, addr): \"\"\"Find a matching link in the current device. Mode: r | c is the mode of the link in the linked device This method will search for a corresponding link in the reverse direction. group: All-Link group number addr: Inteon address of the linked device \"\"\" found_rec = None mode_test = None if mode.lower() in ['c', 'r']: link_group = int(group) link_addr = Address(addr) for mem_addr in self: rec = self[mem_addr] if mode.lower() == 'r': mode_test = rec.control_flags.is_controller else: mode_test = rec.control_flags.is_responder if (mode_test and rec.group == link_group and rec.address == link_addr): found_rec = rec return found_rec\n\n    ### Response: Find a matching link in the current device.\n\n        Mode: r | c is the mode of the link in the linked device\n              This method will search for a corresponding link in the\n              reverse direction.\n        group: All-Link group number\n        addr:  Inteon address of the linked device.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static GroupType convertStructType(final String name, final StructTypeInfo typeInfo) { final List<String> columnNames = typeInfo.getAllStructFieldNames(); final List<TypeInfo> columnTypes = typeInfo.getAllStructFieldTypeInfos(); return new GroupType(Repetition.OPTIONAL, name, convertTypes(columnNames, columnTypes)); }\n\n    ### Response:",
        "ground_truth": "An optional group containing multiple elements",
        "predict": " Find a matching link in the current device.\n\n        Mode: r | c is the mode of the link in the linked device\n              This method will search for a corresponding link in the\n              reverse direction.\n        group: All-Link group number\n        addr:  Inteon address of the linked device.\n\n    "
    },
    {
        "ID": 1981,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function like($userId = null) { app(LikeableServiceContract::class)->addLikeTo($this, LikeType::LIKE, $userId); }\n\n    ### Response: Add a like for model by the given user.\n\n@param mixed $userId If null will use currently logged in user.\n@return void\n\n@throws \\Cog\\Likeable\\Exceptions\\LikerNotDefinedException.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private static String annotateMessage(String message, int pos) { StringBuilder sb = new StringBuilder(message); sb.append('\\n'); for (int i = 0; i < pos; i++) { sb.append('-'); } sb.append('^'); return sb.toString(); }\n\n    ### Response:",
        "ground_truth": "for pretty printing which character had the error",
        "predict": " Add a like for model by the given user.\n\n@param mixed $userId If null will use currently logged in user.\n@return void\n\n@throws \\Cog\\Likeable\\Exceptions\\LikerNotDefinedException.\n\n    "
    },
    {
        "ID": 1982,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static function exceptionHandler($exception) { $message = $exception->getMessage(); $code = $exception->getCode(); $file = $exception->getFile(); $line = $exception->getLine(); $context = $exception->getTraceAsString(); self::logError('Exception thrown: ' . $message . ' | ' . $code, null, $file, $line); // And return a 500 because this error was fatal self::http_error('500'); }\n\n    ### Response: Exception handler\nWill be triggered when an uncaught exception occures. This function shows the error-message, and shuts down the script.\nPlease note that most of the user-defined exceptions will be caught in the router, and handled with the error-controller.\n\n@param Exception $exception The occured exception..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void endPreviousBitPackedRun() { if (bitPackedRunHeaderPointer == -1) { // we're not currently in a bit-packed-run return; } // create bit-packed-header, which needs to fit in 1 byte byte bitPackHeader = (byte) ((bitPackedGroupCount << 1) | 1); // update this byte baos.setByte(bitPackedRunHeaderPointer, bitPackHeader); // mark that this run is over bitPackedRunHeaderPointer = -1; // reset the number of groups bitPackedGroupCount = 0; }\n\n    ### Response:",
        "ground_truth": "If we are currently writing a bit-packed-run, update the\nbit-packed-header and consider this run to be over\n\ndoes nothing if we're not currently writing a bit-packed run",
        "predict": " Exception handler\nWill be triggered when an uncaught exception occures. This function shows the error-message, and shuts down the script.\nPlease note that most of the user-defined exceptions will be caught in the router, and handled with the error-controller.\n\n@param Exception $exception The occured exception..\n\n    "
    },
    {
        "ID": 1983,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func (s PluginMetaSet) ByName() map[string]PluginMetaSet { ret := make(map[string]PluginMetaSet) for p := range s { if _, ok := ret[p.Name]; !ok { ret[p.Name] = make(PluginMetaSet) } ret[p.Name].Add(p) } return ret }\n\n    ### Response: // ByName groups the metas in the set by their Names, returning a map..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Override public void readOne(TProtocol in, TProtocol out) throws TException { readOneStruct(in, out); }\n\n    ### Response:",
        "ground_truth": "reads one record from in and writes it to out\nexceptions are not recoverable as record might be halfway written\n@param in input protocol\n@param out output protocol\n@throws TException if there is an error while reading or writing",
        "predict": " // ByName groups the metas in the set by their Names, returning a map..\n\n    "
    },
    {
        "ID": 1984,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def _is_wildcard_match(self, domain_labels, valid_domain_labels): \"\"\" Determines if the labels in a domain are a match for labels from a wildcard valid domain name :param domain_labels: A list of unicode strings, with A-label form for IDNs, of the labels in the domain name to check :param valid_domain_labels: A list of unicode strings, with A-label form for IDNs, of the labels in a wildcard domain pattern :return: A boolean - if the domain matches the valid domain \"\"\" first_domain_label = domain_labels[0] other_domain_labels = domain_labels[1:] wildcard_label = valid_domain_labels[0] other_valid_domain_labels = valid_domain_labels[1:] # The wildcard is only allowed in the first label, so if # The subsequent labels are not equal, there is no match if other_domain_labels != other_valid_domain_labels: return False if wildcard_label == '*': return True wildcard_regex = re.compile('^' + wildcard_label.replace('*', '.*') + '$') if wildcard_regex.match(first_domain_label): return True return False\n\n    ### Response: Determines if the labels in a domain are a match for labels from a\n        wildcard valid domain name\n\n        :param domain_labels:\n            A list of unicode strings, with A-label form for IDNs, of the labels\n            in the domain name to check\n\n        :param valid_domain_labels:\n            A list of unicode strings, with A-label form for IDNs, of the labels\n            in a wildcard domain pattern\n\n        :return:\n            A boolean - if the domain matches the valid domain.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Deprecated public static List<Footer> readFooters(Configuration configuration, FileStatus pathStatus) throws IOException { return readFooters(configuration, pathStatus, false); }\n\n    ### Response:",
        "ground_truth": "this always returns the row groups\n@param configuration a configuration\n@param pathStatus a file status to read footers from\n@return a list of footers\n@throws IOException if an exception is thrown while reading the footers\n@deprecated will be removed in 2.0.0;\nuse {@link ParquetFileReader#open(InputFile, ParquetReadOptions)}",
        "predict": " Determines if the labels in a domain are a match for labels from a\n        wildcard valid domain name\n\n        :param domain_labels:\n            A list of unicode strings, with A-label form for IDNs, of the labels\n            in the domain name to check\n\n        :param valid_domain_labels:\n            A list of unicode strings, with A-label form for IDNs, of the labels\n            in a wildcard domain pattern\n\n        :return:\n            A boolean - if the domain matches the valid domain.\n\n    "
    },
    {
        "ID": 1985,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function request($type, $url, $args = []) { $response = $this->getHTTPClient() ->$type($url, $args) ->getBody() ->getContents(); return json_decode($response); }\n\n    ### Response: Our main request method to Montage.  Uses Guzzle under\nthe hood to make the request, and will return the\njson_decoded response from Montage.\n\n@param $type\n@param $url\n@param array $args\n@return mixed.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Deprecated public static List<Footer> readSummaryFile(Configuration configuration, FileStatus summaryStatus) throws IOException { final Path parent = summaryStatus.getPath().getParent(); ParquetMetadata mergedFooters = readFooter(configuration, summaryStatus, filter(false)); return footersFromSummaryFile(parent, mergedFooters); }\n\n    ### Response:",
        "ground_truth": "Specifically reads a given summary file\n@param configuration a configuration\n@param summaryStatus file status for a summary file\n@return the metadata translated for each file\n@throws IOException if an exception is thrown while reading the summary file\n@deprecated metadata files are not recommended and will be removed in 2.0.0",
        "predict": " Our main request method to Montage.  Uses Guzzle under\nthe hood to make the request, and will return the\njson_decoded response from Montage.\n\n@param $type\n@param $url\n@param array $args\n@return mixed.\n\n    "
    },
    {
        "ID": 1986,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected void putNullItem(NullItemData item) { boolean inTransaction = cache.isTransactionActive(); try { if (!inTransaction) { cache.beginTransaction(); } cache.setLocal(true); if (!item.getIdentifier().equals(NullItemData.NULL_ID)) { cache.putIfAbsent(new CacheId(getOwnerId(), item.getIdentifier()), item); } else if (item.getName() != null && item.getParentIdentifier() != null) { cache.putIfAbsent( new CacheQPath(getOwnerId(), item.getParentIdentifier(), item.getName(), ItemType.getItemType(item)), NullItemData.NULL_ID); } } finally { cache.setLocal(false); if (!inTransaction) { dedicatedTxCommit(); } } }\n\n    ### Response: Internal put NullNode.\n\n@param item, NullItemData, new data to put in the cache.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    @Deprecated public static final ParquetMetadata readFooter(InputFile file, MetadataFilter filter) throws IOException { ParquetReadOptions options; if (file instanceof HadoopInputFile) { options = HadoopReadOptions.builder(((HadoopInputFile) file).getConfiguration()) .withMetadataFilter(filter).build(); } else { options = ParquetReadOptions.builder().withMetadataFilter(filter).build(); } try (SeekableInputStream in = file.newStream()) { return readFooter(file, options, in); } }\n\n    ### Response:",
        "ground_truth": "Reads the meta data block in the footer of the file using provided input stream\n@param file a {@link InputFile} to read\n@param filter the filter to apply to row groups\n@return the metadata blocks in the footer\n@throws IOException if an error occurs while reading the file\n@deprecated will be removed in 2.0.0;\nuse {@link ParquetFileReader#open(InputFile, ParquetReadOptions)}",
        "predict": " Internal put NullNode.\n\n@param item, NullItemData, new data to put in the cache.\n\n    "
    },
    {
        "ID": 1987,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def plot_covariance(kernel, x=None, label=None, plot_limits=None, visible_dims=None, resolution=None, projection='2d', levels=20, **kwargs): \"\"\" Plot a kernel covariance w.r.t. another x. :param array-like x: the value to use for the other kernel argument (kernels are a function of two variables!) :param plot_limits: the range over which to plot the kernel :type plot_limits: Either (xmin, xmax) for 1D or (xmin, xmax, ymin, ymax) / ((xmin, xmax), (ymin, ymax)) for 2D :param array-like visible_dims: input dimensions (!) to use for x. Make sure to select 2 or less dimensions to plot. :resolution: the resolution of the lines used in plotting. for 2D this defines the grid for kernel evaluation. :param {2d|3d} projection: What projection shall we use to plot the kernel? :param int levels: for 2D projection, how many levels for the contour plot to use? :param kwargs: valid kwargs for your specific plotting library \"\"\" X = np.ones((2, kernel._effective_input_dim)) * [[-3], [3]] _, free_dims, Xgrid, xx, yy, _, _, resolution = helper_for_plot_data(kernel, X, plot_limits, visible_dims, None, resolution) from numbers import Number if x is None: from ...kern.src.stationary import Stationary x = np.ones((1, kernel._effective_input_dim)) * (not isinstance(kernel, Stationary)) elif isinstance(x, Number): x = np.ones((1, kernel._effective_input_dim))*x K = kernel.K(Xgrid, x) if projection == '3d': xlabel = 'X[:,0]' ylabel = 'X[:,1]' zlabel = \"k(X, {!s})\".format(np.asanyarray(x).tolist()) else: xlabel = 'X' ylabel = \"k(X, {!s})\".format(np.asanyarray(x).tolist()) zlabel = None canvas, kwargs = pl().new_canvas(projection=projection, xlabel=xlabel, ylabel=ylabel, zlabel=zlabel, **kwargs) if len(free_dims)<=2: if len(free_dims)==1: # 1D plotting: update_not_existing_kwargs(kwargs, pl().defaults.meanplot_1d) # @UndefinedVariable plots = dict(covariance=[pl().plot(canvas, Xgrid[:, free_dims], K, label=label, **kwargs)]) else: if projection == '2d': update_not_existing_kwargs(kwargs, pl().defaults.meanplot_2d) # @UndefinedVariable plots = dict(covariance=[pl().contour(canvas, xx[:, 0], yy[0, :], K.reshape(resolution, resolution), levels=levels, label=label, **kwargs)]) elif projection == '3d': update_not_existing_kwargs(kwargs, pl().defaults.meanplot_3d) # @UndefinedVariable plots = dict(covariance=[pl().surface(canvas, xx, yy, K.reshape(resolution, resolution), label=label, **kwargs)]) return pl().add_to_canvas(canvas, plots) else: raise NotImplementedError(\"Cannot plot a kernel with more than two input dimensions\")\n\n    ### Response: Plot a kernel covariance w.r.t. another x.\n\n    :param array-like x: the value to use for the other kernel argument (kernels are a function of two variables!)\n    :param plot_limits: the range over which to plot the kernel\n    :type plot_limits: Either (xmin, xmax) for 1D or (xmin, xmax, ymin, ymax) / ((xmin, xmax), (ymin, ymax)) for 2D\n    :param array-like visible_dims: input dimensions (!) to use for x. Make sure to select 2 or less dimensions to plot.\n    :resolution: the resolution of the lines used in plotting. for 2D this defines the grid for kernel evaluation.\n    :param {2d|3d} projection: What projection shall we use to plot the kernel?\n    :param int levels: for 2D projection, how many levels for the contour plot to use?\n    :param kwargs:  valid kwargs for your specific plotting library.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public PageReadStore readNextRowGroup() throws IOException { if (currentBlock == blocks.size()) { return null; } BlockMetaData block = blocks.get(currentBlock); if (block.getRowCount() == 0) { throw new RuntimeException(\"Illegal row group of 0 rows\"); } this.currentRowGroup = new ColumnChunkPageReadStore(block.getRowCount()); // prepare the list of consecutive parts to read them in one scan List<ConsecutivePartList> allParts = new ArrayList<ConsecutivePartList>(); ConsecutivePartList currentParts = null; for (ColumnChunkMetaData mc : block.getColumns()) { ColumnPath pathKey = mc.getPath(); BenchmarkCounter.incrementTotalBytes(mc.getTotalSize()); ColumnDescriptor columnDescriptor = paths.get(pathKey); if (columnDescriptor != null) { long startingPos = mc.getStartingPos(); // first part or not consecutive => new list if (currentParts == null || currentParts.endPos() != startingPos) { currentParts = new ConsecutivePartList(startingPos); allParts.add(currentParts); } currentParts.addChunk(new ChunkDescriptor(columnDescriptor, mc, startingPos, (int)mc.getTotalSize())); } } // actually read all the chunks ChunkListBuilder builder = new ChunkListBuilder(); for (ConsecutivePartList consecutiveChunks : allParts) { consecutiveChunks.readAll(f, builder); } for (Chunk chunk : builder.build()) { currentRowGroup.addColumn(chunk.descriptor.col, chunk.readAllPages()); } // avoid re-reading bytes the dictionary reader is used after this call if (nextDictionaryReader != null) { nextDictionaryReader.setRowGroup(currentRowGroup); } advanceToNextBlock(); return currentRowGroup; }\n\n    ### Response:",
        "ground_truth": "Reads all the columns requested from the row group at the current file position.\n@throws IOException if an error occurs while reading\n@return the PageReadStore which can provide PageReaders for each column.",
        "predict": " Plot a kernel covariance w.r.t. another x.\n\n    :param array-like x: the value to use for the other kernel argument (kernels are a function of two variables!)\n    :param plot_limits: the range over which to plot the kernel\n    :type plot_limits: Either (xmin, xmax) for 1D or (xmin, xmax, ymin, ymax) / ((xmin, xmax), (ymin, ymax)) for 2D\n    :param array-like visible_dims: input dimensions (!) to use for x. Make sure to select 2 or less dimensions to plot.\n    :resolution: the resolution of the lines used in plotting. for 2D this defines the grid for kernel evaluation.\n    :param {2d|3d} projection: What projection shall we use to plot the kernel?\n    :param int levels: for 2D projection, how many levels for the contour plot to use?\n    :param kwargs:  valid kwargs for your specific plotting library.\n\n    "
    },
    {
        "ID": 1988,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def list_available_custom_prebuilt_domains(custom_headers:nil) response = list_available_custom_prebuilt_domains_async(custom_headers:custom_headers).value! response.body unless response.nil? end\n\n    ### Response: Gets all the available custom prebuilt domains for all cultures.\n\n @param custom_headers [Hash{String => String}] A hash of custom headers that\n will be added to the HTTP request.\n\n @return [Array] operation results..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public PageReadStore readNextFilteredRowGroup() throws IOException { if (currentBlock == blocks.size()) { return null; } if (!options.useColumnIndexFilter()) { return readNextRowGroup(); } BlockMetaData block = blocks.get(currentBlock); if (block.getRowCount() == 0) { throw new RuntimeException(\"Illegal row group of 0 rows\"); } ColumnIndexStore ciStore = getColumnIndexStore(currentBlock); RowRanges rowRanges = getRowRanges(currentBlock); long rowCount = rowRanges.rowCount(); if (rowCount == 0) { // There are no matching rows -> skipping this row-group advanceToNextBlock(); return readNextFilteredRowGroup(); } if (rowCount == block.getRowCount()) { // All rows are matching -> fall back to the non-filtering path return readNextRowGroup(); } this.currentRowGroup = new ColumnChunkPageReadStore(rowRanges); // prepare the list of consecutive parts to read them in one scan ChunkListBuilder builder = new ChunkListBuilder(); List<ConsecutivePartList> allParts = new ArrayList<ConsecutivePartList>(); ConsecutivePartList currentParts = null; for (ColumnChunkMetaData mc : block.getColumns()) { ColumnPath pathKey = mc.getPath(); ColumnDescriptor columnDescriptor = paths.get(pathKey); if (columnDescriptor != null) { OffsetIndex offsetIndex = ciStore.getOffsetIndex(mc.getPath()); OffsetIndex filteredOffsetIndex = filterOffsetIndex(offsetIndex, rowRanges, block.getRowCount()); for (OffsetRange range : calculateOffsetRanges(filteredOffsetIndex, mc, offsetIndex.getOffset(0))) { BenchmarkCounter.incrementTotalBytes(range.getLength()); long startingPos = range.getOffset(); // first part or not consecutive => new list if (currentParts == null || currentParts.endPos() != startingPos) { currentParts = new ConsecutivePartList(startingPos); allParts.add(currentParts); } ChunkDescriptor chunkDescriptor = new ChunkDescriptor(columnDescriptor, mc, startingPos, (int) range.getLength()); currentParts.addChunk(chunkDescriptor); builder.setOffsetIndex(chunkDescriptor, filteredOffsetIndex); } } } // actually read all the chunks for (ConsecutivePartList consecutiveChunks : allParts) { consecutiveChunks.readAll(f, builder); } for (Chunk chunk : builder.build()) { currentRowGroup.addColumn(chunk.descriptor.col, chunk.readAllPages()); } // avoid re-reading bytes the dictionary reader is used after this call if (nextDictionaryReader != null) { nextDictionaryReader.setRowGroup(currentRowGroup); } advanceToNextBlock(); return currentRowGroup; }\n\n    ### Response:",
        "ground_truth": "Reads all the columns requested from the row group at the current file position. It may skip specific pages based\non the column indexes according to the actual filter. As the rows are not aligned among the pages of the different\ncolumns row synchronization might be required. See the documentation of the class SynchronizingColumnReader for\ndetails.\n\n@return the PageReadStore which can provide PageReaders for each column\n@throws IOException\nif any I/O error occurs while reading",
        "predict": " Gets all the available custom prebuilt domains for all cultures.\n\n @param custom_headers [Hash{String => String}] A hash of custom headers that\n will be added to the HTTP request.\n\n @return [Array] operation results..\n\n    "
    },
    {
        "ID": 1989,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def flatten(image, bgcolor=None): \"\"\" Flatten an image, with an optional background color \"\"\" if bgcolor: background = PIL.Image.new('RGB', image.size, bgcolor) background.paste(image, mask=image.split()[3]) return background return image.convert('RGB')\n\n    ### Response: Flatten an image, with an optional background color.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    DictionaryPage readDictionary(ColumnChunkMetaData meta) throws IOException { if (!meta.getEncodings().contains(Encoding.PLAIN_DICTIONARY) && !meta.getEncodings().contains(Encoding.RLE_DICTIONARY)) { return null; } // TODO: this should use getDictionaryPageOffset() but it isn't reliable. if (f.getPos() != meta.getStartingPos()) { f.seek(meta.getStartingPos()); } PageHeader pageHeader = Util.readPageHeader(f); if (!pageHeader.isSetDictionary_page_header()) { return null; // TODO: should this complain? } DictionaryPage compressedPage = readCompressedDictionary(pageHeader, f); BytesInputDecompressor decompressor = options.getCodecFactory().getDecompressor(meta.getCodec()); return new DictionaryPage( decompressor.decompress(compressedPage.getBytes(), compressedPage.getUncompressedSize()), compressedPage.getDictionarySize(), compressedPage.getEncoding()); }\n\n    ### Response:",
        "ground_truth": "Reads and decompresses a dictionary page for the given column chunk.\n\nReturns null if the given column chunk has no dictionary page.\n\n@param meta a column's ColumnChunkMetaData to read the dictionary from\n@return an uncompressed DictionaryPage or null\n@throws IOException if there is an error while reading the dictionary",
        "predict": " Flatten an image, with an optional background color.\n\n    "
    },
    {
        "ID": 1990,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    protected function ensureTreeNodeIsOpen(string $nodeText, RemoteWebElement $context) { $I = $this->tester; $I->see($nodeText, self::$treeItemSelector); /** @var RemoteWebElement $context */ $context = $I->executeInSelenium(function () use ($nodeText, $context ) { return $context->findElement(\\WebDriverBy::xpath('//*[text()=\\'' . $nodeText . '\\']/..')); }); try { $context->findElement(\\WebDriverBy::cssSelector('.chevron.collapsed'))->click(); } catch (\\Facebook\\WebDriver\\Exception\\NoSuchElementException $e) { // element not found so it may be already opened... } catch (\\Facebook\\WebDriver\\Exception\\ElementNotVisibleException $e) { // element not found so it may be already opened... } return $context; }\n\n    ### Response: Search for an element with the given link text in the provided context.\n\n@param string $nodeText\n@param RemoteWebElement $context\n@return RemoteWebElement.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    synchronized void addWriter(InternalParquetRecordWriter writer, Long allocation) { Long oldValue = writerList.get(writer); if (oldValue == null) { writerList.put(writer, allocation); } else { throw new IllegalArgumentException(\"[BUG] The Parquet Memory Manager should not add an \" + \"instance of InternalParquetRecordWriter more than once. The Manager already contains \" + \"the writer: \" + writer); } updateAllocation(); }\n\n    ### Response:",
        "ground_truth": "Add a new writer and its memory allocation to the memory manager.\n@param writer the new created writer\n@param allocation the requested buffer size",
        "predict": " Search for an element with the given link text in the provided context.\n\n@param string $nodeText\n@param RemoteWebElement $context\n@return RemoteWebElement.\n\n    "
    },
    {
        "ID": 1991,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def handle_error(self, type_, value, tb): \"\"\"This method copies the code from pywsgi.WSGIHandler.handle_error, change the write part to be a reflection of traceback and environ \"\"\" if not issubclass(type_, pywsgi.GreenletExit): self.server.loop.handle_error(self.environ, type_, value, tb) if self.response_length: self.close_connection = True else: tb_stream = traceback.format_exception(type_, value, tb) del tb tb_stream.append('\\n') tb_stream.append(pprint.pformat(self.environ)) body = ''.join(tb_stream) headers = pywsgi._INTERNAL_ERROR_HEADERS[:] headers[2] = ('Content-Length', str(len(body))) self.start_response(pywsgi._INTERNAL_ERROR_STATUS, headers) self.write(body)\n\n    ### Response: This method copies the code from pywsgi.WSGIHandler.handle_error,\n        change the write part to be a reflection of traceback and environ.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    synchronized void removeWriter(InternalParquetRecordWriter writer) { if (writerList.containsKey(writer)) { writerList.remove(writer); } if (!writerList.isEmpty()) { updateAllocation(); } }\n\n    ### Response:",
        "ground_truth": "Remove the given writer from the memory manager.\n@param writer the writer that has been closed",
        "predict": " This method copies the code from pywsgi.WSGIHandler.handle_error,\n        change the write part to be a reflection of traceback and environ.\n\n    "
    },
    {
        "ID": 1992,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def apply(self, doc): \"\"\" Generate MentionCells from a Document by parsing all of its Cells. :param doc: The ``Document`` to parse. :type doc: ``Document`` :raises TypeError: If the input doc is not of type ``Document``. \"\"\" if not isinstance(doc, Document): raise TypeError( \"Input Contexts to MentionCells.apply() must be of type Document\" ) for cell in doc.cells: yield TemporaryCellMention(cell)\n\n    ### Response: Generate MentionCells from a Document by parsing all of its Cells.\n\n        :param doc: The ``Document`` to parse.\n        :type doc: ``Document``\n        :raises TypeError: If the input doc is not of type ``Document``..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void updateAllocation() { long totalAllocations = 0; for (Long allocation : writerList.values()) { totalAllocations += allocation; } if (totalAllocations <= totalMemoryPool) { scale = 1.0; } else { scale = (double) totalMemoryPool / totalAllocations; LOG.warn(String.format( \"Total allocation exceeds %.2f%% (%,d bytes) of heap memory\\n\" + \"Scaling row group sizes to %.2f%% for %d writers\", 100*memoryPoolRatio, totalMemoryPool, 100*scale, writerList.size())); for (Runnable callBack : callBacks.values()) { // we do not really want to start a new thread here. callBack.run(); } } int maxColCount = 0; for (InternalParquetRecordWriter w : writerList.keySet()) { maxColCount = Math.max(w.getSchema().getColumns().size(), maxColCount); } for (Map.Entry<InternalParquetRecordWriter, Long> entry : writerList.entrySet()) { long newSize = (long) Math.floor(entry.getValue() * scale); if(scale < 1.0 && minMemoryAllocation > 0 && newSize < minMemoryAllocation) { throw new ParquetRuntimeException(String.format(\"New Memory allocation %d bytes\" + \" is smaller than the minimum allocation size of %d bytes.\", newSize, minMemoryAllocation)){}; } entry.getKey().setRowGroupSizeThreshold(newSize); LOG.debug(String.format(\"Adjust block size from %,d to %,d for writer: %s\", entry.getValue(), newSize, entry.getKey())); } }\n\n    ### Response:",
        "ground_truth": "Update the allocated size of each writer based on the current allocations and pool size.",
        "predict": " Generate MentionCells from a Document by parsing all of its Cells.\n\n        :param doc: The ``Document`` to parse.\n        :type doc: ``Document``\n        :raises TypeError: If the input doc is not of type ``Document``..\n\n    "
    },
    {
        "ID": 1993,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def FUNCTION_DECL(self, cursor): \"\"\"Handles function declaration\"\"\" # FIXME to UT name = self.get_unique_name(cursor) if self.is_registered(name): return self.get_registered(name) returns = self.parse_cursor_type(cursor.type.get_result()) attributes = [] extern = False obj = typedesc.Function(name, returns, attributes, extern) for arg in cursor.get_arguments(): arg_obj = self.parse_cursor(arg) # if arg_obj is None: # code.interact(local=locals()) obj.add_argument(arg_obj) # code.interact(local=locals()) self.register(name, obj) self.set_location(obj, cursor) self.set_comment(obj, cursor) return obj\n\n    ### Response: Handles function declaration.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void registerScaleCallBack(String callBackName, Runnable callBack) { Preconditions.checkNotNull(callBackName, \"callBackName\"); Preconditions.checkNotNull(callBack, \"callBack\"); if (callBacks.containsKey(callBackName)) { throw new IllegalArgumentException(\"The callBackName \" + callBackName + \" is duplicated and has been registered already.\"); } else { callBacks.put(callBackName, callBack); } }\n\n    ### Response:",
        "ground_truth": "Register callback and deduplicate it if any.\n@param callBackName the name of callback. It should be identical.\n@param callBack the callback passed in from upper layer, such as Hive.",
        "predict": " Handles function declaration.\n\n    "
    },
    {
        "ID": 1994,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public static function renderCss($options = []) { $result = ''; $list = []; $css = Application::get(array('layout', 'css')); if (!empty($css)) { asort($css); foreach ($css as $k=>$v) { $script = $k . (strpos($k, '?') !== false ? '&' : '?') . self::getVersion(); $list[] = $script; $result.= '<link href=\"' . $script . '\" rel=\"stylesheet\" type=\"text/css\" />'; } } // list is needed for ajax form reloads if (!empty($options['return_list'])) { return $list; } return $result; }\n\n    ### Response: Render css files\n\n@param array $options\nboolean return_list\n@return string.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void start() throws IOException { state = state.start(); LOG.debug(\"{}: start\", out.getPos()); out.write(MAGIC); }\n\n    ### Response:",
        "ground_truth": "start the file\n@throws IOException if there is an error while writing",
        "predict": " Render css files\n\n@param array $options\nboolean return_list\n@return string.\n\n    "
    },
    {
        "ID": 1995,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public function getData($name, $default = null) { if (!isset($this->data[$name])) { $this->data[$name] = $default; } else { if (is_array($this->data[$name])) { $this->data[$name] = new GridState_Data($this->data[$name]); } } return $this->data[$name]; }\n\n    ### Response: Retrieve the value for the given key\n\n@param string $name The name of the value to retrieve\n@param mixed $default Default value to assign if not set\n@return mixed The value associated with this key, or the value specified by $default if not set.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void startBlock(long recordCount) throws IOException { state = state.startBlock(); LOG.debug(\"{}: start block\", out.getPos()); // out.write(MAGIC); // TODO: add a magic delimiter alignment.alignForRowGroup(out); currentBlock = new BlockMetaData(); currentRecordCount = recordCount; currentColumnIndexes = new ArrayList<>(); currentOffsetIndexes = new ArrayList<>(); }\n\n    ### Response:",
        "ground_truth": "start a block\n@param recordCount the record count in this block\n@throws IOException if there is an error while writing",
        "predict": " Retrieve the value for the given key\n\n@param string $name The name of the value to retrieve\n@param mixed $default Default value to assign if not set\n@return mixed The value associated with this key, or the value specified by $default if not set.\n\n    "
    },
    {
        "ID": 1996,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def json_rpc_format(self): \"\"\" return the Exception data in a format for JSON-RPC \"\"\" error = { 'name': smart_text(self.__class__.__name__), 'code': self.code, 'message': \"%s: %s\" % (smart_text(self.__class__.__name__), smart_text(self.message)), 'data': self.data } from django.conf import settings if settings.DEBUG: import sys, traceback error['stack'] = traceback.format_exc() error['executable'] = sys.executable return error\n\n    ### Response: return the Exception data in a format for JSON-RPC.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void startColumn(ColumnDescriptor descriptor, long valueCount, CompressionCodecName compressionCodecName) throws IOException { state = state.startColumn(); encodingStatsBuilder.clear(); currentEncodings = new HashSet<Encoding>(); currentChunkPath = ColumnPath.get(descriptor.getPath()); currentChunkType = descriptor.getPrimitiveType(); currentChunkCodec = compressionCodecName; currentChunkValueCount = valueCount; currentChunkFirstDataPage = out.getPos(); compressedLength = 0; uncompressedLength = 0; // The statistics will be copied from the first one added at writeDataPage(s) so we have the correct typed one currentStatistics = null; columnIndexBuilder = ColumnIndexBuilder.getBuilder(currentChunkType, columnIndexTruncateLength); offsetIndexBuilder = OffsetIndexBuilder.getBuilder(); firstPageOffset = -1; }\n\n    ### Response:",
        "ground_truth": "start a column inside a block\n@param descriptor the column descriptor\n@param valueCount the value count in this column\n@param compressionCodecName a compression codec name\n@throws IOException if there is an error while writing",
        "predict": " return the Exception data in a format for JSON-RPC.\n\n    "
    },
    {
        "ID": 1997,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    private void calculateCalendarHashChainOutput() throws KSIException { ChainResult lastRes = null; for (AggregationHashChain chain : aggregationChains) { if (lastRes == null) { lastRes = chain.calculateOutputHash(0L); } else { lastRes = chain.calculateOutputHash(lastRes.getLevel()); } LOGGER.debug(\"Output hash of chain: {} is {}\", chain, lastRes.getOutputHash()); } }\n\n    ### Response: This method is used to verify signature consistency..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void writeDictionaryPage(DictionaryPage dictionaryPage) throws IOException { state = state.write(); LOG.debug(\"{}: write dictionary page: {} values\", out.getPos(), dictionaryPage.getDictionarySize()); currentChunkDictionaryPageOffset = out.getPos(); int uncompressedSize = dictionaryPage.getUncompressedSize(); int compressedPageSize = (int)dictionaryPage.getBytes().size(); // TODO: fix casts metadataConverter.writeDictionaryPageHeader( uncompressedSize, compressedPageSize, dictionaryPage.getDictionarySize(), dictionaryPage.getEncoding(), out); long headerSize = out.getPos() - currentChunkDictionaryPageOffset; this.uncompressedLength += uncompressedSize + headerSize; this.compressedLength += compressedPageSize + headerSize; LOG.debug(\"{}: write dictionary page content {}\", out.getPos(), compressedPageSize); dictionaryPage.getBytes().writeAllTo(out); encodingStatsBuilder.addDictEncoding(dictionaryPage.getEncoding()); currentEncodings.add(dictionaryPage.getEncoding()); }\n\n    ### Response:",
        "ground_truth": "writes a dictionary page page\n@param dictionaryPage the dictionary page\n@throws IOException if there is an error while writing",
        "predict": " This method is used to verify signature consistency..\n\n    "
    },
    {
        "ID": 1998,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def update_permissions(self, grp_name, resource, permissions): \"\"\" Update permissions for the group associated with the given resource. Args: grp_name (string): Name of group. resource (intern.resource.boss.Resource): Identifies which data model object to operate on permissions (list): List of permissions to add to the given resource Raises: requests.HTTPError on failure. \"\"\" self.project_service.set_auth(self._token_project) self.project_service.update_permissions(grp_name, resource, permissions)\n\n    ### Response: Update permissions for the group associated with the given resource.\n\n        Args:\n            grp_name (string): Name of group.\n            resource (intern.resource.boss.Resource): Identifies which data\n                model object to operate on\n            permissions (list): List of permissions to add to the given resource\n\n        Raises:\n            requests.HTTPError on failure..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void writeDataPage( int valueCount, int uncompressedPageSize, BytesInput bytes, Statistics statistics, long rowCount, Encoding rlEncoding, Encoding dlEncoding, Encoding valuesEncoding) throws IOException { long beforeHeader = out.getPos(); innerWriteDataPage(valueCount, uncompressedPageSize, bytes, statistics, rlEncoding, dlEncoding, valuesEncoding); offsetIndexBuilder.add((int) (out.getPos() - beforeHeader), rowCount); }\n\n    ### Response:",
        "ground_truth": "Writes a single page\n@param valueCount count of values\n@param uncompressedPageSize the size of the data once uncompressed\n@param bytes the compressed data for the page without header\n@param statistics the statistics of the page\n@param rowCount the number of rows in the page\n@param rlEncoding encoding of the repetition level\n@param dlEncoding encoding of the definition level\n@param valuesEncoding encoding of values\n@throws IOException if any I/O error occurs during writing the file",
        "predict": " Update permissions for the group associated with the given resource.\n\n        Args:\n            grp_name (string): Name of group.\n            resource (intern.resource.boss.Resource): Identifies which data\n                model object to operate on\n            permissions (list): List of permissions to add to the given resource\n\n        Raises:\n            requests.HTTPError on failure..\n\n    "
    },
    {
        "ID": 1999,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    def from_chess960_pos(cls: Type[BaseBoardT], sharnagl: int) -> BaseBoardT: \"\"\" Creates a new board, initialized with a Chess960 starting position. >>> import chess >>> import random >>> >>> board = chess.Board.from_chess960_pos(random.randint(0, 959)) \"\"\" board = cls.empty() board.set_chess960_pos(sharnagl) return board\n\n    ### Response: Creates a new board, initialized with a Chess960 starting position.\n\n        >>> import chess\n        >>> import random\n        >>>\n        >>> board = chess.Board.from_chess960_pos(random.randint(0, 959)).\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    void writeColumnChunk(ColumnDescriptor descriptor, long valueCount, CompressionCodecName compressionCodecName, DictionaryPage dictionaryPage, BytesInput bytes, long uncompressedTotalPageSize, long compressedTotalPageSize, Statistics<?> totalStats, ColumnIndexBuilder columnIndexBuilder, OffsetIndexBuilder offsetIndexBuilder, Set<Encoding> rlEncodings, Set<Encoding> dlEncodings, List<Encoding> dataEncodings) throws IOException { startColumn(descriptor, valueCount, compressionCodecName); state = state.write(); if (dictionaryPage != null) { writeDictionaryPage(dictionaryPage); } LOG.debug(\"{}: write data pages\", out.getPos()); long headersSize = bytes.size() - compressedTotalPageSize; this.uncompressedLength += uncompressedTotalPageSize + headersSize; this.compressedLength += compressedTotalPageSize + headersSize; LOG.debug(\"{}: write data pages content\", out.getPos()); firstPageOffset = out.getPos(); bytes.writeAllTo(out); encodingStatsBuilder.addDataEncodings(dataEncodings); if (rlEncodings.isEmpty()) { encodingStatsBuilder.withV2Pages(); } currentEncodings.addAll(rlEncodings); currentEncodings.addAll(dlEncodings); currentEncodings.addAll(dataEncodings); currentStatistics = totalStats; this.columnIndexBuilder = columnIndexBuilder; this.offsetIndexBuilder = offsetIndexBuilder; endColumn(); }\n\n    ### Response:",
        "ground_truth": "Writes a column chunk at once\n@param descriptor the descriptor of the column\n@param valueCount the value count in this column\n@param compressionCodecName the name of the compression codec used for compressing the pages\n@param dictionaryPage the dictionary page for this column chunk (might be null)\n@param bytes the encoded pages including page headers to be written as is\n@param uncompressedTotalPageSize total uncompressed size (without page headers)\n@param compressedTotalPageSize total compressed size (without page headers)\n@param totalStats accumulated statistics for the column chunk\n@param columnIndexBuilder the builder object for the column index\n@param offsetIndexBuilder the builder object for the offset index\n@param rlEncodings the RL encodings used in this column chunk\n@param dlEncodings the DL encodings used in this column chunk\n@param dataEncodings the data encodings used in this column chunk\n@throws IOException if there is an error while writing",
        "predict": " Creates a new board, initialized with a Chess960 starting position.\n\n        >>> import chess\n        >>> import random\n        >>>\n        >>> board = chess.Board.from_chess960_pos(random.randint(0, 959)).\n\n    "
    },
    {
        "ID": 2000,
        "prompt": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    func NewCredentials(c client.ConfigProvider, options ...func(*EC2RoleProvider)) *credentials.Credentials { p := &EC2RoleProvider{ Client: ec2metadata.New(c), } for _, option := range options { option(p) } return credentials.NewCredentials(p) }\n\n    ### Response: // NewCredentials returns a pointer to a new Credentials object wrapping\n// the EC2RoleProvider. Takes a ConfigProvider to create a EC2Metadata client.\n// The ConfigProvider is satisfied by the session.Session type..\n\n    ### Instruction:\n    Generate the method-level comment for the following java Code.\n\n    ### Input:\n    public void endBlock() throws IOException { state = state.endBlock(); LOG.debug(\"{}: end block\", out.getPos()); currentBlock.setRowCount(currentRecordCount); blocks.add(currentBlock); columnIndexes.add(currentColumnIndexes); offsetIndexes.add(currentOffsetIndexes); currentColumnIndexes = null; currentOffsetIndexes = null; currentBlock = null; }\n\n    ### Response:",
        "ground_truth": "ends a block once all column chunks have been written\n@throws IOException if there is an error while writing",
        "predict": " // NewCredentials returns a pointer to a new Credentials object wrapping\n// the EC2RoleProvider. Takes a ConfigProvider to create a EC2Metadata client.\n// The ConfigProvider is satisfied by the session.Session type..\n\n    "
    }
]